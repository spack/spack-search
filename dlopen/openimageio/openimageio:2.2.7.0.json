{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/CHANGES.md": "Release 2.2.7 (1 Oct 2020) -- compared to 2.2.6\n-------------------------------------------------\n* oiiotool new command: `--pastemeta` takes two images as arguments, and\n  appends all the metadata (only) from the first image onto the second\n  image's pixels and metadata, producing a combined image. #2708\n* TIFF: Fix broken reads of multi-subimage non-spectral files (such as\n  photometric YCbCr mode). #2692\n* Python: When transferring blocks of pixels (e.g., `ImageInput.read_image()`\n  or `ImageOutput.write_scanline()`), \"half\" pixels ended up mangled into\n  uint16, but now they use the correct numpy.float16 type. #2694\n* Python: The value passed to `attribute(name, typedesc, value)` can now be\n  a tuple, list, numpy array, or scalar value. #2695\n* `IBA::contrast_remap()` fixes bug that could crash for very large images\n  #2704\n* Warn about recommended minimum versions of some dependencies.\n* Windows fix: correct OIIO_API declaration on aligned_malloc, aligned_free\n  of platform.h. #2701\n* Fix oiiotool crash when --resize was used with multi-subimage files. #2711\n* Bug fix in Strutil::splits and splitsv: when input is the empty string,\n  the split should return no pieces. #2712\n* Support for libheif 1.9. #2724\n* TIFF: Fix spec() and spec_dimensions() for MIPmapped TIFF files, they\n  did not recognize being asked to return the specs for invalid subimage\n  indices. #2723\n* TIFF: add ability to output 1bpp TIFF files. #2722\n\n\nRelease 2.2 (1 Sept 2020) -- compared to 2.1\n----------------------------------------------\nNew minimum dependencies:\n* pybind11 >= 2.4.2\n* openjpeg >= 2.0 (if JPEG-2000 support is desired) #2555 (2.2.2)\n\nNew major features and public API changes:\n* Improved IOProxy support:\n    - ImageInput and ImageOutput now have direct API level support for IOProxy\n      in their `open()` and `create()` calls, as well as a new `set_ioproxy()`\n      method in these classes. #2434 (2.2.0)\n    - ImageBuf can now specify a proxy upon construction for reading, and for\n      writing via a `set_write_ioproxy()` method that applies to subsequent\n      `write` call.  #2477 (2.2.1).\n    - DPX input now supports IOProxy. #2659 #2665 (2.2.5)\n    - ImageCache (and ImageBuf backed by ImageCache) entries that use IOProxy\n      are careful not to fully \"close\" their proxies when trying to reclaim\n      space in the file cache (that would be bad, since the proxy can't be\n      re-opened). #2666 (2.2.5)\n* Improved support for multi-subimage files:\n    - oiiotool: Nearly all operations now allow an optional `:subimages=...`\n      modifier that restricts the operation to be performed on only a subset\n      of named or indexed subimages. See docs for details. #2582\n    - Python `ImageBuf.write()` variety added that takes an open\n      `ImageOutput`.  This is the key to writing a multi-subimage file (such\n      as a multi-part OpenEXR) using the Python ImageBuf interface. #2640\n      (2.2.4)\n    - Fixes to `--croptofull` and `-o` with multi-subimages. #2684 (2.2.6)\n* Python bindings:\n    - Python bindings have been added for missing ParamValue constructors.\n      We previously exposed the PV constructors from just a plain int, float,\n      or string, but there wasn't an easy way to construct from arbitrary\n      data like there is in C++. Now there is. #2417 (2.2.0)\n    - `ParamValueList.attribute()`, when being passed attributes containing\n      multiple values, now can have those values passed as Python lists and\n      numpy arrays (previously they had to be tuples). #2437 (2.1.11/2.2.0)\n    - `ImageBufAlgo.color_range_check()` is now available to the Python\n      bindings (was previously only C++). #2602 (2.2.3)\n    - New variety of `ImageBuf.write()` that takes an open `ImageOutput`.\n      This is the key to writing a multi-subimage file (such as a multi-part\n      OpenEXR) using the Python ImageBuf interface. #2640 (2.2.4)\n* ImageBuf:\n    - Easier direct use of IOProxy with ImageBuf: constructor and reset()\n      for file-reading ImageBuf now take an optional `IProxy*` parameter,\n      and a new `set_write_ioproxy()` method can supply an IOProxy for\n      subsequent `write()`. #2477 (2.2.1)\n    - Add `ImageBuf::setpixel()` methods that use cspan instead of ptr/len.\n      #2443 (2.1.10/2.2.0)\n    - Add \"missing\" `reset()` varieties so that every IB constructor has a\n      corresponding `reset()` with the same parameters and vice versa. #2460\n* ImageBufAlgo:\n    - New `repremult()` is like premult, but will not premult when alpha is\n      zero. #2447 (2.2.0)\n    - New `max()` and `min()` functions take the pixel-by-pixel maximum\n      or minimum of two images. #2470 (2.2.1)\n* ColorConfig: add OCIO \"role\" accessors. #2548\n* Low-res I/O of images to terminals that support full color and Unicode\n  characters. Just output to a file ending in \".term\", and it will convert\n  (on certain terminals) to an image displayed directly in the terminal.\n  #2631 (2.2.4)\n  Try:\n      `oiiotool myfile.exr -o out.term`\n\nPerformance improvements:\n* Greatly improved TextureSystem/ImageCache performance in highly threaded\n  situations where access to the cache was a main bottlenecks. In renders of\n  scenes with lots of texture access, with dozens of threads all contending\n  for the cache, we are seeing some cases of 30-40% reduction in total\n  render time. In scenes that are less texture-bottlenecked, or that don't\n  use huge numbers of threads, the improvement is more modest. #2433 (2.2.0)\n\nFixes and feature enhancements:\n* oiiotool:\n    - Intelligible error messages (rather than crashes) if you attempt to\n      create an image too big to fit in memory. #2414 (2.2.0)\n    - `--create` and `--proxy` take an additional optional modifier:\n      `:type=name` that specifies the type of buffer to be created (the\n      default, as usual, is to create an internal float-based buffer). #2414\n      (2.2.0)\n    - `-o` optional argument `:type=name` is a new (and preferred) synonym\n      for what used to be `:datatype=`. #2414 (2.2.0)\n    - `--autotrim` now correctly trims to the union of the nonzero regions\n      of all subimages, instead of incorrectly trimming all subimages to the\n      nonzero region of the first subimage. #2497 (2.2.1.2)\n    - `--subimage` now has an optional `:delete=1` modifier that causes the\n      operation to delete one named or indexed subimage (versus the default\n      behavior of extracing one subimage and deleting the others). #2575\n      (2.2.3)\n    - The list of dependent libraries (part of `oiiotool --help`) now\n      correctly reports the OpenEXR version. #2604 (2.2.3)\n    - Fix: `--eraseattrib` did not correctly apply to all subimages when\n      `-a` or `:allsubimages=1` were used. #2632 (2.2.4)\n* ImageBuf / ImageBufAlgo:\n    - Huge ImageBuf allocation failures (more than available RAM) now are\n      caught and treated as an ImageBuf error, rather than crashing with an\n      uncaught exception. #2414 (2.2.0)\n    - ImageBuf constructors that are passed an ImageSpec (for creating an\n      allocated writable IB or \"wrapping\" a user buffer) now check that the\n      spec passed has enough information to know the size of the buffer\n      (i.e., it will be recognized as an error if the width, height, depth,\n      channels, or data type have not been set validly). #2460\n    - Fix: `ImageBuf::getchannel()` did not honor its `wrap` parameter.\n      #2465 (2.2.1/2.1.12)\n    - Fix: `IBA::reorient()` and `IBA::computePixelHashSHA1()` did not honor\n      their `nthreads` parameter. #2465 (2.2.1/2.1.12)\n    - `resample()` has been modified to more closely match `resize` by using\n      clamp wrap mode to avoid a black fade at the outer edge of the\n      resampled area. #2481\n    - Fix: `ImageBuf::get_pixels()` did not honor the stride parameters.\n      #2487. (2.1.12/2.2.1)\n    - Fix `resize()` to avoid a crash / stack overflow in certain cases of\n      very big images and very large filter kernels. #2643 (2.2.4)\n    - Minor improvements to ImageBuf error formatting. #2653 (2.2.5)\n* ImageCache / TextureSystem / maketx:\n    - New IC/TS attribute \"trust_file_extensions\", if nonzero, is a promise\n      that all files can be counted on for their formats to match their\n      extensions, which eliminates some redundant opens and format checks\n      in the IC/TS and can reduce needless network/filesystem work. Use with\n      caution! #2421 (2.2.0)\n    - texture3d() fixed some cases where derivative results were not\n      correctly copied to the outputs. #2475 (2.2.1)\n    - `maketx`/`IBA::make_texture`: better error detection and messages when\n      using \"overscan\" textures with formats that can't support it properly.\n      (Punchline: only OpenEXR textures can do it.) #2521 (2.2.0)\n    - Fix possible redundant tile reads in multithread situations (harmless,\n      but makes for redundant I/O). #2557 (2.2.2)\n* Python:\n    - Fixed a bug that lost certain string arguments, especially when passing\n      a TypeDesc as its string equivalent. #2587 (2.1.16/2.2.3)\n    - Fixed broken bindings of ImageSpec.erase_attribute. #2654\n      (2.1.19/2.2.6)\n    - Fix missing ImageInput.read_image(). #2677 (2.1.19/2.2.6)\n* Exif read: guard better against out of range offsets, fixes crashes when\n  reading jpeg files with malformed exif blocks. #2429 (2.1.10/2.2.0)\n* Fix: `ImageSpec::erase_attribute()` did not honor its `searchtype`\n  parameter. #2465 (2.2.1/2.1.12)\n* Fix: Some ColorProcessor::apply() methods were not using their `chanstride`\n  parameters correctly. #2475 (2.1.12)\n* Fix: iinfo return code now properly indicates failures for files that\n  can't be opened. #2511 (2.2.2/2.1.13)\n* DPX:\n    - IOProxy reading is now supported. #2659 (2.2.5)\n    - DPX: Add support for reading DPX files from IOProxy (such as from a\n      memory buffer). #2659 #2665 (2.1.19/2.2.6)\n* HDR files:\n    - Improve performance when reading HDR files out of order (when combined\n      with ImageCache, observed to speed up out-of-order HDR reading by 18x).\n      #2662 (2.2.5)\n* JPEG:\n    - Fix resolution unit metadata that was not properly set in JPEG output.\n      #2516 (2.2.2/2.1.13)\n    - Fix loss of 'config' info upon close/reopen. #2549 (2.2.2)\n* OpenEXR:\n    - Add support for reading and writing float vector metadata. #2459 #2486\n    - Fix bug in the channel sorting order when channels are \"X\" and\n      \"Y\" (was reversing the order by confusing \"Y\" for \"luminance\"). #2595\n      (2.1.16/2.2.3)\n    - We no longer automatically rename the \"worldToNDC\" attribute to\n      \"worldtoscreen\" and vice versa. #2609 (2.2.4)\n* PNG:\n    - Fix loss of 'config' info upon close/reopen. #2549 (2.2.2)\n    - Add output configuration hint \"png:filter\" to control PNG filter\n      options. #2650 (2.2.5)\n    - Improved propagation of PNG write errors. #2655 (2.2.5)\n    - Tell libpng to turn off sRGB profile check, which has a known problem of\n      false positives. #2655 (2.2.5)\n    - New output option \"png:filter\" allows control of the PNG filter\n      options. #2650 (2.1.19/2.2.6)\n* Raw images:\n    - Support for new Canon .cr3 file, but only if you build against\n      libraw >= 0.20.0 developer snapshot. #2484 (2.2.1) #2613 (2.2.4)\n    - RAW input: set the \"raw:flip\" attribute if the underlying libraw did a\n      reorientation. #2572 (2.1.15/2.2.3)\n    - Avoid errors (in libraw) that resulted from multiple threads opening\n      raw files at the same time. #2633 (2.2.4)\n* RLA:\n    - Additional sanity checks and error checks/messages for detecting files\n      that might be first mistaken for RLA files, but actually are not.\n      #2600 (2.2.3)\n* TIFF:\n    - Internal improvements to handling metadata retrieval for certain\n      unusual tags. #2504 (2.2.2/2.1.13)\n    - Fix subtle bug when reading Exif directory in the header. #2540\n      (2.2.2)\n* Video files:\n    - Fix possible infinite loop in the FFMpeg-based reader. #2576\n      (2.1.15/2.2.3)\n\nDeveloper goodies / internals:\n* argparse.h:\n    - Complete overhaul of ArgParse to make it more like Python argparse.\n      Please read the extensive comments in argparse.h for documentation.\n      For now, the old ArgParse interface still works, but is considered\n      deprecated. #2531 (2.2.2) #2618 #2622 (2.2.4)\n* attrdelegate.h:\n    - New `as_vec<>` method returns the whole attribute as a std::vector.\n      #2528 (2.2.2)\n* filesystem.h:\n    - Catch previously uncaught exceptions that could happen in certain\n      Filesystem utility calls. #2522 (2.2.2/2.1.13)\n    - New `write_text_file()` convenience function for opening, writing, and\n      closing a text file all in one step. #2597 (2.2.3)\n* fmath.h:\n    - clamp() is 2x faster. #2491 (2.1.12/2.2.2)\n    - Very minor fix to OIIO::clamp(), shouldn't affect normal use with\n      floats at all, but fixed a subtle quasi-bug in OSL. #2594 (2.1.15/2.2.3)\n    - madd() is improved especially on platforms without fma hardware\n      #2492 (2.1.12/2.2.2)\n    - Perf improvements to `fast_sin`, `fast_cos` #2495 (2.1.12/2.2.2)\n    - New `safe_fmod()` is faster than std::fmod. #2495 (2.1.12/2.2.2)\n    - New `fast_neg` is faster than simple negation in many cases, if you\n      don't care that -(0.0) is 0.0 (rather than a true -0.0). #2495\n      (2.1.12/2.2.2)\n    - Add vint4, vint8, and vint16 versions of `clamp()`. #2617 (2.2.4)\n* oiioversion.h:\n    - Fix typo that left the OIIO_VERSION_RELEASE_TYPE symbol undefined.\n      #2616 (2.2.4/2.1.16)\n    - Add new `OIIO_MAKE_VERSION(maj,min,patch)` macro that constructs the\n      proper single integer code for a release version. #2641 (2.2.4/2.1.17)\n* paramlist.h:\n    - New `ParamValueList::find_pv()` method that is similar to `find()` but\n      returns a pointer rather than an iterator and nullptr if the attribute\n      is not found. #2527 (2.2.2/2.1.13)\n    - Add `get_indexed()` method to ParamValueList and AttrDelegate. #2526\n     (2.2.2/2.1.13)\n* platform.h:\n    - `OIIO_PRETTY_FUNCTION` definition is more robust for weird compilers\n      (will fall back to `__FUNCTION__` if all else fails). #2413 (2.2.0)\n    - `OIIO_ALIGN` definition is more robust, will fall back to C++11\n      alignas when not a compiler with special declspecs (instead of being\n      a compile time error!). #2412 (2.2.0)\n    - A variety of `OIIO_PRAGMA_...` macros have been added to help deal\n      with compiler-specific pragmas. #2467 (2.2.1)\n* simd.h:\n    - vfloat3 has added a `normalize()`, `length()`, and `length2()`\n      methods, to more closely match the syntax of Imath::Vec3f. #2437\n      (2.1.11/2.2.0)\n    - fix errors in vbool == and !=. #2463 (2.1.11/2.2.1)\n    - Add float3 versions of abs, sign, ceil, floor, and round (they already\n      existed for float4, float8, float16, but not float4). #2612 (2.2.4)\n    - Improved support for ARM NEON SIMD (caveat: this is still not well\n      tested). #2614 (2.2.4)\n    - Improve performance for many float8/int8 functions and operators when\n      running on only 4-wide hardware, by using two 4-wide instructions\n      instead of reverting to scalar. #2621\n* span.h:\n    - Allow the constructor from `std::vector` to allow vectors with custom\n      allocators. #2533 (2.2.2)\n* strutil.h / ustring.h:\n    - New `Strutil::concat()` and `ustring::concat()` concatenate two\n      strings, more efficiently than `sprintf(\"%s%s\")` by avoiding any\n      unnecessary copies or temporary heap allocations. #2478 (2.2.1)\n    - Strutil::upper() and lower() return all-upper and all-lowercase\n      versions of a string (like `to_lower` and `to_upper`, but not in-place\n      modifications of the existing string). #2525 (2.2.2/2.1.13)\n    - `Strutil::repeat()` has been internally rewritten to more efficient by\n      avoiding any unnecessary copies or temporary heap allocations. #2478\n      (2.2.1)\n* typedesc.h:\n    - TypeDesc has additional helpers of constexpr values TypeFloat2,\n      TypeVector2, TypeVector4, TypeVector2i, TypePointer. #2592 (2.1.16/2.2.3)\n* unordered_map_concurrent.h:\n    - Fix missing decrement of `size()` after `erase()`. #2624 (2.2.4)\n* More reshuffling of printf-style vs fmt-style string formatting. #2424\n  (2.2.0) #2649 (2.2.4)\n* Internals: changed a lot of assertions to only happen in debug build mode,\n  and changed a lot that happen in release builds to only print the error\n  but not force a termination. #2435 (2.1.11/2.2.0)\n* Internals: Replaced most uses of `boost::thread_specific_ptr` with C++11\n  `thread_local`. #2431 (2.2.0)\n* oiiotool: Big overhaul and simplification of internals. #2586 #2589 (2.2.3)\n\nBuild/test system improvements and platform ports:\n* CMake build system and scripts:\n    - New non-default CMake build flag `EXTRA_WARNINGS`, when turned on, will\n      cause gcc and clang to compile with -Wextra. This identified many new\n      warnings (mostly about unused parameters) and fixes were applied in\n      #2464, #2465, #2471, #2475, #2476. (2.2.1)\n    - FindOpenColorIO.cmake now correctly discerns the OCIO version (2.2.1),\n      and now sets up a true imported target. #2529 (2.2.2)\n    - FindOpenEXR.cmake has better detection of debug openexr libraries.\n      #2505 (2.2.2/2.1.13)\n    - Additional cmake controls to customize required vs optional\n      dependencies: `REQUIRED_DEPS` (list of dependencies normally optional\n      that should be treated as required) and `OPTIONAL_DEPS` (list of\n      dependencies normally required that should be optional). The main use\n      case is to force certain optional deps to be required for your studio,\n      to be sure that missing deps are a full build break, and not a\n      successful build that silently lacks features you need. #2507\n      (2.2.2/2.1.13)\n    - Fix exported cmake config file, it was not ensuring that the Imath\n      headers properly ended up in the config include path. #2515\n      (2.2.2/2.1.13)\n    - Change all CMake references to PACKAGE_FOUND to Package_Found (or\n      whatever capitalization matches the actual package name). #2569 (2.2.2)\n    - The exported CMake config files now set cmake variable\n      `OpenImageIO_PLUGIN_SEARCH_PATH` #2584 (2.1.16/2.2.3)\n    - Improved hints printed about missing dependencies. #2682 (2.2.6)\n* Dependency version support:\n    - Pybind11 is no longer auto-downloaded. It is assumed to be\n      pre-installed. A script `src/build-scripts/build_pybind11.bash` is\n      provided for convenience if you lack a system install. #2503 (2.2.2)\n      Bump the minimum pybind11 version that we accept, to 2.4.2 #2453,\n      and add fixes to allow support of pybind11 2.5. #2637 (2.2.4)\n    - fmt libray: Un-embed fmt headers. If they are not found on the system\n      at build time, they will be auto-downloaded. #2439 (2.2.0)\n    - Support for building against libraw 0.20. #2484 (2.2.1) #2580 (2.2.3)\n    - Build properly against OpenColorIO's current master (which is the\n      in-progress work on OCIO v2). #2530 (2.2.2)\n    - Fix static boost to not overlink on Windows. #2537 (2.2.2)\n    - Fix build breaks against TOT libtiff master, which had `#define`\n      clashes with our GPSTag enum values. #2539 (2.2.2)\n    - Ensure compatibility and clean builds with clang 10. #2518 (2.2.2/2.1.3)\n    - Support verified for gcc 10, added to CI tests. #2590 (2.2.3)\n    - Support for Qt 5.15. #2605 (2.2.3)\n    - Fixes to support OpenColorIO 2.0. #2636 (2.2.4)\n    - Build against more recent versions of fmtlib. #2639 (2.2.4)\n    - Included scripts to download and build libtiff #2543 (2.1.13/2.2.2),\n      PugiXML #2648 (2.2.4), zlib, libpng, libjpeg-turbo. #2663 (2.2.5)\n    - Minor fixes for libheif 1.8. #2685 (2.2.6)\n    - Add a build_libtiff.bash script to make it easy to build the libtiff\n      dependency. #2543 (2.1.13/2.2.2)\n    - \"tinyformat\" is no longer used, even optionally. We have switched\n      entirely to fmtlib, which is more similar to the upcoming C++20\n      std::format. #2647 (2.2.4)\n* Testing and Continuous integration (CI) systems:\n    - Mostly retire TravisCI for ordinary Linux x64 and Mac builds, now we\n      rely on GitHub Actions CI. Nightly test added. Use ASWF docker images\n      to test exactly against VFX Platform 2019 and 2020 configurations.\n      #2563 (2.2.2) #2579 (2.2.3)\n    - Add Travis test for arm64 (aka aarch64) builds. This is still a work\n      in progress, and not all testsuite tests pass. #2634 (2.2.4)\n    - Our CI tests now have a \"bleeding edge\" matrix entry that tests against\n      the current TOT master build of libtiff, openexr (#2549), and pybind11\n      (#2556). (2.2.2)\n    - GitHub CI tests, when they fail, leave behind an \"artifact\" tar file\n      containing the output of the tests, so that they can be easily\n      downloaded and inspected (or used to create new reference output).\n      #2606 (2.2.4)\n    - CI Mac tests switch to Python 3.8. (2.2.4)\n    - Windows CI switched from using Vcpkg to building its own dependencies.\n      #2663 (2.2.5)\n    - Testing of TGA now assumes the test images are in the oiio-images\n      project, not separately downloaded (the download location disappeared\n      from the net). #2512 (2.2.2)\n    - Beef up OpenEXR compliance tests, many more examples from\n      openexr-images, including many corrupted image failure cases. #2607\n      (2.2.4)\n* Progress on support for using Conan for dependency installation. This is\n  experimental, it can't yet build all dependencies. Work in progress.\n  #2461 (2.2.1)\n* The version of gif.h that we embed for GIF output has been updated.\n  #2466 (2.2.1)\n* The `farmhash` functions have been cleaned up to be more careful that none\n  of their internal symbols are left visible to the linker. #2473 (2.2.1)\n* Clarification about .so name versioning: In supported releases, .so\n  contains major.minor, but in master (where ABI is not guaranteed stable,\n  we name major.minor.patch). #2488 (2.2.1)\n* Protect against certain compiler preprocessor errors for user programs\n  that include strutil.h but also include `fmt` on its own. #2498.\n  (2.1.12/2.2.2)\n* Build: All the `build_foo.bash` helper scripts now use `set -ex` to ensure\n  that if any individual commands in the script fails, the whole thing will\n  exit with a failure. #2520 (2.2.2/2.1.3)\n* Fix compiler warning about incorrect extra braces. #2554 (2.2.2)\n* All build-scripts bash scripts now use /usr/bin/env to find bash. #2558\n  (2.2.2)\n* Avoid possible link errors by fully hiding IBA functions taking IplImage\n  parameters, when no OpenCV headers are encountered. #2568 (2.2.2)\n* In (obsolete) FindOpenImageIO.cmake, avoid CMake warnings by changing\n  the name `OPENIMAGEIO_FOUND` -> `OpenImageIO_FOUND`. #2578 (2.2.3)\n* Moved headers that are not part of OIIO's supported public API, but that\n  still must be installed to be transitively included, do a \"detail\"\n  subdirectory. #2648 (2.2.4)\n* Fix many Mingw compiler warnings. #2657 (2.1.19/2.2.5)\n* Windows: Improve Strutil::get_rest_arguments() handling of long path\n  syntax (`\"\\\\?\\\"` style). #2661 (2.1.19/2.2.6)\n* Fix compilation error with armv7 + x86. #2660 (2.2.6)\n\nNotable documentation changes:\n* Many enhancements in the ImageBuf chapter. #2460 (2.1.11/2.2.0)\n* The `LICENSE-THIRD-PARTY.md` file has been reorganized to be clearer,\n  grouping parts with identical licenses. #2469 (2.2.1) And renamed to\n  \"THIRD-PARTY.md\" to avoid confusing GitHub's reporting of the project's\n  license. (2.2.6)\n* Many fixes to the new readthedocs documentation, especially fixes to\n  section cross-references and links.\n* Improved INSTALL instructions. (2.2.2/2.1.13)\n* Fix a variety of breaks on ReadTheDocs. #2581\n* Improve the way we discuss optional modifiers.\n* Document the PNG output controls for compression level. #2642 (2.2.4)\n* Lots of spell check / typo fixes in docs and comments. #2678 (2.2.6)\n* INSTALL.md: remove misleading old Windows build instructions. #2679 (2.2.6)\n* New file .git-blame-ignore-revs lists the hashes of commits that only\n  performed bulk reformatting, so that they don't misattribute authorship\n  or modification date. Everybody do this in your local repo:\n  `git config blame.ignoreRevsFile .git-blame-ignore-revs`\n  #2683 (2.2.6)\n\n\nRelease 2.1.20 (1 Oct 2020) -- compared to 2.1.19\n-------------------------------------------------\n* Windows: make sure aligned_malloc and aligned_free are properly declared\n  as OIIO_API. #2701\n* Support for libheif 1.8 and 1.9. #2685 #2724\n* Fix crash in IBA::contrast_remap for very large images. #2704\n* Bug fix in Strutil::splits and splitsv: when input is the empty string,\n  the split should return no pieces. #2712\n\nRelease 2.1.19 (1 Sep 2020) -- compared to 2.1.18\n-------------------------------------------------\n* DPX: Add support for reading DPX files from IOProxy (such as from a memory\n  buffer). #2659 #2665\n* PNG: New output option \"png:filter\" allows control of the PNG filter\n  options. #2650\n* Python: Fix binding of ImageSpec.erase_attribute. #2654\n* Python: Fix missing ImageInput.read_image(). #2677\n* Windows: Improve Strutil::get_rest_arguments() handling of long path\n  syntax (`\"\\\\?\\\"` style). #2661\n* MinGW: Fix a variety of compiler warnings on this platform. #2657\n* Fix build on Elbrus 2000 architecture. #2671\n\nRelease 2.1.18 (1 Aug 2020) -- compared to 2.1.17\n-------------------------------------------------\n* Python `ImageBuf.write()` added a variety that takes an open ImageOutput.\n  This is the key to writing multi-subimage files from Python. #2640\n* `oiiotool --eraseattrib` fixed: was not applying to all subimages. #2632\n* RAW: Improve thread safety when more than one thread might be opening\n  different raw files at the same time. #2633\n* unordered_map_concurrent fixed a missing size decrement upon erase(). #2624\n* Fixes to support certain recent pybind11 changes. #2637\n* Fixes to support OpenColorIO v2. #2636\n* Fixes to support more recent fmtlib versions. #2639\n* PNG: document the \"png:compressionLevel\" output hint. #2642\n* In oiioversion.h, add a `OIIO_MAKE_VERSION` macro that constructs the\n  integer code for a particular major/minor/patch release. #2641\n* 2.1.18.1: Fix version number which for 2.1.18.0 unfortunately still\n  said it was 2.1.17.\n\nRelease 2.1.17 (1 Jul 2020) -- compared to 2.1.16\n-------------------------------------------------\n* Build: Use the discovered python binary name, to address the Fedora\n  restriction that you must use \"python2\" or \"python3\" by name. #2598\n* Docs: ImageBufAlgo::nonzero_region had been inadvertently left out of the\n  Python chapter.\n* Improve RLA reader's ability to detect corrupt or non-RLA files, which\n  fixes crashes you could get from trying to read non-image files. #2600\n* Support for building against Qt 5.15. (Note: Qt support is only needed\n  for the \"iv\" viewer.) #2605\n* Fixes to support LibRaw 0.20 (which is currently in beta3). Note that this\n  will make it incompatible with 0.20 beta1 and beta2, due to a fixed typo\n  of a struct field in one of the LibRaw's headers. #2613\n* oiioversion.h: fix typo that left the OIIO_VERSION_RELEASE_TYPE symbol\n  undefined. #2616\n\nRelease 2.1.16 (1 Jun 2020) -- compared to 2.1.15\n-------------------------------------------------\n* OpenEXR: Fix bug in the channel sorting order when channels are \"X\" and\n  \"Y\" (was reversing the order by confusing \"Y\" for \"luminance\"). #2595\n* Python: Fixed a bug that lost certain string arguments, especially when\n  passing a TypeDesc as its string equivalent. #2587\n* fmath: Very minor fix to OIIO::clamp(), shouldn't affect normal use with\n  floats at all, but fixed a subtle quasi-bug in OSL. #2594\n* TypeDesc has additional helpers of constexpr values TypeFloat2,\n  TypeVector2, TypeVector4, TypeVector2i, TypePointer. #2592\n* Build: The exported CMake config files now set cmake variable\n  `OpenImageIO_PLUGIN_SEARCH_PATH` #2584\n* Docs: improvements and fixes to broken page rendering.\n\nRelease 2.1.15 (11 May 2020) -- compared to 2.1.14\n--------------------------------------------------\n* RAW input: set the \"raw:flip\" attribute if the underlying libraw did a\n  reorientation. #2572\n* Movie files: Fix possible infinite loop in the FFMpeg-based reader. #2576\n* Fixes to allow building against the forthcoming LibRaw 0.20 release. #2484\n* Documentation fixes. #2581\n\nRelease 2.1.14 (1 May 2020) -- compared to 2.1.13\n-------------------------------------------------\n* JPEG & PNG: Fix loss of 'config' hints upon close and reopen that could\n  happen in cases where scanlines were accessed out of order. #2549\n* TIFF: Fix subtle bug when reading certain Exif directories in the header.\n  #2540\n* Added OCIO role accessors to the ColorConfig class. #2548\n* Improve error messages when overscan textures are not possible. #2521\n* Build: fix problems when compiling against current libtiff master (symbol\n  clash on GPSTAG values). #2539\n* Build: Fix static boost to not overlink. #2537.\n* Fix some problems with the docs. #2541\n* `AttrDelegate::as_vec<>` returns the whole attribute as a std::vector.\n  #2528\n* Add a build_libtiff.bash script to make it easy to build the libtiff\n  dependency. #2543\n\nRelease 2.1.13 (1 Apr 2020) -- compared to 2.1.12\n-------------------------------------------------\n* Fix: iinfo return code now properly indicates failures for files that\n  can't be opened. #2511\n* Fix: Catch previously uncaught exceptions that could happen in certain\n  Filesystem utility calls. #2522\n* Fi: Some `span<>` methods involving `std::vector` now will work properly\n  with vectors that have custom allocators. #2533\n* Fix: ParamValueList `add_or_replace()` was failing to \"replace\" if the new\n  attribute had a different type than the existing one. #2527\n* Fix: Fix resolution unit metadata that was not properly set in JPEG output.\n  #2516\n* Build: Additional cmake controls to customize required vs optional\n  dependencies -- `REQUIRED_DEPS` (list of dependencies normally optional\n  that should be treated as required) and `OPTIONAL_DEPS` (list of\n  dependencies normally required that should be optional). The main use case\n  is to force certain optional deps to be required for your studio, to be\n  sure that missing deps are a full build break, and not a successful build\n  that silently lacks features you need. #2507\n* Build: Fix exported config file, it was not ensuring that the Imath\n  headers properly ended up in the config include path. #2515\n* Build: Ensure compatibility and clean builds with clang 10. #2518\n* Build: All the `build_foo.bash` helper scripts now use `set -ex` to ensure\n  that if any individual commands in the script fails, the whole thing will\n  exit with a failure. #2520\n* Build correctly against the current master branch of OpenColorIO\n  (previously we were only testing and properly building against the 1.1\n  release). #2530\n* Added Strutil::upper() and lower() functions. #2525\n* ParamValueList enhancement: new `find_pv()` method that is similar to\n  `find()` but returns a pointer rather than an iterator and nullptr if the\n  attribute is not found. #2527\n* Add `get_indexed()` method to ParamValueList and AttrDelegate. #2526\n\nRelease 2.1.12 (2 Mar 2020) -- compared to 2.1.11\n-------------------------------------------------\n* Fix: plugin.h getsym() didn't pass along its report_error param. #2465\n* Fix: ImageBuf::getchannel() did not honor its wrap parameter. #2465\n* Fix: ImageSpec::erase_attribute() did not honor its `searchtype` param. #2465\n* Fix: IBA::reorient() and IBA::computePixelsHashSHA1() did not honor their\n  `nthreads` parameter. #2465.\n* IBA::resample() now uses the clamp wrap mode to avoid black fringing and\n  match the behavior of resize(). #2481\n* Fix: ImageBuf::get_pixels() did not honor the stride parameters. #2487.\n* fmath.h perf improvements: clamp() is 2x faster; madd() is improved\n  especially on platforms without fma hardware; perf improvements in\n  `fast_sin`, `fast_cos`; new `safe_fmod` is faster than std::fmod, new\n  `fast_neg` is faster than simple negation in many cases, if you don't care\n  that -(0.0) is 0.0 (rather than a true -0.0). #2491 #2492 #2494\n* strutil: New function: concat(). #2478\n* Build: un-embed the 'fmt' headers, instead auto-download if not found.\n  #2439\n* Build: Protect against certain compiler preprocessor errors for user\n  programs that include strutil.h but also include `fmt` on its own. #2498.\n\nRelease 2.1.11 (1 Feb 2020) -- compared to 2.1.10\n-------------------------------------------------\n* Python bindings for `ParamValueList.attribute()`, when being passed\n  attributes containing multiple values, now can have those values passed\n  as Python lists and numpy arrays (previously they had to be tuples).\n  #2437\n* OpenEXR support is extended to handle float vector metadata. #2459\n* Developer goody: simd.h vfloat3 has added a `normalize()`, `length()`,\n  and `length2()` methods, to more closely match the syntax of Imath::Vec3f.\n  #2437\n* Internals: changed a lot of assertions to only happen in debug build mode,\n  and changed a lot that happen in release builds to only print the error\n  but not force a termination. #2435\n* simd.h fix errors in vbool == and !=. #2463\n* Make sure the embedded 'farmhash' implementation is completely hidden\n  behind proper namespaces. #2473\n* Many docs fixes.\n\nRelease 2.1.10.1 (10 Jan 2019)\n------------------------------\n* Automatically detect the need to link against libatomic (fixes build on\n  some less common platforms, should not affect Windows, MacOS, or Linux on\n  x86/x86_64 users). #2450 #2455\n* Fixes to unordered_map_concurrent.h that affect some users who it for\n  things other than OIIO per se (recent changes to the internals broke its\n  use for the default underlying std::unordered_map). #2454\n* Bump the minimum pybind11 version that we auto-download, and also be sure\n  to auto-download if pybind11 is found on the system already but is not an\n  adequately new version. #2453\n* If libsquish is found on the system at build time, use it, rather than\n  the \"embedded\" copy. This can improve build times of OIIO, and also helps\n  us comply with Debian packaging rules that forbid using embedded versions\n  of other Debian packages that can be used as simple dependencies. #2451\n* Fixes to formatting of man page generation (resolves warnings on Debian\n  build process).\n\nRelease 2.1.10 (1 Jan 2020) -- compared to 2.1.9\n--------------------------------------------------\n* Suppress warnings with old libraw on earlier gcc versions. #2413\n* Exif read: guard better against out of range offests, fixes crashes when\n  reading jpeg files with malformed exif blocks. #2429\n* Python: add binding for missing ParamValue constructors. #2417\n* oiiotool & ImageBuf better error messages (rather than mysterious crash)\n  for certain out of memory conditions. #2414\n* oiiotool --create and --pattern take a new optional parameter:\n  `:type=name` that overrides the default behavior of allocating all\n  internal buffers as float. #2414\n* Lots of typo fixes in docs, comments, and error messages. #2438\n* Fix broken version in the built openimageio.pc PkgConfig file. #2441\n* Fix typo in build script that caused it to fail to set the right symbol\n  definition when building static libs. #2442.\n* More robust OIIO_PRETTY_FUNCTION definition. #2413\n* Better fallback for OIIO_ALIGN, rely on C++11. #2412\n* Docs: fix some II and IO chapter examples that used old open() API.\n* Build: bump default version of pybind11 to 2.4.3. #2436\n* Add ImageBuf::setpixel() methods that use cspan instead of ptr/len. #2443\n* Fixes to cmake config generation. #2448\n\n\nRelease 2.1 (8 Dec 2019) -- compared to 2.0\n----------------------------------------------\nNew minimum dependencies:\n* CMake minimum is now 3.12. #2348 (2.1.5)\n\nMajor new features and performance improvements:\n* Support for HEIC/HEIF images. HEIC is the still-image sibling of HEVC\n  (a.k.a. H.265), and compresses to about half the size of JPEG but with\n  higher visual quality. #2160 #2188 (2.1.0)\n* oiiotool new commands: `-evaloff` `-evalon` `--metamerge` `--originoffset`\n* ImageCache/TextureSystem improved perf of the tile and file caches under\n  heavy thread contention. In the context of a renderer, we have seen\n  improvements of around 7% in overall render time, averaged across a suite\n  of typical production scenes.  #2314, #2316 (2.1.3) #2381 #2407 (2.1.8)\n* Fix huge DPX reading performance regression. Technically this is a bug\n  fix that restores performance we once had, but it's a huge speedup.\n  #2333 (2.1.4)\n* Reading individual frames from very-multi-image files (movie files) has\n  been greatly sped up (10x or more). #2345 (2.1.4)\n\nPublic API changes:\n* ImageSpec new methods `getattribute()` and `getattributetype()`. #2204\n  (2.1.1)\n* ImageSpec and ParamValueList now support operator `[\"name\"]` as a way\n  to set and retrieve attributes. For example,\n\n      myimagespec[\"compression\"] = \"zip\";\n      myimagespec[\"PixelAspectRatio\"] = 1.0f;\n      int dither = myimagespec[\"oiio:dither\"].get<int>();\n      std::string cs = myimagespec[\"colorspace\"];\n\n  See the documentation about \"Attribute Delegates\" for more information,\n  or the new header `attrdelegate.h`. #2204 (2.1.1) #2297 (2.1.3)\n* ImageSpec::find_attribute now will retrive \"datawindow\" and \"displaywindow\"\n  (type int[4] for images int[6] for volumes) giving the OpenEXR-like bounds\n  even though there is no such named metadata for OIIO (the results will\n  assembled from x, y, width, height, etc.). #2110 (2.1.0/2.0.4)\n* \"Compression\" names (where applicable) can now have the quality appended\n  to the name (e.g., `\"jpeg:85\"`) instead of requiring quality to be passed\n  as a separate piece of metadata. #2111 (2.1.0/2.0.5)\n* Python: define `__version__` for the module. #2096 (2.1.0/2.0.4)\n* Python error reporting for `ImageOutput` and `ImageBuf.set_pixels`\n  involving transferring pixel arrays have changed from throwing exceptions\n  to reporting errors through the usual OIIO error return codes and queries.\n  #2127 (2.1.0/2.0.5)\n* New shell environment variable `OPENIMAGEIO_OPTIONS` can now be used to\n  set global `OIIO::attribute()` settings upon startup (comma separated\n  name=value syntax). #2128 (2.1.0/2.0.5)\n* ImageInput open-with-config new attribute `\"missingcolor\"` can supply\n  a value for missing tiles or scanlines in a file in lieu of treating it\n  as an error (for example, how OpenEXR allows missing tiles, or when reading\n  an incompletely-written image file). A new global `OIIO::attribute()`\n  setting (same name) also accomplishes the same thing for all files read.\n  Note that this is only advisory, and not all file times are able to do\n  this (OpenEXR is the main one of interest, so that works). #2129 (2.1.0/2.0.5)\n* `ImageCache::invalidate()` and `TextureSystem::invalidate()` now take an\n  optional `force` parameter (default: true) that if false, will only\n  invalidate a file if it has been updated on disk since it was first opened.\n  #2133, #2166 (2.1.0/2.0.5)\n* New filter name `\"nuke-lanczos6\"` matches the \"lanczos6\" filter from Nuke.\n  In reality, it's identical to our \"lanczos3\", but the name alias is\n  supposed to make it more clear which one to use to match Nuke, which uses\n  a different nomenclature (our \"3\" is radius, their \"6\" is full width).\n  #2136 (2.1.0/2.0.5)\n* New helper functions in `typedesc.h`: `tostring()` converts nearly any\n  TypeDesc-described data to a readable string, `convert_type()` does data\n  type conversions as instructed by TypeDesc's. #2204 (2.1.1)\n* ImageBuf:\n    - Construction from an ImageSpec now takes an optional `zero` parameter\n      that directly controls whether the new ImageBuf should have its buffer\n      zeroed out or left uninitialized. #2237 (2.1.2)\n    - `set_write_format()` method has a new flavor that takes a\n      `cspan<TypeDesc>` that can supply per-channel data types. #2239 (2.1.1)\n* ColorConfig:\n    - Added `getColorSpaceFamilyByName()`, `getColorSpaceNames()`,\n      `getLookNames()`, `getDisplayNames()`, `getDefaultDisplayName()`,\n      `getViewNames()`, `getDefaultViewName()`. #2248 (2.1.2)\n    - Added Python bindings for ColorConfig. #2248 (2.1.2)\n* Formal version numbers are now four parts: MAJOR.MINOR.PATCH.TWEAK.\n  #2313,#2319 (2.1.3)\n* ImageInput now sets \"oiio:subimages\" attribute to an int representing the\n  number of subimages in a multi-image file -- if known from reading just\n  the header. A positive value can be relied upon (including 1), but a\n  value of 0 or no such metadata does not necessarily mean there are not\n  multiple subimages, it just means it could not be known from inexpensively\n  reading only the header. #2344 (2.1.4)\n* The `imagesize_t` and `stride_t` values now have revised definitions.\n  It should be fully API/ABI compatible (at least for 64 bit systems), but\n  is a simpler, more modern, more platform-independent definition.\n  #2351 (2.1.5)\n* `DeepData` has been altered to make pixel indices and total counts int64_t\n  rather than int, in order to be safe for very large images that have > 2\n  Gpixels. #2363 (2.1.5)\n* On OSX, we now expect non-embedded plugins to follow the convention of\n  naming runtime-loaded modules `foo.imageio.so` (just like on Linux),\n  whereas we previously used the convention of `foo.imageio.dylib`. Turns\n  out that dylib is supposed to be only for shared libraries, not runtime\n  loadable modules. #2376 (2.1.6)\n\nFixes and feature enhancements:\n* oiiotool:\n    - New `-evaloff` and `-evalon` lets you disable and enable the expression\n      substitution for regions of arguments (for example, if you have an\n      input image filename that contains `{}` brace characters that you want\n      interpreted literally, not evaluated as an expression). #2100 (2.1.0/2.0.4)\n    - `--dumpdata` has more intelligible output for uint8 images. #2124\n       (2.1.0/2.0.4)\n    - Fixed but that could prevent `-iconvert oiio:UnassociatedAlpha 1` from\n      correctly propagating to the input reader. #2172 (2.1.0/2.0.6)\n    - `-o:all=1` (which outputs all subimages to separate files) fixed a\n      crash that would occur if any of the subimages were 0x0 (it could\n      happen; now it just skips outputting those subimages). #2171 (2.1.0)\n    - Improved support of files with multiple subimages: Several commands\n      honored `-a` but did not respect individual `allsubimages=` modifiers\n      (--ch, --sattrib, --attrib, --caption, --clear-keywords,\n      --iscolorspace, --orientation, --clamp, -fixnan); Several commands\n      always worked on all subimages, but now properly respect `-a` and\n      `allsubimages=` (--origin, --fullpixels, --croptofull, --trim);\n      Several commands were totally unaware of subimages, but now are so and\n      respect `-a` and `allsubimages=` (--crop, --fullsize, --zover, --fill,\n      --resize, --resample). #2202 #2219, #2242 (2.1.1, 2.1.2)\n    - `--ociodisplay`: empty display or view names imply using the default\n      display or view. #2273 (2.0.10/2.1.3)\n    - `--metamerge` option causes binary image operations to try to \"merge\"\n      the metadata of their inputs, rather than simply copy the metadata\n      from the first input and ignore the others. #2311 (2.1.3)\n    - `--colormap` now supports a new \"turbo\" color map option. #2320 (2.1.4)\n    - Expression evaluation has been extended to support operators `//` for\n      integer division (whereas `/` is floating point division), and `%`\n      for integer modulus. #2362 (2.1.5)\n    - New `--originoffset` resets the data window origin relative to its\n      previous value (versus the existing `--origin` that sets it absolutely).\n      #2369 (2.1.5)\n    - `--paste` has two new optional modifiers: `:all=1` pastes the entire\n      stack of images together (versus the default of just pasting the top\n      two images on the stack), and `:mergeroi=1` causes the result to have\n      the merged data window of all inputs, instead of the foreground image\n      clipping against the boundary of the background image data. #2369 (2.1.5)\n    - `--paste` now works with deep images. #2369 (2.1.5)\n    - `--paste` semantics have changed: the meaning of pasting FG into BG at\n      (x,y) now means that the (0,0) origin of FG ends up at (x,y), whereas\n      before it placed the corner of FG's data window at (x,y). This will\n      not change behavior for ordinary images where FG's data window is (0,0),\n      but it makes behavior more sensible for \"cropped\" or \"shrink-wrapped\"\n      FG images that have non-zero data window origin. #2369 (2.1.5)\n    - `paste()` is now multithreaded and therefore much faster. #2369 (2.1.5)\n    - `--ociotransform` no longer issues an error message when no valid OCIO\n      configuration is found (because it's not needed for this operation).\n      #2371 (2.1.5)\n    - `--compare` would fail to notice differences in deep images where the\n      corresponding pixels had differing numbers of samples. #2381 (2.1.8)\n* ImageBuf/ImageBufAlgo:\n    - `IBA::channel_append()` previously always forced its result to be float,\n      if it wasn't previously initialized. Now it uses the usual type-merging\n      logic, making the result the \"widest\" type of the inputs. #2095\n      (2.1.0/2.0.4)\n    - IBA `resize()`, `fit()`, and `resample()` are no longer restricted to\n      source and destination images having the same number of channels.\n      #2125 (2.1.0/2.0.5)\n    - Improve numerical precision of the unpremult/premult part of certain\n      color transformations. #2164 (2.1.0)\n    - `ImageBuf::read()` now properly forwards the \"progress\" parameters\n      to any underlying call to `read_image`. #2196 (2.1.1)\n    - The `OIIO_DISPATCH_COMMON_TYPES2/3` macros used internally by many IBA\n      functions have been expanded to handle a few more cases \"natively\"\n      without conversion to/from float. This may make a few cases of odd\n      data type combinations have higher precision. #2203 (2.0.8/2.1.1)\n    - IBA `resize()` fix precision issues for 'double' images. #2211\n      (2.0.8/2.1.1)\n    - `IBA::ociodisplay()`: empty display or view names imply using the\n      default display or view. #2273 (2.0.10/2.1.3)\n    - `IBA::fixNonFinite()`: fixed impicit float/double casts to half. #2301\n      (2.0.10/2.1.3)\n    - `IBA::color_map()`:  now supports a new \"turbo\" color map option.\n      #2320 (2.1.4)\n    - `IBA::paste()` now works with deep images. #2369 (2.1.5)\n    - `paste` semantics have changed: the meaning of pasting FG into BG at\n      (x,y) now means that the (0,0) origin of FG ends up at (x,y), whereas\n      before it placed the corner of FG's data window at (x,y). This will\n      not change behavior for ordinary images where FG's data window is (0,0),\n      but it makes behavior more sensible for \"cropped\" or \"shrink-wrapped\"\n      FG images that have non-zero data window origin. #2369 (2.1.5)\n    - `paste()` is now multithreaded and therefore much faster. #2369 (2.1.5)\n    - `ociotransform()` no longer issues an error message when no valid OCIO\n      configuration is found (because it's not needed for this operation).\n      #2371 (2.1.5)\n    - Python `ociotransform` and `ociolook` mixed up the names and orders of\n      the `inverse` and `unpremult` params, making it so that you couldn't\n      properly specify the inverse. #2371 (2.1.5)\n    - `IBA::compare()` would fail to notice differences in deep images where\n      the corresponding pixels had differing numbers of samples. #2381 (2.1.8)\n* ImageInput read_image/scanline/tile fixed subtle bugs for certain\n  combination of strides and channel subset reads. #2108 (2.1.0/2.0.4)\n* ImageCache / TextureSystem / maketx:\n    - More specific error message when tile reads appear to be due to the\n      file having changed or been overwritten on disk since it was first\n      opened. #2115 (2.1.0/2.0.4)\n    - maketx: the `-u` (update mode) is slightly less conservative now,\n      no longer forcing a rebuild of the texture just because the file uses\n      a different relative directory path than last time. #2109 (2.1.0/2.0.4)\n    - Protection against certain divide-by-zero errors when using\n      very blurry latong environment map lookups. #2121 (2.1.0/2.0.5)\n    - `maketx -u` is smarter about which textures to avoid re-making because\n      they are repeats of earlier commands. #2140 (2.1.0/2.05)\n    - Fix possible maketx crash on Windows due to a stack overflow within\n      MSVS's implementation of std::regex_replace! #2173 (2.1.0/2.0.6)\n    - TS: New attribute \"max_mip_res\" limits filtered texture access to MIP\n      levels that are no higher than this resolution in any dimension. The\n      default is 1<<30, meaning no effective limit. #2174 (2.1.1)\n    - Stats now count the number of `TS::get_texture_info/IC::get_image_info`\n      calls, like it did before for texture, etc. #2223 (2.1.1)\n    - `TS::environment()` can resolve subimage by name, as we do for\n      texture() and texture3d(). #2263\n    - Improvements to error message propagation. (2.1.3)\n    - Avoid creating a new thread info struct while resolving udims. #2318\n      (2.1.4)\n    - Work around bug in OpenEXR, where dwaa/dwab compression can crash when\n      used on 1-channel tiled images with a tile size < 16. This can crop up\n      for MIP-maps (high levels where rez < 16), so we detect this case and\n      switch automatically to \"zip\" compression. #2378 (2.1.6)\n    - When converting images to texture (via maketx or IBA::make_texture),\n      correctly handle color space conversions for greyscale images.\n      #2400 (2.1.8)\n* iv viewer:\n    - Image info window now sorts the metadata, in the same manner as\n      `iinfo -v` or `oiiotool -info -v`. #2159 (2.1.0/2.0.5)\n* All command line utilities, when run with just `--help`, will exit with\n  return code 0. In other words, `utility --help` is not an error.\n  #2364 (2.1.5) #2383 (2.1.8)\n* Python bindings:\n    - Fix inability for Python to set timecode attributes (specifically, it\n      was trouble setting ImageSpec attributes that were unsigned int\n      arrays). #2279 (2.0.9/2.1.3)\n* Improved performance for ustring creation and lookup. #2315 (2.1.3)\n* BMP:\n    - Fix bugs related to files with very high resolution (mostly 32 bit\n      int overflow issues and care to use 64 bit fseeks). Also speed up\n      reading and writing very large files. #2404 (2.1.8)\n* DPX:\n    - Now recognizes the new transfer/colorimetric code for ADX. #2119\n      (2.1.0/2.0.4)\n    - Fix potential crash when file open fails. #2186 (2.0.7/2.1.1)\n    - Support for reading and writing 1-channel (luma, etc.) images. #2294\n      (2.0.10/2.1.3)\n    - Fix huge DPX reading performance regression. #2333 (2.1.4)\n    - Fix bugs related to int32 math that would lead to incorrect\n      behavior in very high-resolution files. #2396 (2.1.3)\n* ffmpeg/Movie files:\n    - Reading individual frames from very-multi-image files (movie files) has\n      been greatly sped up (10x or more). #2345 (2.1.4)\n    - Support for reading movie files that (a) contain alpha channels, and\n      (b) have bit depths > 8 bits per channel. Previously, such files\n      would be read, but would be presented to the app as a 3-channel\n      8 bit/channel RGB. #2349 (2.1.5)\n* FITS:\n    - Fix 16 and 32 bit int pixels which FITS spec says are signed, but we\n      were treating as unsigned. #2178 (2.1.0)\n* HDR/RGBE:\n    - Fix bugs related to files with very high resolution (mostly 32 bit\n      int overflow issues and care to use 64 bit fseek). Also speed up\n      reading and writing very large files. #2406 (2.1.8)\n* IFF\n    - Detect and error requests to open files for writing with resolutions\n      too high to be properly supported by IFF files. #2397 (2.1.8)\n    - Improve error messages when a file can't be opened. #2398 (2.1.8)\n* JPEG:\n    - Read-from-memory is now supported via IOProxy use. #2180. (2.1.1)\n* JPEG-2000:\n    - Disable JPEG-2000 support for the (rare) combination of an older\n      OpenJPEG 1.x and EMBEDPLUGINS=0 mode, which was buggy. The solution if\n      you really need EMBEDPLUGINS and JPEG-2000 support is to please use\n      OpenJPEG >= 2.0. #2183. (2.0.7/2.1.1)\n* OpenEXR:\n    - Avoid some OpenEXR/libIlmImf internal errors with DWA compression by\n      switching to zip for single channel images with certain small tile\n      sizes. #2147 (2.1.0/2.0.5)\n    - Suppress empty string subimage name (fixes a problem with certain\n      V-Ray written multi-part exr images). #2190 (2.1.1/2.0.7)\n    - Fixed bug that broke th ability to specify compression of multipart\n      OpenEXR files. #2252 (2.1.2)\n* PNG:\n    - More careful catching and reporting errors and corrupt PNG files.\n      #2167 (2.1.0/2.0.6)\n    - IOProxy reading is now supported. #2180. (2.1.1)\n* PSD:\n    - When reading PSD files with multiple PhotoShop \"layers\", properly set\n      ImageSpec x, y to the image plane offset (upper left corner) of the\n      layer, and set and metadata \"oiio:subimagename\" to the layer name.\n      #2170 (2.1.0)\n* RAW:\n    - Clarification about color spaces: The open-with-config hint\n      \"raw:ColorSpace\" is more careful about color primaries versus transfer\n      curve. Asking for \"sRGB\" (which is the default) gives you true sRGB --\n      both color primaries and transfer. Asking for \"linear\" gives you\n      linear transfer with sRGB/Rec709 primaries. The default is true sRGB,\n      because it will behave just like JPEG. #2260 (2.1.2)\n    - Added \"raw:half_size\" and \"raw:user_mul\" configuration attributes.\n      #2307 (2.1.3)\n* RLA:\n    - Improved logic for determining the single best data type to report\n      for all channels. #2282 (2.1.3)\n* SGI:\n    - Fix bugs when writing extremely high resolution images, due to\n      internal 32 bit arithmetic on file offsets. #2402 (2.1.8)\n    - Speed up reading and writing of SGI files. #2402 (2.1.8)\n* Targa:\n    - Put in checks to detect and error requests to write Targa with\n      resolutions too high to be supported by the format. #2405 (2.1.8)\n* TIFF:\n    - Fix problems with JPEG compression in some cases. #2117 (2.1.0/2.0.4)\n    - Fix error where reading just a subset of channels, if that subset did\n      not include the alpha channel but the image was \"unassociated alpha\",\n      the attempt to automatically associate (i.e. \"premultiply\" the alpha)\n      upon read would get bogus values because the alpha channel was not\n      actually read. Now in this case it will not do the premultiplication.\n      So if you are purposely reading RGB only from an RGBA file that is\n      specifically \"unassociated alpha\", beware that you will not get the\n      automatic premultiplication. #2122 (2.1.0/2.0.4)\n    - More careful check and error reporting when user tries to request\n      writing to a TIFF file mixed channel data types (which is not supported\n      by the underlying libtiff). #2112 (2.1.0/2.0.5)\n    - Fix crash reading certain old nconvert-written TIFF files.\n      #2207 (2.0.8/2.1.1)\n    - Fix bugs when reading TIFF \"cmyk\" files. #2292. (2.0.10/2.1.3)\n    - Correctly handle read and write of 6, 14, and 24 bit per sample\n      images. #2296 (2.1.3)\n    - Fix potential deadlock in TIFF I/O: minor flaw with threadpool method\n      #2327 (2.1.4)\n* WebP:\n    - Fix bug that gave totally incorrect image read for webp images that\n      had a smaller width than height. #2120 (2.1.0/2.0.4)\n* zfile:\n    - Put in checks to detect and error requests to write zfiles with\n      resolutions too high to be supported by the format. #2403 (2.1.8)\n* Fix potential threadpool deadlock issue that could happen if you were\n  (among possibly other things?) simultaneously calling make_texture from\n  multiple application threads. #2132 (2.1.0/2.0.4)\n* ImageInput/ImageOutput `create()` now properly lets you specify the type\n  for reader/writer from the format name itself (versus just the extension,\n  for example \"openexr\" versus \"exr\"). #2185 (2.1.1)\n* Make all the various \"could not open\" messages across the writers use the\n  same phrasing. #2189 (2.1.1)\n* Better care in some image readers/writers to avoid errors stemming from\n  integer overflow when compting the size of large images. #2232 (2.1.2)\n\nBuild/test system improvements and platform ports:\n* Major overhaul of the CMake build system now that our CMake minimum is\n  3.12. #2348 #2352 #2357 #2360 #2368 #2370 #2372 #2373 (2.1.5) #2392 (2.1.8)\n  Highlights:\n    - All optional dependencies (e.g. \"Pkg\") now can be disabled (even if\n      found) with cmake -DUSE_PKG=0 or environment variable USE_PKG=0.\n      Previously, some packages supported this, others did not.\n    - All dependencies can be given find hints via -DPkg_ROOT=path or by\n      setting environment variable Pkg_ROOT=path. Previously, some did, some\n      didn't, and the ones that did had totally inconsistent names for the\n      path hint variable (PKG_HOME, PKG_ROOT_DIR, PKG_PATH, etc).\n    - Nice color coded status messages making it much more clear which\n      dependencies were found, which were not, which were disabled.\n    - Use standard BUILD_SHARED_LIBS to control shared vs static libraries,\n      replacing the old nonstandard BUILDSTATIC name.\n    - Use correct PUBLIC/PRIVATE marks with target_link_libraries and\n      target_include_directories, and rely on cmake properly understanding\n      the transitive dependencies.\n    - CMAKE_DEBUG_POSTFIX adds an optional suffix to debug libraries.\n    - CMAKE_CXX_STANDARD to control C++ standard (instead of our nonstandard\n      USE_CPP).\n    - CXX_VISIBILITY_PRESET controls symbol visibility defaults now, not\n      our nonstandard HIDE_SYMBOLS. And the default is to keep everything\n      hidden that is not part of the public API.\n    - At config time, `ENABLE_<name>=0` (either as a CMake variable or an\n      env variable) can be used to disable any individual file format or\n      command line utility. E.g., `cmake -DENABLE_PNG=0 -DENABLE_oiiotool=0`\n      This makes it easier to greatly reduce build time if you are 100%\n      sure there are formats or components you don't want or need.\n    - Config based install and usage.\n* Deprecate \"missingmath.h\". What little of it is still needed (it mostly\n  addressed shortcomings of old MSVS releases) is now in fmath.h. #2086\n* Remove \"osdep.h\" header that was no longer needed. #2097\n* Appveyor scripts have been overhauled and simplified by relying on\n  `vcpkg` to build dependencies. #2113 (2.1.0/2.0.4)\n* Detect and error if builder is trying to use a pybind11 that's too old.\n  #2144 (2.1.0/2.0.5)\n* New CMake build-time option `OIIO_LIBNAME_SUFFIX` (default: empty) lets\n  you append an optional name to the libraries produced (to disambiguate\n  two builds at the same facility or distro, much like you could do before\n  for symbols with custom namespaces). #2148 (2.1.0)\n* On MacOS 10.14 Mojave, fix warnings during `iv` compiler about OpenGL\n  being deprecated in future releases. #2151 (2.1.0/2.0.5)\n* At build time, the Python version used can be controlled by setting the\n  environment variable `$OIIO_PYTHON_VERSION`, which if set will initialize\n  the default value of the CMake variable `PYTHON_VERSION`. #2161 (2.0.5/2.1.0)\n* On non-Windows systems, the build now generates a PkgConfig file, installed\n  at `CMAKE_INSTALL_PREFIX/lib/pkgconfig/OpenImageIO.pc`. #2158 (2.0.5/2.1.0)\n* A new unit test has been backported from master, which tries to perform a\n  series of read/write tests on every file format. In particular, this tests\n  certain error conditions, like files not existing, or the directory not\n  being writable, etc. #2181, #2189 (2.0.8/2.1.1)\n* Support for CI tests on CircleCI. #2194 (2.1.1) Retired in #2389 (2.1.8).\n* New build-time flag `USE_WEBP=0` can be used to disable building WebP\n  format support even on platforms where webp libraries are found.\n  #2200 (2.1.1)\n* Fix compiler warnings on Windows. #2209 #2213 #2214 #2392\n* Crashes in the command line utilities now attempt to print a stack trace\n  to aid in debugging (but only if OIIO is built with Boost >= 1.65, because\n  it relies on the Boost stacktrace library). #2229 (2.0.8/2.1.1)\n* Add gcc9 to Travis tet matrix and fix gcc9 related warnings. #2235 (2.1.2)\n* VDB reader pulled in the TBB libraries using the wrong CMake variable.\n  #2274 (2.1.3)\n* The embedded `fmt` implementation has been updated to fix windows\n  warnings. #2280 (2.1.3)\n* Improvements for finding certain new Boost versions. #2293 (2.0.10/2.1.3)\n* Build fixes for MinGW. #2304, #2308 (2.0.10/2.1.3)\n* libraw: Fixes to make it build properly against some changes in the\n  libraw development master. #2306 (2.1.3)\n* Use GitHub Actions CI. Eliminate Appveyor and some Travis tests.\n  #2334 (2.1.4) #2356 (2.1.5) #2395 (2.1.8)\n* Updated and improved finding of OpenEXR and `build_openexr.bash` script\n  that we use for CI. #2343 (2.1.4)\n* Upgrade the pybind11 version that we auto-install when not found (to 2.4.2),\n  and add logic to detect the presence of some pybind11 versions that are\n  known to be (buggily) incompatible with C++11. #2347 (2.1.5)\n* Fix errors in very new MSVS versions where it identified a suspicious\n  practice of ImageBuf's use of a unique_ptr of an undefined type. Jump\n  through some hoops to make that legal. #2350 (2.1.5)\n* All Python scripts in the tests have been modified as needed to make them\n  correct for both Python 2.7 and 3.x. #2355, #2358 (2.1.5)\n* Tests are now safe to run in parallel and in unspecified order. Running\n  with env variable CTEST_PARALLEL_LEVEL=[something more than 1] greatly\n  speeds up the full testsuite on multi-core machines. #2365 (2.1.5)\n* Bump robin map version to latest release (v0.6.2) #2401 (2.1.8)\n* Fix compiler warnings in ustring.h when `_LIBCPP_VERSION` is not defined.\n  #2415 (2.1.8.1)\n* Bump fmt library to v6.1.0. #2423 (2.1.8.1)\n\nDeveloper goodies / internals:\n* argparse.h:\n    - Add unit tests. #2192 (2.1.1)\n    - Add \"%1\" which is like \"%*\" but its list receives only arguments that\n      come *before* any other dash-led arguments. #2192 (2.1.1)\n    - Allow specifiers such as \"%d:WIDTH\" the part before the colon is the\n      type specifier, the part after the colon is the name of the parameter\n      for documentation purposes. #2312 (2.1.3)\n* attrdelegate.h:\n    - New header implements \"attribute delegates.\" (Read header for details)\n      #2204 (2.1.1)\n* dassert.h:\n    - Spruce up assertion macros: more uniform wording, and use pretty\n      function printing to show what function the failure was in. #2262\n    - The new preferred assertion macros are `OIIO_ASSERT` and `OIIO_DASSERT`.\n      The `OIIO_ASSERT` always tests and prints an error message if the test\n      fails, but now only aborts when compiled without NDEBUG defined (i.e.\n      no abort for release builds), whereas `OIIO_DASSERT` is for debug mode\n      only and does nothing at all (not even perform the test) in release\n      mode. These names and behaviors are preferred over the old `ASSERT`\n      and `DASSERT`, though those deprecated names will continue for at least\n      another major release. #2411 (2.1.8.1)\n* filesystem.h:\n    - Change many filesystem calls to take string_view arguments. #2388 (2.1.8)\n    - New `fseek()` and `ftell()` that always use 64 bit offsets to be safe\n      for very large files. #2399 (2.1.8)\n* fmath.h:\n    - `safe_mod()` does integer modulus but protects against mod-by-zero\n      exceptions. #2121 (2.1.0/2.0.5)\n    - pow2roundup/pow2rounddown have been renamed ceil2/floor2 to reflect\n      future C++20 standard. The old names still work, so it's a fully back\n      compatible change. #2199 (2.0.8/2.1.1)\n    - To match C++20 notation, use `rotl()` template innstead of separate\n      rotl32/rotl64 functions. #2299, #2309 (2.1.3)\n* platform.h:\n    - New `OIIO_RETURNS_NONNULL` macro implements an attribute that marks\n      a function that returns a pointer as guaranteeing that it's never\n      NULL. #2150 (2.1.0/2.0.5)\n* SHA1.h:\n    - Upgraded this embedded code from version 1.8 (2008) to the newest\n      release, 2.1 (2012). This fixes some Windows warnings. #2342 (2.1.4)\n* simd.h:\n    - Added vec4 * matrix44 multiplication. #2165 (2.1.0/2.0.6)\n    - Guard against shenanigans when Xlib.h having been included and\n     `#define`ing True and False. #2272 (2.0.9/2.1.3)\n* strutil.h:\n    - Added `excise_string_after_head()`. #2173 (2.1.0/2.0.6)\n    - Fixed incorrect return type of `stof()`. #2254 (2.1.2)\n    - Added `remove_trailing_whitespace()` and `trim_whitespace()`. #2298\n      (2.1.3)\n    - `Strutil::wordwrap()` now lets you specify the separation characters\n      more flexibly (rather than being hard-coded to spaces as separators).\n      #2116 (2.1.0/2.0.4)\n    - `Strutil::parse_while()`.  #2139 (2.1.0/2.0.5)\n    - Added a variety of `join()` that allows you to set the number of items\n      joined, truncating or padding with default values as needed. #2408\n      (2.1.8)\n    - Fix `join` to produce a joined string of float-like values with\n      locale-independent formatting. #2408 (2.1.8)\n    - Fix `vsnprintf` to be locale independent. #2410 (2.1.8)\n    - New `lstrip()` and `rstrip()` are just like the existing `strip()`,\n      but operate only on the beginning/left side or ending/right side of\n      the string, respectively. #2409 (2.1.8)\n* string_view.h:\n    - `string_view` now adds an optional `pos` parameter to the `find_first_of`\n      / `find_last_of` family of methods. #2114 (2.1.0/2.0.4)\n* sysutil.h:\n    - Added `stacktrace()` and `setup_crash_stacktrace()`. (Only functional\n      if OIIO is built with Boost >= 1.65, because it relies on the Boost\n      stacktrace library). #2229 (2.0.8/2.1.1)\n* unittest.h:\n    - Add `OIIO_CHECK_IMAGEBUF_STATUS()` test macro. #2394 (2.1.8)\n* unordered_map_concurrent.h:\n    - Performance improvement by avoiding redundant hashing of keys, and\n      improving the speed and properties of the hash function. #2313, #2316\n      (2.1.3)\n* ustring.h:\n    - Bug fix in `ustring::compare(string_view)`, in cases where the\n      string_view was longer than the ustring, but had the same character\n      sequence up to the length of the ustring. #2283 (2.0.10/2.1.3)\n* Wide use of declaring methods `noexcept` when we want to promise that\n  they won't throw exceptions. #2156, #2243 (2.1.0, 2.1.2)\n* Changed all (we think) internal string formatting that expects printf\n  formatting notation to use the errorf/sprintf style calls, in anticipation\n  of the error/format (no trailing -f) calls to eventually follow the\n  std::format/python formatting notation. #2393 (2.1.8)\n\nNotable documentation changes:\n* The whole documentation system has been overhauled. The main docs have\n  been converted from LaTeX to Sphinx (using Doxygen and Breathe) for\n  beautiful HTML as well as PDF docs and automatic hosting on\n  https://openimageio.readthedocs.io  #2247,2250,2253,2255,2268,2265,2270\n* Copyright notices have been changed for clarity and conformance with\n  SPDX conventions. #2264\n* New GitHub issue templates, making separate issue types for bug reports,\n  feature requests, build problems, and questions. #2271,#2346\n\n\n\nRelease 2.0.13 (1 Dec 2019) -- compared to 2.0.12\n--------------------------------------------------\n* Bug fix in deep image compare (`IBA::compare()` or `oiiotool --compare`)\n  would fail to notice differences in deep images where the corresponding\n  pixels had differing numbers of samples. #2381 (2.1.8/2.0.13)\n* DPX: Fix bugs related to int32 math that would lead to incorrect behavior\n  in very high-resolution files. #2396 (2.1.3/2.0.13)\n* When converting images to texture (via maketx or IBA::make_texture),\n  correctly handle color space conversions for greyscale images. #2400\n  (2.1.8/2.0.13)\n* Build: suppress warnings with libraw for certain gcc versions.\n* Build: Fix compiler warnings in ustring.h when `_LIBCPP_VERSION` is not\n  defined. #2415 (2.1.8.1/2.0.13)\n* filesystem.h: New `fseek()` and `ftell()` that always use 64 bit offsets\n  to be safe for very large files. #2399 (2.1.8/2.0.13)\n* `Strutil::parse_string()` - fix bugs that would fail for escaped quotes\n  within the string. #2386 (2.1.8/2.0.13)\n* `Strutil::join()` added a variety that allows you to set the number of\n  items joined, truncating or padding with default values as needed. #2408\n  (2.1.8/2.0.13)\n* New `Strutil::lstrip()` and `rstrip()` are just like the existing `strip()`,\n  but operate only on the beginning/left side or ending/right side of\n  the string, respectively. #2409 (2.1.8/2.0.13)\n\nRelease 2.0.12 (1 Nov, 2019) -- compared to 2.0.11\n--------------------------------------------------\n* Fix compiler warnings on some platform. #2375\n* Work around bug in OpenEXR, where dwaa/dwab compression can crash when\n  used on 1-channel tiled images with a tile size < 16. This can crop up for\n  MIP-maps (high levels where rez < 16), so we detect this case and switch\n  automatically to \"zip\" compression. #2378\n\nRelease 2.0.11 (1 Oct, 2019) -- compared to 2.0.10\n-------------------------------------------------\n* Fixes to build against LibRaw master. #2306\n* Fix DPX reading performance regression. #2333\n* Guard against buggy pybind11 versions. #2347\n* Fixes for safe Cuda compilation of `invert<>` in fmath.h. #2197\n\nRelease 2.0.10 (1 Aug, 2019) -- compared to 2.0.9\n-------------------------------------------------\n* ColorConfig improvements: (a) new getColorSpaceFamilyByName(); (b) new\n  methods to return the list of all color spaces, looks, displays, or views\n  for a display; (c) all of ColorConfig now exposed to Python. #2248\n* `IBA::ociodisplay()` and `oiiotool --ociodisplay`: empty display or view\n  names imply using the default display or view. #2273\n* Bug fix in `ustring::compare(string_view)`, in cases where the string_view\n  was longer than the ustring, but had the same character sequence up to\n  the length of the ustring. #2283\n* `oiiotool --stats`: Fixed bug where `-iconfig` hints were not being\n  applied to the file as it was opened to compute the stats. #2288\n* Bug fix: `IBA::computePixelStats()` was not properly controlling the\n  number of threads with the `nthreads` parameter. #2289\n* Bug fix when reading TIFF bugs: In cases where the reader needed to close\n  and re-open the file silently (it could happen for certain scanline\n  traversal patterns), the re-open was not properly honorig any previous\n  \"rawcolor\" hints from the original open. #2285\n* Nuke txWriter updates that expose additional make_texture controls. #2290\n* Build system: Improvements for finding certain new Boost versions. #2293\n* Build system: Improvements finding OpenEXR installation.\n* Fix bugs when reading TIFF \"cmyk\" files. #2292.\n* DPX: support for reading and writing 1-channel (luma, etc.) DPX images.\n  #2294\n* `IBA::fixNonFinite()`: fixed impicit float/double casts to half. #2301\n* Build fixes for MinGW. #2304\n\nRelease 2.0.9 (4 Jul, 2019) -- compared to 2.0.8\n------------------------------------------------\n* RAW: Clarification about color spaces: The open-with-config hint\n  \"raw:ColorSpace\" is more careful about color primaries versus transfer\n  curve. Asking for \"sRGB\" (which is the default) gives you true sRGB --\n  both color primaries and transfer. Asking for \"linear\" gives you linear\n  transfer with sRGB/Rec709 primaries. The default is true sRGB, because it\n  will behave just like JPEG. #2260 (2.1.2)\n* Improved oiiotool support of files with multiple subimages: Several\n  commands honored `-a` but did not respect individual `allsubimages=`\n  modifiers (--ch, --sattrib, --attrib, --caption, --clear-keywords,\n  --iscolorspace, --orientation, --clamp, -fixnan); Several commands always\n  worked on all subimages, but now properly respect `-a` and `allsubimages=`\n  (--origin, --fullpixels, --croptofull, --trim); Several commands were\n  totally unaware of subimages, but now are so and respect `-a` and\n  `allsubimages=` (--crop, --fullsize, --zover, --fill, --resize,\n  --resample). #2202 #2219, #2242\n* Fix broken ability to specify compression of multipart exr files. #2252\n* Fix Strutil::stof() return type error and other windows warnings. #2254\n* IBA::colortmatrixtransform() and `oiiotool --ccmatrix` allow you to\n  perform a matrix-based color space transformation. #2168\n* Guard simd.h against shenanigans when Xlib.h having been included and\n  `#define`ing True and False. #2272\n* RAW: Clarification about color spaces: The open-with-config hint\n  \"raw:ColorSpace\" is more careful about color primaries versus transfer\n  curve. Asking for \"sRGB\" (which is the default) gives you true sRGB --\n  both color primaries and transfer. Asking for \"linear\" gives you linear\n  transfer with sRGB/Rec709 primaries. The default is true sRGB, because it\n  will behave just like JPEG. #2260\n* Fix inability for python to set timecode attributes (specifically, it was\n  trouble setting ImageSpec attributes that were unnsigned int arrays).\n  #2279\n\nRelease 2.0.8 (3 May, 2019) -- compared to 2.0.7\n------------------------------------------------\n* Fix Windows broken read of JPEG & PNG in some circumstances. #2231\n* Some minor fixes to JPEG & PNG reading and file error robustness. #2187\n* Fix crash reading certain old nconvert-written TIFF files. #2207\n* Internals: The `OIIO_DISPATCH_COMMON_TYPES2/3` macros used by many\n  ImageBufAlgo functions have been expanded to handle a few more cases\n  \"natively\" without conversion to/from float. This may make a few cases\n  of odd data type combinations have higher precision. #2203\n* ImageBufAlgo::resize() fixes precision issues for 'double' images. #2211\n* Testing: A new unit test has been backported from master, which tries to\n  perform a series of read/write tests on every file format. In partcular,\n  this tests certain error conditions, like files not existing, or the\n  directory not being writable, etc. #2181\n* Crashes in the command line utilities now attempt to print a stack trace\n  to aid in debugging (but only if OIIO is built with Boost >= 1.65, because\n  it relies on the Boost stacktrace library). #2229\n* Dev goodies: fmath.h's powwroundup/pow2rounddown have been renamed\n  ceil2/floor2 to reflect future C++ standard. The old names still work, so\n  it's a fully back compatible change. #2199\n\nRelease 2.0.7 (1 Apr, 2019) -- compared to 2.0.6\n------------------------------------------------\n* DPX: fix potential crash when file open fails. #2186\n* EXR: Suppress empty string for subimage name (fixes a problem when reading\n  files written by V-Ray). #2190\n* Disable JPEG-2000 support for the (rare) combination of an older OpenJPEG\n  1.x and EMBEDPLUGINS=0 mode, which was buggy. The solution if you really\n  need EMBEDPLUGINS and JPEG-2000 support is to please use OpenJPEG >= 2.0.\n  #2183.\n* New build flag `USE_WEBP=0` can be set to 0 to force disabled support of\n  WebP even when the webp package is found. #2200\n* Bug fix: `ImageInput::create(name)` and `ImageOutput::create(name)` worked\n  if `name` was a filename (such as `foo.exr`), or the extension (such as\n  `exr`), but previously did not work if it was the name of the format\n  (such as `openexr`), despite having been documented as working in that\n  case. #2185\n\nRelease 2.0.6 (1 Mar, 2019) -- compared to 2.0.5\n------------------------------------------------\n* PNG: more careful catching of errors and corrupt png files. #2167\n* PSD: read now properly extracts layer/subimage name and data window offset\n  coordinates. #2170\n* ImageBuf: Fix bug in propagating unassociated alpha behavior request. #2172\n* `oiiotool -o:all=1` fix crash when outputting 0x0 subimages. #2171\n* Developer goodies: simd.h ops for vec4 * mat44 multiplication. #2165\n* Developer goodies: `Strutil::excise_string_after_head()` #2173\n* Fix crashes on Windows from certain regex replacement happening as part\n  of MakeTexture (internally avoid MSVS implementation of std::regex). #2173\n\nRelease 2.0.5 (1 Feb, 2019) -- compared to 2.0.4\n------------------------------------------------\n* `resize()`, `fit()`, and `resample()` are no longer restricted to\n  source and destination images having the same numer of channels. #2125\n* Python error reporting for `ImageOutput` and `ImageBuf.set_pixels` involving\n  transferring pixel arrays have changed from throwing exceptions to reporting\n  errors through the usual OIIO error return codes and queries. #2127\n* Protection against certain divide-by-zero errors when using very blurry\n  latlong environment map lookups. #2121\n* New shell environment variable `OPENIMAGEIO_OPTIONS` can now be used to\n  set global `OIIO::attribute()` settings upon startup (comma separated\n  name=value syntax). #2128\n* ImageInput open-with-config new attribute `\"missingcolor\"` can supply\n  a value for missing tiles or scanlines in a file in lieu of treating it\n  as an error (for example, how OpenEXR allows missing tiles, or when reading\n  an incompletely-written image file). A new global `OIIO::attribute()`\n  setting (same name) also accomplishes the same thing for all files read.\n  Note that this is only advisory, and not all file times are able to do\n  this (OpenEXR is the main one of interest, so that works). #2129\n* New filter name `\"nuke-lanczos6\"` matches the \"lanczos6\" filter from Nuke.\n  In reality, it's identical to our \"lanczos3\", but the name alias is\n  supposed to make it more clear which one to use to match Nuke, which uses\n  a different nomenclature (our \"3\" is radius, their \"6\" is full width).\n  #2136\n* `maketx -u` is smarter about which textures to avoid re-making because\n   they are repeats of earlier commands. #2140\n* Detect/error if builder is trying to use a pybind11 that's too old. #2144\n* OpenEXR: avoid some OpenEXR/libIlmImf internal errors with DWA compression\n  by switching to zip for single channel images with certain small tile\n  sizes. #2147\n* On MacOS 10.14 Mojave, fix warnings during `iv` compile about OpenGL\n  being deprecated in future releases. #2151\n* `iv` info window now sorts the metadata. #2159\n* At build time, the Python version used can be controlled by setting the\n  environment variable `$OIIO_PYTHON_VERSION`, which if set will initialize\n  the default value of the CMake variable `PYTHON_VERSION`. #2161 (2.0.5)\n* On non-Windows systems, the build now generates a PkgConfig file, installed\n  at `CMAKE_INSTALL_PREFIX/lib/pkgconfig/OpenImageIO.pc`. #2158 (2.0.5)\n\nRelease 2.0.4 (Jan 5, 2019) -- compared to 2.0.3\n------------------------------------------------\n* Fix potential threadpool deadlock issue that could happen if you were\n  (among possibly other things?) simultaneously calling make_texture from\n  multiple application threads. #2132\n* ImageInput read_image/scanline/tile fixed subtle bugs for certain\n  combination of strides and channel subset reads. #2108\n* TIFF: Fix problems with JPEG compression in some cases. #2117\n* TIFF: Fixed error where reading just a subset of channels, if that subset\n  did not include the alpha channel but the image was \"unassociated alpha\",\n  the attempt to automatically associate (i.e. \"premultiply\" the alpha) upon\n  read would get bogus values because the alpha channel was not actually\n  read. Now in this case it will not do the premultiplication. So if you are\n  purposely reading RGB only from an RGBA file that is specifically\n  \"unassociated alpha\", beware that you will not get the automatic\n  premultiplication. #2122\n* Python: define `__version__` for the module. #2096\n* IBA::channel_append() previously always forced its result to be float, if\n  it wasn't previously initialized. Now it uses the uaual type-merging\n  logic, making the result the \"widest\" type of the inputs. #2095\n* ImageSpec::find_attribute now will retrive \"datawindow\" and \"displaywindow\"\n  (type int[4] for images int[6] for volumes) giving the OpenEXR-like bounds\n  even though there is no such named metadata for OIIO (the results will\n  assembled from x, y, width, height, etc.). #2110\n* ImageCache/TextureSystem: more specific error message when tile reads\n  appear to be due to the file having changed or been overwritten on disk\n  since it was first opened. #2115\n* oiiotool: New `-evaloff` and `-evalon` lets you disable and enable\n  the expression substitution for regions of arguments (for example, if\n  you have an input image filename that contains `{}` brace characters that\n  you want interpreted literally, not evaluated as an expression). #2100\n* oiiotool `--dumpdata` has more intelligible output for uint8 images. #2124\n* maketx: the `-u` (update mode) is slightly less conservative now,\n  no longer forcing a rebuild of the texture just because the file uses\n  a different relative directory path than last time. #2109\n* WebP: fix bug that gave totally incorrect image read for webp images that\n  had a smaller width than height. #2120\n* Developer goodies: string_view now adds an optional `pos` parameter to the\n  `find_first_of`/`find_last_of` family of methods. #2114\n* Dev goodies: Strutil::wordwrap() now lets you specify the separation\n  characters more flexibly (rather than being hard-coded to spaces as\n  separators). #2116\n\n\n\nRelease 2.0 (Dec 1, 2018) -- compared to 1.8.x\n----------------------------------------------\n\nNew minimum dependencies:\n* On Windows compiling with MSVS, the new minimum version is MSVS 2015.\n\nMajor new features and improvements:\n* ImageInput and ImageOutput static create() and open() methods now return\n  `unique_ptr` rather than raw pointers. #1934, #1945 (1.9.3).\n* ImageInput improvements to thread safety and concurrency, including some\n  new API calls (see \"Public API changes\" section below).\n* ImageBufAlgo overhaul (both C++ and Python): Add IBA functions that\n  return image results directly rather than passing ImageBuf references\n  as parameters for output (the old kind of calls still exist, too, and\n  have their uses). Also in C++, change all IBA functions that took raw\n  pointers to per-channel colors into `span<>` for safety. #1961 (1.9.4)\n* For some readers and writers, an \"IOProxy\" can be passed that customizes\n  the I/O methods. An important use of this is to write an image \"file\"\n  to memory or to read an image \"file\" from a memory, rather than disk.\n  Currently, OpenEXR supports this for both reading and writing, and PNG\n  supports it for writing. You specify a pointer to the proxy via the\n  configuration option \"oiio:ioproxy\". #1931 (1.9.3)\n* New Image Format support:\n    * OpenVDB file read (as volume images or accessing via texture3d()).\n      #2010,2018 (1.9.4)\n    * \"null\" images -- null reader just returns black (or constant colored)\n      pixels, null writer just returns. This can be used for benchmarking\n      (to eliminate all actual file I/O time), \"dry run\" where you want to\n      test without creating output files. #1778 (1.9.0), #2042 (1.9.4)\n* TIFF I/O of multiple scanlines or tiles at once (or whole images, as is\n  typical use case for oiiotool and maketx) is sped up by a large factor\n  on modern multicore systems. We've seen 10x or more faster oiiotool\n  performance for uint8 and uint16 TIFF files using \"zip\" (deflate)\n  compression, on modern 12-16 core machines. #1853 (1.9.2)\n* Major refactor of Exif metadata handling, including much more complete\n  metadata support for RAW formats and support of camera \"maker notes\"\n  for Canon cameras. #1774 (1.9.0)\n* New `maketx` option `--bumpslopes` specifically for converting bump maps,\n  saves additional channels containing slope distribution moments that can\n  be used in shaders for \"bump to roughness\" calculations. #1810,#1913,2005\n  (1.9.2), #2044 (1.9.4)\n* An official FindOpenImageIO.cmake that we invite you to use in other\n  cmake-based projects that needs to find OIIO. #2027 (1.9.4)\n\nPublic API changes:\n* **Python binding overhaul**\n  The Python bindings have been reimplemented with\n  [`pybind11`](https://github.com/pybind/pybind11), no longer with Boost.Python.\n  #1801 (1.9.1)\n  In the process (partly due to what's easy or hard in pybind11, but partly\n  just because it caused us to revisit the python APIs), there are some minor\n  API changes, some of which are breaking! To wit:\n    * All of the functions that are passed or return blocks of pixels\n      (such as `ImageInput.read_image()`) now use Numpy `ndarray` objects\n      indexed as `[y][x][channel]` (no longer using old-style Python\n      `array.array` and flattened to 1D).\n    * Specilized enum type `ImageInput.OpenMode` has been replaced by string\n      parameters, so for example, old `ImageInput.open(filename, ImageInput.Create)`\n      is now `ImageInput.open (filename, \"Create\")`\n    * Any function that previously took a parameter of type `TypeDesc`\n      or `TypeDesc.BASETYPE` now will accept a string that signifies the\n      type. For example, `ImageBuf.set_write_format(\"float\")` is now a\n      synonym for `ImageBuf.set_write_format(oiio.TypeDesc(oiio.FLOAT))`.\n    * For several color conversion functions, parameter names were changed\n      from \"from\" to \"fromspace\" and \"to\" to \"tospace\" to avoid a clash with\n      the Python reserved word `from`. #2084\n* **ImageInput API changes for thread safety and statelessness** #1927 (1.9.2)\n    * `seek_subimage()` no longer takes an `ImageSpec&`, to avoid the obligatory\n       copy. (If the copy is desired, just call `spec()` to get it afterwards.)\n    * All of the `read_*()` methods now have varieties that take arguments\n      specifying the subimage and mip level. The `read_native_*()` methods\n      supplied by ImageInput subclass implementations now ONLY come in the\n      variety that takes a subimage and miplevel.\n    * All of the `read_*()` calls that take subimage/miplevel explicitly are\n      guaranteed to be stateless and thread-safe against each other (it's not\n      necessary to call `seek_subimage` first, nor to have to lock a mutex to\n      ensure that another thread doesn't change the subimage before you get a\n      chance to call read). For back-compatibility, there are still versions\n      that don't take subimage/miplevel, require a prior call to seek_subimge,\n      and are thus not considered thread-safe.\n    * New methods `spec(subimage,miplevel)` and `spec_dimensions(s,m)`\n      let you retrieve a copy of the ImageSpec for a given subimage and\n      MIP level (thread-safe, and without needing a prior `seek_subimage`)\n      call. Note that to be stateless and thread-safe, these return a COPY\n      of the spec, rather than the reference returned by the stateful\n      `spec()` call that has no arguments and requires a prior `seek_subimage`.\n      However, `spec_dimensions()` does not copy the channel names or the\n      arbitrary metadata, and is thus very inexpensive if the only thing\n      you need from the spec copy is the image dimensions and channel\n      formats.\n* **ImageInput and ImageOutput create/open changes**\n    * The static `create()` and `open()` methods have been changed so that\n      instead of returning an `ImageInput *` (or `ImageOutput *`) and\n      requiring the caller to correctly manage that resource and eventually\n      destroy it, now they return a `unique_ptr` that automatically deletes\n      when it leaves scope. In the process we also clean up some edge cases\n      on Windows where it was possible for ImageInput/ImageOutput to have\n      been allocated in one DLL's heap but freed in a different DLL's heap,\n      which could cause subtle heap corruption problems. #1934,#1945 (1.9.3).\n* **ImageBuf**\n    * New method `set_origin()` changes the pixel data window origin.\n      #1949 (1.9.4)\n    * Assignment (`operator=`) is now enabled for ImageBuf, both the copying\n      and moving variety. Also, an explicit copy() method has been added\n      that returns a full copy of the ImageBuf. #1952 (1.9.4)\n    * write() method has had its arguments changed and now takes an optional\n      TypeDesc that lets you specify a requested data type when writing the\n      output file, rather than requiring a previous and separate call to\n      set_write_format(). The old call signature of write() still exists,\n      but it will be considered deprecated in the future. #1953 (1.9.4)\n* **ImageBufAlgo**\n    * In C++, functions that take raw pointers for per-channel constant\n      values or results are deprecated, in favor of new versions that\n      heavily rely on `span<>` to safely pass array references and their\n      lengths. #1961 (1.9.4)\n    * In both C++ and Python, every IBA function that takes a parameter\n      giving an ImageBuf destination reference for results have an additional\n      variant that directly returns an ImageBuf result. This makes much\n      cleaner, more readable code, in cases where it's not necessary to\n      write partial results into an existing IB. #1961 (1.9.4)\n    * In C++, many IBA functions that came in multiple versions for whether\n      certain parameters could be an image, a per-channel constant, or a\n      single constant, have been replaced by a single version that takes\n      a new parameter-passing helper class, `Image_or_Const` that will match\n      against any of those choices. (No changes are necessary for calling\n      programs, but it makes the header and documentation a lot simpler.)\n      #1961 (1.9.4)\n    * IBA compare(), computePixelStats(), and histogram() now directly\n      return their result structures, intead of requiring the passing of\n      a destination reference. #1961 (1.9.4)\n    * New IBA::fit() resizes and image to just fit in the given size, but\n      preserve its aspect ratio (padding with black as necessary). It's just\n      like what `oiiotool --fit` has always done, but now you can call it\n      directly from C++ or Python. #1993 (1.9.4)\n    * New `contrast_remap()` allows flexible linear or sigmoidal contrast\n      remapping. #2043 (1.9.4)\n    * `ImageBufAlgo::colorconvert` and various `ocio` transformations have\n      changed the default value of their `unpremult` parameter from `false`\n      to `true`, reflecting the fact that we believe this is almost always\n      the more correct choice. Also, if their input image is clearly marked\n      as having unasociated alpha already, they will not bracket the color\n      conversion with the requested unpremult/premult. #1864 (1.9.2)\n    * Updated the OpenCV interoperability with new functions to_OpenCV (make\n      an ImageBuf out of a cv::Mat) and from_OpenCV (fill in a cv::Mat with\n      the contents of an ImageBuf). Deprecated the old from_IplImage and\n      to_IplImage, which are very OpenCV-1.x-centric. (2.0.2)\n* **ImageCache/TextureSystem:**\n    * ImageCache and TextureSystem now have `close(filename)` and\n      `close_all()` methods, which for one file or all files will close the\n      files and release any open file handles (also unlocking write access\n      to those files on Windows), but without invalidating anything it knows\n      about the ImageSpec or any pixel tiles already read from the files, as\n      would happen with a call to the much more drastic `invalidate()` or\n      `invalidate_all()`. #1950 (1.9.4)\n    * `TextureSystem::create()` has an additional optional argument that\n      allows the caller to pass an existing app-owned custom ImageCache.\n      #2019 (1.9.4)\n    * New `TextureSystem::imagecache()` method returns a blind, non-owning\n      pointer to the underlying ImageCache of that TS. #2019 (1.9.4)\n    * ImageCache: extended add_tile() with an optional `copy` parameter\n      (which defaults to `true`), which when set to `false` will make a tile\n      that references an app buffer without allocating, copying, and owning\n      the memory. In short, this makes it possible to reference existing\n      memory holding an image array, as if it were a texture. #2012 (1.9.4)\n    * `ImageCache::add_file()` extended with an optional `replace` parameter\n      (default: false), that if true, will replace the tile and invalidate\n      the old one. #2021 (1.9.4)\n* **Changes to string formatting**: #2076 (2.0.1)\n    * New `Strutil::sprintf()` and `ustring::sprintf()` functions are for\n      printf-style formatted errors and warnings. You are encouraged to\n      change your existing `format()` calls to `sprintf()`, since the\n      original `format` may in a later version (2.1?) switch to Python-style\n      formatting commands, but `sprintf` will continue to reliably use\n      C printf style notation.\n    * In ImageInput, ImageOutput, ImageBuf, and ErrorHandler, new `errorf()`\n      and `warningf()` methods similarly provide printf-style formatted\n      errors and warnings. The old `error()/warning()` calls will someday\n      (maybe 2.1?) switch to Python-style formatting commands, but\n      `errorf` will continue to reliably use C printf style notation.\n* ColorConfig changes: ColorConfig methods now return shared pointers to\n  `ColorProcessor` rather than raw pointers. It is therefore no longer\n  required to make an explicit delete call. Created ColorProcessor objects\n  are now internally cached, so asking for the same color transformation\n  multiple times is no longer expensive. The ColorProcessor interface is\n  now in `color.h` and can be directly used to perform transformations on\n  individual colors (previously it was just an opaque pointer and could\n  only be used to pass into certain IBA functions). The color space names\n  \"rgb\" and \"default\" are now understood to be synonyms for the default\n  \"linear\" color space. #1788 (1.9.0)\n* Remove long-deprecated API calls:\n    * ImageBuf::get_pixels/get_pixel_channels varieties deprecated since 1.6.\n    * ImageBuf::set_deep_value_uint, deprecated since 1.7.\n    * ImageBuf::deep_alloc, deprecated since 1.7.\n    * ImageBufAlgo::colorconvert variety deprecated since 1.7.\n    * ImageCache::clear, deprecated since 1.7.\n    * ImageCache::add_tile variety deprecated since 1.6.\n* ROI new methods: contains()  #1874, #1878 (1.9.2)\n* `ImageBufAlgo::pixeladdr()` now takes an additional optional parameter,\n  the channel number. #1880 (1.9.2)\n* Global OIIO attribute \"log_times\" (which defaults to 0 but can be overridden\n  by setting the `OPENIMAGEIO_LOG_TIMES` environment variable), when nonzero,\n  instruments ImageBufAlgo functions to record the number of times they are\n  called and how much time they take to execute. A report of these times\n  can be retrieved as a string as the \"timing_report\" attribute, or it will\n  be printed to stdout automatically if the value of log_times is 2 or more\n  at the time that the application exits. #1885 (1.9.2)\n* Moved the definition of `ROI` from `imagebuf.h` to `imageio.h` and make\n  most of the methods `constexpr`. #1906 (1.9.2)\n* Rename/move of `array_view` to `span`. Deprecated `array_view` and moved\n  array_view.h contents to span.h. You should change `array_view<T>`\n  to `span<T>` and `array_view<const T>` to `cspan<T>`. #1956,2062 (1.9.4)\n* ustring: removed `operator int()` that allowed simple int casting such as:\n  ```\n      ustring u, v;\n      if (u || !v) { ... }\n  ```\n  This was error-prone, neither std::string nor std::string_view had the\n  equivalent, so we are removing it. The preferred idiom is:\n  ```\n      if (!u.empty() || v.empty()) { ... }\n  ```\n\nPerformance improvements:\n* ImageBufAlgo::computePixelStats is now multithreaded and should improve by\n  a large factor when running on a machine with many cores. This is\n  particularly noticable for maketx. #1852 (1.9.2)\n* Color conversions are sped up by 50% for 4 channel float images, about\n  30% for other combinations of channels or data formats. #1868 (1.9.2)\n* ImageBuf::get_pixels() sped up by around 3x for the common case of the\n  image being fully in memory (the slower path is now only used for\n  ImageCache-based images). #1872 (1.9.2)\n* ImageBufAlgo::copy() and crop() sped up for in-memory buffers, by about\n  35-45% when copying between buffers of the same type, 2-4x when copying\n  between buffers of different data types. #1877 (1.9.2)\n* ImageBufAlgo::over() when both buffers are in-memory, float, 4-channels,\n  sped up by about 2x. #1879 (1.9.2).\n* ImageBufAlgo::fill() of a constant color sped up by 1.5-2.5x (depending\n  on the data type involved). #1886 (1.9.2)\n\nFixes and feature enhancements:\n* oiiotool\n    * `--help` prints important usage tips that explain command parsing,\n      syntax of optional modifiers, and the path to PDF docs. #1811 (1.9.2)\n    * `--colormap` has new  maps \"inferno\", \"magma\", \"plasma\", \"viridis\",\n      which are perceptually uniform, monotonically increasing luminance,\n      look good converted to greyscale, and usable by people with color\n      blindness. #1820 (1.9.2)\n    * oiiotool no longer enables autotile by default. #1856 (1.9.2)\n    * `--colorconvert`, `--tocolorspace`, and all of the `--ocio` commands\n      now take an optional modifier `:unpremult=1` which causes the color\n      conversion to be internally bracketed by unpremult/premult steps (if\n      the image has alpha and is not already marked as having unassociated\n      alpha). You should therefore prefer `--colorconvert:unpremult=1 from to`\n      rather than the more complex `--unpremult --colorconvert from to -premult`.\n      #1864 (1.9.2)\n    * `--autocc` will also cause unpremult/premult to bracket any color\n      transformations it does automatically for read and write (if the image\n      has alpha and does not appear to already be unassociated). #1864 (1.9.2)\n    * `--help` prints the name of the OCIO color config file. #1869 (1.9.2)\n    * Frame sequence wildcard improvements: fix handling of negative frame\n      numbers and ranges, also the `--frames` command line option is not\n      enough to trigger a loop over those frame numbers, even if no other\n      arguments appear to have wildcard structure. #1894 (1.8.10/1.9.2)\n    * `--info -v` now prints metadata in sorted order, making it easier to\n      spot the existance of particular metadata. #1982 (1.9.4)\n    * `--no-autopremult` fixed, it wasn't working properly for cases that\n      were read directly rather than backed by ImageCache. #1984 (1.9.4)\n    * New `--contrast` allows for contrast remapping (linear or sigmoidal).\n      #2043 (1.9.4)\n    * Improved logic for propagating the pixel data format through\n      multiple operations, especially for files with multiple subimages.\n      #1769 (1.9.0/1.8.6)\n    * Outputs are now written to temporary files, then atomically moved\n      to the specified filename at the end. This makes it safe for oiiotool\n      to \"overwrite\" a file (i.e. `oiiotool in.tif ... -o out.tif`) without\n      problematic situations where the file is truncated or overwritten\n      before the reading is complete. #1797 (1.8.7/1.9.1)\n    * Fixed problem with reading `half` files where very small (denormalized)\n      half values could get squashed to float 0.0 instead of having their\n      values preserved, if certain old versions of libopenjpeg were being\n      used (because they set a CPU flag strangely upon library load and then\n      never changed it back, this is a libopenjpeg bug that has since been\n      fixed). #2048 (2.0)\n    * `-d chan=type` logic fixed for certain cases of specifying the data\n      types of individual channels. #2061 (2.0beta2)\n    * Expression evaluation: metadata names can now be enclosed in single\n      or double quotes if they don't follow \"C\" identifier naming conventions.\n      For example, `{TOP.'foo/bar'}` retrieves metadata called \"foo/bar\"\n      rather than trying to retrieve \"foo\" and divide by bar. #2068 (2.0beta2)\n    * Expression evaluation: When retrieving metadata, timecode data will be\n      expressed properly as a string (\"00:00:00:00\"). #2068 (2.0beta2)\n* ImageBufAlgo:\n    * `color_map()` supports new maps \"inferno\", \"magma\", \"plasma\",\n      \"viridis\". #1820 (1.9.2)\n    * Across many functions, improve channel logic when combining an image\n      with alpha with another image without alpha. #1827 (1.9.2)\n    * `mad()` now takes an `img*color+img` variety. (Previously it\n       supported `img*img+img` and `img*color+color`.) #1866 (1.9.2)\n    * New `fit()` is like resize but fits inside a specified window size,\n      while preserving the aspect ratio of the image appearance. #1993.\n    * New `contrast_remap()` allows flexible linear or sigmoidal contrast\n      remapping. #2043 (1.9.4)\n    * `channel_append()` is no longer limited to requiring the two input\n      images to have the same pixel data type. #2022 (1.9.4)\n    * `isConstantColor()`, `isConstantChannel()`, and `isMonochrome()` have\n      added an optional `threshold` parameter that allows you to compute\n      whether the image is constant or monochrome within a non-zero\n      tolerance (the default is still 0.0, meaning checking for an exact\n      match). #2049 (2.0.0)\n    * `IBA::ociodisplay()` has better behavior when its \"fromspace\" parameter\n      is left blank -- instead of assuming \"linear\" (as a space name), it\n      assumes it's whatever space in your OCIO color config has the \"linear\"\n      role. #2083 (1.8.17/2.0.1)\n* ImageBuf:\n    * Bug fixed in IB::copy() of rare types. #1829 (1.9.2)\n    * write() automatically tells the ImageCache to 'invalidate' the file\n      being written, so cached images will not retain the prior version of\n      the files. #1916 (1.9.2)\n    * Bug fix to ImageBuf::contains_roi() method -- it erroneously always\n      returned `true`. #1997 (1.8.14/1.9.4)\n* ImageCache/TextureSystem/maketx:\n    * Improved stats on how long we wait for ImageInput mutexes.\n      #1779 (1.9.0/1.8.6)\n    * Improved performance of IC/TS tile and file caches under heavy\n      contention from many threads. #1780 (1.9.0)\n    * Increased the default `max_tile_channels` limit from 5 to 6.\n      #1803 (1.9.1)\n    * maketx: improved image hashing to avoid some (extremely rare) possible\n      hash collisions. #1819 (1.9.2)\n    * IC/TS performance improvements by changing the underlying hash table\n      implementation. #1823,1824,1825,1826,1830 (1.9.2)\n    * texture()/texture3d(): when requesting a nonexistent \"subimage\",\n      return the fill color, like we do when requesting nonexistent channels\n      (rather than nondeterministically simply not filling in the result).\n      #1917 (1.9.2)\n    * Relying on some changes to the ImageInput API, there is now much less\n      thread locking to protect the underlying ImageInputs, and this should\n      improve texture and image cache performance when many threads need\n      to read tiles from the same file. #1927 (1.9.2)\n    * `get_image_info()`/`get_texture_info()` is now more flexible about\n      retrieving arrays vs aggregates, in cases where the total number of\n      elements is correct. #1968 (1.9.4)\n    * Fix uninitialized read within the texture system (only affected\n      statistics, never gave wrong texture results). #2000 (1.9.4)\n    * texture3d() transforms lookup points from world into local space\n      if the file has a \"worldtolocal\" metadata giving a 4x4 matrix. #2009\n      (1.9.4)\n    * Fix minor texture filtering bug where widely disparate \"sblur\" and\n      \"tblur\" values could in some circumstances lead to incorrect texture\n      filter estimation. #2052 (2.0.0)\n    * `ImageCache::invalidate(filename)` did not properly invalidate the\n      \"fingerprint\" is used to detect duplicate files. #2081 (1.8.17/2.0.1)\n* iv:\n    * Fix (especially on OSX) for various ways it has been broken since the\n      shift to Qt5. #1946 (1.8.12, 1.9.4)\n    * New optin `--no-autopremult` works like oiiotool, causes images with\n      unassociated alpha to not be automatically premultiplied by alpha\n      as they are read in. #1984 (1.9.4)\n* All string->numeric parsing and numeric->string formatting is now\n  locale-independent and always uses '.' as decimal marker. #1796 (1.9.0)\n* Python Imagebuf.get_pixels and set_pixels bugs fixed, in the varieties\n  that take an ROI to describe the region. #1802 (1.9.2)\n* Python: Implement missing `ImageOutput.open()` call variety for declaring\n  multiple subimages. #2074 (2.0.1)\n* More robust parsing of XMP metadata for unknown metadata names.\n  #1816 (1.9.2/1.8.7)\n* Fix ImageSpec constructor from an ROI, display/\"full\" window did not get\n  the right default origin. #1997 (1.8.14/1.9.4)\n* ImageSpec::erase_attribute() fix bug where it got case-sensitivity of the\n  search backwards when built using std::regex rather than boost::regex.\n  #2003 (1.8.14/1.9.4)\n* DPX:\n    * Better catching of write errors, including filling the disk while in\n      the process of writing a DPX file. #2072 (2.0.1)\n* Field3d:\n    * Prevent crashes when open fails. #1848 (1.9.2/1.8.8)\n    * Fix potential mutex deadlock. #1972 (1.9.4)\n* GIF:\n    * Fix crash when reading GIF with comment extension but no comment data.\n      #2001 (1.8.14/1.9.4)\n* JPEG:\n    * When writing, be robust to accidentally setting the \"density\" metadata\n      to values larger than JPEG's 16 bit integer field will accommodate.\n      #2002 (1.8.14/1.9.4)\n    * Better detection and reporting of error conditions while reading\n      corrupt JPEG files. #2073 (2.0.1)\n* OpenEXR:\n    * Gracefully detect and reject files with subsampled channels,\n      which is a rarely-to-never-used OpenEXR feature that we don't support\n      properly. #1849 (1.9.2/1.8.8)\n    * Improved handling of UTF-8 filenames on Windows. #1941 (1.9.3, 1.8.12,\n      1.7.19)\n* PNG:\n    * Fix redundant png_write_end call. #1910 (1.9.2)\n* PSD:\n    * Fix parse issue of layer mask data. #1777 (1.9.2)\n* RAW:\n    * Add \"raw:HighlightMode\" configuration hint to control libraw's\n      handling of highlight mode processing. #1851\n    * Important bug fix when dealing with rotated (and vertical) images,\n      which were not being re-oriented properly and could get strangely\n      scrambled. #1854 (1.9.2/1.8.9)\n    * Major rewrite of the way makernotes and camera-specific metadata are\n      handled, resulting in much more (and more accurate) reporting of\n      camera metadata. #1985 (1.9.4)\n    * The \"oiio:ColorSpace\" metadata is now set correctly when reading\n      raw DSLR images. And we deprecate the old \"raw:ColorSpace\" metadata,\n      which is useless. #2016 (1.9.4)\n    * Add \"raw:aber\" configuration hint to control libraw's adjustments for\n      chromatic aberration. This data is of type \"float[2]\", the first value\n      is the scale factor for red, the second for blue, and both should be\n      very close to 1.0. #2030 (1.9.4)\n* TIFF:\n    * Improve performance of TIFF scanline output. #1833 (1.9.2)\n    * Bug fix: read_tile() and read_tiles() input of un-premultiplied tiles\n      botched the \"shape\" of the tile data array. #1907 (1.9.2/1.8.10)\n    * Improvement in speed of reading headers (by removing redundant call\n      to TIFFSetDirectory). #1922 (1.9.2)\n    * When config option \"oiio:UnassociatedAlpha\" is nonzero (or not set\n      -- which is the default), therefore enabling automatic premultiplication\n      by alpha for any unassociated alpha files, it will set the metadata\n      \"tiff:UnassociatedAlpha\" to indicate that the original file was\n      unassociated. #1984 (1.9.4)\n    * Bug fixes for TIFF reads of images with unassociated alpha -- there\n      were some edge cases where they pixels failed to automatically\n      premultiply upon read. #2032 (1.9.4)\n* zfile: more careful gzopen on Windows that could crash when given bogus\n  filename. #1839,2070 (1.9.2/1.8.8/2.0.1)\n* Windows fix: Safer thread pool destruction on. #2038 (1.9.4)\n\nBuild/test system improvements and platform ports:\n* Fixes for Windows build. #1793, #1794 (1.9.0/1.8.6), #2025 (1.9.4)\n* Fix build bug where if the makefile wrapper got `CODECOV=0`, it would\n  force a \"Debug\" build (required for code coverage tests) even though code\n  coverage is instructed to be off. (It would be fine if you didn't specify\n  `CODECOV` at all.) #1792 (1.9.0/1.8.6)\n* Build: Fix broken build when Freetype was not found or disabled. #1800\n  (1.8.6/1.9.1)\n* Build: Boost.Python is no longer a dependency, but `pybind11` is. If\n  not found on the system, it will be automatically downloaded. #1801, #2031\n  (1.9.1)\n* Time for a multi-core build of OIIO is reduced by 40% by refactoring some\n  extra big modules into more bite-sized pieces. #1806 (1.9.2)\n* testtex:\n    * Make the \"thread workout\" cases all honor `--handle`. #1778 (1.9.0)\n    * Only prints detailed stats if `-v` is used, and new option\n      `--invalidate` will invalidate the cache when starting each\n      threadtimes trial. #1828 (1.9.2)\n    * New `--anisoratio` lets you choose anisotropic shape for thread\n      working tests, and make thread_workout samples twice as big to be more\n      typical by interpolating mip levels. #1840 (1.9.2)\n    * TextureSystem stats are printed as well as ImageCache. #1840 (1.9.2)\n* iv no longer requires GLEW, using QOpenGLFunctions instead. #1840 (1.9.2)\n* DICOM: Fix dcmtk build errors on some platforms. Also, the minimum dcmtk\n  version we suport is 3.6.1. #1843 (1.9.2/1.8.8)\n* Build fixes for Hurd OS. #1850 (1.9.2/1.8.8)\n* Clean up leak sanitizer errors. #1855 (1.9.2)\n* On Unix/Linux, add explicit DL library dependency to libOpenImageIO.so\n  itself instead of only to the binaries and test utilities.\n  #1860 (1.9.2/1.8.8)\n* The build now bundles a sample OCIO config in testsuite/common so that we\n  can do OCIO-based unit tests. #1870 (1.9.2)\n* Properly find newer openjpeg 2.3. #1871 (1.9.2)\n* Fix testsuite to be Python 2/3 agnostic. #1891 (1.9.2)\n* Removed `USE_PYTHON3` build flag, which didn't do anything. #1891 (1.9.2)\n* The `PYTHON_VERSION` build variable is now better at selecting among\n  several installed versions of Python, and all the tests should work fine\n  with Python 3.x now. #2015 (1.9.4)\n* Remove some lingering support for MSVS < 2013 (which we haven't advertised\n  as working anyway). #1887 (1.9.2)\n* Windows/MSVC build fix: use the `/bigobj` option on some large modules\n  that need it. #1900, #1902 (1.8.10/1.9.2)\n* Add up-to-date Nuke versions to FindNuke.cmake. #1920 (1.8.11, 1.9.2)\n* Allow building against ffmpeg 4.0. #1926,#1936 (1.8.11, 1.9.2)\n* Disable SSE for 32 bit Windows -- problematic build issues.\n  #1933 (1.9.3, 1.8.12, 1.7.19)\n* Fixes to the `EMBEDPLUGINS=0` build case, which had at some point stopped\n  working properly. #1942 (1.9.3)\n* Improvements in finding the location of OpenJPEG with Macports.\n  #1948 (1.8.12, 1.9.4)\n* Improvement finding libraw properly on Windows. #1959 (1.9.4)\n* Fix warnings to allow clean gcc8 builds. #1974 (1.9.4)\n* Make sure we build properly for C++17. (1.9.4)\n* Check properly for minimal FFMpeg version (2.6). #1981 (1.9.4)\n* New build option GLIBCXX_USE_CXX11_ABI, when set to 0 will force the old\n  gcc string ABI (even gcc 7+ where the new ABI is the default), and if set\n  to 1 will force the new gcc string ABI (on gcc 5-6, where old ABI is the\n  default). If not set at all, it will respect the default choice for that\n  compiler. #1980 (1.9.4)\n* TravisCI builds now use an abbreviated test matrix for most ordinary\n  pushes of working branches, but the full test matrix for PRs or pushes\n  to \"master\" or \"RB\" branches. #1983 (1.9.4)\n* Support compilation by clang 7.0. #1995 (1.9.4)\n* Support for building against OpenEXR 2.3. #2007 (1.9.4)\n* Use OpenEXR pkgconfig if available. #2008 (1.9.4)\n* Allow builds outside the source tree to pass testsuite. Defaults to\n  finding test image directories such as oiio-images, openexr-images, and\n  libtiffpic in the usual \"..\" from the main OIIO source directory, but now\n  it can be overridden with the CMake variable `OIIO_TESTSUITE_IMAGEDIR`.\n  #2026 (1.9.4)\n* Remove stale python examples from `src/python`. They were untested,\n  undocumented, and probably no longer worked against the current APIs.\n  #2036 (1.9.4)\n* Fixes for Windows when making Unicode builds, and fix Plugin::dlopen\n  on Windows to properly support UTF-8 filenames. #1454 (2.0.1)\n* Support added for OpenCV 4.0. (2.0.1)\n\nDeveloper goodies / internals:\n* **Formatting with clang-format**: All submissions are expected to be\n  formatted using our standard clang-format rules. Please run\n  `make clang-format` prior to submitting code. The TravisCI tests include\n  one entry just to check that the formatting conforms, and will fail if it\n  doesn't, printing the diffs that would bring it to proper formatting.\n  (Note: for small changes, if you don't have clang-format locally, it's ok\n  to submit, then use the diffs from the failures to fix it by hand and\n  resubmit and update.) #2059,2064,2065,2067,2069.\n* argparse.h:\n    * Add pre- and post-option help printing callbacks. #1811 (1.9.2)\n    * Changed to PIMPL to hide implementation from the public headers.\n      Also modernized internals, no raw new/delete. #1858 (1.9.2)\n* array_view.h:\n    * Added begin(), end(), cbegin(), cend() methods, and new\n      constructors from pointer pairs and from std::array. (1.9.0/1.8.6)\n    * Deprecated, moved contents to span.h. You should change `array_view<T>`\n      to `span<T>` and `array_view<const T>` to `cspan<T>`. #1956 (1.9.4)\n* color.h: add guards to make this header safe for Cuda compilation.\n  #1905 (1.9.2/1.8.10)\n* filesystem.h:\n    * IOProxy classes that can abstract file operations for custom I/O\n      substitutions. #1931 (1.9.3)\n    * Proper UTF-8 filenames for unique_path() and temp_directory(), and\n      general UTF-8 cleanup/simplification. #1940 (1.9.3, 1.8.12, 1.7.19)\n    * Remove extraneous calls to exists() that were doubling the number\n      of stat syscalls. #2385 (2.1.8)\n* fmath.h:\n    * Now defines preprocessor symbol `OIIO_FMATH_H` so other files can\n      easily detect if it has been included. (1.9.0/1.8.6)\n    * Modify to allow Cuda compilation/use of this header. #1888,#1896\n      (1.9.2/1.8.10)\n    * Improve numeric approximation of fast_atan() and fast_atan2().\n      #1943 (1.9.3)\n    * fast_cbrt() is a fast approximate cube root (maximum error 8e-14,\n      about 3 times faster than pow computes cube roots). #1955 (1.9.4)\n* function_view.h: Overhauled fixed with an alternate implementation\n  borrowed from LLVM. (1.9.4)\n* hash.h: add guards to make this header safe for Cuda compilation.\n  #1905 (1.9.2/1.8.10)\n* imageio.h: `convert_image()` and `parallel_convert_image` have been\n  simplified to remove optional `alpha_channel` and `z_channel` parameters\n  that were never actually used. The old versions are still present but\n  are deprecated. #2088 (2.0.1)\n* parallel.h:\n    * `parallel_options` passed to many functions. #1807 (1.9.2)\n    * More careful avoidance of threads not recursively using the thread\n      pool (which could lead to deadlocks). #1807 (1.9.2)\n    * Internals refactor of task_set #1883 (1.9.2).\n    * Make the thread pool better behaved in times if pool congestion -- if\n      there are already way too many items in the task queue, the caller may\n      do the work itself rather than add to the end and have to wait too\n      long to get results. #1884 (1.9.2)\n* paramlist.h:\n    * ParamValue class has added get_int_indexed() and get_float_indexed()\n      methods. #1773 (1.9.0/1.8.6)\n    * ParamValue restructured to allow additional common data types to store\n      internally rather than requre an allocation. #1812 (1.9.2)\n    * New ParamList convenience methods: remove(), constains(),\n      add_or_replace(). #1813 (1.9.2)\n* platform.h:\n    * New OIIO_FALLTHROUGH and OIIO_NODISCARD macros, and renamed\n      OIIO_UNUSED_OK to OIIO_MAYBE_UNUSED (to match C++17 naming). #2041\n* simd.h:\n    * Fixed build break when AVX512VL is enabled. #1781 (1.9.0/1.8.6)\n    * Minor fixes especially for avx512. #1846 (1.9.2/1.8.8) #1873,#1893\n      (1.9.2)\n* span.h:\n    * Used to be array_view. Now it's `span<>` and `span_strided`. Also,\n      `cspan<T>` is a handy alias for `span<const T>`. #1956 (1.9.4)\n    * Added begin(), end(), cbegin(), cend() methods, and new\n      constructors from pointer pairs and from std::array. (1.9.0/1.8.6)\n    * Added `==` and `!=` to span and span_strided. #2037 (1.9.4)\n* strutil.h:\n    * All string->numeric parsing and numeric->string formatting is now\n      locale-independent and always uses '.' as decimal marker. #1796 (1.9.0)\n    * New `Strutil::stof()`, `stoi()`, `stoui()`, `stod()` functions for\n      easy parsing of strings to numbers. Also tests `Strutil::string_is_int()`\n      and `string_is_float()`. #1796 (1.9.0)\n    * New `to_string<>` utility template. #1814 (1.9.2)\n    * Fix to strtof, strtod for non-C locales. #1918 (1.8.11, 1.9.2)\n    * New `iless()` is case-insensitive locale-independent string_view\n      ordering comparison. Also added StringIEqual, StringLess, StringILess\n      functors. (1.9.4)\n    * `join()` is now a template that can act on any iterable container of\n      objects that allow stream output. #2033 (1.9.4)\n    * New `splits()`/`splitsv()` that direction returns a vector of\n      std::string or string_view, respectively. #2033 (1.9.4)\n    * A second version of `extract_from_list_string` that directly returns\n      a std::vector (instead of being passed as a param). #2033 (1.9.4)\n    * `parse_string` now accepts single quotes as well as double quotes\n      to enclose a quoted string. #2066 (2.0beta2)\n    * Fix Strutil::vsnprintf detection of encoding errors on Windows. #2082\n      (1.8.17/2.0.1)\n    * `parse_string()` - fix bugs that would fail for escaped quotes within\n      the string. #2386 (2.1.8)\n* thread.h:\n    * Reimplementaiton of `spin_rw_mutex` has much better performance when\n      many threads are accessing at once, especially if most of them are\n      reader threads. #1787 (1.9.0)\n    * task_set: add wait_for_task() method that waits for just one task in\n      the set to finish (versus wait() that waits for all). #1847 (1.9.2)\n    * Fix rare crash in thread pool when lowering the number of threads.\n      #2013 (1.9.4/1.8.15)\n* unittest.h:\n    * Made references to Strutil fully qualified in OIIO namespace, so that\n      `unittest.h` can be more easily used outside of the OIIO codebase.\n      #1791 (1.9.0)\n    * `OIIO_CHECK_EQUAL_APPROX` - fix namespace ambiguity. #1998 (1.9.4)\n    * `OIIO_CHECK_EQUAL` now can compare two `std::vector`s. #2033 (1.9.4)\n    * Make unit test errors respect whether stdout is a terminal when\n      deciding whether to print in color. #2045\n* Extensive use of C++11 `final` and `override` decorators of virtual\n  methods in our internals, especially ImageInput and ImageOutput.\n  #1904 (1.9.2)\n\nNotable documentation changes:\n* A new THIRD-PARTY.md file reproduces the full open source licenses\n  of all code that we distribute with OIIO, incorporate, or derive code from.\n  They are have very similar license terms to the main OIIO license\n  (\"New BSD\") -- MIT, Mozilla, Apache 2.0, or public domain. OIIO does not\n  use any GPL or other \"viral\" licenesed code that would change license\n  terms of any code that didn't come directly from those packages.\n* The CHANGES.md file was getting truly enormous, so we have split the\n  release notes from the 0.x and 1.x releases into separate files found\n  in src/doc. So CHANGES.md only documents 2.0 and beyond.\n\n--------------\n\nFor older release notes, see:\n* [CHANGES-0.x](https://github.com/OpenImageIO/oiio/blob/master/src/doc/CHANGES-0.x.md).\n* [CHANGES-1.x](https://github.com/OpenImageIO/oiio/blob/master/src/doc/CHANGES-1.x.md).\n",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/libutil/plugin.cpp": "// Copyright 2008-present Contributors to the OpenImageIO project.\n// SPDX-License-Identifier: BSD-3-Clause\n// https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md\n\n#include <cstdlib>\n#include <string>\n\n#include <OpenImageIO/platform.h>\n\n#ifndef _WIN32\n#    include <dlfcn.h>\n#endif\n\n#include <OpenImageIO/plugin.h>\n#include <OpenImageIO/strutil.h>\n#include <OpenImageIO/thread.h>\n\n\nOIIO_NAMESPACE_BEGIN\n\nusing namespace Plugin;\n\nnamespace {\n\nstatic mutex plugin_mutex;\nstatic std::string last_error;\n\n}  // namespace\n\n\nconst char*\nPlugin::plugin_extension(void)\n{\n#if defined(_WIN32)\n    return \"dll\";\n#else\n    return \"so\";\n#endif\n}\n\n#if defined(_WIN32)\n\n// Dummy values\n#    define RTLD_LAZY 0\n#    define RTLD_GLOBAL 0\n\n\nHandle\ndlopen(const char* plugin_filename, int)\n{\n    std::wstring w = Strutil::utf8_to_utf16(plugin_filename);\n    return LoadLibraryW(w.c_str());\n}\n\n\n\nbool\ndlclose(Handle plugin_handle)\n{\n    return FreeLibrary((HMODULE)plugin_handle) != 0;\n}\n\n\n\nvoid*\ndlsym(Handle plugin_handle, const char* symbol_name)\n{\n    return (void*)GetProcAddress((HMODULE)plugin_handle, symbol_name);\n}\n\n\n\nstd::string\ndlerror()\n{\n    LPVOID lpMsgBuf;\n    std::string win32Error;\n    if (FormatMessageA(FORMAT_MESSAGE_ALLOCATE_BUFFER\n                           | FORMAT_MESSAGE_FROM_SYSTEM\n                           | FORMAT_MESSAGE_IGNORE_INSERTS,\n                       NULL, GetLastError(),\n                       MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n                       (LPSTR)&lpMsgBuf, 0, NULL))\n        win32Error = (LPSTR)lpMsgBuf;\n    LocalFree(lpMsgBuf);\n    return win32Error;\n}\n#endif\n\nHandle\nPlugin::open(const char* plugin_filename, bool global)\n{\n    lock_guard guard(plugin_mutex);\n    last_error.clear();\n    int mode = RTLD_LAZY;\n    if (global)\n        mode |= RTLD_GLOBAL;\n    Handle h = dlopen(plugin_filename, mode);\n    if (!h)\n        last_error = dlerror();\n    return h;\n}\n\n\n\nbool\nPlugin::close(Handle plugin_handle)\n{\n    lock_guard guard(plugin_mutex);\n    last_error.clear();\n    if (dlclose(plugin_handle)) {\n        last_error = dlerror();\n        return false;\n    }\n    return true;\n}\n\n\n\nvoid*\nPlugin::getsym(Handle plugin_handle, const char* symbol_name, bool report_error)\n{\n    lock_guard guard(plugin_mutex);\n    last_error.clear();\n    void* s = dlsym(plugin_handle, symbol_name);\n    if (!s && report_error)\n        last_error = dlerror();\n    return s;\n}\n\n\nstd::string\nPlugin::geterror(void)\n{\n    lock_guard guard(plugin_mutex);\n    std::string e = last_error;\n    last_error.clear();\n    return e;\n}\n\nOIIO_NAMESPACE_END\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/build-scripts/dwaLookups.h.zip",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/build-scripts/b44ExpLogTable.h.zip",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/fonts/Droid_Sans_Mono/DroidSansMono.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/fonts/Droid_Serif/DroidSerif.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/fonts/Droid_Serif/DroidSerif-BoldItalic.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/fonts/Droid_Serif/DroidSerif-Italic.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/fonts/Droid_Serif/DroidSerif-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/fonts/Droid_Sans/DroidSans-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/fonts/Droid_Sans/DroidSans.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/transpose.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/flop.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/gradient.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/dilate.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/checker.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/mulc.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/tophat.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/luma.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/rotate45.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/morphopen.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/rotate180.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/text.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/gradienth.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/box.png",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/gradient4.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/lines.png",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/fill.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/tahoe-lincontrast.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/grid-small.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/rotate270.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/morphsource.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/tahoe-pepper.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/tahoe-gauss.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/colormap-viridis.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/tahoe-sigmoid.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/tahoe-laplacian.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/tahoe-small.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/rotate90.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/flip.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/invert.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/addc.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/erode.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/tahoe-blur.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/morphclose.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/gaussnoise.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/textshadowed.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/unifnoise1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/tahoe-inverse.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/textcentered.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/bottomhat.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/flipflop.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/cut.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/colormap-inferno.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/trim.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/colormap-turbo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/pretrim.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/CC-30BY.png",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/crop.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/morphgradient.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/tahoe-pepper-median.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/tahoe-ccmatrix.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/cshift.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/colormap-custom.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/src/doc/figures/unifnoise3.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-icwrite/ref/out3.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-icwrite/ref/out4.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-icwrite/ref/out1.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-icwrite/ref/out2.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-interp-bilinear/ref/out.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/gif/ref/tahoe-tiny.gif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-fat/src/horizgrid.tx",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-fat/ref/out.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/common/textures/checker.tx",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/common/textures/grid.tx",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-pointsample/ref/out.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebufalgo/ref/mad3.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebufalgo/ref/checker.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebufalgo/ref/crop.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebufalgo/ref/mad2.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebufalgo/ref/textcentered-freetype2.4.11.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebufalgo/ref/tahoe-small.tx",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebufalgo/ref/textcentered.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebufalgo/ref/black.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebufalgo/ref/out.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-mip-nomip/ref/out.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-overscan/ref/out-over.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-overscan/ref/out-exact.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-overscan/ref/out-overclamp.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-text/ref/text.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-text/ref/aligned.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-text/ref/text-alt.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-text/ref/text-freetype2.6.5.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-text/ref/aligned-freetype2.4.11.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-text/ref/textshadowed.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-text/ref/text-freetype2.7.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-text/ref/textshadowed-freetype2.4.11.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-gettexels/ref/postage.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-composite/src/b.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-composite/src/a.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-composite/ref/a_over_b.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-udim/ref/out-freetype2.7.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-udim/ref/out-oldfreetype.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-udim/ref/out.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-derivs/src/ramp.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-derivs/ref/out.exr-dt.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-derivs/ref/out.exr-ds.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-derivs/ref/out.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-gray/src/gray.png",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-gray/ref/out.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/rla/ref/rlacrop.rla",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/ptex/src/triangle.ptx",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-maxres/ref/out.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-uint8/ref/out.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/dpx/src/input_rgb_mattes.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/dpx/ref/grey.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/dpx/ref/L.dpx",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/dpx/ref/stereo.dpx",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/dpx/ref/R.dpx",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/src/deep-onesample.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/src/deep-nosamples.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/src/az.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/src/deepalpha.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/ref/ch.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/ref/deep_divc.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/ref/trim1.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/ref/trim2.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/ref/deepmerge.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/ref/deep_subc.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/ref/flat.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/ref/crop1.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/ref/deep_addc.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/ref/deepen.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/ref/resampled-balls.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/ref/crop2.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-deep/ref/deep_mulc.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/dither/src/copybug-input.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/dither/ref/ramp.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/dither/ref/bad.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-pattern/ref/pattern-gradientv.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-pattern/ref/fill4.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-pattern/ref/lines.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-pattern/ref/pattern-gradienth.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-pattern/ref/fillv.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-pattern/ref/box.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-pattern/ref/noise-uniform3.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-pattern/ref/pattern-gradient4.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-pattern/ref/filled.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-pattern/ref/fillh.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-pattern/ref/pattern-const.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-pattern/ref/noise-salt.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-pattern/ref/noise-gauss.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/zfile/ref/out.zfile",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-wrapfill/ref/out3.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-wrapfill/ref/out1.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-half/ref/out.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-crop/ref/out.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd/src/layer-mask.psd",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd/src/different-mask-size.psd",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/openvdb/src/sphereCd.vdb",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/openvdb/src/sphere.vdb",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/openvdb/ref/sphere.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/openvdb/ref/sphereCd.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/tiff-depths/ref/cmyk_as_cmyk.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-subimage/ref/subimages-4-freetype2.6.5.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-subimage/ref/subimageD3-freetype2.7.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-subimage/ref/subimageD3-oldfreetype.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-subimage/ref/subimage1.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-subimage/ref/subimage2.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-subimage/ref/subimageB1-freetype2.7.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-subimage/ref/subimages-4-freetype2.7.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-subimage/ref/subimageD3.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-subimage/ref/subimages-4-oldfreetype.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-subimage/ref/subimageB1-freetype2.6.5.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-subimage/ref/subimageB1.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-subimage/ref/subimages-4.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-subimage/ref/subimages-2.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-subimage/ref/subimageB1-oldfreetype.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/missingcolor/src/partial.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/missingcolor/ref/missing.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-field3d/src/dense_half.f3d",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-field3d/src/sparse_half.f3d",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-field3d/src/sparse_float.f3d",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-field3d/src/dense_float.f3d",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-field3d/ref/out.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/maketx/src/bump.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/maketx/ref/bumpslope.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/tiff-misc/ref/check1.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-interp-closest/ref/out.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-flipt/ref/out.exr-dt.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-flipt/ref/out.exr-ds.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-flipt/ref/out.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-cropover/ref/out.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/jpeg-corrupt-header/src/corrupt-header.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/jpeg-corrupt-header/src/corrupt-exif.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-blurtube/ref/checker-0.00.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-blurtube/ref/checker-0.10.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-blurtube/ref/grid-0.02.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-blurtube/ref/grid-0.00.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-blurtube/ref/checker-0.02.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-blurtube/ref/out.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-blurtube/ref/checker-0.20.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-blurtube/ref/grid-0.05.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-blurtube/ref/checker-0.05.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-blurtube/ref/grid-0.10.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-blurtube/ref/grid-0.20.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-skinny/src/vertgrid.tx",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-skinny/ref/out.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/raw/ref/RAW_FUJI_F700.RAF-libraw0.20.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/raw/ref/RAW_CANON_EOS_7D.CR2-libraw0.20.0.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/raw/ref/RAW_PENTAX_K200D.PEF.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/raw/ref/RAW_PANASONIC_G1.RW2-libraw0.18.11.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/raw/ref/RAW_PENTAX_K200D.PEF-libraw0.18.11.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/raw/ref/RAW_OLYMPUS_E3.ORF.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/raw/ref/RAW_FUJI_F700.RAF.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/raw/ref/RAW_PANASONIC_G1.RW2.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/raw/ref/RAW_SONY_A300.ARW.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/raw/ref/RAW_OLYMPUS_E3.ORF-libraw0.20.0.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/raw/ref/out-libraw0.18.11.txt",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/raw/ref/RAW_NIKON_D3X.NEF.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/raw/ref/RAW_CANON_EOS_7D.CR2.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-readerror/src/incomplete.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/sgi/ref/norle-16.sgi",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/sgi/ref/rle-16.sgi",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/sgi/ref/norle-8.sgi",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/sgi/ref/rle-8.sgi",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/jpeg-corrupt/src/corrupt-header.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/jpeg-corrupt/src/corrupt-exif.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-fill/src/gray.png",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-fill/ref/out.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-filtersize/ref/out.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-copy/ref/crop.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-copy/ref/pasted.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-copy/ref/mosaic.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-copy/ref/cut.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-copy/ref/greenmeta.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/heif/ref/IMG_7702_small.heic",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-mip-trilinear/ref/out.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-res/ref/out.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/src/target1.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/warped.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/rotate90.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/rotate90-crop.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/flipflop-crop.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/resized-offset.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/fit.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/reorient1.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/pixelaspect.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/transpose.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/fit2.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/fit3.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/rotate270.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/rotated-offcenter.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/flipflop.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/reorient2.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/rotate270-crop.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/flip-crop.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/cshift.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/resize512.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/rotated360.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/resize2.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/flop-crop.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/rotated.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/flop.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/resize.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/resample.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/resize64.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/fit4.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/transpose-crop.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/reorient3.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-xform/ref/flip.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-missing/ref/out.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-uint16/ref/out.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imageoutput/ref/multipart.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/rational/src/test.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/src/image.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/src/tahoe-small.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/src/morphsource.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/src/tahoe-tiny.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/src/rgbaz.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/fft.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/erode.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/hole.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/histogram_input.png",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/trim.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/cmax1.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/mul.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/subimage1.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/rgbahalf-zfloat.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/abs.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/absdiff.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/ifft.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/unsharp.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/labeladd.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/tahoe-laplacian.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/const5-rgb.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/absdiffc.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/cadd2.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/growholes.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/tahoe-contraststretch.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/chanshuffle.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/subimage2.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/ch-z.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/min.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/chappend-rgbaz.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/cadd1.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/rangecompress-luma.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/trimsubimages.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/cpow2.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/rangecompress.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/cmul1.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/cmul2.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/polar.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/max.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/invert.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/cmin1.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/add.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/chsum.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/sub.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/rotate180.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/subimageD3.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/unpolar.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/bspline-blur.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/rangeexpand.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/exprcropped.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/cmax2.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/grid-clamped.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/rangeexpand-luma.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/cmin2.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/subimage-noB.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/allhalf.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/exprstrcatlzw.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/chname.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/subimageB1.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/bsplinekernel.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/histogram_regular.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/divc1.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/filled.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/subc.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/autotrim.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/subimages-4.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/subimages-2.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/tahoe-filled.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/div.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/ch-rgba.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/exprgradient.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/gauss5x5-blur.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/dilate.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/divc2.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/subimage-individual.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/unsharp-median.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/tahoe-median.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/histogram_cumulative.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/mad.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool/ref/cpow1.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-mip-onelevel/ref/out.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-interp-bicubic/ref/out.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-fixnan/src/bad.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-fixnan/ref/black.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-fixnan/ref/box3.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/bmp/src/g01bg2-v5.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-udim2/ref/out-freetype2.7.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-udim2/ref/out-oldfreetype.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-udim2/ref/out.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/texture-width0blur/ref/out.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/src/rgba.tga",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/ref/greyalpha_Cineon_un.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/ref/contrast-threshold.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/ref/contrast-stretch.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/ref/greyalpha_Cineon.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/ref/colormap-custom.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/ref/contrast-shrink.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/ref/rgbfromtga.png",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/ref/contrast-inverse.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/ref/greyalpha_sRGB.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/ref/unpremult.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/ref/premult.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/ref/colormap-inferno.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/ref/contrast-sigmoid5.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/ref/greyalpha_sRGB_un.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/oiiotool-color/ref/tahoe-ccmatrix.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebuf/ref/multipart.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebuf/ref/outarrayB.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebuf/ref/outarray.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebuf/ref/perchan.exr",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebuf/ref/outarrayH.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebuf/ref/out.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/python-imagebuf/ref/outtuple.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/src/pattern2-8-multichannel.psd",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/src/pattern2-16-cmyk.psd",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/src/pattern2-32-rgb.psd",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/src/pattern2-32-grayscale.psd",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/src/pattern2-8-rgb.psd",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/src/pattern2-16-multichannel.psd",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/src/pattern2-16-grayscale.psd",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/src/pattern2-16-rgb.psd",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/src/pattern2-16-lab.psd",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/src/pattern2-8-indexed.psd",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/src/pattern2-8-lab.psd",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/src/pattern2-8-cmyk.psd",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/src/pattern2-8-grayscale.psd",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/ref/pattern2-alpha.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/ref/pattern2.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/ref/pattern2-cmyk.tif",
        "/tmp/vanessa/spack-stage/spack-stage-openimageio-2.2.7.0-mempprxq7kmy65cigxtpr4qq5r276fuk/spack-src/testsuite/psd-colormodes/ref/pattern2-gray.tif"
    ],
    "total_files": 1143
}