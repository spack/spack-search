{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-laszip-3.4.1-ttstqyzfsqfw4sie4eq63tpkowecypn3/spack-src/dll/laszip_api.c": "/*\n===============================================================================\n\n  FILE:  laszip_api.c\n\n  CONTENTS:\n\n    A simple set of linkable function signatures for the DLL of LASzip\n\n  PROGRAMMERS:\n\n    martin.isenburg@rapidlasso.com  -  http://rapidlasso.com\n\n  COPYRIGHT:\n\n    (c) 2007-2017, martin isenburg, rapidlasso - fast tools to catch reality\n\n    This is free software; you can redistribute and/or modify it under the\n    terms of the GNU Lesser General Licence as published by the Free Software\n    Foundation. See the COPYING file for more information.\n\n    This software is distributed WITHOUT ANY WARRANTY and without even the\n    implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n  CHANGE HISTORY:\n\n    see header file\n\n===============================================================================\n*/\n\n#include <laszip/laszip_api.h>\n\n// DLL function definitions\n\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n\n/*---------------------------------------------------------------------------*/\n/*---------------- DLL functions to manage the LASzip DLL -------------------*/\n/*---------------------------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_get_version_def)\n(\n    laszip_U8*                         version_major\n    , laszip_U8*                       version_minor\n    , laszip_U16*                      version_revision\n    , laszip_U32*                      version_build\n);\nlaszip_get_version_def laszip_get_version_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_get_version\n(\n    laszip_U8*                         version_major\n    , laszip_U8*                       version_minor\n    , laszip_U16*                      version_revision\n    , laszip_U32*                      version_build\n)\n{\n  if (laszip_get_version_ptr)\n  {\n    return (*laszip_get_version_ptr)(version_major, version_minor, version_revision, version_build);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_create_def)\n(\n    laszip_POINTER*                    pointer\n);\nlaszip_create_def laszip_create_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_create\n(\n    laszip_POINTER*                    pointer\n)\n{\n  if (laszip_create_ptr)\n  {\n    return (*laszip_create_ptr)(pointer);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_clean_def)\n(\n    laszip_POINTER                     pointer\n);\nlaszip_clean_def laszip_clean_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_clean\n(\n    laszip_POINTER                     pointer\n)\n{\n  if (laszip_clean_ptr)\n  {\n    return (*laszip_clean_ptr)(pointer);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_get_error_def)\n(\n    laszip_POINTER                     pointer\n    , laszip_CHAR**                    error\n);\nlaszip_get_error_def laszip_get_error_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_get_error\n(\n    laszip_POINTER                     pointer\n    , laszip_CHAR**                    error\n)\n{\n  if (laszip_get_error_ptr)\n  {\n    return (*laszip_get_error_ptr)(pointer, error);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_get_warning_def)\n(\n    laszip_POINTER                     pointer\n    , laszip_CHAR**                    warning\n);\nlaszip_get_warning_def laszip_get_warning_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_get_warning\n(\n    laszip_POINTER                     pointer\n    , laszip_CHAR**                    warning\n)\n{\n  if (laszip_get_warning_ptr)\n  {\n    return (*laszip_get_warning_ptr)(pointer, warning);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_destroy_def)\n(\n    laszip_POINTER       pointer\n);\nlaszip_destroy_def laszip_destroy_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_destroy\n(\n    laszip_POINTER       pointer\n)\n{\n  if (laszip_destroy_ptr)\n  {\n    return (*laszip_destroy_ptr)(pointer);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\n/*---------- DLL functions to write and read LAS and LAZ files --------------*/\n/*---------------------------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_get_header_pointer_def)\n(\n    laszip_POINTER                     pointer\n    , laszip_header_struct**           header_pointer\n);\nlaszip_get_header_pointer_def laszip_get_header_pointer_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_get_header_pointer\n(\n    laszip_POINTER                     pointer\n    , laszip_header_struct**           header_pointer\n)\n{\n  if (laszip_get_header_pointer_ptr)\n  {\n    return (*laszip_get_header_pointer_ptr)(pointer, header_pointer);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_get_point_pointer_def)\n(\n    laszip_POINTER                     pointer\n    , laszip_point_struct**            point_pointer\n);\nlaszip_get_point_pointer_def laszip_get_point_pointer_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_get_point_pointer\n(\n    laszip_POINTER                     pointer\n    , laszip_point_struct**            point_pointer\n)\n{\n  if (laszip_get_point_pointer_ptr)\n  {\n    return (*laszip_get_point_pointer_ptr)(pointer, point_pointer);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_get_point_count_def)\n(\n    laszip_POINTER                     pointer\n    , laszip_I64*                      point_count\n);\nlaszip_get_point_count_def laszip_get_point_count_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_get_point_count\n(\n    laszip_POINTER                     pointer\n    , laszip_I64*                      point_count\n)\n{\n  if (laszip_get_point_count_ptr)\n  {\n    return (*laszip_get_point_count_ptr)(pointer, point_count);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_set_header_def)\n(\n    laszip_POINTER                     pointer\n    , const laszip_header_struct*      header\n);\nlaszip_set_header_def laszip_set_header_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_set_header\n(\n    laszip_POINTER                     pointer\n    , const laszip_header_struct*      header\n)\n{\n  if (laszip_set_header_ptr)\n  {\n    return (*laszip_set_header_ptr)(pointer, header);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_set_point_type_and_size_def)\n(\n    laszip_POINTER                     pointer\n    , laszip_U8                        point_type\n    , laszip_U16                       point_size\n);\nlaszip_set_point_type_and_size_def laszip_set_point_type_and_size_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_set_point_type_and_size\n(\n    laszip_POINTER                     pointer\n    , laszip_U8                        point_type\n    , laszip_U16                       point_size\n)\n{\n  if (laszip_set_point_type_and_size_ptr)\n  {\n    return (*laszip_set_point_type_and_size_ptr)(pointer, point_type, point_size);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_check_for_integer_overflow_def)\n(\n    laszip_POINTER                     pointer\n);\nlaszip_check_for_integer_overflow_def laszip_check_for_integer_overflow_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_check_for_integer_overflow\n(\n    laszip_POINTER                     pointer\n)\n{\n  if (laszip_check_for_integer_overflow_ptr)\n  {\n    return (*laszip_check_for_integer_overflow_ptr)(pointer);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_auto_offset_def)\n(\n    laszip_POINTER                     pointer\n);\nlaszip_auto_offset_def laszip_auto_offset_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_auto_offset\n(\n    laszip_POINTER                     pointer\n)\n{\n  if (laszip_auto_offset_ptr)\n  {\n    return (*laszip_auto_offset_ptr)(pointer);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_set_point_def)\n(\n    laszip_POINTER                     pointer\n    , const laszip_point_struct*       point\n);\nlaszip_set_point_def laszip_set_point_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_set_point\n(\n    laszip_POINTER                     pointer\n    , const laszip_point_struct*       point\n)\n{\n  if (laszip_set_point_ptr)\n  {\n    return (*laszip_set_point_ptr)(pointer, point);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_set_coordinates_def)\n(\n    laszip_POINTER                     pointer\n    , const laszip_F64*                coordinates\n);\nlaszip_set_coordinates_def laszip_set_coordinates_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_set_coordinates\n(\n    laszip_POINTER                     pointer\n    , const laszip_F64*                coordinates\n)\n{\n  if (laszip_set_coordinates_ptr)\n  {\n    return (*laszip_set_coordinates_ptr)(pointer, coordinates);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_get_coordinates_def)\n(\n    laszip_POINTER                     pointer\n    , laszip_F64*                      coordinates\n);\nlaszip_get_coordinates_def laszip_get_coordinates_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_get_coordinates\n(\n    laszip_POINTER                     pointer\n    , laszip_F64*                      coordinates\n)\n{\n  if (laszip_get_coordinates_ptr)\n  {\n    return (*laszip_get_coordinates_ptr)(pointer, coordinates);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_set_geokeys_def)\n(\n    laszip_POINTER                     pointer\n    , laszip_U32                       number\n    , const laszip_geokey_struct*      key_entries\n);\nlaszip_set_geokeys_def laszip_set_geokeys_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_set_geokeys\n(\n    laszip_POINTER                     pointer\n    , laszip_U32                       number\n    , const laszip_geokey_struct*      key_entries\n)\n{\n  if (laszip_set_geokeys_ptr)\n  {\n    return (*laszip_set_geokeys_ptr)(pointer, number, key_entries);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_set_geodouble_params_def)\n(\n    laszip_POINTER                     pointer\n    , laszip_U32                       number\n    , const laszip_F64*                geodouble_params\n);\nlaszip_set_geodouble_params_def laszip_set_geodouble_params_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_set_geodouble_params\n(\n    laszip_POINTER                     pointer\n    , laszip_U32                       number\n    , const laszip_F64*                geodouble_params\n)\n{\n  if (laszip_set_geodouble_params_ptr)\n  {\n    return (*laszip_set_geodouble_params_ptr)(pointer, number, geodouble_params);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_set_geoascii_params_def)\n(\n    laszip_POINTER                     pointer\n    , laszip_U32                       number\n    , const laszip_CHAR*               geoascii_params\n);\nlaszip_set_geoascii_params_def laszip_set_geoascii_params_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_set_geoascii_params\n(\n    laszip_POINTER                     pointer\n    , laszip_U32                       number\n    , const laszip_CHAR*               geoascii_params\n)\n{\n  if (laszip_set_geoascii_params_ptr)\n  {\n    return (*laszip_set_geoascii_params_ptr)(pointer, number, geoascii_params);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_add_attribute_def)\n(\n    laszip_POINTER                     pointer\n    , laszip_U32                       type\n    , const laszip_CHAR*               name\n    , const laszip_CHAR*               description\n    , laszip_F64                       scale\n    , laszip_F64                       offset\n);\nlaszip_add_attribute_def laszip_add_attribute_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_add_attribute\n(\n    laszip_POINTER                     pointer\n    , laszip_U32                       type\n    , const laszip_CHAR*               name\n    , const laszip_CHAR*               description\n    , laszip_F64                       scale\n    , laszip_F64                       offset\n)\n{\n  if (laszip_add_attribute_ptr)\n  {\n    return (*laszip_add_attribute_ptr)(pointer, type, name, description, scale, offset);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_add_vlr_def)\n(\n    laszip_POINTER                     pointer\n    , const laszip_CHAR*               user_id\n    , laszip_U16                       record_id\n    , laszip_U16                       record_length_after_header\n    , const laszip_CHAR*               description\n    , const laszip_U8*                 data\n);\nlaszip_add_vlr_def laszip_add_vlr_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_add_vlr\n(\n    laszip_POINTER                     pointer\n    , const laszip_CHAR*               user_id\n    , laszip_U16                       record_id\n    , laszip_U16                       record_length_after_header\n    , const laszip_CHAR*               description\n    , const laszip_U8*                 data\n)\n{\n  if (laszip_add_vlr_ptr)\n  {\n    return (*laszip_add_vlr_ptr)(pointer, user_id, record_id, record_length_after_header, description, data);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_remove_vlr_def)\n(\n    laszip_POINTER                     pointer\n    , const laszip_CHAR*               user_id\n    , laszip_U16                       record_id\n);\nlaszip_remove_vlr_def laszip_remove_vlr_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_remove_vlr\n(\n    laszip_POINTER                     pointer\n    , const laszip_CHAR*               user_id\n    , laszip_U16                       record_id\n)\n{\n  if (laszip_remove_vlr_ptr)\n  {\n    return (*laszip_remove_vlr_ptr)(pointer, user_id, record_id);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_create_spatial_index_def)\n(\n    laszip_POINTER                     pointer\n    , const laszip_BOOL                create\n    , const laszip_BOOL                append\n);\nlaszip_create_spatial_index_def laszip_create_spatial_index_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_create_spatial_index\n(\n    laszip_POINTER                     pointer\n    , const laszip_BOOL                create\n    , const laszip_BOOL                append\n)\n{\n  if (laszip_create_spatial_index_ptr)\n  {\n    return (*laszip_create_spatial_index_ptr)(pointer, create, append);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_preserve_generating_software_def)\n(\n    laszip_POINTER                     pointer\n    , const laszip_BOOL                preserve\n);\nlaszip_preserve_generating_software_def laszip_preserve_generating_software_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_preserve_generating_software\n(\n    laszip_POINTER                     pointer\n    , const laszip_BOOL                preserve\n)\n{\n  if (laszip_preserve_generating_software_ptr)\n  {\n    return (*laszip_preserve_generating_software_ptr)(pointer, preserve);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_request_native_extension_def)\n(\n    laszip_POINTER                     pointer\n    , const laszip_BOOL                request\n);\nlaszip_request_native_extension_def laszip_request_native_extension_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_request_native_extension\n(\n    laszip_POINTER                     pointer\n    , const laszip_BOOL                request\n)\n{\n  if (laszip_request_native_extension_ptr)\n  {\n    return (*laszip_request_native_extension_ptr)(pointer, request);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_request_compatibility_mode_def)\n(\n    laszip_POINTER                     pointer\n    , const laszip_BOOL                request\n);\nlaszip_request_compatibility_mode_def laszip_request_compatibility_mode_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_request_compatibility_mode\n(\n    laszip_POINTER                     pointer\n    , const laszip_BOOL                request\n)\n{\n  if (laszip_request_compatibility_mode_ptr)\n  {\n    return (*laszip_request_compatibility_mode_ptr)(pointer, request);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_set_chunk_size_def)\n(\n    laszip_POINTER                     pointer\n    , const laszip_U32                 chunk_size\n);\nlaszip_set_chunk_size_def laszip_set_chunk_size_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_set_chunk_size\n(\n    laszip_POINTER                     pointer\n    , const laszip_U32                 chunk_size\n)\n{\n  if (laszip_set_chunk_size_ptr)\n  {\n    return (*laszip_set_chunk_size_ptr)(pointer, chunk_size);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_open_writer_def)\n(\n    laszip_POINTER                     pointer\n    , const laszip_CHAR*               file_name\n    , laszip_BOOL                      compress\n);\nlaszip_open_writer_def laszip_open_writer_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_open_writer\n(\n    laszip_POINTER                     pointer\n    , const laszip_CHAR*               file_name\n    , laszip_BOOL                      compress\n)\n{\n  if (laszip_open_writer_ptr)\n  {\n    return (*laszip_open_writer_ptr)(pointer, file_name, compress);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_write_point_def)\n(\n    laszip_POINTER                     pointer\n);\nlaszip_write_point_def laszip_write_point_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_write_point\n(\n    laszip_POINTER                     pointer\n)\n{\n  if (laszip_write_point_ptr)\n  {\n    return (*laszip_write_point_ptr)(pointer);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_write_indexed_point_def)\n(\n    laszip_POINTER                     pointer\n);\nlaszip_write_indexed_point_def laszip_write_indexed_point_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_write_indexed_point\n(\n    laszip_POINTER                     pointer\n)\n{\n  if (laszip_write_indexed_point_ptr)\n  {\n    return (*laszip_write_indexed_point_ptr)(pointer);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_update_inventory_def)\n(\n    laszip_POINTER                     pointer\n);\nlaszip_update_inventory_def laszip_update_inventory_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_update_inventory\n(\n    laszip_POINTER                     pointer\n)\n{\n  if (laszip_update_inventory_ptr)\n  {\n    return (*laszip_update_inventory_ptr)(pointer);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_close_writer_def)\n(\n    laszip_POINTER                     pointer\n);\nlaszip_close_writer_def laszip_close_writer_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_close_writer\n(\n    laszip_POINTER                     pointer\n)\n{\n  if (laszip_close_writer_ptr)\n  {\n    return (*laszip_close_writer_ptr)(pointer);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_exploit_spatial_index_def)\n(\n    laszip_POINTER                     pointer\n    , const laszip_BOOL                exploit\n);\nlaszip_exploit_spatial_index_def laszip_exploit_spatial_index_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_exploit_spatial_index\n(\n    laszip_POINTER                     pointer\n    , const laszip_BOOL                exploit\n)\n{\n  if (laszip_exploit_spatial_index_ptr)\n  {\n    return (*laszip_exploit_spatial_index_ptr)(pointer, exploit);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_decompress_selective_def)\n(\n    laszip_POINTER                     pointer\n    , const laszip_U32                 decompress_selective\n);\nlaszip_decompress_selective_def laszip_decompress_selective_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_decompress_selective\n(\n    laszip_POINTER                     pointer\n    , const laszip_U32                 decompress_selective\n)\n{\n  if (laszip_decompress_selective_ptr)\n  {\n    return (*laszip_decompress_selective_ptr)(pointer, decompress_selective);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_open_reader_def)\n(\n    laszip_POINTER                     pointer\n    , const laszip_CHAR*               file_name\n    , laszip_BOOL*                     is_compressed\n);\nlaszip_open_reader_def laszip_open_reader_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_open_reader\n(\n    laszip_POINTER                     pointer\n    , const laszip_CHAR*               file_name\n    , laszip_BOOL*                     is_compressed\n)\n{\n  if (laszip_open_reader_ptr)\n  {\n    return (*laszip_open_reader_ptr)(pointer, file_name, is_compressed);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_has_spatial_index_def)\n(\n    laszip_POINTER                     pointer\n    , laszip_BOOL*                     is_compressed\n    , laszip_BOOL*                     is_appended\n);\nlaszip_has_spatial_index_def laszip_has_spatial_index_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_has_spatial_index\n(\n    laszip_POINTER                     pointer\n    , laszip_BOOL*                     is_compressed\n    , laszip_BOOL*                     is_appended\n)\n{\n  if (laszip_has_spatial_index_ptr)\n  {\n    return (*laszip_has_spatial_index_ptr)(pointer, is_compressed, is_appended);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_inside_rectangle_def)\n(\n    laszip_POINTER                     pointer\n    , laszip_F64                       r_min_x\n    , laszip_F64                       r_min_y\n    , laszip_F64                       r_max_x\n    , laszip_F64                       r_max_y\n    , laszip_BOOL*                     is_empty\n);\nlaszip_inside_rectangle_def laszip_inside_rectangle_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_inside_rectangle\n(\n    laszip_POINTER                     pointer\n    , laszip_F64                       r_min_x\n    , laszip_F64                       r_min_y\n    , laszip_F64                       r_max_x\n    , laszip_F64                       r_max_y\n    , laszip_BOOL*                     is_empty\n)\n{\n  if (laszip_inside_rectangle_ptr)\n  {\n    return (*laszip_inside_rectangle_ptr)(pointer, r_min_x, r_min_y, r_max_x, r_max_y, is_empty);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_seek_point_def)\n(\n    laszip_POINTER                     pointer\n    , laszip_I64                       index\n);\nlaszip_seek_point_def laszip_seek_point_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_seek_point(\n    laszip_POINTER                     pointer\n    , laszip_I64                       index\n)\n{\n  if (laszip_seek_point_ptr)\n  {\n    return (*laszip_seek_point_ptr)(pointer, index);\n  }\n  return 1;\n}\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_read_point_def)\n(\n    laszip_POINTER                     pointer\n);\nlaszip_read_point_def laszip_read_point_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_read_point(\n    laszip_POINTER                     pointer\n)\n{\n  if (laszip_read_point_ptr)\n  {\n    return (*laszip_read_point_ptr)(pointer);\n  }\n  return 1;\n}\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_read_inside_point_def)\n(\n    laszip_POINTER                     pointer\n    , laszip_BOOL*                     is_done\n);\nlaszip_read_inside_point_def laszip_read_inside_point_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_read_inside_point(\n    laszip_POINTER                     pointer\n    , laszip_BOOL*                     is_done\n)\n{\n  if (laszip_read_inside_point_ptr)\n  {\n    return (*laszip_read_inside_point_ptr)(pointer, is_done);\n  }\n  return 1;\n}\n\n/*---------------------------------------------------------------------------*/\ntypedef laszip_I32 (*laszip_close_reader_def)\n(\n    laszip_POINTER                     pointer\n);\nlaszip_close_reader_def laszip_close_reader_ptr = 0;\nLASZIP_API laszip_I32\nlaszip_close_reader\n(\n    laszip_POINTER                     pointer\n)\n{\n  if (laszip_close_reader_ptr)\n  {\n    return (*laszip_close_reader_ptr)(pointer);\n  }\n  return 1;\n};\n\n/*---------------------------------------------------------------------------*/\n/*---------------- DLL functions to load and unload LASzip ------------------*/\n/*---------------------------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------*/\n#ifdef _WIN32\n  #include <windows.h>\n#define FreeLibraryZeroMeansFail 1\n#else\n  #include <dlfcn.h>\n  typedef void* HINSTANCE;\n#ifndef NULL\n#define NULL 0\n#endif\n#define LoadLibrary dlopen\n#define GetProcAddress dlsym\n#define FreeLibrary dlclose\n#define FreeLibraryZeroMeansFail 0\n#define TEXT\n#endif\nstatic HINSTANCE laszip_HINSTANCE = NULL;\nlaszip_I32 laszip_load_dll()\n{\n  // Assure DLL not yet loaded\n  if (laszip_HINSTANCE != NULL) {\n    return 1;\n  }\n  // Load DLL file\n#ifdef _WIN32\n  laszip_HINSTANCE = LoadLibrary(TEXT(\"LASzip.dll\"));\n#elif __APPLE__\n  laszip_HINSTANCE = LoadLibrary(\"liblaszip.dylib\", RTLD_NOW);\n#else\n  laszip_HINSTANCE = LoadLibrary(\"liblaszip.so\", RTLD_NOW);\n#endif\n  if (laszip_HINSTANCE == NULL) {\n     return 1;\n  }\n  // Get function pointers\n  laszip_get_version_ptr = (laszip_get_version_def)GetProcAddress(laszip_HINSTANCE, \"laszip_get_version\");\n  if (laszip_get_version_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_create_ptr = (laszip_create_def)GetProcAddress(laszip_HINSTANCE, \"laszip_create\");\n  if (laszip_create_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_clean_ptr = (laszip_clean_def)GetProcAddress(laszip_HINSTANCE, \"laszip_clean\");\n  if (laszip_clean_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_get_error_ptr = (laszip_get_error_def)GetProcAddress(laszip_HINSTANCE, \"laszip_get_error\");\n  if (laszip_get_error_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_get_warning_ptr = (laszip_get_warning_def)GetProcAddress(laszip_HINSTANCE, \"laszip_get_warning\");\n  if (laszip_get_warning_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_destroy_ptr = (laszip_destroy_def)GetProcAddress(laszip_HINSTANCE, \"laszip_destroy\");\n  if (laszip_destroy_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_get_header_pointer_ptr = (laszip_get_header_pointer_def)GetProcAddress(laszip_HINSTANCE, \"laszip_get_header_pointer\");\n  if (laszip_get_header_pointer_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_get_point_pointer_ptr = (laszip_get_point_pointer_def)GetProcAddress(laszip_HINSTANCE, \"laszip_get_point_pointer\");\n  if (laszip_get_point_pointer_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_get_point_count_ptr = (laszip_get_point_count_def)GetProcAddress(laszip_HINSTANCE, \"laszip_get_point_count\");\n  if (laszip_get_point_count_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_set_header_ptr = (laszip_set_header_def)GetProcAddress(laszip_HINSTANCE, \"laszip_set_header\");\n  if (laszip_set_header_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_set_point_type_and_size_ptr = (laszip_set_point_type_and_size_def)GetProcAddress(laszip_HINSTANCE, \"laszip_set_point_type_and_size\");\n  if (laszip_set_point_type_and_size_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_check_for_integer_overflow_ptr = (laszip_check_for_integer_overflow_def)GetProcAddress(laszip_HINSTANCE, \"laszip_check_for_integer_overflow\");\n  if (laszip_check_for_integer_overflow_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_auto_offset_ptr = (laszip_auto_offset_def)GetProcAddress(laszip_HINSTANCE, \"laszip_auto_offset\");\n  if (laszip_auto_offset_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_set_point_ptr = (laszip_set_point_def)GetProcAddress(laszip_HINSTANCE, \"laszip_set_point\");\n  if (laszip_set_point_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_set_coordinates_ptr = (laszip_set_coordinates_def)GetProcAddress(laszip_HINSTANCE, \"laszip_set_coordinates\");\n  if (laszip_set_coordinates_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_get_coordinates_ptr = (laszip_get_coordinates_def)GetProcAddress(laszip_HINSTANCE, \"laszip_get_coordinates\");\n  if (laszip_get_coordinates_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_set_geokeys_ptr = (laszip_set_geokeys_def)GetProcAddress(laszip_HINSTANCE, \"laszip_set_geokeys\");\n  if (laszip_set_geokeys_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_set_geodouble_params_ptr = (laszip_set_geodouble_params_def)GetProcAddress(laszip_HINSTANCE, \"laszip_set_geodouble_params\");\n  if (laszip_set_geodouble_params_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_set_geoascii_params_ptr = (laszip_set_geoascii_params_def)GetProcAddress(laszip_HINSTANCE, \"laszip_set_geoascii_params\");\n  if (laszip_set_geoascii_params_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_add_attribute_ptr = (laszip_add_attribute_def)GetProcAddress(laszip_HINSTANCE, \"laszip_add_attribute\");\n  if (laszip_add_attribute_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_add_vlr_ptr = (laszip_add_vlr_def)GetProcAddress(laszip_HINSTANCE, \"laszip_add_vlr\");\n  if (laszip_add_vlr_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_remove_vlr_ptr = (laszip_remove_vlr_def)GetProcAddress(laszip_HINSTANCE, \"laszip_remove_vlr\");\n  if (laszip_remove_vlr_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_create_spatial_index_ptr = (laszip_create_spatial_index_def)GetProcAddress(laszip_HINSTANCE, \"laszip_create_spatial_index\");\n  if (laszip_create_spatial_index_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_preserve_generating_software_ptr = (laszip_preserve_generating_software_def)GetProcAddress(laszip_HINSTANCE, \"laszip_preserve_generating_software\");\n  if (laszip_preserve_generating_software_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_request_native_extension_ptr = (laszip_request_native_extension_def)GetProcAddress(laszip_HINSTANCE, \"laszip_request_native_extension\");\n  if (laszip_request_native_extension_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_request_compatibility_mode_ptr = (laszip_request_compatibility_mode_def)GetProcAddress(laszip_HINSTANCE, \"laszip_request_compatibility_mode\");\n  if (laszip_request_compatibility_mode_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_set_chunk_size_ptr = (laszip_set_chunk_size_def)GetProcAddress(laszip_HINSTANCE, \"laszip_set_chunk_size\");\n  if (laszip_set_chunk_size_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_open_writer_ptr = (laszip_open_writer_def)GetProcAddress(laszip_HINSTANCE, \"laszip_open_writer\");\n  if (laszip_open_writer_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_write_point_ptr = (laszip_write_point_def)GetProcAddress(laszip_HINSTANCE, \"laszip_write_point\");\n  if (laszip_write_point_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_write_indexed_point_ptr = (laszip_write_indexed_point_def)GetProcAddress(laszip_HINSTANCE, \"laszip_write_indexed_point\");\n  if (laszip_write_indexed_point_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_update_inventory_ptr = (laszip_update_inventory_def)GetProcAddress(laszip_HINSTANCE, \"laszip_update_inventory\");\n  if (laszip_update_inventory_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_close_writer_ptr = (laszip_close_writer_def)GetProcAddress(laszip_HINSTANCE, \"laszip_close_writer\");\n  if (laszip_close_writer_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_exploit_spatial_index_ptr = (laszip_exploit_spatial_index_def)GetProcAddress(laszip_HINSTANCE, \"laszip_exploit_spatial_index\");\n  if (laszip_exploit_spatial_index_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_decompress_selective_ptr = (laszip_decompress_selective_def)GetProcAddress(laszip_HINSTANCE, \"laszip_decompress_selective\");\n  if (laszip_decompress_selective_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_open_reader_ptr = (laszip_open_reader_def)GetProcAddress(laszip_HINSTANCE, \"laszip_open_reader\");\n  if (laszip_open_reader_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_has_spatial_index_ptr = (laszip_has_spatial_index_def)GetProcAddress(laszip_HINSTANCE, \"laszip_has_spatial_index\");\n  if (laszip_has_spatial_index_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_inside_rectangle_ptr = (laszip_inside_rectangle_def)GetProcAddress(laszip_HINSTANCE, \"laszip_inside_rectangle\");\n  if (laszip_inside_rectangle_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_seek_point_ptr = (laszip_seek_point_def)GetProcAddress(laszip_HINSTANCE, \"laszip_seek_point\");\n  if (laszip_seek_point_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_read_point_ptr = (laszip_read_point_def)GetProcAddress(laszip_HINSTANCE, \"laszip_read_point\");\n  if (laszip_read_point_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_read_inside_point_ptr = (laszip_read_inside_point_def)GetProcAddress(laszip_HINSTANCE, \"laszip_read_inside_point\");\n  if (laszip_read_inside_point_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  laszip_close_reader_ptr = (laszip_close_reader_def)GetProcAddress(laszip_HINSTANCE, \"laszip_close_reader\");\n  if (laszip_close_reader_ptr == NULL) {\n     FreeLibrary(laszip_HINSTANCE);\n     return 1;\n  }\n  return 0;\n};\n\n/*---------------------------------------------------------------------------*/\nlaszip_I32 laszip_unload_dll()\n{\n  if (laszip_HINSTANCE == NULL) {\n    return 1;\n  }\n  if (FreeLibraryZeroMeansFail)\n  {\n    if (!FreeLibrary(laszip_HINSTANCE)) {\n      return 1;\n    }\n  }\n  else\n  {\n    if (FreeLibrary(laszip_HINSTANCE)) {\n      return 1;\n    }\n  }\n  laszip_HINSTANCE = NULL;\n  return 0;\n}\n\n#ifdef __cplusplus\n}\n#endif\n"
    },
    "skipped": [],
    "total_files": 97
}