{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/configure.ac": "dnl                                               -*- Autoconf -*-\ndnl Process this file with autoconf to produce a configure script.\ndnl\ndnl Indentation rules:\ndnl - closing braces not at the beginning of a line must match opening\ndnl   braces earlier on that line\ndnl - closing braces at the beginning of a line:\ndnl   - must not be followed by anything else apart from \",\" or comments\ndnl   - must match opening braces from another line and indented the\ndnl     same as that other line\ndnl - if one argument was put on a new line, all following arguments\ndnl   must be on their own line too\ndnl - if an argument uses more than one line and is not a single\ndnl   function call, the argument should be on different lines than the\ndnl   wrapping braces\nAC_PREREQ(2.60)\nAC_INIT([lighttpd], [1.4.54], [contact@lighttpd.net])\nAC_CONFIG_SRCDIR([src/server.c])\nAC_CONFIG_HEADER([config.h])\nAC_CONFIG_MACRO_DIR([m4])\n\nAC_CANONICAL_HOST\n\nAM_INIT_AUTOMAKE([1.13 -Wall -Wno-portability -Wno-override foreign dist-xz tar-ustar serial-tests silent-rules subdir-objects])\n\ndnl @synopsis TRY_CFLAGS [compiler flags]\ndnl @summary check whether compiler supports given flags and adds them to CFLAGS\nAC_DEFUN([TRY_CFLAGS],\n[dnl\n  AC_MSG_CHECKING([if $CC supports $1])\n  AC_LANG_PUSH([C])\n  ac_try_cflags_saved_cflags=\"${CFLAGS}\"\n  CFLAGS=\"${CFLAGS} $1\"\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([])],\n    [AC_MSG_RESULT([yes])],\n    [\n      AC_MSG_ERROR([no])\n      CFLAGS=\"${ac_try_cflags_saved_cflags}\"\n    ]\n  )\n  AC_LANG_POP([C])\n])\n\ndnl @synopsis TRY_LDFLAGS [linker flags]\ndnl @summary check whether linker supports given flags and adds them to LDFLAGS\nAC_DEFUN([TRY_LDFLAGS],\n[dnl\n  AC_MSG_CHECKING([if $LD supports $1])\n  AC_LANG_PUSH([C])\n  ac_try_ldflags_saved_ldflags=\"${LDFLAGS}\"\n  LDFLAGS=\"${LDFLAGS} $1\"\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([])],\n    [AC_MSG_RESULT([yes])],\n    [\n      AC_MSG_ERROR([no])\n      LDFLAGS=\"${ac_try_ldflags_saved_cflags}\"\n    ]\n  )\n  AC_LANG_POP([C])\n])\n\ndnl Checks for programs.\nAC_PROG_CC\nAC_PROG_CC_STDC\nAX_PROG_CC_FOR_BUILD\nAC_PROG_LD\nAC_PROG_INSTALL\nAC_PROG_CPP\nAC_PROG_MAKE_SET\n\nAC_USE_SYSTEM_EXTENSIONS\nAM_PROG_AR\n\ndnl AC_CANONICAL_HOST\ncase \"$host_os\" in\n*darwin*|*cygwin*|*aix*|*mingw*|*midipix* ) NO_RDYNAMIC=yes ;;\n* ) NO_RDYNAMIC=no ;;\nesac\nAM_CONDITIONAL([NO_RDYNAMIC], [test \"$NO_RDYNAMIC\" = yes])\n\nAM_CONDITIONAL([LIGHTTPD_STATIC], [test \"$LIGHTTPD_STATIC\" = yes])\n\nAC_EXEEXT\n\ndnl libtool\nAC_DISABLE_STATIC\nAC_ENABLE_SHARED\n\nAC_LIBTOOL_DLOPEN\nAC_PROG_LIBTOOL\n\ndnl for solaris\nCPPFLAGS=\"${CPPFLAGS} -D_REENTRANT\"\n\ndnl Checks for header files.\n\ndnl check for:\ndnl   inttypes.h => HAVE_INTTYPES_H\ndnl   stdint.h => HAVE_STDINT_H\ndnl and maybe more (which shouldn't be relied on)\nAC_HEADER_STDC\ndnl checks for sys/wait.h => HAVE_SYS_WAIT_H\nAC_HEADER_SYS_WAIT\nAC_CHECK_HEADERS([\\\n  getopt.h \\\n  poll.h \\\n  port.h \\\n  pwd.h \\\n  stdlib.h \\\n  strings.h \\\n  sys/devpoll.h \\\n  sys/epoll.h \\\n  sys/event.h \\\n  sys/filio.h \\\n  sys/mman.h \\\n  sys/poll.h \\\n  sys/prctl.h \\\n  sys/resource.h \\\n  sys/select.h \\\n  sys/sendfile.h \\\n  sys/time.h \\\n  sys/uio.h \\\n  sys/un.h \\\n  syslog.h \\\n  uuid/uuid.h \\\n])\n\ndnl Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_C_INLINE\nAC_TYPE_OFF_T\nAC_TYPE_PID_T\nAC_TYPE_SIZE_T\n\nAC_CHECK_MEMBER([struct tm.tm_gmtoff],\n  [AC_DEFINE([HAVE_STRUCT_TM_GMTOFF], [1], [gmtoff in struct tm])],\n  [],\n  [#include <time.h>]\n)\nAC_CHECK_TYPES([socklen_t],\n  [], dnl defines HAVE_SOCKLEN_T\n  [],\n  [\n    #include <sys/types.h>\n    #include <sys/socket.h>\n  ]\n)\n\ndnl openssl on solaris needs -lsocket -lnsl\nAC_SEARCH_LIBS([socket], [socket])\nAC_SEARCH_LIBS([gethostbyname], [nsl socket])\n\ndnl On Haiku accept() and friends are in libnetwork\nAC_SEARCH_LIBS([accept], [network])\n\ndnl clock_gettime() needs -lrt with glibc < 2.17, and possibly other platforms\nAC_SEARCH_LIBS([clock_gettime], [rt])\n\ndnl FreeBSD elftc_copyfile()\nsave_LIBS=$LIBS\nLIBS=\nAC_SEARCH_LIBS([elftc_copyfile], [elftc], [\n  AC_CHECK_HEADERS([libelftc.h], [\n    ELFTC_LIB=$LIBS\n    AC_DEFINE([HAVE_LIBELFTC], [1], [libelftc])\n    AC_DEFINE([HAVE_ELFTC_COPYFILE], [1], [elftc_copyfile])\n  ])\n])\nLIBS=$save_LIBS\nAC_SUBST([ELFTC_LIB])\n\ndnl need dlopen/-ldl to load plugins (when not on windows)\nsave_LIBS=$LIBS\nLIBS=\nAC_SEARCH_LIBS([dlopen], [dl], [\n  AC_CHECK_HEADERS([dlfcn.h], [\n    DL_LIB=$LIBS\n    AC_DEFINE([HAVE_LIBDL], [1], [libdl])\n    AC_DEFINE([HAVE_DLFCN_H], [1])\n  ])\n])\nLIBS=$save_LIBS\nAC_SUBST([DL_LIB])\n\ndnl prepare pkg-config usage below\nPKG_PROG_PKG_CONFIG\n\ndnl checking for libev\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for libev support])\nAC_ARG_WITH([libev],\n  [AC_HELP_STRING([--with-libev@<:@=PATH@:>@],\n    [Include libev support for fdevent handlers in PATH/include and PATH/lib]\n  )],\n  [WITH_LIBEV=$withval],\n  [WITH_LIBEV=no]\n)\nAC_MSG_RESULT([$WITH_LIBEV])\n\nLIBEV_CFLAGS=\nLIBEV_LIBS=\n\nif test \"$WITH_LIBEV\" != no; then\n  PKG_CHECK_MODULES([LIBEV], [libev], [], [\n    dnl no pkg-config for libev, searching manually:\n\n    if test \"$WITH_LIBEV\" != yes; then\n      LIBEV_CFLAGS=\"-I$WITH_LIBEV/include\"\n      LIBEV_LIBS=\"-L$WITH_LIBEV/lib -lev\"\n    else\n      AC_CHECK_HEADERS([ev.h],\n        [AC_CHECK_LIB([ev], [ev_time],\n          [\n            LIBEV_CFLAGS=\n            LIBEV_LIBS=\"-lev\"\n          ],\n          [AC_MSG_ERROR([libev not found])]\n        )],\n        [AC_MSG_ERROR([libev header not found])]\n      )\n    fi\n  ])\n\n  AC_DEFINE([HAVE_LIBEV], [1], [libev support])\nfi\n\nAC_SUBST([LIBEV_CFLAGS])\nAC_SUBST([LIBEV_LIBS])\n\ndnl Checks for mysql\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for MySQL support])\nAC_ARG_WITH([mysql],\n  [AC_HELP_STRING([--with-mysql@<:@=PATH@:>@],\n    [Include MySQL support. PATH is the path to 'mysql_config']\n  )],\n  [WITH_MYSQL=$withval],\n  [WITH_MYSQL=no]\n)\nAC_MSG_RESULT([$WITH_MYSQL])\n\nMYSQL_CFLAGS=\nMYSQL_LIBS=\n\nif test \"$WITH_MYSQL\" != no; then\n  if test \"$WITH_MYSQL\" = yes; then\n    PKG_CHECK_MODULES([MYSQL],[mariadb],[\n      MYSQL_CONFIG=$PKG_CONFIG\n    ],[\n      PKG_CHECK_MODULES([MYSQL],[mysqlclient],[\n        MYSQL_CONFIG=$PKG_CONFIG\n      ],[\n        AC_PATH_PROG([MYSQL_CONFIG], [mysql_config])\n      ])\n    ])\n  else\n    MYSQL_CONFIG=$WITH_MYSQL\n  fi\n\n  if test \"$MYSQL_CONFIG\" != \"$PKG_CONFIG\"; then\n    if test -z \"$MYSQL_CONFIG\"; then\n      AC_MSG_ERROR([mysql_config is not found])\n    fi\n    if test ! -x \"$MYSQL_CONFIG\"; then\n      AC_MSG_ERROR([mysql_config not exists or not executable, use --with-mysql=path-to-mysql_config])\n    fi\n\n    if \"$MYSQL_CONFIG\" | grep -- '--include' > /dev/null ; then\n      MYSQL_CFLAGS=`\"$MYSQL_CONFIG\" --include | sed s/\\'//g`\n    else\n      MYSQL_CFLAGS=`\"$MYSQL_CONFIG\" --cflags | sed s/\\'//g`\n    fi\n    MYSQL_LIBS=`\"$MYSQL_CONFIG\" --libs | sed s/\\'//g`\n  fi\n\n  AC_MSG_CHECKING([for MySQL includes at])\n  AC_MSG_RESULT([$MYSQL_CFLAGS])\n\n  AC_MSG_CHECKING([for MySQL libraries at])\n  AC_MSG_RESULT([$MYSQL_LIBS])\n\n  AC_DEFINE([HAVE_MYSQL], [1], [mysql support])\nfi\nAM_CONDITIONAL([BUILD_WITH_MYSQL], [test \"$WITH_MYSQL\" != no])\n\nAC_SUBST([MYSQL_LIBS])\nAC_SUBST([MYSQL_CFLAGS])\n\ndnl Checks for pgsql\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for PgSQL support])\nAC_ARG_WITH([pgsql],\n  [AC_HELP_STRING([--with-pgsql@<:@=PATH@:>@],\n    [Include PgSQL support. PATH is the path to 'pg_config']\n  )],\n  [WITH_PGSQL=$withval],\n  [WITH_PGSQL=no]\n)\nAC_MSG_RESULT([$WITH_PGSQL])\n\nPGSQL_INCLUDE=\nPGSQL_LIBS=\n\nif test \"$WITH_PGSQL\" != no; then\n  if test \"$WITH_PGSQL\" = yes; then\n    AC_PATH_PROG([PGSQL_CONFIG], [pg_config])\n  else\n    PGSQL_CONFIG=$WITH_PGSQL\n  fi\n\n  if test -z \"$PGSQL_CONFIG\"; then\n    AC_MSG_ERROR([pg_config is not found])\n  fi\n  if test ! -x \"$PGSQL_CONFIG\"; then\n    AC_MSG_ERROR([pg_config not exists or not executable, use --with-pgsql=path-to-pg_config])\n  fi\n\n  PGSQL_INCLUDE=\"-I`\"$PGSQL_CONFIG\" --includedir`\"\n  PGSQL_LIBS=\"-L`\"$PGSQL_CONFIG\" --libdir` -lpq\"\n\n  AC_MSG_CHECKING([for PgSQL includes at])\n  AC_MSG_RESULT([$PGSQL_INCLUDE])\n\n  AC_MSG_CHECKING([for PgSQL libraries at])\n  AC_MSG_RESULT([$PGSQL_LIBS])\n\n  AC_DEFINE([HAVE_PGSQL], [1], [pgsql support])\nfi\nAM_CONDITIONAL([BUILD_WITH_PGSQL], [test \"$WITH_PGSQL\" != no])\n\nAC_SUBST([PGSQL_LIBS])\nAC_SUBST([PGSQL_INCLUDE])\n\ndnl Checks for libdbi library\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for LibDBI support])\nAC_ARG_WITH([dbi],\n  [AC_HELP_STRING([--with-dbi@<:@=PATH@:>@],\n    [Include DBI support in PATH/include/dbi.h and PATH/lib]\n  )],\n  [WITH_DBI=$withval],\n  [WITH_DBI=no]\n)\nAC_MSG_RESULT([$WITH_DBI])\n\nDBI_INCLUDE=\nDBI_LIBS=\n\nif test \"$WITH_DBI\" != no; then\n  if test \"$WITH_DBI\" != yes; then\n    DBI_CFLAGS=\"-I$WITH_DBI/include\"\n    DBI_LIBS=\"-L$WITH_DBI/lib -ldbi\"\n  else\n    AC_CHECK_HEADERS([dbi/dbi.h],\n      [AC_CHECK_LIB([dbi], [dbi_version],\n        [\n          DBI_CFLAGS=\n          DBI_LIBS=\"-ldbi\"\n        ],\n        [AC_MSG_ERROR([LibDBI not found])]\n      )],\n      [AC_MSG_ERROR([LibDBI header not found])]\n    )\n  fi\n\n  AC_DEFINE([HAVE_DBI], [1], [LibDBI support])\nfi\nAM_CONDITIONAL([BUILD_WITH_DBI], [test \"$WITH_DBI\" != no])\n\nAC_SUBST([DBI_LIBS])\nAC_SUBST([DBI_CFLAGS])\n\ndnl Checks for libsasl2 library\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for LibSASL support])\nAC_ARG_WITH([sasl],\n  [AC_HELP_STRING([--with-sasl@<:@=PATH@:>@],\n    [Include SASL support in PATH/include/sasl/sasl.h and PATH/lib]\n  )],\n  [WITH_SASL=$withval],\n  [WITH_SASL=no]\n)\nAC_MSG_RESULT([$WITH_SASL])\n\nSASL_INCLUDE=\nSASL_LIBS=\n\nif test \"$WITH_SASL\" != no; then\n  if test \"$WITH_SASL\" != yes; then\n    SASL_CFLAGS=\"-I$WITH_SASL/include\"\n    SASL_LIBS=\"-L$WITH_SASL/lib -lsasl2\"\n  else\n    AC_CHECK_HEADERS([sasl/sasl.h],\n      [AC_CHECK_LIB([sasl2], [sasl_server_init],\n        [\n          SASL_CFLAGS=\n          SASL_LIBS=\"-lsasl2\"\n        ],\n        [AC_MSG_ERROR([libsasl2 not found])]\n      )],\n      [AC_MSG_ERROR([SASL header not found])]\n    )\n  fi\n\n  AC_DEFINE([HAVE_SASL], [1], [LibSASL support])\nfi\nAM_CONDITIONAL([BUILD_WITH_SASL], [test \"$WITH_SASL\" != no])\n\nAC_SUBST([SASL_LIBS])\nAC_SUBST([SASL_CFLAGS])\n\n\ndnl Check for LDAP\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for LDAP support])\nAC_ARG_WITH([ldap],\n  [AC_HELP_STRING([--with-ldap], [enable LDAP support])],\n  [WITH_LDAP=$withval],\n  [WITH_LDAP=no]\n)\nAC_MSG_RESULT([$WITH_LDAP])\n\nif test \"$WITH_LDAP\" != no; then\n  AC_CHECK_LIB([ldap], [ldap_sasl_bind_s],\n    [AC_CHECK_HEADERS([ldap.h],\n      [\n        LDAP_LIB=-lldap\n        AC_DEFINE([HAVE_LIBLDAP], [1], [libldap])\n        AC_DEFINE([HAVE_LDAP_H], [1])\n      ],\n      [AC_MSG_ERROR([ldap headers not found, install them or build without --with-ldap])]\n    )],\n    [AC_MSG_ERROR([ldap library not found, install it or build without --with-ldap])]\n  )\n  AC_SUBST([LDAP_LIB])\n  AC_CHECK_LIB([lber], [ber_printf],\n    [AC_CHECK_HEADERS([lber.h],\n      [\n        LBER_LIB=-llber\n        AC_DEFINE([HAVE_LIBLBER], [1], [liblber])\n        AC_DEFINE([HAVE_LBER_H], [1])\n      ],\n      [AC_MSG_ERROR([lber headers not found, install them or build without --with-ldap])]\n    )],\n    [AC_MSG_ERROR([lber library not found, install it or build without --with-ldap])]\n  )\n  AC_SUBST([LBER_LIB])\nfi\nAM_CONDITIONAL([BUILD_WITH_LDAP], [test \"$WITH_LDAP\" != no])\n\ndnl Check for PAM\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING(for PAM support)\nAC_ARG_WITH([pam],\n  [AC_HELP_STRING([--with-pam],[enable PAM support])],\n  [WITH_PAM=$withval],\n  [WITH_PAM=no]\n)\nAC_MSG_RESULT([$withval])\n\nif test \"$WITH_PAM\" != \"no\"; then\n  AC_CHECK_LIB([pam], [pam_start],\n    [AC_CHECK_HEADERS([security/pam_appl.h],[\n      PAM_LIB=-lpam\n      AC_DEFINE([HAVE_PAM], [1], [libpam])\n      AC_DEFINE([HAVE_SECURITY_PAM_APPL_H], [1])\n      ],\n      [AC_MSG_ERROR([pam headers not found, install them or build without --with-pam])]\n    )],\n    [AC_MSG_ERROR([pam library not found, install it or build without --with-pam])]\n  )\n  AC_SUBST(PAM_LIB)\nfi\nAM_CONDITIONAL([BUILD_WITH_PAM], [test \"$WITH_PAM\" != no])\n\ndnl Check for xattr\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for extended attributes support])\nAC_ARG_WITH([attr],\n  [AC_HELP_STRING([--with-attr], [enable extended attribute support])],\n  [WITH_ATTR=$withval],\n  [WITH_ATTR=no]\n)\nAC_MSG_RESULT([$WITH_ATTR])\n\nif test \"$WITH_ATTR\" != no; then\n  have_xattr=no\n  # libattr (linux only?)\n  AC_CHECK_LIB([attr], [attr_get], [\n    AC_CHECK_HEADERS([attr/attributes.h], [\n      ATTR_LIB=-lattr\n      AC_DEFINE([HAVE_XATTR], [1], [libattr])\n      AC_DEFINE([HAVE_ATTR_ATTRIBUTES_H], [1])\n      have_xattr=yes\n    ])\n  ])\n  AC_SUBST([ATTR_LIB])\n\n  # (Free)BSD extattr\n  AC_CHECK_FUNC([extattr_get_file], [\n    AC_CHECK_HEADERS([sys/extattr.h], [\n      AC_DEFINE([HAVE_EXTATTR], [1], [BSD extended attributes])\n      AC_DEFINE([HAVE_SYS_EXTATTR_H], [1])\n      have_xattr=yes\n    ])\n  ])\n\n  if test \"$have_xattr\" = no; then\n    AC_MSG_ERROR([no backend found implementing extended attributes])\n  fi\nfi\n\ndnl Check for valgrind\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for valgrind])\nAC_ARG_WITH([valgrind],\n  [AC_HELP_STRING([--with-valgrind],\n    [enable internal support for valgrind]\n  )],\n  [WITH_VALGRIND=$withval],\n  [WITH_VALGRIND=no]\n)\nAC_MSG_RESULT([$WITH_VALGRIND])\n\nif test \"$WITH_VALGRIND\" != no; then\n  AC_CHECK_HEADERS([valgrind/valgrind.h], [], [\n    AC_MSG_ERROR([valgrind headers not found. install them or build without --with-valgrind])\n  ])\nfi\n\ndnl Checking for libunwind\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for libunwind])\nAC_ARG_WITH([libunwind],\n  [AC_HELP_STRING([--with-libunwind],\n    [Include libunwind support for backtraces on assert failures]\n  )],\n  [WITH_LIBUNWIND=$withval],\n  [WITH_LIBUNWIND=no]\n)\nAC_MSG_RESULT([$WITH_LIBUNWIND])\n\nif test \"$WITH_LIBUNWIND\" != no; then\n  PKG_CHECK_MODULES([LIBUNWIND], [libunwind], [], [\n    AC_MSG_ERROR([libunwind not found. install it or build without --with-libunwind])\n  ])\n  AC_DEFINE([HAVE_LIBUNWIND], [1], [Have libunwind support])\nfi\n\ndnl Checking for kerberos5\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for kerberos5])\nAC_ARG_WITH([krb5],\n  [AC_HELP_STRING([--with-krb5@<:@=DIR@:>@], [Use Kerberos 5])],\n  [WITH_KRB5=$withval],\n  [WITH_KRB5=no]\n)\nAC_MSG_RESULT([$WITH_KRB5])\n\nif test \"$WITH_KRB5\" != no; then\n  if test \"$WITH_KRB5\" != yes; then\n    krb5_append_CPPFLAGS=\" -I$WITH_KRB5/include\"\n    krb5_append_LDFLAGS=\" -L$WITH_KRB5/lib\"\n  fi\nfi\n\nAC_MSG_CHECKING([custom include directory for kerberos5])\nAC_ARG_WITH([krb5-includes],\n  [AC_HELP_STRING([--with-krb5-includes=DIR], [Kerberos includes])],\n  [\n    if test \"$WITH_KRB5\" = no; then\n      AC_MSG_ERROR([build --with-krb5 to use --with-krb5-includes])\n    fi\n    krb5_append_CPPFLAGS=\" -I$withval\"\n    AC_MSG_RESULT([$withval])\n  ],\n  [AC_MSG_RESULT([no])]\n)\n\nAC_MSG_CHECKING([custom lib directory for kerberos5])\nAC_ARG_WITH([krb5-libs],\n  [AC_HELP_STRING([--with-krb5-libs=DIR], [Kerberos libraries])],\n  [\n    if test \"$WITH_KRB5\" = no; then\n      AC_MSG_ERROR([build --with-krb5 to use --with-krb5-libs])\n    fi\n    krb5_append_LDFLAGS=\" -L$withval\"\n    AC_MSG_RESULT([$withval])\n  ],\n  [AC_MSG_RESULT([no])]\n)\n\nif test \"$WITH_KRB5\" != no; then\n  CPPFLAGS=\"${CPPFLAGS}${krb5_append_CPPFLAGS}\"\n  LDFLAGS=\"${LDFLAGS}${krb5_append_LDFLAGS}\"\n\n  AC_CHECK_LIB([gssapi_krb5], [gss_acquire_cred],\n    [AC_CHECK_HEADERS([gssapi/gssapi_krb5.h],\n      [\n        KRB5_LIB=\"-lkrb5 -lgssapi_krb5\"\n        AC_DEFINE([HAVE_KRB5], [1], [libgssapi_krb5])\n      ],\n      [AC_MSG_ERROR([gssapi_krb5 headers were not found, install them or build without --with-krb5])]\n    )],\n    [AC_MSG_ERROR([gssapi_krb5 libs were not found, install them or build without --with-krb5])]\n  )\n  case \"$host_os\" in\n  *darwin*|*cygwin* ) KRB5_LIB=\"$KRB5_LIB -lcom_err\" ;;\n  * ) ;;\n  esac\nfi\n\nAM_CONDITIONAL([BUILD_WITH_KRB5], [test \"$WITH_KRB5\" != no])\nAC_SUBST([KRB5_LIB])\n\ndnl Check for openssl\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for OpenSSL])\nAC_ARG_WITH([openssl],\n  [AC_HELP_STRING([--with-openssl@<:@=DIR@:>@],\n    [Include openssl support (default no)]\n  )],\n  [WITH_OPENSSL=$withval],\n  [WITH_OPENSSL=no]\n)\nAC_MSG_RESULT([$WITH_OPENSSL])\n\nif test \"$WITH_OPENSSL\" != no; then\n  if test \"$WITH_OPENSSL\" != yes; then\n    openssl_append_CPPFLAGS=\" -I$WITH_OPENSSL/include\"\n    openssl_append_LDFLAGS=\" -L$WITH_OPENSSL/lib\"\n  fi\nfi\n\nAC_MSG_CHECKING([custom include directory for openssl])\nAC_ARG_WITH([openssl-includes],\n  [AC_HELP_STRING([--with-openssl-includes=DIR], [OpenSSL includes])],\n  [\n    if test \"$WITH_OPENSSL\" = no; then\n      AC_MSG_ERROR([build --with-openssl to use --with-openssl-includes])\n    fi\n    openssl_append_CPPFLAGS=\" -I$withval\"\n    AC_MSG_RESULT([$withval])\n  ],\n  [AC_MSG_RESULT([no])]\n)\n\nAC_MSG_CHECKING([custom lib directory for openssl])\nAC_ARG_WITH([openssl-libs],\n  [AC_HELP_STRING([--with-openssl-libs=DIR], [OpenSSL libraries])],\n  [\n    if test \"$WITH_OPENSSL\" = no; then\n      AC_MSG_ERROR([build --with-openssl to use --with-openssl-libs])\n    fi\n    openssl_append_LDFLAGS=\" -L$withval\"\n    AC_MSG_RESULT([$withval])\n  ],\n  [AC_MSG_RESULT([no])]\n)\n\nif test \"$WITH_OPENSSL\" != no; then\n  if test \"$WITH_KRB5\" != no; then\n    AC_DEFINE([USE_OPENSSL_KERBEROS], [1], [with kerberos])\n  fi\n\n  CPPFLAGS=\"${CPPFLAGS}${openssl_append_CPPFLAGS}\"\n  LDFLAGS=\"${LDFLAGS}${openssl_append_LDFLAGS}\"\n\n  AC_CHECK_HEADERS([openssl/ssl.h], [], [\n    AC_MSG_ERROR([openssl headers not found. install them or build without --with-openssl])\n  ])\n  AC_CHECK_LIB([crypto], [BIO_f_base64],\n    [CRYPTO_LIB=\"-lcrypto\"],\n    [AC_MSG_ERROR([openssl crypto library not found. install it or build without --with-openssl])]\n  )\n  AC_CHECK_LIB([ssl], [SSL_new],\n    [SSL_LIB=\"-lssl -lcrypto\"],\n    [AC_MSG_ERROR([openssl ssl library not found. install it or build without --with-openssl])],\n    [ -lcrypto \"$DL_LIB\" ]\n  )\n\n  AC_DEFINE([HAVE_LIBSSL], [], [Have libssl])\n  AC_SUBST([SSL_LIB])\n  AC_SUBST([CRYPTO_LIB])\nfi\n\ndnl Check for wolfSSL\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for wolfSSL])\nAC_ARG_WITH([wolfssl],\n  [AC_HELP_STRING([--with-wolfssl@<:@=DIR@:>@],\n    [Include openssl support (default no)]\n  )],\n  [WITH_WOLFSSL=$withval],\n  [WITH_WOLFSSL=no]\n)\nAC_MSG_RESULT([$WITH_WOLFSSL])\n\nif test \"$WITH_WOLFSSL\" != no; then\n  if test \"$WITH_WOLFSSL\" = yes; then\n    WITH_WOLFSSL=\"/usr/local\"\n  fi\n\n  CPPFLAGS=\"${CPPFLAGS} -I$WITH_WOLFSSL/include -I$WITH_WOLFSSL/include/wolfssl\"\n  LDFLAGS=\"${LDFLAGS} -L$WITH_WOLFSSL/lib\"\n\n  AC_CHECK_HEADERS([wolfssl/ssl.h], [], [\n    AC_MSG_ERROR([wolfssl headers not found. install them or build without --with-wolfssl])\n  ])\n  AC_CHECK_LIB([wolfssl], [wolfSSL_Init],\n    [CRYPTO_LIB=\"-lwolfssl\"],\n    [AC_MSG_ERROR([wolfssl crypto library not found. install it or build without --with-wolfssl])]\n  )\n  AC_COMPILE_IFELSE([AC_LANG_SOURCE([[\n    #include <wolfssl/options.h>\n    #if !defined(HAVE_LIGHTY) && !defined(OPENSSL_ALL)\n    #error HAVE_LIGHTY macro not defined\n    #endif\n  ]])], [], [AC_MSG_ERROR([wolfssl must be built with ./configure --enable-lighty])])\n  SSL_LIB=\"-lwolfssl\"\n\n  AC_SUBST([SSL_LIB])\n  AC_SUBST([CRYPTO_LIB])\nfi\n\nAM_CONDITIONAL([BUILD_WITH_OPENSSL],\n               [test \"$WITH_OPENSSL\" != no || test \"$WITH_WOLFSSL\" != no])\n\nif test \"$WITH_OPENSSL\" != no && test \"$WITH_WOLFSSL\" != no; then\n  AC_MSG_ERROR([lighttpd should not be built with both --with-openssl and --with-wolfssl])\nfi\n\n\ndnl pcre support\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for perl regular expressions support])\nAC_ARG_WITH([pcre],\n  [AC_HELP_STRING([--with-pcre], [Enable pcre support (default yes)])],\n  [WITH_PCRE=$withval],\n  [WITH_PCRE=yes]\n)\nAC_MSG_RESULT([$WITH_PCRE])\n\nif test \"$WITH_PCRE\" != no; then\n  if test \"$WITH_PCRE\" != yes; then\n    PCRE_LIB=\"-L$WITH_PCRE/lib -lpcre\"\n    CPPFLAGS=\"$CPPFLAGS -I$WITH_PCRE/include\"\n  else\n    AC_PATH_PROG([PCRECONFIG], [pcre-config])\n    if test -n \"$PCRECONFIG\"; then\n      PCRE_LIB=`\"$PCRECONFIG\" --libs`\n      CPPFLAGS=\"$CPPFLAGS `\"$PCRECONFIG\" --cflags`\"\n    fi\n  fi\n\n  if test -z \"$PCRE_LIB\"; then\n    AC_MSG_ERROR([pcre-config not found, install the pcre-devel package or build with --without-pcre])\n  fi\n\n  AC_DEFINE([HAVE_LIBPCRE], [1], [libpcre])\n  AC_DEFINE([HAVE_PCRE_H], [1], [pcre.h])\n  AC_SUBST([PCRE_LIB])\nfi\n\ndnl zlib\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for zlib support])\nAC_ARG_WITH([zlib],\n  [AC_HELP_STRING([--with-zlib],\n    [Enable zlib support for mod_compress]\n  )],\n  [WITH_ZLIB=$withval],\n  [WITH_ZLIB=yes]\n)\nAC_MSG_RESULT([$WITH_ZLIB])\n\nif test \"$WITH_ZLIB\" != no; then\n  if test \"$WITH_ZLIB\" != yes; then\n    Z_LIB=\"-L$WITH_ZLIB -lz\"\n    CPPFLAGS=\"$CPPFLAGS -I$WITH_ZLIB\"\n  else\n    AC_CHECK_HEADERS([zlib.h], [],\n      [AC_MSG_ERROR([zlib headers not found, install them or build without --with-zlib])]\n    )\n    AC_CHECK_LIB([z], [deflate],\n      [Z_LIB=-lz],\n      [AC_MSG_ERROR([zlib library not found, install it or build without --with-zlib])]\n    )\n  fi\n\n  AC_DEFINE([HAVE_LIBZ], [1], [libz])\n  AC_DEFINE([HAVE_ZLIB_H], [1])\n  AC_SUBST([Z_LIB])\nfi\n\ndnl bzip2\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for bzip2 support])\nAC_ARG_WITH([bzip2],\n  [AC_HELP_STRING([--with-bzip2],\n    [Enable bzip2 support for mod_compress]\n  )],\n  [WITH_BZIP2=$withval],\n  [WITH_BZIP2=yes]\n)\nAC_MSG_RESULT([$WITH_BZIP2])\n\nif test \"$WITH_BZIP2\" != no; then\n  if test \"$WITH_BZIP2\" != yes; then\n    BZ_LIB=\"-L$WITH_BZIP2 -lbz2\"\n    CPPFLAGS=\"$CPPFLAGS -I$WITH_BZIP2\"\n  else\n    AC_CHECK_HEADERS([bzlib.h], [], [\n      AC_MSG_ERROR([bzip2 headers not found, install them or build without --with-bzip2])\n    ])\n    AC_CHECK_LIB([bz2], [BZ2_bzCompress],\n      [BZ_LIB=-lbz2],\n      [AC_MSG_ERROR([bzip2 library not found, install it or build without --with-bzip2])]\n    )\n  fi\n\n  AC_DEFINE([HAVE_LIBBZ2], [1], [libbz2])\n  AC_DEFINE([HAVE_BZLIB_H], [1])\n  AC_SUBST([BZ_LIB])\nfi\n\ndnl Check for fam/gamin\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for FAM])\nAC_ARG_WITH([fam],\n  [AC_HELP_STRING([--with-fam],\n    [fam/gamin for reducing number of stat() calls]\n  )],\n  [WITH_FAM=$withval],\n  [WITH_FAM=no]\n)\nAC_MSG_RESULT([$WITH_FAM])\n\nif test \"$WITH_FAM\" != no; then\n  if test \"$WITH_FAM\" != yes; then\n    FAM_LIBS=\"-L$WITH_FAM -lfam\"\n    CPPFLAGS=\"$CPPFLAGS -I$WITH_FAM\"\n  else\n    AC_CHECK_LIB([fam], [FAMOpen2], [\n      AC_CHECK_HEADERS([fam.h], [FAM_LIBS=-lfam])\n    ])\n    dnl fam has no pkg-config so far, so just search for gamin as fallback\n    if test -z \"$FAM_LIBS\"; then\n      PKG_CHECK_MODULES([FAM], [gamin >= 0.1.0])\n    fi\n  fi\n\n  if test -z \"$FAM_LIBS\"; then\n    AC_MSG_ERROR([fam/gamin headers and/or libs were not found, install them or build without --with-fam])\n  fi\n\n  OLD_LIBS=$LIBS\n  LIBS=$FAM_LIBS\n  AC_CHECK_FUNCS([FAMNoExists])\n  LIBS=$OLD_LIBS\n\n  AC_DEFINE([HAVE_LIBFAM], [1], [libfam])\n  AC_DEFINE([HAVE_FAM_H], [1], [fam.h])\n  AC_SUBST([FAM_LIBS])\nfi\n\n\ndnl webdav props (xml2 and sqlite3)\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for properties in mod_webdav])\nAC_ARG_WITH([webdav-props],\n  [AC_HELP_STRING([--with-webdav-props], [properties in mod_webdav])],\n  [WITH_WEBDAV_PROPS=$withval],\n  [WITH_WEBDAV_PROPS=no]\n)\nAC_MSG_RESULT([$WITH_WEBDAV_PROPS])\n\nif test \"$WITH_WEBDAV_PROPS\" != no; then\n  AC_MSG_CHECKING([for libxml2])\n  AC_ARG_WITH([libxml],\n    [AC_HELP_STRING([--with-libxml],\n      [libxml2 for properties in mod_webdav]\n    )],\n    [WITH_LIBXML=$withval],\n    [WITH_LIBXML=yes]\n  )\n  AC_MSG_RESULT([$WITH_LIBXML])\n\n  if test \"$WITH_LIBXML\" = no; then\n    AC_MSG_ERROR([--with-webdav-props requires libxml])\n  fi\n\n  if test \"$WITH_LIBXML\" != yes; then\n    XML_LIBS=\"-L$WITH_LIBXML/.libs -lxml2\"\n    XML_CFLAGS=\"-I$WITH_LIBXML/include\"\n  else\n    PKG_CHECK_MODULES([XML], [libxml-2.0], [], [\n      AC_MSG_ERROR([libxml2 not found, install it or build without --with-webdav-props])\n    ])\n  fi\n\n  AC_DEFINE([HAVE_LIBXML2], [1], [libxml2])\n  AC_DEFINE([HAVE_LIBXML_H], [1], [libxml.h])\n  AC_SUBST([XML_LIBS])\n  AC_SUBST([XML_CFLAGS])\n\n  AC_MSG_CHECKING([for sqlite])\n  AC_ARG_WITH([sqlite],\n    [AC_HELP_STRING([--with-sqlite],\n      [sqlite for properties in mod_webdav]\n    )],\n    [WITH_SQLITE=$withval],\n    [WITH_SQLITE=yes]\n  )\n  AC_MSG_RESULT([$WITH_SQLITE])\n\n  if test \"$WITH_SQLITE\" = no; then\n    AC_MSG_ERROR([--with-webdav-props requires sqlite])\n  fi\n\n  if test \"$WITH_SQLITE\" != yes; then\n    SQLITE_LIBS=\"-L$WITH_SQLITE/.libs -lsqlite3\"\n    SQLITE_CFLAGS=\"-I$WITH_SQLITE\"\n  else\n    PKG_CHECK_MODULES([SQLITE], [sqlite3], [], [\n      AC_MSG_ERROR([sqlite3 not found, install it or build without --with-webdav-props])\n    ])\n  fi\n\n  AC_DEFINE([HAVE_SQLITE3], [1], [libsqlite3])\n  AC_DEFINE([HAVE_SQLITE3_H], [1], [sqlite3.h])\n  AC_SUBST([SQLITE_LIBS])\n  AC_SUBST([SQLITE_CFLAGS])\nfi\n\n\ndnl webdav locks (uuid)\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for locks in mod_webdav])\nAC_ARG_WITH([webdav-locks],\n  [AC_HELP_STRING([--with-webdav-locks],\n    [locks in mod_webdav (requires webdav properties)]\n  )],\n  [WITH_WEBDAV_LOCKS=$withval],\n  [WITH_WEBDAV_LOCKS=no]\n)\nAC_MSG_RESULT([$WITH_WEBDAV_LOCKS])\n\nif test \"$WITH_WEBDAV_LOCKS\" != no; then\n  if test \"$WITH_WEBDAV_PROPS\" = no; then\n    AC_MSG_ERROR([--with-webdav-locks requires --with-webdav-props])\n  fi\n\n  AC_MSG_CHECKING([for libuuid])\n  AC_ARG_WITH([uuid],\n    [AC_HELP_STRING([--with-uuid], [uuid for locks in mod_webdav])],\n    [WITH_UUID=$withval],\n    [WITH_UUID=yes]\n  )\n  AC_MSG_RESULT([$WITH_UUID])\n\n  if test \"$WITH_UUID\" = no; then\n    AC_MSG_ERROR([--with-webdav-locks requires uuid])\n  fi\n\n  if test \"$WITH_UUID\" != yes; then\n    UUID_LIBS=\"-L$WITH_UUID -luuid\"\n    CPPFLAGS=\"$CPPFLAGS -I$WITH_UUID\"\n  else\n    AC_CHECK_LIB([uuid], [uuid_unparse],\n      [UUID_LIBS=-luuid],\n      [AC_MSG_ERROR([uuid lib not found, install it or build without --with-webdav-locks])]\n    )\n    AC_CHECK_HEADERS([uuid/uuid.h], [],\n      [AC_MSG_ERROR([uuid headers not found, install them or build without --with-webdav-locks])]\n    )\n  fi\n\n  AC_DEFINE([HAVE_LIBUUID], [1], [libuuid])\n  AC_DEFINE([HAVE_UUID_UUID_H], [1], [uuid/uuid.h is available])\n  AC_SUBST([UUID_LIBS])\nfi\n\ndnl Check for gdbm\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for gdbm])\nAC_ARG_WITH([gdbm],\n  [AC_HELP_STRING([--with-gdbm], [gdbm storage for mod_trigger_b4_dl])],\n  [WITH_GDBM=$withval],\n  [WITH_GDBM=no]\n)\nAC_MSG_RESULT([$WITH_GDBM])\n\nif test \"$WITH_GDBM\" != no; then\n  if test \"$WITH_GDBM\" != yes; then\n    GDBM_LIB=\"-L$WITH_GDBM -lgdbm\"\n    CPPFLAGS=\"$CPPFLAGS -I$WITH_GDBM\"\n  else\n    AC_CHECK_LIB([gdbm], [gdbm_open],\n      [GDBM_LIB=-lgdbm],\n      [AC_MSG_ERROR([gdbm lib not found, install it or build without --with-gdbm])]\n    )\n    AC_CHECK_HEADERS([gdbm.h], [],\n      [AC_MSG_ERROR([gdbm headers not found, install them or build without --with-gdbm])]\n    )\n  fi\n\n  AC_DEFINE([HAVE_GDBM], [1], [libgdbm])\n  AC_DEFINE([HAVE_GDBM_H], [1])\n  AC_SUBST([GDBM_LIB])\nfi\nAM_CONDITIONAL([BUILD_WITH_GDBM], [test \"$WITH_GDBM\" != no])\n\ndnl Check for GeoIP\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for GeoIP])\nAC_ARG_WITH([geoip],\n  [AC_HELP_STRING([--with-geoip], [IP-based geolocation lookup])],\n  [WITH_GEOIP=$withval],\n  [WITH_GEOIP=no]\n)\nAC_MSG_RESULT([$WITH_GEOIP])\n\nif test \"$WITH_GEOIP\" != no; then\n  if test \"$WITH_GEOIP\" != yes; then\n    GEOIP_LIB=\"-L$WITH_GEOIP -lGeoIP\"\n    CPPFLAGS=\"$CPPFLAGS -I$WITH_GEOIP\"\n  else\n    AC_CHECK_LIB([GeoIP], [GeoIP_country_name_by_addr],\n      [GEOIP_LIB=-lGeoIP],\n      [AC_MSG_ERROR([GeoIP lib not found, install it or build without --with-geoip])]\n    )\n    AC_CHECK_HEADERS([GeoIP.h], [],\n      [AC_MSG_ERROR([GeoIP headers not found, install them or build without --with-geoip])]\n    )\n  fi\n\n  AC_DEFINE([HAVE_GEOIP], [1], [libGeoIP])\n  AC_DEFINE([HAVE_GEOIP_H], [1])\n  AC_SUBST([GEOIP_LIB])\nfi\nAM_CONDITIONAL([BUILD_WITH_GEOIP], [test \"$WITH_GEOIP\" != no])\n\ndnl Check for maxminddb\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for maxminddb])\nAC_ARG_WITH([maxminddb],\n  [AC_HELP_STRING([--with-maxminddb], [IP-based geolocation lookup])],\n  [WITH_MAXMINDDB=$withval],\n  [WITH_MAXMINDDB=no]\n)\nAC_MSG_RESULT([$WITH_MAXMINDDB])\n\nif test \"$WITH_MAXMINDDB\" != no; then\n  if test \"$WITH_MAXMINDDB\" != yes; then\n    MAXMINDDB_LIB=\"-L$WITH_MAXMINDDB -lmaxminddb\"\n    CPPFLAGS=\"$CPPFLAGS -I$WITH_MAXMINDDB\"\n  else\n    AC_CHECK_LIB([maxminddb], [MMDB_open],\n      [MAXMINDDB_LIB=-lmaxminddb],\n      [AC_MSG_ERROR([maxminddb lib not found, install it or build without --with-maxminddb])]\n    )\n    AC_CHECK_HEADERS([maxminddb.h], [],\n      [AC_MSG_ERROR([maxminddb headers not found, install them or build without --with-maxminddb])]\n    )\n  fi\n\n  AC_DEFINE([HAVE_MAXMINDDB], [1], [libmaxminddb])\n  AC_DEFINE([HAVE_MAXMINDDB_H], [1])\n  AC_SUBST([MAXMINDDB_LIB])\nfi\nAM_CONDITIONAL([BUILD_WITH_MAXMINDDB], [test \"$WITH_MAXMINDDB\" != no])\n\ndnl Check for memcached\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for memcached])\nAC_ARG_WITH([memcached],\n  [AC_HELP_STRING([--with-memcached],\n    [memcached storage for mod_trigger_b4_dl/mod_cml]\n  )],\n  [WITH_MEMCACHED=$withval],\n  [WITH_MEMCACHED=no]\n)\nAC_MSG_RESULT([$WITH_MEMCACHED])\n\nif test \"$WITH_MEMCACHED\" != no; then\n  if test \"$WITH_MEMCACHED\" != yes; then\n    MEMCACHED_LIB=\"-L$WITH_MEMCACHED -lMEMCACHED\"\n    CPPFLAGS=\"$CPPFLAGS -I$WITH_MEMCACHED\"\n  else\n    AC_CHECK_LIB([memcached], [memcached],\n      [ MEMCACHED_LIB=-lmemcached ],\n      [AC_MSG_ERROR([memcached lib not found, install it or build without --with-memcached])]\n    )\n    AC_CHECK_HEADERS([libmemcached/memcached.h], [],\n      [AC_MSG_ERROR([memcached headers not found, install them or build without --with-memcached])]\n    )\n  fi\n\n  AC_DEFINE([USE_MEMCACHED], [1], [libmemcached])\n  AC_SUBST([MEMCACHED_LIB])\nfi\nAM_CONDITIONAL([BUILD_WITH_MEMCACHED], [test \"$WITH_MEMCACHED\" != no])\n\nBUILD_MOD_TRIGGER_B4_DL=no\nif test \"$WITH_MEMCACHED\" != no || test \"$WITH_GDBM\" != no ; then\n  BUILD_MOD_TRIGGER_B4_DL=yes\nfi\n\nAM_CONDITIONAL([BUILD_MOD_TRIGGER_B4_DL], [test \"$BUILD_MOD_TRIGGER_B4_DL\" != no])\n\ndnl Check for lua\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([if lua-support is requested])\nAC_ARG_WITH([lua],\n  [AC_HELP_STRING([--with-lua], [lua engine for mod_magnet/mod_cml])],\n  [WITH_LUA=$withval],\n  [WITH_LUA=no]\n)\nAC_MSG_RESULT([$WITH_LUA])\n\nif test \"$WITH_LUA\" != no; then\n  found_lua=0\n  if test \"$WITH_LUA\" != yes; then\n    PKG_CHECK_MODULES([LUA], [$WITH_LUA >= 5.1],\n      [found_lua=1],\n      [AC_MSG_NOTICE([Couldn\\'t find requested lua pkg-config module $WITH_LUA])]\n    )\n    if test \"$found_lua\" = \"0\"; then\n      LUA_LIBS=\"-L$WITH_LUA -llua\"\n      LUA_CFLAGS=\"-I$WITH_LUA\"\n    fi\n  else\n    for luaname in lua5.3 lua-5.3 lua5.2 lua-5.2 lua5.1 lua-5.1 lua; do\n      if test \"$found_lua\" = \"0\"; then\n        PKG_CHECK_MODULES([LUA], [$luaname >= 5.1],\n          [found_lua=1],\n          [AC_MSG_NOTICE([Couldn\\'t find $luaname])]\n        )\n      fi\n    done\n    if test \"$found_lua\" = \"0\"; then\n      AC_MSG_ERROR([Couldn\\'t find any lua pkg-config module])\n    fi\n  fi\n\n  AC_DEFINE([HAVE_LUA], [1], [liblua])\n  AC_DEFINE([HAVE_LUA_H], [1], [lua.h])\n  AC_SUBST([LUA_LIBS])\n  AC_SUBST([LUA_CFLAGS])\nfi\nAM_CONDITIONAL([BUILD_WITH_LUA], [test \"$WITH_LUA\" != no])\n\ndnl \"--with-FEATURE\" blocks end\nAC_MSG_NOTICE([----------------------------------------])\n\ndnl search for crypt_r and (fallback) for crypt\nsave_LIBS=$LIBS\nLIBS=\nfound_crypt=no\nAC_SEARCH_LIBS([crypt_r], [crypt],\n  [\n    AC_DEFINE([HAVE_CRYPT_R], [1], [crypt_r])\n    AC_CHECK_HEADERS([crypt.h])\n    CRYPT_LIB=$LIBS\n    found_crypt=crypt_r\n  ],\n  [AC_SEARCH_LIBS([crypt], [crypt], [\n    AC_DEFINE([HAVE_CRYPT], [1], [crypt])\n    AC_CHECK_HEADERS([crypt.h])\n    CRYPT_LIB=$LIBS\n    found_crypt=crypt\n  ])]\n)\nLIBS=$save_LIBS\nAC_SUBST([CRYPT_LIB])\n\nAC_MSG_CHECKING([crypt_r/crypt support])\nAC_MSG_RESULT([$found_crypt])\n\ndnl check whether sendfilev needs -lsendfile\nAC_MSG_NOTICE([----------------------------------------])\nsave_LIBS=$LIBS\nLIBS=\nhave_sendfilev=no\nAC_SEARCH_LIBS([sendfilev], [sendfile], [\n  if test -z \"$LIBS\"; then\n    have_sendfilev=yes\n  else\n    have_sendfilev=$LIBS\n  fi\n  SENDFILE_LIB=$LIBS\n  AC_DEFINE([HAVE_SENDFILEV], [1], [solaris sendfilev])\n])\nLIBS=$save_LIBS\nAC_SUBST([SENDFILE_LIB])\n\nAC_MSG_CHECKING([solaris sendfilev present])\nAC_MSG_RESULT([$have_sendfilev])\n\nAC_MSG_NOTICE([----------------------------------------])\n\ncase \"$host_os\" in\n*mingw* ) LIBS=\"$LIBS -lwsock32\" ;;\n* ) ;;\nesac\n\nAC_CHECK_FUNCS([\\\n  arc4random_buf \\\n  chroot \\\n  clock_gettime \\\n  epoll_ctl \\\n  explicit_bzero \\\n  fork \\\n  getloadavg \\\n  getrlimit \\\n  getuid \\\n  gmtime_r \\\n  inet_pton \\\n  issetugid \\\n  jrand48 \\\n  kqueue \\\n  localtime_r \\\n  lstat \\\n  madvise \\\n  memset \\\n  memset_s \\\n  mmap \\\n  pathconf \\\n  pipe2 \\\n  poll \\\n  port_create \\\n  select \\\n  send_file \\\n  sendfile \\\n  sendfile64 \\\n  sigaction \\\n  signal \\\n  srandom \\\n  writev \\\n])\nAC_CHECK_HEADERS([sys/random.h], [AC_CHECK_FUNCS([getentropy])])\nAC_CHECK_HEADERS([linux/random.h], [AC_CHECK_FUNCS([getrandom])])\n\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([if weak symbols are supported])\nAC_LINK_IFELSE(\n  [AC_LANG_PROGRAM([[\n    __attribute__((weak)) void __dummy(void *x) { }\n    void f(void *x) { __dummy(x); }\n  ]])],\n  [\n    AC_MSG_RESULT([yes])\n    AC_DEFINE([HAVE_WEAK_SYMBOLS], [1], [weak symbols are supported])\n  ],\n  [AC_MSG_RESULT([no])]\n)\n\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([for Large File System support])\nAC_ARG_ENABLE([lfs],\n  [AC_HELP_STRING([--enable-lfs],\n    [Turn on Large File System (default)]\n  )],\n  [\n    case \"${enableval}\" in\n    yes) ENABLE_LFS=yes ;;\n    no) ENABLE_LFS=no ;;\n    *) AC_MSG_ERROR([bad value ${enableval} for --enable-lfs]) ;;\n    esac\n  ],\n  [ ENABLE_LFS=yes ]\n)\nAC_MSG_RESULT([$ENABLE_LFS])\nif test \"$ENABLE_LFS\" = yes; then\n  CPPFLAGS=\"${CPPFLAGS} -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGE_FILES\"\nfi\n\ndnl check if sendfile works\nif test \"$ac_cv_func_sendfile\" = yes; then\n  AC_MSG_NOTICE([----------------------------------------])\n  AC_MSG_CHECKING([if sendfile works])\n  if test \"$cross_compiling\" = no; then\n    AC_TRY_RUN(\n      [\n        #ifdef HAVE_SYS_SENDFILE_H\n        #include <sys/sendfile.h>\n        #endif /* HAVE_SYS_SENDFILE_H */\n        #include <errno.h>\n        int main() {\n          int o = 0;\n          if (-1 == sendfile(-1, 0, &o, 0) && errno == ENOSYS) return -1;\n          return 0;\n        }\n      ],\n      [AC_MSG_RESULT([yes])],\n      [\n        AC_MSG_RESULT([no])\n        AC_DEFINE([HAVE_SENDFILE_BROKEN], [1], [broken sendfile])\n      ]\n    )\n  fi\nfi\n\ndnl Check for IPv6 support\nAC_MSG_NOTICE([----------------------------------------])\nAC_ARG_ENABLE([ipv6],\n  [AC_HELP_STRING([--disable-ipv6], [disable IPv6 support])],\n  [\n    case \"${enableval}\" in\n    yes) ipv6=true ;;\n    no) ipv6=false ;;\n    *) AC_MSG_ERROR([bad value ${enableval} for --enable-ipv6]) ;;\n    esac\n  ],\n  [ipv6=true]\n)\n\nif test \"$ipv6\" = true; then\n  AC_CACHE_CHECK([for IPv6 support], [ac_cv_ipv6_support], [\n    AC_TRY_LINK(\n      [\n        #include <sys/types.h>\n        #include <sys/socket.h>\n        #include <netinet/in.h>\n      ],\n      [\n        struct sockaddr_in6 s; struct in6_addr t=in6addr_any; int i=AF_INET6; s; t.s6_addr[0] = 0;\n      ],\n      [ac_cv_ipv6_support=yes],\n      [ac_cv_ipv6_support=no]\n    )\n  ])\n\n  if test \"$ac_cv_ipv6_support\" = yes; then\n    AC_DEFINE([HAVE_IPV6], [1], [Whether to enable IPv6 support])\n  else\n    AC_MSG_ERROR([IPv6 seems broken.  Fix it or build with --disable-ipv6])\n  fi\nfi\n\n# disable mmap by default\n# lighttpd may always use mmap with files it owns (created tmp files)\nAC_MSG_NOTICE([----------------------------------------])\nAC_MSG_CHECKING([use mmap if available])\nAC_ARG_ENABLE([mmap],\n  [AC_HELP_STRING([--enable-mmap],\n    [use mmap if available]\n  )],\n  [\n    case \"${enableval}\" in\n    yes) mmap=true ;;\n    no) mmap=false ;;\n    *) AC_MSG_ERROR([bad value ${enableval} for --enable-mmap]) ;;\n    esac\n  ],\n  [mmap=false]\n)\nAC_MSG_RESULT([$mmap])\n\nif test \"$mmap\" = true; then\n  AC_DEFINE([ENABLE_MMAP], [1], [Use mmap if available])\nfi\n\ndnl check for fastcgi lib, for the tests only\nAC_MSG_NOTICE([----------------------------------------])\nfastcgi_found=no\nAC_CHECK_LIB([fcgi], [FCGI_Accept], [\n  AC_CHECK_HEADERS([fastcgi.h fastcgi/fastcgi.h], [\n    fastcgi_found=yes\n  ])\n])\n\nAM_CONDITIONAL([CHECK_WITH_FASTCGI], [test \"$fastcgi_found\" = yes])\n\n\nAC_MSG_NOTICE([----------------------------------------])\ndnl check for extra compiler options (warning options)\nif test \"${GCC}\" = yes; then\n  TRY_CFLAGS([-Wall -W -Wshadow -pedantic])\nfi\n\nAC_ARG_ENABLE([extra-warnings],\n  [AC_HELP_STRING([--enable-extra-warnings],\n    [enable extra warnings (gcc specific)]\n  )],\n  [\n    case \"${enableval}\" in\n    error) extrawarnings=error ;;\n    yes) extrawarnings=true ;;\n    no) extrawarnings=false ;;\n    *) AC_MSG_ERROR([bad value ${enableval} for --enable-extra-warnings]) ;;\n    esac\n  ],\n  [extrawarnings=false]\n)\n\nif test \"$extrawarnings\" = true || test \"$extrawarnings\" = error; then\n  TRY_CFLAGS([-g -O2 -g2 -Wall -Wmissing-declarations -Wcast-align -Wsign-compare -Wnested-externs -Wpointer-arith -D_FORTIFY_SOURCE=2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security])\n  TRY_LDFLAGS([-Wl,--as-needed])\n  if test \"$extrawarnings\" = error; then\n    AS_VAR_APPEND([CFLAGS], [\" -Werror\"])\n    AS_VAR_APPEND([LDFLAGS], [\" -Wl,--fatal-warnings\"])\n  fi\nfi\n\ndnl build version-id\nLIGHTTPD_VERSION_ID=m4_format([0x%x%02x%02x], m4_unquote(m4_split(AC_PACKAGE_VERSION, [\\.])))\nAC_DEFINE_UNQUOTED([LIGHTTPD_VERSION_ID], [$LIGHTTPD_VERSION_ID], [lighttpd-version-id])\n\nAC_CONFIG_FILES([\\\n  distribute.sh \\\n  doc/config/conf.d/Makefile \\\n  doc/config/Makefile \\\n  doc/config/vhosts.d/Makefile \\\n  doc/Makefile \\\n  doc/outdated/Makefile \\\n  doc/scripts/Makefile \\\n  doc/systemd/Makefile \\\n  Makefile \\\n  src/Makefile \\\n  tests/docroot/123/Makefile \\\n  tests/docroot/Makefile \\\n  tests/docroot/www/expire/Makefile \\\n  tests/docroot/www/go/Makefile \\\n  tests/docroot/www/indexfile/Makefile \\\n  tests/docroot/www/Makefile \\\n  tests/Makefile \\\n])\nAC_OUTPUT\n\ndo_build=\"\\\n  mod_access \\\n  mod_accesslog \\\n  mod_alias \\\n  mod_auth \\\n  mod_authn_file \\\n  mod_cgi \\\n  mod_compress \\\n  mod_deflate \\\n  mod_dirlisting \\\n  mod_evhost \\\n  mod_expire \\\n  mod_extforward \\\n  mod_fastcgi \\\n  mod_flv_streaming \\\n  mod_indexfile \\\n  mod_proxy \\\n  mod_redirect \\\n  mod_rewrite \\\n  mod_rrdtool \\\n  mod_scgi \\\n  mod_secdownload \\\n  mod_setenv \\\n  mod_simple_vhost \\\n  mod_sockproxy \\\n  mod_ssi \\\n  mod_staticfile \\\n  mod_status \\\n  mod_userdir \\\n  mod_usertrack \\\n  mod_vhostdb \\\n  mod_webdav \\\n  mod_wstunnel \\\n\"\n\nlighty_track_feature() {\n  if eval \"$3\"; then\n    enable_feature=\"$enable_feature $1\"\n    do_build=\"$do_build $2\"\n  else\n    disable_feature=\"$disable_feature $1\"\n    no_build=\"$no_build $2\"\n  fi\n}\n\nlighty_track_feature \"regex-conditionals\" \"\" \\\n  'test \"$WITH_PCRE\" != no'\n\nlighty_track_feature \"storage-gdbm\" \"\" \\\n  'test \"$WITH_GDBM\" != no'\n\nlighty_track_feature \"storage-memcached\" \"\" \\\n  'test \"$WITH_MEMCACHED\" != no'\n\nlighty_track_feature \"\" \"mod_trigger_b4_dl\" \\\n  'test \"$BUILD_MOD_TRIGGER_B4_DL\" != no'\n\nlighty_track_feature \"mysql\" \"mod_authn_mysql mod_mysql_vhost mod_vhostdb_mysql\" \\\n  'test \"$WITH_MYSQL\" != no'\n\nlighty_track_feature \"postgresql\" \"mod_vhostdb_pgsql\" \\\n  'test \"$WITH_PGSQL\" != no'\n\nlighty_track_feature \"dbi\" \"mod_vhostdb_dbi\" \\\n  'test \"$WITH_DBI\" != no'\n\nlighty_track_feature \"lua\" \"mod_cml mod_magnet\" \\\n  'test \"$WITH_LUA\" != no'\n\nlighty_track_feature \"geoip\" \"mod_geoip\" \\\n  'test \"$WITH_GEOIP\" != no'\n\nlighty_track_feature \"maxminddb\" \"mod_maxminddb\" \\\n  'test \"$WITH_MAXMINDDB\" != no'\n\nlighty_track_feature \"compress-gzip compress-deflate\" \"\" \\\n  'test \"$WITH_ZLIB\" != no'\n\nlighty_track_feature \"compress-bzip2\" \"\" \\\n  'test \"$WITH_BZIP2\" != no'\n\nlighty_track_feature \"kerberos\" \"mod_authn_gssapi\" \\\n  'test \"$WITH_KRB5\" != no'\n\nlighty_track_feature \"ldap\" \"mod_authn_ldap mod_vhostdb_ldap\" \\\n  'test \"$WITH_LDAP\" != no'\n\nlighty_track_feature \"pam\" \"mod_authn_pam\" \\\n  'test \"$WITH_PAM\" != no'\n\nlighty_track_feature \"network-openssl\" \"mod_openssl\" \\\n  'test \"$WITH_OPENSSL\" != no || test \"$WITH_WOLFSSL\" != no'\n\nlighty_track_feature \"auth-crypt\" \"\" \\\n  'test \"$found_crypt\" != no'\n\nlighty_track_feature \"network-ipv6\" \"\" \\\n  'test \"$ac_cv_ipv6_support\" != no'\n\nlighty_track_feature \"large-files\" \"\" \\\n  'test \"$ENABLE_LFS\" = yes'\n\nlighty_track_feature \"stat-cache-fam\" \"\" \\\n  'test \"$WITH_FAM\" != no'\n\nlighty_track_feature \"webdav-properties\" \"\" \\\n  'test \"$WITH_WEBDAV_PROPS\" != no'\n\nlighty_track_feature \"webdav-locks\" \"\" \\\n  'test \"$WITH_WEBDAV_LOCKS\" != no'\n\ndnl output\n\n$ECHO\n$ECHO \"Plugins:\"\n$ECHO\n\n$ECHO \"enabled: \"\nfor p in $do_build; do\n  $ECHO \"  $p\"\ndone | sort\n\n$ECHO \"disabled: \"\nfor p in $no_build; do\n  $ECHO \"  $p\"\ndone | sort\n\n$ECHO\n$ECHO \"Features:\"\n$ECHO\n\n$ECHO \"enabled: \"\nfor p in $enable_feature; do\n  $ECHO \"  $p\"\ndone | sort\n\n$ECHO \"disabled: \"\nfor p in $disable_feature; do\n  $ECHO \"  $p\"\ndone | sort\n\n$ECHO\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/ltmain.sh": "#! /bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.6\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-01-20.17; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2014-01-07.03; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook funcions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      eval $_G_hook '\"$@\"'\n\n      # store returned options list back into positional\n      # parameters for next 'cmd' execution.\n      eval _G_hook_result=\\$${_G_hook}_result\n      eval set dummy \"$_G_hook_result\"; shift\n    done\n\n    func_quote_for_eval ${1+\"$@\"}\n    func_run_hooks_result=$func_quote_for_eval_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, remove any\n# options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_options_prep_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=: ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         ;;\n#            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n#          esac\n#        done\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_silent_option_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_option_validation_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll alse need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    func_options_prep ${1+\"$@\"}\n    eval func_parse_options \\\n        ${func_options_prep_result+\"$func_options_prep_result\"}\n    eval func_validate_options \\\n        ${func_parse_options_result+\"$func_parse_options_result\"}\n\n    eval func_run_hooks func_options \\\n        ${func_validate_options_result+\"$func_validate_options_result\"}\n\n    # save modified positional parameters for caller\n    func_options_result=$func_run_hooks_result\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propogate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning.\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    func_run_hooks func_options_prep ${1+\"$@\"}\n\n    # save modified positional parameters for caller\n    func_options_prep_result=$func_run_hooks_result\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      func_run_hooks func_parse_options ${1+\"$@\"}\n\n      # Adjust func_parse_options positional parameters to match\n      eval set dummy \"$func_run_hooks_result\"; shift\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      test $# = 0 && func_missing_arg $_G_opt && break\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n      esac\n    done\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    func_parse_options_result=$func_quote_for_eval_result\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    func_run_hooks func_validate_options ${1+\"$@\"}\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    # save modified positional parameters for caller\n    func_validate_options_result=$func_run_hooks_result\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname (GNU libtool) 2.4.6\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/software/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func_fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    esac\n\n    # Pass back the list of options.\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_options_prep_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n\t# An option not handled by this hook function:\n        *)\t\tset dummy \"$_G_opt\" ${1+\"$@\"};\tshift; break  ;;\n      esac\n    done\n\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_parse_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -specs=*             GCC specs files\n      # -stdlib=*            select c++ std lib with clang\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*| \\\n      -specs=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_for_eval \"$arg\"\n\t  arg=$func_quote_for_eval_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_usertrack.c": "#include \"first.h\"\n\n#include \"base.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n#include \"rand.h\"\n#include \"http_header.h\"\n\n#include \"plugin.h\"\n\n#include <stdlib.h>\n#include <string.h>\n\n#include \"md5.h\"\n\n/* plugin config for all request/connections */\n\ntypedef struct {\n\tbuffer *cookie_name;\n\tbuffer *cookie_attrs;\n\tbuffer *cookie_domain;\n\tunsigned int cookie_max_age;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\n\tplugin_config **config_storage;\n\n\tplugin_config conf;\n} plugin_data;\n\n/* init the plugin data */\nINIT_FUNC(mod_usertrack_init) {\n\tplugin_data *p;\n\n\tp = calloc(1, sizeof(*p));\n\n\treturn p;\n}\n\n/* detroy the plugin data */\nFREE_FUNC(mod_usertrack_free) {\n\tplugin_data *p = p_d;\n\n\tUNUSED(srv);\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (NULL == s) continue;\n\n\t\t\tbuffer_free(s->cookie_name);\n\t\t\tbuffer_free(s->cookie_attrs);\n\t\t\tbuffer_free(s->cookie_domain);\n\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\n\nSETDEFAULTS_FUNC(mod_usertrack_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\tconfig_values_t cv[] = {\n\t\t{ \"usertrack.cookie-name\",       NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },       /* 0 */\n\t\t{ \"usertrack.cookie-max-age\",    NULL, T_CONFIG_INT, T_CONFIG_SCOPE_CONNECTION },          /* 1 */\n\t\t{ \"usertrack.cookie-domain\",     NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },       /* 2 */\n\t\t{ \"usertrack.cookie-attrs\",      NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },       /* 3 */\n\n\t\t{ NULL,                          NULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->cookie_name    = buffer_init();\n\t\ts->cookie_attrs   = buffer_init();\n\t\ts->cookie_domain  = buffer_init();\n\t\ts->cookie_max_age = 0;\n\n\t\tcv[0].destination = s->cookie_name;\n\t\tcv[1].destination = &(s->cookie_max_age);\n\t\tcv[2].destination = s->cookie_domain;\n\t\tcv[3].destination = s->cookie_attrs;\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (buffer_string_is_empty(s->cookie_name)) {\n\t\t\tbuffer_copy_string_len(s->cookie_name, CONST_STR_LEN(\"TRACKID\"));\n\t\t} else {\n\t\t\tsize_t j, len = buffer_string_length(s->cookie_name);\n\t\t\tfor (j = 0; j < len; j++) {\n\t\t\t\tchar c = s->cookie_name->ptr[j] | 32;\n\t\t\t\tif (c < 'a' || c > 'z') {\n\t\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\t\t\t\"invalid character in usertrack.cookie-name:\",\n\t\t\t\t\t\t\ts->cookie_name);\n\n\t\t\t\t\treturn HANDLER_ERROR;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!buffer_string_is_empty(s->cookie_domain)) {\n\t\t\tsize_t j, len = buffer_string_length(s->cookie_domain);\n\t\t\tfor (j = 0; j < len; j++) {\n\t\t\t\tchar c = s->cookie_domain->ptr[j];\n\t\t\t\tif (c <= 32 || c >= 127 || c == '\"' || c == '\\\\') {\n\t\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\t\t\t\"invalid character in usertrack.cookie-domain:\",\n\t\t\t\t\t\t\ts->cookie_domain);\n\n\t\t\t\t\treturn HANDLER_ERROR;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_usertrack_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(cookie_name);\n\tPATCH(cookie_attrs);\n\tPATCH(cookie_domain);\n\tPATCH(cookie_max_age);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"usertrack.cookie-name\"))) {\n\t\t\t\tPATCH(cookie_name);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"usertrack.cookie-attrs\"))) {\n\t\t\t\tPATCH(cookie_attrs);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"usertrack.cookie-max-age\"))) {\n\t\t\t\tPATCH(cookie_max_age);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"usertrack.cookie-domain\"))) {\n\t\t\t\tPATCH(cookie_domain);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\nURIHANDLER_FUNC(mod_usertrack_uri_handler) {\n\tplugin_data *p = p_d;\n\tbuffer *cookie;\n\tbuffer *b;\n\tunsigned char h[16];\n\tli_MD5_CTX Md5Ctx;\n\tchar hh[LI_ITOSTRING_LENGTH];\n\n\tif (buffer_is_empty(con->uri.path)) return HANDLER_GO_ON;\n\n\tmod_usertrack_patch_connection(srv, con, p);\n\n\tif (NULL != (b = http_header_request_get(con, HTTP_HEADER_COOKIE, CONST_STR_LEN(\"Cookie\")))) {\n\t\tchar *g;\n\t\t/* we have a cookie, does it contain a valid name ? */\n\n\t\t/* parse the cookie\n\t\t *\n\t\t * check for cookiename + (WS | '=')\n\t\t *\n\t\t */\n\n\t\tif (NULL != (g = strstr(b->ptr, p->conf.cookie_name->ptr))) {\n\t\t\tchar *nc;\n\n\t\t\t/* skip WS */\n\t\t\tfor (nc = g + buffer_string_length(p->conf.cookie_name); *nc == ' ' || *nc == '\\t'; nc++);\n\n\t\t\tif (*nc == '=') {\n\t\t\t\t/* ok, found the key of our own cookie */\n\n\t\t\t\tif (strlen(nc) > 32) {\n\t\t\t\t\t/* i'm lazy */\n\t\t\t\t\treturn HANDLER_GO_ON;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/* set a cookie */\n\tcookie = srv->tmp_buf;\n\tbuffer_copy_buffer(cookie, p->conf.cookie_name);\n\tbuffer_append_string_len(cookie, CONST_STR_LEN(\"=\"));\n\n\n\t/* taken from mod_auth.c */\n\n\t/* generate shared-secret */\n\tli_MD5_Init(&Md5Ctx);\n\tli_MD5_Update(&Md5Ctx, CONST_BUF_LEN(con->uri.path));\n\tli_MD5_Update(&Md5Ctx, CONST_STR_LEN(\"+\"));\n\n\tli_itostrn(hh, sizeof(hh), srv->cur_ts);\n\tli_MD5_Update(&Md5Ctx, (unsigned char *)hh, strlen(hh));\n\tli_itostrn(hh, sizeof(hh), li_rand_pseudo());\n\tli_MD5_Update(&Md5Ctx, (unsigned char *)hh, strlen(hh));\n\n\tli_MD5_Final(h, &Md5Ctx);\n\n\tbuffer_append_string_encoded_hex_lc(cookie, (char *)h, 16);\n\n\t/* usertrack.cookie-attrs, if set, replaces all other attrs */\n\tif (!buffer_string_is_empty(p->conf.cookie_attrs)) {\n\t\tbuffer_append_string_buffer(cookie, p->conf.cookie_attrs);\n\t\thttp_header_response_insert(con, HTTP_HEADER_SET_COOKIE, CONST_STR_LEN(\"Set-Cookie\"), CONST_BUF_LEN(cookie));\n\t\treturn HANDLER_GO_ON;\n\t}\n\n\tbuffer_append_string_len(cookie, CONST_STR_LEN(\"; Path=/\"));\n\tbuffer_append_string_len(cookie, CONST_STR_LEN(\"; Version=1\"));\n\n\tif (!buffer_string_is_empty(p->conf.cookie_domain)) {\n\t\tbuffer_append_string_len(cookie, CONST_STR_LEN(\"; Domain=\"));\n\t\tbuffer_append_string_encoded(cookie, CONST_BUF_LEN(p->conf.cookie_domain), ENCODING_REL_URI);\n\t}\n\n\tif (p->conf.cookie_max_age) {\n\t\tbuffer_append_string_len(cookie, CONST_STR_LEN(\"; max-age=\"));\n\t\tbuffer_append_int(cookie, p->conf.cookie_max_age);\n\t}\n\n\thttp_header_response_insert(con, HTTP_HEADER_SET_COOKIE, CONST_STR_LEN(\"Set-Cookie\"), CONST_BUF_LEN(cookie));\n\n\treturn HANDLER_GO_ON;\n}\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_usertrack_plugin_init(plugin *p);\nint mod_usertrack_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"usertrack\");\n\n\tp->init        = mod_usertrack_init;\n\tp->handle_uri_clean  = mod_usertrack_uri_handler;\n\tp->set_defaults  = mod_usertrack_set_defaults;\n\tp->cleanup     = mod_usertrack_free;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_magnet.c": "#include \"first.h\"\n\n#include \"base.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n#include \"http_chunk.h\"\n#include \"http_header.h\"\n\n#include \"plugin.h\"\n\n#include \"mod_magnet_cache.h\"\n#include \"sock_addr.h\"\n#include \"stat_cache.h\"\n#include \"status_counter.h\"\n#include \"etag.h\"\n\n#include <stdlib.h>\n#include <string.h>\n#include <setjmp.h>\n\n#include <lua.h>\n#include <lauxlib.h>\n\n#define LUA_RIDX_LIGHTTPD_SERVER     \"lighty.srv\"\n#define LUA_RIDX_LIGHTTPD_CONNECTION \"lighty.con\"\n\n#define MAGNET_CONFIG_RAW_URL       \"magnet.attract-raw-url-to\"\n#define MAGNET_CONFIG_PHYSICAL_PATH \"magnet.attract-physical-path-to\"\n#define MAGNET_RESTART_REQUEST      99\n\n/* plugin config for all request/connections */\n\nstatic jmp_buf exceptionjmp;\n\ntypedef struct {\n\tarray *url_raw;\n\tarray *physical_path;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\n\tscript_cache *cache;\n\n\tplugin_config **config_storage;\n\n\tplugin_config conf;\n} plugin_data;\n\n/* init the plugin data */\nINIT_FUNC(mod_magnet_init) {\n\tplugin_data *p;\n\n\tp = calloc(1, sizeof(*p));\n\n\tp->cache = script_cache_init();\n\n\treturn p;\n}\n\n/* detroy the plugin data */\nFREE_FUNC(mod_magnet_free) {\n\tplugin_data *p = p_d;\n\n\tUNUSED(srv);\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (NULL == s) continue;\n\n\t\t\tarray_free(s->url_raw);\n\t\t\tarray_free(s->physical_path);\n\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\n\tscript_cache_free(p->cache);\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\n\nSETDEFAULTS_FUNC(mod_magnet_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\tconfig_values_t cv[] = {\n\t\t{ MAGNET_CONFIG_RAW_URL,       NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 0 */\n\t\t{ MAGNET_CONFIG_PHYSICAL_PATH, NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 1 */\n\t\t{ NULL,                           NULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->url_raw  = array_init();\n\t\ts->physical_path = array_init();\n\n\t\tcv[0].destination = s->url_raw;\n\t\tcv[1].destination = s->physical_path;\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (!array_is_vlist(s->url_raw)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for magnet.attract-raw-url-to; expected list of \\\"scriptpath\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (!array_is_vlist(s->physical_path)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for magnet.attract-physical-path-to; expected list \\\"scriptpath\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_magnet_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(url_raw);\n\tPATCH(physical_path);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(MAGNET_CONFIG_RAW_URL))) {\n\t\t\t\tPATCH(url_raw);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(MAGNET_CONFIG_PHYSICAL_PATH))) {\n\t\t\t\tPATCH(physical_path);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\n#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502\n/* lua5.1 backward compat definition */\nstatic void lua_pushglobaltable(lua_State *L) { /* (-0, +1, -) */\n\tlua_pushvalue(L, LUA_GLOBALSINDEX);\n}\n#endif\n\nstatic void magnet_setfenv_mainfn(lua_State *L, int funcIndex) { /* (-1, 0, -) */\n#if defined(LUA_VERSION_NUM) && LUA_VERSION_NUM >= 502\n\t/* set \"_ENV\" upvalue, which should be the first upvalue of a \"main\" lua\n\t * function if it uses any global names\n\t */\n\n\tconst char* first_upvalue_name = lua_getupvalue(L, funcIndex, 1);\n\tif (NULL == first_upvalue_name) return; /* doesn't have any upvalues */\n\tlua_pop(L, 1); /* only need the name of the upvalue, not the value */\n\n\tif (0 != strcmp(first_upvalue_name, \"_ENV\")) return;\n\n\tif (NULL == lua_setupvalue(L, funcIndex, 1)) {\n\t\t/* pop value if lua_setupvalue didn't set the (not existing) upvalue */\n\t\tlua_pop(L, 1);\n\t}\n#else\n\tlua_setfenv(L, funcIndex);\n#endif\n}\n\n#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502\n/* lua 5.2 already supports __pairs */\n\n/* See http://lua-users.org/wiki/GeneralizedPairsAndIpairs for implementation details.\n * Override the default pairs() function to allow us to use a __pairs metakey\n */\nstatic int magnet_pairs(lua_State *L) {\n\tluaL_checkany(L, 1); /* \"self\" */\n\n\tif (luaL_getmetafield(L, 1, \"__pairs\")) {\n\t\t/* call __pairs(self) */\n\t\tlua_pushvalue(L, 1);\n\t\tlua_call(L, 1, 3);\n\t} else {\n\t\t/* call <original-pairs-method>(self) */\n\t\tlua_pushvalue(L, lua_upvalueindex(1));\n\t\tlua_pushvalue(L, 1);\n\t\tlua_call(L, 1, 3);\n\t}\n\treturn 3;\n}\n#endif\n\nstatic void magnet_push_buffer(lua_State *L, const buffer *b) {\n    if (!buffer_is_empty(b))\n        lua_pushlstring(L, CONST_BUF_LEN(b));\n    else\n        lua_pushnil(L);\n}\n\n#if 0\nstatic int magnet_array_get_element(lua_State *L, const array *a) {\n    /* __index: param 1 is the (empty) table the value was not found in */\n    size_t klen;\n    const char * const k = luaL_checklstring(L, 2, &klen);\n    data_string * const ds = (data_string *)array_get_element_klen(a, k, klen);\n    magnet_push_buffer(L, NULL != ds ? ds->value : NULL);\n    return 1;\n}\n#endif\n\n/* Define a function that will iterate over an array* (in upval 1) using current position (upval 2) */\nstatic int magnet_array_next(lua_State *L) {\n\tdata_unset *du;\n\tdata_string *ds;\n\tdata_integer *di;\n\n\tsize_t pos = lua_tointeger(L, lua_upvalueindex(1));\n\tarray *a = lua_touserdata(L, lua_upvalueindex(2));\n\n\tlua_settop(L, 0);\n\n\tif (pos >= a->used) return 0;\n\tif (NULL != (du = a->data[pos])) {\n\t\tlua_pushlstring(L, CONST_BUF_LEN(du->key));\n\t\tswitch (du->type) {\n\t\t\tcase TYPE_STRING:\n\t\t\t\tds = (data_string *)du;\n\t\t\t\tmagnet_push_buffer(L, ds->value);\n\t\t\t\tbreak;\n\t\t\tcase TYPE_INTEGER:\n\t\t\t\tdi = (data_integer *)du;\n\t\t\t\tlua_pushinteger(L, di->value);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlua_pushnil(L);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t/* Update our positional upval to reflect our new current position */\n\t\tpos++;\n\t\tlua_pushinteger(L, pos);\n\t\tlua_replace(L, lua_upvalueindex(1));\n\n\t\t/* Returning 2 items on the stack (key, value) */\n\t\treturn 2;\n\t}\n\treturn 0;\n}\n\n/* Create the closure necessary to iterate over the array *a with the above function */\nstatic int magnet_array_pairs(lua_State *L, array *a) {\n\tlua_pushinteger(L, 0); /* Push our current pos (the start) into upval 1 */\n\tlua_pushlightuserdata(L, a); /* Push our array *a into upval 2 */\n\tlua_pushcclosure(L, magnet_array_next, 2); /* Push our new closure with 2 upvals */\n\treturn 1;\n}\n\nstatic server* magnet_get_server(lua_State *L) {\n\tserver *srv;\n\n\tlua_getfield(L, LUA_REGISTRYINDEX, LUA_RIDX_LIGHTTPD_SERVER);\n\tsrv = lua_touserdata(L, -1);\n\tlua_pop(L, 1);\n\n\treturn srv;\n}\n\nstatic connection* magnet_get_connection(lua_State *L) {\n\tconnection *con;\n\n\tlua_getfield(L, LUA_REGISTRYINDEX, LUA_RIDX_LIGHTTPD_CONNECTION);\n\tcon = lua_touserdata(L, -1);\n\tlua_pop(L, 1);\n\n\treturn con;\n}\n\ntypedef struct {\n\tconst char *ptr;\n\tsize_t len;\n} const_buffer;\n\nstatic const_buffer magnet_checkconstbuffer(lua_State *L, int index) {\n\tconst_buffer cb;\n\tcb.ptr = luaL_checklstring(L, index, &cb.len);\n\treturn cb;\n}\n\nstatic buffer* magnet_checkbuffer(lua_State *L, int index) {\n\tconst_buffer cb = magnet_checkconstbuffer(L, index);\n\tbuffer *b = buffer_init();\n\tbuffer_copy_string_len(b, cb.ptr, cb.len);\n\treturn b;\n}\n\nstatic int magnet_print(lua_State *L) {\n\tconst_buffer cb = magnet_checkconstbuffer(L, 1);\n\tlog_error_write(magnet_get_server(L), __FILE__, __LINE__, \"ss\",\n\t\t\t\"(lua-print)\", cb.ptr);\n\treturn 0;\n}\n\nstatic int magnet_stat(lua_State *L) {\n\tserver *srv = magnet_get_server(L);\n\tconnection *con = magnet_get_connection(L);\n\tstat_cache_entry *sce = NULL;\n    {\n\tbuffer *sb = magnet_checkbuffer(L, 1);\n\thandler_t res;\n\n\tres = stat_cache_get_entry(srv, con, sb, &sce);\n\n\tif (HANDLER_GO_ON != res) {\n\t\tbuffer_free(sb);\n\t\tlua_pushnil(L);\n\t\treturn 1;\n\t}\n\n\tstat_cache_content_type_get(srv, con, sb, sce);\n\tbuffer_free(sb);\n    }\n\n\tlua_newtable(L); // return value\n\n\tlua_pushboolean(L, S_ISREG(sce->st.st_mode));\n\tlua_setfield(L, -2, \"is_file\");\n\n\tlua_pushboolean(L, S_ISDIR(sce->st.st_mode));\n\tlua_setfield(L, -2, \"is_dir\");\n\n\tlua_pushboolean(L, S_ISCHR(sce->st.st_mode));\n\tlua_setfield(L, -2, \"is_char\");\n\n\tlua_pushboolean(L, S_ISBLK(sce->st.st_mode));\n\tlua_setfield(L, -2, \"is_block\");\n\n\tlua_pushboolean(L, S_ISSOCK(sce->st.st_mode));\n\tlua_setfield(L, -2, \"is_socket\");\n\n\tlua_pushboolean(L, S_ISLNK(sce->st.st_mode));\n\tlua_setfield(L, -2, \"is_link\");\n\n\tlua_pushboolean(L, S_ISFIFO(sce->st.st_mode));\n\tlua_setfield(L, -2, \"is_fifo\");\n\n\tlua_pushinteger(L, sce->st.st_mtime);\n\tlua_setfield(L, -2, \"st_mtime\");\n\n\tlua_pushinteger(L, sce->st.st_ctime);\n\tlua_setfield(L, -2, \"st_ctime\");\n\n\tlua_pushinteger(L, sce->st.st_atime);\n\tlua_setfield(L, -2, \"st_atime\");\n\n\tlua_pushinteger(L, sce->st.st_uid);\n\tlua_setfield(L, -2, \"st_uid\");\n\n\tlua_pushinteger(L, sce->st.st_gid);\n\tlua_setfield(L, -2, \"st_gid\");\n\n\tlua_pushinteger(L, sce->st.st_size);\n\tlua_setfield(L, -2, \"st_size\");\n\n\tlua_pushinteger(L, sce->st.st_ino);\n\tlua_setfield(L, -2, \"st_ino\");\n\n\tif (!buffer_string_is_empty(stat_cache_etag_get(sce, con->etag_flags))) {\n\t\t/* we have to mutate the etag */\n\t\tetag_mutate(srv->tmp_buf, sce->etag);\n\t\tlua_pushlstring(L, CONST_BUF_LEN(srv->tmp_buf));\n\t} else {\n\t\tlua_pushnil(L);\n\t}\n\tlua_setfield(L, -2, \"etag\");\n\n\tif (!buffer_string_is_empty(sce->content_type)) {\n\t\tlua_pushlstring(L, CONST_BUF_LEN(sce->content_type));\n\t} else {\n\t\tlua_pushnil(L);\n\t}\n\tlua_setfield(L, -2, \"content-type\");\n\n\treturn 1;\n}\n\n\nstatic int magnet_atpanic(lua_State *L) {\n\tconst_buffer cb = magnet_checkconstbuffer(L, 1);\n\tlog_error_write(magnet_get_server(L), __FILE__, __LINE__, \"ss\",\n\t\t\t\"(lua-atpanic)\", cb.ptr);\n\tlongjmp(exceptionjmp, 1);\n}\n\nstatic int magnet_reqhdr_get(lua_State *L) {\n    /* __index: param 1 is the (empty) table the value was not found in */\n    connection *con = magnet_get_connection(L);\n    size_t klen;\n    const char * const k = luaL_checklstring(L, 2, &klen);\n    buffer * const vb =\n      http_header_request_get(con, HTTP_HEADER_UNSPECIFIED, k, klen);\n    magnet_push_buffer(L, NULL != vb ? vb : NULL);\n    return 1;\n}\n\nstatic int magnet_reqhdr_pairs(lua_State *L) {\n\tconnection *con = magnet_get_connection(L);\n\treturn magnet_array_pairs(L, con->request.headers);\n}\n\nstatic int magnet_status_get(lua_State *L) {\n\tint *i;\n\tserver *srv = magnet_get_server(L);\n\n\t/* __index: param 1 is the (empty) table the value was not found in */\n\tconst_buffer key = magnet_checkconstbuffer(L, 2);\n\ti = status_counter_get_counter(srv, key.ptr, key.len);\n\tlua_pushinteger(L, (lua_Integer)*i);\n\n\treturn 1;\n}\n\nstatic int magnet_status_set(lua_State *L) {\n\tserver *srv = magnet_get_server(L);\n\n\t/* __newindex: param 1 is the (empty) table the value is supposed to be set in */\n\tconst_buffer key = magnet_checkconstbuffer(L, 2);\n\tint counter = (int) luaL_checkinteger(L, 3);\n\n\tstatus_counter_set(srv, key.ptr, key.len, counter);\n\n\treturn 0;\n}\n\nstatic int magnet_status_pairs(lua_State *L) {\n\tserver *srv = magnet_get_server(L);\n\n\treturn magnet_array_pairs(L, srv->status);\n}\n\ntypedef struct {\n\tconst char *name;\n\tenum {\n\t\tMAGNET_ENV_UNSET,\n\n\t\tMAGNET_ENV_PHYICAL_PATH,\n\t\tMAGNET_ENV_PHYICAL_REL_PATH,\n\t\tMAGNET_ENV_PHYICAL_DOC_ROOT,\n\t\tMAGNET_ENV_PHYICAL_BASEDIR,\n\n\t\tMAGNET_ENV_URI_PATH,\n\t\tMAGNET_ENV_URI_PATH_RAW,\n\t\tMAGNET_ENV_URI_SCHEME,\n\t\tMAGNET_ENV_URI_AUTHORITY,\n\t\tMAGNET_ENV_URI_QUERY,\n\n\t\tMAGNET_ENV_REQUEST_METHOD,\n\t\tMAGNET_ENV_REQUEST_URI,\n\t\tMAGNET_ENV_REQUEST_ORIG_URI,\n\t\tMAGNET_ENV_REQUEST_PATH_INFO,\n\t\tMAGNET_ENV_REQUEST_REMOTE_IP,\n\t\tMAGNET_ENV_REQUEST_SERVER_ADDR,\n\t\tMAGNET_ENV_REQUEST_PROTOCOL\n\t} type;\n} magnet_env_t;\n\nstatic const magnet_env_t magnet_env[] = {\n\t{ \"physical.path\", MAGNET_ENV_PHYICAL_PATH },\n\t{ \"physical.rel-path\", MAGNET_ENV_PHYICAL_REL_PATH },\n\t{ \"physical.doc-root\", MAGNET_ENV_PHYICAL_DOC_ROOT },\n\t{ \"physical.basedir\", MAGNET_ENV_PHYICAL_BASEDIR },\n\n\t{ \"uri.path\", MAGNET_ENV_URI_PATH },\n\t{ \"uri.path-raw\", MAGNET_ENV_URI_PATH_RAW },\n\t{ \"uri.scheme\", MAGNET_ENV_URI_SCHEME },\n\t{ \"uri.authority\", MAGNET_ENV_URI_AUTHORITY },\n\t{ \"uri.query\", MAGNET_ENV_URI_QUERY },\n\n\t{ \"request.method\", MAGNET_ENV_REQUEST_METHOD },\n\t{ \"request.uri\", MAGNET_ENV_REQUEST_URI },\n\t{ \"request.orig-uri\", MAGNET_ENV_REQUEST_ORIG_URI },\n\t{ \"request.path-info\", MAGNET_ENV_REQUEST_PATH_INFO },\n\t{ \"request.remote-ip\", MAGNET_ENV_REQUEST_REMOTE_IP },\n\t{ \"request.remote-addr\", MAGNET_ENV_REQUEST_REMOTE_IP },\n\t{ \"request.server-addr\", MAGNET_ENV_REQUEST_SERVER_ADDR },\n\t{ \"request.protocol\", MAGNET_ENV_REQUEST_PROTOCOL },\n\n\t{ NULL, MAGNET_ENV_UNSET }\n};\n\nstatic buffer *magnet_env_get_buffer_by_id(server *srv, connection *con, int id) {\n\tbuffer *dest = NULL;\n\n\tUNUSED(srv);\n\n\t/**\n\t * map all internal variables to lua\n\t *\n\t */\n\n\tswitch (id) {\n\tcase MAGNET_ENV_PHYICAL_PATH: dest = con->physical.path; break;\n\tcase MAGNET_ENV_PHYICAL_REL_PATH: dest = con->physical.rel_path; break;\n\tcase MAGNET_ENV_PHYICAL_DOC_ROOT: dest = con->physical.doc_root; break;\n\tcase MAGNET_ENV_PHYICAL_BASEDIR: dest = con->physical.basedir; break;\n\n\tcase MAGNET_ENV_URI_PATH: dest = con->uri.path; break;\n\tcase MAGNET_ENV_URI_PATH_RAW: dest = con->uri.path_raw; break;\n\tcase MAGNET_ENV_URI_SCHEME: dest = con->uri.scheme; break;\n\tcase MAGNET_ENV_URI_AUTHORITY: dest = con->uri.authority; break;\n\tcase MAGNET_ENV_URI_QUERY: dest = con->uri.query; break;\n\n\tcase MAGNET_ENV_REQUEST_METHOD:\n\t\tbuffer_clear(srv->tmp_buf);\n\t\thttp_method_append(srv->tmp_buf, con->request.http_method);\n\t\tdest = srv->tmp_buf;\n\t\tbreak;\n\tcase MAGNET_ENV_REQUEST_URI:      dest = con->request.uri; break;\n\tcase MAGNET_ENV_REQUEST_ORIG_URI: dest = con->request.orig_uri; break;\n\tcase MAGNET_ENV_REQUEST_PATH_INFO: dest = con->request.pathinfo; break;\n\tcase MAGNET_ENV_REQUEST_REMOTE_IP: dest = con->dst_addr_buf; break;\n\tcase MAGNET_ENV_REQUEST_SERVER_ADDR:\n\t\tdest = srv->tmp_buf;\n\t\tbuffer_clear(dest);\n\t\tswitch (con->srv_socket->addr.plain.sa_family) {\n\t\tcase AF_INET:\n\t\tcase AF_INET6:\n\t\t\tif (sock_addr_is_addr_wildcard(&con->srv_socket->addr)) {\n\t\t\t\tsock_addr addrbuf;\n\t\t\t\tsocklen_t addrlen = sizeof(addrbuf);\n\t\t\t\tif (0 == getsockname(con->fd,(struct sockaddr *)&addrbuf,&addrlen)){\n\t\t\t\t\tchar buf[INET6_ADDRSTRLEN + 1];\n\t\t\t\t\tconst char *s = sock_addr_inet_ntop(&addrbuf, buf, sizeof(buf)-1);\n\t\t\t\t\tif (NULL != s)\n\t\t\t\t\t\tbuffer_copy_string_len(dest, s, strlen(s));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbuffer_copy_buffer(dest, con->srv_socket->srv_token);\n\t\t\t\tif (dest->ptr[0] != '[' || dest->ptr[buffer_string_length(dest)-1] != ']') {\n\t\t\t\t\tchar *s = strrchr(dest->ptr, ':');\n\t\t\t\t\tif (s != NULL) /* local IP without port */\n\t\t\t\t\t\tbuffer_string_set_length(dest, s - dest->ptr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase MAGNET_ENV_REQUEST_PROTOCOL:\n\t\tbuffer_copy_string(srv->tmp_buf, get_http_version_name(con->request.http_version));\n\t\tdest = srv->tmp_buf;\n\t\tbreak;\n\n\tcase MAGNET_ENV_UNSET: break;\n\t}\n\n\treturn dest;\n}\n\nstatic buffer *magnet_env_get_buffer(server *srv, connection *con, const char *key) {\n\tsize_t i;\n\n\tfor (i = 0; magnet_env[i].name; i++) {\n\t\tif (0 == strcmp(key, magnet_env[i].name)) break;\n\t}\n\n\treturn magnet_env_get_buffer_by_id(srv, con, magnet_env[i].type);\n}\n\nstatic int magnet_env_get(lua_State *L) {\n\tserver *srv = magnet_get_server(L);\n\tconnection *con = magnet_get_connection(L);\n\n\t/* __index: param 1 is the (empty) table the value was not found in */\n\tconst char *key = luaL_checkstring(L, 2);\n\tmagnet_push_buffer(L, magnet_env_get_buffer(srv, con, key));\n\treturn 1;\n}\n\nstatic int magnet_env_set(lua_State *L) {\n\tserver *srv = magnet_get_server(L);\n\tconnection *con = magnet_get_connection(L);\n\n\t/* __newindex: param 1 is the (empty) table the value is supposed to be set in */\n\tconst char *key = luaL_checkstring(L, 2);\n\tbuffer *dest = NULL;\n\n\tluaL_checkany(L, 3); /* nil or a string */\n\n\tif (NULL != (dest = magnet_env_get_buffer(srv, con, key))) {\n\t\tif (lua_isnil(L, 3)) {\n\t\t\tbuffer_reset(dest);\n\t\t} else {\n\t\t\tconst_buffer val = magnet_checkconstbuffer(L, 3);\n\t\t\tbuffer_copy_string_len(dest, val.ptr, val.len);\n\t\t}\n\t} else {\n\t\t/* couldn't save */\n\n\t\treturn luaL_error(L, \"couldn't store '%s' in lighty.env[]\", key);\n\t}\n\n\treturn 0;\n}\n\nstatic int magnet_env_next(lua_State *L) {\n\tserver *srv = magnet_get_server(L);\n\tconnection *con = magnet_get_connection(L);\n\tconst int pos = lua_tointeger(L, lua_upvalueindex(1));\n\n\t/* ignore previous key: use upvalue for current pos */\n\tlua_settop(L, 0);\n\n\tif (NULL == magnet_env[pos].name) return 0; /* end of list */\n\t/* Update our positional upval to reflect our new current position */\n\tlua_pushinteger(L, pos + 1);\n\tlua_replace(L, lua_upvalueindex(1));\n\n\t/* key to return */\n\tlua_pushstring(L, magnet_env[pos].name);\n\n\t/* get value */\n\tmagnet_push_buffer(L, magnet_env_get_buffer_by_id(srv, con, magnet_env[pos].type));\n\n\t/* return 2 items on the stack (key, value) */\n\treturn 2;\n}\n\nstatic int magnet_env_pairs(lua_State *L) {\n\tlua_pushinteger(L, 0); /* Push our current pos (the start) into upval 1 */\n\tlua_pushcclosure(L, magnet_env_next, 1); /* Push our new closure with 1 upvals */\n\treturn 1;\n}\n\nstatic int magnet_cgi_get(lua_State *L) {\n    /* __index: param 1 is the (empty) table the value was not found in */\n    connection *con = magnet_get_connection(L);\n    size_t klen;\n    const char * const k = luaL_checklstring(L, 2, &klen);\n    buffer * const vb = http_header_env_get(con, k, klen);\n    magnet_push_buffer(L, NULL != vb ? vb : NULL);\n    return 1;\n}\n\nstatic int magnet_cgi_set(lua_State *L) {\n    /* __newindex: param 1 is the (empty) table the value is supposed to be set in */\n    connection *con = magnet_get_connection(L);\n    const_buffer key = magnet_checkconstbuffer(L, 2);\n    const_buffer val = magnet_checkconstbuffer(L, 3);\n    http_header_env_set(con, key.ptr, key.len, val.ptr, val.len);\n    return 0;\n}\n\nstatic int magnet_cgi_pairs(lua_State *L) {\n\tconnection *con = magnet_get_connection(L);\n\n\treturn magnet_array_pairs(L, con->environment);\n}\n\n\nstatic int magnet_copy_response_header(connection *con, lua_State *L, int lighty_table_ndx) {\n\tforce_assert(lua_istable(L, lighty_table_ndx));\n\n\tlua_getfield(L, lighty_table_ndx, \"header\"); /* lighty.header */\n\tif (lua_istable(L, -1)) {\n\t\t/* header is found, and is a table */\n\n\t\tlua_pushnil(L);\n\t\twhile (lua_next(L, -2) != 0) {\n\t\t\tif (lua_isstring(L, -1) && lua_isstring(L, -2)) {\n\t\t\t\tconst_buffer key = magnet_checkconstbuffer(L, -2);\n\t\t\t\tconst_buffer val = magnet_checkconstbuffer(L, -1);\n\t\t\t\tenum http_header_e id = http_header_hkey_get(key.ptr, key.len);\n\n\t\t\t\tval.len\n\t\t\t\t  ? http_header_response_set(con, id, key.ptr, key.len, val.ptr, val.len)\n\t\t\t\t  : http_header_response_unset(con, id, key.ptr, key.len);\n\t\t\t}\n\n\t\t\tlua_pop(L, 1);\n\t\t}\n\t}\n\tlua_pop(L, 1); /* pop lighty.header */\n\n\treturn 0;\n}\n\n/**\n * walk through the content array\n *\n * content = { \"<pre>\", { file = \"/content\" } , \"</pre>\" }\n *\n * header[\"Content-Type\"] = \"text/html\"\n *\n * return 200\n */\nstatic int magnet_attach_content(server *srv, connection *con, lua_State *L, int lighty_table_ndx) {\n\tforce_assert(lua_istable(L, lighty_table_ndx));\n\n\tlua_getfield(L, lighty_table_ndx, \"content\"); /* lighty.content */\n\tif (lua_istable(L, -1)) {\n\t\tint i;\n\t\t/* content is found, and is a table */\n\n\t\tfor (i = 1; ; i++) {\n\t\t\tlua_rawgeti(L, -1, i);\n\n\t\t\t/* -1 is the value and should be the value ... aka a table */\n\t\t\tif (lua_isstring(L, -1)) {\n\t\t\t\tconst_buffer data = magnet_checkconstbuffer(L, -1);\n\n\t\t\t\tchunkqueue_append_mem(con->write_queue, data.ptr, data.len);\n\t\t\t} else if (lua_istable(L, -1)) {\n\t\t\t\tlua_getfield(L, -1, \"filename\");\n\t\t\t\tlua_getfield(L, -2, \"length\"); /* (0-based) end of range (not actually \"length\") */\n\t\t\t\tlua_getfield(L, -3, \"offset\"); /* (0-based) start of range */\n\n\t\t\t\tif (lua_isstring(L, -3)) { /* filename has to be a string */\n\t\t\t\t\toff_t off = (off_t) luaL_optinteger(L, -1, 0);\n\t\t\t\t\toff_t len = (off_t) luaL_optinteger(L, -2, -1); /*(-1 to http_chunk_append_file_range() uses file size minus offset)*/\n\t\t\t\t\tif (off < 0) {\n\t\t\t\t\t\treturn luaL_error(L, \"offset for '%s' is negative\", lua_tostring(L, -3));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (len >= off) {\n\t\t\t\t\t\tlen -= off;\n\t\t\t\t\t} else if (-1 != len) {\n\t\t\t\t\t\treturn luaL_error(L, \"offset > length for '%s'\", lua_tostring(L, -3));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (0 != len) {\n\t\t\t\t\t\tbuffer *fn = magnet_checkbuffer(L, -3);\n\t\t\t\t\t\tint rc = http_chunk_append_file_range(srv, con, fn, off, len);\n\t\t\t\t\t\tbuffer_free(fn);\n\t\t\t\t\t\tif (0 != rc) {\n\t\t\t\t\t\t\treturn luaL_error(L, \"error opening file content '%s' at offset %lld\", lua_tostring(L, -3), (long long)off);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn luaL_error(L, \"content[%d] is a table and requires the field \\\"filename\\\"\", i);\n\t\t\t\t}\n\n\t\t\t\tlua_pop(L, 3);\n\t\t\t} else if (lua_isnil(L, -1)) {\n\t\t\t\t/* end of list */\n\n\t\t\t\tlua_pop(L, 1);\n\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\treturn luaL_error(L, \"content[%d] is neither a string nor a table: \", i);\n\t\t\t}\n\n\t\t\tlua_pop(L, 1); /* pop the content[...] entry value */\n\t\t}\n\t} else {\n\t\treturn luaL_error(L, \"lighty.content has to be a table\");\n\t}\n\tlua_pop(L, 1); /* pop lighty.content */\n\n\treturn 0;\n}\n\nstatic int traceback(lua_State *L) {\n\tif (!lua_isstring(L, 1))  /* 'message' not a string? */\n\t\treturn 1;  /* keep it intact */\n\tlua_getglobal(L, \"debug\");\n\tif (!lua_istable(L, -1)) {\n\t\tlua_pop(L, 1);\n\t\treturn 1;\n\t}\n\tlua_getfield(L, -1, \"traceback\");\n\tif (!lua_isfunction(L, -1)) {\n\t\tlua_pop(L, 2);\n\t\treturn 1;\n\t}\n\tlua_pushvalue(L, 1);  /* pass error message */\n\tlua_pushinteger(L, 2);  /* skip this function and traceback */\n\tlua_call(L, 2, 1);  /* call debug.traceback */\n\treturn 1;\n}\n\n/* push traceback function before calling lua_pcall after narg arguments\n * have been pushed (inserts it before the arguments). returns index for\n * traceback function (\"msgh\" in lua_pcall)\n */\nstatic int push_traceback(lua_State *L, int narg) {\n\tint base = lua_gettop(L) - narg;  /* function index */\n\tlua_pushcfunction(L, traceback);\n\tlua_insert(L, base);\n\treturn base;\n}\n\nstatic handler_t magnet_attract(server *srv, connection *con, plugin_data *p, buffer *name) {\n\tlua_State *L;\n\tint lua_return_value;\n\tconst int func_ndx = 1;\n\tconst int lighty_table_ndx = 2;\n\n\t/* get the script-context */\n\tL = script_cache_get_script(srv, con, p->cache, name);\n\n\tif (lua_isstring(L, -1)) {\n\t\tlog_error_write(srv, __FILE__, __LINE__,\n\t\t\t\t\"sbss\",\n\t\t\t\t\"loading script\",\n\t\t\t\tname,\n\t\t\t\t\"failed:\",\n\t\t\t\tlua_tostring(L, -1));\n\n\t\tlua_pop(L, 1);\n\n\t\tforce_assert(lua_gettop(L) == 0); /* only the error should have been on the stack */\n\n\t\tcon->http_status = 500;\n\t\tcon->mode = DIRECT;\n\n\t\treturn HANDLER_FINISHED;\n\t}\n\n\tforce_assert(lua_gettop(L) == 1);\n\tforce_assert(lua_isfunction(L, func_ndx));\n\n\tlua_pushlightuserdata(L, srv);\n\tlua_setfield(L, LUA_REGISTRYINDEX, LUA_RIDX_LIGHTTPD_SERVER);\n\n\tlua_pushlightuserdata(L, con);\n\tlua_setfield(L, LUA_REGISTRYINDEX, LUA_RIDX_LIGHTTPD_CONNECTION);\n\n\tlua_atpanic(L, magnet_atpanic);\n\n\t/**\n\t * we want to create empty environment for our script\n\t *\n\t * setmetatable({}, {__index = _G})\n\t *\n\t * if a function symbol is not defined in our env, __index will lookup\n\t * in the global env.\n\t *\n\t * all variables created in the script-env will be thrown\n\t * away at the end of the script run.\n\t */\n\tlua_newtable(L); /* my empty environment aka {}              (sp += 1) */\n\n\t/* we have to overwrite the print function */\n\tlua_pushcfunction(L, magnet_print);                       /* (sp += 1) */\n\tlua_setfield(L, -2, \"print\"); /* -1 is the env we want to set(sp -= 1) */\n\n\t/**\n\t * lighty.request[] (ro) has the HTTP-request headers\n\t * lighty.env[] (rw) has various url/physical file paths and\n\t *                   request meta data; might contain nil values\n\t * lighty.req_env[] (ro) has the cgi environment\n\t * lighty.status[] (ro) has the status counters\n\t * lighty.content[] (rw) is a table of string/file\n\t * lighty.header[] (rw) is a array to set response headers\n\t */\n\n\tlua_newtable(L); /* lighty.*                                 (sp += 1) */\n\n\tlua_newtable(L); /*  {}                                      (sp += 1) */\n\tlua_newtable(L); /* the meta-table for the request-table     (sp += 1) */\n\tlua_pushcfunction(L, magnet_reqhdr_get);                  /* (sp += 1) */\n\tlua_setfield(L, -2, \"__index\");                           /* (sp -= 1) */\n\tlua_pushcfunction(L, magnet_reqhdr_pairs);                /* (sp += 1) */\n\tlua_setfield(L, -2, \"__pairs\");                           /* (sp -= 1) */\n\tlua_setmetatable(L, -2); /* tie the metatable to request     (sp -= 1) */\n\tlua_setfield(L, -2, \"request\"); /* content = {}              (sp -= 1) */\n\n\tlua_newtable(L); /*  {}                                      (sp += 1) */\n\tlua_newtable(L); /* the meta-table for the env-table         (sp += 1) */\n\tlua_pushcfunction(L, magnet_env_get);                     /* (sp += 1) */\n\tlua_setfield(L, -2, \"__index\");                           /* (sp -= 1) */\n\tlua_pushcfunction(L, magnet_env_set);                     /* (sp += 1) */\n\tlua_setfield(L, -2, \"__newindex\");                        /* (sp -= 1) */\n\tlua_pushcfunction(L, magnet_env_pairs);                   /* (sp += 1) */\n\tlua_setfield(L, -2, \"__pairs\");                           /* (sp -= 1) */\n\tlua_setmetatable(L, -2); /* tie the metatable to env         (sp -= 1) */\n\tlua_setfield(L, -2, \"env\"); /* content = {}                  (sp -= 1) */\n\n\tlua_newtable(L); /*  {}                                      (sp += 1) */\n\tlua_newtable(L); /* the meta-table for the req_env-table     (sp += 1) */\n\tlua_pushcfunction(L, magnet_cgi_get);                     /* (sp += 1) */\n\tlua_setfield(L, -2, \"__index\");                           /* (sp -= 1) */\n\tlua_pushcfunction(L, magnet_cgi_set);                     /* (sp += 1) */\n\tlua_setfield(L, -2, \"__newindex\");                        /* (sp -= 1) */\n\tlua_pushcfunction(L, magnet_cgi_pairs);                   /* (sp += 1) */\n\tlua_setfield(L, -2, \"__pairs\");                           /* (sp -= 1) */\n\tlua_setmetatable(L, -2); /* tie the metatable to req_env     (sp -= 1) */\n\tlua_setfield(L, -2, \"req_env\"); /* content = {}              (sp -= 1) */\n\n\tlua_newtable(L); /*  {}                                      (sp += 1) */\n\tlua_newtable(L); /* the meta-table for the status-table      (sp += 1) */\n\tlua_pushcfunction(L, magnet_status_get);                  /* (sp += 1) */\n\tlua_setfield(L, -2, \"__index\");                           /* (sp -= 1) */\n\tlua_pushcfunction(L, magnet_status_set);                  /* (sp += 1) */\n\tlua_setfield(L, -2, \"__newindex\");                        /* (sp -= 1) */\n\tlua_pushcfunction(L, magnet_status_pairs);                /* (sp += 1) */\n\tlua_setfield(L, -2, \"__pairs\");                           /* (sp -= 1) */\n\tlua_setmetatable(L, -2); /* tie the metatable to statzs      (sp -= 1) */\n\tlua_setfield(L, -2, \"status\"); /* content = {}               (sp -= 1) */\n\n\t/* add empty 'content' and 'header' tables */\n\tlua_newtable(L); /*  {}                                      (sp += 1) */\n\tlua_setfield(L, -2, \"content\"); /* content = {}              (sp -= 1) */\n\n\tlua_newtable(L); /*  {}                                      (sp += 1) */\n\tlua_setfield(L, -2, \"header\"); /* header = {}                (sp -= 1) */\n\n\tlua_pushinteger(L, MAGNET_RESTART_REQUEST);\n\tlua_setfield(L, -2, \"RESTART_REQUEST\");\n\n\tlua_pushcfunction(L, magnet_stat);                        /* (sp += 1) */\n\tlua_setfield(L, -2, \"stat\"); /* -1 is the env we want to set (sp -= 1) */\n\n\t/* insert lighty table at index 2 */\n\tlua_pushvalue(L, -1);\n\tlua_insert(L, lighty_table_ndx);\n\n\tlua_setfield(L, -2, \"lighty\"); /* lighty.*                   (sp -= 1) */\n\n#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502\n\t/* override the default pairs() function to our __pairs capable version;\n\t * not needed for lua 5.2+\n\t */\n\tlua_getglobal(L, \"pairs\"); /* push original pairs()          (sp += 1) */\n\tlua_pushcclosure(L, magnet_pairs, 1);\n\tlua_setfield(L, -2, \"pairs\");                             /* (sp -= 1) */\n#endif\n\n\tlua_newtable(L); /* the meta-table for the new env           (sp += 1) */\n\tlua_pushglobaltable(L);                                   /* (sp += 1) */\n\tlua_setfield(L, -2, \"__index\"); /* { __index = _G }          (sp -= 1) */\n\tlua_setmetatable(L, -2); /* setmetatable({}, {__index = _G}) (sp -= 1) */\n\n\tmagnet_setfenv_mainfn(L, 1);                              /* (sp -= 1) */\n\n\t/* pcall will destroy the func value, duplicate it */     /* (sp += 1) */\n\tlua_pushvalue(L, func_ndx);\n\t{\n\t\tint errfunc = push_traceback(L, 0);\n\t\tint ret = lua_pcall(L, 0, 1, errfunc);\n\t\tlua_remove(L, errfunc);\n\n\t\t/* reset environment */\n\t\tlua_pushglobaltable(L);                               /* (sp += 1) */\n\t\tmagnet_setfenv_mainfn(L, 1);                          /* (sp -= 1) */\n\n\t\tif (0 != ret) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__,\n\t\t\t\t\"ss\",\n\t\t\t\t\"lua_pcall():\",\n\t\t\t\tlua_tostring(L, -1));\n\t\t\tlua_pop(L, 2); /* remove the error-msg and the lighty table at index 2 */\n\n\t\t\tforce_assert(lua_gettop(L) == 1); /* only the function should be on the stack */\n\n\t\t\tcon->http_status = 500;\n\t\t\tcon->mode = DIRECT;\n\n\t\t\treturn HANDLER_FINISHED;\n\t\t}\n\t}\n\n\t/* we should have the function, the lighty table and the return value on the stack */\n\tforce_assert(lua_gettop(L) == 3);\n\n\tswitch (lua_type(L, -1)) {\n\tcase LUA_TNUMBER:\n\tcase LUA_TNIL:\n\t\tlua_return_value = (int) luaL_optinteger(L, -1, -1);\n\t\tbreak;\n\tdefault:\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"sss\",\n\t\t\t\t\"lua_pcall():\",\n\t\t\t\t\"unexpected return type:\",\n\t\t\t\tluaL_typename(L, -1));\n\t\tlua_return_value = -1;\n\t\tbreak;\n\t}\n\n\tlua_pop(L, 1); /* pop return value */\n\n\tmagnet_copy_response_header(con, L, lighty_table_ndx);\n\n\t{\n\t\thandler_t result = HANDLER_GO_ON;\n\n\t\tif (lua_return_value > 99) {\n\t\t\tcon->http_status = lua_return_value;\n\t\t\tcon->file_finished = 1;\n\n\t\t\t/* try { ...*/\n\t\t\tif (0 == setjmp(exceptionjmp)) {\n\t\t\t\tmagnet_attach_content(srv, con, L, lighty_table_ndx);\n\t\t\t\tif (!chunkqueue_is_empty(con->write_queue)) {\n\t\t\t\t\tcon->mode = p->id;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlua_settop(L, 2); /* remove all but function and lighty table */\n\t\t\t\t/* } catch () { */\n\t\t\t\tcon->http_status = 500;\n\t\t\t\tcon->mode = DIRECT;\n\t\t\t}\n\n\t\t\tresult = HANDLER_FINISHED;\n\t\t} else if (MAGNET_RESTART_REQUEST == lua_return_value) {\n\t\t\tresult = HANDLER_COMEBACK;\n\t\t}\n\n\t\tlua_pop(L, 1); /* pop the lighty table */\n\t\tforce_assert(lua_gettop(L) == 1); /* only the function should remain on the stack */\n\n\t\treturn result;\n\t}\n}\n\nstatic handler_t magnet_attract_array(server *srv, connection *con, plugin_data *p, array *files) {\n\tsize_t i;\n\thandler_t ret = HANDLER_GO_ON;\n\n\t/* no filename set */\n\tif (files->used == 0) return HANDLER_GO_ON;\n\n\tsrv->request_env(srv, con);\n\n\t/**\n\t * execute all files and jump out on the first !HANDLER_GO_ON\n\t */\n\tfor (i = 0; i < files->used && ret == HANDLER_GO_ON; i++) {\n\t\tdata_string *ds = (data_string *)files->data[i];\n\n\t\tif (buffer_string_is_empty(ds->value)) continue;\n\n\t\tret = magnet_attract(srv, con, p, ds->value);\n\t}\n\n\tif (con->error_handler_saved_status) {\n\t\t/* retrieve (possibly modified) REDIRECT_STATUS and store as number */\n\t\tunsigned long x;\n\t\tbuffer * const vb = http_header_env_get(con, CONST_STR_LEN(\"REDIRECT_STATUS\"));\n\t\tif (vb && (x = strtoul(vb->ptr, NULL, 10)) < 1000)\n\t\t\t/*(simplified validity check x < 1000)*/\n\t\t\tcon->error_handler_saved_status =\n\t\t\t  con->error_handler_saved_status > 0 ? (int)x : -(int)x;\n\t}\n\n\treturn ret;\n}\n\nURIHANDLER_FUNC(mod_magnet_uri_handler) {\n\tplugin_data *p = p_d;\n\n\tmod_magnet_patch_connection(srv, con, p);\n\n\treturn magnet_attract_array(srv, con, p, p->conf.url_raw);\n}\n\nURIHANDLER_FUNC(mod_magnet_physical) {\n\tplugin_data *p = p_d;\n\n\tmod_magnet_patch_connection(srv, con, p);\n\n\treturn magnet_attract_array(srv, con, p, p->conf.physical_path);\n}\n\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_magnet_plugin_init(plugin *p);\nint mod_magnet_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"magnet\");\n\n\tp->init        = mod_magnet_init;\n\tp->handle_uri_clean  = mod_magnet_uri_handler;\n\tp->handle_physical   = mod_magnet_physical;\n\tp->set_defaults  = mod_magnet_set_defaults;\n\tp->cleanup     = mod_magnet_free;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/plugin.h": "#ifndef _PLUGIN_H_\n#define _PLUGIN_H_\n#include \"first.h\"\n\n#include \"base_decls.h\"\n#include \"buffer.h\"\n#include \"array.h\"\n#include \"configfile.h\"\n\n#define SERVER_FUNC(x) \\\n\t\tstatic handler_t x(server *srv, void *p_d)\n\n#define CONNECTION_FUNC(x) \\\n\t\tstatic handler_t x(server *srv, connection *con, void *p_d)\n\n#define INIT_FUNC(x) \\\n\t\t__attribute_cold__ \\\n\t\tstatic void *x(void)\n\n#define FREE_FUNC          __attribute_cold__ SERVER_FUNC\n#define SETDEFAULTS_FUNC   __attribute_cold__ SERVER_FUNC\n#define SIGHUP_FUNC        __attribute_cold__ SERVER_FUNC\n#define TRIGGER_FUNC       SERVER_FUNC\n\n#define SUBREQUEST_FUNC    CONNECTION_FUNC\n#define PHYSICALPATH_FUNC  CONNECTION_FUNC\n#define REQUESTDONE_FUNC   CONNECTION_FUNC\n#define URIHANDLER_FUNC    CONNECTION_FUNC\n\n#define PLUGIN_DATA        size_t id\n\ntypedef struct {\n\tsize_t version;\n\n\tbuffer *name; /* name of the plugin */\n\n\tvoid *(* init)                       ();\n\thandler_t (* priv_defaults)          (server *srv, void *p_d);\n\thandler_t (* set_defaults)           (server *srv, void *p_d);\n\thandler_t (* worker_init)            (server *srv, void *p_d); /* at server startup (each worker after fork()) */\n\thandler_t (* cleanup)                (server *srv, void *p_d);\n\t                                                                                   /* is called ... */\n\thandler_t (* handle_trigger)         (server *srv, void *p_d);                     /* once a second */\n\thandler_t (* handle_sighup)          (server *srv, void *p_d);                     /* at a sighup */\n\thandler_t (* handle_waitpid)         (server *srv, void *p_d, pid_t pid, int status); /* upon a child process exit */\n\n\thandler_t (* handle_uri_raw)         (server *srv, connection *con, void *p_d);    /* after uri_raw is set */\n\thandler_t (* handle_uri_clean)       (server *srv, connection *con, void *p_d);    /* after uri is set */\n\thandler_t (* handle_docroot)         (server *srv, connection *con, void *p_d);    /* getting the document-root */\n\thandler_t (* handle_physical)        (server *srv, connection *con, void *p_d);    /* mapping url to physical path */\n\thandler_t (* handle_request_env)     (server *srv, connection *con, void *p_d);    /* (deferred env populate) */\n\thandler_t (* handle_request_done)    (server *srv, connection *con, void *p_d);    /* at the end of a request */\n\thandler_t (* handle_connection_accept) (server *srv, connection *con, void *p_d);  /* after accept() socket */\n\thandler_t (* handle_connection_shut_wr)(server *srv, connection *con, void *p_d);  /* done writing to socket */\n\thandler_t (* handle_connection_close)  (server *srv, connection *con, void *p_d);  /* before close() of socket */\n\n\n\n\thandler_t (* handle_subrequest_start)(server *srv, connection *con, void *p_d);\n\n\t                                                                                   /* when a handler for the request\n\t\t\t\t\t\t\t\t\t\t\t    * has to be found\n\t\t\t\t\t\t\t\t\t\t\t    */\n\thandler_t (* handle_subrequest)      (server *srv, connection *con, void *p_d);    /* */\n\thandler_t (* handle_response_start)  (server *srv, connection *con, void *p_d);    /* before response headers are written */\n\thandler_t (* connection_reset)       (server *srv, connection *con, void *p_d);    /* after request done or request abort */\n\tvoid *data;\n\n\t/* dlopen handle */\n\tvoid *lib;\n} plugin;\n\n__attribute_cold__\nint plugins_load(server *srv);\n\n__attribute_cold__\nvoid plugins_free(server *srv);\n\nhandler_t plugins_call_handle_uri_raw(server *srv, connection *con);\nhandler_t plugins_call_handle_uri_clean(server *srv, connection *con);\nhandler_t plugins_call_handle_subrequest_start(server *srv, connection *con);\nhandler_t plugins_call_handle_subrequest(server *srv, connection *con);\nhandler_t plugins_call_handle_response_start(server *srv, connection *con);\nhandler_t plugins_call_handle_request_env(server *srv, connection *con);\nhandler_t plugins_call_handle_request_done(server *srv, connection *con);\nhandler_t plugins_call_handle_docroot(server *srv, connection *con);\nhandler_t plugins_call_handle_physical(server *srv, connection *con);\nhandler_t plugins_call_handle_connection_accept(server *srv, connection *con);\nhandler_t plugins_call_handle_connection_shut_wr(server *srv, connection *con);\nhandler_t plugins_call_handle_connection_close(server *srv, connection *con);\nhandler_t plugins_call_connection_reset(server *srv, connection *con);\n\nhandler_t plugins_call_handle_trigger(server *srv);\nhandler_t plugins_call_handle_waitpid(server *srv, pid_t pid, int status);\n\n__attribute_cold__\nhandler_t plugins_call_handle_sighup(server *srv);\n\n__attribute_cold__\nhandler_t plugins_call_init(server *srv);\n\n__attribute_cold__\nhandler_t plugins_call_set_defaults(server *srv);\n\n__attribute_cold__\nhandler_t plugins_call_worker_init(server *srv);\n\n__attribute_cold__\nhandler_t plugins_call_cleanup(server *srv);\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_uploadprogress.c": "#include \"first.h\"\n\n#include \"base.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n#include \"http_header.h\"\n\n#include \"plugin.h\"\n\n#include <stdlib.h>\n#include <string.h>\n\n/**\n * this is a uploadprogress for a lighttpd plugin\n *\n */\n\ntypedef struct {\n\tbuffer     *con_id;\n\tconnection *con;\n} connection_map_entry;\n\ntypedef struct {\n\tconnection_map_entry **ptr;\n\n\tsize_t used;\n\tsize_t size;\n} connection_map;\n\n/* plugin config for all request/connections */\n\ntypedef struct {\n\tbuffer *progress_url;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\n\tconnection_map *con_map;\n\n\tplugin_config **config_storage;\n\n\tplugin_config conf;\n} plugin_data;\n\n/**\n *\n * connection maps\n *\n */\n\n/* init the plugin data */\nstatic connection_map *connection_map_init() {\n\tconnection_map *cm;\n\n\tcm = calloc(1, sizeof(*cm));\n\n\treturn cm;\n}\n\nstatic void connection_map_free(connection_map *cm) {\n\tsize_t i;\n\tfor (i = 0; i < cm->size; i++) {\n\t\tconnection_map_entry *cme = cm->ptr[i];\n\n\t\tif (!cme) break;\n\n\t\tif (cme->con_id) {\n\t\t\tbuffer_free(cme->con_id);\n\t\t}\n\t\tfree(cme);\n\t}\n\n\tfree(cm);\n}\n\nstatic int connection_map_insert(connection_map *cm, connection *con, const char *con_id, size_t idlen) {\n\tconnection_map_entry *cme;\n\tsize_t i;\n\n\tif (cm->used == cm->size) {\n\t\tcm->size += 16;\n\t\tcm->ptr = realloc(cm->ptr, cm->size * sizeof(*(cm->ptr)));\n\t\tfor (i = cm->used; i < cm->size; i++) {\n\t\t\tcm->ptr[i] = NULL;\n\t\t}\n\t}\n\n\tif (cm->ptr[cm->used]) {\n\t\t/* is already alloced, just reuse it */\n\t\tcme = cm->ptr[cm->used];\n\t} else {\n\t\tcme = malloc(sizeof(*cme));\n\t\tcme->con_id = buffer_init();\n\t}\n\tbuffer_copy_string_len(cme->con_id, con_id, idlen);\n\tcme->con = con;\n\n\tcm->ptr[cm->used++] = cme;\n\n\treturn 0;\n}\n\nstatic connection *connection_map_get_connection(connection_map *cm, const char *con_id, size_t idlen) {\n\tsize_t i;\n\n\tfor (i = 0; i < cm->used; i++) {\n\t\tconnection_map_entry *cme = cm->ptr[i];\n\n\t\tif (buffer_is_equal_string(cme->con_id, con_id, idlen)) {\n\t\t\t/* found connection */\n\n\t\t\treturn cme->con;\n\t\t}\n\t}\n\treturn NULL;\n}\n\nstatic int connection_map_remove_connection(connection_map *cm, connection *con) {\n\tsize_t i;\n\n\tfor (i = 0; i < cm->used; i++) {\n\t\tconnection_map_entry *cme = cm->ptr[i];\n\n\t\tif (cme->con == con) {\n\t\t\t/* found connection */\n\n\t\t\tbuffer_clear(cme->con_id);\n\t\t\tcme->con = NULL;\n\n\t\t\tcm->used--;\n\n\t\t\t/* swap positions with the last entry */\n\t\t\tif (cm->used) {\n\t\t\t\tcm->ptr[i] = cm->ptr[cm->used];\n\t\t\t\tcm->ptr[cm->used] = cme;\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n/* init the plugin data */\nINIT_FUNC(mod_uploadprogress_init) {\n\tplugin_data *p;\n\n\tp = calloc(1, sizeof(*p));\n\n\tp->con_map = connection_map_init();\n\n\treturn p;\n}\n\n/* detroy the plugin data */\nFREE_FUNC(mod_uploadprogress_free) {\n\tplugin_data *p = p_d;\n\n\tUNUSED(srv);\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (NULL == s) continue;\n\n\t\t\tbuffer_free(s->progress_url);\n\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\n\tconnection_map_free(p->con_map);\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\n\nSETDEFAULTS_FUNC(mod_uploadprogress_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\tconfig_values_t cv[] = {\n\t\t{ \"upload-progress.progress-url\", NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },       /* 0 */\n\t\t{ NULL,                         NULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->progress_url    = buffer_init();\n\n\t\tcv[0].destination = s->progress_url;\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_uploadprogress_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(progress_url);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"upload-progress.progress-url\"))) {\n\t\t\t\tPATCH(progress_url);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\n/**\n *\n * the idea:\n *\n * for the first request we check if it is a post-request\n *\n * if no, move out, don't care about them\n *\n * if yes, take the connection structure and register it locally\n * in the progress-struct together with an session-id (md5 ... )\n *\n * if the connections closes, cleanup the entry in the progress-struct\n *\n * a second request can now get the info about the size of the upload,\n * the received bytes\n *\n */\n\nURIHANDLER_FUNC(mod_uploadprogress_uri_handler) {\n\tplugin_data *p = p_d;\n\tsize_t len;\n\tchar *id;\n\tbuffer *b;\n\tconnection *post_con = NULL;\n\tint pathinfo = 0;\n\n\tif (buffer_string_is_empty(con->uri.path)) return HANDLER_GO_ON;\n\tswitch(con->request.http_method) {\n\tcase HTTP_METHOD_GET:\n\tcase HTTP_METHOD_POST: break;\n\tdefault:               return HANDLER_GO_ON;\n\t}\n\n\tmod_uploadprogress_patch_connection(srv, con, p);\n\tif (buffer_string_is_empty(p->conf.progress_url)) return HANDLER_GO_ON;\n\n\tif (con->request.http_method == HTTP_METHOD_GET) {\n\t\tif (!buffer_is_equal(con->uri.path, p->conf.progress_url)) {\n\t\t\treturn HANDLER_GO_ON;\n\t\t}\n\t}\n\n\tif (NULL != (b = http_header_request_get(con, HTTP_HEADER_OTHER, CONST_STR_LEN(\"X-Progress-ID\")))) {\n\t\tid = b->ptr;\n\t} else if (!buffer_string_is_empty(con->uri.query)\n\t\t   && (id = strstr(con->uri.query->ptr, \"X-Progress-ID=\"))) {\n\t\t/* perhaps the POST request is using the query-string to pass the X-Progress-ID */\n\t\tid += sizeof(\"X-Progress-ID=\")-1;\n\t} else {\n\t\t/*(path-info is not known at this point in request)*/\n\t\tid = con->uri.path->ptr;\n\t\tlen = buffer_string_length(con->uri.path);\n\t\tif (len >= 33 && id[len-33] == '/') {\n\t\t\tid += len - 32;\n\t\t\tpathinfo = 1;\n\t\t} else {\n\t\t\treturn HANDLER_GO_ON;\n\t\t}\n\t}\n\n\t/* the request has to contain a 32byte ID */\n\tfor (len = 0; light_isxdigit(id[len]); ++len) ;\n\tif (len != 32) {\n\t\tif (!pathinfo) { /*(reduce false positive noise in error log)*/\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\",\n\t\t\t\t\t\"invalid progress-id; non-xdigit or len != 32:\", id);\n\t\t}\n\t\treturn HANDLER_GO_ON;\n\t}\n\n\t/* check if this is a POST request */\n\tswitch(con->request.http_method) {\n\tcase HTTP_METHOD_POST:\n\n\t\tconnection_map_insert(p->con_map, con, id, len);\n\n\t\treturn HANDLER_GO_ON;\n\tcase HTTP_METHOD_GET:\n\t\tbuffer_reset(con->physical.path);\n\n\t\tcon->file_started = 1;\n\t\tcon->file_finished = 1;\n\n\t\tcon->http_status = 200;\n\t\tcon->mode = DIRECT;\n\n\t\t/* get the connection */\n\t\tif (NULL == (post_con = connection_map_get_connection(p->con_map, id, len))) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\",\n\t\t\t\t\t\"ID not known:\", id);\n\n\t\t\tchunkqueue_append_mem(con->write_queue, CONST_STR_LEN(\"not in progress\"));\n\n\t\t\treturn HANDLER_FINISHED;\n\t\t}\n\n\t\thttp_header_response_set(con, HTTP_HEADER_CONTENT_TYPE, CONST_STR_LEN(\"Content-Type\"), CONST_STR_LEN(\"text/xml\"));\n\n\t\t/* just an attempt the force the IE/proxies to NOT cache the request ... doesn't help :( */\n\t\thttp_header_response_set(con, HTTP_HEADER_OTHER, CONST_STR_LEN(\"Pragma\"), CONST_STR_LEN(\"no-cache\"));\n\t\thttp_header_response_set(con, HTTP_HEADER_OTHER, CONST_STR_LEN(\"Expires\"), CONST_STR_LEN(\"Thu, 19 Nov 1981 08:52:00 GMT\"));\n\t\thttp_header_response_set(con, HTTP_HEADER_CACHE_CONTROL, CONST_STR_LEN(\"Cache-Control\"), CONST_STR_LEN(\"no-store, no-cache, must-revalidate, post-check=0, pre-check=0\"));\n\n\t\t/* prepare XML */\n\t\tb = srv->tmp_buf;\n\t\tbuffer_copy_string_len(b, CONST_STR_LEN(\n\t\t\t\"<?xml version=\\\"1.0\\\" encoding=\\\"iso-8859-1\\\"?>\"\n\t\t\t\"<upload>\"\n\t\t\t\"<size>\"));\n\t\tbuffer_append_int(b, post_con->request.content_length);\n\t\tbuffer_append_string_len(b, CONST_STR_LEN(\n\t\t\t\"</size>\"\n\t\t\t\"<received>\"));\n\t\tbuffer_append_int(b, post_con->request_content_queue->bytes_in);\n\t\tbuffer_append_string_len(b, CONST_STR_LEN(\n\t\t\t\"</received>\"\n\t\t\t\"</upload>\"));\n\t\tchunkqueue_append_mem(con->write_queue, CONST_BUF_LEN(b));\n\t\treturn HANDLER_FINISHED;\n\tdefault:\n\t\tbreak;\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\nREQUESTDONE_FUNC(mod_uploadprogress_request_done) {\n\tplugin_data *p = p_d;\n\n\tUNUSED(srv);\n\n\tif (con->request.http_method != HTTP_METHOD_POST) return HANDLER_GO_ON;\n\tif (buffer_string_is_empty(con->uri.path)) return HANDLER_GO_ON;\n\n\tif (connection_map_remove_connection(p->con_map, con)) {\n\t\t/* removed */\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_uploadprogress_plugin_init(plugin *p);\nint mod_uploadprogress_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"uploadprogress\");\n\n\tp->init        = mod_uploadprogress_init;\n\tp->handle_uri_clean  = mod_uploadprogress_uri_handler;\n\tp->connection_reset  = mod_uploadprogress_request_done;\n\tp->set_defaults  = mod_uploadprogress_set_defaults;\n\tp->cleanup     = mod_uploadprogress_free;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_secdownload.c": "#include \"first.h\"\n\n#include \"base.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n#include \"base64.h\"\n#include \"http_auth.h\"\n\n#include \"plugin.h\"\n\n#include <stdlib.h>\n#include <string.h>\n\n#include \"sys-crypto.h\"\n#ifdef USE_OPENSSL_CRYPTO\n#include <openssl/evp.h>\n#include <openssl/hmac.h>\n#endif\n\n#include \"md5.h\"\n\n/*\n * mod_secdownload verifies a checksum associated with a timestamp\n * and a path.\n *\n * It takes an URL of the form:\n *   securl := <uri-prefix> <mac> <protected-path>\n *   uri-prefix := '/' any*         # whatever was configured: must start with a '/')\n *   mac := [a-zA-Z0-9_-]{mac_len}  # mac length depends on selected algorithm\n *   protected-path := '/' <timestamp> <rel-path>\n *   timestamp := [a-f0-9]{8}       # timestamp when the checksum was calculated\n *                                  # to prevent access after timeout (active requests\n *                                  # will finish successfully even after the timeout)\n *   rel-path := '/' any*           # the protected path; changing the path breaks the\n *                                  # checksum\n *\n * The timestamp is the `epoch` timestamp in hex, i.e. time in seconds\n * since 00:00:00 UTC on 1 January 1970.\n *\n * mod_secdownload supports various MAC algorithms:\n *\n * # md5\n * mac_len := 32 (and hex only)\n * mac := md5-hex(<secrect><rel-path><timestamp>)   # lowercase hex\n * perl example:\n    use Digest::MD5 qw(md5_hex);\n    my $secret = \"verysecret\";\n    my $rel_path = \"/index.html\"\n    my $xtime = sprintf(\"%08x\", time);\n    my $url = '/'. md5_hex($secret . $rel_path . $xtime) . '/' . $xtime . $rel_path;\n *\n * # hmac-sha1\n * mac_len := 27  (no base64 padding)\n * mac := base64-url(hmac-sha1(<secret>, <protected-path>))\n * perl example:\n    use Digest::SHA qw(hmac_sha1);\n    use MIME::Base64 qw(encode_base64url);\n    my $secret = \"verysecret\";\n    my $rel_path = \"/index.html\"\n    my $protected_path = '/' . sprintf(\"%08x\", time) . $rel_path;\n    my $url = '/'. encode_base64url(hmac_sha1($protected_path, $secret)) . $protected_path;\n *\n * # hmac-256\n * mac_len := 43  (no base64 padding)\n * mac := base64-url(hmac-256(<secret>, <protected-path>))\n    use Digest::SHA qw(hmac_sha256);\n    use MIME::Base64 qw(encode_base64url);\n    my $secret = \"verysecret\";\n    my $rel_path = \"/index.html\"\n    my $protected_path = '/' . sprintf(\"%08x\", time) . $rel_path;\n    my $url = '/'. encode_base64url(hmac_sha256($protected_path, $secret)) . $protected_path;\n *\n */\n\n/* plugin config for all request/connections */\n\ntypedef enum {\n\tSECDL_INVALID = 0,\n\tSECDL_MD5 = 1,\n\tSECDL_HMAC_SHA1 = 2,\n\tSECDL_HMAC_SHA256 = 3,\n} secdl_algorithm;\n\ntypedef struct {\n\tbuffer *doc_root;\n\tbuffer *secret;\n\tbuffer *uri_prefix;\n\tsecdl_algorithm algorithm;\n\n\tunsigned int timeout;\n\tunsigned short path_segments;\n\tunsigned short hash_querystr;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\n\tplugin_config **config_storage;\n\n\tplugin_config conf;\n} plugin_data;\n\nstatic int const_time_memeq(const char *a, const char *b, size_t len) {\n\t/* constant time memory compare, unless the compiler figures it out */\n\tchar diff = 0;\n\tsize_t i;\n\tfor (i = 0; i < len; ++i) {\n\t\tdiff |= (a[i] ^ b[i]);\n\t}\n\treturn 0 == diff;\n}\n\nstatic const char* secdl_algorithm_names[] = {\n\t\"invalid\",\n\t\"md5\",\n\t\"hmac-sha1\",\n\t\"hmac-sha256\",\n};\n\nstatic secdl_algorithm algorithm_from_string(buffer *name) {\n\tsize_t ndx;\n\n\tif (buffer_string_is_empty(name)) return SECDL_INVALID;\n\n\tfor (ndx = 1; ndx < sizeof(secdl_algorithm_names)/sizeof(secdl_algorithm_names[0]); ++ndx) {\n\t\tif (0 == strcmp(secdl_algorithm_names[ndx], name->ptr)) return (secdl_algorithm)ndx;\n\t}\n\n\treturn SECDL_INVALID;\n}\n\nstatic size_t secdl_algorithm_mac_length(secdl_algorithm alg) {\n\tswitch (alg) {\n\tcase SECDL_INVALID:\n\t\tbreak;\n\tcase SECDL_MD5:\n\t\treturn 32;\n\tcase SECDL_HMAC_SHA1:\n\t\treturn 27;\n\tcase SECDL_HMAC_SHA256:\n\t\treturn 43;\n\t}\n\treturn 0;\n}\n\nstatic int secdl_verify_mac(server *srv, plugin_config *config, const char* protected_path, const char* mac, size_t maclen) {\n\tUNUSED(srv);\n\tif (0 == maclen || secdl_algorithm_mac_length(config->algorithm) != maclen) return 0;\n\n\tswitch (config->algorithm) {\n\tcase SECDL_INVALID:\n\t\tbreak;\n\tcase SECDL_MD5:\n\t\t{\n\t\t\tli_MD5_CTX Md5Ctx;\n\t\t\tconst char *ts_str;\n\t\t\tconst char *rel_uri;\n\t\t\tunsigned char HA1[16];\n\t\t\tunsigned char md5bin[16];\n\n\t\t\tif (0 != http_auth_digest_hex2bin(mac, maclen, md5bin, sizeof(md5bin))) return 0;\n\n\t\t\t/* legacy message:\n\t\t\t *   protected_path := '/' <timestamp-hex> <rel-path>\n\t\t\t *   timestamp-hex := [0-9a-f]{8}\n\t\t\t *   rel-path := '/' any*\n\t\t\t *   (the protected path was already verified)\n\t\t\t * message = <secret><rel-path><timestamp-hex>\n\t\t\t */\n\t\t\tts_str = protected_path + 1;\n\t\t\trel_uri = ts_str + 8;\n\n\t\t\tli_MD5_Init(&Md5Ctx);\n\t\t\tli_MD5_Update(&Md5Ctx, CONST_BUF_LEN(config->secret));\n\t\t\tli_MD5_Update(&Md5Ctx, rel_uri, strlen(rel_uri));\n\t\t\tli_MD5_Update(&Md5Ctx, ts_str, 8);\n\t\t\tli_MD5_Final(HA1, &Md5Ctx);\n\n\t\t\treturn const_time_memeq((char *)HA1, (char *)md5bin, sizeof(md5bin));\n\t\t}\n\tcase SECDL_HMAC_SHA1:\n#ifdef USE_OPENSSL_CRYPTO\n\t\t{\n\t\t\tunsigned char digest[20];\n\t\t\tchar base64_digest[27];\n\n\t\t\tif (NULL == HMAC(\n\t\t\t\t\tEVP_sha1(),\n\t\t\t\t\t(unsigned char const*) config->secret->ptr, buffer_string_length(config->secret),\n\t\t\t\t\t(unsigned char const*) protected_path, strlen(protected_path),\n\t\t\t\t\tdigest, NULL)) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"hmac-sha1: HMAC() failed\");\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tli_to_base64_no_padding(base64_digest, 27, digest, 20, BASE64_URL);\n\n\t\t\treturn (27 == maclen) && const_time_memeq(mac, base64_digest, 27);\n\t\t}\n#endif\n\t\tbreak;\n\tcase SECDL_HMAC_SHA256:\n#ifdef USE_OPENSSL_CRYPTO\n\t\t{\n\t\t\tunsigned char digest[32];\n\t\t\tchar base64_digest[43];\n\n\t\t\tif (NULL == HMAC(\n\t\t\t\t\tEVP_sha256(),\n\t\t\t\t\t(unsigned char const*) config->secret->ptr, buffer_string_length(config->secret),\n\t\t\t\t\t(unsigned char const*) protected_path, strlen(protected_path),\n\t\t\t\t\tdigest, NULL)) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"hmac-sha256: HMAC() failed\");\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tli_to_base64_no_padding(base64_digest, 43, digest, 32, BASE64_URL);\n\n\t\t\treturn (43 == maclen) && const_time_memeq(mac, base64_digest, 43);\n\t\t}\n#endif\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\n/* init the plugin data */\nINIT_FUNC(mod_secdownload_init) {\n\tplugin_data *p;\n\n\tp = calloc(1, sizeof(*p));\n\n\treturn p;\n}\n\n/* detroy the plugin data */\nFREE_FUNC(mod_secdownload_free) {\n\tplugin_data *p = p_d;\n\tUNUSED(srv);\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (NULL == s) continue;\n\n\t\t\tbuffer_free(s->secret);\n\t\t\tbuffer_free(s->doc_root);\n\t\t\tbuffer_free(s->uri_prefix);\n\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\n\nSETDEFAULTS_FUNC(mod_secdownload_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\tconfig_values_t cv[] = {\n\t\t{ \"secdownload.secret\",        NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION }, /* 0 */\n\t\t{ \"secdownload.document-root\", NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION }, /* 1 */\n\t\t{ \"secdownload.uri-prefix\",    NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION }, /* 2 */\n\t\t{ \"secdownload.timeout\",       NULL, T_CONFIG_INT,    T_CONFIG_SCOPE_CONNECTION }, /* 3 */\n\t\t{ \"secdownload.algorithm\",     NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION }, /* 4 */\n\t\t{ \"secdownload.path-segments\", NULL, T_CONFIG_SHORT,  T_CONFIG_SCOPE_CONNECTION }, /* 5 */\n\t\t{ \"secdownload.hash-querystr\", NULL, T_CONFIG_BOOLEAN,T_CONFIG_SCOPE_CONNECTION }, /* 6 */\n\t\t{ NULL,                        NULL, T_CONFIG_UNSET,  T_CONFIG_SCOPE_UNSET      }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\t\tbuffer *algorithm = buffer_init();\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->secret        = buffer_init();\n\t\ts->doc_root      = buffer_init();\n\t\ts->uri_prefix    = buffer_init();\n\t\ts->timeout       = 60;\n\t\ts->path_segments = 0;\n\t\ts->hash_querystr = 0;\n\n\t\tcv[0].destination = s->secret;\n\t\tcv[1].destination = s->doc_root;\n\t\tcv[2].destination = s->uri_prefix;\n\t\tcv[3].destination = &(s->timeout);\n\t\tcv[4].destination = algorithm;\n\t\tcv[5].destination = &(s->path_segments);\n\t\tcv[6].destination = &(s->hash_querystr);\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\tbuffer_free(algorithm);\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (!buffer_is_empty(algorithm)) {\n\t\t\ts->algorithm = algorithm_from_string(algorithm);\n\t\t\tswitch (s->algorithm) {\n\t\t\tcase SECDL_INVALID:\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\t\"invalid secdownload.algorithm:\",\n\t\t\t\t\talgorithm);\n\t\t\t\tbuffer_free(algorithm);\n\t\t\t\treturn HANDLER_ERROR;\n#ifndef USE_OPENSSL_CRYPTO\n\t\t\tcase SECDL_HMAC_SHA1:\n\t\t\tcase SECDL_HMAC_SHA256:\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\t\"unsupported secdownload.algorithm:\",\n\t\t\t\t\talgorithm);\n#endif\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tbuffer_free(algorithm);\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n/**\n * checks if the supplied string is a hex string\n *\n * @param str a possible hex string\n * @return if the supplied string is a valid hex string 1 is returned otherwise 0\n */\n\nstatic int is_hex_len(const char *str, size_t len) {\n\tsize_t i;\n\n\tif (NULL == str) return 0;\n\n\tfor (i = 0; i < len && *str; i++, str++) {\n\t\t/* illegal characters */\n\t\tif (!((*str >= '0' && *str <= '9') ||\n\t\t      (*str >= 'a' && *str <= 'f') ||\n\t\t      (*str >= 'A' && *str <= 'F'))\n\t\t    ) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn i == len;\n}\n\n/**\n * checks if the supplied string is a base64 (modified URL) string\n *\n * @param str a possible base64 (modified URL) string\n * @return if the supplied string is a valid base64 (modified URL) string 1 is returned otherwise 0\n */\n\nstatic int is_base64_len(const char *str, size_t len) {\n\tsize_t i;\n\n\tif (NULL == str) return 0;\n\n\tfor (i = 0; i < len && *str; i++, str++) {\n\t\t/* illegal characters */\n\t\tif (!((*str >= '0' && *str <= '9') ||\n\t\t      (*str >= 'a' && *str <= 'z') ||\n\t\t      (*str >= 'A' && *str <= 'Z') ||\n\t\t      (*str == '-') || (*str == '_'))\n\t\t    ) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn i == len;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_secdownload_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(secret);\n\tPATCH(doc_root);\n\tPATCH(uri_prefix);\n\tPATCH(timeout);\n\tPATCH(algorithm);\n\tPATCH(path_segments);\n\tPATCH(hash_querystr);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"secdownload.secret\"))) {\n\t\t\t\tPATCH(secret);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"secdownload.document-root\"))) {\n\t\t\t\tPATCH(doc_root);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"secdownload.uri-prefix\"))) {\n\t\t\t\tPATCH(uri_prefix);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"secdownload.timeout\"))) {\n\t\t\t\tPATCH(timeout);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"secdownload.algorithm\"))) {\n\t\t\t\tPATCH(algorithm);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"secdownload.path-segments\"))) {\n\t\t\t\tPATCH(path_segments);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"secdownload.hash-querystr\"))) {\n\t\t\t\tPATCH(hash_querystr);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\n\nURIHANDLER_FUNC(mod_secdownload_uri_handler) {\n\tplugin_data *p = p_d;\n\tconst char *rel_uri, *ts_str, *mac_str, *protected_path;\n\ttime_t ts = 0;\n\tsize_t i, mac_len;\n\n\tif (con->mode != DIRECT) return HANDLER_GO_ON;\n\n\tif (buffer_is_empty(con->uri.path)) return HANDLER_GO_ON;\n\n\tmod_secdownload_patch_connection(srv, con, p);\n\n\tif (buffer_string_is_empty(p->conf.uri_prefix)) return HANDLER_GO_ON;\n\n\tif (buffer_string_is_empty(p->conf.secret)) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\"secdownload.secret has to be set\");\n\t\tcon->http_status = 500;\n\t\treturn HANDLER_FINISHED;\n\t}\n\n\tif (buffer_string_is_empty(p->conf.doc_root)) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\"secdownload.document-root has to be set\");\n\t\tcon->http_status = 500;\n\t\treturn HANDLER_FINISHED;\n\t}\n\n\tif (SECDL_INVALID == p->conf.algorithm) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\"secdownload.algorithm has to be set\");\n\t\tcon->http_status = 500;\n\t\treturn HANDLER_FINISHED;\n\t}\n\n\tmac_len = secdl_algorithm_mac_length(p->conf.algorithm);\n\n\tif (0 != strncmp(con->uri.path->ptr, p->conf.uri_prefix->ptr, buffer_string_length(p->conf.uri_prefix))) return HANDLER_GO_ON;\n\n\tmac_str = con->uri.path->ptr + buffer_string_length(p->conf.uri_prefix);\n\n\tif (!is_base64_len(mac_str, mac_len)) return HANDLER_GO_ON;\n\n\tprotected_path = mac_str + mac_len;\n\tif (*protected_path != '/') return HANDLER_GO_ON;\n\n\tts_str = protected_path + 1;\n\tif (!is_hex_len(ts_str, 8)) return HANDLER_GO_ON;\n\tif (*(ts_str + 8) != '/') return HANDLER_GO_ON;\n\n\tfor (i = 0; i < 8; i++) {\n\t\tts = (ts << 4) + hex2int(ts_str[i]);\n\t}\n\n\t/* timed-out */\n\tif ( (srv->cur_ts > ts && (unsigned int) (srv->cur_ts - ts) > p->conf.timeout) ||\n\t     (srv->cur_ts < ts && (unsigned int) (ts - srv->cur_ts) > p->conf.timeout) ) {\n\t\t/* \"Gone\" as the url will never be valid again instead of \"408 - Timeout\" where the request may be repeated */\n\t\tcon->http_status = 410;\n\n\t\treturn HANDLER_FINISHED;\n\t}\n\n\trel_uri = ts_str + 8;\n\n\tif (p->conf.path_segments) {\n\t\tconst char *rel_uri_end = rel_uri;\n\t\tunsigned int count = p->conf.path_segments;\n\t\tdo {\n\t\t\trel_uri_end = strchr(rel_uri_end+1, '/');\n\t\t} while (rel_uri_end && --count);\n\t\tif (rel_uri_end) {\n\t\t\tbuffer_copy_string_len(srv->tmp_buf, protected_path,\n\t\t\t\t\t       rel_uri_end - protected_path);\n\t\t\tprotected_path = srv->tmp_buf->ptr;\n\t\t}\n\t}\n\n\tif (p->conf.hash_querystr && !buffer_is_empty(con->uri.query)) {\n\t\tbuffer *b = srv->tmp_buf;\n\t\tif (protected_path != b->ptr) {\n\t\t\tbuffer_copy_string(b, protected_path);\n\t\t}\n\t\tbuffer_append_string_len(b, CONST_STR_LEN(\"?\"));\n\t\tbuffer_append_string_buffer(b, con->uri.query);\n\t\t/* assign last in case b->ptr is reallocated */\n\t\tprotected_path = b->ptr;\n\t}\n\n\tif (!secdl_verify_mac(srv, &p->conf, protected_path, mac_str, mac_len)) {\n\t\tcon->http_status = 403;\n\n\t\tif (con->conf.log_request_handling) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\"mac invalid:\",\n\t\t\t\tcon->uri.path);\n\t\t}\n\n\t\treturn HANDLER_FINISHED;\n\t}\n\n\t/* starting with the last / we should have relative-path to the docroot\n\t */\n\n\tbuffer_copy_buffer(con->physical.doc_root, p->conf.doc_root);\n\tbuffer_copy_buffer(con->physical.basedir, p->conf.doc_root);\n\tbuffer_copy_string(con->physical.rel_path, rel_uri);\n\tbuffer_copy_buffer(con->physical.path, con->physical.doc_root);\n\tbuffer_append_string_buffer(con->physical.path, con->physical.rel_path);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_secdownload_plugin_init(plugin *p);\nint mod_secdownload_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"secdownload\");\n\n\tp->init        = mod_secdownload_init;\n\tp->handle_physical  = mod_secdownload_uri_handler;\n\tp->set_defaults  = mod_secdownload_set_defaults;\n\tp->cleanup     = mod_secdownload_free;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_vhostdb_mysql.c": "#include \"first.h\"\n\n#include <mysql.h>\n\n#include <string.h>\n#include <stdlib.h>\n\n#include \"base.h\"\n#include \"http_vhostdb.h\"\n#include \"fdevent.h\"\n#include \"log.h\"\n#include \"plugin.h\"\n\n/*\n * virtual host plugin using MySQL for domain to directory lookups\n */\n\ntypedef struct {\n    MYSQL *dbconn;\n    buffer *sqlquery;\n} vhostdb_config;\n\ntypedef struct {\n    void *vdata;\n    array *options;\n} plugin_config;\n\ntypedef struct {\n    PLUGIN_DATA;\n    plugin_config **config_storage;\n    plugin_config conf;\n} plugin_data;\n\nstatic void mod_vhostdb_dbconf_free (void *vdata)\n{\n    vhostdb_config *dbconf = (vhostdb_config *)vdata;\n    if (!dbconf) return;\n    mysql_close(dbconf->dbconn);\n    free(dbconf);\n}\n\nstatic int mod_vhostdb_dbconf_setup (server *srv, array *opts, void **vdata)\n{\n    buffer *sqlquery = NULL;\n    const char *dbname=NULL, *user=NULL, *pass=NULL, *host=NULL, *sock=NULL;\n    unsigned int port = 0;\n\n    for (size_t i = 0; i < opts->used; ++i) {\n        const data_string *ds = (data_string *)opts->data[i];\n        if (ds->type == TYPE_STRING && !buffer_string_is_empty(ds->value)) {\n            if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"sql\"))) {\n                sqlquery = ds->value;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"dbname\"))) {\n                dbname = ds->value->ptr;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"user\"))) {\n                user = ds->value->ptr;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"password\"))) {\n                pass = ds->value->ptr;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"host\"))) {\n                host = ds->value->ptr;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"port\"))) {\n                port = strtoul(ds->value->ptr, NULL, 10);\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"sock\"))) {\n                sock = ds->value->ptr;\n            }\n        }\n    }\n\n    /* required:\n     * - sql    (sql query)\n     * - dbname\n     * - user\n     *\n     * optional:\n     * - password, default: empty\n     * - socket, default: mysql default\n     * - hostname, if set overrides socket\n     * - port, default: 3306\n     */\n\n    if (!buffer_string_is_empty(sqlquery)\n        && dbname && *dbname && user && *user) {\n        vhostdb_config *dbconf;\n        MYSQL *dbconn = mysql_init(NULL);\n        if (NULL == dbconn) {\n            log_error_write(srv, __FILE__, __LINE__, \"s\",\n                            \"mysql_init() failed, exiting...\");\n            return -1;\n        }\n\n      #if MYSQL_VERSION_ID >= 50013\n        /* in mysql versions above 5.0.3 the reconnect flag is off by default */\n        {\n            char reconnect = 1;\n            mysql_options(dbconn, MYSQL_OPT_RECONNECT, &reconnect);\n        }\n      #endif\n\n        /* CLIENT_MULTI_STATEMENTS first appeared in 4.1 */\n      #if MYSQL_VERSION_ID < 40100\n        #ifndef CLIENT_MULTI_STATEMENTS\n        #define CLIENT_MULTI_STATEMENTS 0\n        #endif\n      #endif\n        if (!mysql_real_connect(dbconn, host, user, pass, dbname, port, sock,\n                                CLIENT_MULTI_STATEMENTS)) {\n            log_error_write(srv, __FILE__, __LINE__, \"s\",\n                            mysql_error(dbconn));\n            mysql_close(dbconn);\n            return -1;\n        }\n\n        fdevent_setfd_cloexec(dbconn->net.fd);\n\n        dbconf = (vhostdb_config *)calloc(1, sizeof(*dbconf));\n        dbconf->dbconn = dbconn;\n        dbconf->sqlquery = sqlquery;\n        *vdata = dbconf;\n    }\n\n    return 0;\n}\n\nstatic void mod_vhostdb_patch_connection (server *srv, connection *con, plugin_data *p);\n\nstatic int mod_vhostdb_mysql_query(server *srv, connection *con, void *p_d, buffer *docroot)\n{\n    plugin_data *p = (plugin_data *)p_d;\n    vhostdb_config *dbconf;\n    unsigned  cols;\n    MYSQL_ROW row;\n    MYSQL_RES *result;\n\n    /*(reuse buffer for sql query before generating docroot result)*/\n    buffer *sqlquery = docroot;\n    buffer_clear(sqlquery); /*(also resets docroot (alias))*/\n\n    mod_vhostdb_patch_connection(srv, con, p);\n    if (NULL == p->conf.vdata) return 0; /*(after resetting docroot)*/\n    dbconf = (vhostdb_config *)p->conf.vdata;\n\n    for (char *b = dbconf->sqlquery->ptr, *d; *b; b = d+1) {\n        if (NULL != (d = strchr(b, '?'))) {\n            /* escape the uri.authority */\n            unsigned long len;\n            buffer_append_string_len(sqlquery, b, (size_t)(d - b));\n            buffer_string_prepare_append(sqlquery, buffer_string_length(con->uri.authority) * 2);\n            len = mysql_real_escape_string(dbconf->dbconn,\n                    sqlquery->ptr + buffer_string_length(sqlquery),\n                    CONST_BUF_LEN(con->uri.authority));\n            if ((unsigned long)~0 == len) return -1;\n            buffer_commit(sqlquery, len);\n        } else {\n            d = dbconf->sqlquery->ptr + buffer_string_length(dbconf->sqlquery);\n            buffer_append_string_len(sqlquery, b, (size_t)(d - b));\n            break;\n        }\n    }\n\n    if (mysql_real_query(dbconf->dbconn, CONST_BUF_LEN(sqlquery))) {\n        log_error_write(srv, __FILE__, __LINE__, \"s\",\n                        mysql_error(dbconf->dbconn));\n        buffer_clear(docroot); /*(reset buffer; no result)*/\n        return -1;\n    }\n\n    buffer_clear(docroot); /*(reset buffer to store result)*/\n\n    result = mysql_store_result(dbconf->dbconn);\n    cols = mysql_num_fields(result);\n    row = mysql_fetch_row(result);\n    if (row && cols >= 1) {\n        buffer_copy_string(docroot, row[0]);\n    } /* else no such virtual host */\n\n    mysql_free_result(result);\n  #if MYSQL_VERSION_ID >= 40100\n    while (0 == mysql_next_result(dbconf->dbconn)) ;\n  #endif\n    return 0;\n}\n\n\n\n\nINIT_FUNC(mod_vhostdb_init) {\n    static http_vhostdb_backend_t http_vhostdb_backend_mysql =\n      { \"mysql\", mod_vhostdb_mysql_query, NULL };\n    plugin_data *p = calloc(1, sizeof(*p));\n\n    /* register http_vhostdb_backend_mysql */\n    http_vhostdb_backend_mysql.p_d = p;\n    http_vhostdb_backend_set(&http_vhostdb_backend_mysql);\n\n    return p;\n}\n\nFREE_FUNC(mod_vhostdb_cleanup) {\n    plugin_data *p = p_d;\n    if (!p) return HANDLER_GO_ON;\n\n    if (p->config_storage) {\n        for (size_t i = 0; i < srv->config_context->used; i++) {\n            plugin_config *s = p->config_storage[i];\n            if (!s) continue;\n            mod_vhostdb_dbconf_free(s->vdata);\n            array_free(s->options);\n            free(s);\n        }\n        free(p->config_storage);\n    }\n    free(p);\n\n    UNUSED(srv);\n    return HANDLER_GO_ON;\n}\n\nSETDEFAULTS_FUNC(mod_vhostdb_set_defaults) {\n    plugin_data *p = p_d;\n\n    config_values_t cv[] = {\n        { \"vhostdb.mysql\",  NULL, T_CONFIG_ARRAY,  T_CONFIG_SCOPE_CONNECTION },\n        { NULL,             NULL, T_CONFIG_UNSET,  T_CONFIG_SCOPE_UNSET }\n    };\n\n    p->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n    for (size_t i = 0; i < srv->config_context->used; ++i) {\n        data_config const *config = (data_config const*)srv->config_context->data[i];\n        plugin_config *s = calloc(1, sizeof(plugin_config));\n\n        s->options = array_init();\n        cv[0].destination = s->options;\n\n        p->config_storage[i] = s;\n\n        if (config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n            return HANDLER_ERROR;\n        }\n\n\tif (!array_is_kvstring(s->options)) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\"unexpected value for vhostdb.mysql; expected list of \\\"option\\\" => \\\"value\\\"\");\n\t\treturn HANDLER_ERROR;\n\t}\n\n        if (s->options->used\n            && 0 != mod_vhostdb_dbconf_setup(srv, s->options, &s->vdata)) {\n            return HANDLER_ERROR;\n        }\n    }\n\n    return HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n    p->conf.x = s->x;\nstatic void mod_vhostdb_patch_connection (server *srv, connection *con, plugin_data *p)\n{\n    plugin_config *s = p->config_storage[0];\n    PATCH(vdata);\n\n    /* skip the first, the global context */\n    for (size_t i = 1; i < srv->config_context->used; ++i) {\n        data_config *dc = (data_config *)srv->config_context->data[i];\n        s = p->config_storage[i];\n\n        /* condition didn't match */\n        if (!config_check_cond(srv, con, dc)) continue;\n\n        /* merge config */\n        for (size_t j = 0; j < dc->value->used; ++j) {\n            data_unset *du = dc->value->data[j];\n\n            if (buffer_is_equal_string(du->key,CONST_STR_LEN(\"vhostdb.mysql\"))){\n                PATCH(vdata);\n            }\n        }\n    }\n}\n#undef PATCH\n\n/* this function is called at dlopen() time and inits the callbacks */\nint mod_vhostdb_mysql_plugin_init (plugin *p);\nint mod_vhostdb_mysql_plugin_init (plugin *p)\n{\n    p->version          = LIGHTTPD_VERSION_ID;\n    p->name             = buffer_init_string(\"vhostdb_mysql\");\n\n    p->init             = mod_vhostdb_init;\n    p->cleanup          = mod_vhostdb_cleanup;\n    p->set_defaults     = mod_vhostdb_set_defaults;\n\n    return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_ssi.c": "#include \"first.h\"\n\n#include \"base.h\"\n#include \"fdevent.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n#include \"http_header.h\"\n#include \"stat_cache.h\"\n\n#include \"plugin.h\"\n\n#include \"response.h\"\n\n#include \"mod_ssi.h\"\n\n#include \"sys-socket.h\"\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include \"sys-strings.h\"\n#include <sys/wait.h>\n\n#include <ctype.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <time.h>\n#include <unistd.h>\n\n#ifdef HAVE_PWD_H\n# include <pwd.h>\n#endif\n\n#ifdef HAVE_SYS_FILIO_H\n# include <sys/filio.h>\n#endif\n\n#include \"etag.h\"\n\nstatic handler_ctx * handler_ctx_init(plugin_data *p) {\n\thandler_ctx *hctx = calloc(1, sizeof(*hctx));\n\tforce_assert(hctx);\n\thctx->timefmt = p->timefmt;\n\thctx->stat_fn = p->stat_fn;\n\thctx->ssi_vars = p->ssi_vars;\n\thctx->ssi_cgi_env = p->ssi_cgi_env;\n\tmemcpy(&hctx->conf, &p->conf, sizeof(plugin_config));\n\treturn hctx;\n}\n\nstatic void handler_ctx_free(handler_ctx *hctx) {\n\tfree(hctx);\n}\n\n/* The newest modified time of included files for include statement */\nstatic volatile time_t include_file_last_mtime = 0;\n\n/* init the plugin data */\nINIT_FUNC(mod_ssi_init) {\n\tplugin_data *p;\n\n\tp = calloc(1, sizeof(*p));\n\n\tp->timefmt = buffer_init();\n\tp->stat_fn = buffer_init();\n\n\tp->ssi_vars = array_init();\n\tp->ssi_cgi_env = array_init();\n\n\treturn p;\n}\n\n/* detroy the plugin data */\nFREE_FUNC(mod_ssi_free) {\n\tplugin_data *p = p_d;\n\tUNUSED(srv);\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (NULL == s) continue;\n\n\t\t\tarray_free(s->ssi_extension);\n\t\t\tbuffer_free(s->content_type);\n\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\n\tarray_free(p->ssi_vars);\n\tarray_free(p->ssi_cgi_env);\n\tbuffer_free(p->timefmt);\n\tbuffer_free(p->stat_fn);\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\n\nSETDEFAULTS_FUNC(mod_ssi_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\tconfig_values_t cv[] = {\n\t\t{ \"ssi.extension\",              NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 0 */\n\t\t{ \"ssi.content-type\",           NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },      /* 1 */\n\t\t{ \"ssi.conditional-requests\",   NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION },     /* 2 */\n\t\t{ \"ssi.exec\",                   NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION },     /* 3 */\n\t\t{ \"ssi.recursion-max\",          NULL, T_CONFIG_SHORT, T_CONFIG_SCOPE_CONNECTION },     /* 4 */\n\t\t{ NULL,                         NULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->ssi_extension  = array_init();\n\t\ts->content_type = buffer_init();\n\t\ts->conditional_requests = 0;\n\t\ts->ssi_exec = 1;\n\t\ts->ssi_recursion_max = 0;\n\n\t\tcv[0].destination = s->ssi_extension;\n\t\tcv[1].destination = s->content_type;\n\t\tcv[2].destination = &(s->conditional_requests);\n\t\tcv[3].destination = &(s->ssi_exec);\n\t\tcv[4].destination = &(s->ssi_recursion_max);\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (!array_is_vlist(s->ssi_extension)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for ssi.extension; expected list of \\\"ext\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n\nstatic int ssi_env_add(void *venv, const char *key, size_t klen, const char *val, size_t vlen) {\n\tarray_insert_key_value((array *)venv, key, klen, val, vlen);\n\treturn 0;\n}\n\nstatic int build_ssi_cgi_vars(server *srv, connection *con, handler_ctx *p) {\n\thttp_cgi_opts opts = { 0, 0, NULL, NULL };\n\t/* temporarily remove Authorization from request headers\n\t * so that Authorization does not end up in SSI environment */\n\tbuffer *vb_auth = http_header_request_get(con, HTTP_HEADER_AUTHORIZATION, CONST_STR_LEN(\"Authorization\"));\n\tbuffer b_auth;\n\tif (vb_auth) {\n\t\tmemcpy(&b_auth, vb_auth, sizeof(buffer));\n\t\tmemset(vb_auth, 0, sizeof(buffer));\n\t}\n\n\tarray_reset_data_strings(p->ssi_cgi_env);\n\n\tif (0 != http_cgi_headers(srv, con, &opts, ssi_env_add, p->ssi_cgi_env)) {\n\t\tcon->http_status = 400;\n\t\treturn -1;\n\t}\n\n\tif (vb_auth) {\n\t\tmemcpy(vb_auth, &b_auth, sizeof(buffer));\n\t}\n\n\treturn 0;\n}\n\nstatic int mod_ssi_process_file(server *srv, connection *con, handler_ctx *p, struct stat *st);\n\nstatic int process_ssi_stmt(server *srv, connection *con, handler_ctx *p, const char **l, size_t n, struct stat *st) {\n\n\t/**\n\t * <!--#element attribute=value attribute=value ... -->\n\t *\n\t * config       DONE\n\t *   errmsg     -- missing\n\t *   sizefmt    DONE\n\t *   timefmt    DONE\n\t * echo         DONE\n\t *   var        DONE\n\t *   encoding   -- missing\n\t * exec         DONE\n\t *   cgi        -- never\n\t *   cmd        DONE\n\t * fsize        DONE\n\t *   file       DONE\n\t *   virtual    DONE\n\t * flastmod     DONE\n\t *   file       DONE\n\t *   virtual    DONE\n\t * include      DONE\n\t *   file       DONE\n\t *   virtual    DONE\n\t * printenv     DONE\n\t * set          DONE\n\t *   var        DONE\n\t *   value      DONE\n\t *\n\t * if           DONE\n\t * elif         DONE\n\t * else         DONE\n\t * endif        DONE\n\t *\n\t *\n\t * expressions\n\t * AND, OR      DONE\n\t * comp         DONE\n\t * ${...}       -- missing\n\t * $...         DONE\n\t * '...'        DONE\n\t * ( ... )      DONE\n\t *\n\t *\n\t *\n\t * ** all DONE **\n\t * DATE_GMT\n\t *   The current date in Greenwich Mean Time.\n\t * DATE_LOCAL\n\t *   The current date in the local time zone.\n\t * DOCUMENT_NAME\n\t *   The filename (excluding directories) of the document requested by the user.\n\t * DOCUMENT_URI\n\t *   The (%-decoded) URL path of the document requested by the user. Note that in the case of nested include files, this is not then URL for the current document.\n\t * LAST_MODIFIED\n\t *   The last modification date of the document requested by the user.\n\t * USER_NAME\n\t *   Contains the owner of the file which included it.\n\t *\n\t */\n\n\tsize_t i, ssicmd = 0;\n\tchar buf[255];\n\tbuffer *b = NULL;\n\n\tstatic const struct {\n\t\tconst char *var;\n\t\tenum { SSI_UNSET, SSI_ECHO, SSI_FSIZE, SSI_INCLUDE, SSI_FLASTMOD,\n\t\t\t\tSSI_CONFIG, SSI_PRINTENV, SSI_SET, SSI_IF, SSI_ELIF,\n\t\t\t\tSSI_ELSE, SSI_ENDIF, SSI_EXEC, SSI_COMMENT } type;\n\t} ssicmds[] = {\n\t\t{ \"echo\",     SSI_ECHO },\n\t\t{ \"include\",  SSI_INCLUDE },\n\t\t{ \"flastmod\", SSI_FLASTMOD },\n\t\t{ \"fsize\",    SSI_FSIZE },\n\t\t{ \"config\",   SSI_CONFIG },\n\t\t{ \"printenv\", SSI_PRINTENV },\n\t\t{ \"set\",      SSI_SET },\n\t\t{ \"if\",       SSI_IF },\n\t\t{ \"elif\",     SSI_ELIF },\n\t\t{ \"endif\",    SSI_ENDIF },\n\t\t{ \"else\",     SSI_ELSE },\n\t\t{ \"exec\",     SSI_EXEC },\n\t\t{ \"comment\",  SSI_COMMENT },\n\n\t\t{ NULL, SSI_UNSET }\n\t};\n\n\tfor (i = 0; ssicmds[i].var; i++) {\n\t\tif (0 == strcmp(l[1], ssicmds[i].var)) {\n\t\t\tssicmd = ssicmds[i].type;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tswitch(ssicmd) {\n\tcase SSI_ECHO: {\n\t\t/* echo */\n\t\tint var = 0;\n\t\t/* int enc = 0; */\n\t\tconst char *var_val = NULL;\n\n\t\tstatic const struct {\n\t\t\tconst char *var;\n\t\t\tenum {\n\t\t\t\tSSI_ECHO_UNSET,\n\t\t\t\tSSI_ECHO_DATE_GMT,\n\t\t\t\tSSI_ECHO_DATE_LOCAL,\n\t\t\t\tSSI_ECHO_DOCUMENT_NAME,\n\t\t\t\tSSI_ECHO_DOCUMENT_URI,\n\t\t\t\tSSI_ECHO_LAST_MODIFIED,\n\t\t\t\tSSI_ECHO_USER_NAME,\n\t\t\t\tSSI_ECHO_SCRIPT_URI,\n\t\t\t\tSSI_ECHO_SCRIPT_URL,\n\t\t\t} type;\n\t\t} echovars[] = {\n\t\t\t{ \"DATE_GMT\",      SSI_ECHO_DATE_GMT },\n\t\t\t{ \"DATE_LOCAL\",    SSI_ECHO_DATE_LOCAL },\n\t\t\t{ \"DOCUMENT_NAME\", SSI_ECHO_DOCUMENT_NAME },\n\t\t\t{ \"DOCUMENT_URI\",  SSI_ECHO_DOCUMENT_URI },\n\t\t\t{ \"LAST_MODIFIED\", SSI_ECHO_LAST_MODIFIED },\n\t\t\t{ \"USER_NAME\",     SSI_ECHO_USER_NAME },\n\t\t\t{ \"SCRIPT_URI\",    SSI_ECHO_SCRIPT_URI },\n\t\t\t{ \"SCRIPT_URL\",    SSI_ECHO_SCRIPT_URL },\n\n\t\t\t{ NULL, SSI_ECHO_UNSET }\n\t\t};\n\n/*\n\t\tstatic const struct {\n\t\t\tconst char *var;\n\t\t\tenum { SSI_ENC_UNSET, SSI_ENC_URL, SSI_ENC_NONE, SSI_ENC_ENTITY } type;\n\t\t} encvars[] = {\n\t\t\t{ \"url\",          SSI_ENC_URL },\n\t\t\t{ \"none\",         SSI_ENC_NONE },\n\t\t\t{ \"entity\",       SSI_ENC_ENTITY },\n\n\t\t\t{ NULL, SSI_ENC_UNSET }\n\t\t};\n*/\n\n\t\tfor (i = 2; i < n; i += 2) {\n\t\t\tif (0 == strcmp(l[i], \"var\")) {\n\t\t\t\tint j;\n\n\t\t\t\tvar_val = l[i+1];\n\n\t\t\t\tfor (j = 0; echovars[j].var; j++) {\n\t\t\t\t\tif (0 == strcmp(l[i+1], echovars[j].var)) {\n\t\t\t\t\t\tvar = echovars[j].type;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (0 == strcmp(l[i], \"encoding\")) {\n/*\n\t\t\t\tint j;\n\n\t\t\t\tfor (j = 0; encvars[j].var; j++) {\n\t\t\t\t\tif (0 == strcmp(l[i+1], encvars[j].var)) {\n\t\t\t\t\t\tenc = encvars[j].type;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n*/\n\t\t\t} else {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sss\",\n\t\t\t\t\t\t\"ssi: unknown attribute for \",\n\t\t\t\t\t\tl[1], l[i]);\n\t\t\t}\n\t\t}\n\n\t\tif (p->if_is_false) break;\n\n\t\tif (!var_val) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sss\",\n\t\t\t\t\t\"ssi: \",\n\t\t\t\t\tl[1], \"var is missing\");\n\t\t\tbreak;\n\t\t}\n\n\t\tswitch(var) {\n\t\tcase SSI_ECHO_USER_NAME: {\n\t\t\tstruct passwd *pw;\n\n\t\t\tb = srv->tmp_buf;\n#ifdef HAVE_PWD_H\n\t\t\tif (NULL == (pw = getpwuid(st->st_uid))) {\n\t\t\t\tbuffer_copy_int(b, st->st_uid);\n\t\t\t} else {\n\t\t\t\tbuffer_copy_string(b, pw->pw_name);\n\t\t\t}\n#else\n\t\t\tbuffer_copy_int(b, st->st_uid);\n#endif\n\t\t\tchunkqueue_append_mem(con->write_queue, CONST_BUF_LEN(b));\n\t\t\tbreak;\n\t\t}\n\t\tcase SSI_ECHO_LAST_MODIFIED: {\n\t\t\ttime_t t = st->st_mtime;\n\n\t\t\tif (0 == strftime(buf, sizeof(buf), p->timefmt->ptr, localtime(&t))) {\n\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_STR_LEN(\"(none)\"));\n\t\t\t} else {\n\t\t\t\tchunkqueue_append_mem(con->write_queue, buf, strlen(buf));\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase SSI_ECHO_DATE_LOCAL: {\n\t\t\ttime_t t = time(NULL);\n\n\t\t\tif (0 == strftime(buf, sizeof(buf), p->timefmt->ptr, localtime(&t))) {\n\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_STR_LEN(\"(none)\"));\n\t\t\t} else {\n\t\t\t\tchunkqueue_append_mem(con->write_queue, buf, strlen(buf));\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase SSI_ECHO_DATE_GMT: {\n\t\t\ttime_t t = time(NULL);\n\n\t\t\tif (0 == strftime(buf, sizeof(buf), p->timefmt->ptr, gmtime(&t))) {\n\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_STR_LEN(\"(none)\"));\n\t\t\t} else {\n\t\t\t\tchunkqueue_append_mem(con->write_queue, buf, strlen(buf));\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase SSI_ECHO_DOCUMENT_NAME: {\n\t\t\tchar *sl;\n\n\t\t\tif (NULL == (sl = strrchr(con->physical.path->ptr, '/'))) {\n\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_BUF_LEN(con->physical.path));\n\t\t\t} else {\n\t\t\t\tchunkqueue_append_mem(con->write_queue, sl + 1, strlen(sl + 1));\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase SSI_ECHO_DOCUMENT_URI: {\n\t\t\tchunkqueue_append_mem(con->write_queue, CONST_BUF_LEN(con->uri.path));\n\t\t\tbreak;\n\t\t}\n\t\tcase SSI_ECHO_SCRIPT_URI: {\n\t\t\tif (!buffer_string_is_empty(con->uri.scheme) && !buffer_string_is_empty(con->uri.authority)) {\n\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_BUF_LEN(con->uri.scheme));\n\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_STR_LEN(\"://\"));\n\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_BUF_LEN(con->uri.authority));\n\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_BUF_LEN(con->request.uri));\n\t\t\t\tif (!buffer_string_is_empty(con->uri.query)) {\n\t\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_STR_LEN(\"?\"));\n\t\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_BUF_LEN(con->uri.query));\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase SSI_ECHO_SCRIPT_URL: {\n\t\t\tchunkqueue_append_mem(con->write_queue, CONST_BUF_LEN(con->request.uri));\n\t\t\tif (!buffer_string_is_empty(con->uri.query)) {\n\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_STR_LEN(\"?\"));\n\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_BUF_LEN(con->uri.query));\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tdefault: {\n\t\t\tdata_string *ds;\n\t\t\t/* check if it is a cgi-var or a ssi-var */\n\n\t\t\tif (NULL != (ds = (data_string *)array_get_element_klen(p->ssi_cgi_env, var_val, strlen(var_val))) ||\n\t\t\t    NULL != (ds = (data_string *)array_get_element_klen(p->ssi_vars, var_val, strlen(var_val)))) {\n\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_BUF_LEN(ds->value));\n\t\t\t} else {\n\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_STR_LEN(\"(none)\"));\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\t\t}\n\t\tbreak;\n\t}\n\tcase SSI_INCLUDE:\n\tcase SSI_FLASTMOD:\n\tcase SSI_FSIZE: {\n\t\tconst char * file_path = NULL, *virt_path = NULL;\n\t\tstruct stat stb;\n\t\tchar *sl;\n\n\t\tfor (i = 2; i < n; i += 2) {\n\t\t\tif (0 == strcmp(l[i], \"file\")) {\n\t\t\t\tfile_path = l[i+1];\n\t\t\t} else if (0 == strcmp(l[i], \"virtual\")) {\n\t\t\t\tvirt_path = l[i+1];\n\t\t\t} else {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sss\",\n\t\t\t\t\t\t\"ssi: unknown attribute for \",\n\t\t\t\t\t\tl[1], l[i]);\n\t\t\t}\n\t\t}\n\n\t\tif (!file_path && !virt_path) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sss\",\n\t\t\t\t\t\"ssi: \",\n\t\t\t\t\tl[1], \"file or virtual are missing\");\n\t\t\tbreak;\n\t\t}\n\n\t\tif (file_path && virt_path) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sss\",\n\t\t\t\t\t\"ssi: \",\n\t\t\t\t\tl[1], \"only one of file and virtual is allowed here\");\n\t\t\tbreak;\n\t\t}\n\n\n\t\tif (p->if_is_false) break;\n\n\t\tif (file_path) {\n\t\t\t/* current doc-root */\n\t\t\tif (NULL == (sl = strrchr(con->physical.path->ptr, '/'))) {\n\t\t\t\tbuffer_copy_string_len(p->stat_fn, CONST_STR_LEN(\"/\"));\n\t\t\t} else {\n\t\t\t\tbuffer_copy_string_len(p->stat_fn, con->physical.path->ptr, sl - con->physical.path->ptr + 1);\n\t\t\t}\n\n\t\t\tbuffer_copy_string(srv->tmp_buf, file_path);\n\t\t\tbuffer_urldecode_path(srv->tmp_buf);\n\t\t\tif (!buffer_is_valid_UTF8(srv->tmp_buf)) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\t\t\"SSI invalid UTF-8 after url-decode:\", srv->tmp_buf);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbuffer_path_simplify(srv->tmp_buf, srv->tmp_buf);\n\t\t\tbuffer_append_string_buffer(p->stat_fn, srv->tmp_buf);\n\t\t} else {\n\t\t\t/* virtual */\n\t\t\tsize_t remain;\n\n\t\t\tif (virt_path[0] == '/') {\n\t\t\t\tbuffer_copy_string(srv->tmp_buf, virt_path);\n\t\t\t} else {\n\t\t\t\t/* there is always a / */\n\t\t\t\tsl = strrchr(con->uri.path->ptr, '/');\n\n\t\t\t\tbuffer_copy_string_len(srv->tmp_buf, con->uri.path->ptr, sl - con->uri.path->ptr + 1);\n\t\t\t\tbuffer_append_string(srv->tmp_buf, virt_path);\n\t\t\t}\n\n\t\t\tbuffer_urldecode_path(srv->tmp_buf);\n\t\t\tif (!buffer_is_valid_UTF8(srv->tmp_buf)) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\t\t\"SSI invalid UTF-8 after url-decode:\", srv->tmp_buf);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbuffer_path_simplify(srv->tmp_buf, srv->tmp_buf);\n\n\t\t\t/* we have an uri */\n\n\t\t\t/* Destination physical path (similar to code in mod_webdav.c)\n\t\t\t * src con->physical.path might have been remapped with mod_alias, mod_userdir.\n\t\t\t *   (but neither modifies con->physical.rel_path)\n\t\t\t * Find matching prefix to support relative paths to current physical path.\n\t\t\t * Aliasing of paths underneath current con->physical.basedir might not work.\n\t\t\t * Likewise, mod_rewrite URL rewriting might thwart this comparison.\n\t\t\t * Use mod_redirect instead of mod_alias to remap paths *under* this basedir.\n\t\t\t * Use mod_redirect instead of mod_rewrite on *any* parts of path to basedir.\n\t\t\t * (Related, use mod_auth to protect this basedir, but avoid attempting to\n\t\t\t *  use mod_auth on paths underneath this basedir, as target path is not\n\t\t\t *  validated with mod_auth)\n\t\t\t */\n\n\t\t\t/* find matching URI prefix\n\t\t\t * check if remaining con->physical.rel_path matches suffix\n\t\t\t *   of con->physical.basedir so that we can use it to\n\t\t\t *   remap Destination physical path */\n\t\t\t{\n\t\t\t\tconst char *sep, *sep2;\n\t\t\t\tsep = con->uri.path->ptr;\n\t\t\t\tsep2 = srv->tmp_buf->ptr;\n\t\t\t\tfor (i = 0; sep[i] && sep[i] == sep2[i]; ++i) ;\n\t\t\t\twhile (i != 0 && sep[--i] != '/') ; /* find matching directory path */\n\t\t\t}\n\t\t\tif (con->conf.force_lowercase_filenames) {\n\t\t\t\tbuffer_to_lower(srv->tmp_buf);\n\t\t\t}\n\t\t\tremain = buffer_string_length(con->uri.path) - i;\n\t\t\tif (!con->conf.force_lowercase_filenames\n\t\t\t    ? buffer_is_equal_right_len(con->physical.path, con->physical.rel_path, remain)\n\t\t\t    :(buffer_string_length(con->physical.path) >= remain\n\t\t\t      && 0 == strncasecmp(con->physical.path->ptr+buffer_string_length(con->physical.path)-remain, con->physical.rel_path->ptr+i, remain))) {\n\t\t\t\tbuffer_copy_string_len(p->stat_fn, con->physical.path->ptr, buffer_string_length(con->physical.path)-remain);\n\t\t\t\tbuffer_append_string_len(p->stat_fn, srv->tmp_buf->ptr+i, buffer_string_length(srv->tmp_buf)-i);\n\t\t\t} else {\n\t\t\t\t/* unable to perform physical path remap here;\n\t\t\t\t * assume doc_root/rel_path and no remapping */\n\t\t\t\tbuffer_copy_buffer(p->stat_fn, con->physical.doc_root);\n\t\t\t\tbuffer_append_string_buffer(p->stat_fn, srv->tmp_buf);\n\t\t\t}\n\t\t}\n\n\t\tif (!con->conf.follow_symlink\n\t\t    && 0 != stat_cache_path_contains_symlink(srv, p->stat_fn)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tint fd = stat_cache_open_rdonly_fstat(p->stat_fn, &stb, con->conf.follow_symlink);\n\t\tif (fd > 0) {\n\t\t\ttime_t t = stb.st_mtime;\n\n\t\t\tswitch (ssicmd) {\n\t\t\tcase SSI_FSIZE:\n\t\t\t\tb = srv->tmp_buf;\n\t\t\t\tif (p->sizefmt) {\n\t\t\t\t\tint j = 0;\n\t\t\t\t\tconst char *abr[] = { \" B\", \" kB\", \" MB\", \" GB\", \" TB\", NULL };\n\n\t\t\t\t\toff_t s = stb.st_size;\n\n\t\t\t\t\tfor (j = 0; s > 1024 && abr[j+1]; s /= 1024, j++);\n\n\t\t\t\t\tbuffer_copy_int(b, s);\n\t\t\t\t\tbuffer_append_string(b, abr[j]);\n\t\t\t\t} else {\n\t\t\t\t\tbuffer_copy_int(b, stb.st_size);\n\t\t\t\t}\n\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_BUF_LEN(b));\n\t\t\t\tbreak;\n\t\t\tcase SSI_FLASTMOD:\n\t\t\t\tif (0 == strftime(buf, sizeof(buf), p->timefmt->ptr, localtime(&t))) {\n\t\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_STR_LEN(\"(none)\"));\n\t\t\t\t} else {\n\t\t\t\t\tchunkqueue_append_mem(con->write_queue, buf, strlen(buf));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase SSI_INCLUDE:\n\t\t\t\t/* Keep the newest mtime of included files */\n\t\t\t\tif (stb.st_mtime > include_file_last_mtime)\n\t\t\t\t\tinclude_file_last_mtime = stb.st_mtime;\n\n\t\t\t\tif (file_path || 0 == p->conf.ssi_recursion_max) {\n\t\t\t\t\t/* don't process if #include file=\"...\" is used */\n\t\t\t\t\tchunkqueue_append_file_fd(con->write_queue, p->stat_fn, fd, 0, stb.st_size);\n\t\t\t\t\tfd = -1;\n\t\t\t\t} else {\n\t\t\t\t\tbuffer *upsave, *ppsave, *prpsave;\n\n\t\t\t\t\t/* only allow predefined recursion depth */\n\t\t\t\t\tif (p->ssi_recursion_depth >= p->conf.ssi_recursion_max) {\n\t\t\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_STR_LEN(\"(error: include directives recurse deeper than pre-defined ssi.recursion-max)\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* prevents simple infinite loop */\n\t\t\t\t\tif (buffer_is_equal(con->physical.path, p->stat_fn)) {\n\t\t\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_STR_LEN(\"(error: include directives create an infinite loop)\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* save and restore con->physical.path, con->physical.rel_path, and con->uri.path around include\n\t\t\t\t\t *\n\t\t\t\t\t * srv->tmp_buf contains url-decoded, path-simplified, and lowercased (if con->conf.force_lowercase) uri path of target.\n\t\t\t\t\t * con->uri.path and con->physical.rel_path are set to the same since we only operate on filenames here,\n\t\t\t\t\t * not full re-run of all modules for subrequest */\n\t\t\t\t\tupsave = con->uri.path;\n\t\t\t\t\tppsave = con->physical.path;\n\t\t\t\t\tprpsave = con->physical.rel_path;\n\n\t\t\t\t\tcon->physical.path = p->stat_fn;\n\t\t\t\t\tp->stat_fn = buffer_init();\n\n\t\t\t\t\tcon->uri.path = con->physical.rel_path = buffer_init_buffer(srv->tmp_buf);\n\n\t\t\t\t\tclose(fd);\n\t\t\t\t\tfd = -1;\n\n\t\t\t\t\t/*(ignore return value; muddle along as best we can if error occurs)*/\n\t\t\t\t\t++p->ssi_recursion_depth;\n\t\t\t\t\tmod_ssi_process_file(srv, con, p, &stb);\n\t\t\t\t\t--p->ssi_recursion_depth;\n\n\t\t\t\t\tbuffer_free(con->uri.path);\n\t\t\t\t\tcon->uri.path = upsave;\n\t\t\t\t\tcon->physical.rel_path = prpsave;\n\n\t\t\t\t\tbuffer_free(p->stat_fn);\n\t\t\t\t\tp->stat_fn = con->physical.path;\n\t\t\t\t\tcon->physical.path = ppsave;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (fd > 0) close(fd);\n\t\t} else {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sbs\",\n\t\t\t\t\t\"ssi: stating failed \",\n\t\t\t\t\tp->stat_fn, strerror(errno));\n\t\t}\n\t\tbreak;\n\t}\n\tcase SSI_SET: {\n\t\tconst char *key = NULL, *val = NULL;\n\t\tfor (i = 2; i < n; i += 2) {\n\t\t\tif (0 == strcmp(l[i], \"var\")) {\n\t\t\t\tkey = l[i+1];\n\t\t\t} else if (0 == strcmp(l[i], \"value\")) {\n\t\t\t\tval = l[i+1];\n\t\t\t} else {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sss\",\n\t\t\t\t\t\t\"ssi: unknown attribute for \",\n\t\t\t\t\t\tl[1], l[i]);\n\t\t\t}\n\t\t}\n\n\t\tif (p->if_is_false) break;\n\n\t\tif (key && val) {\n\t\t\tarray_insert_key_value(p->ssi_vars, key, strlen(key), val, strlen(val));\n\t\t} else if (key || val) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sSSss\",\n\t\t\t\t\t\"ssi: var and value have to be set in <!--#set\", l[1], \"=\", l[2], \"-->\");\n\t\t} else {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"ssi: var and value have to be set in <!--#set var=... value=... -->\");\n\t\t}\n\t\tbreak;\n\t}\n\tcase SSI_CONFIG:\n\t\tif (p->if_is_false) break;\n\n\t\tfor (i = 2; i < n; i += 2) {\n\t\t\tif (0 == strcmp(l[i], \"timefmt\")) {\n\t\t\t\tbuffer_copy_string(p->timefmt, l[i+1]);\n\t\t\t} else if (0 == strcmp(l[i], \"sizefmt\")) {\n\t\t\t\tif (0 == strcmp(l[i+1], \"abbrev\")) {\n\t\t\t\t\tp->sizefmt = 1;\n\t\t\t\t} else if (0 == strcmp(l[i+1], \"bytes\")) {\n\t\t\t\t\tp->sizefmt = 0;\n\t\t\t\t} else {\n\t\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sssss\",\n\t\t\t\t\t\t\t\"ssi: unknown value for attribute '\",\n\t\t\t\t\t\t\tl[i],\n\t\t\t\t\t\t\t\"' for \",\n\t\t\t\t\t\t\tl[1], l[i+1]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sss\",\n\t\t\t\t\t\t\"ssi: unknown attribute for \",\n\t\t\t\t\t\tl[1], l[i]);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase SSI_PRINTENV:\n\t\tif (p->if_is_false) break;\n\n\t\tb = srv->tmp_buf;\n\t\tbuffer_clear(b);\n\t\tfor (i = 0; i < p->ssi_vars->used; i++) {\n\t\t\tdata_string *ds = (data_string *)p->ssi_vars->data[p->ssi_vars->sorted[i]];\n\n\t\t\tbuffer_append_string_buffer(b, ds->key);\n\t\t\tbuffer_append_string_len(b, CONST_STR_LEN(\"=\"));\n\t\t\tbuffer_append_string_encoded(b, CONST_BUF_LEN(ds->value), ENCODING_MINIMAL_XML);\n\t\t\tbuffer_append_string_len(b, CONST_STR_LEN(\"\\n\"));\n\t\t}\n\t\tfor (i = 0; i < p->ssi_cgi_env->used; i++) {\n\t\t\tdata_string *ds = (data_string *)p->ssi_cgi_env->data[p->ssi_cgi_env->sorted[i]];\n\n\t\t\tbuffer_append_string_buffer(b, ds->key);\n\t\t\tbuffer_append_string_len(b, CONST_STR_LEN(\"=\"));\n\t\t\tbuffer_append_string_encoded(b, CONST_BUF_LEN(ds->value), ENCODING_MINIMAL_XML);\n\t\t\tbuffer_append_string_len(b, CONST_STR_LEN(\"\\n\"));\n\t\t}\n\t\tchunkqueue_append_mem(con->write_queue, CONST_BUF_LEN(b));\n\t\tbreak;\n\tcase SSI_EXEC: {\n\t\tconst char *cmd = NULL;\n\t\tpid_t pid;\n\t\tchunk *c;\n\t\tchar *args[4];\n\n\t\tif (!p->conf.ssi_exec) { /* <!--#exec ... --> disabled by config */\n\t\t\tbreak;\n\t\t}\n\n\t\tfor (i = 2; i < n; i += 2) {\n\t\t\tif (0 == strcmp(l[i], \"cmd\")) {\n\t\t\t\tcmd = l[i+1];\n\t\t\t} else {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sss\",\n\t\t\t\t\t\t\"ssi: unknown attribute for \",\n\t\t\t\t\t\tl[1], l[i]);\n\t\t\t}\n\t\t}\n\n\t\tif (p->if_is_false) break;\n\n\t\t/*\n\t\t * as exec is assumed evil it is implemented synchronously\n\t\t */\n\n\t\tif (!cmd) break;\n\n\t\t/* send cmd output to a temporary file */\n\t\tif (0 != chunkqueue_append_mem_to_tempfile(srv, con->write_queue, \"\", 0)) break;\n\t\tc = con->write_queue->last;\n\n\t\t*(const char **)&args[0] = \"/bin/sh\";\n\t\t*(const char **)&args[1] = \"-c\";\n\t\t*(const char **)&args[2] = cmd;\n\t\targs[3] = NULL;\n\n\t\t/*(expects STDIN_FILENO open to /dev/null)*/\n\t\tpid = fdevent_fork_execve(args[0], args, NULL, -1, c->file.fd, -1, -1);\n\t\tif (-1 == pid) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sss\", \"spawning exec failed:\", strerror(errno), cmd);\n\t\t} else {\n\t\t\tstruct stat stb;\n\t\t\tint status;\n\n\t\t\t/* wait for the client to end */\n\t\t\t/* NOTE: synchronous; blocks entire lighttpd server */\n\n\t\t\t/*\n\t\t\t * OpenBSD and Solaris send a EINTR on SIGCHILD even if we ignore it\n\t\t\t */\n\t\t\twhile (-1 == waitpid(pid, &status, 0)) {\n\t\t\t\tif (errno != EINTR) {\n\t\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\", \"waitpid failed:\", strerror(errno));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!WIFEXITED(status)) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\", \"process exited abnormally:\", cmd);\n\t\t\t}\n\t\t\tif (0 == fstat(c->file.fd, &stb)) {\n\t\t\t\tc->file.length = stb.st_size;\n\t\t\t}\n\t\t}\n\n\t\tbreak;\n\t}\n\tcase SSI_IF: {\n\t\tconst char *expr = NULL;\n\n\t\tfor (i = 2; i < n; i += 2) {\n\t\t\tif (0 == strcmp(l[i], \"expr\")) {\n\t\t\t\texpr = l[i+1];\n\t\t\t} else {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sss\",\n\t\t\t\t\t\t\"ssi: unknown attribute for \",\n\t\t\t\t\t\tl[1], l[i]);\n\t\t\t}\n\t\t}\n\n\t\tif (!expr) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sss\",\n\t\t\t\t\t\"ssi: \",\n\t\t\t\t\tl[1], \"expr missing\");\n\t\t\tbreak;\n\t\t}\n\n\t\tif ((!p->if_is_false) &&\n\t\t    ((p->if_is_false_level == 0) ||\n\t\t     (p->if_level < p->if_is_false_level))) {\n\t\t\tswitch (ssi_eval_expr(srv, con, p, expr)) {\n\t\t\tcase -1:\n\t\t\tcase 0:\n\t\t\t\tp->if_is_false = 1;\n\t\t\t\tp->if_is_false_level = p->if_level;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tp->if_is_false = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tp->if_level++;\n\n\t\tbreak;\n\t}\n\tcase SSI_ELSE:\n\t\tp->if_level--;\n\n\t\tif (p->if_is_false) {\n\t\t\tif ((p->if_level == p->if_is_false_level) &&\n\t\t\t    (p->if_is_false_endif == 0)) {\n\t\t\t\tp->if_is_false = 0;\n\t\t\t}\n\t\t} else {\n\t\t\tp->if_is_false = 1;\n\n\t\t\tp->if_is_false_level = p->if_level;\n\t\t}\n\t\tp->if_level++;\n\n\t\tbreak;\n\tcase SSI_ELIF: {\n\t\tconst char *expr = NULL;\n\t\tfor (i = 2; i < n; i += 2) {\n\t\t\tif (0 == strcmp(l[i], \"expr\")) {\n\t\t\t\texpr = l[i+1];\n\t\t\t} else {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sss\",\n\t\t\t\t\t\t\"ssi: unknown attribute for \",\n\t\t\t\t\t\tl[1], l[i]);\n\t\t\t}\n\t\t}\n\n\t\tif (!expr) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sss\",\n\t\t\t\t\t\"ssi: \",\n\t\t\t\t\tl[1], \"expr missing\");\n\t\t\tbreak;\n\t\t}\n\n\t\tp->if_level--;\n\n\t\tif (p->if_level == p->if_is_false_level) {\n\t\t\tif ((p->if_is_false) &&\n\t\t\t    (p->if_is_false_endif == 0)) {\n\t\t\t\tswitch (ssi_eval_expr(srv, con, p, expr)) {\n\t\t\t\tcase -1:\n\t\t\t\tcase 0:\n\t\t\t\t\tp->if_is_false = 1;\n\t\t\t\t\tp->if_is_false_level = p->if_level;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tp->if_is_false = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tp->if_is_false = 1;\n\t\t\t\tp->if_is_false_level = p->if_level;\n\t\t\t\tp->if_is_false_endif = 1;\n\t\t\t}\n\t\t}\n\n\t\tp->if_level++;\n\n\t\tbreak;\n\t}\n\tcase SSI_ENDIF:\n\t\tp->if_level--;\n\n\t\tif (p->if_level == p->if_is_false_level) {\n\t\t\tp->if_is_false = 0;\n\t\t\tp->if_is_false_endif = 0;\n\t\t}\n\n\t\tbreak;\n\tcase SSI_COMMENT:\n\t\tbreak;\n\tdefault:\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\",\n\t\t\t\t\"ssi: unknown ssi-command:\",\n\t\t\t\tl[1]);\n\t\tbreak;\n\t}\n\n\treturn 0;\n\n}\n\nstatic int mod_ssi_parse_ssi_stmt_value(const char * const s, const int len) {\n\tint n;\n\tconst int c = (s[0] == '\"' ? '\"' : s[0] == '\\'' ? '\\'' : 0);\n\tif (0 != c) {\n\t\tfor (n = 1; n < len; ++n) {\n\t\t\tif (s[n] == c) return n+1;\n\t\t\tif (s[n] == '\\\\') {\n\t\t\t\tif (n+1 == len) return 0; /* invalid */\n\t\t\t\t++n;\n\t\t\t}\n\t\t}\n\t\treturn 0; /* invalid */\n\t} else {\n\t\tfor (n = 0; n < len; ++n) {\n\t\t\tif (isspace(s[n])) return n;\n\t\t\tif (s[n] == '\\\\') {\n\t\t\t\tif (n+1 == len) return 0; /* invalid */\n\t\t\t\t++n;\n\t\t\t}\n\t\t}\n\t\treturn n;\n\t}\n}\n\nstatic int mod_ssi_parse_ssi_stmt_offlen(int o[10], const char * const s, const int len) {\n\n\t/**\n\t * <!--#element attribute=value attribute=value ... -->\n\t */\n\n\t/* s must begin \"<!--#\" and must end with \"-->\" */\n\tint n = 5;\n\to[0] = n;\n\tfor (; light_isalpha(s[n]); ++n) ; /*(n = 5 to begin after \"<!--#\")*/\n\to[1] = n - o[0];\n\tif (0 == o[1]) return -1; /* empty token */\n\n\tif (n+3 == len) return 2; /* token only; no params */\n\tif (!isspace(s[n])) return -1;\n\tdo { ++n; } while (isspace(s[n])); /* string ends \"-->\", so n < len */\n\tif (n+3 == len) return 2; /* token only; no params */\n\n\to[2] = n;\n\tfor (; light_isalpha(s[n]); ++n) ;\n\to[3] = n - o[2];\n\tif (0 == o[3] || s[n++] != '=') return -1;\n\n\to[4] = n;\n\to[5] = mod_ssi_parse_ssi_stmt_value(s+n, len-n-3);\n\tif (0 == o[5]) return -1; /* empty or invalid token */\n\tn += o[5];\n\n\tif (n+3 == len) return 6; /* token and one param */\n\tif (!isspace(s[n])) return -1;\n\tdo { ++n; } while (isspace(s[n])); /* string ends \"-->\", so n < len */\n\tif (n+3 == len) return 6; /* token and one param */\n\n\to[6] = n;\n\tfor (; light_isalpha(s[n]); ++n) ;\n\to[7] = n - o[6];\n\tif (0 == o[7] || s[n++] != '=') return -1;\n\n\to[8] = n;\n\to[9] = mod_ssi_parse_ssi_stmt_value(s+n, len-n-3);\n\tif (0 == o[9]) return -1; /* empty or invalid token */\n\tn += o[9];\n\n\tif (n+3 == len) return 10; /* token and two params */\n\tif (!isspace(s[n])) return -1;\n\tdo { ++n; } while (isspace(s[n])); /* string ends \"-->\", so n < len */\n\tif (n+3 == len) return 10; /* token and two params */\n\treturn -1;\n}\n\nstatic void mod_ssi_parse_ssi_stmt(server *srv, connection *con, handler_ctx *p, char *s, int len, struct stat *st) {\n\n\t/**\n\t * <!--#element attribute=value attribute=value ... -->\n\t */\n\n\tint o[10];\n\tint m;\n\tconst int n = mod_ssi_parse_ssi_stmt_offlen(o, s, len);\n\tchar *l[6] = { s, NULL, NULL, NULL, NULL, NULL };\n\tif (-1 == n) {\n\t\t/* ignore <!--#comment ... --> */\n\t\tif (len >= 16\n\t\t    && 0 == memcmp(s+5, \"comment\", sizeof(\"comment\")-1)\n\t\t    && (s[12] == ' ' || s[12] == '\\t'))\n\t\t\treturn;\n\t\t/* XXX: perhaps emit error comment instead of invalid <!--#...--> code to client */\n\t\tchunkqueue_append_mem(con->write_queue, s, len); /* append stmt as-is */\n\t\treturn;\n\t}\n\n      #if 0\n\t/* dup s and then modify s */\n\t/*(l[0] is no longer used; was previously used in only one place for error reporting)*/\n\tl[0] = malloc((size_t)(len+1));\n\tmemcpy(l[0], s, (size_t)len);\n\t(l[0])[len] = '\\0';\n      #endif\n\n\t/* modify s in-place to split string into arg tokens */\n\tfor (m = 0; m < n; m += 2) {\n\t\tchar *ptr = s+o[m];\n\t\tswitch (*ptr) {\n\t\tcase '\"':\n\t\tcase '\\'': (++ptr)[o[m+1]-2] = '\\0'; break;\n\t\tdefault:       ptr[o[m+1]] = '\\0';   break;\n\t\t}\n\t\tl[1+(m>>1)] = ptr;\n\t\tif (m == 4 || m == 8) {\n\t\t\t/* XXX: removing '\\\\' escapes from param value would be\n\t\t\t * the right thing to do, but would potentially change\n\t\t\t * current behavior, e.g. <!--#exec cmd=... --> */\n\t\t}\n\t}\n\n\tprocess_ssi_stmt(srv, con, p, (const char **)l, 1+(n>>1), st);\n\n      #if 0\n\tfree(l[0]);\n      #endif\n}\n\nstatic int mod_ssi_stmt_len(const char *s, const int len) {\n\t/* s must begin \"<!--#\" */\n\tint n, sq = 0, dq = 0, bs = 0;\n\tfor (n = 5; n < len; ++n) { /*(n = 5 to begin after \"<!--#\")*/\n\t\tswitch (s[n]) {\n\t\tdefault:\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tif (!sq && !dq && n+2 < len && s[n+1] == '-' && s[n+2] == '>') return n+3; /* found end of stmt */\n\t\t\tbreak;\n\t\tcase '\"':\n\t\t\tif (!sq && (!dq || !bs)) dq = !dq;\n\t\t\tbreak;\n\t\tcase '\\'':\n\t\t\tif (!dq && (!sq || !bs)) sq = !sq;\n\t\t\tbreak;\n\t\tcase '\\\\':\n\t\t\tif (sq || dq) bs = !bs;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0; /* incomplete directive \"<!--#...-->\" */\n}\n\nstatic void mod_ssi_read_fd(server *srv, connection *con, handler_ctx *p, struct stat *st, int fd) {\n\tssize_t rd;\n\tsize_t offset, pretag;\n\tsize_t bufsz = 8192;\n\tchar *buf = malloc(bufsz); /* allocate to reduce chance of stack exhaustion upon deep recursion */\n\tforce_assert(buf);\n\n\toffset = 0;\n\tpretag = 0;\n\twhile (0 < (rd = read(fd, buf+offset, bufsz-offset))) {\n\t\tchar *s;\n\t\tsize_t prelen = 0, len;\n\t\toffset += (size_t)rd;\n\t\tfor (; (s = memchr(buf+prelen, '<', offset-prelen)); ++prelen) {\n\t\t\tprelen = s - buf;\n\t\t\tif (prelen + 5 <= offset) { /*(\"<!--#\" is 5 chars)*/\n\t\t\t\tif (0 != memcmp(s+1, CONST_STR_LEN(\"!--#\"))) continue; /* loop to loop for next '<' */\n\n\t\t\t\tif (prelen - pretag && !p->if_is_false) {\n\t\t\t\t\tchunkqueue_append_mem(con->write_queue, buf+pretag, prelen-pretag);\n\t\t\t\t}\n\n\t\t\t\tlen = mod_ssi_stmt_len(buf+prelen, offset-prelen);\n\t\t\t\tif (len) { /* num of chars to be consumed */\n\t\t\t\t\tmod_ssi_parse_ssi_stmt(srv, con, p, buf+prelen, len, st);\n\t\t\t\t\tprelen += (len - 1); /* offset to '>' at end of SSI directive; incremented at top of loop */\n\t\t\t\t\tpretag = prelen + 1;\n\t\t\t\t\tif (pretag == offset) {\n\t\t\t\t\t\toffset = pretag = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (0 == prelen && offset == bufsz) { /*(full buf)*/\n\t\t\t\t\t/* SSI statement is way too long\n\t\t\t\t\t * NOTE: skipping this buf will expose *the rest* of this SSI statement */\n\t\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_STR_LEN(\"<!-- [an error occurred: directive too long] \"));\n\t\t\t\t\t/* check if buf ends with \"-\" or \"--\" which might be part of \"-->\"\n\t\t\t\t\t * (buf contains at least 5 chars for \"<!--#\") */\n\t\t\t\t\tif (buf[offset-2] == '-' && buf[offset-1] == '-') {\n\t\t\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_STR_LEN(\"--\"));\n\t\t\t\t\t} else if (buf[offset-1] == '-') {\n\t\t\t\t\t\tchunkqueue_append_mem(con->write_queue, CONST_STR_LEN(\"-\"));\n\t\t\t\t\t}\n\t\t\t\t\toffset = pretag = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t} else { /* incomplete directive \"<!--#...-->\" */\n\t\t\t\t\tmemmove(buf, buf+prelen, (offset -= prelen));\n\t\t\t\t\tpretag = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (prelen + 1 == offset || 0 == memcmp(s+1, \"!--\", offset - prelen - 1)) {\n\t\t\t\tif (prelen - pretag && !p->if_is_false) {\n\t\t\t\t\tchunkqueue_append_mem(con->write_queue, buf+pretag, prelen-pretag);\n\t\t\t\t}\n\t\t\t\tmemcpy(buf, buf+prelen, (offset -= prelen));\n\t\t\t\tpretag = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/* loop to look for next '<' */\n\t\t}\n\t\tif (offset == bufsz) {\n\t\t\tif (!p->if_is_false) {\n\t\t\t\tchunkqueue_append_mem(con->write_queue, buf+pretag, offset-pretag);\n\t\t\t}\n\t\t\toffset = pretag = 0;\n\t\t}\n\t}\n\n\tif (0 != rd) {\n\t\tlog_error_write(srv, __FILE__, __LINE__,  \"SsB\", \"read(): \", strerror(errno), con->physical.path);\n\t}\n\n\tif (offset - pretag) {\n\t\t/* copy remaining data in buf */\n\t\tif (!p->if_is_false) {\n\t\t\tchunkqueue_append_mem(con->write_queue, buf+pretag, offset-pretag);\n\t\t}\n\t}\n\n\tfree(buf);\n}\n\n\nstatic int mod_ssi_process_file(server *srv, connection *con, handler_ctx *p, struct stat *st) {\n\tint fd = fdevent_open_cloexec(con->physical.path->ptr, con->conf.follow_symlink, O_RDONLY, 0);\n\tif (-1 == fd) {\n\t\tlog_error_write(srv, __FILE__, __LINE__,  \"SsB\", \"open(): \",\n\t\t\t\tstrerror(errno), con->physical.path);\n\t\treturn -1;\n\t}\n\n\tif (0 != fstat(fd, st)) {\n\t\tlog_error_write(srv, __FILE__, __LINE__,  \"SsB\", \"fstat(): \",\n\t\t\t\tstrerror(errno), con->physical.path);\n\t\tclose(fd);\n\t\treturn -1;\n\t}\n\n\tmod_ssi_read_fd(srv, con, p, st, fd);\n\n\tclose(fd);\n\treturn 0;\n}\n\n\nstatic int mod_ssi_handle_request(server *srv, connection *con, handler_ctx *p) {\n\tstruct stat st;\n\n\t/* get a stream to the file */\n\n\tarray_reset_data_strings(p->ssi_vars);\n\tarray_reset_data_strings(p->ssi_cgi_env);\n\tbuffer_copy_string_len(p->timefmt, CONST_STR_LEN(\"%a, %d %b %Y %H:%M:%S %Z\"));\n\tbuild_ssi_cgi_vars(srv, con, p);\n\n\t/* Reset the modified time of included files */\n\tinclude_file_last_mtime = 0;\n\n\tif (mod_ssi_process_file(srv, con, p, &st)) return -1;\n\n\tcon->file_started  = 1;\n\tcon->file_finished = 1;\n\n\tif (buffer_string_is_empty(p->conf.content_type)) {\n\t\thttp_header_response_set(con, HTTP_HEADER_CONTENT_TYPE, CONST_STR_LEN(\"Content-Type\"), CONST_STR_LEN(\"text/html\"));\n\t} else {\n\t\thttp_header_response_set(con, HTTP_HEADER_CONTENT_TYPE, CONST_STR_LEN(\"Content-Type\"), CONST_BUF_LEN(p->conf.content_type));\n\t}\n\n\tif (p->conf.conditional_requests) {\n\t\t/* Generate \"ETag\" & \"Last-Modified\" headers */\n\t\tbuffer *mtime = NULL;\n\n\t\t/* use most recently modified include file for ETag and Last-Modified */\n\t\tif (st.st_mtime < include_file_last_mtime)\n\t\t\tst.st_mtime = include_file_last_mtime;\n\n\t\tetag_create(con->physical.etag, &st, con->etag_flags);\n\t\tetag_mutate(con->physical.etag, con->physical.etag);\n\t\thttp_header_response_set(con, HTTP_HEADER_ETAG, CONST_STR_LEN(\"ETag\"), CONST_BUF_LEN(con->physical.etag));\n\n\t\tmtime = strftime_cache_get(srv, st.st_mtime);\n\t\thttp_header_response_set(con, HTTP_HEADER_LAST_MODIFIED, CONST_STR_LEN(\"Last-Modified\"), CONST_BUF_LEN(mtime));\n\n\t\tif (HANDLER_FINISHED == http_response_handle_cachable(srv, con, mtime)) {\n\t\t\t/* ok, the client already has our content,\n\t\t\t * no need to send it again */\n\n\t\t\tchunkqueue_reset(con->write_queue);\n\t\t}\n\t}\n\n\t/* Reset the modified time of included files */\n\tinclude_file_last_mtime = 0;\n\n\t/* reset physical.path */\n\tbuffer_reset(con->physical.path);\n\n\treturn 0;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_ssi_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(ssi_extension);\n\tPATCH(content_type);\n\tPATCH(conditional_requests);\n\tPATCH(ssi_exec);\n\tPATCH(ssi_recursion_max);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"ssi.extension\"))) {\n\t\t\t\tPATCH(ssi_extension);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"ssi.content-type\"))) {\n\t\t\t\tPATCH(content_type);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"ssi.conditional-requests\"))) {\n\t\t\t\tPATCH(conditional_requests);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"ssi.exec\"))) {\n\t\t\t\tPATCH(ssi_exec);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"ssi.recursion-max\"))) {\n\t\t\t\tPATCH(ssi_recursion_max);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\nURIHANDLER_FUNC(mod_ssi_physical_path) {\n\tplugin_data *p = p_d;\n\n\tif (con->mode != DIRECT) return HANDLER_GO_ON;\n\tif (buffer_is_empty(con->physical.path)) return HANDLER_GO_ON;\n\n\tmod_ssi_patch_connection(srv, con, p);\n\n\tif (array_match_value_suffix(p->conf.ssi_extension, con->physical.path)) {\n\t\t\tcon->plugin_ctx[p->id] = handler_ctx_init(p);\n\t\t\tcon->mode = p->id;\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\nSUBREQUEST_FUNC(mod_ssi_handle_subrequest) {\n\tplugin_data *p = p_d;\n\thandler_ctx *hctx = con->plugin_ctx[p->id];\n\tif (NULL == hctx) return HANDLER_GO_ON;\n\tif (con->mode != p->id) return HANDLER_GO_ON; /* not my job */\n\t/*\n\t * NOTE: if mod_ssi modified to use fdevents, HANDLER_WAIT_FOR_EVENT,\n\t * instead of blocking to completion, then hctx->timefmt, hctx->ssi_vars,\n\t * and hctx->ssi_cgi_env should be allocated and cleaned up per request.\n\t */\n\n\t\t\t/* handle ssi-request */\n\n\t\t\tif (mod_ssi_handle_request(srv, con, hctx)) {\n\t\t\t\t/* on error */\n\t\t\t\tcon->http_status = 500;\n\t\t\t\tcon->mode = DIRECT;\n\t\t\t}\n\n\t\t\treturn HANDLER_FINISHED;\n}\n\nstatic handler_t mod_ssi_connection_reset(server *srv, connection *con, void *p_d) {\n\tplugin_data *p = p_d;\n\thandler_ctx *hctx = con->plugin_ctx[p->id];\n\tif (hctx) {\n\t\thandler_ctx_free(hctx);\n\t\tcon->plugin_ctx[p->id] = NULL;\n\t}\n\n\tUNUSED(srv);\n\treturn HANDLER_GO_ON;\n}\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_ssi_plugin_init(plugin *p);\nint mod_ssi_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"ssi\");\n\n\tp->init        = mod_ssi_init;\n\tp->handle_subrequest_start = mod_ssi_physical_path;\n\tp->handle_subrequest       = mod_ssi_handle_subrequest;\n\tp->connection_reset        = mod_ssi_connection_reset;\n\tp->set_defaults  = mod_ssi_set_defaults;\n\tp->cleanup     = mod_ssi_free;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_geoip.c": "#include \"first.h\"\n\n#include <GeoIP.h>\n#include <GeoIPCity.h>\n\n#include \"base.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n#include \"http_header.h\"\n#include \"plugin.h\"\n\n#include <stdlib.h>\n#include <string.h>\n\n/**\n *\n * $mod_geoip.c (v2.0) (13.09.2006 00:29:11)\n *\n * Name:\n * \tmod_geoip.c\n *\n * Description:\n * \tGeoIP module (plugin) for lighttpd.\n *\tthe module loads a geoip database of type \"country\" or \"city\" and\n *\tsets new ENV vars based on ip record lookups.\n *\n *\tcountry db env's:\n *\t\tGEOIP_COUNTRY_CODE\n *\t\tGEOIP_COUNTRY_CODE3\n *\t\tGEOIP_COUNTRY_NAME\n *\n *\tcity db env's:\n *\t\tGEOIP_COUNTRY_CODE\n *\t\tGEOIP_COUNTRY_CODE3\n *\t\tGEOIP_COUNTRY_NAME\n *\t\tGEOIP_CITY_NAME\n *\t\tGEOIP_CITY_POSTAL_CODE\n *\t\tGEOIP_CITY_LATITUDE\n *\t\tGEOIP_CITY_LONG_LATITUDE\n *\t\tGEOIP_CITY_DMA_CODE\n *\t\tGEOIP_CITY_AREA_CODE\n *\n * Usage (configuration options):\n *\tgeoip.db-filename = <path to the geoip or geocity database>\n *\tgeoip.memory-cache = <enable|disable> : default disabled\n *\t\tif enabled, mod_geoip will load the database binary file to\n *\t\tmemory for very fast lookups. the only penalty is memory usage.\n *\n * Author:\n * \tAmi E. Bizamcher (amix)\n *\tduke.amix@gmail.com\n *\n * Note:\n * \tGeoIP Library and API must be installed!\n */\n\n\n/* plugin config for all request/connections */\n\ntypedef struct {\n\tunsigned short mem_cache;\n\tbuffer\t*db_name;\n\tGeoIP   *gi;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\n\tplugin_config **config_storage;\n\n\tplugin_config conf;\n} plugin_data;\n\n/* init the plugin data */\nINIT_FUNC(mod_geoip_init) {\n\tplugin_data *p;\n\n\tp = calloc(1, sizeof(*p));\n\n\treturn p;\n}\n\n/* destroy the plugin data */\nFREE_FUNC(mod_geoip_free) {\n\tplugin_data *p = p_d;\n\n\tUNUSED(srv);\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (!s) continue;\n\n\t\t\tbuffer_free(s->db_name);\n\n\t\t\t/* clean up */\n\t\t\tif (s->gi) GeoIP_delete(s->gi);\n\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\n\nSETDEFAULTS_FUNC(mod_geoip_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\tconfig_values_t cv[] = {\n\t\t{ \"geoip.db-filename\",\tNULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },\t/* 0 */\n\t\t{ \"geoip.memory-cache\",\tNULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION },    /* 1 */\n\t\t{ NULL,\t\t\tNULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\t\tint mode;\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\n\t\ts->db_name = buffer_init();\n\t\ts->mem_cache = 0; /* default: do not load db to cache */\n\t\ts->gi = NULL;\n\n\t\tcv[0].destination = s->db_name;\n\t\tcv[1].destination = &(s->mem_cache);\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tmode = GEOIP_STANDARD | GEOIP_CHECK_CACHE;\n\n\t\t/* country db filename is requeried! */\n\t\tif (!buffer_is_empty(s->db_name)) {\n\n\t\t\t/* let's start cooking */\n\t\t\tif (s->mem_cache != 0)\n\t\t\t\tmode = GEOIP_MEMORY_CACHE | GEOIP_CHECK_CACHE;\n\n\t\t\tif (NULL == (s->gi = GeoIP_open(s->db_name->ptr, mode))) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"failed to open GeoIP database!!!\");\n\n\t\t\t\treturn HANDLER_ERROR;\n\t\t\t}\n\n\t\t\t/* is the db supported ? */\n\t\t\tif (s->gi->databaseType != GEOIP_COUNTRY_EDITION &&\n\t\t\t\ts->gi->databaseType != GEOIP_CITY_EDITION_REV0 &&\n\t\t\t\ts->gi->databaseType != GEOIP_CITY_EDITION_REV1) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"GeoIP database is of unsupported type!!!\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_geoip_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(db_name);\n\tPATCH(mem_cache);\n\tPATCH(gi);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"geoip.db-filename\"))) {\n\t\t\t\tPATCH(db_name);\n\t\t\t}\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"geoip.memory-cache\"))) {\n\t\t\t\tPATCH(mem_cache);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\nstatic handler_t mod_geoip_query (connection *con, plugin_data *p) {\n    GeoIPRecord *gir;\n    const char *remote_ip = con->dst_addr_buf->ptr;\n\n    if (NULL != http_header_env_get(con, CONST_STR_LEN(\"GEOIP_COUNTRY_CODE\"))) {\n        return HANDLER_GO_ON;\n    }\n\n    if (p->conf.gi->databaseType == GEOIP_COUNTRY_EDITION) {\n        const char *returnedCountry;\n\n        if (NULL != (returnedCountry = GeoIP_country_code_by_addr(p->conf.gi, remote_ip))) {\n            http_header_env_set(con, CONST_STR_LEN(\"GEOIP_COUNTRY_CODE\"), returnedCountry, strlen(returnedCountry));\n        }\n\n        if (NULL != (returnedCountry = GeoIP_country_code3_by_addr(p->conf.gi, remote_ip))) {\n            http_header_env_set(con, CONST_STR_LEN(\"GEOIP_COUNTRY_CODE3\"), returnedCountry, strlen(returnedCountry));\n        }\n\n        if (NULL != (returnedCountry = GeoIP_country_name_by_addr(p->conf.gi, remote_ip))) {\n            http_header_env_set(con, CONST_STR_LEN(\"GEOIP_COUNTRY_NAME\"), returnedCountry, strlen(returnedCountry));\n        }\n\n        return HANDLER_GO_ON;\n    }\n\n    /* if we are here, geo city is in use */\n\n    if (NULL != (gir = GeoIP_record_by_addr(p->conf.gi, remote_ip))) {\n\n        http_header_env_set(con, CONST_STR_LEN(\"GEOIP_COUNTRY_CODE\"), gir->country_code, strlen(gir->country_code));\n        http_header_env_set(con, CONST_STR_LEN(\"GEOIP_COUNTRY_CODE3\"), gir->country_code3, strlen(gir->country_code3));\n        http_header_env_set(con, CONST_STR_LEN(\"GEOIP_COUNTRY_NAME\"), gir->country_name, strlen(gir->country_name));\n        http_header_env_set(con, CONST_STR_LEN(\"GEOIP_CITY_REGION\"), gir->region, strlen(gir->region));\n        http_header_env_set(con, CONST_STR_LEN(\"GEOIP_CITY_NAME\"), gir->city, strlen(gir->city));\n        http_header_env_set(con, CONST_STR_LEN(\"GEOIP_CITY_POSTAL_CODE\"), gir->postal_code, strlen(gir->postal_code));\n\n        {\n            char latitude[32];\n            snprintf(latitude, sizeof(latitude), \"%f\", gir->latitude);\n            http_header_env_set(con, CONST_STR_LEN(\"GEOIP_CITY_LATITUDE\"), latitude, strlen(latitude));\n        }\n\n        {\n            char long_latitude[32];\n            snprintf(long_latitude, sizeof(long_latitude), \"%f\", gir->longitude);\n            http_header_env_set(con, CONST_STR_LEN(\"GEOIP_CITY_LONG_LATITUDE\"), long_latitude, strlen(long_latitude));\n        }\n\n        {\n            char dc[LI_ITOSTRING_LENGTH];\n            li_utostrn(dc, sizeof(dc), gir->dma_code);\n            http_header_env_set(con, CONST_STR_LEN(\"GEOIP_CITY_DMA_CODE\"), dc, strlen(dc));\n        }\n\n        {\n            char ac[LI_ITOSTRING_LENGTH];\n            li_utostrn(ac, sizeof(ac), gir->area_code);\n            http_header_env_set(con, CONST_STR_LEN(\"GEOIP_CITY_AREA_CODE\"), ac, strlen(ac));\n        }\n\n        GeoIPRecord_delete(gir);\n    }\n\n    return HANDLER_GO_ON;\n}\n\nCONNECTION_FUNC(mod_geoip_handle_request_env) {\n\tplugin_data *p = p_d;\n\tmod_geoip_patch_connection(srv, con, p);\n\tif (buffer_is_empty(p->conf.db_name)) return HANDLER_GO_ON;\n\n\treturn mod_geoip_query(con, p);\n}\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_geoip_plugin_init(plugin *p);\nint mod_geoip_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"geoip\");\n\n\tp->init        = mod_geoip_init;\n\tp->handle_request_env = mod_geoip_handle_request_env;\n\tp->set_defaults  = mod_geoip_set_defaults;\n\tp->cleanup     = mod_geoip_free;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_alias.c": "#include \"first.h\"\n\n#include \"base.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n\n#include \"plugin.h\"\n\n#include <stdlib.h>\n#include <string.h>\n\n/* plugin config for all request/connections */\ntypedef struct {\n\tarray *alias;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\n\tplugin_config **config_storage;\n\n\tplugin_config conf;\n} plugin_data;\n\n/* init the plugin data */\nINIT_FUNC(mod_alias_init) {\n\tplugin_data *p;\n\n\tp = calloc(1, sizeof(*p));\n\n\n\n\treturn p;\n}\n\n/* detroy the plugin data */\nFREE_FUNC(mod_alias_free) {\n\tplugin_data *p = p_d;\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (NULL == s) continue;\n\n\t\t\tarray_free(s->alias);\n\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\n\nSETDEFAULTS_FUNC(mod_alias_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\tconfig_values_t cv[] = {\n\t\t{ \"alias.url\",                  NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 0 */\n\t\t{ NULL,                         NULL, T_CONFIG_UNSET,  T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->alias = array_init();\n\t\tcv[0].destination = s->alias;\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (!array_is_kvstring(s->alias)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for alias.url; expected list of \\\"urlpath\\\" => \\\"filepath\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (s->alias->used >= 2) {\n\t\t\tconst array *a = s->alias;\n\t\t\tsize_t j, k;\n\n\t\t\tfor (j = 0; j < a->used; j ++) {\n\t\t\t\tconst buffer *prefix = a->data[a->sorted[j]]->key;\n\t\t\t\tfor (k = j + 1; k < a->used; k ++) {\n\t\t\t\t\tconst buffer *key = a->data[a->sorted[k]]->key;\n\n\t\t\t\t\tif (buffer_string_length(key) < buffer_string_length(prefix)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (memcmp(key->ptr, prefix->ptr, buffer_string_length(prefix)) != 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t/* ok, they have same prefix. check position */\n\t\t\t\t\tif (a->sorted[j] < a->sorted[k]) {\n\t\t\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"SBSBS\",\n\t\t\t\t\t\t\t\"url.alias: `\", key, \"' will never match as `\", prefix, \"' matched first\");\n\t\t\t\t\t\treturn HANDLER_ERROR;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_alias_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(alias);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"alias.url\"))) {\n\t\t\t\tPATCH(alias);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\nPHYSICALPATH_FUNC(mod_alias_physical_handler) {\n\tplugin_data *p = p_d;\n\tchar *uri_ptr;\n\tsize_t uri_len = buffer_string_length(con->physical.path);\n\tsize_t basedir_len, alias_len;\n\tdata_string *ds;\n\n\tif (0 == uri_len) return HANDLER_GO_ON;\n\n\tmod_alias_patch_connection(srv, con, p);\n\n\t/* do not include trailing slash on basedir */\n\tbasedir_len = buffer_string_length(con->physical.basedir);\n\tif ('/' == con->physical.basedir->ptr[basedir_len-1]) --basedir_len;\n\turi_len -= basedir_len;\n\turi_ptr = con->physical.path->ptr + basedir_len;\n\n\tds = (!con->conf.force_lowercase_filenames)\n\t   ? (data_string *)array_match_key_prefix_klen(p->conf.alias, uri_ptr, uri_len)\n\t   : (data_string *)array_match_key_prefix_nc_klen(p->conf.alias, uri_ptr, uri_len);\n\tif (NULL == ds) { return HANDLER_GO_ON; }\n\n\t\t\t/* matched */\n\n\t\t\t/* check for path traversal in url-path following alias if key\n\t\t\t * does not end in slash, but replacement value ends in slash */\n\t\t\talias_len = buffer_string_length(ds->key);\n\t\t\tif (uri_ptr[alias_len] == '.') {\n\t\t\t\tchar *s = uri_ptr + alias_len + 1;\n\t\t\t\tif (*s == '.') ++s;\n\t\t\t\tif (*s == '/' || *s == '\\0') {\n\t\t\t\t\tsize_t vlen = buffer_string_length(ds->value);\n\t\t\t\t\tif (0 != alias_len && ds->key->ptr[alias_len-1] != '/'\n\t\t\t\t\t    && 0 != vlen && ds->value->ptr[vlen-1] == '/') {\n\t\t\t\t\t\tcon->http_status = 403;\n\t\t\t\t\t\treturn HANDLER_FINISHED;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer_copy_buffer(con->physical.basedir, ds->value);\n\t\t\tbuffer_copy_buffer(srv->tmp_buf, ds->value);\n\t\t\tbuffer_append_string(srv->tmp_buf, uri_ptr + alias_len);\n\t\t\tbuffer_copy_buffer(con->physical.path, srv->tmp_buf);\n\n\t\t\treturn HANDLER_GO_ON;\n}\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_alias_plugin_init(plugin *p);\nint mod_alias_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"alias\");\n\n\tp->init           = mod_alias_init;\n\tp->handle_physical= mod_alias_physical_handler;\n\tp->set_defaults   = mod_alias_set_defaults;\n\tp->cleanup        = mod_alias_free;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_vhostdb_ldap.c": "#include \"first.h\"\n\n#include <ldap.h>\n\n#include <errno.h>\n#include <string.h>\n#include <stdlib.h>\n\n#include \"base.h\"\n#include \"http_vhostdb.h\"\n#include \"log.h\"\n#include \"plugin.h\"\n\n/*\n * virtual host plugin using LDAP for domain to directory lookups\n */\n\ntypedef struct {\n    LDAP *ldap;\n    buffer *filter;\n    server *srv;\n\n    const char *attr;\n    const char *host;\n    const char *basedn;\n    const char *binddn;\n    const char *bindpw;\n    const char *cafile;\n    unsigned short starttls;\n} vhostdb_config;\n\ntypedef struct {\n    void *vdata;\n    array *options;\n} plugin_config;\n\ntypedef struct {\n    PLUGIN_DATA;\n    plugin_config **config_storage;\n    plugin_config conf;\n} plugin_data;\n\nstatic void mod_vhostdb_dbconf_free (void *vdata)\n{\n    vhostdb_config *dbconf = (vhostdb_config *)vdata;\n    if (!dbconf) return;\n    if (NULL != dbconf->ldap) ldap_unbind_ext_s(dbconf->ldap, NULL, NULL);\n    free(dbconf);\n}\n\n/*(copied from mod_authn_ldap.c)*/\nstatic void mod_vhostdb_dbconf_add_scheme (server *srv, buffer *host)\n{\n    if (!buffer_string_is_empty(host)) {\n        /* reformat hostname(s) as LDAP URIs (scheme://host:port) */\n        static const char *schemes[] = {\n          \"ldap://\", \"ldaps://\", \"ldapi://\", \"cldap://\"\n        };\n        char *b, *e = host->ptr;\n        buffer_clear(srv->tmp_buf);\n        while (*(b = e)) {\n            unsigned int j;\n            while (*b==' '||*b=='\\t'||*b=='\\r'||*b=='\\n'||*b==',') ++b;\n            if (*b == '\\0') break;\n            e = b;\n            while (*e!=' '&&*e!='\\t'&&*e!='\\r'&&*e!='\\n'&&*e!=','&&*e!='\\0')\n                ++e;\n            if (!buffer_string_is_empty(srv->tmp_buf))\n                buffer_append_string_len(srv->tmp_buf, CONST_STR_LEN(\",\"));\n            for (j = 0; j < sizeof(schemes)/sizeof(char *); ++j) {\n                if (0 == strncasecmp(b, schemes[j], strlen(schemes[j]))) {\n                    break;\n                }\n            }\n            if (j == sizeof(schemes)/sizeof(char *))\n                buffer_append_string_len(srv->tmp_buf,\n                                         CONST_STR_LEN(\"ldap://\"));\n            buffer_append_string_len(srv->tmp_buf, b, (size_t)(e - b));\n        }\n        buffer_copy_buffer(host, srv->tmp_buf);\n    }\n}\n\nstatic int mod_vhostdb_dbconf_setup (server *srv, array *opts, void **vdata)\n{\n    buffer *filter = NULL;\n    const char *attr = \"documentRoot\";\n    const char *basedn=NULL,*binddn=NULL,*bindpw=NULL,*host=NULL,*cafile=NULL;\n    unsigned short starttls = 0;\n\n    for (size_t i = 0; i < opts->used; ++i) {\n        const data_string *ds = (data_string *)opts->data[i];\n        if (ds->type == TYPE_STRING) {\n            if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"filter\"))) {\n                filter = ds->value;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"attr\"))) {\n                if (!buffer_string_is_empty(ds->value)) attr   = ds->value->ptr;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"host\"))) {\n                mod_vhostdb_dbconf_add_scheme(srv, ds->value);\n                host   = ds->value->ptr;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"base-dn\"))) {\n                if (!buffer_string_is_empty(ds->value)) basedn = ds->value->ptr;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"bind-dn\"))) {\n                if (!buffer_string_is_empty(ds->value)) binddn = ds->value->ptr;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"bind-pw\"))) {\n                bindpw = ds->value->ptr;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"ca-file\"))) {\n                if (!buffer_string_is_empty(ds->value)) cafile = ds->value->ptr;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"starttls\"))) {\n                starttls = !buffer_is_equal_string(ds->value, CONST_STR_LEN(\"disable\"))\n                        && !buffer_is_equal_string(ds->value, CONST_STR_LEN(\"0\"));\n            }\n        }\n    }\n\n    /* required:\n     * - host\n     * - filter (LDAP query)\n     * - base-dn\n     *\n     * optional:\n     * - attr   (LDAP attribute with docroot; default \"documentRoot\")\n     * - bind-dn\n     * - bind-pw\n     * - ca-file\n     * - starttls\n     */\n\n    if (!buffer_string_is_empty(filter) && NULL != host && NULL != basedn) {\n        vhostdb_config *dbconf;\n\n        if (NULL == strchr(filter->ptr, '?')) {\n            log_error_write(srv, __FILE__, __LINE__, \"s\",\n                            \"ldap: filter is missing a replace-operator '?'\");\n            return -1;\n        }\n\n        /* openldap sets FD_CLOEXEC on database socket descriptors\n         * (still race between creation of socket and fcntl FD_CLOEXEC)\n         * (YMMV with other LDAP client libraries) */\n\n        dbconf = (vhostdb_config *)calloc(1, sizeof(*dbconf));\n        dbconf->ldap     = NULL;\n        dbconf->filter   = filter;\n        dbconf->attr     = attr;\n        dbconf->host     = host;\n        dbconf->basedn   = basedn;\n        dbconf->binddn   = binddn;\n        dbconf->bindpw   = bindpw;\n        dbconf->cafile   = cafile;\n        dbconf->starttls = starttls;\n        *vdata = dbconf;\n    }\n    return 0;\n}\n\n/*\n * Note: a large portion of the LDAP code is copied verbatim from mod_authn_ldap\n * with only changes being use of vhostdb_config instead of plugin_config struct\n * and (const char *) strings in vhostdb_config instead of (buffer *).\n */\n\nstatic void mod_authn_ldap_err(server *srv, const char *file, unsigned long line, const char *fn, int err)\n{\n    log_error_write(srv,file,line,\"sSss\",\"ldap:\",fn,\":\",ldap_err2string(err));\n}\n\nstatic void mod_authn_ldap_opt_err(server *srv, const char *file, unsigned long line, const char *fn, LDAP *ld)\n{\n    int err;\n    ldap_get_option(ld, LDAP_OPT_ERROR_NUMBER, &err);\n    mod_authn_ldap_err(srv, file, line, fn, err);\n}\n\nstatic void mod_authn_append_ldap_filter_escape(buffer * const filter, const buffer * const raw) {\n    /* [RFC4515] 3. String Search Filter Definition\n     *\n     * [...]\n     *\n     * The <valueencoding> rule ensures that the entire filter string is a\n     * valid UTF-8 string and provides that the octets that represent the\n     * ASCII characters \"*\" (ASCII 0x2a), \"(\" (ASCII 0x28), \")\" (ASCII\n     * 0x29), \"\\\" (ASCII 0x5c), and NUL (ASCII 0x00) are represented as a\n     * backslash \"\\\" (ASCII 0x5c) followed by the two hexadecimal digits\n     * representing the value of the encoded octet.\n     *\n     * [...]\n     *\n     * As indicated by the <valueencoding> rule, implementations MUST escape\n     * all octets greater than 0x7F that are not part of a valid UTF-8\n     * encoding sequence when they generate a string representation of a\n     * search filter.  Implementations SHOULD accept as input strings that\n     * are not valid UTF-8 strings.  This is necessary because RFC 2254 did\n     * not clearly define the term \"string representation\" (and in\n     * particular did not mention that the string representation of an LDAP\n     * search filter is a string of UTF-8-encoded Unicode characters).\n     *\n     *\n     * https://www.ldap.com/ldap-filters\n     * Although not required, you may escape any other characters that you want\n     * in the assertion value (or substring component) of a filter. This may be\n     * accomplished by prefixing the hexadecimal representation of each byte of\n     * the UTF-8 encoding of the character to escape with a backslash character.\n     */\n    const char * const b = raw->ptr;\n    const size_t rlen = buffer_string_length(raw);\n    for (size_t i = 0; i < rlen; ++i) {\n        size_t len = i;\n        char *f;\n        do {\n            /* encode all UTF-8 chars with high bit set\n             * (instead of validating UTF-8 and escaping only invalid UTF-8) */\n            if (((unsigned char *)b)[len] > 0x7f)\n                break;\n            switch (b[len]) {\n              default:\n                continue;\n              case '\\0': case '(': case ')': case '*': case '\\\\':\n                break;\n            }\n            break;\n        } while (++len < rlen);\n        len -= i;\n\n        if (len) {\n            buffer_append_string_len(filter, b+i, len);\n            if ((i += len) == rlen) break;\n        }\n\n        /* escape * ( ) \\ NUL ('\\0') (and all UTF-8 chars with high bit set) */\n        buffer_string_prepare_append(filter, 3);\n        f = filter->ptr + buffer_string_length(filter);\n        f[0] = '\\\\';\n        f[1] = \"0123456789abcdef\"[(((unsigned char *)b)[i] >> 4) & 0xf];\n        f[2] = \"0123456789abcdef\"[(((unsigned char *)b)[i]     ) & 0xf];\n        buffer_commit(filter, 3);\n    }\n}\n\nstatic LDAP * mod_authn_ldap_host_init(server *srv, vhostdb_config *s) {\n    LDAP *ld;\n    int ret;\n\n    ret = ldap_initialize(&ld, s->host);\n    if (LDAP_SUCCESS != ret) {\n        log_error_write(srv, __FILE__, __LINE__, \"sss\", \"ldap:\",\n                        \"ldap_initialize():\", strerror(errno));\n        return NULL;\n    }\n\n    ret = LDAP_VERSION3;\n    ret = ldap_set_option(ld, LDAP_OPT_PROTOCOL_VERSION, &ret);\n    if (LDAP_OPT_SUCCESS != ret) {\n        mod_authn_ldap_err(srv, __FILE__, __LINE__, \"ldap_set_options()\", ret);\n        ldap_destroy(ld);\n        return NULL;\n    }\n\n    /* restart ldap functions if interrupted by a signal, e.g. SIGCHLD */\n    ldap_set_option(ld, LDAP_OPT_RESTART, LDAP_OPT_ON);\n\n    if (s->starttls) {\n        /* if no CA file is given, it is ok, as we will use encryption\n         * if the server requires a CAfile it will tell us */\n        if (s->cafile) {\n            ret = ldap_set_option(NULL, LDAP_OPT_X_TLS_CACERTFILE, s->cafile);\n            if (LDAP_OPT_SUCCESS != ret) {\n                mod_authn_ldap_err(srv, __FILE__, __LINE__,\n                                   \"ldap_set_option(LDAP_OPT_X_TLS_CACERTFILE)\",\n                                   ret);\n                ldap_destroy(ld);\n                return NULL;\n            }\n        }\n\n        ret = ldap_start_tls_s(ld, NULL,  NULL);\n        if (LDAP_OPT_SUCCESS != ret) {\n            mod_authn_ldap_err(srv,__FILE__,__LINE__,\"ldap_start_tls_s()\",ret);\n            ldap_destroy(ld);\n            return NULL;\n        }\n    }\n\n    return ld;\n}\n\nstatic int mod_authn_ldap_bind(server *srv, LDAP *ld, const char *dn, const char *pw) {\n    struct berval creds;\n    int ret;\n\n    if (NULL != pw) {\n        *((const char **)&creds.bv_val) = pw; /*(cast away const)*/\n        creds.bv_len = strlen(pw);\n    } else {\n        creds.bv_val = NULL;\n        creds.bv_len = 0;\n    }\n\n    /* RFE: add functionality: LDAP_SASL_EXTERNAL (or GSS-SPNEGO, etc.) */\n\n    ret = ldap_sasl_bind_s(ld,dn,LDAP_SASL_SIMPLE,&creds,NULL,NULL,NULL);\n    if (ret != LDAP_SUCCESS) {\n        mod_authn_ldap_err(srv, __FILE__, __LINE__, \"ldap_sasl_bind_s()\", ret);\n    }\n\n    return ret;\n}\n\nstatic int mod_authn_ldap_rebind_proc (LDAP *ld, LDAP_CONST char *url, ber_tag_t ldap_request, ber_int_t msgid, void *params) {\n    vhostdb_config *s = (vhostdb_config *)params;\n    UNUSED(url);\n    UNUSED(ldap_request);\n    UNUSED(msgid);\n    return mod_authn_ldap_bind(s->srv, ld, s->binddn, s->bindpw);\n}\n\nstatic LDAPMessage * mod_authn_ldap_search(server *srv, vhostdb_config *s, char *base, char *filter) {\n    LDAPMessage *lm = NULL;\n    char *attrs[] = { LDAP_NO_ATTRS, NULL };\n    int ret;\n\n    /*\n     * 1. connect anonymously (if not already connected)\n     *    (ldap connection is kept open unless connection-level error occurs)\n     * 2. issue search using filter\n     */\n\n    if (s->ldap != NULL) {\n        ret = ldap_search_ext_s(s->ldap, base, LDAP_SCOPE_SUBTREE, filter,\n                                attrs, 0, NULL, NULL, NULL, 0, &lm);\n        if (LDAP_SUCCESS == ret) {\n            return lm;\n        } else if (LDAP_SERVER_DOWN != ret) {\n            /* try again (or initial request);\n             * ldap lib sometimes fails for the first call but reconnects */\n            ret = ldap_search_ext_s(s->ldap, base, LDAP_SCOPE_SUBTREE, filter,\n                                    attrs, 0, NULL, NULL, NULL, 0, &lm);\n            if (LDAP_SUCCESS == ret) {\n                return lm;\n            }\n        }\n\n        ldap_unbind_ext_s(s->ldap, NULL, NULL);\n    }\n\n    s->ldap = mod_authn_ldap_host_init(srv, s);\n    if (NULL == s->ldap) {\n        return NULL;\n    }\n\n    ldap_set_rebind_proc(s->ldap, mod_authn_ldap_rebind_proc, s);\n    ret = mod_authn_ldap_bind(srv, s->ldap, s->binddn, s->bindpw);\n    if (LDAP_SUCCESS != ret) {\n        ldap_destroy(s->ldap);\n        s->ldap = NULL;\n        return NULL;\n    }\n\n    ret = ldap_search_ext_s(s->ldap, base, LDAP_SCOPE_SUBTREE, filter,\n                            attrs, 0, NULL, NULL, NULL, 0, &lm);\n    if (LDAP_SUCCESS != ret) {\n        log_error_write(srv, __FILE__, __LINE__, \"sSss\",\n                        \"ldap:\", ldap_err2string(ret), \"; filter:\", filter);\n        ldap_unbind_ext_s(s->ldap, NULL, NULL);\n        s->ldap = NULL;\n        return NULL;\n    }\n\n    return lm;\n}\n\nstatic void mod_vhostdb_patch_connection (server *srv, connection *con, plugin_data *p);\n\nstatic int mod_vhostdb_ldap_query(server *srv, connection *con, void *p_d, buffer *docroot)\n{\n    plugin_data *p = (plugin_data *)p_d;\n    vhostdb_config *dbconf;\n    LDAP *ld;\n    LDAPMessage *lm, *first;\n    struct berval **vals;\n    int count;\n    char *basedn;\n    buffer *template;\n\n    /*(reuse buffer for ldap query before generating docroot result)*/\n    buffer *filter = docroot;\n    buffer_clear(filter); /*(also resets docroot (alias))*/\n\n    mod_vhostdb_patch_connection(srv, con, p);\n    if (NULL == p->conf.vdata) return 0; /*(after resetting docroot)*/\n    dbconf = (vhostdb_config *)p->conf.vdata;\n    dbconf->srv = srv;\n\n    template = dbconf->filter;\n    for (char *b = template->ptr, *d; *b; b = d+1) {\n        if (NULL != (d = strchr(b, '?'))) {\n            buffer_append_string_len(filter, b, (size_t)(d - b));\n            mod_authn_append_ldap_filter_escape(filter, con->uri.authority);\n        } else {\n            d = template->ptr + buffer_string_length(template);\n            buffer_append_string_len(filter, b, (size_t)(d - b));\n            break;\n        }\n    }\n\n    /* (cast away const for poor LDAP ldap_search_ext_s() prototype) */\n    *(const char **)&basedn = dbconf->basedn;\n\n    /* ldap_search (synchronous; blocking) */\n    lm = mod_authn_ldap_search(srv, dbconf, basedn, filter->ptr);\n    if (NULL == lm) {\n        return -1;\n    }\n\n    /*(must be after mod_authn_ldap_search(); might reconnect)*/\n    ld = dbconf->ldap;\n\n    count = ldap_count_entries(ld, lm);\n    if (count > 1) {\n        log_error_write(srv, __FILE__, __LINE__, \"ssb\",\n                        \"ldap:\", \"more than one record returned.  \"\n                        \"you might have to refine the filter:\", filter);\n    }\n\n    buffer_clear(docroot); /*(reset buffer to store result)*/\n\n    if (0 == count) { /*(no entries found)*/\n        ldap_msgfree(lm);\n        return 0;\n    }\n\n    if (NULL == (first = ldap_first_entry(ld, lm))) {\n        mod_authn_ldap_opt_err(srv,__FILE__,__LINE__,\"ldap_first_entry()\",ld);\n        ldap_msgfree(lm);\n        return -1;\n    }\n\n    if (NULL != (vals = ldap_get_values_len(ld, first, dbconf->attr))) {\n        buffer_copy_string_len(docroot, vals[0]->bv_val, vals[0]->bv_len);\n        ldap_value_free_len(vals);\n    }\n\n    ldap_msgfree(lm);\n    return 0;\n}\n\n\n\n\nINIT_FUNC(mod_vhostdb_init) {\n    static http_vhostdb_backend_t http_vhostdb_backend_ldap =\n      { \"ldap\", mod_vhostdb_ldap_query, NULL };\n    plugin_data *p = calloc(1, sizeof(*p));\n\n    /* register http_vhostdb_backend_ldap */\n    http_vhostdb_backend_ldap.p_d = p;\n    http_vhostdb_backend_set(&http_vhostdb_backend_ldap);\n\n    return p;\n}\n\nFREE_FUNC(mod_vhostdb_cleanup) {\n    plugin_data *p = p_d;\n    if (!p) return HANDLER_GO_ON;\n\n    if (p->config_storage) {\n        for (size_t i = 0; i < srv->config_context->used; i++) {\n            plugin_config *s = p->config_storage[i];\n            if (!s) continue;\n            mod_vhostdb_dbconf_free(s->vdata);\n            array_free(s->options);\n            free(s);\n        }\n        free(p->config_storage);\n    }\n    free(p);\n\n    UNUSED(srv);\n    return HANDLER_GO_ON;\n}\n\nSETDEFAULTS_FUNC(mod_vhostdb_set_defaults) {\n    plugin_data *p = p_d;\n\n    config_values_t cv[] = {\n        { \"vhostdb.ldap\",  NULL, T_CONFIG_ARRAY,  T_CONFIG_SCOPE_CONNECTION },\n        { NULL,            NULL, T_CONFIG_UNSET,  T_CONFIG_SCOPE_UNSET }\n    };\n\n    p->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n    for (size_t i = 0; i < srv->config_context->used; ++i) {\n        data_config const *config = (data_config const*)srv->config_context->data[i];\n        plugin_config *s = calloc(1, sizeof(plugin_config));\n\n        s->options = array_init();\n        cv[0].destination = s->options;\n\n        p->config_storage[i] = s;\n\n        if (config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n            return HANDLER_ERROR;\n        }\n\n\tif (!array_is_kvstring(s->options)) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\"unexpected value for vhostdb.ldap; expected list of \\\"option\\\" => \\\"value\\\"\");\n\t\treturn HANDLER_ERROR;\n\t}\n\n        if (s->options->used\n            && 0 != mod_vhostdb_dbconf_setup(srv, s->options, &s->vdata)) {\n            return HANDLER_ERROR;\n        }\n    }\n\n    return HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n    p->conf.x = s->x;\nstatic void mod_vhostdb_patch_connection (server *srv, connection *con, plugin_data *p)\n{\n    plugin_config *s = p->config_storage[0];\n    PATCH(vdata);\n\n    /* skip the first, the global context */\n    for (size_t i = 1; i < srv->config_context->used; ++i) {\n        data_config *dc = (data_config *)srv->config_context->data[i];\n        s = p->config_storage[i];\n\n        /* condition didn't match */\n        if (!config_check_cond(srv, con, dc)) continue;\n\n        /* merge config */\n        for (size_t j = 0; j < dc->value->used; ++j) {\n            data_unset *du = dc->value->data[j];\n\n            if (buffer_is_equal_string(du->key,CONST_STR_LEN(\"vhostdb.ldap\"))) {\n                PATCH(vdata);\n            }\n        }\n    }\n}\n#undef PATCH\n\n/* this function is called at dlopen() time and inits the callbacks */\nint mod_vhostdb_ldap_plugin_init (plugin *p);\nint mod_vhostdb_ldap_plugin_init (plugin *p)\n{\n    p->version          = LIGHTTPD_VERSION_ID;\n    p->name             = buffer_init_string(\"vhostdb_ldap\");\n\n    p->init             = mod_vhostdb_init;\n    p->cleanup          = mod_vhostdb_cleanup;\n    p->set_defaults     = mod_vhostdb_set_defaults;\n\n    return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_staticfile.c": "#include \"first.h\"\n\n#include \"base.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n\n#include \"plugin.h\"\n\n#include \"etag.h\"\n#include \"http_chunk.h\"\n#include \"response.h\"\n\n#include <stdlib.h>\n#include <string.h>\n\n/**\n * this is a staticfile for a lighttpd plugin\n *\n */\n\n\n\n/* plugin config for all request/connections */\n\ntypedef struct {\n\tarray *exclude_ext;\n\tunsigned short etags_used;\n\tunsigned short disable_pathinfo;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\n\tplugin_config **config_storage;\n\n\tplugin_config conf;\n} plugin_data;\n\n/* init the plugin data */\nINIT_FUNC(mod_staticfile_init) {\n\tplugin_data *p;\n\n\tp = calloc(1, sizeof(*p));\n\n\treturn p;\n}\n\n/* detroy the plugin data */\nFREE_FUNC(mod_staticfile_free) {\n\tplugin_data *p = p_d;\n\n\tUNUSED(srv);\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (NULL == s) continue;\n\n\t\t\tarray_free(s->exclude_ext);\n\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\n\nSETDEFAULTS_FUNC(mod_staticfile_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\tconfig_values_t cv[] = {\n\t\t{ \"static-file.exclude-extensions\", NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 0 */\n\t\t{ \"static-file.etags\",    NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION }, /* 1 */\n\t\t{ \"static-file.disable-pathinfo\", NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION }, /* 2 */\n\t\t{ NULL,                         NULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->exclude_ext    = array_init();\n\t\ts->etags_used     = 1;\n\t\ts->disable_pathinfo = 0;\n\n\t\tcv[0].destination = s->exclude_ext;\n\t\tcv[1].destination = &(s->etags_used);\n\t\tcv[2].destination = &(s->disable_pathinfo);\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (!array_is_vlist(s->exclude_ext)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for static-file.exclude-extensions; expected list of \\\"ext\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_staticfile_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(exclude_ext);\n\tPATCH(etags_used);\n\tPATCH(disable_pathinfo);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"static-file.exclude-extensions\"))) {\n\t\t\t\tPATCH(exclude_ext);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"static-file.etags\"))) {\n\t\t\t\tPATCH(etags_used);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"static-file.disable-pathinfo\"))) {\n\t\t\t\tPATCH(disable_pathinfo);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\nURIHANDLER_FUNC(mod_staticfile_subrequest) {\n\tplugin_data *p = p_d;\n\n\t/* someone else has done a decision for us */\n\tif (con->http_status != 0) return HANDLER_GO_ON;\n\tif (buffer_is_empty(con->uri.path)) return HANDLER_GO_ON;\n\tif (buffer_is_empty(con->physical.path)) return HANDLER_GO_ON;\n\n\t/* someone else has handled this request */\n\tif (con->mode != DIRECT) return HANDLER_GO_ON;\n\n\t/* we only handle GET, POST and HEAD */\n\tswitch(con->request.http_method) {\n\tcase HTTP_METHOD_GET:\n\tcase HTTP_METHOD_POST:\n\tcase HTTP_METHOD_HEAD:\n\t\tbreak;\n\tdefault:\n\t\treturn HANDLER_GO_ON;\n\t}\n\n\tmod_staticfile_patch_connection(srv, con, p);\n\n\tif (p->conf.disable_pathinfo && !buffer_string_is_empty(con->request.pathinfo)) {\n\t\tif (con->conf.log_request_handling) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__,  \"s\",  \"-- NOT handling file as static file, pathinfo forbidden\");\n\t\t}\n\t\treturn HANDLER_GO_ON;\n\t}\n\n\t/* ignore certain extensions */\n\tif (0 != p->conf.exclude_ext->used && array_match_value_suffix(p->conf.exclude_ext, con->physical.path)) {\n\t\t\tif (con->conf.log_request_handling) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__,  \"s\",  \"-- NOT handling file as static file, extension forbidden\");\n\t\t\t}\n\t\t\treturn HANDLER_GO_ON;\n\t}\n\n\n\tif (con->conf.log_request_handling) {\n\t\tlog_error_write(srv, __FILE__, __LINE__,  \"s\",  \"-- handling file as static file\");\n\t}\n\n\tif (!p->conf.etags_used) con->etag_flags = 0;\n\thttp_response_send_file(srv, con, con->physical.path);\n\n\treturn HANDLER_FINISHED;\n}\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_staticfile_plugin_init(plugin *p);\nint mod_staticfile_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"staticfile\");\n\n\tp->init        = mod_staticfile_init;\n\tp->handle_subrequest_start = mod_staticfile_subrequest;\n\tp->set_defaults  = mod_staticfile_set_defaults;\n\tp->cleanup     = mod_staticfile_free;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_vhostdb_pgsql.c": "#include \"first.h\"\n\n#include <libpq-fe.h>\n\n#include <string.h>\n#include <stdlib.h>\n\n#include \"base.h\"\n#include \"http_vhostdb.h\"\n#include \"log.h\"\n#include \"plugin.h\"\n\n/*\n * virtual host plugin using Postgres for domain to directory lookups\n */\n\ntypedef struct {\n    PGconn *dbconn;\n    buffer *sqlquery;\n} vhostdb_config;\n\ntypedef struct {\n    void *vdata;\n    array *options;\n} plugin_config;\n\ntypedef struct {\n    PLUGIN_DATA;\n    plugin_config **config_storage;\n    plugin_config conf;\n} plugin_data;\n\nstatic void mod_vhostdb_dbconf_free (void *vdata)\n{\n    vhostdb_config *dbconf = (vhostdb_config *)vdata;\n    if (!dbconf) return;\n    PQfinish(dbconf->dbconn);\n    free(dbconf);\n}\n\nstatic int mod_vhostdb_dbconf_setup (server *srv, array *opts, void **vdata)\n{\n    buffer *sqlquery = NULL;\n    const char *dbname=NULL, *user=NULL, *pass=NULL, *host=NULL, *port=NULL;\n\n    for (size_t i = 0; i < opts->used; ++i) {\n        const data_string *ds = (data_string *)opts->data[i];\n        if (ds->type == TYPE_STRING) {\n            if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"sql\"))) {\n                sqlquery = ds->value;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"dbname\"))) {\n                dbname = ds->value->ptr;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"user\"))) {\n                user = ds->value->ptr;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"password\"))) {\n                pass = ds->value->ptr;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"host\"))) {\n                host = ds->value->ptr;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"port\"))) {\n                port = ds->value->ptr;\n            }\n        }\n    }\n\n    /* required:\n     * - sql    (sql query)\n     * - dbname\n     * - user   (unless dbname is a pgsql conninfo URI)\n     *\n     * optional:\n     * - password, default: empty\n     * - hostname\n     * - port, default: 5432\n     */\n\n    if (!buffer_string_is_empty(sqlquery) && NULL != dbname) {\n        vhostdb_config *dbconf;\n        PGconn *dbconn = PQsetdbLogin(host,port,NULL,NULL,dbname,user,pass);\n        if (NULL == dbconn) {\n            log_error_write(srv, __FILE__, __LINE__, \"s\",\n                            \"PGsetdbLogin() failed, exiting...\");\n            return -1;\n        }\n\n        if (CONNECTION_OK != PQstatus(dbconn)) {\n            log_error_write(srv, __FILE__, __LINE__, \"s\",\n                            \"Failed to login to database, exiting...\");\n            PQfinish(dbconn);\n            return -1;\n        }\n\n        /* Postgres sets FD_CLOEXEC on database socket descriptors */\n\n        dbconf = (vhostdb_config *)calloc(1, sizeof(*dbconf));\n        dbconf->dbconn = dbconn;\n        dbconf->sqlquery = sqlquery;\n        *vdata = dbconf;\n    }\n\n    return 0;\n}\n\nstatic void mod_vhostdb_patch_connection (server *srv, connection *con, plugin_data *p);\n\nstatic int mod_vhostdb_pgsql_query(server *srv, connection *con, void *p_d, buffer *docroot)\n{\n    plugin_data *p = (plugin_data *)p_d;\n    vhostdb_config *dbconf;\n    PGresult *res;\n    int cols, rows;\n\n    /*(reuse buffer for sql query before generating docroot result)*/\n    buffer *sqlquery = docroot;\n    buffer_clear(sqlquery); /*(also resets docroot (alias))*/\n\n    mod_vhostdb_patch_connection(srv, con, p);\n    if (NULL == p->conf.vdata) return 0; /*(after resetting docroot)*/\n    dbconf = (vhostdb_config *)p->conf.vdata;\n\n    for (char *b = dbconf->sqlquery->ptr, *d; *b; b = d+1) {\n        if (NULL != (d = strchr(b, '?'))) {\n            /* escape the uri.authority */\n            size_t len;\n            int err;\n            buffer_append_string_len(sqlquery, b, (size_t)(d - b));\n            buffer_string_prepare_append(sqlquery, buffer_string_length(con->uri.authority) * 2);\n            len = PQescapeStringConn(dbconf->dbconn,\n                    sqlquery->ptr + buffer_string_length(sqlquery),\n                    CONST_BUF_LEN(con->uri.authority), &err);\n            buffer_commit(sqlquery, len);\n            if (0 != err) return -1;\n        } else {\n            d = dbconf->sqlquery->ptr + buffer_string_length(dbconf->sqlquery);\n            buffer_append_string_len(sqlquery, b, (size_t)(d - b));\n            break;\n        }\n    }\n\n    res = PQexec(dbconf->dbconn, sqlquery->ptr);\n\n    buffer_clear(docroot); /*(reset buffer to store result)*/\n\n    if (PGRES_TUPLES_OK != PQresultStatus(res)) {\n        log_error_write(srv, __FILE__, __LINE__, \"s\",\n                        PQerrorMessage(dbconf->dbconn));\n        PQclear(res);\n        return -1;\n    }\n\n    cols = PQnfields(res);\n    rows = PQntuples(res);\n    if (rows == 1 && cols >= 1) {\n        buffer_copy_string(docroot, PQgetvalue(res, 0, 0));\n    } /* else no such virtual host */\n\n    PQclear(res);\n    return 0;\n}\n\n\n\n\nINIT_FUNC(mod_vhostdb_init) {\n    static http_vhostdb_backend_t http_vhostdb_backend_pgsql =\n      { \"pgsql\", mod_vhostdb_pgsql_query, NULL };\n    plugin_data *p = calloc(1, sizeof(*p));\n\n    /* register http_vhostdb_backend_pgsql */\n    http_vhostdb_backend_pgsql.p_d = p;\n    http_vhostdb_backend_set(&http_vhostdb_backend_pgsql);\n\n    return p;\n}\n\nFREE_FUNC(mod_vhostdb_cleanup) {\n    plugin_data *p = p_d;\n    if (!p) return HANDLER_GO_ON;\n\n    if (p->config_storage) {\n        for (size_t i = 0; i < srv->config_context->used; i++) {\n            plugin_config *s = p->config_storage[i];\n            if (!s) continue;\n            mod_vhostdb_dbconf_free(s->vdata);\n            array_free(s->options);\n            free(s);\n        }\n        free(p->config_storage);\n    }\n    free(p);\n\n    UNUSED(srv);\n    return HANDLER_GO_ON;\n}\n\nSETDEFAULTS_FUNC(mod_vhostdb_set_defaults) {\n    plugin_data *p = p_d;\n\n    config_values_t cv[] = {\n        { \"vhostdb.pgsql\",  NULL, T_CONFIG_ARRAY,  T_CONFIG_SCOPE_CONNECTION },\n        { NULL,             NULL, T_CONFIG_UNSET,  T_CONFIG_SCOPE_UNSET }\n    };\n\n    p->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n    for (size_t i = 0; i < srv->config_context->used; ++i) {\n        data_config const *config = (data_config const*)srv->config_context->data[i];\n        plugin_config *s = calloc(1, sizeof(plugin_config));\n\n        s->options = array_init();\n        cv[0].destination = s->options;\n\n        p->config_storage[i] = s;\n\n        if (config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n            return HANDLER_ERROR;\n        }\n\n\tif (!array_is_kvstring(s->options)) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\"unexpected value for vhostdb.pgsql; expected list of \\\"option\\\" => \\\"value\\\"\");\n\t\treturn HANDLER_ERROR;\n\t}\n\n        if (s->options->used\n            && 0 != mod_vhostdb_dbconf_setup(srv, s->options, &s->vdata)) {\n            return HANDLER_ERROR;\n        }\n    }\n\n    return HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n    p->conf.x = s->x;\nstatic void mod_vhostdb_patch_connection (server *srv, connection *con, plugin_data *p)\n{\n    plugin_config *s = p->config_storage[0];\n    PATCH(vdata);\n\n    /* skip the first, the global context */\n    for (size_t i = 1; i < srv->config_context->used; ++i) {\n        data_config *dc = (data_config *)srv->config_context->data[i];\n        s = p->config_storage[i];\n\n        /* condition didn't match */\n        if (!config_check_cond(srv, con, dc)) continue;\n\n        /* merge config */\n        for (size_t j = 0; j < dc->value->used; ++j) {\n            data_unset *du = dc->value->data[j];\n\n            if (buffer_is_equal_string(du->key,CONST_STR_LEN(\"vhostdb.pgsql\"))){\n                PATCH(vdata);\n            }\n        }\n    }\n}\n#undef PATCH\n\n/* this function is called at dlopen() time and inits the callbacks */\nint mod_vhostdb_pgsql_plugin_init (plugin *p);\nint mod_vhostdb_pgsql_plugin_init (plugin *p)\n{\n    p->version          = LIGHTTPD_VERSION_ID;\n    p->name             = buffer_init_string(\"vhostdb_pgsql\");\n\n    p->init             = mod_vhostdb_init;\n    p->cleanup          = mod_vhostdb_cleanup;\n    p->set_defaults     = mod_vhostdb_set_defaults;\n\n    return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_setenv.c": "#include \"first.h\"\n\n#include \"base.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n#include \"http_header.h\"\n\n#include \"plugin.h\"\n\n#include <stdlib.h>\n#include <string.h>\n\n/* plugin config for all request/connections */\n\ntypedef struct {\n\tarray *request_header;\n\tarray *set_request_header;\n\tarray *response_header;\n\tarray *set_response_header;\n\tarray *environment;\n\tarray *set_environment;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\n\tplugin_config **config_storage;\n\n\tplugin_config conf;\n} plugin_data;\n\ntypedef struct {\n\tint handled; /* make sure that we only apply the headers once */\n\tplugin_config conf;\n} handler_ctx;\n\nstatic handler_ctx * handler_ctx_init(void) {\n\thandler_ctx * hctx;\n\n\thctx = calloc(1, sizeof(*hctx));\n\n\thctx->handled = 0;\n\n\treturn hctx;\n}\n\nstatic void handler_ctx_free(handler_ctx *hctx) {\n\tfree(hctx);\n}\n\n\n/* init the plugin data */\nINIT_FUNC(mod_setenv_init) {\n\tplugin_data *p;\n\n\tp = calloc(1, sizeof(*p));\n\n\treturn p;\n}\n\n/* detroy the plugin data */\nFREE_FUNC(mod_setenv_free) {\n\tplugin_data *p = p_d;\n\n\tUNUSED(srv);\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (NULL == s) continue;\n\n\t\t\tarray_free(s->request_header);\n\t\t\tarray_free(s->response_header);\n\t\t\tarray_free(s->environment);\n\t\t\tarray_free(s->set_request_header);\n\t\t\tarray_free(s->set_response_header);\n\t\t\tarray_free(s->set_environment);\n\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\n\nSETDEFAULTS_FUNC(mod_setenv_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\tconfig_values_t cv[] = {\n\t\t{ \"setenv.add-request-header\",  NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 0 */\n\t\t{ \"setenv.add-response-header\", NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 1 */\n\t\t{ \"setenv.add-environment\",     NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 2 */\n\t\t{ \"setenv.set-request-header\",  NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 3 */\n\t\t{ \"setenv.set-response-header\", NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 4 */\n\t\t{ \"setenv.set-environment\",     NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 5 */\n\t\t{ NULL,                         NULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->request_header   = array_init();\n\t\ts->response_header  = array_init();\n\t\ts->environment      = array_init();\n\t\ts->set_request_header  = array_init();\n\t\ts->set_response_header = array_init();\n\t\ts->set_environment     = array_init();\n\n\t\tcv[0].destination = s->request_header;\n\t\tcv[1].destination = s->response_header;\n\t\tcv[2].destination = s->environment;\n\t\tcv[3].destination = s->set_request_header;\n\t\tcv[4].destination = s->set_response_header;\n\t\tcv[5].destination = s->set_environment;\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (   !array_is_kvstring(s->request_header)\n\t\t    || !array_is_kvstring(s->response_header)\n\t\t    || !array_is_kvstring(s->environment)\n\t\t    || !array_is_kvstring(s->set_request_header)\n\t\t    || !array_is_kvstring(s->set_response_header)\n\t\t    || !array_is_kvstring(s->set_environment)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for setenv.xxxxxx; expected list of \\\"envvar\\\" => \\\"value\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_setenv_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(request_header);\n\tPATCH(set_request_header);\n\tPATCH(response_header);\n\tPATCH(set_response_header);\n\tPATCH(environment);\n\tPATCH(set_environment);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"setenv.add-request-header\"))) {\n\t\t\t\tPATCH(request_header);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"setenv.set-request-header\"))) {\n\t\t\t\tPATCH(set_request_header);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"setenv.add-response-header\"))) {\n\t\t\t\tPATCH(response_header);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"setenv.set-response-header\"))) {\n\t\t\t\tPATCH(set_response_header);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"setenv.add-environment\"))) {\n\t\t\t\tPATCH(environment);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"setenv.set-environment\"))) {\n\t\t\t\tPATCH(set_environment);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\nURIHANDLER_FUNC(mod_setenv_uri_handler) {\n\tplugin_data *p = p_d;\n\tsize_t k;\n\thandler_ctx *hctx;\n\n\tif (con->plugin_ctx[p->id]) {\n\t\thctx = con->plugin_ctx[p->id];\n\t} else {\n\t\thctx = handler_ctx_init();\n\n\t\tcon->plugin_ctx[p->id] = hctx;\n\t}\n\n\tif (hctx->handled) {\n\t\treturn HANDLER_GO_ON;\n\t}\n\n\thctx->handled = 1;\n\n\tmod_setenv_patch_connection(srv, con, p);\n\tmemcpy(&hctx->conf, &p->conf, sizeof(plugin_config));\n\n\tfor (k = 0; k < p->conf.request_header->used; k++) {\n\t\tdata_string *ds = (data_string *)p->conf.request_header->data[k];\n\t\tenum http_header_e id = http_header_hkey_get(CONST_BUF_LEN(ds->key));\n\t\thttp_header_request_append(con, id, CONST_BUF_LEN(ds->key), CONST_BUF_LEN(ds->value));\n\t}\n\n\tfor (k = 0; k < hctx->conf.set_request_header->used; ++k) {\n\t\tdata_string *ds = (data_string *)hctx->conf.set_request_header->data[k];\n\t\tenum http_header_e id = http_header_hkey_get(CONST_BUF_LEN(ds->key));\n\t\t!buffer_string_is_empty(ds->value)\n\t\t  ? http_header_request_set(con, id, CONST_BUF_LEN(ds->key), CONST_BUF_LEN(ds->value))\n\t\t  : http_header_request_unset(con, id, CONST_BUF_LEN(ds->key));\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\nCONNECTION_FUNC(mod_setenv_handle_request_env) {\n\tplugin_data *p = p_d;\n\thandler_ctx *hctx = con->plugin_ctx[p->id];\n\tif (NULL == hctx) return HANDLER_GO_ON;\n\tif (hctx->handled > 1) return HANDLER_GO_ON;\n\thctx->handled = 2;\n\tUNUSED(srv);\n\n\tfor (size_t k = 0; k < hctx->conf.environment->used; ++k) {\n\t\tdata_string *ds = (data_string *)hctx->conf.environment->data[k];\n\t\thttp_header_env_append(con, CONST_BUF_LEN(ds->key), CONST_BUF_LEN(ds->value));\n\t}\n\n\tfor (size_t k = 0; k < hctx->conf.set_environment->used; ++k) {\n\t\tdata_string *ds = (data_string *)hctx->conf.set_environment->data[k];\n\t\thttp_header_env_set(con, CONST_BUF_LEN(ds->key), CONST_BUF_LEN(ds->value));\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\nCONNECTION_FUNC(mod_setenv_handle_response_start) {\n\tplugin_data *p = p_d;\n\thandler_ctx *hctx = con->plugin_ctx[p->id];\n\tif (NULL == hctx) return HANDLER_GO_ON;\n\tUNUSED(srv);\n\n\tfor (size_t k = 0; k < hctx->conf.response_header->used; ++k) {\n\t\tdata_string *ds = (data_string *)hctx->conf.response_header->data[k];\n\t\tenum http_header_e id = http_header_hkey_get(CONST_BUF_LEN(ds->key));\n\t\thttp_header_response_insert(con, id, CONST_BUF_LEN(ds->key), CONST_BUF_LEN(ds->value));\n\t}\n\n\tfor (size_t k = 0; k < hctx->conf.set_response_header->used; ++k) {\n\t\tdata_string *ds = (data_string *)hctx->conf.set_response_header->data[k];\n\t\tenum http_header_e id = http_header_hkey_get(CONST_BUF_LEN(ds->key));\n\t\t!buffer_string_is_empty(ds->value)\n\t\t  ? http_header_response_set(con, id, CONST_BUF_LEN(ds->key), CONST_BUF_LEN(ds->value))\n\t\t  : http_header_response_unset(con, id, CONST_BUF_LEN(ds->key));\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\nCONNECTION_FUNC(mod_setenv_reset) {\n\tplugin_data *p = p_d;\n\n\tUNUSED(srv);\n\n\tif (con->plugin_ctx[p->id]) {\n\t\thandler_ctx_free(con->plugin_ctx[p->id]);\n\t\tcon->plugin_ctx[p->id] = NULL;\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_setenv_plugin_init(plugin *p);\nint mod_setenv_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"setenv\");\n\n\tp->init        = mod_setenv_init;\n\tp->handle_uri_clean  = mod_setenv_uri_handler;\n\tp->handle_request_env    = mod_setenv_handle_request_env;\n\tp->handle_response_start = mod_setenv_handle_response_start;\n\tp->set_defaults  = mod_setenv_set_defaults;\n\tp->cleanup     = mod_setenv_free;\n\n\tp->connection_reset  = mod_setenv_reset;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_trigger_b4_dl.c": "#include \"first.h\"\n\n#include \"base.h\"\n#include \"fdevent.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n#include \"http_header.h\"\n\n#include \"plugin.h\"\n\n#include <sys/stat.h>\n#include <stdlib.h>\n#include <string.h>\n\n#if defined(HAVE_GDBM_H)\n# include <gdbm.h>\n#endif\n\n#if defined(HAVE_PCRE_H)\n# include <pcre.h>\n#endif\n\n#if defined(USE_MEMCACHED)\n# include <libmemcached/memcached.h>\n#endif\n\n/**\n * this is a trigger_b4_dl for a lighttpd plugin\n *\n */\n\n/* plugin config for all request/connections */\n\ntypedef struct {\n\tbuffer *db_filename;\n\n\tbuffer *trigger_url;\n\tbuffer *download_url;\n\tbuffer *deny_url;\n\n\tarray  *mc_hosts;\n\tbuffer *mc_namespace;\n#if defined(HAVE_PCRE_H)\n\tpcre *trigger_regex;\n\tpcre *download_regex;\n#endif\n#if defined(HAVE_GDBM_H)\n\tGDBM_FILE db;\n#endif\n\n#if defined(USE_MEMCACHED)\n\tmemcached_st *memc;\n#endif\n\n\tunsigned short trigger_timeout;\n\tunsigned short debug;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\n\tbuffer *tmp_buf;\n\n\tplugin_config **config_storage;\n\n\tplugin_config conf;\n} plugin_data;\n\n/* init the plugin data */\nINIT_FUNC(mod_trigger_b4_dl_init) {\n\tplugin_data *p;\n\n\tp = calloc(1, sizeof(*p));\n\n\tp->tmp_buf = buffer_init();\n\n\treturn p;\n}\n\n/* detroy the plugin data */\nFREE_FUNC(mod_trigger_b4_dl_free) {\n\tplugin_data *p = p_d;\n\n\tUNUSED(srv);\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (NULL == s) continue;\n\n\t\t\tbuffer_free(s->db_filename);\n\t\t\tbuffer_free(s->download_url);\n\t\t\tbuffer_free(s->trigger_url);\n\t\t\tbuffer_free(s->deny_url);\n\n\t\t\tbuffer_free(s->mc_namespace);\n\t\t\tarray_free(s->mc_hosts);\n\n#if defined(HAVE_PCRE_H)\n\t\t\tif (s->trigger_regex) pcre_free(s->trigger_regex);\n\t\t\tif (s->download_regex) pcre_free(s->download_regex);\n#endif\n#if defined(HAVE_GDBM_H)\n\t\t\tif (s->db) gdbm_close(s->db);\n#endif\n#if defined(USE_MEMCACHED)\n\t\t\tif (s->memc) memcached_free(s->memc);\n#endif\n\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\n\tbuffer_free(p->tmp_buf);\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\n\nSETDEFAULTS_FUNC(mod_trigger_b4_dl_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\n\tconfig_values_t cv[] = {\n\t\t{ \"trigger-before-download.gdbm-filename\",   NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },       /* 0 */\n\t\t{ \"trigger-before-download.trigger-url\",     NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },       /* 1 */\n\t\t{ \"trigger-before-download.download-url\",    NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },       /* 2 */\n\t\t{ \"trigger-before-download.deny-url\",        NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },       /* 3 */\n\t\t{ \"trigger-before-download.trigger-timeout\", NULL, T_CONFIG_SHORT, T_CONFIG_SCOPE_CONNECTION },        /* 4 */\n\t\t{ \"trigger-before-download.memcache-hosts\",  NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },        /* 5 */\n\t\t{ \"trigger-before-download.memcache-namespace\", NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },    /* 6 */\n\t\t{ \"trigger-before-download.debug\",           NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION },      /* 7 */\n\t\t{ NULL,                        NULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n#if defined(HAVE_PCRE_H)\n\t\tconst char *errptr;\n\t\tint erroff;\n#endif\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->db_filename    = buffer_init();\n\t\ts->download_url   = buffer_init();\n\t\ts->trigger_url    = buffer_init();\n\t\ts->deny_url       = buffer_init();\n\t\ts->mc_hosts       = array_init();\n\t\ts->mc_namespace   = buffer_init();\n\n\t\tcv[0].destination = s->db_filename;\n\t\tcv[1].destination = s->trigger_url;\n\t\tcv[2].destination = s->download_url;\n\t\tcv[3].destination = s->deny_url;\n\t\tcv[4].destination = &(s->trigger_timeout);\n\t\tcv[5].destination = s->mc_hosts;\n\t\tcv[6].destination = s->mc_namespace;\n\t\tcv[7].destination = &(s->debug);\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n#if defined(HAVE_GDBM_H)\n\t\tif (!buffer_string_is_empty(s->db_filename)) {\n\t\t\tif (NULL == (s->db = gdbm_open(s->db_filename->ptr, 4096, GDBM_WRCREAT | GDBM_NOLOCK, S_IRUSR | S_IWUSR, 0))) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\t\"gdbm-open failed\");\n\t\t\t\treturn HANDLER_ERROR;\n\t\t\t}\n\t\t\tfdevent_setfd_cloexec(gdbm_fdesc(s->db));\n\t\t}\n#endif\n#if defined(HAVE_PCRE_H)\n\t\tif (!buffer_string_is_empty(s->download_url)) {\n\t\t\tif (NULL == (s->download_regex = pcre_compile(s->download_url->ptr,\n\t\t\t\t\t\t\t\t      0, &errptr, &erroff, NULL))) {\n\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sbss\",\n\t\t\t\t\t\t\"compiling regex for download-url failed:\",\n\t\t\t\t\t\ts->download_url, \"pos:\", erroff);\n\t\t\t\treturn HANDLER_ERROR;\n\t\t\t}\n\t\t}\n\n\t\tif (!buffer_string_is_empty(s->trigger_url)) {\n\t\t\tif (NULL == (s->trigger_regex = pcre_compile(s->trigger_url->ptr,\n\t\t\t\t\t\t\t\t     0, &errptr, &erroff, NULL))) {\n\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sbss\",\n\t\t\t\t\t\t\"compiling regex for trigger-url failed:\",\n\t\t\t\t\t\ts->trigger_url, \"pos:\", erroff);\n\n\t\t\t\treturn HANDLER_ERROR;\n\t\t\t}\n\t\t}\n#endif\n\n\t\tif (!array_is_vlist(s->mc_hosts)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for trigger-before-download.memcache-hosts; expected list of \\\"host\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (s->mc_hosts->used) {\n#if defined(USE_MEMCACHED)\n\t\t\tbuffer *option_string = buffer_init();\n\t\t\tsize_t k;\n\n\t\t\t{\n\t\t\t\tdata_string *ds = (data_string *)s->mc_hosts->data[0];\n\n\t\t\t\tbuffer_append_string_len(option_string, CONST_STR_LEN(\"--SERVER=\"));\n\t\t\t\tbuffer_append_string_buffer(option_string, ds->value);\n\t\t\t}\n\n\t\t\tfor (k = 1; k < s->mc_hosts->used; k++) {\n\t\t\t\tdata_string *ds = (data_string *)s->mc_hosts->data[k];\n\n\t\t\t\tbuffer_append_string_len(option_string, CONST_STR_LEN(\" --SERVER=\"));\n\t\t\t\tbuffer_append_string_buffer(option_string, ds->value);\n\t\t\t}\n\n\t\t\ts->memc = memcached(CONST_BUF_LEN(option_string));\n\n\t\t\tif (NULL == s->memc) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\t\"configuring memcached failed for option string:\",\n\t\t\t\t\toption_string);\n\t\t\t}\n\t\t\tbuffer_free(option_string);\n\n\t\t\tif (NULL == s->memc) return HANDLER_ERROR;\n#else\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"memcache support is not compiled in but trigger-before-download.memcache-hosts is set, aborting\");\n\t\t\treturn HANDLER_ERROR;\n#endif\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n#if defined(HAVE_PCRE_H)\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_trigger_b4_dl_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n#if defined(HAVE_GDBM)\n\tPATCH(db);\n#endif\n#if defined(HAVE_PCRE_H)\n\tPATCH(download_regex);\n\tPATCH(trigger_regex);\n#endif\n\tPATCH(trigger_timeout);\n\tPATCH(deny_url);\n\tPATCH(mc_namespace);\n\tPATCH(debug);\n#if defined(USE_MEMCACHED)\n\tPATCH(memc);\n#endif\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"trigger-before-download.download-url\"))) {\n#if defined(HAVE_PCRE_H)\n\t\t\t\tPATCH(download_regex);\n#endif\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"trigger-before-download.trigger-url\"))) {\n# if defined(HAVE_PCRE_H)\n\t\t\t\tPATCH(trigger_regex);\n# endif\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"trigger-before-download.gdbm-filename\"))) {\n#if defined(HAVE_GDBM_H)\n\t\t\t\tPATCH(db);\n#endif\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"trigger-before-download.trigger-timeout\"))) {\n\t\t\t\tPATCH(trigger_timeout);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"trigger-before-download.debug\"))) {\n\t\t\t\tPATCH(debug);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"trigger-before-download.deny-url\"))) {\n\t\t\t\tPATCH(deny_url);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"trigger-before-download.memcache-namespace\"))) {\n\t\t\t\tPATCH(mc_namespace);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"trigger-before-download.memcache-hosts\"))) {\n#if defined(USE_MEMCACHED)\n\t\t\t\tPATCH(memc);\n#endif\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\n#endif\n\nURIHANDLER_FUNC(mod_trigger_b4_dl_uri_handler) {\n#if defined(HAVE_PCRE_H)\n\tplugin_data *p = p_d;\n\tconst char *remote_ip;\n\tbuffer *vb;\n\n\tint n;\n# define N 10\n\tint ovec[N * 3];\n\n\tif (con->mode != DIRECT) return HANDLER_GO_ON;\n\n\tif (buffer_is_empty(con->uri.path)) return HANDLER_GO_ON;\n\n\tmod_trigger_b4_dl_patch_connection(srv, con, p);\n\n\tif (!p->conf.trigger_regex || !p->conf.download_regex) return HANDLER_GO_ON;\n\n# if !defined(HAVE_GDBM_H) && !defined(USE_MEMCACHED)\n\treturn HANDLER_GO_ON;\n# elif defined(HAVE_GDBM_H) && defined(USE_MEMCACHED)\n\tif (!p->conf.db && !p->conf.memc) return HANDLER_GO_ON;\n\tif (p->conf.db && p->conf.memc) {\n\t\t/* can't decide which one */\n\n\t\treturn HANDLER_GO_ON;\n\t}\n# elif defined(HAVE_GDBM_H)\n\tif (!p->conf.db) return HANDLER_GO_ON;\n# else\n\tif (!p->conf.memc) return HANDLER_GO_ON;\n# endif\n\n\tif (NULL != (vb = http_header_request_get(con, HTTP_HEADER_X_FORWARDED_FOR, CONST_STR_LEN(\"X-Forwarded-For\")))) {\n\t\t/* X-Forwarded-For contains the ip behind the proxy */\n\n\t\tremote_ip = vb->ptr;\n\n\t\t/* memcache can't handle spaces */\n\t} else {\n\t\tremote_ip = con->dst_addr_buf->ptr;\n\t}\n\n\tif (p->conf.debug) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\", \"(debug) remote-ip:\", remote_ip);\n\t}\n\n\t/* check if URL is a trigger -> insert IP into DB */\n\tif ((n = pcre_exec(p->conf.trigger_regex, NULL, CONST_BUF_LEN(con->uri.path), 0, 0, ovec, 3 * N)) < 0) {\n\t\tif (n != PCRE_ERROR_NOMATCH) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sd\",\n\t\t\t\t\t\"execution error while matching:\", n);\n\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\t} else {\n# if defined(HAVE_GDBM_H)\n\t\tif (p->conf.db) {\n\t\t\t/* the trigger matched */\n\t\t\tdatum key, val;\n\n\t\t\tkey.dptr = (char *)remote_ip;\n\t\t\tkey.dsize = strlen(remote_ip);\n\n\t\t\tval.dptr = (char *)&(srv->cur_ts);\n\t\t\tval.dsize = sizeof(srv->cur_ts);\n\n\t\t\tif (0 != gdbm_store(p->conf.db, key, val, GDBM_REPLACE)) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\t\"insert failed\");\n\t\t\t}\n\t\t}\n# endif\n# if defined(USE_MEMCACHED)\n\t\tif (p->conf.memc) {\n\t\t\tsize_t i, len;\n\t\t\tbuffer_copy_buffer(p->tmp_buf, p->conf.mc_namespace);\n\t\t\tbuffer_append_string(p->tmp_buf, remote_ip);\n\n\t\t\tlen = buffer_string_length(p->tmp_buf);\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tif (p->tmp_buf->ptr[i] == ' ') p->tmp_buf->ptr[i] = '-';\n\t\t\t}\n\n\t\t\tif (p->conf.debug) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\", \"(debug) triggered IP:\", p->tmp_buf);\n\t\t\t}\n\n\t\t\tif (MEMCACHED_SUCCESS != memcached_set(p->conf.memc,\n\t\t\t\t\tCONST_BUF_LEN(p->tmp_buf),\n\t\t\t\t\t(const char *)&(srv->cur_ts), sizeof(srv->cur_ts),\n\t\t\t\t\tp->conf.trigger_timeout, 0)) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"insert failed\");\n\t\t\t}\n\t\t}\n# endif\n\t}\n\n\t/* check if URL is a download -> check IP in DB, update timestamp */\n\tif ((n = pcre_exec(p->conf.download_regex, NULL, CONST_BUF_LEN(con->uri.path), 0, 0, ovec, 3 * N)) < 0) {\n\t\tif (n != PCRE_ERROR_NOMATCH) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sd\",\n\t\t\t\t\t\"execution error while matching: \", n);\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\t} else {\n\t\t/* the download uri matched */\n# if defined(HAVE_GDBM_H)\n\t\tif (p->conf.db) {\n\t\t\tdatum key, val;\n\t\t\ttime_t last_hit;\n\n\t\t\tkey.dptr = (char *)remote_ip;\n\t\t\tkey.dsize = strlen(remote_ip);\n\n\t\t\tval = gdbm_fetch(p->conf.db, key);\n\n\t\t\tif (val.dptr == NULL) {\n\t\t\t\t/* not found, redirect */\n\n\t\t\t\thttp_header_response_set(con, HTTP_HEADER_LOCATION, CONST_STR_LEN(\"Location\"), CONST_BUF_LEN(p->conf.deny_url));\n\t\t\t\tcon->http_status = 307;\n\t\t\t\tcon->file_finished = 1;\n\n\t\t\t\treturn HANDLER_FINISHED;\n\t\t\t}\n\n\t\t\tmemcpy(&last_hit, val.dptr, sizeof(time_t));\n\n\t\t\tfree(val.dptr);\n\n\t\t\tif (srv->cur_ts - last_hit > p->conf.trigger_timeout) {\n\t\t\t\t/* found, but timeout, redirect */\n\n\t\t\t\thttp_header_response_set(con, HTTP_HEADER_LOCATION, CONST_STR_LEN(\"Location\"), CONST_BUF_LEN(p->conf.deny_url));\n\t\t\t\tcon->http_status = 307;\n\t\t\t\tcon->file_finished = 1;\n\n\t\t\t\tif (p->conf.db) {\n\t\t\t\t\tif (0 != gdbm_delete(p->conf.db, key)) {\n\t\t\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\t\t\t\"delete failed\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn HANDLER_FINISHED;\n\t\t\t}\n\n\t\t\tval.dptr = (char *)&(srv->cur_ts);\n\t\t\tval.dsize = sizeof(srv->cur_ts);\n\n\t\t\tif (0 != gdbm_store(p->conf.db, key, val, GDBM_REPLACE)) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\t\"insert failed\");\n\t\t\t}\n\t\t}\n# endif\n\n# if defined(USE_MEMCACHED)\n\t\tif (p->conf.memc) {\n\t\t\tsize_t i, len;\n\n\t\t\tbuffer_copy_buffer(p->tmp_buf, p->conf.mc_namespace);\n\t\t\tbuffer_append_string(p->tmp_buf, remote_ip);\n\n\t\t\tlen = buffer_string_length(p->tmp_buf);\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tif (p->tmp_buf->ptr[i] == ' ') p->tmp_buf->ptr[i] = '-';\n\t\t\t}\n\n\t\t\tif (p->conf.debug) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\", \"(debug) checking IP:\", p->tmp_buf);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t *\n\t\t\t * memcached is do expiration for us, as long as we can fetch it every thing is ok\n\t\t\t * and the timestamp is updated\n\t\t\t *\n\t\t\t */\n\t\t\tif (MEMCACHED_SUCCESS != memcached_exist(p->conf.memc, CONST_BUF_LEN(p->tmp_buf))) {\n\t\t\t\thttp_header_response_set(con, HTTP_HEADER_LOCATION, CONST_STR_LEN(\"Location\"), CONST_BUF_LEN(p->conf.deny_url));\n\n\t\t\t\tcon->http_status = 307;\n\t\t\t\tcon->file_finished = 1;\n\n\t\t\t\treturn HANDLER_FINISHED;\n\t\t\t}\n\n\t\t\t/* set a new timeout */\n\t\t\tif (MEMCACHED_SUCCESS != memcached_set(p->conf.memc,\n\t\t\t\t\tCONST_BUF_LEN(p->tmp_buf),\n\t\t\t\t\t(const char *)&(srv->cur_ts), sizeof(srv->cur_ts),\n\t\t\t\t\tp->conf.trigger_timeout, 0)) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"insert failed\");\n\t\t\t}\n\t\t}\n# endif\n\t}\n\n#else\n\tUNUSED(srv);\n\tUNUSED(con);\n\tUNUSED(p_d);\n#endif\n\n\treturn HANDLER_GO_ON;\n}\n\n#if defined(HAVE_GDBM_H)\nTRIGGER_FUNC(mod_trigger_b4_dl_handle_trigger) {\n\tplugin_data *p = p_d;\n\tsize_t i;\n\n\t/* check DB each minute */\n\tif (srv->cur_ts % 60 != 0) return HANDLER_GO_ON;\n\n\t/* cleanup */\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tplugin_config *s = p->config_storage[i];\n\t\tdatum key, val, okey;\n\n\t\tif (!s->db) continue;\n\n\t\tokey.dptr = NULL;\n\n\t\t/* according to the manual this loop + delete does delete all entries on its way\n\t\t *\n\t\t * we don't care as the next round will remove them. We don't have to perfect here.\n\t\t */\n\t\tfor (key = gdbm_firstkey(s->db); key.dptr; key = gdbm_nextkey(s->db, okey)) {\n\t\t\ttime_t last_hit;\n\t\t\tif (okey.dptr) {\n\t\t\t\tfree(okey.dptr);\n\t\t\t\tokey.dptr = NULL;\n\t\t\t}\n\n\t\t\tval = gdbm_fetch(s->db, key);\n\n\t\t\tmemcpy(&last_hit, val.dptr, sizeof(time_t));\n\n\t\t\tfree(val.dptr);\n\n\t\t\tif (srv->cur_ts - last_hit > s->trigger_timeout) {\n\t\t\t\tgdbm_delete(s->db, key);\n\t\t\t}\n\n\t\t\tokey = key;\n\t\t}\n\t\tif (okey.dptr) free(okey.dptr);\n\n\t\t/* reorg once a day */\n\t\tif ((srv->cur_ts % (60 * 60 * 24) != 0)) gdbm_reorganize(s->db);\n\t}\n\treturn HANDLER_GO_ON;\n}\n#endif\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_trigger_b4_dl_plugin_init(plugin *p);\nint mod_trigger_b4_dl_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"trigger_b4_dl\");\n\n\tp->init        = mod_trigger_b4_dl_init;\n\tp->handle_uri_clean  = mod_trigger_b4_dl_uri_handler;\n\tp->set_defaults  = mod_trigger_b4_dl_set_defaults;\n#if defined(HAVE_GDBM_H)\n\tp->handle_trigger  = mod_trigger_b4_dl_handle_trigger;\n#endif\n\tp->cleanup     = mod_trigger_b4_dl_free;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_flv_streaming.c": "#include \"first.h\"\n\n#include \"base.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n#include \"http_chunk.h\"\n#include \"http_header.h\"\n\n#include \"plugin.h\"\n\n#include <stdlib.h>\n#include <string.h>\n\n/* plugin config for all request/connections */\n\ntypedef struct {\n\tarray *extensions;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\tplugin_config **config_storage;\n\tplugin_config conf;\n} plugin_data;\n\n/* init the plugin data */\nINIT_FUNC(mod_flv_streaming_init) {\n\treturn calloc(1, sizeof(plugin_data));\n}\n\n/* detroy the plugin data */\nFREE_FUNC(mod_flv_streaming_free) {\n\tplugin_data *p = p_d;\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tfor (size_t i = 0; i < srv->config_context->used; ++i) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\t\t\tif (NULL == s) continue;\n\t\t\tarray_free(s->extensions);\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\tfree(p);\n\tUNUSED(srv);\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\n\nSETDEFAULTS_FUNC(mod_flv_streaming_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\tconfig_values_t cv[] = {\n\t\t{ \"flv-streaming.extensions\",   NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 0 */\n\t\t{ NULL,                         NULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->extensions     = array_init();\n\n\t\tcv[0].destination = s->extensions;\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (!array_is_vlist(s->extensions)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for flv-streaming.extensions; expected list of \\\"ext\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_flv_streaming_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(extensions);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"flv-streaming.extensions\"))) {\n\t\t\t\tPATCH(extensions);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\nstatic int split_get_params(array *get_params, buffer *qrystr) {\n\tsize_t is_key = 1, klen = 0;\n\tchar *key = qrystr->ptr, *val = NULL;\n\n\tif (buffer_string_is_empty(qrystr)) return 0;\n\tfor (size_t i = 0, len = buffer_string_length(qrystr); i <= len; ++i) {\n\t\tswitch(qrystr->ptr[i]) {\n\t\tcase '=':\n\t\t\tif (is_key) {\n\t\t\t\tval = qrystr->ptr + i + 1;\n\t\t\t\tklen = (size_t)(qrystr->ptr + i - key);\n\t\t\t\tis_key = 0;\n\t\t\t}\n\n\t\t\tbreak;\n\t\tcase '&':\n\t\tcase '\\0': /* fin symbol */\n\t\t\tif (!is_key) {\n\t\t\t\t/* we need at least a = since the last & */\n\t\t\t\tarray_insert_key_value(get_params, key, klen, val, qrystr->ptr + i - val);\n\t\t\t}\n\n\t\t\tkey = qrystr->ptr + i + 1;\n\t\t\tval = NULL;\n\t\t\tis_key = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nURIHANDLER_FUNC(mod_flv_streaming_path_handler) {\n\tplugin_data *p = p_d;\n\n\tif (con->mode != DIRECT) return HANDLER_GO_ON;\n\tif (buffer_string_is_empty(con->physical.path)) return HANDLER_GO_ON;\n\n\tmod_flv_streaming_patch_connection(srv, con, p);\n\n\tif (!array_match_value_suffix(p->conf.extensions, con->physical.path)) {\n\t\t/* not found */\n\t\treturn HANDLER_GO_ON;\n\t}\n\n\t{\n\t\t\tdata_string *get_param;\n\t\t\toff_t start = 0, len = -1;\n\t\t\tchar *err = NULL;\n\t\t\t/* if there is a start=[0-9]+ in the header use it as start,\n\t\t\t * otherwise set start to beginning of file */\n\t\t\t/* if there is a end=[0-9]+ in the header use it as end pos,\n\t\t\t * otherwise send rest of file, starting from start */\n\n\t\t\tarray_reset_data_strings(srv->split_vals);\n\t\t\tsplit_get_params(srv->split_vals, con->uri.query);\n\n\t\t\tif (NULL != (get_param = (data_string *)array_get_element_klen(srv->split_vals, CONST_STR_LEN(\"start\")))) {\n\t\t\t\tif (buffer_string_is_empty(get_param->value)) return HANDLER_GO_ON;\n\t\t\t\tstart = strtoll(get_param->value->ptr, &err, 10);\n\t\t\t\tif (*err != '\\0') return HANDLER_GO_ON;\n\t\t\t\tif (start < 0) return HANDLER_GO_ON;\n\t\t\t}\n\n\t\t\tif (NULL != (get_param = (data_string *)array_get_element_klen(srv->split_vals, CONST_STR_LEN(\"end\")))) {\n\t\t\t\toff_t end;\n\t\t\t\tif (buffer_string_is_empty(get_param->value)) return HANDLER_GO_ON;\n\t\t\t\tend = strtoll(get_param->value->ptr, &err, 10);\n\t\t\t\tif (*err != '\\0') return HANDLER_GO_ON;\n\t\t\t\tif (end < 0) return HANDLER_GO_ON;\n\t\t\t\tlen = (start < end ? end - start : start - end) + 1;\n\t\t\t}\n\t\t\telse if (0 == start) {\n\t\t\t\treturn HANDLER_GO_ON;\n\t\t\t}\n\n\t\t\t/* let's build a flv header */\n\t\t\thttp_chunk_append_mem(srv, con, CONST_STR_LEN(\"FLV\\x1\\x1\\0\\0\\0\\x9\\0\\0\\0\\x9\"));\n\t\t\tif (0 != http_chunk_append_file_range(srv, con, con->physical.path, start, len)) {\n\t\t\t\tchunkqueue_reset(con->write_queue);\n\t\t\t\treturn HANDLER_GO_ON;\n\t\t\t}\n\n\t\t\thttp_header_response_set(con, HTTP_HEADER_CONTENT_TYPE, CONST_STR_LEN(\"Content-Type\"), CONST_STR_LEN(\"video/x-flv\"));\n\t\t\tcon->file_finished = 1;\n\t\t\treturn HANDLER_FINISHED;\n\t}\n}\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_flv_streaming_plugin_init(plugin *p);\nint mod_flv_streaming_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"flv_streaming\");\n\n\tp->init        = mod_flv_streaming_init;\n\tp->handle_physical = mod_flv_streaming_path_handler;\n\tp->set_defaults  = mod_flv_streaming_set_defaults;\n\tp->cleanup     = mod_flv_streaming_free;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_expire.c": "#include \"first.h\"\n\n#include \"base.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n#include \"http_header.h\"\n\n#include \"plugin.h\"\n#include \"stat_cache.h\"\n\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n/**\n * this is a expire module for a lighttpd\n *\n * set 'Expires:' HTTP Headers on demand\n */\n\n\n\n/* plugin config for all request/connections */\n\ntypedef struct {\n\tarray *expire_url;\n\tarray *expire_mimetypes;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\n\tbuffer *expire_tstmp;\n\n\tplugin_config **config_storage;\n\n\tplugin_config conf;\n} plugin_data;\n\n/* init the plugin data */\nINIT_FUNC(mod_expire_init) {\n\tplugin_data *p;\n\n\tp = calloc(1, sizeof(*p));\n\n\tp->expire_tstmp = buffer_init();\n\n\tbuffer_string_prepare_copy(p->expire_tstmp, 255);\n\n\treturn p;\n}\n\n/* detroy the plugin data */\nFREE_FUNC(mod_expire_free) {\n\tplugin_data *p = p_d;\n\n\tUNUSED(srv);\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tbuffer_free(p->expire_tstmp);\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (NULL == s) continue;\n\n\t\t\tarray_free(s->expire_url);\n\t\t\tarray_free(s->expire_mimetypes);\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\nstatic int mod_expire_get_offset(server *srv, plugin_data *p, buffer *expire, time_t *offset) {\n\tchar *ts;\n\tint type = -1;\n\ttime_t retts = 0;\n\n\tUNUSED(p);\n\n\t/*\n\t * parse\n\t *\n\t * '(access|now|modification) [plus] {<num> <type>}*'\n\t *\n\t * e.g. 'access 1 years'\n\t */\n\n\tif (buffer_string_is_empty(expire)) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\"empty:\");\n\t\treturn -1;\n\t}\n\n\tts = expire->ptr;\n\n\tif (0 == strncmp(ts, \"access \", 7)) {\n\t\ttype  = 0;\n\t\tts   += 7;\n\t} else if (0 == strncmp(ts, \"now \", 4)) {\n\t\ttype  = 0;\n\t\tts   += 4;\n\t} else if (0 == strncmp(ts, \"modification \", 13)) {\n\t\ttype  = 1;\n\t\tts   += 13;\n\t} else {\n\t\t/* invalid type-prefix */\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\",\n\t\t\t\t\"invalid <base>:\", ts);\n\t\treturn -1;\n\t}\n\n\tif (0 == strncmp(ts, \"plus \", 5)) {\n\t\t/* skip the optional plus */\n\t\tts   += 5;\n\t}\n\n\t/* the rest is just <number> (years|months|weeks|days|hours|minutes|seconds) */\n\twhile (1) {\n\t\tchar *space, *err;\n\t\tint num;\n\n\t\tif (NULL == (space = strchr(ts, ' '))) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\",\n\t\t\t\t\t\"missing space after <num>:\", ts);\n\t\t\treturn -1;\n\t\t}\n\n\t\tnum = strtol(ts, &err, 10);\n\t\tif (*err != ' ') {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\",\n\t\t\t\t\t\"missing <type> after <num>:\", ts);\n\t\t\treturn -1;\n\t\t}\n\n\t\tts = space + 1;\n\n\t\tif (NULL != (space = strchr(ts, ' '))) {\n\t\t\tint slen;\n\t\t\t/* */\n\n\t\t\tslen = space - ts;\n\n\t\t\tif (slen == 5 &&\n\t\t\t    0 == strncmp(ts, \"years\", slen)) {\n\t\t\t\tnum *= 60 * 60 * 24 * 30 * 12;\n\t\t\t} else if (slen == 6 &&\n\t\t\t\t   0 == strncmp(ts, \"months\", slen)) {\n\t\t\t\tnum *= 60 * 60 * 24 * 30;\n\t\t\t} else if (slen == 5 &&\n\t\t\t\t   0 == strncmp(ts, \"weeks\", slen)) {\n\t\t\t\tnum *= 60 * 60 * 24 * 7;\n\t\t\t} else if (slen == 4 &&\n\t\t\t\t   0 == strncmp(ts, \"days\", slen)) {\n\t\t\t\tnum *= 60 * 60 * 24;\n\t\t\t} else if (slen == 5 &&\n\t\t\t\t   0 == strncmp(ts, \"hours\", slen)) {\n\t\t\t\tnum *= 60 * 60;\n\t\t\t} else if (slen == 7 &&\n\t\t\t\t   0 == strncmp(ts, \"minutes\", slen)) {\n\t\t\t\tnum *= 60;\n\t\t\t} else if (slen == 7 &&\n\t\t\t\t   0 == strncmp(ts, \"seconds\", slen)) {\n\t\t\t\tnum *= 1;\n\t\t\t} else {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\",\n\t\t\t\t\t\t\"unknown type:\", ts);\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tretts += num;\n\n\t\t\tts = space + 1;\n\t\t} else {\n\t\t\tif (0 == strcmp(ts, \"years\")) {\n\t\t\t\tnum *= 60 * 60 * 24 * 30 * 12;\n\t\t\t} else if (0 == strcmp(ts, \"months\")) {\n\t\t\t\tnum *= 60 * 60 * 24 * 30;\n\t\t\t} else if (0 == strcmp(ts, \"weeks\")) {\n\t\t\t\tnum *= 60 * 60 * 24 * 7;\n\t\t\t} else if (0 == strcmp(ts, \"days\")) {\n\t\t\t\tnum *= 60 * 60 * 24;\n\t\t\t} else if (0 == strcmp(ts, \"hours\")) {\n\t\t\t\tnum *= 60 * 60;\n\t\t\t} else if (0 == strcmp(ts, \"minutes\")) {\n\t\t\t\tnum *= 60;\n\t\t\t} else if (0 == strcmp(ts, \"seconds\")) {\n\t\t\t\tnum *= 1;\n\t\t\t} else {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\",\n\t\t\t\t\t\t\"unknown type:\", ts);\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tretts += num;\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (offset != NULL) *offset = retts;\n\n\treturn type;\n}\n\n\n/* handle plugin config and check values */\n\nSETDEFAULTS_FUNC(mod_expire_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0, k;\n\n\tconfig_values_t cv[] = {\n\t\t{ \"expire.url\",                 NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 0 */\n\t\t{ \"expire.mimetypes\",           NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 1 */\n\t\t{ NULL,                         NULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->expire_url    = array_init();\n\t\ts->expire_mimetypes = array_init();\n\n\t\tcv[0].destination = s->expire_url;\n\t\tcv[1].destination = s->expire_mimetypes;\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (!array_is_kvstring(s->expire_url)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for expire.url; expected list of \\\"urlpath\\\" => \\\"expiration\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tfor (k = 0; k < s->expire_url->used; k++) {\n\t\t\tdata_string *ds = (data_string *)s->expire_url->data[k];\n\n\t\t\t/* parse lines */\n\t\t\tif (-1 == mod_expire_get_offset(srv, p, ds->value, NULL)) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\t\t\"parsing expire.url failed:\", ds->value);\n\t\t\t\treturn HANDLER_ERROR;\n\t\t\t}\n\t\t}\n\n\t\tif (!array_is_kvstring(s->expire_mimetypes)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for expire.mimetypes; expected list of \\\"mimetype\\\" => \\\"expiration\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tfor (k = 0; k < s->expire_mimetypes->used; k++) {\n\t\t\tdata_string *ds = (data_string *)s->expire_mimetypes->data[k];\n\t\t\tsize_t klen = buffer_string_length(ds->key);\n\n\t\t\t/*(omit trailing '*', if present, from prefix match)*/\n\t\t\t/*(not usually a good idea to modify array keys\n\t\t\t * since doing so might break array_get_element_klen() search,\n\t\t\t * but array use in this module only walks array)*/\n\t\t\tif (klen && ds->key->ptr[klen-1] == '*') buffer_string_set_length(ds->key, klen-1);\n\n\t\t\t/* parse lines */\n\t\t\tif (-1 == mod_expire_get_offset(srv, p, ds->value, NULL)) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\t\t\"parsing expire.mimetypes failed:\", ds->value);\n\t\t\t\treturn HANDLER_ERROR;\n\t\t\t}\n\t\t}\n\t}\n\n\n\treturn HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_expire_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(expire_url);\n\tPATCH(expire_mimetypes);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"expire.url\"))) {\n\t\t\t\tPATCH(expire_url);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"expire.mimetypes\"))) {\n\t\t\t\tPATCH(expire_mimetypes);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\nCONNECTION_FUNC(mod_expire_handler) {\n\tplugin_data *p = p_d;\n\tbuffer *vb;\n\tdata_string *ds;\n\n\t/* Add caching headers only to http_status 200 OK or 206 Partial Content */\n\tif (con->http_status != 200 && con->http_status != 206) return HANDLER_GO_ON;\n\t/* Add caching headers only to GET or HEAD requests */\n\tif (   con->request.http_method != HTTP_METHOD_GET\n\t    && con->request.http_method != HTTP_METHOD_HEAD) return HANDLER_GO_ON;\n\t/* Add caching headers only if not already present */\n\tvb = http_header_response_get(con, HTTP_HEADER_CACHE_CONTROL, CONST_STR_LEN(\"Cache-Control\"));\n\tif (NULL != vb) return HANDLER_GO_ON;\n\n\tif (buffer_is_empty(con->uri.path)) return HANDLER_GO_ON;\n\n\tmod_expire_patch_connection(srv, con, p);\n\n\t/* check expire.url */\n\tds = (data_string *)array_match_key_prefix(p->conf.expire_url, con->uri.path);\n\tif (NULL != ds) {\n\t\tvb = ds->value;\n\t}\n\telse {\n\t\t/* check expire.mimetypes (if no match with expire.url) */\n\t\tvb = http_header_response_get(con, HTTP_HEADER_CONTENT_TYPE, CONST_STR_LEN(\"Content-Type\"));\n\t\tds = (NULL != vb)\n\t\t   ? (data_string *)array_match_key_prefix(p->conf.expire_mimetypes, vb)\n\t\t   : (data_string *)array_get_element_klen(p->conf.expire_mimetypes, CONST_STR_LEN(\"\"));\n\t\tif (NULL == ds) return HANDLER_GO_ON;\n\t\tvb = ds->value;\n\t}\n\n\tif (NULL != vb) {\n\t\t\ttime_t ts, expires;\n\t\t\tstat_cache_entry *sce = NULL;\n\n\t\t\tswitch(mod_expire_get_offset(srv, p, vb, &ts)) {\n\t\t\tcase 0:\n\t\t\t\t/* access */\n\t\t\t\texpires = (ts + srv->cur_ts);\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\t/* modification */\n\n\t\t\t\t/* if stat fails => sce == NULL, ignore return value */\n\t\t\t\t(void) stat_cache_get_entry(srv, con, con->physical.path, &sce);\n\n\t\t\t\t/* can't set modification based expire header if\n\t\t\t\t * mtime is not available\n\t\t\t\t */\n\t\t\t\tif (NULL == sce) return HANDLER_GO_ON;\n\n\t\t\t\texpires = (ts + sce->st.st_mtime);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t/* -1 is handled at parse-time */\n\t\t\t\treturn HANDLER_ERROR;\n\t\t\t}\n\n\t\t\t/* expires should be at least srv->cur_ts */\n\t\t\tif (expires < srv->cur_ts) expires = srv->cur_ts;\n\n\t\t\tbuffer_clear(p->expire_tstmp);\n\t\t\tbuffer_append_strftime(p->expire_tstmp, \"%a, %d %b %Y %H:%M:%S GMT\", gmtime(&(expires)));\n\n\t\t\t/* HTTP/1.0 */\n\t\t\thttp_header_response_set(con, HTTP_HEADER_OTHER, CONST_STR_LEN(\"Expires\"), CONST_BUF_LEN(p->expire_tstmp));\n\n\t\t\t/* HTTP/1.1 */\n\t\t\tbuffer_copy_string_len(p->expire_tstmp, CONST_STR_LEN(\"max-age=\"));\n\t\t\tbuffer_append_int(p->expire_tstmp, expires - srv->cur_ts); /* as expires >= srv->cur_ts the difference is >= 0 */\n\n\t\t\thttp_header_response_set(con, HTTP_HEADER_CACHE_CONTROL, CONST_STR_LEN(\"Cache-Control\"), CONST_BUF_LEN(p->expire_tstmp));\n\n\t\t\treturn HANDLER_GO_ON;\n\t}\n\n\t/* not found */\n\treturn HANDLER_GO_ON;\n}\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_expire_plugin_init(plugin *p);\nint mod_expire_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"expire\");\n\n\tp->init        = mod_expire_init;\n\tp->handle_response_start = mod_expire_handler;\n\tp->set_defaults  = mod_expire_set_defaults;\n\tp->cleanup     = mod_expire_free;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/meson.build": "sbinddir = join_paths(get_option('prefix'), get_option('sbindir'))\nmoduledir = join_paths(get_option('prefix'), get_option('moduledir'))\n\ninclude_base_paths = [\n\t'/usr/include',\n\t'/usr/local/include',\n#\t'/opt/local/include',\n]\n\ndefs = [\n\t'-D_FILE_OFFSET_BITS=64',\n\t'-D_LARGEFILE_SOURCE',\n\t'-D_LARGE_FILES',\n\t'-D_GNU_SOURCE',\n]\n\nlibws2_32 = []\nif target_machine.system() == 'windows'\n\tlibws2_32 = [ compiler.find_library('ws2_32') ]\n\tdefs += [\n\t\t'-DNVALGRIND',\n\t]\nendif\n\n\ncompiler = meson.get_compiler('c')\nconf_data = configuration_data()\n\nconf_data.set('HAVE_SYS_DEVPOLL_H', compiler.has_header('sys/devpoll.h'))\nconf_data.set('HAVE_SYS_EPOLL_H', compiler.has_header('sys/epoll.h'))\nconf_data.set('HAVE_SYS_EVENT_H', compiler.has_header('sys/event.h'))\nconf_data.set('HAVE_SYS_MMAN_H', compiler.has_header('sys/mman.h'))\nconf_data.set('HAVE_SYS_POLL_H', compiler.has_header('sys/poll.h'))\nconf_data.set('HAVE_SYS_PORT_H', compiler.has_header('sys/port.h'))\nconf_data.set('HAVE_SYS_PRCTL_H', compiler.has_header('sys/prctl.h'))\nconf_data.set('HAVE_SYS_RESOURCE_H', compiler.has_header('sys/resource.h'))\nconf_data.set('HAVE_SYS_SENDFILE_H', compiler.has_header('sys/sendfile.h'))\nconf_data.set('HAVE_SYS_SELECT_H', compiler.has_header('sys/select.h'))\nconf_data.set('HAVE_SYS_TYPES_H', compiler.has_header('sys/types.h'))\nconf_data.set('HAVE_SYS_UIO_H', compiler.has_header('sys/uio.h'))\nconf_data.set('HAVE_SYS_UN_H', compiler.has_header('sys/un.h'))\nconf_data.set('HAVE_SYS_WAIT_H', compiler.has_header('sys/wait.h'))\nconf_data.set('HAVE_SYS_TIME_H', compiler.has_header('sys/time.h'))\nconf_data.set('HAVE_UNISTD_H', compiler.has_header('unistd.h'))\nconf_data.set('HAVE_PTHREAD_H', compiler.has_header('pthread.h'))\nconf_data.set('HAVE_GETOPT_H', compiler.has_header('getopt.h'))\nconf_data.set('HAVE_INTTYPES_H', compiler.has_header('inttypes.h'))\nconf_data.set('HAVE_POLL_H', compiler.has_header('poll.h'))\nconf_data.set('HAVE_PWD_H', compiler.has_header('pwd.h'))\nconf_data.set('HAVE_STDDEF_H', compiler.has_header('stddef.h'))\nconf_data.set('HAVE_STDINT_H', compiler.has_header('stdint.h'))\nconf_data.set('HAVE_STRINGS_H', compiler.has_header('strings.h'))\nconf_data.set('HAVE_SYSLOG_H', compiler.has_header('syslog.h'))\n\n# check for fastcgi lib, for the tests only\nconf_data.set('HAVE_FASTCGI_H', compiler.has_header('fastcgi.h'))\nif not(conf_data.get('HAVE_FASTCGI_H'))\n\tconf_data.set('HAVE_FASTCGI_FASTCGI_H', compiler.has_header('fastcgi/fastcgi.h'))\nendif\n\n# will be needed for auth\nconf_data.set('HAVE_CRYPT_H', compiler.has_header('crypt.h'))\nif conf_data.get('HAVE_CRYPT_H')\n\t# check if we need libcrypt for crypt_r / crypt\n\n\t# crypt_r in default libs?\n\tif compiler.has_function('crypt_r', args: defs, prefix: '#include <crypt.h>')\n\t\tlibcrypt = []\n\t\tconf_data.set('HAVE_CRYPT_R', 1)\n\t# crypt_r in -lcrypt ?\n\telif compiler.has_function('crypt_r', args: defs + ['-lcrypt'], prefix: '#include <crypt.h>')\n\t\tlibcrypt = [ compiler.find_library('crypt') ]\n\t\tconf_data.set('HAVE_CRYPT_R', 1)\n\t# crypt in default libs?\n\telif compiler.has_function('crypt', args: defs, prefix: '#include <crypt.h>')\n\t\tlibcrypt = []\n\t\tconf_data.set('HAVE_CRYPT', 1)\n\t# crypt in -lcrypt ?\n\telif compiler.has_function('crypt', args: defs + ['-lcrypt'], prefix: '#include <crypt.h>')\n\t\tlibcrypt = [ compiler.find_library('crypt') ]\n\t\tconf_data.set('HAVE_CRYPT', 1)\n\tendif\nendif\n\nconf_data.set('HAVE_SYS_INOTIFY_H', compiler.has_header('sys/inotify.h'))\nif conf_data.get('HAVE_SYS_INOTIFY_H')\n\tconf_data.set('HAVE_INOTIFY_INIT', compiler.has_function('inotify_init', args: defs))\nendif\n\nconf_data.set('HAVE_SOCKLEN_T', compiler.has_type('socklen_t', args: defs, prefix: '#include <sys/socket.h>'))\n\nconf_data.set('HAVE_SYS_RANDOM_H', compiler.has_header('sys/random.h'))\nif conf_data.get('HAVE_SYS_RANDOM_H')\n\tconf_data.set('HAVE_GETENTROPY', compiler.has_function(\n\t\t'getentropy',\n\t\targs: defs,\n\t\tprefix: '#include <sys/random.h>'\n\t))\nendif\n\nconf_data.set('HAVE_LINUX_RANDOM_H', compiler.has_header('linux/random.h'))\nif conf_data.get('HAVE_LINUX_RANDOM_H')\n\tconf_data.set('HAVE_GETRANDOM', compiler.has_function(\n\t\t'getrandom',\n\t\targs: defs,\n\t\tprefix: '#include <linux/random.h>'\n\t))\nendif\n\nconf_data.set('SIZEOF_LONG', compiler.sizeof('long', args: defs))\nconf_data.set('SIZEOF_OFF_T', compiler.sizeof('off_t', args: defs))\n\nconf_data.set('HAVE_ARC4RANDOM_BUF', compiler.has_function('arc4random_buf', args: defs))\nconf_data.set('HAVE_CHROOT', compiler.has_function('chroot', args: defs))\nconf_data.set('HAVE_EPOLL_CTL', compiler.has_function('epoll_ctl', args: defs))\nconf_data.set('HAVE_FORK', compiler.has_function('fork', args: defs))\nconf_data.set('HAVE_GETLOADAVG', compiler.has_function('getloadavg', args: defs))\nconf_data.set('HAVE_GETRLIMIT', compiler.has_function('getrlimit', args: defs))\nconf_data.set('HAVE_GETUID', compiler.has_function('getuid', args: defs))\nconf_data.set('HAVE_GMTIME_R', compiler.has_function('gmtime_r', args: defs))\nconf_data.set('HAVE_INET_NTOP', compiler.has_function('inet_ntop', args: defs))\nconf_data.set('HAVE_JRAND48', compiler.has_function('jrand48', args: defs))\nconf_data.set('HAVE_KQUEUE', compiler.has_function('kqueue', args: defs))\nconf_data.set('HAVE_LOCALTIME_R', compiler.has_function('localtime_r', args: defs))\nconf_data.set('HAVE_LSTAT', compiler.has_function('lstat', args: defs))\nconf_data.set('HAVE_MADVISE', compiler.has_function('madvise', args: defs))\nconf_data.set('HAVE_MEMCPY', compiler.has_function('memcpy', args: defs))\nconf_data.set('HAVE_MEMSET', compiler.has_function('memset', args: defs))\nconf_data.set('HAVE_MMAP', compiler.has_function('mmap', args: defs))\nconf_data.set('HAVE_PATHCONF', compiler.has_function('pathconf', args: defs))\nconf_data.set('HAVE_PIPE2', compiler.has_function('pipe2', args: defs))\nconf_data.set('HAVE_POLL', compiler.has_function('poll', args: defs))\nconf_data.set('HAVE_PORT_CREATE', compiler.has_function('port_create', args: defs))\nconf_data.set('HAVE_PRCTL', compiler.has_function('prctl', args: defs))\nconf_data.set('HAVE_PREAD', compiler.has_function('pread', args: defs))\nconf_data.set('HAVE_POSIX_FADVISE', compiler.has_function('posix_fadvise', args: defs))\nconf_data.set('HAVE_SELECT', compiler.has_function('select', args: defs))\nconf_data.set('HAVE_SENDFILE', compiler.has_function('sendfile', args: defs))\nconf_data.set('HAVE_SEND_FILE', compiler.has_function('send_file', args: defs))\nconf_data.set('HAVE_SENDFILE64', compiler.has_function('sendfile64', args: defs))\nconf_data.set('HAVE_SENDFILEV', compiler.has_function('sendfilev', args: defs))\nconf_data.set('HAVE_SIGACTION', compiler.has_function('sigaction', args: defs))\nconf_data.set('HAVE_SIGNAL', compiler.has_function('signal', args: defs))\nconf_data.set('HAVE_SIGTIMEDWAIT', compiler.has_function('sigtimedwait', args: defs))\nconf_data.set('HAVE_SRANDOM', compiler.has_function('srandom', args: defs))\nconf_data.set('HAVE_STRPTIME', compiler.has_function('strptime', args: defs))\nconf_data.set('HAVE_SYSLOG', compiler.has_function('syslog', args: defs))\nconf_data.set('HAVE_WRITEV', compiler.has_function('writev', args: defs))\nconf_data.set('HAVE_INET_ATON', compiler.has_function('inet_aton', args: defs))\nconf_data.set('HAVE_ISSETUGID', compiler.has_function('issetugid', args: defs))\nconf_data.set('HAVE_INET_PTON', compiler.has_function('inet_pton', args: defs))\nconf_data.set('HAVE_MEMSET_S', compiler.has_function('memset_s', args: defs))\nconf_data.set('HAVE_EXPLICIT_BZERO', compiler.has_function('explicit_bzero', args: defs))\n\nconf_data.set('HAVE_CLOCK_GETTIME', compiler.has_header_symbol('time.h', 'clock_gettime'))\nclock_lib = []\nif not(conf_data.get('HAVE_CLOCK_GETTIME'))\n\tif compiler.has_function('clock_gettime', args: defs + ['-lrt'], prefix: '#include <time.h>')\n\t\tconf_data.set('HAVE_CLOCK_GETTIME', true)\n\t\tclock_lib = [ compiler.find_library('rt') ]\n\tendif\nendif\n\nlibelftc = []\nif compiler.has_function('elftc_copyfile', args: defs + ['-lelftc'], prefix: '#include <libelftc.h>')\n\tconf_data.set('HAVE_ELFTC_COPYFILE', true)\n\tlibelftc = [ compiler.find_library('elftc') ]\nendif\n\nconf_data.set('HAVE_IPV6', compiler.compiles('''\n\t#include <sys/types.h>\n\t#include <sys/socket.h>\n\t#include <netinet/in.h>\n\n\tint main() {\n\t\tstruct sockaddr_in6 s; struct in6_addr t=in6addr_any; int i=AF_INET6; s; t.s6_addr[0] = 0;\n\t\treturn 0;\n\t}\n''',\n\tname: 'IPv6 support',\n\targs: defs\n))\n\nconf_data.set('HAVE_WEAK_SYMBOLS', compiler.compiles('''\n\t__attribute__((weak)) void __dummy(void *x) { }\n\tint main() {\n\t\tvoid *x;\n\t\t__dummy(x);\n\t}\n''',\n\tname: 'weak symbols',\n\targs: defs\n))\n\nconf_data.set('HAVE_STRUCT_TM_GMTOFF', compiler.compiles('''\n\t#include <time.h>\n\tint main(void) {\n\t\tstruct tm t;\n\t\tt.tm_gmtoff = 0;\n\t\treturn 0;\n\t}\n''',\n\tname: 'struct tm gmt offset',\n\targs: defs\n))\n\nconf_data.set('LIGHTTPD_VERSION_ID', 10400)\nconf_data.set_quoted('PACKAGE_NAME', meson.project_name())\nconf_data.set_quoted('PACKAGE_VERSION', meson.project_version())\nconf_data.set_quoted('LIBRARY_DIR', moduledir)\n\nconf_data.set('LIGHTTPD_STATIC', get_option('build_static'))\nlibdl = []\nif not(get_option('build_static'))\n\tif target_machine.system() != 'windows'\n\t\tlibdl = [ compiler.find_library('dl') ]\n\t\tif not(compiler.has_function('dlopen', args: defs, dependencies: libdl, prefix: '#include <dlfcn.h>'))\n\t\t\terror('Couldn\\'t find dlfcn.h or dlopen in lib dl')\n\t\tendif\n\tendif\nendif\n\nlibbz2 = []\nif get_option('with_bzip')\n\tlibbz2 = [ compiler.find_library('bz2') ]\n\tif compiler.has_function('BZ2_bzCompress', args: defs, dependencies: libbz2, prefix: '#include <bzlib.h>')\n\t\tconf_data.set('HAVE_BZLIB_H', true)\n\t\tconf_data.set('HAVE_LIBBZ2', true)\n\telse\n\t\terror('Couldn\\'t find bz2 header / library')\n\tendif\nendif\n\nif get_option('with_dbi')\n\tlibdbi = dependency('dbi', required: false)\n\tif libdbi.found()\n\t\tlibdbi = [ libdbi ]\n\telse\n\t\tlibdbi = [ compiler.find_library('dbi') ]\n\t\tif not(compiler.has_function('dbi_conn_connect', args: defs, dependencies: libdbi, prefix: '#include <dbi/dbi.h>'))\n\t\t\terror('Couldn\\'t find dbi/dbi.h or dbi_conn_connect in lib dbi')\n\t\tendif\n\tendif\n\tconf_data.set('HAVE_DBI', true)\nendif\n\nlibfam = []\nif get_option('with_fam')\n\tlibfam = [ compiler.find_library('fam') ]\n\tif not(compiler.has_function('FAMOpen2', args: defs, dependencies: libfam, prefix: '#include <fam.h>'))\n\t\terror('Couldn\\'t find fam.h or FAMOpen2 in lib fam')\n\tendif\n\tconf_data.set('HAVE_FAM_H', true)\nendif\n\nlibgeoip = []\nif get_option('with_geoip')\n\tlibgeoip = dependency('geoip', required: false)\n\tif libgeoip.found()\n\t\tlibgeoip = [ libgeoip ]\n\telse\n\t\tlibgeoip = [ compiler.find_library('GeoIP') ]\n\t\tif not(compiler.has_function('GeoIP_country_name_by_addr', args: defs, dependencies: libgeoip))\n\t\t\terror('Couldn\\'t find GeoIP_country_name_by_addr in lib GeoIP')\n\t\tendif\n\tendif\nendif\n\nlibgdbm = []\nif get_option('with_gdbm')\n\tlibgdbm = [ compiler.find_library('gdbm') ]\n\tif not(compiler.has_function('gdbm_open', args: defs, dependencies: libgdbm, prefix: '#include <gdbm.h>'))\n\t\terror('Couldn\\'t find gdbm.h or gdbm_open in lib gdbm')\n\tendif\n\tconf_data.set('HAVE_GDBM_H', true)\n\tconf_data.set('HAVE_GDBM', true)\nendif\n\nlibkrb5 = []\nlibgssapi_krb5 = []\nif get_option('with_krb5')\n\tlibkrb5 = dependency('krb5', required: false)\n\tif libkrb5.found()\n\t\tlibkrb5 = [ libkrb5 ]\n\telse\n\t\tlibkrb5 = [ compiler.find_library('krb5') ]\n\t\tif not(compiler.has_function('krb5_init_context', args: defs, dependencies: libkrb5))\n\t\t\terror('Couldn\\'t find krb5_init_context in lib krb5')\n\t\tendif\n\tendif\n\n\tlibgssapi_krb5 = dependency('krb5-gssapi', required: false)\n\tif libgssapi_krb5.found()\n\t\tlibgssapi_krb5 = [ libgssapi_krb5 ]\n\telse\n\t\tlibgssapi_krb5 = [ compiler.find_library('gssapi_krb5') ]\n\tendif\n\n\tconf_data.set('HAVE_KRB5', true)\nendif\n\nlibldap = []\nliblber = []\nif get_option('with_ldap')\n\tlibldap = [ compiler.find_library('ldap') ]\n\tif not(compiler.has_function('ldap_sasl_bind_s',\n\t\targs: defs,\n\t\tdependencies: libldap,\n\t\tprefix: '''\n\t\t\t#include <ldap.h>\n\t\t'''\n\t))\n\t\terror('Couldn\\'t find ldap.h or ldap_bind in lib libldap')\n\tendif\n\tconf_data.set('HAVE_LDAP_H', true)\n\tconf_data.set('HAVE_LIBLDAP', true)\n\tliblber = [ compiler.find_library('lber') ]\n\tif not(compiler.has_function('ber_printf', args: defs, dependencies: liblber, prefix: '#include <lber.h>'))\n\t\terror('Couldn\\'t find lber.h or ber_printf in lib liblber')\n\tendif\n\tconf_data.set('HAVE_LBER_H', true)\n\tconf_data.set('HAVE_LIBLBER', true)\nendif\n\nlibpam = []\nif get_option('with_pam')\n\tlibpam = [ compiler.find_library('pam') ]\n\tif not(compiler.has_function('pam_start',\n\t\targs: defs,\n\t\tdependencies: libpam,\n\t\tprefix: '''\n\t\t\t#include <security/pam_appl.h>\n\t\t'''\n\t))\n\t\terror('Couldn\\'t find security/pam_appl.h or pam_start in lib libpam')\n\tendif\n\tconf_data.set('HAVE_PAM', true)\nendif\n\nlibev = []\nif get_option('with_libev')\n\tlibev = dependency('ev', required: false)\n\tif libev.found()\n\t\tlibev = [ libev ]\n\telif compiler.has_header('ev.h') and compiler.has_function('ev_time', args: defs + ['-lev'])\n\t\tlibev = [ compiler.find_library('ev') ]\n\telse\n\t\terror('Couldn\\'t find libev header / library')\n\tendif\n\tconf_data.set('HAVE_LIBEV', true)\nendif\n\nlibunwind = []\nif get_option('with_libunwind')\n\tlibunwind = [ dependency('libunwind') ]\nendif\n\nliblua = []\nif get_option('with_lua')\n\tfound_lua = false\n\tforeach l: ['lua5.3', 'lua-5.3', 'lua5.2', 'lua-5.2', 'lua5.1', 'lua-5.1', 'lua']\n\t\tif not(found_lua)\n\t\t\tliblua = dependency(l, required: false)\n\t\t\tfound_lua = liblua.found()\n\t\tendif\n\tendforeach\n\tif not(found_lua)\n\t\terror('Couldn\\'t find any lua library')\n\tendif\n\tliblua = [ liblua ]\n\tconf_data.set('HAVE_LUA_H', true)\nendif\n\nlibmemcached = []\nif get_option('with_memcached')\n\t# manual search:\n\t# header: libmemcached/memcached.h\n\t# function: memcached (-lmemcached)\n\tlibmemcached = [ dependency('libmemcached') ]\n\tconf_data.set('USE_MEMCACHED', true)\nendif\n\nlibmysqlclient = []\nif get_option('with_mysql')\n\t# manual search: extend include path with 'mysql/'\n\t# header: mysql.h\n\t# function: mysql_real_connect (-lmariadb)\n\tlibmysqlclient = [ dependency('mariadb') ]\n\t#-# function: mysql_real_connect (-lmysqlclient)\n\t#-libmysqlclient = [ dependency('mysqlclient') ]\n\tconf_data.set('HAVE_MYSQL', true)\nendif\n\nlibssl = []\nlibcrypto = []\nif get_option('with_openssl')\n\t# manual search:\n\t# header: openssl/ssl.h\n\t# function: SSL_new (-lssl)\n\t# function: BIO_f_base64 (-lcrypto)\n\tlibssl = [ dependency('libssl') ]\n\tlibcrypto = [ dependency('libcrypto') ]\n\tconf_data.set('HAVE_OPENSSL_SSL_H', true)\n\tconf_data.set('HAVE_LIBSSL', true)\nendif\nif get_option('with_wolfssl') != 'false'\n\t# manual search:\n\t# header: wolfssl/ssl.h\n\t# function: wolfSSL_Init (-lwolfssl)\n\tp = get_option('with_wolfssl')\n\tif p == 'true'\n\t\tp = '/usr/local'\n\tendif\n\ti = include_directories(p+'/include', p+'/include/wolfssl')\n\tlibwolfssl_includes_dep = [ declare_dependency(include_directories: i) ]\n\tlibcrypto = [ compiler.find_library('libwolfssl', dirs: [ p+'/lib', p+'/lib64' ]) ]\n\tlibcrypto += libwolfssl_includes_dep\n\tconf_data.set('HAVE_WOLFSSL_SSL_H', true)\nendif\n\nlibpcre = []\nif get_option('with_pcre')\n\t# manual search:\n\t# header: pcre.h\n\t# function: pcre_exec (-lpcre)\n\tlibpcre = [ dependency('libpcre') ]\n\tconf_data.set('HAVE_PCRE_H', true)\n\tconf_data.set('HAVE_LIBPCRE', true)\nendif\n\nlibpq = []\nif get_option('with_pgsql')\n\t# manual search:\n\t# header: libpq-fe.h\n\t# function: PQsetdbLogin (-lpq)\n\tlibpq = [ dependency('libpq') ]\n\tconf_data.set('HAVE_PGSQL', true)\nendif\n\nif get_option('with_sasl')\n\tlibsasl = dependency('sasl2', required: false)\n\tif libsasl.found()\n\t\tlibsasl = [ libsasl2 ]\n\telse\n\t\tlibsasl = [ compiler.find_library('sasl2') ]\n\t\tif not(compiler.has_function('sasl_server_init', args: defs, dependencies: libsasl, prefix: '#include <sasl/sasl.h>'))\n\t\t\terror('Couldn\\'t find sasl/sasl.h or sasl_server_init in libsasl2')\n\t\tendif\n\tendif\n\tconf_data.set('HAVE_SASL', true)\nendif\n\n#if get_option('with_valgrind')\n#endif\n\nlibuuid = []\nif get_option('with_webdav_locks')\n\tlibuuid = dependency('uuid', required: false)\n\tif libuuid.found()\n\t\tlibuuid = [ libuuid ]\n\telif compiler.has_function('uuid_generate', args: defs, prefix: '#include <uuid/uuid.h>')\n\t\t# uuid_generate in libc, everything is fine, no lib needed\n\t\tlibuuid = []\n\telse\n\t\tlibuuid = compiler.find_library('uuid')\n\t\tif not(compiler.has_function('uuid_generate',\n\t\t\targs: defs,\n\t\t\tdependencies: libuuid,\n\t\t\tprefix: '#include <uuid/uuid.h>'\n\t\t))\n\t\t\terror('Couldn\\'t find uuid/uuid.h or uuid_generate in lib c and uuid')\n\t\tendif\n\tendif\n\tconf_data.set('HAVE_LIBUUID', true)\n\tconf_data.set('HAVE_UUID_UUID_H', true)\nendif\n\nlibxml2 = []\nlibsqlite3 = []\nif get_option('with_webdav_props')\n\tlibxml2 = dependency('libxml-2.0', required: false)\n\tif libxml2.found()\n\t\tlibxml2 = [ libxml2 ]\n\telse\n\t\tlibxml2_includes = []\n\t\tlibxml2_includes_dep = []\n\t\tlibxml2_found_header = compiler.has_header('libxml/tree.h')\n\t\tforeach i: include_base_paths\n\t\t\tif not(libxml2_found_header)\n\t\t\t\tmessage('Searching in ' + join_paths(i, 'libxml2'))\n\t\t\t\ti = include_directories(join_paths(i, 'libxml2'))\n\t\t\t\tif compiler.has_header('libxml/tree.h', include_directories: i)\n\t\t\t\t\tlibxml2_found_header = true\n\t\t\t\t\tlibxml2_includes = [ i ]\n\t\t\t\t\tlibxml2_includes_dep = [ declare_dependency(include_directories: i) ]\n\t\t\t\tendif\n\t\t\tendif\n\t\tendforeach\n\t\tif not(libxml2_found_header)\n\t\t\terror('Couldn\\'t find libxml/tree.h')\n\t\tendif\n\t\tlibxml2 = [ compiler.find_library('xml2') ]\n\t\tif not(compiler.has_function('xmlParseChunk',\n\t\t\targs: defs,\n\t\t\tdependencies: libxml2,\n\t\t\tinclude_directories: libxml2_includes,\n\t\t\tprefix: '''\n\t\t\t\t#include <libxml/tree.h>\n\t\t\t'''\n\t\t))\n\t\t\terror('Couldn\\'t find xmlParseChunk in lib xml2')\n\t\tendif\n\t\t# has_function doesn't like \"internal dependencies\"\n\t\tlibxml2 += libxml2_includes_dep\n\tendif\n\tconf_data.set('HAVE_LIBXML_H', true)\n\n\tlibsqlite3 = dependency('sqlite31', required: false)\n\tif libsqlite3.found()\n\t\tlibsqlite3 = [ libsqlite3 ]\n\telse\n\t\tlibsqlite3 = [ compiler.find_library('sqlite3') ]\n\t\tif not(compiler.has_function('sqlite3_reset',\n\t\t\targs: defs,\n\t\t\tdependencies: libsqlite3,\n\t\t\tprefix: '''\n\t\t\t\t#include <sqlite3.h>\n\t\t\t'''\n\t\t))\n\t\t\terror('Couldn\\'t find sqlite3.h or sqlite3_reset in lib sqlite3')\n\t\tendif\n\tendif\n\tconf_data.set('HAVE_SQLITE3_H', true)\nendif\n\nlibattr = []\nif get_option('with_xattr')\n\tlibattr = [ compiler.find_library('attr') ]\n\tif not(compiler.has_function('attr_get',\n\t\targs: defs,\n\t\tdependencies: libattr,\n\t\tprefix: '''\n\t\t\t#include <sys/types.h>\n\t\t\t#include <attr/attributes.h>\n\t\t'''\n\t))\n\t\terror('Couldn\\'t find attr/attributes.h or attr_get in lib attr')\n\tendif\n\tconf_data.set('HAVE_ATTR_ATTRIBUTES_H', true)\n\tconf_data.set('HAVE_XATTR', true)\nendif\n\nlibz = []\nif get_option('with_zlib')\n\tlibz = dependency('zlib', required: false)\n\tif libz.found()\n\t\tlibz = [ libz ]\n\telse\n\t\t# windows alternative names? 'zlib', 'zdll'\n\t\tlibz = [ compiler.find_library('z') ]\n\t\tif not(compiler.has_function('deflate', args: defs, dependencies: libz, prefix: '#include <zlib.h>'))\n\t\t\terror('Couldn\\'t find z header / library')\n\t\tendif\n\tendif\n\tconf_data.set('HAVE_ZLIB_H', true)\n\tconf_data.set('HAVE_LIBZ', true)\nendif\n\nconfigure_file(\n\toutput : 'config.h',\n\tconfiguration : conf_data,\n)\n\ncommon_src = [\n\t'algo_sha1.c',\n\t'array.c',\n\t'base64.c',\n\t'buffer.c',\n\t'burl.c',\n\t'chunk.c',\n\t'configfile-glue.c',\n\t'connections-glue.c',\n\t'crc32.c',\n\t'data_array.c',\n\t'data_config.c',\n\t'data_integer.c',\n\t'data_string.c',\n\t'etag.c',\n\t'fdevent_freebsd_kqueue.c',\n\t'fdevent_libev.c',\n\t'fdevent_linux_sysepoll.c',\n\t'fdevent_poll.c',\n\t'fdevent_select.c',\n\t'fdevent_solaris_devpoll.c',\n\t'fdevent_solaris_port.c',\n\t'fdevent.c',\n\t'gw_backend.c',\n\t'http_auth.c',\n\t'http_chunk.c',\n\t'http_header.c',\n\t'http_kv.c',\n\t'http_vhostdb.c',\n\t'http-header-glue.c',\n\t'joblist.c',\n\t'keyvalue.c',\n\t'log.c',\n\t'md5.c',\n\t'plugin.c',\n\t'rand.c',\n\t'request.c',\n\t'safe_memclear.c',\n\t'sock_addr.c',\n\t'splaytree.c',\n\t'stat_cache.c',\n\t'stream.c',\n\t'vector.c',\n]\nif target_machine.system() == 'windows'\n\tcommon_src += [ 'xgetopt.c' ]\nendif\nmain_src = [\n\t'configfile.c',\n\t'connections.c',\n\t'inet_ntop_cache.c',\n\t'network_write.c',\n\t'network.c',\n\t'response.c',\n\t'server.c',\n]\n\nlemon = executable('lemon',\n\tsources: 'lemon.c',\n\tnative: true,\n)\n# generator doesn't handle additional \"input dependencies\" like lempar.c\n# => use custom_target\nconfigparser = custom_target('configparser',\n\tinput:  ['configparser.y', 'lempar.c'],\n\toutput: ['configparser.c', 'configparser.h'],\n\tcommand: [lemon, '-q', 'o=@OUTDIR@', '@INPUT0@', '@INPUT1@'],\n)\nssi_exprparser = custom_target('mod_ssi_exprparser',\n\tinput:  ['mod_ssi_exprparser.y', 'lempar.c'],\n\toutput: ['mod_ssi_exprparser.c', 'mod_ssi_exprparser.h'],\n\tcommand: [lemon, '-q', 'o=@OUTDIR@', '@INPUT0@', '@INPUT1@'],\n)\n\ncommon_cflags = defs + [\n\t'-DHAVE_CONFIG_H',\n]\n\nif compiler.get_id() == 'gcc' or compiler.get_id() == 'clang'\n\tcommon_cflags += [\n\t\t'-Wall',\n\t\t'-g',\n\t\t'-Wshadow',\n\t\t'-W',\n\t\t'-pedantic',\n\t]\n\tif get_option('build_extra_warnings')\n\t\tcommon_cflags += get_option('warn_cflags').split()\n\tendif\nendif\n\ncommon_flags = [ declare_dependency(\n\tcompile_args: common_cflags,\n\t# tests also use common_flags, and need this\n\tinclude_directories: include_directories('.'),\n) ]\n\nlighttpd_flags = []\nlighttpd_angel_flags = []\nif target_machine.system() == 'windows'\n\tlighttpd_flags += [ declare_dependency(\n\t\tcompile_args: [\n\t\t\t'-DLI_DECLARE_EXPORTS',\n\t\t],\n\t) ]\n\tif compiler.get_id() == 'gcc'\n\t\tlibmsvcr70 = [ compiler.find_library('msvcr70') ]\n\t\tlighttpd_flags += libmsvcr70 + [ declare_dependency(\n\t\t\tlink_args: [\n\t\t\t\t'-Wl,-subsystem,console',\n\t\t\t],\n\t\t) ]\n\t\tlighttpd_angel_flags += libmsvcr70 + [ declare_dependency(\n\t\t\tlink_args: [\n\t\t\t\t'-Wl,-subsystem,console',\n\t\t\t],\n\t\t) ]\n\tendif\nendif\n\nif compiler.get_id() == 'gcc' or target_machine.system() != 'darwin'\n\tlighttpd_flags += [ declare_dependency(\n\t\tlink_args: [\n\t\t\t'-Wl,-export-dynamic',\n\t\t],\n\t) ]\nendif\n\nexecutable('lighttpd-angel',\n\tsources: 'lighttpd-angel.c',\n\tdependencies: common_flags + lighttpd_angel_flags,\n\tc_args: ['-DSBIN_DIR=\"' + sbinddir + '\"'],\n\tinstall: true,\n\tinstall_dir: sbinddir,\n)\n\nexecutable('lighttpd', configparser,\n\tsources: common_src + main_src,\n\t# libssl needed?\n\tdependencies: [ common_flags, lighttpd_flags\n\t\t, libattr\n\t\t, libcrypto\n\t\t, libdl\n\t\t, libev\n\t\t, libfam\n\t\t, libpcre\n\t\t, libunwind\n\t\t, libws2_32\n\t],\n\tinstall: true,\n\tinstall_dir: sbinddir,\n)\n\ntest('test_array', executable('test_array',\n\tsources: ['t/test_array.c', 'array.c', 'data_array.c', 'data_integer.c', 'data_string.c', 'buffer.c'],\n\tdependencies: common_flags + libunwind,\n\tbuild_by_default: false,\n))\n\ntest('test_buffer', executable('test_buffer',\n\tsources: ['t/test_buffer.c', 'buffer.c'],\n\tdependencies: common_flags + libunwind,\n\tbuild_by_default: false,\n))\n\ntest('test_burl', executable('test_burl',\n\tsources: ['t/test_burl.c', 'burl.c', 'buffer.c', 'base64.c'],\n\tdependencies: common_flags + libunwind,\n\tbuild_by_default: false,\n))\n\ntest('test_base64', executable('test_base64',\n\tsources: ['t/test_base64.c', 'buffer.c', 'base64.c'],\n\tdependencies: common_flags + libunwind,\n\tbuild_by_default: false,\n))\n\ntest('test_configfile', executable('test_configfile',\n\tsources: [\n\t\t't/test_configfile.c',\n\t\t'buffer.c',\n\t\t'array.c',\n\t\t'data_config.c',\n\t\t'data_integer.c',\n\t\t'data_string.c',\n\t\t'http_header.c',\n\t\t'http_kv.c',\n\t\t'vector.c',\n\t\t'log.c',\n\t\t'sock_addr.c',\n\t],\n\tdependencies: common_flags + libpcre + libunwind,\n\tbuild_by_default: false,\n))\n\ntest('test_keyvalue', executable('test_keyvalue',\n\tsources: [\n\t\t't/test_keyvalue.c',\n\t\t'burl.c',\n\t\t'buffer.c',\n\t\t'base64.c',\n\t\t'array.c',\n\t\t'data_integer.c',\n\t\t'data_string.c',\n\t\t'log.c',\n\t],\n\tdependencies: common_flags + libpcre + libunwind,\n\tbuild_by_default: false,\n))\n\ntest('test_mod_access', executable('test_mod_access',\n\tsources: [\n\t\t't/test_mod_access.c',\n\t\t'configfile-glue.c',\n\t\t'buffer.c',\n\t\t'array.c',\n\t\t'data_config.c',\n\t\t'data_integer.c',\n\t\t'data_string.c',\n\t\t'http_header.c',\n\t\t'http_kv.c',\n\t\t'vector.c',\n\t\t'log.c',\n\t\t'sock_addr.c',\n\t],\n\tdependencies: common_flags + libpcre + libunwind,\n\tbuild_by_default: false,\n))\n\ntest('test_mod_evhost', executable('test_mod_evhost',\n\tsources: [\n\t\t't/test_mod_evhost.c',\n\t\t'configfile-glue.c',\n\t\t'buffer.c',\n\t\t'array.c',\n\t\t'data_config.c',\n\t\t'data_integer.c',\n\t\t'data_string.c',\n\t\t'http_header.c',\n\t\t'http_kv.c',\n\t\t'vector.c',\n\t\t'log.c',\n\t\t'sock_addr.c',\n\t],\n\tdependencies: common_flags + libpcre + libunwind,\n\tbuild_by_default: false,\n))\n\ntest('test_mod_simple_vhost', executable('test_mod_simple_vhost',\n\tsources: [\n\t\t't/test_mod_simple_vhost.c',\n\t\t'configfile-glue.c',\n\t\t'buffer.c',\n\t\t'array.c',\n\t\t'data_config.c',\n\t\t'data_integer.c',\n\t\t'data_string.c',\n\t\t'http_header.c',\n\t\t'http_kv.c',\n\t\t'vector.c',\n\t\t'log.c',\n\t\t'sock_addr.c',\n\t],\n\tdependencies: common_flags + libpcre + libunwind,\n\tbuild_by_default: false,\n))\n\ntest('test_request', executable('test_request',\n\tsources: [\n\t\t't/test_request.c',\n\t\t'request.c',\n\t\t'buffer.c',\n\t\t'array.c',\n\t\t'data_integer.c',\n\t\t'data_string.c',\n\t\t'http_header.c',\n\t\t'http_kv.c',\n\t\t'log.c',\n\t\t'sock_addr.c',\n\t],\n\tdependencies: common_flags + libunwind,\n\tbuild_by_default: false,\n))\n\nmodules = [\n\t[ 'mod_access', [ 'mod_access.c' ] ],\n\t[ 'mod_accesslog', [ 'mod_accesslog.c' ] ],\n\t[ 'mod_alias', [ 'mod_alias.c' ] ],\n\t[ 'mod_auth', [ 'mod_auth.c' ], [ libcrypto ] ],\n\t[ 'mod_authn_file', [ 'mod_authn_file.c' ], [ libcrypt, libcrypto ] ],\n\t[ 'mod_compress', [ 'mod_compress.c' ], libbz2 + libz ],\n\t[ 'mod_deflate', [ 'mod_deflate.c' ], libbz2 + libz ],\n\t[ 'mod_dirlisting', [ 'mod_dirlisting.c' ], libpcre ],\n\t[ 'mod_evasive', [ 'mod_evasive.c' ] ],\n\t[ 'mod_evhost', [ 'mod_evhost.c' ] ],\n\t[ 'mod_expire', [ 'mod_expire.c' ] ],\n\t[ 'mod_extforward', [ 'mod_extforward.c' ] ],\n\t[ 'mod_fastcgi', [ 'mod_fastcgi.c' ], libws2_32 ],\n\t[ 'mod_flv_streaming', [ 'mod_flv_streaming.c' ] ],\n\t[ 'mod_indexfile', [ 'mod_indexfile.c' ] ],\n\t[ 'mod_proxy', [ 'mod_proxy.c' ], libws2_32 ],\n\t[ 'mod_redirect', [ 'mod_redirect.c' ], libpcre ],\n\t[ 'mod_rewrite', [ 'mod_rewrite.c' ], libpcre ],\n\t[ 'mod_rrdtool', [ 'mod_rrdtool.c' ] ],\n\t[ 'mod_scgi', [ 'mod_scgi.c' ], libws2_32 ],\n\t[ 'mod_secdownload', [ 'mod_secdownload.c' ], libcrypto ],\n\t[ 'mod_setenv', [ 'mod_setenv.c' ] ],\n\t[ 'mod_simple_vhost', [ 'mod_simple_vhost.c' ] ],\n\t[ 'mod_sockproxy', [ 'mod_sockproxy.c' ] ],\n\t[ 'mod_ssi', [ ssi_exprparser, 'mod_ssi_expr.c', 'mod_ssi.c' ], libws2_32 ],\n\t[ 'mod_staticfile', [ 'mod_staticfile.c' ] ],\n\t[ 'mod_status', [ 'mod_status.c' ] ],\n\t[ 'mod_uploadprogress', [ 'mod_uploadprogress.c' ] ],\n\t[ 'mod_userdir', [ 'mod_userdir.c' ] ],\n\t[ 'mod_usertrack', [ 'mod_usertrack.c' ] ],\n\t[ 'mod_vhostdb', [ 'mod_vhostdb.c' ] ],\n\t[ 'mod_webdav', [ 'mod_webdav.c' ], libsqlite3 + libuuid + libxml2 + libelftc ],\n\t[ 'mod_wstunnel', [ 'mod_wstunnel.c' ], libcrypto ],\n]\n\nif target_machine.system() != 'windows'\n\tmodules += [\n\t\t[ 'mod_cgi', [ 'mod_cgi.c' ] ],\n\t]\nendif\n\nif get_option('with_pcre') and (get_option('with_memcached') or get_option('with_gdbm'))\n\tmodules += [\n\t\t[ 'mod_trigger_b4_dl', [ 'mod_trigger_b4_dl.c' ], libpcre + libmemcached + libgdbm ],\n\t]\nendif\n\nif get_option('with_lua')\n\tmodules += [\n\t\t[ 'mod_cml', [ 'mod_cml.c', 'mod_cml_lua.c', 'mod_cml_funcs.c' ], liblua + libmemcached ],\n\t\t[ 'mod_magnet', [ 'mod_magnet.c', 'mod_magnet_cache.c' ], liblua ],\n\t]\nendif\n\nif get_option('with_maxminddb')\n\tmodules += [\n\t\t[ 'mod_maxminddb', [ 'mod_maxminddb.c' ], libmaxminddb ],\n\t]\nendif\n\nif get_option('with_geoip')\n\tmodules += [\n\t\t[ 'mod_geoip', [ 'mod_geoip.c' ], libgeoip ],\n\t]\nendif\n\nif get_option('with_mysql')\n\tmodules += [\n\t\t[ 'mod_authn_mysql', [ 'mod_authn_mysql.c' ], libcrypt + libmysqlclient ],\n\t\t[ 'mod_mysql_vhost', [ 'mod_mysql_vhost.c' ], libmysqlclient ],\n\t\t[ 'mod_vhostdb_mysql', [ 'mod_vhostdb_mysql.c' ], libmysqlclient ],\n\t]\nendif\n\nif get_option('with_pgsql')\n\tmodules += [\n\t\t[ 'mod_vhostdb_pgsql', [ 'mod_vhostdb_pgsql.c' ], libpq ],\n\t]\nendif\n\nif get_option('with_dbi')\n\tmodules += [\n\t\t[ 'mod_vhostdb_dbi', [ 'mod_vhostdb_dbi.c' ], libdbi ],\n\t]\nendif\n\nif get_option('with_krb5')\n\tmodules += [\n\t\t[ 'mod_authn_gssapi', [ 'mod_authn_gssapi.c' ], libkrb5 + libgssapi_krb5 ],\n\t]\nendif\n\nif get_option('with_ldap')\n\tmodules += [\n\t\t[ 'mod_authn_ldap', [ 'mod_authn_ldap.c' ], libldap + liblber ],\n\t\t[ 'mod_vhostdb_ldap', [ 'mod_vhostdb_ldap.c' ], libldap + liblber ],\n\t]\nendif\n\nif get_option('with_openssl')\n\tmodules += [\n\t\t[ 'mod_openssl', [ 'mod_openssl.c' ], libssl + libcrypto ],\n\t]\nendif\n\nif get_option('with_wolfssl') != 'false'\n\tmodules += [\n\t\t[ 'mod_openssl', [ 'mod_openssl.c' ], libcrypto ],\n\t]\nendif\n\nif get_option('with_pam')\n\tmodules += [\n\t\t[ 'mod_authn_pam', [ 'mod_authn_pam.c' ], libpam ],\n\t]\nendif\n\nif get_option('with_sasl')\n\tmodules += [\n\t\t[ 'mod_authn_sasl', [ 'mod_authn_sasl.c' ], libsasl ],\n\t]\nendif\n\nforeach mod: modules\n\tmod_name = mod.get(0)\n\tmod_sources = mod.get(1)\n\tmod_deps = mod.length() > 2 ? mod.get(2) : []\n\tshared_module(mod_name,\n\t\tsources: mod_sources,\n\t\tdependencies: [ common_flags, mod_deps ],\n\t\tname_prefix: '',\n\t\tinstall: true,\n\t\tinstall_dir: moduledir,\n\t)\nendforeach\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_skeleton.c": "#include \"first.h\"\n\n#include <stdlib.h>\n#include <string.h>\n\n#include \"plugin.h\"\n\n#include \"base.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n#include \"array.h\"\n\n/**\n * this is a skeleton for a lighttpd plugin\n *\n * just replaces every occurrence of 'skeleton' by your plugin name\n *\n * e.g. in vim:\n *\n *   :%s/skeleton/myhandler/\n *\n */\n\n\n/* plugin config for all request/connections */\n\ntypedef struct {\n\tarray *match;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\tplugin_config **config_storage;\n\tplugin_config conf;\n} plugin_data;\n\n\n#if 0 /* (needed if module keeps state for request) */\n\ntypedef struct {\n\tsize_t foo;\n} handler_ctx;\n\nstatic handler_ctx * handler_ctx_init() {\n\thandler_ctx * hctx = calloc(1, sizeof(*hctx));\n\tforce_assert(hctx);\n\treturn hctx;\n}\n\nstatic void handler_ctx_free(handler_ctx *hctx) {\n\tfree(hctx);\n}\n\n#endif\n\n\n/* init the plugin data */\nINIT_FUNC(mod_skeleton_init) {\n\treturn calloc(1, sizeof(plugin_data));\n}\n\n/* destroy the plugin data */\nFREE_FUNC(mod_skeleton_free) {\n\tplugin_data *p = p_d;\n\tUNUSED(srv);\n\tif (!p) return HANDLER_GO_ON;\n\tif (p->config_storage) {\n\t\tfor (size_t i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\t\t\tif (NULL == s) continue;\n\t\t\tarray_free(s->match);\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\tfree(p);\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\nSETDEFAULTS_FUNC(mod_skeleton_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\tconfig_values_t cv[] = {\n\t\t{ \"skeleton.array\",             NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 0 */\n\t\t{ NULL,                         NULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\tforce_assert(p->config_storage);\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s = calloc(1, sizeof(plugin_config));\n\t\tforce_assert(s);\n\t\ts->match    = array_init();\n\n\t\tcv[0].destination = s->match;\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (!array_is_vlist(s->match)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for skeleton.array; expected list of \\\"urlpath\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_skeleton_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(match);\n\n\t/* skip the first, the global context */\n\tfor (size_t i = 1; i < srv->config_context->used; ++i) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (size_t j = 0; j < dc->value->used; ++j) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"skeleton.array\"))) {\n\t\t\t\tPATCH(match);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\nURIHANDLER_FUNC(mod_skeleton_uri_handler) {\n\tplugin_data *p = p_d;\n\tUNUSED(srv);\n\n\t/* determine whether or not module participates in request */\n\n\tif (con->mode != DIRECT) return HANDLER_GO_ON;\n\tif (buffer_string_is_empty(con->uri.path)) return HANDLER_GO_ON;\n\n\t/* get module config for request */\n\tmod_skeleton_patch_connection(srv, con, p);\n\n\tif (NULL == array_match_value_suffix(p->conf.match, con->uri.path)) {\n\t\treturn HANDLER_GO_ON;\n\t}\n\n\t/* module participates in request; business logic here */\n\n\tcon->http_status = 403; /* example: reject request with 403 Forbidden */\n\treturn HANDLER_FINISHED;\n}\n\n/* this function is called at dlopen() time and inits the callbacks */\nint mod_skeleton_plugin_init(plugin *p);\nint mod_skeleton_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"skeleton\");\n\tp->data        = NULL;\n\tp->init        = mod_skeleton_init;\n\tp->cleanup     = mod_skeleton_free;\n\tp->set_defaults= mod_skeleton_set_defaults;\n\n\tp->handle_uri_clean = mod_skeleton_uri_handler;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_userdir.c": "#include \"first.h\"\n\n#include \"base.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n\n#include \"response.h\"\n\n#include \"plugin.h\"\n\n#include <sys/types.h>\n#include <sys/stat.h>\n\n#include <stdlib.h>\n#include <string.h>\n\n#ifdef HAVE_PWD_H\n# include <pwd.h>\n#endif\n\n/* plugin config for all request/connections */\ntypedef struct {\n\tarray *exclude_user;\n\tarray *include_user;\n\tbuffer *path;\n\tbuffer *basepath;\n\tunsigned short letterhomes;\n\tunsigned short active;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\n\tbuffer *username;\n\tbuffer *temp_path;\n\n\tplugin_config **config_storage;\n\n\tplugin_config conf;\n} plugin_data;\n\n/* init the plugin data */\nINIT_FUNC(mod_userdir_init) {\n\tplugin_data *p;\n\n\tp = calloc(1, sizeof(*p));\n\n\tp->username = buffer_init();\n\tp->temp_path = buffer_init();\n\n\treturn p;\n}\n\n/* detroy the plugin data */\nFREE_FUNC(mod_userdir_free) {\n\tplugin_data *p = p_d;\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (NULL == s) continue;\n\n\t\t\tarray_free(s->include_user);\n\t\t\tarray_free(s->exclude_user);\n\t\t\tbuffer_free(s->path);\n\t\t\tbuffer_free(s->basepath);\n\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\n\tbuffer_free(p->username);\n\tbuffer_free(p->temp_path);\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\n\nSETDEFAULTS_FUNC(mod_userdir_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i;\n\n\tconfig_values_t cv[] = {\n\t\t{ \"userdir.path\",               NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },       /* 0 */\n\t\t{ \"userdir.exclude-user\",       NULL, T_CONFIG_ARRAY,  T_CONFIG_SCOPE_CONNECTION },       /* 1 */\n\t\t{ \"userdir.include-user\",       NULL, T_CONFIG_ARRAY,  T_CONFIG_SCOPE_CONNECTION },       /* 2 */\n\t\t{ \"userdir.basepath\",           NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },       /* 3 */\n\t\t{ \"userdir.letterhomes\",        NULL, T_CONFIG_BOOLEAN,T_CONFIG_SCOPE_CONNECTION },       /* 4 */\n\t\t{ \"userdir.active\",             NULL, T_CONFIG_BOOLEAN,T_CONFIG_SCOPE_CONNECTION },       /* 5 */\n\t\t{ NULL,                         NULL, T_CONFIG_UNSET,  T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->exclude_user = array_init();\n\t\ts->include_user = array_init();\n\t\ts->path = buffer_init();\n\t\ts->basepath = buffer_init();\n\t\ts->letterhomes = 0;\n\t\t/* enabled by default for backward compatibility; if userdir.path isn't set userdir is disabled too,\n\t\t * but you can't disable it by setting it to an empty string. */\n\t\ts->active = 1;\n\n\t\tcv[0].destination = s->path;\n\t\tcv[1].destination = s->exclude_user;\n\t\tcv[2].destination = s->include_user;\n\t\tcv[3].destination = s->basepath;\n\t\tcv[4].destination = &(s->letterhomes);\n\t\tcv[5].destination = &(s->active);\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (!array_is_vlist(s->exclude_user)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for userdir.exclude-user; expected list of \\\"suffix\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (!array_is_vlist(s->include_user)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for userdir.include-user; expected list of \\\"suffix\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_userdir_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(path);\n\tPATCH(exclude_user);\n\tPATCH(include_user);\n\tPATCH(basepath);\n\tPATCH(letterhomes);\n\tPATCH(active);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"userdir.path\"))) {\n\t\t\t\tPATCH(path);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"userdir.exclude-user\"))) {\n\t\t\t\tPATCH(exclude_user);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"userdir.include-user\"))) {\n\t\t\t\tPATCH(include_user);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"userdir.basepath\"))) {\n\t\t\t\tPATCH(basepath);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"userdir.letterhomes\"))) {\n\t\t\t\tPATCH(letterhomes);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"userdir.active\"))) {\n\t\t\t\tPATCH(active);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\nURIHANDLER_FUNC(mod_userdir_docroot_handler) {\n\tplugin_data *p = p_d;\n\tsize_t k;\n\tchar *rel_url;\n#ifdef HAVE_PWD_H\n\tstruct passwd *pwd = NULL;\n#endif\n\n\tif (buffer_is_empty(con->uri.path)) return HANDLER_GO_ON;\n\n\tmod_userdir_patch_connection(srv, con, p);\n\n\t/* enforce the userdir.path to be set in the config, ugly fix for #1587;\n\t * should be replaced with a clean .enabled option in 1.5\n\t */\n\tif (!p->conf.active || buffer_is_empty(p->conf.path)) return HANDLER_GO_ON;\n\n\t/* /~user/foo.html -> /home/user/public_html/foo.html */\n\n\tif (con->uri.path->ptr[0] != '/' ||\n\t    con->uri.path->ptr[1] != '~') return HANDLER_GO_ON;\n\n\tif (NULL == (rel_url = strchr(con->uri.path->ptr + 2, '/'))) {\n\t\t/* / is missing -> redirect to .../ as we are a user - DIRECTORY ! :) */\n\t\thttp_response_redirect_to_directory(srv, con, 301);\n\n\t\treturn HANDLER_FINISHED;\n\t}\n\n\t/* /~/ is a empty username, catch it directly */\n\tif (0 == rel_url - (con->uri.path->ptr + 2)) {\n\t\treturn HANDLER_GO_ON;\n\t}\n\n\tbuffer_copy_string_len(p->username, con->uri.path->ptr + 2, rel_url - (con->uri.path->ptr + 2));\n\n\tif (buffer_string_is_empty(p->conf.basepath)\n#ifdef HAVE_PWD_H\n\t    && NULL == (pwd = getpwnam(p->username->ptr))\n#endif\n\t    ) {\n\t\t/* user not found */\n\t\treturn HANDLER_GO_ON;\n\t}\n\n\n\tfor (k = 0; k < p->conf.exclude_user->used; k++) {\n\t\tdata_string *ds = (data_string *)p->conf.exclude_user->data[k];\n\n\t\tif (buffer_is_equal(ds->value, p->username)) {\n\t\t\t/* user in exclude list */\n\t\t\treturn HANDLER_GO_ON;\n\t\t}\n\t}\n\n\tif (p->conf.include_user->used) {\n\t\tint found_user = 0;\n\t\tfor (k = 0; k < p->conf.include_user->used; k++) {\n\t\t\tdata_string *ds = (data_string *)p->conf.include_user->data[k];\n\n\t\t\tif (buffer_is_equal(ds->value, p->username)) {\n\t\t\t\t/* user in include list */\n\t\t\t\tfound_user = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!found_user) return HANDLER_GO_ON;\n\t}\n\n\t/* we build the physical path */\n\tbuffer_clear(p->temp_path);\n\n\tif (buffer_string_is_empty(p->conf.basepath)) {\n#ifdef HAVE_PWD_H\n\t\tbuffer_copy_string(p->temp_path, pwd->pw_dir);\n#endif\n\t} else {\n\t\tchar *cp = p->username->ptr;\n\t\t/* check if the username is valid\n\t\t * a request for /~../ should lead to a directory traversal\n\t\t * limiting to [-_a-z0-9.] should fix it */\n\t\tif (cp[0] == '.' && (cp[1] == '\\0' || (cp[1] == '.' && cp[2] == '\\0'))) {\n\t\t\treturn HANDLER_GO_ON;\n\t\t}\n\n\t\tfor (; *cp; cp++) {\n\t\t\tchar c = *cp;\n\t\t\tif (!(light_isalnum(c) || c == '-' || c == '_' || c == '.')) {\n\t\t\t\treturn HANDLER_GO_ON;\n\t\t\t}\n\t\t}\n\t\tif (con->conf.force_lowercase_filenames) {\n\t\t\tbuffer_to_lower(p->username);\n\t\t}\n\n\t\tbuffer_copy_buffer(p->temp_path, p->conf.basepath);\n\t\tif (p->conf.letterhomes) {\n\t\t\tif (p->username->ptr[0] == '.') return HANDLER_GO_ON;\n\t\t\tbuffer_append_path_len(p->temp_path, p->username->ptr, 1);\n\t\t}\n\t\tbuffer_append_path_len(p->temp_path, CONST_BUF_LEN(p->username));\n\t}\n\tbuffer_append_path_len(p->temp_path, CONST_BUF_LEN(p->conf.path));\n\n\tif (buffer_string_is_empty(p->conf.basepath)) {\n\t\tstruct stat st;\n\t\tint ret;\n\n\t\tret = stat(p->temp_path->ptr, &st);\n\t\tif (ret < 0 || S_ISDIR(st.st_mode) != 1) {\n\t\t\treturn HANDLER_GO_ON;\n\t\t}\n\t}\n\n\tbuffer_copy_buffer(con->physical.basedir, p->temp_path);\n\n\t/* the physical rel_path is basically the same as uri.path;\n\t * but it is converted to lowercase in case of force_lowercase_filenames and some special handling\n\t * for trailing '.', ' ' and '/' on windows\n\t * we assume that no docroot/physical handler changed this\n\t * (docroot should only set the docroot/server name, phyiscal should only change the phyiscal.path;\n\t *  the exception mod_secdownload doesn't work with userdir anyway)\n\t */\n\tbuffer_append_slash(p->temp_path);\n\t/* if no second '/' is found, we assume that it was stripped from the uri.path for the special handling\n\t * on windows.\n\t * we do not care about the trailing slash here on windows, as we already ensured it is a directory\n\t *\n\t * TODO: what to do with trailing dots in usernames on windows? they may result in the same directory\n\t *       as a username without them.\n\t */\n\tif (NULL != (rel_url = strchr(con->physical.rel_path->ptr + 2, '/'))) {\n\t\tbuffer_append_string(p->temp_path, rel_url + 1); /* skip the / */\n\t}\n\tbuffer_copy_buffer(con->physical.path, p->temp_path);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_userdir_plugin_init(plugin *p);\nint mod_userdir_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"userdir\");\n\n\tp->init           = mod_userdir_init;\n\tp->handle_physical = mod_userdir_docroot_handler;\n\tp->set_defaults   = mod_userdir_set_defaults;\n\tp->cleanup        = mod_userdir_free;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_dirlisting.c": "#include \"first.h\"\n\n#include \"base.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n#include \"fdevent.h\"\n#include \"http_header.h\"\n\n#include \"plugin.h\"\n\n#include \"stat_cache.h\"\n\n#include <stdlib.h>\n#include <string.h>\n#include <dirent.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <time.h>\n\n#ifdef HAVE_PCRE_H\n#include <pcre.h>\n#endif\n\n/**\n * this is a dirlisting for a lighttpd plugin\n */\n\n#ifdef HAVE_ATTR_ATTRIBUTES_H\n#include <attr/attributes.h>\n#endif\n\n#ifdef HAVE_SYS_EXTATTR_H\n#include <sys/extattr.h>\n#endif\n\n/* plugin config for all request/connections */\n\ntypedef struct {\n#ifdef HAVE_PCRE_H\n\tpcre *regex;\n#endif\n\tbuffer *string;\n} excludes;\n\ntypedef struct {\n\texcludes **ptr;\n\n\tsize_t used;\n\tsize_t size;\n} excludes_buffer;\n\ntypedef struct {\n\tunsigned short dir_listing;\n\tunsigned short hide_dot_files;\n\tunsigned short hide_readme_file;\n\tunsigned short encode_readme;\n\tunsigned short hide_header_file;\n\tunsigned short encode_header;\n\tunsigned short auto_layout;\n\n\texcludes_buffer *excludes;\n\n\tbuffer *show_readme;\n\tbuffer *show_header;\n\tbuffer *external_css;\n\tbuffer *external_js;\n\tbuffer *encoding;\n\tbuffer *set_footer;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\n\tbuffer *tmp_buf;\n\tbuffer *content_charset;\n\n\tplugin_config **config_storage;\n\n\tplugin_config conf;\n} plugin_data;\n\nstatic excludes_buffer *excludes_buffer_init(void) {\n\texcludes_buffer *exb;\n\n\texb = calloc(1, sizeof(*exb));\n\n\treturn exb;\n}\n\n#ifdef HAVE_PCRE_H\nstatic int excludes_buffer_append(excludes_buffer *exb, buffer *string) {\n\tsize_t i;\n\tconst char *errptr;\n\tint erroff;\n\n\tif (!string) return -1;\n\n\tif (exb->used == exb->size) {\n\t\texb->size += 4;\n\n\t\texb->ptr = realloc(exb->ptr, exb->size * sizeof(*exb->ptr));\n\n\t\tfor(i = exb->used; i < exb->size; i++) {\n\t\t\texb->ptr[i] = calloc(1, sizeof(**exb->ptr));\n\t\t}\n\t}\n\n\n\tif (NULL == (exb->ptr[exb->used]->regex = pcre_compile(string->ptr, 0,\n\t\t\t\t\t\t    &errptr, &erroff, NULL))) {\n\t\treturn -1;\n\t}\n\n\texb->ptr[exb->used]->string = buffer_init();\n\tbuffer_copy_buffer(exb->ptr[exb->used]->string, string);\n\n\texb->used++;\n\n\treturn 0;\n}\n#endif\n\nstatic void excludes_buffer_free(excludes_buffer *exb) {\n#ifdef HAVE_PCRE_H\n\tsize_t i;\n\n\tfor (i = 0; i < exb->size; i++) {\n\t\tif (exb->ptr[i]->regex) pcre_free(exb->ptr[i]->regex);\n\t\tif (exb->ptr[i]->string) buffer_free(exb->ptr[i]->string);\n\t\tfree(exb->ptr[i]);\n\t}\n\n\tif (exb->ptr) free(exb->ptr);\n#endif\n\n\tfree(exb);\n}\n\n/* init the plugin data */\nINIT_FUNC(mod_dirlisting_init) {\n\tplugin_data *p;\n\n\tp = calloc(1, sizeof(*p));\n\n\tp->tmp_buf = buffer_init();\n\tp->content_charset = buffer_init();\n\n\treturn p;\n}\n\n/* detroy the plugin data */\nFREE_FUNC(mod_dirlisting_free) {\n\tplugin_data *p = p_d;\n\n\tUNUSED(srv);\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (!s) continue;\n\n\t\t\texcludes_buffer_free(s->excludes);\n\t\t\tbuffer_free(s->show_readme);\n\t\t\tbuffer_free(s->show_header);\n\t\t\tbuffer_free(s->external_css);\n\t\t\tbuffer_free(s->external_js);\n\t\t\tbuffer_free(s->encoding);\n\t\t\tbuffer_free(s->set_footer);\n\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\n\tbuffer_free(p->tmp_buf);\n\tbuffer_free(p->content_charset);\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\n\n#define CONFIG_EXCLUDE          \"dir-listing.exclude\"\n#define CONFIG_ACTIVATE         \"dir-listing.activate\"\n#define CONFIG_HIDE_DOTFILES    \"dir-listing.hide-dotfiles\"\n#define CONFIG_EXTERNAL_CSS     \"dir-listing.external-css\"\n#define CONFIG_EXTERNAL_JS      \"dir-listing.external-js\"\n#define CONFIG_ENCODING         \"dir-listing.encoding\"\n#define CONFIG_SHOW_README      \"dir-listing.show-readme\"\n#define CONFIG_HIDE_README_FILE \"dir-listing.hide-readme-file\"\n#define CONFIG_SHOW_HEADER      \"dir-listing.show-header\"\n#define CONFIG_HIDE_HEADER_FILE \"dir-listing.hide-header-file\"\n#define CONFIG_DIR_LISTING      \"server.dir-listing\"\n#define CONFIG_SET_FOOTER       \"dir-listing.set-footer\"\n#define CONFIG_ENCODE_README    \"dir-listing.encode-readme\"\n#define CONFIG_ENCODE_HEADER    \"dir-listing.encode-header\"\n#define CONFIG_AUTO_LAYOUT      \"dir-listing.auto-layout\"\n\n\nSETDEFAULTS_FUNC(mod_dirlisting_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\tconfig_values_t cv[] = {\n\t\t{ CONFIG_EXCLUDE,          NULL, T_CONFIG_LOCAL, T_CONFIG_SCOPE_CONNECTION },   /* 0 */\n\t\t{ CONFIG_ACTIVATE,         NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION }, /* 1 */\n\t\t{ CONFIG_HIDE_DOTFILES,    NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION }, /* 2 */\n\t\t{ CONFIG_EXTERNAL_CSS,     NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },  /* 3 */\n\t\t{ CONFIG_ENCODING,         NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },  /* 4 */\n\t\t{ CONFIG_SHOW_README,      NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },  /* 5 */\n\t\t{ CONFIG_HIDE_README_FILE, NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION }, /* 6 */\n\t\t{ CONFIG_SHOW_HEADER,      NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },  /* 7 */\n\t\t{ CONFIG_HIDE_HEADER_FILE, NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION }, /* 8 */\n\t\t{ CONFIG_DIR_LISTING,      NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION }, /* 9 */\n\t\t{ CONFIG_SET_FOOTER,       NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },  /* 10 */\n\t\t{ CONFIG_ENCODE_README,    NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION }, /* 11 */\n\t\t{ CONFIG_ENCODE_HEADER,    NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION }, /* 12 */\n\t\t{ CONFIG_AUTO_LAYOUT,      NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION }, /* 13 */\n\t\t{ CONFIG_EXTERNAL_JS,      NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION },  /* 14 */\n\n\t\t{ NULL,                          NULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\t\tdata_unset *du_excludes;\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->excludes = excludes_buffer_init();\n\t\ts->dir_listing = 0;\n\t\ts->show_readme = buffer_init();\n\t\ts->show_header = buffer_init();\n\t\ts->external_css = buffer_init();\n\t\ts->external_js = buffer_init();\n\t\ts->hide_dot_files = 1;\n\t\ts->hide_readme_file = 0;\n\t\ts->hide_header_file = 0;\n\t\ts->encode_readme = 1;\n\t\ts->encode_header = 1;\n\t\ts->auto_layout = 1;\n\n\t\ts->encoding = buffer_init();\n\t\ts->set_footer = buffer_init();\n\n\t\tcv[0].destination = s->excludes;\n\t\tcv[1].destination = &(s->dir_listing);\n\t\tcv[2].destination = &(s->hide_dot_files);\n\t\tcv[3].destination = s->external_css;\n\t\tcv[4].destination = s->encoding;\n\t\tcv[5].destination = s->show_readme;\n\t\tcv[6].destination = &(s->hide_readme_file);\n\t\tcv[7].destination = s->show_header;\n\t\tcv[8].destination = &(s->hide_header_file);\n\t\tcv[9].destination = &(s->dir_listing); /* old name */\n\t\tcv[10].destination = s->set_footer;\n\t\tcv[11].destination = &(s->encode_readme);\n\t\tcv[12].destination = &(s->encode_header);\n\t\tcv[13].destination = &(s->auto_layout);\n\t\tcv[14].destination = s->external_js;\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (NULL != (du_excludes = array_get_element(config->value, CONFIG_EXCLUDE))) {\n\t\t\tarray *excludes_list;\n\n\t\t\texcludes_list = ((data_array*)du_excludes)->value;\n\n\t\t\tif (du_excludes->type != TYPE_ARRAY || !array_is_vlist(excludes_list)) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected type for \" CONFIG_EXCLUDE \"; expected list of \\\"regex\\\"\");\n\t\t\t\treturn HANDLER_ERROR;\n\t\t\t}\n\n#ifndef HAVE_PCRE_H\n\t\t\tif (excludes_list->used > 0) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sss\",\n\t\t\t\t\t\"pcre support is missing for: \", CONFIG_EXCLUDE, \", please install libpcre and the headers\");\n\t\t\t\treturn HANDLER_ERROR;\n\t\t\t}\n#else\n\t\t\tfor (size_t j = 0; j < excludes_list->used; ++j) {\n\t\t\t\tdata_unset *du_exclude = excludes_list->data[j];\n\n\t\t\t\tif (du_exclude->type != TYPE_STRING) {\n\t\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sssbs\",\n\t\t\t\t\t\t\"unexpected type for key: \", CONFIG_EXCLUDE, \"[\",\n\t\t\t\t\t\tdu_exclude->key, \"](string)\");\n\t\t\t\t\treturn HANDLER_ERROR;\n\t\t\t\t}\n\n\t\t\t\tif (0 != excludes_buffer_append(s->excludes, ((data_string*)(du_exclude))->value)) {\n\t\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\t\t\"pcre-compile failed for\", ((data_string*)(du_exclude))->value);\n\t\t\t\t\treturn HANDLER_ERROR;\n\t\t\t\t}\n\t\t\t}\n#endif\n\t\t}\n\n\t\tif (!buffer_string_is_empty(s->show_readme)) {\n\t\t\tif (buffer_is_equal_string(s->show_readme, CONST_STR_LEN(\"enable\"))) {\n\t\t\t\tbuffer_copy_string_len(s->show_readme, CONST_STR_LEN(\"README.txt\"));\n\t\t\t}\n\t\t\telse if (buffer_is_equal_string(s->show_readme, CONST_STR_LEN(\"disable\"))) {\n\t\t\t\tbuffer_clear(s->show_readme);\n\t\t\t}\n\t\t}\n\n\t\tif (!buffer_string_is_empty(s->show_header)) {\n\t\t\tif (buffer_is_equal_string(s->show_header, CONST_STR_LEN(\"enable\"))) {\n\t\t\t\tbuffer_copy_string_len(s->show_header, CONST_STR_LEN(\"HEADER.txt\"));\n\t\t\t}\n\t\t\telse if (buffer_is_equal_string(s->show_header, CONST_STR_LEN(\"disable\"))) {\n\t\t\t\tbuffer_clear(s->show_header);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_dirlisting_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(dir_listing);\n\tPATCH(external_css);\n\tPATCH(external_js);\n\tPATCH(hide_dot_files);\n\tPATCH(encoding);\n\tPATCH(show_readme);\n\tPATCH(hide_readme_file);\n\tPATCH(show_header);\n\tPATCH(hide_header_file);\n\tPATCH(excludes);\n\tPATCH(set_footer);\n\tPATCH(encode_readme);\n\tPATCH(encode_header);\n\tPATCH(auto_layout);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(CONFIG_ACTIVATE)) ||\n\t\t\t    buffer_is_equal_string(du->key, CONST_STR_LEN(CONFIG_DIR_LISTING))) {\n\t\t\t\tPATCH(dir_listing);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(CONFIG_HIDE_DOTFILES))) {\n\t\t\t\tPATCH(hide_dot_files);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(CONFIG_EXTERNAL_CSS))) {\n\t\t\t\tPATCH(external_css);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(CONFIG_EXTERNAL_JS))) {\n\t\t\t\tPATCH(external_js);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(CONFIG_ENCODING))) {\n\t\t\t\tPATCH(encoding);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(CONFIG_SHOW_README))) {\n\t\t\t\tPATCH(show_readme);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(CONFIG_HIDE_README_FILE))) {\n\t\t\t\tPATCH(hide_readme_file);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(CONFIG_SHOW_HEADER))) {\n\t\t\t\tPATCH(show_header);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(CONFIG_HIDE_HEADER_FILE))) {\n\t\t\t\tPATCH(hide_header_file);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(CONFIG_SET_FOOTER))) {\n\t\t\t\tPATCH(set_footer);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(CONFIG_EXCLUDE))) {\n\t\t\t\tPATCH(excludes);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(CONFIG_ENCODE_README))) {\n\t\t\t\tPATCH(encode_readme);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(CONFIG_ENCODE_HEADER))) {\n\t\t\t\tPATCH(encode_header);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(CONFIG_AUTO_LAYOUT))) {\n\t\t\t\tPATCH(auto_layout);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\ntypedef struct {\n\tsize_t  namelen;\n\ttime_t  mtime;\n\toff_t   size;\n} dirls_entry_t;\n\ntypedef struct {\n\tdirls_entry_t **ent;\n\tsize_t used;\n\tsize_t size;\n} dirls_list_t;\n\n#define DIRLIST_ENT_NAME(ent)\t((char*)(ent) + sizeof(dirls_entry_t))\n#define DIRLIST_BLOB_SIZE\t\t16\n\n/* simple combsort algorithm */\nstatic void http_dirls_sort(dirls_entry_t **ent, int num) {\n\tint gap = num;\n\tint i, j;\n\tint swapped;\n\tdirls_entry_t *tmp;\n\n\tdo {\n\t\tgap = (gap * 10) / 13;\n\t\tif (gap == 9 || gap == 10)\n\t\t\tgap = 11;\n\t\tif (gap < 1)\n\t\t\tgap = 1;\n\t\tswapped = 0;\n\n\t\tfor (i = 0; i < num - gap; i++) {\n\t\t\tj = i + gap;\n\t\t\tif (strcmp(DIRLIST_ENT_NAME(ent[i]), DIRLIST_ENT_NAME(ent[j])) > 0) {\n\t\t\t\ttmp = ent[i];\n\t\t\t\tent[i] = ent[j];\n\t\t\t\tent[j] = tmp;\n\t\t\t\tswapped = 1;\n\t\t\t}\n\t\t}\n\n\t} while (gap > 1 || swapped);\n}\n\n/* buffer must be able to hold \"999.9K\"\n * conversion is simple but not perfect\n */\nstatic int http_list_directory_sizefmt(char *buf, size_t bufsz, off_t size) {\n\tconst char unit[] = \" KMGTPE\";\t/* Kilo, Mega, Giga, Tera, Peta, Exa */\n\tconst char *u = unit;\t\t/* u will always increment at least once */\n\tint remain;\n\tsize_t buflen;\n\n\tif (size < 100)\n\t\tsize += 99;\n\tif (size < 100)\n\t\tsize = 0;\n\n\twhile (1) {\n\t\tremain = (int) size & 1023;\n\t\tsize >>= 10;\n\t\tu++;\n\t\tif ((size & (~0 ^ 1023)) == 0)\n\t\t\tbreak;\n\t}\n\n\tremain /= 100;\n\tif (remain > 9)\n\t\tremain = 9;\n\tif (size > 999) {\n\t\tsize   = 0;\n\t\tremain = 9;\n\t\tu++;\n\t}\n\n\tli_itostrn(buf, bufsz, size);\n\tbuflen = strlen(buf);\n\tif (buflen + 3 >= bufsz) return buflen;\n\tbuf[buflen+0] = '.';\n\tbuf[buflen+1] = remain + '0';\n\tbuf[buflen+2] = *u;\n\tbuf[buflen+3] = '\\0';\n\n\treturn buflen + 3;\n}\n\nstatic void http_list_directory_include_file(buffer *out, int symlinks, buffer *path, const char *classname, int encode) {\n\tint fd = fdevent_open_cloexec(path->ptr, symlinks, O_RDONLY, 0);\n\tssize_t rd;\n\tchar buf[8192];\n\n\tif (-1 == fd) return;\n\n\tif (encode) {\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"<pre class=\\\"\"));\n\t\tbuffer_append_string(out, classname);\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"\\\">\"));\n\t}\n\n\twhile ((rd = read(fd, buf, sizeof(buf))) > 0) {\n\t\tif (encode) {\n\t\t\tbuffer_append_string_encoded(out, buf, (size_t)rd, ENCODING_MINIMAL_XML);\n\t\t} else {\n\t\t\tbuffer_append_string_len(out, buf, (size_t)rd);\n\t\t}\n\t}\n\tclose(fd);\n\n\tif (encode) {\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"</pre>\"));\n\t}\n}\n\n/* portions copied from mod_status\n * modified and specialized for stable dirlist sorting by name */\nstatic const char js_simple_table_resort[] = \\\n\"var click_column;\\n\" \\\n\"var name_column = 0;\\n\" \\\n\"var date_column = 1;\\n\" \\\n\"var size_column = 2;\\n\" \\\n\"var type_column = 3;\\n\" \\\n\"var prev_span = null;\\n\" \\\n\"\\n\" \\\n\"if (typeof(String.prototype.localeCompare) === 'undefined') {\\n\" \\\n\" String.prototype.localeCompare = function(str, locale, options) {\\n\" \\\n\"   return ((this == str) ? 0 : ((this > str) ? 1 : -1));\\n\" \\\n\" };\\n\" \\\n\"}\\n\" \\\n\"\\n\" \\\n\"if (typeof(String.prototype.toLocaleUpperCase) === 'undefined') {\\n\" \\\n\" String.prototype.toLocaleUpperCase = function() {\\n\" \\\n\"  return this.toUpperCase();\\n\" \\\n\" };\\n\" \\\n\"}\\n\" \\\n\"\\n\" \\\n\"function get_inner_text(el) {\\n\" \\\n\" if((typeof el == 'string')||(typeof el == 'undefined'))\\n\" \\\n\"  return el;\\n\" \\\n\" if(el.innerText)\\n\" \\\n\"  return el.innerText;\\n\" \\\n\" else {\\n\" \\\n\"  var str = \\\"\\\";\\n\" \\\n\"  var cs = el.childNodes;\\n\" \\\n\"  var l = cs.length;\\n\" \\\n\"  for (i=0;i<l;i++) {\\n\" \\\n\"   if (cs[i].nodeType==1) str += get_inner_text(cs[i]);\\n\" \\\n\"   else if (cs[i].nodeType==3) str += cs[i].nodeValue;\\n\" \\\n\"  }\\n\" \\\n\" }\\n\" \\\n\" return str;\\n\" \\\n\"}\\n\" \\\n\"\\n\" \\\n\"function isdigit(c) {\\n\" \\\n\" return (c >= '0' && c <= '9');\\n\" \\\n\"}\\n\" \\\n\"\\n\" \\\n\"function unit_multiplier(unit) {\\n\" \\\n\" return (unit=='K') ? 1000\\n\" \\\n\"      : (unit=='M') ? 1000000\\n\" \\\n\"      : (unit=='G') ? 1000000000\\n\" \\\n\"      : (unit=='T') ? 1000000000000\\n\" \\\n\"      : (unit=='P') ? 1000000000000000\\n\" \\\n\"      : (unit=='E') ? 1000000000000000000 : 1;\\n\" \\\n\"}\\n\" \\\n\"\\n\" \\\n\"var li_date_regex=/(\\\\d{4})-(\\\\w{3})-(\\\\d{2}) (\\\\d{2}):(\\\\d{2}):(\\\\d{2})/;\\n\" \\\n\"\\n\" \\\n\"var li_mon = ['Jan','Feb','Mar','Apr','May','Jun',\\n\" \\\n\"              'Jul','Aug','Sep','Oct','Nov','Dec'];\\n\" \\\n\"\\n\" \\\n\"function li_mon_num(mon) {\\n\" \\\n\" var i; for (i = 0; i < 12 && mon != li_mon[i]; ++i); return i;\\n\" \\\n\"}\\n\" \\\n\"\\n\" \\\n\"function li_date_cmp(s1, s2) {\\n\" \\\n\" var dp1 = li_date_regex.exec(s1)\\n\" \\\n\" var dp2 = li_date_regex.exec(s2)\\n\" \\\n\" for (var i = 1; i < 7; ++i) {\\n\" \\\n\"  var cmp = (2 != i)\\n\" \\\n\"   ? parseInt(dp1[i]) - parseInt(dp2[i])\\n\" \\\n\"   : li_mon_num(dp1[2]) - li_mon_num(dp2[2]);\\n\" \\\n\"  if (0 != cmp) return cmp;\\n\" \\\n\" }\\n\" \\\n\" return 0;\\n\" \\\n\"}\\n\" \\\n\"\\n\" \\\n\"function sortfn_then_by_name(a,b,sort_column) {\\n\" \\\n\" if (sort_column == name_column || sort_column == type_column) {\\n\" \\\n\"  var ad = (a.cells[type_column].innerHTML === 'Directory');\\n\" \\\n\"  var bd = (b.cells[type_column].innerHTML === 'Directory');\\n\" \\\n\"  if (ad != bd) return (ad ? -1 : 1);\\n\" \\\n\" }\\n\" \\\n\" var at = get_inner_text(a.cells[sort_column]);\\n\" \\\n\" var bt = get_inner_text(b.cells[sort_column]);\\n\" \\\n\" var cmp;\\n\" \\\n\" if (sort_column == name_column) {\\n\" \\\n\"  if (at == '..') return -1;\\n\" \\\n\"  if (bt == '..') return  1;\\n\" \\\n\" }\\n\" \\\n\" if (a.cells[sort_column].className == 'int') {\\n\" \\\n\"  cmp = parseInt(at)-parseInt(bt);\\n\" \\\n\" } else if (sort_column == date_column) {\\n\" \\\n\"  var ad = isdigit(at.substr(0,1));\\n\" \\\n\"  var bd = isdigit(bt.substr(0,1));\\n\" \\\n\"  if (ad != bd) return (!ad ? -1 : 1);\\n\" \\\n\"  cmp = li_date_cmp(at,bt);\\n\" \\\n\" } else if (sort_column == size_column) {\\n\" \\\n\"  var ai = parseInt(at, 10) * unit_multiplier(at.substr(-1,1));\\n\" \\\n\"  var bi = parseInt(bt, 10) * unit_multiplier(bt.substr(-1,1));\\n\" \\\n\"  if (at.substr(0,1) == '-') ai = -1;\\n\" \\\n\"  if (bt.substr(0,1) == '-') bi = -1;\\n\" \\\n\"  cmp = ai - bi;\\n\" \\\n\" } else {\\n\" \\\n\"  cmp = at.toLocaleUpperCase().localeCompare(bt.toLocaleUpperCase());\\n\" \\\n\"  if (0 != cmp) return cmp;\\n\" \\\n\"  cmp = at.localeCompare(bt);\\n\" \\\n\" }\\n\" \\\n\" if (0 != cmp || sort_column == name_column) return cmp;\\n\" \\\n\" return sortfn_then_by_name(a,b,name_column);\\n\" \\\n\"}\\n\" \\\n\"\\n\" \\\n\"function sortfn(a,b) {\\n\" \\\n\" return sortfn_then_by_name(a,b,click_column);\\n\" \\\n\"}\\n\" \\\n\"\\n\" \\\n\"function resort(lnk) {\\n\" \\\n\" var span = lnk.childNodes[1];\\n\" \\\n\" var table = lnk.parentNode.parentNode.parentNode.parentNode;\\n\" \\\n\" var rows = new Array();\\n\" \\\n\" for (j=1;j<table.rows.length;j++)\\n\" \\\n\"  rows[j-1] = table.rows[j];\\n\" \\\n\" click_column = lnk.parentNode.cellIndex;\\n\" \\\n\" rows.sort(sortfn);\\n\" \\\n\"\\n\" \\\n\" if (prev_span != null) prev_span.innerHTML = '';\\n\" \\\n\" if (span.getAttribute('sortdir')=='down') {\\n\" \\\n\"  span.innerHTML = '&uarr;';\\n\" \\\n\"  span.setAttribute('sortdir','up');\\n\" \\\n\"  rows.reverse();\\n\" \\\n\" } else {\\n\" \\\n\"  span.innerHTML = '&darr;';\\n\" \\\n\"  span.setAttribute('sortdir','down');\\n\" \\\n\" }\\n\" \\\n\" for (i=0;i<rows.length;i++)\\n\" \\\n\"  table.tBodies[0].appendChild(rows[i]);\\n\" \\\n\" prev_span = span;\\n\" \\\n\"}\\n\";\n\n/* portions copied from mod_dirlist (lighttpd2) */\nstatic const char js_simple_table_init_sort[] = \\\n\"\\n\" \\\n\"function init_sort(init_sort_column, ascending) {\\n\" \\\n\" var tables = document.getElementsByTagName(\\\"table\\\");\\n\" \\\n\" for (var i = 0; i < tables.length; i++) {\\n\" \\\n\"  var table = tables[i];\\n\" \\\n\"  //var c = table.getAttribute(\\\"class\\\")\\n\" \\\n\"  //if (-1 != c.split(\\\" \\\").indexOf(\\\"sort\\\")) {\\n\" \\\n\"   var row = table.rows[0].cells;\\n\" \\\n\"   for (var j = 0; j < row.length; j++) {\\n\" \\\n\"    var n = row[j];\\n\" \\\n\"    if (n.childNodes.length == 1 && n.childNodes[0].nodeType == 3) {\\n\" \\\n\"     var link = document.createElement(\\\"a\\\");\\n\" \\\n\"     var title = n.childNodes[0].nodeValue.replace(/:$/, \\\"\\\");\\n\" \\\n\"     link.appendChild(document.createTextNode(title));\\n\" \\\n\"     link.setAttribute(\\\"href\\\", \\\"#\\\");\\n\" \\\n\"     link.setAttribute(\\\"class\\\", \\\"sortheader\\\");\\n\" \\\n\"     link.setAttribute(\\\"onclick\\\", \\\"resort(this);return false;\\\");\\n\" \\\n\"     var arrow = document.createElement(\\\"span\\\");\\n\" \\\n\"     arrow.setAttribute(\\\"class\\\", \\\"sortarrow\\\");\\n\" \\\n\"     arrow.appendChild(document.createTextNode(\\\":\\\"));\\n\" \\\n\"     link.appendChild(arrow)\\n\" \\\n\"     n.replaceChild(link, n.firstChild);\\n\" \\\n\"    }\\n\" \\\n\"   }\\n\" \\\n\"   var lnk = row[init_sort_column].firstChild;\\n\" \\\n\"   if (ascending) {\\n\" \\\n\"    var span = lnk.childNodes[1];\\n\" \\\n\"    span.setAttribute('sortdir','down');\\n\" \\\n\"   }\\n\" \\\n\"   resort(lnk);\\n\" \\\n\"  //}\\n\" \\\n\" }\\n\" \\\n\"}\\n\";\n\nstatic void http_dirlist_append_js_table_resort (buffer *b, connection *con) {\n\tchar col = '0';\n\tchar ascending = '0';\n\tif (!buffer_string_is_empty(con->uri.query)) {\n\t\tconst char *qs = con->uri.query->ptr;\n\t\tdo {\n\t\t\tif (qs[0] == 'C' && qs[1] == '=') {\n\t\t\t\tswitch (qs[2]) {\n\t\t\t\tcase 'N': col = '0'; break;\n\t\t\t\tcase 'M': col = '1'; break;\n\t\t\t\tcase 'S': col = '2'; break;\n\t\t\t\tcase 'T':\n\t\t\t\tcase 'D': col = '3'; break;\n\t\t\t\tdefault:  break;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (qs[0] == 'O' && qs[1] == '=') {\n\t\t\t\tswitch (qs[2]) {\n\t\t\t\tcase 'A': ascending = '1'; break;\n\t\t\t\tcase 'D': ascending = '0'; break;\n\t\t\t\tdefault:  break;\n\t\t\t\t}\n\t\t\t}\n\t\t} while ((qs = strchr(qs, '&')) && *++qs);\n\t}\n\n\tbuffer_append_string_len(b, CONST_STR_LEN(\"\\n<script type=\\\"text/javascript\\\">\\n// <!--\\n\\n\"));\n\tbuffer_append_string_len(b, js_simple_table_resort, sizeof(js_simple_table_resort)-1);\n\tbuffer_append_string_len(b, js_simple_table_init_sort, sizeof(js_simple_table_init_sort)-1);\n\tbuffer_append_string_len(b, CONST_STR_LEN(\"\\ninit_sort(\"));\n\tbuffer_append_string_len(b, &col, 1);\n\tbuffer_append_string_len(b, CONST_STR_LEN(\", \"));\n\tbuffer_append_string_len(b, &ascending, 1);\n\tbuffer_append_string_len(b, CONST_STR_LEN(\");\\n\\n// -->\\n</script>\\n\\n\"));\n}\n\nstatic void http_list_directory_header(server *srv, connection *con, plugin_data *p, buffer *out) {\n\tUNUSED(srv);\n\n\tif (p->conf.auto_layout) {\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\n\t\t\t\"<!DOCTYPE html>\\n\"\n\t\t\t\"<html>\\n\"\n\t\t\t\"<head>\\n\"\n\t\t));\n\t\tif (!buffer_string_is_empty(p->conf.encoding)) {\n\t\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"<meta charset=\\\"\"));\n\t\t\tbuffer_append_string_buffer(out, p->conf.encoding);\n\t\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"\\\">\\n\"));\n\t\t}\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"<title>Index of \"));\n\t\tbuffer_append_string_encoded(out, CONST_BUF_LEN(con->uri.path), ENCODING_MINIMAL_XML);\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"</title>\\n\"));\n\n\t\tif (!buffer_string_is_empty(p->conf.external_css)) {\n\t\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"<meta name=\\\"viewport\\\" content=\\\"initial-scale=1\\\">\"));\n\t\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"\"));\n\t\t\tbuffer_append_string_buffer(out, p->conf.external_css);\n\t\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"\\\">\\n\"));\n\t\t} else {\n\t\t\tbuffer_append_string_len(out, CONST_STR_LEN(\n\t\t\t\t\"<style type=\\\"text/css\\\">\\n\"\n\t\t\t\t\"a, a:active {text-decoration: none; color: blue;}\\n\"\n\t\t\t\t\"a:visited {color: #48468F;}\\n\"\n\t\t\t\t\"a:hover, a:focus {text-decoration: underline; color: red;}\\n\"\n\t\t\t\t\"body {background-color: #F5F5F5;}\\n\"\n\t\t\t\t\"h2 {margin-bottom: 12px;}\\n\"\n\t\t\t\t\"table {margin-left: 12px;}\\n\"\n\t\t\t\t\"th, td {\"\n\t\t\t\t\" font: 90% monospace;\"\n\t\t\t\t\" text-align: left;\"\n\t\t\t\t\"}\\n\"\n\t\t\t\t\"th {\"\n\t\t\t\t\" font-weight: bold;\"\n\t\t\t\t\" padding-right: 14px;\"\n\t\t\t\t\" padding-bottom: 3px;\"\n\t\t\t\t\"}\\n\"\n\t\t\t\t\"td {padding-right: 14px;}\\n\"\n\t\t\t\t\"td.s, th.s {text-align: right;}\\n\"\n\t\t\t\t\"div.list {\"\n\t\t\t\t\" background-color: white;\"\n\t\t\t\t\" border-top: 1px solid #646464;\"\n\t\t\t\t\" border-bottom: 1px solid #646464;\"\n\t\t\t\t\" padding-top: 10px;\"\n\t\t\t\t\" padding-bottom: 14px;\"\n\t\t\t\t\"}\\n\"\n\t\t\t\t\"div.foot {\"\n\t\t\t\t\" font: 90% monospace;\"\n\t\t\t\t\" color: #787878;\"\n\t\t\t\t\" padding-top: 4px;\"\n\t\t\t\t\"}\\n\"\n\t\t\t\t\"</style>\\n\"\n\t\t\t));\n\t\t}\n\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"</head>\\n<body>\\n\"));\n\t}\n\n\tif (!buffer_string_is_empty(p->conf.show_header)) {\n\t\t/* if we have a HEADER file, display it in <pre class=\"header\"></pre> */\n\n\t\tbuffer *hb = p->conf.show_header;\n\t\tif (hb->ptr[0] != '/') {\n\t\t\tbuffer_copy_buffer(p->tmp_buf, con->physical.path);\n\t\t\tbuffer_append_path_len(p->tmp_buf, CONST_BUF_LEN(p->conf.show_header));\n\t\t\thb = p->tmp_buf;\n\t\t}\n\n\t\thttp_list_directory_include_file(out, con->conf.follow_symlink, hb, \"header\", p->conf.encode_header);\n\t}\n\n\tbuffer_append_string_len(out, CONST_STR_LEN(\"<h2>Index of \"));\n\tbuffer_append_string_encoded(out, CONST_BUF_LEN(con->uri.path), ENCODING_MINIMAL_XML);\n\tbuffer_append_string_len(out, CONST_STR_LEN(\n\t\t\"</h2>\\n\"\n\t\t\"<div class=\\\"list\\\">\\n\"\n\t\t\"<table summary=\\\"Directory Listing\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\\n\"\n\t\t\"<thead>\"\n\t\t\"<tr>\"\n\t\t\t\"<th class=\\\"n\\\">Name</th>\"\n\t\t\t\"<th class=\\\"m\\\">Last Modified</th>\"\n\t\t\t\"<th class=\\\"s\\\">Size</th>\"\n\t\t\t\"<th class=\\\"t\\\">Type</th>\"\n\t\t\"</tr>\"\n\t\t\"</thead>\\n\"\n\t\t\"<tbody>\\n\"\n\t));\n\tif (!buffer_is_equal_string(con->uri.path, CONST_STR_LEN(\"/\"))) {\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\n\t\t\"<tr class=\\\"d\\\">\"\n\t\t\t\"<td class=\\\"n\\\"><a href=\\\"../\\\">..</a>/</td>\"\n\t\t\t\"<td class=\\\"m\\\">&nbsp;</td>\"\n\t\t\t\"<td class=\\\"s\\\">- &nbsp;</td>\"\n\t\t\t\"<td class=\\\"t\\\">Directory</td>\"\n\t\t\"</tr>\\n\"\n\t\t));\n\t}\n}\n\nstatic void http_list_directory_footer(server *srv, connection *con, plugin_data *p, buffer *out) {\n\tUNUSED(srv);\n\n\tbuffer_append_string_len(out, CONST_STR_LEN(\n\t\t\"</tbody>\\n\"\n\t\t\"</table>\\n\"\n\t\t\"</div>\\n\"\n\t));\n\n\tif (!buffer_string_is_empty(p->conf.show_readme)) {\n\t\t/* if we have a README file, display it in <pre class=\"readme\"></pre> */\n\n\t\tbuffer *rb = p->conf.show_readme;\n\t\tif (rb->ptr[0] != '/') {\n\t\t\tbuffer_copy_buffer(p->tmp_buf,  con->physical.path);\n\t\t\tbuffer_append_path_len(p->tmp_buf, CONST_BUF_LEN(p->conf.show_readme));\n\t\t\trb = p->tmp_buf;\n\t\t}\n\n\t\thttp_list_directory_include_file(out, con->conf.follow_symlink, rb, \"readme\", p->conf.encode_readme);\n\t}\n\n\tif(p->conf.auto_layout) {\n\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\n\t\t\t\"<div class=\\\"foot\\\">\"\n\t\t));\n\n\t\tif (!buffer_string_is_empty(p->conf.set_footer)) {\n\t\t\tbuffer_append_string_buffer(out, p->conf.set_footer);\n\t\t} else {\n\t\t\tbuffer_append_string_buffer(out, con->conf.server_tag);\n\t\t}\n\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\n\t\t\t\"</div>\\n\"\n\t\t));\n\n\t\tif (!buffer_string_is_empty(p->conf.external_js)) {\n\t\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"<script type=\\\"text/javascript\\\" src=\\\"\"));\n\t\t\tbuffer_append_string_buffer(out, p->conf.external_js);\n\t\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"\\\"></script>\\n\"));\n\t\t} else if (buffer_is_empty(p->conf.external_js)) {\n\t\t\thttp_dirlist_append_js_table_resort(out, con);\n\t\t}\n\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\n\t\t\t\"</body>\\n\"\n\t\t\t\"</html>\\n\"\n\t\t));\n\t}\n}\n\nstatic int http_list_directory(server *srv, connection *con, plugin_data *p, buffer *dir) {\n\tDIR *dp;\n\tbuffer *out;\n\tstruct dirent *dent;\n\tstruct stat st;\n\tchar *path, *path_file;\n\tsize_t i;\n\tint hide_dotfiles = p->conf.hide_dot_files;\n\tdirls_list_t dirs, files, *list;\n\tdirls_entry_t *tmp;\n\tchar sizebuf[sizeof(\"999.9K\")];\n\tchar datebuf[sizeof(\"2005-Jan-01 22:23:24\")];\n\tconst char *content_type;\n\tlong name_max;\n#if defined(HAVE_XATTR) || defined(HAVE_EXTATTR)\n\tchar attrval[128];\n\tint attrlen;\n#endif\n#ifdef HAVE_LOCALTIME_R\n\tstruct tm tm;\n#endif\n\n\tif (buffer_string_is_empty(dir)) return -1;\n\n\ti = buffer_string_length(dir);\n\n#ifdef HAVE_PATHCONF\n\tif (0 >= (name_max = pathconf(dir->ptr, _PC_NAME_MAX))) {\n\t\t/* some broken fs (fuse) return 0 instead of -1 */\n#ifdef NAME_MAX\n\t\tname_max = NAME_MAX;\n#else\n\t\tname_max = 255; /* stupid default */\n#endif\n\t}\n#elif defined __WIN32\n\tname_max = FILENAME_MAX;\n#else\n\tname_max = NAME_MAX;\n#endif\n\n\tpath = malloc(i + name_max + 1);\n\tforce_assert(NULL != path);\n\tmemcpy(path, dir->ptr, i+1);\n\tpath_file = path + i;\n\n\tif (NULL == (dp = opendir(path))) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"sbs\",\n\t\t\t\"opendir failed:\", dir, strerror(errno));\n\n\t\tfree(path);\n\t\treturn -1;\n\t}\n\n\tdirs.ent   = (dirls_entry_t**) malloc(sizeof(dirls_entry_t*) * DIRLIST_BLOB_SIZE);\n\tforce_assert(dirs.ent);\n\tdirs.size  = DIRLIST_BLOB_SIZE;\n\tdirs.used  = 0;\n\tfiles.ent  = (dirls_entry_t**) malloc(sizeof(dirls_entry_t*) * DIRLIST_BLOB_SIZE);\n\tforce_assert(files.ent);\n\tfiles.size = DIRLIST_BLOB_SIZE;\n\tfiles.used = 0;\n\n\twhile ((dent = readdir(dp)) != NULL) {\n#ifdef HAVE_PCRE_H\n\t\tunsigned short exclude_match = 0;\n#endif\n\n\t\tif (dent->d_name[0] == '.') {\n\t\t\tif (hide_dotfiles)\n\t\t\t\tcontinue;\n\t\t\tif (dent->d_name[1] == '\\0')\n\t\t\t\tcontinue;\n\t\t\tif (dent->d_name[1] == '.' && dent->d_name[2] == '\\0')\n\t\t\t\tcontinue;\n\t\t}\n\n\t\tif (p->conf.hide_readme_file && !buffer_string_is_empty(p->conf.show_readme)) {\n\t\t\tif (strcmp(dent->d_name, p->conf.show_readme->ptr) == 0)\n\t\t\t\tcontinue;\n\t\t}\n\t\tif (p->conf.hide_header_file && !buffer_string_is_empty(p->conf.show_header)) {\n\t\t\tif (strcmp(dent->d_name, p->conf.show_header->ptr) == 0)\n\t\t\t\tcontinue;\n\t\t}\n\n\t\t/* compare d_name against excludes array\n\t\t * elements, skipping any that match.\n\t\t */\n#ifdef HAVE_PCRE_H\n\t\tfor(i = 0; i < p->conf.excludes->used; i++) {\n\t\t\tint n;\n#define N 10\n\t\t\tint ovec[N * 3];\n\t\t\tpcre *regex = p->conf.excludes->ptr[i]->regex;\n\n\t\t\tif ((n = pcre_exec(regex, NULL, dent->d_name,\n\t\t\t\t    strlen(dent->d_name), 0, 0, ovec, 3 * N)) < 0) {\n\t\t\t\tif (n != PCRE_ERROR_NOMATCH) {\n\t\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sd\",\n\t\t\t\t\t\t\"execution error while matching:\", n);\n\n\t\t\t\t\t/* aborting would require a lot of manual cleanup here.\n\t\t\t\t\t * skip instead (to not leak names that break pcre matching)\n\t\t\t\t\t */\n\t\t\t\t\texclude_match = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\texclude_match = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (exclude_match) {\n\t\t\tcontinue;\n\t\t}\n#endif\n\n\t\ti = strlen(dent->d_name);\n\n\t\t/* NOTE: the manual says, d_name is never more than NAME_MAX\n\t\t *       so this should actually not be a buffer-overflow-risk\n\t\t */\n\t\tif (i > (size_t)name_max) continue;\n\n\t\tmemcpy(path_file, dent->d_name, i + 1);\n\t\tif (stat(path, &st) != 0)\n\t\t\tcontinue;\n\n\t\tlist = &files;\n\t\tif (S_ISDIR(st.st_mode))\n\t\t\tlist = &dirs;\n\n\t\tif (list->used == list->size) {\n\t\t\tlist->size += DIRLIST_BLOB_SIZE;\n\t\t\tlist->ent   = (dirls_entry_t**) realloc(list->ent, sizeof(dirls_entry_t*) * list->size);\n\t\t\tforce_assert(list->ent);\n\t\t}\n\n\t\ttmp = (dirls_entry_t*) malloc(sizeof(dirls_entry_t) + 1 + i);\n\t\ttmp->mtime = st.st_mtime;\n\t\ttmp->size  = st.st_size;\n\t\ttmp->namelen = i;\n\t\tmemcpy(DIRLIST_ENT_NAME(tmp), dent->d_name, i + 1);\n\n\t\tlist->ent[list->used++] = tmp;\n\t}\n\tclosedir(dp);\n\n\tif (dirs.used) http_dirls_sort(dirs.ent, dirs.used);\n\n\tif (files.used) http_dirls_sort(files.ent, files.used);\n\n\tout = chunkqueue_append_buffer_open(con->write_queue);\n\thttp_list_directory_header(srv, con, p, out);\n\n\t/* directories */\n\tfor (i = 0; i < dirs.used; i++) {\n\t\ttmp = dirs.ent[i];\n\n#ifdef HAVE_LOCALTIME_R\n\t\tlocaltime_r(&(tmp->mtime), &tm);\n\t\tstrftime(datebuf, sizeof(datebuf), \"%Y-%b-%d %H:%M:%S\", &tm);\n#else\n\t\tstrftime(datebuf, sizeof(datebuf), \"%Y-%b-%d %H:%M:%S\", localtime(&(tmp->mtime)));\n#endif\n\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"<tr class=\\\"d\\\"><td class=\\\"n\\\"><a href=\\\"\"));\n\t\tbuffer_append_string_encoded(out, DIRLIST_ENT_NAME(tmp), tmp->namelen, ENCODING_REL_URI_PART);\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"/\\\">\"));\n\t\tbuffer_append_string_encoded(out, DIRLIST_ENT_NAME(tmp), tmp->namelen, ENCODING_MINIMAL_XML);\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"</a>/</td><td class=\\\"m\\\">\"));\n\t\tbuffer_append_string_len(out, datebuf, sizeof(datebuf) - 1);\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"</td><td class=\\\"s\\\">- &nbsp;</td><td class=\\\"t\\\">Directory</td></tr>\\n\"));\n\n\t\tfree(tmp);\n\t}\n\n\t/* files */\n\tfor (i = 0; i < files.used; i++) {\n\t\ttmp = files.ent[i];\n\n\t\tcontent_type = NULL;\n#if defined(HAVE_XATTR)\n\t\tif (con->conf.use_xattr) {\n\t\t\tmemcpy(path_file, DIRLIST_ENT_NAME(tmp), tmp->namelen + 1);\n\t\t\tattrlen = sizeof(attrval) - 1;\n\t\t\tif (attr_get(path, srv->srvconf.xattr_name->ptr, attrval, &attrlen, 0) == 0) {\n\t\t\t\tattrval[attrlen] = '\\0';\n\t\t\t\tcontent_type = attrval;\n\t\t\t}\n\t\t}\n#elif defined(HAVE_EXTATTR)\n\t\tif (con->conf.use_xattr) {\n\t\t\tmemcpy(path_file, DIRLIST_ENT_NAME(tmp), tmp->namelen + 1);\n\t\t\tif(-1 != (attrlen = extattr_get_file(path, EXTATTR_NAMESPACE_USER, srv->srvconf.xattr_name->ptr, attrval, sizeof(attrval)-1))) {\n\t\t\t\tattrval[attrlen] = '\\0';\n\t\t\t\tcontent_type = attrval;\n\t\t\t}\n\t\t}\n#endif\n\n\t\tif (content_type == NULL) {\n\t\t\tconst buffer *type = stat_cache_mimetype_by_ext(con, DIRLIST_ENT_NAME(tmp), tmp->namelen);\n\t\t\tcontent_type = NULL != type ? type->ptr : \"application/octet-stream\";\n\t\t}\n\n#ifdef HAVE_LOCALTIME_R\n\t\tlocaltime_r(&(tmp->mtime), &tm);\n\t\tstrftime(datebuf, sizeof(datebuf), \"%Y-%b-%d %H:%M:%S\", &tm);\n#else\n\t\tstrftime(datebuf, sizeof(datebuf), \"%Y-%b-%d %H:%M:%S\", localtime(&(tmp->mtime)));\n#endif\n\t\thttp_list_directory_sizefmt(sizebuf, sizeof(sizebuf), tmp->size);\n\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"<tr><td class=\\\"n\\\"><a href=\\\"\"));\n\t\tbuffer_append_string_encoded(out, DIRLIST_ENT_NAME(tmp), tmp->namelen, ENCODING_REL_URI_PART);\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"\\\">\"));\n\t\tbuffer_append_string_encoded(out, DIRLIST_ENT_NAME(tmp), tmp->namelen, ENCODING_MINIMAL_XML);\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"</a></td><td class=\\\"m\\\">\"));\n\t\tbuffer_append_string_len(out, datebuf, sizeof(datebuf) - 1);\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"</td><td class=\\\"s\\\">\"));\n\t\tbuffer_append_string(out, sizebuf);\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"</td><td class=\\\"t\\\">\"));\n\t\tbuffer_append_string(out, content_type);\n\t\tbuffer_append_string_len(out, CONST_STR_LEN(\"</td></tr>\\n\"));\n\n\t\tfree(tmp);\n\t}\n\n\tfree(files.ent);\n\tfree(dirs.ent);\n\tfree(path);\n\n\thttp_list_directory_footer(srv, con, p, out);\n\n\t/* Insert possible charset to Content-Type */\n\tif (buffer_string_is_empty(p->conf.encoding)) {\n\t\thttp_header_response_set(con, HTTP_HEADER_CONTENT_TYPE, CONST_STR_LEN(\"Content-Type\"), CONST_STR_LEN(\"text/html\"));\n\t} else {\n\t\tbuffer_copy_string_len(p->content_charset, CONST_STR_LEN(\"text/html; charset=\"));\n\t\tbuffer_append_string_buffer(p->content_charset, p->conf.encoding);\n\t\thttp_header_response_set(con, HTTP_HEADER_CONTENT_TYPE, CONST_STR_LEN(\"Content-Type\"), CONST_BUF_LEN(p->content_charset));\n\t}\n\n\tchunkqueue_append_buffer_commit(con->write_queue);\n\tcon->file_finished = 1;\n\n\treturn 0;\n}\n\n\n\nURIHANDLER_FUNC(mod_dirlisting_subrequest) {\n\tplugin_data *p = p_d;\n\tstat_cache_entry *sce = NULL;\n\n\tUNUSED(srv);\n\n\t/* we only handle GET and HEAD */\n\tswitch(con->request.http_method) {\n\tcase HTTP_METHOD_GET:\n\tcase HTTP_METHOD_HEAD:\n\t\tbreak;\n\tdefault:\n\t\treturn HANDLER_GO_ON;\n\t}\n\n\tif (con->mode != DIRECT) return HANDLER_GO_ON;\n\n\tif (buffer_is_empty(con->physical.path)) return HANDLER_GO_ON;\n\tif (buffer_is_empty(con->uri.path)) return HANDLER_GO_ON;\n\tif (con->uri.path->ptr[buffer_string_length(con->uri.path) - 1] != '/') return HANDLER_GO_ON;\n\n\tmod_dirlisting_patch_connection(srv, con, p);\n\n\tif (!p->conf.dir_listing) return HANDLER_GO_ON;\n\n\tif (con->conf.log_request_handling) {\n\t\tlog_error_write(srv, __FILE__, __LINE__,  \"s\",  \"-- handling the request as Dir-Listing\");\n\t\tlog_error_write(srv, __FILE__, __LINE__,  \"sb\", \"URI          :\", con->uri.path);\n\t}\n\n\tif (HANDLER_ERROR == stat_cache_get_entry(srv, con, con->physical.path, &sce)) {\n\t\tlog_error_write(srv, __FILE__, __LINE__,  \"SB\", \"stat_cache_get_entry failed: \", con->physical.path);\n\t\tSEGFAULT();\n\t}\n\n\tif (!S_ISDIR(sce->st.st_mode)) return HANDLER_GO_ON;\n\n\tif (http_list_directory(srv, con, p, con->physical.path)) {\n\t\t/* dirlisting failed */\n\t\tcon->http_status = 403;\n\t}\n\n\tbuffer_reset(con->physical.path);\n\n\t/* not found */\n\treturn HANDLER_FINISHED;\n}\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_dirlisting_plugin_init(plugin *p);\nint mod_dirlisting_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"dirlisting\");\n\n\tp->init        = mod_dirlisting_init;\n\tp->handle_subrequest_start  = mod_dirlisting_subrequest;\n\tp->set_defaults  = mod_dirlisting_set_defaults;\n\tp->cleanup     = mod_dirlisting_free;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_mysql_vhost.c": "#include \"first.h\"\n\n#include <unistd.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include <mysql.h>\n\n#include \"base.h\"\n#include \"plugin.h\"\n#include \"fdevent.h\"\n#include \"log.h\"\n\n#include \"stat_cache.h\"\n\n/*\n * Plugin for lighttpd to use MySQL\n *   for domain to directory lookups,\n *   i.e virtual hosts (vhosts).\n *\n * /ada@riksnet.se 2004-12-06\n */\n\ntypedef struct {\n\tMYSQL \t*mysql;\n\tbuffer  *mysql_query;\n\n\tbuffer  *mydb;\n\tbuffer  *myuser;\n\tbuffer  *mypass;\n\tbuffer  *mysock;\n\n\tbuffer  *hostname;\n\tunsigned short port;\n} plugin_config;\n\n/* global plugin data */\ntypedef struct {\n\tPLUGIN_DATA;\n\n\tbuffer \t*tmp_buf;\n\n\tplugin_config **config_storage;\n\n\tplugin_config conf;\n} plugin_data;\n\n/* per connection plugin data */\ntypedef struct {\n\tbuffer\t*server_name;\n\tbuffer\t*document_root;\n} plugin_connection_data;\n\n/* init the plugin data */\nINIT_FUNC(mod_mysql_vhost_init) {\n\tplugin_data *p;\n\n\tp = calloc(1, sizeof(*p));\n\n\tp->tmp_buf = buffer_init();\n\n\treturn p;\n}\n\n/* cleanup the plugin data */\nSERVER_FUNC(mod_mysql_vhost_cleanup) {\n\tplugin_data *p = p_d;\n\n\tUNUSED(srv);\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (!s) continue;\n\n\t\t\tmysql_close(s->mysql);\n\n\t\t\tbuffer_free(s->mysql_query);\n\t\t\tbuffer_free(s->mydb);\n\t\t\tbuffer_free(s->myuser);\n\t\t\tbuffer_free(s->mypass);\n\t\t\tbuffer_free(s->mysock);\n\t\t\tbuffer_free(s->hostname);\n\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\tbuffer_free(p->tmp_buf);\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* handle the plugin per connection data */\nstatic void* mod_mysql_vhost_connection_data(server *srv, connection *con, void *p_d)\n{\n\tplugin_data *p = p_d;\n\tplugin_connection_data *c = con->plugin_ctx[p->id];\n\n\tUNUSED(srv);\n\n\tif (c) return c;\n\tc = calloc(1, sizeof(*c));\n\n\tc->server_name = buffer_init();\n\tc->document_root = buffer_init();\n\n\treturn con->plugin_ctx[p->id] = c;\n}\n\n/* destroy the plugin per connection data */\nCONNECTION_FUNC(mod_mysql_vhost_handle_connection_reset) {\n\tplugin_data *p = p_d;\n\tplugin_connection_data *c = con->plugin_ctx[p->id];\n\n\tUNUSED(srv);\n\n\tif (!c) return HANDLER_GO_ON;\n\n\tbuffer_free(c->server_name);\n\tbuffer_free(c->document_root);\n\n\tfree(c);\n\n\tcon->plugin_ctx[p->id] = NULL;\n\treturn HANDLER_GO_ON;\n}\n\n/* set configuration values */\nSERVER_FUNC(mod_mysql_vhost_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\tconfig_values_t cv[] = {\n\t\t{ \"mysql-vhost.db\",       NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION }, /* 0 */\n\t\t{ \"mysql-vhost.user\",     NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION }, /* 1 */\n\t\t{ \"mysql-vhost.pass\",     NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION }, /* 2 */\n\t\t{ \"mysql-vhost.sock\",     NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION }, /* 3 */\n\t\t{ \"mysql-vhost.sql\",      NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION }, /* 4 */\n\t\t{ \"mysql-vhost.hostname\", NULL, T_CONFIG_STRING, T_CONFIG_SCOPE_CONNECTION }, /* 5 */\n\t\t{ \"mysql-vhost.port\",     NULL, T_CONFIG_SHORT,  T_CONFIG_SCOPE_CONNECTION }, /* 6 */\n\t\t{ NULL,                   NULL, T_CONFIG_UNSET,  T_CONFIG_SCOPE_UNSET      }\n\t};\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->mysql_query = buffer_init();\n\t\ts->mydb = buffer_init();\n\t\ts->myuser = buffer_init();\n\t\ts->mypass = buffer_init();\n\t\ts->mysock = buffer_init();\n\t\ts->hostname = buffer_init();\n\t\ts->port = 0;               /* default port for mysql */\n\t\ts->mysql = NULL;\n\n\t\tcv[0].destination = s->mydb;\n\t\tcv[1].destination = s->myuser;\n\t\tcv[2].destination = s->mypass;\n\t\tcv[3].destination = s->mysock;\n\t\tcv[4].destination = s->mysql_query;\n\t\tcv[5].destination = s->hostname;\n\t\tcv[6].destination = &(s->port);\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\t/* required:\n\t\t * - username\n\t\t * - database\n\t\t *\n\t\t * optional:\n\t\t * - password, default: empty\n\t\t * - socket, default: mysql default\n\t\t * - hostname, if set overrides socket\n\t\t * - port, default: 3306\n\t\t */\n\n\t\t/* all have to be set */\n\t\tif (!(buffer_string_is_empty(s->myuser) ||\n\t\t      buffer_string_is_empty(s->mydb))) {\n\n\t\t\tif (NULL == (s->mysql = mysql_init(NULL))) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\", \"mysql_init() failed, exiting...\");\n\t\t\t\treturn HANDLER_ERROR;\n\t\t\t}\n\n#if MYSQL_VERSION_ID >= 50013\n\t\t\t/* in mysql versions above 5.0.3 the reconnect flag is off by default */\n\t\t\t{\n\t\t\t\tchar reconnect = 1;\n\t\t\t\tmysql_options(s->mysql, MYSQL_OPT_RECONNECT, &reconnect);\n\t\t\t}\n#endif\n\n#define FOO(x) (buffer_string_is_empty(s->x) ? NULL : s->x->ptr)\n\n#if MYSQL_VERSION_ID >= 40100\n\t\t\t/* CLIENT_MULTI_STATEMENTS first appeared in 4.1 */ \n\t\t\tif (!mysql_real_connect(s->mysql, FOO(hostname), FOO(myuser), FOO(mypass),\n\t\t\t\t\t\tFOO(mydb), s->port, FOO(mysock), CLIENT_MULTI_STATEMENTS)) {\n#else\n\t\t\tif (!mysql_real_connect(s->mysql, FOO(hostname), FOO(myuser), FOO(mypass),\n\t\t\t\t\t\tFOO(mydb), s->port, FOO(mysock), 0)) {\n#endif\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\", mysql_error(s->mysql));\n\t\t\t\treturn HANDLER_ERROR;\n\t\t\t}\n#undef FOO\n\n\t\t\tfdevent_setfd_cloexec(s->mysql->net.fd);\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_mysql_vhost_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(mysql_query);\n\tPATCH(mysql);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"mysql-vhost.sql\"))) {\n\t\t\t\tPATCH(mysql_query);\n\t\t\t}\n\t\t}\n\n\t\tif (s->mysql) {\n\t\t\tPATCH(mysql);\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\n\n/* handle document root request */\nCONNECTION_FUNC(mod_mysql_vhost_handle_docroot) {\n\tplugin_data *p = p_d;\n\tplugin_connection_data *c;\n\tstat_cache_entry *sce;\n\n\tunsigned  cols;\n\tMYSQL_ROW row;\n\tMYSQL_RES *result = NULL;\n\n\t/* no host specified? */\n\tif (buffer_string_is_empty(con->uri.authority)) return HANDLER_GO_ON;\n\n\tmod_mysql_vhost_patch_connection(srv, con, p);\n\n\tif (!p->conf.mysql) return HANDLER_GO_ON;\n\tif (buffer_string_is_empty(p->conf.mysql_query)) return HANDLER_GO_ON;\n\n\t/* sets up connection data if not done yet */\n\tc = mod_mysql_vhost_connection_data(srv, con, p_d);\n\n\t/* check if cached this connection */\n\tif (buffer_is_equal(c->server_name, con->uri.authority)) goto GO_ON;\n\n\t/* build and run SQL query */\n\tbuffer_clear(p->tmp_buf);\n\tfor (char *b = p->conf.mysql_query->ptr, *d; *b; b = d+1) {\n\t\tif (NULL != (d = strchr(b, '?'))) {\n\t\t\t/* escape the uri.authority */\n\t\t\tunsigned long to_len;\n\t\t\tbuffer_append_string_len(p->tmp_buf, b, (size_t)(d - b));\n\t\t\tbuffer_string_prepare_append(p->tmp_buf, buffer_string_length(con->uri.authority) * 2);\n\t\t\tto_len = mysql_real_escape_string(p->conf.mysql,\n\t\t\t\t\tp->tmp_buf->ptr + buffer_string_length(p->tmp_buf),\n\t\t\t\t\tCONST_BUF_LEN(con->uri.authority));\n\t\t\tif ((unsigned long)~0 == to_len) goto ERR500;\n\t\t\tbuffer_commit(p->tmp_buf, to_len);\n\t\t} else {\n\t\t\td = p->conf.mysql_query->ptr + buffer_string_length(p->conf.mysql_query);\n\t\t\tbuffer_append_string_len(p->tmp_buf, b, (size_t)(d - b));\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (mysql_real_query(p->conf.mysql, CONST_BUF_LEN(p->tmp_buf))) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\", mysql_error(p->conf.mysql));\n\t\tgoto ERR500;\n\t}\n\tresult = mysql_store_result(p->conf.mysql);\n\tcols = mysql_num_fields(result);\n\trow = mysql_fetch_row(result);\n\tif (!row || cols < 1) {\n\t\t/* no such virtual host */\n\t\tmysql_free_result(result);\n#if MYSQL_VERSION_ID >= 40100\n\t\twhile (mysql_next_result(p->conf.mysql) == 0);\n#endif\n\t\treturn HANDLER_GO_ON;\n\t}\n\n\t/* sanity check that really is a directory */\n\tbuffer_copy_string(p->tmp_buf, row[0]);\n\tbuffer_append_slash(p->tmp_buf);\n\n\tif (HANDLER_ERROR == stat_cache_get_entry(srv, con, p->tmp_buf, &sce)) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\", strerror(errno), p->tmp_buf);\n\t\tgoto ERR500;\n\t}\n\tif (!S_ISDIR(sce->st.st_mode)) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\", \"Not a directory\", p->tmp_buf);\n\t\tgoto ERR500;\n\t}\n\n\t/* cache the data */\n\tbuffer_copy_buffer(c->server_name, con->uri.authority);\n\tbuffer_copy_buffer(c->document_root, p->tmp_buf);\n\n\tmysql_free_result(result);\n#if MYSQL_VERSION_ID >= 40100\n\twhile (mysql_next_result(p->conf.mysql) == 0);\n#endif\n\n\t/* fix virtual server and docroot */\nGO_ON:\n\tbuffer_copy_buffer(con->server_name, c->server_name);\n\tbuffer_copy_buffer(con->physical.doc_root, c->document_root);\n\n\treturn HANDLER_GO_ON;\n\nERR500:\n\tif (result) mysql_free_result(result);\n#if MYSQL_VERSION_ID >= 40100\n\twhile (mysql_next_result(p->conf.mysql) == 0);\n#endif\n\tcon->http_status = 500; /* Internal Error */\n\tcon->mode = DIRECT;\n\treturn HANDLER_FINISHED;\n}\n\n/* this function is called at dlopen() time and inits the callbacks */\nint mod_mysql_vhost_plugin_init(plugin *p);\nint mod_mysql_vhost_plugin_init(plugin *p) {\n\tp->version        = LIGHTTPD_VERSION_ID;\n\tp->name           = buffer_init_string(\"mysql_vhost\");\n\n\tp->init           = mod_mysql_vhost_init;\n\tp->cleanup        = mod_mysql_vhost_cleanup;\n\tp->connection_reset = mod_mysql_vhost_handle_connection_reset;\n\n\tp->set_defaults   = mod_mysql_vhost_set_defaults;\n\tp->handle_docroot = mod_mysql_vhost_handle_docroot;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_indexfile.c": "#include \"first.h\"\n\n#include \"base.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n#include \"http_header.h\"\n\n#include \"plugin.h\"\n\n#include \"stat_cache.h\"\n\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n\n/* plugin config for all request/connections */\n\ntypedef struct {\n\tarray *indexfiles;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\n\tbuffer *tmp_buf;\n\n\tplugin_config **config_storage;\n\n\tplugin_config conf;\n} plugin_data;\n\n/* init the plugin data */\nINIT_FUNC(mod_indexfile_init) {\n\tplugin_data *p;\n\n\tp = calloc(1, sizeof(*p));\n\n\tp->tmp_buf = buffer_init();\n\n\treturn p;\n}\n\n/* detroy the plugin data */\nFREE_FUNC(mod_indexfile_free) {\n\tplugin_data *p = p_d;\n\n\tUNUSED(srv);\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (NULL == s) continue;\n\n\t\t\tarray_free(s->indexfiles);\n\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\n\tbuffer_free(p->tmp_buf);\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\n\nSETDEFAULTS_FUNC(mod_indexfile_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\tconfig_values_t cv[] = {\n\t\t{ \"index-file.names\",           NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 0 */\n\t\t{ \"server.indexfiles\",          NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 1 */\n\t\t{ NULL,                         NULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->indexfiles    = array_init();\n\n\t\tcv[0].destination = s->indexfiles;\n\t\tcv[1].destination = s->indexfiles; /* old name for [0] */\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (!array_is_vlist(s->indexfiles)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for index-file.names; expected list of \\\"file\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_indexfile_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(indexfiles);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"server.indexfiles\"))) {\n\t\t\t\tPATCH(indexfiles);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"index-file.names\"))) {\n\t\t\t\tPATCH(indexfiles);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\nURIHANDLER_FUNC(mod_indexfile_subrequest) {\n\tplugin_data *p = p_d;\n\tsize_t k;\n\tstat_cache_entry *sce = NULL;\n\n\tif (con->mode != DIRECT) return HANDLER_GO_ON;\n\n\tif (buffer_is_empty(con->uri.path)) return HANDLER_GO_ON;\n\tif (con->uri.path->ptr[buffer_string_length(con->uri.path) - 1] != '/') return HANDLER_GO_ON;\n\n\tmod_indexfile_patch_connection(srv, con, p);\n\n\tif (con->conf.log_request_handling) {\n\t\tlog_error_write(srv, __FILE__, __LINE__,  \"s\",  \"-- handling the request as Indexfile\");\n\t\tlog_error_write(srv, __FILE__, __LINE__,  \"sb\", \"URI          :\", con->uri.path);\n\t}\n\n\t/* indexfile */\n\tfor (k = 0; k < p->conf.indexfiles->used; k++) {\n\t\tdata_string *ds = (data_string *)p->conf.indexfiles->data[k];\n\n\t\tif (ds->value && ds->value->ptr[0] == '/') {\n\t\t\t/* if the index-file starts with a prefix as use this file as\n\t\t\t * index-generator */\n\t\t\tbuffer_copy_buffer(p->tmp_buf, con->physical.doc_root);\n\t\t} else {\n\t\t\tbuffer_copy_buffer(p->tmp_buf, con->physical.path);\n\t\t}\n\t\tbuffer_append_string_buffer(p->tmp_buf, ds->value);\n\n\t\tif (HANDLER_ERROR == stat_cache_get_entry(srv, con, p->tmp_buf, &sce)) {\n\t\t\tif (errno == EACCES) {\n\t\t\t\tcon->http_status = 403;\n\t\t\t\tbuffer_reset(con->physical.path);\n\n\t\t\t\treturn HANDLER_FINISHED;\n\t\t\t}\n\n\t\t\tif (errno != ENOENT &&\n\t\t\t    errno != ENOTDIR) {\n\t\t\t\t/* we have no idea what happend. let's tell the user so. */\n\n\t\t\t\tcon->http_status = 500;\n\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"ssbsb\",\n\t\t\t\t\t\t\"file not found ... or so: \", strerror(errno),\n\t\t\t\t\t\tcon->uri.path,\n\t\t\t\t\t\t\"->\", con->physical.path);\n\n\t\t\t\tbuffer_reset(con->physical.path);\n\n\t\t\t\treturn HANDLER_FINISHED;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (ds->value && ds->value->ptr[0] == '/') {\n\t\t\t/* replace uri.path */\n\t\t\tbuffer_copy_buffer(con->uri.path, ds->value);\n\t\t\thttp_header_env_set(con, CONST_STR_LEN(\"PATH_TRANSLATED_DIRINDEX\"), CONST_BUF_LEN(con->physical.path));\n\t\t} else {\n\t\t\t/* append to uri.path the relative path to index file (/ -> /index.php) */\n\t\t\tbuffer_append_string_buffer(con->uri.path, ds->value);\n\t\t}\n\n\t\tbuffer_copy_buffer(con->physical.path, p->tmp_buf);\n\n\t\treturn HANDLER_GO_ON;\n\t}\n\n\t/* not found */\n\treturn HANDLER_GO_ON;\n}\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_indexfile_plugin_init(plugin *p);\nint mod_indexfile_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"indexfile\");\n\n\tp->init        = mod_indexfile_init;\n\tp->handle_subrequest_start = mod_indexfile_subrequest;\n\tp->set_defaults  = mod_indexfile_set_defaults;\n\tp->cleanup     = mod_indexfile_free;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/plugin.c": "#include \"first.h\"\n\n#include \"plugin.h\"\n#include \"base.h\"\n#include \"log.h\"\n\n#include <string.h>\n#include <stdlib.h>\n\n#ifdef HAVE_VALGRIND_VALGRIND_H\n# include <valgrind/valgrind.h>\n#endif\n\n#if !defined(__WIN32) && !defined(LIGHTTPD_STATIC)\n# include <dlfcn.h>\n#endif\n/*\n *\n * if you change this enum to add a new callback, be sure\n * - that PLUGIN_FUNC_SIZEOF is the last entry\n * - that you add PLUGIN_TO_SLOT twice:\n *   1. as callback-dispatcher\n *   2. in plugins_call_init()\n *\n */\n\ntypedef struct {\n\tPLUGIN_DATA;\n} plugin_data;\n\ntypedef enum {\n\tPLUGIN_FUNC_UNSET,\n\n\tPLUGIN_FUNC_HANDLE_URI_CLEAN,\n\tPLUGIN_FUNC_HANDLE_URI_RAW,\n\tPLUGIN_FUNC_HANDLE_REQUEST_ENV,\n\tPLUGIN_FUNC_HANDLE_REQUEST_DONE,\n\tPLUGIN_FUNC_HANDLE_CONNECTION_ACCEPT,\n\tPLUGIN_FUNC_HANDLE_CONNECTION_SHUT_WR,\n\tPLUGIN_FUNC_HANDLE_CONNECTION_CLOSE,\n\tPLUGIN_FUNC_HANDLE_TRIGGER,\n\tPLUGIN_FUNC_HANDLE_SIGHUP,\n\tPLUGIN_FUNC_HANDLE_WAITPID,\n\tPLUGIN_FUNC_HANDLE_SUBREQUEST,\n\tPLUGIN_FUNC_HANDLE_SUBREQUEST_START,\n\tPLUGIN_FUNC_HANDLE_RESPONSE_START,\n\tPLUGIN_FUNC_HANDLE_DOCROOT,\n\tPLUGIN_FUNC_HANDLE_PHYSICAL,\n\tPLUGIN_FUNC_CONNECTION_RESET,\n\tPLUGIN_FUNC_INIT,\n\tPLUGIN_FUNC_CLEANUP,\n\tPLUGIN_FUNC_SET_DEFAULTS,\n\tPLUGIN_FUNC_WORKER_INIT,\n\n\tPLUGIN_FUNC_SIZEOF\n} plugin_t;\n\nstatic plugin *plugin_init(void) {\n\tplugin *p;\n\n\tp = calloc(1, sizeof(*p));\n\tforce_assert(NULL != p);\n\n\treturn p;\n}\n\nstatic void plugin_free(plugin *p) {\n#if !defined(LIGHTTPD_STATIC)\n\tint use_dlclose = 1;\n#endif\n\n\tif (p->name) buffer_free(p->name);\n#if defined(HAVE_VALGRIND_VALGRIND_H) && !defined(LIGHTTPD_STATIC)\n\t/*if (RUNNING_ON_VALGRIND) use_dlclose = 0;*/\n#endif\n\n#if !defined(LIGHTTPD_STATIC)\n\tif (use_dlclose && p->lib) {\n#if defined(__WIN32)\n)\t\tFreeLibrary(p->lib);\n#else\n\t\tdlclose(p->lib);\n#endif\n\t}\n#endif\n\n\tfree(p);\n}\n\nstatic int plugins_register(server *srv, plugin *p) {\n\tplugin **ps;\n\tif (srv->plugins.used == srv->plugins.size) {\n\t\tsrv->plugins.size += 4;\n\t\tsrv->plugins.ptr   = realloc(srv->plugins.ptr, srv->plugins.size * sizeof(*ps));\n\t\tforce_assert(NULL != srv->plugins.ptr);\n\t}\n\n\tps = srv->plugins.ptr;\n\tps[srv->plugins.used++] = p;\n\n\treturn 0;\n}\n\n/**\n *\n *\n *\n */\n\n#if defined(LIGHTTPD_STATIC)\n\n/* pre-declare functions, as there is no header for them */\n#define PLUGIN_INIT(x)\\\n\tint x ## _plugin_init(plugin *p);\n\n#include \"plugin-static.h\"\n\n#undef PLUGIN_INIT\n\n/* build NULL-terminated table of name + init-function */\n\ntypedef struct {\n\tconst char* name;\n\tint (*plugin_init)(plugin *p);\n} plugin_load_functions;\n\nstatic const plugin_load_functions load_functions[] = {\n#define PLUGIN_INIT(x) \\\n\t{ #x, &x ## _plugin_init },\n\n#include \"plugin-static.h\"\n\n\t{ NULL, NULL }\n#undef PLUGIN_INIT\n};\n\nint plugins_load(server *srv) {\n\tplugin *p;\n\tsize_t i, j;\n\n\tfor (i = 0; i < srv->srvconf.modules->used; i++) {\n\t\tdata_string *d = (data_string *)srv->srvconf.modules->data[i];\n\t\tchar *module = d->value->ptr;\n\n\t\tfor (j = 0; j < i; j++) {\n\t\t\tif (buffer_is_equal(d->value, ((data_string *) srv->srvconf.modules->data[j])->value)) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sbs\",\n\t\t\t\t\t\"Cannot load plugin\", d->value,\n\t\t\t\t\t\"more than once, please fix your config (lighttpd may not accept such configs in future releases)\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tfor (j = 0; load_functions[j].name; ++j) {\n\t\t\tif (0 == strcmp(load_functions[j].name, module)) {\n\t\t\t\tp = plugin_init();\n\t\t\t\tif ((*load_functions[j].plugin_init)(p)) {\n\t\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\", module, \"plugin init failed\" );\n\t\t\t\t\tplugin_free(p);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tplugins_register(srv, p);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!load_functions[j].name) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\", module, \" plugin not found\" );\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\treturn 0;\n}\n#else /* defined(LIGHTTPD_STATIC) */\nint plugins_load(server *srv) {\n\tplugin *p;\n\tint (*init)(plugin *pl);\n\tsize_t i, j;\n\n\tfor (i = 0; i < srv->srvconf.modules->used; i++) {\n\t\tdata_string *d = (data_string *)srv->srvconf.modules->data[i];\n\t\tchar *module = d->value->ptr;\n\n\t\tfor (j = 0; j < i; j++) {\n\t\t\tif (buffer_is_equal(d->value, ((data_string *) srv->srvconf.modules->data[j])->value)) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sbs\",\n\t\t\t\t\t\"Cannot load plugin\", d->value,\n\t\t\t\t\t\"more than once, please fix your config (lighttpd may not accept such configs in future releases)\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tbuffer_copy_buffer(srv->tmp_buf, srv->srvconf.modules_dir);\n\n\t\tbuffer_append_string_len(srv->tmp_buf, CONST_STR_LEN(\"/\"));\n\t\tbuffer_append_string(srv->tmp_buf, module);\n#if defined(__WIN32) || defined(__CYGWIN__)\n\t\tbuffer_append_string_len(srv->tmp_buf, CONST_STR_LEN(\".dll\"));\n#else\n\t\tbuffer_append_string_len(srv->tmp_buf, CONST_STR_LEN(\".so\"));\n#endif\n\n\t\tp = plugin_init();\n#ifdef __WIN32\n\t\tif (NULL == (p->lib = LoadLibrary(srv->tmp_buf->ptr))) {\n\t\t\tLPVOID lpMsgBuf;\n\t\t\tFormatMessage(\n\t\t\t\tFORMAT_MESSAGE_ALLOCATE_BUFFER |\n\t\t\t\t\tFORMAT_MESSAGE_FROM_SYSTEM,\n\t\t\t\tNULL,\n\t\t\t\tGetLastError(),\n\t\t\t\tMAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n\t\t\t\t(LPTSTR) &lpMsgBuf,\n\t\t\t\t0, NULL);\n\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"ssb\", \"LoadLibrary() failed\",\n\t\t\t\tlpMsgBuf, srv->tmp_buf);\n\n\t\t\tplugin_free(p);\n\n\t\t\treturn -1;\n\n\t\t}\n#else\n\t\tif (NULL == (p->lib = dlopen(srv->tmp_buf->ptr, RTLD_NOW|RTLD_GLOBAL))) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sbs\", \"dlopen() failed for:\",\n\t\t\t\tsrv->tmp_buf, dlerror());\n\n\t\t\tplugin_free(p);\n\n\t\t\treturn -1;\n\t\t}\n\n#endif\n\t\tbuffer_copy_string(srv->tmp_buf, module);\n\t\tbuffer_append_string_len(srv->tmp_buf, CONST_STR_LEN(\"_plugin_init\"));\n\n#ifdef __WIN32\n\t\tinit = GetProcAddress(p->lib, srv->tmp_buf->ptr);\n\n\t\tif (init == NULL) {\n\t\t\tLPVOID lpMsgBuf;\n\t\t\tFormatMessage(\n\t\t\t\tFORMAT_MESSAGE_ALLOCATE_BUFFER |\n\t\t\t\t\tFORMAT_MESSAGE_FROM_SYSTEM,\n\t\t\t\tNULL,\n\t\t\t\tGetLastError(),\n\t\t\t\tMAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n\t\t\t\t(LPTSTR) &lpMsgBuf,\n\t\t\t\t0, NULL);\n\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sbs\", \"getprocaddress failed:\", srv->tmp_buf, lpMsgBuf);\n\n\t\t\tplugin_free(p);\n\t\t\treturn -1;\n\t\t}\n\n#else\n#if 1\n\t\tinit = (int (*)(plugin *))(intptr_t)dlsym(p->lib, srv->tmp_buf->ptr);\n#else\n\t\t*(void **)(&init) = dlsym(p->lib, srv->tmp_buf->ptr);\n#endif\n\t\tif (NULL == init) {\n\t\t\tconst char *error = dlerror();\n\t\t\tif (error != NULL) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\", \"dlsym:\", error);\n\t\t\t} else {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\", \"dlsym symbol not found:\", srv->tmp_buf->ptr);\n\t\t\t}\n\n\t\t\tplugin_free(p);\n\t\t\treturn -1;\n\t\t}\n\n#endif\n\t\tif ((*init)(p)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\", module, \"plugin init failed\" );\n\n\t\t\tplugin_free(p);\n\t\t\treturn -1;\n\t\t}\n#if 0\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\", module, \"plugin loaded\" );\n#endif\n\t\tplugins_register(srv, p);\n\t}\n\n\treturn 0;\n}\n#endif /* defined(LIGHTTPD_STATIC) */\n\n#define PLUGIN_TO_SLOT(x, y) \\\n\thandler_t plugins_call_##y(server *srv, connection *con) {\\\n\t\tplugin ** const slot = ((plugin ***)(srv->plugin_slots))[x];\\\n\t\tconst size_t used = srv->plugins.used;\\\n\t\thandler_t rc = HANDLER_GO_ON;\\\n\t\tif (slot) {\\\n\t\t\tconst plugin *p;\\\n\t\t\tfor (size_t i = 0; i < used && (p = slot[i]) && (rc = p->y(srv, con, p->data)) == HANDLER_GO_ON; ++i) ;\\\n\t\t}\\\n\t\treturn rc;\\\n\t}\n\n/**\n * plugins that use\n *\n * - server *srv\n * - connection *con\n * - void *p_d (plugin_data *)\n */\n\nPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_URI_CLEAN, handle_uri_clean)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_URI_RAW, handle_uri_raw)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_REQUEST_ENV, handle_request_env)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_REQUEST_DONE, handle_request_done)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_CONNECTION_ACCEPT, handle_connection_accept)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_CONNECTION_SHUT_WR, handle_connection_shut_wr)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_CONNECTION_CLOSE, handle_connection_close)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_SUBREQUEST, handle_subrequest)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_SUBREQUEST_START, handle_subrequest_start)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_RESPONSE_START, handle_response_start)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_DOCROOT, handle_docroot)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_PHYSICAL, handle_physical)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_CONNECTION_RESET, connection_reset)\n\n#undef PLUGIN_TO_SLOT\n\n#define PLUGIN_TO_SLOT(x, y) \\\n\thandler_t plugins_call_##y(server *srv) {\\\n\t\tplugin ** const slot = ((plugin ***)(srv->plugin_slots))[x];\\\n\t\tconst size_t used = srv->plugins.used; \\\n\t\thandler_t rc = HANDLER_GO_ON;\\\n\t\tif (slot) {\\\n\t\t\tconst plugin *p;\\\n\t\t\tfor (size_t i = 0; i < used && (p = slot[i]) && (rc = p->y(srv, p->data)) == HANDLER_GO_ON; ++i) ;\\\n\t\t}\\\n\t\treturn rc;\\\n\t}\n\n/**\n * plugins that use\n *\n * - server *srv\n * - void *p_d (plugin_data *)\n */\n\nPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_TRIGGER, handle_trigger)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_SIGHUP, handle_sighup)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_CLEANUP, cleanup)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_SET_DEFAULTS, set_defaults)\nPLUGIN_TO_SLOT(PLUGIN_FUNC_WORKER_INIT, worker_init)\n\n#undef PLUGIN_TO_SLOT\n\nhandler_t plugins_call_handle_waitpid(server *srv, pid_t pid, int status) {\n\tplugin ** const slot =\n\t  ((plugin ***)(srv->plugin_slots))[PLUGIN_FUNC_HANDLE_WAITPID];\n\tif (!slot) return HANDLER_GO_ON;\n\tfor (size_t i = 0; i < srv->plugins.used && slot[i]; ++i) {\n\t\tplugin *p = slot[i];\n\t\thandler_t r = p->handle_waitpid(srv, p->data, pid, status);\n\t\tif (r != HANDLER_GO_ON) return r;\n\t}\n\treturn HANDLER_GO_ON;\n}\n\n#if 0\n/**\n *\n * special handler\n *\n */\nhandler_t plugins_call_handle_fdevent(server *srv, const fd_conn *fdc) {\n\tsize_t i;\n\tplugin **ps;\n\n\tps = srv->plugins.ptr;\n\n\tfor (i = 0; i < srv->plugins.used; i++) {\n\t\tplugin *p = ps[i];\n\t\tif (p->handle_fdevent) {\n\t\t\thandler_t r;\n\t\t\tswitch(r = p->handle_fdevent(srv, fdc, p->data)) {\n\t\t\tcase HANDLER_GO_ON:\n\t\t\t\tbreak;\n\t\t\tcase HANDLER_FINISHED:\n\t\t\tcase HANDLER_COMEBACK:\n\t\t\tcase HANDLER_WAIT_FOR_EVENT:\n\t\t\tcase HANDLER_ERROR:\n\t\t\t\treturn r;\n\t\t\tdefault:\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"d\", r);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n#endif\n/**\n *\n * - call init function of all plugins to init the plugin-internals\n * - added each plugin that supports has callback to the corresponding slot\n *\n * - is only called once.\n */\n\nhandler_t plugins_call_init(server *srv) {\n\tsize_t i;\n\tplugin **ps;\n\n\tps = srv->plugins.ptr;\n\n\t/* fill slots */\n\n\tsrv->plugin_slots = calloc(PLUGIN_FUNC_SIZEOF, sizeof(ps));\n\tforce_assert(NULL != srv->plugin_slots);\n\n\tfor (i = 0; i < srv->plugins.used; i++) {\n\t\tsize_t j;\n\t\t/* check which calls are supported */\n\n\t\tplugin *p = ps[i];\n\n#define PLUGIN_TO_SLOT(x, y) \\\n\tif (p->y) { \\\n\t\tplugin **slot = ((plugin ***)(srv->plugin_slots))[x]; \\\n\t\tif (!slot) { \\\n\t\t\tslot = calloc(srv->plugins.used, sizeof(*slot));\\\n\t\t\tforce_assert(NULL != slot); \\\n\t\t\t((plugin ***)(srv->plugin_slots))[x] = slot; \\\n\t\t} \\\n\t\tfor (j = 0; j < srv->plugins.used; j++) { \\\n\t\t\tif (slot[j]) continue;\\\n\t\t\tslot[j] = p;\\\n\t\t\tbreak;\\\n\t\t}\\\n\t}\n\n\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_URI_CLEAN, handle_uri_clean);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_URI_RAW, handle_uri_raw);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_REQUEST_ENV, handle_request_env);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_REQUEST_DONE, handle_request_done);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_CONNECTION_ACCEPT, handle_connection_accept);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_CONNECTION_SHUT_WR, handle_connection_shut_wr);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_CONNECTION_CLOSE, handle_connection_close);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_TRIGGER, handle_trigger);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_SIGHUP, handle_sighup);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_WAITPID, handle_waitpid);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_SUBREQUEST, handle_subrequest);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_SUBREQUEST_START, handle_subrequest_start);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_RESPONSE_START, handle_response_start);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_DOCROOT, handle_docroot);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_HANDLE_PHYSICAL, handle_physical);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_CONNECTION_RESET, connection_reset);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_CLEANUP, cleanup);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_SET_DEFAULTS, set_defaults);\n\t\tPLUGIN_TO_SLOT(PLUGIN_FUNC_WORKER_INIT, worker_init);\n#undef PLUGIN_TO_SLOT\n\n\t\tif (p->init) {\n\t\t\tif (NULL == (p->data = p->init())) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\t\t\"plugin-init failed for module\", p->name);\n\t\t\t\treturn HANDLER_ERROR;\n\t\t\t}\n\n\t\t\t/* used for con->mode, DIRECT == 0, plugins above that */\n\t\t\t((plugin_data *)(p->data))->id = i + 1;\n\n\t\t\tif (p->version != LIGHTTPD_VERSION_ID) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\t\t\"plugin-version doesn't match lighttpd-version for\", p->name);\n\t\t\t\treturn HANDLER_ERROR;\n\t\t\t}\n\t\t} else {\n\t\t\tp->data = NULL;\n\t\t}\n\n\t\tif (p->priv_defaults && HANDLER_ERROR==p->priv_defaults(srv, p->data)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\nvoid plugins_free(server *srv) {\n\tsize_t i;\n\tif (srv->plugin_slots) plugins_call_cleanup(srv);\n\n\tfor (i = 0; i < srv->plugins.used; i++) {\n\t\tplugin *p = ((plugin **)srv->plugins.ptr)[i];\n\n\t\tplugin_free(p);\n\t}\n\n\tfor (i = 0; srv->plugin_slots && i < PLUGIN_FUNC_SIZEOF; i++) {\n\t\tplugin **slot = ((plugin ***)(srv->plugin_slots))[i];\n\n\t\tif (slot) free(slot);\n\t}\n\n\tfree(srv->plugin_slots);\n\tsrv->plugin_slots = NULL;\n\n\tfree(srv->plugins.ptr);\n\tsrv->plugins.ptr = NULL;\n\tsrv->plugins.used = 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_vhostdb_dbi.c": "#include \"first.h\"\n\n#include <dbi/dbi.h>\n\n#include <string.h>\n#include <stdlib.h>\n\n#include \"base.h\"\n#include \"http_vhostdb.h\"\n#include \"fdevent.h\"\n#include \"log.h\"\n#include \"plugin.h\"\n\n/*\n * virtual host plugin using DBI for domain to directory lookups\n *\n * e.g.\n *   vhostdb.dbi = ( \"sql\"    => \"SELECT docroot FROM vhosts WHERE host='?'\"\n *                   \"dbtype\" => \"sqlite3\",\n *                   \"dbname\" => \"mydb.sqlite\",\n *                   \"sqlite_dbdir\" => \"/path/to/sqlite/dbs/\" )\n */\n\ntypedef struct {\n    dbi_conn dbconn;\n    dbi_inst dbinst;\n    buffer *sqlquery;\n    server *srv;\n    short reconnect_count;\n} vhostdb_config;\n\ntypedef struct {\n    void *vdata;\n    array *options;\n} plugin_config;\n\ntypedef struct {\n    PLUGIN_DATA;\n    plugin_config **config_storage;\n    plugin_config conf;\n} plugin_data;\n\n/* used to reconnect to the database when we get disconnected */\nstatic void mod_vhostdb_dbi_error_callback (dbi_conn dbconn, void *vdata)\n{\n    vhostdb_config *dbconf = (vhostdb_config *)vdata;\n    const char *errormsg = NULL;\n    /*assert(dbconf->dbconn == dbconn);*/\n\n    while (++dbconf->reconnect_count <= 3) { /* retry */\n        if (0 == dbi_conn_connect(dbconn)) {\n            fdevent_setfd_cloexec(dbi_conn_get_socket(dbconn));\n            return;\n        }\n    }\n\n    dbi_conn_error(dbconn, &errormsg);\n    log_error_write(dbconf->srv, __FILE__, __LINE__, \"ss\",\n                    \"dbi_conn_connect():\", errormsg);\n}\n\nstatic void mod_vhostdb_dbconf_free (void *vdata)\n{\n    vhostdb_config *dbconf = (vhostdb_config *)vdata;\n    if (!dbconf) return;\n    dbi_conn_close(dbconf->dbconn);\n    dbi_shutdown_r(dbconf->dbinst);\n    free(dbconf);\n}\n\nstatic int mod_vhostdb_dbconf_setup (server *srv, array *opts, void **vdata)\n{\n    buffer *sqlquery = NULL;\n    const buffer *dbtype=NULL, *dbname=NULL;\n\n    for (size_t i = 0; i < opts->used; ++i) {\n        const data_string *ds = (data_string *)opts->data[i];\n        if (ds->type == TYPE_STRING) {\n            if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"sql\"))) {\n                sqlquery = ds->value;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"dbname\"))) {\n                dbname = ds->value;\n            } else if (buffer_is_equal_caseless_string(ds->key, CONST_STR_LEN(\"dbtype\"))) {\n                dbtype = ds->value;\n            }\n        }\n    }\n\n    /* required:\n     * - sql    (sql query)\n     * - dbtype\n     * - dbname\n     *\n     * optional:\n     * - username, some databases don't require this (sqlite)\n     * - password, default: empty\n     * - socket, default: database type default\n     * - hostname, if set overrides socket\n     * - port, default: database default\n     * - encoding, default: database default\n     */\n\n    if (!buffer_string_is_empty(sqlquery)\n        && !buffer_is_empty(dbname) && !buffer_is_empty(dbtype)) {\n        /* create/initialise database */\n        vhostdb_config *dbconf;\n        dbi_inst dbinst = NULL;\n        dbi_conn dbconn;\n        if (dbi_initialize_r(NULL, &dbinst) < 1) {\n            log_error_write(srv, __FILE__, __LINE__, \"s\",\n                            \"dbi_initialize_r() failed.  \"\n                            \"Do you have the DBD for this db type installed?\");\n            return -1;\n        }\n        dbconn = dbi_conn_new_r(dbtype->ptr, dbinst);\n        if (NULL == dbconn) {\n            log_error_write(srv, __FILE__, __LINE__, \"s\",\n                            \"dbi_conn_new_r() failed.  \"\n                            \"Do you have the DBD for this db type installed?\");\n            dbi_shutdown_r(dbinst);\n            return -1;\n        }\n\n        /* set options */\n        for (size_t j = 0; j < opts->used; ++j) {\n            data_unset *du = opts->data[j];\n            const buffer *opt = du->key;\n            if (!buffer_string_is_empty(opt)) {\n                if (du->type == TYPE_INTEGER) {\n                    data_integer *di = (data_integer *)du;\n                    dbi_conn_set_option_numeric(dbconn, opt->ptr, di->value);\n                } else if (du->type == TYPE_STRING) {\n                    data_string *ds = (data_string *)du;\n                    if (ds->value != sqlquery && ds->value != dbtype) {\n                        dbi_conn_set_option(dbconn, opt->ptr, ds->value->ptr);\n                    }\n                }\n            }\n        }\n\n        dbconf = (vhostdb_config *)calloc(1, sizeof(*dbconf));\n        dbconf->dbinst = dbinst;\n        dbconf->dbconn = dbconn;\n        dbconf->sqlquery = sqlquery;\n        dbconf->srv = srv;\n        dbconf->reconnect_count = 0;\n        *vdata = dbconf;\n\n        /* used to automatically reconnect to the database */\n        dbi_conn_error_handler(dbconn, mod_vhostdb_dbi_error_callback, dbconf);\n\n        /* connect to database */\n        mod_vhostdb_dbi_error_callback(dbconn, dbconf);\n        if (dbconf->reconnect_count >= 3) return -1;\n    }\n\n    return 0;\n}\n\nstatic void mod_vhostdb_patch_connection (server *srv, connection *con, plugin_data *p);\n\nstatic int mod_vhostdb_dbi_query(server *srv, connection *con, void *p_d, buffer *docroot)\n{\n    plugin_data *p = (plugin_data *)p_d;\n    vhostdb_config *dbconf;\n    dbi_result result;\n    unsigned long long nrows;\n    int retry_count = 0;\n\n    /*(reuse buffer for sql query before generating docroot result)*/\n    buffer *sqlquery = docroot;\n    buffer_clear(sqlquery); /*(also resets docroot (alias))*/\n\n    mod_vhostdb_patch_connection(srv, con, p);\n    if (NULL == p->conf.vdata) return 0; /*(after resetting docroot)*/\n    dbconf = (vhostdb_config *)p->conf.vdata;\n\n    for (char *b = dbconf->sqlquery->ptr, *d; *b; b = d+1) {\n        if (NULL != (d = strchr(b, '?'))) {\n            /* escape the uri.authority */\n            char *esc = NULL;\n            size_t len = dbi_conn_escape_string_copy(dbconf->dbconn, con->uri.authority->ptr, &esc);\n            buffer_append_string_len(sqlquery, b, (size_t)(d - b));\n            buffer_append_string_len(sqlquery, esc, len);\n            free(esc);\n            if (0 == len) return -1;\n        } else {\n            d = dbconf->sqlquery->ptr + buffer_string_length(dbconf->sqlquery);\n            buffer_append_string_len(sqlquery, b, (size_t)(d - b));\n            break;\n        }\n    }\n\n    /* reset our reconnect-attempt counter, this is a new query. */\n    dbconf->reconnect_count = 0;\n\n    do {\n        result = dbi_conn_query(dbconf->dbconn, sqlquery->ptr);\n    } while (!result && ++retry_count < 2);\n\n    buffer_clear(docroot); /*(reset buffer to store result)*/\n\n    if (!result) {\n        const char *errmsg;\n        dbi_conn_error(dbconf->dbconn, &errmsg);\n        log_error_write(srv, __FILE__, __LINE__, \"s\", errmsg);\n        return -1;\n    }\n\n    nrows = dbi_result_get_numrows(result);\n    if (nrows && nrows != DBI_ROW_ERROR && dbi_result_next_row(result)) {\n        buffer_copy_string(docroot, dbi_result_get_string_idx(result, 1));\n    } /* else no such virtual host */\n\n    dbi_result_free(result);\n    return 0;\n}\n\n\n\n\nINIT_FUNC(mod_vhostdb_init) {\n    static http_vhostdb_backend_t http_vhostdb_backend_dbi =\n      { \"dbi\", mod_vhostdb_dbi_query, NULL };\n    plugin_data *p = calloc(1, sizeof(*p));\n\n    /* register http_vhostdb_backend_dbi */\n    http_vhostdb_backend_dbi.p_d = p;\n    http_vhostdb_backend_set(&http_vhostdb_backend_dbi);\n\n    return p;\n}\n\nFREE_FUNC(mod_vhostdb_cleanup) {\n    plugin_data *p = p_d;\n    if (!p) return HANDLER_GO_ON;\n\n    if (p->config_storage) {\n        for (size_t i = 0; i < srv->config_context->used; i++) {\n            plugin_config *s = p->config_storage[i];\n            if (!s) continue;\n            mod_vhostdb_dbconf_free(s->vdata);\n            array_free(s->options);\n            free(s);\n        }\n        free(p->config_storage);\n    }\n    free(p);\n\n    UNUSED(srv);\n    return HANDLER_GO_ON;\n}\n\nSETDEFAULTS_FUNC(mod_vhostdb_set_defaults) {\n    plugin_data *p = p_d;\n\n    config_values_t cv[] = {\n        { \"vhostdb.dbi\",    NULL, T_CONFIG_ARRAY,  T_CONFIG_SCOPE_CONNECTION },\n        { NULL,             NULL, T_CONFIG_UNSET,  T_CONFIG_SCOPE_UNSET }\n    };\n\n    p->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n    for (size_t i = 0; i < srv->config_context->used; ++i) {\n        data_config const *config = (data_config const*)srv->config_context->data[i];\n        plugin_config *s = calloc(1, sizeof(plugin_config));\n\n        s->options = array_init();\n        cv[0].destination = s->options;\n\n        p->config_storage[i] = s;\n\n        if (config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n            return HANDLER_ERROR;\n        }\n\n\tif (!array_is_kvany(s->options)) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\"unexpected value for vhostdb.dbi; expected list of \\\"option\\\" => \\\"value\\\"\");\n\t\treturn HANDLER_ERROR;\n\t}\n\n\tif (s->options->used\n            && 0 != mod_vhostdb_dbconf_setup(srv, s->options, &s->vdata)) {\n            return HANDLER_ERROR;\n        }\n    }\n\n    return HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n    p->conf.x = s->x;\nstatic void mod_vhostdb_patch_connection (server *srv, connection *con, plugin_data *p)\n{\n    plugin_config *s = p->config_storage[0];\n    PATCH(vdata);\n\n    /* skip the first, the global context */\n    for (size_t i = 1; i < srv->config_context->used; ++i) {\n        data_config *dc = (data_config *)srv->config_context->data[i];\n        s = p->config_storage[i];\n\n        /* condition didn't match */\n        if (!config_check_cond(srv, con, dc)) continue;\n\n        /* merge config */\n        for (size_t j = 0; j < dc->value->used; ++j) {\n            data_unset *du = dc->value->data[j];\n\n            if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"vhostdb.dbi\"))) {\n                PATCH(vdata);\n            }\n        }\n    }\n}\n#undef PATCH\n\n/* this function is called at dlopen() time and inits the callbacks */\nint mod_vhostdb_dbi_plugin_init (plugin *p);\nint mod_vhostdb_dbi_plugin_init (plugin *p)\n{\n    p->version          = LIGHTTPD_VERSION_ID;\n    p->name             = buffer_init_string(\"vhostdb_dbi\");\n\n    p->init             = mod_vhostdb_init;\n    p->cleanup          = mod_vhostdb_cleanup;\n    p->set_defaults     = mod_vhostdb_set_defaults;\n\n    return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/mod_extforward.c": "#include \"first.h\"\n\n#include \"base.h\"\n#include \"log.h\"\n#include \"buffer.h\"\n#include \"http_header.h\"\n#include \"request.h\"\n#include \"sock_addr.h\"\n\n#include \"plugin.h\"\n\n#include \"configfile.h\"\n\n#include <limits.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n\n#include \"sys-socket.h\"\n\n/**\n * mod_extforward.c for lighttpd, by comman.kang <at> gmail <dot> com\n *                  extended, modified by Lionel Elie Mamane (LEM), lionel <at> mamane <dot> lu\n *                  support chained proxies by glen@delfi.ee, #1528\n *\n * Config example:\n *\n *       Trust proxy 10.0.0.232 and 10.0.0.232\n *       extforward.forwarder = ( \"10.0.0.232\" => \"trust\",\n *                                \"10.0.0.233\" => \"trust\" )\n *\n *       Trust all proxies  (NOT RECOMMENDED!)\n *       extforward.forwarder = ( \"all\" => \"trust\")\n *\n *       Note that \"all\" has precedence over specific entries,\n *       so \"all except\" setups will not work.\n *\n *       In case you have chained proxies, you can add all their IP's to the\n *       config. However \"all\" has effect only on connecting IP, as the\n *       X-Forwarded-For header can not be trusted.\n *\n * Note: The effect of this module is variable on $HTTP[\"remotip\"] directives and\n *       other module's remote ip dependent actions.\n *  Things done by modules before we change the remoteip or after we reset it will match on the proxy's IP.\n *  Things done in between these two moments will match on the real client's IP.\n *  The moment things are done by a module depends on in which hook it does things and within the same hook\n *  on whether they are before/after us in the module loading order\n *  (order in the server.modules directive in the config file).\n *\n * Tested behaviours:\n *\n *  mod_access: Will match on the real client.\n *\n *  mod_accesslog:\n *   In order to see the \"real\" ip address in access log ,\n *   you'll have to load mod_extforward after mod_accesslog.\n *   like this:\n *\n *    server.modules  = (\n *       .....\n *       mod_accesslog,\n *       mod_extforward\n *    )\n */\n\n\n/* plugin config for all request/connections */\n\ntypedef enum {\n\tPROXY_FORWARDED_NONE         = 0x00,\n\tPROXY_FORWARDED_FOR          = 0x01,\n\tPROXY_FORWARDED_PROTO        = 0x02,\n\tPROXY_FORWARDED_HOST         = 0x04,\n\tPROXY_FORWARDED_BY           = 0x08,\n\tPROXY_FORWARDED_REMOTE_USER  = 0x10\n} proxy_forwarded_t;\n\nstruct sock_addr_mask {\n  sock_addr addr;\n  int bits;\n};\n\nstruct sock_addr_masks {\n  struct sock_addr_mask *addrs;\n  size_t used;\n  size_t sz;\n};\n\ntypedef struct {\n\tarray *forwarder;\n\tstruct sock_addr_masks *forward_masks;\n\tarray *headers;\n\tarray *opts_params;\n\tunsigned int opts;\n\tunsigned short int hap_PROXY;\n\tunsigned short int hap_PROXY_ssl_client_verify;\n\tshort int forward_all;\n} plugin_config;\n\ntypedef struct {\n\tPLUGIN_DATA;\n\n\tplugin_config **config_storage;\n\n\tplugin_config conf;\n} plugin_data;\n\nstatic plugin_data *mod_extforward_plugin_data_singleton;\nstatic int extforward_check_proxy;\n\n\n/* context , used for restore remote ip */\n\ntypedef struct {\n\t/* per-request state */\n\tsock_addr saved_remote_addr;\n\tbuffer *saved_remote_addr_buf;\n\n\t/* hap-PROXY protocol prior to receiving first request */\n\tint(*saved_network_read)(server *, connection *, chunkqueue *, off_t);\n\n\t/* connection-level state applied to requests in handle_request_env */\n\tarray *env;\n\tint ssl_client_verify;\n} handler_ctx;\n\n\nstatic handler_ctx * handler_ctx_init(void) {\n\thandler_ctx * hctx;\n\thctx = calloc(1, sizeof(*hctx));\n\treturn hctx;\n}\n\nstatic void handler_ctx_free(handler_ctx *hctx) {\n\tfree(hctx);\n}\n\n/* init the plugin data */\nINIT_FUNC(mod_extforward_init) {\n\tplugin_data *p;\n\tp = calloc(1, sizeof(*p));\n\tmod_extforward_plugin_data_singleton = p;\n\treturn p;\n}\n\n/* destroy the plugin data */\nFREE_FUNC(mod_extforward_free) {\n\tplugin_data *p = p_d;\n\n\tUNUSED(srv);\n\n\tif (!p) return HANDLER_GO_ON;\n\n\tif (p->config_storage) {\n\t\tsize_t i;\n\n\t\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\t\tplugin_config *s = p->config_storage[i];\n\n\t\t\tif (NULL == s) continue;\n\n\t\t\tarray_free(s->forwarder);\n\t\t\tarray_free(s->headers);\n\t\t\tarray_free(s->opts_params);\n\n\t\t\tif (s->forward_masks) {\n\t\t\t\tfree(s->forward_masks->addrs);\n\t\t\t\tfree(s->forward_masks);\n\t\t\t}\n\n\t\t\tfree(s);\n\t\t}\n\t\tfree(p->config_storage);\n\t}\n\n\n\tfree(p);\n\n\treturn HANDLER_GO_ON;\n}\n\n/* handle plugin config and check values */\n\nSETDEFAULTS_FUNC(mod_extforward_set_defaults) {\n\tplugin_data *p = p_d;\n\tsize_t i = 0;\n\n\tconfig_values_t cv[] = {\n\t\t{ \"extforward.forwarder\",       NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 0 */\n\t\t{ \"extforward.headers\",         NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 1 */\n\t\t{ \"extforward.params\",          NULL, T_CONFIG_ARRAY, T_CONFIG_SCOPE_CONNECTION },       /* 2 */\n\t\t{ \"extforward.hap-PROXY\",       NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION },     /* 3 */\n\t\t{ \"extforward.hap-PROXY-ssl-client-verify\", NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION }, /* 4 */\n\t\t{ NULL,                         NULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }\n\t};\n\n\tif (!p) return HANDLER_ERROR;\n\n\tp->config_storage = calloc(srv->config_context->used, sizeof(plugin_config *));\n\n\tfor (i = 0; i < srv->config_context->used; i++) {\n\t\tdata_config const* config = (data_config const*)srv->config_context->data[i];\n\t\tplugin_config *s;\n\n\t\ts = calloc(1, sizeof(plugin_config));\n\t\ts->forwarder    = array_init();\n\t\ts->headers      = array_init();\n\t\ts->opts_params  = array_init();\n\t\ts->opts         = PROXY_FORWARDED_NONE;\n\n\t\tcv[0].destination = s->forwarder;\n\t\tcv[1].destination = s->headers;\n\t\tcv[2].destination = s->opts_params;\n\t\tcv[3].destination = &s->hap_PROXY;\n\t\tcv[4].destination = &s->hap_PROXY_ssl_client_verify;\n\n\t\tp->config_storage[i] = s;\n\n\t\tif (0 != config_insert_values_global(srv, config->value, cv, i == 0 ? T_CONFIG_SCOPE_SERVER : T_CONFIG_SCOPE_CONNECTION)) {\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (!array_is_kvstring(s->forwarder)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for extforward.forwarder; expected list of \\\"IPaddr\\\" => \\\"trust\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\tif (array_get_element(config->value, \"extforward.forwarder\")) {\n\t\t\tconst data_string * const allds = (data_string *)array_get_element(s->forwarder, \"all\");\n\t\t\ts->forward_all = (NULL == allds) ? 0 : (0 == strcasecmp(allds->value->ptr, \"trust\")) ? 1 : -1;\n\t\t\tfor (size_t j = 0; j < s->forwarder->used; ++j) {\n\t\t\t\tdata_string * const ds = (data_string *)s->forwarder->data[j];\n\t\t\t\tchar * const nm_slash = strchr(ds->key->ptr, '/');\n\t\t\t\tif (0 != strcasecmp(ds->value->ptr, \"trust\")) {\n\t\t\t\t\tif (0 != strcasecmp(ds->value->ptr, \"untrusted\")) {\n\t\t\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sbsbs\", \"ERROR: expect \\\"trust\\\", not \\\"\", ds->key, \"\\\" => \\\"\", ds->value, \"\\\"; treating as untrusted\");\n\t\t\t\t\t}\n\t\t\t\t\tif (NULL != nm_slash) {\n\t\t\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sbsbs\", \"ERROR: untrusted CIDR masks are ignored (\\\"\", ds->key, \"\\\" => \\\"\", ds->value, \"\\\")\");\n\t\t\t\t\t}\n\t\t\t\t\tbuffer_clear(ds->value); /* empty is untrusted */\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (NULL != nm_slash) {\n\t\t\t\t\tstruct sock_addr_mask *sm;\n\t\t\t\t\tchar *err;\n\t\t\t\t\tconst int nm_bits = strtol(nm_slash + 1, &err, 10);\n\t\t\t\t\tint rc;\n\t\t\t\t\tif (*err || nm_bits <= 0) {\n\t\t\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sbs\", \"ERROR: invalid netmask:\", ds->key, err);\n\t\t\t\t\t\treturn HANDLER_ERROR;\n\t\t\t\t\t}\n\t\t\t\t\tif (NULL == s->forward_masks) {\n\t\t\t\t\t\ts->forward_masks = calloc(1, sizeof(struct sock_addr_masks));\n\t\t\t\t\t\tforce_assert(s->forward_masks);\n\t\t\t\t\t}\n\t\t\t\t\tif (s->forward_masks->used == s->forward_masks->sz) {\n\t\t\t\t\t\ts->forward_masks->sz += 2;\n\t\t\t\t\t\ts->forward_masks->addrs = realloc(s->forward_masks->addrs, s->forward_masks->sz * sizeof(struct sock_addr_mask));\n\t\t\t\t\t\tforce_assert(s->forward_masks->addrs);\n\t\t\t\t\t}\n\t\t\t\t\tsm = s->forward_masks->addrs + s->forward_masks->used++;\n\t\t\t\t\tsm->bits = nm_bits;\n\t\t\t\t\t*nm_slash = '\\0';\n\t\t\t\t\trc = sock_addr_from_str_numeric(srv, &sm->addr, ds->key->ptr);\n\t\t\t\t\t*nm_slash = '/';\n\t\t\t\t\tif (1 != rc) return HANDLER_ERROR;\n\t\t\t\t\tbuffer_clear(ds->value); /* empty is untrusted, e.g. if subnet (incorrectly) appears in X-Forwarded-For */\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!array_is_vlist(s->headers)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for extforward.headers; expected list of \\\"headername\\\"\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\n\t\t/* default to \"X-Forwarded-For\" or \"Forwarded-For\" if extforward.headers not specified or empty */\n\t\tif (!s->hap_PROXY && 0 == s->headers->used && (0 == i || NULL != array_get_element(config->value, \"extforward.headers\"))) {\n\t\t\tarray_insert_value(s->headers, CONST_STR_LEN(\"X-Forwarded-For\"));\n\t\t\tarray_insert_value(s->headers, CONST_STR_LEN(\"Forwarded-For\"));\n\t\t}\n\n\t\tif (!array_is_kvany(s->opts_params)) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"unexpected value for extforward.params; expected ( \\\"param\\\" => \\\"value\\\" )\");\n\t\t\treturn HANDLER_ERROR;\n\t\t}\n\t\tfor (size_t j = 0, used = s->opts_params->used; j < used; ++j) {\n\t\t\tproxy_forwarded_t param;\n\t\t\tdata_unset *du = s->opts_params->data[j];\n\t\t      #if 0  /*(\"for\" and \"proto\" historical behavior: always enabled)*/\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"by\"))) {\n\t\t\t\tparam = PROXY_FORWARDED_BY;\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"for\"))) {\n\t\t\t\tparam = PROXY_FORWARDED_FOR;\n\t\t\t} else\n\t\t      #endif\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"host\"))) {\n\t\t\t\tparam = PROXY_FORWARDED_HOST;\n\t\t      #if 0\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"proto\"))) {\n\t\t\t\tparam = PROXY_FORWARDED_PROTO;\n\t\t      #endif\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"remote_user\"))) {\n\t\t\t\tparam = PROXY_FORWARDED_REMOTE_USER;\n\t\t\t} else {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\t        \"extforward.params keys must be one of: host, remote_user, but not:\", du->key);\n\t\t\t\treturn HANDLER_ERROR;\n\t\t\t}\n\t\t\tif (du->type == TYPE_STRING) {\n\t\t\t\tdata_string *ds = (data_string *)du;\n\t\t\t\tif (buffer_is_equal_string(ds->value, CONST_STR_LEN(\"enable\"))) {\n\t\t\t\t\ts->opts |= param;\n\t\t\t\t} else if (!buffer_is_equal_string(ds->value, CONST_STR_LEN(\"disable\"))) {\n\t\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\t\t        \"extforward.params values must be one of: 0, 1, enable, disable; error for key:\", du->key);\n\t\t\t\t\treturn HANDLER_ERROR;\n\t\t\t\t}\n\t\t\t} else if (du->type == TYPE_INTEGER) {\n\t\t\t\tdata_integer *di = (data_integer *)du;\n\t\t\t\tif (di->value) s->opts |= param;\n\t\t\t} else {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sb\",\n\t\t\t\t\t        \"extforward.params values must be one of: 0, 1, enable, disable; error for key:\", du->key);\n\t\t\t\treturn HANDLER_ERROR;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* attempt to warn if mod_extforward is not last module loaded to hook\n\t * handle_connection_accept.  (Nice to have, but remove this check if\n\t * it reaches too far into internals and prevents other code changes.)\n\t * While it would be nice to check connection_handle_accept plugin slot\n\t * to make sure mod_extforward is last, that info is private to plugin.c\n\t * so merely warn if mod_openssl is loaded after mod_extforward, though\n\t * future modules which hook connection_handle_accept might be missed.*/\n\tfor (i = 0; i < srv->config_context->used; ++i) {\n\t\tplugin_config *s = p->config_storage[i];\n\t\tif (s->hap_PROXY) {\n\t\t\tsize_t j;\n\t\t\tfor (j = 0; j < srv->srvconf.modules->used; ++j) {\n\t\t\t\tdata_string *ds = (data_string *)srv->srvconf.modules->data[j];\n\t\t\t\tif (buffer_is_equal_string(ds->value, CONST_STR_LEN(\"mod_extforward\"))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (; j < srv->srvconf.modules->used; ++j) {\n\t\t\t\tdata_string *ds = (data_string *)srv->srvconf.modules->data[j];\n\t\t\t\tif (buffer_is_equal_string(ds->value, CONST_STR_LEN(\"mod_openssl\"))) {\n\t\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\t        \"mod_extforward must be loaded after mod_openssl in server.modules when extforward.hap-PROXY = \\\"enable\\\"\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tfor (i = 0; i < srv->srvconf.modules->used; i++) {\n\t\tdata_string *ds = (data_string *)srv->srvconf.modules->data[i];\n\t\tif (buffer_is_equal_string(ds->value, CONST_STR_LEN(\"mod_proxy\"))) {\n\t\t\textforward_check_proxy = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n#define PATCH(x) \\\n\tp->conf.x = s->x;\nstatic int mod_extforward_patch_connection(server *srv, connection *con, plugin_data *p) {\n\tsize_t i, j;\n\tplugin_config *s = p->config_storage[0];\n\n\tPATCH(forwarder);\n\tPATCH(forward_masks);\n\tPATCH(headers);\n\tPATCH(opts);\n\tPATCH(hap_PROXY);\n\tPATCH(hap_PROXY_ssl_client_verify);\n\tPATCH(forward_all);\n\n\t/* skip the first, the global context */\n\tfor (i = 1; i < srv->config_context->used; i++) {\n\t\tdata_config *dc = (data_config *)srv->config_context->data[i];\n\t\ts = p->config_storage[i];\n\n\t\t/* condition didn't match */\n\t\tif (!config_check_cond(srv, con, dc)) continue;\n\n\t\t/* merge config */\n\t\tfor (j = 0; j < dc->value->used; j++) {\n\t\t\tdata_unset *du = dc->value->data[j];\n\n\t\t\tif (buffer_is_equal_string(du->key, CONST_STR_LEN(\"extforward.forwarder\"))) {\n\t\t\t\tPATCH(forwarder);\n\t\t\t\tPATCH(forward_masks);\n\t\t\t\tPATCH(forward_all);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"extforward.headers\"))) {\n\t\t\t\tPATCH(headers);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"extforward.params\"))) {\n\t\t\t\tPATCH(opts);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"extforward.hap-PROXY\"))) {\n\t\t\t\tPATCH(hap_PROXY);\n\t\t\t} else if (buffer_is_equal_string(du->key, CONST_STR_LEN(\"extforward.hap-PROXY-ssl-client-verify\"))) {\n\t\t\t\tPATCH(hap_PROXY_ssl_client_verify);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n#undef PATCH\n\n\n/*\n   extract a forward array from the environment\n*/\nstatic array *extract_forward_array(buffer *pbuffer)\n{\n\tarray *result = array_init();\n\tif (!buffer_string_is_empty(pbuffer)) {\n\t\tchar *base, *curr;\n\t\t/* state variable, 0 means not in string, 1 means in string */\n\t\tint in_str = 0;\n\t\tfor (base = pbuffer->ptr, curr = pbuffer->ptr; *curr; curr++) {\n\t\t\tif (in_str) {\n\t\t\t\tif ((*curr > '9' || *curr < '0') && *curr != '.' && *curr != ':' && (*curr < 'a' || *curr > 'f') && (*curr < 'A' || *curr > 'F')) {\n\t\t\t\t\t/* found an separator , insert value into result array */\n\t\t\t\t\tarray_insert_value(result, base, curr - base);\n\t\t\t\t\t/* change state to not in string */\n\t\t\t\t\tin_str = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ((*curr >= '0' && *curr <= '9') || *curr == ':' || (*curr >= 'a' && *curr <= 'f') || (*curr >= 'A' && *curr <= 'F')) {\n\t\t\t\t\t/* found leading char of an IP address, move base pointer and change state */\n\t\t\t\t\tbase = curr;\n\t\t\t\t\tin_str = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/* if breaking out while in str, we got to the end of string, so add it */\n\t\tif (in_str) {\n\t\t\tarray_insert_value(result, base, curr - base);\n\t\t}\n\t}\n\treturn result;\n}\n\n/*\n * check whether ip is trusted, return 1 for trusted , 0 for untrusted\n */\nstatic int is_proxy_trusted(plugin_data *p, const char * const ip, size_t iplen)\n{\n    data_string *ds =\n      (data_string *)array_get_element_klen(p->conf.forwarder, ip, iplen);\n    if (NULL != ds) return !buffer_string_is_empty(ds->value);\n\n    if (p->conf.forward_masks) {\n        const struct sock_addr_mask * const addrs =p->conf.forward_masks->addrs;\n        const size_t aused = p->conf.forward_masks->used;\n        sock_addr addr;\n        /* C funcs inet_aton(), inet_pton() require '\\0'-terminated IP str */\n        char addrstr[64]; /*(larger than INET_ADDRSTRLEN and INET6_ADDRSTRLEN)*/\n        if (iplen >= sizeof(addrstr)) return 0;\n        memcpy(addrstr, ip, iplen);\n        addrstr[iplen] = '\\0';\n\n        if (1 != sock_addr_inet_pton(&addr, addrstr, AF_INET,  0)\n         && 1 != sock_addr_inet_pton(&addr, addrstr, AF_INET6, 0)) return 0;\n\n        for (size_t i = 0; i < aused; ++i) {\n            if (sock_addr_is_addr_eq_bits(&addr, &addrs[i].addr, addrs[i].bits))\n                return 1;\n        }\n    }\n\n    return 0;\n}\n\nstatic int is_connection_trusted(connection * const con, plugin_data *p)\n{\n    if (p->conf.forward_all) return (1 == p->conf.forward_all);\n    return is_proxy_trusted(p, CONST_BUF_LEN(con->dst_addr_buf));\n}\n\n/*\n * Return last address of proxy that is not trusted.\n * Do not accept \"all\" keyword here.\n */\nstatic const char *last_not_in_array(array *a, plugin_data *p)\n{\n\tint i;\n\n\tfor (i = a->used - 1; i >= 0; i--) {\n\t\tdata_string *ds = (data_string *)a->data[i];\n\t\tif (!is_proxy_trusted(p, CONST_BUF_LEN(ds->value))) {\n\t\t\treturn ds->value->ptr;\n\t\t}\n\t}\n\treturn NULL;\n}\n\nstatic int mod_extforward_set_addr(server *srv, connection *con, plugin_data *p, const char *addr) {\n\tsock_addr sock;\n\thandler_ctx *hctx = con->plugin_ctx[p->id];\n\n\tif (con->conf.log_request_handling) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\", \"using address:\", addr);\n\t}\n\n\tsock.plain.sa_family = AF_UNSPEC;\n\tif (1 != sock_addr_from_str_numeric(srv, &sock, addr)) return 0;\n\tif (sock.plain.sa_family == AF_UNSPEC) return 0;\n\n\t/* we found the remote address, modify current connection and save the old address */\n\tif (hctx) {\n\t\tif (hctx->saved_remote_addr_buf) {\n\t\t\tif (con->conf.log_request_handling) {\n\t\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\t\t\"-- mod_extforward_uri_handler already patched this connection, resetting state\");\n\t\t\t}\n\t\t\tcon->dst_addr = hctx->saved_remote_addr;\n\t\t\tbuffer_free(con->dst_addr_buf);\n\t\t\tcon->dst_addr_buf = hctx->saved_remote_addr_buf;\n\t\t\thctx->saved_remote_addr_buf = NULL;\n\t\t}\n\t} else {\n\t\tcon->plugin_ctx[p->id] = hctx = handler_ctx_init();\n\t}\n\t/* save old address */\n\tif (extforward_check_proxy) {\n\t\thttp_header_env_set(con, CONST_STR_LEN(\"_L_EXTFORWARD_ACTUAL_FOR\"), CONST_BUF_LEN(con->dst_addr_buf));\n\t}\n\thctx->saved_remote_addr = con->dst_addr;\n\thctx->saved_remote_addr_buf = con->dst_addr_buf;\n\t/* patch connection address */\n\tcon->dst_addr = sock;\n\tcon->dst_addr_buf = buffer_init_string(addr);\n\n\tif (con->conf.log_request_handling) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"ss\",\n\t\t\t\t\"patching con->dst_addr_buf for the accesslog:\", addr);\n\t}\n\n\t/* Now, clean the conf_cond cache, because we may have changed the results of tests */\n\tconfig_cond_cache_reset_item(srv, con, COMP_HTTP_REMOTE_IP);\n\n\treturn 1;\n}\n\nstatic void mod_extforward_set_proto(server *srv, connection *con, const char *proto, size_t protolen) {\n\tif (0 != protolen && !buffer_is_equal_caseless_string(con->uri.scheme, proto, protolen)) {\n\t\t/* update scheme if X-Forwarded-Proto is set\n\t\t * Limitations:\n\t\t * - Only \"http\" or \"https\" are currently accepted since the request to lighttpd currently has to\n\t\t *   be HTTP/1.0 or HTTP/1.1 using http or https.  If this is changed, then the scheme from this\n\t\t *   untrusted header must be checked to contain only alphanumeric characters, and to be a\n\t\t *   reasonable length, e.g. < 256 chars.\n\t\t * - con->uri.scheme is not reset in mod_extforward_restore() but is currently not an issues since\n\t\t *   con->uri.scheme will be reset by next request.  If a new module uses con->uri.scheme in the\n\t\t *   handle_request_done hook, then should evaluate if that module should use the forwarded value\n\t\t *   (probably) or the original value.\n\t\t */\n\t\tif (extforward_check_proxy) {\n\t\t\thttp_header_env_set(con, CONST_STR_LEN(\"_L_EXTFORWARD_ACTUAL_PROTO\"), CONST_BUF_LEN(con->uri.scheme));\n\t\t}\n\t\tif (0 == buffer_caseless_compare(proto, protolen, CONST_STR_LEN(\"https\"))) {\n\t\t\tbuffer_copy_string_len(con->uri.scheme, CONST_STR_LEN(\"https\"));\n\t\t\tconfig_cond_cache_reset_item(srv, con, COMP_HTTP_SCHEME);\n\t\t} else if (0 == buffer_caseless_compare(proto, protolen, CONST_STR_LEN(\"http\"))) {\n\t\t\tbuffer_copy_string_len(con->uri.scheme, CONST_STR_LEN(\"http\"));\n\t\t\tconfig_cond_cache_reset_item(srv, con, COMP_HTTP_SCHEME);\n\t\t}\n\t}\n}\n\nstatic handler_t mod_extforward_X_Forwarded_For(server *srv, connection *con, plugin_data *p, buffer *x_forwarded_for) {\n\t/* build forward_array from forwarded data_string */\n\tarray *forward_array = extract_forward_array(x_forwarded_for);\n\tconst char *real_remote_addr = last_not_in_array(forward_array, p);\n\tif (real_remote_addr != NULL) { /* parsed */\n\t\t/* get scheme if X-Forwarded-Proto is set\n\t\t * Limitations:\n\t\t * - X-Forwarded-Proto may or may not be set by proxies, even if X-Forwarded-For is set\n\t\t * - X-Forwarded-Proto may be a comma-separated list if there are multiple proxies,\n\t\t *   but the historical behavior of the code below only honored it if there was exactly one value\n\t\t *   (not done: walking backwards in X-Forwarded-Proto the same num of steps\n\t\t *    as in X-Forwarded-For to find proto set by last trusted proxy)\n\t\t */\n\t\tbuffer *x_forwarded_proto = http_header_request_get(con, HTTP_HEADER_X_FORWARDED_PROTO, CONST_STR_LEN(\"X-Forwarded-Proto\"));\n\t\tif (mod_extforward_set_addr(srv, con, p, real_remote_addr) && NULL != x_forwarded_proto) {\n\t\t\tmod_extforward_set_proto(srv, con, CONST_BUF_LEN(x_forwarded_proto));\n\t\t}\n\t}\n\tarray_free(forward_array);\n\treturn HANDLER_GO_ON;\n}\n\nstatic int find_end_quoted_string (const char * const s, int i) {\n    do {\n        ++i;\n    } while (s[i] != '\"' && s[i] != '\\0' && (s[i] != '\\\\' || s[++i] != '\\0'));\n    return i;\n}\n\nstatic int find_next_semicolon_or_comma_or_eq (const char * const s, int i) {\n    for (; s[i] != '=' && s[i] != ';' && s[i] != ',' && s[i] != '\\0'; ++i) {\n        if (s[i] == '\"') {\n            i = find_end_quoted_string(s, i);\n            if (s[i] == '\\0') return -1;\n        }\n    }\n    return i;\n}\n\nstatic int find_next_semicolon_or_comma (const char * const s, int i) {\n    for (; s[i] != ';' && s[i] != ',' && s[i] != '\\0'; ++i) {\n        if (s[i] == '\"') {\n            i = find_end_quoted_string(s, i);\n            if (s[i] == '\\0') return -1;\n        }\n    }\n    return i;\n}\n\nstatic int buffer_backslash_unescape (buffer * const b) {\n    /* (future: might move to buffer.c) */\n    size_t j = 0;\n    size_t len = buffer_string_length(b);\n    char *p = memchr(b->ptr, '\\\\', len);\n\n    if (NULL == p) return 1; /*(nothing to do)*/\n\n    len -= (size_t)(p - b->ptr);\n    for (size_t i = 0; i < len; ++i) {\n        if (p[i] == '\\\\') {\n            if (++i == len) return 0; /*(invalid trailing backslash)*/\n        }\n        p[j++] = p[i];\n    }\n    buffer_string_set_length(b, (size_t)(p+j - b->ptr));\n    return 1;\n}\n\nstatic handler_t mod_extforward_Forwarded (server *srv, connection *con, plugin_data *p, buffer *forwarded) {\n    /* HTTP list need not consist of param=value tokens,\n     * but this routine expect such for HTTP Forwarded header\n     * Since info in each set of params is only used if from\n     * admin-specified trusted proxy:\n     * - invalid param=value tokens are ignored and skipped\n     * - not checking \"for\" exists in each set of params\n     * - not checking for duplicated params in each set of params\n     * - not checking canonical form of addr (also might be obfuscated)\n     * - obfuscated tokens permitted in chain, though end of trust is expected\n     *   to be non-obfuscated IP for mod_extforward to masquerade as remote IP\n     * future: since (potentially) trusted proxies begin at end of string,\n     *   it might be better to parse from end of string rather than parsing from\n     *   beginning.  Doing so would also allow reducing arbitrary param limit\n     *   to number of params permitted per proxy.\n     */\n    char * const s = forwarded->ptr;\n    int i = 0, j = -1, v, vlen, k, klen;\n    int used = (int)buffer_string_length(forwarded);\n    int ofor = -1, oproto, ohost, oby, oremote_user;\n    int offsets[256];/*(~50 params is more than reasonably expected to handle)*/\n    while (i < used) {\n        while (s[i] == ' ' || s[i] == '\\t') ++i;\n        if (s[i] == ';') { ++i; continue; }\n        if (s[i] == ',') {\n            if (j >= (int)(sizeof(offsets)/sizeof(int))) break;\n            offsets[++j] = -1; /*(\"offset\" separating params from next proxy)*/\n            ++i;\n            continue;\n        }\n        if (s[i] == '\\0') break;\n\n        k = i;\n        i = find_next_semicolon_or_comma_or_eq(s, i);\n        if (i < 0) {\n            /*(reject IP spoofing if attacker sets improper quoted-string)*/\n            log_error_write(srv, __FILE__, __LINE__, \"s\",\n                            \"invalid quoted-string in Forwarded header\");\n            con->http_status = 400; /* Bad Request */\n            con->mode = DIRECT;\n            return HANDLER_FINISHED;\n        }\n        if (s[i] != '=') continue;\n        klen = i - k;\n        v = ++i;\n        i = find_next_semicolon_or_comma(s, i);\n        if (i < 0) {\n            /*(reject IP spoofing if attacker sets improper quoted-string)*/\n            log_error_write(srv, __FILE__, __LINE__, \"s\",\n                            \"invalid quoted-string in Forwarded header\");\n            con->http_status = 400; /* Bad Request */\n            con->mode = DIRECT;\n            return HANDLER_FINISHED;\n        }\n        vlen = i - v;              /* might be 0 */\n\n        /* have k, klen, v, vlen\n         * (might contain quoted string) (contents not validated or decoded)\n         * (might be repeated k)\n         */\n        if (0 == klen) continue;   /* invalid k */\n        if (j >= (int)(sizeof(offsets)/sizeof(int))-4) break;\n        offsets[j+1] = k;\n        offsets[j+2] = klen;\n        offsets[j+3] = v;\n        offsets[j+4] = vlen;\n        j += 4;\n    }\n\n    if (j >= (int)(sizeof(offsets)/sizeof(int))-4) {\n        /* error processing Forwarded; too many params; fail closed */\n        log_error_write(srv, __FILE__, __LINE__, \"s\",\n                        \"Too many params in Forwarded header\");\n        con->http_status = 400; /* Bad Request */\n        con->mode = DIRECT;\n        return HANDLER_FINISHED;\n    }\n\n    if (-1 == j) return HANDLER_GO_ON;  /* make no changes */\n    used = j+1;\n    offsets[used] = -1; /* mark end of last set of params */\n\n    while (j >= 4) { /*(param=value pairs)*/\n        if (-1 == offsets[j]) { --j; continue; }\n        do {\n            j -= 3; /*(k, klen, v, vlen come in sets of 4)*/\n        } while ((3 != offsets[j+1]  /* 3 == sizeof(\"for\")-1 */\n                  || 0 != buffer_caseless_compare(s+offsets[j], 3, \"for\", 3))\n                 && 0 != j-- && -1 != offsets[j]);\n        if (j < 0) break;\n        if (-1 == offsets[j]) { --j; continue; }\n\n        /* remove trailing spaces/tabs and double-quotes from string\n         * (note: not unescaping backslash escapes in quoted string) */\n        v = offsets[j+2];\n        vlen = v + offsets[j+3];\n        while (vlen > v && (s[vlen-1] == ' ' || s[vlen-1] == '\\t')) --vlen;\n        if (vlen > v+1 && s[v] == '\"' && s[vlen-1] == '\"') {\n            offsets[j+2] = ++v;\n            --vlen;\n            if (s[v] == '[') {\n                /* remove \"[]\" surrounding IPv6, as well as (optional) port\n                 * (assumes properly formatted IPv6 addr from trusted proxy) */\n                ++v;\n                do { --vlen; } while (vlen > v && s[vlen] != ']');\n                if (v == vlen) {\n                    log_error_write(srv, __FILE__, __LINE__, \"s\",\n                                    \"Invalid IPv6 addr in Forwarded header\");\n                    con->http_status = 400; /* Bad Request */\n                    con->mode = DIRECT;\n                    return HANDLER_FINISHED;\n                }\n            }\n            else if (s[v] != '_' && s[v] != '/' && s[v] != 'u') {\n                /* remove (optional) port from non-obfuscated IPv4 */\n                for (klen=vlen, vlen=v; vlen < klen && s[vlen] != ':'; ++vlen) ;\n            }\n            offsets[j+2] = v;\n        }\n        offsets[j+3] = vlen - v;\n\n        /* obfuscated ipstr and obfuscated port are also accepted here, as\n         * is path to unix domain socket, but note that backslash escapes\n         * in quoted-string were not unescaped above.  Also, if obfuscated\n         * identifiers are rotated by proxies as recommended by RFC, then\n         * maintaining list of trusted identifiers is non-trivial and is not\n         * attempted by this module. */\n\n        if (v != vlen) {\n            int trusted = is_proxy_trusted(p, s+v, vlen-v);\n\n            if (s[v] != '_' && s[v] != '/'\n                && (7 != (vlen - v) || 0 != memcmp(s+v, \"unknown\", 7))) {\n                ofor = j; /* save most recent non-obfuscated ipstr */\n            }\n\n            if (!trusted) break;\n        }\n\n        do { --j; } while (j > 0 && -1 != offsets[j]);\n        if (j <= 0) break;\n        --j;\n    }\n\n    if (-1 != ofor) {\n        /* C funcs getaddrinfo(), inet_addr() require '\\0'-terminated IP str */\n        char *ipend = s+offsets[ofor+2]+offsets[ofor+3];\n        char c = *ipend;\n        int rc;\n        *ipend = '\\0';\n        rc = mod_extforward_set_addr(srv, con, p, s+offsets[ofor+2]);\n        *ipend = c;\n        if (!rc) return HANDLER_GO_ON; /* invalid addr; make no changes */\n    }\n    else {\n        return HANDLER_GO_ON; /* make no changes */\n    }\n\n    /* parse out params associated with for=<ip> addr set above */\n    oproto = ohost = oby = oremote_user = -1;\n    j = ofor;\n    if (j > 0) { do { --j; } while (j > 0 && -1 != offsets[j]); }\n    if (-1 == offsets[j]) ++j;\n    if (j == ofor) j += 4;\n    for (; -1 != offsets[j]; j+=4) { /*(k, klen, v, vlen come in sets of 4)*/\n        switch (offsets[j+1]) {\n         #if 0\n          case 2:\n            if (0 == buffer_caseless_compare(s+offsets[j],2,\"by\",2))\n                oby = j;\n            break;\n         #endif\n         #if 0\n          /*(already handled above to find IP prior to earliest trusted proxy)*/\n          case 3:\n            if (0 == buffer_caseless_compare(s+offsets[j],3,\"for\",3))\n                ofor = j;\n            break;\n         #endif\n          case 4:\n            if (0 == buffer_caseless_compare(s+offsets[j],4,\"host\",4))\n                ohost = j;\n            break;\n          case 5:\n            if (0 == buffer_caseless_compare(s+offsets[j],5,\"proto\",5))\n                oproto = j;\n            break;\n          case 11:\n            if (0 == buffer_caseless_compare(s+offsets[j],11,\"remote_user\",11))\n                oremote_user = j;\n            break;\n          default:\n            break;\n        }\n    }\n    i = ++j;\n\n    if (-1 != oproto) {\n        /* remove trailing spaces/tabs, and double-quotes from proto\n         * (note: not unescaping backslash escapes in quoted string) */\n        v = offsets[oproto+2];\n        vlen = v + offsets[oproto+3];\n        while (vlen > v && (s[vlen-1] == ' ' || s[vlen-1] == '\\t')) --vlen;\n        if (vlen > v+1 && s[v] == '\"' && s[vlen-1] == '\"') { ++v; --vlen; }\n        mod_extforward_set_proto(srv, con, s+v, vlen-v);\n    }\n\n    if (p->conf.opts & PROXY_FORWARDED_HOST) {\n        /* Limitations:\n         * - con->request.http_host is not reset in mod_extforward_restore()\n         *   but is currently not an issues since con->request.http_host will be\n         *   reset by next request.  If a new module uses con->request.http_host\n         *   in the handle_request_done hook, then should evaluate if that\n         *   module should use the forwarded value (probably) or original value.\n         * - due to need to decode and unescape host=..., some extra work is\n         *   done in the case where host matches current Host header.\n         *   future: might add code to check if Host has actually changed or not\n         *\n         * note: change host after mod_extforward_set_proto() since that may\n         *       affect scheme port used in http_request_host_policy() host\n         *       normalization\n         */\n\n        /* find host param set by earliest trusted proxy in proxy chain\n         * (host might be changed anywhere along the chain) */\n        for (j = i; j < used && -1 == ohost; ) {\n            if (-1 == offsets[j]) { ++j; continue; }\n            if (4 == offsets[j+1]\n                && 0 == buffer_caseless_compare(s+offsets[j], 4, \"host\", 4))\n                ohost = j;\n            j += 4; /*(k, klen, v, vlen come in sets of 4)*/\n        }\n        if (-1 != ohost) {\n            if (extforward_check_proxy\n                && !buffer_string_is_empty(con->request.http_host)) {\n                http_header_env_set(con,\n                                    CONST_STR_LEN(\"_L_EXTFORWARD_ACTUAL_HOST\"),\n                                    CONST_BUF_LEN(con->request.http_host));\n            }\n            /* remove trailing spaces/tabs, and double-quotes from host */\n            v = offsets[ohost+2];\n            vlen = v + offsets[ohost+3];\n            while (vlen > v && (s[vlen-1] == ' ' || s[vlen-1] == '\\t')) --vlen;\n            if (vlen > v+1 && s[v] == '\"' && s[vlen-1] == '\"') {\n                ++v; --vlen;\n                buffer_copy_string_len(con->request.http_host, s+v, vlen-v);\n                if (!buffer_backslash_unescape(con->request.http_host)) {\n                    log_error_write(srv, __FILE__, __LINE__, \"s\",\n                                    \"invalid host= value in Forwarded header\");\n                    con->http_status = 400; /* Bad Request */\n                    con->mode = DIRECT;\n                    return HANDLER_FINISHED;\n                }\n            }\n            else {\n                buffer_copy_string_len(con->request.http_host, s+v, vlen-v);\n            }\n\n            if (0 != http_request_host_policy(con, con->request.http_host,\n                                              con->uri.scheme)) {\n                /*(reject invalid chars in Host)*/\n                log_error_write(srv, __FILE__, __LINE__, \"s\",\n                                \"invalid host= value in Forwarded header\");\n                con->http_status = 400; /* Bad Request */\n                con->mode = DIRECT;\n                return HANDLER_FINISHED;\n            }\n\n            config_cond_cache_reset_item(srv, con, COMP_HTTP_HOST);\n        }\n    }\n\n    if (p->conf.opts & PROXY_FORWARDED_REMOTE_USER) {\n        /* find remote_user param set by closest proxy\n         * (auth may have been handled by any trusted proxy in proxy chain) */\n        for (j = i; j < used; ) {\n            if (-1 == offsets[j]) { ++j; continue; }\n            if (11 == offsets[j+1]\n                && 0==buffer_caseless_compare(s+offsets[j],11,\"remote_user\",11))\n                oremote_user = j;\n            j += 4; /*(k, klen, v, vlen come in sets of 4)*/\n        }\n        if (-1 != oremote_user) {\n            /* ???: should we also support param for auth_type ??? */\n            /* remove trailing spaces/tabs, and double-quotes from remote_user*/\n            v = offsets[oremote_user+2];\n            vlen = v + offsets[oremote_user+3];\n            while (vlen > v && (s[vlen-1] == ' ' || s[vlen-1] == '\\t')) --vlen;\n            if (vlen > v+1 && s[v] == '\"' && s[vlen-1] == '\"') {\n                buffer *euser;\n                ++v; --vlen;\n                http_header_env_set(con,\n                                    CONST_STR_LEN(\"REMOTE_USER\"), s+v, vlen-v);\n                euser = http_header_env_get(con, CONST_STR_LEN(\"REMOTE_USER\"));\n                force_assert(NULL != euser);\n                if (!buffer_backslash_unescape(euser)) {\n                    log_error_write(srv, __FILE__, __LINE__, \"s\",\n                      \"invalid remote_user= value in Forwarded header\");\n                    con->http_status = 400; /* Bad Request */\n                    con->mode = DIRECT;\n                    return HANDLER_FINISHED;\n                }\n            }\n            else {\n                http_header_env_set(con,\n                                    CONST_STR_LEN(\"REMOTE_USER\"), s+v, vlen-v);\n            }\n        }\n    }\n\n  #if 0\n    if ((p->conf.opts & PROXY_FORWARDED_CREATE_XFF)\n        && NULL == http_header_request_get(con, HTTP_HEADER_X_FORWARDED_FOR, CONST_STR_LEN(\"X-Forwarded-For\"))) {\n        /* create X-Forwarded-For if not present\n         * (and at least original connecting IP is a trusted proxy) */\n        buffer *xff = srv->tmp_buf;\n        buffer_clear(xff);\n        for (j = 0; j < used; ) {\n            if (-1 == offsets[j]) { ++j; continue; }\n            if (3 == offsets[j+1]\n                && 0 == buffer_caseless_compare(s+offsets[j], 3, \"for\", 3)) {\n                if (!buffer_string_is_empty(xff))\n                    buffer_append_string_len(xff, CONST_STR_LEN(\", \"));\n                /* quoted-string, IPv6 brackets, and :port already removed */\n                v = offsets[j+2];\n                vlen = offsets[j+3];\n                buffer_append_string_len(xff, s+v, vlen);\n                if (s[v-1] != '=') { /*(must have been quoted-string)*/\n                    char *x =\n                      memchr(xff->ptr+buffer_string_length(xff)-vlen,'\\\\',vlen);\n                    if (NULL != x) { /* backslash unescape in-place */\n                        for (v = 0; x[v]; ++x) {\n                            if (x[v] == '\\\\' && x[++v] == '\\0')\n                                break; /*(invalid trailing backslash)*/\n                            *x = x[v];\n                        }\n                        buffer_string_set_length(xff, x - xff->ptr);\n                    }\n                }\n                /* skip to next group; take first \"for=...\" in group\n                 * (should be 0 or 1 \"for=...\" per group, but not trusted) */\n                do { j += 4; } while (-1 != offsets[j]);\n                ++j;\n                continue;\n            }\n            j += 4; /*(k, klen, v, vlen come in sets of 4)*/\n        }\n        http_header_request_set(con, HTTP_HEADER_X_FORWARDED_FOR, CONST_STR_LEN(\"X-Forwarded-For\"), CONST_BUF_LEN(xff));\n    }\n  #endif\n\n    return HANDLER_GO_ON;\n}\n\nURIHANDLER_FUNC(mod_extforward_uri_handler) {\n\tplugin_data *p = p_d;\n\tbuffer *forwarded = NULL;\n\thandler_ctx *hctx = con->plugin_ctx[p->id];\n\tint is_forwarded_header = 0;\n\n\tmod_extforward_patch_connection(srv, con, p);\n\n\tif (con->conf.log_request_handling) {\n\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\",\n\t\t\t\"-- mod_extforward_uri_handler called\");\n\t}\n\n\tif (p->conf.hap_PROXY_ssl_client_verify) {\n\t\tdata_string *ds;\n\t\tif (NULL != hctx && hctx->ssl_client_verify && NULL != hctx->env\n\t\t    && NULL != (ds = (data_string *)array_get_element(hctx->env, \"SSL_CLIENT_S_DN_CN\"))) {\n\t\t\thttp_header_env_set(con,\n\t\t\t\t\t    CONST_STR_LEN(\"SSL_CLIENT_VERIFY\"),\n\t\t\t\t\t    CONST_STR_LEN(\"SUCCESS\"));\n\t\t\thttp_header_env_set(con,\n\t\t\t\t\t    CONST_STR_LEN(\"REMOTE_USER\"),\n\t\t\t\t\t    CONST_BUF_LEN(ds->value));\n\t\t\thttp_header_env_set(con,\n\t\t\t\t\t    CONST_STR_LEN(\"AUTH_TYPE\"),\n\t\t\t\t\t    CONST_STR_LEN(\"SSL_CLIENT_VERIFY\"));\n\t\t} else {\n\t\t\thttp_header_env_set(con,\n\t\t\t\t\t    CONST_STR_LEN(\"SSL_CLIENT_VERIFY\"),\n\t\t\t\t\t    CONST_STR_LEN(\"NONE\"));\n\t\t}\n\t}\n\n\tfor (size_t k = 0; k < p->conf.headers->used && NULL == forwarded; ++k) {\n\t\tbuffer *hdr = ((data_string *)p->conf.headers->data[k])->value;\n\t\tforwarded = http_header_request_get(con, HTTP_HEADER_UNSPECIFIED, CONST_BUF_LEN(hdr));\n\t\tif (forwarded) {\n\t\t\tis_forwarded_header = buffer_is_equal_caseless_string(hdr, CONST_STR_LEN(\"Forwarded\"));\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (NULL == forwarded) {\n\t\tif (con->conf.log_request_handling) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"s\", \"no forward header found, skipping\");\n\t\t}\n\n\t\treturn HANDLER_GO_ON;\n\t}\n\n\t/* if the remote ip itself is not trusted, then do nothing */\n\tif (!is_connection_trusted(con, p)) {\n\t\tif (con->conf.log_request_handling) {\n\t\t\tlog_error_write(srv, __FILE__, __LINE__, \"sbs\",\n\t\t\t\t\t\"remote address\", con->dst_addr_buf, \"is NOT a trusted proxy, skipping\");\n\t\t}\n\n\t\treturn HANDLER_GO_ON;\n\t}\n\n\tif (is_forwarded_header) {\n\t\treturn mod_extforward_Forwarded(srv, con, p, forwarded);\n\t}\n\n\treturn mod_extforward_X_Forwarded_For(srv, con, p, forwarded);\n}\n\n\nCONNECTION_FUNC(mod_extforward_handle_request_env) {\n    plugin_data *p = p_d;\n    handler_ctx *hctx = con->plugin_ctx[p->id];\n    UNUSED(srv);\n    if (NULL == hctx || NULL == hctx->env) return HANDLER_GO_ON;\n    for (size_t i=0; i < hctx->env->used; ++i) {\n        /* note: replaces values which may have been set by mod_openssl\n         * (when mod_extforward is listed after mod_openssl in server.modules)*/\n        data_string *ds = (data_string *)hctx->env->data[i];\n        http_header_env_set(con,\n                            CONST_BUF_LEN(ds->key), CONST_BUF_LEN(ds->value));\n    }\n    return HANDLER_GO_ON;\n}\n\n\nCONNECTION_FUNC(mod_extforward_restore) {\n\tplugin_data *p = p_d;\n\thandler_ctx *hctx = con->plugin_ctx[p->id];\n\n\tif (!hctx) return HANDLER_GO_ON;\n\n\tif (NULL != hctx->saved_network_read) {\n\t\tcon->network_read = hctx->saved_network_read;\n\t\thctx->saved_network_read = NULL;\n\t}\n\n\tif (NULL != hctx->saved_remote_addr_buf) {\n\t\tcon->dst_addr = hctx->saved_remote_addr;\n\t\tbuffer_free(con->dst_addr_buf);\n\t\tcon->dst_addr_buf = hctx->saved_remote_addr_buf;\n\t\thctx->saved_remote_addr_buf = NULL;\n\t\t/* Now, clean the conf_cond cache, because we may have changed the results of tests */\n\t\tconfig_cond_cache_reset_item(srv, con, COMP_HTTP_REMOTE_IP);\n\t}\n\n\tif (NULL == hctx->env) {\n\t\thandler_ctx_free(hctx);\n\t\tcon->plugin_ctx[p->id] = NULL;\n\t}\n\n\treturn HANDLER_GO_ON;\n}\n\n\nCONNECTION_FUNC(mod_extforward_handle_con_close)\n{\n    plugin_data *p = p_d;\n    handler_ctx *hctx = con->plugin_ctx[p->id];\n    UNUSED(srv);\n    if (NULL != hctx) {\n        if (NULL != hctx->saved_network_read) {\n            con->network_read = hctx->saved_network_read;\n        }\n        if (NULL != hctx->saved_remote_addr_buf) {\n            con->dst_addr = hctx->saved_remote_addr;\n            buffer_free(con->dst_addr_buf);\n            con->dst_addr_buf = hctx->saved_remote_addr_buf;\n        }\n        if (NULL != hctx->env) {\n            array_free(hctx->env);\n        }\n        handler_ctx_free(hctx);\n        con->plugin_ctx[p->id] = NULL;\n    }\n\n    return HANDLER_GO_ON;\n}\n\n\nstatic int mod_extforward_network_read (server *srv, connection *con, chunkqueue *cq, off_t max_bytes);\n\nCONNECTION_FUNC(mod_extforward_handle_con_accept)\n{\n    plugin_data *p = p_d;\n    mod_extforward_patch_connection(srv, con, p);\n    if (!p->conf.hap_PROXY) return HANDLER_GO_ON;\n    if (is_connection_trusted(con, p)) {\n        handler_ctx *hctx = handler_ctx_init();\n        con->plugin_ctx[p->id] = hctx;\n        hctx->saved_network_read = con->network_read;\n        con->network_read = mod_extforward_network_read;\n    }\n    else {\n        if (con->conf.log_request_handling) {\n            log_error_write(srv, __FILE__, __LINE__, \"sbs\",\n                    \"remote address\", con->dst_addr_buf,\n                    \"is NOT a trusted proxy, skipping\");\n        }\n    }\n    return HANDLER_GO_ON;\n}\n\n\n/* this function is called at dlopen() time and inits the callbacks */\n\nint mod_extforward_plugin_init(plugin *p);\nint mod_extforward_plugin_init(plugin *p) {\n\tp->version     = LIGHTTPD_VERSION_ID;\n\tp->name        = buffer_init_string(\"extforward\");\n\n\tp->init        = mod_extforward_init;\n\tp->handle_connection_accept = mod_extforward_handle_con_accept;\n\tp->handle_uri_raw = mod_extforward_uri_handler;\n\tp->handle_request_env = mod_extforward_handle_request_env;\n\tp->handle_request_done = mod_extforward_restore;\n\tp->connection_reset = mod_extforward_restore;\n\tp->handle_connection_close = mod_extforward_handle_con_close;\n\tp->set_defaults  = mod_extforward_set_defaults;\n\tp->cleanup     = mod_extforward_free;\n\n\tp->data        = NULL;\n\n\treturn 0;\n}\n\n\n\n\n/* Modified from:\n *   http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt\n *\n9. Sample code\n\nThe code below is an example of how a receiver may deal with both versions of\nthe protocol header for TCP over IPv4 or IPv6. The function is supposed to be\ncalled upon a read event. Addresses may be directly copied into their final\nmemory location since they're transported in network byte order. The sending\nside is even simpler and can easily be deduced from this sample code.\n *\n */\n\nunion hap_PROXY_hdr {\n    struct {\n        char line[108];\n    } v1;\n    struct {\n        uint8_t sig[12];\n        uint8_t ver_cmd;\n        uint8_t fam;\n        uint16_t len;\n        union {\n            struct {  /* for TCP/UDP over IPv4, len = 12 */\n                uint32_t src_addr;\n                uint32_t dst_addr;\n                uint16_t src_port;\n                uint16_t dst_port;\n            } ip4;\n            struct {  /* for TCP/UDP over IPv6, len = 36 */\n                 uint8_t  src_addr[16];\n                 uint8_t  dst_addr[16];\n                 uint16_t src_port;\n                 uint16_t dst_port;\n            } ip6;\n            struct {  /* for AF_UNIX sockets, len = 216 */\n                 uint8_t src_addr[108];\n                 uint8_t dst_addr[108];\n            } unx;\n        } addr;\n    } v2;\n};\n\n/*\nIf the length specified in the PROXY protocol header indicates that additional\nbytes are part of the header beyond the address information, a receiver may\nchoose to skip over and ignore those bytes, or attempt to interpret those\nbytes.\n\nThe information in those bytes will be arranged in Type-Length-Value (TLV\nvectors) in the following format.  The first byte is the Type of the vector.\nThe second two bytes represent the length in bytes of the value (not included\nthe Type and Length bytes), and following the length field is the number of\nbytes specified by the length.\n */\nstruct pp2_tlv {\n    uint8_t type;\n    uint8_t length_hi;\n    uint8_t length_lo;\n    /*uint8_t value[0];*//* C99 zero-length array */\n};\n\n/*\nThe following types have already been registered for the <type> field :\n */\n\n#define PP2_TYPE_ALPN             0x01\n#define PP2_TYPE_AUTHORITY        0x02\n#define PP2_TYPE_CRC32C           0x03\n#define PP2_TYPE_NOOP             0x04\n#define PP2_TYPE_SSL              0x20\n#define PP2_SUBTYPE_SSL_VERSION   0x21\n#define PP2_SUBTYPE_SSL_CN        0x22\n#define PP2_SUBTYPE_SSL_CIPHER    0x23\n#define PP2_SUBTYPE_SSL_SIG_ALG   0x24\n#define PP2_SUBTYPE_SSL_KEY_ALG   0x25\n#define PP2_TYPE_NETNS            0x30\n\n/*\nFor the type PP2_TYPE_SSL, the value is itselv a defined like this :\n */\n\nstruct pp2_tlv_ssl {\n    uint8_t  client;\n    uint32_t verify;\n    /*struct pp2_tlv sub_tlv[0];*//* C99 zero-length array */\n};\n\n/*\nAnd the <client> field is made of a bit field from the following values,\nindicating which element is present :\n */\n\n#define PP2_CLIENT_SSL            0x01\n#define PP2_CLIENT_CERT_CONN      0x02\n#define PP2_CLIENT_CERT_SESS      0x04\n\n\n\n\n#ifndef MSG_DONTWAIT\n#define MSG_DONTWAIT 0\n#endif\n#ifndef MSG_NOSIGNAL\n#define MSG_NOSIGNAL 0\n#endif\n\n/* returns 0 if needs to poll, <0 upon error or >0 is protocol vers (success) */\nstatic int hap_PROXY_recv (const int fd, union hap_PROXY_hdr * const hdr, const int family, const int so_type)\n{\n    static const char v2sig[12] =\n        \"\\x0D\\x0A\\x0D\\x0A\\x00\\x0D\\x0A\\x51\\x55\\x49\\x54\\x0A\";\n\n    ssize_t ret;\n    size_t sz;\n    int ver;\n\n    do {\n        ret = recv(fd, hdr, sizeof(*hdr), MSG_PEEK|MSG_DONTWAIT|MSG_NOSIGNAL);\n    } while (-1 == ret && errno == EINTR);\n\n    if (-1 == ret)\n        return (errno == EAGAIN\n                #ifdef EWOULDBLOCK\n                #if EAGAIN != EWOULDBLOCK\n                || errno == EWOULDBLOCK\n                #endif\n                #endif\n               ) ? 0 : -1;\n\n    if (ret >= 16 && 0 == memcmp(&hdr->v2, v2sig, 12)\n        && (hdr->v2.ver_cmd & 0xF0) == 0x20) {\n        ver = 2;\n        sz = 16 + (size_t)ntohs(hdr->v2.len);\n        if ((size_t)ret < sz)\n            return -2; /* truncated or too large header */\n\n        switch (hdr->v2.ver_cmd & 0xF) {\n          case 0x01: break; /* PROXY command */\n          case 0x00: break; /* LOCAL command */\n          default:   return -2; /* not a supported command */\n        }\n    }\n    else if (ret >= 8 && 0 == memcmp(hdr->v1.line, \"PROXY\", 5)) {\n        const char *end = memchr(hdr->v1.line, '\\r', ret - 1);\n        if (!end || end[1] != '\\n')\n            return -2; /* partial or invalid header */\n        ver = 1;\n        sz = (size_t)(end + 2 - hdr->v1.line); /* skip header + CRLF */\n    }\n    else {\n        /* Wrong protocol */\n        return -2;\n    }\n\n    /* we need to consume the appropriate amount of data from the socket\n     * (overwrites existing contents of hdr with same data) */\n    UNUSED(family);\n    UNUSED(so_type);\n    do {\n      #if defined(MSG_TRUNC) && defined(__linux__)\n        if ((family==AF_INET || family==AF_INET6) && so_type == SOCK_STREAM) {\n            ret = recv(fd, hdr, sz, MSG_TRUNC|MSG_DONTWAIT|MSG_NOSIGNAL);\n            if (ret >= 0 || errno != EINVAL) continue;\n        }\n      #endif\n        ret = recv(fd, hdr, sz, MSG_DONTWAIT|MSG_NOSIGNAL);\n    } while (-1 == ret && errno == EINTR);\n    if (ret < 0) return -1;\n    if (ret != (ssize_t)sz) {\n        errno = EIO; /*(partial read; valid but unexpected; not handled)*/\n        return -1;\n    }\n    if (1 == ver) hdr->v1.line[sz-2] = '\\0'; /*terminate str to ease parsing*/\n    return ver;\n}\n\n\nstatic int mod_extforward_hap_PROXY_v1 (connection * const con,\n                                        union hap_PROXY_hdr * const hdr)\n{\n  #ifdef __COVERITY__\n    __coverity_tainted_data_sink__(hdr);\n  #endif\n\n    /* samples\n     *   \"PROXY TCP4 255.255.255.255 255.255.255.255 65535 65535\\r\\n\"\n     *   \"PROXY TCP6 ffff:f...f:ffff ffff:f...f:ffff 65535 65535\\r\\n\"\n     *   \"PROXY UNKNOWN\\r\\n\"\n     *   \"PROXY UNKNOWN ffff:f...f:ffff ffff:f...f:ffff 65535 65535\\r\\n\"\n     */\n    char *s = hdr->v1.line + sizeof(\"PROXY\")-1; /*checked in hap_PROXY_recv()*/\n    char *src_addr, *dst_addr, *src_port, *dst_port, *e;\n    int family;\n    long src_lport, dst_lport;\n    if (*s != ' ') return -1;\n    ++s;\n    if (s[0] == 'T' && s[1] == 'C' && s[2] == 'P' && s[4] == ' ') {\n        if (s[3] == '4') {\n            family = AF_INET;\n        } else if (s[3] == '6') {\n            family = AF_INET6;\n        }\n        else {\n            return -1;\n        }\n        s += 5;\n    }\n    else if (0 == memcmp(s, \"UNKNOWN\", sizeof(\"UNKNOWN\")-1)\n             && (s[7] == '\\0' || s[7] == ' ')) {\n        return 0;     /* keep local connection address */\n    }\n    else {\n        return -1;\n    }\n\n    /*(strsep() should be fairly portable, but is not standard)*/\n    src_addr = s;\n    dst_addr = strchr(src_addr, ' ');\n    if (NULL == dst_addr) return -1;\n    *dst_addr++ = '\\0';\n    src_port = strchr(dst_addr, ' ');\n    if (NULL == src_port) return -1;\n    *src_port++ = '\\0';\n    dst_port = strchr(src_port, ' ');\n    if (NULL == dst_port) return -1;\n    *dst_port++ = '\\0';\n\n    src_lport = strtol(src_port, &e, 10);\n    if (src_lport <= 0 || src_lport > USHRT_MAX || *e != '\\0') return -1;\n    dst_lport = strtol(dst_port, &e, 10);\n    if (dst_lport <= 0 || dst_lport > USHRT_MAX || *e != '\\0') return -1;\n\n    if (1 != sock_addr_inet_pton(&con->dst_addr,\n                                 src_addr, family, (unsigned short)src_lport))\n        return -1;\n    /* Forwarded by=... could be saved here.\n     * (see additional comments in mod_extforward_hap_PROXY_v2()) */\n\n    /* re-parse addr to string to normalize\n     * (instead of trusting PROXY to provide canonicalized src_addr string)\n     * (should prefer PROXY v2 protocol if concerned about performance) */\n    sock_addr_inet_ntop_copy_buffer(con->dst_addr_buf, &con->dst_addr);\n\n    return 0;\n}\n\n\nstatic int mod_extforward_hap_PROXY_v2 (connection * const con,\n                                        union hap_PROXY_hdr * const hdr)\n{\n  #ifdef __COVERITY__\n    __coverity_tainted_data_sink__(hdr);\n  #endif\n\n    /* If HAProxy-PROXY protocol used, then lighttpd acts as transparent proxy,\n     * masquerading as servicing the client IP provided in by HAProxy-PROXY hdr.\n     * The connecting con->dst_addr and con->dst_addr_buf are not saved here,\n     * so that info is lost unless getsockname() and getpeername() are used.\n     * One result is that mod_proxy will use the masqueraded IP instead of the\n     * actual IP when updated Forwarded and X-Forwarded-For (but if actual\n     * connection IPs needed, better to save the info here rather than use\n     * syscalls to retrieve the info later).\n     * (Exception: con->dst_addr can be further changed if mod_extforward parses\n     *  Forwaded or X-Forwarded-For request headers later, after request headers\n     *  have been received.)\n     */\n\n    /* Forwarded by=... could be saved here.  The by param is for backends to be\n     * able to construct URIs for that interface (interface on server which\n     * received request and made PROXY connection here), though that server\n     * should provide that information in updated Forwarded or X-Forwarded-For\n     * HTTP headers */\n    /*struct sockaddr_storage by;*/\n\n    /* Addresses provided by HAProxy-PROXY protocol are in network byte order.\n     * Note: addr info is not validated, so do not accept HAProxy-PROXY\n     * protocol from untrusted servers.  For example, untrusted servers from\n     * which HAProxy-PROXY protocol is accepted (don't do that) could pretend\n     * to be from the internal network and might thereby bypass security policy.\n     */\n\n    /* (Clear con->dst_addr with memset() in case actual and proxies IPs\n     *  are different domains, e.g. one is IPv4 and the other is IPv6) */\n\n    struct pp2_tlv *tlv;\n    uint32_t sz = ntohs(hdr->v2.len);\n    uint32_t len = 0;\n\n    switch (hdr->v2.ver_cmd & 0xF) {\n      case 0x01: break;    /* PROXY command */\n      case 0x00: return  0;/* LOCAL command; keep local connection address */\n      default:   return -1;/* should not happen; validated in hap_PROXY_recv()*/\n    }\n\n    /* PROXY command */\n\n    switch (hdr->v2.fam) {\n      case 0x11:  /* TCPv4 */\n        sock_addr_assign(&con->dst_addr, AF_INET, hdr->v2.addr.ip4.src_port,\n                                                 &hdr->v2.addr.ip4.src_addr);\n        sock_addr_inet_ntop_copy_buffer(con->dst_addr_buf, &con->dst_addr);\n       #if 0\n        ((struct sockaddr_in *)&by)->sin_family = AF_INET;\n        ((struct sockaddr_in *)&by)->sin_addr.s_addr =\n            hdr->v2.addr.ip4.dst_addr;\n        ((struct sockaddr_in *)&by)->sin_port =\n            hdr->v2.addr.ip4.dst_port;\n       #endif\n        len = (uint32_t)sizeof(hdr->v2.addr.ip4);\n        break;\n     #ifdef HAVE_IPV6\n      case 0x21:  /* TCPv6 */\n        sock_addr_assign(&con->dst_addr, AF_INET6, hdr->v2.addr.ip6.src_port,\n                                                  &hdr->v2.addr.ip6.src_addr);\n        sock_addr_inet_ntop_copy_buffer(con->dst_addr_buf, &con->dst_addr);\n       #if 0\n        ((struct sockaddr_in6 *)&by)->sin6_family = AF_INET6;\n        memcpy(&((struct sockaddr_in6 *)&by)->sin6_addr,\n            hdr->v2.addr.ip6.dst_addr, 16);\n        ((struct sockaddr_in6 *)&by)->sin6_port =\n            hdr->v2.addr.ip6.dst_port;\n       #endif\n        len = (uint32_t)sizeof(hdr->v2.addr.ip6);\n        break;\n     #endif\n     #ifdef HAVE_SYS_UN_H\n      case 0x31:  /* UNIX domain socket */\n        {\n            char *src_addr = (char *)hdr->v2.addr.unx.src_addr;\n            char *z = memchr(src_addr, '\\0', UNIX_PATH_MAX);\n            if (NULL == z) return -1; /* invalid addr; too long */\n            len = (uint32_t)(z - src_addr + 1); /*(+1 for '\\0')*/\n            sock_addr_assign(&con->dst_addr, AF_UNIX, 0, src_addr);\n            buffer_copy_string_len(con->dst_addr_buf, src_addr, len);\n        }\n       #if 0 /*(dst_addr should be identical to src_addr for AF_UNIX)*/\n        ((struct sockaddr_un *)&by)->sun_family = AF_UNIX;\n        memcpy(&((struct sockaddr_un *)&by)->sun_path,\n            hdr->v2.addr.unx.dst_addr, 108);\n       #endif\n        len = (uint32_t)sizeof(hdr->v2.addr.unx);\n        break;\n     #endif\n      default:    /* keep local connection address; unsupported protocol */\n        return 0;\n    }\n\n    /* (optional) Type-Length-Value (TLV vectors) follow addresses */\n\n    tlv = (struct pp2_tlv *)((char *)hdr + 16);\n    for (sz -= len, len -= 3; sz >= 3; sz -= 3 + len) {\n        tlv = (struct pp2_tlv *)((char *)tlv + 3 + len);\n        len = ((uint32_t)tlv->length_hi << 8) | tlv->length_lo;\n        if (3 + len > sz) break; /*(invalid TLV)*/\n        switch (tlv->type) {\n         #if 0 /*(not implemented here)*/\n          case PP2_TYPE_ALPN:\n          case PP2_TYPE_AUTHORITY:\n          case PP2_TYPE_CRC32C:\n         #endif\n          case PP2_TYPE_SSL: {\n            static const uint32_t zero = 0;\n            handler_ctx *hctx =\n              con->plugin_ctx[mod_extforward_plugin_data_singleton->id];\n            struct pp2_tlv_ssl *tlv_ssl =\n              (struct pp2_tlv_ssl *)(void *)((char *)tlv+3);\n            struct pp2_tlv *subtlv = tlv;\n            if (tlv_ssl->client & PP2_CLIENT_SSL) {\n                buffer_copy_string_len(con->proto, CONST_STR_LEN(\"https\"));\n            }\n            if ((tlv_ssl->client & (PP2_CLIENT_CERT_CONN|PP2_CLIENT_CERT_SESS))\n                && 0 == memcmp(&tlv_ssl->verify, &zero, 4)) { /* misaligned */\n                hctx->ssl_client_verify = 1;\n            }\n            for (uint32_t subsz = len-5, n = 5; subsz >= 3; subsz -= 3 + n) {\n                subtlv = (struct pp2_tlv *)((char *)subtlv + 3 + n);\n                n = ((uint32_t)subtlv->length_hi << 8) | subtlv->length_lo;\n                if (3 + n > subsz) break; /*(invalid TLV)*/\n                if (NULL == hctx->env) hctx->env = array_init();\n                switch (subtlv->type) {\n                  case PP2_SUBTYPE_SSL_VERSION:\n                    array_set_key_value(hctx->env,\n                                        CONST_STR_LEN(\"SSL_PROTOCOL\"),\n                                        (char *)subtlv+3, n);\n                    break;\n                  case PP2_SUBTYPE_SSL_CN:\n                    /* (tlv_ssl->client & PP2_CLIENT_CERT_CONN)\n                     *   or\n                     * (tlv_ssl->client & PP2_CLIENT_CERT_SESS) */\n                    array_set_key_value(hctx->env,\n                                        CONST_STR_LEN(\"SSL_CLIENT_S_DN_CN\"),\n                                        (char *)subtlv+3, n);\n                    break;\n                  case PP2_SUBTYPE_SSL_CIPHER:\n                    array_set_key_value(hctx->env,\n                                        CONST_STR_LEN(\"SSL_CIPHER\"),\n                                        (char *)subtlv+3, n);\n                    break;\n                  case PP2_SUBTYPE_SSL_SIG_ALG:\n                    array_set_key_value(hctx->env,\n                                        CONST_STR_LEN(\"SSL_SERVER_A_SIG\"),\n                                        (char *)subtlv+3, n);\n                    break;\n                  case PP2_SUBTYPE_SSL_KEY_ALG:\n                    array_set_key_value(hctx->env,\n                                        CONST_STR_LEN(\"SSL_SERVER_A_KEY\"),\n                                        (char *)subtlv+3, n);\n                    break;\n                  default:\n                    break;\n                }\n            }\n            break;\n          }\n         #if 0 /*(not implemented here)*/\n          case PP2_TYPE_NETNS:\n         #endif\n          /*case PP2_TYPE_NOOP:*//* no-op */\n          default:\n            break;\n        }\n    }\n\n    return 0;\n}\n\n\nstatic int mod_extforward_network_read (server *srv, connection *con,\n                                        chunkqueue *cq, off_t max_bytes)\n{\n    /* XXX: when using hap-PROXY protocol, currently avoid overhead of setting\n     * _L_ environment variables for mod_proxy to accurately set Forwarded hdr\n     * In the future, might add config switch to enable doing this extra work */\n\n    union hap_PROXY_hdr hdr;\n    int rc = hap_PROXY_recv(con->fd, &hdr,\n                            con->dst_addr.plain.sa_family, SOCK_STREAM);\n    switch (rc) {\n      case  2: rc = mod_extforward_hap_PROXY_v2(con, &hdr); break;\n      case  1: rc = mod_extforward_hap_PROXY_v1(con, &hdr); break;\n      case  0: return  0; /*(errno == EAGAIN || errno == EWOULDBLOCK)*/\n      case -1: log_error_write(srv, __FILE__, __LINE__, \"ss\",\n                               \"hap-PROXY recv()\", strerror(errno));\n               rc = -1; break;\n      case -2: log_error_write(srv, __FILE__, __LINE__, \"s\",\n                               \"hap-PROXY proto received \"\n                               \"invalid/unsupported request\");\n               /* fall through */\n      default: rc = -1; break;\n    }\n\n    mod_extforward_restore(srv, con, mod_extforward_plugin_data_singleton);\n    return (0 == rc) ? con->network_read(srv, con, cq, max_bytes) : rc;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/src/CMakeLists.txt": "include(CheckCSourceCompiles)\ninclude(CheckIncludeFiles)\ninclude(CheckFunctionExists)\ninclude(CheckSymbolExists)\ninclude(CheckVariableExists)\ninclude(CheckTypeSize)\ninclude(CheckLibraryExists)\ninclude(CMakeDetermineCCompiler)\ninclude(FindThreads)\ninclude(FindPkgConfig)\n\ninclude(LighttpdMacros)\n\nadd_definitions(-D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGE_FILES)\n\noption(WITH_XATTR \"with xattr-support for the stat-cache [default: off]\")\noption(WITH_MYSQL \"with mysql-support for mod_vhostdb_mysql [default: off]\")\noption(WITH_PGSQL \"with postgres-support for mod_vhostdb_pgsql [default: off]\")\noption(WITH_DBI \"with dbi-support for mod_vhostdb_dbi [default: off]\")\noption(WITH_OPENSSL \"with openssl-support [default: off]\")\noption(WITH_WOLFSSL \"with wolfSSL-support [default: off]\")\noption(WITH_PCRE \"with regex support [default: on]\" ON)\noption(WITH_WEBDAV_PROPS \"with property-support for mod_webdav [default: off]\")\noption(WITH_WEBDAV_LOCKS \"locks in webdav [default: off]\")\noption(WITH_BZIP \"with bzip2-support for mod_compress [default: off]\")\noption(WITH_ZLIB \"with deflate-support for mod_compress [default: on]\" ON)\noption(WITH_KRB5 \"with Kerberos5-support for mod_auth [default: off]\")\noption(WITH_LDAP \"with LDAP-support for mod_auth mod_vhostdb_ldap [default: off]\")\noption(WITH_PAM \"with PAM-support for mod_auth [default: off]\")\noption(WITH_LUA \"with lua 5.1 for mod_magnet [default: off]\")\n# option(WITH_VALGRIND \"with internal support for valgrind [default: off]\")\noption(WITH_FAM \"fam/gamin for reducing number of stat() calls [default: off]\")\noption(WITH_GDBM \"gdbm storage for mod_trigger_b4_dl [default: off]\")\noption(WITH_MEMCACHED \"memcached storage for mod_trigger_b4_dl [default: off]\")\noption(WITH_LIBEV \"libev support for fdevent handlers [default: off]\")\noption(WITH_LIBUNWIND \"with libunwind to print backtraces in asserts [default: off]\")\noption(WITH_GEOIP \"with GeoIP-support mod_geoip [default: off]\")\noption(WITH_MAXMINDDB \"with MaxMind GeoIP2-support mod_maxminddb [default: off]\")\noption(WITH_SASL \"with SASL-support for mod_authn_sasl [default: off]\")\n\nif(CMAKE_C_COMPILER_ID MATCHES \"GNU\" OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n\toption(BUILD_EXTRA_WARNINGS \"extra warnings\")\n\n\tif(BUILD_EXTRA_WARNINGS)\n\t\tset(WARN_CFLAGS \"-g -g2 -Wall -Wmissing-declarations -Wcast-align -Wsign-compare -Wnested-externs -Wpointer-arith -D_FORTIFY_SOURCE=2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security\")\n\t\tset(WARN_LDFLAGS \"-Wl,--as-needed\")\n\t\t# -Werror -Wbad-function-cast -Wmissing-prototypes\n\tendif()\nendif()\n\noption(BUILD_STATIC \"build a static lighttpd with all modules added\")\n\nif(BUILD_STATIC)\n\tset(LIGHTTPD_STATIC 1)\nelseif(APPLE)\n\tset(CMAKE_SHARED_MODULE_PREFIX \"\")\nelse()\n\tset(CMAKE_SHARED_LIBRARY_PREFIX \"\")\nendif()\n\nif(WITH_LIBEV)\n\tfind_package(LibEV REQUIRED)\n\tset(HAVE_LIBEV 1)\nendif()\n\nif(WITH_LIBUNWIND)\n\tpkg_check_modules(LIBUNWIND REQUIRED libunwind)\n\tset(HAVE_LIBUNWIND 1)\nendif()\n\nif(WITH_WEBDAV_PROPS)\n\tset(WITH_XML 1)\n\tset(WITH_SQLITE3 1)\nendif()\n\nif(WITH_WEBDAV_LOCKS)\n\tset(WITH_UUID 1)\nendif()\n\ncheck_include_files(sys/devpoll.h HAVE_SYS_DEVPOLL_H)\ncheck_include_files(sys/epoll.h HAVE_SYS_EPOLL_H)\nset(CMAKE_REQUIRED_FLAGS \"-include sys/types.h\")\ncheck_include_files(sys/event.h HAVE_SYS_EVENT_H)\nset(CMAKE_REQUIRED_FLAGS)\ncheck_include_files(sys/mman.h HAVE_SYS_MMAN_H)\ncheck_include_files(sys/poll.h HAVE_SYS_POLL_H)\ncheck_include_files(sys/port.h HAVE_SYS_PORT_H)\ncheck_include_files(sys/prctl.h HAVE_SYS_PRCTL_H)\ncheck_include_files(sys/resource.h HAVE_SYS_RESOURCE_H)\ncheck_include_files(sys/sendfile.h HAVE_SYS_SENDFILE_H)\ncheck_include_files(sys/select.h HAVE_SYS_SELECT_H)\ncheck_include_files(sys/types.h HAVE_SYS_TYPES_H)\ncheck_include_files(sys/uio.h HAVE_SYS_UIO_H)\ncheck_include_files(sys/un.h HAVE_SYS_UN_H)\ncheck_include_files(sys/wait.h HAVE_SYS_WAIT_H)\ncheck_include_files(sys/time.h HAVE_SYS_TIME_H)\ncheck_include_files(unistd.h HAVE_UNISTD_H)\ncheck_include_files(pthread.h HAVE_PTHREAD_H)\ncheck_include_files(getopt.h HAVE_GETOPT_H)\ncheck_include_files(inttypes.h HAVE_INTTYPES_H)\ncheck_include_files(poll.h HAVE_POLL_H)\ncheck_include_files(pwd.h HAVE_PWD_H)\ncheck_include_files(stddef.h HAVE_STDDEF_H)\ncheck_include_files(stdint.h HAVE_STDINT_H)\ncheck_include_files(strings.h HAVE_STRINGS_H)\ncheck_include_files(syslog.h HAVE_SYSLOG_H)\n\n# check for fastcgi lib, for the tests only\ncheck_include_files(fastcgi.h HAVE_FASTCGI_H)\ncheck_include_files(fastcgi/fastcgi.h HAVE_FASTCGI_FASTCGI_H)\n\n# will be needed for auth\ncheck_include_files(crypt.h HAVE_CRYPT_H)\n# check if we need libcrypt for crypt_r()\ncheck_library_exists(crypt crypt_r \"\" HAVE_LIBCRYPT_CRYPT_R)\nif(HAVE_LIBCRYPT_CRYPT_R)\n\tset(HAVE_CRYPT_R 1)\n\tset(HAVE_LIBCRYPT 1)\nelse()\n\tcheck_library_exists(crypt crypt \"\" HAVE_LIBCRYPT)\nendif()\ncheck_function_exists(crypt_r HAVE_CRYPT_R)\ncheck_function_exists(crypt HAVE_CRYPT)\n\ncheck_include_files(sys/inotify.h HAVE_SYS_INOTIFY_H)\nif(HAVE_SYS_INOTIFY_H)\n\tcheck_function_exists(inotify_init HAVE_INOTIFY_INIT)\nendif()\n\nset(CMAKE_EXTRA_INCLUDE_FILES sys/socket.h)\ncheck_type_size(socklen_t HAVE_SOCKLEN_T)\nset(CMAKE_EXTRA_INCLUDE_FILES)\n\ncheck_include_files(sys/random.h HAVE_SYS_RANDOM_H)\nset(CMAKE_EXTRA_INCLUDE_FILES sys/random.h)\ncheck_function_exists(getentropy HAVE_GETENTROPY)\nset(CMAKE_EXTRA_INCLUDE_FILES)\n\ncheck_include_files(linux/random.h HAVE_LINUX_RANDOM_H)\nset(CMAKE_EXTRA_INCLUDE_FILES linux/random.h)\ncheck_function_exists(getrandom HAVE_GETRANDOM)\nset(CMAKE_EXTRA_INCLUDE_FILES)\n\ncheck_type_size(long SIZEOF_LONG)\ncheck_type_size(off_t SIZEOF_OFF_T)\n\ncheck_function_exists(arc4random_buf HAVE_ARC4RANDOM_BUF)\ncheck_function_exists(chroot HAVE_CHROOT)\ncheck_function_exists(epoll_ctl HAVE_EPOLL_CTL)\ncheck_function_exists(fork HAVE_FORK)\ncheck_function_exists(getloadavg HAVE_GETLOADAVG)\ncheck_function_exists(getrlimit HAVE_GETRLIMIT)\ncheck_function_exists(getuid HAVE_GETUID)\ncheck_function_exists(gmtime_r HAVE_GMTIME_R)\ncheck_function_exists(inet_ntop HAVE_INET_NTOP)\ncheck_function_exists(jrand48 HAVE_JRAND48)\ncheck_function_exists(kqueue HAVE_KQUEUE)\ncheck_function_exists(localtime_r HAVE_LOCALTIME_R)\ncheck_function_exists(lstat HAVE_LSTAT)\ncheck_function_exists(madvise HAVE_MADVISE)\ncheck_function_exists(memcpy HAVE_MEMCPY)\ncheck_function_exists(memset HAVE_MEMSET)\ncheck_function_exists(mmap HAVE_MMAP)\ncheck_function_exists(pathconf HAVE_PATHCONF)\ncheck_function_exists(pipe2 HAVE_PIPE2)\ncheck_function_exists(poll HAVE_POLL)\ncheck_function_exists(port_create HAVE_PORT_CREATE)\ncheck_function_exists(prctl HAVE_PRCTL)\ncheck_function_exists(pread HAVE_PREAD)\ncheck_function_exists(posix_fadvise HAVE_POSIX_FADVISE)\ncheck_function_exists(select HAVE_SELECT)\ncheck_function_exists(sendfile HAVE_SENDFILE)\ncheck_function_exists(send_file HAVE_SEND_FILE)\ncheck_function_exists(sendfile64 HAVE_SENDFILE64)\ncheck_function_exists(sendfilev HAVE_SENDFILEV)\ncheck_function_exists(sigaction HAVE_SIGACTION)\ncheck_function_exists(signal HAVE_SIGNAL)\ncheck_function_exists(sigtimedwait HAVE_SIGTIMEDWAIT)\ncheck_function_exists(srandom HAVE_SRANDOM)\ncheck_function_exists(strptime HAVE_STRPTIME)\ncheck_function_exists(syslog HAVE_SYSLOG)\ncheck_function_exists(writev HAVE_WRITEV)\ncheck_function_exists(inet_aton HAVE_INET_ATON)\ncheck_function_exists(issetugid HAVE_ISSETUGID)\ncheck_function_exists(inet_pton HAVE_INET_PTON)\ncheck_function_exists(memset_s HAVE_MEMSET_S)\ncheck_function_exists(explicit_bzero HAVE_EXPLICIT_BZERO)\ncheck_symbol_exists(clock_gettime \"time.h\" HAVE_CLOCK_GETTIME)\nif (NOT HAVE_CLOCK_GETTIME)\n\tcheck_library_exists(rt clock_gettime \"time.h\" HAVE_CLOCK_GETTIME)\nendif()\ncheck_library_exists(elftc elftc_copyfile \"libelftc.h\" HAVE_ELFTC_COPYFILE)\ncheck_c_source_compiles(\"\n\t#include <sys/types.h>\n\t#include <sys/socket.h>\n\t#include <netinet/in.h>\n\n\tint main() {\n\t\tstruct sockaddr_in6 s; struct in6_addr t=in6addr_any; int i=AF_INET6; s; t.s6_addr[0] = 0;\n\t\treturn 0;\n\t}\" HAVE_IPV6)\ncheck_c_source_compiles(\"\n\t__attribute__((weak)) void __dummy(void *x) { }\n\tint main() {\n\t\tvoid *x;\n\t\t__dummy(x);\n\t}\n\t\" HAVE_WEAK_SYMBOLS)\ncheck_c_source_compiles(\"\n\t#include <time.h>\n\tint main(void) {\n\t\tstruct tm t;\n\t\tt.tm_gmtoff = 0;\n\t\treturn 0;\n\t}\n\t\" HAVE_STRUCT_TM_GMTOFF)\n\n## refactor me\nmacro(XCONFIG _package _include_DIR _link_DIR _link_FLAGS _cflags)\n# reset the variables at the beginning\n\tset(${_include_DIR})\n\tset(${_link_DIR})\n\tset(${_link_FLAGS})\n\tset(${_cflags})\n\n\tfind_program(${_package}CONFIG_EXECUTABLE NAMES ${_package} PATHS /usr/local/bin )\n\n\t# if pkg-config has been found\n\tif(${_package}CONFIG_EXECUTABLE)\n\t\tset(XCONFIG_EXECUTABLE \"${${_package}CONFIG_EXECUTABLE}\")\n\t\tmessage(STATUS \"found ${_package}: ${XCONFIG_EXECUTABLE}\")\n\n\t\texec_program(${XCONFIG_EXECUTABLE} ARGS --libs OUTPUT_VARIABLE __link_FLAGS)\n\t\tstring(REPLACE \"\\n\" \"\" ${_link_FLAGS} ${__link_FLAGS})\n\t\texec_program(${XCONFIG_EXECUTABLE} ARGS --cflags OUTPUT_VARIABLE __cflags)\n\t\tstring(REPLACE \"\\n\" \"\" ${_cflags} ${__cflags})\n\telse()\n\t\tmessage(STATUS \"found ${_package}: no\")\n\tendif()\nendmacro(XCONFIG _package _include_DIR _link_DIR _link_FLAGS _cflags)\n\nif(WITH_XATTR)\n\tcheck_include_files(\"sys/types.h;attr/attributes.h\" HAVE_ATTR_ATTRIBUTES_H)\n\tif(HAVE_ATTR_ATTRIBUTES_H)\n\t\tcheck_library_exists(attr attr_get \"\" HAVE_XATTR)\n\tendif()\nelse()\n\tunset(HAVE_ATTR_ATTRIBUTES_H)\n\tunset(HAVE_XATTR)\nendif()\n\nif(WITH_MYSQL)\n\txconfig(mysql_config MYSQL_INCDIR MYSQL_LIBDIR MYSQL_LDFLAGS MYSQL_CFLAGS)\n\n\tset(CMAKE_REQUIRED_INCLUDES /usr/include/mysql)\n\tcheck_include_files(mysql.h HAVE_MYSQL_H)\n\tset(CMAKE_REQUIRED_INCLUDES)\n\tif(HAVE_MYSQL_H)\n\t\tcheck_library_exists(mysqlclient mysql_real_connect \"\" HAVE_MYSQL)\n\tendif()\nelse()\n\tunset(HAVE_MYSQL_H)\n\tunset(HAVE_MYSQL)\nendif()\n\nif(WITH_PGSQL)\n\txconfig(pg_config PGSQL_INCDIR PGSQL_LIBDIR PGSQL_LDFLAGS PGSQL_CFLAGS)\n\n\tcheck_include_files(libpq-fe.h HAVE_PGSQL_H)\n\tif(HAVE_PGSQL_H)\n\t\tcheck_library_exists(pq PQsetdbLogin \"\" HAVE_PGSQL)\n\tendif()\nelse()\n\tunset(HAVE_PGSQL_H)\n\tunset(HAVE_PGSQL)\nendif()\n\nif(WITH_DBI)\n\tcheck_include_files(dbi/dbi.h HAVE_DBI_H)\n\tif(HAVE_DBI_H)\n\t\tcheck_library_exists(dbi dbi_conn_connect \"\" HAVE_DBI)\n\tendif()\nelse()\n\tunset(HAVE_DBI_H)\n\tunset(HAVE_DBI)\nendif()\n\nset(CRYPTO_LIBRARY \"\")\n\nif(WITH_OPENSSL)\n\tif(APPLE)\n\t\tset(CMAKE_REQUIRED_INCLUDES /opt/local/include)\n\tendif()\n\tcheck_include_files(openssl/ssl.h HAVE_OPENSSL_SSL_H)\n\tif(APPLE)\n\t\tset(CMAKE_REQUIRED_INCLUDES)\n\tendif()\n\tif(HAVE_OPENSSL_SSL_H)\n\t\tcheck_library_exists(crypto BIO_f_base64 \"\" HAVE_LIBCRYPTO)\n\t\tif(HAVE_LIBCRYPTO)\n\t\t\tset(CRYPTO_LIBRARY crypto)\n\t\t\tcheck_library_exists(ssl SSL_new \"\" HAVE_LIBSSL)\n\t\tendif()\n\tendif()\nelse()\n\tunset(HAVE_OPENSSL_SSL_H)\n\tunset(HAVE_LIBSSL)\nendif()\n\nif(WITH_WOLFSSL)\n\tif(NOT ${WITH_WOLFSSL} EQUAL \"\")\n\t\tfind_path(WOLFSSL_INCLUDE_DIR wolfssl/ssl.h ${WITH_WOLFSSL}/include)\n\telseif(APPLE)\n\t\tfind_path(WOLFSSL_INCLUDE_DIR wolfssl/ssl.h /opt/local/include)\n\telse()\n\t\tfind_path(WOLFSSL_INCLUDE_DIR wolfssl/ssl.h /usr/local/include)\n\tendif()\n\n\tif(NOT ${WITH_WOLFSSL} EQUAL \"\")\n\t\tfind_library(WOLFSSL_LIBRARY\n\t\t\tNAMES wolfssl\n\t\t\tPATHS ${WITH_WOLFSSL}/lib\n\t\t)\n\telse()\n\t\tfind_library(WOLFSSL_LIBRARY\n\t\t\tNAMES wolfssl\n\t\t\tPATHS /usr/local/lib /opt/local/lib /usr/lib\n\t\t)\n\tendif()\n\n\tif(WOLFSSL_INCLUDE_DIR AND WOLFSSL_LIBRARY)\n\t\tset(CMAKE_REQUIRED_INCLUDES ${WOLFSSL_INCLUDE_DIR})\n\t\tcheck_include_files(wolfssl/ssl.h HAVE_WOLFSSL_SSL_H)\n\n\t\tcheck_c_source_compiles(\"\n\t\t#include <wolfssl/options.h>\n\t\t#if !defined(HAVE_LIGHTY) && !defined(OPENSSL_ALL)\n\t\t#error HAVE_LIGHTY macro not defined\n\t\t#endif\n\t\tint main() { return 0; }\n\t\t\" CHECK_HAVE_LIGHTY)\n\t\tif (NOT CHECK_HAVE_LIGHTY)\n\t\t\tmessage(FATAL_ERROR \"wolfssl must be built with ./configure --enable-lighty\")\n\t\tendif()\n\t\tunset(CHECK_HAVE_LIGHTY)\n\n\t\tset(CMAKE_REQUIRED_LIBRARIES ${WOLFSSL_LIBRARY})\n\t\tcheck_library_exists(${WOLFSSL_LIBRARY} wolfSSL_Init \"\" HAVE_LIBCRYPTO)\n\t\tif(HAVE_LIBCRYPTO)\n\t\t\tset(CRYPTO_LIBRARY ${WOLFSSL_LIBRARY})\n\t\t\tadd_definitions(-DHAVE_WOLFSSL_SSL_H)\n\t\tendif()\n\t\tset(CMAKE_REQUIRED_INCLUDES)\n\t\tset(CMAKE_REQUIRED_LIBRARIES)\n\t\tinclude_directories(${WOLFSSL_INCLUDE_DIR} ${WOLFSSL_INCLUDE_DIR}/wolfssl)\n\tendif()\n\tunset(WOLFSSL_LIBRARY)\n\tunset(WOLFSSL_INCLUDE_DIR)\nelse()\n\tunset(HAVE_WOLFSSL_SSL_H)\nendif()\n\nif(WITH_OPENSSL AND WITH_WOLFSSL)\n\tmessage(FATAL_ERROR \"lighttpd should not be built with both --with-openssl and --with-wolfssl\")\nendif()\n\nif(WITH_PCRE)\n\t## if we have pcre-config, use it\n\txconfig(pcre-config PCRE_INCDIR PCRE_LIBDIR PCRE_LDFLAGS PCRE_CFLAGS)\n\tif(PCRE_LDFLAGS OR PCRE_CFLAGS)\n\t\tmessage(STATUS \"found pcre at: LDFLAGS: ${PCRE_LDFLAGS} CFLAGS: ${PCRE_CFLAGS}\")\n\n\t\tif(NOT PCRE_CFLAGS STREQUAL \"\\n\")\n\t\t\t## if it is empty we'll get newline returned\n\t\t\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${PCRE_CFLAGS}\")\n\t\tendif()\n\n\t\tset(HAVE_PCRE_H 1)\n\t\tset(HAVE_LIBPCRE 1)\n\telse()\n\t\tif(NOT WIN32)\n\t\t\tcheck_include_files(pcre.h HAVE_PCRE_H)\n\t\t\tcheck_library_exists(pcre pcre_exec \"\" HAVE_LIBPCRE)\n\t\t\tset(PCRE_LDFLAGS -lpcre)\n\t\telse()\n\t\t\tfind_path(PCRE_INCLUDE_DIR pcre.h\n\t\t\t/usr/local/include\n\t\t\t/usr/include\n\t\t\t)\n\n\t\t\tset(PCRE_NAMES pcre)\n\t\t\tfind_library(PCRE_LIBRARY\n\t\t\tNAMES ${PCRE_NAMES}\n\t\t\tPATHS /usr/lib /usr/local/lib\n\t\t\t)\n\n\t\t\tif(PCRE_INCLUDE_DIR AND PCRE_LIBRARY)\n\t\t\t\tset(CMAKE_REQUIRED_INCLUDES ${PCRE_INCLUDE_DIR})\n\t\t\t\tset(CMAKE_REQUIRED_LIBRARIES ${PCRE_LIBRARY})\n\t\t\t\tcheck_include_files(pcre.h HAVE_PCRE_H)\n\t\t\t\tcheck_library_exists(pcre pcre_exec \"\" HAVE_LIBPCRE)\n\t\t\t\tset(CMAKE_REQUIRED_INCLUDES)\n\t\t\t\tset(CMAKE_REQUIRED_LIBRARIES)\n\t\t\t\tinclude_directories(${PCRE_INCLUDE_DIR})\n\t\t\tendif()\n\t\tendif()\n\tendif()\n\n\tif(NOT HAVE_PCRE_H)\n\t\tmessage(FATAL_ERROR \"pcre.h couldn't be found\")\n\tendif()\n\tif(NOT HAVE_LIBPCRE)\n\t\tmessage(FATAL_ERROR \"libpcre couldn't be found\")\n\tendif()\nelse()\n\tunset(HAVE_PCRE_H)\n\tunset(HAVE_LIBPCRE)\nendif()\n\nif(WITH_SASL)\n\tcheck_include_files(sasl/sasl.h HAVE_SASL_SASL_H)\n\tif(HAVE_SASL_SASL_H)\n\t\tcheck_library_exists(sasl2 sasl_server_init \"\" HAVE_SASL)\n\tendif()\nelse()\n\tunset(HAVE_SASL_SASL_H)\n\tunset(HAVE_SASL)\nendif()\n\n\nif(WITH_XML)\n\txconfig(xml2-config XML2_INCDIR XML2_LIBDIR XML2_LDFLAGS XML2_CFLAGS)\n\tif(XML2_LDFLAGS OR XML2_CFLAGS)\n\t\tmessage(STATUS \"found xml2 at: LDFLAGS: ${XML2_LDFLAGS} CFLAGS: ${XML2_CFLAGS}\")\n\n\t\t## if it is empty we'll get newline returned\n\t\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${XML2_CFLAGS}\")\n\n\t\tcheck_include_files(libxml/tree.h HAVE_LIBXML_H)\n\n\t\tset(CMAKE_REQUIRED_FLAGS ${XML2_LDFLAGS})\n\t\tcheck_library_exists(xml2 xmlParseChunk \"\" HAVE_LIBXML)\n\t\tset(CMAKE_REQUIRED_FLAGS)\n\telse()\n\t\tcheck_include_files(libxml.h HAVE_LIBXML_H)\n\t\tcheck_library_exists(xml2 xmlParseChunk \"\" HAVE_LIBXML)\n\tendif()\n\n\tif(NOT HAVE_LIBXML_H)\n\t\tmessage(FATAL_ERROR \"libxml/tree.h couldn't be found\")\n\tendif()\n\tif(NOT HAVE_LIBXML)\n\t\tmessage(FATAL_ERROR \"libxml2 couldn't be found\")\n\tendif()\nelse()\n\tunset(HAVE_LIBXML_H)\n\tunset(HAVE_LIBXML)\nendif()\n\nif(WITH_SQLITE3)\n\tcheck_include_files(sqlite3.h HAVE_SQLITE3_H)\n\tcheck_library_exists(sqlite3 sqlite3_reset \"\" HAVE_SQLITE3)\nelse()\n\tunset(HAVE_SQLITE3_H)\n\tunset(HAVE_SQLITE3)\nendif()\n\nif(WITH_UUID)\n\tcheck_include_files(uuid/uuid.h HAVE_UUID_UUID_H)\n\tcheck_library_exists(uuid uuid_generate \"\" NEED_LIBUUID)\n\tif(NOT NEED_LIBUUID)\n\t\tcheck_function_exists(uuid_generate HAVE_LIBUUID)\n\telse()\n\t\tset(HAVE_LIBUUID 1)\n\tendif()\nelse()\n\tunset(HAVE_UUID_UUID_H)\n\tunset(NEED_LIBUUID)\n\tunset(HAVE_LIBUUID)\nendif()\n\nif(WITH_ZLIB)\n\tif(NOT WIN32)\n\t\tcheck_include_files(zlib.h HAVE_ZLIB_H)\n\t\tcheck_library_exists(z deflate \"\" HAVE_LIBZ)\n\t\tset(ZLIB_LIBRARY z)\n\telse()\n\t\tfind_path(ZLIB_INCLUDE_DIR zlib.h\n\t\t\t/usr/local/include\n\t\t\t/usr/include\n\t\t)\n\n\t\tset(ZLIB_NAMES z zlib zdll)\n\t\t\tfind_library(ZLIB_LIBRARY\n\t\t\tNAMES ${ZLIB_NAMES}\n\t\t\tPATHS /usr/lib /usr/local/lib\n\t\t)\n\n\t\tif(ZLIB_INCLUDE_DIR AND ZLIB_LIBRARY)\n\t\t\tset(CMAKE_REQUIRED_INCLUDES ${ZLIB_INCLUDE_DIR})\n\t\t\tset(CMAKE_REQUIRED_LIBRARIES ${ZLIB_LIBRARY})\n\t\t\tget_filename_component(ZLIB_NAME ${ZLIB_LIBRARY} NAME)\n\t\t\tcheck_include_files(zlib.h HAVE_ZLIB_H)\n\t\t\tcheck_library_exists(${ZLIB_NAME} deflate \"\" HAVE_LIBZ)\n\t\t\tset(CMAKE_REQUIRED_INCLUDES)\n\t\t\tset(CMAKE_REQUIRED_LIBRARIES)\n\t\t\tinclude_directories(${ZLIB_INCLUDE_DIR})\n\t\tendif()\n\tendif()\nelse()\n\tunset(HAVE_ZLIB_H)\n\tunset(HAVE_LIBZ)\n\tunset(ZLIB_INCLUDE_DIR)\n\tunset(ZLIB_LIBRARY)\nendif()\n\nif(WITH_BZIP)\n\tcheck_include_files(bzlib.h HAVE_BZLIB_H)\n\tcheck_library_exists(bz2 BZ2_bzCompress \"\" HAVE_LIBBZ2)\nelse()\n\tunset(HAVE_BZLIB_H)\n\tunset(HAVE_LIBBZ2)\nendif()\n\nif(WITH_LDAP)\n\tcheck_include_files(ldap.h HAVE_LDAP_H)\n\tcheck_library_exists(ldap ldap_bind \"\" HAVE_LIBLDAP)\n\tcheck_include_files(lber.h HAVE_LBER_H)\n\tcheck_library_exists(lber ber_printf \"\" HAVE_LIBLBER)\nelse()\n\tunset(HAVE_LDAP_H)\n\tunset(HAVE_LIBLDAP)\n\tunset(HAVE_LBER_H)\n\tunset(HAVE_LIBLBER)\nendif()\n\nif(WITH_PAM)\n\tcheck_include_files(security/pam_appl.h HAVE_SECURITY_PAM_APPL_H)\n\tcheck_library_exists(pam pam_start \"\" HAVE_PAM)\nelse()\n\tunset(HAVE_SECURITY_PAM_APPL_H)\n\tunset(HAVE_PAM)\nendif()\n\nif(WITH_LUA)\n\tpkg_search_module(LUA REQUIRED lua5.3 lua-5.3 lua5.2 lua-5.2 lua5.1 lua-5.1 lua)\n\tmessage(STATUS \"found lua at: INCDIR: ${LUA_INCLUDE_DIRS} LIBDIR: ${LUA_LIBRARY_DIRS} LDFLAGS: ${LUA_LDFLAGS} CFLAGS: ${LUA_CFLAGS}\")\n\tset(HAVE_LIBLUA 1 \"Have liblua\")\n\tset(HAVE_LUA_H  1 \"Have liblua header\")\nelse()\n\tunset(HAVE_LIBLUA)\n\tunset(HAVE_LUA_H)\nendif()\n\nif(WITH_FAM)\n\tcheck_include_files(fam.h HAVE_FAM_H)\n\tcheck_library_exists(fam FAMOpen2 \"\" HAVE_LIBFAM)\n\tif(HAVE_LIBFAM)\n\t\tset(CMAKE_REQUIRED_LIBRARIES fam)\n\t\tcheck_function_exists(FAMNoExists HAVE_FAMNOEXISTS)\n\tendif()\nelse()\n\tunset(HAVE_FAM_H)\n\tunset(HAVE_LIBFAM)\n\tunset(HAVE_FAMNOEXISTS)\nendif()\n\nif(WITH_GDBM)\n\tcheck_include_files(gdbm.h HAVE_GDBM_H)\n\tcheck_library_exists(gdbm gdbm_open \"\" HAVE_GDBM)\nelse()\n\tunset(HAVE_GDBM_H)\n\tunset(HAVE_GDBM)\nendif()\n\nif(WITH_MEMCACHED)\n\tcheck_include_files(libmemcached/memcached.h HAVE_LIBMEMCACHED_MEMCACHED_H)\n\tcheck_library_exists(memcached memcached \"\" HAVE_LIBMEMCACHED)\n\tif(HAVE_LIBMEMCACHED_MEMCACHED_H AND HAVE_LIBMEMCACHED)\n\t\tset(USE_MEMCACHED 1)\n\telse()\n\t\tmessage(FATAL_ERROR \"didn't find libmemcached\")\n\tendif()\nendif()\n\nif(WITH_GEOIP)\n\tcheck_library_exists(geoip GeoIP_country_name_by_addr \"\" HAVE_GEOIP)\nendif()\n\nif(WITH_MAXMINDDB)\n\tcheck_library_exists(maxminddb MMDB_open \"\" HAVE_MAXMINDDB)\nendif()\n\nif(NOT BUILD_STATIC)\n\tcheck_include_files(dlfcn.h HAVE_DLFCN_H)\nelse()\n\tunset(HAVE_DLFCN_H)\nendif()\n\nif(HAVE_DLFCN_H)\n\tcheck_library_exists(dl dlopen \"\" HAVE_LIBDL)\nelse()\n\tunset(HAVE_LIBDL)\nendif()\n\nset(LIGHTTPD_VERSION_ID 10400)\nset(PACKAGE_NAME \"${CMAKE_PROJECT_NAME}\")\nset(PACKAGE_VERSION \"${CPACK_PACKAGE_VERSION}\")\n\nif(NOT SBINDIR)\n\tset(SBINDIR \"sbin\")\nendif()\n\nif(NOT LIGHTTPD_MODULES_DIR)\n\tset(LIGHTTPD_MODULES_DIR \"lib${LIB_SUFFIX}/lighttpd\")\nendif()\n\nif(NOT WIN32)\n\tset(LIGHTTPD_LIBRARY_DIR \"${CMAKE_INSTALL_PREFIX}/${LIGHTTPD_MODULES_DIR}\")\nelse()\n\t## We use relative path in windows\n\tset(LIGHTTPD_LIBRARY_DIR \"lib\")\nendif()\n\n## Write out config.h\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)\n\nadd_definitions(-DHAVE_CONFIG_H)\n\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR})\n\nset(COMMON_SRC\n\tbase64.c buffer.c burl.c log.c\n\thttp_header.c http_kv.c keyvalue.c chunk.c\n\thttp_chunk.c stream.c fdevent.c gw_backend.c\n\tstat_cache.c plugin.c joblist.c etag.c array.c\n\tdata_string.c data_array.c\n\tdata_integer.c algo_sha1.c md5.c\n\tvector.c\n\tfdevent_select.c fdevent_libev.c\n\tfdevent_poll.c fdevent_linux_sysepoll.c\n\tfdevent_solaris_devpoll.c fdevent_solaris_port.c\n\tfdevent_freebsd_kqueue.c\n\tdata_config.c\n\tcrc32.c\n\tconnections-glue.c\n\tconfigfile-glue.c\n\thttp-header-glue.c\n\thttp_auth.c\n\thttp_vhostdb.c\n\trequest.c\n\tsock_addr.c\n\tsplaytree.c\n\trand.c\n\tsafe_memclear.c\n)\n\nif(WIN32)\n\tmessage(STATUS \"Adding local getopt implementation.\")\n\tset(COMMON_SRC ${COMMON_SRC} xgetopt.c)\nendif()\n\nadd_executable(lemon lemon.c)\n\n## Build parsers by using lemon...\nlemon_parser(configparser.y)\nlemon_parser(mod_ssi_exprparser.y)\n\nset(L_INSTALL_TARGETS)\n\nadd_executable(lighttpd-angel lighttpd-angel.c)\nset(L_INSTALL_TARGETS ${L_INSTALL_TARGETS} lighttpd-angel)\nadd_target_properties(lighttpd-angel COMPILE_FLAGS \"-DSBIN_DIR=\\\\\\\\\\\"${CMAKE_INSTALL_PREFIX}/${SBINDIR}\\\\\\\\\\\"\")\n\nadd_executable(lighttpd\n\tserver.c\n\tresponse.c\n\tconnections.c\n\tinet_ntop_cache.c\n\tnetwork.c\n\tnetwork_write.c\n\tconfigfile.c\n\tconfigparser.c\n\t${COMMON_SRC}\n)\nset(L_INSTALL_TARGETS ${L_INSTALL_TARGETS} lighttpd)\n\nadd_and_install_library(mod_access mod_access.c)\nadd_and_install_library(mod_accesslog mod_accesslog.c)\nadd_and_install_library(mod_alias mod_alias.c)\nadd_and_install_library(mod_auth \"mod_auth.c\")\nadd_and_install_library(mod_authn_file \"mod_authn_file.c\")\nif(NOT WIN32)\n\tadd_and_install_library(mod_cgi mod_cgi.c)\nendif()\nadd_and_install_library(mod_compress mod_compress.c)\nadd_and_install_library(mod_deflate mod_deflate.c)\nadd_and_install_library(mod_dirlisting mod_dirlisting.c)\nadd_and_install_library(mod_evasive mod_evasive.c)\nadd_and_install_library(mod_evhost mod_evhost.c)\nadd_and_install_library(mod_expire mod_expire.c)\nadd_and_install_library(mod_extforward mod_extforward.c)\nadd_and_install_library(mod_fastcgi mod_fastcgi.c)\nadd_and_install_library(mod_flv_streaming mod_flv_streaming.c)\nadd_and_install_library(mod_indexfile mod_indexfile.c)\nadd_and_install_library(mod_proxy mod_proxy.c)\nadd_and_install_library(mod_redirect mod_redirect.c)\nadd_and_install_library(mod_rewrite mod_rewrite.c)\nadd_and_install_library(mod_rrdtool mod_rrdtool.c)\nadd_and_install_library(mod_scgi mod_scgi.c)\nadd_and_install_library(mod_secdownload mod_secdownload.c)\nadd_and_install_library(mod_setenv mod_setenv.c)\nadd_and_install_library(mod_simple_vhost mod_simple_vhost.c)\nadd_and_install_library(mod_sockproxy mod_sockproxy.c)\nadd_and_install_library(mod_ssi \"mod_ssi_exprparser.c;mod_ssi_expr.c;mod_ssi.c\")\nadd_and_install_library(mod_staticfile mod_staticfile.c)\nadd_and_install_library(mod_status mod_status.c)\nadd_and_install_library(mod_uploadprogress mod_uploadprogress.c)\nadd_and_install_library(mod_userdir mod_userdir.c)\nadd_and_install_library(mod_usertrack mod_usertrack.c)\nadd_and_install_library(mod_vhostdb mod_vhostdb.c)\nadd_and_install_library(mod_webdav mod_webdav.c)\nadd_and_install_library(mod_wstunnel mod_wstunnel.c)\n\nadd_executable(test_array\n\tt/test_array.c\n\tarray.c\n\tdata_array.c\n\tdata_integer.c\n\tdata_string.c\n\tbuffer.c\n)\nadd_test(NAME test_array COMMAND test_array)\n\nadd_executable(test_buffer\n\tt/test_buffer.c\n\tbuffer.c\n)\nadd_test(NAME test_buffer COMMAND test_buffer)\n\nadd_executable(test_burl\n\tt/test_burl.c\n\tburl.c\n\tbuffer.c\n\tbase64.c\n)\nadd_test(NAME test_burl COMMAND test_burl)\n\nadd_executable(test_base64\n\tt/test_base64.c\n\tbuffer.c\n\tbase64.c\n)\nadd_test(NAME test_base64 COMMAND test_base64)\n\nadd_executable(test_configfile\n\tt/test_configfile.c\n\tbuffer.c\n\tarray.c\n\tdata_config.c\n\tdata_integer.c\n\tdata_string.c\n\thttp_header.c\n\thttp_kv.c\n\tvector.c\n\tlog.c\n\tsock_addr.c\n)\nadd_test(NAME test_configfile COMMAND test_configfile)\n\nadd_executable(test_keyvalue\n\tt/test_keyvalue.c\n\tburl.c\n\tbuffer.c\n\tbase64.c\n\tarray.c\n\tdata_integer.c\n\tdata_string.c\n\tlog.c\n)\nadd_test(NAME test_keyvalue COMMAND test_keyvalue)\n\nadd_executable(test_mod_access\n\tt/test_mod_access.c\n\tconfigfile-glue.c\n\tbuffer.c\n\tarray.c\n\tdata_config.c\n\tdata_integer.c\n\tdata_string.c\n\thttp_header.c\n\thttp_kv.c\n\tvector.c\n\tlog.c\n\tsock_addr.c\n)\nadd_test(NAME test_mod_access COMMAND test_mod_access)\n\nadd_executable(test_mod_evhost\n\tt/test_mod_evhost.c\n\tconfigfile-glue.c\n\tbuffer.c\n\tarray.c\n\tdata_config.c\n\tdata_integer.c\n\tdata_string.c\n\thttp_header.c\n\thttp_kv.c\n\tvector.c\n\tlog.c\n\tsock_addr.c\n)\nadd_test(NAME test_mod_evhost COMMAND test_mod_evhost)\n\nadd_executable(test_mod_simple_vhost\n\tt/test_mod_simple_vhost.c\n\tconfigfile-glue.c\n\tbuffer.c\n\tarray.c\n\tdata_config.c\n\tdata_integer.c\n\tdata_string.c\n\thttp_header.c\n\thttp_kv.c\n\tvector.c\n\tlog.c\n\tsock_addr.c\n)\nadd_test(NAME test_mod_simple_vhost COMMAND test_mod_simple_vhost)\n\nadd_executable(test_request\n\tt/test_request.c\n\trequest.c\n\tbuffer.c\n\tarray.c\n\tdata_integer.c\n\tdata_string.c\n\thttp_header.c\n\thttp_kv.c\n\tlog.c\n\tsock_addr.c\n)\nadd_test(NAME test_request COMMAND test_request)\n\nif(HAVE_PCRE_H)\n\ttarget_link_libraries(lighttpd ${PCRE_LDFLAGS})\n\tadd_target_properties(lighttpd COMPILE_FLAGS ${PCRE_CFLAGS})\n\ttarget_link_libraries(mod_rewrite ${PCRE_LDFLAGS})\n\tadd_target_properties(mod_rewrite COMPILE_FLAGS ${PCRE_CFLAGS})\n\ttarget_link_libraries(mod_dirlisting ${PCRE_LDFLAGS})\n\tadd_target_properties(mod_dirlisting COMPILE_FLAGS ${PCRE_CFLAGS})\n\ttarget_link_libraries(mod_redirect ${PCRE_LDFLAGS})\n\tadd_target_properties(mod_redirect COMPILE_FLAGS ${PCRE_CFLAGS})\n\ttarget_link_libraries(test_configfile ${PCRE_LDFLAGS})\n\tadd_target_properties(test_configfile COMPILE_FLAGS ${PCRE_CFLAGS})\n\ttarget_link_libraries(test_keyvalue ${PCRE_LDFLAGS})\n\tadd_target_properties(test_keyvalue COMPILE_FLAGS ${PCRE_CFLAGS})\n\ttarget_link_libraries(test_mod_access ${PCRE_LDFLAGS})\n\tadd_target_properties(test_mod_access COMPILE_FLAGS ${PCRE_CFLAGS})\n\ttarget_link_libraries(test_mod_evhost ${PCRE_LDFLAGS})\n\tadd_target_properties(test_mod_evhost COMPILE_FLAGS ${PCRE_CFLAGS})\n\ttarget_link_libraries(test_mod_simple_vhost ${PCRE_LDFLAGS})\n\tadd_target_properties(test_mod_simple_vhost COMPILE_FLAGS ${PCRE_CFLAGS})\nendif()\n\nif(WITH_PCRE AND (WITH_MEMCACHED OR WITH_GDBM))\n\tadd_and_install_library(mod_trigger_b4_dl mod_trigger_b4_dl.c)\n\ttarget_link_libraries(mod_trigger_b4_dl ${PCRE_LDFLAGS})\n\tadd_target_properties(mod_trigger_b4_dl COMPILE_FLAGS ${PCRE_CFLAGS})\nendif()\n\nif(WITH_LUA)\n\tadd_and_install_library(mod_magnet \"mod_magnet.c;mod_magnet_cache.c\")\n\ttarget_link_libraries(mod_magnet ${LUA_LDFLAGS})\n\tadd_target_properties(mod_magnet COMPILE_FLAGS ${LUA_CFLAGS})\n\n\tadd_and_install_library(mod_cml \"mod_cml.c;mod_cml_lua.c;mod_cml_funcs.c\")\n\ttarget_link_libraries(mod_cml ${LUA_LDFLAGS})\n\tadd_target_properties(mod_cml COMPILE_FLAGS ${LUA_CFLAGS})\n\tif(WITH_MEMCACHED)\n\t\ttarget_link_libraries(mod_cml memcached)\n\tendif()\nendif()\n\nif(WITH_GEOIP)\n\tadd_and_install_library(mod_geoip mod_geoip.c)\n\ttarget_link_libraries(mod_geoip GeoIP)\nendif()\n\nif(WITH_MAXMINDDB)\n\tadd_and_install_library(mod_maxminddb mod_maxminddb.c)\n\ttarget_link_libraries(mod_maxminddb maxminddb)\nendif()\n\nif(HAVE_MYSQL_H AND HAVE_MYSQL)\n\tadd_and_install_library(mod_mysql_vhost \"mod_mysql_vhost.c\")\n\ttarget_link_libraries(mod_mysql_vhost mysqlclient)\n\tadd_and_install_library(mod_vhostdb_mysql \"mod_vhostdb_mysql.c\")\n\ttarget_link_libraries(mod_vhostdb_mysql mysqlclient)\n\tinclude_directories(/usr/include/mysql)\n\n\tadd_and_install_library(mod_authn_mysql \"mod_authn_mysql.c\")\n\tset(L_MOD_AUTHN_MYSQL)\n\tif(HAVE_LIBCRYPT)\n\t\tset(L_MOD_AUTHN_MYSQL ${L_MOD_AUTHN_MYSQL} crypt)\n\tendif()\n\ttarget_link_libraries(mod_authn_mysql ${L_MOD_AUTHN_MYSQL} mysqlclient)\nendif()\n\nif(HAVE_PGSQL_H AND HAVE_PGSQL)\n\tadd_and_install_library(mod_vhostdb_pgsql \"mod_vhostdb_pgsql.c\")\n\ttarget_link_libraries(mod_vhostdb_pgsql pq)\nendif()\n\nif(HAVE_DBI_H AND HAVE_DBI)\n\tadd_and_install_library(mod_vhostdb_dbi \"mod_vhostdb_dbi.c\")\n\ttarget_link_libraries(mod_vhostdb_dbi dbi)\nendif()\n\nset(L_MOD_WEBDAV)\nif(HAVE_SQLITE3_H)\n\tset(L_MOD_WEBDAV ${L_MOD_WEBDAV} sqlite3)\nendif()\nif(HAVE_LIBXML_H)\n\ttarget_link_libraries(mod_webdav ${XML2_LDFLAGS})\nendif()\nif(HAVE_UUID_UUID_H)\n\tif(NEED_LIBUUID)\n\t\tset(L_MOD_WEBDAV ${L_MOD_WEBDAV} uuid)\n\tendif()\nendif()\n\ntarget_link_libraries(mod_webdav ${L_MOD_WEBDAV})\n\nset(L_MOD_AUTHN_FILE)\nif(HAVE_LIBCRYPT)\n\tset(L_MOD_AUTHN_FILE ${L_MOD_AUTHN_FILE} crypt)\nendif()\ntarget_link_libraries(mod_authn_file ${L_MOD_AUTHN_FILE})\n\nif(WITH_KRB5)\n\tcheck_library_exists(krb5 krb5_init_context \"\" HAVE_KRB5)\n\tadd_and_install_library(mod_authn_gssapi \"mod_authn_gssapi.c\")\n\tset(L_MOD_AUTHN_GSSAPI ${L_MOD_AUTHN_GSSAPI} krb5 gssapi_krb5)\n\ttarget_link_libraries(mod_authn_gssapi ${L_MOD_AUTHN_GSSAPI})\nendif()\n\nif(WITH_LDAP)\n\tset(L_MOD_AUTHN_LDAP ${L_MOD_AUTHN_LDAP} ldap lber)\n\tadd_and_install_library(mod_authn_ldap \"mod_authn_ldap.c\")\n\ttarget_link_libraries(mod_authn_ldap ${L_MOD_AUTHN_LDAP})\n\tadd_and_install_library(mod_vhostdb_ldap \"mod_vhostdb_ldap.c\")\n\ttarget_link_libraries(mod_vhostdb_ldap ${L_MOD_AUTHN_LDAP})\nendif()\n\nif(WITH_PAM)\n\tadd_and_install_library(mod_authn_pam \"mod_authn_pam.c\")\n\tset(L_MOD_AUTHN_PAM ${L_MOD_AUTHN_PAM} pam)\n\ttarget_link_libraries(mod_authn_pam ${L_MOD_AUTHN_PAM})\nendif()\n\nif(WITH_SASL)\n\tadd_and_install_library(mod_authn_sasl \"mod_authn_sasl.c\")\n\tset(L_MOD_AUTHN_SASL ${L_MOD_AUTHN_SASL} sasl2)\n\ttarget_link_libraries(mod_authn_sasl ${L_MOD_AUTHN_SASL})\nendif()\n\nif(HAVE_ZLIB_H)\n\tif(HAVE_BZLIB_H)\n\t\ttarget_link_libraries(mod_compress ${ZLIB_LIBRARY} bz2)\n\t\ttarget_link_libraries(mod_deflate ${ZLIB_LIBRARY} bz2)\n\telse()\n\t\ttarget_link_libraries(mod_compress ${ZLIB_LIBRARY})\n\t\ttarget_link_libraries(mod_deflate ${ZLIB_LIBRARY})\n\tendif()\nendif()\n\nif(HAVE_LIBFAM)\n\ttarget_link_libraries(lighttpd fam)\nendif()\n\nif(HAVE_GDBM_H)\n\ttarget_link_libraries(mod_trigger_b4_dl gdbm)\nendif()\n\nif(WITH_MEMCACHED)\n\ttarget_link_libraries(mod_trigger_b4_dl memcached)\nendif()\n\nif(HAVE_XATTR)\n\ttarget_link_libraries(lighttpd attr)\nendif()\n\nif(CMAKE_C_COMPILER_ID MATCHES \"GNU\" OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=gnu99 -Wall -g -Wshadow -W -pedantic ${WARN_CFLAGS}\")\n\tset(CMAKE_C_FLAGS_RELEASE        \"${CMAKE_C_FLAGS_RELEASE}     -O2\")\n\tset(CMAKE_C_FLAGS_DEBUG          \"${CMAKE_C_FLAGS_DEBUG}       -O0\")\n\tset(CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_WITHDEBINFO} -O2\")\n\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${WARN_LDFLAGS}\")\n\tset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${WARN_LDFLAGS}\")\nendif()\n\nif((NOT APPLE) OR CMAKE_C_COMPILER_ID MATCHES \"GNU\")\n\tadd_target_properties(lighttpd LINK_FLAGS \"-Wl,-export-dynamic\")\nendif()\n\nset_target_properties(lighttpd PROPERTIES CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})\n\nif(WIN32)\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -DNVALGRIND\")\n\tadd_target_properties(lighttpd COMPILE_FLAGS \"-DLI_DECLARE_EXPORTS\")\n\ttarget_link_libraries(lighttpd ws2_32)\n\ttarget_link_libraries(mod_proxy ws2_32)\n\ttarget_link_libraries(mod_fcgi ws2_32)\n\ttarget_link_libraries(mod_scgi ws2_32)\n\ttarget_link_libraries(mod_ssi ws2_32)\n\n\tif(MINGW)\n\t\ttarget_link_libraries(lighttpd msvcr70)\n\t\tadd_target_properties(lighttpd LINK_FLAGS \"-Wl,-subsystem,console\")\n\tendif()\nendif()\n\nif(NOT BUILD_STATIC)\n\tif(HAVE_LIBDL)\n\t\ttarget_link_libraries(lighttpd dl)\n\tendif()\nendif()\n\nif(NOT ${CRYPTO_LIBRARY} EQUAL \"\")\n\tif(NOT WITH_WOLFSSL)\n\t\ttarget_link_libraries(lighttpd ssl)\n\tendif()\n\ttarget_link_libraries(lighttpd ${CRYPTO_LIBRARY})\n\tadd_and_install_library(mod_openssl \"mod_openssl.c\")\n\tif(NOT WITH_WOLFSSL)\n\t\tset(L_MOD_OPENSSL ${L_MOD_OPENSSL} ssl)\n\tendif()\n\tset(L_MOD_OPENSSL ${L_MOD_OPENSSL} ${CRYPTO_LIBRARY})\n\ttarget_link_libraries(mod_openssl ${L_MOD_OPENSSL})\n\ttarget_link_libraries(mod_auth ${CRYPTO_LIBRARY})\n\tset(L_MOD_AUTHN_FILE ${L_MOD_AUTHN_FILE} ${CRYPTO_LIBRARY})\n\ttarget_link_libraries(mod_authn_file ${L_MOD_AUTHN_FILE})\n\ttarget_link_libraries(mod_secdownload ${CRYPTO_LIBRARY})\n\ttarget_link_libraries(mod_wstunnel ${CRYPTO_LIBRARY})\nendif()\n\nif(WITH_LIBEV)\n\ttarget_link_libraries(lighttpd ${LIBEV_LDFLAGS})\n\tadd_target_properties(lighttpd COMPILE_FLAGS ${LIBEV_CFLAGS})\nendif()\n\nif(WITH_LIBUNWIND)\n\ttarget_link_libraries(lighttpd ${LIBUNWIND_LDFLAGS})\n\tadd_target_properties(lighttpd COMPILE_FLAGS ${LIBUNWIND_CFLAGS})\n\n\ttarget_link_libraries(test_array ${LIBUNWIND_LDFLAGS})\n\tadd_target_properties(test_array COMPILE_FLAGS ${LIBUNWIND_CFLAGS})\n\ttarget_link_libraries(test_buffer ${LIBUNWIND_LDFLAGS})\n\tadd_target_properties(test_buffer COMPILE_FLAGS ${LIBUNWIND_CFLAGS})\n\ttarget_link_libraries(test_burl ${LIBUNWIND_LDFLAGS})\n\tadd_target_properties(test_burl COMPILE_FLAGS ${LIBUNWIND_CFLAGS})\n\ttarget_link_libraries(test_base64 ${LIBUNWIND_LDFLAGS})\n\tadd_target_properties(test_base64 COMPILE_FLAGS ${LIBUNWIND_CFLAGS})\n\ttarget_link_libraries(test_configfile ${PCRE_LDFLAGS} ${LIBUNWIND_LDFLAGS})\n\tadd_target_properties(test_configfile COMPILE_FLAGS ${PCRE_CFLAGS} ${LIBUNWIND_CFLAGS})\n\ttarget_link_libraries(test_keyvalue ${PCRE_LDFLAGS} ${LIBUNWIND_LDFLAGS})\n\tadd_target_properties(test_keyvalue COMPILE_FLAGS ${PCRE_CFLAGS} ${LIBUNWIND_CFLAGS})\n\ttarget_link_libraries(test_mod_access ${PCRE_LDFLAGS} ${LIBUNWIND_LDFLAGS})\n\tadd_target_properties(test_mod_access COMPILE_FLAGS ${PCRE_CFLAGS} ${LIBUNWIND_CFLAGS})\n\ttarget_link_libraries(test_mod_evhost ${PCRE_LDFLAGS} ${LIBUNWIND_LDFLAGS})\n\tadd_target_properties(test_mod_evhost COMPILE_FLAGS ${PCRE_CFLAGS} ${LIBUNWIND_CFLAGS})\n\ttarget_link_libraries(test_mod_simple_vhost ${PCRE_LDFLAGS} ${LIBUNWIND_LDFLAGS})\n\tadd_target_properties(test_mod_simple_vhost COMPILE_FLAGS ${PCRE_CFLAGS} ${LIBUNWIND_CFLAGS})\n\ttarget_link_libraries(test_request ${LIBUNWIND_LDFLAGS})\n\tadd_target_properties(test_request COMPILE_FLAGS ${LIBUNWIND_CFLAGS})\nendif()\n\nif(NOT WIN32)\ninstall(TARGETS ${L_INSTALL_TARGETS}\n\tRUNTIME DESTINATION ${SBINDIR}\n\tLIBRARY DESTINATION ${LIGHTTPD_MODULES_DIR}\n\tARCHIVE DESTINATION ${LIGHTTPD_MODULES_DIR}/static)\nelse()\n## HACK to make win32 to install our libraries in desired directory..\ninstall(TARGETS lighttpd\n\tRUNTIME DESTINATION ${SBINDIR}\n\tARCHIVE DESTINATION lib/static)\nlist(REMOVE_ITEM L_INSTALL_TARGETS lighttpd)\ninstall(TARGETS ${L_INSTALL_TARGETS}\n\tRUNTIME DESTINATION ${SBINDIR}/lib\n\tLIBRARY DESTINATION lib\n\tARCHIVE DESTINATION lib/static)\nendif()\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\n# serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Add ABI-specific directories to the system library path.\n  sys_lib_dlsearch_path_spec=\"/lib64 /usr/lib64 /lib /usr/lib\"\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"$sys_lib_dlsearch_path_spec $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/m4/ltoptions.m4": "# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004-2005, 2007-2009, 2011-2015 Free Software\n#   Foundation, Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 8 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option '$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl 'shared' nor 'disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n\t\t   [_LT_ENABLE_FAST_INSTALL])\n  _LT_UNLESS_OPTIONS([LT_INIT], [aix-soname=aix aix-soname=both aix-soname=svr4],\n\t\t   [_LT_WITH_AIX_SONAME([aix])])\n  ])\n])# _LT_SET_OPTIONS\n\n\n## --------------------------------- ##\n## Macros to handle LT_INIT options. ##\n## --------------------------------- ##\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [1], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the 'shared' and\n# 'disable-shared' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the 'static' and\n# 'disable-static' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the 'fast-install'\n# and 'disable-fast-install' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_AIX_SONAME([DEFAULT])\n# ----------------------------------\n# implement the --with-aix-soname flag, and support the `aix-soname=aix'\n# and `aix-soname=both' and `aix-soname=svr4' LT_INIT options. DEFAULT\n# is either `aix', `both' or `svr4'.  If omitted, it defaults to `aix'.\nm4_define([_LT_WITH_AIX_SONAME],\n[m4_define([_LT_WITH_AIX_SONAME_DEFAULT], [m4_if($1, svr4, svr4, m4_if($1, both, both, aix))])dnl\nshared_archive_member_spec=\ncase $host,$enable_shared in\npower*-*-aix[[5-9]]*,yes)\n  AC_MSG_CHECKING([which variant of shared library versioning to provide])\n  AC_ARG_WITH([aix-soname],\n    [AS_HELP_STRING([--with-aix-soname=aix|svr4|both],\n      [shared library versioning (aka \"SONAME\") variant to provide on AIX, @<:@default=]_LT_WITH_AIX_SONAME_DEFAULT[@:>@.])],\n    [case $withval in\n    aix|svr4|both)\n      ;;\n    *)\n      AC_MSG_ERROR([Unknown argument to --with-aix-soname])\n      ;;\n    esac\n    lt_cv_with_aix_soname=$with_aix_soname],\n    [AC_CACHE_VAL([lt_cv_with_aix_soname],\n      [lt_cv_with_aix_soname=]_LT_WITH_AIX_SONAME_DEFAULT)\n    with_aix_soname=$lt_cv_with_aix_soname])\n  AC_MSG_RESULT([$with_aix_soname])\n  if test aix != \"$with_aix_soname\"; then\n    # For the AIX way of multilib, we name the shared archive member\n    # based on the bitwidth used, traditionally 'shr.o' or 'shr_64.o',\n    # and 'shr.imp' or 'shr_64.imp', respectively, for the Import File.\n    # Even when GNU compilers ignore OBJECT_MODE but need '-maix64' flag,\n    # the AIX toolchain works better with OBJECT_MODE set (default 32).\n    if test 64 = \"${OBJECT_MODE-32}\"; then\n      shared_archive_member_spec=shr_64\n    else\n      shared_archive_member_spec=shr\n    fi\n  fi\n  ;;\n*)\n  with_aix_soname=aix\n  ;;\nesac\n\n_LT_DECL([], [shared_archive_member_spec], [0],\n    [Shared archive member basename, for filename based shared library versioning on AIX])dnl\n])# _LT_WITH_AIX_SONAME\n\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=aix], [_LT_WITH_AIX_SONAME([aix])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=both], [_LT_WITH_AIX_SONAME([both])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=svr4], [_LT_WITH_AIX_SONAME([svr4])])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the 'pic-only' and 'no-pic'\n# LT_INIT options.\n# MODE is either 'yes' or 'no'.  If omitted, it defaults to 'both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic@<:@=PKGS@:>@],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for lt_pkg in $withval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [pic_mode=m4_default([$1], [default])])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n## ----------------- ##\n## LTDL_INIT Options ##\n## ----------------- ##\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n",
        "/tmp/vanessa/spack-stage/spack-stage-lighttpd-1.4.54-3ihnykrc33njftshgekekx3jchcgrigv/spack-src/doc/outdated/plugins.txt": "================\nPlugin Interface\n================\n\n------------\nModule: core\n------------\n\n:Author: Jan Kneschke\n:Date: $Date: 2004/08/01 07:01:29 $\n:Revision: $Revision: 1.1 $\n\n:abstract:\n  The plugin interface is an integral part of lighttpd which\n  provides a flexible way to add specific functionality to lighttpd.\n\n.. meta::\n  :keywords: lighttpd, plugins\n\n.. contents:: Table of Contents\n\nDescription\n===========\n\nPlugins allow you to enhance the functionality of lighttpd without\nchanging the core of the webserver. They can be loaded at startup time\nand can change virtually any aspect of the behaviour of the webserver.\n\nPlugin Entry Points\n-------------------\n\nlighttpd has 16 hooks which are used in different states of the\nexecution of the request:\n\nServerwide hooks\n````````````````\n\n:init_:\n  called when the plugin is loaded\n:cleanup_:\n  called when the plugin is unloaded\n:set_defaults_:\n  called when the configuration has to be processed\n:handle_trigger_:\n  called once a second\n:handle_sighup_:\n  called when the server received a SIGHUP\n\nConnectionwide hooks\n````````````````````\n\nMost of these hooks are called in ``http_response_prepare()`` after some\nfields in the connection structure are set.\n\n:handle_uri_raw_:\n  called after uri.path_raw, uri.authority and uri.scheme are set\n:handle_uri_clean_:\n  called after uri.path (a clean URI without .. and %20) is set\n:handle_docroot_:\n  called at the end of the logical path handle to get a docroot\n:handle_subrequest_start_:\n  called if the physical path is set up and checked\n:handle_subrequest_:\n  called at the end of ``http_response_prepare()``\n:handle_physical_path_:\n  called after the physical path is created and no other handler is\n  found for this request\n:handle_request_done_:\n  called when the request is done\n:handle_connection_close_:\n  called if the connection has to be closed\n:handle_joblist_:\n  called after the connection_state_engine is left again and plugin\n  internal handles have to be called\n:connection_reset_:\n  called if the connection structure has to be cleaned up\n\n\nPlugin Interface\n----------------\n\n\\*_plugin_init\n``````````````\n\nEvery plugin has a uniquely-named function which is called after the\nplugin is loaded. It is used to set up the ``plugin`` structure with\nsome useful data:\n\n- name of the plugin ``name``\n- all hooks\n\nThe field ``data`` and ``lib`` should not be touched in the init function.\n``lib`` is the library handler from dlopen and ``data`` will be the storage\nof the internal plugin data.\n\n:returns:\n  0 (not handled)\n\ninit\n````\n\nThe first real call of a plugin function is the init hook which is used\nto set up the internal plugin data. The internal plugin is assigned the\n``data`` field mentioned in the \\*_plugin_init description.\n\n:returns:\n  a pointer to the internal plugin data.\n\ncleanup\n```````\n\nThe cleanup hook is called just before the plugin is unloaded. It is meant\nto free all buffers allocated in ``init`` or somewhere else in the plugin\nwhich are still not freed and to close all handles which were opened and\nare not closed yet.\n\n:returns:\n  HANDLER_GO_ON if ok (not handled)\n\nset_defaults\n````````````\n\nset_defaults is your entry point into the configfile parsing. It should\npass a list of options to ``config_insert_values`` and check if\nthe plugin configuration is valid. If it is not valid yet, it should\nset useful defaults or return with HANDLER_ERROR and an error message.\n\n:returns:\n  HANDLER_GO_ON if ok\n\n  HANDLER_ERROR will terminate lighttpd\n\nconnection_reset\n````````````````\n\ncalled at the end of each request\n\n:returns:\n  HANDLER_GO_ON if ok\n\n  HANDLER_ERROR on error\n\nhandle_trigger\n``````````````\n\ncalled once a second\n\n:returns:\n  HANDLER_GO_ON if ok\n\n  HANDLER_ERROR on error\n\nhandle_sighup\n`````````````\n\ncalled if a SIGHUP is received (cycling logfiles, ...)\n\n:returns:\n  HANDLER_GO_ON if ok\n\n  HANDLER_ERROR on error\n\nhandle_uri_raw\n``````````````\n\ncalled after uri_raw is set\n\n:returns:\n  HANDLER_GO_ON if ok\n  HANDLER_FINISHED if the final output is prepared\n\n  HANDLER_ERROR on error\n\nhandle_uri_clean\n````````````````\n\ncalled after uri.path is set\n\n:returns:\n  HANDLER_GO_ON if ok\n  HANDLER_FINISHED if the final output is prepared\n\n  HANDLER_ERROR on error\n\nhandle_docroot\n``````````````\n\ncalled when a docroot is needed\n\n:returns:\n  HANDLER_GO_ON if ok\n  HANDLER_FINISHED if the final output is prepared\n\n  HANDLER_ERROR on error\n\nhandle_subrequest_start\n```````````````````````\n\ncalled after physical.path is set\n\n:returns:\n  HANDLER_GO_ON if ok\n  HANDLER_FINISHED if the final output is prepared\n\n  HANDLER_ERROR on error\n\nhandle_subrequest\n`````````````````\n\ncalled if subrequest_start requested a COMEBACK or a WAIT_FOR_EVENT\n\n:returns:\n  HANDLER_GO_ON if ok\n  HANDLER_FINISHED if the final output is prepared\n\n  HANDLER_ERROR on error\n\nhandle_physical_path\n````````````````````\n\ncalled after physical.path is set\n\n:returns:\n  HANDLER_GO_ON if ok\n  HANDLER_FINISHED if the final output is prepared\n\n  HANDLER_ERROR on error\n\n\nhandle_request_done\n```````````````````\n\ncalled at the end of the request (logging, statistics, ...)\n\n:returns:\n  HANDLER_GO_ON if ok\n\n  HANDLER_ERROR on error\n\nhandle_connection_close\n```````````````````````\n\ncalled if the connection is terminated\n\n:returns:\n  HANDLER_GO_ON if ok\n\n  HANDLER_ERROR on error\n\nhandle_joblist\n``````````````\n\ncalled if the state of the connection has changed\n\n:returns:\n  HANDLER_GO_ON if ok\n\n  HANDLER_ERROR on error\n\n\n"
    },
    "skipped": [],
    "total_files": 385
}