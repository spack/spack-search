{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-glusterfs-7.2-7bafu5wprzvvhnabtlwumqs3qxil5tgh/spack-src/configure.ac": "dnl  Copyright (c) 2006-2016 Red Hat, Inc. <http://www.redhat.com>\ndnl  This file is part of GlusterFS.\ndnl\ndnl  This file is licensed to you under your choice of the GNU Lesser\ndnl  General Public License, version 3 or any later version (LGPLv3 or\ndnl  later), or the GNU General Public License, version 2 (GPLv2), in all\ndnl  cases as published by the Free Software Foundation.\n\nAC_INIT([glusterfs],\n        [m4_esyscmd([build-aux/pkg-version --version])],\n        [gluster-users@gluster.org],,[https://github.com/gluster/glusterfs.git])\n\nAC_SUBST([PACKAGE_RELEASE],\n         [m4_esyscmd([build-aux/pkg-version --release])])\n\nAM_INIT_AUTOMAKE([tar-pax foreign])\n\n# Removes warnings when using automake 1.14 around (...but option 'subdir-objects' is disabled )\n#but libglusterfs fails to build with contrib (Then are not set up that way?)\n#AM_INIT_AUTOMAKE([subdir-objects])\n\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES(yes)])\n\nif make --help 2>&1 | grep -q no-print-directory; then\n   AM_MAKEFLAGS=\"$AM_MAKEFLAGS --no-print-directory\";\nfi\n\nAC_CONFIG_HEADERS([config.h site.h])\n\nAC_CONFIG_FILES([Makefile\n                libglusterfs/Makefile\n                libglusterfs/src/Makefile\n                geo-replication/src/peer_gsec_create\n                geo-replication/src/peer_mountbroker\n                geo-replication/src/peer_mountbroker.py\n                geo-replication/src/peer_georep-sshkey.py\n                extras/peer_add_secret_pub\n                geo-replication/syncdaemon/conf.py\n                geo-replication/gsyncd.conf\n                extras/snap_scheduler/conf.py\n                glusterfsd/Makefile\n                glusterfsd/src/Makefile\n                rpc/Makefile\n                rpc/rpc-lib/Makefile\n                rpc/rpc-lib/src/Makefile\n                rpc/rpc-transport/Makefile\n                rpc/rpc-transport/socket/Makefile\n                rpc/rpc-transport/socket/src/Makefile\n                rpc/rpc-transport/rdma/Makefile\n                rpc/rpc-transport/rdma/src/Makefile\n                rpc/xdr/Makefile\n                rpc/xdr/src/Makefile\n                rpc/xdr/gen/Makefile\n                xlators/Makefile\n                xlators/meta/Makefile\n                xlators/meta/src/Makefile\n                xlators/mount/Makefile\n                xlators/mount/fuse/Makefile\n                xlators/mount/fuse/src/Makefile\n                xlators/mount/fuse/utils/mount.glusterfs\n                xlators/mount/fuse/utils/mount_glusterfs\n                xlators/mount/fuse/utils/Makefile\n                xlators/storage/Makefile\n                xlators/storage/posix/Makefile\n                xlators/storage/posix/src/Makefile\n                xlators/cluster/Makefile\n                xlators/cluster/afr/Makefile\n                xlators/cluster/afr/src/Makefile\n                xlators/cluster/dht/Makefile\n                xlators/cluster/dht/src/Makefile\n                xlators/cluster/ec/Makefile\n                xlators/cluster/ec/src/Makefile\n                xlators/performance/Makefile\n                xlators/performance/write-behind/Makefile\n                xlators/performance/write-behind/src/Makefile\n                xlators/performance/read-ahead/Makefile\n                xlators/performance/read-ahead/src/Makefile\n                xlators/performance/readdir-ahead/Makefile\n                xlators/performance/readdir-ahead/src/Makefile\n                xlators/performance/io-threads/Makefile\n                xlators/performance/io-threads/src/Makefile\n                xlators/performance/io-cache/Makefile\n                xlators/performance/io-cache/src/Makefile\n                xlators/performance/quick-read/Makefile\n                xlators/performance/quick-read/src/Makefile\n                xlators/performance/open-behind/Makefile\n                xlators/performance/open-behind/src/Makefile\n                xlators/performance/md-cache/Makefile\n                xlators/performance/md-cache/src/Makefile\n                xlators/performance/nl-cache/Makefile\n                xlators/performance/nl-cache/src/Makefile\n                xlators/debug/Makefile\n                xlators/debug/sink/Makefile\n                xlators/debug/sink/src/Makefile\n                xlators/debug/trace/Makefile\n                xlators/debug/trace/src/Makefile\n                xlators/debug/error-gen/Makefile\n                xlators/debug/error-gen/src/Makefile\n                xlators/debug/delay-gen/Makefile\n                xlators/debug/delay-gen/src/Makefile\n                xlators/debug/io-stats/Makefile\n                xlators/debug/io-stats/src/Makefile\n                xlators/protocol/Makefile\n                xlators/protocol/auth/Makefile\n                xlators/protocol/auth/addr/Makefile\n                xlators/protocol/auth/addr/src/Makefile\n                xlators/protocol/auth/login/Makefile\n                xlators/protocol/auth/login/src/Makefile\n                xlators/protocol/client/Makefile\n                xlators/protocol/client/src/Makefile\n                xlators/protocol/server/Makefile\n                xlators/protocol/server/src/Makefile\n                xlators/features/Makefile\n                xlators/features/arbiter/Makefile\n                xlators/features/arbiter/src/Makefile\n                xlators/features/thin-arbiter/Makefile\n                xlators/features/thin-arbiter/src/Makefile\n                xlators/features/changelog/Makefile\n                xlators/features/changelog/src/Makefile\n                xlators/features/changelog/lib/Makefile\n                xlators/features/changelog/lib/src/Makefile\n                xlators/features/locks/Makefile\n                xlators/features/locks/src/Makefile\n                xlators/features/quota/Makefile\n                xlators/features/quota/src/Makefile\n                xlators/features/marker/Makefile\n                xlators/features/marker/src/Makefile\n                xlators/features/selinux/Makefile\n                xlators/features/selinux/src/Makefile\n                xlators/features/sdfs/Makefile\n                xlators/features/sdfs/src/Makefile\n                xlators/features/read-only/Makefile\n                xlators/features/read-only/src/Makefile\n                xlators/features/compress/Makefile\n                xlators/features/compress/src/Makefile\n                xlators/features/namespace/Makefile\n                xlators/features/namespace/src/Makefile\n                xlators/features/quiesce/Makefile\n                xlators/features/quiesce/src/Makefile\n                xlators/features/barrier/Makefile\n                xlators/features/barrier/src/Makefile\n                xlators/features/index/Makefile\n                xlators/features/index/src/Makefile\n                xlators/features/gfid-access/Makefile\n                xlators/features/gfid-access/src/Makefile\n                xlators/features/trash/Makefile\n                xlators/features/trash/src/Makefile\n                xlators/features/snapview-server/Makefile\n                xlators/features/snapview-server/src/Makefile\n                xlators/features/snapview-client/Makefile\n                xlators/features/snapview-client/src/Makefile\n                xlators/features/upcall/Makefile\n                xlators/features/upcall/src/Makefile\n                xlators/features/shard/Makefile\n                xlators/features/shard/src/Makefile\n                xlators/features/bit-rot/Makefile\n                xlators/features/bit-rot/src/Makefile\n                xlators/features/bit-rot/src/stub/Makefile\n                xlators/features/bit-rot/src/bitd/Makefile\n                xlators/features/leases/Makefile\n                xlators/features/leases/src/Makefile\n                xlators/features/cloudsync/Makefile\n                xlators/features/cloudsync/src/Makefile\n                xlators/features/utime/Makefile\n                xlators/features/utime/src/Makefile\n                xlators/features/cloudsync/src/cloudsync-plugins/Makefile\n                xlators/features/cloudsync/src/cloudsync-plugins/src/Makefile\n                xlators/features/cloudsync/src/cloudsync-plugins/src/cloudsyncs3/Makefile\n                xlators/features/cloudsync/src/cloudsync-plugins/src/cloudsyncs3/src/Makefile\n                xlators/features/cloudsync/src/cloudsync-plugins/src/cvlt/Makefile\n                xlators/features/cloudsync/src/cloudsync-plugins/src/cvlt/src/Makefile\n                xlators/playground/Makefile\n                xlators/playground/template/Makefile\n                xlators/playground/template/src/Makefile\n                xlators/system/Makefile\n                xlators/system/posix-acl/Makefile\n                xlators/system/posix-acl/src/Makefile\n                xlators/nfs/Makefile\n                xlators/nfs/server/Makefile\n                xlators/nfs/server/src/Makefile\n                xlators/mgmt/Makefile\n                xlators/mgmt/glusterd/Makefile\n                xlators/mgmt/glusterd/src/Makefile\n                cli/Makefile\n                cli/src/Makefile\n                doc/Makefile\n                extras/Makefile\n                extras/glusterd.vol\n                extras/cliutils/Makefile\n                extras/init.d/Makefile\n                extras/init.d/glusterd.plist\n                extras/init.d/glusterd-Debian\n                extras/init.d/glusterd-Redhat\n                extras/init.d/glusterd-FreeBSD\n                extras/init.d/glusterd-SuSE\n                extras/init.d/glustereventsd-Debian\n                extras/init.d/glustereventsd-Redhat\n                extras/init.d/glustereventsd-FreeBSD\n                extras/systemd/Makefile\n                extras/systemd/glusterd.service\n                extras/systemd/glustereventsd.service\n                extras/systemd/glusterfssharedstorage.service\n                extras/systemd/gluster-ta-volume.service\n                extras/run-gluster.tmpfiles\n                extras/benchmarking/Makefile\n                extras/hook-scripts/Makefile\n                extras/ocf/Makefile\n                extras/ocf/glusterd\n                extras/ocf/volume\n                extras/LinuxRPM/Makefile\n                extras/geo-rep/Makefile\n                extras/geo-rep/schedule_georep.py\n                extras/firewalld/Makefile\n                extras/hook-scripts/add-brick/Makefile\n                extras/hook-scripts/add-brick/pre/Makefile\n                extras/hook-scripts/add-brick/post/Makefile\n                extras/hook-scripts/create/Makefile\n                extras/hook-scripts/create/post/Makefile\n                extras/hook-scripts/delete/Makefile\n                extras/hook-scripts/delete/pre/Makefile\n                extras/hook-scripts/start/Makefile\n                extras/hook-scripts/start/post/Makefile\n                extras/hook-scripts/set/Makefile\n                extras/hook-scripts/set/post/Makefile\n                extras/hook-scripts/stop/Makefile\n                extras/hook-scripts/stop/pre/Makefile\n                extras/hook-scripts/reset/Makefile\n                extras/hook-scripts/reset/post/Makefile\n                extras/hook-scripts/reset/pre/Makefile\n                extras/python/Makefile\n                extras/snap_scheduler/Makefile\n                events/Makefile\n                events/src/Makefile\n                events/src/eventsapiconf.py\n                events/tools/Makefile\n                contrib/fuse-util/Makefile\n                contrib/umountd/Makefile\n                glusterfs-api.pc\n                libgfchangelog.pc\n                api/Makefile\n                api/src/Makefile\n                api/examples/Makefile\n                geo-replication/Makefile\n                geo-replication/src/Makefile\n                geo-replication/syncdaemon/Makefile\n                tools/Makefile\n                tools/gfind_missing_files/Makefile\n                heal/Makefile\n                heal/src/Makefile\n                glusterfs.spec\n                tools/glusterfind/src/tool.conf\n                tools/glusterfind/glusterfind\n                tools/glusterfind/Makefile\n                tools/glusterfind/src/Makefile\n                tools/setgfid2path/Makefile\n                tools/setgfid2path/src/Makefile])\n\nAC_CANONICAL_HOST\n\nAC_PROG_CC\nAC_DISABLE_STATIC\nAC_PROG_LIBTOOL\nAC_SUBST([shrext_cmds])\n\nAC_CHECK_PROG([RPCGEN], [rpcgen], [yes], [no])\n\nif test \"x$RPCGEN\" = \"xno\"; then\n   AC_MSG_ERROR([`rpcgen` not found, glusterfs needs `rpcgen` exiting..])\nfi\n\n# Initialize CFLAGS before usage\nAC_ARG_ENABLE([debug],\n              AC_HELP_STRING([--enable-debug],\n                             [Enable debug build options.]))\nif test \"x$enable_debug\" = \"xyes\"; then\n        BUILD_DEBUG=yes\n        GF_CFLAGS=\"${GF_CFLAGS} -g -rdynamic -O0 -DDEBUG\"\nelse\n        BUILD_DEBUG=no\nfi\n\nAC_ARG_ENABLE([asan],\n              AC_HELP_STRING([--enable-asan],\n                             [Enable Address Sanitizer support]))\nif test \"x$enable_asan\" = \"xyes\"; then\n        BUILD_ASAN=yes\n        AC_CHECK_LIB([asan], [__asan_report_error], ,\n                [AC_MSG_ERROR([libasan.so not found, this is required for --enable-asan])])\n        GF_CFLAGS=\"${GF_CFLAGS} -O1 -g -fsanitize=address -fno-omit-frame-pointer\"\n        dnl -lasan always need to be the first library, otherwise libxml complains\n        GF_LDFLAGS=\"-lasan ${GF_LDFLAGS}\"\nelse\n        BUILD_ASAN=no\nfi\n\nAC_ARG_ENABLE([atan],\n              AC_HELP_STRING([--enable-tsan],\n                             [Enable ThreadSanitizer support]))\nif test \"x$enable_tsan\" = \"xyes\"; then\n        BUILD_TSAN=yes\n        AC_CHECK_LIB([tsan], [__tsan_init], ,\n                [AC_MSG_ERROR([libtsan.so not found, this is required for --enable-tsan])])\n        GF_CFLAGS=\"${GF_CFLAGS} -O2 -g -fsanitize=thread\"\n        GF_LDFLAGS=\"${GF_LDFLAGS} -ltsan\"\nelse\n        BUILD_TSAN=no\nfi\n\n\ndnl When possible, prefer libtirpc over glibc rpc.\ndnl\ndnl On newer linux with only libtirpc, use libtirpc. (Specifying\ndnl --without-libtirpc is an error.)\ndnl\ndnl on older linux with glibc rpc and WITH libtirpc, use libtirpc\ndnl by default except when configured with --without-libtirpc.\ndnl\ndnl on old linux with glibc rpc and WITHOUT libtirpc, default to\ndnl use glibc rpc.\ndnl\nAC_ARG_WITH([libtirpc],\n        [AC_HELP_STRING([--without-libtirpc], [Use legacy glibc RPC.])],\n        [with_libtirpc=\"no\"], [with_libtirpc=\"yes\"])\n\ndnl ipv6-default is off by default\ndnl\ndnl ipv6-default requires libtirpc. (glibc rpc does not support IPv6.)\ndnl ipv6-default can only be enabled if libtipc is enabled.\ndnl\nAC_ARG_WITH([ipv6-default],\n        AC_HELP_STRING([--with-ipv6-default], [Set IPv6 as default.]),\n        [with_ipv6_default=${with_libtirpc}], [with_ipv6_default=\"no\"])\n\nAC_CHECK_FILE([/etc/centos-release])\nif test \"x$ac_cv_file__etc_centos_release\" = \"xyes\"; then\n        if grep \"release 6\" /etc/centos-release; then\n                with_ipv6_default=\"no\"\n        fi\nfi\n\ndnl On some distributions '-ldl' isn't automatically added to LIBS\nAC_CHECK_LIB([dl], [dlopen], [LIB_DL=-ldl])\nAC_SUBST(LIB_DL)\n\nAC_ARG_ENABLE([privport_tracking],\n              AC_HELP_STRING([--disable-privport_tracking],\n                             [Disable internal tracking of privileged ports.]))\nTRACK_PRIVPORTS=\"yes\"\nif test x\"$enable_privport_tracking\" = x\"no\"; then\n        TRACK_PRIVPORTS=\"no\"\n        AC_DEFINE(GF_DISABLE_PRIVPORT_TRACKING, 1,\n                  [Disable internal tracking of privileged ports.])\nfi\n\ncase $host_os in\n  darwin*)\n    if ! test \"`/usr/bin/sw_vers | grep ProductVersion: | cut -f 2 | cut -d. -f2`\" -ge 7; then\n       AC_MSG_ERROR([You need at least OS X 10.7 (Lion) to build Glusterfs])\n    fi\n    # OSX version lesser than 9 has llvm/clang optimization issues which leads to various segfaults\n    if test \"`/usr/bin/sw_vers | grep ProductVersion: | cut -f 2 | cut -d. -f2`\" -lt 9; then\n       GF_CFLAGS=\"${GF_CFLAGS} -g -O0 -DDEBUG\"\n    fi\n    ;;\nesac\n\n# --enable-valgrind prevents calling dlclose(), this leaks memory\nAC_ARG_ENABLE([valgrind],\n              AC_HELP_STRING([--enable-valgrind],\n                             [Enable valgrind for resource leak debugging.]))\nif test \"x$enable_valgrind\" = \"xyes\"; then\n        AC_DEFINE(RUN_WITH_VALGRIND, 1, [define if all processes should run under valgrind])\nfi\n\n\nAC_ARG_WITH([previous-options],\n        [AS_HELP_STRING([--with-previous-options],\n                        [read config.status for configure options])\n        ],\n        [ if test -r ./config.status && \\\n             args=$(grep 'ac_cs_config=' config.status | \\\n                    sed -e 's/.*\"\\(.*\\)\".*/\\1/' -e \"s/'//g\" -e \"s/--with-previous-options//g\") ; then\n            echo \"###\"\n            echo \"### Rerunning as '$0 $args'\"\n            echo \"###\"\n            exec $0 $args\n          fi\n        ])\n\nAC_ARG_WITH(pkgconfigdir,\n            [  --with-pkgconfigdir=DIR      pkgconfig file in DIR @<:@LIBDIR/pkgconfig@:>@],\n            [pkgconfigdir=$withval],\n            [pkgconfigdir='${libdir}/pkgconfig'])\nAC_SUBST(pkgconfigdir)\n\nAC_ARG_WITH(mountutildir,\n            [  --with-mountutildir=DIR mount helper utility in DIR @<:@/sbin@:>@],\n            [mountutildir=$withval],\n            [mountutildir='/sbin'])\nAC_SUBST(mountutildir)\n\nAC_ARG_WITH(systemddir,\n            [  --with-systemddir=DIR systemd service files in DIR @<:@PREFIX/lib/systemd/system@:>@],\n            [systemddir=$withval],\n            [systemddir='${prefix}/lib/systemd/system'])\nAC_SUBST(systemddir)\nAM_CONDITIONAL([USE_SYSTEMD], test [ -d '/usr/lib/systemd/system' ])\n\nAC_ARG_WITH(initdir,\n            [  --with-initdir=DIR init.d scripts in DIR @<:@/etc/init.d@:>@],\n            [initdir=$withval],\n            [initdir='/etc/init.d'])\nAC_SUBST(initdir)\n\nAC_ARG_WITH(launchddir,\n            [  --with-launchddir=DIR launchd services in DIR @<:@/Library/LaunchDaemons@:>@],\n            [launchddir=$withval],\n            [launchddir='/Library/LaunchDaemons'])\nAC_SUBST(launchddir)\n\nAC_ARG_WITH(tmpfilesdir,\n            AC_HELP_STRING([--with-tmpfilesdir=DIR],\n                           [tmpfiles config in DIR, disabled by default]),\n            [tmpfilesdir=$withval],\n            [tmpfilesdir=''])\nAC_SUBST(tmpfilesdir)\n\nAC_ARG_WITH([ocf],\n            [AS_HELP_STRING([--without-ocf], [build OCF-compliant cluster resource agents])],\n            ,\n            [OCF_SUBDIR='ocf'],\n            )\nAC_SUBST(OCF_SUBDIR)\n\nAC_ARG_WITH([server],\n            [AS_HELP_STRING([--without-server], [do not build server components])],\n            [with_server='no'],\n            [with_server='yes'],\n            )\nAM_CONDITIONAL([WITH_SERVER], [test x$with_server = xyes])\n\n# LEX needs a check\nAC_PROG_LEX\nif test  \"x${LEX}\" != \"xflex\" -a \"x${FLEX}\" != \"xlex\"; then\n   AC_MSG_ERROR([Flex or lex required to build glusterfs.])\nfi\n\ndnl\ndnl Word sizes...\ndnl\nAC_CHECK_SIZEOF(short)\nAC_CHECK_SIZEOF(int)\nAC_CHECK_SIZEOF(long)\nAC_CHECK_SIZEOF(long long)\nSIZEOF_SHORT=$ac_cv_sizeof_short\nSIZEOF_INT=$ac_cv_sizeof_int\nSIZEOF_LONG=$ac_cv_sizeof_long\nSIZEOF_LONG_LONG=$ac_cv_sizeof_long_long\nAC_SUBST(SIZEOF_SHORT)\nAC_SUBST(SIZEOF_INT)\nAC_SUBST(SIZEOF_LONG)\nAC_SUBST(SIZEOF_LONG_LONG)\n\n# YACC needs a check\nAC_PROG_YACC\nif test \"x${YACC}\" = \"xbyacc\" -o \"x${YACC}\" = \"xyacc\" -o \"x${YACC}\" = \"x\"; then\n   AC_MSG_ERROR([GNU Bison required to build glusterfs.])\nfi\n\nAC_CHECK_TOOL([LD],[ld])\n\nAC_CHECK_LIB([crypto], [MD5], , AC_MSG_ERROR([OpenSSL crypto library is required to build glusterfs]))\n\nAC_CHECK_LIB([pthread], [pthread_mutex_init], , AC_MSG_ERROR([Posix threads library is required to build glusterfs]))\n\nAC_CHECK_FUNC([dlopen], [has_dlopen=yes], AC_CHECK_LIB([dl], [dlopen], , AC_MSG_ERROR([Dynamic linking library required to build glusterfs])))\n\nAC_CHECK_LIB([readline], [rl_do_undo], [RL_UNDO=\"yes\"], [RL_UNDO=\"no\"])\n\nAC_CHECK_LIB([intl], [gettext])\n\nAC_CHECK_HEADERS([sys/xattr.h])\n\nAC_CHECK_HEADERS([sys/ioctl.h], AC_DEFINE(HAVE_IOCTL_IN_SYS_IOCTL_H, 1, [have sys/ioctl.h]))\n\nAC_CHECK_HEADERS([sys/extattr.h])\n\nAC_CHECK_HEADERS([openssl/dh.h])\n\nAC_CHECK_HEADERS([openssl/ecdh.h])\n\nAC_CHECK_LIB([ssl], [SSL_CTX_get0_param], [AC_DEFINE([HAVE_SSL_CTX_GET0_PARAM], [1], [define if found OpenSSL SSL_CTX_get0_param])])\n\ndnl Math library\nAC_CHECK_LIB([m], [pow], [MATH_LIB='-lm'], [MATH_LIB=''])\nAC_SUBST(MATH_LIB)\n\ndnl depend on libuuid.so\nPKG_CHECK_MODULES([UUID], [uuid],\n        [have_uuid=yes\n         AC_DEFINE(HAVE_LIBUUID, 1, [have libuuid.so])\n         PKGCONFIG_UUID=uuid],\n        [have_uuid=no])\nAM_CONDITIONAL([HAVE_LIBUUID], [test x$have_uuid = xyes])\n\ndnl older version of libuuid (from e2fsprogs) require including uuid/uuid.h\nsaved_CFLAGS=${CFLAGS}\nCFLAGS=\"${CFLAGS} ${UUID_CFLAGS}\"\nAC_CHECK_HEADER([uuid.h], [], [AC_CHECK_HEADER([uuid/uuid.h])],\n                [[#if HAVE_UUID_H\n                  #include <uuid.h>\n                  #endif\n                ]])\nCFLAGS=${saved_CFLAGS}\nif test \"x$ac_cv_header_uuid_uuid_h\" = \"xyes\"; then\n    UUID_CFLAGS=\"${UUID_CFLAGS} -I$(pkg-config --variable=includedir uuid)/uuid\"\n    have_uuid=yes\nfi\n\nif test \"x$have_uuid\" != \"xyes\"; then\n    case $host_os in\n        *freebsd*)\n            AC_MSG_ERROR([e2fsprogs-libuuid is required to build glusterfs])\n            ;;\n        linux*)\n            AC_MSG_ERROR([libuuid is required to build glusterfs])\n            ;;\n        *)\n            AC_MSG_ERROR([a Linux compatible libuuid is required to build glusterfs])\n            ;;\n    esac\nfi\n\ndnl libglusterfs needs uuid.h, practically everything depends on it\nGF_CFLAGS=\"${GF_CFLAGS} ${UUID_CFLAGS}\"\ndnl PKGCONFIG_UUID is used for the dependency in *.pc.in files\nAC_SUBST(PKGCONFIG_UUID)\n\ndnl NetBSD does not support POSIX ACLs :-(\ncase $host_os in\n     *netbsd* | darwin*)\n        AC_MSG_WARN([platform does not support POSIX ACLs... disabling them])\n        ACL_LIBS=''\n        USE_POSIX_ACLS='0'\n        BUILD_POSIX_ACLS='no'\n        ;;\n     *)\n        AC_CHECK_HEADERS([sys/acl.h], ,\n                         AC_MSG_ERROR([Support for POSIX ACLs is required]))\n        USE_POSIX_ACLS='1'\n        BUILD_POSIX_ACLS='yes'\n        case $host_os in\n             linux*)\n                ACL_LIBS='-lacl'\n                ;;\n             solaris*)\n                ACL_LIBS='-lsec'\n                ;;\n             *freebsd*)\n                ACL_LIBS='-lc'\n                ;;\n             darwin*)\n                ACL_LIBS='-lc'\n                ;;\n        esac\n        if test \"x${ACL_LIBS}\" = \"x-lacl\"; then\n          AC_CHECK_HEADERS([acl/libacl.h], , AC_MSG_ERROR([libacl is required for building on ${host_os}]))\n        fi\n        ;;\nesac\nAC_SUBST(ACL_LIBS)\nAC_SUBST(USE_POSIX_ACLS)\n\n# libglusterfs/checksum\nAC_CHECK_HEADERS([openssl/md5.h])\nAC_CHECK_LIB([z], [adler32], [ZLIB_LIBS=\"-lz\"], AC_MSG_ERROR([zlib is required to build glusterfs]))\nAC_SUBST(ZLIB_LIBS)\n\nAC_CHECK_HEADERS([linux/falloc.h])\n\nAC_CHECK_HEADERS([linux/oom.h], AC_DEFINE(HAVE_LINUX_OOM_H, 1, [have linux/oom.h]))\n\ndnl Mac OS X does not have spinlocks\nAC_CHECK_FUNC([pthread_spin_init], [have_spinlock=yes])\nif test \"x${have_spinlock}\" = \"xyes\"; then\n   AC_DEFINE(HAVE_SPINLOCK, 1, [define if found spinlock])\nfi\nAC_SUBST(HAVE_SPINLOCK)\n\ndnl some os may not have GNU defined strnlen function\nAC_CHECK_FUNC([strnlen], [have_strnlen=yes])\nif test \"x${have_strnlen}\" = \"xyes\"; then\n   AC_DEFINE(HAVE_STRNLEN, 1, [define if found strnlen])\nfi\nAC_SUBST(HAVE_STRNLEN)\n\n\nAC_CHECK_FUNC([setfsuid], [have_setfsuid=yes])\nAC_CHECK_FUNC([setfsgid], [have_setfsgid=yes])\n\nif test \"x${have_setfsuid}\" = \"xyes\" -a \"x${have_setfsgid}\" = \"xyes\"; then\n  AC_DEFINE(HAVE_SET_FSID, 1, [define if found setfsuid setfsgid])\nfi\n\ndnl test umount2 function\nAC_CHECK_FUNC([umount2], [have_umount2=yes])\n\nif test \"x${have_umount2}\" = \"xyes\"; then\n   AC_DEFINE(HAVE_UMOUNT2, 1, [define if found umount2])\nfi\n\ndnl Check Python Availability\nhave_python=no\ndnl if the user has not specified a python, pick one\nif test -z \"${PYTHON}\"; then\n  case $host_os in\n    freebsd*)\n      if test -x /usr/local/bin/python3; then\n        PYTHON=/usr/local/bin/python3\n      else\n        PYTHON=/usr/local/bin/python2\n      fi\n      ;;\n    *)\n      if test -x /usr/bin/python3; then\n        PYTHON=/usr/bin/python3\n      else\n        PYTHON=/usr/bin/python2\n      fi\n      ;;\n  esac\nfi\nAM_PATH_PYTHON([2.6],,[:])\nif test -n \"${PYTHON}\"; then\n   have_python=yes\nfi\nAM_CONDITIONAL(HAVE_PYTHON, test \"x$have_python\" = \"xyes\")\n\ndnl Use pkg-config to get runtime search path missing from ${PYTHON}-config\ndnl Just do \"true\" on failure so that configure does not bail out\ndnl Note: python 2.6's devel pkg (e.g. in CentOS/RHEL 6) does not have\ndnl pkg-config files, so this work-around instead\nif test \"x${PYTHON_VERSION}\" = \"x2.6\"; then\n  PYTHON_CFLAGS=$(python-config --includes)\n  PYTHON_LIBS=$(python-config --libs)\nelse\n  PKG_CHECK_MODULES([PYTHON], \"python-${PYTHON_VERSION}\",,true)\nfi\n\nPYTHON_CFLAGS=$(echo ${PYTHON_CFLAGS} | sed -e 's|-I|-isystem |')\n\nBUILD_PYTHON_SITE_PACKAGES=${pythondir}\nAC_SUBST(BUILD_PYTHON_SITE_PACKAGES)\n\n# Eval two times to expand fully. First eval replaces $exec_prefix into $prefix\n# Second eval will expand $prefix\nbuild_python_site_packages_temp=\"${pythondir}\"\neval build_python_site_packages_temp=\\\"${build_python_site_packages_temp}\\\"\neval build_python_site_packages_temp=\\\"${build_python_site_packages_temp}\\\"\nBUILD_PYTHON_SITE_PACKAGES_EXPANDED=${build_python_site_packages_temp}\nAC_SUBST(BUILD_PYTHON_SITE_PACKAGES_EXPANDED)\n\n# FUSE section\nAC_ARG_ENABLE([fuse-client],\n              AC_HELP_STRING([--disable-fuse-client],\n                             [Do not build the fuse client. NOTE: you cannot mount glusterfs without the client]))\n\nBUILD_FUSE_CLIENT=no\nif test \"x$enable_fuse_client\" != \"xno\"; then\n   FUSE_CLIENT_SUBDIR=fuse\n   BUILD_FUSE_CLIENT=\"yes\"\nfi\n\nAC_SUBST(FUSE_CLIENT_SUBDIR)\n# end FUSE section\n\n\nAC_CHECK_LIB([ssl], TLS_method, [HAVE_OPENSSL_1_1=\"yes\"], [HAVE_OPENSSL_1_1=\"no\"])\nif test \"x$HAVE_OPENSSL_1_1\" = \"xyes\"; then\n    AC_DEFINE([HAVE_TLS_METHOD], [1], [Using OpenSSL-1.1 TLS_method])\nelse\n    AC_CHECK_LIB([ssl], TLSv1_2_method, [AC_DEFINE([HAVE_TLSV1_2_METHOD], [1], [Using OpenSSL-1.0 TLSv1_2_method])])\nfi\n\n\n# FUSERMOUNT section\nAC_ARG_ENABLE([fusermount],\n              AC_HELP_STRING([--disable-fusermount],\n                             [Use system's fusermount]))\n\nBUILD_FUSERMOUNT=\"yes\"\nif test \"x$enable_fusermount\" = \"xno\"; then\n   BUILD_FUSERMOUNT=\"no\"\nelse\n   AC_DEFINE(GF_FUSERMOUNT, 1, [Use our own fusermount])\n   FUSERMOUNT_SUBDIR=\"contrib/fuse-util\"\nfi\n\nAC_SUBST(FUSERMOUNT_SUBDIR)\n#end FUSERMOUNT section\n\n# EPOLL section\nAC_ARG_ENABLE([epoll],\n              AC_HELP_STRING([--disable-epoll],\n                             [Use poll instead of epoll.]))\n\nBUILD_EPOLL=no\nif test \"x$enable_epoll\" != \"xno\"; then\n   AC_CHECK_HEADERS([sys/epoll.h],\n                    [BUILD_EPOLL=yes],\n                    [BUILD_EPOLL=no])\nfi\n# end EPOLL section\n\n\n# IBVERBS section\nAC_ARG_ENABLE([ibverbs],\n              AC_HELP_STRING([--disable-ibverbs],\n                             [Do not build the ibverbs transport]))\n\nif test \"x$enable_ibverbs\" != \"xno\"; then\n  AC_CHECK_LIB([ibverbs],\n               [ibv_get_device_list],\n               [HAVE_LIBIBVERBS=\"yes\"],\n               [HAVE_LIBIBVERBS=\"no\"])\n  AC_CHECK_LIB([rdmacm], [rdma_create_id], [HAVE_RDMACM=\"yes\"], [HAVE_RDMACM=\"no\"])\n  if test \"x$HAVE_RDMACM\" = \"xyes\" ; then\n    AC_CHECK_DECLS(\n                  [RDMA_OPTION_ID_REUSEADDR],\n                  [],\n                  [AC_ERROR([Need at least version 1.0.15 of librdmacm])],\n                  [[#include <rdma/rdma_cma.h>]])\n  fi\nfi\n\nif test \"x$enable_ibverbs\" = \"xyes\"; then\n   if test \"x$HAVE_LIBIBVERBS\" = \"xno\"; then\n      echo \"ibverbs-transport requested, but libibverbs is not present.\"\n      exit 1\n   fi\n\n   if test \"x$HAVE_RDMACM\" = \"xno\"; then\n      echo \"ibverbs-transport requested, but librdmacm is not present.\"\n      exit 1\n   fi\nfi\n\nBUILD_RDMA=no\nBUILD_IBVERBS=no\nif test \"x$enable_ibverbs\" != \"xno\" -a \"x$HAVE_LIBIBVERBS\" = \"xyes\" -a \"x$HAVE_RDMACM\" = \"xyes\"; then\n  IBVERBS_SUBDIR=ib-verbs\n  BUILD_IBVERBS=yes\n  RDMA_SUBDIR=rdma\n  BUILD_RDMA=yes\nfi\n\nAC_SUBST(IBVERBS_SUBDIR)\nAC_SUBST(RDMA_SUBDIR)\n# end IBVERBS section\n\n\n# SYNCDAEMON section\nAC_ARG_ENABLE([georeplication],\n              AC_HELP_STRING([--disable-georeplication],\n                             [Do not install georeplication components]))\n\nBUILD_SYNCDAEMON=no\ncase $host_os in\n     linux*)\n#do nothing\n       ;;\n     netbsd*)\n#do nothing\n       ;;\n     *)\n#disabling geo replication for non-linux platforms\n        enable_georeplication=no\n        ;;\nesac\nSYNCDAEMON_COMPILE=0\nif test \"x${with_server}\" = \"xyes\" -a \"x${enable_georeplication}\" != \"xno\"; then\n  if test \"x${have_python}\" = \"xno\" ; then\n    AC_MSG_ERROR([only python 2 and 3 are supported])\n  else\n    SYNCDAEMON_SUBDIR=geo-replication\n    SYNCDAEMON_COMPILE=1\n\n    BUILD_SYNCDAEMON=\"yes\"\n    AC_MSG_CHECKING([if python has ctypes support...])\n    if \"${PYTHON}\" -c 'import ctypes' 2>/dev/null; then\n      AC_MSG_RESULT(\"yes\")\n    else\n      AC_MSG_ERROR([python does not have ctypes support])\n    fi\n  fi\nfi\nAC_SUBST(SYNCDAEMON_COMPILE)\nAC_SUBST(SYNCDAEMON_SUBDIR)\n# end SYNCDAEMON section\n\n# only install scripts from extras/geo-rep when enabled\nif test \"x${with_server}\" = \"xyes\" -a \"x$enable_georeplication\" != \"xno\"; then\n  GEOREP_EXTRAS_SUBDIR=geo-rep\nfi\nAC_SUBST(GEOREP_EXTRAS_SUBDIR)\nAM_CONDITIONAL(USE_GEOREP, test \"x$enable_georeplication\" != \"xno\")\n\n# Events section\nAC_ARG_ENABLE([events],\n              AC_HELP_STRING([--disable-events],\n                             [Do not install Events components]))\n\nBUILD_EVENTS=no\nEVENTS_ENABLED=0\nEVENTS_SUBDIR=\nif test \"x$enable_events\" != \"xno\"; then\n  EVENTS_SUBDIR=events\n  EVENTS_ENABLED=1\n\n  BUILD_EVENTS=\"yes\"\n\n  if test \"x${have_python}\" = \"xno\"; then\n     if test \"x${enable_events}\" = \"xyes\"; then\n        AC_MSG_ERROR([python 2 or 3 required. exiting.])\n     fi\n     AC_MSG_WARN([python not found, disabling events])\n     EVENTS_SUBDIR=\n     EVENTS_ENABLED=0\n     BUILD_EVENTS=\"no\"\n  else\n    AC_DEFINE(USE_EVENTS, 1, [define if events enabled])\n  fi\nfi\nAC_SUBST(EVENTS_ENABLED)\nAC_SUBST(EVENTS_SUBDIR)\nAM_CONDITIONAL([BUILD_EVENTS], [test \"x${BUILD_EVENTS}\" = \"xyes\"])\n# end Events section\n\n# CDC xlator - check if libz is present if so enable HAVE_LIB_Z\nBUILD_CDC=yes\nPKG_CHECK_MODULES([ZLIB], [zlib >= 1.2.0],,\n                  [AC_CHECK_LIB([z], [deflate], [ZLIB_LIBS=\"-lz\"],\n                                [BUILD_CDC=no])])\necho -n \"features requiring zlib enabled: \"\nif test \"x$BUILD_CDC\" = \"xyes\" ; then\n  echo \"yes\"\n  AC_DEFINE(HAVE_LIB_Z, 1, [define if zlib is present])\nelse\n  echo \"no\"\nfi\nAC_SUBST(ZLIB_CFLAGS)\nAC_SUBST(ZLIB_LIBS)\n# end CDC xlator secion\n\n#start firewalld section\nBUILD_FIREWALLD=\"no\"\nAC_ARG_ENABLE([firewalld],\n              AC_HELP_STRING([--enable-firewalld],\n                             [enable installation configuration for firewalld]),\n              [BUILD_FIREWALLD=\"${enableval}\"], [BUILD_FIREWALLD=\"no\"])\n\nif test \"x${with_server}\" = \"xyes\" -a \"x${BUILD_FIREWALLD}\" = \"xyes\"; then\n        if !(test -d /usr/lib/firewalld/services 1>/dev/null 2>&1) ; then\n                BUILD_FIREWALLD=\"no (firewalld not installed)\"\n        fi\nfi\nAM_CONDITIONAL([USE_FIREWALLD],test [\"x${BUILD_FIREWALLD}\" =  \"xyes\"])\n\n#endof firewald section\n\n# xml-output\nAC_ARG_ENABLE([xml-output],\n              AC_HELP_STRING([--disable-xml-output],\n                             [Disable the xml output]))\nBUILD_XML_OUTPUT=\"yes\"\nif test \"x$enable_xml_output\" != \"xno\"; then\n    PKG_CHECK_MODULES([XML], [libxml-2.0], [], [no_xml=\"yes\"])\n    if test \"x${no_xml}\" = \"x\"; then\n        AC_DEFINE([HAVE_LIB_XML], [1], [Define to 1 if using libxml2.])\n    else\n        if test \"x$enable_georeplication\" != \"xno\"; then\n           AC_MSG_ERROR([libxml2 devel libraries not found])\n        else\n           AC_MSG_WARN([libxml2 devel libraries not found disabling XML support])\n           BUILD_XML_OUTPUT=\"no\"\n        fi\n\n    fi\nelse\n    if test \"x$enable_georeplication\" != \"xno\"; then\n       AC_MSG_ERROR([geo-replication requires xml output])\n    fi\n    BUILD_XML_OUTPUT=\"no\"\nfi\n# end of xml-output\n\ndnl cloudsync section\nBUILD_CLOUDSYNC=\"no\"\nAC_CHECK_LIB([curl], [curl_easy_setopt], [LIBCURL=\"-lcurl\"])\nif test -n \"$LIBCURL\";then\n        HAVE_LIBCURL=\"yes\"\nfi\nAC_CHECK_HEADERS([openssl/hmac.h openssl/evp.h openssl/bio.h openssl/buffer.h], [HAVE_OPENSSL=\"yes\"])\nif test \"x$HAVE_LIBCURL\" = \"xyes\" -a \"x$HAVE_OPENSSL\" = \"xyes\";then\n   HAVE_AMAZONS3=\"yes\"\nfi\nAM_CONDITIONAL([BUILD_AMAZONS3_PLUGIN], [test \"x$HAVE_AMAZONS3\" = \"xyes\"])\nif test \"x$HAVE_AMAZONS3\" = \"xyes\";then\n   BUILD_CLOUDSYNC=\"yes\"\nfi\nBUILD_CVLT_PLUGIN=\"no\"\ncase $host_os in\n#enable cvlt plugin only for linux platforms\n     linux*)\n       BUILD_CVLT_PLUGIN=\"yes\"\n       BUILD_CLOUDSYNC=\"yes\"\n       ;;\n     *)\n       ;;\nesac\nAM_CONDITIONAL([BUILD_CVLT_PLUGIN], [test \"x$BUILD_CVLT_PLUGIN\" = \"xyes\"])\nAM_CONDITIONAL([BUILD_CLOUDSYNC], [test \"x$BUILD_CLOUDSYNC\" = \"xyes\"])\ndnl end cloudsync section\n\ndnl SELinux feature enablement\ncase $host_os in\n  linux*)\n    AC_ARG_ENABLE([selinux],\n                  AC_HELP_STRING([--disable-selinux],\n                                 [Disable SELinux features]),\n                  [USE_SELINUX=\"${enableval}\"], [USE_SELINUX=\"yes\"])\n    ;;\n  *)\n    USE_SELINUX=no\n    ;;\nesac\nAM_CONDITIONAL(USE_SELINUX, test \"x${USE_SELINUX}\" = \"xyes\")\ndnl end of SELinux feature enablement\n\nAC_CHECK_HEADERS([execinfo.h], [have_backtrace=yes])\nif test \"x${have_backtrace}\" = \"xyes\"; then\n   AC_DEFINE(HAVE_BACKTRACE, 1, [define if found backtrace])\nfi\nAC_SUBST(HAVE_BACKTRACE)\n\nif test \"x${have_backtrace}\" != \"xyes\"; then\nAC_TRY_COMPILE([#include <math.h>], [double x=0.0; x=ceil(0.0);],\n   [],\n   AC_MSG_ERROR([need math library for libexecinfo]))\nfi\n\ndnl glusterfs prints memory usage to stderr by sending it SIGUSR1\nAC_CHECK_FUNC([malloc_stats], [have_malloc_stats=yes])\nif test \"x${have_malloc_stats}\" = \"xyes\"; then\n   AC_DEFINE(HAVE_MALLOC_STATS, 1, [define if found malloc_stats])\nfi\nAC_SUBST(HAVE_MALLOC_STATS)\n\ndnl Linux, Solaris, Cygwin\nAC_CHECK_MEMBERS([struct stat.st_atim.tv_nsec])\ndnl FreeBSD, NetBSD\nAC_CHECK_MEMBERS([struct stat.st_atimespec.tv_nsec])\ncase $host_os in\n        *netbsd*)\n        GF_CFLAGS=\"${GF_CFLAGS} -D_INCOMPLETE_XOPEN_C063 -DCONFIG_MACHINE_BSWAP_H\"\n        ;;\nesac\nAC_CHECK_FUNC([linkat], [have_linkat=yes])\nif test \"x${have_linkat}\" = \"xyes\"; then\n   AC_DEFINE(HAVE_LINKAT, 1, [define if found linkat])\nfi\nAC_SUBST(HAVE_LINKAT)\n\ndnl check for Monotonic clock\nAC_CHECK_LIB([rt], [clock_gettime], ,\n             AC_MSG_WARN([System doesn't have monotonic clock using contrib]))\n\ndnl check for argp, FreeBSD has the header in /usr/local/include\ncase $host_os in\n    *freebsd*)\n    CFLAGS=\"${CFLAGS} -isystem /usr/local/include\"\n    ARGP_LDADD=-largp\n    ;;\nesac\ndnl argp-standalone does not provide a pkg-config file\nAC_CHECK_HEADER([argp.h], AC_DEFINE(HAVE_ARGP, 1, [have argp]))\nif test \"x$ac_cv_header_argp_h\" != \"xyes\"; then\n    AC_MSG_ERROR([argp.h not found, install libargp or argp-standalone])\nfi\nAC_SUBST(ARGP_LDADD)\n\ndnl Check for atomic operation support\nAC_MSG_CHECKING([for gcc __atomic builtins])\nAC_TRY_LINK([], [int v; __atomic_load_n(&v, __ATOMIC_ACQUIRE);],\n            [have_atomic_builtins=yes], [have_atomic_builtins=no])\nif test \"x${have_atomic_builtins}\" = \"xyes\"; then\n   AC_DEFINE(HAVE_ATOMIC_BUILTINS, 1, [define if __atomic_*() builtins are available])\nfi\nAC_SUBST(HAVE_ATOMIC_BUILTINS)\nAC_MSG_RESULT([$have_atomic_builtins])\n\ndnl __sync_*() will not be needed if __atomic_*() is available\nAC_MSG_CHECKING([for gcc __sync builtins])\nAC_TRY_LINK([], [__sync_synchronize();],\n            [have_sync_builtins=yes], [have_sync_builtins=no])\nif test \"x${have_sync_builtins}\" = \"xyes\"; then\n   AC_DEFINE(HAVE_SYNC_BUILTINS, 1, [define if __sync_*() builtins are available])\nfi\nAC_SUBST(HAVE_SYNC_BUILTINS)\nAC_MSG_RESULT([$have_sync_builtins])\n\nAC_CHECK_HEADER([malloc.h], AC_DEFINE(HAVE_MALLOC_H, 1, [have malloc.h]))\n\nAC_CHECK_FUNC([llistxattr], [have_llistxattr=yes])\nif test \"x${have_llistxattr}\" = \"xyes\"; then\n   AC_DEFINE(HAVE_LLISTXATTR, 1, [define if llistxattr exists])\nfi\n\nAC_CHECK_FUNC([fdatasync], [have_fdatasync=no])\nif test \"x${have_fdatasync}\" = \"xyes\"; then\n   AC_DEFINE(HAVE_FDATASYNC, 1, [define if fdatasync exists])\nfi\n\nAC_CHECK_FUNC([fallocate], [have_fallocate=yes])\nif test \"x${have_fallocate}\" = \"xyes\"; then\n   AC_DEFINE(HAVE_FALLOCATE, 1, [define if fallocate exists])\nfi\n\nAC_CHECK_FUNC([posix_fallocate], [have_posix_fallocate=yes])\nif test \"x${have_posix_fallocate}\" = \"xyes\"; then\n   AC_DEFINE(HAVE_POSIX_FALLOCATE, 1, [define if posix_fallocate exists])\nfi\n\n# On fedora-29, copy_file_range syscall and the libc API both are present.\n# Whereas, on some machines such as centos-7, RHEL-7, the API is not there.\n# Only the system call is present. So, this change is to determine whether\n# the API is present or not. If not, then check whether the system call is\n# present or not. Accordingly sys_copy_file_range function will first call\n# the API if it is there. Otherwise it will call syscall(SYS_copy_file_range).\nAC_CHECK_FUNC([copy_file_range], [have_copy_file_range=yes])\nif test \"x${have_copy_file_range}\" = \"xyes\"; then\n   AC_DEFINE(HAVE_COPY_FILE_RANGE, 1, [define if copy_file_range exists])\nelse\n   OLD_CFLAGS=${CFLAGS}\n   CFLAGS=\"-D_GNU_SOURCE\"\n   AC_CHECK_DECL([SYS_copy_file_range], , , [#include <sys/syscall.h>])\n   if test \"x${ac_cv_have_decl_SYS_copy_file_range}\" = \"xyes\"; then\n      AC_DEFINE(HAVE_COPY_FILE_RANGE_SYS, 1, [define if SYS_copy_file_range is available])\n   fi\n   CFLAGS=${OLD_CFLAGS}\nfi\n\nBUILD_NANOSECOND_TIMESTAMPS=no\nAC_CHECK_FUNC([utimensat], [have_utimensat=yes])\nif test \"x${have_utimensat}\" = \"xyes\"; then\n   BUILD_NANOSECOND_TIMESTAMPS=yes\n   AC_DEFINE(HAVE_UTIMENSAT, 1, [define if utimensat exists])\nfi\n\nOLD_CFLAGS=${CFLAGS}\nCFLAGS=\"-D_GNU_SOURCE\"\nAC_CHECK_DECL([SEEK_HOLE], , , [#include <unistd.h>])\nif test \"x${ac_cv_have_decl_SEEK_HOLE}\" = \"xyes\"; then\n   AC_DEFINE(HAVE_SEEK_HOLE, 1, [define if SEEK_HOLE is available])\nfi\nCFLAGS=${OLD_CFLAGS}\n\nAC_CHECK_FUNC([accept4], [have_accept4=yes])\nif test \"x${have_accept4}\" = \"xyes\"; then\n   AC_DEFINE(HAVE_ACCEPT4, 1, [define if accept4 exists])\nfi\n\nAC_CHECK_FUNC([paccept], [have_paccept=yes])\nif test \"x${have_paccept}\" = \"xyes\"; then\nAC_DEFINE(HAVE_PACCEPT, 1, [define if paccept exists])\nfi\n\n# Check the distribution where you are compiling glusterfs on\n\nGF_DISTRIBUTION=\nAC_CHECK_FILE([/etc/debian_version])\nAC_CHECK_FILE([/etc/SuSE-release])\nAC_CHECK_FILE([/etc/redhat-release])\n\nif test \"x$ac_cv_file__etc_debian_version\" = \"xyes\"; then\n   GF_DISTRIBUTION=Debian\nfi\nif test \"x$ac_cv_file__etc_SuSE_release\" = \"xyes\"; then\n   GF_DISTRIBUTION=SuSE\nfi\nif test \"x$ac_cv_file__etc_redhat_release\" = \"xyes\"; then\n   GF_DISTRIBUTION=Redhat\nfi\n\nAC_SUBST(GF_DISTRIBUTION)\n\nGF_HOST_OS=\"\"\nGF_LDFLAGS=\"${GF_LDFLAGS} -rdynamic\"\n\ndnl see --with-libtirpc option check above, libtirpc(-devel) is required for\ndnl ipv6-default\nif test \"x${with_libtirpc}\" = \"xyes\" || test \"x${with_ipv6_default}\" = \"xyes\" ; then\n    PKG_CHECK_MODULES([TIRPC], [libtirpc],\n       [with_libtirpc=\"yes\"; GF_CFLAGS=\"$GF_CFLAGS $TIRPC_CFLAGS\"; GF_LDFLAGS=\"$GF_LDFLAGS $TIRPC_LIBS\";],\n       [with_libtirpc=\"missing\"; with_ipv6_default=\"no\"])\nfi\n\nif test \"x${with_libtirpc}\" = \"xmissing\" ; then\n    AC_CHECK_HEADERS([rpc/rpc.h],[\n        AC_MSG_WARN([\n            ---------------------------------------------------------------------------------\n            libtirpc (and/or ipv6-default) were enabled but libtirpc-devel is not installed.\n            Disabling libtirpc and ipv6-default and falling back to legacy glibc rpc headers.\n            This is a transitional warning message. Eventually it will be an error message.\n            ---------------------------------------------------------------------------------])],[\n        AC_MSG_ERROR([\n            ---------------------------------------------------------------------------------\n            libtirpc (and/or ipv6-default) were enabled but libtirpc-devel is not installed\n            and there were no legacy glibc rpc headers and library to fall back to.\n            ---------------------------------------------------------------------------------])])\nfi\n\nif test \"x$with_ipv6_default\" = \"xyes\" ; then\n   GF_CFLAGS=\"$GF_CFLAGS -DIPV6_DEFAULT\"\nfi\n\ndnl check for gcc -Werror=format-security\nsaved_CFLAGS=$CFLAGS\nCFLAGS=\"-Wformat -Werror=format-security\"\nAC_MSG_CHECKING([whether $CC accepts -Werror=format-security])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM()], [cc_werror_format_security=yes], [cc_werror_format_security=no])\necho $cc_werror_format_security\nif test \"x$cc_werror_format_security\" = \"xyes\"; then\n    GF_CFLAGS=\"$GF_CFLAGS ${CFLAGS}\"\nfi\nCFLAGS=\"$saved_CFLAGS\"\n\ndnl check for gcc -Werror=implicit-function-declaration\nsaved_CFLAGS=$CFLAGS\nCFLAGS=\"-Werror=implicit-function-declaration\"\nAC_MSG_CHECKING([whether $CC accepts -Werror=implicit-function-declaration])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM()], [cc_werror_implicit=yes], [cc_werror_implicit=no])\necho $cc_werror_implicit\nif test \"x$cc_werror_implicit\" = \"xyes\"; then\n    GF_CFLAGS=\"${GF_CFLAGS} ${CFLAGS}\"\nfi\nCFLAGS=\"$saved_CFLAGS\"\n\ndnl clang is mostly GCC-compatible, but its version is much lower,\ndnl so we have to check for it.\nAC_MSG_CHECKING([if compiling with clang])\n\nAC_COMPILE_IFELSE(\n[AC_LANG_PROGRAM([], [[\n#ifndef __clang__\n       not clang\n#endif\n]])],\n[CLANG=yes], [CLANG=no])\n\nAC_MSG_RESULT([$CLANG])\n\nif test \"x$CLANG\" = \"xyes\"; then\n   GF_CFLAGS=\"${GF_CFLAGS} -Wno-gnu\"\nfi\n\nif test \"x$ac_cv_header_execinfo_h\" = \"xno\"; then\n   # The reason is that __builtin_frame_address(n) for n > 0 seems\n   # to just crash on most platforms when -fomit-stack-pointer is\n   # specified, which seems to be the default for many platforms on\n   # -O2. The documentation says that __builtin_frame_address()\n   # should return NULL in case it can't get the frame, but it\n   # seems to crash instead.\n\n   # execinfo.c in ./contrib/libexecinfo uses __builtin_frame_address(n)\n   # for providing cross platform backtrace*() functions.\n   if test \"x$CLANG\" = \"xno\"; then\n      GF_CFLAGS=\"${GF_CFLAGS} -fno-omit-frame-pointer\"\n   fi\nfi\n\nold_prefix=$prefix\nif test \"x$prefix\" = xNONE; then\n        prefix=$ac_default_prefix\nfi\nold_exec_prefix=$exec_prefix\nif test \"x$exec_prefix\" = xNONE; then\n        exec_prefix=\"$(eval echo $prefix)\"\nfi\nGLUSTERFS_LIBEXECDIR=\"$(eval echo $libexecdir)/glusterfs\"\nGLUSTERFSD_MISCDIR=\"$(eval echo $prefix)/var/lib/misc/glusterfsd\"\nprefix=$old_prefix\nexec_prefix=$old_exec_prefix\n\n### Dirty hacky stuff to make LOCALSTATEDIR work\nif test \"x$prefix\" = xNONE; then\n   test $localstatedir = '${prefix}/var' && localstatedir=$ac_default_prefix/var\n   localstatedir=/var\nfi\nlocalstatedir=\"$(eval echo ${localstatedir})\"\nLOCALSTATEDIR=$localstatedir\n\nold_prefix=$prefix\nif test \"x$prefix\" = xNONE; then\n    prefix=$ac_default_prefix\nfi\nGLUSTERD_VOLFILE=\"$(eval echo ${sysconfdir})/glusterfs/glusterd.vol\"\nprefix=$old_prefix\n\n\nGFAPI_EXTRA_LDFLAGS='-Wl,--version-script=$(top_srcdir)/api/src/gfapi.map'\ncase $host_os in\n     linux*)\n        GF_HOST_OS=\"GF_LINUX_HOST_OS\"\n        GF_FUSE_CFLAGS=\"-DFUSERMOUNT_DIR=\\\\\\\"\\$(bindir)\\\\\\\"\"\n        GLUSTERD_WORKDIR=\"${LOCALSTATEDIR}/lib/glusterd\"\n        ;;\n     solaris*)\n        GF_HOST_OS=\"GF_SOLARIS_HOST_OS\"\n        GF_CFLAGS=\"${GF_CFLAGS} -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS -m64\"\n        BUILD_FUSE_CLIENT=no\n        FUSE_CLIENT_SUBDIR=\"\"\n        GLUSTERD_WORKDIR=\"${LOCALSTATEDIR}/lib/glusterd\"\n        ;;\n     *netbsd*)\n        GF_HOST_OS=\"GF_BSD_HOST_OS\"\n        GF_CFLAGS=\"${GF_CFLAGS} -D_INCOMPLETE_XOPEN_C063\"\n        GF_CFLAGS=\"${GF_CFLAGS} -DTHREAD_UNSAFE_BASENAME\"\n        GF_CFLAGS=\"${GF_CFLAGS} -DTHREAD_UNSAFE_DIRNAME\"\n        GF_FUSE_CFLAGS=\"-DFUSERMOUNT_DIR=\\\\\\\"\\$(sbindir)\\\\\\\"\"\n        GF_LDADD=\"${ARGP_LDADD}\"\n        if test \"x$ac_cv_header_execinfo_h\" = \"xyes\"; then\n           GF_LDFLAGS=\"${GF_LDFLAGS} -lexecinfo\"\n        fi\n        GF_FUSE_LDADD=\"-lperfuse\"\n        BUILD_FUSE_CLIENT=yes\n        LEXLIB=\"\"\n        BUILD_FUSERMOUNT=no\n        FUSERMOUNT_SUBDIR=\"\"\n        GLUSTERD_WORKDIR=\"${LOCALSTATEDIR}/db/glusterd\"\n        ;;\n     *freebsd*)\n        GF_HOST_OS=\"GF_BSD_HOST_OS\"\n        GF_CFLAGS=\"${GF_CFLAGS} -O0\"\n        GF_CFLAGS=\"${GF_CFLAGS} -DTHREAD_UNSAFE_BASENAME\"\n        GF_CFLAGS=\"${GF_CFLAGS} -DTHREAD_UNSAFE_DIRNAME\"\n        GF_CFLAGS=\"${GF_CFLAGS} -D_LIBGEN_H_\"\n        GF_CFLAGS=\"${GF_CFLAGS} -DO_DSYNC=0\"\n        GF_CFLAGS=\"${GF_CFLAGS} -Dxdr_quad_t=xdr_longlong_t\"\n        GF_CFLAGS=\"${GF_CFLAGS} -Dxdr_u_quad_t=xdr_u_longlong_t\"\n        GF_FUSE_CFLAGS=\"-DFUSERMOUNT_DIR=\\\\\\\"\\$(sbindir)\\\\\\\"\"\n        GF_LDADD=\"${ARGP_LDADD}\"\n        if test \"x$ac_cv_header_execinfo_h\" = \"xyes\"; then\n           GF_LDFLAGS=\"${GF_LDFLAGS} -lexecinfo\"\n        fi\n        BUILD_FUSE_CLIENT=yes\n        BUILD_FUSERMOUNT=no\n        FUSERMOUNT_SUBDIR=\"\"\n        GLUSTERD_WORKDIR=\"${LOCALSTATEDIR}/db/glusterd\"\n        ;;\n     darwin*)\n        GF_HOST_OS=\"GF_DARWIN_HOST_OS\"\n        LIBTOOL=glibtool\n        GF_CFLAGS=\"${GF_CFLAGS} -D_REENTRANT -D_XOPEN_SOURCE \"\n        GF_CFLAGS=\"${GF_CFLAGS} -D_DARWIN_USE_64_BIT_INODE \"\n        GF_CFLAGS=\"${GF_CFLAGS} -DTHREAD_UNSAFE_BASENAME\"\n        GF_CFLAGS=\"${GF_CFLAGS} -DTHREAD_UNSAFE_DIRNAME\"\n        GF_LDADD=\"${ARGP_LDADD}\"\n        GF_LDFLAGS=\"${GF_LDFLAGS}\"\n        GF_FUSE_CFLAGS=\"-I\\$(CONTRIBDIR)/macfuse\"\n        BUILD_FUSERMOUNT=\"no\"\n        FUSERMOUNT_SUBDIR=\"\"\n        GLUSTERD_WORKDIR=\"${LOCALSTATEDIR}/db/glusterd\"\n        GFAPI_EXTRA_LDFLAGS='-Wl,-alias_list,$(top_srcdir)/api/src/gfapi.aliases'\n        ;;\nesac\n\n# Default value for sbindir\nprefix_temp=$prefix\nexec_prefix_temp=$exec_prefix\n\ntest \"${prefix}\" = \"NONE\" && prefix=\"${ac_default_prefix}\"\ntest \"${exec_prefix}\" = \"NONE\" && exec_prefix='${prefix}'\nsbintemp=\"${sbindir}\"\neval sbintemp=\\\"${sbintemp}\\\"\neval sbintemp=\\\"${sbintemp}\\\"\nSBIN_DIR=${sbintemp}\n\nsysconfdirtemp=\"${sysconfdir}\"\neval sysconfdirtemp=\\\"${sysconfdirtemp}\\\"\nSYSCONF_DIR=${sysconfdirtemp}\n\nprefix=$prefix_temp\nexec_prefix=$exec_prefix_temp\n\nAC_SUBST(SBIN_DIR)\nAC_SUBST(SYSCONF_DIR)\n\n# lazy umount emulation\nUMOUNTD_SUBDIR=\"\"\nif test \"x${GF_HOST_OS}\" != \"xGF_LINUX_HOST_OS\" ; then\n        UMOUNTD_SUBDIR=\"contrib/umountd\"\nfi\nAC_SUBST(UMOUNTD_SUBDIR)\n\n\n# enable debug section\nAC_ARG_ENABLE([debug],\n              AC_HELP_STRING([--enable-debug],\n                             [Enable debug build options.]))\n\nAC_ARG_ENABLE([mempool],\n              AC_HELP_STRING([--disable-mempool],\n                             [Disable the Gluster memory pooler.]))\n\nUSE_MEMPOOL=\"yes\"\nif test \"x$enable_mempool\" = \"xno\"; then\n        USE_MEMPOOL=\"no\"\n        AC_DEFINE(GF_DISABLE_MEMPOOL, 1, [Disable the Gluster memory pooler.])\nfi\n\n# syslog section\nAC_ARG_ENABLE([syslog],\n              AC_HELP_STRING([--disable-syslog],\n                             [Disable syslog for logging]))\n\nUSE_SYSLOG=\"yes\"\nif test \"x$enable_syslog\" != \"xno\"; then\n  AC_DEFINE(GF_USE_SYSLOG, 1, [Use syslog for logging])\nelse\n  USE_SYSLOG=\"no\"\nfi\nAM_CONDITIONAL([ENABLE_SYSLOG], [test x$USE_SYSLOG = xyes])\n#end syslog section\n\nBUILD_READLINE=no\nAC_CHECK_LIB([readline -lcurses],[readline],[RLLIBS=\"-lreadline -lcurses\"])\nAC_CHECK_LIB([readline -ltermcap],[readline],[RLLIBS=\"-lreadline -ltermcap\"])\nAC_CHECK_LIB([readline -lncurses],[readline],[RLLIBS=\"-lreadline -lncurses\"])\n\nif test -n \"$RLLIBS\"; then\n   if test \"x$RL_UNDO\" = \"xyes\"; then\n      AC_DEFINE(HAVE_READLINE, 1, [readline enabled CLI])\n      BUILD_READLINE=yes\n   else\n      BUILD_READLINE=\"no (present but missing undo)\"\n   fi\n\nfi\n\nBUILD_LIBAIO=no\nAC_CHECK_LIB([aio],[io_setup],[LIBAIO=\"-laio\"])\n\nif test -n \"$LIBAIO\"; then\n   AC_DEFINE(HAVE_LIBAIO, 1, [libaio based POSIX enabled])\n   BUILD_LIBAIO=yes\nfi\n\ndnl gnfs section\nBUILD_GNFS=\"no\"\nRPCBIND_SERVICE=\"\"\nAC_ARG_ENABLE([gnfs],\n              AC_HELP_STRING([--enable-gnfs],\n                             [Enable legacy gnfs server xlator.]))\nif test \"x${with_server}\" = \"xyes\" -a \"x$enable_gnfs\" = \"xyes\"; then\n    BUILD_GNFS=\"yes\"\n    RPCBIND_SERVICE=\"rpcbind.service\"\nfi\nAM_CONDITIONAL([BUILD_GNFS], [test x$BUILD_GNFS = xyes])\nAC_SUBST(BUILD_GNFS)\nAC_SUBST(RPCBIND_SERVICE)\ndnl end gnfs section\n\ndnl Check for userspace-rcu\nPKG_CHECK_MODULES([URCU], [liburcu-bp], [],\n  [AC_CHECK_HEADERS([urcu-bp.h],\n     [URCU_LIBS='-lurcu-bp'],\n     AC_MSG_ERROR([liburcu-bp not found]))])\nPKG_CHECK_MODULES([URCU_CDS], [liburcu-cds >= 0.8], [],\n  [PKG_CHECK_MODULES([URCU_CDS], [liburcu-cds >= 0.7],\n    [AC_DEFINE(URCU_OLD, 1, [Define if liburcu 0.6 or 0.7 is found])\n     USE_CONTRIB_URCU='yes'],\n    [AC_CHECK_HEADERS([urcu/cds.h],\n      [AC_DEFINE(URCU_OLD, 1, [Define if liburcu 0.6 or 0.7 is found])\n       URCU_CDS_LIBS='-lurcu-cds'\n       USE_CONTRIB_URCU='yes'],\n      [AC_MSG_ERROR([liburcu-cds not found])])])])\n\nBUILD_UNITTEST=\"no\"\nAC_ARG_ENABLE([cmocka],\n              AC_HELP_STRING([--enable-cmocka],\n                             [Enable cmocka build options.]))\nif test \"x$enable_cmocka\" = \"xyes\"; then\n    BUILD_UNITTEST=\"yes\"\n    PKG_CHECK_MODULES([UNITTEST], [cmocka >= 1.0.1], [BUILD_UNITTEST=\"yes\"],\n        [AC_MSG_ERROR([cmocka library is required to build glusterfs])]\n    )\nfi\nAM_CONDITIONAL([UNITTEST], [test x$BUILD_UNITTEST = xyes])\n\ndnl Define UNIT_TESTING only for building cmocka binaries.\nUNITTEST_CFLAGS=\"${UNITTEST_CFLAGS} -DUNIT_TESTING=1\"\n\ndnl Add cmocka for unit tests\ncase $host_os in\n  freebsd*)\n    dnl remove --coverage on FreeBSD due to a known llvm packaging bug\n    UNITTEST_CFLAGS=\"${UNITTEST_CPPFLAGS} ${UNITTEST_CFLAGS} -g -DDEBUG -O0\"\n    UNITTEST_LDFLAGS=\"${UNITTEST_LIBS} ${UNITTEST_LDFLAGS}\"\n    ;;\n  *)\n    UNITTEST_CFLAGS=\"${UNITTEST_CPPFLAGS} ${UNITTEST_CFLAGS} -g -DDEBUG -O0 --coverage\"\n    UNITTEST_LDFLAGS=\"${UNITTEST_LIBS} ${UNITTEST_LDFLAGS}\"\n    ;;\nesac\n\nAC_SUBST(UNITTEST_CFLAGS)\nAC_SUBST(UNITTEST_LDFLAGS)\n\nAC_SUBST(CFLAGS)\n# end enable debug section\n\n# EC dynamic code generation section\n\nEC_DYNAMIC_SUPPORT=\"none\"\nEC_DYNAMIC_ARCH=\"none\"\n\nAC_ARG_ENABLE([ec-dynamic],\n              AC_HELP_STRING([--disable-ec-dynamic],\n                             [Disable all dynamic code generation extensions for EC module]))\n\nAC_ARG_ENABLE([ec-dynamic-intel],\n              AC_HELP_STRING([--disable-ec-dynamic-intel],\n                             [Disable all INTEL dynamic code generation extensions for EC module]))\n\nAC_ARG_ENABLE([ec-dynamic-arm],\n              AC_HELP_STRING([--disable-ec-dynamic-arm],\n                             [Disable all ARM dynamic code generation extensions for EC module]))\n\nAC_ARG_ENABLE([ec-dynamic-x64],\n              AC_HELP_STRING([--disable-ec-dynamic-x64],\n                             [Disable dynamic INTEL x64 code generation for EC module]))\n\nAC_ARG_ENABLE([ec-dynamic-sse],\n              AC_HELP_STRING([--disable-ec-dynamic-sse],\n                             [Disable dynamic INTEL SSE code generation for EC module]))\n\nAC_ARG_ENABLE([ec-dynamic-avx],\n              AC_HELP_STRING([--disable-ec-dynamic-avx],\n                             [Disable dynamic INTEL AVX code generation for EC module]))\n\nAC_ARG_ENABLE([ec-dynamic-neon],\n              AC_HELP_STRING([--disable-ec-dynamic-neon],\n                             [Disable dynamic ARM NEON code generation for EC module]))\n\nif test \"x$enable_ec_dynamic\" != \"xno\"; then\n  case $host in\n    x86_64*)\n      if test \"x$enable_ec_dynamic_intel\" != \"xno\"; then\n        if test \"x$enable_ec_dynamic_x64\" != \"xno\"; then\n          EC_DYNAMIC_SUPPORT=\"$EC_DYNAMIC_SUPPORT x64\"\n          AC_DEFINE(USE_EC_DYNAMIC_X64, 1, [Defined if using dynamic INTEL x64 code])\n        fi\n        if test \"x$enable_ec_dynamic_sse\" != \"xno\"; then\n          EC_DYNAMIC_SUPPORT=\"$EC_DYNAMIC_SUPPORT sse\"\n          AC_DEFINE(USE_EC_DYNAMIC_SSE, 1, [Defined if using dynamic INTEL SSE code])\n        fi\n        if test \"x$enable_ec_dynamic_avx\" != \"xno\"; then\n          EC_DYNAMIC_SUPPORT=\"$EC_DYNAMIC_SUPPORT avx\"\n          AC_DEFINE(USE_EC_DYNAMIC_AVX, 1, [Defined if using dynamic INTEL AVX code])\n        fi\n\n        if test \"x$EC_DYNAMIC_SUPPORT\" != \"xnone\"; then\n          EC_DYNAMIC_ARCH=\"intel\"\n        fi\n      fi\n      ;;\n    arm*)\n      if test \"x$enable_ec_dynamic_arm\" != \"xno\"; then\n        if test \"x$enable_ec_dynamic_neon\" != \"xno\"; then\n          EC_DYNAMIC_SUPPORT=\"$EC_DYNAMIC_SUPPORT neon\"\n          AC_DEFINE(USE_EC_DYNAMIC_NEON, 1, [Defined if using dynamic ARM NEON code])\n        fi\n\n        if test \"x$EC_DYNAMIC_SUPPORT\" != \"xnone\"; then\n          EC_DYNAMIC_ARCH=\"arm\"\n        fi\n      fi\n      ;;\n  esac\n\n  EC_DYNAMIC_SUPPORT=\"${EC_DYNAMIC_SUPPORT#none }\"\nfi\n\nAM_CONDITIONAL([ENABLE_EC_DYNAMIC_INTEL], [test \"x$EC_DYNAMIC_ARCH\" = \"xintel\"])\nAM_CONDITIONAL([ENABLE_EC_DYNAMIC_ARM], [test \"x$EC_DYNAMIC_ARCH\" = \"xarm\"])\n\nAM_CONDITIONAL([ENABLE_EC_DYNAMIC_X64], [test \"x${EC_DYNAMIC_SUPPORT##*x64*}\" = \"x\"])\nAM_CONDITIONAL([ENABLE_EC_DYNAMIC_SSE], [test \"x${EC_DYNAMIC_SUPPORT##*sse*}\" = \"x\"])\nAM_CONDITIONAL([ENABLE_EC_DYNAMIC_AVX], [test \"x${EC_DYNAMIC_SUPPORT##*avx*}\" = \"x\"])\nAM_CONDITIONAL([ENABLE_EC_DYNAMIC_NEON], [test \"x${EC_DYNAMIC_SUPPORT##*neon*}\" = \"x\"])\n\nAC_SUBST(USE_EC_DYNAMIC_X64)\nAC_SUBST(USE_EC_DYNAMIC_SSE)\nAC_SUBST(USE_EC_DYNAMIC_AVX)\nAC_SUBST(USE_EC_DYNAMIC_NEON)\n\n# end EC dynamic code generation section\n\ndnl libglusterfs.so uses math functions\nGF_LDADD=\"${GF_LDADD} ${MATH_LIB}\"\n\ncase $host_os in\n  dnl Can't use libtool's portable \"-no-undefined\" as it seems to be ignored on Linux\n  linux*)\n    GF_NO_UNDEFINED='-Wl,--no-undefined'\n    ;;\n  darwin*)\n    GF_NO_UNDEFINED='-Wl,-undefined'\n    ;;\n  *)\n  dnl There's an issue on FreeBSD with reference to __progname used in some parts of code\n    GF_NO_UNDEFINED=''\n    ;;\nesac\ndnl GF_XLATOR_DEFAULT_LDFLAGS is for most xlators that expose a common set of symbols\nGF_XLATOR_DEFAULT_LDFLAGS='-avoid-version -export-symbols $(top_srcdir)/xlators/xlator.sym $(UUID_LIBS) $(GF_NO_UNDEFINED)'\ndnl GF_XLATOR_LDFLAGS is for xlators that expose extra symbols, e.g. dht\nGF_XLATOR_LDFLAGS='-avoid-version $(UUID_LIBS) $(GF_NO_UNDEFINED)'\n\nAC_SUBST(GF_HOST_OS)\nAC_SUBST(GF_CFLAGS)\nAC_SUBST(GF_LDFLAGS)\nAC_SUBST(GF_LDADD)\nAC_SUBST(GF_FUSE_LDADD)\nAC_SUBST(GF_FUSE_CFLAGS)\nAC_SUBST(RLLIBS)\nAC_SUBST(LIBAIO)\nAC_SUBST(AM_MAKEFLAGS)\nAC_SUBST(AM_LIBTOOLFLAGS)\nAC_SUBST(GF_NO_UNDEFINED)\nAC_SUBST(GF_XLATOR_DEFAULT_LDFLAGS)\nAC_SUBST(GF_XLATOR_LDFLAGS)\n\nCONTRIBDIR='$(top_srcdir)/contrib'\nAC_SUBST(CONTRIBDIR)\n\nGF_CPPDEFINES='-D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE -D$(GF_HOST_OS)'\nGF_CPPINCLUDES='-include $(top_builddir)/config.h -include $(top_builddir)/site.h -I$(top_srcdir)/libglusterfs/src -I$(top_builddir)/libglusterfs/src'\nif test \"x${USE_CONTRIB_URCU}\" = \"xyes\"; then\n    GF_CPPINCLUDES=\"${GF_CPPINCLUDES} -I\\$(CONTRIBDIR)/userspace-rcu\"\nfi\nGF_CPPFLAGS=\"$GF_CPPFLAGS $GF_CPPDEFINES $GF_CPPINCLUDES\"\nAC_SUBST([GF_CPPFLAGS])\n\nAM_CONDITIONAL([GF_LINUX_HOST_OS], test \"${GF_HOST_OS}\" = \"GF_LINUX_HOST_OS\")\nAM_CONDITIONAL([GF_DARWIN_HOST_OS], test \"${GF_HOST_OS}\" = \"GF_DARWIN_HOST_OS\")\nAM_CONDITIONAL([GF_BSD_HOST_OS], test \"${GF_HOST_OS}\" = \"GF_BSD_HOST_OS\")\nif  test \"${GF_HOST_OS}\" = \"GF_BSD_HOST_OS\"; then\n    AC_DEFINE(GF_BSD_HOST_OS, 1, [This is a BSD compatible OS.])\nfi\n\nAC_SUBST(GLUSTERD_WORKDIR)\nAM_CONDITIONAL([GF_INSTALL_GLUSTERD_WORKDIR], test ! -d ${GLUSTERD_WORKDIR} && test -d ${sysconfdir}/glusterd )\nAC_SUBST(GLUSTERD_VOLFILE)\nAC_SUBST(GLUSTERFS_LIBEXECDIR)\nAC_SUBST(GLUSTERFSD_MISCDIR)\n\ndnl pkg-config versioning\ndnl\ndnl Once we released gluster-api.pc with version=7. Since then we undid the\ndnl library versioning and replaced it with symbol-versioning. The current\ndnl libgfapi.so has version 0, but the symbols have the version from the main\ndnl package at the time they were added.\ndnl\ndnl Because other packages (like samba) use the pkg-config version, we can not\ndnl drop it, or decrease the version easily. The simplest solution is to keep\ndnl the version=7 and add sub-digits for the actual package/symbol versions.\nGFAPI_VERSION=\"7.\"${PACKAGE_VERSION}\nLIBGFCHANGELOG_VERSION=\"0.0.1\"\nAC_SUBST(GFAPI_VERSION)\nAC_SUBST(LIBGFCHANGELOG_VERSION)\n\ndnl libtool versioning\nLIBGFXDR_LT_VERSION=\"0:1:0\"\nLIBGFRPC_LT_VERSION=\"0:1:0\"\nLIBGLUSTERFS_LT_VERSION=\"0:1:0\"\nLIBGFCHANGELOG_LT_VERSION=\"0:1:0\"\nGFAPI_LT_VERSION=\"0:0:0\"\nAC_SUBST(LIBGFXDR_LT_VERSION)\nAC_SUBST(LIBGFRPC_LT_VERSION)\nAC_SUBST(LIBGLUSTERFS_LT_VERSION)\nAC_SUBST(LIBGFCHANGELOG_LT_VERSION)\nAC_SUBST(GFAPI_LT_VERSION)\nAC_SUBST(GFAPI_EXTRA_LDFLAGS)\n\nGFAPI_LIBS=\"${ACL_LIBS}\"\nAC_SUBST(GFAPI_LIBS)\n\ndnl this change necessary for run-tests.sh\nAC_CONFIG_FILES([tests/env.rc],[ln -s ${ac_abs_builddir}/env.rc ${ac_abs_srcdir}/env.rc 2>/dev/null])\n\nAC_OUTPUT\n\necho\necho \"GlusterFS configure summary\"\necho \"===========================\"\necho \"FUSE client          : $BUILD_FUSE_CLIENT\"\necho \"Infiniband verbs     : $BUILD_IBVERBS\"\necho \"epoll IO multiplex   : $BUILD_EPOLL\"\necho \"fusermount           : $BUILD_FUSERMOUNT\"\necho \"readline             : $BUILD_READLINE\"\necho \"georeplication       : $BUILD_SYNCDAEMON\"\necho \"Linux-AIO            : $BUILD_LIBAIO\"\necho \"Enable Debug         : $BUILD_DEBUG\"\necho \"Enable ASAN          : $BUILD_ASAN\"\necho \"Enable TSAN          : $BUILD_TSAN\"\necho \"Use syslog           : $USE_SYSLOG\"\necho \"XML output           : $BUILD_XML_OUTPUT\"\necho \"Unit Tests           : $BUILD_UNITTEST\"\necho \"Track priv ports     : $TRACK_PRIVPORTS\"\necho \"POSIX ACLs           : $BUILD_POSIX_ACLS\"\necho \"SELinux features     : $USE_SELINUX\"\necho \"firewalld-config     : $BUILD_FIREWALLD\"\necho \"Events               : $BUILD_EVENTS\"\necho \"EC dynamic support   : $EC_DYNAMIC_SUPPORT\"\necho \"Use memory pools     : $USE_MEMPOOL\"\necho \"Nanosecond m/atimes  : $BUILD_NANOSECOND_TIMESTAMPS\"\necho \"Server components    : $with_server\"\necho \"Legacy gNFS server   : $BUILD_GNFS\"\necho \"IPV6 default         : $with_ipv6_default\"\necho \"Use TIRPC            : $with_libtirpc\"\necho \"With Python          : ${PYTHON_VERSION}\"\necho \"Cloudsync            : $BUILD_CLOUDSYNC\"\necho\n\nif test \"x$BUILD_ASAN\" = \"xyes\"; then\n    echo \"### Run below command before executing your tests if your system\"\n    echo \"### has 'gcc --version' above 7.x (works on Fedora 27 and Above)\"\n    echo \"export ASAN_OPTIONS=log_path=/var/log/glusterfs/asan-output.log\"\n    echo \"\"\n    echo \"### Above is required to get details of asan run, as glusterfs\"\n    echo \"### processes are daemon processes. Further details and more\"\n    echo \"### options can be found under 'Run-time flags' at\"\n    echo \"### https://github.com/google/sanitizers/wiki/AddressSanitizerFlags\"\n    echo\nfi\n",
        "/tmp/vanessa/spack-stage/spack-stage-glusterfs-7.2-7bafu5wprzvvhnabtlwumqs3qxil5tgh/spack-src/ltmain.sh": "\n# libtool (GNU libtool) 2.4.2\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006,\n# 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html,\n# or obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n\n# Usage: $progname [OPTION]... [MODE-ARG]...\n#\n# Provide generalized library-building support services.\n#\n#       --config             show all configuration variables\n#       --debug              enable verbose shell tracing\n#   -n, --dry-run            display commands without modifying any files\n#       --features           display basic configuration information and exit\n#       --mode=MODE          use operation mode MODE\n#       --preserve-dup-deps  don't remove duplicate dependency libraries\n#       --quiet, --silent    don't print informational messages\n#       --no-quiet, --no-silent\n#                            print informational messages (default)\n#       --no-warn            don't display warning messages\n#       --tag=TAG            use configuration variables from tag TAG\n#   -v, --verbose            print more informational messages than default\n#       --no-verbose         don't print the extra informational messages\n#       --version            print version information\n#   -h, --help, --help-all   print short, long, or detailed help message\n#\n# MODE must be one of the following:\n#\n#         clean              remove files from the build directory\n#         compile            compile a source file into a libtool object\n#         execute            automatically set library path, then run a program\n#         finish             complete the installation of libtool libraries\n#         install            install libraries or executables\n#         link               create a library or an executable\n#         uninstall          remove libraries from an installed directory\n#\n# MODE-ARGS vary depending on the MODE.  When passed as first option,\n# `--mode=MODE' may be abbreviated as `MODE' or a unique abbreviation of that.\n# Try `$progname --help --mode=MODE' for a more detailed description of MODE.\n#\n# When reporting a bug, please describe a test case to reproduce it and\n# include the following information:\n#\n#         host-triplet:\t$host\n#         shell:\t\t$SHELL\n#         compiler:\t\t$LTCC\n#         compiler flags:\t\t$LTCFLAGS\n#         linker:\t\t$LD (gnu? $with_gnu_ld)\n#         $progname:\t(GNU libtool) 2.4.2\n#         automake:\t$automake_version\n#         autoconf:\t$autoconf_version\n#\n# Report bugs to <bug-libtool@gnu.org>.\n# GNU libtool home page: <http://www.gnu.org/software/libtool/>.\n# General help using GNU software: <http://www.gnu.org/gethelp/>.\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.2\nTIMESTAMP=\"\"\npackage_revision=1.3337\n\n# Be Bourne compatible\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# NLS nuisances: We save the old values to restore during execute mode.\nlt_user_locale=\nlt_safe_locale=\nfor lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test \\\"\\${$lt_var+set}\\\" = set; then\n          save_$lt_var=\\$$lt_var\n          $lt_var=C\n\t  export $lt_var\n\t  lt_user_locale=\\\"$lt_var=\\\\\\$save_\\$lt_var; \\$lt_user_locale\\\"\n\t  lt_safe_locale=\\\"$lt_var=C; \\$lt_safe_locale\\\"\n\tfi\"\ndone\nLC_ALL=C\nLANGUAGE=C\nexport LANGUAGE LC_ALL\n\n$lt_unset CDPATH\n\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=\"$0\"\n\n\n\n: ${CP=\"cp -f\"}\ntest \"${ECHO+set}\" = set || ECHO=${as_echo-'printf %s\\n'}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n: ${Xsed=\"$SED -e 1s/^X//\"}\n\n# Global variables:\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\nexit_status=$EXIT_SUCCESS\n\n# Make sure IFS has a sensible default\nlt_nl='\n'\nIFS=\" \t$lt_nl\"\n\ndirname=\"s,/[^/]*$,,\"\nbasename=\"s,^.*/,,\"\n\n# func_dirname file append nondir_replacement\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\nfunc_dirname ()\n{\n    func_dirname_result=`$ECHO \"${1}\" | $SED \"$dirname\"`\n    if test \"X$func_dirname_result\" = \"X${1}\"; then\n      func_dirname_result=\"${3}\"\n    else\n      func_dirname_result=\"$func_dirname_result${2}\"\n    fi\n} # func_dirname may be replaced by extended shell implementation\n\n\n# func_basename file\nfunc_basename ()\n{\n    func_basename_result=`$ECHO \"${1}\" | $SED \"$basename\"`\n} # func_basename may be replaced by extended shell implementation\n\n\n# func_dirname_and_basename file append nondir_replacement\n# perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# Implementation must be kept synchronized with func_dirname\n# and func_basename. For efficiency, we do not delegate to\n# those functions but instead duplicate the functionality here.\nfunc_dirname_and_basename ()\n{\n    # Extract subdirectory from the argument.\n    func_dirname_result=`$ECHO \"${1}\" | $SED -e \"$dirname\"`\n    if test \"X$func_dirname_result\" = \"X${1}\"; then\n      func_dirname_result=\"${3}\"\n    else\n      func_dirname_result=\"$func_dirname_result${2}\"\n    fi\n    func_basename_result=`$ECHO \"${1}\" | $SED -e \"$basename\"`\n} # func_dirname_and_basename may be replaced by extended shell implementation\n\n\n# func_stripname prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n# func_strip_suffix prefix name\nfunc_stripname ()\n{\n    case ${2} in\n      .*) func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%\\\\\\\\${2}\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%${2}\\$%%\"`;;\n    esac\n} # func_stripname may be replaced by extended shell implementation\n\n\n# These SED scripts presuppose an absolute path with a trailing slash.\npathcar='s,^/\\([^/]*\\).*$,\\1,'\npathcdr='s,^/[^/]*,,'\nremovedotparts=':dotsl\n\t\ts@/\\./@/@g\n\t\tt dotsl\n\t\ts,/\\.$,/,'\ncollapseslashes='s@/\\{1,\\}@/@g'\nfinalslash='s,/*$,/,'\n\n# func_normal_abspath PATH\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\n#             value returned in \"$func_normal_abspath_result\"\nfunc_normal_abspath ()\n{\n  # Start from root dir and reassemble the path.\n  func_normal_abspath_result=\n  func_normal_abspath_tpath=$1\n  func_normal_abspath_altnamespace=\n  case $func_normal_abspath_tpath in\n    \"\")\n      # Empty path, that just means $cwd.\n      func_stripname '' '/' \"`pwd`\"\n      func_normal_abspath_result=$func_stripname_result\n      return\n    ;;\n    # The next three entries are used to spot a run of precisely\n    # two leading slashes without using negated character classes;\n    # we take advantage of case's first-match behaviour.\n    ///*)\n      # Unusual form of absolute path, do nothing.\n    ;;\n    //*)\n      # Not necessarily an ordinary path; POSIX reserves leading '//'\n      # and for example Cygwin uses it to access remote file shares\n      # over CIFS/SMB, so we conserve a leading double slash if found.\n      func_normal_abspath_altnamespace=/\n    ;;\n    /*)\n      # Absolute path, do nothing.\n    ;;\n    *)\n      # Relative path, prepend $cwd.\n      func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n    ;;\n  esac\n  # Cancel out all the simple stuff to save iterations.  We also want\n  # the path to end with a slash for ease of parsing, so make sure\n  # there is one (and only one) here.\n  func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$removedotparts\" -e \"$collapseslashes\" -e \"$finalslash\"`\n  while :; do\n    # Processed it all yet?\n    if test \"$func_normal_abspath_tpath\" = / ; then\n      # If we ascended to the root using \"..\" the result may be empty now.\n      if test -z \"$func_normal_abspath_result\" ; then\n        func_normal_abspath_result=/\n      fi\n      break\n    fi\n    func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcar\"`\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcdr\"`\n    # Figure out what to do with it\n    case $func_normal_abspath_tcomponent in\n      \"\")\n        # Trailing empty path component, ignore it.\n      ;;\n      ..)\n        # Parent dir; strip last assembled component from result.\n        func_dirname \"$func_normal_abspath_result\"\n        func_normal_abspath_result=$func_dirname_result\n      ;;\n      *)\n        # Actual path component, append it.\n        func_normal_abspath_result=$func_normal_abspath_result/$func_normal_abspath_tcomponent\n      ;;\n    esac\n  done\n  # Restore leading double-slash if one was found on entry.\n  func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n# func_relative_path SRCDIR DSTDIR\n# generates a relative path from SRCDIR to DSTDIR, with a trailing\n# slash if non-empty, suitable for immediately appending a filename\n# without needing to append a separator.\n#             value returned in \"$func_relative_path_result\"\nfunc_relative_path ()\n{\n  func_relative_path_result=\n  func_normal_abspath \"$1\"\n  func_relative_path_tlibdir=$func_normal_abspath_result\n  func_normal_abspath \"$2\"\n  func_relative_path_tbindir=$func_normal_abspath_result\n\n  # Ascend the tree starting from libdir\n  while :; do\n    # check if we have found a prefix of bindir\n    case $func_relative_path_tbindir in\n      $func_relative_path_tlibdir)\n        # found an exact match\n        func_relative_path_tcancelled=\n        break\n        ;;\n      $func_relative_path_tlibdir*)\n        # found a matching prefix\n        func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n        func_relative_path_tcancelled=$func_stripname_result\n        if test -z \"$func_relative_path_result\"; then\n          func_relative_path_result=.\n        fi\n        break\n        ;;\n      *)\n        func_dirname $func_relative_path_tlibdir\n        func_relative_path_tlibdir=${func_dirname_result}\n        if test \"x$func_relative_path_tlibdir\" = x ; then\n          # Have to descend all the way to the root!\n          func_relative_path_result=../$func_relative_path_result\n          func_relative_path_tcancelled=$func_relative_path_tbindir\n          break\n        fi\n        func_relative_path_result=../$func_relative_path_result\n        ;;\n    esac\n  done\n\n  # Now calculate path; take care to avoid doubling-up slashes.\n  func_stripname '' '/' \"$func_relative_path_result\"\n  func_relative_path_result=$func_stripname_result\n  func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n  if test \"x$func_stripname_result\" != x ; then\n    func_relative_path_result=${func_relative_path_result}/${func_stripname_result}\n  fi\n\n  # Normalisation. If bindir is libdir, return empty string,\n  # else relative path ending with a slash; either way, target\n  # file name can be directly appended.\n  if test ! -z \"$func_relative_path_result\"; then\n    func_stripname './' '' \"$func_relative_path_result/\"\n    func_relative_path_result=$func_stripname_result\n  fi\n}\n\n# The name of this program:\nfunc_dirname_and_basename \"$progpath\"\nprogname=$func_basename_result\n\n# Make sure we have an absolute path for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=$func_dirname_result\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\n  *)\n     save_IFS=\"$IFS\"\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=\"$save_IFS\"\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=\"$save_IFS\"\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\nesac\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed=\"${SED}\"' -e 1s/^X//'\nsed_quote_subst='s/\\([`\"$\\\\]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s,[].[^$\\\\*\\/],\\\\&,g'\n\n# Sed substitution that converts a w32 file name or path\n# which contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nlt_sed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-`\\' parameter expansions in output of double_quote_subst that were\n# `\\'-ed in input to the same.  If an odd number of `\\' preceded a '$'\n# in input to double_quote_subst, that '$' was protected from expansion.\n# Since each input `\\' is now two `\\'s, look for any number of runs of\n# four `\\'s followed by two `\\'s and then a '$'.  `\\' that '$'.\nbs='\\\\'\nbs2='\\\\\\\\'\nbs4='\\\\\\\\\\\\\\\\'\ndollar='\\$'\nsed_double_backslash=\"\\\n  s/$bs4/&\\\\\n/g\n  s/^$bs2$dollar/$bs&/\n  s/\\\\([^$bs]\\\\)$bs2$dollar/\\\\1$bs2$bs$dollar/g\n  s/\\n//g\"\n\n# Standard options:\nopt_dry_run=false\nopt_help=false\nopt_quiet=false\nopt_verbose=false\nopt_warning=:\n\n# func_echo arg...\n# Echo program name prefixed message, along with the current mode\n# name if it has been set yet.\nfunc_echo ()\n{\n    $ECHO \"$progname: ${opt_mode+$opt_mode: }$*\"\n}\n\n# func_verbose arg...\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $opt_verbose && func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n# func_error arg...\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $ECHO \"$progname: ${opt_mode+$opt_mode: }\"${1+\"$@\"} 1>&2\n}\n\n# func_warning arg...\n# Echo program name prefixed warning message to standard error.\nfunc_warning ()\n{\n    $opt_warning && $ECHO \"$progname: ${opt_mode+$opt_mode: }warning: \"${1+\"$@\"} 1>&2\n\n    # bash bug again:\n    :\n}\n\n# func_fatal_error arg...\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n# func_fatal_help arg...\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    func_error ${1+\"$@\"}\n    func_fatal_error \"$help\"\n}\nhelp=\"Try \\`$progname --help' for more information.\"  ## default\n\n\n# func_grep expression filename\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_mkdir_p directory-path\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    my_directory_path=\"$1\"\n    my_dir_list=\n\n    if test -n \"$my_directory_path\" && test \"$opt_dry_run\" != \":\"; then\n\n      # Protect directory names starting with `-'\n      case $my_directory_path in\n        -*) my_directory_path=\"./$my_directory_path\" ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$my_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        my_dir_list=\"$my_directory_path:$my_dir_list\"\n\n        # If the last portion added has no slash in it, the list is done\n        case $my_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        my_directory_path=`$ECHO \"$my_directory_path\" | $SED -e \"$dirname\"`\n      done\n      my_dir_list=`$ECHO \"$my_dir_list\" | $SED 's,:*$,,'`\n\n      save_mkdir_p_IFS=\"$IFS\"; IFS=':'\n      for my_dir in $my_dir_list; do\n\tIFS=\"$save_mkdir_p_IFS\"\n        # mkdir can fail with a `File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$my_dir\" 2>/dev/null || :\n      done\n      IFS=\"$save_mkdir_p_IFS\"\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$my_directory_path\" || \\\n        func_fatal_error \"Failed to create \\`$1'\"\n    fi\n}\n\n\n# func_mktempdir [string]\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, STRING is the basename for that directory.\nfunc_mktempdir ()\n{\n    my_template=\"${TMPDIR-/tmp}/${1-$progname}\"\n\n    if test \"$opt_dry_run\" = \":\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      my_tmpdir=\"${my_template}-$$\"\n    else\n\n      # If mktemp works, use that first and foremost\n      my_tmpdir=`mktemp -d \"${my_template}-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$my_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        my_tmpdir=\"${my_template}-${RANDOM-0}$$\"\n\n        save_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$my_tmpdir\"\n        umask $save_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$my_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory \\`$my_tmpdir'\"\n    fi\n\n    $ECHO \"$my_tmpdir\"\n}\n\n\n# func_quote_for_eval arg\n# Aesthetically quote ARG to be evaled later.\n# This function returns two values: FUNC_QUOTE_FOR_EVAL_RESULT\n# is double-quoted, suitable for a subsequent eval, whereas\n# FUNC_QUOTE_FOR_EVAL_UNQUOTED_RESULT has merely all characters\n# which are still active within double quotes backslashified.\nfunc_quote_for_eval ()\n{\n    case $1 in\n      *[\\\\\\`\\\"\\$]*)\n\tfunc_quote_for_eval_unquoted_result=`$ECHO \"$1\" | $SED \"$sed_quote_subst\"` ;;\n      *)\n        func_quote_for_eval_unquoted_result=\"$1\" ;;\n    esac\n\n    case $func_quote_for_eval_unquoted_result in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting, command substitution and and variable\n      # expansion for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        func_quote_for_eval_result=\"\\\"$func_quote_for_eval_unquoted_result\\\"\"\n        ;;\n      *)\n        func_quote_for_eval_result=\"$func_quote_for_eval_unquoted_result\"\n    esac\n}\n\n\n# func_quote_for_expand arg\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\tmy_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        my_arg=\"$1\" ;;\n    esac\n\n    case $my_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        my_arg=\"\\\"$my_arg\\\"\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=\"$my_arg\"\n}\n\n\n# func_show_eval cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$my_cmd\"\n      my_status=$?\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n\n# func_show_eval_locale cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$lt_user_locale\n\t    $my_cmd\"\n      my_status=$?\n      eval \"$lt_safe_locale\"\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n# func_tr_sh\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n  case $1 in\n  [0-9]* | *[!a-zA-Z0-9_]*)\n    func_tr_sh_result=`$ECHO \"$1\" | $SED 's/^\\([0-9]\\)/_\\1/; s/[^a-zA-Z0-9_]/_/g'`\n    ;;\n  * )\n    func_tr_sh_result=$1\n    ;;\n  esac\n}\n\n\n# func_version\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $opt_debug\n\n    $SED -n '/(C)/!b go\n\t:more\n\t/\\./!{\n\t  N\n\t  s/\\n# / /\n\t  b more\n\t}\n\t:go\n\t/^# '$PROGRAM' (GNU /,/# warranty; / {\n        s/^# //\n\ts/^# *$//\n        s/\\((C)\\)[ 0-9,-]*\\( [1-9][0-9]*\\)/\\1\\2/\n        p\n     }' < \"$progpath\"\n     exit $?\n}\n\n# func_usage\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $opt_debug\n\n    $SED -n '/^# Usage:/,/^#  *.*--help/ {\n        s/^# //\n\ts/^# *$//\n\ts/\\$progname/'$progname'/\n\tp\n    }' < \"$progpath\"\n    echo\n    $ECHO \"run \\`$progname --help | more' for full usage\"\n    exit $?\n}\n\n# func_help [NOEXIT]\n# Echo long help message to standard output and exit,\n# unless 'noexit' is passed as argument.\nfunc_help ()\n{\n    $opt_debug\n\n    $SED -n '/^# Usage:/,/# Report bugs to/ {\n\t:print\n        s/^# //\n\ts/^# *$//\n\ts*\\$progname*'$progname'*\n\ts*\\$host*'\"$host\"'*\n\ts*\\$SHELL*'\"$SHELL\"'*\n\ts*\\$LTCC*'\"$LTCC\"'*\n\ts*\\$LTCFLAGS*'\"$LTCFLAGS\"'*\n\ts*\\$LD*'\"$LD\"'*\n\ts/\\$with_gnu_ld/'\"$with_gnu_ld\"'/\n\ts/\\$automake_version/'\"`(${AUTOMAKE-automake} --version) 2>/dev/null |$SED 1q`\"'/\n\ts/\\$autoconf_version/'\"`(${AUTOCONF-autoconf} --version) 2>/dev/null |$SED 1q`\"'/\n\tp\n\td\n     }\n     /^# .* home page:/b print\n     /^# General help using/b print\n     ' < \"$progpath\"\n    ret=$?\n    if test -z \"$1\"; then\n      exit $ret\n    fi\n}\n\n# func_missing_arg argname\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $opt_debug\n\n    func_error \"missing argument for $1.\"\n    exit_cmd=exit\n}\n\n\n# func_split_short_opt shortopt\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nfunc_split_short_opt ()\n{\n    my_sed_short_opt='1s/^\\(..\\).*$/\\1/;q'\n    my_sed_short_rest='1s/^..\\(.*\\)$/\\1/;q'\n\n    func_split_short_opt_name=`$ECHO \"$1\" | $SED \"$my_sed_short_opt\"`\n    func_split_short_opt_arg=`$ECHO \"$1\" | $SED \"$my_sed_short_rest\"`\n} # func_split_short_opt may be replaced by extended shell implementation\n\n\n# func_split_long_opt longopt\n# Set func_split_long_opt_name and func_split_long_opt_arg shell\n# variables after splitting LONGOPT at the `=' sign.\nfunc_split_long_opt ()\n{\n    my_sed_long_opt='1s/^\\(--[^=]*\\)=.*/\\1/;q'\n    my_sed_long_arg='1s/^--[^=]*=//'\n\n    func_split_long_opt_name=`$ECHO \"$1\" | $SED \"$my_sed_long_opt\"`\n    func_split_long_opt_arg=`$ECHO \"$1\" | $SED \"$my_sed_long_arg\"`\n} # func_split_long_opt may be replaced by extended shell implementation\n\nexit_cmd=:\n\n\n\n\n\nmagic=\"%%%MAGIC variable%%%\"\nmagic_exe=\"%%%MAGIC EXE variable%%%\"\n\n# Global variables.\nnonopt=\npreserve_args=\nlo2o=\"s/\\\\.lo\\$/.${objext}/\"\no2lo=\"s/\\\\.${objext}\\$/.lo/\"\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n# func_append var value\n# Append VALUE to the end of shell variable VAR.\nfunc_append ()\n{\n    eval \"${1}=\\$${1}\\${2}\"\n} # func_append may be replaced by extended shell implementation\n\n# func_append_quoted var value\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nfunc_append_quoted ()\n{\n    func_quote_for_eval \"${2}\"\n    eval \"${1}=\\$${1}\\\\ \\$func_quote_for_eval_result\"\n} # func_append_quoted may be replaced by extended shell implementation\n\n\n# func_arith arithmetic-term...\nfunc_arith ()\n{\n    func_arith_result=`expr \"${@}\"`\n} # func_arith may be replaced by extended shell implementation\n\n\n# func_len string\n# STRING may not start with a hyphen.\nfunc_len ()\n{\n    func_len_result=`expr \"${1}\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n} # func_len may be replaced by extended shell implementation\n\n\n# func_lo2o object\nfunc_lo2o ()\n{\n    func_lo2o_result=`$ECHO \"${1}\" | $SED \"$lo2o\"`\n} # func_lo2o may be replaced by extended shell implementation\n\n\n# func_xform libobj-or-source\nfunc_xform ()\n{\n    func_xform_result=`$ECHO \"${1}\" | $SED 's/\\.[^.]*$/.lo/'`\n} # func_xform may be replaced by extended shell implementation\n\n\n# func_fatal_configuration arg...\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func_error ${1+\"$@\"}\n    func_error \"See the $PACKAGE documentation for more information.\"\n    func_fatal_error \"Fatal configuration error.\"\n}\n\n\n# func_config\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n# func_features\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test \"$build_libtool_libs\" = yes; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test \"$build_old_libs\" = yes; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n# func_enable_tag tagname\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n  # Global variable:\n  tagname=\"$1\"\n\n  re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n  re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n  sed_extractcf=\"/$re_begincf/,/$re_endcf/p\"\n\n  # Validate tagname.\n  case $tagname in\n    *[!-_A-Za-z0-9,/]*)\n      func_fatal_error \"invalid tag name: $tagname\"\n      ;;\n  esac\n\n  # Don't test for the \"default\" C tag, as we know it's\n  # there but not specially marked.\n  case $tagname in\n    CC) ;;\n    *)\n      if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\ttaglist=\"$taglist $tagname\"\n\n\t# Evaluate the configuration.  Be careful to quote the path\n\t# and the sed script, to avoid splitting on whitespace, but\n\t# also don't use non-portable quotes within backquotes within\n\t# quotes we have to do it in 2 steps:\n\textractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\teval \"$extractedcf\"\n      else\n\tfunc_error \"ignoring unknown tag $tagname\"\n      fi\n      ;;\n  esac\n}\n\n# func_check_version_match\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n  if test \"$package_revision\" != \"$macro_revision\"; then\n    if test \"$VERSION\" != \"$macro_version\"; then\n      if test -z \"$macro_version\"; then\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      fi\n    else\n      cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n    fi\n\n    exit $EXIT_MISMATCH\n  fi\n}\n\n\n# Shorthand for --mode=foo, only valid as the first argument\ncase $1 in\nclean|clea|cle|cl)\n  shift; set dummy --mode clean ${1+\"$@\"}; shift\n  ;;\ncompile|compil|compi|comp|com|co|c)\n  shift; set dummy --mode compile ${1+\"$@\"}; shift\n  ;;\nexecute|execut|execu|exec|exe|ex|e)\n  shift; set dummy --mode execute ${1+\"$@\"}; shift\n  ;;\nfinish|finis|fini|fin|fi|f)\n  shift; set dummy --mode finish ${1+\"$@\"}; shift\n  ;;\ninstall|instal|insta|inst|ins|in|i)\n  shift; set dummy --mode install ${1+\"$@\"}; shift\n  ;;\nlink|lin|li|l)\n  shift; set dummy --mode link ${1+\"$@\"}; shift\n  ;;\nuninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n  shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n  ;;\nesac\n\n\n\n# Option defaults:\nopt_debug=:\nopt_dry_run=false\nopt_config=false\nopt_preserve_dup_deps=false\nopt_features=false\nopt_finish=false\nopt_help=false\nopt_help_all=false\nopt_silent=:\nopt_warning=:\nopt_verbose=:\nopt_silent=false\nopt_verbose=false\n\n\n# Parse options once, thoroughly.  This comes as soon as possible in the\n# script to make things like `--version' happen as quickly as we can.\n{\n  # this just eases exit handling\n  while test $# -gt 0; do\n    opt=\"$1\"\n    shift\n    case $opt in\n      --debug|-x)\topt_debug='set -x'\n\t\t\tfunc_echo \"enabling shell trace mode\"\n\t\t\t$opt_debug\n\t\t\t;;\n      --dry-run|--dryrun|-n)\n\t\t\topt_dry_run=:\n\t\t\t;;\n      --config)\n\t\t\topt_config=:\nfunc_config\n\t\t\t;;\n      --dlopen|-dlopen)\n\t\t\toptarg=\"$1\"\n\t\t\topt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$optarg\"\n\t\t\tshift\n\t\t\t;;\n      --preserve-dup-deps)\n\t\t\topt_preserve_dup_deps=:\n\t\t\t;;\n      --features)\n\t\t\topt_features=:\nfunc_features\n\t\t\t;;\n      --finish)\n\t\t\topt_finish=:\nset dummy --mode finish ${1+\"$@\"}; shift\n\t\t\t;;\n      --help)\n\t\t\topt_help=:\n\t\t\t;;\n      --help-all)\n\t\t\topt_help_all=:\nopt_help=': help-all'\n\t\t\t;;\n      --mode)\n\t\t\ttest $# = 0 && func_missing_arg $opt && break\n\t\t\toptarg=\"$1\"\n\t\t\topt_mode=\"$optarg\"\ncase $optarg in\n  # Valid mode arguments:\n  clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n  # Catch anything else as an error\n  *) func_error \"invalid argument for $opt\"\n     exit_cmd=exit\n     break\n     ;;\nesac\n\t\t\tshift\n\t\t\t;;\n      --no-silent|--no-quiet)\n\t\t\topt_silent=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --no-warning|--no-warn)\n\t\t\topt_warning=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --no-verbose)\n\t\t\topt_verbose=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --silent|--quiet)\n\t\t\topt_silent=:\nfunc_append preserve_args \" $opt\"\n        opt_verbose=false\n\t\t\t;;\n      --verbose|-v)\n\t\t\topt_verbose=:\nfunc_append preserve_args \" $opt\"\nopt_silent=false\n\t\t\t;;\n      --tag)\n\t\t\ttest $# = 0 && func_missing_arg $opt && break\n\t\t\toptarg=\"$1\"\n\t\t\topt_tag=\"$optarg\"\nfunc_append preserve_args \" $opt $optarg\"\nfunc_enable_tag \"$optarg\"\n\t\t\tshift\n\t\t\t;;\n\n      -\\?|-h)\t\tfunc_usage\t\t\t\t;;\n      --help)\t\tfunc_help\t\t\t\t;;\n      --version)\tfunc_version\t\t\t\t;;\n\n      # Separate optargs to long options:\n      --*=*)\n\t\t\tfunc_split_long_opt \"$opt\"\n\t\t\tset dummy \"$func_split_long_opt_name\" \"$func_split_long_opt_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      # Separate non-argument short options:\n      -\\?*|-h*|-n*|-v*)\n\t\t\tfunc_split_short_opt \"$opt\"\n\t\t\tset dummy \"$func_split_short_opt_name\" \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      --)\t\tbreak\t\t\t\t\t;;\n      -*)\t\tfunc_fatal_help \"unrecognized option \\`$opt'\" ;;\n      *)\t\tset dummy \"$opt\" ${1+\"$@\"};\tshift; break  ;;\n    esac\n  done\n\n  # Validate options:\n\n  # save first non-option argument\n  if test \"$#\" -gt 0; then\n    nonopt=\"$opt\"\n    shift\n  fi\n\n  # preserve --debug\n  test \"$opt_debug\" = : || func_append preserve_args \" --debug\"\n\n  case $host in\n    *cygwin* | *mingw* | *pw32* | *cegcc*)\n      # don't eliminate duplications in $postdeps and $predeps\n      opt_duplicate_compiler_generated_deps=:\n      ;;\n    *)\n      opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n      ;;\n  esac\n\n  $opt_help || {\n    # Sanity checks first:\n    func_check_version_match\n\n    if test \"$build_libtool_libs\" != yes && test \"$build_old_libs\" != yes; then\n      func_fatal_configuration \"not configured to build any kind of library\"\n    fi\n\n    # Darwin sucks\n    eval std_shrext=\\\"$shrext_cmds\\\"\n\n    # Only execute mode is allowed to have -dlopen flags.\n    if test -n \"$opt_dlopen\" && test \"$opt_mode\" != execute; then\n      func_error \"unrecognized option \\`-dlopen'\"\n      $ECHO \"$help\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n\n    # Change the help message to a mode-specific one.\n    generic_help=\"$help\"\n    help=\"Try \\`$progname --help --mode=$opt_mode' for more information.\"\n  }\n\n\n  # Bail if the options were screwed\n  $exit_cmd $EXIT_FAILURE\n}\n\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\n# func_lalib_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null \\\n        | $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if `file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case \"$lalib_p_line\" in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test \"$lalib_p\" = yes\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    func_lalib_p \"$1\"\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=\"$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\"\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $opt_debug\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$save_ifs\n      eval cmd=\\\"$cmd\\\"\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# `FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $opt_debug\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case \"$lt_sysroot:$1\" in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result=\"=$func_stripname_result\"\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $opt_debug\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with \\`--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=${1}\n    if test \"$build_libtool_libs\" = yes; then\n      write_lobj=\\'${2}\\'\n    else\n      write_lobj=none\n    fi\n\n    if test \"$build_old_libs\" = yes; then\n      write_oldobj=\\'${3}\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"${write_libobj}\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $opt_debug\n  func_convert_core_file_wine_to_w32_result=\"$1\"\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"${func_convert_core_file_wine_to_w32_tmp}\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$lt_sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $opt_debug\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\"\"\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\" ; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=\"$func_convert_core_file_wine_to_w32_result\"\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $opt_debug\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: \\`$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $opt_debug\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$lt_sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $opt_debug\n  if test -z \"$2\" && test -n \"$1\" ; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  \\`$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=\"$1\"\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $opt_debug\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  \\`$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=\"$3\"\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $opt_debug\n  case $4 in\n  $1 ) func_to_host_path_result=\"$3$func_to_host_path_result\"\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via `$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $opt_debug\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $opt_debug\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=\"$1\"\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=\"$func_convert_core_msys_to_w32_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=\"$func_convert_core_file_wine_to_w32_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=\"$func_cygpath_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=\"$func_cygpath_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via `$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $opt_debug\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=\"func_convert_path_${func_stripname_result}\"\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $opt_debug\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=\"$1\"\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=\"$func_convert_core_msys_to_w32_result\"\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=\"$func_convert_core_path_wine_to_w32_result\"\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=\"$func_cygpath_result\"\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=\"$func_cygpath_result\"\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $opt_debug\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=\"$nonopt\"  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=\"$arg\"\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=\"$arg\"\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify \\`-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=\"$IFS\"; IFS=','\n\t  for arg in $args; do\n\t    IFS=\"$save_ifs\"\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=\"$save_ifs\"\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=\"$srcfile\"\n\t  srcfile=\"$arg\"\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with \\`-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=\"$func_basename_result\"\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from \\`$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name \\`$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=\"$func_basename_result\"\n    xdir=\"$func_dirname_result\"\n    lobj=${xdir}$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test \"$build_old_libs\" = yes; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test \"$pic_mode\" = no && test \"$deplibs_check_method\" != pass_all; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test \"$compiler_c_o\" = no; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.${objext}\n      lockfile=\"$output_obj.lock\"\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test \"$need_locks\" = yes; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test \"$need_locks\" = warn; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test \"$build_libtool_libs\" = yes; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test \"$pic_mode\" != no; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test \"$suppress_opt\" = yes; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test \"$build_old_libs\" = yes; then\n      if test \"$pic_mode\" != yes; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test \"$compiler_c_o\" = yes; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test \"$need_locks\" != no; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test \"$opt_mode\" = compile && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a \\`.o' file suitable for static linking\n  -static           only build a \\`.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a \\`standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix \\`.c' with the\nlibrary object suffix, \\`.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to \\`-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe \\`--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the \\`install' or \\`cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      \\`-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  Use a list of object files found in FILE to specify objects\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with \\`-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in \\`.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in \\`.la', then a libtool library is created,\nonly library objects (\\`.lo' files) may be specified, and \\`-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in \\`.a' or \\`.lib', then a standard library is created\nusing \\`ar' and \\`ranlib', or on Windows using \\`lib'.\n\nIf OUTPUT-FILE ends in \\`.lo' or \\`.${objext}', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode \\`$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try \\`$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test \"$opt_help\" = :; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | sed -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    sed '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $opt_debug\n    # The first argument is the command name.\n    cmd=\"$nonopt\"\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"\\`$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"\\`$file' was not linked with \\`-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find \\`$dlname' in \\`$dir' or \\`$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\t;;\n\n      *)\n\tfunc_warning \"\\`-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=\"$absdir\"\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=\"$magic\"\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if test \"X$opt_dry_run\" = Xfalse; then\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\"\\$cmd$args\"\n    else\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$opt_mode\" = execute && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $opt_debug\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"\\`$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument \\`$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and \\`=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  sed -e \"${sysroot_cmd} s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_silent && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the \\`-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the \\`$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the \\`$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the \\`$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to \\`/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest \"$opt_mode\" = finish && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $opt_debug\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$nonopt\" = \"$SHELL\" || test \"$nonopt\" = /bin/sh ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac; then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=no\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=yes ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test \"x$prev\" = x-m && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=yes\n    if test \"$isdir\" = yes; then\n      destdir=\"$dest\"\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=\"$func_dirname_result\"\n      destname=\"$func_basename_result\"\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"\\`$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"\\`$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=\"$func_dirname_result\"\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install \\`$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking \\`$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink \\`$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=\"$1\"\n\t  shift\n\n\t  srcname=\"$realname\"\n\t  test -n \"$relink_command\" && srcname=\"$realname\"T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=\"$stripme\"\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\"\"\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try `ln -sf' first, because the `ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=\"$destdir/$realname\"\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=\"$func_basename_result\"\n\tinstname=\"$dir/$name\"i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=\"$destfile\"\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to \\`$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test \"$build_old_libs\" = yes; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\"\"\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=\".exe\"\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script \\`$wrapper'\"\n\n\t  finalize=yes\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=\"$libdir/\"`$ECHO \"$lib\" | $SED 's%^.*/%%g'` ### testsuite: skip nested quoting test\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"\\`$lib' has not been installed in \\`$libdir'\"\n\t      finalize=no\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test \"$fast_install\" = no && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if test \"$finalize\" = yes; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=\"$func_basename_result\"\n\t        outputname=\"$tmpdir/$file\"\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_silent || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink \\`$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=\"$outputname\"\n\t      else\n\t        func_warning \"cannot relink \\`$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n\n      # Set up the ranlib parameters.\n      oldlib=\"$destdir/$name\"\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run \\`$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL $progpath $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$opt_mode\" = install && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $opt_debug\n    my_outputname=\"$1\"\n    my_originator=\"$2\"\n    my_pic_p=\"${3-no}\"\n    my_prefix=`$ECHO \"$my_originator\" | sed 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=\"${my_outputname}S.c\"\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=\"$output_objdir/${my_outputname}.nm\"\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for \\`$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined(__GNUC__) && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined(_WIN32) || defined(__CYGWIN__) || defined(_WIN32_WCE)\n/* DATA imports from DLLs on WIN32 con't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined(__osf__)\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test \"$dlself\" = yes; then\n\t  func_verbose \"generating symbol list for \\`$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from \\`$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=\"$output_objdir/$outputname.exp\"\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"${SED} -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"${SED} -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from \\`$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=\"$func_basename_result\"\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\"\"\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\" ; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=\"$func_basename_result\"\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\" ; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{\\\n  { \\\"$my_originator\\\", (void *) 0 },\"\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    if test \"X$my_pic_p\" != Xno; then\n\t      pic_flag_for_symtable=\" $pic_flag\"\n\t    fi\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=\"$output_objdir/${my_outputname}S.$objext\"\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for \\`$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $opt_debug\n  win32_libid_type=\"unknown\"\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n      win32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t$SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s,.*,import,\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $opt_debug\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $opt_debug\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive which possess that section. Heuristic: eliminate\n    # all those which have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $opt_debug\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $opt_debug\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $opt_debug\n  if func_cygming_gnu_implib_p \"$1\" ; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\" ; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\"\"\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $opt_debug\n    f_ex_an_ar_dir=\"$1\"; shift\n    f_ex_an_ar_oldlib=\"$1\"\n    if test \"$lock_old_archive_extraction\" = yes; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test \"$lock_old_archive_extraction\" = yes; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $opt_debug\n    my_gentop=\"$1\"; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\"\"\n    my_xlib=\"\"\n    my_xabs=\"\"\n    my_xdir=\"\"\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=\"$my_xlib\" ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=\"$func_basename_result\"\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=\"$my_gentop/$my_xlib_u\"\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  darwin_base_archive=`basename \"$darwin_archive\"`\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches ; do\n\t      func_mkdir_p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n\t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=\"$my_oldobjs\"\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory in which it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ which is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options which match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"${outputname}:${output}:\\${LINENO}: libtool wrapper (GNU $PACKAGE$TIMESTAMP) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test \"$fast_install\" = yes; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | ${SED} 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: \\\\\\`\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n/* declarations of non-ANSI functions */\n#if defined(__MINGW32__)\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined(__CYGWIN__)\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined (other platforms) ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined(_MSC_VER)\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n# ifndef _INTPTR_T_DEFINED\n#  define _INTPTR_T_DEFINED\n#  define intptr_t int\n# endif\n#elif defined(__MINGW32__)\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined(__CYGWIN__)\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined (other platforms) ... */\n#endif\n\n#if defined(PATH_MAX)\n# define LT_PATHMAX PATH_MAX\n#elif defined(MAXPATHLEN)\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined (_WIN32) || defined (__MSDOS__) || defined (__DJGPP__) || \\\n  defined (__OS2__)\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free ((void *) stale); stale = 0; } \\\n} while (0)\n\n#if defined(LT_DEBUGWRAPPER)\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\nvolatile const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test \"$fast_install\" = yes; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  intptr_t rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (strcmp (argv[i], dumpscript_opt) == 0)\n\t{\nEOF\n\t    case \"$host\" in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (strcmp (argv[i], debug_opt) == 0)\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (strcmp (argv[i], ltwrapper_option_prefix) == 0)\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE$TIMESTAMP) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  int tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = q - p;\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (strcmp (str, pat) == 0)\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    int len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      int orig_value_len = strlen (orig_value);\n      int add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      int len = strlen (new_value);\n      while (((len = strlen (new_value)) > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[len-1] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $opt_debug\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $opt_debug\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # which system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll which has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=no\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=\"${wl}-single_module\"\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test \"$build_libtool_libs\" = yes && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=\"$1\"\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  if test \"$preload\" = no; then\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=yes\n\t  fi\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test \"$dlself\" = no; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test \"$prev\" = dlprefiles; then\n\t      dlself=yes\n\t    elif test \"$prev\" = dlfiles && test \"$dlopen_self\" != yes; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test \"$prev\" = dlfiles; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=\"$arg\"\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file \\`$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test \"$pic_object\" = none &&\n\t\t   test \"$non_pic_object\" = none; then\n\t\t  func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=\"$func_dirname_result\"\n\n\t\tif test \"$pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=\"$xdir$pic_object\"\n\n\t\t  if test \"$prev\" = dlfiles; then\n\t\t    if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test \"$prev\" = dlprefiles; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=\"$pic_object\"\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test \"$non_pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=\"$xdir$non_pic_object\"\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t\t    arg=\"$non_pic_object\"\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=\"$pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=\"$func_dirname_result\"\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file \\`$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=\"-$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test \"$prev\" = rpath; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=\"$arg\"\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"\\`-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test \"X$arg\" = \"X-export-symbols\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between \\`-L' and \\`$1'\"\n\t  else\n\t    func_fatal_error \"need path for \\`-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of \\`$dir'\"\n\t  dir=\"$absdir\"\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test \"X$arg\" = \"X-lc\" || test \"X$arg\" = \"X-lm\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  esac\n\telif test \"X$arg\" = \"X-lc_r\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=\"${wl}-multi_module\"\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"\\`-no-install' is ignored for $host\"\n\t  func_warning \"assuming \\`-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-flto*|-fwhopr*|-fuse-linker-plugin)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test \"$pic_object\" = none &&\n\t     test \"$non_pic_object\" = none; then\n\t    func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=\"$func_dirname_result\"\n\n\t  if test \"$pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=\"$xdir$pic_object\"\n\n\t    if test \"$prev\" = dlfiles; then\n\t      if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test \"$prev\" = dlprefiles; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=\"$pic_object\"\n\t  fi\n\n\t  # Non-PIC object.\n\t  if test \"$non_pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=\"$xdir$non_pic_object\"\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t      arg=\"$non_pic_object\"\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=\"$pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=\"$func_dirname_result\"\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test \"$prev\" = dlfiles; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test \"$prev\" = dlprefiles; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prevarg' option requires an argument\"\n\n    if test \"$export_dynamic\" = yes && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=\"$func_basename_result\"\n    libobjs_save=\"$libobjs\"\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\${$shlibpath_var}\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=\"$func_dirname_result$objdir\"\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps ; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test \"$linkmode\" = lib; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can \\`-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=no\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test \"$linkmode,$pass\" = \"lib,link\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n      fi\n\n      if test \"$linkmode,$pass\" = \"lib,link\" ||\n\t test \"$linkmode,$pass\" = \"prog,scan\"; then\n\tlibs=\"$deplibs\"\n\tdeplibs=\n      fi\n      if test \"$linkmode\" = prog; then\n\tcase $pass in\n\tdlopen) libs=\"$dlfiles\" ;;\n\tdlpreopen) libs=\"$dlprefiles\" ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test \"$linkmode,$pass\" = \"lib,dlpreopen\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=\"$dlprefiles\"\n      fi\n      if test \"$pass\" = dlopen; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=\"$deplibs\"\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=no\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test \"$linkmode\" != lib && test \"$linkmode\" != prog; then\n\t    func_warning \"\\`-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test \"$linkmode\" = lib; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=\"$searchdir/lib${name}${search_ext}\"\n\t      if test -f \"$lib\"; then\n\t\tif test \"$search_ext\" = \".la\"; then\n\t\t  found=yes\n\t\telse\n\t\t  found=no\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if test \"$found\" != yes; then\n\t    # deplib doesn't seem to be a libtool library\n\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  else # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=\"$l\"\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\" ; then # only static version available\n\t\t    found=no\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=\"$func_dirname_result\"\n\t\t    lib=$ladir/$old_library\n\t\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test \"$pass\" = conv && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" = conv; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test \"$pass\" = scan; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"\\`-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test \"$pass\" = link; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=no\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=yes\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=yes\n\t\t;;\n\t      esac\n\t      if test \"$valid_a_lib\" != yes; then\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" != link; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test \"$linkmode\" = prog; then\n\t    if test \"$pass\" = dlpreopen || test \"$dlopen_support\" != yes || test \"$build_libtool_libs\" = no; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=yes\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\tif test \"$found\" = yes || test -f \"$lib\"; then :\n\telse\n\t  func_fatal_error \"cannot find the library \\`$lib' or unhandled argument \\`$deplib'\"\n\tfi\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=\"$func_dirname_result\"\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test \"$linkmode,$pass\" = \"lib,link\" ||\n\t   test \"$linkmode,$pass\" = \"prog,scan\" ||\n\t   { test \"$linkmode\" != prog && test \"$linkmode\" != lib; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test \"$pass\" = conv; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test \"$linkmode\" != prog && test \"$linkmode\" != lib; then\n\t    func_fatal_error \"\\`$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test \"$prefer_static_libs\" = yes ||\n\t     test \"$prefer_static_libs,$installed\" = \"built,no\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=\"$l\"\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test \"$pass\" = dlopen; then\n\t  if test -z \"$libdir\"; then\n\t    func_fatal_error \"cannot -dlopen a convenience library: \\`$lib'\"\n\t  fi\n\t  if test -z \"$dlname\" ||\n\t     test \"$dlopen_support\" != yes ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=\"$ladir\" ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of \\`$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=\"$ladir\"\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=\"$func_basename_result\"\n\n\t# Find the relevant object directory and library name.\n\tif test \"X$installed\" = Xyes; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library \\`$lib' was moved.\"\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    libdir=\"$abs_ladir\"\n\t  else\n\t    dir=\"$lt_sysroot$libdir\"\n\t    absdir=\"$lt_sysroot$libdir\"\n\t  fi\n\t  test \"X$hardcode_automatic\" = Xyes && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=\"$ladir/$objdir\"\n\t    absdir=\"$abs_ladir/$objdir\"\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test \"$pass\" = dlpreopen; then\n\t  if test -z \"$libdir\" && test \"$linkmode\" = prog; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: \\`$lib'\"\n\t  fi\n\t  case \"$host\" in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test \"$linkmode\" = lib; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test \"$linkmode\" = prog && test \"$pass\" != link; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=no\n\t  if test \"$link_all_deplibs\" != no || test -z \"$library_names\" ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    linkalldeplibs=yes\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if test \"$linkalldeplibs\" = yes; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test \"$prefer_static_libs\" = no ||\n\t         test \"$prefer_static_libs,$installed\" = \"built,yes\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\" ; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case \"$temp_rpath:\" in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if test \"$alldeplibs\" = yes &&\n\t     { test \"$deplibs_check_method\" = pass_all ||\n\t       { test \"$build_libtool_libs\" = yes &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test \"$use_static_libs\" = built && test \"$installed\" = yes; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test \"$use_static_libs\" = no || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test \"$installed\" = no; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\"\"\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=\"$dlpremoduletest\"\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test \"$shouldnotlink\" = yes && test \"$pass\" = link; then\n\t    echo\n\t    if test \"$linkmode\" = prog; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test \"$linkmode\" = lib &&\n\t     test \"$hardcode_into_libs\" = yes; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=\"$1\"\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=\"$dlname\"\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=\"-$major\"\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=\"$realname\"\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=\"$soname\"\n\t    func_basename \"$soroot\"\n\t    soname=\"$func_basename_result\"\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from \\`$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for \\`$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test \"$linkmode\" = prog || test \"$opt_mode\" != relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test \"$hardcode_direct\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv4*uw2*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we can not\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null ; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\" ; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=\"$dir/$old_library\"\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=\"$dir/$old_library\"\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test \"$hardcode_minus_L\" = no; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=\"$dir\" ;;\n\t\tesac\n\t\tadd_dir=\"-L$dir\"\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = no; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test \"$hardcode_direct\" = yes &&\n\t         test \"$hardcode_direct_absolute\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t      elif test \"$hardcode_minus_L\" = yes; then\n\t\tadd_dir=\"-L$absdir\"\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = yes; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test \"$lib_linked\" != yes; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test \"$hardcode_direct\" != yes &&\n\t\t test \"$hardcode_minus_L\" != yes &&\n\t\t test \"$hardcode_shlibpath_var\" = yes; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test \"$linkmode\" = prog || test \"$opt_mode\" = relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test \"$hardcode_direct\" = yes &&\n\t       test \"$hardcode_direct_absolute\" = no; then\n\t      add=\"$libdir/$linklib\"\n\t    elif test \"$hardcode_minus_L\" = yes; then\n\t      add_dir=\"-L$libdir\"\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_shlibpath_var\" = yes; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_automatic\" = yes; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\" ; then\n\t\tadd=\"$inst_prefix_dir$libdir/$linklib\"\n\t      else\n\t\tadd=\"$libdir/$linklib\"\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=\"-L$libdir\"\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=\"-l$name\"\n\t    fi\n\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test \"$linkmode\" = prog; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test \"$hardcode_direct\" != unsupported; then\n\t    test -n \"$old_library\" && linklib=\"$old_library\"\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test \"$build_libtool_libs\" = yes; then\n\t  # Not a shared library\n\t  if test \"$deplibs_check_method\" != pass_all; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system can not link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test \"$module\" = yes; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test \"$build_old_libs\" = no; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test \"$linkmode\" = lib; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test \"$hardcode_into_libs\" != yes ||\n\t       test \"$build_old_libs\" = yes ||\n\t       test \"$link_static\" = yes; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=\"$temp_deplibs\"\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test \"$link_static\" = no && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test \"$link_all_deplibs\" != no; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=\"$deplib\" ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=\"$dir\" ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of \\`$dir'\"\n\t\t    absdir=\"$dir\"\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`${SED} -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\" ; then\n\t\t    for tmp in $deplibrary_names ; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\" ; then\n\t\t      depdepl=\"$absdir/$objdir/$depdepl\"\n\t\t      darwin_install_name=`${OTOOL} -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`${OTOOL64} -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" ${wl}-dylib_file ${wl}${darwin_install_name}:${depdepl}\"\n\t\t      func_append linker_flags \" -dylib_file ${darwin_install_name}:${depdepl}\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=\"-L$absdir/$objdir\"\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"\\`$deplib' seems to be moved\"\n\n\t\t  path=\"-L$absdir\"\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test \"$pass\" = link; then\n\tif test \"$linkmode\" = \"prog\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=\"$newdependency_libs\"\n      if test \"$pass\" = dlpreopen; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test \"$pass\" != dlopen; then\n\tif test \"$pass\" != conv; then\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\tfi\n\n\tif test \"$linkmode,$pass\" != \"prog,link\"; then\n\t  vars=\"deplibs\"\n\telse\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs ; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\"\"\n\t  ;;\n\tesac\n\tif test -n \"$i\" ; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test \"$linkmode\" = prog; then\n      dlfiles=\"$newdlfiles\"\n    fi\n    if test \"$linkmode\" = prog || test \"$linkmode\" = lib; then\n      dlprefiles=\"$newdlprefiles\"\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"\\`-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=\"$output\"\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form `libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest \"$module\" = no && \\\n\t  func_fatal_help \"libtool library \\`$output' must begin with \\`lib'\"\n\n\tif test \"$need_lib_prefix\" != no; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test \"$deplibs_check_method\" != pass_all; then\n\t  func_fatal_error \"cannot build libtool library \\`$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test \"$dlself\" != no && \\\n\tfunc_warning \"\\`-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test \"$#\" -gt 1 && \\\n\tfunc_warning \"ignoring multiple \\`-rpath's for a libtool library\"\n\n      install_libdir=\"$1\"\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test \"$build_libtool_libs\" = yes; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a `.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"\\`-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"\\`-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=\"$IFS\"; IFS=':'\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=\"$save_ifs\"\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to \\`-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=\"$1\"\n\t  number_minor=\"$2\"\n\t  number_revision=\"$3\"\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # which has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_revision\"\n\t    ;;\n\t  freebsd-aout|freebsd-elf|qnx|sunos)\n\t    current=\"$number_major\"\n\t    revision=\"$number_minor\"\n\t    age=\"0\"\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_minor\"\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=\"$1\"\n\t  revision=\"$2\"\n\t  age=\"$3\"\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT \\`$current' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION \\`$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE \\`$age' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE \\`$age' is greater than the current interface number \\`$current'\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"${wl}-compatibility_version ${wl}$minor_current ${wl}-current_version ${wl}$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\";\n\t  ;;\n\n\tfreebsd-elf)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test \"X$lt_irix_increment\" = \"Xno\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=\"$verstring_prefix$major.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring_prefix$major.$iface:$verstring\"\n\t  done\n\n\t  # Before this point, $major must not contain `.'.\n\t  major=.$major\n\t  versuffix=\"$major.$revision\"\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\".$current.$age.$revision\"\n\t  verstring=\"$current.$age.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring:${iface}.0\"\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":${current}.0\"\n\t  ;;\n\n\tqnx)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tsunos)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\"\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 filesystems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=\"-$major\"\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type \\`$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=\"0.0\"\n\t    ;;\n\t  esac\n\t  if test \"$need_version\" = no; then\n\t    versuffix=\n\t  else\n\t    versuffix=\".0.0\"\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test \"$avoid_version\" = yes && test \"$need_version\" = no; then\n\t  major=\n\t  versuffix=\n\t  verstring=\"\"\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test \"$allow_undefined\" = yes; then\n\t  if test \"$allow_undefined_flag\" = unsupported; then\n\t    func_warning \"undefined symbols not allowed in $host shared libraries\"\n\t    build_libtool_libs=no\n\t    build_old_libs=yes\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=\"$no_undefined_flag\"\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" \"yes\"\n      func_append libobjs \" $symfileobj\"\n      test \"X$libobjs\" = \"X \" && libobjs=\n\n      if test \"$opt_mode\" != relink; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/${libname}${release}.*)\n\t       if test \"X$precious_files_regex\" != \"X\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test \"$build_old_libs\" = yes && test \"$build_libtool_libs\" != convenience ; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.${libext}$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test \"$hardcode_into_libs\" != yes || test \"$build_old_libs\" = yes; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=\"$dlfiles\"\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=\"$dlprefiles\"\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test \"$build_libtool_libs\" = yes; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test \"$build_libtool_need_lc\" = \"yes\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\"\"\n\tversuffix=\"\"\n\tmajor=\"\"\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\"\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\" ; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\"\"\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\" ; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest \"$want_nocaseglob\" = yes && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test \"$want_nocaseglob\" = yes; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=\"$potent_lib\"\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | ${SED} 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=\"$potliblink\";;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's,[^/]*$,,'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\"\"\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=\"$potent_lib\" # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\"\"\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\"\"\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t    for i in $predeps $postdeps ; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s,$i,,\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test \"X$deplibs_check_method\" = \"Xnone\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test \"$droppeddeps\" = yes; then\n\t  if test \"$module\" = yes; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test \"$build_old_libs\" = no; then\n\t      oldlibs=\"$output_objdir/$libname.$libext\"\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test \"$allow_undefined\" = no; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test \"$build_old_libs\" = no; then\n\t\toldlibs=\"$output_objdir/$libname.$libext\"\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=\"$new_libs\"\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test \"$build_libtool_libs\" = yes; then\n\t# Remove ${wl} instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test \"$hardcode_into_libs\" = yes; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=\"$finalize_rpath\"\n\t  test \"$opt_mode\" != relink && rpath=\"$compile_rpath$rpath\"\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=\"$libdir\"\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=\"$hardcode_libdirs\"\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=\"$finalize_shlibpath\"\n\ttest \"$opt_mode\" != relink && shlibpath=\"$compile_shlibpath$shlibpath\"\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=\"$1\"\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=\"$realname\"\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=\"$output_objdir/$realname\"\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=\"$output_objdir/$libname.uexp\"\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    if test \"x`$SED 1q $export_symbols`\" != xEXPORTS; then\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=\"$export_symbols\"\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    fi\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test \"$always_export_symbols\" = yes || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for \\`$libname.la'\"\n\t    export_symbols=\"$output_objdir/$libname.exp\"\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=\"$save_ifs\"\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test \"$try_normal_branch\" = yes \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=${output_objdir}/${output_la}.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=\"$save_ifs\"\n\t    if test -n \"$export_symbols_regex\" && test \"X$skipped_export\" != \"X:\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=\"$export_symbols\"\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test \"$compiler_needs_object\" = yes &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=\"$output_objdir/${outputname}x\"\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test \"$thread_safe\" = yes && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test \"$opt_mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"$with_gnu_ld\" = yes; then\n\t    output=${output_objdir}/${output_la}.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"X$file_list_spec\" != X; then\n\t    output=${output_objdir}/${output_la}.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test \"$compiler_needs_object\" = yes; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-${k}.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test \"X$objlist\" = X ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test \"$k\" -eq 1 ; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-${k}.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-${k}.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\${concat_cmds}$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\${concat_cmds}~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    if ${skipped_export-false}; then\n\t      func_verbose \"generating symbol list for \\`$libname.la'\"\n\t      export_symbols=\"$output_objdir/$libname.exp\"\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    fi\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=\"$save_ifs\"\n\t      $opt_silent || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test \"$opt_mode\" = relink; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=\"$save_ifs\"\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          if ${skipped_export-false}; then\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=\"$export_symbols\"\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  fi\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=\"$IFS\"; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=\"$save_ifs\"\n\t  eval cmd=\\\"$cmd\\\"\n\t  $opt_silent || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test \"$opt_mode\" = relink; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=\"$save_ifs\"\n\n\t# Restore the uninstalled library and exit\n\tif test \"$opt_mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test \"$module\" = yes || test \"$export_dynamic\" = yes; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=\"$soname\"\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object \\`$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=\"$output\"\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # reload_cmds runs $LD directly, so let us get rid of\n      # -Wl from whole_archive_flag_spec and hope we can get by with\n      # turning comma into space..\n      wl=\n\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  reload_conv_objs=$reload_objs\\ `$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\telse\n\t  gentop=\"$output_objdir/${obj}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test \"$build_libtool_libs\" != yes && libobjs=\"$non_pic_objects\"\n\n      # Create the old-style object.\n      reload_objs=\"$objs$old_deplibs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.${libext}$/d; /\\.lib$/d; $lo2o\" | $NL2SP`\" $reload_conv_objs\" ### testsuite: skip nested quoting test\n\n      output=\"$obj\"\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$build_libtool_libs\" != yes; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      fi\n\n      if test -n \"$pic_flag\" || test \"$pic_mode\" != default; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=\"$libobj\"\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for programs\"\n\n      test \"$preload\" = yes \\\n        && test \"$dlopen_support\" = unknown \\\n\t&& test \"$dlopen_self\" = unknown \\\n\t&& test \"$dlopen_self_static\" = unknown && \\\n\t  func_warning \"\\`LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test \"$tagname\" = CXX ; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" ${wl}-bind_at_load\"\n\t      func_append finalize_command \" ${wl}-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=\"$new_libs\"\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`${ECHO} \"$libdir\" | ${SED} -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=\"$rpath\"\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=\"$rpath\"\n\n      if test -n \"$libobjs\" && test \"$build_old_libs\" = yes; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" \"no\"\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=yes\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=no\n        ;;\n      *cygwin* | *mingw* )\n        if test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      *)\n        if test \"$need_relink\" = no || test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      esac\n      if test \"$wrappers_required\" = no; then\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=\"$compile_command$compile_rpath\"\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.${objext}\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.${objext}\"'\n\tfi\n\n\texit $exit_status\n      fi\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test \"$no_install\" = yes; then\n\t# We don't need to create a wrapper script.\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$hardcode_action\" = relink; then\n\t# Fast installation is not supported\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\trelink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\n\tfunc_warning \"this platform does not like uninstalled shared libraries\"\n\tfunc_warning \"\\`$output' will be relinked during installation\"\n      else\n\tif test \"$fast_install\" != no; then\n\t  link_command=\"$finalize_var$compile_command$finalize_rpath\"\n\t  if test \"$fast_install\" = yes; then\n\t    relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n\t  else\n\t    # fast_install is set to needless\n\t    relink_command=\n\t  fi\n\telse\n\t  link_command=\"$compile_var$compile_command$compile_rpath\"\n\t  relink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\tfi\n      fi\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=\"$output_path/$objdir/lt-$output_name.c\"\n\t    cwrapper=\"$output_path/$output_name.exe\"\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\" ; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      if test \"$build_libtool_libs\" = convenience; then\n\toldobjs=\"$libobjs_save $symfileobj\"\n\taddlibs=\"$convenience\"\n\tbuild_libtool_libs=no\n      else\n\tif test \"$build_libtool_libs\" = module; then\n\t  oldobjs=\"$libobjs_save\"\n\t  build_libtool_libs=no\n\telse\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  if test \"$preload\" = yes && test -f \"$symfileobj\"; then\n\t    func_append oldobjs \" $symfileobj\"\n\t  fi\n\tfi\n\taddlibs=\"$old_convenience\"\n      fi\n\n      if test -n \"$addlibs\"; then\n\tgentop=\"$output_objdir/${outputname}x\"\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test \"$build_libtool_libs\" = yes; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=\"$func_basename_result\"\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\" ; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\${concat_cmds}$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test \"X$oldobjs\" = \"X\" ; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test \"$build_old_libs\" = yes && old_library=\"$libname.$libext\"\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL $progpath $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test \"$hardcode_automatic\" = yes ; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test \"$installed\" = yes; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=\"$output_objdir/$outputname\"i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=\"$func_basename_result\"\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=\"$newdependency_libs\"\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test \"x$bindir\" != x ;\n\t      then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that can not go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test \"$installed\" = no && test \"$need_relink\" = yes; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\n{ test \"$opt_mode\" = link || test \"$opt_mode\" = relink; } &&\n    func_mode_link ${1+\"$@\"}\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $opt_debug\n    RM=\"$nonopt\"\n    files=\n    rmforce=\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=yes ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=\"$func_dirname_result\"\n      if test \"X$dir\" = X.; then\n\todir=\"$objdir\"\n      else\n\todir=\"$dir/$objdir\"\n      fi\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n      test \"$opt_mode\" = uninstall && odir=\"$dir\"\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test \"$opt_mode\" = clean; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif test \"$rmforce\" = yes; then\n\tcontinue\n      fi\n\n      rmfiles=\"$file\"\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case \"$opt_mode\" in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" &&\n\t     test \"$pic_object\" != none; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" &&\n\t     test \"$non_pic_object\" != none; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test \"$opt_mode\" = clean ; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.${objext}\"\n\t    if test \"$fast_install\" = yes && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\" ; then\n\t      func_append rmfiles \" $odir/lt-${noexename}.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the ${objdir}s in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\n{ test \"$opt_mode\" = uninstall || test \"$opt_mode\" = clean; } &&\n    func_mode_uninstall ${1+\"$@\"}\n\ntest -z \"$opt_mode\" && {\n  help=\"$generic_help\"\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode \\`$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# in which we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n# vi:sw=2\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-glusterfs-7.2-7bafu5wprzvvhnabtlwumqs3qxil5tgh/spack-src/aclocal.m4": "# generated automatically by aclocal 1.13.4 -*- Autoconf -*-\n\n# Copyright (C) 1996-2013 Free Software Foundation, Inc.\n\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n# PARTICULAR PURPOSE.\n\nm4_ifndef([AC_CONFIG_MACRO_DIRS], [m4_defun([_AM_CONFIG_MACRO_DIRS], [])m4_defun([AC_CONFIG_MACRO_DIRS], [_AM_CONFIG_MACRO_DIRS($@)])])\nm4_ifndef([AC_AUTOCONF_VERSION],\n  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl\nm4_if(m4_defn([AC_AUTOCONF_VERSION]), [2.69],,\n[m4_warning([this file was generated for autoconf 2.69.\nYou have another version of autoconf.  It may work, but is not guaranteed to.\nIf you have problems, you may need to regenerate the build system entirely.\nTo do so, use the procedure documented by the package, typically 'autoreconf'.])])\n\n# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n#                 Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n#                 Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n#   This file is part of GNU Libtool.\n#\n# GNU Libtool is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; either version 2 of\n# the License, or (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html, or\n# obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n])\n\n# serial 57 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.58])dnl We use AC_INCLUDES_DEFAULT\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=\"$ltmain\"\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nm4_defun([_LT_CC_BASENAME],\n[for cc_temp in $1\"\"; do\n  case $cc_temp in\n    compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n    distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n    \\-*) ;;\n    *) break;;\n  esac\ndone\ncc_basename=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after `m4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options which allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test \"X${COLLECT_NAMES+set}\" != Xset; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a `.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=\"$lt_cv_prog_gnu_ld\"\n\nold_CC=\"$CC\"\nold_CFLAGS=\"$CFLAGS\"\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from `configure', and `config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# `config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=\"$ac_aux_dir/ltmain.sh\"\n])# _LT_PROG_LTMAIN\n\n\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the `libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to `config.status' so that its\n# declaration there will have the same value as in `configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags=\"_LT_TAGS\"dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the `libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into `config.status', and then the shell code to quote escape them in\n# for loops in `config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# `#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest $lt_write_fail = 0 && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n\\`$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test $[#] != 0\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest \"$silent\" = yes &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options which allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\" ; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=\"${ofile}T\"\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n\n# `$ECHO \"$ofile\" | sed 's%^.*/%%'` - Provide generalized library-building support services.\n# Generated automatically by $as_me ($PACKAGE$TIMESTAMP) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n#\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test \"X${COLLECT_NAMES+set}\" != Xset; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n  _LT_PROG_REPLACE_SHELLFNS\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    TIMESTAMP='$TIMESTAMP'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"${LT_MULTI_MODULE}\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test $_lt_result -eq 0; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=\"$save_LDFLAGS\"\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test $_lt_result -eq 0 && $GREP forced_load conftest >/dev/null 2>&1 ; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]]*)\n\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test \"$lt_cv_ld_exported_symbols_list\" = \"yes\"; then\n      _lt_dar_export_syms=' ${wl}-exported_symbols_list,$output_objdir/${libname}-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/${libname}-symbols.expsym ${lib}'\n    fi\n    if test \"$DSYMUTIL\" != \":\" && test \"$lt_cv_ld_force_load\" = \"no\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test \"$lt_cv_ld_force_load\" = \"yes\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience ${wl}-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=\"$_lt_dar_allow_undefined\"\n  case $cc_basename in\n     ifort*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test \"$_lt_dar_can_shared\" = \"yes\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod${_lt_dsymutil}\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dsymutil}\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring ${_lt_dar_single_mod}${_lt_dar_export_syms}${_lt_dsymutil}\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dar_export_syms}${_lt_dsymutil}\"\n    m4_if([$1], [CXX],\n[   if test \"$lt_cv_apple_cc_single_mod\" != \"yes\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dsymutil}\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dar_export_syms}${_lt_dsymutil}\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test \"${lt_cv_aix_libpath+set}\" = set; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=\"/usr/lib:/lib\"\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script which will find a shell with a builtin\n# printf (which we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\" \n}\n\ncase \"$ECHO\" in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[  --with-sysroot[=DIR] Search for dependent libraries within DIR\n                        (or the compiler's sysroot if not specified).],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase ${with_sysroot} in #(\n yes)\n   if test \"$GCC\" = yes; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([${with_sysroot}])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and in which our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest \"x$enable_libtool_lock\" != xno && enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=\"32\"\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=\"64\"\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out which ABI we are using.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test \"$lt_cv_prog_gnu_ld\" = yes; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|ppc*-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_i386\"\n\t    ;;\n\t  ppc64-*linux*|powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  ppc*-*linux*|powerpc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=\"$CFLAGS\"\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test x\"$lt_cv_cc_needs_belf\" != x\"yes\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=\"$SAVE_CFLAGS\"\n  fi\n  ;;\n*-*solaris*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=\"${LD-ld}_sol2\"\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=\"$enable_libtool_lock\"\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test \"$ac_status\" -eq 0; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test \"$ac_status\" -ne 0; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test \"x$lt_cv_ar_at_file\" = xno; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=\"$save_LDFLAGS\"\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=\"ABCD\"\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8 ; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test \"X\"`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test $i != 17 # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n $lt_cv_sys_max_cmd_len ; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"$cross_compiling\" = yes; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisbility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined(__GNUC__) && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext} 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"x$enable_dlopen\" != xyes; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=\"load_add_on\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=\"LoadLibrary\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=\"dlopen\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n  # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],[\n    lt_cv_dlopen=\"dyld\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=\"shl_load\"],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=\"shl_load\" lt_cv_dlopen_libs=\"-ldld\"],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=\"dlopen\"],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-lsvld\"],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=\"dld_link\" lt_cv_dlopen_libs=\"-ldld\"])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test \"x$lt_cv_dlopen\" != xno; then\n    enable_dlopen=yes\n  else\n    enable_dlopen=no\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=\"$CPPFLAGS\"\n    test \"x$ac_cv_header_dlfcn_h\" = xyes && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=\"$LDFLAGS\"\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=\"$LIBS\"\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test \"x$lt_cv_dlopen_self\" = xyes; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=\"$save_CPPFLAGS\"\n    LDFLAGS=\"$save_LDFLAGS\"\n    LIBS=\"$save_LIBS\"\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=\"nottested\"\nif test \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" = no && test \"$need_locks\" != no; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test \"$hard_links\" = no; then\n    AC_MSG_WARN([`$CC' does not support `-c -o', so `make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED(LT_OBJDIR, \"$lt_cv_objdir/\",\n  [Define to the sub-directory in which libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test \"X$_LT_TAGVAR(hardcode_automatic, $1)\" = \"Xyes\" ; then\n\n  # We can hardcode non-existent directories.\n  if test \"$_LT_TAGVAR(hardcode_direct, $1)\" != no &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" != no &&\n     test \"$_LT_TAGVAR(hardcode_minus_L, $1)\" != no; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test \"$_LT_TAGVAR(hardcode_action, $1)\" = relink ||\n   test \"$_LT_TAGVAR(inherit_rpath, $1)\" = yes; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test \"$shlibpath_overrides_runpath\" = yes ||\n     test \"$enable_shared\" = no; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\" ; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test \"$GCC\" = yes; then\n  case $host_os in\n    darwin*) lt_awk_arg=\"/^libraries:/,/LR/\" ;;\n    *) lt_awk_arg=\"/^libraries:/\" ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq=\"s,=\\([[A-Za-z]]:\\),\\1,g\" ;;\n    *) lt_sed_strip_eq=\"s,=/,/,g\" ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary.\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path/$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path/$lt_multi_os_dir\"\n    else\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS=\" \"; FS=\"/|\\n\";} {\n  lt_foo=\"\";\n  lt_count=0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo=\"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's,/\\([[A-Za-z]]:\\),\\1,g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=\".so\"\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='${libname}${release}${shared_ext}$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test \"$host_cpu\" = ia64; then\n    # AIX 5 supports IA64\n    library_names_spec='${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext}$versuffix $libname${shared_ext}'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line `#! .'.  This would cause the generated library to\n    # depend on `.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | ${CC} -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    if test \"$aix_use_runtimelinking\" = yes; then\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    else\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='${libname}${release}.a $libname.a'\n      soname_spec='${libname}${release}${shared_ext}$major'\n    fi\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; test $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='${libname}${shared_ext}'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=\".dll\"\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n    library_names_spec='${libname}.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=\"$LIB\"\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext} $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${major}$shared_ext ${libname}$shared_ext'\n  soname_spec='${libname}${release}${major}$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname$shared_ext'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix $libname${shared_ext}$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\ngnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    if test \"X$HPUX_IA64_MODE\" = X32; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n    fi\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test \"$lt_cv_prog_gnu_ld\" = yes; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext} $libname${shared_ext}'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib${libsuff} /lib${libsuff}\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Add ABI-specific directories to the system library path.\n  sys_lib_dlsearch_path_spec=\"/lib64 /usr/lib64 /lib /usr/lib\"\n\n  # Append ld.so.conf contents to the search path\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"$sys_lib_dlsearch_path_spec $lt_ld_extra\"\n\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=\"/usr/lib\"\n  need_lib_prefix=no\n  # Some older versions of OpenBSD (3.3 at least) *do* need versioned libs.\n  case $host_os in\n    openbsd3.3 | openbsd3.3.*)\tneed_version=yes ;;\n    *)\t\t\t\tneed_version=no  ;;\n  esac\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    case $host_os in\n      openbsd2.[[89]] | openbsd2.[[89]].*)\n\tshlibpath_overrides_runpath=no\n\t;;\n      *)\n\tshlibpath_overrides_runpath=yes\n\t;;\n      esac\n  else\n    shlibpath_overrides_runpath=yes\n  fi\n  ;;\n\nos2*)\n  libname_spec='$name'\n  shrext_cmds=\".dll\"\n  need_lib_prefix=no\n  library_names_spec='$libname${shared_ext} $libname.a'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=LIBPATH\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=\"$sys_lib_search_path_spec\"\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test \"$with_gnu_ld\" = yes; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec ;then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname${shared_ext}.$versuffix $libname${shared_ext}.$major $libname${shared_ext}'\n    soname_spec='$libname${shared_ext}.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=freebsd-elf\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test \"$with_gnu_ld\" = yes; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest \"$dynamic_linker\" = no && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test \"$GCC\" = yes; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test \"${lt_cv_sys_lib_search_path_spec+set}\" = set; then\n  sys_lib_search_path_spec=\"$lt_cv_sys_lib_search_path_spec\"\nfi\nif test \"${lt_cv_sys_lib_dlsearch_path_spec+set}\" = set; then\n  sys_lib_dlsearch_path_spec=\"$lt_cv_sys_lib_dlsearch_path_spec\"\nfi\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([], [sys_lib_dlsearch_path_spec], [2],\n    [Run-time system search path for libraries])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program which can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=\"$MAGIC_CMD\" # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=\"$MAGIC_CMD\"\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f $ac_dir/$1; then\n      lt_cv_path_MAGIC_CMD=\"$ac_dir/$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n  MAGIC_CMD=\"$lt_save_MAGIC_CMD\"\n  ;;\nesac])\nMAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program which can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test \"$withval\" = no || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test \"$GCC\" = yes; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=\"$ac_prog\"\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test \"$with_gnu_ld\" = yes; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=\"$ac_dir/$ac_prog\"\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest \"$with_gnu_ld\" != no && break\n\t;;\n      *)\n\ttest \"$with_gnu_ld\" != yes && break\n\t;;\n      esac\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\nelse\n  lt_cv_path_LD=\"$LD\" # Let the user override the test with a path.\nfi])\nLD=\"$lt_cv_path_LD\"\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test \"$GCC\" != yes; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test \"$GCC\" = yes; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib ${wl}-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# `unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# which responds to the $file_magic_cmd with a given extended regex.\n# If you have `file' or equivalent on your system and you're not sure\n# whether `pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  # func_win32_libid assumes BSD nm, so disallow it if using MS dumpbin.\n  if ( test \"$lt_cv_nm_interface\" = \"BSD nm\" && file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\ngnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=\"$NM\"\nelse\n  lt_nm_to_check=\"${ac_tool_prefix}nm\"\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=\"$lt_save_ifs\"\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=\"$ac_dir/$lt_tmp_nm\"\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\" ; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the `sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\tcase `\"$tmp_nm\" -B /dev/null 2>&1 | sed '1q'` in\n\t*/dev/null* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=\"$lt_save_ifs\"\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test \"$lt_cv_path_NM\" != \"no\"; then\n  NM=\"$lt_cv_path_NM\"\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test \"$DUMPBIN\" != \":\"; then\n    NM=\"$DUMPBIN\"\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh\n  # decide which to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=\"$ECHO\"\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test \"x$lt_cv_path_mainfest_tool\" != xyes; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=\"-lmw\")\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=\"-lm\")\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test \"$GCC\" = yes; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test \"$host_cpu\" = ia64; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^T .* \\(.*\\)$/extern int \\1();/p' -e 's/^$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([[^ ]]*\\)[[ ]]*$/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p'\"\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n -e 's/^: \\([[^ ]]*\\)[[ ]]*$/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\(lib[[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"lib\\2\\\", (void *) \\&\\2},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function\n    # and D for any global variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=0}; \\$ 0~/\\(\\).*\\|/{f=1}; {printf f ? \\\"T \\\" : \\\"D \\\"};\"\\\n\"     {split(\\$ 0, a, /\\||\\r/); split(a[2], s)};\"\\\n\"     s[1]~/^[@?]/{print s[1], s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print t[1], substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined(_WIN32) || defined(__CYGWIN__) || defined(_WIN32_WCE)\n/* DATA imports from DLLs on WIN32 con't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined(__osf__)\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* \\(.*\\) \\(.*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=\"conftstm.$ac_objext\"\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext}; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test \"$pipe_works\" = yes; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test \"$GXX\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test \"$host_cpu\" = ia64; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    if test \"$host_cpu\" != ia64; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64 which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test \"$GCC\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu)\n      case $cc_basename in\n      # old Intel for x86_64 which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec ;then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms which do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to AIX nm, but means don't demangle with GNU nm\n    # Also, AIX nm treats weak defined symbols like other global defined\n    # symbols, whereas GNU nm marks them as \"W\".\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=\"$ltdll_cmds\"\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ` (' and `)$', so one must not match beginning or\n  # end of line.  Example: `a|bc|.*d.*' will exclude the symbols `a' and `bc',\n  # as well as any symbol that contains `d'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test \"$GCC\" != yes; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test \"$with_gnu_ld\" = yes; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test \"$lt_use_gnu_ld_interface\" = yes; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='${wl}'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test \"$host_cpu\" != ia64; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file (1st line\n\t# is EXPORTS), use it as is; otherwise, prepend...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t  cp $export_symbols $output_objdir/$soname.def;\n\telse\n\t  echo EXPORTS > $output_objdir/$soname.def;\n\t  cat $export_symbols >> $output_objdir/$soname.def;\n\tfi~\n\t$CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test \"$host_os\" = linux-dietlibc; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test \"$tmp_diet\" = no\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\n        if test \"x$supports_anon_versioning\" = xyes; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t    cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t    echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t    $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test \"x$supports_anon_versioning\" = xyes; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t      cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t      echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t      $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 can not\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test \"$GCC\" = yes && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test \"$host_cpu\" = ia64; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\"\"\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to AIX nm, but means don't demangle with GNU nm\n\t# Also, AIX nm treats weak defined symbols like other global\n\t# defined symbols, whereas GNU nm marks them as \"W\".\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# need to do runtime linking.\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test $ld_flag = \"-brtl\" || test $ld_flag = \"-Wl,-brtl\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n      if test \"$GCC\" = yes; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test \"$aix_use_runtimelinking\" = yes; then\n\t  shared_flag=\"$shared_flag \"'${wl}-G'\n\tfi\n      else\n\t# not using gcc\n\tif test \"$host_cpu\" = ia64; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag='${wl}-G'\n\t  else\n\t    shared_flag='${wl}-bM:SRE'\n\t  fi\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test \"$aix_use_runtimelinking\" = yes; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then func_echo_all \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n      else\n\tif test \"$host_cpu\" = ia64; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t  if test \"$with_gnu_ld\" = yes; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  # This is similar to how AIX traditionally builds its shared libraries.\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=\".dll\"\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-dll~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t    sed -n -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' -e '1\\\\\\!p' < $export_symbols > $output_objdir/$soname.exp;\n\t  else\n\t    sed -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' < $export_symbols > $output_objdir/$soname.exp;\n\t  fi~\n\t  $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n\t  linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n\t  lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n\t  case $lt_outputfile in\n\t    *.exe|*.EXE) ;;\n\t    *)\n\t      lt_outputfile=\"$lt_outputfile.exe\"\n\t      lt_tool_outputfile=\"$lt_tool_outputfile.exe\"\n\t      ;;\n\t  esac~\n\t  if test \"$MANIFEST_TOOL\" != \":\" && test -f \"$lt_outputfile.manifest\"; then\n\t    $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n\t    $RM \"$lt_outputfile.manifest\";\n\t  fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=\".dll\"\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      ;;\n\n    hpux10*)\n      if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=\"$LDFLAGS\"\n\t   LDFLAGS=\"$LDFLAGS -shared ${wl}-exported_symbol ${wl}foo ${wl}-update_registry ${wl}/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=\"$save_LDFLAGS\"])\n\tif test \"$lt_cv_irix_exported_symbol\" = yes; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations ${wl}-exports_file ${wl}$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\telse\n\t  case $host_os in\n\t   openbsd[[01]].* | openbsd2.[[0-7]] | openbsd2.[[0-7]].*)\n\t     _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t     ;;\n\t   *)\n\t     _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t     ;;\n\t  esac\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY $libname INITINSTANCE\" > $output_objdir/$libname.def~$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~echo DATA >> $output_objdir/$libname.def~echo \" SINGLE NONSHARED\" >> $output_objdir/$libname.def~echo EXPORTS >> $output_objdir/$libname.def~emxexp $libobjs >> $output_objdir/$libname.def~$CC -Zdll -Zcrtdll -o $lib $libobjs $deplibs $compiler_flags $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_from_new_cmds, $1)='emximp -o $output_objdir/$libname.a $output_objdir/$libname.def'\n      ;;\n\n    osf3*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $pic_flag $libobjs $deplibs $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n\t$CC -shared${allow_undefined_flag} ${wl}-input ${wl}$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test \"$GCC\" = yes; then\n\twlarc='${wl}'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}-z ${wl}text ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -shared $pic_flag ${wl}-z ${wl}text ${wl}-M ${wl}$lib.exp ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $LD -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='${wl}'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands `-z linker_flag'.  GCC discards it without `$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test \"$GCC\" = yes; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test \"x$host_vendor\" = xsequent; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We can NOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test x$host_vendor = xsni; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test \"$enable_shared\" = yes && test \"$GCC\" = yes; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting ${shlibpath_var} if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=\"$CC\"\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report which library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test \"$enable_shared\" = yes && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n      test \"$enable_shared\" = yes && enable_static=no\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test \"$enable_shared\" = yes || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=\"$lt_save_CC\"\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test \"X$CXX\" != \"Xno\" &&\n    ( (test \"X$CXX\" = \"Xg++\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test \"X$CXX\" != \"Xg++\"))) ; then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_caught_CXX_error\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test \"$GXX\" = yes; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test \"$GXX\" = yes; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test \"$with_gnu_ld\" = yes; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='${wl}'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test \"$host_cpu\" = ia64; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\"\"\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # need to do runtime linking.\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n        if test \"$GXX\" = yes; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag=\"$shared_flag \"'${wl}-G'\n\t  fi\n        else\n          # not using gcc\n          if test \"$host_cpu\" = ia64; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test \"$aix_use_runtimelinking\" = yes; then\n\t      shared_flag='${wl}-G'\n\t    else\n\t      shared_flag='${wl}-bM:SRE'\n\t    fi\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n        if test \"$aix_use_runtimelinking\" = yes; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          _LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then func_echo_all \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n        else\n          if test \"$host_cpu\" = ia64; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t    if test \"$with_gnu_ld\" = yes; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    # This is similar to how AIX traditionally builds its shared\n\t    # libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=\".dll\"\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-dll~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t      $SED -n -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' -e '1\\\\\\!p' < $export_symbols > $output_objdir/$soname.exp;\n\t    else\n\t      $SED -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' < $export_symbols > $output_objdir/$soname.exp;\n\t    fi~\n\t    $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n\t    linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n\t    lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n\t    case $lt_outputfile in\n\t      *.exe|*.EXE) ;;\n\t      *)\n\t\tlt_outputfile=\"$lt_outputfile.exe\"\n\t\tlt_tool_outputfile=\"$lt_tool_outputfile.exe\"\n\t\t;;\n\t    esac~\n\t    func_to_tool_file \"$lt_outputfile\"~\n\t    if test \"$MANIFEST_TOOL\" != \":\" && test -f \"$lt_outputfile.manifest\"; then\n\t      $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n\t      $RM \"$lt_outputfile.manifest\";\n\t    fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file (1st line\n\t    # is EXPORTS), use it as is; otherwise, prepend...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t      cp $export_symbols $output_objdir/$soname.def;\n\t    else\n\t      echo EXPORTS > $output_objdir/$soname.def;\n\t      cat $export_symbols >> $output_objdir/$soname.def;\n\t    fi~\n\t    $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      gnu*)\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test \"$GXX\" = yes; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test $with_gnu_ld = no; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test $with_gnu_ld = no; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test \"$with_gnu_ld\" = no; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib ${wl}-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n\t\t$RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname  -o $lib ${wl}-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    if test \"x$supports_anon_versioning\" = xyes; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t\tcat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t\techo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t\t$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file ${wl}$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd2*)\n        # C++ shared libraries are fairly broken\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      openbsd*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n\t          echo \"-hidden\">> $lib.exp~\n\t          $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname ${wl}-input ${wl}$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib~\n\t          $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag}  -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t      $CC -G${allow_undefined_flag} ${wl}-M ${wl}$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands `-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -shared $pic_flag -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require `-G' NOT `-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -G -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We can NOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n\t      '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n\t      '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=\"$GXX\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test \"$_lt_caught_CXX_error\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case ${2} in\n  .*) func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%\\\\\\\\${2}\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%${2}\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case ${prev}${p} in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test $p = \"-L\" ||\n          test $p = \"-R\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test \"$pre_test_object_deps_done\" = no; then\n\t case ${prev} in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${prev}${p}\"\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} ${prev}${p}\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=\"${prev}${p}\"\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} ${prev}${p}\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\n\nlinux*)\n  case `$CC -V 2>&1 | sed 5q` in\n  *Sun\\ C*)\n    # Sun C++ 5.9\n\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\n\nsolaris*)\n  case $cc_basename in\n  CC* | sunCC*)\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    # Adding this requires a known-good setup of shared libraries for\n    # Sun compiler versions before 5.6, else PIC objects from an old\n    # archive will be linked into the output, leading to subtle bugs.\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | ${SED} -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test \"X$F77\" = \"Xno\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_F77\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$G77\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=\"$lt_save_CC\"\n  CFLAGS=\"$lt_save_CFLAGS\"\nfi # test \"$_lt_disable_F77\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test \"X$FC\" = \"Xno\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_FC\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$ac_cv_fc_compiler_gnu\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test \"$_lt_disable_FC\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=\"$LD\"\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=\"$LD\"\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=\"$lt_simple_compile_test_code\"\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test \"x${GCJFLAGS+set}\" = xset || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f $lt_ac_sed && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test $lt_ac_count -gt 10 && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test $lt_ac_count -gt $lt_ac_max; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[AC_MSG_CHECKING([whether the shell understands some XSI constructs])\n# Try some XSI features\nxsi_shell=no\n( _lt_dummy=\"a/b/c\"\n  test \"${_lt_dummy##*/},${_lt_dummy%/*},${_lt_dummy#??}\"${_lt_dummy%\"$_lt_dummy\"}, \\\n      = c,a/b,b/c, \\\n    && eval 'test $(( 1 + 1 )) -eq 2 \\\n    && test \"${#_lt_dummy}\" -eq 5' ) >/dev/null 2>&1 \\\n  && xsi_shell=yes\nAC_MSG_RESULT([$xsi_shell])\n_LT_CONFIG_LIBTOOL_INIT([xsi_shell='$xsi_shell'])\n\nAC_MSG_CHECKING([whether the shell understands \"+=\"])\nlt_shell_append=no\n( foo=bar; set foo baz; eval \"$[1]+=\\$[2]\" && test \"$foo\" = barbaz ) \\\n    >/dev/null 2>&1 \\\n  && lt_shell_append=yes\nAC_MSG_RESULT([$lt_shell_append])\n_LT_CONFIG_LIBTOOL_INIT([lt_shell_append='$lt_shell_append'])\n\nif ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PROG_FUNCTION_REPLACE (FUNCNAME, REPLACEMENT-BODY)\n# ------------------------------------------------------\n# In `$cfgfile', look for function FUNCNAME delimited by `^FUNCNAME ()$' and\n# '^} FUNCNAME ', and replace its body with REPLACEMENT-BODY.\nm4_defun([_LT_PROG_FUNCTION_REPLACE],\n[dnl {\nsed -e '/^$1 ()$/,/^} # $1 /c\\\n$1 ()\\\n{\\\nm4_bpatsubsts([$2], [$], [\\\\], [^\\([\t ]\\)], [\\\\\\1])\n} # Extended-shell $1 implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n])\n\n\n# _LT_PROG_REPLACE_SHELLFNS\n# -------------------------\n# Replace existing portable implementations of several shell functions with\n# equivalent extended shell implementations where those features are available..\nm4_defun([_LT_PROG_REPLACE_SHELLFNS],\n[if test x\"$xsi_shell\" = xyes; then\n  _LT_PROG_FUNCTION_REPLACE([func_dirname], [dnl\n    case ${1} in\n      */*) func_dirname_result=\"${1%/*}${2}\" ;;\n      *  ) func_dirname_result=\"${3}\" ;;\n    esac])\n\n  _LT_PROG_FUNCTION_REPLACE([func_basename], [dnl\n    func_basename_result=\"${1##*/}\"])\n\n  _LT_PROG_FUNCTION_REPLACE([func_dirname_and_basename], [dnl\n    case ${1} in\n      */*) func_dirname_result=\"${1%/*}${2}\" ;;\n      *  ) func_dirname_result=\"${3}\" ;;\n    esac\n    func_basename_result=\"${1##*/}\"])\n\n  _LT_PROG_FUNCTION_REPLACE([func_stripname], [dnl\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary parameter first.\n    func_stripname_result=${3}\n    func_stripname_result=${func_stripname_result#\"${1}\"}\n    func_stripname_result=${func_stripname_result%\"${2}\"}])\n\n  _LT_PROG_FUNCTION_REPLACE([func_split_long_opt], [dnl\n    func_split_long_opt_name=${1%%=*}\n    func_split_long_opt_arg=${1#*=}])\n\n  _LT_PROG_FUNCTION_REPLACE([func_split_short_opt], [dnl\n    func_split_short_opt_arg=${1#??}\n    func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}])\n\n  _LT_PROG_FUNCTION_REPLACE([func_lo2o], [dnl\n    case ${1} in\n      *.lo) func_lo2o_result=${1%.lo}.${objext} ;;\n      *)    func_lo2o_result=${1} ;;\n    esac])\n\n  _LT_PROG_FUNCTION_REPLACE([func_xform], [    func_xform_result=${1%.*}.lo])\n\n  _LT_PROG_FUNCTION_REPLACE([func_arith], [    func_arith_result=$(( $[*] ))])\n\n  _LT_PROG_FUNCTION_REPLACE([func_len], [    func_len_result=${#1}])\nfi\n\nif test x\"$lt_shell_append\" = xyes; then\n  _LT_PROG_FUNCTION_REPLACE([func_append], [    eval \"${1}+=\\\\${2}\"])\n\n  _LT_PROG_FUNCTION_REPLACE([func_append_quoted], [dnl\n    func_quote_for_eval \"${2}\"\ndnl m4 expansion turns \\\\\\\\ into \\\\, and then the shell eval turns that into \\\n    eval \"${1}+=\\\\\\\\ \\\\$func_quote_for_eval_result\"])\n\n  # Save a `func_append' function call where possible by direct use of '+='\n  sed -e 's%func_append \\([[a-zA-Z_]]\\{1,\\}\\) \"%\\1+=\"%g' $cfgfile > $cfgfile.tmp \\\n    && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n      || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\n  test 0 -eq $? || _lt_function_replace_fail=:\nelse\n  # Save a `func_append' function call even when '+=' is not available\n  sed -e 's%func_append \\([[a-zA-Z_]]\\{1,\\}\\) \"%\\1=\"$\\1%g' $cfgfile > $cfgfile.tmp \\\n    && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n      || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\n  test 0 -eq $? || _lt_function_replace_fail=:\nfi\n\nif test x\"$_lt_function_replace_fail\" = x\":\"; then\n  AC_MSG_WARN([Unable to substitute extended shell functions in $ofile])\nfi\n])\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine which file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n\n# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004, 2005, 2007, 2008, 2009 Free Software Foundation,\n#   Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 7 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option `$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl `shared' nor `disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n  \t\t   [_LT_ENABLE_FAST_INSTALL])\n  ])\n])# _LT_SET_OPTIONS\n\n\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [1], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the `shared' and\n# `disable-shared' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the `static' and\n# `disable-static' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the `fast-install'\n# and `disable-fast-install' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe `fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe `disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the `pic-only' and `no-pic'\n# LT_INIT options.\n# MODE is either `yes' or `no'.  If omitted, it defaults to `both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic@<:@=PKGS@:>@],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for lt_pkg in $withval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [pic_mode=default])\n\ntest -z \"$pic_mode\" && pic_mode=m4_default([$1], [default])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n\n# ltsugar.m4 -- libtool m4 base layer.                         -*-Autoconf-*-\n#\n# Copyright (C) 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n# Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 6 ltsugar.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTSUGAR_VERSION], [m4_if([0.1])])\n\n\n# lt_join(SEP, ARG1, [ARG2...])\n# -----------------------------\n# Produce ARG1SEPARG2...SEPARGn, omitting [] arguments and their\n# associated separator.\n# Needed until we can rely on m4_join from Autoconf 2.62, since all earlier\n# versions in m4sugar had bugs.\nm4_define([lt_join],\n[m4_if([$#], [1], [],\n       [$#], [2], [[$2]],\n       [m4_if([$2], [], [], [[$2]_])$0([$1], m4_shift(m4_shift($@)))])])\nm4_define([_lt_join],\n[m4_if([$#$2], [2], [],\n       [m4_if([$2], [], [], [[$1$2]])$0([$1], m4_shift(m4_shift($@)))])])\n\n\n# lt_car(LIST)\n# lt_cdr(LIST)\n# ------------\n# Manipulate m4 lists.\n# These macros are necessary as long as will still need to support\n# Autoconf-2.59 which quotes differently.\nm4_define([lt_car], [[$1]])\nm4_define([lt_cdr],\n[m4_if([$#], 0, [m4_fatal([$0: cannot be called without arguments])],\n       [$#], 1, [],\n       [m4_dquote(m4_shift($@))])])\nm4_define([lt_unquote], $1)\n\n\n# lt_append(MACRO-NAME, STRING, [SEPARATOR])\n# ------------------------------------------\n# Redefine MACRO-NAME to hold its former content plus `SEPARATOR'`STRING'.\n# Note that neither SEPARATOR nor STRING are expanded; they are appended\n# to MACRO-NAME as is (leaving the expansion for when MACRO-NAME is invoked).\n# No SEPARATOR is output if MACRO-NAME was previously undefined (different\n# than defined and empty).\n#\n# This macro is needed until we can rely on Autoconf 2.62, since earlier\n# versions of m4sugar mistakenly expanded SEPARATOR but not STRING.\nm4_define([lt_append],\n[m4_define([$1],\n\t   m4_ifdef([$1], [m4_defn([$1])[$3]])[$2])])\n\n\n\n# lt_combine(SEP, PREFIX-LIST, INFIX, SUFFIX1, [SUFFIX2...])\n# ----------------------------------------------------------\n# Produce a SEP delimited list of all paired combinations of elements of\n# PREFIX-LIST with SUFFIX1 through SUFFIXn.  Each element of the list\n# has the form PREFIXmINFIXSUFFIXn.\n# Needed until we can rely on m4_combine added in Autoconf 2.62.\nm4_define([lt_combine],\n[m4_if(m4_eval([$# > 3]), [1],\n       [m4_pushdef([_Lt_sep], [m4_define([_Lt_sep], m4_defn([lt_car]))])]]dnl\n[[m4_foreach([_Lt_prefix], [$2],\n\t     [m4_foreach([_Lt_suffix],\n\t\t]m4_dquote(m4_dquote(m4_shift(m4_shift(m4_shift($@)))))[,\n\t[_Lt_sep([$1])[]m4_defn([_Lt_prefix])[$3]m4_defn([_Lt_suffix])])])])])\n\n\n# lt_if_append_uniq(MACRO-NAME, VARNAME, [SEPARATOR], [UNIQ], [NOT-UNIQ])\n# -----------------------------------------------------------------------\n# Iff MACRO-NAME does not yet contain VARNAME, then append it (delimited\n# by SEPARATOR if supplied) and expand UNIQ, else NOT-UNIQ.\nm4_define([lt_if_append_uniq],\n[m4_ifdef([$1],\n\t  [m4_if(m4_index([$3]m4_defn([$1])[$3], [$3$2$3]), [-1],\n\t\t [lt_append([$1], [$2], [$3])$4],\n\t\t [$5])],\n\t  [lt_append([$1], [$2], [$3])$4])])\n\n\n# lt_dict_add(DICT, KEY, VALUE)\n# -----------------------------\nm4_define([lt_dict_add],\n[m4_define([$1($2)], [$3])])\n\n\n# lt_dict_add_subkey(DICT, KEY, SUBKEY, VALUE)\n# --------------------------------------------\nm4_define([lt_dict_add_subkey],\n[m4_define([$1($2:$3)], [$4])])\n\n\n# lt_dict_fetch(DICT, KEY, [SUBKEY])\n# ----------------------------------\nm4_define([lt_dict_fetch],\n[m4_ifval([$3],\n\tm4_ifdef([$1($2:$3)], [m4_defn([$1($2:$3)])]),\n    m4_ifdef([$1($2)], [m4_defn([$1($2)])]))])\n\n\n# lt_if_dict_fetch(DICT, KEY, [SUBKEY], VALUE, IF-TRUE, [IF-FALSE])\n# -----------------------------------------------------------------\nm4_define([lt_if_dict_fetch],\n[m4_if(lt_dict_fetch([$1], [$2], [$3]), [$4],\n\t[$5],\n    [$6])])\n\n\n# lt_dict_filter(DICT, [SUBKEY], VALUE, [SEPARATOR], KEY, [...])\n# --------------------------------------------------------------\nm4_define([lt_dict_filter],\n[m4_if([$5], [], [],\n  [lt_join(m4_quote(m4_default([$4], [[, ]])),\n           lt_unquote(m4_split(m4_normalize(m4_foreach(_Lt_key, lt_car([m4_shiftn(4, $@)]),\n\t\t      [lt_if_dict_fetch([$1], _Lt_key, [$2], [$3], [_Lt_key ])])))))])[]dnl\n])\n\n# ltversion.m4 -- version numbers\t\t\t-*- Autoconf -*-\n#\n#   Copyright (C) 2004 Free Software Foundation, Inc.\n#   Written by Scott James Remnant, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# @configure_input@\n\n# serial 3337 ltversion.m4\n# This file is part of GNU Libtool\n\nm4_define([LT_PACKAGE_VERSION], [2.4.2])\nm4_define([LT_PACKAGE_REVISION], [1.3337])\n\nAC_DEFUN([LTVERSION_VERSION],\n[macro_version='2.4.2'\nmacro_revision='1.3337'\n_LT_DECL(, macro_version, 0, [Which release of libtool.m4 was used?])\n_LT_DECL(, macro_revision, 0)\n])\n\n# lt~obsolete.m4 -- aclocal satisfying obsolete definitions.    -*-Autoconf-*-\n#\n#   Copyright (C) 2004, 2005, 2007, 2009 Free Software Foundation, Inc.\n#   Written by Scott James Remnant, 2004.\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 5 lt~obsolete.m4\n\n# These exist entirely to fool aclocal when bootstrapping libtool.\n#\n# In the past libtool.m4 has provided macros via AC_DEFUN (or AU_DEFUN)\n# which have later been changed to m4_define as they aren't part of the\n# exported API, or moved to Autoconf or Automake where they belong.\n#\n# The trouble is, aclocal is a bit thick.  It'll see the old AC_DEFUN\n# in /usr/share/aclocal/libtool.m4 and remember it, then when it sees us\n# using a macro with the same name in our local m4/libtool.m4 it'll\n# pull the old libtool.m4 in (it doesn't see our shiny new m4_define\n# and doesn't know about Autoconf macros at all.)\n#\n# So we provide this file, which has a silly filename so it's always\n# included after everything else.  This provides aclocal with the\n# AC_DEFUNs it wants, but when m4 processes it, it doesn't do anything\n# because those macros already exist, or will be overwritten later.\n# We use AC_DEFUN over AU_DEFUN for compatibility with aclocal-1.6. \n#\n# Anytime we withdraw an AC_DEFUN or AU_DEFUN, remember to add it here.\n# Yes, that means every name once taken will need to remain here until\n# we give up compatibility with versions before 1.7, at which point\n# we need to keep only those names which we still refer to.\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOBSOLETE_VERSION], [m4_if([1])])\n\nm4_ifndef([AC_LIBTOOL_LINKER_OPTION],\t[AC_DEFUN([AC_LIBTOOL_LINKER_OPTION])])\nm4_ifndef([AC_PROG_EGREP],\t\t[AC_DEFUN([AC_PROG_EGREP])])\nm4_ifndef([_LT_AC_PROG_ECHO_BACKSLASH],\t[AC_DEFUN([_LT_AC_PROG_ECHO_BACKSLASH])])\nm4_ifndef([_LT_AC_SHELL_INIT],\t\t[AC_DEFUN([_LT_AC_SHELL_INIT])])\nm4_ifndef([_LT_AC_SYS_LIBPATH_AIX],\t[AC_DEFUN([_LT_AC_SYS_LIBPATH_AIX])])\nm4_ifndef([_LT_PROG_LTMAIN],\t\t[AC_DEFUN([_LT_PROG_LTMAIN])])\nm4_ifndef([_LT_AC_TAGVAR],\t\t[AC_DEFUN([_LT_AC_TAGVAR])])\nm4_ifndef([AC_LTDL_ENABLE_INSTALL],\t[AC_DEFUN([AC_LTDL_ENABLE_INSTALL])])\nm4_ifndef([AC_LTDL_PREOPEN],\t\t[AC_DEFUN([AC_LTDL_PREOPEN])])\nm4_ifndef([_LT_AC_SYS_COMPILER],\t[AC_DEFUN([_LT_AC_SYS_COMPILER])])\nm4_ifndef([_LT_AC_LOCK],\t\t[AC_DEFUN([_LT_AC_LOCK])])\nm4_ifndef([AC_LIBTOOL_SYS_OLD_ARCHIVE],\t[AC_DEFUN([AC_LIBTOOL_SYS_OLD_ARCHIVE])])\nm4_ifndef([_LT_AC_TRY_DLOPEN_SELF],\t[AC_DEFUN([_LT_AC_TRY_DLOPEN_SELF])])\nm4_ifndef([AC_LIBTOOL_PROG_CC_C_O],\t[AC_DEFUN([AC_LIBTOOL_PROG_CC_C_O])])\nm4_ifndef([AC_LIBTOOL_SYS_HARD_LINK_LOCKS], [AC_DEFUN([AC_LIBTOOL_SYS_HARD_LINK_LOCKS])])\nm4_ifndef([AC_LIBTOOL_OBJDIR],\t\t[AC_DEFUN([AC_LIBTOOL_OBJDIR])])\nm4_ifndef([AC_LTDL_OBJDIR],\t\t[AC_DEFUN([AC_LTDL_OBJDIR])])\nm4_ifndef([AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH], [AC_DEFUN([AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH])])\nm4_ifndef([AC_LIBTOOL_SYS_LIB_STRIP],\t[AC_DEFUN([AC_LIBTOOL_SYS_LIB_STRIP])])\nm4_ifndef([AC_PATH_MAGIC],\t\t[AC_DEFUN([AC_PATH_MAGIC])])\nm4_ifndef([AC_PROG_LD_GNU],\t\t[AC_DEFUN([AC_PROG_LD_GNU])])\nm4_ifndef([AC_PROG_LD_RELOAD_FLAG],\t[AC_DEFUN([AC_PROG_LD_RELOAD_FLAG])])\nm4_ifndef([AC_DEPLIBS_CHECK_METHOD],\t[AC_DEFUN([AC_DEPLIBS_CHECK_METHOD])])\nm4_ifndef([AC_LIBTOOL_PROG_COMPILER_NO_RTTI], [AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_NO_RTTI])])\nm4_ifndef([AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE], [AC_DEFUN([AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE])])\nm4_ifndef([AC_LIBTOOL_PROG_COMPILER_PIC], [AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_PIC])])\nm4_ifndef([AC_LIBTOOL_PROG_LD_SHLIBS],\t[AC_DEFUN([AC_LIBTOOL_PROG_LD_SHLIBS])])\nm4_ifndef([AC_LIBTOOL_POSTDEP_PREDEP],\t[AC_DEFUN([AC_LIBTOOL_POSTDEP_PREDEP])])\nm4_ifndef([LT_AC_PROG_EGREP],\t\t[AC_DEFUN([LT_AC_PROG_EGREP])])\nm4_ifndef([LT_AC_PROG_SED],\t\t[AC_DEFUN([LT_AC_PROG_SED])])\nm4_ifndef([_LT_CC_BASENAME],\t\t[AC_DEFUN([_LT_CC_BASENAME])])\nm4_ifndef([_LT_COMPILER_BOILERPLATE],\t[AC_DEFUN([_LT_COMPILER_BOILERPLATE])])\nm4_ifndef([_LT_LINKER_BOILERPLATE],\t[AC_DEFUN([_LT_LINKER_BOILERPLATE])])\nm4_ifndef([_AC_PROG_LIBTOOL],\t\t[AC_DEFUN([_AC_PROG_LIBTOOL])])\nm4_ifndef([AC_LIBTOOL_SETUP],\t\t[AC_DEFUN([AC_LIBTOOL_SETUP])])\nm4_ifndef([_LT_AC_CHECK_DLFCN],\t\t[AC_DEFUN([_LT_AC_CHECK_DLFCN])])\nm4_ifndef([AC_LIBTOOL_SYS_DYNAMIC_LINKER],\t[AC_DEFUN([AC_LIBTOOL_SYS_DYNAMIC_LINKER])])\nm4_ifndef([_LT_AC_TAGCONFIG],\t\t[AC_DEFUN([_LT_AC_TAGCONFIG])])\nm4_ifndef([AC_DISABLE_FAST_INSTALL],\t[AC_DEFUN([AC_DISABLE_FAST_INSTALL])])\nm4_ifndef([_LT_AC_LANG_CXX],\t\t[AC_DEFUN([_LT_AC_LANG_CXX])])\nm4_ifndef([_LT_AC_LANG_F77],\t\t[AC_DEFUN([_LT_AC_LANG_F77])])\nm4_ifndef([_LT_AC_LANG_GCJ],\t\t[AC_DEFUN([_LT_AC_LANG_GCJ])])\nm4_ifndef([AC_LIBTOOL_LANG_C_CONFIG],\t[AC_DEFUN([AC_LIBTOOL_LANG_C_CONFIG])])\nm4_ifndef([_LT_AC_LANG_C_CONFIG],\t[AC_DEFUN([_LT_AC_LANG_C_CONFIG])])\nm4_ifndef([AC_LIBTOOL_LANG_CXX_CONFIG],\t[AC_DEFUN([AC_LIBTOOL_LANG_CXX_CONFIG])])\nm4_ifndef([_LT_AC_LANG_CXX_CONFIG],\t[AC_DEFUN([_LT_AC_LANG_CXX_CONFIG])])\nm4_ifndef([AC_LIBTOOL_LANG_F77_CONFIG],\t[AC_DEFUN([AC_LIBTOOL_LANG_F77_CONFIG])])\nm4_ifndef([_LT_AC_LANG_F77_CONFIG],\t[AC_DEFUN([_LT_AC_LANG_F77_CONFIG])])\nm4_ifndef([AC_LIBTOOL_LANG_GCJ_CONFIG],\t[AC_DEFUN([AC_LIBTOOL_LANG_GCJ_CONFIG])])\nm4_ifndef([_LT_AC_LANG_GCJ_CONFIG],\t[AC_DEFUN([_LT_AC_LANG_GCJ_CONFIG])])\nm4_ifndef([AC_LIBTOOL_LANG_RC_CONFIG],\t[AC_DEFUN([AC_LIBTOOL_LANG_RC_CONFIG])])\nm4_ifndef([_LT_AC_LANG_RC_CONFIG],\t[AC_DEFUN([_LT_AC_LANG_RC_CONFIG])])\nm4_ifndef([AC_LIBTOOL_CONFIG],\t\t[AC_DEFUN([AC_LIBTOOL_CONFIG])])\nm4_ifndef([_LT_AC_FILE_LTDLL_C],\t[AC_DEFUN([_LT_AC_FILE_LTDLL_C])])\nm4_ifndef([_LT_REQUIRED_DARWIN_CHECKS],\t[AC_DEFUN([_LT_REQUIRED_DARWIN_CHECKS])])\nm4_ifndef([_LT_AC_PROG_CXXCPP],\t\t[AC_DEFUN([_LT_AC_PROG_CXXCPP])])\nm4_ifndef([_LT_PREPARE_SED_QUOTE_VARS],\t[AC_DEFUN([_LT_PREPARE_SED_QUOTE_VARS])])\nm4_ifndef([_LT_PROG_ECHO_BACKSLASH],\t[AC_DEFUN([_LT_PROG_ECHO_BACKSLASH])])\nm4_ifndef([_LT_PROG_F77],\t\t[AC_DEFUN([_LT_PROG_F77])])\nm4_ifndef([_LT_PROG_FC],\t\t[AC_DEFUN([_LT_PROG_FC])])\nm4_ifndef([_LT_PROG_CXX],\t\t[AC_DEFUN([_LT_PROG_CXX])])\n\n# pkg.m4 - Macros to locate and utilise pkg-config.            -*- Autoconf -*-\n# serial 1 (pkg-config-0.24)\n# \n# Copyright \u00a9 2004 Scott James Remnant <scott@netsplit.com>.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that program.\n\n# PKG_PROG_PKG_CONFIG([MIN-VERSION])\n# ----------------------------------\nAC_DEFUN([PKG_PROG_PKG_CONFIG],\n[m4_pattern_forbid([^_?PKG_[A-Z_]+$])\nm4_pattern_allow([^PKG_CONFIG(_(PATH|LIBDIR|SYSROOT_DIR|ALLOW_SYSTEM_(CFLAGS|LIBS)))?$])\nm4_pattern_allow([^PKG_CONFIG_(DISABLE_UNINSTALLED|TOP_BUILD_DIR|DEBUG_SPEW)$])\nAC_ARG_VAR([PKG_CONFIG], [path to pkg-config utility])\nAC_ARG_VAR([PKG_CONFIG_PATH], [directories to add to pkg-config's search path])\nAC_ARG_VAR([PKG_CONFIG_LIBDIR], [path overriding pkg-config's built-in search path])\n\nif test \"x$ac_cv_env_PKG_CONFIG_set\" != \"xset\"; then\n\tAC_PATH_TOOL([PKG_CONFIG], [pkg-config])\nfi\nif test -n \"$PKG_CONFIG\"; then\n\t_pkg_min_version=m4_default([$1], [0.9.0])\n\tAC_MSG_CHECKING([pkg-config is at least version $_pkg_min_version])\n\tif $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then\n\t\tAC_MSG_RESULT([yes])\n\telse\n\t\tAC_MSG_RESULT([no])\n\t\tPKG_CONFIG=\"\"\n\tfi\nfi[]dnl\n])# PKG_PROG_PKG_CONFIG\n\n# PKG_CHECK_EXISTS(MODULES, [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n#\n# Check to see whether a particular set of modules exists.  Similar\n# to PKG_CHECK_MODULES(), but does not set variables or print errors.\n#\n# Please remember that m4 expands AC_REQUIRE([PKG_PROG_PKG_CONFIG])\n# only at the first occurence in configure.ac, so if the first place\n# it's called might be skipped (such as if it is within an \"if\", you\n# have to call PKG_CHECK_EXISTS manually\n# --------------------------------------------------------------\nAC_DEFUN([PKG_CHECK_EXISTS],\n[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\nif test -n \"$PKG_CONFIG\" && \\\n    AC_RUN_LOG([$PKG_CONFIG --exists --print-errors \"$1\"]); then\n  m4_default([$2], [:])\nm4_ifvaln([$3], [else\n  $3])dnl\nfi])\n\n# _PKG_CONFIG([VARIABLE], [COMMAND], [MODULES])\n# ---------------------------------------------\nm4_define([_PKG_CONFIG],\n[if test -n \"$$1\"; then\n    pkg_cv_[]$1=\"$$1\"\n elif test -n \"$PKG_CONFIG\"; then\n    PKG_CHECK_EXISTS([$3],\n                     [pkg_cv_[]$1=`$PKG_CONFIG --[]$2 \"$3\" 2>/dev/null`\n\t\t      test \"x$?\" != \"x0\" && pkg_failed=yes ],\n\t\t     [pkg_failed=yes])\n else\n    pkg_failed=untried\nfi[]dnl\n])# _PKG_CONFIG\n\n# _PKG_SHORT_ERRORS_SUPPORTED\n# -----------------------------\nAC_DEFUN([_PKG_SHORT_ERRORS_SUPPORTED],\n[AC_REQUIRE([PKG_PROG_PKG_CONFIG])\nif $PKG_CONFIG --atleast-pkgconfig-version 0.20; then\n        _pkg_short_errors_supported=yes\nelse\n        _pkg_short_errors_supported=no\nfi[]dnl\n])# _PKG_SHORT_ERRORS_SUPPORTED\n\n\n# PKG_CHECK_MODULES(VARIABLE-PREFIX, MODULES, [ACTION-IF-FOUND],\n# [ACTION-IF-NOT-FOUND])\n#\n#\n# Note that if there is a possibility the first call to\n# PKG_CHECK_MODULES might not happen, you should be sure to include an\n# explicit call to PKG_PROG_PKG_CONFIG in your configure.ac\n#\n#\n# --------------------------------------------------------------\nAC_DEFUN([PKG_CHECK_MODULES],\n[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\nAC_ARG_VAR([$1][_CFLAGS], [C compiler flags for $1, overriding pkg-config])dnl\nAC_ARG_VAR([$1][_LIBS], [linker flags for $1, overriding pkg-config])dnl\n\npkg_failed=no\nAC_MSG_CHECKING([for $1])\n\n_PKG_CONFIG([$1][_CFLAGS], [cflags], [$2])\n_PKG_CONFIG([$1][_LIBS], [libs], [$2])\n\nm4_define([_PKG_TEXT], [Alternatively, you may set the environment variables $1[]_CFLAGS\nand $1[]_LIBS to avoid the need to call pkg-config.\nSee the pkg-config man page for more details.])\n\nif test $pkg_failed = yes; then\n   \tAC_MSG_RESULT([no])\n        _PKG_SHORT_ERRORS_SUPPORTED\n        if test $_pkg_short_errors_supported = yes; then\n\t        $1[]_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors --cflags --libs \"$2\" 2>&1`\n        else \n\t        $1[]_PKG_ERRORS=`$PKG_CONFIG --print-errors --cflags --libs \"$2\" 2>&1`\n        fi\n\t# Put the nasty error message in config.log where it belongs\n\techo \"$$1[]_PKG_ERRORS\" >&AS_MESSAGE_LOG_FD\n\n\tm4_default([$4], [AC_MSG_ERROR(\n[Package requirements ($2) were not met:\n\n$$1_PKG_ERRORS\n\nConsider adjusting the PKG_CONFIG_PATH environment variable if you\ninstalled software in a non-standard prefix.\n\n_PKG_TEXT])[]dnl\n        ])\nelif test $pkg_failed = untried; then\n     \tAC_MSG_RESULT([no])\n\tm4_default([$4], [AC_MSG_FAILURE(\n[The pkg-config script could not be found or is too old.  Make sure it\nis in your PATH or set the PKG_CONFIG environment variable to the full\npath to pkg-config.\n\n_PKG_TEXT\n\nTo get pkg-config, see <http://pkg-config.freedesktop.org/>.])[]dnl\n        ])\nelse\n\t$1[]_CFLAGS=$pkg_cv_[]$1[]_CFLAGS\n\t$1[]_LIBS=$pkg_cv_[]$1[]_LIBS\n        AC_MSG_RESULT([yes])\n\t$3\nfi[]dnl\n])# PKG_CHECK_MODULES\n\n\n# PKG_INSTALLDIR(DIRECTORY)\n# -------------------------\n# Substitutes the variable pkgconfigdir as the location where a module\n# should install pkg-config .pc files. By default the directory is\n# $libdir/pkgconfig, but the default can be changed by passing\n# DIRECTORY. The user can override through the --with-pkgconfigdir\n# parameter.\nAC_DEFUN([PKG_INSTALLDIR],\n[m4_pushdef([pkg_default], [m4_default([$1], ['${libdir}/pkgconfig'])])\nm4_pushdef([pkg_description],\n    [pkg-config installation directory @<:@]pkg_default[@:>@])\nAC_ARG_WITH([pkgconfigdir],\n    [AS_HELP_STRING([--with-pkgconfigdir], pkg_description)],,\n    [with_pkgconfigdir=]pkg_default)\nAC_SUBST([pkgconfigdir], [$with_pkgconfigdir])\nm4_popdef([pkg_default])\nm4_popdef([pkg_description])\n]) dnl PKG_INSTALLDIR\n\n\n# PKG_NOARCH_INSTALLDIR(DIRECTORY)\n# -------------------------\n# Substitutes the variable noarch_pkgconfigdir as the location where a\n# module should install arch-independent pkg-config .pc files. By\n# default the directory is $datadir/pkgconfig, but the default can be\n# changed by passing DIRECTORY. The user can override through the\n# --with-noarch-pkgconfigdir parameter.\nAC_DEFUN([PKG_NOARCH_INSTALLDIR],\n[m4_pushdef([pkg_default], [m4_default([$1], ['${datadir}/pkgconfig'])])\nm4_pushdef([pkg_description],\n    [pkg-config arch-independent installation directory @<:@]pkg_default[@:>@])\nAC_ARG_WITH([noarch-pkgconfigdir],\n    [AS_HELP_STRING([--with-noarch-pkgconfigdir], pkg_description)],,\n    [with_noarch_pkgconfigdir=]pkg_default)\nAC_SUBST([noarch_pkgconfigdir], [$with_noarch_pkgconfigdir])\nm4_popdef([pkg_default])\nm4_popdef([pkg_description])\n]) dnl PKG_NOARCH_INSTALLDIR\n\n# Copyright (C) 2002-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_AUTOMAKE_VERSION(VERSION)\n# ----------------------------\n# Automake X.Y traces this macro to ensure aclocal.m4 has been\n# generated from the m4 files accompanying Automake X.Y.\n# (This private macro should not be called outside this file.)\nAC_DEFUN([AM_AUTOMAKE_VERSION],\n[am__api_version='1.13'\ndnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to\ndnl require some minimum version.  Point them to the right macro.\nm4_if([$1], [1.13.4], [],\n      [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl\n])\n\n# _AM_AUTOCONF_VERSION(VERSION)\n# -----------------------------\n# aclocal traces this macro to find the Autoconf version.\n# This is a private macro too.  Using m4_define simplifies\n# the logic in aclocal, which can simply ignore this definition.\nm4_define([_AM_AUTOCONF_VERSION], [])\n\n# AM_SET_CURRENT_AUTOMAKE_VERSION\n# -------------------------------\n# Call AM_AUTOMAKE_VERSION and AM_AUTOMAKE_VERSION so they can be traced.\n# This function is AC_REQUIREd by AM_INIT_AUTOMAKE.\nAC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n[AM_AUTOMAKE_VERSION([1.13.4])dnl\nm4_ifndef([AC_AUTOCONF_VERSION],\n  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl\n_AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])\n\n# AM_AUX_DIR_EXPAND                                         -*- Autoconf -*-\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# For projects using AC_CONFIG_AUX_DIR([foo]), Autoconf sets\n# $ac_aux_dir to '$srcdir/foo'.  In other projects, it is set to\n# '$srcdir', '$srcdir/..', or '$srcdir/../..'.\n#\n# Of course, Automake must honor this variable whenever it calls a\n# tool from the auxiliary directory.  The problem is that $srcdir (and\n# therefore $ac_aux_dir as well) can be either absolute or relative,\n# depending on how configure is run.  This is pretty annoying, since\n# it makes $ac_aux_dir quite unusable in subdirectories: in the top\n# source directory, any form will work fine, but in subdirectories a\n# relative path needs to be adjusted first.\n#\n# $ac_aux_dir/missing\n#    fails when called from a subdirectory if $ac_aux_dir is relative\n# $top_srcdir/$ac_aux_dir/missing\n#    fails if $ac_aux_dir is absolute,\n#    fails when called from a subdirectory in a VPATH build with\n#          a relative $ac_aux_dir\n#\n# The reason of the latter failure is that $top_srcdir and $ac_aux_dir\n# are both prefixed by $srcdir.  In an in-source build this is usually\n# harmless because $srcdir is '.', but things will broke when you\n# start a VPATH build or use an absolute $srcdir.\n#\n# So we could use something similar to $top_srcdir/$ac_aux_dir/missing,\n# iff we strip the leading $srcdir from $ac_aux_dir.  That would be:\n#   am_aux_dir='\\$(top_srcdir)/'`expr \"$ac_aux_dir\" : \"$srcdir//*\\(.*\\)\"`\n# and then we would define $MISSING as\n#   MISSING=\"\\${SHELL} $am_aux_dir/missing\"\n# This will work as long as MISSING is not called from configure, because\n# unfortunately $(top_srcdir) has no meaning in configure.\n# However there are other variables, like CC, which are often used in\n# configure, and could therefore not use this \"fixed\" $ac_aux_dir.\n#\n# Another solution, used here, is to always expand $ac_aux_dir to an\n# absolute PATH.  The drawback is that using absolute paths prevent a\n# configured tree to be moved without reconfiguration.\n\nAC_DEFUN([AM_AUX_DIR_EXPAND],\n[dnl Rely on autoconf to set up CDPATH properly.\nAC_PREREQ([2.50])dnl\n# expand $ac_aux_dir to an absolute path\nam_aux_dir=`cd $ac_aux_dir && pwd`\n])\n\n# AM_CONDITIONAL                                            -*- Autoconf -*-\n\n# Copyright (C) 1997-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_CONDITIONAL(NAME, SHELL-CONDITION)\n# -------------------------------------\n# Define a conditional.\nAC_DEFUN([AM_CONDITIONAL],\n[AC_PREREQ([2.52])dnl\n m4_if([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],\n       [$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl\nAC_SUBST([$1_TRUE])dnl\nAC_SUBST([$1_FALSE])dnl\n_AM_SUBST_NOTMAKE([$1_TRUE])dnl\n_AM_SUBST_NOTMAKE([$1_FALSE])dnl\nm4_define([_AM_COND_VALUE_$1], [$2])dnl\nif $2; then\n  $1_TRUE=\n  $1_FALSE='#'\nelse\n  $1_TRUE='#'\n  $1_FALSE=\nfi\nAC_CONFIG_COMMANDS_PRE(\n[if test -z \"${$1_TRUE}\" && test -z \"${$1_FALSE}\"; then\n  AC_MSG_ERROR([[conditional \"$1\" was never defined.\nUsually this means the macro was only invoked conditionally.]])\nfi])])\n\n# Copyright (C) 1999-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n\n# There are a few dirty hacks below to avoid letting 'AC_PROG_CC' be\n# written in clear, in which case automake, when reading aclocal.m4,\n# will think it sees a *use*, and therefore will trigger all it's\n# C support machinery.  Also note that it means that autoscan, seeing\n# CC etc. in the Makefile, will ask for an AC_PROG_CC use...\n\n\n# _AM_DEPENDENCIES(NAME)\n# ----------------------\n# See how the compiler implements dependency checking.\n# NAME is \"CC\", \"CXX\", \"OBJC\", \"OBJCXX\", \"UPC\", or \"GJC\".\n# We try a few techniques and use that to set a single cache variable.\n#\n# We don't AC_REQUIRE the corresponding AC_PROG_CC since the latter was\n# modified to invoke _AM_DEPENDENCIES(CC); we would have a circular\n# dependency, and given that the user is not expected to run this macro,\n# just rely on AC_PROG_CC.\nAC_DEFUN([_AM_DEPENDENCIES],\n[AC_REQUIRE([AM_SET_DEPDIR])dnl\nAC_REQUIRE([AM_OUTPUT_DEPENDENCY_COMMANDS])dnl\nAC_REQUIRE([AM_MAKE_INCLUDE])dnl\nAC_REQUIRE([AM_DEP_TRACK])dnl\n\nm4_if([$1], [CC],   [depcc=\"$CC\"   am_compiler_list=],\n      [$1], [CXX],  [depcc=\"$CXX\"  am_compiler_list=],\n      [$1], [OBJC], [depcc=\"$OBJC\" am_compiler_list='gcc3 gcc'],\n      [$1], [OBJCXX], [depcc=\"$OBJCXX\" am_compiler_list='gcc3 gcc'],\n      [$1], [UPC],  [depcc=\"$UPC\"  am_compiler_list=],\n      [$1], [GCJ],  [depcc=\"$GCJ\"  am_compiler_list='gcc3 gcc'],\n                    [depcc=\"$$1\"   am_compiler_list=])\n\nAC_CACHE_CHECK([dependency style of $depcc],\n               [am_cv_$1_dependencies_compiler_type],\n[if test -z \"$AMDEP_TRUE\" && test -f \"$am_depcomp\"; then\n  # We make a subdir and do the tests there.  Otherwise we can end up\n  # making bogus files that we don't know about and never remove.  For\n  # instance it was reported that on HP-UX the gcc test will end up\n  # making a dummy file named 'D' -- because '-MD' means \"put the output\n  # in D\".\n  rm -rf conftest.dir\n  mkdir conftest.dir\n  # Copy depcomp to subdir because otherwise we won't find it if we're\n  # using a relative directory.\n  cp \"$am_depcomp\" conftest.dir\n  cd conftest.dir\n  # We will build objects and dependencies in a subdirectory because\n  # it helps to detect inapplicable dependency modes.  For instance\n  # both Tru64's cc and ICC support -MD to output dependencies as a\n  # side effect of compilation, but ICC will put the dependencies in\n  # the current directory while Tru64 will put them in the object\n  # directory.\n  mkdir sub\n\n  am_cv_$1_dependencies_compiler_type=none\n  if test \"$am_compiler_list\" = \"\"; then\n     am_compiler_list=`sed -n ['s/^#*\\([a-zA-Z0-9]*\\))$/\\1/p'] < ./depcomp`\n  fi\n  am__universal=false\n  m4_case([$1], [CC],\n    [case \" $depcc \" in #(\n     *\\ -arch\\ *\\ -arch\\ *) am__universal=true ;;\n     esac],\n    [CXX],\n    [case \" $depcc \" in #(\n     *\\ -arch\\ *\\ -arch\\ *) am__universal=true ;;\n     esac])\n\n  for depmode in $am_compiler_list; do\n    # Setup a source with many dependencies, because some compilers\n    # like to wrap large dependency lists on column 80 (with \\), and\n    # we should not choose a depcomp mode which is confused by this.\n    #\n    # We need to recreate these files for each test, as the compiler may\n    # overwrite some of them when testing with obscure command lines.\n    # This happens at least with the AIX C compiler.\n    : > sub/conftest.c\n    for i in 1 2 3 4 5 6; do\n      echo '#include \"conftst'$i'.h\"' >> sub/conftest.c\n      # Using \": > sub/conftst$i.h\" creates only sub/conftst1.h with\n      # Solaris 10 /bin/sh.\n      echo '/* dummy */' > sub/conftst$i.h\n    done\n    echo \"${am__include} ${am__quote}sub/conftest.Po${am__quote}\" > confmf\n\n    # We check with '-c' and '-o' for the sake of the \"dashmstdout\"\n    # mode.  It turns out that the SunPro C++ compiler does not properly\n    # handle '-M -o', and we need to detect this.  Also, some Intel\n    # versions had trouble with output in subdirs.\n    am__obj=sub/conftest.${OBJEXT-o}\n    am__minus_obj=\"-o $am__obj\"\n    case $depmode in\n    gcc)\n      # This depmode causes a compiler race in universal mode.\n      test \"$am__universal\" = false || continue\n      ;;\n    nosideeffect)\n      # After this tag, mechanisms are not by side-effect, so they'll\n      # only be used when explicitly requested.\n      if test \"x$enable_dependency_tracking\" = xyes; then\n\tcontinue\n      else\n\tbreak\n      fi\n      ;;\n    msvc7 | msvc7msys | msvisualcpp | msvcmsys)\n      # This compiler won't grok '-c -o', but also, the minuso test has\n      # not run yet.  These depmodes are late enough in the game, and\n      # so weak that their functioning should not be impacted.\n      am__obj=conftest.${OBJEXT-o}\n      am__minus_obj=\n      ;;\n    none) break ;;\n    esac\n    if depmode=$depmode \\\n       source=sub/conftest.c object=$am__obj \\\n       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \\\n       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \\\n         >/dev/null 2>conftest.err &&\n       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&\n       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&\n       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&\n       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then\n      # icc doesn't choke on unknown options, it will just issue warnings\n      # or remarks (even with -Werror).  So we grep stderr for any message\n      # that says an option was ignored or not supported.\n      # When given -MP, icc 7.0 and 7.1 complain thusly:\n      #   icc: Command line warning: ignoring option '-M'; no argument required\n      # The diagnosis changed in icc 8.0:\n      #   icc: Command line remark: option '-MP' not supported\n      if (grep 'ignoring option' conftest.err ||\n          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else\n        am_cv_$1_dependencies_compiler_type=$depmode\n        break\n      fi\n    fi\n  done\n\n  cd ..\n  rm -rf conftest.dir\nelse\n  am_cv_$1_dependencies_compiler_type=none\nfi\n])\nAC_SUBST([$1DEPMODE], [depmode=$am_cv_$1_dependencies_compiler_type])\nAM_CONDITIONAL([am__fastdep$1], [\n  test \"x$enable_dependency_tracking\" != xno \\\n  && test \"$am_cv_$1_dependencies_compiler_type\" = gcc3])\n])\n\n\n# AM_SET_DEPDIR\n# -------------\n# Choose a directory name for dependency files.\n# This macro is AC_REQUIREd in _AM_DEPENDENCIES.\nAC_DEFUN([AM_SET_DEPDIR],\n[AC_REQUIRE([AM_SET_LEADING_DOT])dnl\nAC_SUBST([DEPDIR], [\"${am__leading_dot}deps\"])dnl\n])\n\n\n# AM_DEP_TRACK\n# ------------\nAC_DEFUN([AM_DEP_TRACK],\n[AC_ARG_ENABLE([dependency-tracking], [dnl\nAS_HELP_STRING(\n  [--enable-dependency-tracking],\n  [do not reject slow dependency extractors])\nAS_HELP_STRING(\n  [--disable-dependency-tracking],\n  [speeds up one-time build])])\nif test \"x$enable_dependency_tracking\" != xno; then\n  am_depcomp=\"$ac_aux_dir/depcomp\"\n  AMDEPBACKSLASH='\\'\n  am__nodep='_no'\nfi\nAM_CONDITIONAL([AMDEP], [test \"x$enable_dependency_tracking\" != xno])\nAC_SUBST([AMDEPBACKSLASH])dnl\n_AM_SUBST_NOTMAKE([AMDEPBACKSLASH])dnl\nAC_SUBST([am__nodep])dnl\n_AM_SUBST_NOTMAKE([am__nodep])dnl\n])\n\n# Generate code to set up dependency tracking.              -*- Autoconf -*-\n\n# Copyright (C) 1999-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n\n# _AM_OUTPUT_DEPENDENCY_COMMANDS\n# ------------------------------\nAC_DEFUN([_AM_OUTPUT_DEPENDENCY_COMMANDS],\n[{\n  # Older Autoconf quotes --file arguments for eval, but not when files\n  # are listed without --file.  Let's play safe and only enable the eval\n  # if we detect the quoting.\n  case $CONFIG_FILES in\n  *\\'*) eval set x \"$CONFIG_FILES\" ;;\n  *)   set x $CONFIG_FILES ;;\n  esac\n  shift\n  for mf\n  do\n    # Strip MF so we end up with the name of the file.\n    mf=`echo \"$mf\" | sed -e 's/:.*$//'`\n    # Check whether this is an Automake generated Makefile or not.\n    # We used to match only the files named 'Makefile.in', but\n    # some people rename them; so instead we look at the file content.\n    # Grep'ing the first line is not enough: some people post-process\n    # each Makefile.in and add a new line on top of each file to say so.\n    # Grep'ing the whole file is not good either: AIX grep has a line\n    # limit of 2048, but all sed's we know have understand at least 4000.\n    if sed -n 's,^#.*generated by automake.*,X,p' \"$mf\" | grep X >/dev/null 2>&1; then\n      dirpart=`AS_DIRNAME(\"$mf\")`\n    else\n      continue\n    fi\n    # Extract the definition of DEPDIR, am__include, and am__quote\n    # from the Makefile without running 'make'.\n    DEPDIR=`sed -n 's/^DEPDIR = //p' < \"$mf\"`\n    test -z \"$DEPDIR\" && continue\n    am__include=`sed -n 's/^am__include = //p' < \"$mf\"`\n    test -z \"$am__include\" && continue\n    am__quote=`sed -n 's/^am__quote = //p' < \"$mf\"`\n    # Find all dependency output files, they are included files with\n    # $(DEPDIR) in their names.  We invoke sed twice because it is the\n    # simplest approach to changing $(DEPDIR) to its actual value in the\n    # expansion.\n    for file in `sed -n \"\n      s/^$am__include $am__quote\\(.*(DEPDIR).*\\)$am__quote\"'$/\\1/p' <\"$mf\" | \\\n\t sed -e 's/\\$(DEPDIR)/'\"$DEPDIR\"'/g'`; do\n      # Make sure the directory exists.\n      test -f \"$dirpart/$file\" && continue\n      fdir=`AS_DIRNAME([\"$file\"])`\n      AS_MKDIR_P([$dirpart/$fdir])\n      # echo \"creating $dirpart/$file\"\n      echo '# dummy' > \"$dirpart/$file\"\n    done\n  done\n}\n])# _AM_OUTPUT_DEPENDENCY_COMMANDS\n\n\n# AM_OUTPUT_DEPENDENCY_COMMANDS\n# -----------------------------\n# This macro should only be invoked once -- use via AC_REQUIRE.\n#\n# This code is only required when automatic dependency tracking\n# is enabled.  FIXME.  This creates each '.P' file that we will\n# need in order to bootstrap the dependency handling code.\nAC_DEFUN([AM_OUTPUT_DEPENDENCY_COMMANDS],\n[AC_CONFIG_COMMANDS([depfiles],\n     [test x\"$AMDEP_TRUE\" != x\"\" || _AM_OUTPUT_DEPENDENCY_COMMANDS],\n     [AMDEP_TRUE=\"$AMDEP_TRUE\" ac_aux_dir=\"$ac_aux_dir\"])\n])\n\n# Do all the work for Automake.                             -*- Autoconf -*-\n\n# Copyright (C) 1996-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# This macro actually does too much.  Some checks are only needed if\n# your package does certain things.  But this isn't really a big deal.\n\n# AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])\n# AM_INIT_AUTOMAKE([OPTIONS])\n# -----------------------------------------------\n# The call with PACKAGE and VERSION arguments is the old style\n# call (pre autoconf-2.50), which is being phased out.  PACKAGE\n# and VERSION should now be passed to AC_INIT and removed from\n# the call to AM_INIT_AUTOMAKE.\n# We support both call styles for the transition.  After\n# the next Automake release, Autoconf can make the AC_INIT\n# arguments mandatory, and then we can depend on a new Autoconf\n# release and drop the old call support.\nAC_DEFUN([AM_INIT_AUTOMAKE],\n[AC_PREREQ([2.65])dnl\ndnl Autoconf wants to disallow AM_ names.  We explicitly allow\ndnl the ones we care about.\nm4_pattern_allow([^AM_[A-Z]+FLAGS$])dnl\nAC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl\nAC_REQUIRE([AC_PROG_INSTALL])dnl\nif test \"`cd $srcdir && pwd`\" != \"`pwd`\"; then\n  # Use -I$(srcdir) only when $(srcdir) != ., so that make's output\n  # is not polluted with repeated \"-I.\"\n  AC_SUBST([am__isrc], [' -I$(srcdir)'])_AM_SUBST_NOTMAKE([am__isrc])dnl\n  # test to see if srcdir already configured\n  if test -f $srcdir/config.status; then\n    AC_MSG_ERROR([source directory already configured; run \"make distclean\" there first])\n  fi\nfi\n\n# test whether we have cygpath\nif test -z \"$CYGPATH_W\"; then\n  if (cygpath --version) >/dev/null 2>/dev/null; then\n    CYGPATH_W='cygpath -w'\n  else\n    CYGPATH_W=echo\n  fi\nfi\nAC_SUBST([CYGPATH_W])\n\n# Define the identity of the package.\ndnl Distinguish between old-style and new-style calls.\nm4_ifval([$2],\n[AC_DIAGNOSE([obsolete],\n             [$0: two- and three-arguments forms are deprecated.])\nm4_ifval([$3], [_AM_SET_OPTION([no-define])])dnl\n AC_SUBST([PACKAGE], [$1])dnl\n AC_SUBST([VERSION], [$2])],\n[_AM_SET_OPTIONS([$1])dnl\ndnl Diagnose old-style AC_INIT with new-style AM_AUTOMAKE_INIT.\nm4_if(\n  m4_ifdef([AC_PACKAGE_NAME], [ok]):m4_ifdef([AC_PACKAGE_VERSION], [ok]),\n  [ok:ok],,\n  [m4_fatal([AC_INIT should be called with package and version arguments])])dnl\n AC_SUBST([PACKAGE], ['AC_PACKAGE_TARNAME'])dnl\n AC_SUBST([VERSION], ['AC_PACKAGE_VERSION'])])dnl\n\n_AM_IF_OPTION([no-define],,\n[AC_DEFINE_UNQUOTED([PACKAGE], [\"$PACKAGE\"], [Name of package])\n AC_DEFINE_UNQUOTED([VERSION], [\"$VERSION\"], [Version number of package])])dnl\n\n# Some tools Automake needs.\nAC_REQUIRE([AM_SANITY_CHECK])dnl\nAC_REQUIRE([AC_ARG_PROGRAM])dnl\nAM_MISSING_PROG([ACLOCAL], [aclocal-${am__api_version}])\nAM_MISSING_PROG([AUTOCONF], [autoconf])\nAM_MISSING_PROG([AUTOMAKE], [automake-${am__api_version}])\nAM_MISSING_PROG([AUTOHEADER], [autoheader])\nAM_MISSING_PROG([MAKEINFO], [makeinfo])\nAC_REQUIRE([AM_PROG_INSTALL_SH])dnl\nAC_REQUIRE([AM_PROG_INSTALL_STRIP])dnl\nAC_REQUIRE([AC_PROG_MKDIR_P])dnl\n# For better backward compatibility.  To be removed once Automake 1.9.x\n# dies out for good.  For more background, see:\n# <http://lists.gnu.org/archive/html/automake/2012-07/msg00001.html>\n# <http://lists.gnu.org/archive/html/automake/2012-07/msg00014.html>\nAC_SUBST([mkdir_p], ['$(MKDIR_P)'])\n# We need awk for the \"check\" target.  The system \"awk\" is bad on\n# some platforms.\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([AC_PROG_MAKE_SET])dnl\nAC_REQUIRE([AM_SET_LEADING_DOT])dnl\n_AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])],\n\t      [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],\n\t\t\t     [_AM_PROG_TAR([v7])])])\n_AM_IF_OPTION([no-dependencies],,\n[AC_PROVIDE_IFELSE([AC_PROG_CC],\n\t\t  [_AM_DEPENDENCIES([CC])],\n\t\t  [m4_define([AC_PROG_CC],\n\t\t\t     m4_defn([AC_PROG_CC])[_AM_DEPENDENCIES([CC])])])dnl\nAC_PROVIDE_IFELSE([AC_PROG_CXX],\n\t\t  [_AM_DEPENDENCIES([CXX])],\n\t\t  [m4_define([AC_PROG_CXX],\n\t\t\t     m4_defn([AC_PROG_CXX])[_AM_DEPENDENCIES([CXX])])])dnl\nAC_PROVIDE_IFELSE([AC_PROG_OBJC],\n\t\t  [_AM_DEPENDENCIES([OBJC])],\n\t\t  [m4_define([AC_PROG_OBJC],\n\t\t\t     m4_defn([AC_PROG_OBJC])[_AM_DEPENDENCIES([OBJC])])])dnl\nAC_PROVIDE_IFELSE([AC_PROG_OBJCXX],\n\t\t  [_AM_DEPENDENCIES([OBJCXX])],\n\t\t  [m4_define([AC_PROG_OBJCXX],\n\t\t\t     m4_defn([AC_PROG_OBJCXX])[_AM_DEPENDENCIES([OBJCXX])])])dnl\n])\nAC_REQUIRE([AM_SILENT_RULES])dnl\ndnl The testsuite driver may need to know about EXEEXT, so add the\ndnl 'am__EXEEXT' conditional if _AM_COMPILER_EXEEXT was seen.  This\ndnl macro is hooked onto _AC_COMPILER_EXEEXT early, see below.\nAC_CONFIG_COMMANDS_PRE(dnl\n[m4_provide_if([_AM_COMPILER_EXEEXT],\n  [AM_CONDITIONAL([am__EXEEXT], [test -n \"$EXEEXT\"])])])dnl\n])\n\ndnl Hook into '_AC_COMPILER_EXEEXT' early to learn its expansion.  Do not\ndnl add the conditional right here, as _AC_COMPILER_EXEEXT may be further\ndnl mangled by Autoconf and run in a shell conditional statement.\nm4_define([_AC_COMPILER_EXEEXT],\nm4_defn([_AC_COMPILER_EXEEXT])[m4_provide([_AM_COMPILER_EXEEXT])])\n\n\n# When config.status generates a header, we must update the stamp-h file.\n# This file resides in the same directory as the config header\n# that is generated.  The stamp files are numbered to have different names.\n\n# Autoconf calls _AC_AM_CONFIG_HEADER_HOOK (when defined) in the\n# loop where config.status creates the headers, so we can generate\n# our stamp files there.\nAC_DEFUN([_AC_AM_CONFIG_HEADER_HOOK],\n[# Compute $1's index in $config_headers.\n_am_arg=$1\n_am_stamp_count=1\nfor _am_header in $config_headers :; do\n  case $_am_header in\n    $_am_arg | $_am_arg:* )\n      break ;;\n    * )\n      _am_stamp_count=`expr $_am_stamp_count + 1` ;;\n  esac\ndone\necho \"timestamp for $_am_arg\" >`AS_DIRNAME([\"$_am_arg\"])`/stamp-h[]$_am_stamp_count])\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_PROG_INSTALL_SH\n# ------------------\n# Define $install_sh.\nAC_DEFUN([AM_PROG_INSTALL_SH],\n[AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\nif test x\"${install_sh}\" != xset; then\n  case $am_aux_dir in\n  *\\ * | *\\\t*)\n    install_sh=\"\\${SHELL} '$am_aux_dir/install-sh'\" ;;\n  *)\n    install_sh=\"\\${SHELL} $am_aux_dir/install-sh\"\n  esac\nfi\nAC_SUBST([install_sh])])\n\n# Copyright (C) 2003-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# Check whether the underlying file-system supports filenames\n# with a leading dot.  For instance MS-DOS doesn't.\nAC_DEFUN([AM_SET_LEADING_DOT],\n[rm -rf .tst 2>/dev/null\nmkdir .tst 2>/dev/null\nif test -d .tst; then\n  am__leading_dot=.\nelse\n  am__leading_dot=_\nfi\nrmdir .tst 2>/dev/null\nAC_SUBST([am__leading_dot])])\n\n# Check to see how 'make' treats includes.\t            -*- Autoconf -*-\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_MAKE_INCLUDE()\n# -----------------\n# Check to see how make treats includes.\nAC_DEFUN([AM_MAKE_INCLUDE],\n[am_make=${MAKE-make}\ncat > confinc << 'END'\nam__doit:\n\t@echo this is the am__doit target\n.PHONY: am__doit\nEND\n# If we don't find an include directive, just comment out the code.\nAC_MSG_CHECKING([for style of include used by $am_make])\nam__include=\"#\"\nam__quote=\n_am_result=none\n# First try GNU make style include.\necho \"include confinc\" > confmf\n# Ignore all kinds of additional output from 'make'.\ncase `$am_make -s -f confmf 2> /dev/null` in #(\n*the\\ am__doit\\ target*)\n  am__include=include\n  am__quote=\n  _am_result=GNU\n  ;;\nesac\n# Now try BSD make style include.\nif test \"$am__include\" = \"#\"; then\n   echo '.include \"confinc\"' > confmf\n   case `$am_make -s -f confmf 2> /dev/null` in #(\n   *the\\ am__doit\\ target*)\n     am__include=.include\n     am__quote=\"\\\"\"\n     _am_result=BSD\n     ;;\n   esac\nfi\nAC_SUBST([am__include])\nAC_SUBST([am__quote])\nAC_MSG_RESULT([$_am_result])\nrm -f confinc confmf\n])\n\n# Fake the existence of programs that GNU maintainers use.  -*- Autoconf -*-\n\n# Copyright (C) 1997-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_MISSING_PROG(NAME, PROGRAM)\n# ------------------------------\nAC_DEFUN([AM_MISSING_PROG],\n[AC_REQUIRE([AM_MISSING_HAS_RUN])\n$1=${$1-\"${am_missing_run}$2\"}\nAC_SUBST($1)])\n\n# AM_MISSING_HAS_RUN\n# ------------------\n# Define MISSING if not defined so far and test if it is modern enough.\n# If it is, set am_missing_run to use it, otherwise, to nothing.\nAC_DEFUN([AM_MISSING_HAS_RUN],\n[AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\nAC_REQUIRE_AUX_FILE([missing])dnl\nif test x\"${MISSING+set}\" != xset; then\n  case $am_aux_dir in\n  *\\ * | *\\\t*)\n    MISSING=\"\\${SHELL} \\\"$am_aux_dir/missing\\\"\" ;;\n  *)\n    MISSING=\"\\${SHELL} $am_aux_dir/missing\" ;;\n  esac\nfi\n# Use eval to expand $SHELL\nif eval \"$MISSING --is-lightweight\"; then\n  am_missing_run=\"$MISSING \"\nelse\n  am_missing_run=\n  AC_MSG_WARN(['missing' script is too old or missing])\nfi\n])\n\n# Helper functions for option handling.                     -*- Autoconf -*-\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# _AM_MANGLE_OPTION(NAME)\n# -----------------------\nAC_DEFUN([_AM_MANGLE_OPTION],\n[[_AM_OPTION_]m4_bpatsubst($1, [[^a-zA-Z0-9_]], [_])])\n\n# _AM_SET_OPTION(NAME)\n# --------------------\n# Set option NAME.  Presently that only means defining a flag for this option.\nAC_DEFUN([_AM_SET_OPTION],\n[m4_define(_AM_MANGLE_OPTION([$1]), [1])])\n\n# _AM_SET_OPTIONS(OPTIONS)\n# ------------------------\n# OPTIONS is a space-separated list of Automake options.\nAC_DEFUN([_AM_SET_OPTIONS],\n[m4_foreach_w([_AM_Option], [$1], [_AM_SET_OPTION(_AM_Option)])])\n\n# _AM_IF_OPTION(OPTION, IF-SET, [IF-NOT-SET])\n# -------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nAC_DEFUN([_AM_IF_OPTION],\n[m4_ifset(_AM_MANGLE_OPTION([$1]), [$2], [$3])])\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_RUN_LOG(COMMAND)\n# -------------------\n# Run COMMAND, save the exit status in ac_status, and log it.\n# (This has been adapted from Autoconf's _AC_RUN_LOG macro.)\nAC_DEFUN([AM_RUN_LOG],\n[{ echo \"$as_me:$LINENO: $1\" >&AS_MESSAGE_LOG_FD\n   ($1) >&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD\n   ac_status=$?\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   (exit $ac_status); }])\n\n# Check to make sure that the build environment is sane.    -*- Autoconf -*-\n\n# Copyright (C) 1996-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_SANITY_CHECK\n# ---------------\nAC_DEFUN([AM_SANITY_CHECK],\n[AC_MSG_CHECKING([whether build environment is sane])\n# Reject unsafe characters in $srcdir or the absolute working directory\n# name.  Accept space and tab only in the latter.\nam_lf='\n'\ncase `pwd` in\n  *[[\\\\\\\"\\#\\$\\&\\'\\`$am_lf]]*)\n    AC_MSG_ERROR([unsafe absolute working directory name]);;\nesac\ncase $srcdir in\n  *[[\\\\\\\"\\#\\$\\&\\'\\`$am_lf\\ \\\t]]*)\n    AC_MSG_ERROR([unsafe srcdir value: '$srcdir']);;\nesac\n\n# Do 'set' in a subshell so we don't clobber the current shell's\n# arguments.  Must try -L first in case configure is actually a\n# symlink; some systems play weird games with the mod time of symlinks\n# (eg FreeBSD returns the mod time of the symlink's containing\n# directory).\nif (\n   am_has_slept=no\n   for am_try in 1 2; do\n     echo \"timestamp, slept: $am_has_slept\" > conftest.file\n     set X `ls -Lt \"$srcdir/configure\" conftest.file 2> /dev/null`\n     if test \"$[*]\" = \"X\"; then\n\t# -L didn't work.\n\tset X `ls -t \"$srcdir/configure\" conftest.file`\n     fi\n     if test \"$[*]\" != \"X $srcdir/configure conftest.file\" \\\n\t&& test \"$[*]\" != \"X conftest.file $srcdir/configure\"; then\n\n\t# If neither matched, then we have a broken ls.  This can happen\n\t# if, for instance, CONFIG_SHELL is bash and it inherits a\n\t# broken ls alias from the environment.  This has actually\n\t# happened.  Such a system could not be considered \"sane\".\n\tAC_MSG_ERROR([ls -t appears to fail.  Make sure there is not a broken\n  alias in your environment])\n     fi\n     if test \"$[2]\" = conftest.file || test $am_try -eq 2; then\n       break\n     fi\n     # Just in case.\n     sleep 1\n     am_has_slept=yes\n   done\n   test \"$[2]\" = conftest.file\n   )\nthen\n   # Ok.\n   :\nelse\n   AC_MSG_ERROR([newly created file is older than distributed files!\nCheck your system clock])\nfi\nAC_MSG_RESULT([yes])\n# If we didn't sleep, we still need to ensure time stamps of config.status and\n# generated files are strictly newer.\nam_sleep_pid=\nif grep 'slept: no' conftest.file >/dev/null 2>&1; then\n  ( sleep 1 ) &\n  am_sleep_pid=$!\nfi\nAC_CONFIG_COMMANDS_PRE(\n  [AC_MSG_CHECKING([that generated files are newer than configure])\n   if test -n \"$am_sleep_pid\"; then\n     # Hide warnings about reused PIDs.\n     wait $am_sleep_pid 2>/dev/null\n   fi\n   AC_MSG_RESULT([done])])\nrm -f conftest.file\n])\n\n# Copyright (C) 2009-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_SILENT_RULES([DEFAULT])\n# --------------------------\n# Enable less verbose build rules; with the default set to DEFAULT\n# (\"yes\" being less verbose, \"no\" or empty being verbose).\nAC_DEFUN([AM_SILENT_RULES],\n[AC_ARG_ENABLE([silent-rules], [dnl\nAS_HELP_STRING(\n  [--enable-silent-rules],\n  [less verbose build output (undo: \"make V=1\")])\nAS_HELP_STRING(\n  [--disable-silent-rules],\n  [verbose build output (undo: \"make V=0\")])dnl\n])\ncase $enable_silent_rules in @%:@ (((\n  yes) AM_DEFAULT_VERBOSITY=0;;\n   no) AM_DEFAULT_VERBOSITY=1;;\n    *) AM_DEFAULT_VERBOSITY=m4_if([$1], [yes], [0], [1]);;\nesac\ndnl\ndnl A few 'make' implementations (e.g., NonStop OS and NextStep)\ndnl do not support nested variable expansions.\ndnl See automake bug#9928 and bug#10237.\nam_make=${MAKE-make}\nAC_CACHE_CHECK([whether $am_make supports nested variables],\n   [am_cv_make_support_nested_variables],\n   [if AS_ECHO([['TRUE=$(BAR$(V))\nBAR0=false\nBAR1=true\nV=1\nam__doit:\n\t@$(TRUE)\n.PHONY: am__doit']]) | $am_make -f - >/dev/null 2>&1; then\n  am_cv_make_support_nested_variables=yes\nelse\n  am_cv_make_support_nested_variables=no\nfi])\nif test $am_cv_make_support_nested_variables = yes; then\n  dnl Using '$V' instead of '$(V)' breaks IRIX make.\n  AM_V='$(V)'\n  AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'\nelse\n  AM_V=$AM_DEFAULT_VERBOSITY\n  AM_DEFAULT_V=$AM_DEFAULT_VERBOSITY\nfi\nAC_SUBST([AM_V])dnl\nAM_SUBST_NOTMAKE([AM_V])dnl\nAC_SUBST([AM_DEFAULT_V])dnl\nAM_SUBST_NOTMAKE([AM_DEFAULT_V])dnl\nAC_SUBST([AM_DEFAULT_VERBOSITY])dnl\nAM_BACKSLASH='\\'\nAC_SUBST([AM_BACKSLASH])dnl\n_AM_SUBST_NOTMAKE([AM_BACKSLASH])dnl\n])\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_PROG_INSTALL_STRIP\n# ---------------------\n# One issue with vendor 'install' (even GNU) is that you can't\n# specify the program used to strip binaries.  This is especially\n# annoying in cross-compiling environments, where the build's strip\n# is unlikely to handle the host's binaries.\n# Fortunately install-sh will honor a STRIPPROG variable, so we\n# always use install-sh in \"make install-strip\", and initialize\n# STRIPPROG with the value of the STRIP variable (set by the user).\nAC_DEFUN([AM_PROG_INSTALL_STRIP],\n[AC_REQUIRE([AM_PROG_INSTALL_SH])dnl\n# Installed binaries are usually stripped using 'strip' when the user\n# run \"make install-strip\".  However 'strip' might not be the right\n# tool to use in cross-compilation environments, therefore Automake\n# will honor the 'STRIP' environment variable to overrule this program.\ndnl Don't test for $cross_compiling = yes, because it might be 'maybe'.\nif test \"$cross_compiling\" != no; then\n  AC_CHECK_TOOL([STRIP], [strip], :)\nfi\nINSTALL_STRIP_PROGRAM=\"\\$(install_sh) -c -s\"\nAC_SUBST([INSTALL_STRIP_PROGRAM])])\n\n# Copyright (C) 2006-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# _AM_SUBST_NOTMAKE(VARIABLE)\n# ---------------------------\n# Prevent Automake from outputting VARIABLE = @VARIABLE@ in Makefile.in.\n# This macro is traced by Automake.\nAC_DEFUN([_AM_SUBST_NOTMAKE])\n\n# AM_SUBST_NOTMAKE(VARIABLE)\n# --------------------------\n# Public sister of _AM_SUBST_NOTMAKE.\nAC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])\n\n# Check how to create a tarball.                            -*- Autoconf -*-\n\n# Copyright (C) 2004-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# _AM_PROG_TAR(FORMAT)\n# --------------------\n# Check how to create a tarball in format FORMAT.\n# FORMAT should be one of 'v7', 'ustar', or 'pax'.\n#\n# Substitute a variable $(am__tar) that is a command\n# writing to stdout a FORMAT-tarball containing the directory\n# $tardir.\n#     tardir=directory && $(am__tar) > result.tar\n#\n# Substitute a variable $(am__untar) that extract such\n# a tarball read from stdin.\n#     $(am__untar) < result.tar\n#\nAC_DEFUN([_AM_PROG_TAR],\n[# Always define AMTAR for backward compatibility.  Yes, it's still used\n# in the wild :-(  We should find a proper way to deprecate it ...\nAC_SUBST([AMTAR], ['$${TAR-tar}'])\n\n# We'll loop over all known methods to create a tar archive until one works.\n_am_tools='gnutar m4_if([$1], [ustar], [plaintar]) pax cpio none'\n\nm4_if([$1], [v7],\n  [am__tar='$${TAR-tar} chof - \"$$tardir\"' am__untar='$${TAR-tar} xf -'],\n\n  [m4_case([$1],\n    [ustar],\n     [# The POSIX 1988 'ustar' format is defined with fixed-size fields.\n      # There is notably a 21 bits limit for the UID and the GID.  In fact,\n      # the 'pax' utility can hang on bigger UID/GID (see automake bug#8343\n      # and bug#13588).\n      am_max_uid=2097151 # 2^21 - 1\n      am_max_gid=$am_max_uid\n      # The $UID and $GID variables are not portable, so we need to resort\n      # to the POSIX-mandated id(1) utility.  Errors in the 'id' calls\n      # below are definitely unexpected, so allow the users to see them\n      # (that is, avoid stderr redirection).\n      am_uid=`id -u || echo unknown`\n      am_gid=`id -g || echo unknown`\n      AC_MSG_CHECKING([whether UID '$am_uid' is supported by ustar format])\n      if test $am_uid -le $am_max_uid; then\n         AC_MSG_RESULT([yes])\n      else\n         AC_MSG_RESULT([no])\n         _am_tools=none\n      fi\n      AC_MSG_CHECKING([whether GID '$am_gid' is supported by ustar format])\n      if test $am_gid -le $am_max_gid; then\n         AC_MSG_RESULT([yes])\n      else\n        AC_MSG_RESULT([no])\n        _am_tools=none\n      fi],\n\n  [pax],\n    [],\n\n  [m4_fatal([Unknown tar format])])\n\n  AC_MSG_CHECKING([how to create a $1 tar archive])\n\n  # Go ahead even if we have the value already cached.  We do so because we\n  # need to set the values for the 'am__tar' and 'am__untar' variables.\n  _am_tools=${am_cv_prog_tar_$1-$_am_tools}\n\n  for _am_tool in $_am_tools; do\n    case $_am_tool in\n    gnutar)\n      for _am_tar in tar gnutar gtar; do\n        AM_RUN_LOG([$_am_tar --version]) && break\n      done\n      am__tar=\"$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - \"'\"$$tardir\"'\n      am__tar_=\"$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - \"'\"$tardir\"'\n      am__untar=\"$_am_tar -xf -\"\n      ;;\n    plaintar)\n      # Must skip GNU tar: if it does not support --format= it doesn't create\n      # ustar tarball either.\n      (tar --version) >/dev/null 2>&1 && continue\n      am__tar='tar chf - \"$$tardir\"'\n      am__tar_='tar chf - \"$tardir\"'\n      am__untar='tar xf -'\n      ;;\n    pax)\n      am__tar='pax -L -x $1 -w \"$$tardir\"'\n      am__tar_='pax -L -x $1 -w \"$tardir\"'\n      am__untar='pax -r'\n      ;;\n    cpio)\n      am__tar='find \"$$tardir\" -print | cpio -o -H $1 -L'\n      am__tar_='find \"$tardir\" -print | cpio -o -H $1 -L'\n      am__untar='cpio -i -H $1 -d'\n      ;;\n    none)\n      am__tar=false\n      am__tar_=false\n      am__untar=false\n      ;;\n    esac\n\n    # If the value was cached, stop now.  We just wanted to have am__tar\n    # and am__untar set.\n    test -n \"${am_cv_prog_tar_$1}\" && break\n\n    # tar/untar a dummy directory, and stop if the command works.\n    rm -rf conftest.dir\n    mkdir conftest.dir\n    echo GrepMe > conftest.dir/file\n    AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])\n    rm -rf conftest.dir\n    if test -s conftest.tar; then\n      AM_RUN_LOG([$am__untar <conftest.tar])\n      AM_RUN_LOG([cat conftest.dir/file])\n      grep GrepMe conftest.dir/file >/dev/null 2>&1 && break\n    fi\n  done\n  rm -rf conftest.dir\n\n  AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])\n  AC_MSG_RESULT([$am_cv_prog_tar_$1])])\n\nAC_SUBST([am__tar])\nAC_SUBST([am__untar])\n]) # _AM_PROG_TAR\n\nm4_include([contrib/aclocal/mkdirp.m4])\nm4_include([contrib/aclocal/python.m4])\n",
        "/tmp/vanessa/spack-stage/spack-stage-glusterfs-7.2-7bafu5wprzvvhnabtlwumqs3qxil5tgh/spack-src/libglusterfs/src/xlator.c": "/*\n  Copyright (c) 2008-2012 Red Hat, Inc. <http://www.redhat.com>\n  This file is part of GlusterFS.\n\n  This file is licensed to you under your choice of the GNU Lesser\n  General Public License, version 3 or any later version (LGPLv3 or\n  later), or the GNU General Public License, version 2 (GPLv2), in all\n  cases as published by the Free Software Foundation.\n*/\n\n#include \"glusterfs/xlator.h\"\n#include <dlfcn.h>\n#include <netdb.h>\n#include <fnmatch.h>\n#include \"glusterfs/defaults.h\"\n#include \"glusterfs/libglusterfs-messages.h\"\n\n#define SET_DEFAULT_FOP(fn)                                                    \\\n    do {                                                                       \\\n        if (!xl->fops->fn)                                                     \\\n            xl->fops->fn = default_##fn;                                       \\\n        if (!xl->pass_through_fops->fn)                                        \\\n            xl->pass_through_fops->fn = default_##fn;                          \\\n    } while (0)\n\n#define SET_DEFAULT_CBK(fn)                                                    \\\n    do {                                                                       \\\n        if (!xl->cbks->fn)                                                     \\\n            xl->cbks->fn = default_##fn;                                       \\\n    } while (0)\n\npthread_mutex_t xlator_init_mutex = PTHREAD_MUTEX_INITIALIZER;\n\nvoid\nxlator_init_lock(void)\n{\n    (void)pthread_mutex_lock(&xlator_init_mutex);\n}\n\nvoid\nxlator_init_unlock(void)\n{\n    (void)pthread_mutex_unlock(&xlator_init_mutex);\n}\n\nstatic struct xlator_cbks default_cbks = {};\nstruct volume_options default_options[] = {\n    {\n        .key = {\"log-level\"},\n        .type = GF_OPTION_TYPE_STR,\n        .op_version = {GD_OP_VERSION_6_0},\n        .flags = OPT_FLAG_SETTABLE,\n        .tags = {\"generic\"},\n        .value = {\"DEBUG\", \"WARNING\", \"ERROR\", \"INFO\", \"CRITICAL\", \"NONE\",\n                  \"TRACE\"},\n        .description = \"Option to set log-level of given translator\",\n    },\n    {\n        .key = {NULL},\n    },\n};\n\n/* Handle the common options in each translator */\nvoid\nhandle_default_options(xlator_t *xl, dict_t *options)\n{\n    int ret;\n    char *value;\n\n    /* log-level */\n    ret = dict_get_str(options, \"log-level\", &value);\n    if (!ret) {\n        int log_level = glusterd_check_log_level(value);\n        if (log_level != -1) {\n            xl->loglevel = log_level;\n        }\n    }\n}\n\nstatic void\nfill_defaults(xlator_t *xl)\n{\n    if (xl == NULL) {\n        gf_msg_callingfn(\"xlator\", GF_LOG_WARNING, EINVAL, LG_MSG_INVALID_ARG,\n                         \"invalid argument\");\n        return;\n    }\n\n    if (!xl->pass_through_fops)\n        xl->pass_through_fops = default_fops;\n\n    SET_DEFAULT_FOP(create);\n    SET_DEFAULT_FOP(open);\n    SET_DEFAULT_FOP(stat);\n    SET_DEFAULT_FOP(readlink);\n    SET_DEFAULT_FOP(mknod);\n    SET_DEFAULT_FOP(mkdir);\n    SET_DEFAULT_FOP(unlink);\n    SET_DEFAULT_FOP(rmdir);\n    SET_DEFAULT_FOP(symlink);\n    SET_DEFAULT_FOP(rename);\n    SET_DEFAULT_FOP(link);\n    SET_DEFAULT_FOP(truncate);\n    SET_DEFAULT_FOP(readv);\n    SET_DEFAULT_FOP(writev);\n    SET_DEFAULT_FOP(statfs);\n    SET_DEFAULT_FOP(flush);\n    SET_DEFAULT_FOP(fsync);\n    SET_DEFAULT_FOP(setxattr);\n    SET_DEFAULT_FOP(getxattr);\n    SET_DEFAULT_FOP(fsetxattr);\n    SET_DEFAULT_FOP(fgetxattr);\n    SET_DEFAULT_FOP(removexattr);\n    SET_DEFAULT_FOP(fremovexattr);\n    SET_DEFAULT_FOP(opendir);\n    SET_DEFAULT_FOP(readdir);\n    SET_DEFAULT_FOP(readdirp);\n    SET_DEFAULT_FOP(fsyncdir);\n    SET_DEFAULT_FOP(access);\n    SET_DEFAULT_FOP(ftruncate);\n    SET_DEFAULT_FOP(fstat);\n    SET_DEFAULT_FOP(lk);\n    SET_DEFAULT_FOP(inodelk);\n    SET_DEFAULT_FOP(finodelk);\n    SET_DEFAULT_FOP(entrylk);\n    SET_DEFAULT_FOP(fentrylk);\n    SET_DEFAULT_FOP(lookup);\n    SET_DEFAULT_FOP(rchecksum);\n    SET_DEFAULT_FOP(xattrop);\n    SET_DEFAULT_FOP(fxattrop);\n    SET_DEFAULT_FOP(setattr);\n    SET_DEFAULT_FOP(fsetattr);\n    SET_DEFAULT_FOP(fallocate);\n    SET_DEFAULT_FOP(discard);\n    SET_DEFAULT_FOP(zerofill);\n    SET_DEFAULT_FOP(ipc);\n    SET_DEFAULT_FOP(seek);\n    SET_DEFAULT_FOP(lease);\n    SET_DEFAULT_FOP(getactivelk);\n    SET_DEFAULT_FOP(setactivelk);\n    SET_DEFAULT_FOP(put);\n\n    SET_DEFAULT_FOP(getspec);\n    SET_DEFAULT_FOP(icreate);\n    SET_DEFAULT_FOP(namelink);\n    SET_DEFAULT_FOP(copy_file_range);\n\n    if (!xl->cbks)\n        xl->cbks = &default_cbks;\n\n    SET_DEFAULT_CBK(release);\n    SET_DEFAULT_CBK(releasedir);\n    SET_DEFAULT_CBK(forget);\n\n    if (!xl->fini)\n        xl->fini = default_fini;\n\n    if (!xl->notify)\n        xl->notify = default_notify;\n\n    if (!xl->mem_acct_init)\n        xl->mem_acct_init = default_mem_acct_init;\n\n    return;\n}\n\nint\nxlator_set_type_virtual(xlator_t *xl, const char *type)\n{\n    GF_VALIDATE_OR_GOTO(\"xlator\", xl, out);\n    GF_VALIDATE_OR_GOTO(\"xlator\", type, out);\n\n    xl->type = gf_strdup(type);\n\n    if (xl->type)\n        return 0;\n\nout:\n    return -1;\n}\n\nint\nxlator_volopt_dynload(char *xlator_type, void **dl_handle,\n                      volume_opt_list_t *opt_list)\n{\n    int ret = -1;\n    char *name = NULL;\n    void *handle = NULL;\n    xlator_api_t *xlapi = NULL;\n\n    GF_VALIDATE_OR_GOTO(\"xlator\", xlator_type, out);\n\n    /* socket.so doesn't fall under the default xlator directory, hence we\n     * need this check */\n    if (!strstr(xlator_type, \"rpc-transport\"))\n        ret = gf_asprintf(&name, \"%s/%s.so\", XLATORDIR, xlator_type);\n    else\n        ret = gf_asprintf(&name, \"%s/%s.so\", XLATORPARENTDIR, xlator_type);\n    if (-1 == ret) {\n        goto out;\n    }\n\n    ret = -1;\n\n    gf_msg_trace(\"xlator\", 0, \"attempt to load file %s\", name);\n\n    handle = dlopen(name, RTLD_NOW);\n    if (!handle) {\n        gf_msg(\"xlator\", GF_LOG_WARNING, 0, LG_MSG_DLOPEN_FAILED, \"%s\",\n               dlerror());\n        goto out;\n    }\n\n    /* check new struct first, and then check this */\n    xlapi = dlsym(handle, \"xlator_api\");\n    if (!xlapi) {\n        gf_msg(\"xlator\", GF_LOG_ERROR, 0, LG_MSG_DLSYM_ERROR,\n               \"dlsym(xlator_api) missing: %s\", dlerror());\n        goto out;\n    }\n\n    opt_list->given_opt = xlapi->options;\n    if (!opt_list->given_opt) {\n        gf_msg(\"xlator\", GF_LOG_ERROR, 0, LG_MSG_LOAD_FAILED,\n               \"Failed to load xlator options table\");\n        goto out;\n    }\n\n    *dl_handle = handle;\n    handle = NULL;\n\n    ret = 0;\nout:\n    GF_FREE(name);\n    if (handle)\n        dlclose(handle);\n\n    gf_msg_debug(\"xlator\", 0, \"Returning %d\", ret);\n    return ret;\n}\n\nstatic int\nxlator_dynload_apis(xlator_t *xl)\n{\n    int ret = -1;\n    void *handle = NULL;\n    volume_opt_list_t *vol_opt = NULL;\n    xlator_api_t *xlapi = NULL;\n\n    handle = xl->dlhandle;\n\n    xlapi = dlsym(handle, \"xlator_api\");\n    if (!xlapi) {\n        gf_msg(\"xlator\", GF_LOG_ERROR, 0, LG_MSG_DLSYM_ERROR,\n               \"dlsym(xlator_api) missing: %s\", dlerror());\n        ret = -1;\n        goto out;\n    }\n\n    xl->fops = xlapi->fops;\n    if (!xl->fops) {\n        gf_msg(\"xlator\", GF_LOG_WARNING, 0, LG_MSG_DLSYM_ERROR,\n               \"%s: struct missing (fops)\", xl->name);\n        goto out;\n    }\n\n    xl->cbks = xlapi->cbks;\n    if (!xl->cbks) {\n        gf_msg_trace(\"xlator\", 0, \"%s: struct missing (cbks)\", xl->name);\n    }\n\n    xl->init = xlapi->init;\n    if (!xl->init) {\n        gf_msg(\"xlator\", GF_LOG_WARNING, 0, LG_MSG_DLSYM_ERROR,\n               \"%s: method missing (init)\", xl->name);\n        goto out;\n    }\n\n    xl->fini = xlapi->fini;\n    if (!xl->fini) {\n        gf_msg_trace(\"xlator\", 0, \"%s: method missing (fini)\", xl->name);\n    }\n\n    xl->reconfigure = xlapi->reconfigure;\n    if (!xl->reconfigure) {\n        gf_msg_trace(\"xlator\", 0, \"%s: method missing (reconfigure)\", xl->name);\n    }\n    xl->notify = xlapi->notify;\n    if (!xl->notify) {\n        gf_msg_trace(\"xlator\", 0, \"%s: method missing (notify)\", xl->name);\n    }\n    xl->dumpops = xlapi->dumpops;\n    if (!xl->dumpops) {\n        gf_msg_trace(\"xlator\", 0, \"%s: method missing (dumpops)\", xl->name);\n    }\n    xl->mem_acct_init = xlapi->mem_acct_init;\n    if (!xl->mem_acct_init) {\n        gf_msg_trace(\"xlator\", 0, \"%s: method missing (mem_acct_init)\",\n                     xl->name);\n    }\n\n    xl->dump_metrics = xlapi->dump_metrics;\n    if (!xl->dump_metrics) {\n        gf_msg_trace(\"xlator\", 0, \"%s: method missing (dump_metrics)\",\n                     xl->name);\n    }\n\n    xl->pass_through_fops = xlapi->pass_through_fops;\n    if (!xl->pass_through_fops) {\n        gf_msg_trace(\"xlator\", 0,\n                     \"%s: method missing (pass_through_fops), \"\n                     \"falling back to default\",\n                     xl->name);\n    }\n\n    vol_opt = GF_CALLOC(1, sizeof(volume_opt_list_t),\n                        gf_common_mt_volume_opt_list_t);\n    if (!vol_opt) {\n        goto out;\n    }\n    INIT_LIST_HEAD(&vol_opt->list);\n\n    vol_opt->given_opt = default_options;\n    list_add_tail(&vol_opt->list, &xl->volume_options);\n\n    if (xlapi->options) {\n        vol_opt = GF_CALLOC(1, sizeof(volume_opt_list_t),\n                            gf_common_mt_volume_opt_list_t);\n        if (!vol_opt) {\n            goto out;\n        }\n        INIT_LIST_HEAD(&vol_opt->list);\n\n        vol_opt->given_opt = xlapi->options;\n        list_add_tail(&vol_opt->list, &xl->volume_options);\n    }\n\n    xl->id = xlapi->xlator_id;\n    xl->flags = xlapi->flags;\n    xl->identifier = xlapi->identifier;\n    xl->category = xlapi->category;\n\n    memcpy(xl->op_version, xlapi->op_version,\n           sizeof(uint32_t) * GF_MAX_RELEASES);\n\n    ret = 0;\nout:\n    return ret;\n}\n\nint\nxlator_dynload(xlator_t *xl)\n{\n    int ret = -1;\n    char *name = NULL;\n    void *handle = NULL;\n\n    GF_VALIDATE_OR_GOTO(\"xlator\", xl, out);\n\n    INIT_LIST_HEAD(&xl->volume_options);\n\n    ret = gf_asprintf(&name, \"%s/%s.so\", XLATORDIR, xl->type);\n    if (-1 == ret) {\n        goto out;\n    }\n\n    ret = -1;\n\n    gf_msg_trace(\"xlator\", 0, \"attempt to load file %s\", name);\n\n    handle = dlopen(name, RTLD_NOW);\n    if (!handle) {\n        gf_msg(\"xlator\", GF_LOG_WARNING, 0, LG_MSG_DLOPEN_FAILED, \"%s\",\n               dlerror());\n        goto out;\n    }\n    xl->dlhandle = handle;\n\n    ret = xlator_dynload_apis(xl);\n    if (-1 == ret)\n        goto out;\n\n    fill_defaults(xl);\n\n    ret = 0;\n\nout:\n    GF_FREE(name);\n    return ret;\n}\n\nint\nxlator_set_type(xlator_t *xl, const char *type)\n{\n    int ret = 0;\n\n    /* Handle 'global' translator differently */\n    if (!strncmp(GF_GLOBAL_XLATOR_NAME, type, SLEN(GF_GLOBAL_XLATOR_NAME))) {\n        volume_opt_list_t *vol_opt = NULL;\n\n        /* set the required values from Global xlator */\n        xl->type = gf_strdup(GF_GLOBAL_XLATOR_NAME);\n        xl->cbks = global_xlator.cbks;\n        xl->fops = global_xlator.fops;\n        xl->init = global_xlator.init;\n        xl->fini = global_xlator.fini;\n        xl->reconfigure = global_xlator.reconfigure;\n\n        vol_opt = GF_CALLOC(1, sizeof(volume_opt_list_t),\n                            gf_common_mt_volume_opt_list_t);\n        if (!vol_opt) {\n            ret = -1;\n            goto out;\n        }\n\n        vol_opt->given_opt = global_xl_options;\n\n        INIT_LIST_HEAD(&xl->volume_options);\n        INIT_LIST_HEAD(&vol_opt->list);\n        list_add_tail(&vol_opt->list, &xl->volume_options);\n\n        fill_defaults(xl);\n        ret = 0;\n        goto out;\n    }\n\n    ret = xlator_set_type_virtual(xl, type);\n    if (!ret)\n        ret = xlator_dynload(xl);\nout:\n    return ret;\n}\n\nvoid\nxlator_set_inode_lru_limit(xlator_t *this, void *data)\n{\n    int inode_lru_limit = 0;\n\n    if (this->itable) {\n        if (!data) {\n            gf_msg(this->name, GF_LOG_WARNING, 0, LG_MSG_INVALID_ENTRY,\n                   \"input data is NULL. \"\n                   \"Cannot update the lru limit of the inode\"\n                   \" table. Continuing with older value\");\n            goto out;\n        }\n        inode_lru_limit = *(int *)data;\n        inode_table_set_lru_limit(this->itable, inode_lru_limit);\n    }\n\nout:\n    return;\n}\n\nvoid\nxlator_foreach(xlator_t *this, void (*fn)(xlator_t *each, void *data),\n               void *data)\n{\n    xlator_t *first = NULL;\n    xlator_t *old_THIS = NULL;\n\n    GF_VALIDATE_OR_GOTO(\"xlator\", this, out);\n    GF_VALIDATE_OR_GOTO(\"xlator\", fn, out);\n\n    first = this;\n\n    while (first->prev)\n        first = first->prev;\n\n    while (first) {\n        old_THIS = THIS;\n        THIS = first;\n\n        fn(first, data);\n\n        THIS = old_THIS;\n        first = first->next;\n    }\n\nout:\n    return;\n}\n\nvoid\nxlator_foreach_depth_first(xlator_t *this,\n                           void (*fn)(xlator_t *each, void *data), void *data)\n{\n    xlator_list_t *subv = NULL;\n\n    subv = this->children;\n\n    while (subv) {\n        xlator_foreach_depth_first(subv->xlator, fn, data);\n        subv = subv->next;\n    }\n\n    fn(this, data);\n}\n\nxlator_t *\nxlator_search_by_name(xlator_t *any, const char *name)\n{\n    xlator_t *search = NULL;\n\n    GF_VALIDATE_OR_GOTO(\"xlator\", any, out);\n    GF_VALIDATE_OR_GOTO(\"xlator\", name, out);\n\n    search = any;\n\n    while (search->prev)\n        search = search->prev;\n\n    while (search) {\n        if (!strcmp(search->name, name))\n            break;\n        search = search->next;\n    }\n\nout:\n    return search;\n}\n\n/*\n * With brick multiplexing, we sort of have multiple graphs, so\n * xlator_search_by_name might not find what we want.  Also, the translator\n * we're looking for might not be a direct child if something else was put in\n * between (as already happened with decompounder before that was fixed) and\n * it's hard to debug why our translator wasn't found.  Using a recursive tree\n * search instead of a linear search works around both problems.\n */\nstatic xlator_t *\nget_xlator_by_name_or_type(xlator_t *this, char *target, int is_name)\n{\n    xlator_list_t *trav;\n    xlator_t *child_xl;\n    char *value;\n\n    for (trav = this->children; trav; trav = trav->next) {\n        value = is_name ? trav->xlator->name : trav->xlator->type;\n        if (!strcmp(value, target) && !trav->xlator->cleanup_starting) {\n            return trav->xlator;\n        }\n        child_xl = get_xlator_by_name_or_type(trav->xlator, target, is_name);\n        if (child_xl) {\n            /*\n             * If the xlator we're looking for is somewhere down\n             * the stack, get_xlator_by_name expects to get a\n             * pointer to the top of its subtree (child of \"this\")\n             * while get_xlator_by_type expects a pointer to what\n             * we actually found.  Handle both cases here.\n             *\n             * TBD: rename the functions and fix callers to better\n             * reflect the difference in semantics.\n             */\n            return is_name ? trav->xlator : child_xl;\n        }\n    }\n\n    return NULL;\n}\n\nxlator_t *\nget_xlator_by_name(xlator_t *this, char *target)\n{\n    return get_xlator_by_name_or_type(this, target, 1);\n}\n\nxlator_t *\nget_xlator_by_type(xlator_t *this, char *target)\n{\n    return get_xlator_by_name_or_type(this, target, 0);\n}\n\nstatic int\n__xlator_init(xlator_t *xl)\n{\n    xlator_t *old_THIS = NULL;\n    int ret = 0;\n    int fop_idx = 0;\n\n    old_THIS = THIS;\n    THIS = xl;\n\n    /* initialize the metrics related locks */\n    for (fop_idx = 0; fop_idx < GF_FOP_MAXVALUE; fop_idx++) {\n        GF_ATOMIC_INIT(xl->stats.total.metrics[fop_idx].fop, 0);\n        GF_ATOMIC_INIT(xl->stats.total.metrics[fop_idx].cbk, 0);\n\n        GF_ATOMIC_INIT(xl->stats.interval.metrics[fop_idx].fop, 0);\n        GF_ATOMIC_INIT(xl->stats.interval.metrics[fop_idx].cbk, 0);\n    }\n    GF_ATOMIC_INIT(xl->stats.total.count, 0);\n    GF_ATOMIC_INIT(xl->stats.interval.count, 0);\n\n    xlator_init_lock();\n    handle_default_options(xl, xl->options);\n    ret = xl->init(xl);\n    xlator_init_unlock();\n\n    THIS = old_THIS;\n\n    return ret;\n}\n\nint\nxlator_init(xlator_t *xl)\n{\n    int32_t ret = -1;\n\n    GF_VALIDATE_OR_GOTO(\"xlator\", xl, out);\n\n    if (xl->mem_acct_init)\n        xl->mem_acct_init(xl);\n\n    xl->instance_name = NULL;\n    GF_ATOMIC_INIT(xl->xprtrefcnt, 0);\n    if (!xl->init) {\n        gf_msg(xl->name, GF_LOG_WARNING, 0, LG_MSG_INIT_FAILED,\n               \"No init() found\");\n        goto out;\n    }\n\n    ret = __xlator_init(xl);\n\n    if (ret) {\n        gf_msg(xl->name, GF_LOG_ERROR, 0, LG_MSG_VOLUME_ERROR,\n               \"Initialization of volume '%s' failed,\"\n               \" review your volfile again\",\n               xl->name);\n        goto out;\n    }\n\n    xl->init_succeeded = 1;\n    /*xl->cleanup_starting = 0;\n      xl->call_cleanup = 0;\n    */\n    ret = 0;\nout:\n    return ret;\n}\n\nstatic void\nxlator_fini_rec(xlator_t *xl)\n{\n    xlator_list_t *trav = NULL;\n    xlator_t *old_THIS = NULL;\n\n    GF_VALIDATE_OR_GOTO(\"xlator\", xl, out);\n\n    trav = xl->children;\n\n    while (trav) {\n        if (!trav->xlator->init_succeeded) {\n            break;\n        }\n\n        xlator_fini_rec(trav->xlator);\n        gf_msg_debug(trav->xlator->name, 0, \"fini done\");\n        trav = trav->next;\n    }\n\n    xl->cleanup_starting = 1;\n    if (xl->init_succeeded) {\n        if (xl->fini) {\n            old_THIS = THIS;\n            THIS = xl;\n\n            xl->fini(xl);\n\n            if (xl->local_pool) {\n                mem_pool_destroy(xl->local_pool);\n                xl->local_pool = NULL;\n            }\n            if (xl->itable) {\n                inode_table_destroy(xl->itable);\n                xl->itable = NULL;\n            }\n\n            THIS = old_THIS;\n        } else {\n            gf_msg_debug(xl->name, 0, \"No fini() found\");\n        }\n        xl->init_succeeded = 0;\n    }\n\nout:\n    return;\n}\n\nint\nxlator_notify(xlator_t *xl, int event, void *data, ...)\n{\n    xlator_t *old_THIS = NULL;\n    int ret = 0;\n\n    old_THIS = THIS;\n    THIS = xl;\n\n    ret = xl->notify(xl, event, data);\n\n    THIS = old_THIS;\n\n    return ret;\n}\n\nint\nxlator_mem_acct_init(xlator_t *xl, int num_types)\n{\n    int i = 0;\n    int ret = 0;\n\n    if (!xl)\n        return -1;\n\n    if (!xl->ctx)\n        return -1;\n\n    if (!xl->ctx->mem_acct_enable)\n        return 0;\n\n    xl->mem_acct = MALLOC(sizeof(struct mem_acct) +\n                          sizeof(struct mem_acct_rec) * num_types);\n\n    if (!xl->mem_acct) {\n        return -1;\n    }\n\n    xl->mem_acct->num_types = num_types;\n    GF_ATOMIC_INIT(xl->mem_acct->refcnt, 1);\n\n    for (i = 0; i < num_types; i++) {\n        memset(&xl->mem_acct->rec[i], 0, sizeof(struct mem_acct_rec));\n        ret = LOCK_INIT(&(xl->mem_acct->rec[i].lock));\n        if (ret) {\n            fprintf(stderr, \"Unable to lock..errno : %d\", errno);\n        }\n#ifdef DEBUG\n        INIT_LIST_HEAD(&(xl->mem_acct->rec[i].obj_list));\n#endif\n    }\n\n    return 0;\n}\n\nvoid\nxlator_mem_acct_unref(struct mem_acct *mem_acct)\n{\n    uint32_t i;\n\n    if (GF_ATOMIC_DEC(mem_acct->refcnt) == 0) {\n        for (i = 0; i < mem_acct->num_types; i++) {\n            LOCK_DESTROY(&(mem_acct->rec[i].lock));\n        }\n        FREE(mem_acct);\n    }\n}\n\nvoid\nxlator_tree_fini(xlator_t *xl)\n{\n    xlator_t *top = NULL;\n\n    GF_VALIDATE_OR_GOTO(\"xlator\", xl, out);\n\n    top = xl;\n    xlator_fini_rec(top);\n\nout:\n    return;\n}\n\nint\nxlator_list_destroy(xlator_list_t *list)\n{\n    xlator_list_t *next = NULL;\n\n    while (list) {\n        next = list->next;\n        GF_FREE(list);\n        list = next;\n    }\n\n    return 0;\n}\n\nint\nxlator_memrec_free(xlator_t *xl)\n{\n    struct mem_acct *mem_acct = NULL;\n\n    if (!xl) {\n        return 0;\n    }\n    mem_acct = xl->mem_acct;\n\n    if (mem_acct) {\n        xlator_mem_acct_unref(mem_acct);\n        xl->mem_acct = NULL;\n    }\n\n    return 0;\n}\n\nstatic int\nxlator_members_free(xlator_t *xl)\n{\n    volume_opt_list_t *vol_opt = NULL;\n    volume_opt_list_t *tmp = NULL;\n\n    if (!xl)\n        return 0;\n\n    GF_FREE(xl->name);\n    GF_FREE(xl->type);\n    if (!(xl->ctx && xl->ctx->cmd_args.valgrind) && xl->dlhandle)\n        dlclose(xl->dlhandle);\n    if (xl->options)\n        dict_unref(xl->options);\n\n    xlator_list_destroy(xl->children);\n\n    xlator_list_destroy(xl->parents);\n\n    list_for_each_entry_safe(vol_opt, tmp, &xl->volume_options, list)\n    {\n        list_del_init(&vol_opt->list);\n        GF_FREE(vol_opt);\n    }\n\n    return 0;\n}\n\n/* This function destroys all the xlator members except for the\n * xlator strcuture and its mem accounting field.\n *\n * If otherwise, it would destroy the master xlator object as well\n * its mem accounting, which would mean after calling glusterfs_graph_destroy()\n * there cannot be any reference to GF_FREE() from the master xlator, this is\n * not possible because of the following dependencies:\n * - glusterfs_ctx_t will have mem pools allocated by the master xlators\n * - xlator objects will have references to those mem pools(g: dict)\n *\n * Ordering the freeing in any of the order will also not solve the dependency:\n * - Freeing xlator objects(including memory accounting) before mem pools\n *   destruction will mean not use GF_FREE while destroying mem pools.\n * - Freeing mem pools and then destroying xlator objects would lead to crashes\n *   when xlator tries to unref dict or other mem pool objects.\n *\n * Hence the way chosen out of this interdependency is to split xlator object\n * free into two stages:\n * - Free all the xlator members excpet for its mem accounting structure\n * - Free all the mem accouting structures of xlator along with the xlator\n *   object itself.\n *\n * This two stages of destruction, is mainly required for glfs_fini().\n */\n\nint\nxlator_tree_free_members(xlator_t *tree)\n{\n    xlator_t *trav = tree;\n    xlator_t *prev = tree;\n\n    if (!tree) {\n        gf_msg(\"parser\", GF_LOG_ERROR, 0, LG_MSG_TREE_NOT_FOUND,\n               \"Translator tree not found\");\n        return -1;\n    }\n\n    while (prev) {\n        trav = prev->next;\n        xlator_members_free(prev);\n        prev = trav;\n    }\n\n    return 0;\n}\n\nint\nxlator_tree_free_memacct(xlator_t *tree)\n{\n    xlator_t *trav = tree;\n    xlator_t *prev = tree;\n\n    if (!tree) {\n        gf_msg(\"parser\", GF_LOG_ERROR, 0, LG_MSG_TREE_NOT_FOUND,\n               \"Translator tree not found\");\n        return -1;\n    }\n\n    while (prev) {\n        trav = prev->next;\n        xlator_memrec_free(prev);\n        GF_FREE(prev);\n        prev = trav;\n    }\n\n    return 0;\n}\n\nstatic int\nxlator_mem_free(xlator_t *xl)\n{\n    volume_opt_list_t *vol_opt = NULL;\n    volume_opt_list_t *tmp = NULL;\n\n    if (!xl)\n        return 0;\n\n    if (xl->options) {\n        dict_unref(xl->options);\n        xl->options = NULL;\n    }\n\n    list_for_each_entry_safe(vol_opt, tmp, &xl->volume_options, list)\n    {\n        list_del_init(&vol_opt->list);\n        GF_FREE(vol_opt);\n    }\n\n    xlator_memrec_free(xl);\n\n    return 0;\n}\n\nstatic void\nxlator_call_fini(xlator_t *this)\n{\n    if (!this || this->call_cleanup)\n        return;\n    this->cleanup_starting = 1;\n    this->call_cleanup = 1;\n    xlator_call_fini(this->next);\n    this->fini(this);\n}\n\nvoid\nxlator_mem_cleanup(xlator_t *this)\n{\n    xlator_list_t *list = this->children;\n    xlator_t *trav = list->xlator;\n    inode_table_t *inode_table = NULL;\n    xlator_t *prev = trav;\n    glusterfs_ctx_t *ctx = NULL;\n    xlator_list_t **trav_p = NULL;\n    xlator_t *top = NULL;\n    xlator_t *victim = NULL;\n\n    if (this->call_cleanup || !this->ctx)\n        return;\n\n    this->call_cleanup = 1;\n    ctx = this->ctx;\n\n    xlator_call_fini(trav);\n\n    while (prev) {\n        trav = prev->next;\n        xlator_mem_free(prev);\n        prev = trav;\n    }\n\n    inode_table = this->itable;\n    if (inode_table) {\n        inode_table_destroy(inode_table);\n        this->itable = NULL;\n    }\n\n    if (this->fini) {\n        this->fini(this);\n    }\n\n    xlator_mem_free(this);\n\n    if (ctx->active) {\n        top = ctx->active->first;\n        LOCK(&ctx->volfile_lock);\n        /* TODO here we have leak for xlator node in a graph */\n        /* Need to move only top xlator from a graph */\n        for (trav_p = &top->children; *trav_p; trav_p = &(*trav_p)->next) {\n            victim = (*trav_p)->xlator;\n            if (victim->call_cleanup && !strcmp(victim->name, this->name)) {\n                (*trav_p) = (*trav_p)->next;\n                break;\n            }\n        }\n        UNLOCK(&ctx->volfile_lock);\n    }\n}\n\nvoid\nloc_wipe(loc_t *loc)\n{\n    if (loc->inode) {\n        inode_unref(loc->inode);\n        loc->inode = NULL;\n    }\n    if (loc->path) {\n        GF_FREE((char *)loc->path);\n        loc->path = NULL;\n    }\n\n    if (loc->parent) {\n        inode_unref(loc->parent);\n        loc->parent = NULL;\n    }\n\n    memset(loc, 0, sizeof(*loc));\n}\n\nint\nloc_path(loc_t *loc, const char *bname)\n{\n    int ret = 0;\n\n    if (loc->path)\n        goto out;\n\n    ret = -1;\n\n    if (bname && !strlen(bname))\n        bname = NULL;\n\n    if (!bname)\n        goto inode_path;\n\n    if (loc->parent && !gf_uuid_is_null(loc->parent->gfid)) {\n        ret = inode_path(loc->parent, bname, (char **)&loc->path);\n    } else if (!gf_uuid_is_null(loc->pargfid)) {\n        ret = gf_asprintf((char **)&loc->path, INODE_PATH_FMT \"/%s\",\n                          uuid_utoa(loc->pargfid), bname);\n    }\n\n    if (loc->path)\n        goto out;\n\ninode_path:\n    if (loc->inode && !gf_uuid_is_null(loc->inode->gfid)) {\n        ret = inode_path(loc->inode, NULL, (char **)&loc->path);\n    } else if (!gf_uuid_is_null(loc->gfid)) {\n        ret = gf_asprintf((char **)&loc->path, INODE_PATH_FMT,\n                          uuid_utoa(loc->gfid));\n    }\nout:\n    return ret;\n}\n\nvoid\nloc_gfid(loc_t *loc, uuid_t gfid)\n{\n    if (!gfid)\n        goto out;\n    gf_uuid_clear(gfid);\n\n    if (!loc)\n        goto out;\n    else if (!gf_uuid_is_null(loc->gfid))\n        gf_uuid_copy(gfid, loc->gfid);\n    else if (loc->inode && (!gf_uuid_is_null(loc->inode->gfid)))\n        gf_uuid_copy(gfid, loc->inode->gfid);\nout:\n    return;\n}\n\nvoid\nloc_pargfid(loc_t *loc, uuid_t gfid)\n{\n    if (!gfid)\n        goto out;\n    gf_uuid_clear(gfid);\n\n    if (!loc)\n        goto out;\n    else if (!gf_uuid_is_null(loc->pargfid))\n        gf_uuid_copy(gfid, loc->pargfid);\n    else if (loc->parent && (!gf_uuid_is_null(loc->parent->gfid)))\n        gf_uuid_copy(gfid, loc->parent->gfid);\nout:\n    return;\n}\n\nchar *\nloc_gfid_utoa(loc_t *loc)\n{\n    uuid_t gfid = {\n        0,\n    };\n    loc_gfid(loc, gfid);\n    return uuid_utoa(gfid);\n}\n\nint\nloc_touchup(loc_t *loc, const char *name)\n{\n    char *path = NULL;\n    int ret = 0;\n\n    if (loc->path)\n        goto out;\n\n    if (loc->parent && name && strlen(name)) {\n        ret = inode_path(loc->parent, name, &path);\n        if (path) /*Guaranteed to have trailing '/' */\n            loc->name = strrchr(path, '/') + 1;\n\n        if (gf_uuid_is_null(loc->pargfid))\n            gf_uuid_copy(loc->pargfid, loc->parent->gfid);\n    } else if (loc->inode) {\n        ret = inode_path(loc->inode, 0, &path);\n        if (gf_uuid_is_null(loc->gfid))\n            gf_uuid_copy(loc->gfid, loc->inode->gfid);\n    }\n\n    if (ret < 0 || !path) {\n        ret = -ENOMEM;\n        goto out;\n    }\n\n    loc->path = path;\n    ret = 0;\nout:\n    return ret;\n}\n\nint\nloc_copy_overload_parent(loc_t *dst, loc_t *src, inode_t *parent)\n{\n    int ret = -1;\n\n    GF_VALIDATE_OR_GOTO(\"xlator\", dst, err);\n    GF_VALIDATE_OR_GOTO(\"xlator\", src, err);\n    GF_VALIDATE_OR_GOTO(\"xlator\", parent, err);\n\n    gf_uuid_copy(dst->gfid, src->gfid);\n    gf_uuid_copy(dst->pargfid, parent->gfid);\n\n    if (src->inode)\n        dst->inode = inode_ref(src->inode);\n\n    if (parent)\n        dst->parent = inode_ref(parent);\n\n    if (src->path) {\n        dst->path = gf_strdup(src->path);\n\n        if (!dst->path)\n            goto out;\n\n        if (src->name)\n            dst->name = strrchr(dst->path, '/');\n        if (dst->name)\n            dst->name++;\n    } else if (src->name) {\n        dst->name = src->name;\n    }\n\n    ret = 0;\nout:\n    if (ret == -1)\n        loc_wipe(dst);\n\nerr:\n    return ret;\n}\n\nint\nloc_copy(loc_t *dst, loc_t *src)\n{\n    int ret = -1;\n\n    GF_VALIDATE_OR_GOTO(\"xlator\", dst, err);\n    GF_VALIDATE_OR_GOTO(\"xlator\", src, err);\n\n    if (!gf_uuid_is_null(src->gfid))\n        gf_uuid_copy(dst->gfid, src->gfid);\n    else if (src->inode && !gf_uuid_is_null(src->inode->gfid))\n        gf_uuid_copy(dst->gfid, src->inode->gfid);\n\n    gf_uuid_copy(dst->pargfid, src->pargfid);\n\n    if (src->inode)\n        dst->inode = inode_ref(src->inode);\n\n    if (src->parent)\n        dst->parent = inode_ref(src->parent);\n\n    if (src->path) {\n        dst->path = gf_strdup(src->path);\n\n        if (!dst->path)\n            goto out;\n\n        if (src->name)\n            dst->name = strrchr(dst->path, '/');\n        if (dst->name)\n            dst->name++;\n    } else if (src->name) {\n        dst->name = src->name;\n    }\n\n    ret = 0;\nout:\n    if (ret == -1)\n        loc_wipe(dst);\n\nerr:\n    return ret;\n}\n\ngf_boolean_t\nloc_is_root(loc_t *loc)\n{\n    if (loc && __is_root_gfid(loc->gfid)) {\n        return _gf_true;\n    } else if (loc && loc->inode && __is_root_gfid(loc->inode->gfid)) {\n        return _gf_true;\n    }\n\n    return _gf_false;\n}\n\nint32_t\nloc_build_child(loc_t *child, loc_t *parent, char *name)\n{\n    int32_t ret = -1;\n\n    GF_VALIDATE_OR_GOTO(\"xlator\", child, out);\n    GF_VALIDATE_OR_GOTO(\"xlator\", parent, out);\n    GF_VALIDATE_OR_GOTO(\"xlator\", name, out);\n\n    loc_gfid(parent, child->pargfid);\n\n    if (strcmp(parent->path, \"/\") == 0)\n        ret = gf_asprintf((char **)&child->path, \"/%s\", name);\n    else\n        ret = gf_asprintf((char **)&child->path, \"%s/%s\", parent->path, name);\n\n    if (ret < 0 || !child->path) {\n        ret = -1;\n        goto out;\n    }\n\n    child->name = strrchr(child->path, '/') + 1;\n\n    child->parent = inode_ref(parent->inode);\n    child->inode = inode_new(parent->inode->table);\n\n    if (!child->inode) {\n        ret = -1;\n        goto out;\n    }\n\n    ret = 0;\n\nout:\n    if ((ret < 0) && child)\n        loc_wipe(child);\n\n    return ret;\n}\n\ngf_boolean_t\nloc_is_nameless(loc_t *loc)\n{\n    gf_boolean_t ret = _gf_false;\n\n    GF_VALIDATE_OR_GOTO(\"xlator\", loc, out);\n\n    if ((!loc->parent && gf_uuid_is_null(loc->pargfid)) || !loc->name)\n        ret = _gf_true;\nout:\n    return ret;\n}\n\nint\nxlator_destroy(xlator_t *xl)\n{\n    if (!xl)\n        return 0;\n\n    xlator_members_free(xl);\n    xlator_memrec_free(xl);\n    GF_FREE(xl);\n\n    return 0;\n}\n\nstatic int32_t\ngf_bin_to_string(char *dst, size_t size, void *src, size_t len)\n{\n    if (len >= size) {\n        return EINVAL;\n    }\n\n    memcpy(dst, src, len);\n    dst[len] = 0;\n\n    return 0;\n}\n\nint\nis_gf_log_command(xlator_t *this, const char *name, char *value, size_t size)\n{\n    xlator_t *trav = NULL;\n    char key[1024] = {\n        0,\n    };\n    int ret = -1;\n    int log_level = -1;\n    gf_boolean_t syslog_flag = 0;\n    glusterfs_ctx_t *ctx = NULL;\n\n    if (!strcmp(\"trusted.glusterfs.syslog\", name)) {\n        ret = gf_bin_to_string(key, sizeof(key), value, size);\n        if (ret != 0) {\n            goto out;\n        }\n        ret = gf_string2boolean(key, &syslog_flag);\n        if (ret) {\n            ret = EOPNOTSUPP;\n            goto out;\n        }\n        if (syslog_flag)\n            gf_log_enable_syslog();\n        else\n            gf_log_disable_syslog();\n\n        goto out;\n    }\n\n    if (fnmatch(\"trusted.glusterfs*set-log-level\", name, FNM_NOESCAPE))\n        goto out;\n\n    ret = gf_bin_to_string(key, sizeof(key), value, size);\n    if (ret != 0) {\n        goto out;\n    }\n\n    log_level = glusterd_check_log_level(key);\n    if (log_level == -1) {\n        ret = EOPNOTSUPP;\n        goto out;\n    }\n\n    /* Some crude way to change the log-level of process */\n    if (!strcmp(name, \"trusted.glusterfs.set-log-level\")) {\n        gf_msg(\"glusterfs\", gf_log_get_loglevel(), 0, LG_MSG_SET_LOG_LEVEL,\n               \"setting log level to %d (old-value=%d)\", log_level,\n               gf_log_get_loglevel());\n        gf_log_set_loglevel(this->ctx, log_level);\n        ret = 0;\n        goto out;\n    }\n\n    if (!strcmp(name, \"trusted.glusterfs.fuse.set-log-level\")) {\n        /* */\n        gf_msg(this->name, gf_log_get_xl_loglevel(this), 0,\n               LG_MSG_SET_LOG_LEVEL, \"setting log level to %d (old-value=%d)\",\n               log_level, gf_log_get_xl_loglevel(this));\n        gf_log_set_xl_loglevel(this, log_level);\n        ret = 0;\n        goto out;\n    }\n\n    ctx = this->ctx;\n    if (!ctx)\n        goto out;\n    if (!ctx->active)\n        goto out;\n    trav = ctx->active->top;\n\n    while (trav) {\n        snprintf(key, 1024, \"trusted.glusterfs.%s.set-log-level\", trav->name);\n        if (fnmatch(name, key, FNM_NOESCAPE) == 0) {\n            gf_msg(trav->name, gf_log_get_xl_loglevel(trav), 0,\n                   LG_MSG_SET_LOG_LEVEL,\n                   \"setting log level to %d (old-value=%d)\", log_level,\n                   gf_log_get_xl_loglevel(trav));\n            gf_log_set_xl_loglevel(trav, log_level);\n            ret = 0;\n        }\n        trav = trav->next;\n    }\nout:\n    return ret;\n}\n\nint\nglusterd_check_log_level(const char *value)\n{\n    int log_level = -1;\n\n    if (!strcasecmp(value, \"CRITICAL\")) {\n        log_level = GF_LOG_CRITICAL;\n    } else if (!strcasecmp(value, \"ERROR\")) {\n        log_level = GF_LOG_ERROR;\n    } else if (!strcasecmp(value, \"WARNING\")) {\n        log_level = GF_LOG_WARNING;\n    } else if (!strcasecmp(value, \"INFO\")) {\n        log_level = GF_LOG_INFO;\n    } else if (!strcasecmp(value, \"DEBUG\")) {\n        log_level = GF_LOG_DEBUG;\n    } else if (!strcasecmp(value, \"TRACE\")) {\n        log_level = GF_LOG_TRACE;\n    } else if (!strcasecmp(value, \"NONE\")) {\n        log_level = GF_LOG_NONE;\n    }\n\n    if (log_level == -1)\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, LG_MSG_INIT_FAILED,\n               \"Invalid log-level. possible values are \"\n               \"DEBUG|WARNING|ERROR|CRITICAL|NONE|TRACE\");\n\n    return log_level;\n}\n\nint\nxlator_subvolume_count(xlator_t *this)\n{\n    int i = 0;\n    xlator_list_t *list = NULL;\n\n    for (list = this->children; list; list = list->next)\n        i++;\n    return i;\n}\n\nstatic int\n_copy_opt_to_child(dict_t *options, char *key, data_t *value, void *data)\n{\n    xlator_t *child = data;\n\n    gf_log(__func__, GF_LOG_DEBUG, \"copying %s to child %s\", key, child->name);\n    dict_set(child->options, key, value);\n\n    return 0;\n}\n\nint\ncopy_opts_to_child(xlator_t *src, xlator_t *dst, char *glob)\n{\n    return dict_foreach_fnmatch(src->options, glob, _copy_opt_to_child, dst);\n}\n\nint\nglusterfs_delete_volfile_checksum(glusterfs_ctx_t *ctx, const char *volfile_id)\n{\n    gf_volfile_t *volfile_tmp = NULL;\n    gf_volfile_t *volfile_obj = NULL;\n\n    list_for_each_entry(volfile_tmp, &ctx->volfile_list, volfile_list)\n    {\n        if (!strcmp(volfile_id, volfile_tmp->vol_id)) {\n            list_del_init(&volfile_tmp->volfile_list);\n            volfile_obj = volfile_tmp;\n            break;\n        }\n    }\n\n    if (volfile_obj) {\n        GF_FREE(volfile_obj);\n    } else {\n        gf_log(THIS->name, GF_LOG_ERROR,\n               \"failed to get volfile \"\n               \"checksum for volfile id %s.\",\n               volfile_id);\n    }\n\n    return 0;\n}\n\n/*\n   The function is required to take dict ref for every xlator at graph.\n   At the time of compare graph topology create a graph and populate\n   key values in the dictionary, after finished graph comparison we do destroy\n   the new graph.At the time of construct graph we don't take any reference\n   so to avoid dict leak at the of destroying graph due to ref counter underflow\n   we need to call dict_ref here.\n\n*/\n\nvoid\ngluster_graph_take_reference(xlator_t *tree)\n{\n    xlator_t *trav = tree;\n    xlator_t *prev = tree;\n\n    if (!tree) {\n        gf_msg(\"parser\", GF_LOG_ERROR, 0, LG_MSG_TREE_NOT_FOUND,\n               \"Translator tree not found\");\n        return;\n    }\n\n    while (prev) {\n        trav = prev->next;\n        if (prev->options)\n            dict_ref(prev->options);\n        prev = trav;\n    }\n    return;\n}\n\ngf_boolean_t\nmgmt_is_multiplexed_daemon(char *name)\n{\n    const char *mux_daemons[] = {\"glustershd\", NULL};\n    int i;\n\n    if (!name)\n        return _gf_false;\n\n    for (i = 0; mux_daemons[i]; i++) {\n        if (!strcmp(name, mux_daemons[i]))\n            return _gf_true;\n    }\n    return _gf_false;\n}\n\ngf_boolean_t\nxlator_is_cleanup_starting(xlator_t *this)\n{\n    gf_boolean_t cleanup = _gf_false;\n    glusterfs_graph_t *graph = NULL;\n    xlator_t *xl = NULL;\n\n    if (!this) {\n        gf_msg(\"xlator\", GF_LOG_WARNING, EINVAL, LG_MSG_INVALID_ARG,\n               \"xlator object is null, returning false\");\n        goto out;\n    }\n\n    graph = this->graph;\n    if (!graph) {\n        gf_msg(\"xlator\", GF_LOG_WARNING, EINVAL, LG_MSG_INVALID_ARG,\n               \"Graph is not set for xlator %s\", this->name);\n        goto out;\n    }\n\n    xl = graph->first;\n    if (xl && xl->cleanup_starting)\n        cleanup = _gf_true;\nout:\n    return cleanup;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-glusterfs-7.2-7bafu5wprzvvhnabtlwumqs3qxil5tgh/spack-src/libglusterfs/src/glusterfs/xlator.h": "/*\n  Copyright (c) 2008-2012 Red Hat, Inc. <http://www.redhat.com>\n  This file is part of GlusterFS.\n\n  This file is licensed to you under your choice of the GNU Lesser\n  General Public License, version 3 or any later version (LGPLv3 or\n  later), or the GNU General Public License, version 2 (GPLv2), in all\n  cases as published by the Free Software Foundation.\n*/\n\n#ifndef _XLATOR_H\n#define _XLATOR_H\n\n#include <stdint.h>                 // for int32_t\n#include <sys/types.h>              // for off_t, mode_t, off64_t, dev_t\n#include \"glusterfs-fops.h\"         // for GF_FOP_MAXVALUE, entrylk_cmd\n#include \"glusterfs/atomic.h\"       // for gf_atomic_t\n#include \"glusterfs/glusterfs.h\"    // for gf_boolean_t, glusterfs_ctx_t\n#include \"glusterfs/compat-uuid.h\"  // for uuid_t\n#include \"glusterfs/compat.h\"\n#include \"glusterfs/event-history.h\"\n#include \"glusterfs/dict.h\"\n#include \"glusterfs/latency.h\"\n\n#define FIRST_CHILD(xl) (xl->children->xlator)\n#define SECOND_CHILD(xl) (xl->children->next->xlator)\n\n#define GF_SET_ATTR_MODE 0x1\n#define GF_SET_ATTR_UID 0x2\n#define GF_SET_ATTR_GID 0x4\n#define GF_SET_ATTR_SIZE 0x8\n#define GF_SET_ATTR_ATIME 0x10\n#define GF_SET_ATTR_MTIME 0x20\n#define GF_SET_ATTR_CTIME 0x40\n\n#define gf_attr_mode_set(mode) ((mode)&GF_SET_ATTR_MODE)\n#define gf_attr_uid_set(mode) ((mode)&GF_SET_ATTR_UID)\n#define gf_attr_gid_set(mode) ((mode)&GF_SET_ATTR_GID)\n#define gf_attr_size_set(mode) ((mode)&GF_SET_ATTR_SIZE)\n#define gf_attr_atime_set(mode) ((mode)&GF_SET_ATTR_ATIME)\n#define gf_attr_mtime_set(mode) ((mode)&GF_SET_ATTR_MTIME)\n\nstruct _xlator;\ntypedef struct _xlator xlator_t;\nstruct _dir_entry;\ntypedef struct _dir_entry dir_entry_t;\nstruct _gf_dirent;\ntypedef struct _gf_dirent gf_dirent_t;\nstruct _loc;\ntypedef struct _loc loc_t;\n\ntypedef int32_t (*event_notify_fn_t)(xlator_t *this, int32_t event, void *data,\n                                     ...);\n\n#include \"glusterfs/list.h\"\n#include \"glusterfs/gf-dirent.h\"\n#include \"glusterfs/stack.h\"\n#include \"glusterfs/iobuf.h\"\n#include \"glusterfs/globals.h\"\n#include \"glusterfs/iatt.h\"\n#include \"glusterfs/options.h\"\n#include \"glusterfs/client_t.h\"\n\nstruct _loc {\n    const char *path;\n    const char *name;\n    inode_t *inode;\n    inode_t *parent;\n    /* Currently all location based operations are through 'gfid' of inode.\n     * But the 'inode->gfid' only gets set in higher most layer (as in,\n     * 'fuse', 'protocol/server', or 'nfs/server'). So if translators want\n     * to send fops on a inode before the 'inode->gfid' is set, they have to\n     * make use of below 'gfid' fields\n     */\n    uuid_t gfid;\n    uuid_t pargfid;\n};\n\ntypedef int32_t (*fop_getspec_cbk_t)(call_frame_t *frame, void *cookie,\n                                     xlator_t *this, int32_t op_ret,\n                                     int32_t op_errno, char *spec_data);\n\ntypedef int32_t (*fop_rchecksum_cbk_t)(call_frame_t *frame, void *cookie,\n                                       xlator_t *this, int32_t op_ret,\n                                       int32_t op_errno, uint32_t weak_checksum,\n                                       uint8_t *strong_checksum, dict_t *xdata);\n\ntypedef int32_t (*fop_getspec_t)(call_frame_t *frame, xlator_t *this,\n                                 const char *key, int32_t flag);\n\ntypedef int32_t (*fop_rchecksum_t)(call_frame_t *frame, xlator_t *this,\n                                   fd_t *fd, off_t offset, int32_t len,\n                                   dict_t *xdata);\n\ntypedef int32_t (*fop_lookup_cbk_t)(call_frame_t *frame, void *cookie,\n                                    xlator_t *this, int32_t op_ret,\n                                    int32_t op_errno, inode_t *inode,\n                                    struct iatt *buf, dict_t *xdata,\n                                    struct iatt *postparent);\n\ntypedef int32_t (*fop_stat_cbk_t)(call_frame_t *frame, void *cookie,\n                                  xlator_t *this, int32_t op_ret,\n                                  int32_t op_errno, struct iatt *buf,\n                                  dict_t *xdata);\n\ntypedef int32_t (*fop_fstat_cbk_t)(call_frame_t *frame, void *cookie,\n                                   xlator_t *this, int32_t op_ret,\n                                   int32_t op_errno, struct iatt *buf,\n                                   dict_t *xdata);\n\ntypedef int32_t (*fop_truncate_cbk_t)(call_frame_t *frame, void *cookie,\n                                      xlator_t *this, int32_t op_ret,\n                                      int32_t op_errno, struct iatt *prebuf,\n                                      struct iatt *postbuf, dict_t *xdata);\n\ntypedef int32_t (*fop_ftruncate_cbk_t)(call_frame_t *frame, void *cookie,\n                                       xlator_t *this, int32_t op_ret,\n                                       int32_t op_errno, struct iatt *prebuf,\n                                       struct iatt *postbuf, dict_t *xdata);\n\ntypedef int32_t (*fop_access_cbk_t)(call_frame_t *frame, void *cookie,\n                                    xlator_t *this, int32_t op_ret,\n                                    int32_t op_errno, dict_t *xdata);\n\ntypedef int32_t (*fop_readlink_cbk_t)(call_frame_t *frame, void *cookie,\n                                      xlator_t *this, int32_t op_ret,\n                                      int32_t op_errno, const char *path,\n                                      struct iatt *buf, dict_t *xdata);\n\ntypedef int32_t (*fop_mknod_cbk_t)(call_frame_t *frame, void *cookie,\n                                   xlator_t *this, int32_t op_ret,\n                                   int32_t op_errno, inode_t *inode,\n                                   struct iatt *buf, struct iatt *preparent,\n                                   struct iatt *postparent, dict_t *xdata);\n\ntypedef int32_t (*fop_mkdir_cbk_t)(call_frame_t *frame, void *cookie,\n                                   xlator_t *this, int32_t op_ret,\n                                   int32_t op_errno, inode_t *inode,\n                                   struct iatt *buf, struct iatt *preparent,\n                                   struct iatt *postparent, dict_t *xdata);\n\ntypedef int32_t (*fop_unlink_cbk_t)(call_frame_t *frame, void *cookie,\n                                    xlator_t *this, int32_t op_ret,\n                                    int32_t op_errno, struct iatt *preparent,\n                                    struct iatt *postparent, dict_t *xdata);\n\ntypedef int32_t (*fop_rmdir_cbk_t)(call_frame_t *frame, void *cookie,\n                                   xlator_t *this, int32_t op_ret,\n                                   int32_t op_errno, struct iatt *preparent,\n                                   struct iatt *postparent, dict_t *xdata);\n\ntypedef int32_t (*fop_symlink_cbk_t)(call_frame_t *frame, void *cookie,\n                                     xlator_t *this, int32_t op_ret,\n                                     int32_t op_errno, inode_t *inode,\n                                     struct iatt *buf, struct iatt *preparent,\n                                     struct iatt *postparent, dict_t *xdata);\n\ntypedef int32_t (*fop_rename_cbk_t)(call_frame_t *frame, void *cookie,\n                                    xlator_t *this, int32_t op_ret,\n                                    int32_t op_errno, struct iatt *buf,\n                                    struct iatt *preoldparent,\n                                    struct iatt *postoldparent,\n                                    struct iatt *prenewparent,\n                                    struct iatt *postnewparent, dict_t *xdata);\n\ntypedef int32_t (*fop_link_cbk_t)(call_frame_t *frame, void *cookie,\n                                  xlator_t *this, int32_t op_ret,\n                                  int32_t op_errno, inode_t *inode,\n                                  struct iatt *buf, struct iatt *preparent,\n                                  struct iatt *postparent, dict_t *xdata);\n\ntypedef int32_t (*fop_create_cbk_t)(call_frame_t *frame, void *cookie,\n                                    xlator_t *this, int32_t op_ret,\n                                    int32_t op_errno, fd_t *fd, inode_t *inode,\n                                    struct iatt *buf, struct iatt *preparent,\n                                    struct iatt *postparent, dict_t *xdata);\n\ntypedef int32_t (*fop_open_cbk_t)(call_frame_t *frame, void *cookie,\n                                  xlator_t *this, int32_t op_ret,\n                                  int32_t op_errno, fd_t *fd, dict_t *xdata);\n\ntypedef int32_t (*fop_readv_cbk_t)(call_frame_t *frame, void *cookie,\n                                   xlator_t *this, int32_t op_ret,\n                                   int32_t op_errno, struct iovec *vector,\n                                   int32_t count, struct iatt *stbuf,\n                                   struct iobref *iobref, dict_t *xdata);\n\ntypedef int32_t (*fop_writev_cbk_t)(call_frame_t *frame, void *cookie,\n                                    xlator_t *this, int32_t op_ret,\n                                    int32_t op_errno, struct iatt *prebuf,\n                                    struct iatt *postbuf, dict_t *xdata);\n\ntypedef int32_t (*fop_flush_cbk_t)(call_frame_t *frame, void *cookie,\n                                   xlator_t *this, int32_t op_ret,\n                                   int32_t op_errno, dict_t *xdata);\n\ntypedef int32_t (*fop_fsync_cbk_t)(call_frame_t *frame, void *cookie,\n                                   xlator_t *this, int32_t op_ret,\n                                   int32_t op_errno, struct iatt *prebuf,\n                                   struct iatt *postbuf, dict_t *xdata);\n\ntypedef int32_t (*fop_opendir_cbk_t)(call_frame_t *frame, void *cookie,\n                                     xlator_t *this, int32_t op_ret,\n                                     int32_t op_errno, fd_t *fd, dict_t *xdata);\n\ntypedef int32_t (*fop_fsyncdir_cbk_t)(call_frame_t *frame, void *cookie,\n                                      xlator_t *this, int32_t op_ret,\n                                      int32_t op_errno, dict_t *xdata);\n\ntypedef int32_t (*fop_statfs_cbk_t)(call_frame_t *frame, void *cookie,\n                                    xlator_t *this, int32_t op_ret,\n                                    int32_t op_errno, struct statvfs *buf,\n                                    dict_t *xdata);\n\ntypedef int32_t (*fop_setxattr_cbk_t)(call_frame_t *frame, void *cookie,\n                                      xlator_t *this, int32_t op_ret,\n                                      int32_t op_errno, dict_t *xdata);\n\ntypedef int32_t (*fop_getxattr_cbk_t)(call_frame_t *frame, void *cookie,\n                                      xlator_t *this, int32_t op_ret,\n                                      int32_t op_errno, dict_t *dict,\n                                      dict_t *xdata);\n\ntypedef int32_t (*fop_fsetxattr_cbk_t)(call_frame_t *frame, void *cookie,\n                                       xlator_t *this, int32_t op_ret,\n                                       int32_t op_errno, dict_t *xdata);\n\ntypedef int32_t (*fop_fgetxattr_cbk_t)(call_frame_t *frame, void *cookie,\n                                       xlator_t *this, int32_t op_ret,\n                                       int32_t op_errno, dict_t *dict,\n                                       dict_t *xdata);\n\ntypedef int32_t (*fop_removexattr_cbk_t)(call_frame_t *frame, void *cookie,\n                                         xlator_t *this, int32_t op_ret,\n                                         int32_t op_errno, dict_t *xdata);\n\ntypedef int32_t (*fop_fremovexattr_cbk_t)(call_frame_t *frame, void *cookie,\n                                          xlator_t *this, int32_t op_ret,\n                                          int32_t op_errno, dict_t *xdata);\n\ntypedef int32_t (*fop_lk_cbk_t)(call_frame_t *frame, void *cookie,\n                                xlator_t *this, int32_t op_ret,\n                                int32_t op_errno, struct gf_flock *flock,\n                                dict_t *xdata);\n\ntypedef int32_t (*fop_inodelk_cbk_t)(call_frame_t *frame, void *cookie,\n                                     xlator_t *this, int32_t op_ret,\n                                     int32_t op_errno, dict_t *xdata);\n\ntypedef int32_t (*fop_finodelk_cbk_t)(call_frame_t *frame, void *cookie,\n                                      xlator_t *this, int32_t op_ret,\n                                      int32_t op_errno, dict_t *xdata);\n\ntypedef int32_t (*fop_entrylk_cbk_t)(call_frame_t *frame, void *cookie,\n                                     xlator_t *this, int32_t op_ret,\n                                     int32_t op_errno, dict_t *xdata);\n\ntypedef int32_t (*fop_fentrylk_cbk_t)(call_frame_t *frame, void *cookie,\n                                      xlator_t *this, int32_t op_ret,\n                                      int32_t op_errno, dict_t *xdata);\n\ntypedef int32_t (*fop_readdir_cbk_t)(call_frame_t *frame, void *cookie,\n                                     xlator_t *this, int32_t op_ret,\n                                     int32_t op_errno, gf_dirent_t *entries,\n                                     dict_t *xdata);\n\ntypedef int32_t (*fop_readdirp_cbk_t)(call_frame_t *frame, void *cookie,\n                                      xlator_t *this, int32_t op_ret,\n                                      int32_t op_errno, gf_dirent_t *entries,\n                                      dict_t *xdata);\n\ntypedef int32_t (*fop_xattrop_cbk_t)(call_frame_t *frame, void *cookie,\n                                     xlator_t *this, int32_t op_ret,\n                                     int32_t op_errno, dict_t *xattr,\n                                     dict_t *xdata);\n\ntypedef int32_t (*fop_fxattrop_cbk_t)(call_frame_t *frame, void *cookie,\n                                      xlator_t *this, int32_t op_ret,\n                                      int32_t op_errno, dict_t *xattr,\n                                      dict_t *xdata);\n\ntypedef int32_t (*fop_setattr_cbk_t)(call_frame_t *frame, void *cookie,\n                                     xlator_t *this, int32_t op_ret,\n                                     int32_t op_errno, struct iatt *preop_stbuf,\n                                     struct iatt *postop_stbuf, dict_t *xdata);\n\ntypedef int32_t (*fop_fsetattr_cbk_t)(call_frame_t *frame, void *cookie,\n                                      xlator_t *this, int32_t op_ret,\n                                      int32_t op_errno,\n                                      struct iatt *preop_stbuf,\n                                      struct iatt *postop_stbuf, dict_t *xdata);\n\ntypedef int32_t (*fop_fallocate_cbk_t)(call_frame_t *frame, void *cookie,\n                                       xlator_t *this, int32_t op_ret,\n                                       int32_t op_errno,\n                                       struct iatt *preop_stbuf,\n                                       struct iatt *postop_stbuf,\n                                       dict_t *xdata);\n\ntypedef int32_t (*fop_discard_cbk_t)(call_frame_t *frame, void *cookie,\n                                     xlator_t *this, int32_t op_ret,\n                                     int32_t op_errno, struct iatt *preop_stbuf,\n                                     struct iatt *postop_stbuf, dict_t *xdata);\n\ntypedef int32_t (*fop_zerofill_cbk_t)(call_frame_t *frame, void *cookie,\n                                      xlator_t *this, int32_t op_ret,\n                                      int32_t op_errno,\n                                      struct iatt *preop_stbuf,\n                                      struct iatt *postop_stbuf, dict_t *xdata);\n\ntypedef int32_t (*fop_ipc_cbk_t)(call_frame_t *frame, void *cookie,\n                                 xlator_t *this, int32_t op_ret,\n                                 int32_t op_errno, dict_t *xdata);\n\ntypedef int32_t (*fop_seek_cbk_t)(call_frame_t *frame, void *cookie,\n                                  xlator_t *this, int32_t op_ret,\n                                  int32_t op_errno, off_t offset,\n                                  dict_t *xdata);\n\ntypedef int32_t (*fop_lease_cbk_t)(call_frame_t *frame, void *cookie,\n                                   xlator_t *this, int32_t op_ret,\n                                   int32_t op_errno, struct gf_lease *lease,\n                                   dict_t *xdata);\ntypedef int32_t (*fop_compound_cbk_t)(call_frame_t *frame, void *cookie,\n                                      xlator_t *this, int32_t op_ret,\n                                      int32_t op_errno, void *data,\n                                      dict_t *xdata);\n\ntypedef int32_t (*fop_getactivelk_cbk_t)(call_frame_t *frame, void *cookie,\n                                         xlator_t *this, int32_t op_ret,\n                                         int32_t op_errno,\n                                         lock_migration_info_t *locklist,\n                                         dict_t *xdata);\n\ntypedef int32_t (*fop_setactivelk_cbk_t)(call_frame_t *frame, void *cookie,\n                                         xlator_t *this, int32_t op_ret,\n                                         int32_t op_errno, dict_t *xdata);\n\ntypedef int32_t (*fop_put_cbk_t)(call_frame_t *frame, void *cookie,\n                                 xlator_t *this, int32_t op_ret,\n                                 int32_t op_errno, inode_t *inode,\n                                 struct iatt *buf, struct iatt *preparent,\n                                 struct iatt *postparent, dict_t *xdata);\n\ntypedef int32_t (*fop_icreate_cbk_t)(call_frame_t *frame, void *cookie,\n                                     xlator_t *this, int32_t op_ret,\n                                     int32_t op_errno, inode_t *inode,\n                                     struct iatt *buf, dict_t *xdata);\n\ntypedef int32_t (*fop_namelink_cbk_t)(call_frame_t *frame, void *cookie,\n                                      xlator_t *this, int32_t op_ret,\n                                      int32_t op_errno, struct iatt *prebuf,\n                                      struct iatt *postbuf, dict_t *xdata);\n\ntypedef int32_t (*fop_copy_file_range_cbk_t)(\n    call_frame_t *frame, void *cookie, xlator_t *this, int32_t op_ret,\n    int32_t op_errno, struct iatt *stbuf, struct iatt *prebuf_dst,\n    struct iatt *postbuf_dst, dict_t *xdata);\n\ntypedef int32_t (*fop_lookup_t)(call_frame_t *frame, xlator_t *this, loc_t *loc,\n                                dict_t *xdata);\n\ntypedef int32_t (*fop_stat_t)(call_frame_t *frame, xlator_t *this, loc_t *loc,\n                              dict_t *xdata);\n\ntypedef int32_t (*fop_fstat_t)(call_frame_t *frame, xlator_t *this, fd_t *fd,\n                               dict_t *xdata);\n\ntypedef int32_t (*fop_truncate_t)(call_frame_t *frame, xlator_t *this,\n                                  loc_t *loc, off_t offset, dict_t *xdata);\n\ntypedef int32_t (*fop_ftruncate_t)(call_frame_t *frame, xlator_t *this,\n                                   fd_t *fd, off_t offset, dict_t *xdata);\n\ntypedef int32_t (*fop_access_t)(call_frame_t *frame, xlator_t *this, loc_t *loc,\n                                int32_t mask, dict_t *xdata);\n\ntypedef int32_t (*fop_readlink_t)(call_frame_t *frame, xlator_t *this,\n                                  loc_t *loc, size_t size, dict_t *xdata);\n\ntypedef int32_t (*fop_mknod_t)(call_frame_t *frame, xlator_t *this, loc_t *loc,\n                               mode_t mode, dev_t rdev, mode_t umask,\n                               dict_t *xdata);\n\ntypedef int32_t (*fop_mkdir_t)(call_frame_t *frame, xlator_t *this, loc_t *loc,\n                               mode_t mode, mode_t umask, dict_t *xdata);\n\ntypedef int32_t (*fop_unlink_t)(call_frame_t *frame, xlator_t *this, loc_t *loc,\n                                int xflags, dict_t *xdata);\n\ntypedef int32_t (*fop_rmdir_t)(call_frame_t *frame, xlator_t *this, loc_t *loc,\n                               int xflags, dict_t *xdata);\n\ntypedef int32_t (*fop_symlink_t)(call_frame_t *frame, xlator_t *this,\n                                 const char *linkname, loc_t *loc, mode_t umask,\n                                 dict_t *xdata);\n\ntypedef int32_t (*fop_rename_t)(call_frame_t *frame, xlator_t *this,\n                                loc_t *oldloc, loc_t *newloc, dict_t *xdata);\n\ntypedef int32_t (*fop_link_t)(call_frame_t *frame, xlator_t *this,\n                              loc_t *oldloc, loc_t *newloc, dict_t *xdata);\n\ntypedef int32_t (*fop_create_t)(call_frame_t *frame, xlator_t *this, loc_t *loc,\n                                int32_t flags, mode_t mode, mode_t umask,\n                                fd_t *fd, dict_t *xdata);\n\n/* Tell subsequent writes on the fd_t to fsync after every writev fop without\n * requiring a fsync fop.\n */\n#define GF_OPEN_FSYNC 0x01\n\n/* Tell write-behind to disable writing behind despite O_SYNC not being set.\n */\n#define GF_OPEN_NOWB 0x02\n\ntypedef int32_t (*fop_open_t)(call_frame_t *frame, xlator_t *this, loc_t *loc,\n                              int32_t flags, fd_t *fd, dict_t *xdata);\n\ntypedef int32_t (*fop_readv_t)(call_frame_t *frame, xlator_t *this, fd_t *fd,\n                               size_t size, off_t offset, uint32_t flags,\n                               dict_t *xdata);\n\ntypedef int32_t (*fop_writev_t)(call_frame_t *frame, xlator_t *this, fd_t *fd,\n                                struct iovec *vector, int32_t count,\n                                off_t offset, uint32_t flags,\n                                struct iobref *iobref, dict_t *xdata);\n\ntypedef int32_t (*fop_flush_t)(call_frame_t *frame, xlator_t *this, fd_t *fd,\n                               dict_t *xdata);\n\ntypedef int32_t (*fop_fsync_t)(call_frame_t *frame, xlator_t *this, fd_t *fd,\n                               int32_t datasync, dict_t *xdata);\n\ntypedef int32_t (*fop_opendir_t)(call_frame_t *frame, xlator_t *this,\n                                 loc_t *loc, fd_t *fd, dict_t *xdata);\n\ntypedef int32_t (*fop_fsyncdir_t)(call_frame_t *frame, xlator_t *this, fd_t *fd,\n                                  int32_t datasync, dict_t *xdata);\n\ntypedef int32_t (*fop_statfs_t)(call_frame_t *frame, xlator_t *this, loc_t *loc,\n                                dict_t *xdata);\n\ntypedef int32_t (*fop_setxattr_t)(call_frame_t *frame, xlator_t *this,\n                                  loc_t *loc, dict_t *dict, int32_t flags,\n                                  dict_t *xdata);\n\ntypedef int32_t (*fop_getxattr_t)(call_frame_t *frame, xlator_t *this,\n                                  loc_t *loc, const char *name, dict_t *xdata);\n\ntypedef int32_t (*fop_fsetxattr_t)(call_frame_t *frame, xlator_t *this,\n                                   fd_t *fd, dict_t *dict, int32_t flags,\n                                   dict_t *xdata);\n\ntypedef int32_t (*fop_fgetxattr_t)(call_frame_t *frame, xlator_t *this,\n                                   fd_t *fd, const char *name, dict_t *xdata);\n\ntypedef int32_t (*fop_removexattr_t)(call_frame_t *frame, xlator_t *this,\n                                     loc_t *loc, const char *name,\n                                     dict_t *xdata);\n\ntypedef int32_t (*fop_fremovexattr_t)(call_frame_t *frame, xlator_t *this,\n                                      fd_t *fd, const char *name,\n                                      dict_t *xdata);\n\ntypedef int32_t (*fop_lk_t)(call_frame_t *frame, xlator_t *this, fd_t *fd,\n                            int32_t cmd, struct gf_flock *flock, dict_t *xdata);\n\ntypedef int32_t (*fop_inodelk_t)(call_frame_t *frame, xlator_t *this,\n                                 const char *volume, loc_t *loc, int32_t cmd,\n                                 struct gf_flock *flock, dict_t *xdata);\n\ntypedef int32_t (*fop_finodelk_t)(call_frame_t *frame, xlator_t *this,\n                                  const char *volume, fd_t *fd, int32_t cmd,\n                                  struct gf_flock *flock, dict_t *xdata);\n\ntypedef int32_t (*fop_entrylk_t)(call_frame_t *frame, xlator_t *this,\n                                 const char *volume, loc_t *loc,\n                                 const char *basename, entrylk_cmd cmd,\n                                 entrylk_type type, dict_t *xdata);\n\ntypedef int32_t (*fop_fentrylk_t)(call_frame_t *frame, xlator_t *this,\n                                  const char *volume, fd_t *fd,\n                                  const char *basename, entrylk_cmd cmd,\n                                  entrylk_type type, dict_t *xdata);\n\ntypedef int32_t (*fop_readdir_t)(call_frame_t *frame, xlator_t *this, fd_t *fd,\n                                 size_t size, off_t offset, dict_t *xdata);\n\ntypedef int32_t (*fop_readdirp_t)(call_frame_t *frame, xlator_t *this, fd_t *fd,\n                                  size_t size, off_t offset, dict_t *xdata);\n\ntypedef int32_t (*fop_xattrop_t)(call_frame_t *frame, xlator_t *this,\n                                 loc_t *loc, gf_xattrop_flags_t optype,\n                                 dict_t *xattr, dict_t *xdata);\n\ntypedef int32_t (*fop_fxattrop_t)(call_frame_t *frame, xlator_t *this, fd_t *fd,\n                                  gf_xattrop_flags_t optype, dict_t *xattr,\n                                  dict_t *xdata);\n\ntypedef int32_t (*fop_setattr_t)(call_frame_t *frame, xlator_t *this,\n                                 loc_t *loc, struct iatt *stbuf, int32_t valid,\n                                 dict_t *xdata);\n\ntypedef int32_t (*fop_fsetattr_t)(call_frame_t *frame, xlator_t *this, fd_t *fd,\n                                  struct iatt *stbuf, int32_t valid,\n                                  dict_t *xdata);\n\ntypedef int32_t (*fop_fallocate_t)(call_frame_t *frame, xlator_t *this,\n                                   fd_t *fd, int32_t keep_size, off_t offset,\n                                   size_t len, dict_t *xdata);\n\ntypedef int32_t (*fop_discard_t)(call_frame_t *frame, xlator_t *this, fd_t *fd,\n                                 off_t offset, size_t len, dict_t *xdata);\n\ntypedef int32_t (*fop_zerofill_t)(call_frame_t *frame, xlator_t *this, fd_t *fd,\n                                  off_t offset, off_t len, dict_t *xdata);\n\ntypedef int32_t (*fop_ipc_t)(call_frame_t *frame, xlator_t *this, int32_t op,\n                             dict_t *xdata);\n\ntypedef int32_t (*fop_seek_t)(call_frame_t *frame, xlator_t *this, fd_t *fd,\n                              off_t offset, gf_seek_what_t what, dict_t *xdata);\n\ntypedef int32_t (*fop_lease_t)(call_frame_t *frame, xlator_t *this, loc_t *loc,\n                               struct gf_lease *lease, dict_t *xdata);\n\ntypedef int32_t (*fop_compound_t)(call_frame_t *frame, xlator_t *this,\n                                  void *args, dict_t *xdata);\n\ntypedef int32_t (*fop_getactivelk_t)(call_frame_t *frame, xlator_t *this,\n                                     loc_t *loc, dict_t *xdata);\n\ntypedef int32_t (*fop_setactivelk_t)(call_frame_t *frame, xlator_t *this,\n                                     loc_t *loc,\n                                     lock_migration_info_t *locklist,\n                                     dict_t *xdata);\n\ntypedef int32_t (*fop_put_t)(call_frame_t *frame, xlator_t *this, loc_t *loc,\n                             mode_t mode, mode_t umask, uint32_t flags,\n                             struct iovec *vector, int32_t count, off_t offset,\n                             struct iobref *iobref, dict_t *xattr,\n                             dict_t *xdata);\n\ntypedef int32_t (*fop_icreate_t)(call_frame_t *frame, xlator_t *this,\n                                 loc_t *loc, mode_t mode, dict_t *xdata);\n\ntypedef int32_t (*fop_namelink_t)(call_frame_t *frame, xlator_t *this,\n                                  loc_t *loc, dict_t *xdata);\ntypedef int32_t (*fop_copy_file_range_t)(call_frame_t *frame, xlator_t *this,\n                                         fd_t *fd_in, off64_t off_in,\n                                         fd_t *fd_out, off64_t off_out,\n                                         size_t len, uint32_t flags,\n                                         dict_t *xdata);\n\n/* WARNING: make sure the list is in order with FOP definition in\n   `rpc/xdr/src/glusterfs-fops.x`.\n   If it is not in order, mainly the metrics related feature would be broken */\nstruct xlator_fops {\n    fop_stat_t stat;\n    fop_readlink_t readlink;\n    fop_mknod_t mknod;\n    fop_mkdir_t mkdir;\n    fop_unlink_t unlink;\n    fop_rmdir_t rmdir;\n    fop_symlink_t symlink;\n    fop_rename_t rename;\n    fop_link_t link;\n    fop_truncate_t truncate;\n    fop_open_t open;\n    fop_readv_t readv;\n    fop_writev_t writev;\n    fop_statfs_t statfs;\n    fop_flush_t flush;\n    fop_fsync_t fsync;\n    fop_setxattr_t setxattr;\n    fop_getxattr_t getxattr;\n    fop_removexattr_t removexattr;\n    fop_opendir_t opendir;\n    fop_fsyncdir_t fsyncdir;\n    fop_access_t access;\n    fop_create_t create;\n    fop_ftruncate_t ftruncate;\n    fop_fstat_t fstat;\n    fop_lk_t lk;\n    fop_lookup_t lookup;\n    fop_readdir_t readdir;\n    fop_inodelk_t inodelk;\n    fop_finodelk_t finodelk;\n    fop_entrylk_t entrylk;\n    fop_fentrylk_t fentrylk;\n    fop_xattrop_t xattrop;\n    fop_fxattrop_t fxattrop;\n    fop_fgetxattr_t fgetxattr;\n    fop_fsetxattr_t fsetxattr;\n    fop_rchecksum_t rchecksum;\n    fop_setattr_t setattr;\n    fop_fsetattr_t fsetattr;\n    fop_readdirp_t readdirp;\n\n    /* These 3 are required to keep the index same as GF_FOP_##FOP */\n    void *forget_placeholder;\n    void *release_placeholder;\n    void *releasedir_placeholder;\n\n    fop_getspec_t getspec;\n    fop_fremovexattr_t fremovexattr;\n    fop_fallocate_t fallocate;\n    fop_discard_t discard;\n    fop_zerofill_t zerofill;\n    fop_ipc_t ipc;\n    fop_seek_t seek;\n    fop_lease_t lease;\n    fop_compound_t compound;\n    fop_getactivelk_t getactivelk;\n    fop_setactivelk_t setactivelk;\n    fop_put_t put;\n    fop_icreate_t icreate;\n    fop_namelink_t namelink;\n    fop_copy_file_range_t copy_file_range;\n\n    /* these entries are used for a typechecking hack in STACK_WIND _only_ */\n    /* make sure to add _cbk variables only after defining regular fops as\n       its relative position is used to get the index */\n    fop_stat_cbk_t stat_cbk;\n    fop_readlink_cbk_t readlink_cbk;\n    fop_mknod_cbk_t mknod_cbk;\n    fop_mkdir_cbk_t mkdir_cbk;\n    fop_unlink_cbk_t unlink_cbk;\n    fop_rmdir_cbk_t rmdir_cbk;\n    fop_symlink_cbk_t symlink_cbk;\n    fop_rename_cbk_t rename_cbk;\n    fop_link_cbk_t link_cbk;\n    fop_truncate_cbk_t truncate_cbk;\n    fop_open_cbk_t open_cbk;\n    fop_readv_cbk_t readv_cbk;\n    fop_writev_cbk_t writev_cbk;\n    fop_statfs_cbk_t statfs_cbk;\n    fop_flush_cbk_t flush_cbk;\n    fop_fsync_cbk_t fsync_cbk;\n    fop_setxattr_cbk_t setxattr_cbk;\n    fop_getxattr_cbk_t getxattr_cbk;\n    fop_removexattr_cbk_t removexattr_cbk;\n    fop_opendir_cbk_t opendir_cbk;\n    fop_fsyncdir_cbk_t fsyncdir_cbk;\n    fop_access_cbk_t access_cbk;\n    fop_create_cbk_t create_cbk;\n    fop_ftruncate_cbk_t ftruncate_cbk;\n    fop_fstat_cbk_t fstat_cbk;\n    fop_lk_cbk_t lk_cbk;\n    fop_lookup_cbk_t lookup_cbk;\n    fop_readdir_cbk_t readdir_cbk;\n    fop_inodelk_cbk_t inodelk_cbk;\n    fop_finodelk_cbk_t finodelk_cbk;\n    fop_entrylk_cbk_t entrylk_cbk;\n    fop_fentrylk_cbk_t fentrylk_cbk;\n    fop_xattrop_cbk_t xattrop_cbk;\n    fop_fxattrop_cbk_t fxattrop_cbk;\n    fop_fgetxattr_cbk_t fgetxattr_cbk;\n    fop_fsetxattr_cbk_t fsetxattr_cbk;\n    fop_rchecksum_cbk_t rchecksum_cbk;\n    fop_setattr_cbk_t setattr_cbk;\n    fop_fsetattr_cbk_t fsetattr_cbk;\n    fop_readdirp_cbk_t readdirp_cbk;\n\n    /* These 3 are required to keep the index same as GF_FOP_##FOP */\n    void *forget_placeholder_cbk;\n    void *release_placeholder_cbk;\n    void *releasedir_placeholder_cbk;\n\n    fop_getspec_cbk_t getspec_cbk;\n    fop_fremovexattr_cbk_t fremovexattr_cbk;\n    fop_fallocate_cbk_t fallocate_cbk;\n    fop_discard_cbk_t discard_cbk;\n    fop_zerofill_cbk_t zerofill_cbk;\n    fop_ipc_cbk_t ipc_cbk;\n    fop_seek_cbk_t seek_cbk;\n    fop_lease_cbk_t lease_cbk;\n    fop_compound_cbk_t compound_cbk;\n    fop_getactivelk_cbk_t getactivelk_cbk;\n    fop_setactivelk_cbk_t setactivelk_cbk;\n    fop_put_cbk_t put_cbk;\n    fop_icreate_cbk_t icreate_cbk;\n    fop_namelink_cbk_t namelink_cbk;\n    fop_copy_file_range_cbk_t copy_file_range_cbk;\n};\n\ntypedef int32_t (*cbk_forget_t)(xlator_t *this, inode_t *inode);\n\ntypedef int32_t (*cbk_release_t)(xlator_t *this, fd_t *fd);\n\ntypedef int32_t (*cbk_invalidate_t)(xlator_t *this, inode_t *inode);\n\ntypedef int32_t (*cbk_client_t)(xlator_t *this, client_t *client);\n\ntypedef void (*cbk_ictxmerge_t)(xlator_t *this, fd_t *fd, inode_t *inode,\n                                inode_t *linked_inode);\n\ntypedef size_t (*cbk_inodectx_size_t)(xlator_t *this, inode_t *inode);\n\ntypedef size_t (*cbk_fdctx_size_t)(xlator_t *this, fd_t *fd);\n\nstruct xlator_cbks {\n    cbk_forget_t forget;\n    cbk_release_t release;\n    cbk_release_t releasedir;\n    cbk_invalidate_t invalidate;\n    cbk_client_t client_destroy;\n    cbk_client_t client_disconnect;\n    cbk_ictxmerge_t ictxmerge;\n    cbk_inodectx_size_t ictxsize;\n    cbk_fdctx_size_t fdctxsize;\n};\n\ntypedef int32_t (*dumpop_priv_t)(xlator_t *this);\n\ntypedef int32_t (*dumpop_inode_t)(xlator_t *this);\n\ntypedef int32_t (*dumpop_fd_t)(xlator_t *this);\n\ntypedef int32_t (*dumpop_inodectx_t)(xlator_t *this, inode_t *ino);\n\ntypedef int32_t (*dumpop_fdctx_t)(xlator_t *this, fd_t *fd);\n\ntypedef int32_t (*dumpop_priv_to_dict_t)(xlator_t *this, dict_t *dict,\n                                         char *brickname);\n\ntypedef int32_t (*dumpop_inode_to_dict_t)(xlator_t *this, dict_t *dict);\n\ntypedef int32_t (*dumpop_fd_to_dict_t)(xlator_t *this, dict_t *dict);\n\ntypedef int32_t (*dumpop_inodectx_to_dict_t)(xlator_t *this, inode_t *ino,\n                                             dict_t *dict);\n\ntypedef int32_t (*dumpop_fdctx_to_dict_t)(xlator_t *this, fd_t *fd,\n                                          dict_t *dict);\n\ntypedef int32_t (*dumpop_eh_t)(xlator_t *this);\n\nstruct xlator_dumpops {\n    dumpop_priv_t priv;\n    dumpop_inode_t inode;\n    dumpop_fd_t fd;\n    dumpop_inodectx_t inodectx;\n    dumpop_fdctx_t fdctx;\n    dumpop_priv_to_dict_t priv_to_dict;\n    dumpop_inode_to_dict_t inode_to_dict;\n    dumpop_fd_to_dict_t fd_to_dict;\n    dumpop_inodectx_to_dict_t inodectx_to_dict;\n    dumpop_fdctx_to_dict_t fdctx_to_dict;\n    dumpop_eh_t history;\n};\n\ntypedef struct xlator_list {\n    xlator_t *xlator;\n    struct xlator_list *next;\n} xlator_list_t;\n\ntypedef struct fop_metrics {\n    gf_atomic_t fop;\n    gf_atomic_t cbk; /* only updaed when there is failure */\n} fop_metrics_t;\n\nstruct _xlator {\n    /* Built during parsing */\n    char *name;\n    char *type;\n    char *instance_name; /* Used for multi NFSd */\n    xlator_t *next;\n    xlator_t *prev;\n    xlator_list_t *parents;\n    xlator_list_t *children;\n    dict_t *options;\n\n    /* Set after doing dlopen() */\n    void *dlhandle;\n    struct xlator_fops *fops;\n    struct xlator_cbks *cbks;\n    struct xlator_dumpops *dumpops;\n    struct list_head volume_options; /* list of volume_option_t */\n\n    void (*fini)(xlator_t *this);\n    int32_t (*init)(xlator_t *this);\n    int32_t (*reconfigure)(xlator_t *this, dict_t *options);\n    int32_t (*mem_acct_init)(xlator_t *this);\n    int32_t (*dump_metrics)(xlator_t *this, int fd);\n\n    event_notify_fn_t notify;\n\n    gf_loglevel_t loglevel; /* Log level for translator */\n\n    struct {\n        struct {\n            /* for latency measurement */\n            fop_metrics_t metrics[GF_FOP_MAXVALUE];\n\n            gf_atomic_t count;\n        } total;\n\n        struct {\n            /* for latency measurement */\n            fop_latency_t latencies[GF_FOP_MAXVALUE];\n            /* for latency measurement */\n            fop_metrics_t metrics[GF_FOP_MAXVALUE];\n\n            gf_atomic_t count;\n        } interval;\n    } stats;\n\n    /* Misc */\n    eh_t *history; /* event history context */\n    glusterfs_ctx_t *ctx;\n    glusterfs_graph_t *graph; /* not set for fuse */\n    inode_table_t *itable;\n    char init_succeeded;\n    void *private;\n    struct mem_acct *mem_acct;\n    uint64_t winds;\n    char switched;\n\n    /* for the memory pool of 'frame->local' */\n    struct mem_pool *local_pool;\n    gf_boolean_t is_autoloaded;\n\n    /* Saved volfile ID (used for multiplexing) */\n    char *volfile_id;\n\n    /* Its used as an index to inode_ctx*/\n    uint32_t xl_id;\n\n    /* op_version: initialized in xlator code itself */\n    uint32_t op_version[GF_MAX_RELEASES];\n\n    /* flags: initialized in xlator code itself */\n    uint32_t flags;\n\n    /* id: unique, initialized in xlator code itself */\n    uint32_t id;\n\n    /* identifier: a full string which can unique identify the xlator */\n    char *identifier;\n\n    /* Is this pass_through? */\n    gf_boolean_t pass_through;\n    struct xlator_fops *pass_through_fops;\n\n    /* cleanup flag to avoid races during xlator cleanup */\n    uint32_t cleanup_starting;\n\n    /* flag to avoid recall of xlator_mem_cleanup for xame xlator */\n    uint32_t call_cleanup;\n\n    /* Flag to understand how this xlator is categorized */\n    gf_category_t category;\n\n    /* Variable to save xprt associated for detach brick */\n    gf_atomic_t xprtrefcnt;\n\n    /* Flag to notify got CHILD_DOWN event for detach brick */\n    uint32_t notify_down;\n};\n\n/* This would be the only structure which needs to be exported by\n   the translators. For the backward compatibility, in 4.x series\n   even the old exported fields will be supported */\n/* XXX: This struct is in use by GD2, and hence SHOULD NOT be modified.\n * If the struct must be modified, see instructions at the comment with\n * GD2MARKER below.\n */\ntypedef struct {\n    /* op_version: will be used by volume generation logic to figure\n       out whether to insert it in graph or no, based on cluster's\n       operating version.\n       default value: 0, which means good to insert always */\n    uint32_t op_version[GF_MAX_RELEASES];\n\n    /* flags: will be used by volume generation logic to optimize the\n       placements etc.\n       default value: 0, which means don't treat it specially */\n    uint32_t flags;\n\n    /* xlator_id: unique per xlator. make sure to have no collission\n       in this ID */\n    uint32_t xlator_id;\n\n    /* identifier: a string constant */\n    char *identifier;\n\n    /* struct options: if the translator takes any 'options' from the\n       volume file, then that should be defined here. optional. */\n    volume_option_t *options;\n\n    /* Flag to understand how this xlator is categorized */\n    gf_category_t category;\n\n    /* XXX: GD2MARKER\n     * If a new member that needs to be visible to GD2 is introduced,\n     * add it above this comment.\n     * Any other new members need to be added below this comment, or at the\n     * end of the struct\n     */\n\n    /* init(): mandatory method, will be called during the\n       graph initialization */\n    int32_t (*init)(xlator_t *this);\n\n    /* fini(): optional method, will be initialized to default\n       method which would just free the 'xlator->private' variable.\n       This method is called when the graph is no more in use, and\n       is being destroyed. Also when SIGTERM is received */\n    void (*fini)(xlator_t *this);\n\n    /* reconfigure(): optional method, will be initialized to default\n       method in case not provided by xlator. This method is called\n       when there are only option changes in xlator, and no graph change.\n       eg., a 'gluster volume set' command */\n    int32_t (*reconfigure)(xlator_t *this, dict_t *options);\n\n    /* mem_acct_init(): used for memory accounting inside of the xlator.\n       optional. called during translator initialization */\n    int32_t (*mem_acct_init)(xlator_t *this);\n\n    /* dump_metrics(): used for providing internal metrics. optional */\n    int32_t (*dump_metrics)(xlator_t *this, int fd);\n\n    /* notify(): used for handling the notification of events from either\n       the parent or child in the graph. optional. */\n    event_notify_fn_t notify;\n\n    /* struct fops: mandatory. provides all the filesystem operations\n       methods of the xlator */\n    struct xlator_fops *fops;\n    /* struct cbks: optional. provides methods to handle\n       inode forgets, and fd releases */\n    struct xlator_cbks *cbks;\n\n    /* dumpops: a structure again, with methods to dump the details.\n       optional. */\n    struct xlator_dumpops *dumpops;\n\n    /* struct pass_through_fops: optional. provides all the filesystem\n       operations which should be used if the xlator is marked as pass_through\n     */\n    /* by default, the default_fops would be used */\n    struct xlator_fops *pass_through_fops;\n} xlator_api_t;\n\n#define xlator_has_parent(xl) (xl->parents != NULL)\n\n#define XLATOR_NOTIFY(ret, _xl, params...)                                     \\\n    do {                                                                       \\\n        xlator_t *_old_THIS = NULL;                                            \\\n                                                                               \\\n        _old_THIS = THIS;                                                      \\\n        THIS = _xl;                                                            \\\n                                                                               \\\n        ret = _xl->notify(_xl, params);                                        \\\n                                                                               \\\n        THIS = _old_THIS;                                                      \\\n    } while (0);\n\nint32_t\nxlator_set_type_virtual(xlator_t *xl, const char *type);\n\nint32_t\nxlator_set_type(xlator_t *xl, const char *type);\n\nint32_t\nxlator_dynload(xlator_t *xl);\n\nxlator_t *\nfile_to_xlator_tree(glusterfs_ctx_t *ctx, FILE *fp);\n\nint\nxlator_notify(xlator_t *this, int32_t event, void *data, ...);\nint\nxlator_init(xlator_t *this);\nint\nxlator_destroy(xlator_t *xl);\n\nint32_t\nxlator_tree_init(xlator_t *xl);\nint32_t\nxlator_tree_free_members(xlator_t *xl);\nint32_t\nxlator_tree_free_memacct(xlator_t *xl);\n\nvoid\nxlator_tree_fini(xlator_t *xl);\n\nvoid\nxlator_foreach(xlator_t *this, void (*fn)(xlator_t *each, void *data),\n               void *data);\n\nvoid\nxlator_foreach_depth_first(xlator_t *this,\n                           void (*fn)(xlator_t *each, void *data), void *data);\n\nxlator_t *\nxlator_search_by_name(xlator_t *any, const char *name);\nxlator_t *\nget_xlator_by_name(xlator_t *this, char *target);\nxlator_t *\nget_xlator_by_type(xlator_t *this, char *target);\n\nvoid\nxlator_set_inode_lru_limit(xlator_t *this, void *data);\n\nvoid\ninode_destroy_notify(inode_t *inode, const char *xlname);\n\nint\nloc_copy(loc_t *dst, loc_t *src);\nint\nloc_copy_overload_parent(loc_t *dst, loc_t *src, inode_t *parent);\n#define loc_dup(src, dst) loc_copy(dst, src)\nvoid\nloc_wipe(loc_t *loc);\nint\nloc_path(loc_t *loc, const char *bname);\nvoid\nloc_gfid(loc_t *loc, uuid_t gfid);\nvoid\nloc_pargfid(loc_t *loc, uuid_t pargfid);\nchar *\nloc_gfid_utoa(loc_t *loc);\ngf_boolean_t\nloc_is_root(loc_t *loc);\nint32_t\nloc_build_child(loc_t *child, loc_t *parent, char *name);\ngf_boolean_t\nloc_is_nameless(loc_t *loc);\nint\nxlator_mem_acct_init(xlator_t *xl, int num_types);\nvoid\nxlator_mem_acct_unref(struct mem_acct *mem_acct);\nint\nis_gf_log_command(xlator_t *trans, const char *name, char *value, size_t size);\nint\nglusterd_check_log_level(const char *value);\nint\nxlator_volopt_dynload(char *xlator_type, void **dl_handle,\n                      volume_opt_list_t *vol_opt_handle);\nenum gf_hdsk_event_notify_op {\n    GF_EN_DEFRAG_STATUS,\n    GF_EN_MAX,\n};\ngf_boolean_t\nis_graph_topology_equal(glusterfs_graph_t *graph1, glusterfs_graph_t *graph2);\nint\nglusterfs_volfile_reconfigure(FILE *newvolfile_fp, glusterfs_ctx_t *ctx);\n\nint\ngf_volfile_reconfigure(int oldvollen, FILE *newvolfile_fp, glusterfs_ctx_t *ctx,\n                       const char *oldvolfile);\n\nint\nloc_touchup(loc_t *loc, const char *name);\n\nint\nglusterfs_leaf_position(xlator_t *tgt);\n\nint\nglusterfs_reachable_leaves(xlator_t *base, dict_t *leaves);\n\nint\nxlator_subvolume_count(xlator_t *this);\n\nvoid\nxlator_init_lock(void);\nvoid\nxlator_init_unlock(void);\nint\ncopy_opts_to_child(xlator_t *src, xlator_t *dst, char *glob);\n\nint\nglusterfs_delete_volfile_checksum(glusterfs_ctx_t *ctx, const char *volfile_id);\nint\nxlator_memrec_free(xlator_t *xl);\n\nvoid\nxlator_mem_cleanup(xlator_t *this);\n\nvoid\nhandle_default_options(xlator_t *xl, dict_t *options);\n\nvoid\ngluster_graph_take_reference(xlator_t *tree);\n\ngf_boolean_t\nmgmt_is_multiplexed_daemon(char *name);\n\ngf_boolean_t\nxlator_is_cleanup_starting(xlator_t *this);\n#endif /* _XLATOR_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-glusterfs-7.2-7bafu5wprzvvhnabtlwumqs3qxil5tgh/spack-src/glusterfsd/src/glusterfsd.c": "/*\n   Copyright (c) 2006-2016 Red Hat, Inc. <http://www.redhat.com>\n   This file is part of GlusterFS.\n\n   This file is licensed to you under your choice of the GNU Lesser\n   General Public License, version 3 or any later version (LGPLv3 or\n   later), or the GNU General Public License, version 2 (GPLv2), in all\n   cases as published by the Free Software Foundation.\n*/\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <netinet/in.h>\n#include <sys/socket.h>\n#include <sys/types.h>\n#include <sys/resource.h>\n#include <sys/file.h>\n#include <sys/wait.h>\n#include <netdb.h>\n#include <signal.h>\n#include <libgen.h>\n#include <dlfcn.h>\n\n#include <sys/utsname.h>\n\n#include <stdint.h>\n#include <pthread.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <time.h>\n#include <semaphore.h>\n#include <errno.h>\n#include <pwd.h>\n\n#ifdef GF_LINUX_HOST_OS\n#ifdef HAVE_LINUX_OOM_H\n#include <linux/oom.h>\n#else\n#define OOM_SCORE_ADJ_MIN (-1000)\n#define OOM_SCORE_ADJ_MAX 1000\n#define OOM_DISABLE (-17)\n#define OOM_ADJUST_MAX 15\n#endif\n#endif\n\n#ifdef HAVE_MALLOC_H\n#include <malloc.h>\n#endif\n\n#ifdef HAVE_MALLOC_STATS\n#ifdef DEBUG\n#include <mcheck.h>\n#endif\n#endif\n\n#include <glusterfs/xlator.h>\n#include <glusterfs/glusterfs.h>\n#include <glusterfs/compat.h>\n#include <glusterfs/logging.h>\n#include \"glusterfsd-messages.h\"\n#include <glusterfs/dict.h>\n#include <glusterfs/list.h>\n#include <glusterfs/timer.h>\n#include \"glusterfsd.h\"\n#include <glusterfs/revision.h>\n#include <glusterfs/common-utils.h>\n#include <glusterfs/gf-event.h>\n#include <glusterfs/statedump.h>\n#include <glusterfs/latency.h>\n#include \"glusterfsd-mem-types.h\"\n#include <glusterfs/syscall.h>\n#include <glusterfs/call-stub.h>\n#include <fnmatch.h>\n#include \"rpc-clnt.h\"\n#include <glusterfs/syncop.h>\n#include <glusterfs/client_t.h>\n#include \"netgroups.h\"\n#include \"exports.h\"\n#include <glusterfs/monitoring.h>\n\n#include <glusterfs/daemon.h>\n\n/* using argp for command line parsing */\nstatic char gf_doc[] = \"\";\nstatic char argp_doc[] =\n    \"--volfile-server=SERVER [MOUNT-POINT]\\n\"\n    \"--volfile=VOLFILE [MOUNT-POINT]\";\nconst char *argp_program_version =\n    \"\" PACKAGE_NAME \" \" PACKAGE_VERSION\n    \"\\nRepository revision: \" GLUSTERFS_REPOSITORY_REVISION\n    \"\\n\"\n    \"Copyright (c) 2006-2016 Red Hat, Inc. \"\n    \"<https://www.gluster.org/>\\n\"\n    \"GlusterFS comes with ABSOLUTELY NO WARRANTY.\\n\"\n    \"It is licensed to you under your choice of the GNU Lesser\\n\"\n    \"General Public License, version 3 or any later version (LGPLv3\\n\"\n    \"or later), or the GNU General Public License, version 2 (GPLv2),\\n\"\n    \"in all cases as published by the Free Software Foundation.\";\nconst char *argp_program_bug_address = \"<\" PACKAGE_BUGREPORT \">\";\n\nstatic error_t\nparse_opts(int32_t key, char *arg, struct argp_state *_state);\n\nstatic struct argp_option gf_options[] = {\n    {0, 0, 0, 0, \"Basic options:\"},\n    {\"volfile-server\", ARGP_VOLFILE_SERVER_KEY, \"SERVER\", 0,\n     \"Server to get the volume file from. Unix domain socket path when \"\n     \"transport type 'unix'. This option overrides --volfile option\"},\n    {\"volfile\", ARGP_VOLUME_FILE_KEY, \"VOLFILE\", 0,\n     \"File to use as VOLUME_FILE\"},\n    {\"spec-file\", ARGP_VOLUME_FILE_KEY, \"VOLFILE\", OPTION_HIDDEN,\n     \"File to use as VOLUME FILE\"},\n\n    {\"log-level\", ARGP_LOG_LEVEL_KEY, \"LOGLEVEL\", 0,\n     \"Logging severity.  Valid options are DEBUG, INFO, WARNING, ERROR, \"\n     \"CRITICAL, TRACE and NONE [default: INFO]\"},\n    {\"log-file\", ARGP_LOG_FILE_KEY, \"LOGFILE\", 0,\n     \"File to use for logging [default: \" DEFAULT_LOG_FILE_DIRECTORY\n     \"/\" PACKAGE_NAME \".log\"\n     \"]\"},\n    {\"logger\", ARGP_LOGGER, \"LOGGER\", 0,\n     \"Set which logging sub-system to \"\n     \"log to, valid options are: gluster-log and syslog, \"\n     \"[default: \\\"gluster-log\\\"]\"},\n    {\"log-format\", ARGP_LOG_FORMAT, \"LOG-FORMAT\", 0,\n     \"Set log format, valid\"\n     \" options are: no-msg-id and with-msg-id, [default: \\\"with-msg-id\\\"]\"},\n    {\"log-buf-size\", ARGP_LOG_BUF_SIZE, \"LOG-BUF-SIZE\", 0,\n     \"Set logging \"\n     \"buffer size, [default: 5]\"},\n    {\"log-flush-timeout\", ARGP_LOG_FLUSH_TIMEOUT, \"LOG-FLUSH-TIMEOUT\", 0,\n     \"Set log flush timeout, [default: 2 minutes]\"},\n\n    {0, 0, 0, 0, \"Advanced Options:\"},\n    {\"volfile-server-port\", ARGP_VOLFILE_SERVER_PORT_KEY, \"PORT\", 0,\n     \"Listening port number of volfile server\"},\n    {\"volfile-server-transport\", ARGP_VOLFILE_SERVER_TRANSPORT_KEY, \"TRANSPORT\",\n     0, \"Transport type to get volfile from server [default: socket]\"},\n    {\"volfile-id\", ARGP_VOLFILE_ID_KEY, \"KEY\", 0,\n     \"'key' of the volfile to be fetched from server\"},\n    {\"pid-file\", ARGP_PID_FILE_KEY, \"PIDFILE\", 0, \"File to use as pid file\"},\n    {\"socket-file\", ARGP_SOCK_FILE_KEY, \"SOCKFILE\", 0,\n     \"File to use as unix-socket\"},\n    {\"no-daemon\", ARGP_NO_DAEMON_KEY, 0, 0, \"Run in foreground\"},\n    {\"run-id\", ARGP_RUN_ID_KEY, \"RUN-ID\", OPTION_HIDDEN,\n     \"Run ID for the process, used by scripts to keep track of process \"\n     \"they started, defaults to none\"},\n    {\"debug\", ARGP_DEBUG_KEY, 0, 0,\n     \"Run in debug mode.  This option sets --no-daemon, --log-level \"\n     \"to DEBUG and --log-file to console\"},\n    {\"volume-name\", ARGP_VOLUME_NAME_KEY, \"XLATOR-NAME\", 0,\n     \"Translator name to be used for MOUNT-POINT [default: top most volume \"\n     \"definition in VOLFILE]\"},\n    {\"xlator-option\", ARGP_XLATOR_OPTION_KEY, \"XLATOR-NAME.OPTION=VALUE\", 0,\n     \"Add/override an option for a translator in volume file with specified\"\n     \" value\"},\n    {\"read-only\", ARGP_READ_ONLY_KEY, 0, 0,\n     \"Mount the filesystem in 'read-only' mode\"},\n    {\"acl\", ARGP_ACL_KEY, 0, 0, \"Mount the filesystem with POSIX ACL support\"},\n    {\"selinux\", ARGP_SELINUX_KEY, 0, 0,\n     \"Enable SELinux label (extended attributes) support on inodes\"},\n    {\"capability\", ARGP_CAPABILITY_KEY, 0, 0,\n     \"Enable Capability (extended attributes) support on inodes\"},\n    {\"subdir-mount\", ARGP_SUBDIR_MOUNT_KEY, \"SUBDIR-PATH\", 0,\n     \"Mount subdirectory given [default: NULL]\"},\n\n    {\"print-netgroups\", ARGP_PRINT_NETGROUPS, \"NETGROUP-FILE\", 0,\n     \"Validate the netgroups file and print it out\"},\n    {\"print-exports\", ARGP_PRINT_EXPORTS, \"EXPORTS-FILE\", 0,\n     \"Validate the exports file and print it out\"},\n    {\"print-xlatordir\", ARGP_PRINT_XLATORDIR_KEY, 0, OPTION_ARG_OPTIONAL,\n     \"Print xlator directory path\"},\n    {\"print-statedumpdir\", ARGP_PRINT_STATEDUMPDIR_KEY, 0, OPTION_ARG_OPTIONAL,\n     \"Print directory path in which statedumps shall be generated\"},\n    {\"print-logdir\", ARGP_PRINT_LOGDIR_KEY, 0, OPTION_ARG_OPTIONAL,\n     \"Print path of default log directory\"},\n    {\"print-libexecdir\", ARGP_PRINT_LIBEXECDIR_KEY, 0, OPTION_ARG_OPTIONAL,\n     \"Print path of default libexec directory\"},\n\n    {\"volfile-max-fetch-attempts\", ARGP_VOLFILE_MAX_FETCH_ATTEMPTS, \"0\",\n     OPTION_HIDDEN, \"Maximum number of attempts to fetch the volfile\"},\n    {\"aux-gfid-mount\", ARGP_AUX_GFID_MOUNT_KEY, 0, 0,\n     \"Enable access to filesystem through gfid directly\"},\n    {\"enable-ino32\", ARGP_INODE32_KEY, \"BOOL\", OPTION_ARG_OPTIONAL,\n     \"Use 32-bit inodes when mounting to workaround broken applications\"\n     \"that don't support 64-bit inodes\"},\n    {\"worm\", ARGP_WORM_KEY, 0, 0, \"Mount the filesystem in 'worm' mode\"},\n    {\"mac-compat\", ARGP_MAC_COMPAT_KEY, \"BOOL\", OPTION_ARG_OPTIONAL,\n     \"Provide stubs for attributes needed for seamless operation on Macs \"\n#ifdef GF_DARWIN_HOST_OS\n     \"[default: \\\"on\\\" on client side, else \\\"off\\\"]\"\n#else\n     \"[default: \\\"off\\\"]\"\n#endif\n    },\n    {\"brick-name\", ARGP_BRICK_NAME_KEY, \"BRICK-NAME\", OPTION_HIDDEN,\n     \"Brick name to be registered with Gluster portmapper\"},\n    {\"brick-port\", ARGP_BRICK_PORT_KEY, \"BRICK-PORT\", OPTION_HIDDEN,\n     \"Brick Port to be registered with Gluster portmapper\"},\n    {\"fopen-keep-cache\", ARGP_FOPEN_KEEP_CACHE_KEY, \"BOOL\", OPTION_ARG_OPTIONAL,\n     \"Do not purge the cache on file open\"},\n    {\"global-timer-wheel\", ARGP_GLOBAL_TIMER_WHEEL, \"BOOL\", OPTION_ARG_OPTIONAL,\n     \"Instantiate process global timer-wheel\"},\n    {\"thin-client\", ARGP_THIN_CLIENT_KEY, 0, 0,\n     \"Enables thin mount and connects via gfproxyd daemon\"},\n    {\"global-threading\", ARGP_GLOBAL_THREADING_KEY, \"BOOL\", OPTION_ARG_OPTIONAL,\n     \"Use the global thread pool instead of io-threads\"},\n    {0, 0, 0, 0, \"Fuse options:\"},\n    {\"direct-io-mode\", ARGP_DIRECT_IO_MODE_KEY, \"BOOL|auto\",\n     OPTION_ARG_OPTIONAL, \"Specify direct I/O strategy [default: \\\"auto\\\"]\"},\n    {\"entry-timeout\", ARGP_ENTRY_TIMEOUT_KEY, \"SECONDS\", 0,\n     \"Set entry timeout to SECONDS in fuse kernel module [default: 1]\"},\n    {\"negative-timeout\", ARGP_NEGATIVE_TIMEOUT_KEY, \"SECONDS\", 0,\n     \"Set negative timeout to SECONDS in fuse kernel module [default: 0]\"},\n    {\"attribute-timeout\", ARGP_ATTRIBUTE_TIMEOUT_KEY, \"SECONDS\", 0,\n     \"Set attribute timeout to SECONDS for inodes in fuse kernel module \"\n     \"[default: 1]\"},\n    {\"gid-timeout\", ARGP_GID_TIMEOUT_KEY, \"SECONDS\", 0,\n     \"Set auxiliary group list timeout to SECONDS for fuse translator \"\n     \"[default: 300]\"},\n    {\"resolve-gids\", ARGP_RESOLVE_GIDS_KEY, 0, 0,\n     \"Resolve all auxiliary groups in fuse translator (max 32 otherwise)\"},\n    {\"lru-limit\", ARGP_FUSE_LRU_LIMIT_KEY, \"N\", 0,\n     \"Set fuse module's limit for number of inodes kept in LRU list to N \"\n     \"[default: 131072]\"},\n    {\"background-qlen\", ARGP_FUSE_BACKGROUND_QLEN_KEY, \"N\", 0,\n     \"Set fuse module's background queue length to N \"\n     \"[default: 64]\"},\n    {\"congestion-threshold\", ARGP_FUSE_CONGESTION_THRESHOLD_KEY, \"N\", 0,\n     \"Set fuse module's congestion threshold to N \"\n     \"[default: 48]\"},\n#ifdef GF_LINUX_HOST_OS\n    {\"oom-score-adj\", ARGP_OOM_SCORE_ADJ_KEY, \"INTEGER\", 0,\n     \"Set oom_score_adj value for process\"\n     \"[default: 0]\"},\n#endif\n    {\"client-pid\", ARGP_CLIENT_PID_KEY, \"PID\", OPTION_HIDDEN,\n     \"client will authenticate itself with process id PID to server\"},\n    {\"no-root-squash\", ARGP_FUSE_NO_ROOT_SQUASH_KEY, \"BOOL\",\n     OPTION_ARG_OPTIONAL,\n     \"disable/enable root squashing for the trusted \"\n     \"client\"},\n    {\"user-map-root\", ARGP_USER_MAP_ROOT_KEY, \"USER\", OPTION_HIDDEN,\n     \"replace USER with root in messages\"},\n    {\"dump-fuse\", ARGP_DUMP_FUSE_KEY, \"PATH\", 0, \"Dump fuse traffic to PATH\"},\n    {\"volfile-check\", ARGP_VOLFILE_CHECK_KEY, 0, 0,\n     \"Enable strict volume file checking\"},\n    {\"no-mem-accounting\", ARGP_MEM_ACCOUNTING_KEY, 0, OPTION_HIDDEN,\n     \"disable internal memory accounting\"},\n    {\"fuse-mountopts\", ARGP_FUSE_MOUNTOPTS_KEY, \"OPTIONS\", OPTION_HIDDEN,\n     \"Extra mount options to pass to FUSE\"},\n    {\"use-readdirp\", ARGP_FUSE_USE_READDIRP_KEY, \"BOOL\", OPTION_ARG_OPTIONAL,\n     \"Use readdirp mode in fuse kernel module\"\n     \" [default: \\\"yes\\\"]\"},\n    {\"secure-mgmt\", ARGP_SECURE_MGMT_KEY, \"BOOL\", OPTION_ARG_OPTIONAL,\n     \"Override default for secure (SSL) management connections\"},\n    {\"localtime-logging\", ARGP_LOCALTIME_LOGGING_KEY, 0, 0,\n     \"Enable localtime logging\"},\n    {\"process-name\", ARGP_PROCESS_NAME_KEY, \"PROCESS-NAME\", OPTION_HIDDEN,\n     \"option to specify the process type\"},\n    {\"event-history\", ARGP_FUSE_EVENT_HISTORY_KEY, \"BOOL\", OPTION_ARG_OPTIONAL,\n     \"disable/enable fuse event-history\"},\n    {\"reader-thread-count\", ARGP_READER_THREAD_COUNT_KEY, \"INTEGER\",\n     OPTION_ARG_OPTIONAL, \"set fuse reader thread count\"},\n    {\"kernel-writeback-cache\", ARGP_KERNEL_WRITEBACK_CACHE_KEY, \"BOOL\",\n     OPTION_ARG_OPTIONAL, \"enable fuse in-kernel writeback cache\"},\n    {\"attr-times-granularity\", ARGP_ATTR_TIMES_GRANULARITY_KEY, \"NS\",\n     OPTION_ARG_OPTIONAL,\n     \"declare supported granularity of file attribute\"\n     \" times in nanoseconds\"},\n    {\"fuse-flush-handle-interrupt\", ARGP_FUSE_FLUSH_HANDLE_INTERRUPT_KEY,\n     \"BOOL\", OPTION_ARG_OPTIONAL | OPTION_HIDDEN,\n     \"handle interrupt in fuse FLUSH handler\"},\n    {\"auto-invalidation\", ARGP_FUSE_AUTO_INVAL_KEY, \"BOOL\", OPTION_ARG_OPTIONAL,\n     \"controls whether fuse-kernel can auto-invalidate \"\n     \"attribute, dentry and page-cache. \"\n     \"Disable this only if same files/directories are not accessed across \"\n     \"two different mounts concurrently [default: \\\"on\\\"]\"},\n    {\"brick-mux\", ARGP_BRICK_MUX_KEY, 0, 0, \"Enable brick mux. \"},\n    {0, 0, 0, 0, \"Miscellaneous Options:\"},\n    {\n        0,\n    }};\n\nstatic struct argp argp = {gf_options, parse_opts, argp_doc, gf_doc};\n\nint\nglusterfs_pidfile_cleanup(glusterfs_ctx_t *ctx);\nint\nglusterfs_volumes_init(glusterfs_ctx_t *ctx);\nint\nglusterfs_mgmt_init(glusterfs_ctx_t *ctx);\nint\nglusterfs_listener_init(glusterfs_ctx_t *ctx);\nint\nglusterfs_listener_stop(glusterfs_ctx_t *ctx);\n\nstatic int\nset_fuse_mount_options(glusterfs_ctx_t *ctx, dict_t *options)\n{\n    int ret = 0;\n    cmd_args_t *cmd_args = NULL;\n    char *mount_point = NULL;\n    char cwd[PATH_MAX] = {\n        0,\n    };\n\n    cmd_args = &ctx->cmd_args;\n\n    /* Check if mount-point is absolute path,\n     * if not convert to absolute path by concatenating with CWD\n     */\n    if (cmd_args->mount_point[0] != '/') {\n        if (getcwd(cwd, PATH_MAX) != NULL) {\n            ret = gf_asprintf(&mount_point, \"%s/%s\", cwd,\n                              cmd_args->mount_point);\n            if (ret == -1) {\n                gf_msg(\"glusterfsd\", GF_LOG_ERROR, errno, glusterfsd_msg_1,\n                       \"Could not create absolute mountpoint \"\n                       \"path\");\n                goto err;\n            }\n        } else {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, errno, glusterfsd_msg_2,\n                   \"Could not get current working directory\");\n            goto err;\n        }\n    } else\n        mount_point = gf_strdup(cmd_args->mount_point);\n\n    ret = dict_set_dynstr(options, ZR_MOUNTPOINT_OPT, mount_point);\n    if (ret < 0) {\n        gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_3,\n               \"failed to set mount-point to options dictionary\");\n        goto err;\n    }\n\n    if (cmd_args->fuse_attribute_timeout >= 0) {\n        ret = dict_set_double(options, ZR_ATTR_TIMEOUT_OPT,\n                              cmd_args->fuse_attribute_timeout);\n\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, errno, glusterfsd_msg_4,\n                   \"failed to set dict value \"\n                   \"for key \" ZR_ATTR_TIMEOUT_OPT);\n            goto err;\n        }\n    }\n\n    if (cmd_args->fuse_entry_timeout >= 0) {\n        ret = dict_set_double(options, ZR_ENTRY_TIMEOUT_OPT,\n                              cmd_args->fuse_entry_timeout);\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \" ZR_ENTRY_TIMEOUT_OPT);\n            goto err;\n        }\n    }\n\n    if (cmd_args->fuse_negative_timeout >= 0) {\n        ret = dict_set_double(options, ZR_NEGATIVE_TIMEOUT_OPT,\n                              cmd_args->fuse_negative_timeout);\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \" ZR_NEGATIVE_TIMEOUT_OPT);\n            goto err;\n        }\n    }\n\n    if (cmd_args->client_pid_set) {\n        ret = dict_set_int32(options, \"client-pid\", cmd_args->client_pid);\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key client-pid\");\n            goto err;\n        }\n    }\n\n    if (cmd_args->uid_map_root) {\n        ret = dict_set_int32(options, \"uid-map-root\", cmd_args->uid_map_root);\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \"\n                   \"uid-map-root\");\n            goto err;\n        }\n    }\n\n    if (cmd_args->volfile_check) {\n        ret = dict_set_int32(options, ZR_STRICT_VOLFILE_CHECK,\n                             cmd_args->volfile_check);\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \" ZR_STRICT_VOLFILE_CHECK);\n            goto err;\n        }\n    }\n\n    if (cmd_args->dump_fuse) {\n        ret = dict_set_static_ptr(options, ZR_DUMP_FUSE, cmd_args->dump_fuse);\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \" ZR_DUMP_FUSE);\n            goto err;\n        }\n    }\n\n    if (cmd_args->acl) {\n        ret = dict_set_static_ptr(options, \"acl\", \"on\");\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key acl\");\n            goto err;\n        }\n    }\n\n    if (cmd_args->selinux) {\n        ret = dict_set_static_ptr(options, \"selinux\", \"on\");\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key selinux\");\n            goto err;\n        }\n    }\n\n    if (cmd_args->capability) {\n        ret = dict_set_static_ptr(options, \"capability\", \"on\");\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key capability\");\n            goto err;\n        }\n    }\n\n    if (cmd_args->aux_gfid_mount) {\n        ret = dict_set_static_ptr(options, \"virtual-gfid-access\", \"on\");\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \"\n                   \"aux-gfid-mount\");\n            goto err;\n        }\n    }\n\n    if (cmd_args->enable_ino32) {\n        ret = dict_set_static_ptr(options, \"enable-ino32\", \"on\");\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \"\n                   \"enable-ino32\");\n            goto err;\n        }\n    }\n\n    if (cmd_args->read_only) {\n        ret = dict_set_static_ptr(options, \"read-only\", \"on\");\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key read-only\");\n            goto err;\n        }\n    }\n\n    switch (cmd_args->fopen_keep_cache) {\n        case GF_OPTION_ENABLE:\n            ret = dict_set_static_ptr(options, \"fopen-keep-cache\", \"on\");\n            if (ret < 0) {\n                gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                       \"failed to set dict value for key \"\n                       \"fopen-keep-cache\");\n                goto err;\n            }\n            break;\n        case GF_OPTION_DISABLE:\n            ret = dict_set_static_ptr(options, \"fopen-keep-cache\", \"off\");\n            if (ret < 0) {\n                gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                       \"failed to set dict value for key \"\n                       \"fopen-keep-cache\");\n                goto err;\n            }\n            break;\n        case GF_OPTION_DEFERRED: /* default */\n        default:\n            gf_msg_debug(\"glusterfsd\", 0, \"fopen-keep-cache mode %d\",\n                         cmd_args->fopen_keep_cache);\n            break;\n    }\n\n    if (cmd_args->gid_timeout_set) {\n        ret = dict_set_int32(options, \"gid-timeout\", cmd_args->gid_timeout);\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key gid-timeout\");\n            goto err;\n        }\n    }\n\n    if (cmd_args->resolve_gids) {\n        ret = dict_set_static_ptr(options, \"resolve-gids\", \"on\");\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \"\n                   \"resolve-gids\");\n            goto err;\n        }\n    }\n\n    if (cmd_args->lru_limit >= 0) {\n        ret = dict_set_int32(options, \"lru-limit\", cmd_args->lru_limit);\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"lru-limit\");\n            goto err;\n        }\n    }\n\n    if (cmd_args->background_qlen) {\n        ret = dict_set_int32(options, \"background-qlen\",\n                             cmd_args->background_qlen);\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \"\n                   \"background-qlen\");\n            goto err;\n        }\n    }\n    if (cmd_args->congestion_threshold) {\n        ret = dict_set_int32(options, \"congestion-threshold\",\n                             cmd_args->congestion_threshold);\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \"\n                   \"congestion-threshold\");\n            goto err;\n        }\n    }\n\n    switch (cmd_args->fuse_direct_io_mode) {\n        case GF_OPTION_DISABLE: /* disable */\n            ret = dict_set_static_ptr(options, ZR_DIRECT_IO_OPT, \"disable\");\n            if (ret < 0) {\n                gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_5,\n                       \"failed to set 'disable' for key \" ZR_DIRECT_IO_OPT);\n                goto err;\n            }\n            break;\n        case GF_OPTION_ENABLE: /* enable */\n            ret = dict_set_static_ptr(options, ZR_DIRECT_IO_OPT, \"enable\");\n            if (ret < 0) {\n                gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_6,\n                       \"failed to set 'enable' for key \" ZR_DIRECT_IO_OPT);\n                goto err;\n            }\n            break;\n        case GF_OPTION_DEFERRED: /* auto */\n        default:\n            gf_msg_debug(\"glusterfsd\", 0, \"fuse direct io type %d\",\n                         cmd_args->fuse_direct_io_mode);\n            break;\n    }\n\n    switch (cmd_args->no_root_squash) {\n        case GF_OPTION_ENABLE: /* enable */\n            ret = dict_set_static_ptr(options, \"no-root-squash\", \"enable\");\n            if (ret < 0) {\n                gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_6,\n                       \"failed to set 'enable' for key \"\n                       \"no-root-squash\");\n                goto err;\n            }\n            break;\n        case GF_OPTION_DISABLE: /* disable/default */\n        default:\n            ret = dict_set_static_ptr(options, \"no-root-squash\", \"disable\");\n            if (ret < 0) {\n                gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_5,\n                       \"failed to set 'disable' for key \"\n                       \"no-root-squash\");\n                goto err;\n            }\n            gf_msg_debug(\"glusterfsd\", 0, \"fuse no-root-squash mode %d\",\n                         cmd_args->no_root_squash);\n            break;\n    }\n\n    if (!cmd_args->no_daemon_mode) {\n        ret = dict_set_static_ptr(options, \"sync-to-mount\", \"enable\");\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key sync-mtab\");\n            goto err;\n        }\n    }\n\n    if (cmd_args->use_readdirp) {\n        ret = dict_set_str(options, \"use-readdirp\", cmd_args->use_readdirp);\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \"\n                   \"use-readdirp\");\n            goto err;\n        }\n    }\n    if (cmd_args->event_history) {\n        ret = dict_set_str(options, \"event-history\", cmd_args->event_history);\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \"\n                   \"event-history\");\n            goto err;\n        }\n    }\n    if (cmd_args->thin_client) {\n        ret = dict_set_static_ptr(options, \"thin-client\", \"on\");\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \"\n                   \"thin-client\");\n            goto err;\n        }\n    }\n    if (cmd_args->reader_thread_count) {\n        ret = dict_set_uint32(options, \"reader-thread-count\",\n                              cmd_args->reader_thread_count);\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \"\n                   \"reader-thread-count\");\n            goto err;\n        }\n    }\n\n    ret = dict_set_uint32(options, \"auto-invalidation\",\n                          cmd_args->fuse_auto_inval);\n    if (ret < 0) {\n        gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n               \"failed to set dict value for key auto-invalidation\");\n        goto err;\n    }\n\n    switch (cmd_args->kernel_writeback_cache) {\n        case GF_OPTION_ENABLE:\n            ret = dict_set_static_ptr(options, \"kernel-writeback-cache\", \"on\");\n            if (ret < 0) {\n                gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                       \"failed to set dict value for key \"\n                       \"kernel-writeback-cache\");\n                goto err;\n            }\n            break;\n        case GF_OPTION_DISABLE:\n            ret = dict_set_static_ptr(options, \"kernel-writeback-cache\", \"off\");\n            if (ret < 0) {\n                gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                       \"failed to set dict value for key \"\n                       \"kernel-writeback-cache\");\n                goto err;\n            }\n            break;\n        case GF_OPTION_DEFERRED: /* default */\n        default:\n            gf_msg_debug(\"glusterfsd\", 0, \"kernel-writeback-cache mode %d\",\n                         cmd_args->kernel_writeback_cache);\n            break;\n    }\n    if (cmd_args->attr_times_granularity) {\n        ret = dict_set_uint32(options, \"attr-times-granularity\",\n                              cmd_args->attr_times_granularity);\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \"\n                   \"attr-times-granularity\");\n            goto err;\n        }\n    }\n    switch (cmd_args->fuse_flush_handle_interrupt) {\n        case GF_OPTION_ENABLE:\n            ret = dict_set_static_ptr(options, \"flush-handle-interrupt\", \"on\");\n            if (ret < 0) {\n                gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                       \"failed to set dict value for key \"\n                       \"flush-handle-interrupt\");\n                goto err;\n            }\n            break;\n        case GF_OPTION_DISABLE:\n            ret = dict_set_static_ptr(options, \"flush-handle-interrupt\", \"off\");\n            if (ret < 0) {\n                gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                       \"failed to set dict value for key \"\n                       \"flush-handle-interrupt\");\n                goto err;\n            }\n            break;\n        case GF_OPTION_DEFERRED: /* default */\n        default:\n            gf_msg_debug(\"glusterfsd\", 0, \"fuse-flush-handle-interrupt mode %d\",\n                         cmd_args->fuse_flush_handle_interrupt);\n            break;\n    }\n    if (cmd_args->global_threading) {\n        ret = dict_set_static_ptr(options, \"global-threading\", \"on\");\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key global-threading\");\n            goto err;\n        }\n    }\n\n    ret = 0;\nerr:\n    return ret;\n}\n\nint\ncreate_fuse_mount(glusterfs_ctx_t *ctx)\n{\n    int ret = 0;\n    cmd_args_t *cmd_args = NULL;\n    xlator_t *master = NULL;\n\n    cmd_args = &ctx->cmd_args;\n    if (!cmd_args->mount_point) {\n        gf_msg_trace(\"glusterfsd\", 0,\n                     \"mount point not found, not a client process\");\n        return 0;\n    }\n\n    if (ctx->process_mode != GF_CLIENT_PROCESS) {\n        gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_7,\n               \"Not a client process, not performing mount operation\");\n        return -1;\n    }\n\n    master = GF_CALLOC(1, sizeof(*master), gfd_mt_xlator_t);\n    if (!master)\n        goto err;\n\n    master->name = gf_strdup(\"fuse\");\n    if (!master->name)\n        goto err;\n\n    if (xlator_set_type(master, \"mount/fuse\") == -1) {\n        gf_msg(\"glusterfsd\", GF_LOG_ERROR, errno, glusterfsd_msg_8,\n               \"MOUNT-POINT %s initialization failed\", cmd_args->mount_point);\n        goto err;\n    }\n\n    master->ctx = ctx;\n    master->options = dict_new();\n    if (!master->options)\n        goto err;\n\n    ret = set_fuse_mount_options(ctx, master->options);\n    if (ret)\n        goto err;\n\n    if (cmd_args->fuse_mountopts) {\n        ret = dict_set_static_ptr(master->options, ZR_FUSE_MOUNTOPTS,\n                                  cmd_args->fuse_mountopts);\n        if (ret < 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_4,\n                   \"failed to set dict value for key \" ZR_FUSE_MOUNTOPTS);\n            goto err;\n        }\n    }\n\n    ret = xlator_init(master);\n    if (ret) {\n        gf_msg_debug(\"glusterfsd\", 0, \"failed to initialize fuse translator\");\n        goto err;\n    }\n\n    ctx->master = master;\n\n    return 0;\n\nerr:\n    if (master) {\n        xlator_destroy(master);\n    }\n\n    return 1;\n}\n\nstatic FILE *\nget_volfp(glusterfs_ctx_t *ctx)\n{\n    int ret = 0;\n    cmd_args_t *cmd_args = NULL;\n    FILE *specfp = NULL;\n    struct stat statbuf;\n\n    cmd_args = &ctx->cmd_args;\n\n    ret = sys_lstat(cmd_args->volfile, &statbuf);\n    if (ret == -1) {\n        gf_msg(\"glusterfsd\", GF_LOG_ERROR, errno, glusterfsd_msg_9,\n               \"loading volume file %s failed\", cmd_args->volfile);\n        return NULL;\n    }\n\n    if ((specfp = fopen(cmd_args->volfile, \"r\")) == NULL) {\n        gf_msg(\"glusterfsd\", GF_LOG_ERROR, errno, glusterfsd_msg_9,\n               \"loading volume file %s failed\", cmd_args->volfile);\n        return NULL;\n    }\n\n    gf_msg_debug(\"glusterfsd\", 0, \"loading volume file %s\", cmd_args->volfile);\n\n    return specfp;\n}\n\nstatic int\ngf_remember_backup_volfile_server(char *arg)\n{\n    glusterfs_ctx_t *ctx = NULL;\n    cmd_args_t *cmd_args = NULL;\n    int ret = -1;\n\n    ctx = glusterfsd_ctx;\n    if (!ctx)\n        goto out;\n    cmd_args = &ctx->cmd_args;\n\n    if (!cmd_args)\n        goto out;\n\n    ret = gf_set_volfile_server_common(\n        cmd_args, arg, GF_DEFAULT_VOLFILE_TRANSPORT, GF_DEFAULT_BASE_PORT);\n    if (ret) {\n        gf_log(\"glusterfs\", GF_LOG_ERROR, \"failed to set volfile server: %s\",\n               strerror(errno));\n    }\nout:\n    return ret;\n}\n\nstatic int\ngf_remember_xlator_option(char *arg)\n{\n    glusterfs_ctx_t *ctx = NULL;\n    cmd_args_t *cmd_args = NULL;\n    xlator_cmdline_option_t *option = NULL;\n    int ret = -1;\n    char *dot = NULL;\n    char *equals = NULL;\n\n    ctx = glusterfsd_ctx;\n    cmd_args = &ctx->cmd_args;\n\n    option = GF_CALLOC(1, sizeof(xlator_cmdline_option_t),\n                       gfd_mt_xlator_cmdline_option_t);\n    if (!option)\n        goto out;\n\n    INIT_LIST_HEAD(&option->cmd_args);\n\n    dot = strchr(arg, '.');\n    if (!dot) {\n        gf_msg(\"\", GF_LOG_WARNING, 0, glusterfsd_msg_10,\n               \"xlator option %s is invalid\", arg);\n        goto out;\n    }\n\n    option->volume = GF_MALLOC((dot - arg) + 1, gfd_mt_char);\n    if (!option->volume)\n        goto out;\n\n    strncpy(option->volume, arg, (dot - arg));\n    option->volume[(dot - arg)] = '\\0';\n\n    equals = strchr(arg, '=');\n    if (!equals) {\n        gf_msg(\"\", GF_LOG_WARNING, 0, glusterfsd_msg_10,\n               \"xlator option %s is invalid\", arg);\n        goto out;\n    }\n\n    option->key = GF_MALLOC((equals - dot) + 1, gfd_mt_char);\n    if (!option->key)\n        goto out;\n\n    strncpy(option->key, dot + 1, (equals - dot - 1));\n    option->key[(equals - dot - 1)] = '\\0';\n\n    if (!*(equals + 1)) {\n        gf_msg(\"\", GF_LOG_WARNING, 0, glusterfsd_msg_10,\n               \"xlator option %s is invalid\", arg);\n        goto out;\n    }\n\n    option->value = gf_strdup(equals + 1);\n\n    list_add(&option->cmd_args, &cmd_args->xlator_options);\n\n    ret = 0;\nout:\n    if (ret == -1) {\n        if (option) {\n            GF_FREE(option->volume);\n            GF_FREE(option->key);\n            GF_FREE(option->value);\n\n            GF_FREE(option);\n        }\n    }\n\n    return ret;\n}\n\n#ifdef GF_LINUX_HOST_OS\nstatic struct oom_api_info {\n    char *oom_api_file;\n    int32_t oom_min;\n    int32_t oom_max;\n} oom_api_info[] = {\n    {\"/proc/self/oom_score_adj\", OOM_SCORE_ADJ_MIN, OOM_SCORE_ADJ_MAX},\n    {\"/proc/self/oom_adj\", OOM_DISABLE, OOM_ADJUST_MAX},\n    {NULL, 0, 0}};\n\nstatic struct oom_api_info *\nget_oom_api_info(void)\n{\n    struct oom_api_info *api = NULL;\n\n    for (api = oom_api_info; api->oom_api_file; api++) {\n        if (sys_access(api->oom_api_file, F_OK) != -1) {\n            return api;\n        }\n    }\n\n    return NULL;\n}\n#endif\n\nstatic error_t\nparse_opts(int key, char *arg, struct argp_state *state)\n{\n    cmd_args_t *cmd_args = NULL;\n    uint32_t n = 0;\n#ifdef GF_LINUX_HOST_OS\n    int32_t k = 0;\n    struct oom_api_info *api = NULL;\n#endif\n    double d = 0.0;\n    gf_boolean_t b = _gf_false;\n    char *pwd = NULL;\n    char *tmp_str = NULL;\n    char *port_str = NULL;\n    struct passwd *pw = NULL;\n    int ret = 0;\n\n    cmd_args = state->input;\n\n    switch (key) {\n        case ARGP_VOLFILE_SERVER_KEY:\n            gf_remember_backup_volfile_server(arg);\n\n            break;\n\n        case ARGP_READ_ONLY_KEY:\n            cmd_args->read_only = 1;\n            break;\n\n        case ARGP_ACL_KEY:\n            cmd_args->acl = 1;\n            gf_remember_xlator_option(\"*-md-cache.cache-posix-acl=true\");\n            break;\n\n        case ARGP_SELINUX_KEY:\n            cmd_args->selinux = 1;\n            gf_remember_xlator_option(\"*-md-cache.cache-selinux=true\");\n            break;\n\n        case ARGP_CAPABILITY_KEY:\n            cmd_args->capability = 1;\n            break;\n\n        case ARGP_AUX_GFID_MOUNT_KEY:\n            cmd_args->aux_gfid_mount = 1;\n            break;\n\n        case ARGP_INODE32_KEY:\n            cmd_args->enable_ino32 = 1;\n            break;\n\n        case ARGP_WORM_KEY:\n            cmd_args->worm = 1;\n            break;\n\n        case ARGP_PRINT_NETGROUPS:\n            cmd_args->print_netgroups = arg;\n            break;\n\n        case ARGP_PRINT_EXPORTS:\n            cmd_args->print_exports = arg;\n            break;\n\n        case ARGP_PRINT_XLATORDIR_KEY:\n            cmd_args->print_xlatordir = _gf_true;\n            break;\n\n        case ARGP_PRINT_STATEDUMPDIR_KEY:\n            cmd_args->print_statedumpdir = _gf_true;\n            break;\n\n        case ARGP_PRINT_LOGDIR_KEY:\n            cmd_args->print_logdir = _gf_true;\n            break;\n\n        case ARGP_PRINT_LIBEXECDIR_KEY:\n            cmd_args->print_libexecdir = _gf_true;\n            break;\n\n        case ARGP_MAC_COMPAT_KEY:\n            if (!arg)\n                arg = \"on\";\n\n            if (gf_string2boolean(arg, &b) == 0) {\n                cmd_args->mac_compat = b;\n\n                break;\n            }\n\n            argp_failure(state, -1, 0, \"invalid value \\\"%s\\\" for mac-compat\",\n                         arg);\n            break;\n\n        case ARGP_VOLUME_FILE_KEY:\n            GF_FREE(cmd_args->volfile);\n\n            if (arg[0] != '/') {\n                pwd = getcwd(NULL, PATH_MAX);\n                if (!pwd) {\n                    argp_failure(state, -1, errno,\n                                 \"getcwd failed with error no %d\", errno);\n                    break;\n                }\n                char tmp_buf[1024];\n                snprintf(tmp_buf, sizeof(tmp_buf), \"%s/%s\", pwd, arg);\n                cmd_args->volfile = gf_strdup(tmp_buf);\n                free(pwd);\n            } else {\n                cmd_args->volfile = gf_strdup(arg);\n            }\n\n            break;\n\n        case ARGP_LOG_LEVEL_KEY:\n            if (strcasecmp(arg, ARGP_LOG_LEVEL_NONE_OPTION) == 0) {\n                cmd_args->log_level = GF_LOG_NONE;\n                break;\n            }\n            if (strcasecmp(arg, ARGP_LOG_LEVEL_CRITICAL_OPTION) == 0) {\n                cmd_args->log_level = GF_LOG_CRITICAL;\n                break;\n            }\n            if (strcasecmp(arg, ARGP_LOG_LEVEL_ERROR_OPTION) == 0) {\n                cmd_args->log_level = GF_LOG_ERROR;\n                break;\n            }\n            if (strcasecmp(arg, ARGP_LOG_LEVEL_WARNING_OPTION) == 0) {\n                cmd_args->log_level = GF_LOG_WARNING;\n                break;\n            }\n            if (strcasecmp(arg, ARGP_LOG_LEVEL_INFO_OPTION) == 0) {\n                cmd_args->log_level = GF_LOG_INFO;\n                break;\n            }\n            if (strcasecmp(arg, ARGP_LOG_LEVEL_DEBUG_OPTION) == 0) {\n                cmd_args->log_level = GF_LOG_DEBUG;\n                break;\n            }\n            if (strcasecmp(arg, ARGP_LOG_LEVEL_TRACE_OPTION) == 0) {\n                cmd_args->log_level = GF_LOG_TRACE;\n                break;\n            }\n\n            argp_failure(state, -1, 0, \"unknown log level %s\", arg);\n            break;\n\n        case ARGP_LOG_FILE_KEY:\n            cmd_args->log_file = gf_strdup(arg);\n            break;\n\n        case ARGP_VOLFILE_SERVER_PORT_KEY:\n            n = 0;\n\n            if (gf_string2uint_base10(arg, &n) == 0) {\n                cmd_args->volfile_server_port = n;\n                break;\n            }\n\n            argp_failure(state, -1, 0, \"unknown volfile server port %s\", arg);\n            break;\n\n        case ARGP_VOLFILE_SERVER_TRANSPORT_KEY:\n            cmd_args->volfile_server_transport = gf_strdup(arg);\n            break;\n\n        case ARGP_VOLFILE_ID_KEY:\n            cmd_args->volfile_id = gf_strdup(arg);\n            break;\n\n        case ARGP_THIN_CLIENT_KEY:\n            cmd_args->thin_client = _gf_true;\n            break;\n\n        case ARGP_BRICK_MUX_KEY:\n            cmd_args->brick_mux = _gf_true;\n            break;\n\n        case ARGP_PID_FILE_KEY:\n            cmd_args->pid_file = gf_strdup(arg);\n            break;\n\n        case ARGP_SOCK_FILE_KEY:\n            cmd_args->sock_file = gf_strdup(arg);\n            break;\n\n        case ARGP_NO_DAEMON_KEY:\n            cmd_args->no_daemon_mode = ENABLE_NO_DAEMON_MODE;\n            break;\n\n        case ARGP_RUN_ID_KEY:\n            cmd_args->run_id = gf_strdup(arg);\n            break;\n\n        case ARGP_DEBUG_KEY:\n            cmd_args->debug_mode = ENABLE_DEBUG_MODE;\n            break;\n        case ARGP_VOLFILE_MAX_FETCH_ATTEMPTS:\n            cmd_args->max_connect_attempts = 1;\n            break;\n\n        case ARGP_DIRECT_IO_MODE_KEY:\n            if (!arg)\n                arg = \"on\";\n\n            if (gf_string2boolean(arg, &b) == 0) {\n                cmd_args->fuse_direct_io_mode = b;\n\n                break;\n            }\n\n            if (strcmp(arg, \"auto\") == 0)\n                break;\n\n            argp_failure(state, -1, 0, \"unknown direct I/O mode setting \\\"%s\\\"\",\n                         arg);\n            break;\n\n        case ARGP_FUSE_NO_ROOT_SQUASH_KEY:\n            cmd_args->no_root_squash = _gf_true;\n            break;\n\n        case ARGP_ENTRY_TIMEOUT_KEY:\n            d = 0.0;\n\n            gf_string2double(arg, &d);\n            if (!(d < 0.0)) {\n                cmd_args->fuse_entry_timeout = d;\n                break;\n            }\n\n            argp_failure(state, -1, 0, \"unknown entry timeout %s\", arg);\n            break;\n\n        case ARGP_NEGATIVE_TIMEOUT_KEY:\n            d = 0.0;\n\n            ret = gf_string2double(arg, &d);\n            if ((ret == 0) && !(d < 0.0)) {\n                cmd_args->fuse_negative_timeout = d;\n                break;\n            }\n\n            argp_failure(state, -1, 0, \"unknown negative timeout %s\", arg);\n            break;\n\n        case ARGP_ATTRIBUTE_TIMEOUT_KEY:\n            d = 0.0;\n\n            gf_string2double(arg, &d);\n            if (!(d < 0.0)) {\n                cmd_args->fuse_attribute_timeout = d;\n                break;\n            }\n\n            argp_failure(state, -1, 0, \"unknown attribute timeout %s\", arg);\n            break;\n\n        case ARGP_CLIENT_PID_KEY:\n            if (gf_string2int(arg, &cmd_args->client_pid) == 0) {\n                cmd_args->client_pid_set = 1;\n                break;\n            }\n\n            argp_failure(state, -1, 0, \"unknown client pid %s\", arg);\n            break;\n\n        case ARGP_USER_MAP_ROOT_KEY:\n            pw = getpwnam(arg);\n            if (pw)\n                cmd_args->uid_map_root = pw->pw_uid;\n            else\n                argp_failure(state, -1, 0, \"user %s does not exist\", arg);\n            break;\n\n        case ARGP_VOLFILE_CHECK_KEY:\n            cmd_args->volfile_check = 1;\n            break;\n\n        case ARGP_VOLUME_NAME_KEY:\n            cmd_args->volume_name = gf_strdup(arg);\n            break;\n\n        case ARGP_XLATOR_OPTION_KEY:\n            if (gf_remember_xlator_option(arg))\n                argp_failure(state, -1, 0, \"invalid xlator option  %s\", arg);\n\n            break;\n\n        case ARGP_KEY_NO_ARGS:\n            break;\n\n        case ARGP_KEY_ARG:\n            if (state->arg_num >= 1)\n                argp_usage(state);\n            cmd_args->mount_point = gf_strdup(arg);\n            break;\n\n        case ARGP_DUMP_FUSE_KEY:\n            cmd_args->dump_fuse = gf_strdup(arg);\n            break;\n        case ARGP_BRICK_NAME_KEY:\n            cmd_args->brick_name = gf_strdup(arg);\n            break;\n        case ARGP_BRICK_PORT_KEY:\n            n = 0;\n\n            if (arg != NULL) {\n                port_str = strtok_r(arg, \",\", &tmp_str);\n                if (gf_string2uint_base10(port_str, &n) == 0) {\n                    cmd_args->brick_port = n;\n                    port_str = strtok_r(NULL, \",\", &tmp_str);\n                    if (port_str) {\n                        if (gf_string2uint_base10(port_str, &n) == 0) {\n                            cmd_args->brick_port2 = n;\n                            break;\n                        }\n                        argp_failure(state, -1, 0,\n                                     \"wrong brick (listen) port %s\", arg);\n                    }\n                    break;\n                }\n            }\n\n            argp_failure(state, -1, 0, \"unknown brick (listen) port %s\", arg);\n            break;\n\n        case ARGP_MEM_ACCOUNTING_KEY:\n            /* TODO: it should have got handled much earlier */\n            // gf_mem_acct_enable_set (THIS->ctx);\n            break;\n\n        case ARGP_FOPEN_KEEP_CACHE_KEY:\n            if (!arg)\n                arg = \"on\";\n\n            if (gf_string2boolean(arg, &b) == 0) {\n                cmd_args->fopen_keep_cache = b;\n\n                break;\n            }\n\n            argp_failure(state, -1, 0, \"unknown cache setting \\\"%s\\\"\", arg);\n\n            break;\n\n        case ARGP_GLOBAL_TIMER_WHEEL:\n            cmd_args->global_timer_wheel = 1;\n            break;\n\n        case ARGP_GID_TIMEOUT_KEY:\n            if (!gf_string2int(arg, &cmd_args->gid_timeout)) {\n                cmd_args->gid_timeout_set = _gf_true;\n                break;\n            }\n\n            argp_failure(state, -1, 0, \"unknown group list timeout %s\", arg);\n            break;\n\n        case ARGP_RESOLVE_GIDS_KEY:\n            cmd_args->resolve_gids = 1;\n            break;\n\n        case ARGP_FUSE_LRU_LIMIT_KEY:\n            if (!gf_string2int32(arg, &cmd_args->lru_limit))\n                break;\n\n            argp_failure(state, -1, 0, \"unknown LRU limit option %s\", arg);\n            break;\n\n        case ARGP_FUSE_BACKGROUND_QLEN_KEY:\n            if (!gf_string2int(arg, &cmd_args->background_qlen))\n                break;\n\n            argp_failure(state, -1, 0, \"unknown background qlen option %s\",\n                         arg);\n            break;\n        case ARGP_FUSE_CONGESTION_THRESHOLD_KEY:\n            if (!gf_string2int(arg, &cmd_args->congestion_threshold))\n                break;\n\n            argp_failure(state, -1, 0, \"unknown congestion threshold option %s\",\n                         arg);\n            break;\n\n#ifdef GF_LINUX_HOST_OS\n        case ARGP_OOM_SCORE_ADJ_KEY:\n            k = 0;\n\n            api = get_oom_api_info();\n            if (!api)\n                goto no_oom_api;\n\n            if (gf_string2int(arg, &k) == 0 && k >= api->oom_min &&\n                k <= api->oom_max) {\n                cmd_args->oom_score_adj = gf_strdup(arg);\n                break;\n            }\n\n            argp_failure(state, -1, 0, \"unknown oom_score_adj value %s\", arg);\n\n        no_oom_api:\n            break;\n#endif\n\n        case ARGP_FUSE_MOUNTOPTS_KEY:\n            cmd_args->fuse_mountopts = gf_strdup(arg);\n            break;\n\n        case ARGP_FUSE_USE_READDIRP_KEY:\n            if (!arg)\n                arg = \"yes\";\n\n            if (gf_string2boolean(arg, &b) == 0) {\n                if (b) {\n                    cmd_args->use_readdirp = \"yes\";\n                } else {\n                    cmd_args->use_readdirp = \"no\";\n                }\n\n                break;\n            }\n\n            argp_failure(state, -1, 0, \"unknown use-readdirp setting \\\"%s\\\"\",\n                         arg);\n            break;\n\n        case ARGP_LOGGER:\n            if (strcasecmp(arg, GF_LOGGER_GLUSTER_LOG) == 0)\n                cmd_args->logger = gf_logger_glusterlog;\n            else if (strcasecmp(arg, GF_LOGGER_SYSLOG) == 0)\n                cmd_args->logger = gf_logger_syslog;\n            else\n                argp_failure(state, -1, 0, \"unknown logger %s\", arg);\n\n            break;\n\n        case ARGP_LOG_FORMAT:\n            if (strcasecmp(arg, GF_LOG_FORMAT_NO_MSG_ID) == 0)\n                cmd_args->log_format = gf_logformat_traditional;\n            else if (strcasecmp(arg, GF_LOG_FORMAT_WITH_MSG_ID) == 0)\n                cmd_args->log_format = gf_logformat_withmsgid;\n            else\n                argp_failure(state, -1, 0, \"unknown log format %s\", arg);\n\n            break;\n\n        case ARGP_LOG_BUF_SIZE:\n            if (gf_string2uint32(arg, &cmd_args->log_buf_size)) {\n                argp_failure(state, -1, 0, \"unknown log buf size option %s\",\n                             arg);\n            } else if (cmd_args->log_buf_size > GF_LOG_LRU_BUFSIZE_MAX) {\n                argp_failure(state, -1, 0,\n                             \"Invalid log buf size %s. \"\n                             \"Valid range: [\" GF_LOG_LRU_BUFSIZE_MIN_STR\n                             \",\" GF_LOG_LRU_BUFSIZE_MAX_STR \"]\",\n                             arg);\n            }\n\n            break;\n\n        case ARGP_LOG_FLUSH_TIMEOUT:\n            if (gf_string2uint32(arg, &cmd_args->log_flush_timeout)) {\n                argp_failure(state, -1, 0,\n                             \"unknown log flush timeout option %s\", arg);\n            } else if ((cmd_args->log_flush_timeout <\n                        GF_LOG_FLUSH_TIMEOUT_MIN) ||\n                       (cmd_args->log_flush_timeout >\n                        GF_LOG_FLUSH_TIMEOUT_MAX)) {\n                argp_failure(state, -1, 0,\n                             \"Invalid log flush timeout %s. \"\n                             \"Valid range: [\" GF_LOG_FLUSH_TIMEOUT_MIN_STR\n                             \",\" GF_LOG_FLUSH_TIMEOUT_MAX_STR \"]\",\n                             arg);\n            }\n\n            break;\n\n        case ARGP_SECURE_MGMT_KEY:\n            if (!arg)\n                arg = \"yes\";\n\n            if (gf_string2boolean(arg, &b) == 0) {\n                cmd_args->secure_mgmt = b ? 1 : 0;\n                break;\n            }\n\n            argp_failure(state, -1, 0, \"unknown secure-mgmt setting \\\"%s\\\"\",\n                         arg);\n            break;\n\n        case ARGP_LOCALTIME_LOGGING_KEY:\n            cmd_args->localtime_logging = 1;\n            break;\n        case ARGP_PROCESS_NAME_KEY:\n            cmd_args->process_name = gf_strdup(arg);\n            break;\n        case ARGP_SUBDIR_MOUNT_KEY:\n            if (arg[0] != '/') {\n                argp_failure(state, -1, 0, \"expect '/%s', provided just \\\"%s\\\"\",\n                             arg, arg);\n                break;\n            }\n            cmd_args->subdir_mount = gf_strdup(arg);\n            break;\n        case ARGP_FUSE_EVENT_HISTORY_KEY:\n            if (!arg)\n                arg = \"no\";\n\n            if (gf_string2boolean(arg, &b) == 0) {\n                if (b) {\n                    cmd_args->event_history = \"yes\";\n                } else {\n                    cmd_args->event_history = \"no\";\n                }\n\n                break;\n            }\n\n            argp_failure(state, -1, 0, \"unknown event-history setting \\\"%s\\\"\",\n                         arg);\n            break;\n        case ARGP_READER_THREAD_COUNT_KEY:\n            if (gf_string2uint32(arg, &cmd_args->reader_thread_count)) {\n                argp_failure(state, -1, 0,\n                             \"unknown reader thread count option %s\", arg);\n            } else if ((cmd_args->reader_thread_count < 1) ||\n                       (cmd_args->reader_thread_count > 64)) {\n                argp_failure(state, -1, 0,\n                             \"Invalid reader thread count %s. \"\n                             \"Valid range: [\\\"1, 64\\\"]\",\n                             arg);\n            }\n\n            break;\n\n        case ARGP_KERNEL_WRITEBACK_CACHE_KEY:\n            if (!arg)\n                arg = \"yes\";\n\n            if (gf_string2boolean(arg, &b) == 0) {\n                cmd_args->kernel_writeback_cache = b;\n\n                break;\n            }\n\n            argp_failure(state, -1, 0,\n                         \"unknown kernel writeback cache setting \\\"%s\\\"\", arg);\n            break;\n        case ARGP_ATTR_TIMES_GRANULARITY_KEY:\n            if (gf_string2uint32(arg, &cmd_args->attr_times_granularity)) {\n                argp_failure(state, -1, 0,\n                             \"unknown attribute times granularity option %s\",\n                             arg);\n            } else if (cmd_args->attr_times_granularity > 1000000000) {\n                argp_failure(state, -1, 0,\n                             \"Invalid attribute times granularity value %s. \"\n                             \"Valid range: [\\\"0, 1000000000\\\"]\",\n                             arg);\n            }\n\n            break;\n\n        case ARGP_FUSE_FLUSH_HANDLE_INTERRUPT_KEY:\n            if (!arg)\n                arg = \"yes\";\n\n            if (gf_string2boolean(arg, &b) == 0) {\n                cmd_args->fuse_flush_handle_interrupt = b;\n\n                break;\n            }\n\n            argp_failure(state, -1, 0,\n                         \"unknown fuse flush handle interrupt setting \\\"%s\\\"\",\n                         arg);\n            break;\n\n        case ARGP_FUSE_AUTO_INVAL_KEY:\n            if (!arg)\n                arg = \"yes\";\n\n            if (gf_string2boolean(arg, &b) == 0) {\n                cmd_args->fuse_auto_inval = b;\n                break;\n            }\n\n            break;\n\n        case ARGP_GLOBAL_THREADING_KEY:\n            if (!arg || (*arg == 0)) {\n                arg = \"yes\";\n            }\n\n            if (gf_string2boolean(arg, &b) == 0) {\n                cmd_args->global_threading = b;\n                break;\n            }\n\n            argp_failure(state, -1, 0,\n                         \"Invalid value for global threading \\\"%s\\\"\", arg);\n            break;\n    }\n    return 0;\n}\n\ngf_boolean_t\nshould_call_fini(glusterfs_ctx_t *ctx, xlator_t *trav)\n{\n    /* There's nothing to call, so the other checks don't matter. */\n    if (!trav->fini) {\n        return _gf_false;\n    }\n\n    /* This preserves previous behavior in glusterd. */\n    if (ctx->process_mode == GF_GLUSTERD_PROCESS) {\n        return _gf_true;\n    }\n\n    /* This is the only one known to be safe in glusterfsd. */\n    if (!strcmp(trav->type, \"experimental/fdl\")) {\n        return _gf_true;\n    }\n\n    return _gf_false;\n}\n\nvoid\ncleanup_and_exit(int signum)\n{\n    glusterfs_ctx_t *ctx = NULL;\n    xlator_t *trav = NULL;\n    xlator_t *top;\n    xlator_t *victim;\n    xlator_list_t **trav_p;\n\n    ctx = glusterfsd_ctx;\n\n    if (!ctx)\n        return;\n\n    /* To take or not to take the mutex here and in the other\n     * signal handler - gf_print_trace() - is the big question here.\n     *\n     * Taking mutex in signal handler would mean that if the process\n     * receives a fatal signal while another thread is holding\n     * ctx->log.log_buf_lock to perhaps log a message in _gf_msg_internal(),\n     * the offending thread hangs on the mutex lock forever without letting\n     * the process exit.\n     *\n     * On the other hand. not taking the mutex in signal handler would cause\n     * it to modify the lru_list of buffered log messages in a racy manner,\n     * corrupt the list and potentially give rise to an unending\n     * cascade of SIGSEGVs and other re-entrancy issues.\n     */\n\n    gf_log_disable_suppression_before_exit(ctx);\n\n    gf_msg_callingfn(\"\", GF_LOG_WARNING, 0, glusterfsd_msg_32,\n                     \"received signum (%d), shutting down\", signum);\n\n    if (ctx->cleanup_started)\n        return;\n    pthread_mutex_lock(&ctx->cleanup_lock);\n    {\n        ctx->cleanup_started = 1;\n\n        /* signout should be sent to all the bricks in case brick mux is enabled\n         * and multiple brick instances are attached to this process\n         */\n        if (ctx->active) {\n            top = ctx->active->first;\n            for (trav_p = &top->children; *trav_p; trav_p = &(*trav_p)->next) {\n                victim = (*trav_p)->xlator;\n                rpc_clnt_mgmt_pmap_signout(ctx, victim->name);\n            }\n        } else {\n            rpc_clnt_mgmt_pmap_signout(ctx, NULL);\n        }\n\n        /* below part is a racy code where the rpcsvc object is freed.\n         * But in another thread (epoll thread), upon poll error in the\n         * socket the transports are cleaned up where again rpcsvc object\n         * is accessed (which is already freed by the below function).\n         * Since the process is about to be killed don't execute the function\n         * below.\n         */\n        /* if (ctx->listener) { */\n        /*         (void) glusterfs_listener_stop (ctx); */\n        /* } */\n\n        /* Call fini() of FUSE xlator first:\n         * so there are no more requests coming and\n         * 'umount' of mount point is done properly */\n        trav = ctx->master;\n        if (trav && trav->fini) {\n            THIS = trav;\n            trav->fini(trav);\n        }\n\n        glusterfs_pidfile_cleanup(ctx);\n\n#if 0\n        /* TODO: Properly do cleanup_and_exit(), with synchronization */\n        if (ctx->mgmt) {\n                /* cleanup the saved-frames before last unref */\n                rpc_clnt_connection_cleanup (&ctx->mgmt->conn);\n                rpc_clnt_unref (ctx->mgmt);\n        }\n#endif\n\n        trav = NULL;\n\n        /* previously we were releasing the cleanup mutex lock before the\n           process exit. As we are releasing the cleanup mutex lock, before\n           the process can exit some other thread which is blocked on\n           cleanup mutex lock is acquiring the cleanup mutex lock and\n           trying to acquire some resources which are already freed as a\n           part of cleanup. To avoid this, we are exiting the process without\n           releasing the cleanup mutex lock. This will not cause any lock\n           related issues as the process which acquired the lock is going down\n         */\n        /* NOTE: Only the least significant 8 bits i.e (signum & 255)\n           will be available to parent process on calling exit() */\n        exit(abs(signum));\n    }\n}\n\nstatic void\nreincarnate(int signum)\n{\n    int ret = 0;\n    glusterfs_ctx_t *ctx = NULL;\n    cmd_args_t *cmd_args = NULL;\n\n    ctx = glusterfsd_ctx;\n    cmd_args = &ctx->cmd_args;\n\n    gf_msg_trace(\"gluster\", 0, \"received reincarnate request (sig:HUP)\");\n\n    if (cmd_args->volfile_server) {\n        gf_msg(\"glusterfsd\", GF_LOG_INFO, 0, glusterfsd_msg_11,\n               \"Fetching the volume file from server...\");\n        ret = glusterfs_volfile_fetch(ctx);\n    }\n\n    /* Also, SIGHUP should do logrotate */\n    gf_log_logrotate(1);\n\n    if (ret < 0)\n        gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_12,\n               \"volume initialization failed.\");\n\n    return;\n}\n\nvoid\nemancipate(glusterfs_ctx_t *ctx, int ret)\n{\n    /* break free from the parent */\n    if (ctx->daemon_pipe[1] != -1) {\n        sys_write(ctx->daemon_pipe[1], (void *)&ret, sizeof(ret));\n        sys_close(ctx->daemon_pipe[1]);\n        ctx->daemon_pipe[1] = -1;\n    }\n}\n\nstatic uint8_t\ngf_get_process_mode(char *exec_name)\n{\n    char *dup_execname = NULL, *base = NULL;\n    uint8_t ret = 0;\n\n    dup_execname = gf_strdup(exec_name);\n    base = basename(dup_execname);\n\n    if (!strncmp(base, \"glusterfsd\", 10)) {\n        ret = GF_SERVER_PROCESS;\n    } else if (!strncmp(base, \"glusterd\", 8)) {\n        ret = GF_GLUSTERD_PROCESS;\n    } else {\n        ret = GF_CLIENT_PROCESS;\n    }\n\n    GF_FREE(dup_execname);\n\n    return ret;\n}\n\nstatic int\nglusterfs_ctx_defaults_init(glusterfs_ctx_t *ctx)\n{\n    cmd_args_t *cmd_args = NULL;\n    struct rlimit lim = {\n        0,\n    };\n    int ret = -1;\n\n    if (!ctx)\n        return ret;\n\n    ret = xlator_mem_acct_init(THIS, gfd_mt_end);\n    if (ret != 0) {\n        gf_msg(THIS->name, GF_LOG_CRITICAL, 0, glusterfsd_msg_34,\n               \"memory accounting init failed.\");\n        return ret;\n    }\n\n    /* reset ret to -1 so that we don't need to explicitly\n     * set it in all error paths before \"goto err\"\n     */\n    ret = -1;\n\n    /* monitoring should be enabled by default */\n    ctx->measure_latency = true;\n\n    ctx->process_uuid = generate_glusterfs_ctx_id();\n    if (!ctx->process_uuid) {\n        gf_msg(\"\", GF_LOG_CRITICAL, 0, glusterfsd_msg_13,\n               \"ERROR: glusterfs uuid generation failed\");\n        goto out;\n    }\n\n    ctx->page_size = 128 * GF_UNIT_KB;\n\n    ctx->iobuf_pool = iobuf_pool_new();\n    if (!ctx->iobuf_pool) {\n        gf_msg(\"\", GF_LOG_CRITICAL, 0, glusterfsd_msg_14,\n               \"ERROR: glusterfs iobuf pool creation failed\");\n        goto out;\n    }\n\n    ctx->event_pool = gf_event_pool_new(DEFAULT_EVENT_POOL_SIZE,\n                                        STARTING_EVENT_THREADS);\n    if (!ctx->event_pool) {\n        gf_msg(\"\", GF_LOG_CRITICAL, 0, glusterfsd_msg_14,\n               \"ERROR: glusterfs event pool creation failed\");\n        goto out;\n    }\n\n    ctx->pool = GF_CALLOC(1, sizeof(call_pool_t), gfd_mt_call_pool_t);\n    if (!ctx->pool) {\n        gf_msg(\"\", GF_LOG_CRITICAL, 0, glusterfsd_msg_14,\n               \"ERROR: glusterfs call pool creation failed\");\n        goto out;\n    }\n\n    INIT_LIST_HEAD(&ctx->pool->all_frames);\n    LOCK_INIT(&ctx->pool->lock);\n\n    /* frame_mem_pool size 112 * 4k */\n    ctx->pool->frame_mem_pool = mem_pool_new(call_frame_t, 4096);\n    if (!ctx->pool->frame_mem_pool) {\n        gf_msg(\"\", GF_LOG_CRITICAL, 0, glusterfsd_msg_14,\n               \"ERROR: glusterfs frame pool creation failed\");\n        goto out;\n    }\n    /* stack_mem_pool size 256 * 1024 */\n    ctx->pool->stack_mem_pool = mem_pool_new(call_stack_t, 1024);\n    if (!ctx->pool->stack_mem_pool) {\n        gf_msg(\"\", GF_LOG_CRITICAL, 0, glusterfsd_msg_14,\n               \"ERROR: glusterfs stack pool creation failed\");\n        goto out;\n    }\n\n    ctx->stub_mem_pool = mem_pool_new(call_stub_t, 1024);\n    if (!ctx->stub_mem_pool) {\n        gf_msg(\"\", GF_LOG_CRITICAL, 0, glusterfsd_msg_14,\n               \"ERROR: glusterfs stub pool creation failed\");\n        goto out;\n    }\n\n    ctx->dict_pool = mem_pool_new(dict_t, GF_MEMPOOL_COUNT_OF_DICT_T);\n    if (!ctx->dict_pool)\n        goto out;\n\n    ctx->dict_pair_pool = mem_pool_new(data_pair_t,\n                                       GF_MEMPOOL_COUNT_OF_DATA_PAIR_T);\n    if (!ctx->dict_pair_pool)\n        goto out;\n\n    ctx->dict_data_pool = mem_pool_new(data_t, GF_MEMPOOL_COUNT_OF_DATA_T);\n    if (!ctx->dict_data_pool)\n        goto out;\n\n    ctx->logbuf_pool = mem_pool_new(log_buf_t, GF_MEMPOOL_COUNT_OF_LRU_BUF_T);\n    if (!ctx->logbuf_pool)\n        goto out;\n\n    pthread_mutex_init(&ctx->notify_lock, NULL);\n    pthread_mutex_init(&ctx->cleanup_lock, NULL);\n    pthread_cond_init(&ctx->notify_cond, NULL);\n\n    ctx->clienttable = gf_clienttable_alloc();\n    if (!ctx->clienttable)\n        goto out;\n\n    cmd_args = &ctx->cmd_args;\n\n    /* parsing command line arguments */\n    cmd_args->log_level = DEFAULT_LOG_LEVEL;\n    cmd_args->logger = gf_logger_glusterlog;\n    cmd_args->log_format = gf_logformat_withmsgid;\n    cmd_args->log_buf_size = GF_LOG_LRU_BUFSIZE_DEFAULT;\n    cmd_args->log_flush_timeout = GF_LOG_FLUSH_TIMEOUT_DEFAULT;\n\n    cmd_args->mac_compat = GF_OPTION_DISABLE;\n#ifdef GF_DARWIN_HOST_OS\n    /* On Darwin machines, O_APPEND is not handled,\n     * which may corrupt the data\n     */\n    cmd_args->fuse_direct_io_mode = GF_OPTION_DISABLE;\n#else\n    cmd_args->fuse_direct_io_mode = GF_OPTION_DEFERRED;\n#endif\n    cmd_args->fuse_attribute_timeout = -1;\n    cmd_args->fuse_entry_timeout = -1;\n    cmd_args->fopen_keep_cache = GF_OPTION_DEFERRED;\n    cmd_args->kernel_writeback_cache = GF_OPTION_DEFERRED;\n    cmd_args->fuse_flush_handle_interrupt = GF_OPTION_DEFERRED;\n\n    if (ctx->mem_acct_enable)\n        cmd_args->mem_acct = 1;\n\n    INIT_LIST_HEAD(&cmd_args->xlator_options);\n    INIT_LIST_HEAD(&cmd_args->volfile_servers);\n\n    lim.rlim_cur = RLIM_INFINITY;\n    lim.rlim_max = RLIM_INFINITY;\n    setrlimit(RLIMIT_CORE, &lim);\n\n    ret = 0;\nout:\n\n    if (ret) {\n        if (ctx->pool) {\n            mem_pool_destroy(ctx->pool->frame_mem_pool);\n            mem_pool_destroy(ctx->pool->stack_mem_pool);\n        }\n        GF_FREE(ctx->pool);\n        mem_pool_destroy(ctx->stub_mem_pool);\n        mem_pool_destroy(ctx->dict_pool);\n        mem_pool_destroy(ctx->dict_data_pool);\n        mem_pool_destroy(ctx->dict_pair_pool);\n        mem_pool_destroy(ctx->logbuf_pool);\n    }\n\n    return ret;\n}\n\nstatic int\nlogging_init(glusterfs_ctx_t *ctx, const char *progpath)\n{\n    cmd_args_t *cmd_args = NULL;\n    int ret = 0;\n\n    cmd_args = &ctx->cmd_args;\n\n    if (cmd_args->log_file == NULL) {\n        ret = gf_set_log_file_path(cmd_args, ctx);\n        if (ret == -1) {\n            fprintf(stderr,\n                    \"ERROR: failed to set the log file \"\n                    \"path\\n\");\n            return -1;\n        }\n    }\n\n    if (cmd_args->log_ident == NULL) {\n        ret = gf_set_log_ident(cmd_args);\n        if (ret == -1) {\n            fprintf(stderr,\n                    \"ERROR: failed to set the log \"\n                    \"identity\\n\");\n            return -1;\n        }\n    }\n\n    /* finish log set parameters before init */\n    gf_log_set_loglevel(ctx, cmd_args->log_level);\n\n    gf_log_set_localtime(cmd_args->localtime_logging);\n\n    gf_log_set_logger(cmd_args->logger);\n\n    gf_log_set_logformat(cmd_args->log_format);\n\n    gf_log_set_log_buf_size(cmd_args->log_buf_size);\n\n    gf_log_set_log_flush_timeout(cmd_args->log_flush_timeout);\n\n    if (gf_log_init(ctx, cmd_args->log_file, cmd_args->log_ident) == -1) {\n        fprintf(stderr, \"ERROR: failed to open logfile %s\\n\",\n                cmd_args->log_file);\n        return -1;\n    }\n\n    /* At this point, all the logging related parameters are initialised\n     * except for the log flush timer, which will be injected post fork(2)\n     * in daemonize() . During this time, any log message that is logged\n     * will be kept buffered. And if the list that holds these messages\n     * overflows, then the same lru policy is used to drive out the least\n     * recently used message and displace it with the message just logged.\n     */\n\n    return 0;\n}\n\nvoid\ngf_check_and_set_mem_acct(int argc, char *argv[])\n{\n    int i = 0;\n\n    for (i = 0; i < argc; i++) {\n        if (strcmp(argv[i], \"--no-mem-accounting\") == 0) {\n            gf_global_mem_acct_enable_set(0);\n            break;\n        }\n    }\n}\n\n/**\n * print_exports_file - Print out & verify the syntax\n *                      of the exports file specified\n *                      in the parameter.\n *\n * @exports_file : Path of the exports file to print & verify\n *\n * @return : success: 0 when successfully parsed\n *           failure: 1 when failed to parse one or more lines\n *                   -1 when other critical errors (dlopen () etc)\n * Critical errors are treated differently than parse errors. Critical\n * errors terminate the program immediately here and print out different\n * error messages. Hence there are different return values.\n */\nint\nprint_exports_file(const char *exports_file)\n{\n    void *libhandle = NULL;\n    char *libpathfull = NULL;\n    struct exports_file *file = NULL;\n    int ret = 0;\n\n    int (*exp_file_parse)(const char *filepath, struct exports_file **expfile,\n                          struct mount3_state *ms) = NULL;\n    void (*exp_file_print)(const struct exports_file *file) = NULL;\n    void (*exp_file_deinit)(struct exports_file * ptr) = NULL;\n\n    /* XLATORDIR passed through a -D flag to GCC */\n    ret = gf_asprintf(&libpathfull, \"%s/%s/server.so\", XLATORDIR, \"nfs\");\n    if (ret < 0) {\n        gf_log(\"glusterfs\", GF_LOG_CRITICAL, \"asprintf () failed.\");\n        ret = -1;\n        goto out;\n    }\n\n    /* Load up the library */\n    libhandle = dlopen(libpathfull, RTLD_NOW);\n    if (!libhandle) {\n        gf_log(\"glusterfs\", GF_LOG_CRITICAL,\n               \"Error loading NFS server library : \"\n               \"%s\\n\",\n               dlerror());\n        ret = -1;\n        goto out;\n    }\n\n    /* Load up the function */\n    exp_file_parse = dlsym(libhandle, \"exp_file_parse\");\n    if (!exp_file_parse) {\n        gf_log(\"glusterfs\", GF_LOG_CRITICAL,\n               \"Error finding function exp_file_parse \"\n               \"in symbol.\");\n        ret = -1;\n        goto out;\n    }\n\n    /* Parse the file */\n    ret = exp_file_parse(exports_file, &file, NULL);\n    if (ret < 0) {\n        ret = 1; /* This means we failed to parse */\n        goto out;\n    }\n\n    /* Load up the function */\n    exp_file_print = dlsym(libhandle, \"exp_file_print\");\n    if (!exp_file_print) {\n        gf_log(\"glusterfs\", GF_LOG_CRITICAL,\n               \"Error finding function exp_file_print in symbol.\");\n        ret = -1;\n        goto out;\n    }\n\n    /* Print it out to screen */\n    exp_file_print(file);\n\n    /* Load up the function */\n    exp_file_deinit = dlsym(libhandle, \"exp_file_deinit\");\n    if (!exp_file_deinit) {\n        gf_log(\"glusterfs\", GF_LOG_CRITICAL,\n               \"Error finding function exp_file_deinit in lib.\");\n        ret = -1;\n        goto out;\n    }\n\n    /* Free the file */\n    exp_file_deinit(file);\n\nout:\n    if (libhandle)\n        dlclose(libhandle);\n    GF_FREE(libpathfull);\n    return ret;\n}\n\n/**\n * print_netgroups_file - Print out & verify the syntax\n *                        of the netgroups file specified\n *                        in the parameter.\n *\n * @netgroups_file : Path of the netgroups file to print & verify\n * @return : success: 0 when successfully parsed\n *           failure: 1 when failed to parse one more more lines\n *                   -1 when other critical errors (dlopen () etc)\n *\n * We have multiple returns here because for critical errors, we abort\n * operations immediately and exit. For example, if we can't load the\n * NFS server library, then we have a real bad problem so we don't continue.\n * Or if we cannot allocate anymore memory, we don't want to continue. Also,\n * we want to print out a different error messages based on the ret value.\n */\nint\nprint_netgroups_file(const char *netgroups_file)\n{\n    void *libhandle = NULL;\n    char *libpathfull = NULL;\n    struct netgroups_file *file = NULL;\n    int ret = 0;\n\n    struct netgroups_file *(*ng_file_parse)(const char *file_path) = NULL;\n    void (*ng_file_print)(const struct netgroups_file *file) = NULL;\n    void (*ng_file_deinit)(struct netgroups_file * ptr) = NULL;\n\n    /* XLATORDIR passed through a -D flag to GCC */\n    ret = gf_asprintf(&libpathfull, \"%s/%s/server.so\", XLATORDIR, \"nfs\");\n    if (ret < 0) {\n        gf_log(\"glusterfs\", GF_LOG_CRITICAL, \"asprintf () failed.\");\n        ret = -1;\n        goto out;\n    }\n    /* Load up the library */\n    libhandle = dlopen(libpathfull, RTLD_NOW);\n    if (!libhandle) {\n        gf_log(\"glusterfs\", GF_LOG_CRITICAL,\n               \"Error loading NFS server library : %s\\n\", dlerror());\n        ret = -1;\n        goto out;\n    }\n\n    /* Load up the function */\n    ng_file_parse = dlsym(libhandle, \"ng_file_parse\");\n    if (!ng_file_parse) {\n        gf_log(\"glusterfs\", GF_LOG_CRITICAL,\n               \"Error finding function ng_file_parse in symbol.\");\n        ret = -1;\n        goto out;\n    }\n\n    /* Parse the file */\n    file = ng_file_parse(netgroups_file);\n    if (!file) {\n        ret = 1; /* This means we failed to parse */\n        goto out;\n    }\n\n    /* Load up the function */\n    ng_file_print = dlsym(libhandle, \"ng_file_print\");\n    if (!ng_file_print) {\n        gf_log(\"glusterfs\", GF_LOG_CRITICAL,\n               \"Error finding function ng_file_print in symbol.\");\n        ret = -1;\n        goto out;\n    }\n\n    /* Print it out to screen */\n    ng_file_print(file);\n\n    /* Load up the function */\n    ng_file_deinit = dlsym(libhandle, \"ng_file_deinit\");\n    if (!ng_file_deinit) {\n        gf_log(\"glusterfs\", GF_LOG_CRITICAL,\n               \"Error finding function ng_file_deinit in lib.\");\n        ret = -1;\n        goto out;\n    }\n\n    /* Free the file */\n    ng_file_deinit(file);\n\nout:\n    if (libhandle)\n        dlclose(libhandle);\n    GF_FREE(libpathfull);\n    return ret;\n}\n\nint\nparse_cmdline(int argc, char *argv[], glusterfs_ctx_t *ctx)\n{\n    int process_mode = 0;\n    int ret = 0;\n    struct stat stbuf = {\n        0,\n    };\n    char timestr[32];\n    char tmp_logfile[1024] = {0};\n    char *tmp_logfile_dyn = NULL;\n    char *tmp_logfilebase = NULL;\n    cmd_args_t *cmd_args = NULL;\n    int len = 0;\n    char *thin_volfileid = NULL;\n\n    cmd_args = &ctx->cmd_args;\n\n    /* Do this before argp_parse so it can be overridden. */\n    if (sys_access(SECURE_ACCESS_FILE, F_OK) == 0) {\n        cmd_args->secure_mgmt = 1;\n        ctx->ssl_cert_depth = glusterfs_read_secure_access_file();\n    }\n\n    /* Need to set lru_limit to below 0 to indicate there was nothing\n       specified. This is needed as 0 is a valid option, and may not be\n       default value. */\n    cmd_args->lru_limit = -1;\n\n    argp_parse(&argp, argc, argv, ARGP_IN_ORDER, NULL, cmd_args);\n\n    if (cmd_args->print_xlatordir || cmd_args->print_statedumpdir ||\n        cmd_args->print_logdir || cmd_args->print_libexecdir) {\n        /* Just print, nothing else to do */\n        goto out;\n    }\n\n    if (cmd_args->print_netgroups) {\n        /* When this option is set we don't want to do anything else\n         * except for printing & verifying the netgroups file.\n         */\n        ret = 0;\n        goto out;\n    }\n\n    if (cmd_args->print_exports) {\n        /* When this option is set we don't want to do anything else\n         * except for printing & verifying the exports file.\n         */\n        ret = 0;\n        goto out;\n    }\n\n    ctx->secure_mgmt = cmd_args->secure_mgmt;\n\n    if (ENABLE_DEBUG_MODE == cmd_args->debug_mode) {\n        cmd_args->log_level = GF_LOG_DEBUG;\n        cmd_args->log_file = gf_strdup(\"/dev/stderr\");\n        cmd_args->no_daemon_mode = ENABLE_NO_DAEMON_MODE;\n    }\n\n    process_mode = gf_get_process_mode(argv[0]);\n    ctx->process_mode = process_mode;\n\n    if (cmd_args->process_name) {\n        ctx->cmd_args.process_name = cmd_args->process_name;\n    }\n    /* Make sure after the parsing cli, if '--volfile-server' option is\n       given, then '--volfile-id' is mandatory */\n    if (cmd_args->volfile_server && !cmd_args->volfile_id) {\n        gf_msg(\"glusterfs\", GF_LOG_CRITICAL, 0, glusterfsd_msg_15,\n               \"ERROR: '--volfile-id' is mandatory if '-s' OR \"\n               \"'--volfile-server' option is given\");\n        ret = -1;\n        goto out;\n    }\n\n    if ((cmd_args->volfile_server == NULL) && (cmd_args->volfile == NULL)) {\n        if (process_mode == GF_SERVER_PROCESS)\n            cmd_args->volfile = gf_strdup(DEFAULT_SERVER_VOLFILE);\n        else if (process_mode == GF_GLUSTERD_PROCESS)\n            cmd_args->volfile = gf_strdup(DEFAULT_GLUSTERD_VOLFILE);\n        else\n            cmd_args->volfile = gf_strdup(DEFAULT_CLIENT_VOLFILE);\n\n        /* Check if the volfile exists, if not give usage output\n           and exit */\n        ret = sys_stat(cmd_args->volfile, &stbuf);\n        if (ret) {\n            gf_msg(\"glusterfs\", GF_LOG_CRITICAL, errno, glusterfsd_msg_16,\n                   \"ERROR: parsing the volfile failed\");\n            /* argp_usage (argp.) */\n            fprintf(stderr, \"USAGE: %s [options] [mountpoint]\\n\", argv[0]);\n            goto out;\n        }\n    }\n\n    if (cmd_args->thin_client) {\n        len = strlen(cmd_args->volfile_id) + SLEN(\"gfproxy-client/\");\n        thin_volfileid = GF_MALLOC(len + 1, gf_common_mt_char);\n        snprintf(thin_volfileid, len + 1, \"gfproxy-client/%s\",\n                 cmd_args->volfile_id);\n        GF_FREE(cmd_args->volfile_id);\n        cmd_args->volfile_id = thin_volfileid;\n    }\n\n    if (cmd_args->run_id) {\n        ret = sys_lstat(cmd_args->log_file, &stbuf);\n        /* If its /dev/null, or /dev/stdout, /dev/stderr,\n         * let it use the same, no need to alter\n         */\n        if (((ret == 0) &&\n             (S_ISREG(stbuf.st_mode) || S_ISLNK(stbuf.st_mode))) ||\n            (ret == -1)) {\n            /* Have separate logfile per run */\n            gf_time_fmt(timestr, sizeof timestr, time(NULL), gf_timefmt_FT);\n            sprintf(tmp_logfile, \"%s.%s.%d\", cmd_args->log_file, timestr,\n                    getpid());\n\n            /* Create symlink to actual log file */\n            sys_unlink(cmd_args->log_file);\n\n            tmp_logfile_dyn = gf_strdup(tmp_logfile);\n            tmp_logfilebase = basename(tmp_logfile_dyn);\n            ret = sys_symlink(tmp_logfilebase, cmd_args->log_file);\n            if (ret == -1) {\n                fprintf(stderr, \"ERROR: symlink of logfile failed\\n\");\n                goto out;\n            }\n\n            GF_FREE(cmd_args->log_file);\n            cmd_args->log_file = gf_strdup(tmp_logfile);\n\n            GF_FREE(tmp_logfile_dyn);\n        }\n    }\n\n    /*\n       This option was made obsolete but parsing it for backward\n       compatibility with third party applications\n     */\n    if (cmd_args->max_connect_attempts) {\n        gf_msg(\"glusterfs\", GF_LOG_WARNING, 0, glusterfsd_msg_33,\n               \"obsolete option '--volfile-max-fecth-attempts or \"\n               \"fetch-attempts' was provided\");\n    }\n\n#ifdef GF_DARWIN_HOST_OS\n    if (cmd_args->mount_point)\n        cmd_args->mac_compat = GF_OPTION_DEFERRED;\n#endif\n\n    ret = 0;\nout:\n    return ret;\n}\n\nint\nglusterfs_pidfile_setup(glusterfs_ctx_t *ctx)\n{\n    cmd_args_t *cmd_args = NULL;\n    int ret = -1;\n    FILE *pidfp = NULL;\n\n    cmd_args = &ctx->cmd_args;\n\n    if (!cmd_args->pid_file)\n        return 0;\n\n    pidfp = fopen(cmd_args->pid_file, \"a+\");\n    if (!pidfp) {\n        gf_msg(\"glusterfsd\", GF_LOG_ERROR, errno, glusterfsd_msg_17,\n               \"pidfile %s open failed\", cmd_args->pid_file);\n        goto out;\n    }\n\n    ctx->pidfp = pidfp;\n\n    ret = 0;\nout:\n\n    return ret;\n}\n\nint\nglusterfs_pidfile_cleanup(glusterfs_ctx_t *ctx)\n{\n    cmd_args_t *cmd_args = NULL;\n\n    cmd_args = &ctx->cmd_args;\n\n    if (!ctx->pidfp)\n        return 0;\n\n    gf_msg_trace(\"glusterfsd\", 0, \"pidfile %s cleanup\", cmd_args->pid_file);\n\n    if (ctx->cmd_args.pid_file) {\n        GF_FREE(ctx->cmd_args.pid_file);\n        ctx->cmd_args.pid_file = NULL;\n    }\n\n    lockf(fileno(ctx->pidfp), F_ULOCK, 0);\n    fclose(ctx->pidfp);\n    ctx->pidfp = NULL;\n\n    return 0;\n}\n\nint\nglusterfs_pidfile_update(glusterfs_ctx_t *ctx, pid_t pid)\n{\n    cmd_args_t *cmd_args = NULL;\n    int ret = 0;\n    FILE *pidfp = NULL;\n\n    cmd_args = &ctx->cmd_args;\n\n    pidfp = ctx->pidfp;\n    if (!pidfp)\n        return 0;\n\n    ret = lockf(fileno(pidfp), F_TLOCK, 0);\n    if (ret) {\n        gf_msg(\"glusterfsd\", GF_LOG_ERROR, errno, glusterfsd_msg_18,\n               \"pidfile %s lock failed\", cmd_args->pid_file);\n        return ret;\n    }\n\n    ret = sys_ftruncate(fileno(pidfp), 0);\n    if (ret) {\n        gf_msg(\"glusterfsd\", GF_LOG_ERROR, errno, glusterfsd_msg_20,\n               \"pidfile %s truncation failed\", cmd_args->pid_file);\n        return ret;\n    }\n\n    ret = fprintf(pidfp, \"%d\\n\", pid);\n    if (ret <= 0) {\n        gf_msg(\"glusterfsd\", GF_LOG_ERROR, errno, glusterfsd_msg_21,\n               \"pidfile %s write failed\", cmd_args->pid_file);\n        return ret;\n    }\n\n    ret = fflush(pidfp);\n    if (ret) {\n        gf_msg(\"glusterfsd\", GF_LOG_ERROR, errno, glusterfsd_msg_21,\n               \"pidfile %s write failed\", cmd_args->pid_file);\n        return ret;\n    }\n\n    gf_msg_debug(\"glusterfsd\", 0, \"pidfile %s updated with pid %d\",\n                 cmd_args->pid_file, pid);\n\n    return 0;\n}\n\nvoid *\nglusterfs_sigwaiter(void *arg)\n{\n    sigset_t set;\n    int ret = 0;\n    int sig = 0;\n    char *file = NULL;\n\n    sigemptyset(&set);\n    sigaddset(&set, SIGINT);  /* cleanup_and_exit */\n    sigaddset(&set, SIGTERM); /* cleanup_and_exit */\n    sigaddset(&set, SIGHUP);  /* reincarnate */\n    sigaddset(&set, SIGUSR1); /* gf_proc_dump_info */\n    sigaddset(&set, SIGUSR2);\n\n    for (;;) {\n        ret = sigwait(&set, &sig);\n        if (ret)\n            continue;\n\n        switch (sig) {\n            case SIGINT:\n            case SIGTERM:\n                cleanup_and_exit(sig);\n                break;\n            case SIGHUP:\n                reincarnate(sig);\n                break;\n            case SIGUSR1:\n                gf_proc_dump_info(sig, glusterfsd_ctx);\n                break;\n            case SIGUSR2:\n                file = gf_monitor_metrics(glusterfsd_ctx);\n\n                /* Nothing needed to be done here */\n                GF_FREE(file);\n\n                break;\n            default:\n\n                break;\n        }\n    }\n\n    return NULL;\n}\n\nvoid\nglusterfsd_print_trace(int signum)\n{\n    gf_print_trace(signum, glusterfsd_ctx);\n}\n\nint\nglusterfs_signals_setup(glusterfs_ctx_t *ctx)\n{\n    sigset_t set;\n    int ret = 0;\n\n    sigemptyset(&set);\n\n    /* common setting for all threads */\n    signal(SIGSEGV, glusterfsd_print_trace);\n    signal(SIGABRT, glusterfsd_print_trace);\n    signal(SIGILL, glusterfsd_print_trace);\n    signal(SIGTRAP, glusterfsd_print_trace);\n    signal(SIGFPE, glusterfsd_print_trace);\n    signal(SIGBUS, glusterfsd_print_trace);\n    signal(SIGINT, cleanup_and_exit);\n    signal(SIGPIPE, SIG_IGN);\n\n    /* block these signals from non-sigwaiter threads */\n    sigaddset(&set, SIGTERM); /* cleanup_and_exit */\n    sigaddset(&set, SIGHUP);  /* reincarnate */\n    sigaddset(&set, SIGUSR1); /* gf_proc_dump_info */\n    sigaddset(&set, SIGUSR2);\n\n    /* Signals needed for asynchronous framework. */\n    sigaddset(&set, GF_ASYNC_SIGQUEUE);\n    sigaddset(&set, GF_ASYNC_SIGCTRL);\n\n    ret = pthread_sigmask(SIG_BLOCK, &set, NULL);\n    if (ret) {\n        gf_msg(\"glusterfsd\", GF_LOG_WARNING, errno, glusterfsd_msg_22,\n               \"failed to execute pthread_sigmask\");\n        return ret;\n    }\n\n    ret = gf_thread_create(&ctx->sigwaiter, NULL, glusterfs_sigwaiter,\n                           (void *)&set, \"sigwait\");\n    if (ret) {\n        /*\n          TODO:\n          fallback to signals getting handled by other threads.\n          setup the signal handlers\n        */\n        gf_msg(\"glusterfsd\", GF_LOG_WARNING, errno, glusterfsd_msg_23,\n               \"failed to create pthread\");\n        return ret;\n    }\n\n    return ret;\n}\n\nint\ndaemonize(glusterfs_ctx_t *ctx)\n{\n    int ret = -1;\n    cmd_args_t *cmd_args = NULL;\n    int cstatus = 0;\n    int err = 1;\n    int child_pid = 0;\n\n    cmd_args = &ctx->cmd_args;\n\n    ret = glusterfs_pidfile_setup(ctx);\n    if (ret)\n        goto out;\n\n    if (cmd_args->no_daemon_mode) {\n        goto postfork;\n    }\n\n    if (cmd_args->debug_mode)\n        goto postfork;\n\n    ret = pipe(ctx->daemon_pipe);\n    if (ret) {\n        /* If pipe() fails, retain daemon_pipe[] = {-1, -1}\n           and parent will just not wait for child status\n        */\n        ctx->daemon_pipe[0] = -1;\n        ctx->daemon_pipe[1] = -1;\n    }\n\n    ret = os_daemon_return(0, 0);\n    switch (ret) {\n        case -1:\n            if (ctx->daemon_pipe[0] != -1) {\n                sys_close(ctx->daemon_pipe[0]);\n                sys_close(ctx->daemon_pipe[1]);\n            }\n\n            gf_msg(\"daemonize\", GF_LOG_ERROR, errno, glusterfsd_msg_24,\n                   \"daemonization failed\");\n            goto out;\n        case 0:\n            /* child */\n            /* close read */\n            sys_close(ctx->daemon_pipe[0]);\n            break;\n        default:\n            /* parent */\n            /* close write */\n            child_pid = ret;\n            sys_close(ctx->daemon_pipe[1]);\n\n            if (ctx->mnt_pid > 0) {\n                ret = waitpid(ctx->mnt_pid, &cstatus, 0);\n                if (!(ret == ctx->mnt_pid)) {\n                    if (WIFEXITED(cstatus)) {\n                        err = WEXITSTATUS(cstatus);\n                    } else {\n                        err = cstatus;\n                    }\n                    gf_msg(\"daemonize\", GF_LOG_ERROR, 0, glusterfsd_msg_25,\n                           \"mount failed\");\n                    exit(err);\n                }\n            }\n            sys_read(ctx->daemon_pipe[0], (void *)&err, sizeof(err));\n            /* NOTE: Only the least significant 8 bits i.e (err & 255)\n               will be available to parent process on calling exit() */\n            if (err)\n                _exit(abs(err));\n\n            /* Update pid in parent only for glusterd process */\n            if (ctx->process_mode == GF_GLUSTERD_PROCESS) {\n                ret = glusterfs_pidfile_update(ctx, child_pid);\n                if (ret)\n                    exit(1);\n            }\n            _exit(0);\n    }\n\npostfork:\n    /* Update pid in child either process_mode is not belong to glusterd\n       or process is spawned in no daemon mode\n    */\n    if ((ctx->process_mode != GF_GLUSTERD_PROCESS) ||\n        (cmd_args->no_daemon_mode)) {\n        ret = glusterfs_pidfile_update(ctx, getpid());\n        if (ret)\n            goto out;\n    }\n    gf_log(\"glusterfs\", GF_LOG_INFO, \"Pid of current running process is %d\",\n           getpid());\n    ret = gf_log_inject_timer_event(ctx);\n\n    glusterfs_signals_setup(ctx);\nout:\n    return ret;\n}\n\n#ifdef GF_LINUX_HOST_OS\nstatic int\nset_oom_score_adj(glusterfs_ctx_t *ctx)\n{\n    int ret = -1;\n    cmd_args_t *cmd_args = NULL;\n    int fd = -1;\n    size_t oom_score_len = 0;\n    struct oom_api_info *api = NULL;\n\n    cmd_args = &ctx->cmd_args;\n\n    if (!cmd_args->oom_score_adj)\n        goto success;\n\n    api = get_oom_api_info();\n    if (!api)\n        goto out;\n\n    fd = open(api->oom_api_file, O_WRONLY);\n    if (fd < 0)\n        goto out;\n\n    oom_score_len = strlen(cmd_args->oom_score_adj);\n    if (sys_write(fd, cmd_args->oom_score_adj, oom_score_len) !=\n        oom_score_len) {\n        sys_close(fd);\n        goto out;\n    }\n\n    if (sys_close(fd) < 0)\n        goto out;\n\nsuccess:\n    ret = 0;\n\nout:\n    return ret;\n}\n#endif\n\nint\nglusterfs_process_volfp(glusterfs_ctx_t *ctx, FILE *fp)\n{\n    glusterfs_graph_t *graph = NULL;\n    int ret = -1;\n    xlator_t *trav = NULL;\n\n    if (!ctx)\n        return -1;\n\n    graph = glusterfs_graph_construct(fp);\n    if (!graph) {\n        gf_msg(\"\", GF_LOG_ERROR, 0, glusterfsd_msg_26,\n               \"failed to construct the graph\");\n        goto out;\n    }\n\n    for (trav = graph->first; trav; trav = trav->next) {\n        if (strcmp(trav->type, \"mount/fuse\") == 0) {\n            gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_27,\n                   \"fuse xlator cannot be specified in volume \"\n                   \"file\");\n            goto out;\n        }\n    }\n\n    xlator_t *xl = graph->first;\n    if (xl && (strcmp(xl->type, \"protocol/server\") == 0)) {\n        (void)copy_opts_to_child(xl, FIRST_CHILD(xl), \"*auth*\");\n    }\n\n    ret = glusterfs_graph_prepare(graph, ctx, ctx->cmd_args.volume_name);\n    if (ret) {\n        goto out;\n    }\n\n    ret = glusterfs_graph_activate(graph, ctx);\n\n    if (ret) {\n        goto out;\n    }\n\n    gf_log_dump_graph(fp, graph);\n\n    ret = 0;\nout:\n    if (fp)\n        fclose(fp);\n\n    if (ret) {\n        /* TODO This code makes to generic for all graphs\n           client as well as servers.For now it destroys\n           graph only for server-side xlators not for client-side\n           xlators, before destroying a graph call xlator fini for\n           xlators those call xlator_init to avoid leak\n        */\n        if (graph) {\n            xl = graph->first;\n            if ((ctx->active != graph) &&\n                (xl && !strcmp(xl->type, \"protocol/server\"))) {\n                /* Take dict ref for every graph xlator to avoid dict leak\n                   at the time of graph destroying\n                */\n                glusterfs_graph_fini(graph);\n                glusterfs_graph_destroy(graph);\n            }\n        }\n\n        /* there is some error in setting up the first graph itself */\n        if (!ctx->active) {\n            emancipate(ctx, ret);\n            cleanup_and_exit(ret);\n        }\n    }\n\n    return ret;\n}\n\nint\nglusterfs_volumes_init(glusterfs_ctx_t *ctx)\n{\n    FILE *fp = NULL;\n    cmd_args_t *cmd_args = NULL;\n    int ret = 0;\n\n    cmd_args = &ctx->cmd_args;\n\n    if (cmd_args->sock_file) {\n        ret = glusterfs_listener_init(ctx);\n        if (ret)\n            goto out;\n    }\n\n    if (cmd_args->volfile_server) {\n        ret = glusterfs_mgmt_init(ctx);\n        /* return, do not emancipate() yet */\n        return ret;\n    }\n\n    fp = get_volfp(ctx);\n\n    if (!fp) {\n        gf_msg(\"glusterfsd\", GF_LOG_ERROR, 0, glusterfsd_msg_28,\n               \"Cannot reach volume specification file\");\n        ret = -1;\n        goto out;\n    }\n\n    ret = glusterfs_process_volfp(ctx, fp);\n    if (ret)\n        goto out;\n\nout:\n    emancipate(ctx, ret);\n    return ret;\n}\n\n/* This is the only legal global pointer  */\nglusterfs_ctx_t *glusterfsd_ctx;\n\nint\nmain(int argc, char *argv[])\n{\n    glusterfs_ctx_t *ctx = NULL;\n    int ret = -1;\n    char cmdlinestr[PATH_MAX] = {\n        0,\n    };\n    cmd_args_t *cmd = NULL;\n\n    gf_check_and_set_mem_acct(argc, argv);\n\n    ctx = glusterfs_ctx_new();\n    if (!ctx) {\n        gf_msg(\"glusterfs\", GF_LOG_CRITICAL, 0, glusterfsd_msg_29,\n               \"ERROR: glusterfs context not initialized\");\n        return ENOMEM;\n    }\n    glusterfsd_ctx = ctx;\n\n    ret = glusterfs_globals_init(ctx);\n    if (ret)\n        return ret;\n\n    THIS->ctx = ctx;\n\n    ret = glusterfs_ctx_defaults_init(ctx);\n    if (ret)\n        goto out;\n\n    ret = parse_cmdline(argc, argv, ctx);\n    if (ret)\n        goto out;\n    cmd = &ctx->cmd_args;\n\n    if (cmd->print_xlatordir) {\n        /* XLATORDIR passed through a -D flag to GCC */\n        printf(\"%s\\n\", XLATORDIR);\n        goto out;\n    }\n\n    if (cmd->print_statedumpdir) {\n        printf(\"%s\\n\", DEFAULT_VAR_RUN_DIRECTORY);\n        goto out;\n    }\n\n    if (cmd->print_logdir) {\n        printf(\"%s\\n\", DEFAULT_LOG_FILE_DIRECTORY);\n        goto out;\n    }\n\n    if (cmd->print_libexecdir) {\n        printf(\"%s\\n\", LIBEXECDIR);\n        goto out;\n    }\n\n    if (cmd->print_netgroups) {\n        /* If this option is set we want to print & verify the file,\n         * set the return value (exit code in this case) and exit.\n         */\n        ret = print_netgroups_file(cmd->print_netgroups);\n        goto out;\n    }\n\n    if (cmd->print_exports) {\n        /* If this option is set we want to print & verify the file,\n         * set the return value (exit code in this case)\n         * and exit.\n         */\n        ret = print_exports_file(cmd->print_exports);\n        goto out;\n    }\n\n    ret = logging_init(ctx, argv[0]);\n    if (ret)\n        goto out;\n\n    /* set brick_mux mode only for server process */\n    if ((ctx->process_mode != GF_SERVER_PROCESS) && cmd->brick_mux) {\n        gf_msg(\"glusterfs\", GF_LOG_CRITICAL, 0, glusterfsd_msg_43,\n               \"command line argument --brick-mux is valid only for brick \"\n               \"process\");\n        goto out;\n    }\n\n    /* log the version of glusterfs running here along with the actual\n       command line options. */\n    {\n        int i = 0;\n        int pos = 0;\n        int len = snprintf(cmdlinestr, sizeof(cmdlinestr), \"%s\", argv[0]);\n        for (i = 1; (i < argc) && (len > 0); i++) {\n            pos += len;\n            len = snprintf(cmdlinestr + pos, sizeof(cmdlinestr) - pos, \" %s\",\n                           argv[i]);\n            if ((len <= 0) || (len >= (sizeof(cmdlinestr) - pos))) {\n                gf_msg(\"glusterfs\", GF_LOG_ERROR, 0, glusterfsd_msg_29,\n                       \"failed to create command line string\");\n                ret = -1;\n                goto out;\n            }\n        }\n        gf_msg(argv[0], GF_LOG_INFO, 0, glusterfsd_msg_30,\n               \"Started running %s version %s (args: %s)\", argv[0],\n               PACKAGE_VERSION, cmdlinestr);\n\n        ctx->cmdlinestr = gf_strdup(cmdlinestr);\n    }\n\n    gf_proc_dump_init();\n\n    ret = create_fuse_mount(ctx);\n    if (ret)\n        goto out;\n\n    ret = daemonize(ctx);\n    if (ret)\n        goto out;\n\n    /*\n     * If we do this before daemonize, the pool-sweeper thread dies with\n     * the parent, but we want to do it as soon as possible after that in\n     * case something else depends on pool allocations.\n     */\n    mem_pools_init();\n\n    ret = gf_async_init(ctx);\n    if (ret < 0) {\n        goto out;\n    }\n\n#ifdef GF_LINUX_HOST_OS\n    ret = set_oom_score_adj(ctx);\n    if (ret)\n        goto out;\n#endif\n\n    ctx->env = syncenv_new(0, 0, 0);\n    if (!ctx->env) {\n        gf_msg(\"\", GF_LOG_ERROR, 0, glusterfsd_msg_31,\n               \"Could not create new sync-environment\");\n        goto out;\n    }\n\n    /* do this _after_ daemonize() */\n    if (!glusterfs_ctx_tw_get(ctx)) {\n        ret = -1;\n        goto out;\n    }\n\n    ret = glusterfs_volumes_init(ctx);\n    if (ret)\n        goto out;\n\n    ret = gf_event_dispatch(ctx->event_pool);\n\nout:\n    //    glusterfs_ctx_destroy (ctx);\n    gf_async_fini();\n    return ret;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-glusterfs-7.2-7bafu5wprzvvhnabtlwumqs3qxil5tgh/spack-src/tests/features/ipc.t": "#!/bin/bash\n\n. $(dirname $0)/../include.rc\n\n#G_TESTDEF_TEST_STATUS_CENTOS6=BAD_TEST,BUG=GH269\n#G_TESTDEF_TEST_STATUS_NETBSD7=BAD_TEST,BUG=GH269\n\ncleanup;\nmkdir -p $B0/1\nmkdir -p $M0\n\nTEST glusterd\nTEST pidof glusterd\nTEST $CLI volume info;\n\nTEST $CLI volume create $V0 $H0:$B0/1\nTEST $CLI volume start $V0\n\n# Find OS-dependent EOPNOTSUPP value from system headers\nEOPNOTSUPP=$( echo '#include <errno.h>\\\\EOPNOTSUPP\\\\' | tr '\\\\' '\\n' | \\\n              cc -E -c - | tail -1 )\n\n# liglusterfs embbeds its own UUID implementation. The function name\n# may be the same as in built(in implementation from libc, but with\n# different prototype. In that case, we must make sure python will\n# use libglusterfs's version, and dlopen() does not make any guarantee\n# on this. By preloading libglusterfs.so before launching python, we\n# ensure libglusterfs's UUID functions will be used.\nLD_PRELOAD=${prefix}/lib/libglusterfs.so\nexport LD_PRELOAD\n\n# This is a pretty lame test.  Basically we just want to make sure that we\n# get all the way through the translator stacks on client and server to get a\n# simple error (EOPNOTSUPP) instead of a crash, RPC error, etc.\nEXPECT ${EOPNOTSUPP}  $PYTHON $(dirname $0)/ipctest.py $H0 $V0\n\nunset LD_PRELOAD\ncleanup;\n",
        "/tmp/vanessa/spack-stage/spack-stage-glusterfs-7.2-7bafu5wprzvvhnabtlwumqs3qxil5tgh/spack-src/rpc/rpc-lib/src/rpc-transport.h": "/*\n  Copyright (c) 2008-2012 Red Hat, Inc. <http://www.redhat.com>\n  This file is part of GlusterFS.\n\n  This file is licensed to you under your choice of the GNU Lesser\n  General Public License, version 3 or any later version (LGPLv3 or\n  later), or the GNU General Public License, version 2 (GPLv2), in all\n  cases as published by the Free Software Foundation.\n*/\n\n#ifndef __RPC_TRANSPORT_H__\n#define __RPC_TRANSPORT_H__\n\n#include <inttypes.h>\n#ifdef GF_SOLARIS_HOST_OS\n#include <rpc/auth.h>\n#else\n#include <rpc/rpc.h>\n#endif\n\n#include <rpc/rpc_msg.h>\n\n#ifndef MAX_IOVEC\n#define MAX_IOVEC 16\n#endif\n\n#ifndef AI_ADDRCONFIG\n#define AI_ADDRCONFIG 0\n#endif /* AI_ADDRCONFIG */\n\n/* Given the 4-byte fragment header, returns non-zero if this fragment\n * is the last fragment for the RPC record being assembled.\n * RPC Record marking standard defines a 32 bit value as the fragment\n * header with the MSB signifying whether the fragment is the last\n * fragment for the record being assembled.\n */\n#define RPC_LASTFRAG(fraghdr) ((uint32_t)(fraghdr & 0x80000000U))\n\n/* Given the 4-byte fragment header, extracts the bits that contain\n * the fragment size.\n */\n#define RPC_FRAGSIZE(fraghdr) ((uint32_t)(fraghdr & 0x7fffffffU))\n\n#define RPC_FRAGHDR_SIZE 4\n#define RPC_MSGTYPE_SIZE 8\n\n/* size of the msg from the start of call-body till and including credlen */\n#define RPC_CALL_BODY_SIZE 24\n\n#define RPC_REPLY_STATUS_SIZE 4\n\n#define RPC_AUTH_FLAVOUR_N_LENGTH_SIZE 8\n\n#define RPC_ACCEPT_STATUS_LEN 4\n\nstruct rpc_transport_ops;\ntypedef struct rpc_transport rpc_transport_t;\n\n#include <glusterfs/dict.h>\n#include <glusterfs/compat.h>\n#include <glusterfs/async.h>\n#include \"rpcsvc-common.h\"\n\nstruct peer_info {\n    // OP-VERSION of clients\n    uint32_t max_op_version;\n    uint32_t min_op_version;\n    struct sockaddr_storage sockaddr;\n    socklen_t sockaddr_len;\n    char identifier[UNIX_PATH_MAX];\n    // Volume mounted by client\n    char volname[NAME_MAX];\n};\ntypedef struct peer_info peer_info_t;\n\ntypedef enum msg_type msg_type_t;\n\ntypedef enum {\n    RPC_TRANSPORT_ACCEPT,          /* New client has been accepted */\n    RPC_TRANSPORT_DISCONNECT,      /* Connection is disconnected */\n    RPC_TRANSPORT_CLEANUP,         /* connection is about to be freed */\n    /*RPC_TRANSPORT_READ,*/        /* An event used to enable rpcsvc to instruct\n                                    * transport the number of bytes to read.\n                                    * This helps in reading large msgs, wherein\n                                    * the rpc actors might decide to place the\n                                    * actor's payload in new iobufs separate\n                                    * from the rpc header, proghdr and\n                                    * authentication information. glusterfs/nfs\n                                    * read and write actors are few examples\n                                    * that might beniefit from this. While\n                                    * reading a single msg, this event may be\n                                    * delivered more than once.\n                                    */\n    RPC_TRANSPORT_MAP_XID_REQUEST, /* receiver of this event should send\n                                    * the prognum and procnum corresponding\n                                    * to xid.\n                                    */\n    RPC_TRANSPORT_MSG_RECEIVED,    /* Complete rpc msg has been read */\n    RPC_TRANSPORT_CONNECT,         /* client is connected to server */\n    RPC_TRANSPORT_MSG_SENT,\n    RPC_TRANSPORT_EVENT_THREAD_DIED /* event-thread has died */\n} rpc_transport_event_t;\n\nstruct rpc_transport_msg {\n    struct iovec *rpchdr;\n    int rpchdrcount;\n    struct iovec *proghdr;\n    int proghdrcount;\n    struct iovec *progpayload;\n    int progpayloadcount;\n    struct iobref *iobref;\n};\ntypedef struct rpc_transport_msg rpc_transport_msg_t;\n\nstruct rpc_transport_rsp {\n    struct iovec *rsphdr;\n    int rsphdr_count;\n    struct iovec *rsp_payload;\n    int rsp_payload_count;\n    struct iobref *rsp_iobref;\n};\ntypedef struct rpc_transport_rsp rpc_transport_rsp_t;\n\nstruct rpc_transport_req {\n    struct rpc_req *rpc_req;\n    rpc_transport_msg_t msg;\n    rpc_transport_rsp_t rsp;\n};\ntypedef struct rpc_transport_req rpc_transport_req_t;\n\nstruct rpc_transport_reply {\n    void *private;\n    rpc_transport_msg_t msg;\n};\ntypedef struct rpc_transport_reply rpc_transport_reply_t;\n\nstruct rpc_transport_data {\n    union {\n        rpc_transport_req_t req;\n        rpc_transport_reply_t reply;\n    } data;\n    char is_request;\n};\ntypedef struct rpc_transport_data rpc_transport_data_t;\n\n/* FIXME: prognum, procnum and progver are already present in\n * rpc_request, hence these should be removed from request_info\n */\nstruct rpc_request_info {\n    int prognum;\n    int progver;\n    int procnum;\n    void *rpc_req; /* struct rpc_req */\n    rpc_transport_rsp_t rsp;\n    uint32_t xid;\n};\ntypedef struct rpc_request_info rpc_request_info_t;\n\ntypedef int (*rpc_transport_notify_t)(rpc_transport_t *, void *mydata,\n                                      rpc_transport_event_t, void *data, ...);\n\nstruct rpc_transport {\n    struct rpc_transport_ops *ops;\n    rpc_transport_t *listener; /* listener transport to which\n                                * request for creation of this\n                                * transport came from. valid only\n                                * on server process.\n                                */\n\n    void *private;\n    struct _client *xl_private;\n    void *xl; /* Used for THIS */\n    void *mydata;\n    pthread_mutex_t lock;\n    gf_atomic_t refcount;\n    glusterfs_ctx_t *ctx;\n    dict_t *options;\n    char *name;\n    void *dnscache;\n    void *drc_client;\n    data_t *buf;\n    int32_t (*init)(rpc_transport_t *this);\n    void (*fini)(rpc_transport_t *this);\n    int (*reconfigure)(rpc_transport_t *this, dict_t *options);\n    rpc_transport_notify_t notify;\n    void *notify_data;\n    peer_info_t peerinfo;\n    peer_info_t myinfo;\n\n    uint64_t total_bytes_read;\n    uint64_t total_bytes_write;\n    uint32_t xid; /* RPC/XID used for callbacks */\n    int32_t outstanding_rpc_count;\n\n    struct list_head list;\n    int bind_insecure;\n    void *dl_handle; /* handle of dlopen() */\n    char *ssl_name;\n    dict_t *clnt_options; /* store options received from\n                           * client */\n    /* connect_failed: saves the connect() syscall status as socket_t\n     * member holding connect() status can't be accessed by higher gfapi\n     * layer or in client management notification handler functions\n     */\n    gf_boolean_t connect_failed;\n    char notify_poller_death;\n    char poller_death_accept;\n    gf_atomic_t disconnect_progress;\n};\n\nstruct rpc_transport_pollin {\n    struct rpc_transport *trans;\n    int count;\n    void *private;\n    struct iobref *iobref;\n    struct iovec vector[MAX_IOVEC];\n    char is_reply;\n    char vectored;\n    gf_async_t async;\n};\ntypedef struct rpc_transport_pollin rpc_transport_pollin_t;\n\nstruct rpc_transport_ops {\n    /* no need of receive op, msg will be delivered through an event\n     * notification\n     */\n    int32_t (*submit_request)(rpc_transport_t *this, rpc_transport_req_t *req);\n    int32_t (*submit_reply)(rpc_transport_t *this,\n                            rpc_transport_reply_t *reply);\n    int32_t (*connect)(rpc_transport_t *this, int port);\n    int32_t (*listen)(rpc_transport_t *this);\n    int32_t (*disconnect)(rpc_transport_t *this, gf_boolean_t wait);\n    int32_t (*get_peername)(rpc_transport_t *this, char *hostname, int hostlen);\n    int32_t (*get_peeraddr)(rpc_transport_t *this, char *peeraddr, int addrlen,\n                            struct sockaddr_storage *sa, socklen_t sasize);\n    int32_t (*get_myname)(rpc_transport_t *this, char *hostname, int hostlen);\n    int32_t (*get_myaddr)(rpc_transport_t *this, char *peeraddr, int addrlen,\n                          struct sockaddr_storage *sa, socklen_t sasize);\n    int32_t (*throttle)(rpc_transport_t *this, gf_boolean_t onoff);\n};\n\nint32_t\nrpc_transport_count(const char *transport_type);\n\nint32_t\nrpc_transport_listen(rpc_transport_t *this);\n\nint32_t\nrpc_transport_connect(rpc_transport_t *this, int port);\n\nint32_t\nrpc_transport_disconnect(rpc_transport_t *this, gf_boolean_t wait);\n\nint32_t\nrpc_transport_destroy(rpc_transport_t *this);\n\nint32_t\nrpc_transport_notify(rpc_transport_t *this, rpc_transport_event_t event,\n                     void *data, ...);\n\nint32_t\nrpc_transport_submit_request(rpc_transport_t *this, rpc_transport_req_t *req);\n\nint32_t\nrpc_transport_submit_reply(rpc_transport_t *this, rpc_transport_reply_t *reply);\n\nrpc_transport_t *\nrpc_transport_load(glusterfs_ctx_t *ctx, dict_t *options, char *name);\n\nrpc_transport_t *\nrpc_transport_ref(rpc_transport_t *trans);\n\nint32_t\nrpc_transport_unref(rpc_transport_t *trans);\n\nint\nrpc_transport_register_notify(rpc_transport_t *trans, rpc_transport_notify_t,\n                              void *mydata);\n\nint32_t\nrpc_transport_get_peername(rpc_transport_t *this, char *hostname, int hostlen);\n\nint32_t\nrpc_transport_get_peeraddr(rpc_transport_t *this, char *peeraddr, int addrlen,\n                           struct sockaddr_storage *sa, size_t salen);\n\nint32_t\nrpc_transport_get_myname(rpc_transport_t *this, char *hostname, int hostlen);\n\nint32_t\nrpc_transport_get_myaddr(rpc_transport_t *this, char *peeraddr, int addrlen,\n                         struct sockaddr_storage *sa, size_t salen);\n\nint\nrpc_transport_throttle(rpc_transport_t *this, gf_boolean_t onoff);\n\nrpc_transport_pollin_t *\nrpc_transport_pollin_alloc(rpc_transport_t *this, struct iovec *vector,\n                           int count, struct iobuf *hdr_iobuf,\n                           struct iobref *iobref, void *private);\nvoid\nrpc_transport_pollin_destroy(rpc_transport_pollin_t *pollin);\n\nint\nrpc_transport_keepalive_options_set(dict_t *options, int32_t interval,\n                                    int32_t time, int32_t timeout);\n\nint\nrpc_transport_unix_options_build(dict_t *options, char *filepath,\n                                 int frame_timeout);\n\nint\nrpc_transport_inet_options_build(dict_t *options, const char *hostname,\n                                 int port, char *af);\n\nvoid\nrpc_transport_cleanup(rpc_transport_t *);\n#endif /* __RPC_TRANSPORT_H__ */\n",
        "/tmp/vanessa/spack-stage/spack-stage-glusterfs-7.2-7bafu5wprzvvhnabtlwumqs3qxil5tgh/spack-src/rpc/rpc-lib/src/rpc-transport.c": "/*\n  Copyright (c) 2008-2012 Red Hat, Inc. <http://www.redhat.com>\n  This file is part of GlusterFS.\n\n  This file is licensed to you under your choice of the GNU Lesser\n  General Public License, version 3 or any later version (LGPLv3 or\n  later), or the GNU General Public License, version 2 (GPLv2), in all\n  cases as published by the Free Software Foundation.\n*/\n\n#include <dlfcn.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <sys/poll.h>\n#include <fnmatch.h>\n#include <stdint.h>\n\n#include <glusterfs/logging.h>\n#include \"rpc-transport.h\"\n#include <glusterfs/glusterfs.h>\n#include <glusterfs/list.h>\n\n#ifndef GF_OPTION_LIST_EMPTY\n#define GF_OPTION_LIST_EMPTY(_opt) (_opt->value[0] == NULL)\n#endif\n\nint32_t\nrpc_transport_count(const char *transport_type)\n{\n    char *transport_dup = NULL;\n    char *saveptr = NULL;\n    char *ptr = NULL;\n    int count = 0;\n\n    if (transport_type == NULL)\n        return -1;\n\n    transport_dup = gf_strdup(transport_type);\n    if (transport_dup == NULL) {\n        return -1;\n    }\n\n    ptr = strtok_r(transport_dup, \",\", &saveptr);\n    while (ptr != NULL) {\n        count++;\n        ptr = strtok_r(NULL, \",\", &saveptr);\n    }\n\n    GF_FREE(transport_dup);\n    return count;\n}\n\nint\nrpc_transport_get_myaddr(rpc_transport_t *this, char *peeraddr, int addrlen,\n                         struct sockaddr_storage *sa, size_t salen)\n{\n    int32_t ret = -1;\n    GF_VALIDATE_OR_GOTO(\"rpc\", this, out);\n\n    ret = this->ops->get_myaddr(this, peeraddr, addrlen, sa, salen);\n\nout:\n    return ret;\n}\n\nint32_t\nrpc_transport_get_myname(rpc_transport_t *this, char *hostname, int hostlen)\n{\n    int32_t ret = -1;\n    GF_VALIDATE_OR_GOTO(\"rpc\", this, out);\n\n    ret = this->ops->get_myname(this, hostname, hostlen);\nout:\n    return ret;\n}\n\nint32_t\nrpc_transport_get_peername(rpc_transport_t *this, char *hostname, int hostlen)\n{\n    int32_t ret = -1;\n    GF_VALIDATE_OR_GOTO(\"rpc\", this, out);\n\n    ret = this->ops->get_peername(this, hostname, hostlen);\nout:\n    return ret;\n}\n\nint\nrpc_transport_throttle(rpc_transport_t *this, gf_boolean_t onoff)\n{\n    int ret = 0;\n\n    if (!this->ops->throttle)\n        return -ENOSYS;\n\n    ret = this->ops->throttle(this, onoff);\n\n    return ret;\n}\n\nint32_t\nrpc_transport_get_peeraddr(rpc_transport_t *this, char *peeraddr, int addrlen,\n                           struct sockaddr_storage *sa, size_t salen)\n{\n    int32_t ret = -1;\n    GF_VALIDATE_OR_GOTO(\"rpc\", this, out);\n\n    ret = this->ops->get_peeraddr(this, peeraddr, addrlen, sa, salen);\nout:\n    return ret;\n}\n\nvoid\nrpc_transport_pollin_destroy(rpc_transport_pollin_t *pollin)\n{\n    GF_VALIDATE_OR_GOTO(\"rpc\", pollin, out);\n\n    if (pollin->iobref) {\n        iobref_unref(pollin->iobref);\n    }\n\n    if (pollin->private) {\n        /* */\n        GF_FREE(pollin->private);\n    }\n\n    GF_FREE(pollin);\nout:\n    return;\n}\n\nrpc_transport_pollin_t *\nrpc_transport_pollin_alloc(rpc_transport_t *this, struct iovec *vector,\n                           int count, struct iobuf *hdr_iobuf,\n                           struct iobref *iobref, void *private)\n{\n    rpc_transport_pollin_t *msg = NULL;\n    msg = GF_CALLOC(1, sizeof(*msg), gf_common_mt_rpc_trans_pollin_t);\n    if (!msg) {\n        goto out;\n    }\n\n    msg->trans = this;\n\n    if (count > 1) {\n        msg->vectored = 1;\n    }\n\n    memcpy(msg->vector, vector, count * sizeof(*vector));\n    msg->count = count;\n    msg->iobref = iobref_ref(iobref);\n    msg->private = private;\n    if (hdr_iobuf)\n        iobref_add(iobref, hdr_iobuf);\n\nout:\n    return msg;\n}\n\nvoid\nrpc_transport_cleanup(rpc_transport_t *trans)\n{\n    if (!trans)\n        return;\n\n    if (trans->fini)\n        trans->fini(trans);\n\n    if (trans->options) {\n        dict_unref(trans->options);\n        trans->options = NULL;\n    }\n\n    GF_FREE(trans->name);\n\n    if (trans->xl)\n        pthread_mutex_destroy(&trans->lock);\n\n    if (trans->dl_handle)\n        dlclose(trans->dl_handle);\n\n    GF_FREE(trans);\n}\n\nrpc_transport_t *\nrpc_transport_load(glusterfs_ctx_t *ctx, dict_t *options, char *trans_name)\n{\n    struct rpc_transport *trans = NULL, *return_trans = NULL;\n    char *name = NULL;\n    void *handle = NULL;\n    char *type = NULL;\n    char str[] = \"ERROR\";\n    int32_t ret = -1;\n    int is_tcp = 0, is_unix = 0, is_ibsdp = 0;\n    volume_opt_list_t *vol_opt = NULL;\n    gf_boolean_t bind_insecure = _gf_false;\n    xlator_t *this = NULL;\n    gf_boolean_t success = _gf_false;\n\n    GF_VALIDATE_OR_GOTO(\"rpc-transport\", options, fail);\n    GF_VALIDATE_OR_GOTO(\"rpc-transport\", ctx, fail);\n    GF_VALIDATE_OR_GOTO(\"rpc-transport\", trans_name, fail);\n\n    trans = GF_CALLOC(1, sizeof(struct rpc_transport),\n                      gf_common_mt_rpc_trans_t);\n    if (!trans)\n        goto fail;\n\n    trans->name = gf_strdup(trans_name);\n    if (!trans->name)\n        goto fail;\n\n    trans->ctx = ctx;\n    type = str;\n\n    /* Backward compatibility */\n    ret = dict_get_str(options, \"transport-type\", &type);\n    if (ret < 0) {\n        ret = dict_set_str(options, \"transport-type\", \"socket\");\n        if (ret < 0)\n            gf_log(\"dict\", GF_LOG_DEBUG, \"setting transport-type failed\");\n        else\n            gf_log(\"rpc-transport\", GF_LOG_DEBUG,\n                   \"missing 'option transport-type'. defaulting to \"\n                   \"\\\"socket\\\"\");\n    } else {\n        {\n            /* Backward compatibility to handle * /client,\n             * * /server.\n             */\n            char *tmp = strchr(type, '/');\n            if (tmp)\n                *tmp = '\\0';\n        }\n\n        is_tcp = strcmp(type, \"tcp\");\n        is_unix = strcmp(type, \"unix\");\n        is_ibsdp = strcmp(type, \"ib-sdp\");\n        if ((is_tcp == 0) || (is_unix == 0) || (is_ibsdp == 0)) {\n            if (is_unix == 0)\n                ret = dict_set_str(options, \"transport.address-family\", \"unix\");\n            if (is_ibsdp == 0)\n                ret = dict_set_str(options, \"transport.address-family\",\n                                   \"inet-sdp\");\n\n            if (ret < 0)\n                gf_log(\"dict\", GF_LOG_DEBUG, \"setting address-family failed\");\n\n            ret = dict_set_str(options, \"transport-type\", \"socket\");\n            if (ret < 0)\n                gf_log(\"dict\", GF_LOG_DEBUG, \"setting transport-type failed\");\n        }\n    }\n\n    /* client-bind-insecure is for clients protocol, and\n     * bind-insecure for glusterd. Both mutually exclusive\n     */\n    ret = dict_get_str(options, \"client-bind-insecure\", &type);\n    if (ret)\n        ret = dict_get_str(options, \"bind-insecure\", &type);\n    if (ret == 0) {\n        ret = gf_string2boolean(type, &bind_insecure);\n        if (ret < 0) {\n            gf_log(\"rcp-transport\", GF_LOG_WARNING,\n                   \"bind-insecure option %s is not a\"\n                   \" valid bool option\",\n                   type);\n            goto fail;\n        }\n        if (_gf_true == bind_insecure)\n            trans->bind_insecure = 1;\n        else\n            trans->bind_insecure = 0;\n    } else {\n        /* By default allow bind insecure */\n        trans->bind_insecure = 1;\n    }\n\n    ret = dict_get_str(options, \"transport-type\", &type);\n    if (ret < 0) {\n        gf_log(\"rpc-transport\", GF_LOG_ERROR,\n               \"'option transport-type <xx>' missing in volume '%s'\",\n               trans_name);\n        goto fail;\n    }\n\n    ret = gf_asprintf(&name, \"%s/%s.so\", RPC_TRANSPORTDIR, type);\n    if (-1 == ret) {\n        goto fail;\n    }\n\n    if (dict_get(options, \"notify-poller-death\")) {\n        trans->notify_poller_death = 1;\n    }\n\n    gf_log(\"rpc-transport\", GF_LOG_DEBUG, \"attempt to load file %s\", name);\n\n    handle = dlopen(name, RTLD_NOW);\n    if (handle == NULL) {\n        gf_log(\"rpc-transport\", GF_LOG_ERROR, \"%s\", dlerror());\n        gf_log(\"rpc-transport\", GF_LOG_WARNING,\n               \"volume '%s': transport-type '%s' is not valid or \"\n               \"not found on this machine\",\n               trans_name, type);\n        goto fail;\n    }\n\n    trans->dl_handle = handle;\n\n    trans->ops = dlsym(handle, \"tops\");\n    if (trans->ops == NULL) {\n        gf_log(\"rpc-transport\", GF_LOG_ERROR, \"dlsym (rpc_transport_ops) on %s\",\n               dlerror());\n        goto fail;\n    }\n\n    *VOID(&(trans->init)) = dlsym(handle, \"init\");\n    if (trans->init == NULL) {\n        gf_log(\"rpc-transport\", GF_LOG_ERROR,\n               \"dlsym (gf_rpc_transport_init) on %s\", dlerror());\n        goto fail;\n    }\n\n    *VOID(&(trans->fini)) = dlsym(handle, \"fini\");\n    if (trans->fini == NULL) {\n        gf_log(\"rpc-transport\", GF_LOG_ERROR,\n               \"dlsym (gf_rpc_transport_fini) on %s\", dlerror());\n        goto fail;\n    }\n\n    *VOID(&(trans->reconfigure)) = dlsym(handle, \"reconfigure\");\n    if (trans->reconfigure == NULL) {\n        gf_log(\"rpc-transport\", GF_LOG_DEBUG,\n               \"dlsym (gf_rpc_transport_reconfigure) on %s\", dlerror());\n    }\n\n    vol_opt = GF_CALLOC(1, sizeof(volume_opt_list_t),\n                        gf_common_mt_volume_opt_list_t);\n    if (!vol_opt) {\n        goto fail;\n    }\n\n    this = THIS;\n    vol_opt->given_opt = dlsym(handle, \"options\");\n    if (vol_opt->given_opt == NULL) {\n        gf_log(\"rpc-transport\", GF_LOG_DEBUG,\n               \"volume option validation not specified\");\n    } else {\n        INIT_LIST_HEAD(&vol_opt->list);\n        list_add_tail(&vol_opt->list, &(this->volume_options));\n        if (xlator_options_validate_list(this, options, vol_opt, NULL)) {\n            gf_log(\"rpc-transport\", GF_LOG_ERROR,\n                   \"volume option validation failed\");\n            goto fail;\n        }\n    }\n\n    trans->options = dict_ref(options);\n\n    pthread_mutex_init(&trans->lock, NULL);\n    trans->xl = this;\n\n    ret = trans->init(trans);\n    if (ret != 0) {\n        gf_log(\"rpc-transport\", GF_LOG_WARNING, \"'%s' initialization failed\",\n               type);\n        goto fail;\n    }\n\n    INIT_LIST_HEAD(&trans->list);\n    GF_ATOMIC_INIT(trans->disconnect_progress, 0);\n\n    return_trans = trans;\n\n    GF_FREE(name);\n\n    success = _gf_true;\n\nfail:\n    if (!success) {\n        rpc_transport_cleanup(trans);\n        GF_FREE(name);\n\n        return_trans = NULL;\n    }\n\n    if (vol_opt) {\n        if (!list_empty(&vol_opt->list)) {\n            list_del_init(&vol_opt->list);\n        }\n        GF_FREE(vol_opt);\n    }\n\n    return return_trans;\n}\n\nint32_t\nrpc_transport_submit_request(rpc_transport_t *this, rpc_transport_req_t *req)\n{\n    int32_t ret = -1;\n\n    GF_VALIDATE_OR_GOTO(\"rpc_transport\", this, fail);\n    GF_VALIDATE_OR_GOTO(\"rpc_transport\", this->ops, fail);\n\n    ret = this->ops->submit_request(this, req);\nfail:\n    return ret;\n}\n\nint32_t\nrpc_transport_submit_reply(rpc_transport_t *this, rpc_transport_reply_t *reply)\n{\n    int32_t ret = -1;\n\n    GF_VALIDATE_OR_GOTO(\"rpc_transport\", this, fail);\n    GF_VALIDATE_OR_GOTO(\"rpc_transport\", this->ops, fail);\n\n    ret = this->ops->submit_reply(this, reply);\nfail:\n    return ret;\n}\n\nint32_t\nrpc_transport_connect(rpc_transport_t *this, int port)\n{\n    int ret = -1;\n\n    GF_VALIDATE_OR_GOTO(\"rpc_transport\", this, fail);\n\n    ret = this->ops->connect(this, port);\nfail:\n    return ret;\n}\n\nint32_t\nrpc_transport_listen(rpc_transport_t *this)\n{\n    int ret = -1;\n\n    GF_VALIDATE_OR_GOTO(\"rpc_transport\", this, fail);\n\n    ret = this->ops->listen(this);\nfail:\n    return ret;\n}\n\nint32_t\nrpc_transport_disconnect(rpc_transport_t *this, gf_boolean_t wait)\n{\n    int32_t ret = -1;\n\n    GF_VALIDATE_OR_GOTO(\"rpc_transport\", this, fail);\n\n    ret = this->ops->disconnect(this, wait);\n\nfail:\n    return ret;\n}\n\nint32_t\nrpc_transport_destroy(rpc_transport_t *this)\n{\n    struct dnscache6 *cache = NULL;\n    int32_t ret = -1;\n\n    GF_VALIDATE_OR_GOTO(\"rpc_transport\", this, fail);\n\n    if (this->clnt_options)\n        dict_unref(this->clnt_options);\n    if (this->options)\n        dict_unref(this->options);\n    if (this->fini)\n        this->fini(this);\n\n    pthread_mutex_destroy(&this->lock);\n\n    GF_FREE(this->name);\n\n    if (this->dl_handle)\n        dlclose(this->dl_handle);\n\n    if (this->ssl_name) {\n        GF_FREE(this->ssl_name);\n    }\n\n    if (this->dnscache) {\n        cache = this->dnscache;\n        if (cache->first)\n            freeaddrinfo(cache->first);\n        GF_FREE(this->dnscache);\n    }\n\n    GF_FREE(this);\n\n    ret = 0;\nfail:\n    return ret;\n}\n\nrpc_transport_t *\nrpc_transport_ref(rpc_transport_t *this)\n{\n    rpc_transport_t *return_this = NULL;\n\n    GF_VALIDATE_OR_GOTO(\"rpc_transport\", this, fail);\n\n    GF_ATOMIC_INC(this->refcount);\n\n    return_this = this;\nfail:\n    return return_this;\n}\n\nint32_t\nrpc_transport_unref(rpc_transport_t *this)\n{\n    int32_t refcount = 0;\n    int32_t ret = -1;\n\n    GF_VALIDATE_OR_GOTO(\"rpc_transport\", this, fail);\n\n    refcount = GF_ATOMIC_DEC(this->refcount);\n\n    if (refcount == 0) {\n        if (this->mydata)\n            this->notify(this, this->mydata, RPC_TRANSPORT_CLEANUP, NULL);\n        this->mydata = NULL;\n        this->notify = NULL;\n        rpc_transport_destroy(this);\n    }\n\n    ret = 0;\nfail:\n    return ret;\n}\n\nint32_t\nrpc_transport_notify(rpc_transport_t *this, rpc_transport_event_t event,\n                     void *data, ...)\n{\n    int32_t ret = -1;\n    GF_VALIDATE_OR_GOTO(\"rpc\", this, out);\n\n    if (this->notify != NULL) {\n        ret = this->notify(this, this->mydata, event, data);\n    } else {\n        ret = 0;\n    }\nout:\n    return ret;\n}\n\nint\nrpc_transport_register_notify(rpc_transport_t *trans,\n                              rpc_transport_notify_t notify, void *mydata)\n{\n    int32_t ret = -1;\n    GF_VALIDATE_OR_GOTO(\"rpc\", trans, out);\n\n    trans->notify = notify;\n    trans->mydata = mydata;\n\n    ret = 0;\nout:\n    return ret;\n}\n\n// give negative values to skip setting that value\n// this function asserts if both the values are negative.\n// why call it if you don't set it.\nint\nrpc_transport_keepalive_options_set(dict_t *options, int32_t interval,\n                                    int32_t time, int32_t timeout)\n{\n    int ret = -1;\n\n    GF_ASSERT(options);\n    GF_ASSERT((interval > 0) || (time > 0));\n\n    ret = dict_set_int32(options, \"transport.socket.keepalive-interval\",\n                         interval);\n    if (ret)\n        goto out;\n\n    ret = dict_set_int32(options, \"transport.socket.keepalive-time\", time);\n    if (ret)\n        goto out;\n\n    ret = dict_set_int32(options, \"transport.tcp-user-timeout\", timeout);\n    if (ret)\n        goto out;\nout:\n    return ret;\n}\n\nint\nrpc_transport_unix_options_build(dict_t *dict, char *filepath,\n                                 int frame_timeout)\n{\n    char *fpath = NULL;\n    int ret = -1;\n\n    GF_ASSERT(filepath);\n    GF_VALIDATE_OR_GOTO(\"rpc-transport\", dict, out);\n\n    fpath = gf_strdup(filepath);\n    if (!fpath) {\n        ret = -1;\n        goto out;\n    }\n\n    ret = dict_set_dynstr(dict, \"transport.socket.connect-path\", fpath);\n    if (ret) {\n        GF_FREE(fpath);\n        goto out;\n    }\n\n    ret = dict_set_str(dict, \"transport.address-family\", \"unix\");\n    if (ret)\n        goto out;\n\n    ret = dict_set_str(dict, \"transport.socket.nodelay\", \"off\");\n    if (ret)\n        goto out;\n\n    ret = dict_set_str(dict, \"transport-type\", \"socket\");\n    if (ret)\n        goto out;\n\n    ret = dict_set_str(dict, \"transport.socket.keepalive\", \"off\");\n    if (ret)\n        goto out;\n\n    if (frame_timeout > 0) {\n        ret = dict_set_int32(dict, \"frame-timeout\", frame_timeout);\n        if (ret)\n            goto out;\n    }\nout:\n    return ret;\n}\n\nint\nrpc_transport_inet_options_build(dict_t *dict, const char *hostname, int port,\n                                 char *af)\n{\n    char *host = NULL;\n    int ret = -1;\n#ifdef IPV6_DEFAULT\n    char *addr_family = \"inet6\";\n#else\n    char *addr_family = \"inet\";\n#endif\n\n    GF_ASSERT(hostname);\n    GF_ASSERT(port >= 1024);\n    GF_VALIDATE_OR_GOTO(\"rpc-transport\", dict, out);\n\n    host = gf_strdup((char *)hostname);\n    if (!host) {\n        ret = -1;\n        goto out;\n    }\n\n    ret = dict_set_dynstr(dict, \"remote-host\", host);\n    if (ret) {\n        gf_log(THIS->name, GF_LOG_WARNING, \"failed to set remote-host with %s\",\n               host);\n        GF_FREE(host);\n        goto out;\n    }\n\n    ret = dict_set_int32(dict, \"remote-port\", port);\n    if (ret) {\n        gf_log(THIS->name, GF_LOG_WARNING, \"failed to set remote-port with %d\",\n               port);\n        goto out;\n    }\n\n    ret = dict_set_str(dict, \"address-family\", (af != NULL ? af : addr_family));\n    if (ret) {\n        gf_log(THIS->name, GF_LOG_WARNING, \"failed to set address-family to %s\",\n               addr_family);\n        goto out;\n    }\n\n    ret = dict_set_str(dict, \"transport-type\", \"socket\");\n    if (ret) {\n        gf_log(THIS->name, GF_LOG_WARNING,\n               \"failed to set trans-type with socket\");\n        goto out;\n    }\nout:\n    return ret;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-glusterfs-7.2-7bafu5wprzvvhnabtlwumqs3qxil5tgh/spack-src/xlators/mgmt/glusterd/src/glusterd-utils.c": "/*\n   Copyright (c) 2006-2012 Red Hat, Inc. <http://www.redhat.com>\n   This file is part of GlusterFS.\n\n   This file is licensed to you under your choice of the GNU Lesser\n   General Public License, version 3 or any later version (LGPLv3 or\n   later), or the GNU General Public License, version 2 (GPLv2), in all\n   cases as published by the Free Software Foundation.\n*/\n#include <inttypes.h>\n\n#if defined(GF_LINUX_HOST_OS)\n#include <mntent.h>\n#else\n#include \"mntent_compat.h\"\n#endif\n#include <dlfcn.h>\n#if (HAVE_LIB_XML)\n#include <libxml/encoding.h>\n#include <libxml/xmlwriter.h>\n#endif\n\n#include <glusterfs/glusterfs.h>\n#include <glusterfs/compat.h>\n#include <glusterfs/dict.h>\n#include <glusterfs/xlator.h>\n#include <glusterfs/logging.h>\n#include \"glusterd-messages.h\"\n#include <glusterfs/timer.h>\n#include <glusterfs/defaults.h>\n#include <glusterfs/compat.h>\n#include <glusterfs/syncop.h>\n#include <glusterfs/run.h>\n#include <glusterfs/compat-errno.h>\n#include <glusterfs/statedump.h>\n#include <glusterfs/syscall.h>\n#include \"glusterd-mem-types.h\"\n#include \"glusterd.h\"\n#include \"glusterd-op-sm.h\"\n#include \"glusterd-geo-rep.h\"\n#include \"glusterd-sm.h\"\n#include \"glusterd-utils.h\"\n#include \"glusterd-store.h\"\n#include \"glusterd-volgen.h\"\n#include \"glusterd-pmap.h\"\n#include <glusterfs/glusterfs-acl.h>\n#include \"glusterd-syncop.h\"\n#include \"glusterd-mgmt.h\"\n#include \"glusterd-locks.h\"\n#include \"glusterd-messages.h\"\n#include \"glusterd-volgen.h\"\n#include \"glusterd-snapshot-utils.h\"\n#include \"glusterd-svc-mgmt.h\"\n#include \"glusterd-svc-helper.h\"\n#include \"glusterd-shd-svc.h\"\n#include \"glusterd-nfs-svc.h\"\n#include \"glusterd-quotad-svc.h\"\n#include \"glusterd-snapd-svc.h\"\n#include \"glusterd-bitd-svc.h\"\n#include \"glusterd-gfproxyd-svc.h\"\n#include \"glusterd-server-quorum.h\"\n#include <glusterfs/quota-common-utils.h>\n#include <glusterfs/common-utils.h>\n#include \"glusterd-shd-svc-helper.h\"\n\n#include \"xdr-generic.h\"\n#include <sys/resource.h>\n#include <inttypes.h>\n#include <signal.h>\n#include <sys/types.h>\n#include <sys/ioctl.h>\n#include <sys/socket.h>\n#include <rpc/pmap_clnt.h>\n#include <unistd.h>\n#include <fnmatch.h>\n#include <sys/statvfs.h>\n#include <ifaddrs.h>\n\n#ifdef GF_SOLARIS_HOST_OS\n#include <sys/sockio.h>\n#endif\n\n#define NFS_PROGRAM 100003\n#define NFSV3_VERSION 3\n\n#define MOUNT_PROGRAM 100005\n#define MOUNTV3_VERSION 3\n#define MOUNTV1_VERSION 1\n\n#define NLM_PROGRAM 100021\n#define NLMV4_VERSION 4\n#define NLMV1_VERSION 1\n\ngf_boolean_t\nis_brick_mx_enabled(void)\n{\n    char *value = NULL;\n    int ret = 0;\n    gf_boolean_t enabled = _gf_false;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n\n    this = THIS;\n\n    priv = this->private;\n\n    ret = dict_get_strn(priv->opts, GLUSTERD_BRICK_MULTIPLEX_KEY,\n                        SLEN(GLUSTERD_BRICK_MULTIPLEX_KEY), &value);\n\n    if (!ret)\n        ret = gf_string2boolean(value, &enabled);\n\n    return ret ? _gf_false : enabled;\n}\n\nint\nget_mux_limit_per_process(int *mux_limit)\n{\n    char *value = NULL;\n    int ret = -1;\n    int max_bricks_per_proc = 0;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n\n    this = THIS;\n    GF_VALIDATE_OR_GOTO(\"glusterd\", this, out);\n\n    priv = this->private;\n    GF_VALIDATE_OR_GOTO(this->name, priv, out);\n\n    if (!is_brick_mx_enabled()) {\n        max_bricks_per_proc = 1;\n        ret = 0;\n        goto out;\n    }\n\n    ret = dict_get_strn(priv->opts, GLUSTERD_BRICKMUX_LIMIT_KEY,\n                        SLEN(GLUSTERD_BRICKMUX_LIMIT_KEY), &value);\n    if (ret) {\n        value = GLUSTERD_BRICKMUX_LIMIT_DFLT_VALUE;\n    }\n    ret = gf_string2int(value, &max_bricks_per_proc);\n    if (ret)\n        goto out;\n\nout:\n    *mux_limit = max_bricks_per_proc;\n\n    gf_msg_debug(\"glusterd\", 0, \"Mux limit set to %d bricks per process\",\n                 *mux_limit);\n\n    return ret;\n}\n\nint\nget_gd_vol_thread_limit(int *thread_limit)\n{\n    char *value = NULL;\n    int ret = -1;\n    int vol_per_thread_limit = 0;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n\n    this = THIS;\n    GF_VALIDATE_OR_GOTO(\"glusterd\", this, out);\n\n    priv = this->private;\n    GF_VALIDATE_OR_GOTO(this->name, priv, out);\n\n    if (!is_brick_mx_enabled()) {\n        vol_per_thread_limit = 1;\n        ret = 0;\n        goto out;\n    }\n\n    ret = dict_get_strn(priv->opts, GLUSTERD_VOL_CNT_PER_THRD,\n                        SLEN(GLUSTERD_VOL_CNT_PER_THRD), &value);\n    if (ret) {\n        value = GLUSTERD_VOL_CNT_PER_THRD_DEFAULT_VALUE;\n    }\n    ret = gf_string2int(value, &vol_per_thread_limit);\n    if (ret)\n        goto out;\n\nout:\n    *thread_limit = vol_per_thread_limit;\n\n    gf_msg_debug(\"glusterd\", 0,\n                 \"Per Thread volume limit set to %d glusterd to populate dict \"\n                 \"data parallel\",\n                 *thread_limit);\n\n    return ret;\n}\n\nextern struct volopt_map_entry glusterd_volopt_map[];\nextern glusterd_all_vol_opts valid_all_vol_opts[];\n\nstatic glusterd_lock_t lock;\n\nstatic int\n_brick_for_each(glusterd_volinfo_t *volinfo, dict_t *mod_dict, void *data,\n                int (*fn)(glusterd_volinfo_t *, glusterd_brickinfo_t *,\n                          dict_t *mod_dict, void *))\n{\n    int ret = 0;\n    glusterd_brickinfo_t *brickinfo = NULL;\n    xlator_t *this = THIS;\n\n    cds_list_for_each_entry(brickinfo, &volinfo->bricks, brick_list)\n    {\n        gf_msg_debug(this->name, 0, \"Found a brick - %s:%s\",\n                     brickinfo->hostname, brickinfo->path);\n        ret = fn(volinfo, brickinfo, mod_dict, data);\n        if (ret)\n            goto out;\n    }\nout:\n    return ret;\n}\n\n/* This is going to be a O(n^2) operation as we have to pick a brick,\n   make sure it belong to this machine, and compare another brick belonging\n   to this machine (if exists), is sharing the backend */\nstatic void\ngd_set_shared_brick_count(glusterd_volinfo_t *volinfo)\n{\n    glusterd_brickinfo_t *brickinfo = NULL;\n    glusterd_brickinfo_t *trav = NULL;\n\n    cds_list_for_each_entry(brickinfo, &volinfo->bricks, brick_list)\n    {\n        if (gf_uuid_compare(brickinfo->uuid, MY_UUID))\n            continue;\n        brickinfo->fs_share_count = 0;\n        cds_list_for_each_entry(trav, &volinfo->bricks, brick_list)\n        {\n            if (!gf_uuid_compare(trav->uuid, MY_UUID) &&\n                (trav->statfs_fsid == brickinfo->statfs_fsid)) {\n                brickinfo->fs_share_count++;\n            }\n        }\n    }\n\n    return;\n}\n\nint\nglusterd_volume_brick_for_each(glusterd_volinfo_t *volinfo, void *data,\n                               int (*fn)(glusterd_volinfo_t *,\n                                         glusterd_brickinfo_t *,\n                                         dict_t *mod_dict, void *))\n{\n    gd_set_shared_brick_count(volinfo);\n\n    return _brick_for_each(volinfo, NULL, data, fn);\n}\n\nint32_t\nglusterd_get_lock_owner(uuid_t *uuid)\n{\n    gf_uuid_copy(*uuid, lock.owner);\n    return 0;\n}\n\nstatic int32_t\nglusterd_set_lock_owner(uuid_t owner)\n{\n    gf_uuid_copy(lock.owner, owner);\n    // TODO: set timestamp\n    return 0;\n}\n\nstatic int32_t\nglusterd_unset_lock_owner(uuid_t owner)\n{\n    gf_uuid_clear(lock.owner);\n    // TODO: set timestamp\n    return 0;\n}\n\ngf_boolean_t\nglusterd_is_fuse_available()\n{\n    int fd = 0;\n\n#ifdef __NetBSD__\n    fd = open(\"/dev/puffs\", O_RDWR);\n#else\n    fd = open(\"/dev/fuse\", O_RDWR);\n#endif\n\n    if (fd > -1 && !sys_close(fd))\n        return _gf_true;\n    else\n        return _gf_false;\n}\n\nint32_t\nglusterd_lock(uuid_t uuid)\n{\n    uuid_t owner;\n    char new_owner_str[50] = \"\";\n    char owner_str[50] = \"\";\n    int ret = -1;\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    GF_ASSERT(uuid);\n\n    glusterd_get_lock_owner(&owner);\n\n    if (!gf_uuid_is_null(owner)) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_GLUSTERD_LOCK_FAIL,\n               \"Unable to get lock\"\n               \" for uuid: %s, lock held by: %s\",\n               uuid_utoa_r(uuid, new_owner_str), uuid_utoa_r(owner, owner_str));\n        goto out;\n    }\n\n    ret = glusterd_set_lock_owner(uuid);\n\n    if (!ret) {\n        gf_msg_debug(this->name, 0,\n                     \"Cluster lock held by\"\n                     \" %s\",\n                     uuid_utoa(uuid));\n    }\n\nout:\n    return ret;\n}\n\nint32_t\nglusterd_unlock(uuid_t uuid)\n{\n    uuid_t owner;\n    char new_owner_str[50] = \"\";\n    char owner_str[50] = \"\";\n    int32_t ret = -1;\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    GF_ASSERT(uuid);\n\n    glusterd_get_lock_owner(&owner);\n\n    if (gf_uuid_is_null(owner)) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_GLUSTERD_LOCK_FAIL,\n               \"Cluster lock not held!\");\n        goto out;\n    }\n\n    ret = gf_uuid_compare(uuid, owner);\n\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_GLUSTERD_LOCK_FAIL,\n               \"Cluster lock held by %s ,\"\n               \"unlock req from %s!\",\n               uuid_utoa_r(owner, owner_str), uuid_utoa_r(uuid, new_owner_str));\n        goto out;\n    }\n\n    ret = glusterd_unset_lock_owner(uuid);\n\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_GLUSTERD_UNLOCK_FAIL,\n               \"Unable to clear cluster \"\n               \"lock\");\n        goto out;\n    }\n\n    ret = 0;\n\nout:\n    return ret;\n}\n\nint\nglusterd_get_uuid(uuid_t *uuid)\n{\n    glusterd_conf_t *priv = NULL;\n\n    priv = THIS->private;\n\n    GF_ASSERT(priv);\n\n    gf_uuid_copy(*uuid, MY_UUID);\n\n    return 0;\n}\n\nint\nglusterd_submit_request(struct rpc_clnt *rpc, void *req, call_frame_t *frame,\n                        rpc_clnt_prog_t *prog, int procnum,\n                        struct iobref *iobref, xlator_t *this,\n                        fop_cbk_fn_t cbkfn, xdrproc_t xdrproc)\n{\n    char new_iobref = 0;\n    int ret = -1;\n    int count = 0;\n    ssize_t req_size = 0;\n    struct iobuf *iobuf = NULL;\n    struct iovec iov = {\n        0,\n    };\n\n    GF_ASSERT(rpc);\n    GF_ASSERT(this);\n\n    if (req) {\n        req_size = xdr_sizeof(xdrproc, req);\n        iobuf = iobuf_get2(this->ctx->iobuf_pool, req_size);\n        if (!iobuf) {\n            goto out;\n        };\n\n        if (!iobref) {\n            iobref = iobref_new();\n            if (!iobref) {\n                goto out;\n            }\n\n            new_iobref = 1;\n        }\n\n        iobref_add(iobref, iobuf);\n\n        iov.iov_base = iobuf->ptr;\n        iov.iov_len = iobuf_pagesize(iobuf);\n\n        /* Create the xdr payload */\n        ret = xdr_serialize_generic(iov, req, xdrproc);\n        if (ret == -1) {\n            goto out;\n        }\n        iov.iov_len = ret;\n        count = 1;\n    }\n\n    /* Send the msg */\n    rpc_clnt_submit(rpc, prog, procnum, cbkfn, &iov, count, NULL, 0, iobref,\n                    frame, NULL, 0, NULL, 0, NULL);\n\n    /* Unconditionally set ret to 0 here. This is to guard against a double\n     * STACK_DESTROY in case of a failure in rpc_clnt_submit AFTER the\n     * request is sent over the wire: once in the callback function of the\n     * request and once in the error codepath of some of the callers of\n     * glusterd_submit_request().\n     */\n    ret = 0;\nout:\n    if (new_iobref) {\n        iobref_unref(iobref);\n    }\n\n    iobuf_unref(iobuf);\n\n    return ret;\n}\n\nstruct iobuf *\nglusterd_serialize_reply(rpcsvc_request_t *req, void *arg, struct iovec *outmsg,\n                         xdrproc_t xdrproc)\n{\n    struct iobuf *iob = NULL;\n    ssize_t retlen = -1;\n    ssize_t rsp_size = 0;\n\n    /* First, get the io buffer into which the reply in arg will\n     * be serialized.\n     */\n    rsp_size = xdr_sizeof(xdrproc, arg);\n    iob = iobuf_get2(req->svc->ctx->iobuf_pool, rsp_size);\n    if (!iob) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, ENOMEM, GD_MSG_NO_MEMORY,\n               \"Failed to get iobuf\");\n        goto ret;\n    }\n\n    iobuf_to_iovec(iob, outmsg);\n    /* Use the given serializer to translate the give C structure in arg\n     * to XDR format which will be written into the buffer in outmsg.\n     */\n    /* retlen is used to received the error since size_t is unsigned and we\n     * need -1 for error notification during encoding.\n     */\n    retlen = xdr_serialize_generic(*outmsg, arg, xdrproc);\n    if (retlen == -1) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_ENCODE_FAIL,\n               \"Failed to encode message\");\n        goto ret;\n    }\n\n    outmsg->iov_len = retlen;\nret:\n    if (retlen == -1) {\n        iobuf_unref(iob);\n        iob = NULL;\n    }\n\n    return iob;\n}\n\nint\nglusterd_submit_reply(rpcsvc_request_t *req, void *arg, struct iovec *payload,\n                      int payloadcount, struct iobref *iobref,\n                      xdrproc_t xdrproc)\n{\n    struct iobuf *iob = NULL;\n    int ret = -1;\n    struct iovec rsp = {\n        0,\n    };\n    char new_iobref = 0;\n\n    if (!req) {\n        GF_ASSERT(req);\n        goto out;\n    }\n\n    if (!iobref) {\n        iobref = iobref_new();\n        if (!iobref) {\n            gf_msg(\"glusterd\", GF_LOG_ERROR, ENOMEM, GD_MSG_NO_MEMORY,\n                   \"out of memory\");\n            goto out;\n        }\n\n        new_iobref = 1;\n    }\n\n    iob = glusterd_serialize_reply(req, arg, &rsp, xdrproc);\n    if (!iob) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_SERIALIZE_MSG_FAIL,\n               \"Failed to serialize reply\");\n    } else {\n        iobref_add(iobref, iob);\n    }\n\n    ret = rpcsvc_submit_generic(req, &rsp, 1, payload, payloadcount, iobref);\n\n    /* Now that we've done our job of handing the message to the RPC layer\n     * we can safely unref the iob in the hope that RPC layer must have\n     * ref'ed the iob on receiving into the txlist.\n     */\n    if (ret == -1) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_REPLY_SUBMIT_FAIL,\n               \"Reply submission failed\");\n        goto out;\n    }\n\n    ret = 0;\nout:\n\n    if (new_iobref) {\n        iobref_unref(iobref);\n    }\n\n    if (iob)\n        iobuf_unref(iob);\n    return ret;\n}\n\nglusterd_volinfo_t *\nglusterd_volinfo_unref(glusterd_volinfo_t *volinfo)\n{\n    int refcnt = -1;\n    glusterd_conf_t *conf = THIS->private;\n\n    pthread_mutex_lock(&conf->volume_lock);\n    {\n        pthread_mutex_lock(&volinfo->reflock);\n        {\n            refcnt = --volinfo->refcnt;\n        }\n        pthread_mutex_unlock(&volinfo->reflock);\n    }\n    pthread_mutex_unlock(&conf->volume_lock);\n    if (!refcnt) {\n        glusterd_volinfo_delete(volinfo);\n        return NULL;\n    }\n\n    return volinfo;\n}\n\nglusterd_volinfo_t *\nglusterd_volinfo_ref(glusterd_volinfo_t *volinfo)\n{\n    pthread_mutex_lock(&volinfo->reflock);\n    {\n        ++volinfo->refcnt;\n    }\n    pthread_mutex_unlock(&volinfo->reflock);\n\n    return volinfo;\n}\n\nint32_t\nglusterd_volinfo_new(glusterd_volinfo_t **volinfo)\n{\n    glusterd_volinfo_t *new_volinfo = NULL;\n    int32_t ret = -1;\n\n    GF_ASSERT(volinfo);\n\n    new_volinfo = GF_CALLOC(1, sizeof(*new_volinfo),\n                            gf_gld_mt_glusterd_volinfo_t);\n\n    if (!new_volinfo)\n        goto out;\n\n    LOCK_INIT(&new_volinfo->lock);\n    CDS_INIT_LIST_HEAD(&new_volinfo->vol_list);\n    CDS_INIT_LIST_HEAD(&new_volinfo->snapvol_list);\n    CDS_INIT_LIST_HEAD(&new_volinfo->bricks);\n    CDS_INIT_LIST_HEAD(&new_volinfo->ta_bricks);\n    CDS_INIT_LIST_HEAD(&new_volinfo->snap_volumes);\n\n    new_volinfo->dict = dict_new();\n    if (!new_volinfo->dict) {\n        GF_FREE(new_volinfo);\n\n        goto out;\n    }\n\n    new_volinfo->gsync_slaves = dict_new();\n    if (!new_volinfo->gsync_slaves) {\n        dict_unref(new_volinfo->dict);\n        GF_FREE(new_volinfo);\n        goto out;\n    }\n\n    new_volinfo->gsync_active_slaves = dict_new();\n    if (!new_volinfo->gsync_active_slaves) {\n        dict_unref(new_volinfo->dict);\n        dict_unref(new_volinfo->gsync_slaves);\n        GF_FREE(new_volinfo);\n        goto out;\n    }\n\n    snprintf(new_volinfo->parent_volname, GD_VOLUME_NAME_MAX, \"N/A\");\n\n    new_volinfo->snap_max_hard_limit = GLUSTERD_SNAPS_MAX_HARD_LIMIT;\n\n    new_volinfo->xl = THIS;\n\n    glusterd_snapdsvc_build(&new_volinfo->snapd.svc);\n    glusterd_gfproxydsvc_build(&new_volinfo->gfproxyd.svc);\n    glusterd_shdsvc_build(&new_volinfo->shd.svc);\n\n    pthread_mutex_init(&new_volinfo->reflock, NULL);\n    *volinfo = glusterd_volinfo_ref(new_volinfo);\n\n    ret = 0;\n\nout:\n    gf_msg_debug(THIS->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\n/* This function will create a new volinfo and then\n * dup the entries from volinfo to the new_volinfo.\n *\n * @param volinfo       volinfo which will be duplicated\n * @param dup_volinfo   new volinfo which will be created\n * @param set_userauth  if this true then auth info is also set\n *\n * @return 0 on success else -1\n */\nint32_t\nglusterd_volinfo_dup(glusterd_volinfo_t *volinfo,\n                     glusterd_volinfo_t **dup_volinfo,\n                     gf_boolean_t set_userauth)\n{\n    int32_t ret = -1;\n    xlator_t *this = NULL;\n    glusterd_volinfo_t *new_volinfo = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n    GF_VALIDATE_OR_GOTO(this->name, volinfo, out);\n    GF_VALIDATE_OR_GOTO(this->name, dup_volinfo, out);\n\n    ret = glusterd_volinfo_new(&new_volinfo);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_VOLINFO_SET_FAIL,\n               \"not able to create the \"\n               \"duplicate volinfo for the volume %s\",\n               volinfo->volname);\n        goto out;\n    }\n\n    new_volinfo->type = volinfo->type;\n    new_volinfo->replica_count = volinfo->replica_count;\n    new_volinfo->arbiter_count = volinfo->arbiter_count;\n    new_volinfo->stripe_count = volinfo->stripe_count;\n    new_volinfo->disperse_count = volinfo->disperse_count;\n    new_volinfo->redundancy_count = volinfo->redundancy_count;\n    new_volinfo->dist_leaf_count = volinfo->dist_leaf_count;\n    new_volinfo->sub_count = volinfo->sub_count;\n    new_volinfo->subvol_count = volinfo->subvol_count;\n    new_volinfo->transport_type = volinfo->transport_type;\n    new_volinfo->brick_count = volinfo->brick_count;\n    new_volinfo->quota_conf_version = volinfo->quota_conf_version;\n    new_volinfo->quota_xattr_version = volinfo->quota_xattr_version;\n    new_volinfo->snap_max_hard_limit = volinfo->snap_max_hard_limit;\n    new_volinfo->quota_conf_cksum = volinfo->quota_conf_cksum;\n\n    dict_copy(volinfo->dict, new_volinfo->dict);\n    dict_copy(volinfo->gsync_slaves, new_volinfo->gsync_slaves);\n    dict_copy(volinfo->gsync_active_slaves, new_volinfo->gsync_active_slaves);\n    gd_update_volume_op_versions(new_volinfo);\n\n    if (set_userauth) {\n        glusterd_auth_set_username(new_volinfo, volinfo->auth.username);\n        glusterd_auth_set_password(new_volinfo, volinfo->auth.password);\n    }\n\n    *dup_volinfo = new_volinfo;\n    ret = 0;\nout:\n    if (ret && (NULL != new_volinfo)) {\n        (void)glusterd_volinfo_delete(new_volinfo);\n    }\n    return ret;\n}\n\n/* This function will duplicate brickinfo\n *\n * @param brickinfo     Source brickinfo\n * @param dup_brickinfo Destination brickinfo\n *\n * @return 0 on success else -1\n */\nint32_t\nglusterd_brickinfo_dup(glusterd_brickinfo_t *brickinfo,\n                       glusterd_brickinfo_t *dup_brickinfo)\n{\n    int32_t ret = -1;\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    GF_VALIDATE_OR_GOTO(this->name, brickinfo, out);\n    GF_VALIDATE_OR_GOTO(this->name, dup_brickinfo, out);\n\n    strcpy(dup_brickinfo->hostname, brickinfo->hostname);\n    strcpy(dup_brickinfo->path, brickinfo->path);\n    strcpy(dup_brickinfo->real_path, brickinfo->real_path);\n    strcpy(dup_brickinfo->device_path, brickinfo->device_path);\n    strcpy(dup_brickinfo->fstype, brickinfo->fstype);\n    strcpy(dup_brickinfo->mnt_opts, brickinfo->mnt_opts);\n    ret = gf_canonicalize_path(dup_brickinfo->path);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_CANONICALIZE_FAIL,\n               \"Failed to canonicalize \"\n               \"brick path\");\n        goto out;\n    }\n    gf_uuid_copy(dup_brickinfo->uuid, brickinfo->uuid);\n\n    dup_brickinfo->port = brickinfo->port;\n    dup_brickinfo->rdma_port = brickinfo->rdma_port;\n    if (NULL != brickinfo->logfile) {\n        dup_brickinfo->logfile = gf_strdup(brickinfo->logfile);\n        if (NULL == dup_brickinfo->logfile) {\n            ret = -1;\n            goto out;\n        }\n    }\n    strcpy(dup_brickinfo->brick_id, brickinfo->brick_id);\n    strcpy(dup_brickinfo->mount_dir, brickinfo->mount_dir);\n    dup_brickinfo->status = brickinfo->status;\n    dup_brickinfo->snap_status = brickinfo->snap_status;\nout:\n    return ret;\n}\n\n/*\n * gd_vol_is_geo_rep_active:\n *      This function checks for any running geo-rep session for\n *      the volume given.\n *\n * Return Value:\n *      _gf_true : If any running geo-rep session.\n *      _gf_false: If no running geo-rep session.\n */\n\ngf_boolean_t\ngd_vol_is_geo_rep_active(glusterd_volinfo_t *volinfo)\n{\n    gf_boolean_t active = _gf_false;\n\n    GF_ASSERT(volinfo);\n\n    if (volinfo->gsync_active_slaves && volinfo->gsync_active_slaves->count > 0)\n        active = _gf_true;\n\n    return active;\n}\n\nvoid\nglusterd_auth_cleanup(glusterd_volinfo_t *volinfo)\n{\n    GF_ASSERT(volinfo);\n\n    GF_FREE(volinfo->auth.username);\n\n    GF_FREE(volinfo->auth.password);\n}\n\nchar *\nglusterd_auth_get_username(glusterd_volinfo_t *volinfo)\n{\n    GF_ASSERT(volinfo);\n\n    return volinfo->auth.username;\n}\n\nchar *\nglusterd_auth_get_password(glusterd_volinfo_t *volinfo)\n{\n    GF_ASSERT(volinfo);\n\n    return volinfo->auth.password;\n}\n\nint32_t\nglusterd_auth_set_username(glusterd_volinfo_t *volinfo, char *username)\n{\n    GF_ASSERT(volinfo);\n    GF_ASSERT(username);\n\n    volinfo->auth.username = gf_strdup(username);\n    return 0;\n}\n\nint32_t\nglusterd_auth_set_password(glusterd_volinfo_t *volinfo, char *password)\n{\n    GF_ASSERT(volinfo);\n    GF_ASSERT(password);\n\n    volinfo->auth.password = gf_strdup(password);\n    return 0;\n}\n\nint32_t\nglusterd_brickinfo_delete(glusterd_brickinfo_t *brickinfo)\n{\n    int32_t ret = -1;\n\n    GF_ASSERT(brickinfo);\n\n    cds_list_del_init(&brickinfo->brick_list);\n\n    (void)gf_store_handle_destroy(brickinfo->shandle);\n\n    GF_FREE(brickinfo->logfile);\n    GF_FREE(brickinfo);\n\n    ret = 0;\n\n    return ret;\n}\n\nint32_t\nglusterd_volume_brickinfos_delete(glusterd_volinfo_t *volinfo)\n{\n    glusterd_brickinfo_t *brickinfo = NULL;\n    glusterd_brickinfo_t *tmp = NULL;\n    int32_t ret = 0;\n\n    GF_ASSERT(volinfo);\n\n    cds_list_for_each_entry_safe(brickinfo, tmp, &volinfo->bricks, brick_list)\n    {\n        ret = glusterd_brickinfo_delete(brickinfo);\n        if (ret)\n            goto out;\n    }\n\nout:\n    gf_msg_debug(THIS->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_volinfo_remove(glusterd_volinfo_t *volinfo)\n{\n    cds_list_del_init(&volinfo->vol_list);\n    glusterd_volinfo_unref(volinfo);\n    return 0;\n}\n\nint32_t\nglusterd_volinfo_delete(glusterd_volinfo_t *volinfo)\n{\n    int32_t ret = -1;\n\n    GF_ASSERT(volinfo);\n\n    cds_list_del_init(&volinfo->vol_list);\n    cds_list_del_init(&volinfo->snapvol_list);\n\n    ret = glusterd_volume_brickinfos_delete(volinfo);\n    if (ret)\n        goto out;\n    if (volinfo->dict)\n        dict_unref(volinfo->dict);\n    if (volinfo->gsync_slaves)\n        dict_unref(volinfo->gsync_slaves);\n    if (volinfo->gsync_active_slaves)\n        dict_unref(volinfo->gsync_active_slaves);\n    GF_FREE(volinfo->logdir);\n    if (volinfo->rebal.dict)\n        dict_unref(volinfo->rebal.dict);\n\n    /* Destroy the connection object for per volume svc daemons */\n    glusterd_conn_term(&volinfo->snapd.svc.conn);\n    glusterd_conn_term(&volinfo->gfproxyd.svc.conn);\n\n    gf_store_handle_destroy(volinfo->quota_conf_shandle);\n    gf_store_handle_destroy(volinfo->shandle);\n    gf_store_handle_destroy(volinfo->node_state_shandle);\n    gf_store_handle_destroy(volinfo->snapd.handle);\n\n    glusterd_auth_cleanup(volinfo);\n    glusterd_shd_svcproc_cleanup(&volinfo->shd);\n\n    pthread_mutex_destroy(&volinfo->reflock);\n    GF_FREE(volinfo);\n    ret = 0;\nout:\n    gf_msg_debug(THIS->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_brickprocess_new(glusterd_brick_proc_t **brickprocess)\n{\n    glusterd_brick_proc_t *new_brickprocess = NULL;\n    int32_t ret = -1;\n\n    GF_VALIDATE_OR_GOTO(THIS->name, brickprocess, out);\n\n    new_brickprocess = GF_CALLOC(1, sizeof(*new_brickprocess),\n                                 gf_gld_mt_glusterd_brick_proc_t);\n\n    if (!new_brickprocess)\n        goto out;\n\n    CDS_INIT_LIST_HEAD(&new_brickprocess->bricks);\n    CDS_INIT_LIST_HEAD(&new_brickprocess->brick_proc_list);\n\n    new_brickprocess->brick_count = 0;\n    *brickprocess = new_brickprocess;\n\n    ret = 0;\n\nout:\n    gf_msg_debug(THIS->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_brickinfo_new(glusterd_brickinfo_t **brickinfo)\n{\n    glusterd_brickinfo_t *new_brickinfo = NULL;\n    int32_t ret = -1;\n\n    GF_ASSERT(brickinfo);\n\n    new_brickinfo = GF_CALLOC(1, sizeof(*new_brickinfo),\n                              gf_gld_mt_glusterd_brickinfo_t);\n\n    if (!new_brickinfo)\n        goto out;\n\n    CDS_INIT_LIST_HEAD(&new_brickinfo->brick_list);\n    CDS_INIT_LIST_HEAD(&new_brickinfo->mux_bricks);\n    pthread_mutex_init(&new_brickinfo->restart_mutex, NULL);\n    *brickinfo = new_brickinfo;\n\n    ret = 0;\n\nout:\n    gf_msg_debug(THIS->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_get_next_available_brickid(glusterd_volinfo_t *volinfo)\n{\n    glusterd_brickinfo_t *brickinfo = NULL;\n    char *token = NULL;\n    int brickid = 0;\n    int max_brickid = -1;\n    int ret = -1;\n\n    cds_list_for_each_entry(brickinfo, &volinfo->bricks, brick_list)\n    {\n        token = strrchr(brickinfo->brick_id, '-');\n        ret = gf_string2int32(++token, &brickid);\n        if (ret < 0) {\n            gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_BRICK_ID_GEN_FAILED,\n                   \"Unable to generate brick ID\");\n            return ret;\n        }\n        if (brickid > max_brickid)\n            max_brickid = brickid;\n    }\n\n    return max_brickid + 1;\n}\n\nint32_t\nglusterd_resolve_brick(glusterd_brickinfo_t *brickinfo)\n{\n    int32_t ret = -1;\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    GF_ASSERT(brickinfo);\n    if (!gf_uuid_compare(brickinfo->uuid, MY_UUID) ||\n        (glusterd_peerinfo_find_by_uuid(brickinfo->uuid) != NULL)) {\n        ret = 0;\n        goto out;\n    }\n\n    ret = glusterd_hostname_to_uuid(brickinfo->hostname, brickinfo->uuid);\n\nout:\n    gf_msg_debug(this->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_get_brick_mount_dir(char *brickpath, char *hostname, char *mount_dir)\n{\n    char *mnt_pt = NULL;\n    char *brick_dir = NULL;\n    int32_t ret = -1;\n    uuid_t brick_uuid = {\n        0,\n    };\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n    GF_ASSERT(brickpath);\n    GF_ASSERT(hostname);\n    GF_ASSERT(mount_dir);\n\n    ret = glusterd_hostname_to_uuid(hostname, brick_uuid);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_HOSTNAME_TO_UUID_FAIL,\n               \"Failed to convert hostname %s to uuid\", hostname);\n        goto out;\n    }\n\n    if (!gf_uuid_compare(brick_uuid, MY_UUID)) {\n        ret = glusterd_get_brick_root(brickpath, &mnt_pt);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_WARNING, 0,\n                   GD_MSG_BRICKPATH_ROOT_GET_FAIL,\n                   \"Could not get the root of the brick path %s\", brickpath);\n            goto out;\n        }\n\n        if (strncmp(brickpath, mnt_pt, strlen(mnt_pt))) {\n            gf_msg(this->name, GF_LOG_WARNING, 0,\n                   GD_MSG_BRKPATH_MNTPNT_MISMATCH, \"brick: %s brick mount: %s\",\n                   brickpath, mnt_pt);\n            ret = -1;\n            goto out;\n        }\n\n        brick_dir = &brickpath[strlen(mnt_pt)];\n        brick_dir++;\n\n        snprintf(mount_dir, VALID_GLUSTERD_PATHMAX, \"/%s\", brick_dir);\n    }\n\nout:\n    if (mnt_pt)\n        GF_FREE(mnt_pt);\n\n    gf_msg_trace(this->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_brickinfo_new_from_brick(char *brick, glusterd_brickinfo_t **brickinfo,\n                                  gf_boolean_t construct_real_path,\n                                  char **op_errstr)\n{\n    char *hostname = NULL;\n    char *path = NULL;\n    char *tmp_host = NULL;\n    char *tmp_path = NULL;\n    int32_t ret = -1;\n    glusterd_brickinfo_t *new_brickinfo = NULL;\n    xlator_t *this = NULL;\n    char abspath[PATH_MAX] = \"\";\n\n    this = THIS;\n    GF_ASSERT(this);\n    GF_ASSERT(brick);\n    GF_ASSERT(brickinfo);\n\n    tmp_host = gf_strdup(brick);\n    if (tmp_host && !get_host_name(tmp_host, &hostname))\n        goto out;\n    tmp_path = gf_strdup(brick);\n    if (tmp_path && !get_path_name(tmp_path, &path))\n        goto out;\n\n    GF_ASSERT(hostname);\n    GF_ASSERT(path);\n\n    ret = glusterd_brickinfo_new(&new_brickinfo);\n    if (ret)\n        goto out;\n\n    ret = gf_canonicalize_path(path);\n    if (ret)\n        goto out;\n    ret = snprintf(new_brickinfo->hostname, sizeof(new_brickinfo->hostname),\n                   \"%s\", hostname);\n    if (ret < 0 || ret >= sizeof(new_brickinfo->hostname)) {\n        ret = -1;\n        goto out;\n    }\n    ret = snprintf(new_brickinfo->path, sizeof(new_brickinfo->path), \"%s\",\n                   path);\n    if (ret < 0 || ret >= sizeof(new_brickinfo->path)) {\n        ret = -1;\n        goto out;\n    }\n\n    if (construct_real_path) {\n        ret = glusterd_hostname_to_uuid(new_brickinfo->hostname,\n                                        new_brickinfo->uuid);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_HOSTNAME_TO_UUID_FAIL,\n                   \"Failed to convert hostname %s to uuid\", hostname);\n            if (op_errstr)\n                gf_asprintf(op_errstr,\n                            \"Host %s is not in \"\n                            \"\\'Peer in Cluster\\' state\",\n                            new_brickinfo->hostname);\n            goto out;\n        }\n    }\n\n    if (construct_real_path && !gf_uuid_compare(new_brickinfo->uuid, MY_UUID) &&\n        new_brickinfo->real_path[0] == '\\0') {\n        if (!realpath(new_brickinfo->path, abspath)) {\n            /* ENOENT indicates that brick path has not been created\n             * which is a valid scenario */\n            if (errno != ENOENT) {\n                gf_msg(this->name, GF_LOG_CRITICAL, errno,\n                       GD_MSG_BRICKINFO_CREATE_FAIL,\n                       \"realpath\"\n                       \" () failed for brick %s. The \"\n                       \"underlying filesystem may be in bad \"\n                       \"state. Error - %s\",\n                       new_brickinfo->path, strerror(errno));\n                ret = -1;\n                goto out;\n            }\n        }\n        if (strlen(abspath) >= sizeof(new_brickinfo->real_path)) {\n            ret = -1;\n            goto out;\n        }\n        (void)strncpy(new_brickinfo->real_path, abspath,\n                      sizeof(new_brickinfo->real_path));\n    }\n\n    *brickinfo = new_brickinfo;\n\n    ret = 0;\nout:\n    GF_FREE(tmp_host);\n    if (tmp_host)\n        GF_FREE(tmp_path);\n\n    gf_msg_debug(this->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\nstatic gf_boolean_t\n_is_prefix(char *str1, char *str2)\n{\n    GF_ASSERT(str1);\n    GF_ASSERT(str2);\n\n    int i = 0;\n    int len1 = 0;\n    int len2 = 0;\n    int small_len = 0;\n    char *bigger = NULL;\n    gf_boolean_t prefix = _gf_true;\n\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    small_len = min(len1, len2);\n\n    /*\n     * If either one (not both) of the strings are 0-length, they are not\n     * prefixes of each other.\n     */\n    if ((small_len == 0) && (len1 != len2)) {\n        return _gf_false;\n    }\n\n    for (i = 0; i < small_len; i++) {\n        if (str1[i] != str2[i]) {\n            prefix = _gf_false;\n            break;\n        }\n    }\n\n    if (len1 < len2)\n        bigger = str2;\n\n    else if (len1 > len2)\n        bigger = str1;\n\n    else\n        return prefix;\n\n    if (bigger[small_len] != '/')\n        prefix = _gf_false;\n\n    return prefix;\n}\n\n/* Checks if @path is available in the peer identified by @uuid\n * 'availability' is determined by querying current state of volumes\n * in the cluster. */\ngf_boolean_t\nglusterd_is_brickpath_available(uuid_t uuid, char *path)\n{\n    glusterd_brickinfo_t *brickinfo = NULL;\n    glusterd_volinfo_t *volinfo = NULL;\n    glusterd_conf_t *priv = NULL;\n    gf_boolean_t available = _gf_false;\n    char tmp_path[PATH_MAX] = \"\";\n\n    priv = THIS->private;\n\n    if (snprintf(tmp_path, PATH_MAX, \"%s\", path) >= PATH_MAX)\n        goto out;\n    /* path may not yet exist */\n    if (!realpath(path, tmp_path)) {\n        if (errno != ENOENT) {\n            gf_msg(THIS->name, GF_LOG_CRITICAL, errno,\n                   GD_MSG_BRICKINFO_CREATE_FAIL,\n                   \"realpath\"\n                   \" () failed for brick %s. The \"\n                   \"underlying filesystem may be in bad \"\n                   \"state. Error - %s\",\n                   path, strerror(errno));\n            goto out;\n        }\n        /* When realpath(3) fails, tmp_path is undefined. */\n        (void)snprintf(tmp_path, sizeof(tmp_path), \"%s\", path);\n    }\n\n    cds_list_for_each_entry(volinfo, &priv->volumes, vol_list)\n    {\n        cds_list_for_each_entry(brickinfo, &volinfo->bricks, brick_list)\n        {\n            if (gf_uuid_compare(uuid, brickinfo->uuid))\n                continue;\n            if (_is_prefix(brickinfo->real_path, tmp_path)) {\n                gf_msg(THIS->name, GF_LOG_CRITICAL, 0,\n                       GD_MSG_BRICKINFO_CREATE_FAIL,\n                       \"_is_prefix call failed for brick %s \"\n                       \"against brick %s\",\n                       tmp_path, brickinfo->real_path);\n                goto out;\n            }\n        }\n    }\n    available = _gf_true;\nout:\n    return available;\n}\n\nint\nglusterd_validate_and_create_brickpath(glusterd_brickinfo_t *brickinfo,\n                                       uuid_t volume_id, char *volname,\n                                       char **op_errstr, gf_boolean_t is_force,\n                                       gf_boolean_t ignore_partition)\n{\n    int ret = -1;\n    char parentdir[PATH_MAX] = \"\";\n    struct stat parent_st = {\n        0,\n    };\n    struct stat brick_st = {\n        0,\n    };\n    struct stat root_st = {\n        0,\n    };\n    char msg[2048] = \"\";\n    gf_boolean_t is_created = _gf_false;\n    char glusterfs_dir_path[PATH_MAX] = \"\";\n    int32_t len = 0;\n\n    ret = sys_mkdir(brickinfo->path, 0777);\n    if (ret) {\n        if (errno != EEXIST) {\n            len = snprintf(msg, sizeof(msg),\n                           \"Failed to create \"\n                           \"brick directory for brick %s:%s. \"\n                           \"Reason : %s \",\n                           brickinfo->hostname, brickinfo->path,\n                           strerror(errno));\n            goto out;\n        }\n    } else {\n        is_created = _gf_true;\n    }\n\n    ret = sys_lstat(brickinfo->path, &brick_st);\n    if (ret) {\n        len = snprintf(msg, sizeof(msg),\n                       \"lstat failed on %s. \"\n                       \"Reason : %s\",\n                       brickinfo->path, strerror(errno));\n        goto out;\n    }\n\n    if ((!is_created) && (!S_ISDIR(brick_st.st_mode))) {\n        len = snprintf(msg, sizeof(msg),\n                       \"The provided path %s \"\n                       \"which is already present, is not a directory\",\n                       brickinfo->path);\n        ret = -1;\n        goto out;\n    }\n\n    len = snprintf(parentdir, sizeof(parentdir), \"%s/..\", brickinfo->path);\n    if ((len < 0) || (len >= sizeof(parentdir))) {\n        ret = -1;\n        goto out;\n    }\n\n    ret = sys_lstat(\"/\", &root_st);\n    if (ret) {\n        len = snprintf(msg, sizeof(msg),\n                       \"lstat failed on /. \"\n                       \"Reason : %s\",\n                       strerror(errno));\n        goto out;\n    }\n\n    ret = sys_lstat(parentdir, &parent_st);\n    if (ret) {\n        len = snprintf(msg, sizeof(msg),\n                       \"lstat failed on %s. \"\n                       \"Reason : %s\",\n                       parentdir, strerror(errno));\n        goto out;\n    }\n    if (strncmp(volname, GLUSTER_SHARED_STORAGE,\n                SLEN(GLUSTER_SHARED_STORAGE)) &&\n        sizeof(GLUSTERD_DEFAULT_WORKDIR) <= (strlen(brickinfo->path) + 1) &&\n        !strncmp(brickinfo->path, GLUSTERD_DEFAULT_WORKDIR,\n                 (sizeof(GLUSTERD_DEFAULT_WORKDIR) - 1))) {\n        len = snprintf(msg, sizeof(msg),\n                       \"Brick isn't allowed to be \"\n                       \"created inside glusterd's working directory.\");\n        ret = -1;\n        goto out;\n    }\n\n    if (!is_force) {\n        if (brick_st.st_dev != parent_st.st_dev) {\n            len = snprintf(msg, sizeof(msg),\n                           \"The brick %s:%s \"\n                           \"is a mount point. Please create a \"\n                           \"sub-directory under the mount point \"\n                           \"and use that as the brick directory. \"\n                           \"Or use 'force' at the end of the \"\n                           \"command if you want to override this \"\n                           \"behavior.\",\n                           brickinfo->hostname, brickinfo->path);\n            ret = -1;\n            goto out;\n        } else if (parent_st.st_dev == root_st.st_dev) {\n            len = snprintf(msg, sizeof(msg),\n                           \"The brick %s:%s \"\n                           \"is being created in the root \"\n                           \"partition. It is recommended that \"\n                           \"you don't use the system's root \"\n                           \"partition for storage backend. Or \"\n                           \"use 'force' at the end of the \"\n                           \"command if you want to override this \"\n                           \"behavior.\",\n                           brickinfo->hostname, brickinfo->path);\n\n            /* If --wignore-partition flag is used, ignore warnings\n             * related to bricks being on root partition when 'force'\n             * is not used */\n            if ((len < 0) || (len >= sizeof(msg)) || !ignore_partition) {\n                ret = -1;\n                goto out;\n            }\n        }\n    }\n\n    ret = glusterd_check_and_set_brick_xattr(\n        brickinfo->hostname, brickinfo->path, volume_id, op_errstr, is_force);\n    if (ret)\n        goto out;\n\n    /* create .glusterfs directory */\n    len = snprintf(glusterfs_dir_path, sizeof(glusterfs_dir_path), \"%s/%s\",\n                   brickinfo->path, \".glusterfs\");\n    if ((len < 0) || (len >= sizeof(glusterfs_dir_path))) {\n        ret = -1;\n        goto out;\n    }\n\n    ret = sys_mkdir(glusterfs_dir_path, 0600);\n    if (ret && (errno != EEXIST)) {\n        len = snprintf(msg, sizeof(msg),\n                       \"Failed to create \"\n                       \".glusterfs directory for brick %s:%s. \"\n                       \"Reason : %s \",\n                       brickinfo->hostname, brickinfo->path, strerror(errno));\n        goto out;\n    }\n\n    ret = 0;\n\nout:\n    if (len < 0) {\n        ret = -1;\n    }\n    if (ret && is_created) {\n        (void)recursive_rmdir(brickinfo->path);\n    }\n    if (ret && !*op_errstr && msg[0] != '\\0')\n        *op_errstr = gf_strdup(msg);\n\n    return ret;\n}\n\nint32_t\nglusterd_volume_brickinfo_get(uuid_t uuid, char *hostname, char *path,\n                              glusterd_volinfo_t *volinfo,\n                              glusterd_brickinfo_t **brickinfo)\n{\n    glusterd_brickinfo_t *brickiter = NULL;\n    uuid_t peer_uuid = {0};\n    int32_t ret = -1;\n    xlator_t *this = NULL;\n\n    this = THIS;\n\n    if (uuid) {\n        gf_uuid_copy(peer_uuid, uuid);\n    } else {\n        ret = glusterd_hostname_to_uuid(hostname, peer_uuid);\n        if (ret)\n            goto out;\n    }\n    ret = -1;\n    cds_list_for_each_entry(brickiter, &volinfo->bricks, brick_list)\n    {\n        if ((gf_uuid_is_null(brickiter->uuid)) &&\n            (glusterd_resolve_brick(brickiter) != 0))\n            goto out;\n        if (gf_uuid_compare(peer_uuid, brickiter->uuid))\n            continue;\n\n        if (strcmp(brickiter->path, path) == 0) {\n            gf_msg_debug(this->name, 0, LOGSTR_FOUND_BRICK, brickiter->hostname,\n                         brickiter->path, volinfo->volname);\n            ret = 0;\n            if (brickinfo)\n                *brickinfo = brickiter;\n            break;\n        }\n    }\n\nout:\n    gf_msg_debug(this->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_volume_ta_brickinfo_get(uuid_t uuid, char *hostname, char *path,\n                                 glusterd_volinfo_t *volinfo,\n                                 glusterd_brickinfo_t **ta_brickinfo)\n{\n    glusterd_brickinfo_t *ta_brickiter = NULL;\n    int32_t ret = -1;\n    xlator_t *this = NULL;\n\n    this = THIS;\n\n    ret = -1;\n\n    cds_list_for_each_entry(ta_brickiter, &volinfo->ta_bricks, brick_list)\n    {\n        if (strcmp(ta_brickiter->path, path) == 0 &&\n            strcmp(ta_brickiter->hostname, hostname) == 0) {\n            gf_msg_debug(this->name, 0, LOGSTR_FOUND_BRICK,\n                         ta_brickiter->hostname, ta_brickiter->path,\n                         volinfo->volname);\n            ret = 0;\n            if (ta_brickinfo)\n                *ta_brickinfo = ta_brickiter;\n            break;\n        }\n    }\n\n    gf_msg_debug(this->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_volume_brickinfo_get_by_brick(char *brick, glusterd_volinfo_t *volinfo,\n                                       glusterd_brickinfo_t **brickinfo,\n                                       gf_boolean_t construct_real_path)\n{\n    int32_t ret = -1;\n    glusterd_brickinfo_t *tmp_brickinfo = NULL;\n\n    GF_ASSERT(brick);\n    GF_ASSERT(volinfo);\n\n    ret = glusterd_brickinfo_new_from_brick(brick, &tmp_brickinfo,\n                                            construct_real_path, NULL);\n    if (ret)\n        goto out;\n\n    ret = glusterd_volume_brickinfo_get(\n        NULL, tmp_brickinfo->hostname, tmp_brickinfo->path, volinfo, brickinfo);\n    (void)glusterd_brickinfo_delete(tmp_brickinfo);\nout:\n    gf_msg_debug(\"glusterd\", 0, \"Returning %d\", ret);\n    return ret;\n}\n\ngf_boolean_t\nglusterd_is_brick_decommissioned(glusterd_volinfo_t *volinfo, char *hostname,\n                                 char *path)\n{\n    gf_boolean_t decommissioned = _gf_false;\n    glusterd_brickinfo_t *brickinfo = NULL;\n    int ret = -1;\n\n    ret = glusterd_volume_brickinfo_get(NULL, hostname, path, volinfo,\n                                        &brickinfo);\n    if (ret)\n        goto out;\n    decommissioned = brickinfo->decommissioned;\nout:\n    return decommissioned;\n}\n\nint\nglusterd_volinfo_find_by_volume_id(uuid_t volume_id,\n                                   glusterd_volinfo_t **volinfo)\n{\n    int32_t ret = -1;\n    xlator_t *this = NULL;\n    glusterd_volinfo_t *voliter = NULL;\n    glusterd_conf_t *priv = NULL;\n\n    if (!volume_id)\n        return -1;\n\n    this = THIS;\n    priv = this->private;\n\n    cds_list_for_each_entry(voliter, &priv->volumes, vol_list)\n    {\n        if (gf_uuid_compare(volume_id, voliter->volume_id))\n            continue;\n        *volinfo = voliter;\n        ret = 0;\n        gf_msg_debug(this->name, 0, \"Volume %s found\", voliter->volname);\n        break;\n    }\n    return ret;\n}\n\nint32_t\nglusterd_volinfo_find(const char *volname, glusterd_volinfo_t **volinfo)\n{\n    glusterd_volinfo_t *tmp_volinfo = NULL;\n    int32_t ret = -1;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n\n    GF_ASSERT(volname);\n    this = THIS;\n    GF_ASSERT(this);\n\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    cds_list_for_each_entry(tmp_volinfo, &priv->volumes, vol_list)\n    {\n        if (!strcmp(tmp_volinfo->volname, volname)) {\n            gf_msg_debug(this->name, 0, \"Volume %s found\", volname);\n            ret = 0;\n            *volinfo = tmp_volinfo;\n            break;\n        }\n    }\n\n    gf_msg_debug(this->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_service_stop(const char *service, char *pidfile, int sig,\n                      gf_boolean_t force_kill)\n{\n    int32_t ret = -1;\n    pid_t pid = -1;\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n    if (!gf_is_service_running(pidfile, &pid)) {\n        ret = 0;\n        gf_msg(this->name, GF_LOG_INFO, 0, GD_MSG_ALREADY_STOPPED,\n               \"%s already stopped\", service);\n        goto out;\n    }\n    gf_msg_debug(this->name, 0,\n                 \"Stopping gluster %s running in pid: \"\n                 \"%d\",\n                 service, pid);\n\n    ret = kill(pid, sig);\n    if (ret) {\n        switch (errno) {\n            case ESRCH:\n                gf_msg_debug(this->name, 0, \"%s is already stopped\", service);\n                ret = 0;\n                goto out;\n            default:\n                gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_SVC_KILL_FAIL,\n                       \"Unable to kill %s \"\n                       \"service, reason:%s\",\n                       service, strerror(errno));\n        }\n    }\n    if (!force_kill)\n        goto out;\n\n    sleep(1);\n    if (gf_is_service_running(pidfile, &pid)) {\n        ret = kill(pid, SIGKILL);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_PID_KILL_FAIL,\n                   \"Unable to kill pid:%d, \"\n                   \"reason:%s\",\n                   pid, strerror(errno));\n            goto out;\n        }\n    }\n\n    ret = 0;\nout:\n    return ret;\n}\n\nint32_t\nglusterd_service_stop_nolock(const char *service, char *pidfile, int sig,\n                             gf_boolean_t force_kill)\n{\n    int32_t ret = -1;\n    pid_t pid = -1;\n    xlator_t *this = NULL;\n    FILE *file = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    file = fopen(pidfile, \"r+\");\n    if (file) {\n        ret = fscanf(file, \"%d\", &pid);\n        if (ret <= 0) {\n            gf_msg_debug(this->name, 0, \"Unable to read pidfile: %s\", pidfile);\n            goto out;\n        }\n    }\n\n    if (kill(pid, 0) < 0) {\n        ret = 0;\n        gf_msg_debug(this->name, 0, \"%s process not running: (%d) %s\", service,\n                     pid, strerror(errno));\n        goto out;\n    }\n    gf_msg_debug(this->name, 0,\n                 \"Stopping gluster %s service running with \"\n                 \"pid: %d\",\n                 service, pid);\n\n    ret = kill(pid, sig);\n    if (ret) {\n        switch (errno) {\n            case ESRCH:\n                gf_msg_debug(this->name, 0, \"%s is already stopped\", service);\n                ret = 0;\n                goto out;\n            default:\n                gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_SVC_KILL_FAIL,\n                       \"Unable to kill %s \"\n                       \"service, reason:%s\",\n                       service, strerror(errno));\n        }\n    }\n    if (!force_kill)\n        goto out;\n\n    sleep(1);\n    if (kill(pid, 0) == 0) {\n        ret = kill(pid, SIGKILL);\n        if (ret) {\n            /* Process is already dead, don't fail */\n            if (errno == ESRCH) {\n                gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_PID_KILL_FAIL,\n                       \"Unable to find pid:%d, \"\n                       \"must be dead already. Ignoring.\",\n                       pid);\n            } else {\n                gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_PID_KILL_FAIL,\n                       \"Unable to kill pid:%d, \"\n                       \"reason:%s\",\n                       pid, strerror(errno));\n                goto out;\n            }\n        }\n    }\n\n    ret = 0;\n\nout:\n    if (file)\n        fclose(file);\n\n    return ret;\n}\nvoid\nglusterd_set_socket_filepath(char *sock_filepath, char *sockpath, size_t len)\n{\n    char xxh64[GF_XXH64_DIGEST_LENGTH * 2 + 1] = {\n        0,\n    };\n\n    gf_xxh64_wrapper((unsigned char *)sock_filepath, strlen(sock_filepath),\n                     GF_XXHSUM64_DEFAULT_SEED, xxh64);\n    snprintf(sockpath, len, \"%s/%s.socket\", GLUSTERD_SOCK_DIR, xxh64);\n}\n\nvoid\nglusterd_set_brick_socket_filepath(glusterd_volinfo_t *volinfo,\n                                   glusterd_brickinfo_t *brickinfo,\n                                   char *sockpath, size_t len)\n{\n    char volume_dir[PATH_MAX] = \"\";\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n    int expected_file_len = 0;\n    char export_path[PATH_MAX] = \"\";\n    char sock_filepath[PATH_MAX] = \"\";\n    int32_t slen = 0;\n\n    expected_file_len = SLEN(GLUSTERD_SOCK_DIR) + SLEN(\"/\") +\n                        SHA256_DIGEST_LENGTH * 2 + SLEN(\".socket\") + 1;\n    GF_ASSERT(len >= expected_file_len);\n    this = THIS;\n    GF_ASSERT(this);\n\n    priv = this->private;\n\n    GLUSTERD_GET_VOLUME_PID_DIR(volume_dir, volinfo, priv);\n    GLUSTERD_REMOVE_SLASH_FROM_PATH(brickinfo->path, export_path);\n    slen = snprintf(sock_filepath, PATH_MAX, \"%s/run/%s-%s\", volume_dir,\n                    brickinfo->hostname, export_path);\n    if (slen < 0) {\n        sock_filepath[0] = 0;\n    }\n    glusterd_set_socket_filepath(sock_filepath, sockpath, len);\n}\n\n/* connection happens only if it is not already connected,\n * reconnections are taken care by rpc-layer\n */\nint32_t\nglusterd_brick_connect(glusterd_volinfo_t *volinfo,\n                       glusterd_brickinfo_t *brickinfo, char *socketpath)\n{\n    int ret = 0;\n    char volume_id_str[64] = \"\";\n    char *brickid = NULL;\n    dict_t *options = NULL;\n    struct rpc_clnt *rpc = NULL;\n\n    GF_ASSERT(volinfo);\n    GF_ASSERT(brickinfo);\n    GF_ASSERT(socketpath);\n\n    if (brickinfo->rpc == NULL) {\n        /* Setting frame-timeout to 10mins (600seconds).\n         * Unix domain sockets ensures that the connection is reliable.\n         * The default timeout of 30mins used for unreliable network\n         * connections is too long for unix domain socket connections.\n         */\n        options = dict_new();\n        if (!options)\n            goto out;\n\n        ret = rpc_transport_unix_options_build(options, socketpath, 600);\n        if (ret)\n            goto out;\n\n        uuid_utoa_r(volinfo->volume_id, volume_id_str);\n        ret = gf_asprintf(&brickid, \"%s:%s:%s\", volume_id_str,\n                          brickinfo->hostname, brickinfo->path);\n        if (ret < 0)\n            goto out;\n\n        ret = glusterd_rpc_create(&rpc, options, glusterd_brick_rpc_notify,\n                                  brickid, _gf_false);\n        if (ret) {\n            GF_FREE(brickid);\n            goto out;\n        }\n        brickinfo->rpc = rpc;\n    }\nout:\n    if (options)\n        dict_unref(options);\n    gf_msg_debug(\"glusterd\", 0, \"Returning %d\", ret);\n    return ret;\n}\n\nstatic int\n_mk_rundir_p(glusterd_volinfo_t *volinfo)\n{\n    char rundir[PATH_MAX] = \"\";\n    glusterd_conf_t *priv = NULL;\n    xlator_t *this = NULL;\n    int ret = -1;\n\n    this = THIS;\n    priv = this->private;\n    GLUSTERD_GET_VOLUME_PID_DIR(rundir, volinfo, priv);\n    ret = mkdir_p(rundir, 0777, _gf_true);\n    if (ret)\n        gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_CREATE_DIR_FAILED,\n               \"Failed to create rundir\");\n    return ret;\n}\n\nint32_t\nglusterd_volume_start_glusterfs(glusterd_volinfo_t *volinfo,\n                                glusterd_brickinfo_t *brickinfo,\n                                gf_boolean_t wait)\n{\n    int32_t ret = -1;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n    char pidfile[PATH_MAX + 1] = \"\";\n    char volfile[PATH_MAX] = \"\";\n    runner_t runner = {\n        0,\n    };\n    char exp_path[PATH_MAX] = \"\";\n    char logfile[PATH_MAX] = \"\";\n    int port = 0;\n    int rdma_port = 0;\n    char *bind_address = NULL;\n    char *localtime_logging = NULL;\n    char socketpath[PATH_MAX] = \"\";\n    char glusterd_uuid[1024] = \"\";\n    char valgrind_logfile[PATH_MAX] = \"\";\n    char rdma_brick_path[PATH_MAX] = \"\";\n    struct rpc_clnt *rpc = NULL;\n    rpc_clnt_connection_t *conn = NULL;\n    int pid = -1;\n    int32_t len = 0;\n    glusterd_brick_proc_t *brick_proc = NULL;\n    char *inet_family = NULL;\n    char *global_threading = NULL;\n    bool threading = false;\n\n    GF_ASSERT(volinfo);\n    GF_ASSERT(brickinfo);\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    if (brickinfo->snap_status == -1) {\n        gf_msg(this->name, GF_LOG_INFO, 0, GD_MSG_SNAPSHOT_PENDING,\n               \"Snapshot is pending on %s:%s. \"\n               \"Hence not starting the brick\",\n               brickinfo->hostname, brickinfo->path);\n        ret = 0;\n        goto out;\n    }\n\n    GLUSTERD_GET_BRICK_PIDFILE(pidfile, volinfo, brickinfo, priv);\n    if (gf_is_service_running(pidfile, &pid)) {\n        goto connect;\n    }\n\n    /*\n     * There are all sorts of races in the start/stop code that could leave\n     * a UNIX-domain socket or RPC-client object associated with a\n     * long-dead incarnation of this brick, while the new incarnation is\n     * listening on a new socket at the same path and wondering why we\n     * haven't shown up.  To avoid the whole mess and be on the safe side,\n     * we just blow away anything that might have been left over, and start\n     * over again.\n     */\n    glusterd_set_brick_socket_filepath(volinfo, brickinfo, socketpath,\n                                       sizeof(socketpath));\n    (void)glusterd_unlink_file(socketpath);\n    rpc = brickinfo->rpc;\n    if (rpc) {\n        brickinfo->rpc = NULL;\n        conn = &rpc->conn;\n        pthread_mutex_lock(&conn->lock);\n        if (conn->reconnect) {\n            (void)gf_timer_call_cancel(rpc->ctx, conn->reconnect);\n            conn->reconnect = NULL;\n        }\n        pthread_mutex_unlock(&conn->lock);\n        rpc_clnt_unref(rpc);\n    }\n\n    port = pmap_assign_port(THIS, brickinfo->port, brickinfo->path);\n    if (!port) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_PORTS_EXHAUSTED,\n               \"All the ports in the range are exhausted, can't start \"\n               \"brick %s for volume %s\",\n               brickinfo->path, volinfo->volname);\n        ret = -1;\n        goto out;\n    }\n    /* Build the exp_path, before starting the glusterfsd even in\n       valgrind mode. Otherwise all the glusterfsd processes start\n       writing the valgrind log to the same file.\n    */\n    GLUSTERD_REMOVE_SLASH_FROM_PATH(brickinfo->path, exp_path);\n\nretry:\n    runinit(&runner);\n\n    if (this->ctx->cmd_args.valgrind) {\n        /* Run bricks with valgrind */\n        if (volinfo->logdir) {\n            len = snprintf(valgrind_logfile, PATH_MAX, \"%s/valgrind-%s-%s.log\",\n                           volinfo->logdir, volinfo->volname, exp_path);\n        } else {\n            len = snprintf(\n                valgrind_logfile, PATH_MAX, \"%s/bricks/valgrind-%s-%s.log\",\n                DEFAULT_LOG_FILE_DIRECTORY, volinfo->volname, exp_path);\n        }\n        if ((len < 0) || (len >= PATH_MAX)) {\n            ret = -1;\n            goto out;\n        }\n\n        runner_add_args(&runner, \"valgrind\", \"--leak-check=full\",\n                        \"--trace-children=yes\", \"--track-origins=yes\", NULL);\n        runner_argprintf(&runner, \"--log-file=%s\", valgrind_logfile);\n    }\n\n    if (volinfo->is_snap_volume) {\n        len = snprintf(volfile, PATH_MAX, \"/%s/%s/%s/%s.%s.%s\",\n                       GLUSTERD_VOL_SNAP_DIR_PREFIX,\n                       volinfo->snapshot->snapname, volinfo->volname,\n                       volinfo->volname, brickinfo->hostname, exp_path);\n    } else {\n        len = snprintf(volfile, PATH_MAX, \"%s.%s.%s\", volinfo->volname,\n                       brickinfo->hostname, exp_path);\n    }\n    if ((len < 0) || (len >= PATH_MAX)) {\n        ret = -1;\n        goto out;\n    }\n\n    if (volinfo->logdir) {\n        len = snprintf(logfile, PATH_MAX, \"%s/%s.log\", volinfo->logdir,\n                       exp_path);\n    } else {\n        len = snprintf(logfile, PATH_MAX, \"%s/bricks/%s.log\",\n                       DEFAULT_LOG_FILE_DIRECTORY, exp_path);\n    }\n    if ((len < 0) || (len >= PATH_MAX)) {\n        ret = -1;\n        goto out;\n    }\n\n    if (!brickinfo->logfile)\n        brickinfo->logfile = gf_strdup(logfile);\n\n    (void)snprintf(glusterd_uuid, 1024, \"*-posix.glusterd-uuid=%s\",\n                   uuid_utoa(MY_UUID));\n    runner_add_args(&runner, SBIN_DIR \"/glusterfsd\", \"-s\", brickinfo->hostname,\n                    \"--volfile-id\", volfile, \"-p\", pidfile, \"-S\", socketpath,\n                    \"--brick-name\", brickinfo->path, \"-l\", brickinfo->logfile,\n                    \"--xlator-option\", glusterd_uuid, \"--process-name\", \"brick\",\n                    NULL);\n\n    if (dict_get_strn(priv->opts, GLUSTERD_LOCALTIME_LOGGING_KEY,\n                      SLEN(GLUSTERD_LOCALTIME_LOGGING_KEY),\n                      &localtime_logging) == 0) {\n        if (strcmp(localtime_logging, \"enable\") == 0)\n            runner_add_arg(&runner, \"--localtime-logging\");\n    }\n\n    runner_add_arg(&runner, \"--brick-port\");\n    if (volinfo->transport_type != GF_TRANSPORT_BOTH_TCP_RDMA) {\n        runner_argprintf(&runner, \"%d\", port);\n    } else {\n        len = snprintf(rdma_brick_path, sizeof(rdma_brick_path), \"%s.rdma\",\n                       brickinfo->path);\n        if ((len < 0) || (len >= sizeof(rdma_brick_path))) {\n            ret = -1;\n            goto out;\n        }\n        rdma_port = pmap_assign_port(THIS, brickinfo->rdma_port,\n                                     rdma_brick_path);\n        if (!rdma_port) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_PORTS_EXHAUSTED,\n                   \"All rdma ports in the \"\n                   \"range are exhausted, can't start brick %s for \"\n                   \"volume %s\",\n                   rdma_brick_path, volinfo->volname);\n            ret = -1;\n            goto out;\n        }\n        runner_argprintf(&runner, \"%d,%d\", port, rdma_port);\n        runner_add_arg(&runner, \"--xlator-option\");\n        runner_argprintf(&runner, \"%s-server.transport.rdma.listen-port=%d\",\n                         volinfo->volname, rdma_port);\n    }\n\n    if (dict_get_strn(volinfo->dict, VKEY_CONFIG_GLOBAL_THREADING,\n                      SLEN(VKEY_CONFIG_GLOBAL_THREADING),\n                      &global_threading) == 0) {\n        if ((gf_string2boolean(global_threading, &threading) == 0) &&\n            threading) {\n            runner_add_arg(&runner, \"--global-threading\");\n        }\n    }\n\n    runner_add_arg(&runner, \"--xlator-option\");\n    runner_argprintf(&runner, \"%s-server.listen-port=%d\", volinfo->volname,\n                     port);\n\n    if (dict_get_strn(this->options, \"transport.socket.bind-address\",\n                      SLEN(\"transport.socket.bind-address\"),\n                      &bind_address) == 0) {\n        runner_add_arg(&runner, \"--xlator-option\");\n        runner_argprintf(&runner, \"transport.socket.bind-address=%s\",\n                         bind_address);\n    }\n\n    if (volinfo->transport_type == GF_TRANSPORT_RDMA)\n        runner_argprintf(&runner, \"--volfile-server-transport=rdma\");\n    else if (volinfo->transport_type == GF_TRANSPORT_BOTH_TCP_RDMA)\n        runner_argprintf(&runner, \"--volfile-server-transport=socket,rdma\");\n\n    ret = dict_get_str(this->options, \"transport.address-family\", &inet_family);\n    if (!ret) {\n        runner_add_arg(&runner, \"--xlator-option\");\n        runner_argprintf(&runner, \"transport.address-family=%s\", inet_family);\n    }\n\n    if (volinfo->memory_accounting)\n        runner_add_arg(&runner, \"--mem-accounting\");\n\n    if (is_brick_mx_enabled())\n        runner_add_arg(&runner, \"--brick-mux\");\n\n    runner_log(&runner, \"\", 0, \"Starting GlusterFS\");\n\n    brickinfo->port = port;\n    brickinfo->rdma_port = rdma_port;\n    brickinfo->status = GF_BRICK_STARTING;\n    brickinfo->port_registered = _gf_false;\n\n    if (wait) {\n        synclock_unlock(&priv->big_lock);\n        ret = runner_run(&runner);\n        synclock_lock(&priv->big_lock);\n\n        if (ret == EADDRINUSE) {\n            /* retry after getting a new port */\n            gf_msg(this->name, GF_LOG_WARNING, -ret,\n                   GD_MSG_SRC_BRICK_PORT_UNAVAIL,\n                   \"Port %d is used by other process\", port);\n\n            port = pmap_registry_alloc(this);\n            if (!port) {\n                gf_msg(this->name, GF_LOG_CRITICAL, 0, GD_MSG_NO_FREE_PORTS,\n                       \"Couldn't allocate a port\");\n                ret = -1;\n                goto out;\n            }\n            gf_msg(this->name, GF_LOG_NOTICE, 0, GD_MSG_RETRY_WITH_NEW_PORT,\n                   \"Retrying to start brick %s with new port %d\",\n                   brickinfo->path, port);\n            goto retry;\n        }\n    } else {\n        ret = runner_run_nowait(&runner);\n    }\n\n    if (ret) {\n        brickinfo->port = 0;\n        brickinfo->rdma_port = 0;\n        goto out;\n    }\n\n    ret = glusterd_brickprocess_new(&brick_proc);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_BRICKPROC_NEW_FAILED,\n               \"Failed to create \"\n               \"new brick process instance\");\n        goto out;\n    }\n\n    brick_proc->port = brickinfo->port;\n    cds_list_add_tail(&brick_proc->brick_proc_list, &priv->brick_procs);\n    brickinfo->brick_proc = brick_proc;\n    cds_list_add_tail(&brickinfo->mux_bricks, &brick_proc->bricks);\n    brickinfo->brick_proc = brick_proc;\n    brick_proc->brick_count++;\n\nconnect:\n    ret = glusterd_brick_connect(volinfo, brickinfo, socketpath);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_BRICK_DISCONNECTED,\n               \"Failed to connect to brick %s:%s on %s\", brickinfo->hostname,\n               brickinfo->path, socketpath);\n        goto out;\n    }\n\nout:\n    if (ret)\n        brickinfo->status = GF_BRICK_STOPPED;\n    return ret;\n}\n\nint32_t\nglusterd_brick_unlink_socket_file(glusterd_volinfo_t *volinfo,\n                                  glusterd_brickinfo_t *brickinfo)\n{\n    char path[PATH_MAX] = \"\";\n    char socketpath[PATH_MAX] = \"\";\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n\n    GF_ASSERT(volinfo);\n    GF_ASSERT(brickinfo);\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    priv = this->private;\n    GLUSTERD_GET_VOLUME_DIR(path, volinfo, priv);\n    glusterd_set_brick_socket_filepath(volinfo, brickinfo, socketpath,\n                                       sizeof(socketpath));\n\n    return glusterd_unlink_file(socketpath);\n}\n\nint32_t\nglusterd_brick_disconnect(glusterd_brickinfo_t *brickinfo)\n{\n    rpc_clnt_t *rpc = NULL;\n    glusterd_conf_t *priv = THIS->private;\n\n    GF_ASSERT(brickinfo);\n\n    if (!brickinfo) {\n        gf_msg_callingfn(\"glusterd\", GF_LOG_WARNING, EINVAL,\n                         GD_MSG_BRICK_NOT_FOUND, \"!brickinfo\");\n        return -1;\n    }\n\n    rpc = brickinfo->rpc;\n    brickinfo->rpc = NULL;\n\n    if (rpc) {\n        glusterd_rpc_clnt_unref(priv, rpc);\n    }\n\n    return 0;\n}\n\nstatic gf_boolean_t\nunsafe_option(dict_t *this, char *key, data_t *value, void *arg)\n{\n    /*\n     * Certain options are safe because they're already being handled other\n     * ways, such as being copied down to the bricks (all auth options) or\n     * being made irrelevant (event-threads).  All others are suspect and\n     * must be checked in the next function.\n     */\n    if (fnmatch(\"*auth*\", key, 0) == 0) {\n        return _gf_false;\n    }\n\n    if (fnmatch(\"*event-threads\", key, 0) == 0) {\n        return _gf_false;\n    }\n\n    if (fnmatch(\"*diagnostics.brick-log*\", key, 0) == 0) {\n        return _gf_false;\n    }\n\n    if (fnmatch(\"*diagnostics.client-log*\", key, 0) == 0) {\n        return _gf_false;\n    }\n\n    return _gf_true;\n}\n\nstatic int\nopts_mismatch(dict_t *dict1, char *key, data_t *value1, void *dict2)\n{\n    data_t *value2 = dict_get(dict2, key);\n    int32_t min_len;\n\n    /*\n     * If the option is only present on one, we can either look at the\n     * default or assume a mismatch.  Looking at the default is pretty\n     * hard, because that's part of a structure within each translator and\n     * there's no dlopen interface to get at it, so we assume a mismatch.\n     * If the user really wants them to match (and for their bricks to be\n     * multiplexed, they can always reset the option).\n     */\n    if (!value2) {\n        gf_log(THIS->name, GF_LOG_DEBUG, \"missing option %s\", key);\n        return -1;\n    }\n\n    min_len = MIN(value1->len, value2->len);\n    if (strncmp(value1->data, value2->data, min_len) != 0) {\n        gf_log(THIS->name, GF_LOG_DEBUG, \"option mismatch, %s, %s != %s\", key,\n               value1->data, value2->data);\n        return -1;\n    }\n\n    return 0;\n}\n\nint\nglusterd_brickprocess_delete(glusterd_brick_proc_t *brick_proc)\n{\n    cds_list_del_init(&brick_proc->brick_proc_list);\n    cds_list_del_init(&brick_proc->bricks);\n\n    GF_FREE(brick_proc);\n\n    return 0;\n}\n\nint\nglusterd_brick_process_remove_brick(glusterd_brickinfo_t *brickinfo,\n                                    int *last_brick)\n{\n    int ret = -1;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n    glusterd_brick_proc_t *brick_proc = NULL;\n\n    this = THIS;\n    GF_VALIDATE_OR_GOTO(\"glusterd\", this, out);\n\n    priv = this->private;\n    GF_VALIDATE_OR_GOTO(this->name, priv, out);\n    GF_VALIDATE_OR_GOTO(this->name, brickinfo, out);\n\n    brick_proc = brickinfo->brick_proc;\n    if (!brick_proc) {\n        if (brickinfo->status != GF_BRICK_STARTED) {\n            /* this function will be called from gluster_pmap_signout and\n             * glusterd_volume_stop_glusterfs. So it is possible to have\n             * brick_proc set as null.\n             */\n            ret = 0;\n        }\n        goto out;\n    }\n\n    GF_VALIDATE_OR_GOTO(this->name, (brick_proc->brick_count > 0), out);\n\n    cds_list_del_init(&brickinfo->mux_bricks);\n    brick_proc->brick_count--;\n\n    /* If all bricks have been removed, delete the brick process */\n    if (brick_proc->brick_count == 0) {\n        if (last_brick != NULL)\n            *last_brick = 1;\n        ret = glusterd_brickprocess_delete(brick_proc);\n        if (ret)\n            goto out;\n    }\n    brickinfo->brick_proc = NULL;\n    ret = 0;\nout:\n    return ret;\n}\n\nint\nglusterd_brick_process_add_brick(glusterd_brickinfo_t *brickinfo,\n                                 glusterd_brickinfo_t *parent_brickinfo)\n{\n    int ret = -1;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n    glusterd_brick_proc_t *brick_proc = NULL;\n\n    this = THIS;\n    GF_VALIDATE_OR_GOTO(\"glusterd\", this, out);\n\n    priv = this->private;\n    GF_VALIDATE_OR_GOTO(this->name, priv, out);\n    GF_VALIDATE_OR_GOTO(this->name, brickinfo, out);\n\n    if (!parent_brickinfo) {\n        ret = glusterd_brick_proc_for_port(brickinfo->port, &brick_proc);\n        if (ret) {\n            ret = glusterd_brickprocess_new(&brick_proc);\n            if (ret) {\n                gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_BRICKPROC_NEW_FAILED,\n                       \"Failed to create \"\n                       \"new brick process instance\");\n                goto out;\n            }\n\n            brick_proc->port = brickinfo->port;\n\n            cds_list_add_tail(&brick_proc->brick_proc_list, &priv->brick_procs);\n        }\n    } else {\n        ret = 0;\n        brick_proc = parent_brickinfo->brick_proc;\n    }\n\n    cds_list_add_tail(&brickinfo->mux_bricks, &brick_proc->bricks);\n    brickinfo->brick_proc = brick_proc;\n    brick_proc->brick_count++;\nout:\n    return ret;\n}\n\n/* ret = 0 only when you get a brick process associated with the port\n * ret = -1 otherwise\n */\nint\nglusterd_brick_proc_for_port(int port, glusterd_brick_proc_t **brickprocess)\n{\n    int ret = -1;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n    glusterd_brick_proc_t *brick_proc = NULL;\n\n    this = THIS;\n    GF_VALIDATE_OR_GOTO(\"glusterd\", this, out);\n\n    priv = this->private;\n    GF_VALIDATE_OR_GOTO(this->name, priv, out);\n\n    cds_list_for_each_entry(brick_proc, &priv->brick_procs, brick_proc_list)\n    {\n        if (brick_proc->port == port) {\n            *brickprocess = brick_proc;\n            ret = 0;\n            break;\n        }\n    }\nout:\n    return ret;\n}\n\nint32_t\nglusterd_volume_stop_glusterfs(glusterd_volinfo_t *volinfo,\n                               glusterd_brickinfo_t *brickinfo,\n                               gf_boolean_t del_brick)\n{\n    xlator_t *this = NULL;\n    glusterd_conf_t *conf = NULL;\n    int ret = -1;\n    char *op_errstr = NULL;\n    char pidfile[PATH_MAX] = \"\";\n    int last_brick = -1;\n\n    GF_ASSERT(volinfo);\n    GF_ASSERT(brickinfo);\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    conf = this->private;\n    GF_VALIDATE_OR_GOTO(this->name, conf, out);\n\n    ret = glusterd_brick_process_remove_brick(brickinfo, &last_brick);\n    if (ret) {\n        gf_msg_debug(this->name, 0,\n                     \"Couldn't remove brick from\"\n                     \" brick process\");\n        goto out;\n    }\n\n    if (del_brick)\n        cds_list_del_init(&brickinfo->brick_list);\n\n    if (GLUSTERD_STATUS_STARTED == volinfo->status) {\n        /*\n         * In a post-multiplexing world, even if we're not actually\n         * doing any multiplexing, just dropping the RPC connection\n         * isn't enough.  There might be many such connections during\n         * the brick daemon's lifetime, even if we only consider the\n         * management RPC port (because tests etc. might be manually\n         * attaching and detaching bricks).  Therefore, we have to send\n         * an actual signal instead.\n         */\n        if (is_brick_mx_enabled() && last_brick != 1) {\n            ret = send_attach_req(this, brickinfo->rpc, brickinfo->path, NULL,\n                                  NULL, GLUSTERD_BRICK_TERMINATE);\n            if (ret && brickinfo->status == GF_BRICK_STARTED) {\n                gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_BRICK_STOP_FAIL,\n                       \"Failed to send\"\n                       \" detach request for brick %s\",\n                       brickinfo->path);\n                goto out;\n            }\n            gf_log(this->name, GF_LOG_INFO,\n                   \"Detach request for \"\n                   \"brick %s:%s is sent successfully\",\n                   brickinfo->hostname, brickinfo->path);\n\n        } else {\n            gf_msg_debug(this->name, 0,\n                         \"About to stop glusterfsd\"\n                         \" for brick %s:%s\",\n                         brickinfo->hostname, brickinfo->path);\n            ret = glusterd_brick_terminate(volinfo, brickinfo, NULL, 0,\n                                           &op_errstr);\n            if (ret && brickinfo->status == GF_BRICK_STARTED) {\n                gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_BRICK_STOP_FAIL,\n                       \"Failed to kill\"\n                       \" the brick %s\",\n                       brickinfo->path);\n                goto out;\n            }\n\n            if (op_errstr) {\n                GF_FREE(op_errstr);\n            }\n            if (is_brick_mx_enabled()) {\n                /* In case of brick multiplexing we need to make\n                 * sure the port is cleaned up from here as the\n                 * RPC connection may not have been originated\n                 * for the same brick instance\n                 */\n                pmap_registry_remove(THIS, brickinfo->port, brickinfo->path,\n                                     GF_PMAP_PORT_BRICKSERVER, NULL, _gf_true);\n            }\n        }\n\n        (void)glusterd_brick_disconnect(brickinfo);\n        ret = 0;\n    }\n\n    GLUSTERD_GET_BRICK_PIDFILE(pidfile, volinfo, brickinfo, conf);\n    gf_msg_debug(this->name, 0, \"Unlinking pidfile %s\", pidfile);\n    (void)sys_unlink(pidfile);\n\n    brickinfo->status = GF_BRICK_STOPPED;\n    brickinfo->start_triggered = _gf_false;\n    brickinfo->brick_proc = NULL;\n    if (del_brick)\n        glusterd_delete_brick(volinfo, brickinfo);\nout:\n    return ret;\n}\n\n/* Free LINE[0..N-1] and then the LINE buffer.  */\nstatic void\nfree_lines(char **line, size_t n)\n{\n    size_t i;\n    for (i = 0; i < n; i++)\n        GF_FREE(line[i]);\n    GF_FREE(line);\n}\n\nstatic char **\nglusterd_readin_file(const char *filepath, int *line_count)\n{\n    int ret = -1;\n    int n = 8;\n    int counter = 0;\n    char buffer[PATH_MAX + 256] = \"\";\n    char **lines = NULL;\n    FILE *fp = NULL;\n    void *p;\n\n    fp = fopen(filepath, \"r\");\n    if (!fp)\n        goto out;\n\n    lines = GF_CALLOC(1, n * sizeof(*lines), gf_gld_mt_charptr);\n    if (!lines)\n        goto out;\n\n    for (counter = 0; fgets(buffer, sizeof(buffer), fp); counter++) {\n        if (counter == n - 1) {\n            n *= 2;\n            p = GF_REALLOC(lines, n * sizeof(char *));\n            if (!p) {\n                free_lines(lines, n / 2);\n                lines = NULL;\n                goto out;\n            }\n            lines = p;\n        }\n\n        lines[counter] = gf_strdup(buffer);\n    }\n\n    lines[counter] = NULL;\n    /* Reduce allocation to minimal size.  */\n    p = GF_REALLOC(lines, (counter + 1) * sizeof(char *));\n    if (!p) {\n        /* coverity[TAINTED_SCALAR] */\n        free_lines(lines, counter);\n        lines = NULL;\n        goto out;\n    }\n    lines = p;\n\n    *line_count = counter;\n    ret = 0;\n\nout:\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_ERROR, errno, GD_MSG_READIN_FILE_FAILED, \"%s\",\n               strerror(errno));\n    if (fp)\n        fclose(fp);\n\n    return lines;\n}\n\nint\nglusterd_compare_lines(const void *a, const void *b)\n{\n    return strcmp(*(char *const *)a, *(char *const *)b);\n}\n\nstatic int\nglusterd_sort_and_redirect(const char *src_filepath, int dest_fd)\n{\n    int ret = -1;\n    int line_count = 0;\n    int counter = 0;\n    char **lines = NULL;\n\n    if (!src_filepath || dest_fd < 0)\n        goto out;\n\n    lines = glusterd_readin_file(src_filepath, &line_count);\n    if (!lines)\n        goto out;\n\n    qsort(lines, line_count, sizeof(*lines), glusterd_compare_lines);\n\n    for (counter = 0; lines[counter]; counter++) {\n        ret = sys_write(dest_fd, lines[counter], strlen(lines[counter]));\n        if (ret < 0)\n            goto out;\n\n        GF_FREE(lines[counter]);\n    }\n\n    ret = 0;\nout:\n    GF_FREE(lines);\n\n    return ret;\n}\n\nstatic int\nglusterd_volume_compute_cksum(glusterd_volinfo_t *volinfo, char *cksum_path,\n                              char *filepath, gf_boolean_t is_quota_conf,\n                              uint32_t *cs)\n{\n    int32_t ret = -1;\n    uint32_t cksum = 0;\n    int fd = -1;\n    int sort_fd = 0;\n    char sort_filepath[PATH_MAX] = \"\";\n    char buf[32];\n    gf_boolean_t unlink_sortfile = _gf_false;\n    glusterd_conf_t *priv = THIS->private;\n    xlator_t *this = THIS;\n    mode_t orig_umask = 0;\n\n    GF_ASSERT(volinfo);\n    GF_ASSERT(priv);\n\n    fd = open(cksum_path, O_RDWR | O_APPEND | O_CREAT | O_TRUNC, 0600);\n    if (-1 == fd) {\n        gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n               \"Unable to open %s,\"\n               \" errno: %d\",\n               cksum_path, errno);\n        ret = -1;\n        goto out;\n    }\n\n    if (!is_quota_conf) {\n        snprintf(sort_filepath, sizeof(sort_filepath), \"/tmp/%s.XXXXXX\",\n                 volinfo->volname);\n\n        orig_umask = umask(S_IRWXG | S_IRWXO);\n        sort_fd = mkstemp(sort_filepath);\n        umask(orig_umask);\n        if (-1 == sort_fd) {\n            gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n                   \"Could not generate \"\n                   \"temp file, reason: %s for volume: %s\",\n                   strerror(errno), volinfo->volname);\n            goto out;\n        } else {\n            unlink_sortfile = _gf_true;\n        }\n\n        /* sort the info file, result in sort_filepath */\n\n        ret = glusterd_sort_and_redirect(filepath, sort_fd);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_FILE_OP_FAILED,\n                   \"sorting info file \"\n                   \"failed\");\n            goto out;\n        }\n\n        ret = sys_close(sort_fd);\n        if (ret)\n            goto out;\n\n        ret = get_checksum_for_path(sort_filepath, &cksum, priv->op_version);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_CKSUM_GET_FAIL,\n                   \"unable to get \"\n                   \"checksum for path: %s\",\n                   sort_filepath);\n            goto out;\n        }\n\n        ret = snprintf(buf, sizeof(buf), \"info=%u\\n\", cksum);\n        ret = sys_write(fd, buf, ret);\n        if (ret <= 0) {\n            ret = -1;\n            goto out;\n        }\n    }\n\n    ret = get_checksum_for_file(fd, &cksum, priv->op_version);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_CKSUM_GET_FAIL,\n               \"unable to get checksum for path: %s\", filepath);\n        goto out;\n    }\n\n    *cs = cksum;\n\nout:\n    if (fd != -1)\n        sys_close(fd);\n    if (unlink_sortfile)\n        sys_unlink(sort_filepath);\n    gf_msg_debug(this->name, 0, \"Returning with %d\", ret);\n\n    return ret;\n}\n\nint\nglusterd_compute_cksum(glusterd_volinfo_t *volinfo, gf_boolean_t is_quota_conf)\n{\n    int ret = -1;\n    uint32_t cs = 0;\n    char cksum_path[PATH_MAX] = \"\";\n    char path[PATH_MAX] = \"\";\n    char filepath[PATH_MAX] = \"\";\n    glusterd_conf_t *conf = NULL;\n    xlator_t *this = NULL;\n    int32_t len1 = 0;\n    int32_t len2 = 0;\n\n    this = THIS;\n    GF_ASSERT(this);\n    conf = this->private;\n    GF_ASSERT(conf);\n\n    GLUSTERD_GET_VOLUME_DIR(path, volinfo, conf);\n\n    if (is_quota_conf) {\n        len1 = snprintf(cksum_path, sizeof(cksum_path), \"%s/%s\", path,\n                        GLUSTERD_VOL_QUOTA_CKSUM_FILE);\n        len2 = snprintf(filepath, sizeof(filepath), \"%s/%s\", path,\n                        GLUSTERD_VOLUME_QUOTA_CONFIG);\n    } else {\n        len1 = snprintf(cksum_path, sizeof(cksum_path), \"%s/%s\", path,\n                        GLUSTERD_CKSUM_FILE);\n        len2 = snprintf(filepath, sizeof(filepath), \"%s/%s\", path,\n                        GLUSTERD_VOLUME_INFO_FILE);\n    }\n    if ((len1 < 0) || (len2 < 0) || (len1 >= sizeof(cksum_path)) ||\n        (len2 >= sizeof(filepath))) {\n        goto out;\n    }\n\n    ret = glusterd_volume_compute_cksum(volinfo, cksum_path, filepath,\n                                        is_quota_conf, &cs);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_CKSUM_COMPUTE_FAIL,\n               \"Failed to compute checksum \"\n               \"for volume %s\",\n               volinfo->volname);\n        goto out;\n    }\n\n    if (is_quota_conf)\n        volinfo->quota_conf_cksum = cs;\n    else\n        volinfo->cksum = cs;\n\n    ret = 0;\nout:\n    return ret;\n}\n\nstatic int\n_add_dict_to_prdict(dict_t *this, char *key, data_t *value, void *data)\n{\n    glusterd_dict_ctx_t *ctx = data;\n    char optkey[64]; /* optkey are usually quite small */\n    int ret = -1;\n\n    ret = snprintf(optkey, sizeof(optkey), \"%s.%s%d\", ctx->prefix,\n                   ctx->key_name, ctx->opt_count);\n    if (ret < 0 || ret >= sizeof(optkey))\n        return -1;\n    ret = dict_set_strn(ctx->dict, optkey, ret, key);\n    if (ret)\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"option add for %s%d %s\", ctx->key_name, ctx->opt_count, key);\n    ret = snprintf(optkey, sizeof(optkey), \"%s.%s%d\", ctx->prefix,\n                   ctx->val_name, ctx->opt_count);\n    if (ret < 0 || ret >= sizeof(optkey))\n        return -1;\n    ret = dict_set_strn(ctx->dict, optkey, ret, value->data);\n    if (ret)\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"option add for %s%d %s\", ctx->val_name, ctx->opt_count,\n               value->data);\n    ctx->opt_count++;\n\n    return ret;\n}\n\nint32_t\nglusterd_add_bricks_hname_path_to_dict(dict_t *dict,\n                                       glusterd_volinfo_t *volinfo)\n{\n    glusterd_brickinfo_t *brickinfo = NULL;\n    int ret = 0;\n    char key[64] = \"\";\n    int index = 0;\n\n    cds_list_for_each_entry(brickinfo, &volinfo->bricks, brick_list)\n    {\n        ret = snprintf(key, sizeof(key), \"%d-hostname\", index);\n        ret = dict_set_strn(dict, key, ret, brickinfo->hostname);\n        if (ret)\n            goto out;\n\n        ret = snprintf(key, sizeof(key), \"%d-path\", index);\n        ret = dict_set_strn(dict, key, ret, brickinfo->path);\n        if (ret)\n            goto out;\n\n        index++;\n    }\nout:\n    return ret;\n}\n\n/* The prefix represents the type of volume to be added.\n * It will be \"volume\" for normal volumes, and snap# like\n * snap1, snap2, for snapshot volumes\n */\nint32_t\nglusterd_add_volume_to_dict(glusterd_volinfo_t *volinfo, dict_t *dict,\n                            int32_t count, char *prefix)\n{\n    int32_t ret = -1;\n    char pfx[32] = \"\"; /* prefix should be quite small */\n    char key[64] = \"\";\n    int keylen;\n    glusterd_brickinfo_t *brickinfo = NULL;\n    glusterd_brickinfo_t *ta_brickinfo = NULL;\n    int32_t i = 1;\n    char *volume_id_str = NULL;\n    char *str = NULL;\n    glusterd_dict_ctx_t ctx = {0};\n    char *rebalance_id_str = NULL;\n    char *rb_id_str = NULL;\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n    GF_ASSERT(dict);\n    GF_ASSERT(volinfo);\n    GF_ASSERT(prefix);\n\n    ret = snprintf(pfx, sizeof(pfx), \"%s%d\", prefix, count);\n    if (ret < 0 || ret >= sizeof(pfx)) {\n        ret = -1;\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.name\", pfx);\n    ret = dict_set_strn(dict, key, keylen, volinfo->volname);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.type\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->type);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.brick_count\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->brick_count);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.version\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->version);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.status\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->status);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.sub_count\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->sub_count);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.subvol_count\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->subvol_count);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.stripe_count\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->stripe_count);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.replica_count\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->replica_count);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.arbiter_count\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->arbiter_count);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.thin_arbiter_count\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->thin_arbiter_count);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.disperse_count\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->disperse_count);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.redundancy_count\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->redundancy_count);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.dist_count\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->dist_leaf_count);\n    if (ret)\n        goto out;\n\n    snprintf(key, sizeof(key), \"%s.ckusm\", pfx);\n    ret = dict_set_int64(dict, key, volinfo->cksum);\n    if (ret)\n        goto out;\n\n    snprintf(key, sizeof(key), \"%s.transport_type\", pfx);\n    ret = dict_set_uint32(dict, key, volinfo->transport_type);\n    if (ret)\n        goto out;\n\n    snprintf(key, sizeof(key), \"%s.stage_deleted\", pfx);\n    ret = dict_set_uint32(dict, key, (uint32_t)volinfo->stage_deleted);\n    if (ret)\n        goto out;\n\n    ret = gd_add_vol_snap_details_to_dict(dict, pfx, volinfo);\n    if (ret)\n        goto out;\n\n    volume_id_str = gf_strdup(uuid_utoa(volinfo->volume_id));\n    if (!volume_id_str) {\n        ret = -1;\n        goto out;\n    }\n    keylen = snprintf(key, sizeof(key), \"%s.volume_id\", pfx);\n    ret = dict_set_dynstrn(dict, key, keylen, volume_id_str);\n    if (ret)\n        goto out;\n    volume_id_str = NULL;\n\n    keylen = snprintf(key, sizeof(key), \"%s.username\", pfx);\n    str = glusterd_auth_get_username(volinfo);\n    if (str) {\n        ret = dict_set_dynstrn(dict, key, keylen, gf_strdup(str));\n        if (ret)\n            goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.password\", pfx);\n    str = glusterd_auth_get_password(volinfo);\n    if (str) {\n        ret = dict_set_dynstrn(dict, key, keylen, gf_strdup(str));\n        if (ret)\n            goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.rebalance\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->rebal.defrag_cmd);\n    if (ret)\n        goto out;\n\n    rebalance_id_str = gf_strdup(uuid_utoa(volinfo->rebal.rebalance_id));\n    if (!rebalance_id_str) {\n        ret = -1;\n        goto out;\n    }\n    keylen = snprintf(key, sizeof(key), \"%s.rebalance-id\", pfx);\n    ret = dict_set_dynstrn(dict, key, keylen, rebalance_id_str);\n    if (ret)\n        goto out;\n    rebalance_id_str = NULL;\n\n    snprintf(key, sizeof(key), \"%s.rebalance-op\", pfx);\n    ret = dict_set_uint32(dict, key, volinfo->rebal.op);\n    if (ret)\n        goto out;\n\n    if (volinfo->rebal.dict) {\n        ctx.dict = dict;\n        ctx.prefix = pfx;\n        ctx.opt_count = 1;\n        ctx.key_name = \"rebal-dict-key\";\n        ctx.val_name = \"rebal-dict-value\";\n\n        dict_foreach(volinfo->rebal.dict, _add_dict_to_prdict, &ctx);\n        ctx.opt_count--;\n        keylen = snprintf(key, sizeof(key), \"volume%d.rebal-dict-count\", count);\n        ret = dict_set_int32n(dict, key, keylen, ctx.opt_count);\n        if (ret)\n            goto out;\n    }\n\n    ctx.dict = dict;\n    ctx.prefix = pfx;\n    ctx.opt_count = 1;\n    ctx.key_name = \"key\";\n    ctx.val_name = \"value\";\n    GF_ASSERT(volinfo->dict);\n\n    dict_foreach(volinfo->dict, _add_dict_to_prdict, &ctx);\n    ctx.opt_count--;\n    keylen = snprintf(key, sizeof(key), \"%s.opt-count\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, ctx.opt_count);\n    if (ret)\n        goto out;\n\n    ctx.dict = dict;\n    ctx.prefix = pfx;\n    ctx.opt_count = 1;\n    ctx.key_name = \"slave-num\";\n    ctx.val_name = \"slave-val\";\n    GF_ASSERT(volinfo->gsync_slaves);\n\n    dict_foreach(volinfo->gsync_slaves, _add_dict_to_prdict, &ctx);\n    ctx.opt_count--;\n\n    keylen = snprintf(key, sizeof(key), \"%s.gsync-count\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, ctx.opt_count);\n    if (ret)\n        goto out;\n\n    cds_list_for_each_entry(brickinfo, &volinfo->bricks, brick_list)\n    {\n        keylen = snprintf(key, sizeof(key), \"%s.brick%d.hostname\", pfx, i);\n        ret = dict_set_strn(dict, key, keylen, brickinfo->hostname);\n        if (ret)\n            goto out;\n\n        keylen = snprintf(key, sizeof(key), \"%s.brick%d.path\", pfx, i);\n        ret = dict_set_strn(dict, key, keylen, brickinfo->path);\n        if (ret)\n            goto out;\n\n        keylen = snprintf(key, sizeof(key), \"%s.brick%d.decommissioned\", pfx,\n                          i);\n        ret = dict_set_int32n(dict, key, keylen, brickinfo->decommissioned);\n        if (ret)\n            goto out;\n\n        keylen = snprintf(key, sizeof(key), \"%s.brick%d.brick_id\", pfx, i);\n        ret = dict_set_strn(dict, key, keylen, brickinfo->brick_id);\n        if (ret)\n            goto out;\n\n        snprintf(key, sizeof(key), \"%s.brick%d.uuid\", pfx, i);\n        ret = dict_set_dynstr_with_alloc(dict, key, uuid_utoa(brickinfo->uuid));\n        if (ret)\n            goto out;\n\n        snprintf(key, sizeof(key), \"%s.brick%d\", pfx, i);\n        ret = gd_add_brick_snap_details_to_dict(dict, key, brickinfo);\n        if (ret)\n            goto out;\n\n        i++;\n    }\n\n    i = 1;\n    if (volinfo->thin_arbiter_count == 1) {\n        cds_list_for_each_entry(ta_brickinfo, &volinfo->ta_bricks, brick_list)\n        {\n            keylen = snprintf(key, sizeof(key), \"%s.ta-brick%d.hostname\", pfx,\n                              i);\n            ret = dict_set_strn(dict, key, keylen, ta_brickinfo->hostname);\n            if (ret)\n                goto out;\n\n            keylen = snprintf(key, sizeof(key), \"%s.ta-brick%d.path\", pfx, i);\n            ret = dict_set_strn(dict, key, keylen, ta_brickinfo->path);\n            if (ret)\n                goto out;\n\n            keylen = snprintf(key, sizeof(key), \"%s.ta-brick%d.decommissioned\",\n                              pfx, i);\n            ret = dict_set_int32n(dict, key, keylen,\n                                  ta_brickinfo->decommissioned);\n            if (ret)\n                goto out;\n\n            keylen = snprintf(key, sizeof(key), \"%s.ta-brick%d.brick_id\", pfx,\n                              i);\n            ret = dict_set_strn(dict, key, keylen, ta_brickinfo->brick_id);\n            if (ret)\n                goto out;\n\n            snprintf(key, sizeof(key), \"%s.ta-brick%d.uuid\", pfx, i);\n            ret = dict_set_dynstr_with_alloc(dict, key,\n                                             uuid_utoa(ta_brickinfo->uuid));\n            if (ret)\n                goto out;\n\n            i++;\n        }\n    }\n\n    /* Add volume op-versions to dict. This prevents volume inconsistencies\n     * in the cluster\n     */\n    keylen = snprintf(key, sizeof(key), \"%s.op-version\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->op_version);\n    if (ret)\n        goto out;\n    keylen = snprintf(key, sizeof(key), \"%s.client-op-version\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->client_op_version);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.quota-xattr-version\", pfx);\n    ret = dict_set_int32n(dict, key, keylen, volinfo->quota_xattr_version);\nout:\n    GF_FREE(volume_id_str);\n    GF_FREE(rebalance_id_str);\n    GF_FREE(rb_id_str);\n\n    gf_msg_debug(this->name, 0, \"Returning with %d\", ret);\n    return ret;\n}\n\n/* The prefix represents the type of volume to be added.\n * It will be \"volume\" for normal volumes, and snap# like\n * snap1, snap2, for snapshot volumes\n */\nint\nglusterd_vol_add_quota_conf_to_dict(glusterd_volinfo_t *volinfo, dict_t *load,\n                                    int vol_idx, char *prefix)\n{\n    int fd = -1;\n    unsigned char buf[16] = \"\";\n    char key[64];\n    char key_prefix[32];\n    int gfid_idx = 0;\n    int ret = -1;\n    xlator_t *this = NULL;\n    char type = 0;\n    float version = 0.0f;\n\n    this = THIS;\n    GF_ASSERT(this);\n    GF_ASSERT(prefix);\n\n    ret = glusterd_store_create_quota_conf_sh_on_absence(volinfo);\n    if (ret)\n        goto out;\n\n    fd = open(volinfo->quota_conf_shandle->path, O_RDONLY);\n    if (fd == -1) {\n        ret = -1;\n        goto out;\n    }\n\n    ret = quota_conf_read_version(fd, &version);\n    if (ret)\n        goto out;\n\n    ret = snprintf(key_prefix, sizeof(key_prefix), \"%s%d\", prefix, vol_idx);\n    if (ret < 0 || ret >= sizeof(key_prefix)) {\n        ret = -1;\n        goto out;\n    }\n    for (gfid_idx = 0;; gfid_idx++) {\n        ret = quota_conf_read_gfid(fd, buf, &type, version);\n        if (ret == 0) {\n            break;\n        } else if (ret < 0) {\n            gf_msg(this->name, GF_LOG_CRITICAL, 0, GD_MSG_QUOTA_CONF_CORRUPT,\n                   \"Quota \"\n                   \"configuration store may be corrupt.\");\n            goto out;\n        }\n\n        snprintf(key, sizeof(key) - 1, \"%s.gfid%d\", key_prefix, gfid_idx);\n        ret = dict_set_dynstr_with_alloc(load, key, uuid_utoa(buf));\n        if (ret)\n            goto out;\n\n        snprintf(key, sizeof(key) - 1, \"%s.gfid-type%d\", key_prefix, gfid_idx);\n        ret = dict_set_int8(load, key, type);\n        if (ret)\n            goto out;\n    }\n\n    ret = snprintf(key, sizeof(key), \"%s.gfid-count\", key_prefix);\n    ret = dict_set_int32n(load, key, ret, gfid_idx);\n    if (ret)\n        goto out;\n\n    snprintf(key, sizeof(key), \"%s.quota-cksum\", key_prefix);\n    ret = dict_set_uint32(load, key, volinfo->quota_conf_cksum);\n    if (ret)\n        goto out;\n\n    snprintf(key, sizeof(key), \"%s.quota-version\", key_prefix);\n    ret = dict_set_uint32(load, key, volinfo->quota_conf_version);\n    if (ret)\n        goto out;\n\n    ret = 0;\nout:\n    if (fd != -1)\n        sys_close(fd);\n    return ret;\n}\n\nvoid *\nglusterd_add_bulk_volumes_create_thread(void *data)\n{\n    int32_t ret = -1;\n    glusterd_conf_t *priv = NULL;\n    glusterd_volinfo_t *volinfo = NULL;\n    int32_t count = 0;\n    xlator_t *this = NULL;\n    glusterd_add_dict_args_t *arg = NULL;\n    dict_t *dict = NULL;\n    int start = 0;\n    int end = 0;\n\n    GF_ASSERT(data);\n\n    arg = data;\n    dict = arg->voldict;\n    start = arg->start;\n    end = arg->end;\n    this = arg->this;\n    THIS = arg->this;\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    cds_list_for_each_entry(volinfo, &priv->volumes, vol_list)\n    {\n        count++;\n\n        /* Skip volumes if index count is less than start\n           index to handle volume for specific thread\n        */\n        if (count < start)\n            continue;\n\n        /* No need to process volume if index count is greater\n           than end index\n        */\n        if (count > end)\n            break;\n\n        ret = glusterd_add_volume_to_dict(volinfo, dict, count, \"volume\");\n        if (ret)\n            goto out;\n        if (!dict_get_sizen(volinfo->dict, VKEY_FEATURES_QUOTA))\n            continue;\n        ret = glusterd_vol_add_quota_conf_to_dict(volinfo, dict, count,\n                                                  \"volume\");\n        if (ret)\n            goto out;\n    }\n\nout:\n    GF_ATOMIC_DEC(priv->thread_count);\n    free(arg);\n    return NULL;\n}\n\nint\nglusterd_dict_searialize(dict_t *dict_arr[], int count, int totcount, char *buf)\n{\n    int i = 0;\n    int32_t keylen = 0;\n    int64_t netword = 0;\n    data_pair_t *pair = NULL;\n    int dict_count = 0;\n    int ret = 0;\n\n    netword = hton32(totcount);\n    memcpy(buf, &netword, sizeof(netword));\n    buf += DICT_HDR_LEN;\n\n    for (i = 0; i < count; i++) {\n        if (dict_arr[i]) {\n            dict_count = dict_arr[i]->count;\n            pair = dict_arr[i]->members_list;\n            while (dict_count) {\n                if (!pair) {\n                    gf_msg(\"glusterd\", GF_LOG_ERROR, 0,\n                           LG_MSG_PAIRS_LESS_THAN_COUNT,\n                           \"less than count data pairs found!\");\n                    ret = -1;\n                    goto out;\n                }\n\n                if (!pair->key) {\n                    gf_msg(\"glusterd\", GF_LOG_ERROR, 0, LG_MSG_NULL_PTR,\n                           \"pair->key is null!\");\n                    ret = -1;\n                    goto out;\n                }\n\n                keylen = strlen(pair->key);\n                netword = hton32(keylen);\n                memcpy(buf, &netword, sizeof(netword));\n                buf += DICT_DATA_HDR_KEY_LEN;\n                if (!pair->value) {\n                    gf_msg(\"glusterd\", GF_LOG_ERROR, 0, LG_MSG_NULL_PTR,\n                           \"pair->value is null!\");\n                    ret = -1;\n                    goto out;\n                }\n\n                netword = hton32(pair->value->len);\n                memcpy(buf, &netword, sizeof(netword));\n                buf += DICT_DATA_HDR_VAL_LEN;\n\n                memcpy(buf, pair->key, keylen);\n                buf += keylen;\n                *buf++ = '\\0';\n\n                if (pair->value->data) {\n                    memcpy(buf, pair->value->data, pair->value->len);\n                    buf += pair->value->len;\n                }\n\n                pair = pair->next;\n                dict_count--;\n            }\n        }\n    }\n\nout:\n    for (i = 0; i < count; i++) {\n        if (dict_arr[i])\n            dict_unref(dict_arr[i]);\n    }\n    return ret;\n}\n\nint\nglusterd_dict_arr_serialize(dict_t *dict_arr[], int count, char **buf,\n                            u_int *length)\n{\n    ssize_t len = 0;\n    int i = 0;\n    int totcount = 0;\n    int ret = 0;\n\n    for (i = 0; i < count; i++) {\n        if (dict_arr[i]) {\n            len += dict_serialized_length_lk(dict_arr[i]);\n            totcount += dict_arr[i]->count;\n        }\n    }\n\n    // Subtract HDR_LEN except one dictionary\n    len = len - ((count - 1) * DICT_HDR_LEN);\n\n    *buf = GF_MALLOC(len, gf_common_mt_char);\n    if (*buf == NULL) {\n        ret = -ENOMEM;\n        goto out;\n    }\n\n    if (length != NULL) {\n        *length = len;\n    }\n\n    ret = glusterd_dict_searialize(dict_arr, count, totcount, *buf);\n\nout:\n    return ret;\n}\n\nint32_t\nglusterd_add_volumes_to_export_dict(dict_t *peer_data, char **buf,\n                                    u_int *length)\n{\n    int32_t ret = -1;\n    dict_t *dict_arr[128] = {\n        0,\n    };\n    glusterd_conf_t *priv = NULL;\n    glusterd_volinfo_t *volinfo = NULL;\n    int32_t count = 0;\n    glusterd_dict_ctx_t ctx = {0};\n    xlator_t *this = NULL;\n    int totthread = 0;\n    int volcnt = 0;\n    int start = 1;\n    int endindex = 0;\n    int vol_per_thread_limit = 0;\n    glusterd_add_dict_args_t *arg = NULL;\n    pthread_t th_id = {\n        0,\n    };\n    int th_ret = 0;\n    int i = 0;\n\n    this = THIS;\n    GF_ASSERT(this);\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    /* Count the total number of volumes */\n    cds_list_for_each_entry(volinfo, &priv->volumes, vol_list) volcnt++;\n\n    get_gd_vol_thread_limit(&vol_per_thread_limit);\n\n    if ((vol_per_thread_limit == 1) || (vol_per_thread_limit == 0) ||\n        (vol_per_thread_limit > 100)) {\n        totthread = 0;\n    } else {\n        totthread = volcnt / vol_per_thread_limit;\n        if (totthread) {\n            endindex = volcnt % vol_per_thread_limit;\n            if (endindex)\n                totthread++;\n        }\n    }\n\n    if (totthread == 0) {\n        cds_list_for_each_entry(volinfo, &priv->volumes, vol_list)\n        {\n            count++;\n            ret = glusterd_add_volume_to_dict(volinfo, peer_data, count,\n                                              \"volume\");\n            if (ret)\n                goto out;\n\n            if (!dict_get_sizen(volinfo->dict, VKEY_FEATURES_QUOTA))\n                continue;\n\n            ret = glusterd_vol_add_quota_conf_to_dict(volinfo, peer_data, count,\n                                                      \"volume\");\n            if (ret)\n                goto out;\n        }\n    } else {\n        for (i = 0; i < totthread; i++) {\n            arg = calloc(1, sizeof(*arg));\n            dict_arr[i] = dict_new();\n            arg->this = this;\n            arg->voldict = dict_arr[i];\n            arg->start = start;\n            if ((i + 1) != totthread) {\n                arg->end = ((i + 1) * vol_per_thread_limit);\n            } else {\n                arg->end = (((i + 1) * vol_per_thread_limit) + endindex);\n            }\n            th_ret = gf_thread_create_detached(\n                &th_id, glusterd_add_bulk_volumes_create_thread, arg,\n                \"bulkvoldict\");\n            if (th_ret) {\n                gf_log(this->name, GF_LOG_ERROR,\n                       \"glusterd_add_bulk_volume %s\"\n                       \" thread creation failed\",\n                       \"bulkvoldict\");\n                free(arg);\n                goto out;\n            }\n\n            start = start + vol_per_thread_limit;\n            GF_ATOMIC_INC(priv->thread_count);\n            gf_log(this->name, GF_LOG_INFO,\n                   \"Create thread %d to populate dict data for volume\"\n                   \" start index is %d end index is %d\",\n                   (i + 1), arg->start, arg->end);\n        }\n        while (GF_ATOMIC_GET(priv->thread_count)) {\n            sleep(1);\n        }\n\n        gf_log(this->name, GF_LOG_INFO,\n               \"Finished dictionary popluation in all threads\");\n    }\n\n    ret = dict_set_int32n(peer_data, \"count\", SLEN(\"count\"), volcnt);\n    if (ret)\n        goto out;\n\n    ctx.dict = peer_data;\n    ctx.prefix = \"global\";\n    ctx.opt_count = 1;\n    ctx.key_name = \"key\";\n    ctx.val_name = \"val\";\n    dict_foreach(priv->opts, _add_dict_to_prdict, &ctx);\n    ctx.opt_count--;\n    ret = dict_set_int32n(peer_data, \"global-opt-count\",\n                          SLEN(\"global-opt-count\"), ctx.opt_count);\n    if (ret)\n        goto out;\n\n    if (totthread) {\n        gf_log(this->name, GF_LOG_INFO,\n               \"Finished merger of all dictionraies into single one\");\n        dict_arr[totthread++] = dict_ref(peer_data);\n        ret = glusterd_dict_arr_serialize(dict_arr, totthread, buf, length);\n        gf_log(this->name, GF_LOG_INFO,\n               \"Serialize dictionary data return is %d\", ret);\n    }\n\nout:\n\n    gf_msg_trace(this->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\nstatic int32_t\nglusterd_compare_friend_volume(dict_t *peer_data, int32_t count,\n                               int32_t *status, char *hostname)\n{\n    int32_t ret = -1;\n    char key[64] = \"\";\n    char key_prefix[32];\n    int keylen;\n    glusterd_volinfo_t *volinfo = NULL;\n    char *volname = NULL;\n    uint32_t cksum = 0;\n    uint32_t quota_cksum = 0;\n    uint32_t quota_version = 0;\n    uint32_t stage_deleted = 0;\n    int32_t version = 0;\n    xlator_t *this = NULL;\n\n    GF_ASSERT(peer_data);\n    GF_ASSERT(status);\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    snprintf(key_prefix, sizeof(key_prefix), \"volume%d\", count);\n    keylen = snprintf(key, sizeof(key), \"%s.name\", key_prefix);\n    ret = dict_get_strn(peer_data, key, keylen, &volname);\n    if (ret)\n        goto out;\n\n    ret = glusterd_volinfo_find(volname, &volinfo);\n    if (ret) {\n        snprintf(key, sizeof(key), \"%s.stage_deleted\", key_prefix);\n        ret = dict_get_uint32(peer_data, key, &stage_deleted);\n        /* stage_deleted = 1 means the volume is still in the process of\n         * deleting a volume, so we shouldn't be trying to create a\n         * fresh volume here which would lead to a stale entry\n         */\n        if (!ret && stage_deleted == 0)\n            *status = GLUSTERD_VOL_COMP_UPDATE_REQ;\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.version\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &version);\n    if (ret)\n        goto out;\n\n    if (version > volinfo->version) {\n        // Mismatch detected\n        gf_msg(this->name, GF_LOG_INFO, 0, GD_MSG_VOL_VERS_MISMATCH,\n               \"Version of volume %s differ. local version = %d, \"\n               \"remote version = %d on peer %s\",\n               volinfo->volname, volinfo->version, version, hostname);\n        *status = GLUSTERD_VOL_COMP_UPDATE_REQ;\n        goto out;\n    } else if (version < volinfo->version) {\n        *status = GLUSTERD_VOL_COMP_SCS;\n        goto out;\n    }\n\n    // Now, versions are same, compare cksums.\n    //\n    snprintf(key, sizeof(key), \"%s.ckusm\", key_prefix);\n    ret = dict_get_uint32(peer_data, key, &cksum);\n    if (ret)\n        goto out;\n\n    if (cksum != volinfo->cksum) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_CKSUM_VERS_MISMATCH,\n               \"Version of Cksums %s differ. local cksum = %u, remote \"\n               \"cksum = %u on peer %s\",\n               volinfo->volname, volinfo->cksum, cksum, hostname);\n        *status = GLUSTERD_VOL_COMP_RJT;\n        goto out;\n    }\n\n    if (!dict_get_sizen(volinfo->dict, VKEY_FEATURES_QUOTA))\n        goto skip_quota;\n\n    snprintf(key, sizeof(key), \"%s.quota-version\", key_prefix);\n    ret = dict_get_uint32(peer_data, key, &quota_version);\n    if (ret) {\n        gf_msg_debug(this->name, 0,\n                     \"quota-version key absent for\"\n                     \" volume %s in peer %s's response\",\n                     volinfo->volname, hostname);\n    } else {\n        if (quota_version > volinfo->quota_conf_version) {\n            // Mismatch detected\n            gf_msg(this->name, GF_LOG_INFO, 0,\n                   GD_MSG_QUOTA_CONFIG_VERS_MISMATCH,\n                   \"Quota configuration versions of volume %s \"\n                   \"differ. local version = %d, remote version = \"\n                   \"%d on peer %s\",\n                   volinfo->volname, volinfo->quota_conf_version, quota_version,\n                   hostname);\n            *status = GLUSTERD_VOL_COMP_UPDATE_REQ;\n            goto out;\n        } else if (quota_version < volinfo->quota_conf_version) {\n            *status = GLUSTERD_VOL_COMP_SCS;\n            goto out;\n        }\n    }\n\n    // Now, versions are same, compare cksums.\n    //\n    snprintf(key, sizeof(key), \"%s.quota-cksum\", key_prefix);\n    ret = dict_get_uint32(peer_data, key, &quota_cksum);\n    if (ret) {\n        gf_msg_debug(this->name, 0,\n                     \"quota checksum absent for \"\n                     \"volume %s in peer %s's response\",\n                     volinfo->volname, hostname);\n    } else {\n        if (quota_cksum != volinfo->quota_conf_cksum) {\n            gf_msg(this->name, GF_LOG_ERROR, 0,\n                   GD_MSG_QUOTA_CONFIG_CKSUM_MISMATCH,\n                   \"Cksums of \"\n                   \"quota configuration of volume %s differ. local\"\n                   \" cksum = %u, remote  cksum = %u on peer %s\",\n                   volinfo->volname, volinfo->quota_conf_cksum, quota_cksum,\n                   hostname);\n            *status = GLUSTERD_VOL_COMP_RJT;\n            goto out;\n        }\n    }\n\nskip_quota:\n    *status = GLUSTERD_VOL_COMP_SCS;\n\nout:\n    keylen = snprintf(key, sizeof(key), \"%s.update\", key_prefix);\n\n    if (*status == GLUSTERD_VOL_COMP_UPDATE_REQ) {\n        ret = dict_set_int32n(peer_data, key, keylen, 1);\n    } else {\n        ret = dict_set_int32n(peer_data, key, keylen, 0);\n    }\n    if (*status == GLUSTERD_VOL_COMP_RJT) {\n        gf_event(EVENT_COMPARE_FRIEND_VOLUME_FAILED, \"volume=%s\",\n                 volinfo->volname);\n    }\n    gf_msg_debug(this->name, 0, \"Returning with ret: %d, status: %d\", ret,\n                 *status);\n    return ret;\n}\n\nstatic int32_t\nimport_prdict_dict(dict_t *peer_data, dict_t *dst_dict, char *key_prefix,\n                   char *value_prefix, int opt_count, char *prefix)\n{\n    char key[512] = \"\";\n    int keylen;\n    int32_t ret = 0;\n    int i = 1;\n    char *opt_key = NULL;\n    char *opt_val = NULL;\n    char *dup_opt_val = NULL;\n    char msg[2048] = \"\";\n\n    while (i <= opt_count) {\n        keylen = snprintf(key, sizeof(key), \"%s.%s%d\", prefix, key_prefix, i);\n        ret = dict_get_strn(peer_data, key, keylen, &opt_key);\n        if (ret) {\n            snprintf(msg, sizeof(msg),\n                     \"Volume dict key not \"\n                     \"specified\");\n            goto out;\n        }\n\n        keylen = snprintf(key, sizeof(key), \"%s.%s%d\", prefix, value_prefix, i);\n        ret = dict_get_strn(peer_data, key, keylen, &opt_val);\n        if (ret) {\n            snprintf(msg, sizeof(msg),\n                     \"Volume dict value not \"\n                     \"specified\");\n            goto out;\n        }\n        dup_opt_val = gf_strdup(opt_val);\n        if (!dup_opt_val) {\n            ret = -1;\n            goto out;\n        }\n        ret = dict_set_dynstr(dst_dict, opt_key, dup_opt_val);\n        if (ret) {\n            snprintf(msg, sizeof(msg),\n                     \"Volume set %s %s \"\n                     \"unsuccessful\",\n                     opt_key, dup_opt_val);\n            goto out;\n        }\n        i++;\n    }\n\nout:\n    if (msg[0])\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_IMPORT_PRDICT_DICT, \"%s\",\n               msg);\n    gf_msg_debug(\"glusterd\", 0, \"Returning with %d\", ret);\n    return ret;\n}\n\nint\nglusterd_spawn_daemons(void *opaque)\n{\n    glusterd_conf_t *conf = THIS->private;\n    int ret = -1;\n\n    /* glusterd_restart_brick() will take the sync_lock. */\n    glusterd_restart_bricks(NULL);\n    glusterd_restart_gsyncds(conf);\n    glusterd_restart_rebalance(conf);\n    ret = glusterd_snapdsvc_restart();\n    ret = glusterd_gfproxydsvc_restart();\n    ret = glusterd_shdsvc_restart();\n    return ret;\n}\n\nstatic int32_t\nglusterd_import_friend_volume_opts(dict_t *peer_data, int count,\n                                   glusterd_volinfo_t *volinfo, char *prefix)\n{\n    char key[64];\n    int keylen;\n    int32_t ret = -1;\n    int opt_count = 0;\n    char msg[2048] = \"\";\n    char volume_prefix[32];\n\n    GF_ASSERT(peer_data);\n    GF_ASSERT(volinfo);\n\n    snprintf(volume_prefix, sizeof(volume_prefix), \"%s%d\", prefix, count);\n\n    keylen = snprintf(key, sizeof(key), \"%s.opt-count\", volume_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &opt_count);\n    if (ret) {\n        snprintf(msg, sizeof(msg),\n                 \"Volume option count not \"\n                 \"specified for %s\",\n                 volinfo->volname);\n        goto out;\n    }\n\n    ret = import_prdict_dict(peer_data, volinfo->dict, \"key\", \"value\",\n                             opt_count, volume_prefix);\n    if (ret) {\n        snprintf(msg, sizeof(msg),\n                 \"Unable to import options dict \"\n                 \"specified for %s\",\n                 volinfo->volname);\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.gsync-count\", volume_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &opt_count);\n    if (ret) {\n        snprintf(msg, sizeof(msg),\n                 \"Gsync count not \"\n                 \"specified for %s\",\n                 volinfo->volname);\n        goto out;\n    }\n\n    ret = import_prdict_dict(peer_data, volinfo->gsync_slaves, \"slave-num\",\n                             \"slave-val\", opt_count, volume_prefix);\n    if (ret) {\n        snprintf(msg, sizeof(msg),\n                 \"Unable to import gsync sessions \"\n                 \"specified for %s\",\n                 volinfo->volname);\n        goto out;\n    }\n\nout:\n    if (msg[0])\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_VOL_OPTS_IMPORT_FAIL, \"%s\",\n               msg);\n    gf_msg_debug(\"glusterd\", 0, \"Returning with %d\", ret);\n    return ret;\n}\n\nstatic int32_t\nglusterd_import_new_ta_brick(dict_t *peer_data, int32_t vol_count,\n                             int32_t brick_count,\n                             glusterd_brickinfo_t **ta_brickinfo, char *prefix)\n{\n    char key[128];\n    char key_prefix[64];\n    int keylen;\n    int ret = -1;\n    char *hostname = NULL;\n    char *path = NULL;\n    char *brick_id = NULL;\n    int decommissioned = 0;\n    glusterd_brickinfo_t *new_ta_brickinfo = NULL;\n    char msg[256] = \"\";\n    char *brick_uuid_str = NULL;\n\n    GF_ASSERT(peer_data);\n    GF_ASSERT(vol_count >= 0);\n    GF_ASSERT(ta_brickinfo);\n    GF_ASSERT(prefix);\n\n    ret = snprintf(key_prefix, sizeof(key_prefix), \"%s%d.ta-brick%d\", prefix,\n                   vol_count, brick_count);\n\n    if (ret < 0 || ret >= sizeof(key_prefix)) {\n        ret = -1;\n        snprintf(msg, sizeof(msg), \"key_prefix too long\");\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.hostname\", key_prefix);\n    ret = dict_get_strn(peer_data, key, keylen, &hostname);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"%s missing in payload\", key);\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.path\", key_prefix);\n    ret = dict_get_strn(peer_data, key, keylen, &path);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"%s missing in payload\", key);\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.brick_id\", key_prefix);\n    ret = dict_get_strn(peer_data, key, keylen, &brick_id);\n\n    keylen = snprintf(key, sizeof(key), \"%s.decommissioned\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &decommissioned);\n    if (ret) {\n        /* For backward compatibility */\n        ret = 0;\n    }\n\n    ret = glusterd_brickinfo_new(&new_ta_brickinfo);\n    if (ret)\n        goto out;\n\n    ret = snprintf(new_ta_brickinfo->path, sizeof(new_ta_brickinfo->path), \"%s\",\n                   path);\n    if (ret < 0 || ret >= sizeof(new_ta_brickinfo->path)) {\n        ret = -1;\n        goto out;\n    }\n    ret = snprintf(new_ta_brickinfo->hostname,\n                   sizeof(new_ta_brickinfo->hostname), \"%s\", hostname);\n    if (ret < 0 || ret >= sizeof(new_ta_brickinfo->hostname)) {\n        ret = -1;\n        goto out;\n    }\n    new_ta_brickinfo->decommissioned = decommissioned;\n    if (brick_id)\n        (void)snprintf(new_ta_brickinfo->brick_id,\n                       sizeof(new_ta_brickinfo->brick_id), \"%s\", brick_id);\n    keylen = snprintf(key, sizeof(key), \"%s.uuid\", key_prefix);\n    ret = dict_get_strn(peer_data, key, keylen, &brick_uuid_str);\n    if (ret)\n        goto out;\n    gf_uuid_parse(brick_uuid_str, new_ta_brickinfo->uuid);\n\n    *ta_brickinfo = new_ta_brickinfo;\n\nout:\n    if (msg[0]) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_BRICK_IMPORT_FAIL, \"%s\",\n               msg);\n        gf_event(EVENT_IMPORT_BRICK_FAILED, \"peer=%s;ta-brick=%s\",\n                 new_ta_brickinfo->hostname, new_ta_brickinfo->path);\n    }\n    gf_msg_debug(\"glusterd\", 0, \"Returning with %d\", ret);\n    return ret;\n}\n\n/* The prefix represents the type of volume to be added.\n * It will be \"volume\" for normal volumes, and snap# like\n * snap1, snap2, for snapshot volumes\n */\nstatic int32_t\nglusterd_import_new_brick(dict_t *peer_data, int32_t vol_count,\n                          int32_t brick_count, glusterd_brickinfo_t **brickinfo,\n                          char *prefix)\n{\n    char key[128];\n    char key_prefix[64];\n    int keylen;\n    int ret = -1;\n    char *hostname = NULL;\n    char *path = NULL;\n    char *brick_id = NULL;\n    int decommissioned = 0;\n    glusterd_brickinfo_t *new_brickinfo = NULL;\n    char msg[256] = \"\";\n    char *brick_uuid_str = NULL;\n\n    GF_ASSERT(peer_data);\n    GF_ASSERT(vol_count >= 0);\n    GF_ASSERT(brickinfo);\n    GF_ASSERT(prefix);\n\n    ret = snprintf(key_prefix, sizeof(key_prefix), \"%s%d.brick%d\", prefix,\n                   vol_count, brick_count);\n    if (ret < 0 || ret >= sizeof(key_prefix)) {\n        ret = -1;\n        snprintf(msg, sizeof(msg), \"key_prefix too long\");\n        goto out;\n    }\n    keylen = snprintf(key, sizeof(key), \"%s.hostname\", key_prefix);\n    ret = dict_get_strn(peer_data, key, keylen, &hostname);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"%s missing in payload\", key);\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.path\", key_prefix);\n    ret = dict_get_strn(peer_data, key, keylen, &path);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"%s missing in payload\", key);\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.brick_id\", key_prefix);\n    ret = dict_get_strn(peer_data, key, keylen, &brick_id);\n\n    keylen = snprintf(key, sizeof(key), \"%s.decommissioned\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &decommissioned);\n    if (ret) {\n        /* For backward compatibility */\n        ret = 0;\n    }\n\n    ret = glusterd_brickinfo_new(&new_brickinfo);\n    if (ret)\n        goto out;\n\n    ret = snprintf(new_brickinfo->path, sizeof(new_brickinfo->path), \"%s\",\n                   path);\n    if (ret < 0 || ret >= sizeof(new_brickinfo->path)) {\n        ret = -1;\n        goto out;\n    }\n    ret = snprintf(new_brickinfo->hostname, sizeof(new_brickinfo->hostname),\n                   \"%s\", hostname);\n    if (ret < 0 || ret >= sizeof(new_brickinfo->hostname)) {\n        ret = -1;\n        goto out;\n    }\n    new_brickinfo->decommissioned = decommissioned;\n    if (brick_id)\n        (void)snprintf(new_brickinfo->brick_id, sizeof(new_brickinfo->brick_id),\n                       \"%s\", brick_id);\n\n    ret = gd_import_new_brick_snap_details(peer_data, key_prefix,\n                                           new_brickinfo);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.uuid\", key_prefix);\n    ret = dict_get_strn(peer_data, key, keylen, &brick_uuid_str);\n    if (ret)\n        goto out;\n    gf_uuid_parse(brick_uuid_str, new_brickinfo->uuid);\n\n    *brickinfo = new_brickinfo;\nout:\n    if (msg[0]) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_BRICK_IMPORT_FAIL, \"%s\",\n               msg);\n        gf_event(EVENT_IMPORT_BRICK_FAILED, \"peer=%s;brick=%s\",\n                 new_brickinfo->hostname, new_brickinfo->path);\n    }\n    gf_msg_debug(\"glusterd\", 0, \"Returning with %d\", ret);\n    return ret;\n}\n\n/* The prefix represents the type of volume to be added.\n * It will be \"volume\" for normal volumes, and snap# like\n * snap1, snap2, for snapshot volumes\n */\nstatic int32_t\nglusterd_import_bricks(dict_t *peer_data, int32_t vol_count,\n                       glusterd_volinfo_t *new_volinfo, char *prefix)\n{\n    int ret = -1;\n    int brick_count = 1;\n    int ta_brick_count = 1;\n    int brickid = 0;\n    glusterd_brickinfo_t *new_brickinfo = NULL;\n    glusterd_brickinfo_t *new_ta_brickinfo = NULL;\n\n    GF_ASSERT(peer_data);\n    GF_ASSERT(vol_count >= 0);\n    GF_ASSERT(new_volinfo);\n    GF_ASSERT(prefix);\n    while (brick_count <= new_volinfo->brick_count) {\n        ret = glusterd_import_new_brick(peer_data, vol_count, brick_count,\n                                        &new_brickinfo, prefix);\n        if (ret)\n            goto out;\n        if (new_brickinfo->brick_id[0] == '\\0')\n            /*We were probed from a peer having op-version\n             less than GD_OP_VER_PERSISTENT_AFR_XATTRS*/\n            GLUSTERD_ASSIGN_BRICKID_TO_BRICKINFO(new_brickinfo, new_volinfo,\n                                                 brickid++);\n        cds_list_add_tail(&new_brickinfo->brick_list, &new_volinfo->bricks);\n        brick_count++;\n    }\n\n    if (new_volinfo->thin_arbiter_count == 1) {\n        while (ta_brick_count <= new_volinfo->subvol_count) {\n            ret = glusterd_import_new_ta_brick(peer_data, vol_count,\n                                               ta_brick_count,\n                                               &new_ta_brickinfo, prefix);\n            if (ret)\n                goto out;\n            cds_list_add_tail(&new_ta_brickinfo->brick_list,\n                              &new_volinfo->ta_bricks);\n            ta_brick_count++;\n        }\n    }\n    ret = 0;\nout:\n    gf_msg_debug(\"glusterd\", 0, \"Returning with %d\", ret);\n    return ret;\n}\n\n/* The prefix represents the type of volume to be added.\n * It will be \"volume\" for normal volumes, and snap# like\n * snap1, snap2, for snapshot volumes\n */\nint\nglusterd_import_quota_conf(dict_t *peer_data, int vol_idx,\n                           glusterd_volinfo_t *new_volinfo, char *prefix)\n{\n    int gfid_idx = 0;\n    int gfid_count = 0;\n    int ret = -1;\n    int fd = -1;\n    char key[128];\n    char key_prefix[64];\n    int keylen;\n    char *gfid_str = NULL;\n    uuid_t gfid = {\n        0,\n    };\n    xlator_t *this = NULL;\n    int8_t gfid_type = 0;\n\n    this = THIS;\n    GF_ASSERT(this);\n    GF_ASSERT(peer_data);\n    GF_ASSERT(prefix);\n\n    if (!glusterd_is_volume_quota_enabled(new_volinfo)) {\n        (void)glusterd_clean_up_quota_store(new_volinfo);\n        return 0;\n    }\n\n    ret = glusterd_store_create_quota_conf_sh_on_absence(new_volinfo);\n    if (ret)\n        goto out;\n\n    fd = gf_store_mkstemp(new_volinfo->quota_conf_shandle);\n    if (fd < 0) {\n        ret = -1;\n        goto out;\n    }\n\n    ret = snprintf(key_prefix, sizeof(key_prefix), \"%s%d\", prefix, vol_idx);\n    if (ret < 0 || ret >= sizeof(key_prefix)) {\n        ret = -1;\n        gf_msg_debug(this->name, 0, \"Failed to set key_prefix for quota conf\");\n        goto out;\n    }\n    snprintf(key, sizeof(key), \"%s.quota-cksum\", key_prefix);\n    ret = dict_get_uint32(peer_data, key, &new_volinfo->quota_conf_cksum);\n    if (ret)\n        gf_msg_debug(this->name, 0, \"Failed to get quota cksum\");\n\n    snprintf(key, sizeof(key), \"%s.quota-version\", key_prefix);\n    ret = dict_get_uint32(peer_data, key, &new_volinfo->quota_conf_version);\n    if (ret)\n        gf_msg_debug(this->name, 0,\n                     \"Failed to get quota \"\n                     \"version\");\n\n    keylen = snprintf(key, sizeof(key), \"%s.gfid-count\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &gfid_count);\n    if (ret)\n        goto out;\n\n    ret = glusterd_quota_conf_write_header(fd);\n    if (ret)\n        goto out;\n\n    for (gfid_idx = 0; gfid_idx < gfid_count; gfid_idx++) {\n        keylen = snprintf(key, sizeof(key) - 1, \"%s.gfid%d\", key_prefix,\n                          gfid_idx);\n        ret = dict_get_strn(peer_data, key, keylen, &gfid_str);\n        if (ret)\n            goto out;\n\n        snprintf(key, sizeof(key) - 1, \"%s.gfid-type%d\", key_prefix, gfid_idx);\n        ret = dict_get_int8(peer_data, key, &gfid_type);\n        if (ret)\n            gfid_type = GF_QUOTA_CONF_TYPE_USAGE;\n\n        gf_uuid_parse(gfid_str, gfid);\n        ret = glusterd_quota_conf_write_gfid(fd, gfid, (char)gfid_type);\n        if (ret < 0) {\n            gf_msg(this->name, GF_LOG_CRITICAL, errno,\n                   GD_MSG_QUOTA_CONF_WRITE_FAIL,\n                   \"Unable to write \"\n                   \"gfid %s into quota.conf for %s\",\n                   gfid_str, new_volinfo->volname);\n            ret = -1;\n            goto out;\n        }\n    }\n\n    ret = gf_store_rename_tmppath(new_volinfo->quota_conf_shandle);\n\n    ret = 0;\n\nout:\n    if (!ret) {\n        ret = glusterd_compute_cksum(new_volinfo, _gf_true);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_CKSUM_COMPUTE_FAIL,\n                   \"Failed to compute checksum\");\n            goto clear_quota_conf;\n        }\n\n        ret = glusterd_store_save_quota_version_and_cksum(new_volinfo);\n        if (ret)\n            gf_msg(this->name, GF_LOG_ERROR, 0,\n                   GD_MSG_QUOTA_CKSUM_VER_STORE_FAIL,\n                   \"Failed to save quota version and checksum\");\n    }\n\nclear_quota_conf:\n    if (ret && (fd > 0)) {\n        gf_store_unlink_tmppath(new_volinfo->quota_conf_shandle);\n        (void)gf_store_handle_destroy(new_volinfo->quota_conf_shandle);\n        new_volinfo->quota_conf_shandle = NULL;\n    }\n\n    return ret;\n}\n\nint\ngd_import_friend_volume_rebal_dict(dict_t *dict, int count,\n                                   glusterd_volinfo_t *volinfo)\n{\n    int ret = -1;\n    char key[64] = \"\";\n    int dict_count = 0;\n    char key_prefix[32];\n\n    GF_ASSERT(dict);\n    GF_ASSERT(volinfo);\n\n    snprintf(key_prefix, sizeof(key_prefix), \"volume%d\", count);\n    ret = snprintf(key, sizeof(key), \"%s.rebal-dict-count\", key_prefix);\n    ret = dict_get_int32n(dict, key, ret, &dict_count);\n    if (ret) {\n        /* Older peers will not have this dict */\n        ret = 0;\n        goto out;\n    }\n\n    volinfo->rebal.dict = dict_new();\n    if (!volinfo->rebal.dict) {\n        ret = -1;\n        goto out;\n    }\n\n    ret = import_prdict_dict(dict, volinfo->rebal.dict, \"rebal-dict-key\",\n                             \"rebal-dict-value\", dict_count, key_prefix);\nout:\n    if (ret && volinfo->rebal.dict)\n        dict_unref(volinfo->rebal.dict);\n    gf_msg_debug(THIS->name, 0, \"Returning with %d\", ret);\n    return ret;\n}\n\n/* The prefix represents the type of volume to be added.\n * It will be \"volume\" for normal volumes, and snap# like\n * snap1, snap2, for snapshot volumes\n */\nint32_t\nglusterd_import_volinfo(dict_t *peer_data, int count,\n                        glusterd_volinfo_t **volinfo, char *prefix)\n{\n    int ret = -1;\n    char key[64] = \"\";\n    char key_prefix[32];\n    int keylen;\n    char *parent_volname = NULL;\n    char *volname = NULL;\n    glusterd_volinfo_t *new_volinfo = NULL;\n    char *volume_id_str = NULL;\n    char msg[2048] = \"\";\n    char *str = NULL;\n    char *rebalance_id_str = NULL;\n    int op_version = 0;\n    int client_op_version = 0;\n    uint32_t stage_deleted = 0;\n\n    GF_ASSERT(peer_data);\n    GF_ASSERT(volinfo);\n    GF_ASSERT(prefix);\n\n    ret = snprintf(key_prefix, sizeof(key_prefix), \"%s%d\", prefix, count);\n    if (ret < 0 || ret >= sizeof(key_prefix)) {\n        ret = -1;\n        snprintf(msg, sizeof(msg), \"key_prefix too big\");\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.name\", key_prefix);\n    ret = dict_get_strn(peer_data, key, keylen, &volname);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"%s missing in payload\", key);\n        goto out;\n    }\n\n    snprintf(key, sizeof(key), \"%s.stage_deleted\", key_prefix);\n    ret = dict_get_uint32(peer_data, key, &stage_deleted);\n    /* stage_deleted = 1 means the volume is still in the process of\n     * deleting a volume, so we shouldn't be trying to create a\n     * fresh volume here which would lead to a stale entry\n     */\n    if (stage_deleted) {\n        goto out;\n    }\n\n    ret = glusterd_volinfo_new(&new_volinfo);\n    if (ret)\n        goto out;\n    ret = snprintf(new_volinfo->volname, sizeof(new_volinfo->volname), \"%s\",\n                   volname);\n    if (ret < 0 || ret >= sizeof(new_volinfo->volname)) {\n        ret = -1;\n        goto out;\n    }\n    keylen = snprintf(key, sizeof(key), \"%s.type\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &new_volinfo->type);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"%s missing in payload for %s\", key,\n                 volname);\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.parent_volname\", key_prefix);\n    ret = dict_get_strn(peer_data, key, keylen, &parent_volname);\n    if (!ret) {\n        ret = snprintf(new_volinfo->parent_volname,\n                       sizeof(new_volinfo->parent_volname), \"%s\",\n                       parent_volname);\n        if (ret < 0 || ret >= sizeof(new_volinfo->volname)) {\n            ret = -1;\n            goto out;\n        }\n    }\n    keylen = snprintf(key, sizeof(key), \"%s.brick_count\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &new_volinfo->brick_count);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"%s missing in payload for %s\", key,\n                 volname);\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.version\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &new_volinfo->version);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"%s missing in payload for %s\", key,\n                 volname);\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.status\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen,\n                          (int32_t *)&new_volinfo->status);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"%s missing in payload for %s\", key,\n                 volname);\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.sub_count\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &new_volinfo->sub_count);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"%s missing in payload for %s\", key,\n                 volname);\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.subvol_count\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &new_volinfo->subvol_count);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"%s missing in payload for %s\", key,\n                 volname);\n        goto out;\n    }\n\n    /* not having a 'stripe_count' key is not a error\n       (as peer may be of old version) */\n    keylen = snprintf(key, sizeof(key), \"%s.stripe_count\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &new_volinfo->stripe_count);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_GET_FAILED,\n               \"peer is possibly old version\");\n\n    /* not having a 'replica_count' key is not a error\n       (as peer may be of old version) */\n    keylen = snprintf(key, sizeof(key), \"%s.replica_count\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &new_volinfo->replica_count);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_GET_FAILED,\n               \"peer is possibly old version\");\n\n    /* not having a 'arbiter_count' key is not a error\n       (as peer may be of old version) */\n    keylen = snprintf(key, sizeof(key), \"%s.arbiter_count\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &new_volinfo->arbiter_count);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_GET_FAILED,\n               \"peer is possibly old version\");\n\n    /* not having a 'thin_arbiter_count' key is not a error\n       (as peer may be of old version) */\n    keylen = snprintf(key, sizeof(key), \"%s.thin_arbiter_count\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen,\n                          &new_volinfo->thin_arbiter_count);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_GET_FAILED,\n               \"peer is possibly old version\");\n\n    /* not having a 'disperse_count' key is not a error\n       (as peer may be of old version) */\n    keylen = snprintf(key, sizeof(key), \"%s.disperse_count\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &new_volinfo->disperse_count);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_GET_FAILED,\n               \"peer is possibly old version\");\n\n    /* not having a 'redundancy_count' key is not a error\n       (as peer may be of old version) */\n    keylen = snprintf(key, sizeof(key), \"%s.redundancy_count\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen,\n                          &new_volinfo->redundancy_count);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_GET_FAILED,\n               \"peer is possibly old version\");\n\n    /* not having a 'dist_count' key is not a error\n       (as peer may be of old version) */\n    keylen = snprintf(key, sizeof(key), \"%s.dist_count\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen,\n                          &new_volinfo->dist_leaf_count);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_GET_FAILED,\n               \"peer is possibly old version\");\n\n    new_volinfo->subvol_count = new_volinfo->brick_count /\n                                glusterd_get_dist_leaf_count(new_volinfo);\n    snprintf(key, sizeof(key), \"%s.ckusm\", key_prefix);\n    ret = dict_get_uint32(peer_data, key, &new_volinfo->cksum);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"%s missing in payload for %s\", key,\n                 volname);\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.volume_id\", key_prefix);\n    ret = dict_get_strn(peer_data, key, keylen, &volume_id_str);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"%s missing in payload for %s\", key,\n                 volname);\n        goto out;\n    }\n\n    gf_uuid_parse(volume_id_str, new_volinfo->volume_id);\n\n    keylen = snprintf(key, sizeof(key), \"%s.username\", key_prefix);\n    ret = dict_get_strn(peer_data, key, keylen, &str);\n    if (!ret) {\n        ret = glusterd_auth_set_username(new_volinfo, str);\n        if (ret)\n            goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.password\", key_prefix);\n    ret = dict_get_strn(peer_data, key, keylen, &str);\n    if (!ret) {\n        ret = glusterd_auth_set_password(new_volinfo, str);\n        if (ret)\n            goto out;\n    }\n\n    snprintf(key, sizeof(key), \"%s.transport_type\", key_prefix);\n    ret = dict_get_uint32(peer_data, key, &new_volinfo->transport_type);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"%s missing in payload for %s\", key,\n                 volname);\n        goto out;\n    }\n\n    snprintf(key, sizeof(key), \"%s.rebalance\", key_prefix);\n    ret = dict_get_uint32(peer_data, key, &new_volinfo->rebal.defrag_cmd);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"%s missing in payload for %s\", key,\n                 volname);\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.rebalance-id\", key_prefix);\n    ret = dict_get_strn(peer_data, key, keylen, &rebalance_id_str);\n    if (ret) {\n        /* This is not present in older glusterfs versions,\n         * so don't error out\n         */\n        ret = 0;\n    } else {\n        gf_uuid_parse(rebalance_id_str, new_volinfo->rebal.rebalance_id);\n    }\n\n    snprintf(key, sizeof(key), \"%s.rebalance-op\", key_prefix);\n    /* This is not present in older glusterfs versions,\n     * so don't error out\n     */\n    ret = dict_get_uint32(peer_data, key, (uint32_t *)&new_volinfo->rebal.op);\n\n    ret = gd_import_friend_volume_rebal_dict(peer_data, count, new_volinfo);\n    if (ret) {\n        snprintf(msg, sizeof(msg),\n                 \"Failed to import rebalance dict \"\n                 \"for volume.\");\n        goto out;\n    }\n\n    ret = gd_import_volume_snap_details(peer_data, new_volinfo, key_prefix,\n                                        volname);\n    if (ret) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_SNAP_DETAILS_IMPORT_FAIL,\n               \"Failed to import snapshot \"\n               \"details for volume %s\",\n               volname);\n        goto out;\n    }\n\n    ret = glusterd_import_friend_volume_opts(peer_data, count, new_volinfo,\n                                             prefix);\n    if (ret)\n        goto out;\n\n    /* Import the volume's op-versions if available else set it to 1.\n     * Not having op-versions implies this informtation was obtained from a\n     * op-version 1 friend (gluster-3.3), ergo the cluster is at op-version\n     * 1 and all volumes are at op-versions 1.\n     *\n     * Either both the volume op-versions should be absent or both should be\n     * present. Only one being present is a failure\n     */\n    keylen = snprintf(key, sizeof(key), \"%s.op-version\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &op_version);\n    if (ret)\n        ret = 0;\n    keylen = snprintf(key, sizeof(key), \"%s.client-op-version\", key_prefix);\n    ret = dict_get_int32n(peer_data, key, keylen, &client_op_version);\n    if (ret)\n        ret = 0;\n\n    if (op_version && client_op_version) {\n        new_volinfo->op_version = op_version;\n        new_volinfo->client_op_version = client_op_version;\n    } else if (((op_version == 0) && (client_op_version != 0)) ||\n               ((op_version != 0) && (client_op_version == 0))) {\n        ret = -1;\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Only one volume op-version found\");\n        goto out;\n    } else {\n        new_volinfo->op_version = 1;\n        new_volinfo->client_op_version = 1;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.quota-xattr-version\", key_prefix);\n    /*This is not present in older glusterfs versions, so ignore ret value*/\n    ret = dict_get_int32n(peer_data, key, keylen,\n                          &new_volinfo->quota_xattr_version);\n\n    ret = glusterd_import_bricks(peer_data, count, new_volinfo, prefix);\n    if (ret)\n        goto out;\n\n    *volinfo = new_volinfo;\nout:\n    if (msg[0]) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_VOLINFO_IMPORT_FAIL, \"%s\",\n               msg);\n        gf_event(EVENT_IMPORT_VOLUME_FAILED, \"volume=%s\", new_volinfo->volname);\n    }\n    gf_msg_debug(\"glusterd\", 0, \"Returning with %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_volume_disconnect_all_bricks(glusterd_volinfo_t *volinfo)\n{\n    int ret = 0;\n    glusterd_brickinfo_t *brickinfo = NULL;\n    glusterd_brick_proc_t *brick_proc = NULL;\n    int brick_count = 0;\n\n    GF_ASSERT(volinfo);\n\n    cds_list_for_each_entry(brickinfo, &volinfo->bricks, brick_list)\n    {\n        if (glusterd_is_brick_started(brickinfo)) {\n            /* If brick multiplexing is enabled then we can't\n             * blindly set brickinfo->rpc to NULL as it might impact\n             * the other attached bricks.\n             */\n            ret = glusterd_brick_proc_for_port(brickinfo->port, &brick_proc);\n            if (!ret) {\n                brick_count = brick_proc->brick_count;\n            }\n            if (!is_brick_mx_enabled() || brick_count == 0) {\n                ret = glusterd_brick_disconnect(brickinfo);\n                if (ret) {\n                    gf_msg(\"glusterd\", GF_LOG_ERROR, 0,\n                           GD_MSD_BRICK_DISCONNECT_FAIL,\n                           \"Failed to \"\n                           \"disconnect %s:%s\",\n                           brickinfo->hostname, brickinfo->path);\n                    break;\n                }\n            }\n        }\n    }\n\n    return ret;\n}\n\nint32_t\nglusterd_volinfo_copy_brickinfo(glusterd_volinfo_t *old_volinfo,\n                                glusterd_volinfo_t *new_volinfo)\n{\n    glusterd_brickinfo_t *new_brickinfo = NULL;\n    glusterd_brickinfo_t *old_brickinfo = NULL;\n    glusterd_brickinfo_t *new_ta_brickinfo = NULL;\n    glusterd_brickinfo_t *old_ta_brickinfo = NULL;\n    glusterd_conf_t *priv = NULL;\n    int ret = 0;\n    xlator_t *this = NULL;\n    char abspath[PATH_MAX] = \"\";\n\n    GF_ASSERT(new_volinfo);\n    GF_ASSERT(old_volinfo);\n    this = THIS;\n    GF_ASSERT(this);\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    cds_list_for_each_entry(new_brickinfo, &new_volinfo->bricks, brick_list)\n    {\n        ret = glusterd_volume_brickinfo_get(\n            new_brickinfo->uuid, new_brickinfo->hostname, new_brickinfo->path,\n            old_volinfo, &old_brickinfo);\n        if (ret == 0) {\n            new_brickinfo->port = old_brickinfo->port;\n\n            if (old_brickinfo->real_path[0] == '\\0') {\n                if (!realpath(new_brickinfo->path, abspath)) {\n                    /* Here an ENOENT should also be a\n                     * failure as the brick is expected to\n                     * be in existence\n                     */\n                    gf_msg(this->name, GF_LOG_CRITICAL, errno,\n                           GD_MSG_BRICKINFO_CREATE_FAIL,\n                           \"realpath () failed for brick \"\n                           \"%s. The underlying filesystem \"\n                           \"may be in bad state\",\n                           new_brickinfo->path);\n                    ret = -1;\n                    goto out;\n                }\n                if (strlen(abspath) >= sizeof(new_brickinfo->real_path)) {\n                    ret = -1;\n                    goto out;\n                }\n                (void)strncpy(new_brickinfo->real_path, abspath,\n                              sizeof(new_brickinfo->real_path));\n            } else {\n                (void)strncpy(new_brickinfo->real_path,\n                              old_brickinfo->real_path,\n                              sizeof(new_brickinfo->real_path));\n            }\n        }\n    }\n    if (new_volinfo->thin_arbiter_count == 1) {\n        cds_list_for_each_entry(new_ta_brickinfo, &new_volinfo->ta_bricks,\n                                brick_list)\n        {\n            ret = glusterd_volume_ta_brickinfo_get(\n                new_ta_brickinfo->uuid, new_ta_brickinfo->hostname,\n                new_ta_brickinfo->path, old_volinfo, &old_ta_brickinfo);\n            if (ret == 0) {\n                new_ta_brickinfo->port = old_ta_brickinfo->port;\n\n                if (old_ta_brickinfo->real_path[0] == '\\0') {\n                    if (!realpath(new_ta_brickinfo->path, abspath)) {\n                        /* Here an ENOENT should also be a\n                         * failure as the brick is expected to\n                         * be in existence\n                         */\n                        gf_msg(this->name, GF_LOG_CRITICAL, errno,\n                               GD_MSG_BRICKINFO_CREATE_FAIL,\n                               \"realpath () failed for brick \"\n                               \"%s. The underlying filesystem \"\n                               \"may be in bad state\",\n                               new_brickinfo->path);\n                        ret = -1;\n                        goto out;\n                    }\n                    if (strlen(abspath) >=\n                        sizeof(new_ta_brickinfo->real_path)) {\n                        ret = -1;\n                        goto out;\n                    }\n                    (void)strncpy(new_ta_brickinfo->real_path, abspath,\n                                  sizeof(new_ta_brickinfo->real_path));\n                } else {\n                    (void)strncpy(new_ta_brickinfo->real_path,\n                                  old_ta_brickinfo->real_path,\n                                  sizeof(new_ta_brickinfo->real_path));\n                }\n            }\n        }\n    }\n    ret = 0;\n\nout:\n    return ret;\n}\n\nint32_t\nglusterd_volinfo_stop_stale_bricks(glusterd_volinfo_t *new_volinfo,\n                                   glusterd_volinfo_t *old_volinfo)\n{\n    glusterd_brickinfo_t *new_brickinfo = NULL;\n    glusterd_brickinfo_t *old_brickinfo = NULL;\n\n    int ret = 0;\n    GF_ASSERT(new_volinfo);\n    GF_ASSERT(old_volinfo);\n    if (_gf_false == glusterd_is_volume_started(old_volinfo))\n        goto out;\n    cds_list_for_each_entry(old_brickinfo, &old_volinfo->bricks, brick_list)\n    {\n        ret = glusterd_volume_brickinfo_get(\n            old_brickinfo->uuid, old_brickinfo->hostname, old_brickinfo->path,\n            new_volinfo, &new_brickinfo);\n        /* If the brick is stale, i.e it's not a part of the new volume\n         * or if it's part of the new volume and is pending a snap,\n         * then stop the brick process\n         */\n        if (ret || (new_brickinfo->snap_status == -1)) {\n            /*TODO: may need to switch to 'atomic' flavour of\n             * brick_stop, once we make peer rpc program also\n             * synctask enabled*/\n            ret = glusterd_brick_stop(old_volinfo, old_brickinfo, _gf_false);\n            if (ret)\n                gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_BRICK_STOP_FAIL,\n                       \"Failed to stop\"\n                       \" brick %s:%s\",\n                       old_brickinfo->hostname, old_brickinfo->path);\n        }\n    }\n    ret = 0;\nout:\n    gf_msg_debug(\"glusterd\", 0, \"Returning with %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_delete_stale_volume(glusterd_volinfo_t *stale_volinfo,\n                             glusterd_volinfo_t *valid_volinfo)\n{\n    int32_t ret = -1;\n    glusterd_volinfo_t *temp_volinfo = NULL;\n    glusterd_volinfo_t *voliter = NULL;\n    xlator_t *this = NULL;\n    glusterd_svc_t *svc = NULL;\n\n    GF_ASSERT(stale_volinfo);\n    GF_ASSERT(valid_volinfo);\n    this = THIS;\n    GF_ASSERT(this);\n\n    /* Copy snap_volumes list from stale_volinfo to valid_volinfo */\n    valid_volinfo->snap_count = 0;\n    cds_list_for_each_entry_safe(voliter, temp_volinfo,\n                                 &stale_volinfo->snap_volumes, snapvol_list)\n    {\n        cds_list_add_tail(&voliter->snapvol_list, &valid_volinfo->snap_volumes);\n        valid_volinfo->snap_count++;\n    }\n\n    if ((!gf_uuid_is_null(stale_volinfo->restored_from_snap)) &&\n        (gf_uuid_compare(stale_volinfo->restored_from_snap,\n                         valid_volinfo->restored_from_snap))) {\n        ret = glusterd_lvm_snapshot_remove(NULL, stale_volinfo);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_WARNING, 0, GD_MSG_SNAP_REMOVE_FAIL,\n                   \"Failed to remove lvm snapshot for \"\n                   \"restored volume %s\",\n                   stale_volinfo->volname);\n        }\n    }\n\n    /* If stale volume is in started state, stop the stale bricks if the new\n     * volume is started else, stop all bricks.\n     * We don't want brick_rpc_notify to access already deleted brickinfo,\n     * so disconnect all bricks from stale_volinfo (unconditionally), since\n     * they are being deleted subsequently.\n     */\n    if (glusterd_is_volume_started(stale_volinfo)) {\n        if (glusterd_is_volume_started(valid_volinfo)) {\n            (void)glusterd_volinfo_stop_stale_bricks(valid_volinfo,\n                                                     stale_volinfo);\n\n        } else {\n            (void)glusterd_stop_bricks(stale_volinfo);\n        }\n\n        (void)glusterd_volume_disconnect_all_bricks(stale_volinfo);\n    }\n    /* Delete all the bricks and stores and vol files. They will be created\n     * again by the valid_volinfo. Volume store delete should not be\n     * performed because some of the bricks could still be running,\n     * keeping pid files under run directory\n     */\n    (void)glusterd_delete_all_bricks(stale_volinfo);\n    if (stale_volinfo->shandle) {\n        sys_unlink(stale_volinfo->shandle->path);\n        (void)gf_store_handle_destroy(stale_volinfo->shandle);\n        stale_volinfo->shandle = NULL;\n    }\n\n    /* Marking volume as stopped, so that svc manager stops snapd\n     * and we are deleting the volume.\n     */\n    stale_volinfo->status = GLUSTERD_STATUS_STOPPED;\n\n    if (!stale_volinfo->is_snap_volume) {\n        svc = &(stale_volinfo->snapd.svc);\n        (void)svc->manager(svc, stale_volinfo, PROC_START_NO_WAIT);\n    }\n    svc = &(stale_volinfo->shd.svc);\n    (void)svc->manager(svc, stale_volinfo, PROC_START_NO_WAIT);\n\n    (void)glusterd_volinfo_remove(stale_volinfo);\n\n    return 0;\n}\n\n/* This function updates the rebalance information of the new volinfo using the\n * information from the old volinfo.\n */\nint\ngd_check_and_update_rebalance_info(glusterd_volinfo_t *old_volinfo,\n                                   glusterd_volinfo_t *new_volinfo)\n{\n    int ret = -1;\n    glusterd_rebalance_t *old = NULL;\n    glusterd_rebalance_t *new = NULL;\n\n    GF_ASSERT(old_volinfo);\n    GF_ASSERT(new_volinfo);\n\n    old = &(old_volinfo->rebal);\n    new = &(new_volinfo->rebal);\n\n    // Disconnect from rebalance process\n    if (glusterd_defrag_rpc_get(old->defrag)) {\n        rpc_transport_disconnect(old->defrag->rpc->conn.trans, _gf_false);\n        glusterd_defrag_rpc_put(old->defrag);\n    }\n\n    if (!gf_uuid_is_null(old->rebalance_id) &&\n        gf_uuid_compare(old->rebalance_id, new->rebalance_id)) {\n        (void)gd_stop_rebalance_process(old_volinfo);\n        goto out;\n    }\n\n    /* If the tasks match, copy the status and other information of the\n     * rebalance process from old_volinfo to new_volinfo\n     */\n    new->defrag_status = old->defrag_status;\n    new->rebalance_files = old->rebalance_files;\n    new->rebalance_data = old->rebalance_data;\n    new->lookedup_files = old->lookedup_files;\n    new->skipped_files = old->skipped_files;\n    new->rebalance_failures = old->rebalance_failures;\n    new->rebalance_time = old->rebalance_time;\n\n    /* glusterd_rebalance_t.{op, id, defrag_cmd} are copied during volume\n     * import a new defrag object should come to life with rebalance being\n     * restarted\n     */\nout:\n    return ret;\n}\n\nstatic int32_t\nglusterd_import_friend_volume(dict_t *peer_data, int count)\n{\n    int32_t ret = -1;\n    glusterd_conf_t *priv = NULL;\n    xlator_t *this = NULL;\n    glusterd_volinfo_t *old_volinfo = NULL;\n    glusterd_volinfo_t *new_volinfo = NULL;\n    glusterd_svc_t *svc = NULL;\n    int32_t update = 0;\n    char key[64] = \"\";\n\n    GF_ASSERT(peer_data);\n\n    this = THIS;\n    GF_ASSERT(this);\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    ret = snprintf(key, sizeof(key), \"volume%d.update\", count);\n    ret = dict_get_int32n(peer_data, key, ret, &update);\n    if (ret || !update) {\n        /* if update is 0 that means the volume is not imported */\n        goto out;\n    }\n\n    ret = glusterd_import_volinfo(peer_data, count, &new_volinfo, \"volume\");\n    if (ret)\n        goto out;\n\n    if (!new_volinfo) {\n        gf_msg_debug(this->name, 0, \"Not importing snap volume\");\n        goto out;\n    }\n\n    ret = glusterd_volinfo_find(new_volinfo->volname, &old_volinfo);\n    if (0 == ret) {\n        if (new_volinfo->version <= old_volinfo->version) {\n            /* When this condition is true, it already means that\n             * the other synctask thread of import volume has\n             * already up to date volume, so just ignore this volume\n             * now\n             */\n            goto out;\n        }\n        /* Ref count the old_volinfo such that deleting it doesn't crash\n         * if its been already in use by other thread\n         */\n        glusterd_volinfo_ref(old_volinfo);\n        (void)gd_check_and_update_rebalance_info(old_volinfo, new_volinfo);\n\n        /* Copy brick ports & real_path from the old volinfo always.\n         * The old_volinfo will be cleaned up and this information\n         * could be lost\n         */\n        (void)glusterd_volinfo_copy_brickinfo(old_volinfo, new_volinfo);\n\n        (void)glusterd_delete_stale_volume(old_volinfo, new_volinfo);\n        glusterd_volinfo_unref(old_volinfo);\n    }\n\n    ret = glusterd_store_volinfo(new_volinfo, GLUSTERD_VOLINFO_VER_AC_NONE);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_VOLINFO_STORE_FAIL,\n               \"Failed to store \"\n               \"volinfo for volume %s\",\n               new_volinfo->volname);\n        goto out;\n    }\n\n    if (glusterd_is_volume_started(new_volinfo)) {\n        (void)glusterd_start_bricks(new_volinfo);\n        if (glusterd_is_snapd_enabled(new_volinfo)) {\n            svc = &(new_volinfo->snapd.svc);\n            if (svc->manager(svc, new_volinfo, PROC_START_NO_WAIT)) {\n                gf_event(EVENT_SVC_MANAGER_FAILED, \"svc_name=%s\", svc->name);\n            }\n        }\n        svc = &(new_volinfo->shd.svc);\n        if (svc->manager(svc, new_volinfo, PROC_START_NO_WAIT)) {\n            gf_event(EVENT_SVC_MANAGER_FAILED, \"svc_name=%s\", svc->name);\n        }\n    }\n\n    ret = glusterd_create_volfiles_and_notify_services(new_volinfo);\n    if (ret)\n        goto out;\n\n    ret = glusterd_import_quota_conf(peer_data, count, new_volinfo, \"volume\");\n    if (ret) {\n        gf_event(EVENT_IMPORT_QUOTA_CONF_FAILED, \"volume=%s\",\n                 new_volinfo->volname);\n        goto out;\n    }\n    glusterd_list_add_order(&new_volinfo->vol_list, &priv->volumes,\n                            glusterd_compare_volume_name);\n\nout:\n    gf_msg_debug(\"glusterd\", 0, \"Returning with ret: %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_import_friend_volumes_synctask(void *opaque)\n{\n    int32_t ret = -1;\n    int32_t count = 0;\n    int i = 1;\n    xlator_t *this = NULL;\n    glusterd_conf_t *conf = NULL;\n    dict_t *peer_data = NULL;\n    glusterd_friend_synctask_args_t *arg = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    conf = this->private;\n    GF_ASSERT(conf);\n\n    arg = opaque;\n    if (!arg)\n        goto out;\n\n    peer_data = dict_new();\n    if (!peer_data)\n        goto out;\n\n    ret = dict_unserialize(arg->dict_buf, arg->dictlen, &peer_data);\n    if (ret) {\n        errno = ENOMEM;\n        goto out;\n    }\n\n    ret = dict_get_int32n(peer_data, \"count\", SLEN(\"count\"), &count);\n    if (ret)\n        goto out;\n\n    synclock_lock(&conf->big_lock);\n\n    /* We need to ensure that importing a volume shouldn't race with an\n     * other thread where as part of restarting glusterd, bricks are\n     * restarted (refer glusterd_restart_bricks ())\n     */\n    while (conf->restart_bricks) {\n        synclock_unlock(&conf->big_lock);\n        sleep(2);\n        synclock_lock(&conf->big_lock);\n    }\n    conf->restart_bricks = _gf_true;\n\n    while (i <= count) {\n        ret = glusterd_import_friend_volume(peer_data, i);\n        if (ret) {\n            conf->restart_bricks = _gf_false;\n            goto out;\n        }\n        i++;\n    }\n    glusterd_svcs_manager(NULL);\n    conf->restart_bricks = _gf_false;\nout:\n    if (peer_data)\n        dict_unref(peer_data);\n    if (arg) {\n        if (arg->dict_buf)\n            GF_FREE(arg->dict_buf);\n        GF_FREE(arg);\n    }\n\n    gf_msg_debug(\"glusterd\", 0, \"Returning with %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_import_friend_volumes(dict_t *peer_data)\n{\n    int32_t ret = -1;\n    int32_t count = 0;\n    int i = 1;\n\n    GF_ASSERT(peer_data);\n\n    ret = dict_get_int32n(peer_data, \"count\", SLEN(\"count\"), &count);\n    if (ret)\n        goto out;\n\n    while (i <= count) {\n        ret = glusterd_import_friend_volume(peer_data, i);\n        if (ret)\n            goto out;\n        i++;\n    }\n\nout:\n    gf_msg_debug(\"glusterd\", 0, \"Returning with %d\", ret);\n    return ret;\n}\n\nint\nglusterd_get_global_server_quorum_ratio(dict_t *opts, double *quorum)\n{\n    int ret = -1;\n    char *quorum_str = NULL;\n\n    ret = dict_get_strn(opts, GLUSTERD_QUORUM_RATIO_KEY,\n                        SLEN(GLUSTERD_QUORUM_RATIO_KEY), &quorum_str);\n    if (ret)\n        goto out;\n\n    ret = gf_string2percent(quorum_str, quorum);\n    if (ret)\n        goto out;\n    ret = 0;\nout:\n    return ret;\n}\n\nint\nglusterd_get_global_opt_version(dict_t *opts, uint32_t *version)\n{\n    int ret = -1;\n    char *version_str = NULL;\n\n    ret = dict_get_strn(opts, GLUSTERD_GLOBAL_OPT_VERSION,\n                        SLEN(GLUSTERD_GLOBAL_OPT_VERSION), &version_str);\n    if (ret)\n        goto out;\n\n    ret = gf_string2uint(version_str, version);\n    if (ret)\n        goto out;\n    ret = 0;\nout:\n    return ret;\n}\n\nint\nglusterd_get_next_global_opt_version_str(dict_t *opts, char **version_str)\n{\n    int ret = -1;\n    char version_string[64] = \"\";\n    uint32_t version = 0;\n\n    ret = glusterd_get_global_opt_version(opts, &version);\n    if (ret)\n        goto out;\n    version++;\n    snprintf(version_string, sizeof(version_string), \"%\" PRIu32, version);\n    *version_str = gf_strdup(version_string);\n    if (*version_str)\n        ret = 0;\nout:\n    return ret;\n}\n\nint32_t\nglusterd_import_global_opts(dict_t *friend_data)\n{\n    xlator_t *this = NULL;\n    glusterd_conf_t *conf = NULL;\n    int ret = -1;\n    dict_t *import_options = NULL;\n    int count = 0;\n    uint32_t local_version = 0;\n    uint32_t remote_version = 0;\n    double old_quorum = 0.0;\n    double new_quorum = 0.0;\n\n    this = THIS;\n    conf = this->private;\n\n    ret = dict_get_int32n(friend_data, \"global-opt-count\",\n                          SLEN(\"global-opt-count\"), &count);\n    if (ret) {\n        // old version peer\n        ret = 0;\n        goto out;\n    }\n\n    import_options = dict_new();\n    if (!import_options)\n        goto out;\n    ret = import_prdict_dict(friend_data, import_options, \"key\", \"val\", count,\n                             \"global\");\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_GLOBAL_OPT_IMPORT_FAIL,\n               \"Failed to import\"\n               \" global options\");\n        goto out;\n    }\n\n    /* Not handling ret since server-quorum-ratio might not yet be set */\n    ret = glusterd_get_global_server_quorum_ratio(conf->opts, &old_quorum);\n    ret = glusterd_get_global_server_quorum_ratio(import_options, &new_quorum);\n\n    ret = glusterd_get_global_opt_version(conf->opts, &local_version);\n    if (ret)\n        goto out;\n    ret = glusterd_get_global_opt_version(import_options, &remote_version);\n    if (ret)\n        goto out;\n\n    if (remote_version > local_version) {\n        ret = glusterd_store_options(this, import_options);\n        if (ret)\n            goto out;\n        dict_unref(conf->opts);\n        conf->opts = dict_ref(import_options);\n\n        /* If server quorum ratio has changed, restart bricks to\n         * recompute if quorum is met. If quorum is not met bricks are\n         * not started and those already running are stopped\n         */\n        if (old_quorum != new_quorum) {\n            glusterd_launch_synctask(glusterd_restart_bricks, NULL);\n        }\n    }\n\n    ret = 0;\nout:\n    if (import_options)\n        dict_unref(import_options);\n    return ret;\n}\n\nint32_t\nglusterd_compare_friend_data(dict_t *peer_data, int32_t *status, char *hostname)\n{\n    int32_t ret = -1;\n    int32_t count = 0;\n    int i = 1;\n    gf_boolean_t update = _gf_false;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n    glusterd_friend_synctask_args_t *arg = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n    GF_ASSERT(peer_data);\n    GF_ASSERT(status);\n\n    priv = this->private;\n    GF_ASSERT(priv);\n    ret = glusterd_import_global_opts(peer_data);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_GLOBAL_OPT_IMPORT_FAIL,\n               \"Importing global \"\n               \"options failed\");\n        goto out;\n    }\n\n    ret = dict_get_int32n(peer_data, \"count\", SLEN(\"count\"), &count);\n    if (ret)\n        goto out;\n\n    while (i <= count) {\n        ret = glusterd_compare_friend_volume(peer_data, i, status, hostname);\n        if (ret)\n            goto out;\n\n        if (GLUSTERD_VOL_COMP_RJT == *status) {\n            ret = 0;\n            goto out;\n        }\n        if (GLUSTERD_VOL_COMP_UPDATE_REQ == *status) {\n            update = _gf_true;\n        }\n        i++;\n    }\n\n    if (update) {\n        /* Launch the import friend volume as a separate synctask as it\n         * has to trigger start bricks where we may need to wait for the\n         * first brick to come up before attaching the subsequent bricks\n         * in case brick multiplexing is enabled\n         */\n        arg = GF_CALLOC(1, sizeof(*arg), gf_common_mt_char);\n        ret = dict_allocate_and_serialize(peer_data, &arg->dict_buf,\n                                          &arg->dictlen);\n        if (ret < 0) {\n            gf_log(this->name, GF_LOG_ERROR,\n                   \"dict_serialize failed while handling \"\n                   \" import friend volume request\");\n            goto out;\n        }\n\n        glusterd_launch_synctask(glusterd_import_friend_volumes_synctask, arg);\n    }\n\nout:\n    if (ret && arg) {\n        GF_FREE(arg);\n    }\n    gf_msg_debug(this->name, 0, \"Returning with ret: %d, status: %d\", ret,\n                 *status);\n    return ret;\n}\n\nstruct rpc_clnt *\nglusterd_defrag_rpc_get(glusterd_defrag_info_t *defrag)\n{\n    struct rpc_clnt *rpc = NULL;\n\n    if (!defrag)\n        return NULL;\n\n    LOCK(&defrag->lock);\n    {\n        rpc = rpc_clnt_ref(defrag->rpc);\n    }\n    UNLOCK(&defrag->lock);\n    return rpc;\n}\n\nstruct rpc_clnt *\nglusterd_defrag_rpc_put(glusterd_defrag_info_t *defrag)\n{\n    struct rpc_clnt *rpc = NULL;\n\n    if (!defrag)\n        return NULL;\n\n    LOCK(&defrag->lock);\n    {\n        rpc = rpc_clnt_unref(defrag->rpc);\n        defrag->rpc = rpc;\n    }\n    UNLOCK(&defrag->lock);\n    return rpc;\n}\n\nstruct rpc_clnt *\nglusterd_pending_node_get_rpc(glusterd_pending_node_t *pending_node)\n{\n    struct rpc_clnt *rpc = NULL;\n    glusterd_brickinfo_t *brickinfo = NULL;\n    glusterd_volinfo_t *volinfo = NULL;\n    glusterd_svc_t *svc = NULL;\n\n    GF_VALIDATE_OR_GOTO(THIS->name, pending_node, out);\n    GF_VALIDATE_OR_GOTO(THIS->name, pending_node->node, out);\n\n    if (pending_node->type == GD_NODE_BRICK) {\n        brickinfo = pending_node->node;\n        rpc = brickinfo->rpc;\n\n    } else if (pending_node->type == GD_NODE_SHD ||\n               pending_node->type == GD_NODE_NFS ||\n               pending_node->type == GD_NODE_QUOTAD ||\n               pending_node->type == GD_NODE_SCRUB) {\n        svc = pending_node->node;\n        rpc = svc->conn.rpc;\n    } else if (pending_node->type == GD_NODE_REBALANCE) {\n        volinfo = pending_node->node;\n        rpc = glusterd_defrag_rpc_get(volinfo->rebal.defrag);\n\n    } else if (pending_node->type == GD_NODE_SNAPD) {\n        volinfo = pending_node->node;\n        rpc = volinfo->snapd.svc.conn.rpc;\n    } else {\n        GF_ASSERT(0);\n    }\n\nout:\n    return rpc;\n}\n\nvoid\nglusterd_pending_node_put_rpc(glusterd_pending_node_t *pending_node)\n{\n    glusterd_volinfo_t *volinfo = NULL;\n\n    switch (pending_node->type) {\n        case GD_NODE_REBALANCE:\n            volinfo = pending_node->node;\n            glusterd_defrag_rpc_put(volinfo->rebal.defrag);\n            break;\n\n        default:\n            break;\n    }\n}\n\nint32_t\nglusterd_unlink_file(char *sockfpath)\n{\n    int ret = 0;\n\n    ret = sys_unlink(sockfpath);\n    if (ret) {\n        if (ENOENT == errno)\n            ret = 0;\n        else\n            gf_msg(THIS->name, GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n                   \"Failed to remove %s\"\n                   \" error: %s\",\n                   sockfpath, strerror(errno));\n    }\n\n    return ret;\n}\n\nvoid\nglusterd_nfs_pmap_deregister()\n{\n    if (pmap_unset(MOUNT_PROGRAM, MOUNTV3_VERSION))\n        gf_msg(\"glusterd\", GF_LOG_INFO, 0, GD_MSG_DEREGISTER_SUCCESS,\n               \"De-registered MOUNTV3 successfully\");\n    else\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_PMAP_UNSET_FAIL,\n               \"De-register MOUNTV3 is unsuccessful\");\n\n    if (pmap_unset(MOUNT_PROGRAM, MOUNTV1_VERSION))\n        gf_msg(\"glusterd\", GF_LOG_INFO, 0, GD_MSG_DEREGISTER_SUCCESS,\n               \"De-registered MOUNTV1 successfully\");\n    else\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_PMAP_UNSET_FAIL,\n               \"De-register MOUNTV1 is unsuccessful\");\n\n    if (pmap_unset(NFS_PROGRAM, NFSV3_VERSION))\n        gf_msg(\"glusterd\", GF_LOG_INFO, 0, GD_MSG_DEREGISTER_SUCCESS,\n               \"De-registered NFSV3 successfully\");\n    else\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_PMAP_UNSET_FAIL,\n               \"De-register NFSV3 is unsuccessful\");\n\n    if (pmap_unset(NLM_PROGRAM, NLMV4_VERSION))\n        gf_msg(\"glusterd\", GF_LOG_INFO, 0, GD_MSG_DEREGISTER_SUCCESS,\n               \"De-registered NLM v4 successfully\");\n    else\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_PMAP_UNSET_FAIL,\n               \"De-registration of NLM v4 failed\");\n\n    if (pmap_unset(NLM_PROGRAM, NLMV1_VERSION))\n        gf_msg(\"glusterd\", GF_LOG_INFO, 0, GD_MSG_DEREGISTER_SUCCESS,\n               \"De-registered NLM v1 successfully\");\n    else\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_PMAP_UNSET_FAIL,\n               \"De-registration of NLM v1 failed\");\n\n    if (pmap_unset(ACL_PROGRAM, ACLV3_VERSION))\n        gf_msg(\"glusterd\", GF_LOG_INFO, 0, GD_MSG_DEREGISTER_SUCCESS,\n               \"De-registered ACL v3 successfully\");\n    else\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_PMAP_UNSET_FAIL,\n               \"De-registration of ACL v3 failed\");\n}\n\nint\nglusterd_add_node_to_dict(char *server, dict_t *dict, int count,\n                          dict_t *vol_opts)\n{\n    int ret = -1;\n    char pidfile[PATH_MAX] = \"\";\n    gf_boolean_t running = _gf_false;\n    int pid = -1;\n    int port = 0;\n    glusterd_svc_t *svc = NULL;\n    char key[64] = \"\";\n    int keylen;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    if (!strcmp(server, \"\")) {\n        ret = 0;\n        goto out;\n    }\n\n    glusterd_svc_build_pidfile_path(server, priv->rundir, pidfile,\n                                    sizeof(pidfile));\n\n    if (strcmp(server, priv->nfs_svc.name) == 0)\n        svc = &(priv->nfs_svc);\n    else if (strcmp(server, priv->quotad_svc.name) == 0)\n        svc = &(priv->quotad_svc);\n    else if (strcmp(server, priv->bitd_svc.name) == 0)\n        svc = &(priv->bitd_svc);\n    else if (strcmp(server, priv->scrub_svc.name) == 0)\n        svc = &(priv->scrub_svc);\n    else {\n        ret = 0;\n        goto out;\n    }\n\n    // Consider service to be running only when glusterd sees it Online\n    if (svc->online)\n        running = gf_is_service_running(pidfile, &pid);\n\n    /* For nfs-servers/self-heal-daemon setting\n     * brick<n>.hostname = \"NFS Server\" / \"Self-heal Daemon\"\n     * brick<n>.path = uuid\n     * brick<n>.port = 0\n     *\n     * This might be confusing, but cli displays the name of\n     * the brick as hostname+path, so this will make more sense\n     * when output.\n     */\n\n    keylen = snprintf(key, sizeof(key), \"brick%d.hostname\", count);\n    if (!strcmp(server, priv->nfs_svc.name))\n        ret = dict_set_nstrn(dict, key, keylen, \"NFS Server\",\n                             SLEN(\"NFS Server\"));\n    else if (!strcmp(server, priv->quotad_svc.name))\n        ret = dict_set_nstrn(dict, key, keylen, \"Quota Daemon\",\n                             SLEN(\"Quota Daemon\"));\n    else if (!strcmp(server, priv->bitd_svc.name))\n        ret = dict_set_nstrn(dict, key, keylen, \"Bitrot Daemon\",\n                             SLEN(\"Bitrot Daemon\"));\n    else if (!strcmp(server, priv->scrub_svc.name))\n        ret = dict_set_nstrn(dict, key, keylen, \"Scrubber Daemon\",\n                             SLEN(\"Scrubber Daemon\"));\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"brick%d.path\", count);\n    ret = dict_set_dynstrn(dict, key, keylen, gf_strdup(uuid_utoa(MY_UUID)));\n    if (ret)\n        goto out;\n\n    /* Port is available only for the NFS server.\n     * Self-heal daemon doesn't provide any port for access\n     * by entities other than gluster.\n     */\n    if (!strcmp(server, priv->nfs_svc.name)) {\n        if (dict_getn(vol_opts, \"nfs.port\", SLEN(\"nfs.port\"))) {\n            ret = dict_get_int32n(vol_opts, \"nfs.port\", SLEN(\"nfs.port\"),\n                                  &port);\n            if (ret)\n                goto out;\n        } else\n            port = GF_NFS3_PORT;\n    }\n    keylen = snprintf(key, sizeof(key), \"brick%d.port\", count);\n    ret = dict_set_int32n(dict, key, keylen, port);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"brick%d.pid\", count);\n    ret = dict_set_int32n(dict, key, keylen, pid);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"brick%d.status\", count);\n    ret = dict_set_int32n(dict, key, keylen, running);\n    if (ret)\n        goto out;\n\nout:\n    gf_msg_debug(THIS->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_remote_hostname_get(rpcsvc_request_t *req, char *remote_host, int len)\n{\n    GF_ASSERT(req);\n    GF_ASSERT(remote_host);\n    GF_ASSERT(req->trans);\n\n    char *name = NULL;\n    char *hostname = NULL;\n    char *tmp_host = NULL;\n    char *canon = NULL;\n    int ret = 0;\n\n    name = req->trans->peerinfo.identifier;\n    tmp_host = gf_strdup(name);\n    if (tmp_host)\n        get_host_name(tmp_host, &hostname);\n\n    GF_ASSERT(hostname);\n    if (!hostname) {\n        memset(remote_host, 0, len);\n        ret = -1;\n        goto out;\n    }\n\n    if ((gf_get_hostname_from_ip(hostname, &canon) == 0) && canon) {\n        GF_FREE(tmp_host);\n        tmp_host = hostname = canon;\n    }\n\n    (void)snprintf(remote_host, len, \"%s\", hostname);\n\nout:\n    GF_FREE(tmp_host);\n    return ret;\n}\n\ngf_boolean_t\nglusterd_are_all_volumes_stopped()\n{\n    glusterd_conf_t *priv = NULL;\n    xlator_t *this = NULL;\n    glusterd_volinfo_t *voliter = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    cds_list_for_each_entry(voliter, &priv->volumes, vol_list)\n    {\n        if (voliter->status == GLUSTERD_STATUS_STARTED)\n            return _gf_false;\n    }\n\n    return _gf_true;\n}\n\ngf_boolean_t\nglusterd_all_shd_compatible_volumes_stopped()\n{\n    glusterd_conf_t *priv = NULL;\n    xlator_t *this = NULL;\n    glusterd_volinfo_t *voliter = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    cds_list_for_each_entry(voliter, &priv->volumes, vol_list)\n    {\n        if (!glusterd_is_shd_compatible_volume(voliter))\n            continue;\n        if (voliter->status == GLUSTERD_STATUS_STARTED)\n            return _gf_false;\n    }\n\n    return _gf_true;\n}\n\ngf_boolean_t\nglusterd_all_volumes_with_quota_stopped()\n{\n    glusterd_conf_t *priv = NULL;\n    xlator_t *this = NULL;\n    glusterd_volinfo_t *voliter = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    cds_list_for_each_entry(voliter, &priv->volumes, vol_list)\n    {\n        if (!glusterd_is_volume_quota_enabled(voliter))\n            continue;\n        if (voliter->status == GLUSTERD_STATUS_STARTED)\n            return _gf_false;\n    }\n\n    return _gf_true;\n}\n\ngf_boolean_t\nglusterd_have_volumes()\n{\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n    gf_boolean_t volumes_exist = _gf_false;\n\n    this = THIS;\n    GF_VALIDATE_OR_GOTO(\"glusterd\", (this != NULL), out);\n\n    priv = this->private;\n    GF_VALIDATE_OR_GOTO(this->name, (priv != NULL), out);\n\n    volumes_exist = !cds_list_empty(&priv->volumes);\nout:\n    return volumes_exist;\n}\n\nint\nglusterd_volume_count_get(void)\n{\n    glusterd_volinfo_t *tmp_volinfo = NULL;\n    int32_t ret = 0;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    priv = this->private;\n\n    cds_list_for_each_entry(tmp_volinfo, &priv->volumes, vol_list) { ret++; }\n\n    gf_msg_debug(\"glusterd\", 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_brickinfo_get(uuid_t uuid, char *hostname, char *path,\n                       glusterd_brickinfo_t **brickinfo)\n{\n    glusterd_volinfo_t *volinfo = NULL;\n    glusterd_conf_t *priv = NULL;\n    xlator_t *this = NULL;\n    int ret = -1;\n\n    GF_ASSERT(path);\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    priv = this->private;\n\n    cds_list_for_each_entry(volinfo, &priv->volumes, vol_list)\n    {\n        ret = glusterd_volume_brickinfo_get(uuid, hostname, path, volinfo,\n                                            brickinfo);\n        if (ret == 0)\n            /*Found*/\n            goto out;\n    }\nout:\n    return ret;\n}\n\nstatic int32_t\nmy_callback(struct rpc_req *req, struct iovec *iov, int count, void *v_frame)\n{\n    call_frame_t *frame = v_frame;\n    glusterd_conf_t *conf = frame->this->private;\n\n    GF_ATOMIC_DEC(conf->blockers);\n\n    STACK_DESTROY(frame->root);\n    return 0;\n}\n\nstatic int32_t\nattach_brick_callback(struct rpc_req *req, struct iovec *iov, int count,\n                      void *v_frame)\n{\n    call_frame_t *frame = v_frame;\n    glusterd_conf_t *conf = frame->this->private;\n    glusterd_brickinfo_t *brickinfo = frame->local;\n    glusterd_brickinfo_t *other_brick = frame->cookie;\n    glusterd_volinfo_t *volinfo = NULL;\n    xlator_t *this = THIS;\n    int ret = -1;\n    char pidfile1[PATH_MAX] = \"\";\n    char pidfile2[PATH_MAX] = \"\";\n    gf_getspec_rsp rsp = {\n        0,\n    };\n    int last_brick = -1;\n\n    frame->local = NULL;\n    frame->cookie = NULL;\n\n    if (!iov) {\n        gf_log(frame->this->name, GF_LOG_ERROR, \"iov is NULL\");\n        ret = -1;\n        goto out;\n    }\n\n    ret = xdr_to_generic(*iov, &rsp, (xdrproc_t)xdr_gf_getspec_rsp);\n    if (ret < 0) {\n        gf_log(frame->this->name, GF_LOG_ERROR, \"XDR decoding error\");\n        ret = -1;\n        goto out;\n    }\n\n    ret = glusterd_get_volinfo_from_brick(other_brick->path, &volinfo);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_VOLINFO_GET_FAIL,\n               \"Failed to get volinfo\"\n               \" from brick(%s) so  pidfile copying/unlink will fail\",\n               other_brick->path);\n        goto out;\n    }\n    GLUSTERD_GET_BRICK_PIDFILE(pidfile1, volinfo, other_brick, conf);\n    volinfo = NULL;\n\n    ret = glusterd_get_volinfo_from_brick(brickinfo->path, &volinfo);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_VOLINFO_GET_FAIL,\n               \"Failed to get volinfo\"\n               \" from brick(%s) so  pidfile copying/unlink will fail\",\n               brickinfo->path);\n        goto out;\n    }\n    GLUSTERD_GET_BRICK_PIDFILE(pidfile2, volinfo, brickinfo, conf);\n\n    if (rsp.op_ret == 0) {\n        brickinfo->port_registered = _gf_true;\n\n        /* PID file is copied once brick has attached\n           successfully\n        */\n        ret = glusterd_copy_file(pidfile1, pidfile2);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, ENOMEM, GD_MSG_NO_MEMORY,\n                   \"Could not copy file %s to %s\", pidfile1, pidfile2);\n            goto out;\n        }\n\n        brickinfo->status = GF_BRICK_STARTED;\n        brickinfo->rpc = rpc_clnt_ref(other_brick->rpc);\n        gf_log(THIS->name, GF_LOG_INFO, \"brick %s is attached successfully\",\n               brickinfo->path);\n    } else {\n        gf_log(THIS->name, GF_LOG_INFO,\n               \"attach_brick failed pidfile\"\n               \" is %s for brick_path %s\",\n               pidfile2, brickinfo->path);\n        brickinfo->port = 0;\n        brickinfo->status = GF_BRICK_STOPPED;\n        ret = glusterd_brick_process_remove_brick(brickinfo, &last_brick);\n        if (ret)\n            gf_msg_debug(this->name, 0,\n                         \"Couldn't remove brick from\"\n                         \" brick process\");\n        LOCK(&volinfo->lock);\n        ret = glusterd_store_volinfo(volinfo, GLUSTERD_VOLINFO_VER_AC_NONE);\n        UNLOCK(&volinfo->lock);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_VOLINFO_SET_FAIL,\n                   \"Failed to store volinfo of \"\n                   \"%s volume\",\n                   volinfo->volname);\n            goto out;\n        }\n    }\nout:\n    GF_ATOMIC_DEC(conf->blockers);\n    STACK_DESTROY(frame->root);\n    return 0;\n}\n\nint\nsend_attach_req(xlator_t *this, struct rpc_clnt *rpc, char *path,\n                glusterd_brickinfo_t *brickinfo,\n                glusterd_brickinfo_t *other_brick, int op)\n{\n    int ret = -1;\n    struct iobuf *iobuf = NULL;\n    struct iobref *iobref = NULL;\n    struct iovec iov = {\n        0,\n    };\n    ssize_t req_size = 0;\n    call_frame_t *frame = NULL;\n    gd1_mgmt_brick_op_req brick_req;\n    void *req = &brick_req;\n    void *errlbl = &&err;\n    struct rpc_clnt_connection *conn;\n    glusterd_conf_t *conf = this->private;\n    extern struct rpc_clnt_program gd_brick_prog;\n    fop_cbk_fn_t cbkfn = my_callback;\n\n    if (!rpc) {\n        gf_log(this->name, GF_LOG_ERROR, \"called with null rpc\");\n        return -1;\n    }\n\n    conn = &rpc->conn;\n    if (!conn->connected || conn->disconnected) {\n        gf_log(this->name, GF_LOG_INFO, \"not connected yet\");\n        return -1;\n    }\n\n    brick_req.op = op;\n    brick_req.name = path;\n    brick_req.input.input_val = NULL;\n    brick_req.input.input_len = 0;\n    brick_req.dict.dict_val = NULL;\n    brick_req.dict.dict_len = 0;\n\n    req_size = xdr_sizeof((xdrproc_t)xdr_gd1_mgmt_brick_op_req, req);\n    iobuf = iobuf_get2(rpc->ctx->iobuf_pool, req_size);\n    if (!iobuf) {\n        goto *errlbl;\n    }\n    errlbl = &&maybe_free_iobuf;\n\n    iov.iov_base = iobuf->ptr;\n    iov.iov_len = iobuf_pagesize(iobuf);\n\n    iobref = iobref_new();\n    if (!iobref) {\n        goto *errlbl;\n    }\n    errlbl = &&free_iobref;\n\n    frame = create_frame(this, this->ctx->pool);\n    if (!frame) {\n        goto *errlbl;\n    }\n\n    iobref_add(iobref, iobuf);\n    /*\n     * Drop our reference to the iobuf.  The iobref should already have\n     * one after iobref_add, so when we unref that we'll free the iobuf as\n     * well.  This allows us to pass just the iobref as frame->local.\n     */\n    iobuf_unref(iobuf);\n    /* Set the pointer to null so we don't free it on a later error. */\n    iobuf = NULL;\n\n    /* Create the xdr payload */\n    ret = xdr_serialize_generic(iov, req, (xdrproc_t)xdr_gd1_mgmt_brick_op_req);\n    if (ret == -1) {\n        goto *errlbl;\n    }\n\n    iov.iov_len = ret;\n\n    if (op == GLUSTERD_BRICK_ATTACH) {\n        frame->local = brickinfo;\n        frame->cookie = other_brick;\n        cbkfn = attach_brick_callback;\n    }\n    /* Send the msg */\n    GF_ATOMIC_INC(conf->blockers);\n    ret = rpc_clnt_submit(rpc, &gd_brick_prog, op, cbkfn, &iov, 1, NULL, 0,\n                          iobref, frame, NULL, 0, NULL, 0, NULL);\n    return ret;\n\nfree_iobref:\n    iobref_unref(iobref);\nmaybe_free_iobuf:\n    if (iobuf) {\n        iobuf_unref(iobuf);\n    }\nerr:\n    return -1;\n}\n\nextern size_t\nbuild_volfile_path(char *volume_id, char *path, size_t path_len,\n                   char *trusted_str, dict_t *dict);\n\nstatic int\nattach_brick(xlator_t *this, glusterd_brickinfo_t *brickinfo,\n             glusterd_brickinfo_t *other_brick, glusterd_volinfo_t *volinfo,\n             glusterd_volinfo_t *other_vol)\n{\n    glusterd_conf_t *conf = this->private;\n    char pidfile1[PATH_MAX] = \"\";\n    char pidfile2[PATH_MAX] = \"\";\n    char unslashed[PATH_MAX] = {\n        '\\0',\n    };\n    char full_id[PATH_MAX] = {\n        '\\0',\n    };\n    char path[PATH_MAX] = {\n        '\\0',\n    };\n    int ret = -1;\n    int tries;\n    rpc_clnt_t *rpc;\n    int32_t len;\n\n    gf_log(this->name, GF_LOG_INFO, \"add brick %s to existing process for %s\",\n           brickinfo->path, other_brick->path);\n\n    GLUSTERD_REMOVE_SLASH_FROM_PATH(brickinfo->path, unslashed);\n\n    GLUSTERD_GET_BRICK_PIDFILE(pidfile1, other_vol, other_brick, conf);\n    GLUSTERD_GET_BRICK_PIDFILE(pidfile2, volinfo, brickinfo, conf);\n\n    if (volinfo->is_snap_volume) {\n        len = snprintf(full_id, sizeof(full_id), \"/%s/%s/%s/%s.%s.%s\",\n                       GLUSTERD_VOL_SNAP_DIR_PREFIX,\n                       volinfo->snapshot->snapname, volinfo->volname,\n                       volinfo->volname, brickinfo->hostname, unslashed);\n    } else {\n        len = snprintf(full_id, sizeof(full_id), \"%s.%s.%s\", volinfo->volname,\n                       brickinfo->hostname, unslashed);\n    }\n    if ((len < 0) || (len >= sizeof(full_id))) {\n        goto out;\n    }\n\n    (void)build_volfile_path(full_id, path, sizeof(path), NULL, NULL);\n\n    for (tries = 15; tries > 0; --tries) {\n        rpc = rpc_clnt_ref(other_brick->rpc);\n        if (rpc) {\n            ret = send_attach_req(this, rpc, path, brickinfo, other_brick,\n                                  GLUSTERD_BRICK_ATTACH);\n            rpc_clnt_unref(rpc);\n            if (!ret) {\n                ret = pmap_registry_extend(this, other_brick->port,\n                                           brickinfo->path);\n                if (ret != 0) {\n                    gf_log(this->name, GF_LOG_ERROR,\n                           \"adding brick to process failed\");\n                    goto out;\n                }\n                brickinfo->port = other_brick->port;\n                ret = glusterd_brick_process_add_brick(brickinfo, other_brick);\n                if (ret) {\n                    gf_msg(this->name, GF_LOG_ERROR, 0,\n                           GD_MSG_BRICKPROC_ADD_BRICK_FAILED,\n                           \"Adding brick %s:%s to brick \"\n                           \"process failed\",\n                           brickinfo->hostname, brickinfo->path);\n                    return ret;\n                }\n                return 0;\n            }\n        }\n        /*\n         * It might not actually be safe to manipulate the lock\n         * like this, but if we don't then the connection can\n         * never actually complete and retries are useless.\n         * Unfortunately, all of the alternatives (e.g. doing\n         * all of this in a separate thread) are much more\n         * complicated and risky.\n         * TBD: see if there's a better way\n         */\n        synclock_unlock(&conf->big_lock);\n        sleep(1);\n        synclock_lock(&conf->big_lock);\n    }\n\nout:\n    gf_log(this->name, GF_LOG_WARNING, \"attach failed for %s\", brickinfo->path);\n    return ret;\n}\n\n/* This name was just getting too long, hence the abbreviations. */\nstatic glusterd_brickinfo_t *\nfind_compat_brick_in_vol(glusterd_conf_t *conf,\n                         glusterd_volinfo_t *srch_vol, /* volume to search */\n                         glusterd_volinfo_t *comp_vol, /* volume to compare */\n                         glusterd_brickinfo_t *brickinfo)\n{\n    xlator_t *this = THIS;\n    glusterd_brickinfo_t *other_brick = NULL;\n    glusterd_brick_proc_t *brick_proc = NULL;\n    char pidfile2[PATH_MAX] = \"\";\n    int32_t pid2 = -1;\n    int16_t retries = 15;\n    int mux_limit = -1;\n    int ret = -1;\n    gf_boolean_t brick_status = _gf_false;\n    gf_boolean_t is_shared_storage = _gf_false;\n\n    /*\n     * If comp_vol is provided, we have to check *volume* compatibility\n     * before we can check *brick* compatibility.\n     */\n    if (comp_vol) {\n        /*\n         * We should not attach bricks of a normal volume to bricks\n         * of shared storage volume.\n         */\n        if (!strcmp(srch_vol->volname, GLUSTER_SHARED_STORAGE))\n            is_shared_storage = _gf_true;\n\n        if (!strcmp(comp_vol->volname, GLUSTER_SHARED_STORAGE)) {\n            if (!is_shared_storage)\n                return NULL;\n        } else if (is_shared_storage)\n            return NULL;\n\n        /*\n         * It's kind of a shame that we have to do this check in both\n         * directions, but an option might only exist on one of the two\n         * dictionaries and dict_foreach_match will only find that one.\n         */\n\n        gf_log(THIS->name, GF_LOG_DEBUG, \"comparing options for %s and %s\",\n               comp_vol->volname, srch_vol->volname);\n\n        if (dict_foreach_match(comp_vol->dict, unsafe_option, NULL,\n                               opts_mismatch, srch_vol->dict) < 0) {\n            gf_log(THIS->name, GF_LOG_DEBUG, \"failure forward\");\n            return NULL;\n        }\n\n        if (dict_foreach_match(srch_vol->dict, unsafe_option, NULL,\n                               opts_mismatch, comp_vol->dict) < 0) {\n            gf_log(THIS->name, GF_LOG_DEBUG, \"failure backward\");\n            return NULL;\n        }\n\n        gf_log(THIS->name, GF_LOG_DEBUG, \"all options match\");\n    }\n\n    ret = get_mux_limit_per_process(&mux_limit);\n    if (ret) {\n        gf_msg_debug(THIS->name, 0,\n                     \"Retrieving brick mux \"\n                     \"limit failed. Returning NULL\");\n        return NULL;\n    }\n\n    cds_list_for_each_entry(other_brick, &srch_vol->bricks, brick_list)\n    {\n        if (other_brick == brickinfo) {\n            continue;\n        }\n        if (gf_uuid_compare(brickinfo->uuid, other_brick->uuid)) {\n            continue;\n        }\n        if (other_brick->status != GF_BRICK_STARTED &&\n            other_brick->status != GF_BRICK_STARTING) {\n            continue;\n        }\n\n        ret = glusterd_brick_proc_for_port(other_brick->port, &brick_proc);\n        if (ret) {\n            gf_msg_debug(THIS->name, 0,\n                         \"Couldn't get brick \"\n                         \"process corresponding to brick %s:%s\",\n                         other_brick->hostname, other_brick->path);\n            continue;\n        }\n\n        if (mux_limit != 0) {\n            if (brick_proc->brick_count >= mux_limit)\n                continue;\n        } else {\n            /* This means that the \"cluster.max-bricks-per-process\"\n             * options hasn't yet been explicitly set. Continue\n             * as if there's no limit set\n             */\n            gf_msg(THIS->name, GF_LOG_WARNING, 0, GD_MSG_NO_MUX_LIMIT,\n                   \"cluster.max-bricks-per-process options isn't \"\n                   \"set. Continuing with no limit set for \"\n                   \"brick multiplexing.\");\n        }\n        /* The first brick process might take some time to finish its\n         * handshake with glusterd and prepare the graph. We can't\n         * afford to send attach_req for other bricks till that time.\n         * brick process sends PMAP_SIGNIN event after processing the\n         * volfile and hence it's safe to assume that if glusterd has\n         * received a pmap signin request for the same brick, we are\n         * good for subsequent attach requests.\n         */\n        retries = 15;\n        while (retries > 0) {\n            if (other_brick->port_registered) {\n                GLUSTERD_GET_BRICK_PIDFILE(pidfile2, srch_vol, other_brick,\n                                           conf);\n                if (sys_access(pidfile2, F_OK) == 0 &&\n                    gf_is_service_running(pidfile2, &pid2)) {\n                    gf_msg_debug(this->name, 0,\n                                 \"brick %s is running as a pid %d \",\n                                 other_brick->path, pid2);\n                    brick_status = _gf_true;\n                    break;\n                }\n            }\n\n            synclock_unlock(&conf->big_lock);\n            gf_msg_debug(this->name, 0,\n                         \"brick %s is still\"\n                         \" starting, waiting for 2 seconds \",\n                         other_brick->path);\n            sleep(2);\n            synclock_lock(&conf->big_lock);\n            retries--;\n        }\n\n        if (!brick_status) {\n            gf_log(this->name, GF_LOG_INFO,\n                   \"brick has not come up so cleaning up dead brick %s:%s\",\n                   other_brick->hostname, other_brick->path);\n            other_brick->status = GF_BRICK_STOPPED;\n            if (pidfile2[0])\n                sys_unlink(pidfile2);\n            continue;\n        }\n        return other_brick;\n    }\n\n    return NULL;\n}\n\nstatic glusterd_brickinfo_t *\nfind_compatible_brick(glusterd_conf_t *conf, glusterd_volinfo_t *volinfo,\n                      glusterd_brickinfo_t *brickinfo,\n                      glusterd_volinfo_t **other_vol_p)\n{\n    glusterd_brickinfo_t *other_brick = NULL;\n    glusterd_volinfo_t *other_vol = NULL;\n    glusterd_snap_t *snap = NULL;\n\n    /* Just return NULL here if multiplexing is disabled. */\n    if (!is_brick_mx_enabled()) {\n        return NULL;\n    }\n\n    other_brick = find_compat_brick_in_vol(conf, volinfo, NULL, brickinfo);\n    if (other_brick) {\n        *other_vol_p = volinfo;\n        return other_brick;\n    }\n\n    /*\n     * This check is necessary because changes to a volume's\n     * transport options aren't propagated to snapshots.  Such a\n     * change might break compatibility between the two, but we\n     * have no way to \"evict\" a brick from the process it's\n     * currently in.  If we keep it separate from the start, we\n     * avoid the problem.  Note that snapshot bricks can still be\n     * colocated with one another, even if they're for different\n     * volumes, because the only thing likely to differ is their\n     * auth options and those are not a factor in determining\n     * compatibility.\n     *\n     * The very same immutability of snapshot bricks' transport\n     * options, which can make them incompatible with their parent\n     * volumes, ensures that once-compatible snapshot bricks will\n     * remain compatible.  However, the same is not true for bricks\n     * belonging to two non-snapshot volumes.  In that case, a\n     * change to one might break compatibility and require them to\n     * be separated, which is not yet done.\n     *\n     * TBD: address the option-change issue for non-snapshot bricks\n     */\n    if (!volinfo->is_snap_volume) {\n        cds_list_for_each_entry(other_vol, &conf->volumes, vol_list)\n        {\n            if (other_vol == volinfo) {\n                continue;\n            }\n            other_brick = find_compat_brick_in_vol(conf, other_vol, volinfo,\n                                                   brickinfo);\n            if (other_brick) {\n                *other_vol_p = other_vol;\n                return other_brick;\n            }\n        }\n    } else {\n        cds_list_for_each_entry(snap, &conf->snapshots, snap_list)\n        {\n            cds_list_for_each_entry(other_vol, &snap->volumes, vol_list)\n            {\n                if (other_vol == volinfo) {\n                    continue;\n                }\n                other_brick = find_compat_brick_in_vol(conf, other_vol, volinfo,\n                                                       brickinfo);\n                if (other_brick) {\n                    *other_vol_p = other_vol;\n                    return other_brick;\n                }\n            }\n        }\n    }\n\n    return NULL;\n}\n\n/* Below function is use to populate sockpath based on passed pid\n   value as a argument after check the value from proc and also\n   check if passed pid is match with running  glusterfs process\n*/\n\nint\nglusterd_get_sock_from_brick_pid(int pid, char *sockpath, size_t len)\n{\n    char fname[128] = \"\";\n    char buf[1024] = \"\";\n    char cmdline[2048] = \"\";\n    xlator_t *this = NULL;\n    int fd = -1;\n    int i = 0, j = 0;\n    char *ptr = NULL;\n    char *brptr = NULL;\n    char tmpsockpath[PATH_MAX] = \"\";\n    size_t blen = 0;\n    int ret = -1;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    snprintf(fname, sizeof(fname), \"/proc/%d/cmdline\", pid);\n\n    if (sys_access(fname, R_OK) != 0) {\n        gf_log(this->name, GF_LOG_ERROR, \"brick process %d is not running\",\n               pid);\n        return ret;\n    }\n\n    fd = open(fname, O_RDONLY);\n    if (fd != -1) {\n        blen = (int)sys_read(fd, buf, 1024);\n    } else {\n        gf_log(this->name, GF_LOG_ERROR, \"open failed %s to open a file %s\",\n               strerror(errno), fname);\n        return ret;\n    }\n\n    /* convert cmdline to single string */\n    for (i = 0, j = 0; i < blen; i++) {\n        if (buf[i] == '\\0')\n            cmdline[j++] = ' ';\n        else if (buf[i] < 32 || buf[i] > 126) /* remove control char */\n            continue;\n        else if (buf[i] == '\"' || buf[i] == '\\\\') {\n            cmdline[j++] = '\\\\';\n            cmdline[j++] = buf[i];\n        } else {\n            cmdline[j++] = buf[i];\n        }\n    }\n    cmdline[j] = '\\0';\n    if (fd)\n        sys_close(fd);\n    if (!strstr(cmdline, \"glusterfs\"))\n        return ret;\n\n    ptr = strstr(cmdline, \"-S \");\n    if (!ptr)\n        return ret;\n    ptr = strchr(ptr, '/');\n    if (!ptr)\n        return ret;\n    brptr = strstr(ptr, \"--brick-name\");\n    if (!brptr)\n        return ret;\n    i = 0;\n\n    while (ptr < brptr) {\n        if (*ptr != 32)\n            tmpsockpath[i++] = *ptr;\n        ptr++;\n    }\n\n    if (tmpsockpath[0]) {\n        strncpy(sockpath, tmpsockpath, i);\n        ret = 0;\n    }\n\n    return ret;\n}\n\nchar *\nsearch_brick_path_from_proc(pid_t brick_pid, char *brickpath)\n{\n    struct dirent *dp = NULL;\n    DIR *dirp = NULL;\n    size_t len = 0;\n    int fd = -1;\n    char path[PATH_MAX] = \"\";\n    struct dirent scratch[2] = {\n        {\n            0,\n        },\n    };\n    char *brick_path = NULL;\n\n    if (!brickpath)\n        goto out;\n\n    len = sprintf(path, \"/proc/%d/fd/\", brick_pid);\n    if (len >= (sizeof(path) - 2))\n        goto out;\n\n    dirp = sys_opendir(path);\n    if (!dirp)\n        goto out;\n\n    fd = dirfd(dirp);\n    if (fd < 0)\n        goto out;\n\n    while ((dp = sys_readdir(dirp, scratch))) {\n        if (!strcmp(dp->d_name, \".\") || !strcmp(dp->d_name, \"..\"))\n            continue;\n\n        /* check for non numerical descriptors */\n        if (!strtol(dp->d_name, (char **)NULL, 10))\n            continue;\n\n        len = readlinkat(fd, dp->d_name, path, sizeof(path) - 1);\n        /* TODO: handle len == -1 -> error condition in readlinkat */\n        if (len > 1) {\n            path[len] = '\\0';\n            if (!strcmp(path, brickpath)) {\n                brick_path = gf_strdup(path);\n                break;\n            }\n        }\n    }\nout:\n    sys_closedir(dirp);\n    return brick_path;\n}\n\nint\nglusterd_brick_start(glusterd_volinfo_t *volinfo,\n                     glusterd_brickinfo_t *brickinfo, gf_boolean_t wait,\n                     gf_boolean_t only_connect)\n{\n    int ret = -1;\n    xlator_t *this = NULL;\n    glusterd_brickinfo_t *other_brick;\n    glusterd_conf_t *conf = NULL;\n    int32_t pid = -1;\n    char pidfile[PATH_MAX] = \"\";\n    char socketpath[PATH_MAX] = \"\";\n    char *brickpath = NULL;\n    glusterd_volinfo_t *other_vol;\n    gf_boolean_t is_service_running = _gf_false;\n    uuid_t volid = {\n        0,\n    };\n    ssize_t size = -1;\n\n    this = THIS;\n    GF_ASSERT(this);\n    conf = this->private;\n\n    if ((!brickinfo) || (!volinfo))\n        goto out;\n\n    if (gf_uuid_is_null(brickinfo->uuid)) {\n        ret = glusterd_resolve_brick(brickinfo);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_RESOLVE_BRICK_FAIL,\n                   FMTSTR_RESOLVE_BRICK, brickinfo->hostname, brickinfo->path);\n            gf_event(EVENT_BRICKPATH_RESOLVE_FAILED,\n                     \"peer=%s;volume=%s;brick=%s\", brickinfo->hostname,\n                     volinfo->volname, brickinfo->path);\n            goto out;\n        }\n    }\n\n    if (gf_uuid_compare(brickinfo->uuid, MY_UUID)) {\n        ret = 0;\n        goto out;\n    }\n\n    /* If a trigger to start the brick is already initiated then no need for\n     * a reattempt as it's an overkill. With glusterd_brick_start ()\n     * function being used in multiple places, when glusterd restarts we see\n     * three different triggers for an attempt to start the brick process\n     * due to the quorum handling code in glusterd_friend_sm.\n     */\n    if (brickinfo->status == GF_BRICK_STARTING || brickinfo->start_triggered) {\n        gf_msg_debug(this->name, 0,\n                     \"brick %s is already in starting \"\n                     \"phase\",\n                     brickinfo->path);\n        ret = 0;\n        goto out;\n    }\n    if (!only_connect)\n        brickinfo->start_triggered = _gf_true;\n\n    GLUSTERD_GET_BRICK_PIDFILE(pidfile, volinfo, brickinfo, conf);\n\n    /* Compare volume-id xattr is helpful to ensure the existence of a\n       brick_root path before the start/attach a brick\n    */\n    size = sys_lgetxattr(brickinfo->path, GF_XATTR_VOL_ID_KEY, volid, 16);\n    if (size != 16) {\n        gf_log(this->name, GF_LOG_ERROR,\n               \"Missing %s extended attribute on brick root (%s),\"\n               \" brick is deemed not to be a part of the volume (%s) \",\n               GF_XATTR_VOL_ID_KEY, brickinfo->path, volinfo->volname);\n        goto out;\n    }\n\n    if (strncmp(uuid_utoa(volinfo->volume_id), uuid_utoa(volid),\n                GF_UUID_BUF_SIZE)) {\n        gf_log(this->name, GF_LOG_ERROR,\n               \"Mismatching %s extended attribute on brick root (%s),\"\n               \" brick is deemed not to be a part of the volume (%s)\",\n               GF_XATTR_VOL_ID_KEY, brickinfo->path, volinfo->volname);\n        goto out;\n    }\n    is_service_running = gf_is_service_running(pidfile, &pid);\n    if (is_service_running) {\n        if (is_brick_mx_enabled()) {\n            brickpath = search_brick_path_from_proc(pid, brickinfo->path);\n            if (!brickpath) {\n                if (only_connect)\n                    return 0;\n                gf_log(this->name, GF_LOG_INFO,\n                       \"Either pid %d is not running or brick\"\n                       \" path %s is not consumed so cleanup pidfile\",\n                       pid, brickinfo->path);\n                /* brick isn't running,so unlink stale pidfile\n                 * if any.\n                 */\n                if (sys_access(pidfile, R_OK) == 0) {\n                    sys_unlink(pidfile);\n                }\n                goto run;\n            }\n            GF_FREE(brickpath);\n            ret = glusterd_get_sock_from_brick_pid(pid, socketpath,\n                                                   sizeof(socketpath));\n            if (ret) {\n                if (only_connect)\n                    return 0;\n                gf_log(this->name, GF_LOG_INFO,\n                       \"Either pid %d is not running or does \"\n                       \"not match with any running brick \"\n                       \"processes\",\n                       pid);\n                /* Fetch unix socket is failed so unlink pidfile */\n                if (sys_access(pidfile, R_OK) == 0) {\n                    sys_unlink(pidfile);\n                }\n                goto run;\n            }\n        }\n        if (brickinfo->status != GF_BRICK_STARTING &&\n            brickinfo->status != GF_BRICK_STARTED) {\n            gf_log(this->name, GF_LOG_INFO,\n                   \"discovered already-running brick %s\", brickinfo->path);\n            (void)pmap_registry_bind(this, brickinfo->port, brickinfo->path,\n                                     GF_PMAP_PORT_BRICKSERVER, NULL);\n            brickinfo->port_registered = _gf_true;\n            /*\n             * This will unfortunately result in a separate RPC\n             * connection per brick, even though they're all in\n             * the same process.  It works, but it would be nicer\n             * if we could find a pre-existing connection to that\n             * same port (on another brick) and re-use that.\n             * TBD: re-use RPC connection across bricks\n             */\n            if (!is_brick_mx_enabled()) {\n                glusterd_set_brick_socket_filepath(\n                    volinfo, brickinfo, socketpath, sizeof(socketpath));\n            }\n            gf_log(this->name, GF_LOG_DEBUG,\n                   \"Using %s as sockfile for brick %s of volume %s \",\n                   socketpath, brickinfo->path, volinfo->volname);\n\n            (void)glusterd_brick_connect(volinfo, brickinfo, socketpath);\n\n            ret = glusterd_brick_process_add_brick(brickinfo, NULL);\n            if (ret) {\n                gf_msg(this->name, GF_LOG_ERROR, 0,\n                       GD_MSG_BRICKPROC_ADD_BRICK_FAILED,\n                       \"Adding brick %s:%s to brick process \"\n                       \"failed.\",\n                       brickinfo->hostname, brickinfo->path);\n                goto out;\n            }\n            /* We need to set the status back to STARTING so that\n             * while the other (re)start brick requests come in for\n             * other bricks, this brick can be considered as\n             * compatible.\n             */\n            brickinfo->status = GF_BRICK_STARTING;\n        }\n        return 0;\n    }\n    if (only_connect)\n        return 0;\n\nrun:\n    ret = _mk_rundir_p(volinfo);\n    if (ret)\n        goto out;\n\n    other_brick = find_compatible_brick(conf, volinfo, brickinfo, &other_vol);\n    if (other_brick) {\n        /* mark the brick to starting as send_attach_req might take few\n         * iterations to successfully attach the brick and we don't want\n         * to get into a state where another needless trigger to start\n         * the brick is processed\n         */\n        brickinfo->status = GF_BRICK_STARTING;\n        ret = attach_brick(this, brickinfo, other_brick, volinfo, other_vol);\n        if (ret == 0) {\n            goto out;\n        }\n        /* Attach_brick is failed so unlink pidfile */\n        if (sys_access(pidfile, R_OK) == 0) {\n            sys_unlink(pidfile);\n        }\n    }\n\n    /*\n     * This hack is necessary because our brick-process management is a\n     * total nightmare.  We expect a brick process's socket and pid files\n     * to be ready *immediately* after we start it.  Ditto for it calling\n     * back to bind its port.  Unfortunately, none of that is realistic.\n     * Any process takes non-zero time to start up.  This has *always* been\n     * racy and unsafe; it just became more visible with multiplexing.\n     *\n     * The right fix would be to do all of this setup *in the parent*,\n     * which would include (among other things) getting the PID back from\n     * the \"runner\" code.  That's all prohibitively difficult and risky.\n     * To work around the more immediate problems, we create a stub pidfile\n     * here to let gf_is_service_running know that we expect the process to\n     * be there shortly, and then it gets filled in with a real PID when\n     * the process does finish starting up.\n     *\n     * TBD: pray for GlusterD 2 to be ready soon.\n     */\n    gf_log(this->name, GF_LOG_INFO,\n           \"starting a fresh brick process for \"\n           \"brick %s\",\n           brickinfo->path);\n    ret = glusterd_volume_start_glusterfs(volinfo, brickinfo, wait);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_BRICK_DISCONNECTED,\n               \"Unable to start brick %s:%s\", brickinfo->hostname,\n               brickinfo->path);\n        gf_event(EVENT_BRICK_START_FAILED, \"peer=%s;volume=%s;brick=%s\",\n                 brickinfo->hostname, volinfo->volname, brickinfo->path);\n        goto out;\n    }\n\nout:\n    if (ret && brickinfo) {\n        brickinfo->start_triggered = _gf_false;\n    }\n    gf_msg_debug(this->name, 0, \"returning %d \", ret);\n    return ret;\n}\n\nint\nglusterd_restart_bricks(void *opaque)\n{\n    int ret = 0;\n    glusterd_volinfo_t *volinfo = NULL;\n    glusterd_brickinfo_t *brickinfo = NULL;\n    glusterd_snap_t *snap = NULL;\n    gf_boolean_t start_svcs = _gf_false;\n    xlator_t *this = NULL;\n    glusterd_conf_t *conf = NULL;\n    int active_count = 0;\n    int quorum_count = 0;\n    gf_boolean_t node_quorum = _gf_false;\n\n    this = THIS;\n    GF_VALIDATE_OR_GOTO(\"glusterd\", this, return_block);\n\n    conf = this->private;\n    GF_VALIDATE_OR_GOTO(this->name, conf, return_block);\n\n    synclock_lock(&conf->big_lock);\n\n    /* We need to ensure that restarting the bricks during glusterd restart\n     * shouldn't race with the import volume thread (refer\n     * glusterd_compare_friend_data ())\n     */\n    while (conf->restart_bricks) {\n        synclock_unlock(&conf->big_lock);\n        sleep(2);\n        synclock_lock(&conf->big_lock);\n    }\n    conf->restart_bricks = _gf_true;\n\n    GF_ATOMIC_INC(conf->blockers);\n    ret = glusterd_get_quorum_cluster_counts(this, &active_count,\n                                             &quorum_count);\n    if (ret)\n        goto out;\n\n    if (does_quorum_meet(active_count, quorum_count))\n        node_quorum = _gf_true;\n\n    cds_list_for_each_entry(volinfo, &conf->volumes, vol_list)\n    {\n        if (volinfo->status != GLUSTERD_STATUS_STARTED) {\n            continue;\n        }\n        gf_msg_debug(this->name, 0, \"starting the volume %s\", volinfo->volname);\n\n        /* Check the quorum, if quorum is not met, don't start the\n           bricks. Stop bricks in case they are running.\n        */\n        ret = check_quorum_for_brick_start(volinfo, node_quorum);\n        if (ret == 0) {\n            gf_msg(this->name, GF_LOG_INFO, 0, GD_MSG_SERVER_QUORUM_NOT_MET,\n                   \"Skipping brick \"\n                   \"restart for volume %s as quorum is not met\",\n                   volinfo->volname);\n            (void)glusterd_stop_bricks(volinfo);\n            continue;\n        } else if (ret == 2 && conf->restart_done == _gf_true) {\n            /* If glusterd has been restarted and quorum is not\n             * applicable then do not restart the bricks as this\n             * might start bricks brought down purposely, say for\n             * maintenance\n             */\n            continue;\n        } else {\n            start_svcs = _gf_true;\n            cds_list_for_each_entry(brickinfo, &volinfo->bricks, brick_list)\n            {\n                if (!brickinfo->start_triggered) {\n                    pthread_mutex_lock(&brickinfo->restart_mutex);\n                    {\n                        glusterd_brick_start(volinfo, brickinfo, _gf_false,\n                                             _gf_false);\n                    }\n                    pthread_mutex_unlock(&brickinfo->restart_mutex);\n                }\n            }\n            ret = glusterd_store_volinfo(volinfo, GLUSTERD_VOLINFO_VER_AC_NONE);\n            if (ret) {\n                gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_VOLINFO_STORE_FAIL,\n                       \"Failed to \"\n                       \"write volinfo for volume %s\",\n                       volinfo->volname);\n                goto out;\n            }\n        }\n    }\n\n    cds_list_for_each_entry(snap, &conf->snapshots, snap_list)\n    {\n        cds_list_for_each_entry(volinfo, &snap->volumes, vol_list)\n        {\n            if (volinfo->status != GLUSTERD_STATUS_STARTED)\n                continue;\n            /* Check the quorum, if quorum is not met, don't start\n             * the bricks\n             */\n            ret = check_quorum_for_brick_start(volinfo, node_quorum);\n            if (ret == 0) {\n                gf_msg(this->name, GF_LOG_INFO, 0, GD_MSG_SERVER_QUORUM_NOT_MET,\n                       \"Skipping\"\n                       \" brick restart for volume %s as \"\n                       \"quorum is not met\",\n                       volinfo->volname);\n                continue;\n            }\n            start_svcs = _gf_true;\n            gf_msg_debug(this->name, 0,\n                         \"starting the snap \"\n                         \"volume %s\",\n                         volinfo->volname);\n            cds_list_for_each_entry(brickinfo, &volinfo->bricks, brick_list)\n            {\n                if (!brickinfo->start_triggered) {\n                    pthread_mutex_lock(&brickinfo->restart_mutex);\n                    {\n                        /* coverity[SLEEP] */\n                        glusterd_brick_start(volinfo, brickinfo, _gf_false,\n                                             _gf_false);\n                    }\n                    pthread_mutex_unlock(&brickinfo->restart_mutex);\n                }\n            }\n            ret = glusterd_store_volinfo(volinfo, GLUSTERD_VOLINFO_VER_AC_NONE);\n            if (ret) {\n                gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_VOLINFO_STORE_FAIL,\n                       \"Failed to \"\n                       \"write volinfo for volume %s\",\n                       volinfo->volname);\n                goto out;\n            }\n        }\n    }\n    if (start_svcs == _gf_true) {\n        glusterd_svcs_manager(NULL);\n    }\n\n    ret = 0;\n\nout:\n    GF_ATOMIC_DEC(conf->blockers);\n    conf->restart_done = _gf_true;\n    conf->restart_bricks = _gf_false;\n\nreturn_block:\n    return ret;\n}\n\nint\n_local_gsyncd_start(dict_t *this, char *key, data_t *value, void *data)\n{\n    char *path_list = NULL;\n    char *slave = NULL;\n    char *slave_url = NULL;\n    char *slave_vol = NULL;\n    char *slave_host = NULL;\n    char *statefile = NULL;\n    char buf[1024] = \"faulty\";\n    int ret = 0;\n    int op_ret = 0;\n    int ret_status = 0;\n    char uuid_str[64] = \"\";\n    glusterd_volinfo_t *volinfo = NULL;\n    char confpath[PATH_MAX] = \"\";\n    char *op_errstr = NULL;\n    glusterd_conf_t *priv = NULL;\n    gf_boolean_t is_template_in_use = _gf_false;\n    gf_boolean_t is_paused = _gf_false;\n    char key1[1024] = \"\";\n    xlator_t *this1 = NULL;\n\n    this1 = THIS;\n    GF_ASSERT(this1);\n    priv = this1->private;\n    GF_ASSERT(priv);\n    GF_ASSERT(data);\n\n    volinfo = data;\n    slave = strchr(value->data, ':');\n    if (slave)\n        slave++;\n    else\n        return 0;\n\n    (void)snprintf(uuid_str, sizeof(uuid_str), \"%s\", (char *)value->data);\n\n    /* Getting Local Brickpaths */\n    ret = glusterd_get_local_brickpaths(volinfo, &path_list);\n\n    /*Generating the conf file path needed by gsyncd */\n    ret = glusterd_get_slave_info(slave, &slave_url, &slave_host, &slave_vol,\n                                  &op_errstr);\n    if (ret) {\n        gf_msg(this1->name, GF_LOG_ERROR, 0, GD_MSG_SLAVEINFO_FETCH_ERROR,\n               \"Unable to fetch slave details.\");\n        ret = -1;\n        goto out;\n    }\n\n    ret = snprintf(confpath, sizeof(confpath) - 1,\n                   \"%s/\" GEOREP \"/%s_%s_%s/gsyncd.conf\", priv->workdir,\n                   volinfo->volname, slave_host, slave_vol);\n    confpath[ret] = '\\0';\n\n    /* Fetching the last status of the node */\n    ret = glusterd_get_statefile_name(volinfo, slave, confpath, &statefile,\n                                      &is_template_in_use);\n    if (ret) {\n        if (!strstr(slave, \"::\"))\n            gf_msg(this1->name, GF_LOG_INFO, 0, GD_MSG_SLAVE_URL_INVALID,\n                   \"%s is not a valid slave url.\", slave);\n        else\n            gf_msg(this1->name, GF_LOG_INFO, 0,\n                   GD_MSG_GET_STATEFILE_NAME_FAILED,\n                   \"Unable to get\"\n                   \" statefile's name\");\n        goto out;\n    }\n\n    /* If state-file entry is missing from the config file,\n     * do not start gsyncd on restart */\n    if (is_template_in_use) {\n        gf_msg(this1->name, GF_LOG_INFO, 0, GD_MSG_NO_STATEFILE_ENTRY,\n               \"state-file entry is missing in config file.\"\n               \"Not Restarting\");\n        goto out;\n    }\n\n    is_template_in_use = _gf_false;\n\n    ret = gsync_status(volinfo->volname, slave, confpath, &ret_status,\n                       &is_template_in_use);\n    if (ret == -1) {\n        gf_msg(this1->name, GF_LOG_INFO, 0, GD_MSG_GSYNC_VALIDATION_FAIL,\n               GEOREP \" start option validation failed \");\n        ret = 0;\n        goto out;\n    }\n\n    if (is_template_in_use == _gf_true) {\n        gf_msg(this1->name, GF_LOG_INFO, 0, GD_MSG_PIDFILE_NOT_FOUND,\n               \"pid-file entry is missing in config file.\"\n               \"Not Restarting\");\n        ret = 0;\n        goto out;\n    }\n\n    ret = glusterd_gsync_read_frm_status(statefile, buf, sizeof(buf));\n    if (ret <= 0) {\n        gf_msg(this1->name, GF_LOG_ERROR, 0, GD_MSG_STAT_FILE_READ_FAILED,\n               \"Unable to read the status\");\n        goto out;\n    }\n\n    /* Form key1 which is \"<user@><slave_host>::<slavevol>\" */\n    snprintf(key1, sizeof(key1), \"%s::%s\", slave_url, slave_vol);\n\n    /* Looks for the last status, to find if the session was running\n     * when the node went down. If the session was just created or\n     * stopped, do not restart the geo-rep session */\n    if ((!strcmp(buf, \"Created\")) || (!strcmp(buf, \"Stopped\"))) {\n        gf_msg(this1->name, GF_LOG_INFO, 0, GD_MSG_GEO_REP_START_FAILED,\n               \"Geo-Rep Session was not started between \"\n               \"%s and %s::%s. Not Restarting\",\n               volinfo->volname, slave_url, slave_vol);\n        goto out;\n    } else if (strstr(buf, \"Paused\")) {\n        is_paused = _gf_true;\n    } else if ((!strcmp(buf, \"Config Corrupted\"))) {\n        gf_msg(this1->name, GF_LOG_INFO, 0, GD_MSG_RECOVERING_CORRUPT_CONF,\n               \"Recovering from a corrupted config. \"\n               \"Not Restarting. Use start (force) to \"\n               \"start the session between %s and %s::%s.\",\n               volinfo->volname, slave_url, slave_vol);\n        goto out;\n    }\n\n    if (is_paused) {\n        glusterd_start_gsync(volinfo, slave, path_list, confpath, uuid_str,\n                             NULL, _gf_true);\n    } else {\n        /* Add slave to the dict indicating geo-rep session is running*/\n        ret = dict_set_dynstr_with_alloc(volinfo->gsync_active_slaves, key1,\n                                         \"running\");\n        if (ret) {\n            gf_msg(this1->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Unable to set key:%s\"\n                   \" value:running in the dict\",\n                   key1);\n            goto out;\n        }\n        ret = glusterd_start_gsync(volinfo, slave, path_list, confpath,\n                                   uuid_str, NULL, _gf_false);\n        if (ret)\n            dict_del(volinfo->gsync_active_slaves, key1);\n    }\n\nout:\n    if (statefile)\n        GF_FREE(statefile);\n    if (slave_url)\n        GF_FREE(slave_url);\n\n    if (is_template_in_use) {\n        op_ret = glusterd_create_status_file(\n            volinfo->volname, slave, slave_host, slave_vol, \"Config Corrupted\");\n        if (op_ret) {\n            gf_msg(this1->name, GF_LOG_ERROR, 0,\n                   GD_MSG_STATUSFILE_CREATE_FAILED,\n                   \"Unable to create status file\"\n                   \". Error : %s\",\n                   strerror(errno));\n            ret = op_ret;\n        }\n    }\n    if (slave_vol)\n        GF_FREE(slave_vol);\n    GF_FREE(path_list);\n    GF_FREE(op_errstr);\n\n    return ret;\n}\n\nint\nglusterd_volume_restart_gsyncds(glusterd_volinfo_t *volinfo)\n{\n    GF_ASSERT(volinfo);\n\n    dict_foreach(volinfo->gsync_slaves, _local_gsyncd_start, volinfo);\n    return 0;\n}\n\nint\nglusterd_restart_gsyncds(glusterd_conf_t *conf)\n{\n    glusterd_volinfo_t *volinfo = NULL;\n    int ret = 0;\n\n    cds_list_for_each_entry(volinfo, &conf->volumes, vol_list)\n    {\n        glusterd_volume_restart_gsyncds(volinfo);\n    }\n    return ret;\n}\n\nint\nglusterd_calc_dist_leaf_count(int rcount, int scount)\n{\n    return (rcount ? rcount : 1) * (scount ? scount : 1);\n}\n\nint\nglusterd_get_dist_leaf_count(glusterd_volinfo_t *volinfo)\n{\n    int rcount = volinfo->replica_count;\n    int scount = volinfo->stripe_count;\n\n    if (volinfo->type == GF_CLUSTER_TYPE_DISPERSE)\n        return volinfo->disperse_count;\n\n    return glusterd_calc_dist_leaf_count(rcount, scount);\n}\n\nint\nglusterd_get_brickinfo(xlator_t *this, const char *brickname, int port,\n                       glusterd_brickinfo_t **brickinfo)\n{\n    glusterd_conf_t *priv = NULL;\n    glusterd_volinfo_t *volinfo = NULL;\n    glusterd_brickinfo_t *tmpbrkinfo = NULL;\n    glusterd_snap_t *snap = NULL;\n    int ret = -1;\n\n    GF_ASSERT(brickname);\n    GF_ASSERT(this);\n\n    priv = this->private;\n    cds_list_for_each_entry(volinfo, &priv->volumes, vol_list)\n    {\n        cds_list_for_each_entry(tmpbrkinfo, &volinfo->bricks, brick_list)\n        {\n            if (gf_uuid_compare(tmpbrkinfo->uuid, MY_UUID))\n                continue;\n            if (!strcmp(tmpbrkinfo->path, brickname) &&\n                (tmpbrkinfo->port == port)) {\n                *brickinfo = tmpbrkinfo;\n                return 0;\n            }\n        }\n    }\n    /* In case normal volume is not found, check for snapshot volumes */\n    cds_list_for_each_entry(snap, &priv->snapshots, snap_list)\n    {\n        cds_list_for_each_entry(volinfo, &snap->volumes, vol_list)\n        {\n            cds_list_for_each_entry(tmpbrkinfo, &volinfo->bricks, brick_list)\n            {\n                if (gf_uuid_compare(tmpbrkinfo->uuid, MY_UUID))\n                    continue;\n                if (!strcmp(tmpbrkinfo->path, brickname)) {\n                    *brickinfo = tmpbrkinfo;\n                    return 0;\n                }\n            }\n        }\n    }\n\n    return ret;\n}\n\nglusterd_brickinfo_t *\nglusterd_get_brickinfo_by_position(glusterd_volinfo_t *volinfo, uint32_t pos)\n{\n    glusterd_brickinfo_t *tmpbrkinfo = NULL;\n\n    cds_list_for_each_entry(tmpbrkinfo, &volinfo->bricks, brick_list)\n    {\n        if (pos == 0)\n            return tmpbrkinfo;\n        pos--;\n    }\n    return NULL;\n}\n\nvoid\nglusterd_set_brick_status(glusterd_brickinfo_t *brickinfo,\n                          gf_brick_status_t status)\n{\n    GF_ASSERT(brickinfo);\n    brickinfo->status = status;\n    if (GF_BRICK_STARTED == status) {\n        gf_msg_debug(\"glusterd\", 0,\n                     \"Setting brick %s:%s status \"\n                     \"to started\",\n                     brickinfo->hostname, brickinfo->path);\n    } else {\n        gf_msg_debug(\"glusterd\", 0,\n                     \"Setting brick %s:%s status \"\n                     \"to stopped\",\n                     brickinfo->hostname, brickinfo->path);\n    }\n}\n\ngf_boolean_t\nglusterd_is_brick_started(glusterd_brickinfo_t *brickinfo)\n{\n    GF_ASSERT(brickinfo);\n    return (brickinfo->status == GF_BRICK_STARTED);\n}\n\nint\nglusterd_friend_brick_belongs(glusterd_volinfo_t *volinfo,\n                              glusterd_brickinfo_t *brickinfo, void *uuid)\n{\n    int ret = -1;\n\n    GF_ASSERT(volinfo);\n    GF_ASSERT(brickinfo);\n    GF_ASSERT(uuid);\n\n    if (gf_uuid_is_null(brickinfo->uuid)) {\n        ret = glusterd_resolve_brick(brickinfo);\n        if (ret) {\n            GF_ASSERT(0);\n            goto out;\n        }\n    }\n    if (!gf_uuid_compare(brickinfo->uuid, *((uuid_t *)uuid)))\n        return 0;\nout:\n    return -1;\n}\n\nint\nglusterd_get_brick_root(char *path, char **mount_point)\n{\n    char *ptr = NULL;\n    char *mnt_pt = NULL;\n    struct stat brickstat = {0};\n    struct stat buf = {0};\n\n    if (!path)\n        goto err;\n    mnt_pt = gf_strdup(path);\n    if (!mnt_pt)\n        goto err;\n    if (sys_stat(mnt_pt, &brickstat))\n        goto err;\n\n    while ((ptr = strrchr(mnt_pt, '/')) && ptr != mnt_pt) {\n        *ptr = '\\0';\n        if (sys_stat(mnt_pt, &buf)) {\n            gf_msg(THIS->name, GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n                   \"error in \"\n                   \"stat: %s\",\n                   strerror(errno));\n            goto err;\n        }\n\n        if (brickstat.st_dev != buf.st_dev) {\n            *ptr = '/';\n            break;\n        }\n    }\n\n    if (ptr == mnt_pt) {\n        if (sys_stat(\"/\", &buf)) {\n            gf_msg(THIS->name, GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n                   \"error in \"\n                   \"stat: %s\",\n                   strerror(errno));\n            goto err;\n        }\n        if (brickstat.st_dev == buf.st_dev)\n            strcpy(mnt_pt, \"/\");\n    }\n\n    *mount_point = mnt_pt;\n    return 0;\n\nerr:\n    GF_FREE(mnt_pt);\n    return -1;\n}\n\nstatic char *\nglusterd_parse_inode_size(char *stream, char *pattern)\n{\n    char *needle = NULL;\n    char *trail = NULL;\n\n    needle = strstr(stream, pattern);\n    if (!needle)\n        goto out;\n\n    needle = nwstrtail(needle, pattern);\n\n    trail = needle;\n    while (trail && isdigit(*trail))\n        trail++;\n    if (trail)\n        *trail = '\\0';\n\nout:\n    return needle;\n}\n\nstatic struct fs_info {\n    char *fs_type_name;\n    char *fs_tool_name;\n    char *fs_tool_arg;\n    char *fs_tool_pattern;\n    char *fs_tool_pkg;\n} glusterd_fs[] = {{\"xfs\", \"xfs_info\", NULL, \"isize=\", \"xfsprogs\"},\n                   {\"ext3\", \"tune2fs\", \"-l\", \"Inode size:\", \"e2fsprogs\"},\n                   {\"ext4\", \"tune2fs\", \"-l\", \"Inode size:\", \"e2fsprogs\"},\n                   {\"btrfs\", NULL, NULL, NULL, NULL},\n                   {\"zfs\", NULL, NULL, NULL, NULL},\n                   {NULL, NULL, NULL, NULL, NULL}};\n\nstatic int\nglusterd_add_inode_size_to_dict(dict_t *dict, int count)\n{\n    int ret = -1;\n    char key[64];\n    char buffer[4096] = \"\";\n    char *device = NULL;\n    char *fs_name = NULL;\n    char *cur_word = NULL;\n    char *trail = NULL;\n    runner_t runner = {\n        0,\n    };\n    struct fs_info *fs = NULL;\n    static dict_t *cached_fs = NULL;\n\n    ret = snprintf(key, sizeof(key), \"brick%d.device\", count);\n    ret = dict_get_strn(dict, key, ret, &device);\n    if (ret)\n        goto out;\n\n    if (cached_fs) {\n        if (dict_get_str(cached_fs, device, &cur_word) == 0) {\n            goto cached;\n        }\n    } else {\n        cached_fs = dict_new();\n    }\n\n    ret = snprintf(key, sizeof(key), \"brick%d.fs_name\", count);\n    ret = dict_get_strn(dict, key, ret, &fs_name);\n    if (ret)\n        goto out;\n\n    runinit(&runner);\n    runner_redir(&runner, STDOUT_FILENO, RUN_PIPE);\n\n    for (fs = glusterd_fs; fs->fs_type_name; fs++) {\n        if (strcmp(fs_name, fs->fs_type_name) == 0) {\n            if (!fs->fs_tool_name) {\n                /* dynamic inodes */\n                gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_INODE_SIZE_GET_FAIL,\n                       \"the \"\n                       \"brick on %s (%s) uses dynamic inode \"\n                       \"sizes\",\n                       device, fs_name);\n                cur_word = \"N/A\";\n                goto cached;\n            }\n            runner_add_arg(&runner, fs->fs_tool_name);\n            break;\n        }\n    }\n\n    if (runner.argv[0]) {\n        if (fs->fs_tool_arg)\n            runner_add_arg(&runner, fs->fs_tool_arg);\n        runner_add_arg(&runner, device);\n    } else {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_INODE_SIZE_GET_FAIL,\n               \"could not find %s to get\"\n               \"inode size for %s (%s): %s package missing?\",\n               fs->fs_tool_name, device, fs_name, fs->fs_tool_pkg);\n        goto out;\n    }\n\n    ret = runner_start(&runner);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, errno, GD_MSG_CMD_EXEC_FAIL,\n               \"failed to execute \"\n               \"\\\"%s\\\"\",\n               fs->fs_tool_name);\n        /*\n         * Runner_start might return an error after the child has\n         * been forked, e.g. if the program isn't there.  In that\n         * case, we still need to call runner_end to reap the\n         * child and free resources.  Fortunately, that seems to\n         * be harmless for other kinds of failures.\n         */\n        (void)runner_end(&runner);\n        goto out;\n    }\n\n    for (;;) {\n        if (fgets(buffer, sizeof(buffer),\n                  runner_chio(&runner, STDOUT_FILENO)) == NULL)\n            break;\n        trail = strrchr(buffer, '\\n');\n        if (trail)\n            *trail = '\\0';\n\n        cur_word = glusterd_parse_inode_size(buffer, fs->fs_tool_pattern);\n\n        if (cur_word)\n            break;\n    }\n\n    ret = runner_end(&runner);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, errno, GD_MSG_CMD_EXEC_FAIL,\n               \"%s exited with non-zero exit status\", fs->fs_tool_name);\n\n        goto out;\n    }\n    if (!cur_word) {\n        ret = -1;\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_INODE_SIZE_GET_FAIL,\n               \"Unable to retrieve inode size using %s\", fs->fs_tool_name);\n        goto out;\n    }\n\n    if (dict_set_dynstr_with_alloc(cached_fs, device, cur_word)) {\n        /* not fatal if not entered into the cache */\n        gf_msg_debug(THIS->name, 0, \"failed to cache fs inode size for %s\",\n                     device);\n    }\n\ncached:\n    snprintf(key, sizeof(key), \"brick%d.inode_size\", count);\n\n    ret = dict_set_dynstr_with_alloc(dict, key, cur_word);\n\nout:\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_INODE_SIZE_GET_FAIL,\n               \"failed to get inode size\");\n    return ret;\n}\n\nstruct mntent *\nglusterd_get_mnt_entry_info(char *mnt_pt, char *buff, int buflen,\n                            struct mntent *entry_ptr)\n{\n    struct mntent *entry = NULL;\n    FILE *mtab = NULL;\n    char abspath[PATH_MAX] = \"\";\n\n    GF_ASSERT(mnt_pt);\n    GF_ASSERT(buff);\n    GF_ASSERT(entry_ptr);\n\n    mtab = setmntent(_PATH_MOUNTED, \"r\");\n    if (!mtab)\n        goto out;\n\n    if (!realpath(mnt_pt, abspath)) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_MNTENTRY_GET_FAIL,\n               \"realpath () failed for path %s\", mnt_pt);\n        goto out;\n    }\n\n    entry = getmntent_r(mtab, entry_ptr, buff, buflen);\n\n    while (1) {\n        if (!entry)\n            goto out;\n\n        if (!strcmp(entry->mnt_dir, abspath) &&\n            strcmp(entry->mnt_type, \"rootfs\"))\n            break;\n        entry = getmntent_r(mtab, entry_ptr, buff, buflen);\n    }\n\nout:\n    if (NULL != mtab) {\n        endmntent(mtab);\n    }\n    return entry;\n}\n\nstatic int\nglusterd_add_brick_mount_details(glusterd_brickinfo_t *brickinfo, dict_t *dict,\n                                 int count)\n{\n    int ret = -1;\n    char key[64] = \"\";\n    char buff[PATH_MAX] = \"\";\n    char base_key[32] = \"\";\n    struct mntent save_entry = {0};\n    char *mnt_pt = NULL;\n    struct mntent *entry = NULL;\n\n    snprintf(base_key, sizeof(base_key), \"brick%d\", count);\n\n    ret = glusterd_get_brick_root(brickinfo->path, &mnt_pt);\n    if (ret)\n        goto out;\n\n    entry = glusterd_get_mnt_entry_info(mnt_pt, buff, sizeof(buff),\n                                        &save_entry);\n    if (!entry) {\n        ret = -1;\n        goto out;\n    }\n\n    /* get device file */\n    snprintf(key, sizeof(key), \"%s.device\", base_key);\n\n    ret = dict_set_dynstr_with_alloc(dict, key, entry->mnt_fsname);\n    if (ret)\n        goto out;\n\n    /* fs type */\n    snprintf(key, sizeof(key), \"%s.fs_name\", base_key);\n\n    ret = dict_set_dynstr_with_alloc(dict, key, entry->mnt_type);\n    if (ret)\n        goto out;\n\n    /* mount options */\n    snprintf(key, sizeof(key), \"%s.mnt_options\", base_key);\n\n    ret = dict_set_dynstr_with_alloc(dict, key, entry->mnt_opts);\n\nout:\n    if (mnt_pt)\n        GF_FREE(mnt_pt);\n\n    return ret;\n}\n\nchar *\nglusterd_get_brick_mount_device(char *brick_path)\n{\n    int ret = -1;\n    char *mnt_pt = NULL;\n    char *device = NULL;\n    char buff[PATH_MAX] = \"\";\n    struct mntent *entry = NULL;\n    struct mntent save_entry = {\n        0,\n    };\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n    GF_ASSERT(brick_path);\n\n    ret = glusterd_get_brick_root(brick_path, &mnt_pt);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_BRICKPATH_ROOT_GET_FAIL,\n               \"Failed to get mount point \"\n               \"for %s brick\",\n               brick_path);\n        goto out;\n    }\n\n    entry = glusterd_get_mnt_entry_info(mnt_pt, buff, sizeof(buff),\n                                        &save_entry);\n    if (NULL == entry) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_MNTENTRY_GET_FAIL,\n               \"Failed to get mnt entry \"\n               \"for %s mount path\",\n               mnt_pt);\n        goto out;\n    }\n\n    /* get the fs_name/device */\n    device = gf_strdup(entry->mnt_fsname);\n\nout:\n    if (mnt_pt)\n        GF_FREE(mnt_pt);\n\n    return device;\n}\n\nint\nglusterd_add_brick_detail_to_dict(glusterd_volinfo_t *volinfo,\n                                  glusterd_brickinfo_t *brickinfo, dict_t *dict,\n                                  int count)\n{\n    int ret = -1;\n    uint64_t memtotal = 0;\n    uint64_t memfree = 0;\n    uint64_t inodes_total = 0;\n    uint64_t inodes_free = 0;\n    uint64_t block_size = 0;\n    char key[64];\n    char base_key[32];\n    struct statvfs brickstat = {0};\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(volinfo);\n    GF_ASSERT(brickinfo);\n    GF_ASSERT(dict);\n\n    snprintf(base_key, sizeof(base_key), \"brick%d\", count);\n\n    ret = sys_statvfs(brickinfo->path, &brickstat);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n               \"statfs error: %s \", strerror(errno));\n        goto out;\n    }\n\n    /* file system block size */\n    block_size = brickstat.f_bsize;\n    snprintf(key, sizeof(key), \"%s.block_size\", base_key);\n    ret = dict_set_uint64(dict, key, block_size);\n    if (ret)\n        goto out;\n\n    /* free space in brick */\n    memfree = brickstat.f_bfree * brickstat.f_bsize;\n    snprintf(key, sizeof(key), \"%s.free\", base_key);\n    ret = dict_set_uint64(dict, key, memfree);\n    if (ret)\n        goto out;\n\n    /* total space of brick */\n    memtotal = brickstat.f_blocks * brickstat.f_bsize;\n    snprintf(key, sizeof(key), \"%s.total\", base_key);\n    ret = dict_set_uint64(dict, key, memtotal);\n    if (ret)\n        goto out;\n\n    /* inodes: total and free counts only for ext2/3/4 and xfs */\n    inodes_total = brickstat.f_files;\n    if (inodes_total) {\n        snprintf(key, sizeof(key), \"%s.total_inodes\", base_key);\n        ret = dict_set_uint64(dict, key, inodes_total);\n        if (ret)\n            goto out;\n    }\n\n    inodes_free = brickstat.f_ffree;\n    if (inodes_free) {\n        snprintf(key, sizeof(key), \"%s.free_inodes\", base_key);\n        ret = dict_set_uint64(dict, key, inodes_free);\n        if (ret)\n            goto out;\n    }\n\n    ret = glusterd_add_brick_mount_details(brickinfo, dict, count);\n    if (ret)\n        goto out;\n\n    ret = glusterd_add_inode_size_to_dict(dict, count);\nout:\n    if (ret)\n        gf_msg_debug(this->name, 0,\n                     \"Error adding brick\"\n                     \" detail to dict: %s\",\n                     strerror(errno));\n    return ret;\n}\n\nint32_t\nglusterd_add_brick_to_dict(glusterd_volinfo_t *volinfo,\n                           glusterd_brickinfo_t *brickinfo, dict_t *dict,\n                           int32_t count)\n{\n    int ret = -1;\n    int32_t pid = -1;\n    char key[64];\n    int keylen;\n    char base_key[32];\n    char pidfile[PATH_MAX] = \"\";\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n    gf_boolean_t brick_online = _gf_false;\n    char *brickpath = NULL;\n\n    GF_ASSERT(volinfo);\n    GF_ASSERT(brickinfo);\n    GF_ASSERT(dict);\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    priv = this->private;\n\n    snprintf(base_key, sizeof(base_key), \"brick%d\", count);\n    keylen = snprintf(key, sizeof(key), \"%s.hostname\", base_key);\n\n    ret = dict_set_strn(dict, key, keylen, brickinfo->hostname);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.path\", base_key);\n    ret = dict_set_strn(dict, key, keylen, brickinfo->path);\n    if (ret)\n        goto out;\n\n    /* add peer uuid */\n    snprintf(key, sizeof(key), \"%s.peerid\", base_key);\n    ret = dict_set_dynstr_with_alloc(dict, key, uuid_utoa(brickinfo->uuid));\n    if (ret) {\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.port\", base_key);\n    ret = dict_set_int32n(\n        dict, key, keylen,\n        (volinfo->transport_type == GF_TRANSPORT_RDMA) ? 0 : brickinfo->port);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.rdma_port\", base_key);\n    if (volinfo->transport_type == GF_TRANSPORT_RDMA) {\n        ret = dict_set_int32n(dict, key, keylen, brickinfo->port);\n    } else if (volinfo->transport_type == GF_TRANSPORT_BOTH_TCP_RDMA) {\n        ret = dict_set_int32n(dict, key, keylen, brickinfo->rdma_port);\n    } else\n        ret = dict_set_int32n(dict, key, keylen, 0);\n\n    if (ret)\n        goto out;\n\n    GLUSTERD_GET_BRICK_PIDFILE(pidfile, volinfo, brickinfo, priv);\n\n    if (glusterd_is_brick_started(brickinfo)) {\n        if (gf_is_service_running(pidfile, &pid) &&\n            brickinfo->port_registered) {\n            if (!is_brick_mx_enabled()) {\n                brick_online = _gf_true;\n            } else {\n                brickpath = search_brick_path_from_proc(pid, brickinfo->path);\n                if (!brickpath) {\n                    gf_log(this->name, GF_LOG_INFO,\n                           \"brick path %s is not consumed\", brickinfo->path);\n                    brick_online = _gf_false;\n                } else {\n                    brick_online = _gf_true;\n                    GF_FREE(brickpath);\n                }\n            }\n        } else {\n            pid = -1;\n        }\n    }\n\n    keylen = snprintf(key, sizeof(key), \"%s.pid\", base_key);\n    ret = dict_set_int32n(dict, key, keylen, pid);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"%s.status\", base_key);\n    ret = dict_set_int32n(dict, key, keylen, brick_online);\n\nout:\n    if (ret)\n        gf_msg_debug(this->name, 0, \"Returning %d\", ret);\n\n    return ret;\n}\n\nint32_t\nglusterd_get_all_volnames(dict_t *dict)\n{\n    int ret = -1;\n    int32_t vol_count = 0;\n    char key[64] = \"\";\n    int keylen;\n    glusterd_volinfo_t *entry = NULL;\n    glusterd_conf_t *priv = NULL;\n\n    priv = THIS->private;\n    GF_ASSERT(priv);\n\n    cds_list_for_each_entry(entry, &priv->volumes, vol_list)\n    {\n        keylen = snprintf(key, sizeof(key), \"vol%d\", vol_count);\n        ret = dict_set_strn(dict, key, keylen, entry->volname);\n        if (ret)\n            goto out;\n\n        vol_count++;\n    }\n\n    ret = dict_set_int32n(dict, \"vol_count\", SLEN(\"vol_count\"), vol_count);\n\nout:\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"failed to get all \"\n               \"volume names for status\");\n    return ret;\n}\n\nint\nglusterd_all_volume_cond_check(glusterd_condition_func func, int status,\n                               void *ctx)\n{\n    glusterd_conf_t *priv = NULL;\n    glusterd_volinfo_t *volinfo = NULL;\n    glusterd_brickinfo_t *brickinfo = NULL;\n    int ret = -1;\n    xlator_t *this = NULL;\n\n    this = THIS;\n    priv = this->private;\n\n    cds_list_for_each_entry(volinfo, &priv->volumes, vol_list)\n    {\n        cds_list_for_each_entry(brickinfo, &volinfo->bricks, brick_list)\n        {\n            ret = func(volinfo, brickinfo, ctx);\n            if (ret != status) {\n                ret = -1;\n                goto out;\n            }\n        }\n    }\n    ret = 0;\nout:\n    gf_msg_debug(\"glusterd\", 0, \"returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_brick_stop(glusterd_volinfo_t *volinfo,\n                    glusterd_brickinfo_t *brickinfo, gf_boolean_t del_brick)\n{\n    int ret = -1;\n    xlator_t *this = NULL;\n    glusterd_conf_t *conf = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n    conf = this->private;\n    GF_ASSERT(conf);\n\n    if ((!brickinfo) || (!volinfo))\n        goto out;\n\n    if (gf_uuid_is_null(brickinfo->uuid)) {\n        ret = glusterd_resolve_brick(brickinfo);\n        if (ret) {\n            gf_event(EVENT_BRICKPATH_RESOLVE_FAILED,\n                     \"peer=%s;volume=%s;brick=%s\", brickinfo->hostname,\n                     volinfo->volname, brickinfo->path);\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_RESOLVE_BRICK_FAIL,\n                   FMTSTR_RESOLVE_BRICK, brickinfo->hostname, brickinfo->path);\n            goto out;\n        }\n    }\n\n    if (gf_uuid_compare(brickinfo->uuid, MY_UUID)) {\n        ret = 0;\n        if (del_brick)\n            glusterd_delete_brick(volinfo, brickinfo);\n        goto out;\n    }\n\n    ret = glusterd_volume_stop_glusterfs(volinfo, brickinfo, del_brick);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_CRITICAL, 0, GD_MSG_BRICK_STOP_FAIL,\n               \"Unable to stop\"\n               \" brick: %s:%s\",\n               brickinfo->hostname, brickinfo->path);\n        goto out;\n    }\n\nout:\n    gf_msg_debug(this->name, 0, \"returning %d \", ret);\n    return ret;\n}\n\nint\nglusterd_is_defrag_on(glusterd_volinfo_t *volinfo)\n{\n    return (volinfo->rebal.defrag != NULL);\n}\n\nint\nglusterd_new_brick_validate(char *brick, glusterd_brickinfo_t *brickinfo,\n                            char *op_errstr, size_t len, char *op)\n{\n    glusterd_brickinfo_t *newbrickinfo = NULL;\n    int ret = -1;\n    gf_boolean_t is_allocated = _gf_false;\n    glusterd_peerinfo_t *peerinfo = NULL;\n    glusterd_conf_t *priv = NULL;\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    GF_ASSERT(brick);\n    GF_ASSERT(op_errstr);\n\n    if (!brickinfo) {\n        ret = glusterd_brickinfo_new_from_brick(brick, &newbrickinfo, _gf_true,\n                                                NULL);\n        if (ret)\n            goto out;\n        is_allocated = _gf_true;\n    } else {\n        newbrickinfo = brickinfo;\n    }\n\n    ret = glusterd_resolve_brick(newbrickinfo);\n    if (ret) {\n        snprintf(op_errstr, len,\n                 \"Host %s is not in \\'Peer \"\n                 \"in Cluster\\' state\",\n                 newbrickinfo->hostname);\n        goto out;\n    }\n\n    if (!gf_uuid_compare(MY_UUID, newbrickinfo->uuid)) {\n        /* brick is local */\n        if (!glusterd_is_brickpath_available(newbrickinfo->uuid,\n                                             newbrickinfo->path)) {\n            snprintf(op_errstr, len,\n                     \"Brick: %s not available.\"\n                     \" Brick may be containing or be contained \"\n                     \"by an existing brick.\",\n                     brick);\n            if (op && (!strcmp(op, \"GF_RESET_OP_COMMIT\") ||\n                       !strcmp(op, \"GF_RESET_OP_COMMIT_FORCE\")))\n                ret = 1;\n            else\n                ret = -1;\n            goto out;\n        }\n\n    } else {\n        peerinfo = glusterd_peerinfo_find_by_uuid(newbrickinfo->uuid);\n        if (peerinfo == NULL) {\n            ret = -1;\n            snprintf(op_errstr, len, \"Failed to find host %s\",\n                     newbrickinfo->hostname);\n            goto out;\n        }\n\n        if ((!peerinfo->connected)) {\n            snprintf(op_errstr, len, \"Host %s not connected\",\n                     newbrickinfo->hostname);\n            ret = -1;\n            goto out;\n        }\n\n        if (peerinfo->state.state != GD_FRIEND_STATE_BEFRIENDED) {\n            snprintf(op_errstr, len,\n                     \"Host %s is not in \\'Peer \"\n                     \"in Cluster\\' state\",\n                     newbrickinfo->hostname);\n            ret = -1;\n            goto out;\n        }\n    }\n\n    ret = 0;\nout:\n    if (is_allocated)\n        glusterd_brickinfo_delete(newbrickinfo);\n    if (op_errstr[0] != '\\0')\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_BRICK_VALIDATE_FAIL, \"%s\",\n               op_errstr);\n    gf_msg_debug(this->name, 0, \"returning %d \", ret);\n    return ret;\n}\n\nint\nglusterd_rb_check_bricks(glusterd_volinfo_t *volinfo, glusterd_brickinfo_t *src,\n                         glusterd_brickinfo_t *dst)\n{\n    glusterd_replace_brick_t *rb = NULL;\n\n    GF_ASSERT(volinfo);\n\n    rb = &volinfo->rep_brick;\n\n    if (!rb->src_brick || !rb->dst_brick)\n        return -1;\n\n    if (strcmp(rb->src_brick->hostname, src->hostname) ||\n        strcmp(rb->src_brick->path, src->path)) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_RB_SRC_BRICKS_MISMATCH,\n               \"Replace brick src bricks differ\");\n        return -1;\n    }\n\n    if (strcmp(rb->dst_brick->hostname, dst->hostname) ||\n        strcmp(rb->dst_brick->path, dst->path)) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_RB_DST_BRICKS_MISMATCH,\n               \"Replace brick dst bricks differ\");\n        return -1;\n    }\n\n    return 0;\n}\n\n/*path needs to be absolute; works only on gfid, volume-id*/\nstatic int\nglusterd_is_uuid_present(char *path, char *xattr, gf_boolean_t *present)\n{\n    GF_ASSERT(path);\n    GF_ASSERT(xattr);\n    GF_ASSERT(present);\n\n    int ret = -1;\n    uuid_t uid = {\n        0,\n    };\n\n    if (!path || !xattr || !present)\n        goto out;\n\n    ret = sys_lgetxattr(path, xattr, &uid, 16);\n\n    if (ret >= 0) {\n        *present = _gf_true;\n        ret = 0;\n        goto out;\n    }\n\n    switch (errno) {\n#if defined(ENODATA)\n        case ENODATA: /* FALLTHROUGH */\n#endif\n#if defined(ENOATTR) && (ENOATTR != ENODATA)\n        case ENOATTR: /* FALLTHROUGH */\n#endif\n        case ENOTSUP:\n            *present = _gf_false;\n            ret = 0;\n            break;\n        default:\n            break;\n    }\nout:\n    return ret;\n}\n\n/*path needs to be absolute*/\nstatic int\nglusterd_is_path_in_use(char *path, gf_boolean_t *in_use, char **op_errstr)\n{\n    int i = 0;\n    int ret = -1;\n    gf_boolean_t used = _gf_false;\n    char dir[PATH_MAX] = \"\";\n    char *curdir = NULL;\n    char msg[2048] = \"\";\n    char *keys[3] = {GFID_XATTR_KEY, GF_XATTR_VOL_ID_KEY, NULL};\n\n    GF_ASSERT(path);\n    if (!path)\n        goto out;\n\n    if (snprintf(dir, PATH_MAX, \"%s\", path) >= PATH_MAX)\n        goto out;\n\n    curdir = dir;\n    do {\n        for (i = 0; !used && keys[i]; i++) {\n            ret = glusterd_is_uuid_present(curdir, keys[i], &used);\n            if (ret)\n                goto out;\n        }\n\n        if (used)\n            break;\n\n        curdir = dirname(curdir);\n        if (!strcmp(curdir, \".\"))\n            goto out;\n\n    } while (strcmp(curdir, \"/\"));\n\n    if (!strcmp(curdir, \"/\")) {\n        for (i = 0; !used && keys[i]; i++) {\n            ret = glusterd_is_uuid_present(curdir, keys[i], &used);\n            if (ret)\n                goto out;\n        }\n    }\n\n    ret = 0;\n    *in_use = used;\nout:\n    if (ret) {\n        snprintf(msg, sizeof(msg),\n                 \"Failed to get extended \"\n                 \"attribute %s, reason: %s\",\n                 keys[i], strerror(errno));\n    }\n\n    if (*in_use) {\n        if (path && curdir && !strcmp(path, curdir)) {\n            snprintf(msg, sizeof(msg),\n                     \"%s is already part of a \"\n                     \"volume\",\n                     path);\n        } else {\n            snprintf(msg, sizeof(msg),\n                     \"parent directory %s is \"\n                     \"already part of a volume\",\n                     curdir);\n        }\n    }\n\n    if (strlen(msg)) {\n        gf_msg(THIS->name, GF_LOG_ERROR, errno, GD_MSG_PATH_ALREADY_PART_OF_VOL,\n               \"%s\", msg);\n        *op_errstr = gf_strdup(msg);\n    }\n\n    return ret;\n}\n\nint\nglusterd_check_and_set_brick_xattr(char *host, char *path, uuid_t uuid,\n                                   char **op_errstr, gf_boolean_t is_force)\n{\n    int ret = -1;\n    char msg[2048] = \"\";\n    gf_boolean_t in_use = _gf_false;\n    int flags = 0;\n\n    /* Check for xattr support in backend fs */\n    ret = sys_lsetxattr(path, \"trusted.glusterfs.test\", \"working\", 8, 0);\n    if (ret == -1) {\n        snprintf(msg, sizeof(msg),\n                 \"Glusterfs is not\"\n                 \" supported on brick: %s:%s.\\nSetting\"\n                 \" extended attributes failed, reason:\"\n                 \" %s.\",\n                 host, path, strerror(errno));\n        goto out;\n\n    } else {\n        ret = sys_lremovexattr(path, \"trusted.glusterfs.test\");\n        if (ret) {\n            snprintf(msg, sizeof(msg),\n                     \"Removing test extended\"\n                     \" attribute failed, reason: %s\",\n                     strerror(errno));\n            goto out;\n        }\n    }\n\n    ret = glusterd_is_path_in_use(path, &in_use, op_errstr);\n    if (ret)\n        goto out;\n\n    if (in_use && !is_force) {\n        ret = -1;\n        goto out;\n    }\n\n    if (!is_force)\n        flags = XATTR_CREATE;\n\n    ret = sys_lsetxattr(path, GF_XATTR_VOL_ID_KEY, uuid, 16, flags);\n    if (ret == -1) {\n        snprintf(msg, sizeof(msg),\n                 \"Failed to set extended \"\n                 \"attributes %s, reason: %s\",\n                 GF_XATTR_VOL_ID_KEY, strerror(errno));\n        goto out;\n    }\n\n    ret = 0;\nout:\n    if (strlen(msg))\n        *op_errstr = gf_strdup(msg);\n\n    return ret;\n}\n\nstatic int\nglusterd_sm_tr_log_transition_add_to_dict(dict_t *dict,\n                                          glusterd_sm_tr_log_t *log, int i,\n                                          int count)\n{\n    int ret = -1;\n    char key[64] = \"\";\n    int keylen;\n    char timestr[64] = \"\";\n    char *str = NULL;\n\n    GF_ASSERT(dict);\n    GF_ASSERT(log);\n\n    keylen = snprintf(key, sizeof(key), \"log%d-old-state\", count);\n    str = log->state_name_get(log->transitions[i].old_state);\n    ret = dict_set_strn(dict, key, keylen, str);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"log%d-event\", count);\n    str = log->event_name_get(log->transitions[i].event);\n    ret = dict_set_strn(dict, key, keylen, str);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"log%d-new-state\", count);\n    str = log->state_name_get(log->transitions[i].new_state);\n    ret = dict_set_strn(dict, key, keylen, str);\n    if (ret)\n        goto out;\n\n    snprintf(key, sizeof(key), \"log%d-time\", count);\n    gf_time_fmt(timestr, sizeof timestr, log->transitions[i].time,\n                gf_timefmt_FT);\n    ret = dict_set_dynstr_with_alloc(dict, key, timestr);\n    if (ret)\n        goto out;\n\nout:\n    gf_msg_debug(\"glusterd\", 0, \"returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_sm_tr_log_add_to_dict(dict_t *dict, glusterd_sm_tr_log_t *circular_log)\n{\n    int ret = -1;\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    int index = 0;\n    char key[16] = {0};\n    glusterd_sm_tr_log_t *log = NULL;\n    int count = 0;\n\n    GF_ASSERT(dict);\n    GF_ASSERT(circular_log);\n\n    log = circular_log;\n    if (!log->count)\n        return 0;\n\n    if (log->count == log->size)\n        start = log->current + 1;\n\n    end = start + log->count;\n    for (i = start; i < end; i++, count++) {\n        index = i % log->count;\n        ret = glusterd_sm_tr_log_transition_add_to_dict(dict, log, index,\n                                                        count);\n        if (ret)\n            goto out;\n    }\n\n    ret = snprintf(key, sizeof(key), \"count\");\n    ret = dict_set_int32n(dict, key, ret, log->count);\n\nout:\n    gf_msg_debug(\"glusterd\", 0, \"returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_sm_tr_log_init(glusterd_sm_tr_log_t *log, char *(*state_name_get)(int),\n                        char *(*event_name_get)(int), size_t size)\n{\n    glusterd_sm_transition_t *transitions = NULL;\n    int ret = -1;\n\n    GF_ASSERT(size > 0);\n    GF_ASSERT(log && state_name_get && event_name_get);\n\n    if (!log || !state_name_get || !event_name_get || (size <= 0))\n        goto out;\n\n    transitions = GF_CALLOC(size, sizeof(*transitions), gf_gld_mt_sm_tr_log_t);\n    if (!transitions)\n        goto out;\n\n    log->transitions = transitions;\n    log->size = size;\n    log->state_name_get = state_name_get;\n    log->event_name_get = event_name_get;\n    ret = 0;\n\nout:\n    gf_msg_debug(\"glusterd\", 0, \"returning %d\", ret);\n    return ret;\n}\n\nvoid\nglusterd_sm_tr_log_delete(glusterd_sm_tr_log_t *log)\n{\n    if (!log)\n        return;\n    GF_FREE(log->transitions);\n    return;\n}\n\nint\nglusterd_sm_tr_log_transition_add(glusterd_sm_tr_log_t *log, int old_state,\n                                  int new_state, int event)\n{\n    glusterd_sm_transition_t *transitions = NULL;\n    int ret = -1;\n    int next = 0;\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    GF_ASSERT(log);\n    if (!log)\n        goto out;\n\n    transitions = log->transitions;\n    if (!transitions)\n        goto out;\n\n    if (log->count)\n        next = (log->current + 1) % log->size;\n    else\n        next = 0;\n\n    transitions[next].old_state = old_state;\n    transitions[next].new_state = new_state;\n    transitions[next].event = event;\n    time(&transitions[next].time);\n    log->current = next;\n    if (log->count < log->size)\n        log->count++;\n    ret = 0;\n    gf_msg_debug(this->name, 0,\n                 \"Transitioning from '%s' to '%s' \"\n                 \"due to event '%s'\",\n                 log->state_name_get(old_state), log->state_name_get(new_state),\n                 log->event_name_get(event));\nout:\n    gf_msg_debug(this->name, 0, \"returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_remove_pending_entry(struct cds_list_head *list, void *elem)\n{\n    glusterd_pending_node_t *pending_node = NULL;\n    glusterd_pending_node_t *tmp = NULL;\n    int ret = 0;\n\n    cds_list_for_each_entry_safe(pending_node, tmp, list, list)\n    {\n        if (elem == pending_node->node) {\n            cds_list_del_init(&pending_node->list);\n            GF_FREE(pending_node);\n            ret = 0;\n            goto out;\n        }\n    }\nout:\n    gf_msg_debug(THIS->name, 0, \"returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_clear_pending_nodes(struct cds_list_head *list)\n{\n    glusterd_pending_node_t *pending_node = NULL;\n    glusterd_pending_node_t *tmp = NULL;\n\n    cds_list_for_each_entry_safe(pending_node, tmp, list, list)\n    {\n        cds_list_del_init(&pending_node->list);\n        GF_FREE(pending_node);\n    }\n\n    return 0;\n}\n\nint32_t\nglusterd_delete_volume(glusterd_volinfo_t *volinfo)\n{\n    int ret = -1;\n    GF_ASSERT(volinfo);\n\n    ret = glusterd_store_delete_volume(volinfo);\n\n    if (ret)\n        goto out;\n\n    glusterd_volinfo_remove(volinfo);\nout:\n    gf_msg_debug(THIS->name, 0, \"returning %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_delete_brick(glusterd_volinfo_t *volinfo,\n                      glusterd_brickinfo_t *brickinfo)\n{\n    int ret = 0;\n    char voldir[PATH_MAX] = \"\";\n    glusterd_conf_t *priv = THIS->private;\n    GF_ASSERT(volinfo);\n    GF_ASSERT(brickinfo);\n\n    GLUSTERD_GET_VOLUME_DIR(voldir, volinfo, priv);\n\n    glusterd_delete_volfile(volinfo, brickinfo);\n    glusterd_store_delete_brick(brickinfo, voldir);\n    glusterd_brickinfo_delete(brickinfo);\n    volinfo->brick_count--;\n    return ret;\n}\n\nint32_t\nglusterd_delete_all_bricks(glusterd_volinfo_t *volinfo)\n{\n    int ret = 0;\n    glusterd_brickinfo_t *brickinfo = NULL;\n    glusterd_brickinfo_t *tmp = NULL;\n\n    GF_ASSERT(volinfo);\n\n    cds_list_for_each_entry_safe(brickinfo, tmp, &volinfo->bricks, brick_list)\n    {\n        ret = glusterd_delete_brick(volinfo, brickinfo);\n    }\n    return ret;\n}\n\nint\nglusterd_get_local_brickpaths(glusterd_volinfo_t *volinfo, char **pathlist)\n{\n    char **path_tokens = NULL;\n    char *tmp_path_list = NULL;\n    char path[PATH_MAX] = \"\";\n    int32_t count = 0;\n    int32_t pathlen = 0;\n    int32_t total_len = 0;\n    int32_t ret = 0;\n    int i = 0;\n    glusterd_brickinfo_t *brickinfo = NULL;\n\n    if ((!volinfo) || (!pathlist))\n        goto out;\n\n    path_tokens = GF_CALLOC(sizeof(char *), volinfo->brick_count,\n                            gf_gld_mt_charptr);\n    if (!path_tokens) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, ENOMEM, GD_MSG_NO_MEMORY,\n               \"Could not allocate memory.\");\n        ret = -1;\n        goto out;\n    }\n\n    cds_list_for_each_entry(brickinfo, &volinfo->bricks, brick_list)\n    {\n        if (gf_uuid_compare(brickinfo->uuid, MY_UUID))\n            continue;\n\n        pathlen = snprintf(path, sizeof(path), \"--path=%s \", brickinfo->path);\n        if (pathlen < sizeof(path))\n            path[pathlen] = '\\0';\n        else\n            path[sizeof(path) - 1] = '\\0';\n        path_tokens[count] = gf_strdup(path);\n        if (!path_tokens[count]) {\n            gf_msg(\"glusterd\", GF_LOG_ERROR, ENOMEM, GD_MSG_NO_MEMORY,\n                   \"Could not allocate memory.\");\n            ret = -1;\n            goto out;\n        }\n        count++;\n        total_len += pathlen;\n    }\n\n    tmp_path_list = GF_CALLOC(sizeof(char), total_len + 1, gf_gld_mt_char);\n    if (!tmp_path_list) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, ENOMEM, GD_MSG_NO_MEMORY,\n               \"Could not allocate memory.\");\n        ret = -1;\n        goto out;\n    }\n\n    for (i = 0; i < count; i++)\n        strcat(tmp_path_list, path_tokens[i]);\n\n    if (count)\n        *pathlist = tmp_path_list;\n\n    ret = count;\nout:\n    if (path_tokens) {\n        for (i = 0; i < count; i++) {\n            GF_FREE(path_tokens[i]);\n        }\n    }\n\n    GF_FREE(path_tokens);\n    path_tokens = NULL;\n\n    if (ret == 0) {\n        gf_msg_debug(\"glusterd\", 0, \"No Local Bricks Present.\");\n        GF_FREE(tmp_path_list);\n        tmp_path_list = NULL;\n    }\n\n    gf_msg_debug(\"glusterd\", 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_start_gsync(glusterd_volinfo_t *master_vol, char *slave,\n                     char *path_list, char *conf_path, char *glusterd_uuid_str,\n                     char **op_errstr, gf_boolean_t is_pause)\n{\n    int32_t ret = 0;\n    int32_t status = 0;\n    char uuid_str[64] = \"\";\n    runner_t runner = {\n        0,\n    };\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n    int errcode = 0;\n    gf_boolean_t is_template_in_use = _gf_false;\n\n    this = THIS;\n    GF_ASSERT(this);\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    uuid_utoa_r(MY_UUID, uuid_str);\n\n    if (!path_list) {\n        ret = 0;\n        gf_msg_debug(\"glusterd\", 0,\n                     \"No Bricks in this node.\"\n                     \" Not starting gsyncd.\");\n        goto out;\n    }\n\n    ret = gsync_status(master_vol->volname, slave, conf_path, &status,\n                       &is_template_in_use);\n    if (status == 0)\n        goto out;\n\n    if (is_template_in_use == _gf_true) {\n        gf_asprintf(op_errstr,\n                    GEOREP\n                    \" start failed for %s %s : \"\n                    \"pid-file entry missing in config file\",\n                    master_vol->volname, slave);\n        ret = -1;\n        goto out;\n    }\n\n    uuid_utoa_r(master_vol->volume_id, uuid_str);\n    runinit(&runner);\n    runner_add_args(&runner, GSYNCD_PREFIX \"/gsyncd\", path_list, \"-c\", NULL);\n    runner_argprintf(&runner, \"%s\", conf_path);\n    runner_argprintf(&runner, \":%s\", master_vol->volname);\n    runner_add_args(&runner, slave, \"--config-set\", \"session-owner\", NULL);\n    runner_argprintf(&runner, \"--value=%s\", uuid_str);\n    synclock_unlock(&priv->big_lock);\n    ret = runner_run(&runner);\n    synclock_lock(&priv->big_lock);\n    if (ret == -1) {\n        errcode = -1;\n        goto out;\n    }\n\n    runinit(&runner);\n    runner_add_args(&runner, GSYNCD_PREFIX \"/gsyncd\", path_list, \"--monitor\",\n                    \"-c\", NULL);\n    runner_argprintf(&runner, \"%s\", conf_path);\n    runner_argprintf(&runner, \"--iprefix=%s\", DATADIR);\n    runner_argprintf(&runner, \":%s\", master_vol->volname);\n    runner_argprintf(&runner, \"--glusterd-uuid=%s\", uuid_utoa(priv->uuid));\n    runner_add_arg(&runner, slave);\n    if (is_pause)\n        runner_add_arg(&runner, \"--pause-on-start\");\n    synclock_unlock(&priv->big_lock);\n    ret = runner_run(&runner);\n    synclock_lock(&priv->big_lock);\n    if (ret == -1) {\n        gf_asprintf(op_errstr, GEOREP \" start failed for %s %s\",\n                    master_vol->volname, slave);\n        goto out;\n    }\n\n    ret = 0;\n\nout:\n    if ((ret != 0) && errcode == -1) {\n        if (op_errstr)\n            *op_errstr = gf_strdup(\n                \"internal error, cannot start \"\n                \"the \" GEOREP \" session\");\n    }\n\n    gf_msg_debug(\"glusterd\", 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_recreate_volfiles(glusterd_conf_t *conf)\n{\n    glusterd_volinfo_t *volinfo = NULL;\n    int ret = 0;\n    int op_ret = 0;\n\n    GF_ASSERT(conf);\n\n    cds_list_for_each_entry(volinfo, &conf->volumes, vol_list)\n    {\n        ret = generate_brick_volfiles(volinfo);\n        if (ret) {\n            gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_VOLFILE_CREATE_FAIL,\n                   \"Failed to \"\n                   \"regenerate brick volfiles for %s\",\n                   volinfo->volname);\n            op_ret = ret;\n        }\n        ret = generate_client_volfiles(volinfo, GF_CLIENT_TRUSTED);\n        if (ret) {\n            gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_VOLFILE_CREATE_FAIL,\n                   \"Failed to \"\n                   \"regenerate trusted client volfiles for %s\",\n                   volinfo->volname);\n            op_ret = ret;\n        }\n        ret = generate_client_volfiles(volinfo, GF_CLIENT_OTHER);\n        if (ret) {\n            gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_VOLFILE_CREATE_FAIL,\n                   \"Failed to \"\n                   \"regenerate client volfiles for %s\",\n                   volinfo->volname);\n            op_ret = ret;\n        }\n    }\n    return op_ret;\n}\n\nint32_t\nglusterd_handle_upgrade_downgrade(dict_t *options, glusterd_conf_t *conf,\n                                  gf_boolean_t upgrade, gf_boolean_t downgrade)\n{\n    int ret = 0;\n    gf_boolean_t regenerate_volfiles = _gf_false;\n    gf_boolean_t terminate = _gf_false;\n\n    if (_gf_true == upgrade)\n        regenerate_volfiles = _gf_true;\n\n    if (upgrade && downgrade) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_WRONG_OPTS_SETTING,\n               \"Both upgrade and downgrade\"\n               \" options are set. Only one should be on\");\n        ret = -1;\n        goto out;\n    }\n\n    if (!upgrade && !downgrade)\n        ret = 0;\n    else\n        terminate = _gf_true;\n    if (regenerate_volfiles) {\n        ret = glusterd_recreate_volfiles(conf);\n    }\nout:\n    if (terminate && (ret == 0))\n        kill(getpid(), SIGTERM);\n    return ret;\n}\n\nstatic inline int\nglusterd_is_replica_volume(int type)\n{\n    if (type == GF_CLUSTER_TYPE_REPLICATE)\n        return 1;\n    return 0;\n}\ngf_boolean_t\nglusterd_is_volume_replicate(glusterd_volinfo_t *volinfo)\n{\n    return glusterd_is_replica_volume((volinfo->type));\n}\n\ngf_boolean_t\nglusterd_is_shd_compatible_type(int type)\n{\n    switch (type) {\n        case GF_CLUSTER_TYPE_REPLICATE:\n        case GF_CLUSTER_TYPE_DISPERSE:\n            return _gf_true;\n    }\n    return _gf_false;\n}\n\ngf_boolean_t\nglusterd_is_shd_compatible_volume(glusterd_volinfo_t *volinfo)\n{\n    return glusterd_is_shd_compatible_type(volinfo->type);\n}\n\nint\nglusterd_set_dump_options(char *dumpoptions_path, char *options, int option_cnt)\n{\n    int ret = 0;\n    char *dup_options = NULL;\n    char *option = NULL;\n    char *tmpptr = NULL;\n    FILE *fp = NULL;\n    int nfs_cnt = 0;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    if (0 == option_cnt || (option_cnt == 1 && (!strcmp(options, \"nfs \")))) {\n        ret = 0;\n        goto out;\n    }\n\n    fp = fopen(dumpoptions_path, \"w\");\n    if (!fp) {\n        ret = -1;\n        goto out;\n    }\n    dup_options = gf_strdup(options);\n\n    if (!dup_options) {\n        goto out;\n    }\n    gf_msg(\"glusterd\", GF_LOG_INFO, 0, GD_MSG_STATEDUMP_OPTS_RCVD,\n           \"Received following statedump options: %s\", dup_options);\n    option = strtok_r(dup_options, \" \", &tmpptr);\n    while (option) {\n        if (!strcmp(option, priv->nfs_svc.name)) {\n            if (nfs_cnt > 0) {\n                sys_unlink(dumpoptions_path);\n                ret = 0;\n                goto out;\n            }\n            nfs_cnt++;\n            option = strtok_r(NULL, \" \", &tmpptr);\n            continue;\n        }\n        fprintf(fp, \"%s=yes\\n\", option);\n        option = strtok_r(NULL, \" \", &tmpptr);\n    }\n\nout:\n    if (fp)\n        fclose(fp);\n    GF_FREE(dup_options);\n    return ret;\n}\n\nstatic int\nglusterd_brick_signal(glusterd_volinfo_t *volinfo,\n                      glusterd_brickinfo_t *brickinfo, char *options,\n                      int option_cnt, char **op_errstr, int sig)\n{\n    int ret = -1;\n    xlator_t *this = NULL;\n    glusterd_conf_t *conf = NULL;\n    char pidfile_path[PATH_MAX] = \"\";\n    char dumpoptions_path[PATH_MAX] = \"\";\n    FILE *pidfile = NULL;\n    pid_t pid = -1;\n\n    this = THIS;\n    GF_ASSERT(this);\n    conf = this->private;\n    GF_ASSERT(conf);\n\n    if (gf_uuid_is_null(brickinfo->uuid)) {\n        ret = glusterd_resolve_brick(brickinfo);\n        if (ret) {\n            gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_RESOLVE_BRICK_FAIL,\n                   \"Cannot resolve brick %s:%s\", brickinfo->hostname,\n                   brickinfo->path);\n            goto out;\n        }\n    }\n\n    if (gf_uuid_compare(brickinfo->uuid, MY_UUID)) {\n        ret = 0;\n        goto out;\n    }\n\n    GLUSTERD_GET_BRICK_PIDFILE(pidfile_path, volinfo, brickinfo, conf);\n\n    /* TBD: use gf_is_service_running instead of almost-identical code? */\n    pidfile = fopen(pidfile_path, \"r\");\n    if (!pidfile) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n               \"Unable to open pidfile: %s\", pidfile_path);\n        ret = -1;\n        goto out;\n    }\n\n    ret = fscanf(pidfile, \"%d\", &pid);\n    if (ret <= 0) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n               \"Unable to get pid of brick process\");\n        ret = -1;\n        goto out;\n    }\n\n    if (pid == 0) {\n        gf_msg(\"glusterd\", GF_LOG_WARNING, 0, GD_MSG_NO_SIG_TO_PID_ZERO,\n               \"refusing to send signal %d to pid zero\", sig);\n        goto out;\n    }\n\n    if (sig == SIGUSR1) {\n        snprintf(dumpoptions_path, sizeof(dumpoptions_path),\n                 DEFAULT_VAR_RUN_DIRECTORY \"/glusterdump.%d.options\", pid);\n        ret = glusterd_set_dump_options(dumpoptions_path, options, option_cnt);\n        if (ret < 0) {\n            gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_BRK_STATEDUMP_FAIL,\n                   \"error while parsing the statedump \"\n                   \"options\");\n            ret = -1;\n            goto out;\n        }\n    }\n\n    gf_msg(\"glusterd\", GF_LOG_INFO, 0, GD_MSG_STATEDUMP_INFO,\n           \"sending signal %d to brick with pid %d\", sig, pid);\n\n    kill(pid, sig);\n\n    sleep(1);\n    sys_unlink(dumpoptions_path);\n    ret = 0;\nout:\n    if (pidfile)\n        fclose(pidfile);\n    return ret;\n}\n\nint\nglusterd_brick_statedump(glusterd_volinfo_t *volinfo,\n                         glusterd_brickinfo_t *brickinfo, char *options,\n                         int option_cnt, char **op_errstr)\n{\n    return glusterd_brick_signal(volinfo, brickinfo, options, option_cnt,\n                                 op_errstr, SIGUSR1);\n}\n\nint\nglusterd_brick_terminate(glusterd_volinfo_t *volinfo,\n                         glusterd_brickinfo_t *brickinfo, char *options,\n                         int option_cnt, char **op_errstr)\n{\n    return glusterd_brick_signal(volinfo, brickinfo, options, option_cnt,\n                                 op_errstr, SIGTERM);\n}\n\nint\nglusterd_nfs_statedump(char *options, int option_cnt, char **op_errstr)\n{\n    int ret = -1;\n    xlator_t *this = NULL;\n    glusterd_conf_t *conf = NULL;\n    char pidfile_path[PATH_MAX] = \"\";\n    char path[PATH_MAX] = \"\";\n    FILE *pidfile = NULL;\n    pid_t pid = -1;\n    char dumpoptions_path[PATH_MAX] = \"\";\n    char *option = NULL;\n    char *tmpptr = NULL;\n    char *dup_options = NULL;\n    char msg[256] = \"\";\n\n    this = THIS;\n    GF_ASSERT(this);\n    conf = this->private;\n    GF_ASSERT(conf);\n\n    dup_options = gf_strdup(options);\n\n    if (!dup_options) {\n        goto out;\n    }\n    option = strtok_r(dup_options, \" \", &tmpptr);\n    if (strcmp(option, conf->nfs_svc.name)) {\n        snprintf(msg, sizeof(msg),\n                 \"for nfs statedump, options should\"\n                 \" be after the key nfs\");\n        *op_errstr = gf_strdup(msg);\n        ret = -1;\n        goto out;\n    }\n\n    GLUSTERD_GET_NFS_DIR(path, conf);\n    GLUSTERD_GET_NFS_PIDFILE(pidfile_path, path, conf);\n\n    pidfile = fopen(pidfile_path, \"r\");\n    if (!pidfile) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n               \"Unable to open pidfile: %s\", pidfile_path);\n        ret = -1;\n        goto out;\n    }\n\n    ret = fscanf(pidfile, \"%d\", &pid);\n    if (ret <= 0) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n               \"Unable to get pid of brick process\");\n        ret = -1;\n        goto out;\n    }\n\n    snprintf(dumpoptions_path, sizeof(dumpoptions_path),\n             DEFAULT_VAR_RUN_DIRECTORY \"/glusterdump.%d.options\", pid);\n    ret = glusterd_set_dump_options(dumpoptions_path, options, option_cnt);\n    if (ret < 0) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_BRK_STATEDUMP_FAIL,\n               \"error while parsing the statedump \"\n               \"options\");\n        ret = -1;\n        goto out;\n    }\n\n    gf_msg(\"glusterd\", GF_LOG_INFO, 0, GD_MSG_STATEDUMP_INFO,\n           \"Performing statedump on nfs server with \"\n           \"pid %d\",\n           pid);\n\n    kill(pid, SIGUSR1);\n\n    sleep(1);\n    /* coverity[TAINTED_STRING] */\n    sys_unlink(dumpoptions_path);\n    ret = 0;\nout:\n    if (pidfile)\n        fclose(pidfile);\n    GF_FREE(dup_options);\n    return ret;\n}\n\nint\nglusterd_client_statedump(char *volname, char *options, int option_cnt,\n                          char **op_errstr)\n{\n    int ret = 0;\n    char *dup_options = NULL;\n    char *option = NULL;\n    char *tmpptr = NULL;\n    char msg[256] = \"\";\n    char *target_ip = NULL;\n    char *pid = NULL;\n\n    dup_options = gf_strdup(options);\n    if (!dup_options) {\n        goto out;\n    }\n    option = strtok_r(dup_options, \" \", &tmpptr);\n    if (strcmp(option, \"client\")) {\n        snprintf(msg, sizeof(msg),\n                 \"for gluster client statedump, options \"\n                 \"should be after the key 'client'\");\n        *op_errstr = gf_strdup(msg);\n        ret = -1;\n        goto out;\n    }\n    target_ip = strtok_r(NULL, \" \", &tmpptr);\n    if (target_ip == NULL) {\n        snprintf(msg, sizeof(msg), \"ip address not specified\");\n        *op_errstr = gf_strdup(msg);\n        ret = -1;\n        goto out;\n    }\n\n    pid = strtok_r(NULL, \" \", &tmpptr);\n    if (pid == NULL) {\n        snprintf(msg, sizeof(msg), \"pid not specified\");\n        *op_errstr = gf_strdup(msg);\n        ret = -1;\n        goto out;\n    }\n\n    ret = glusterd_client_statedump_submit_req(volname, target_ip, pid);\nout:\n    GF_FREE(dup_options);\n    return ret;\n}\n\nint\nglusterd_quotad_statedump(char *options, int option_cnt, char **op_errstr)\n{\n    int ret = -1;\n    xlator_t *this = NULL;\n    glusterd_conf_t *conf = NULL;\n    char pidfile_path[PATH_MAX] = \"\";\n    char path[PATH_MAX] = \"\";\n    FILE *pidfile = NULL;\n    pid_t pid = -1;\n    char dumpoptions_path[PATH_MAX] = \"\";\n    char *option = NULL;\n    char *tmpptr = NULL;\n    char *dup_options = NULL;\n    char msg[256] = \"\";\n\n    this = THIS;\n    GF_ASSERT(this);\n    conf = this->private;\n    GF_ASSERT(conf);\n\n    dup_options = gf_strdup(options);\n    if (!dup_options) {\n        goto out;\n    }\n    option = strtok_r(dup_options, \" \", &tmpptr);\n    if (strcmp(option, conf->quotad_svc.name)) {\n        snprintf(msg, sizeof(msg),\n                 \"for quotad statedump, options \"\n                 \"should be after the key 'quotad'\");\n        *op_errstr = gf_strdup(msg);\n        ret = -1;\n        goto out;\n    }\n\n    GLUSTERD_GET_QUOTAD_DIR(path, conf);\n    GLUSTERD_GET_QUOTAD_PIDFILE(pidfile_path, path, conf);\n\n    pidfile = fopen(pidfile_path, \"r\");\n    if (!pidfile) {\n        gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n               \"Unable to open pidfile: %s\", pidfile_path);\n        ret = -1;\n        goto out;\n    }\n\n    ret = fscanf(pidfile, \"%d\", &pid);\n    if (ret <= 0) {\n        gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n               \"Unable to get pid of quotad \"\n               \"process\");\n        ret = -1;\n        goto out;\n    }\n\n    snprintf(dumpoptions_path, sizeof(dumpoptions_path),\n             DEFAULT_VAR_RUN_DIRECTORY \"/glusterdump.%d.options\", pid);\n    ret = glusterd_set_dump_options(dumpoptions_path, options, option_cnt);\n    if (ret < 0) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_BRK_STATEDUMP_FAIL,\n               \"error while parsing \"\n               \"statedump options\");\n        ret = -1;\n        goto out;\n    }\n\n    gf_msg(this->name, GF_LOG_INFO, 0, GD_MSG_STATEDUMP_INFO,\n           \"Performing statedump on quotad with \"\n           \"pid %d\",\n           pid);\n\n    kill(pid, SIGUSR1);\n\n    sleep(1);\n\n    /* coverity[TAINTED_STRING] */\n    sys_unlink(dumpoptions_path);\n    ret = 0;\nout:\n    if (pidfile)\n        fclose(pidfile);\n    GF_FREE(dup_options);\n    return ret;\n}\n\n/* Checks if the given peer contains bricks belonging to the given volume.\n * Returns,\n *   2 - if peer contains all the bricks\n *   1 - if peer contains at least 1 brick\n *   0 - if peer contains no bricks\n */\nint\nglusterd_friend_contains_vol_bricks(glusterd_volinfo_t *volinfo,\n                                    uuid_t friend_uuid)\n{\n    int ret = 0;\n    glusterd_brickinfo_t *brickinfo = NULL;\n    int count = 0;\n\n    GF_ASSERT(volinfo);\n\n    cds_list_for_each_entry(brickinfo, &volinfo->bricks, brick_list)\n    {\n        if (!gf_uuid_compare(brickinfo->uuid, friend_uuid)) {\n            count++;\n        }\n    }\n\n    if (count) {\n        if (count == volinfo->brick_count)\n            ret = 2;\n        else\n            ret = 1;\n    }\n    gf_msg_debug(THIS->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\n/* Checks if the given peer contains bricks belonging to the given volume.\n * Returns,\n *   2 - if peer contains all the bricks\n *   1 - if peer contains at least 1 brick\n *   0 - if peer contains no bricks\n */\nint\nglusterd_friend_contains_snap_bricks(glusterd_snap_t *snapinfo,\n                                     uuid_t friend_uuid)\n{\n    int ret = -1;\n    glusterd_volinfo_t *volinfo = NULL;\n    glusterd_brickinfo_t *brickinfo = NULL;\n    int count = 0;\n\n    GF_VALIDATE_OR_GOTO(\"glusterd\", snapinfo, out);\n\n    cds_list_for_each_entry(volinfo, &snapinfo->volumes, vol_list)\n    {\n        cds_list_for_each_entry(brickinfo, &volinfo->bricks, brick_list)\n        {\n            if (!gf_uuid_compare(brickinfo->uuid, friend_uuid)) {\n                count++;\n            }\n        }\n    }\n\n    if (count > 0)\n        ret = 1;\n    else\n        ret = 0;\n\nout:\n    gf_msg_debug(THIS->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\n/* Cleanup the stale volumes left behind in the cluster. The volumes which are\n * contained completely within the detached peer are stale with respect to the\n * cluster.\n */\nint\nglusterd_friend_remove_cleanup_vols(uuid_t uuid)\n{\n    int ret = -1;\n    glusterd_conf_t *priv = NULL;\n    glusterd_svc_t *svc = NULL;\n    glusterd_volinfo_t *volinfo = NULL;\n    glusterd_volinfo_t *tmp_volinfo = NULL;\n\n    priv = THIS->private;\n    GF_ASSERT(priv);\n\n    cds_list_for_each_entry_safe(volinfo, tmp_volinfo, &priv->volumes, vol_list)\n    {\n        if (!glusterd_friend_contains_vol_bricks(volinfo, MY_UUID)) {\n            /*Stop snapd daemon service if snapd daemon is running*/\n            if (!volinfo->is_snap_volume) {\n                svc = &(volinfo->snapd.svc);\n                ret = svc->stop(svc, SIGTERM);\n                if (ret) {\n                    gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_SVC_STOP_FAIL,\n                           \"Failed \"\n                           \"to stop snapd daemon service\");\n                }\n            }\n\n            if (glusterd_is_shd_compatible_volume(volinfo)) {\n                /*\n                 * Sending stop request for all volumes. So it is fine\n                 * to send stop for mux shd\n                 */\n                svc = &(volinfo->shd.svc);\n                ret = svc->stop(svc, SIGTERM);\n                if (ret) {\n                    gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_SVC_STOP_FAIL,\n                           \"Failed \"\n                           \"to stop shd daemon service\");\n                }\n            }\n        }\n\n        if (glusterd_friend_contains_vol_bricks(volinfo, uuid) == 2) {\n            gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_STALE_VOL_DELETE_INFO,\n                   \"Deleting stale volume %s\", volinfo->volname);\n            ret = glusterd_delete_volume(volinfo);\n            if (ret) {\n                gf_msg(THIS->name, GF_LOG_ERROR, 0,\n                       GD_MSG_STALE_VOL_REMOVE_FAIL,\n                       \"Error deleting stale volume\");\n                goto out;\n            }\n        }\n    }\n\n    /* Reconfigure all daemon services upon peer detach */\n    ret = glusterd_svcs_reconfigure(NULL);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_SVC_STOP_FAIL,\n               \"Failed to reconfigure all daemon services.\");\n    }\n    ret = 0;\nout:\n    gf_msg_debug(THIS->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_get_bitd_filepath(char *filepath, glusterd_volinfo_t *volinfo)\n{\n    int ret = 0;\n    char path[PATH_MAX] = \"\";\n    glusterd_conf_t *priv = NULL;\n    int32_t len = 0;\n\n    priv = THIS->private;\n\n    GLUSTERD_GET_VOLUME_DIR(path, volinfo, priv);\n\n    len = snprintf(filepath, PATH_MAX, \"%s/%s-bitd.vol\", path,\n                   volinfo->volname);\n    if ((len < 0) || (len >= PATH_MAX)) {\n        ret = -1;\n    }\n\n    return ret;\n}\n\nint\nglusterd_get_client_filepath(char *filepath, glusterd_volinfo_t *volinfo,\n                             gf_transport_type type)\n{\n    int ret = 0;\n    char path[PATH_MAX] = \"\";\n    glusterd_conf_t *priv = NULL;\n    int32_t len = 0;\n\n    priv = THIS->private;\n\n    GLUSTERD_GET_VOLUME_DIR(path, volinfo, priv);\n\n    switch (type) {\n        case GF_TRANSPORT_TCP:\n            len = snprintf(filepath, PATH_MAX, \"%s/%s.tcp-fuse.vol\", path,\n                           volinfo->volname);\n            break;\n\n        case GF_TRANSPORT_RDMA:\n            len = snprintf(filepath, PATH_MAX, \"%s/%s.rdma-fuse.vol\", path,\n                           volinfo->volname);\n            break;\n        default:\n            ret = -1;\n            break;\n    }\n    if ((len < 0) || (len >= PATH_MAX)) {\n        ret = -1;\n    }\n\n    return ret;\n}\n\nint\nglusterd_get_trusted_client_filepath(char *filepath,\n                                     glusterd_volinfo_t *volinfo,\n                                     gf_transport_type type)\n{\n    int ret = 0;\n    char path[PATH_MAX] = \"\";\n    glusterd_conf_t *priv = NULL;\n    int32_t len = 0;\n\n    priv = THIS->private;\n\n    GLUSTERD_GET_VOLUME_DIR(path, volinfo, priv);\n\n    switch (type) {\n        case GF_TRANSPORT_TCP:\n            len = snprintf(filepath, PATH_MAX, \"%s/trusted-%s.tcp-fuse.vol\",\n                           path, volinfo->volname);\n            break;\n\n        case GF_TRANSPORT_RDMA:\n            len = snprintf(filepath, PATH_MAX, \"%s/trusted-%s.rdma-fuse.vol\",\n                           path, volinfo->volname);\n            break;\n        default:\n            ret = -1;\n            break;\n    }\n    if ((len < 0) || (len >= PATH_MAX)) {\n        ret = -1;\n    }\n\n    return ret;\n}\n\nint\nglusterd_get_dummy_client_filepath(char *filepath, glusterd_volinfo_t *volinfo,\n                                   gf_transport_type type)\n{\n    int ret = 0;\n\n    switch (type) {\n        case GF_TRANSPORT_TCP:\n        case GF_TRANSPORT_BOTH_TCP_RDMA:\n            snprintf(filepath, PATH_MAX, \"/tmp/%s.tcp-fuse.vol\",\n                     volinfo->volname);\n            break;\n\n        case GF_TRANSPORT_RDMA:\n            snprintf(filepath, PATH_MAX, \"/tmp/%s.rdma-fuse.vol\",\n                     volinfo->volname);\n            break;\n        default:\n            ret = -1;\n            break;\n    }\n\n    return ret;\n}\n\nint\nglusterd_volume_defrag_restart(glusterd_volinfo_t *volinfo, char *op_errstr,\n                               size_t len, int cmd, defrag_cbk_fn_t cbk)\n{\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n    char pidfile[PATH_MAX] = \"\";\n    int ret = -1;\n    pid_t pid = 0;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    priv = this->private;\n    if (!priv)\n        return ret;\n\n    /* Don't start the rebalance process if the stautus is already\n     * completed, stopped or failed. If the status is started, check if\n     * there is an existing process already and connect to it. If not, then\n     * start the rebalance process\n     */\n\n    switch (volinfo->rebal.defrag_status) {\n        case GF_DEFRAG_STATUS_COMPLETE:\n        case GF_DEFRAG_STATUS_STOPPED:\n        case GF_DEFRAG_STATUS_FAILED:\n            break;\n        case GF_DEFRAG_STATUS_STARTED:\n            GLUSTERD_GET_DEFRAG_PID_FILE(pidfile, volinfo, priv);\n            if (gf_is_service_running(pidfile, &pid)) {\n                ret = glusterd_rebalance_defrag_init(volinfo, cbk);\n                if (ret) {\n                    gf_msg(this->name, GF_LOG_ERROR, 0,\n                           GD_MSG_REBALANCE_START_FAIL,\n                           \"Failed to initialize  defrag.\"\n                           \"Not starting rebalance process for \"\n                           \"%s.\",\n                           volinfo->volname);\n                    gf_event(EVENT_REBALANCE_START_FAILED, \"volume=%s\",\n                             volinfo->volname);\n                    goto out;\n                }\n                ret = glusterd_rebalance_rpc_create(volinfo);\n                break;\n            }\n        case GF_DEFRAG_STATUS_NOT_STARTED:\n            ret = glusterd_handle_defrag_start(volinfo, op_errstr, len, cmd,\n                                               cbk, volinfo->rebal.op);\n            if (ret) {\n                volinfo->rebal.defrag_status = GF_DEFRAG_STATUS_FAILED;\n                gf_event(EVENT_REBALANCE_START_FAILED, \"volume=%s\",\n                         volinfo->volname);\n            }\n            break;\n        default:\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_REBALANCE_START_FAIL,\n                   \"Unknown defrag status (%d).\"\n                   \"Not starting rebalance process for %s.\",\n                   volinfo->rebal.defrag_status, volinfo->volname);\n            break;\n    }\nout:\n    return ret;\n}\n\nvoid\nglusterd_defrag_info_set(glusterd_volinfo_t *volinfo, dict_t *dict, int cmd,\n                         int status, int op)\n{\n    xlator_t *this = NULL;\n    int ret = -1;\n    char *task_id_str = NULL;\n    glusterd_rebalance_t *rebal = NULL;\n\n    this = THIS;\n    rebal = &volinfo->rebal;\n\n    rebal->defrag_cmd = cmd;\n    rebal->defrag_status = status;\n    rebal->op = op;\n\n    if (gf_uuid_is_null(rebal->rebalance_id))\n        return;\n\n    if (is_origin_glusterd(dict)) {\n        ret = glusterd_generate_and_set_task_id(dict, GF_REBALANCE_TID_KEY,\n                                                SLEN(GF_REBALANCE_TID_KEY));\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_TASKID_GEN_FAIL,\n                   \"Failed to generate task-id\");\n            goto out;\n        }\n    }\n    ret = dict_get_strn(dict, GF_REBALANCE_TID_KEY, SLEN(GF_REBALANCE_TID_KEY),\n                        &task_id_str);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_WARNING, 0, GD_MSG_REBALANCE_ID_MISSING,\n               \"Missing rebalance-id\");\n        ret = 0;\n        goto out;\n    }\n\n    gf_uuid_parse(task_id_str, rebal->rebalance_id);\nout:\n\n    if (ret) {\n        gf_msg_debug(this->name, 0, \"Rebalance start validate failed\");\n    }\n    return;\n}\n\nint\nglusterd_restart_rebalance_for_volume(glusterd_volinfo_t *volinfo)\n{\n    int ret = -1;\n    char op_errstr[PATH_MAX] = \"\";\n\n    if (!gd_should_i_start_rebalance(volinfo)) {\n        /* Store the rebalance-id and rebalance command even if\n         * the peer isn't starting a rebalance process. On peers\n         * where a rebalance process is started,\n         * glusterd_handle_defrag_start performs the storing.\n         *\n         * Storing this is needed for having 'volume status'\n         * work correctly.\n         */\n        volinfo->rebal.defrag_status = GF_DEFRAG_STATUS_NOT_STARTED;\n        return 0;\n    }\n    if (!volinfo->rebal.defrag_cmd) {\n        volinfo->rebal.defrag_status = GF_DEFRAG_STATUS_FAILED;\n        return -1;\n    }\n\n    ret = glusterd_volume_defrag_restart(volinfo, op_errstr, PATH_MAX,\n                                         volinfo->rebal.defrag_cmd,\n                                         volinfo->rebal.op == GD_OP_REMOVE_BRICK\n                                             ? glusterd_remove_brick_migrate_cbk\n                                             : NULL);\n    if (!ret) {\n        /* If remove brick is started then ensure that on a glusterd\n         * restart decommission_is_in_progress is set to avoid remove\n         * brick commit to happen when rebalance is not completed.\n         */\n        if (volinfo->rebal.op == GD_OP_REMOVE_BRICK &&\n            volinfo->rebal.defrag_status == GF_DEFRAG_STATUS_STARTED) {\n            volinfo->decommission_in_progress = 1;\n        }\n    }\n    return ret;\n}\nint\nglusterd_restart_rebalance(glusterd_conf_t *conf)\n{\n    glusterd_volinfo_t *volinfo = NULL;\n    int ret = 0;\n\n    cds_list_for_each_entry(volinfo, &conf->volumes, vol_list)\n    {\n        glusterd_restart_rebalance_for_volume(volinfo);\n    }\n    return ret;\n}\n\nvoid\nglusterd_volinfo_reset_defrag_stats(glusterd_volinfo_t *volinfo)\n{\n    glusterd_rebalance_t *rebal = NULL;\n    GF_ASSERT(volinfo);\n\n    rebal = &volinfo->rebal;\n    rebal->rebalance_files = 0;\n    rebal->rebalance_data = 0;\n    rebal->lookedup_files = 0;\n    rebal->rebalance_failures = 0;\n    rebal->rebalance_time = 0;\n    rebal->skipped_files = 0;\n}\n\ngf_boolean_t\nglusterd_is_local_brick(xlator_t *this, glusterd_volinfo_t *volinfo,\n                        glusterd_brickinfo_t *brickinfo)\n{\n    gf_boolean_t local = _gf_false;\n    int ret = 0;\n\n    if (gf_uuid_is_null(brickinfo->uuid)) {\n        ret = glusterd_resolve_brick(brickinfo);\n        if (ret)\n            goto out;\n    }\n    local = !gf_uuid_compare(brickinfo->uuid, MY_UUID);\nout:\n    return local;\n}\nint\nglusterd_validate_volume_id(dict_t *op_dict, glusterd_volinfo_t *volinfo)\n{\n    int ret = -1;\n    char *volid_str = NULL;\n    uuid_t vol_uid = {\n        0,\n    };\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    ret = dict_get_strn(op_dict, \"vol-id\", SLEN(\"vol-id\"), &volid_str);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Failed to get volume id for \"\n               \"volume %s\",\n               volinfo->volname);\n        goto out;\n    }\n    ret = gf_uuid_parse(volid_str, vol_uid);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_UUID_PARSE_FAIL,\n               \"Failed to parse volume id \"\n               \"for volume %s\",\n               volinfo->volname);\n        goto out;\n    }\n\n    if (gf_uuid_compare(vol_uid, volinfo->volume_id)) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_VOL_ID_MISMATCH,\n               \"Volume ids of volume %s - %s\"\n               \" and %s - are different. Possibly a split brain among \"\n               \"peers.\",\n               volinfo->volname, volid_str, uuid_utoa(volinfo->volume_id));\n        ret = -1;\n        goto out;\n    }\n\nout:\n    return ret;\n}\n\nint\nglusterd_defrag_volume_status_update(glusterd_volinfo_t *volinfo,\n                                     dict_t *rsp_dict, int32_t cmd)\n{\n    int ret = 0;\n    int ret2 = 0;\n    uint64_t files = 0;\n    uint64_t size = 0;\n    uint64_t lookup = 0;\n    gf_defrag_status_t status = GF_DEFRAG_STATUS_NOT_STARTED;\n    uint64_t failures = 0;\n    uint64_t skipped = 0;\n    xlator_t *this = NULL;\n    double run_time = 0;\n    uint64_t promoted = 0;\n    uint64_t demoted = 0;\n    uint64_t time_left = 0;\n\n    this = THIS;\n\n    ret = dict_get_uint64(rsp_dict, \"files\", &files);\n    if (ret)\n        gf_msg_trace(this->name, 0, \"failed to get file count\");\n\n    ret = dict_get_uint64(rsp_dict, \"size\", &size);\n    if (ret)\n        gf_msg_trace(this->name, 0, \"failed to get size of xfer\");\n\n    ret = dict_get_uint64(rsp_dict, \"lookups\", &lookup);\n    if (ret)\n        gf_msg_trace(this->name, 0, \"failed to get lookedup file count\");\n\n    ret = dict_get_int32n(rsp_dict, \"status\", SLEN(\"status\"),\n                          (int32_t *)&status);\n    if (ret)\n        gf_msg_trace(this->name, 0, \"failed to get status\");\n\n    ret = dict_get_uint64(rsp_dict, \"failures\", &failures);\n    if (ret)\n        gf_msg_trace(this->name, 0, \"failed to get failure count\");\n\n    ret = dict_get_uint64(rsp_dict, \"skipped\", &skipped);\n    if (ret)\n        gf_msg_trace(this->name, 0, \"failed to get skipped count\");\n\n    ret = dict_get_uint64(rsp_dict, \"promoted\", &promoted);\n    if (ret)\n        gf_msg_trace(this->name, 0, \"failed to get promoted count\");\n\n    ret = dict_get_uint64(rsp_dict, \"demoted\", &demoted);\n    if (ret)\n        gf_msg_trace(this->name, 0, \"failed to get demoted count\");\n\n    ret = dict_get_double(rsp_dict, \"run-time\", &run_time);\n    if (ret)\n        gf_msg_trace(this->name, 0, \"failed to get run-time\");\n\n    ret2 = dict_get_uint64(rsp_dict, \"time-left\", &time_left);\n    if (ret2)\n        gf_msg_trace(this->name, 0, \"failed to get time left\");\n\n    if (files)\n        volinfo->rebal.rebalance_files = files;\n    if (size)\n        volinfo->rebal.rebalance_data = size;\n    if (lookup)\n        volinfo->rebal.lookedup_files = lookup;\n    if (status)\n        volinfo->rebal.defrag_status = status;\n    if (failures)\n        volinfo->rebal.rebalance_failures = failures;\n    if (skipped)\n        volinfo->rebal.skipped_files = skipped;\n    if (run_time)\n        volinfo->rebal.rebalance_time = run_time;\n    if (!ret2)\n        volinfo->rebal.time_left = time_left;\n\n    return ret;\n}\n\nint\nglusterd_check_topology_identical(const char *filename1, const char *filename2,\n                                  gf_boolean_t *identical)\n{\n    int ret = -1; /* FAILURE */\n    xlator_t *this = THIS;\n    FILE *fp1 = NULL;\n    FILE *fp2 = NULL;\n    glusterfs_graph_t *grph1 = NULL;\n    glusterfs_graph_t *grph2 = NULL;\n\n    /* Invalid xlator, Nothing to do */\n    if (!this)\n        return (-1);\n\n    /* Sanitize the inputs */\n    GF_VALIDATE_OR_GOTO(this->name, filename1, out);\n    GF_VALIDATE_OR_GOTO(this->name, filename2, out);\n    GF_VALIDATE_OR_GOTO(this->name, identical, out);\n\n    /* fopen() the volfile1 to create the graph */\n    fp1 = fopen(filename1, \"r\");\n    if (fp1 == NULL) {\n        gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n               \"fopen() on file: %s failed \"\n               \"(%s)\",\n               filename1, strerror(errno));\n        goto out;\n    }\n\n    /* fopen() the volfile2 to create the graph */\n    fp2 = fopen(filename2, \"r\");\n    if (fp2 == NULL) {\n        gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n               \"fopen() on file: %s failed \"\n               \"(%s)\",\n               filename2, strerror(errno));\n        goto out;\n    }\n\n    /* create the graph for filename1 */\n    grph1 = glusterfs_graph_construct(fp1);\n    if (grph1 == NULL)\n        goto out;\n\n    /* create the graph for filename2 */\n    grph2 = glusterfs_graph_construct(fp2);\n    if (grph2 == NULL)\n        goto out;\n\n    /* compare the graph topology */\n    *identical = is_graph_topology_equal(grph1, grph2);\n    ret = 0; /* SUCCESS */\nout:\n    if (fp1)\n        fclose(fp1);\n    if (fp2)\n        fclose(fp2);\n    if (grph1)\n        glusterfs_graph_destroy(grph1);\n    if (grph2)\n        glusterfs_graph_destroy(grph2);\n\n    gf_msg_debug(this->name, 0, \"Returning with %d\", ret);\n    return ret;\n}\n\nint\nglusterd_check_files_identical(char *filename1, char *filename2,\n                               gf_boolean_t *identical)\n{\n    int ret = -1;\n    struct stat buf1 = {\n        0,\n    };\n    struct stat buf2 = {\n        0,\n    };\n    uint32_t cksum1 = 0;\n    uint32_t cksum2 = 0;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n\n    GF_ASSERT(filename1);\n    GF_ASSERT(filename2);\n    GF_ASSERT(identical);\n\n    this = THIS;\n    GF_VALIDATE_OR_GOTO(\"glusterd\", this, out);\n    priv = this->private;\n    GF_VALIDATE_OR_GOTO(this->name, priv, out);\n\n    ret = sys_stat(filename1, &buf1);\n\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n               \"stat on file: %s failed \"\n               \"(%s)\",\n               filename1, strerror(errno));\n        goto out;\n    }\n\n    ret = sys_stat(filename2, &buf2);\n\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_FILE_OP_FAILED,\n               \"stat on file: %s failed \"\n               \"(%s)\",\n               filename2, strerror(errno));\n        goto out;\n    }\n\n    if (buf1.st_size != buf2.st_size) {\n        *identical = _gf_false;\n        goto out;\n    }\n\n    ret = get_checksum_for_path(filename1, &cksum1, priv->op_version);\n    if (ret)\n        goto out;\n\n    ret = get_checksum_for_path(filename2, &cksum2, priv->op_version);\n    if (ret)\n        goto out;\n\n    if (cksum1 != cksum2)\n        *identical = _gf_false;\n    else\n        *identical = _gf_true;\n\nout:\n    gf_msg_debug(this->name, 0, \"Returning with %d\", ret);\n    return ret;\n}\n\nint\nglusterd_volset_help(dict_t *dict, char **op_errstr)\n{\n    int ret = -1;\n    gf_boolean_t xml_out = _gf_false;\n#if (!HAVE_LIB_XML)\n    xlator_t *this = NULL;\n\n    this = THIS;\n#endif\n\n    if (!dict) {\n        if (!(dict = glusterd_op_get_ctx())) {\n            ret = 0;\n            goto out;\n        }\n    }\n\n    if (dict_getn(dict, \"help\", SLEN(\"help\"))) {\n        xml_out = _gf_false;\n\n    } else if (dict_getn(dict, \"help-xml\", SLEN(\"help-xml\"))) {\n        xml_out = _gf_true;\n#if (HAVE_LIB_XML)\n        ret = 0;\n#else\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_MODULE_NOT_INSTALLED,\n               \"libxml not present in the system\");\n        if (op_errstr)\n            *op_errstr = gf_strdup(\n                \"Error: xml libraries not \"\n                \"present to produce \"\n                \"xml-output\");\n        goto out;\n#endif\n\n    } else {\n        goto out;\n    }\n\n    ret = glusterd_get_volopt_content(dict, xml_out);\n    if (ret && op_errstr)\n        *op_errstr = gf_strdup(\"Failed to get volume options help\");\nout:\n\n    gf_msg_debug(\"glusterd\", 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_to_cli(rpcsvc_request_t *req, gf_cli_rsp *arg, struct iovec *payload,\n                int payloadcount, struct iobref *iobref, xdrproc_t xdrproc,\n                dict_t *dict)\n{\n    int ret = -1;\n    char *cmd = NULL;\n    int op_ret = 0;\n    char *op_errstr = NULL;\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    op_ret = arg->op_ret;\n    op_errstr = arg->op_errstr;\n\n    ret = dict_get_strn(dict, \"cmd-str\", SLEN(\"cmd-str\"), &cmd);\n    if (ret)\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Failed to get command \"\n               \"string\");\n\n    if (cmd) {\n        if (op_ret)\n            gf_cmd_log(\"\", \"%s : FAILED %s %s\", cmd, (op_errstr) ? \":\" : \" \",\n                       (op_errstr) ? op_errstr : \" \");\n        else\n            gf_cmd_log(\"\", \"%s : SUCCESS\", cmd);\n    }\n\n    glusterd_submit_reply(req, arg, payload, payloadcount, iobref,\n                          (xdrproc_t)xdrproc);\n\n    if (dict) {\n        dict_unref(dict);\n    }\n    return ret;\n}\n\nstatic int32_t\nglusterd_append_gsync_status(dict_t *dst, dict_t *src)\n{\n    int ret = 0;\n    char *stop_msg = NULL;\n\n    ret = dict_get_strn(src, \"gsync-status\", SLEN(\"gsync-status\"), &stop_msg);\n    if (ret) {\n        ret = 0;\n        goto out;\n    }\n\n    ret = dict_set_dynstr_with_alloc(dst, \"gsync-status\", stop_msg);\n    if (ret) {\n        gf_msg(\"glusterd\", GF_LOG_WARNING, 0, GD_MSG_DICT_SET_FAILED,\n               \"Unable to set the stop\"\n               \"message in the ctx dictionary\");\n        goto out;\n    }\n\n    ret = 0;\nout:\n    gf_msg_debug(\"glusterd\", 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_append_status_dicts(dict_t *dst, dict_t *src)\n{\n    char sts_val_name[PATH_MAX] = \"\";\n    int dst_count = 0;\n    int src_count = 0;\n    int i = 0;\n    int ret = 0;\n    gf_gsync_status_t *sts_val = NULL;\n    gf_gsync_status_t *dst_sts_val = NULL;\n\n    GF_ASSERT(dst);\n\n    if (src == NULL)\n        goto out;\n\n    ret = dict_get_int32n(dst, \"gsync-count\", SLEN(\"gsync-count\"), &dst_count);\n    if (ret)\n        dst_count = 0;\n\n    ret = dict_get_int32n(src, \"gsync-count\", SLEN(\"gsync-count\"), &src_count);\n    if (ret || !src_count) {\n        gf_msg_debug(\"glusterd\", 0, \"Source brick empty\");\n        ret = 0;\n        goto out;\n    }\n\n    for (i = 0; i < src_count; i++) {\n        snprintf(sts_val_name, sizeof(sts_val_name), \"status_value%d\", i);\n\n        ret = dict_get_bin(src, sts_val_name, (void **)&sts_val);\n        if (ret)\n            goto out;\n\n        dst_sts_val = GF_MALLOC(sizeof(gf_gsync_status_t),\n                                gf_common_mt_gsync_status_t);\n        if (!dst_sts_val) {\n            gf_msg(\"glusterd\", GF_LOG_ERROR, ENOMEM, GD_MSG_NO_MEMORY,\n                   \"Out Of Memory\");\n            goto out;\n        }\n\n        memcpy(dst_sts_val, sts_val, sizeof(gf_gsync_status_t));\n\n        snprintf(sts_val_name, sizeof(sts_val_name), \"status_value%d\",\n                 i + dst_count);\n\n        ret = dict_set_bin(dst, sts_val_name, dst_sts_val,\n                           sizeof(gf_gsync_status_t));\n        if (ret) {\n            GF_FREE(dst_sts_val);\n            goto out;\n        }\n    }\n\n    ret = dict_set_int32n(dst, \"gsync-count\", SLEN(\"gsync-count\"),\n                          dst_count + src_count);\n\nout:\n    gf_msg_debug(\"glusterd\", 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_aggr_brick_mount_dirs(dict_t *aggr, dict_t *rsp_dict)\n{\n    char key[64] = \"\";\n    int keylen;\n    char *brick_mount_dir = NULL;\n    int32_t brick_count = -1;\n    int32_t ret = -1;\n    int32_t i = -1;\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n    GF_ASSERT(aggr);\n    GF_ASSERT(rsp_dict);\n\n    ret = dict_get_int32n(rsp_dict, \"brick_count\", SLEN(\"brick_count\"),\n                          &brick_count);\n    if (ret) {\n        gf_msg_debug(this->name, 0, \"No brick_count present\");\n        ret = 0;\n        goto out;\n    }\n\n    for (i = 1; i <= brick_count; i++) {\n        brick_mount_dir = NULL;\n        keylen = snprintf(key, sizeof(key), \"brick%d.mount_dir\", i);\n        ret = dict_get_strn(rsp_dict, key, keylen, &brick_mount_dir);\n        if (ret) {\n            /* Coz the info will come from a different node */\n            gf_msg_debug(this->name, 0, \"%s not present\", key);\n            continue;\n        }\n\n        ret = dict_set_dynstr_with_alloc(aggr, key, brick_mount_dir);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Failed to set %s\", key);\n            goto out;\n        }\n    }\n\n    ret = 0;\nout:\n    gf_msg_trace(this->name, 0, \"Returning %d \", ret);\n    return ret;\n}\n\nint32_t\nglusterd_gsync_use_rsp_dict(dict_t *aggr, dict_t *rsp_dict, char *op_errstr)\n{\n    dict_t *ctx = NULL;\n    int ret = 0;\n    char *conf_path = NULL;\n\n    if (aggr) {\n        ctx = aggr;\n\n    } else {\n        ctx = glusterd_op_get_ctx();\n        if (!ctx) {\n            gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_OPCTX_GET_FAIL,\n                   \"Operation Context is not present\");\n            GF_ASSERT(0);\n        }\n    }\n\n    if (rsp_dict) {\n        ret = glusterd_append_status_dicts(ctx, rsp_dict);\n        if (ret)\n            goto out;\n\n        ret = glusterd_append_gsync_status(ctx, rsp_dict);\n        if (ret)\n            goto out;\n\n        ret = dict_get_strn(rsp_dict, \"conf_path\", SLEN(\"conf_path\"),\n                            &conf_path);\n        if (!ret && conf_path) {\n            ret = dict_set_dynstr_with_alloc(ctx, \"conf_path\", conf_path);\n            if (ret) {\n                gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                       \"Unable to store conf path.\");\n                goto out;\n            }\n        }\n    }\n    if ((op_errstr) && (strcmp(\"\", op_errstr))) {\n        ret = dict_set_dynstr_with_alloc(ctx, \"errstr\", op_errstr);\n        if (ret)\n            goto out;\n    }\n\n    ret = 0;\nout:\n    gf_msg_debug(\"glusterd\", 0, \"Returning %d \", ret);\n    return ret;\n}\n\nint32_t\nglusterd_rb_use_rsp_dict(dict_t *aggr, dict_t *rsp_dict)\n{\n    int32_t src_port = 0;\n    int32_t dst_port = 0;\n    int ret = 0;\n    dict_t *ctx = NULL;\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    if (aggr) {\n        ctx = aggr;\n\n    } else {\n        ctx = glusterd_op_get_ctx();\n        if (!ctx) {\n            gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_OPCTX_GET_FAIL,\n                   \"Operation Context is not present\");\n            GF_ASSERT(0);\n        }\n    }\n\n    if (rsp_dict) {\n        ret = dict_get_int32n(rsp_dict, \"src-brick-port\",\n                              SLEN(\"src-brick-port\"), &src_port);\n        if (ret == 0) {\n            gf_msg_debug(\"glusterd\", 0, \"src-brick-port=%d found\", src_port);\n        }\n\n        ret = dict_get_int32n(rsp_dict, \"dst-brick-port\",\n                              SLEN(\"dst-brick-port\"), &dst_port);\n        if (ret == 0) {\n            gf_msg_debug(\"glusterd\", 0, \"dst-brick-port=%d found\", dst_port);\n        }\n\n        ret = glusterd_aggr_brick_mount_dirs(ctx, rsp_dict);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_BRICK_MOUNDIRS_AGGR_FAIL,\n                   \"Failed to \"\n                   \"aggregate brick mount dirs\");\n            goto out;\n        }\n    }\n\n    if (src_port) {\n        ret = dict_set_int32n(ctx, \"src-brick-port\", SLEN(\"src-brick-port\"),\n                              src_port);\n        if (ret) {\n            gf_msg_debug(\"glusterd\", 0, \"Could not set src-brick\");\n            goto out;\n        }\n    }\n\n    if (dst_port) {\n        ret = dict_set_int32n(ctx, \"dst-brick-port\", SLEN(\"dst-brick-port\"),\n                              dst_port);\n        if (ret) {\n            gf_msg_debug(\"glusterd\", 0, \"Could not set dst-brick\");\n            goto out;\n        }\n    }\n\nout:\n    return ret;\n}\n\nint32_t\nglusterd_sync_use_rsp_dict(dict_t *aggr, dict_t *rsp_dict)\n{\n    int ret = 0;\n\n    GF_ASSERT(rsp_dict);\n\n    if (!rsp_dict) {\n        goto out;\n    }\n\n    ret = glusterd_import_friend_volumes(rsp_dict);\nout:\n    return ret;\n}\n\nstatic int\n_profile_volume_add_friend_rsp(dict_t *this, char *key, data_t *value,\n                               void *data)\n{\n    char new_key[264] = \"\";\n    int new_key_len;\n    glusterd_pr_brick_rsp_conv_t *rsp_ctx = NULL;\n    data_t *new_value = NULL;\n    int brick_count = 0;\n    char brick_key[256] = \"\";\n\n    if (strcmp(key, \"count\") == 0)\n        return 0;\n    sscanf(key, \"%d%s\", &brick_count, brick_key);\n    rsp_ctx = data;\n    new_value = data_copy(value);\n    GF_ASSERT(new_value);\n    new_key_len = snprintf(new_key, sizeof(new_key), \"%d%s\",\n                           rsp_ctx->count + brick_count, brick_key);\n    dict_setn(rsp_ctx->dict, new_key, new_key_len, new_value);\n    return 0;\n}\n\nint\nglusterd_profile_volume_use_rsp_dict(dict_t *aggr, dict_t *rsp_dict)\n{\n    int ret = 0;\n    glusterd_pr_brick_rsp_conv_t rsp_ctx = {0};\n    int32_t brick_count = 0;\n    int32_t count = 0;\n    dict_t *ctx_dict = NULL;\n    xlator_t *this = NULL;\n\n    GF_ASSERT(rsp_dict);\n    this = THIS;\n    GF_ASSERT(this);\n\n    ret = dict_get_int32n(rsp_dict, \"count\", SLEN(\"count\"), &brick_count);\n    if (ret) {\n        ret = 0;  // no bricks in the rsp\n        goto out;\n    }\n    if (aggr) {\n        ctx_dict = aggr;\n\n    } else {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_OPCTX_GET_FAIL,\n               \"Operation Context is not present\");\n        ret = -1;\n        goto out;\n    }\n\n    ret = dict_get_int32n(ctx_dict, \"count\", SLEN(\"count\"), &count);\n    rsp_ctx.count = count;\n    rsp_ctx.dict = ctx_dict;\n    dict_foreach(rsp_dict, _profile_volume_add_friend_rsp, &rsp_ctx);\n    ret = dict_set_int32n(ctx_dict, \"count\", SLEN(\"count\"),\n                          count + brick_count);\nout:\n    return ret;\n}\n\nstatic int\nglusterd_volume_status_add_peer_rsp(dict_t *this, char *key, data_t *value,\n                                    void *data)\n{\n    glusterd_status_rsp_conv_t *rsp_ctx = NULL;\n    data_t *new_value = NULL;\n    char brick_key[1024] = \"\";\n    char new_key[1024] = \"\";\n    int32_t index = 0;\n    int32_t ret = -1;\n    int32_t len = 0;\n\n    /* Skip the following keys, they are already present in the ctx_dict */\n    /* Also, skip all the task related pairs. They will be added to the\n     * ctx_dict later\n     */\n    if (!strcmp(key, \"count\") || !strcmp(key, \"cmd\") ||\n        !strcmp(key, \"brick-index-max\") || !strcmp(key, \"other-count\") ||\n        !strncmp(key, \"task\", 4))\n        return 0;\n\n    rsp_ctx = data;\n    new_value = data_copy(value);\n    GF_ASSERT(new_value);\n\n    sscanf(key, \"brick%d.%s\", &index, brick_key);\n\n    if (index > rsp_ctx->brick_index_max) {\n        len = snprintf(new_key, sizeof(new_key), \"brick%d.%s\",\n                       index + rsp_ctx->other_count, brick_key);\n    } else {\n        len = snprintf(new_key, sizeof(new_key), \"%s\", key);\n    }\n    if (len < 0 || len >= sizeof(new_key))\n        goto out;\n\n    ret = dict_set(rsp_ctx->dict, new_key, new_value);\nout:\n    if (ret) {\n        data_unref(new_value);\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Unable to set key: %s in dict\", key);\n    }\n\n    return 0;\n}\n\nstatic int\nglusterd_volume_status_copy_tasks_to_ctx_dict(dict_t *this, char *key,\n                                              data_t *value, void *data)\n{\n    int ret = 0;\n    dict_t *ctx_dict = NULL;\n    data_t *new_value = NULL;\n\n    if (strncmp(key, \"task\", 4))\n        return 0;\n\n    ctx_dict = data;\n    GF_ASSERT(ctx_dict);\n\n    new_value = data_copy(value);\n    GF_ASSERT(new_value);\n\n    ret = dict_set(ctx_dict, key, new_value);\n\n    return ret;\n}\n\nint\nglusterd_volume_status_aggregate_tasks_status(dict_t *ctx_dict,\n                                              dict_t *rsp_dict)\n{\n    int ret = -1;\n    xlator_t *this = NULL;\n    int local_count = 0;\n    int remote_count = 0;\n    int i = 0;\n    int j = 0;\n    char key[128] = \"\";\n    int keylen;\n    char *task_type = NULL;\n    int local_status = 0;\n    int remote_status = 0;\n    char *local_task_id = NULL;\n    char *remote_task_id = NULL;\n\n    GF_ASSERT(ctx_dict);\n    GF_ASSERT(rsp_dict);\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    ret = dict_get_int32n(rsp_dict, \"tasks\", SLEN(\"tasks\"), &remote_count);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Failed to get remote task count\");\n        goto out;\n    }\n    /* Local count will not be present when this is called for the first\n     * time with the origins rsp_dict\n     */\n    ret = dict_get_int32n(ctx_dict, \"tasks\", SLEN(\"tasks\"), &local_count);\n    if (ret) {\n        ret = dict_foreach(\n            rsp_dict, glusterd_volume_status_copy_tasks_to_ctx_dict, ctx_dict);\n        if (ret)\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Failed to copy tasks\"\n                   \"to ctx_dict.\");\n        goto out;\n    }\n\n    if (local_count != remote_count) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_TASKS_COUNT_MISMATCH,\n               \"Local tasks count (%d) and \"\n               \"remote tasks count (%d) do not match. Not aggregating \"\n               \"tasks status.\",\n               local_count, remote_count);\n        ret = -1;\n        goto out;\n    }\n\n    /* Update the tasks statuses. For every remote tasks, search for the\n     * local task, and update the local task status based on the remote\n     * status.\n     */\n    for (i = 0; i < remote_count; i++) {\n        keylen = snprintf(key, sizeof(key), \"task%d.type\", i);\n        ret = dict_get_strn(rsp_dict, key, keylen, &task_type);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n                   \"Failed to get task typpe from rsp dict\");\n            goto out;\n        }\n\n        /* Skip replace-brick status as it is going to be the same on\n         * all peers. rb_status is set by the replace brick commit\n         * function on all peers based on the replace brick command.\n         * We return the value of rb_status as the status for a\n         * replace-brick task in a 'volume status' command.\n         */\n        if (!strcmp(task_type, \"Replace brick\"))\n            continue;\n\n        keylen = snprintf(key, sizeof(key), \"task%d.status\", i);\n        ret = dict_get_int32n(rsp_dict, key, keylen, &remote_status);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n                   \"Failed to get task status from rsp dict\");\n            goto out;\n        }\n        keylen = snprintf(key, sizeof(key), \"task%d.id\", i);\n        ret = dict_get_strn(rsp_dict, key, keylen, &remote_task_id);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n                   \"Failed to get task id from rsp dict\");\n            goto out;\n        }\n        for (j = 0; j < local_count; j++) {\n            keylen = snprintf(key, sizeof(key), \"task%d.id\", j);\n            ret = dict_get_strn(ctx_dict, key, keylen, &local_task_id);\n            if (ret) {\n                gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n                       \"Failed to get local task-id\");\n                goto out;\n            }\n\n            if (strncmp(remote_task_id, local_task_id,\n                        strlen(remote_task_id))) {\n                /* Quit if a matching local task is not found */\n                if (j == (local_count - 1)) {\n                    gf_msg(this->name, GF_LOG_ERROR, 0,\n                           GD_MSG_TASKS_COUNT_MISMATCH,\n                           \"Could not find matching local \"\n                           \"task for task %s\",\n                           remote_task_id);\n                    goto out;\n                }\n                continue;\n            }\n\n            keylen = snprintf(key, sizeof(key), \"task%d.status\", j);\n            ret = dict_get_int32n(ctx_dict, key, keylen, &local_status);\n            if (ret) {\n                gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n                       \"Failed to get local task status\");\n                goto out;\n            }\n\n            /* Rebalance has 5 states,\n             * NOT_STARTED, STARTED, STOPPED, COMPLETE, FAILED\n             * The precedence used to determine the aggregate status\n             * is as below,\n             * STARTED > FAILED > STOPPED > COMPLETE > NOT_STARTED\n             */\n            /* TODO: Move this to a common place utilities that both\n             * CLI and glusterd need.\n             * Till then if the below algorithm is changed, change\n             * it in cli_xml_output_vol_rebalance_status in\n             * cli-xml-output.c\n             */\n            ret = 0;\n            int rank[] = {[GF_DEFRAG_STATUS_STARTED] = 1,\n                          [GF_DEFRAG_STATUS_FAILED] = 2,\n                          [GF_DEFRAG_STATUS_STOPPED] = 3,\n                          [GF_DEFRAG_STATUS_COMPLETE] = 4,\n                          [GF_DEFRAG_STATUS_NOT_STARTED] = 5};\n            if (rank[remote_status] <= rank[local_status])\n                ret = dict_set_int32n(ctx_dict, key, keylen, remote_status);\n            if (ret) {\n                gf_msg(this->name, GF_LOG_ERROR, 0,\n                       GD_MSG_TASK_STATUS_UPDATE_FAIL,\n                       \"Failed to \"\n                       \"update task status\");\n                goto out;\n            }\n            break;\n        }\n    }\n\nout:\n    return ret;\n}\n\ngf_boolean_t\nglusterd_status_has_tasks(int cmd)\n{\n    if (((cmd & GF_CLI_STATUS_MASK) == GF_CLI_STATUS_NONE) &&\n        (cmd & GF_CLI_STATUS_VOL))\n        return _gf_true;\n    return _gf_false;\n}\n\nint\nglusterd_volume_status_copy_to_op_ctx_dict(dict_t *aggr, dict_t *rsp_dict)\n{\n    int ret = 0;\n    glusterd_status_rsp_conv_t rsp_ctx = {0};\n    int32_t cmd = GF_CLI_STATUS_NONE;\n    int32_t node_count = 0;\n    int32_t other_count = 0;\n    int32_t brick_index_max = -1;\n    int32_t hot_brick_count = -1;\n    int32_t type = -1;\n    int32_t rsp_node_count = 0;\n    int32_t rsp_other_count = 0;\n    int vol_count = -1;\n    int i = 0;\n    dict_t *ctx_dict = NULL;\n    char key[64] = \"\";\n    int keylen;\n    char *volname = NULL;\n    glusterd_volinfo_t *volinfo = NULL;\n\n    GF_ASSERT(rsp_dict);\n\n    if (aggr) {\n        ctx_dict = aggr;\n\n    } else {\n        ctx_dict = glusterd_op_get_ctx(GD_OP_STATUS_VOLUME);\n    }\n\n    ret = dict_get_int32n(ctx_dict, \"cmd\", SLEN(\"cmd\"), &cmd);\n    if (ret)\n        goto out;\n\n    if (cmd & GF_CLI_STATUS_ALL && is_origin_glusterd(ctx_dict)) {\n        ret = dict_get_int32n(rsp_dict, \"vol_count\", SLEN(\"vol_count\"),\n                              &vol_count);\n        if (ret == 0) {\n            ret = dict_set_int32n(ctx_dict, \"vol_count\", SLEN(\"vol_count\"),\n                                  vol_count);\n            if (ret)\n                goto out;\n\n            for (i = 0; i < vol_count; i++) {\n                keylen = snprintf(key, sizeof(key), \"vol%d\", i);\n                ret = dict_get_strn(rsp_dict, key, keylen, &volname);\n                if (ret)\n                    goto out;\n\n                ret = dict_set_strn(ctx_dict, key, keylen, volname);\n                if (ret)\n                    goto out;\n            }\n        } else {\n            /* Ignore the error as still the aggregation applies in\n             * case its a task sub command */\n            ret = 0;\n        }\n    }\n\n    if ((cmd & GF_CLI_STATUS_TASKS) != 0)\n        goto aggregate_tasks;\n\n    ret = dict_get_int32n(rsp_dict, \"count\", SLEN(\"count\"), &rsp_node_count);\n    if (ret) {\n        ret = 0;  // no bricks in the rsp\n        goto out;\n    }\n\n    ret = dict_get_int32n(rsp_dict, \"other-count\", SLEN(\"other-count\"),\n                          &rsp_other_count);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Failed to get other count from rsp_dict\");\n        goto out;\n    }\n\n    ret = dict_get_int32n(ctx_dict, \"count\", SLEN(\"count\"), &node_count);\n    ret = dict_get_int32n(ctx_dict, \"other-count\", SLEN(\"other-count\"),\n                          &other_count);\n    if (!dict_getn(ctx_dict, \"brick-index-max\", SLEN(\"brick-index-max\"))) {\n        ret = dict_get_int32n(rsp_dict, \"brick-index-max\",\n                              SLEN(\"brick-index-max\"), &brick_index_max);\n        if (ret)\n            goto out;\n        ret = dict_set_int32n(ctx_dict, \"brick-index-max\",\n                              SLEN(\"brick-index-max\"), brick_index_max);\n        if (ret)\n            goto out;\n\n    } else {\n        ret = dict_get_int32n(ctx_dict, \"brick-index-max\",\n                              SLEN(\"brick-index-max\"), &brick_index_max);\n        if (ret)\n            goto out;\n    }\n\n    rsp_ctx.count = node_count;\n    rsp_ctx.brick_index_max = brick_index_max;\n    rsp_ctx.other_count = other_count;\n    rsp_ctx.dict = ctx_dict;\n\n    dict_foreach(rsp_dict, glusterd_volume_status_add_peer_rsp, &rsp_ctx);\n\n    ret = dict_set_int32n(ctx_dict, \"count\", SLEN(\"count\"),\n                          node_count + rsp_node_count);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to update node count\");\n        goto out;\n    }\n\n    ret = dict_set_int32n(ctx_dict, \"other-count\", SLEN(\"other-count\"),\n                          (other_count + rsp_other_count));\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to update other-count\");\n        goto out;\n    }\n\n    ret = dict_get_strn(ctx_dict, \"volname\", SLEN(\"volname\"), &volname);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to get volname\");\n        goto out;\n    }\n\n    ret = glusterd_volinfo_find(volname, &volinfo);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_VOLINFO_GET_FAIL,\n               \"Failed to get volinfo for volume: %s\", volname);\n        goto out;\n    }\n\n    ret = dict_set_int32n(ctx_dict, \"hot_brick_count\", SLEN(\"hot_brick_count\"),\n                          hot_brick_count);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, errno, GD_MSG_DICT_SET_FAILED,\n               \"Failed to update hot_brick_count\");\n        goto out;\n    }\n\n    ret = dict_set_int32n(ctx_dict, \"type\", SLEN(\"type\"), type);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, errno, GD_MSG_DICT_SET_FAILED,\n               \"Failed to update type\");\n        goto out;\n    }\n\naggregate_tasks:\n    /* Tasks are only present for a normal status command for a volume or\n     * for an explicit tasks status command for a volume\n     */\n    if (!(cmd & GF_CLI_STATUS_ALL) &&\n        (((cmd & GF_CLI_STATUS_TASKS) != 0) || glusterd_status_has_tasks(cmd)))\n        ret = glusterd_volume_status_aggregate_tasks_status(ctx_dict, rsp_dict);\n\nout:\n    return ret;\n}\n\nint\nglusterd_max_opversion_use_rsp_dict(dict_t *dst, dict_t *src)\n{\n    int ret = -1;\n    int src_max_opversion = -1;\n    int max_opversion = -1;\n\n    GF_VALIDATE_OR_GOTO(THIS->name, dst, out);\n    GF_VALIDATE_OR_GOTO(THIS->name, src, out);\n\n    ret = dict_get_int32n(dst, \"max-opversion\", SLEN(\"max-opversion\"),\n                          &max_opversion);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Maximum supported op-version not set in destination \"\n               \"dictionary\");\n\n    ret = dict_get_int32n(src, \"max-opversion\", SLEN(\"max-opversion\"),\n                          &src_max_opversion);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Failed to get maximum supported op-version from source\");\n        goto out;\n    }\n\n    if (max_opversion == -1 || src_max_opversion < max_opversion)\n        max_opversion = src_max_opversion;\n\n    ret = dict_set_int32n(dst, \"max-opversion\", SLEN(\"max-opversion\"),\n                          max_opversion);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to set max op-version\");\n        goto out;\n    }\nout:\n    return ret;\n}\n\nint\nglusterd_volume_bitrot_scrub_use_rsp_dict(dict_t *aggr, dict_t *rsp_dict)\n{\n    int ret = -1;\n    int j = 0;\n    uint64_t value = 0;\n    char key[64] = \"\";\n    int keylen;\n    char *last_scrub_time = NULL;\n    char *scrub_time = NULL;\n    char *volname = NULL;\n    char *node_uuid = NULL;\n    char *node_uuid_str = NULL;\n    char *bitd_log = NULL;\n    char *scrub_log = NULL;\n    char *scrub_freq = NULL;\n    char *scrub_state = NULL;\n    char *scrub_impact = NULL;\n    char *bad_gfid_str = NULL;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n    glusterd_volinfo_t *volinfo = NULL;\n    int src_count = 0;\n    int dst_count = 0;\n    int8_t scrub_running = 0;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    ret = dict_get_strn(aggr, \"volname\", SLEN(\"volname\"), &volname);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Unable to get volume name\");\n        goto out;\n    }\n\n    ret = glusterd_volinfo_find(volname, &volinfo);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_VOL_NOT_FOUND,\n               \"Unable to find volinfo for volume: %s\", volname);\n        goto out;\n    }\n\n    ret = dict_get_int32n(aggr, \"count\", SLEN(\"count\"), &dst_count);\n\n    ret = dict_get_int32n(rsp_dict, \"count\", SLEN(\"count\"), &src_count);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"failed to get count value\");\n        ret = 0;\n        goto out;\n    }\n\n    ret = dict_set_int32n(aggr, \"count\", SLEN(\"count\"), src_count + dst_count);\n    if (ret)\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to set count in dictonary\");\n\n    keylen = snprintf(key, sizeof(key), \"node-uuid-%d\", src_count);\n    ret = dict_get_strn(rsp_dict, key, keylen, &node_uuid);\n    if (!ret) {\n        node_uuid_str = gf_strdup(node_uuid);\n        keylen = snprintf(key, sizeof(key), \"node-uuid-%d\",\n                          src_count + dst_count);\n        ret = dict_set_dynstrn(aggr, key, keylen, node_uuid_str);\n        if (ret) {\n            gf_msg_debug(this->name, 0, \"failed to set node-uuid\");\n        }\n    }\n\n    snprintf(key, sizeof(key), \"scrub-running-%d\", src_count);\n    ret = dict_get_int8(rsp_dict, key, &scrub_running);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"scrub-running-%d\", src_count + dst_count);\n        ret = dict_set_int8(aggr, key, scrub_running);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"scrub-running value\");\n        }\n    }\n\n    snprintf(key, sizeof(key), \"scrubbed-files-%d\", src_count);\n    ret = dict_get_uint64(rsp_dict, key, &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"scrubbed-files-%d\", src_count + dst_count);\n        ret = dict_set_uint64(aggr, key, value);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"scrubbed-file value\");\n        }\n    }\n\n    snprintf(key, sizeof(key), \"unsigned-files-%d\", src_count);\n    ret = dict_get_uint64(rsp_dict, key, &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"unsigned-files-%d\", src_count + dst_count);\n        ret = dict_set_uint64(aggr, key, value);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"unsigned-file value\");\n        }\n    }\n\n    keylen = snprintf(key, sizeof(key), \"last-scrub-time-%d\", src_count);\n    ret = dict_get_strn(rsp_dict, key, keylen, &last_scrub_time);\n    if (!ret) {\n        scrub_time = gf_strdup(last_scrub_time);\n        keylen = snprintf(key, sizeof(key), \"last-scrub-time-%d\",\n                          src_count + dst_count);\n        ret = dict_set_dynstrn(aggr, key, keylen, scrub_time);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"last scrub time value\");\n        }\n    }\n\n    snprintf(key, sizeof(key), \"scrub-duration-%d\", src_count);\n    ret = dict_get_uint64(rsp_dict, key, &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"scrub-duration-%d\", src_count + dst_count);\n        ret = dict_set_uint64(aggr, key, value);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"scrubbed-duration value\");\n        }\n    }\n\n    snprintf(key, sizeof(key), \"error-count-%d\", src_count);\n    ret = dict_get_uint64(rsp_dict, key, &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"error-count-%d\", src_count + dst_count);\n        ret = dict_set_uint64(aggr, key, value);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set error \"\n                         \"count value\");\n        }\n\n        /* Storing all the bad files in the dictionary */\n        for (j = 0; j < value; j++) {\n            keylen = snprintf(key, sizeof(key), \"quarantine-%d-%d\", j,\n                              src_count);\n            ret = dict_get_strn(rsp_dict, key, keylen, &bad_gfid_str);\n            if (!ret) {\n                snprintf(key, sizeof(key), \"quarantine-%d-%d\", j,\n                         src_count + dst_count);\n                ret = dict_set_dynstr_with_alloc(aggr, key, bad_gfid_str);\n                if (ret) {\n                    gf_msg_debug(this->name, 0,\n                                 \"Failed to\"\n                                 \"bad file gfid \");\n                }\n            }\n        }\n    }\n\n    ret = dict_get_strn(rsp_dict, \"bitrot_log_file\", SLEN(\"bitrot_log_file\"),\n                        &bitd_log);\n    if (!ret) {\n        ret = dict_set_dynstr_with_alloc(aggr, \"bitrot_log_file\", bitd_log);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"bitrot log file location\");\n            goto out;\n        }\n    }\n\n    ret = dict_get_strn(rsp_dict, \"scrub_log_file\", SLEN(\"scrub_log_file\"),\n                        &scrub_log);\n    if (!ret) {\n        ret = dict_set_dynstr_with_alloc(aggr, \"scrub_log_file\", scrub_log);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"scrubber log file location\");\n            goto out;\n        }\n    }\n\n    ret = dict_get_strn(rsp_dict, \"features.scrub-freq\",\n                        SLEN(\"features.scrub-freq\"), &scrub_freq);\n    if (!ret) {\n        ret = dict_set_dynstr_with_alloc(aggr, \"features.scrub-freq\",\n                                         scrub_freq);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"scrub-frequency value to dictionary\");\n            goto out;\n        }\n    }\n\n    ret = dict_get_strn(rsp_dict, \"features.scrub-throttle\",\n                        SLEN(\"features.scrub-throttle\"), &scrub_impact);\n    if (!ret) {\n        ret = dict_set_dynstr_with_alloc(aggr, \"features.scrub-throttle\",\n                                         scrub_impact);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"scrub-throttle value to dictionary\");\n            goto out;\n        }\n    }\n\n    ret = dict_get_strn(rsp_dict, \"features.scrub\", SLEN(\"features.scrub\"),\n                        &scrub_state);\n    if (!ret) {\n        ret = dict_set_dynstr_with_alloc(aggr, \"features.scrub\", scrub_state);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"scrub state value to dictionary\");\n            goto out;\n        }\n    }\n\n    ret = 0;\nout:\n    return ret;\n}\n\nint\nglusterd_bitrot_volume_node_rsp(dict_t *aggr, dict_t *rsp_dict)\n{\n    int ret = -1;\n    uint64_t value = 0;\n    char key[64] = \"\";\n    int keylen;\n    char buf[1024] = \"\";\n    int32_t i = 0;\n    int32_t j = 0;\n    char *last_scrub_time = NULL;\n    char *scrub_time = NULL;\n    char *volname = NULL;\n    char *scrub_freq = NULL;\n    char *scrub_state = NULL;\n    char *scrub_impact = NULL;\n    char *bad_gfid_str = NULL;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n    glusterd_volinfo_t *volinfo = NULL;\n    int8_t scrub_running = 0;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    ret = dict_set_strn(aggr, \"bitrot_log_file\", SLEN(\"bitrot_log_file\"),\n                        priv->bitd_svc.proc.logfile);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to set bitrot log file location\");\n        goto out;\n    }\n\n    ret = dict_set_strn(aggr, \"scrub_log_file\", SLEN(\"scrub_log_file\"),\n                        priv->scrub_svc.proc.logfile);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to set scrubber log file location\");\n        goto out;\n    }\n\n    ret = dict_get_strn(aggr, \"volname\", SLEN(\"volname\"), &volname);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Unable to get volume name\");\n        goto out;\n    }\n\n    ret = glusterd_volinfo_find(volname, &volinfo);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_VOL_NOT_FOUND,\n               \"Unable to find volinfo for volume: %s\", volname);\n        goto out;\n    }\n\n    ret = dict_get_int32n(aggr, \"count\", SLEN(\"count\"), &i);\n    i++;\n\n    ret = dict_set_int32n(aggr, \"count\", SLEN(\"count\"), i);\n    if (ret)\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to set count\");\n\n    snprintf(buf, sizeof(buf), \"%s\", uuid_utoa(MY_UUID));\n\n    snprintf(key, sizeof(key), \"node-uuid-%d\", i);\n    ret = dict_set_dynstr_with_alloc(aggr, key, buf);\n    if (ret)\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"failed to set node-uuid\");\n\n    ret = dict_get_strn(volinfo->dict, \"features.scrub-freq\",\n                        SLEN(\"features.scrub-freq\"), &scrub_freq);\n    if (!ret) {\n        ret = dict_set_strn(aggr, \"features.scrub-freq\",\n                            SLEN(\"features.scrub-freq\"), scrub_freq);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"scrub-frequency value to dictionary\");\n        }\n    } else {\n        /* By Default scrub-frequency is bi-weekly. So when user\n         * enable bitrot then scrub-frequency value will not be\n         * present in volinfo->dict. Setting by-default value of\n         * scrub-frequency explicitly for presenting it to scrub\n         * status.\n         */\n        ret = dict_set_dynstr_with_alloc(aggr, \"features.scrub-freq\",\n                                         \"biweekly\");\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"scrub-frequency value to dictionary\");\n        }\n    }\n\n    ret = dict_get_strn(volinfo->dict, \"features.scrub-throttle\",\n                        SLEN(\"features.scrub-throttle\"), &scrub_impact);\n    if (!ret) {\n        ret = dict_set_strn(aggr, \"features.scrub-throttle\",\n                            SLEN(\"features.scrub-throttle\"), scrub_impact);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"scrub-throttle value to dictionary\");\n        }\n    } else {\n        /* By Default scrub-throttle is lazy. So when user\n         * enable bitrot then scrub-throttle value will not be\n         * present in volinfo->dict. Setting by-default value of\n         * scrub-throttle explicitly for presenting it to\n         * scrub status.\n         */\n        ret = dict_set_dynstr_with_alloc(aggr, \"features.scrub-throttle\",\n                                         \"lazy\");\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"scrub-throttle value to dictionary\");\n        }\n    }\n\n    ret = dict_get_strn(volinfo->dict, \"features.scrub\", SLEN(\"features.scrub\"),\n                        &scrub_state);\n    if (!ret) {\n        ret = dict_set_strn(aggr, \"features.scrub\", SLEN(\"features.scrub\"),\n                            scrub_state);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"scrub state value to dictionary\");\n        }\n    }\n\n    ret = dict_get_int8(rsp_dict, \"scrub-running\", &scrub_running);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"scrub-running-%d\", i);\n        ret = dict_set_uint64(aggr, key, scrub_running);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"scrub-running value\");\n        }\n    }\n\n    ret = dict_get_uint64(rsp_dict, \"scrubbed-files\", &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"scrubbed-files-%d\", i);\n        ret = dict_set_uint64(aggr, key, value);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"scrubbed-file value\");\n        }\n    }\n\n    ret = dict_get_uint64(rsp_dict, \"unsigned-files\", &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"unsigned-files-%d\", i);\n        ret = dict_set_uint64(aggr, key, value);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"unsigned-file value\");\n        }\n    }\n\n    ret = dict_get_strn(rsp_dict, \"last-scrub-time\", SLEN(\"last-scrub-time\"),\n                        &last_scrub_time);\n    if (!ret) {\n        keylen = snprintf(key, sizeof(key), \"last-scrub-time-%d\", i);\n\n        scrub_time = gf_strdup(last_scrub_time);\n        ret = dict_set_dynstrn(aggr, key, keylen, scrub_time);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"last scrub time value\");\n        }\n    }\n\n    ret = dict_get_uint64(rsp_dict, \"scrub-duration\", &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"scrub-duration-%d\", i);\n        ret = dict_set_uint64(aggr, key, value);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set \"\n                         \"scrubbed-duration value\");\n        }\n    }\n\n    ret = dict_get_uint64(rsp_dict, \"total-count\", &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"error-count-%d\", i);\n        ret = dict_set_uint64(aggr, key, value);\n        if (ret) {\n            gf_msg_debug(this->name, 0,\n                         \"Failed to set error \"\n                         \"count value\");\n        }\n\n        /* Storing all the bad files in the dictionary */\n        for (j = 0; j < value; j++) {\n            keylen = snprintf(key, sizeof(key), \"quarantine-%d\", j);\n            ret = dict_get_strn(rsp_dict, key, keylen, &bad_gfid_str);\n            if (!ret) {\n                snprintf(key, sizeof(key), \"quarantine-%d-%d\", j, i);\n                ret = dict_set_dynstr_with_alloc(aggr, key, bad_gfid_str);\n                if (ret) {\n                    gf_msg_debug(this->name, 0,\n                                 \"Failed to\"\n                                 \"bad file gfid \");\n                }\n            }\n        }\n    }\n\n    ret = 0;\nout:\n    return ret;\n}\n\nint\nglusterd_volume_rebalance_use_rsp_dict(dict_t *aggr, dict_t *rsp_dict)\n{\n    char key[64] = \"\";\n    int keylen;\n    char *node_uuid = NULL;\n    char *node_uuid_str = NULL;\n    char *volname = NULL;\n    dict_t *ctx_dict = NULL;\n    double elapsed_time = 0;\n    glusterd_conf_t *conf = NULL;\n    glusterd_peerinfo_t *peerinfo = NULL;\n    glusterd_volinfo_t *volinfo = NULL;\n    int ret = 0;\n    int32_t index = 0;\n    int32_t count = 0;\n    int32_t current_index = 1;\n    int32_t value32 = 0;\n    uint64_t value = 0;\n    char *peer_uuid_str = NULL;\n    xlator_t *this = NULL;\n\n    GF_ASSERT(rsp_dict);\n    this = THIS;\n    GF_ASSERT(this);\n    conf = this->private;\n\n    if (conf->op_version < GD_OP_VERSION_6_0)\n        current_index = 2;\n    if (aggr) {\n        ctx_dict = aggr;\n\n    } else {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_OPCTX_GET_FAIL,\n               \"Operation Context is not present\");\n        goto out;\n    }\n\n    ret = dict_get_strn(ctx_dict, \"volname\", SLEN(\"volname\"), &volname);\n    if (ret) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Unable to get volume name\");\n        goto out;\n    }\n\n    ret = glusterd_volinfo_find(volname, &volinfo);\n\n    if (ret)\n        goto out;\n\n    ret = dict_get_int32n(rsp_dict, \"count\", SLEN(\"count\"), &index);\n    if (ret)\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"failed to get index from rsp dict\");\n\n    keylen = snprintf(key, sizeof(key), \"node-uuid-%d\", index);\n    ret = dict_get_strn(rsp_dict, key, keylen, &node_uuid);\n    if (!ret) {\n        node_uuid_str = gf_strdup(node_uuid);\n\n        /* Finding the index of the node-uuid in the peer-list */\n        RCU_READ_LOCK;\n        cds_list_for_each_entry_rcu(peerinfo, &conf->peers, uuid_list)\n        {\n            peer_uuid_str = gd_peer_uuid_str(peerinfo);\n            if (strcmp(peer_uuid_str, node_uuid_str) == 0)\n                break;\n\n            current_index++;\n        }\n        RCU_READ_UNLOCK;\n\n        /* Setting the largest index value as the total count. */\n        ret = dict_get_int32n(ctx_dict, \"count\", SLEN(\"count\"), &count);\n        if (count < current_index) {\n            ret = dict_set_int32n(ctx_dict, \"count\", SLEN(\"count\"),\n                                  current_index);\n            if (ret)\n                gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                       \"Failed to set count\");\n        }\n\n        /* Setting the same index for the node, as is in the peerlist.*/\n        keylen = snprintf(key, sizeof(key), \"node-uuid-%d\", current_index);\n        ret = dict_set_dynstrn(ctx_dict, key, keylen, node_uuid_str);\n        if (ret) {\n            gf_msg_debug(THIS->name, 0, \"failed to set node-uuid\");\n        }\n    }\n\n    snprintf(key, sizeof(key), \"files-%d\", index);\n    ret = dict_get_uint64(rsp_dict, key, &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"files-%d\", current_index);\n        ret = dict_set_uint64(ctx_dict, key, value);\n        if (ret) {\n            gf_msg_debug(THIS->name, 0, \"failed to set the file count\");\n        }\n    }\n\n    snprintf(key, sizeof(key), \"size-%d\", index);\n    ret = dict_get_uint64(rsp_dict, key, &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"size-%d\", current_index);\n        ret = dict_set_uint64(ctx_dict, key, value);\n        if (ret) {\n            gf_msg_debug(THIS->name, 0, \"failed to set the size of migration\");\n        }\n    }\n\n    snprintf(key, sizeof(key), \"lookups-%d\", index);\n    ret = dict_get_uint64(rsp_dict, key, &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"lookups-%d\", current_index);\n        ret = dict_set_uint64(ctx_dict, key, value);\n        if (ret) {\n            gf_msg_debug(THIS->name, 0, \"failed to set looked up file count\");\n        }\n    }\n\n    keylen = snprintf(key, sizeof(key), \"status-%d\", index);\n    ret = dict_get_int32n(rsp_dict, key, keylen, &value32);\n    if (!ret) {\n        keylen = snprintf(key, sizeof(key), \"status-%d\", current_index);\n        ret = dict_set_int32n(ctx_dict, key, keylen, value32);\n        if (ret) {\n            gf_msg_debug(THIS->name, 0, \"failed to set status\");\n        }\n    }\n\n    snprintf(key, sizeof(key), \"failures-%d\", index);\n    ret = dict_get_uint64(rsp_dict, key, &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"failures-%d\", current_index);\n        ret = dict_set_uint64(ctx_dict, key, value);\n        if (ret) {\n            gf_msg_debug(THIS->name, 0, \"failed to set failure count\");\n        }\n    }\n\n    snprintf(key, sizeof(key), \"skipped-%d\", index);\n    ret = dict_get_uint64(rsp_dict, key, &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"skipped-%d\", current_index);\n        ret = dict_set_uint64(ctx_dict, key, value);\n        if (ret) {\n            gf_msg_debug(THIS->name, 0, \"failed to set skipped count\");\n        }\n    }\n    snprintf(key, sizeof(key), \"run-time-%d\", index);\n    ret = dict_get_double(rsp_dict, key, &elapsed_time);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"run-time-%d\", current_index);\n        ret = dict_set_double(ctx_dict, key, elapsed_time);\n        if (ret) {\n            gf_msg_debug(THIS->name, 0, \"failed to set run-time\");\n        }\n    }\n\n    snprintf(key, sizeof(key), \"time-left-%d\", index);\n    ret = dict_get_uint64(rsp_dict, key, &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"time-left-%d\", current_index);\n        ret = dict_set_uint64(ctx_dict, key, value);\n        if (ret) {\n            gf_msg_debug(THIS->name, 0, \"failed to set time-left\");\n        }\n    }\n    snprintf(key, sizeof(key), \"demoted-%d\", index);\n    ret = dict_get_uint64(rsp_dict, key, &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"demoted-%d\", current_index);\n        ret = dict_set_uint64(ctx_dict, key, value);\n        if (ret) {\n            gf_msg_debug(THIS->name, 0, \"failed to set demoted count\");\n        }\n    }\n    snprintf(key, sizeof(key), \"promoted-%d\", index);\n    ret = dict_get_uint64(rsp_dict, key, &value);\n    if (!ret) {\n        snprintf(key, sizeof(key), \"promoted-%d\", current_index);\n        ret = dict_set_uint64(ctx_dict, key, value);\n        if (ret) {\n            gf_msg_debug(THIS->name, 0, \"failed to set promoted count\");\n        }\n    }\n\n    ret = 0;\n\nout:\n    return ret;\n}\n\nint\nglusterd_sys_exec_output_rsp_dict(dict_t *dst, dict_t *src)\n{\n    char output_name[64] = \"\";\n    char *output = NULL;\n    int ret = 0;\n    int i = 0;\n    int keylen;\n    int src_output_count = 0;\n    int dst_output_count = 0;\n\n    if (!dst || !src) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_DICT_EMPTY,\n               \"Source or Destination \"\n               \"dict is empty.\");\n        goto out;\n    }\n\n    ret = dict_get_int32n(dst, \"output_count\", SLEN(\"output_count\"),\n                          &dst_output_count);\n\n    ret = dict_get_int32n(src, \"output_count\", SLEN(\"output_count\"),\n                          &src_output_count);\n    if (ret) {\n        gf_msg_debug(\"glusterd\", 0, \"No output from source\");\n        ret = 0;\n        goto out;\n    }\n\n    for (i = 1; i <= src_output_count; i++) {\n        keylen = snprintf(output_name, sizeof(output_name), \"output_%d\", i);\n        if (keylen <= 0 || keylen >= sizeof(output_name)) {\n            ret = -1;\n            goto out;\n        }\n        ret = dict_get_strn(src, output_name, keylen, &output);\n        if (ret) {\n            gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n                   \"Unable to fetch %s\", output_name);\n            goto out;\n        }\n\n        keylen = snprintf(output_name, sizeof(output_name), \"output_%d\",\n                          i + dst_output_count);\n        if (keylen <= 0 || keylen >= sizeof(output_name)) {\n            ret = -1;\n            goto out;\n        }\n\n        ret = dict_set_dynstrn(dst, output_name, keylen, gf_strdup(output));\n        if (ret) {\n            gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Unable to set %s\", output_name);\n            goto out;\n        }\n    }\n\n    ret = dict_set_int32n(dst, \"output_count\", SLEN(\"output_count\"),\n                          dst_output_count + src_output_count);\nout:\n    gf_msg_debug(\"glusterd\", 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_use_rsp_dict(dict_t *aggr, dict_t *rsp_dict)\n{\n    int ret = 0;\n\n    GF_ASSERT(aggr);\n    GF_ASSERT(rsp_dict);\n\n    if (!aggr)\n        goto out;\n    dict_copy(rsp_dict, aggr);\nout:\n    return ret;\n}\n\nint\nglusterd_volume_heal_use_rsp_dict(dict_t *aggr, dict_t *rsp_dict)\n{\n    int ret = 0;\n    dict_t *ctx_dict = NULL;\n    uuid_t *txn_id = NULL;\n    glusterd_op_info_t txn_op_info = {\n        {0},\n    };\n    glusterd_op_t op = GD_OP_NONE;\n\n    GF_ASSERT(rsp_dict);\n\n    ret = dict_get_bin(aggr, \"transaction_id\", (void **)&txn_id);\n    if (ret)\n        goto out;\n    gf_msg_debug(THIS->name, 0, \"transaction ID = %s\", uuid_utoa(*txn_id));\n\n    ret = glusterd_get_txn_opinfo(txn_id, &txn_op_info);\n    if (ret) {\n        gf_msg_callingfn(THIS->name, GF_LOG_ERROR, 0,\n                         GD_MSG_TRANS_OPINFO_GET_FAIL,\n                         \"Unable to get transaction opinfo \"\n                         \"for transaction ID : %s\",\n                         uuid_utoa(*txn_id));\n        goto out;\n    }\n\n    op = txn_op_info.op;\n    GF_ASSERT(GD_OP_HEAL_VOLUME == op);\n\n    if (aggr) {\n        ctx_dict = aggr;\n\n    } else {\n        ctx_dict = txn_op_info.op_ctx;\n    }\n\n    if (!ctx_dict)\n        goto out;\n    dict_copy(rsp_dict, ctx_dict);\nout:\n    return ret;\n}\n\nint\n_profile_volume_add_brick_rsp(dict_t *this, char *key, data_t *value,\n                              void *data)\n{\n    char new_key[256] = \"\";\n    int keylen;\n    glusterd_pr_brick_rsp_conv_t *rsp_ctx = NULL;\n    data_t *new_value = NULL;\n\n    rsp_ctx = data;\n    new_value = data_copy(value);\n    GF_ASSERT(new_value);\n    keylen = snprintf(new_key, sizeof(new_key), \"%d-%s\", rsp_ctx->count, key);\n    dict_setn(rsp_ctx->dict, new_key, keylen, new_value);\n    return 0;\n}\n\nint\nglusterd_volume_quota_copy_to_op_ctx_dict(dict_t *dict, dict_t *rsp_dict)\n{\n    int ret = -1;\n    int i = 0;\n    int count = 0;\n    int rsp_dict_count = 0;\n    char *uuid_str = NULL;\n    char *uuid_str_dup = NULL;\n    char key[64] = \"\";\n    int keylen;\n    xlator_t *this = NULL;\n    int type = GF_QUOTA_OPTION_TYPE_NONE;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    ret = dict_get_int32n(dict, \"type\", SLEN(\"type\"), &type);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Failed to get quota opcode\");\n        goto out;\n    }\n\n    if ((type != GF_QUOTA_OPTION_TYPE_LIMIT_USAGE) &&\n        (type != GF_QUOTA_OPTION_TYPE_LIMIT_OBJECTS) &&\n        (type != GF_QUOTA_OPTION_TYPE_REMOVE) &&\n        (type != GF_QUOTA_OPTION_TYPE_REMOVE_OBJECTS)) {\n        dict_copy(rsp_dict, dict);\n        ret = 0;\n        goto out;\n    }\n\n    ret = dict_get_int32n(rsp_dict, \"count\", SLEN(\"count\"), &rsp_dict_count);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Failed to get the count of \"\n               \"gfids from the rsp dict\");\n        goto out;\n    }\n\n    ret = dict_get_int32n(dict, \"count\", SLEN(\"count\"), &count);\n    if (ret)\n        /* The key \"count\" is absent in op_ctx when this function is\n         * called after self-staging on the originator. This must not\n         * be treated as error.\n         */\n        gf_msg_debug(this->name, 0,\n                     \"Failed to get count of gfids\"\n                     \" from req dict. This could be because count is not yet\"\n                     \" copied from rsp_dict into op_ctx\");\n\n    for (i = 0; i < rsp_dict_count; i++) {\n        keylen = snprintf(key, sizeof(key), \"gfid%d\", i);\n        ret = dict_get_strn(rsp_dict, key, keylen, &uuid_str);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n                   \"Failed to get gfid \"\n                   \"from rsp dict\");\n            goto out;\n        }\n\n        uuid_str_dup = gf_strdup(uuid_str);\n        if (!uuid_str_dup) {\n            ret = -1;\n            goto out;\n        }\n\n        keylen = snprintf(key, sizeof(key), \"gfid%d\", i + count);\n        ret = dict_set_dynstrn(dict, key, keylen, uuid_str_dup);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Failed to set gfid \"\n                   \"from rsp dict into req dict\");\n            GF_FREE(uuid_str_dup);\n            goto out;\n        }\n    }\n\n    ret = dict_set_int32n(dict, \"count\", SLEN(\"count\"), rsp_dict_count + count);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to set aggregated \"\n               \"count in req dict\");\n        goto out;\n    }\n\nout:\n    return ret;\n}\n\nint\nglusterd_profile_volume_brick_rsp(void *pending_entry, dict_t *rsp_dict,\n                                  dict_t *op_ctx, char **op_errstr,\n                                  gd_node_type type)\n{\n    int ret = 0;\n    glusterd_pr_brick_rsp_conv_t rsp_ctx = {0};\n    int32_t count = 0;\n    char brick[PATH_MAX + 1024] = \"\";\n    char key[64] = \"\";\n    int keylen;\n    char *full_brick = NULL;\n    glusterd_brickinfo_t *brickinfo = NULL;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n\n    GF_ASSERT(rsp_dict);\n    GF_ASSERT(op_ctx);\n    GF_ASSERT(op_errstr);\n    GF_ASSERT(pending_entry);\n\n    this = THIS;\n    GF_ASSERT(this);\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    ret = dict_get_int32n(op_ctx, \"count\", SLEN(\"count\"), &count);\n    if (ret) {\n        count = 1;\n    } else {\n        count++;\n    }\n    if (type == GD_NODE_BRICK) {\n        brickinfo = pending_entry;\n        snprintf(brick, sizeof(brick), \"%s:%s\", brickinfo->hostname,\n                 brickinfo->path);\n    } else if (type == GD_NODE_NFS) {\n        snprintf(brick, sizeof(brick), \"%s\", uuid_utoa(MY_UUID));\n    }\n    full_brick = gf_strdup(brick);\n    GF_ASSERT(full_brick);\n    keylen = snprintf(key, sizeof(key), \"%d-brick\", count);\n    ret = dict_set_dynstrn(op_ctx, key, keylen, full_brick);\n\n    rsp_ctx.count = count;\n    rsp_ctx.dict = op_ctx;\n    dict_foreach(rsp_dict, _profile_volume_add_brick_rsp, &rsp_ctx);\n    ret = dict_set_int32n(op_ctx, \"count\", SLEN(\"count\"), count);\n    return ret;\n}\n\n// input-key: <replica-id>:<child-id>-*\n// output-key: <brick-id>-*\nint\n_heal_volume_add_shd_rsp(dict_t *this, char *key, data_t *value, void *data)\n{\n    char new_key[256] = \"\";\n    char int_str[16] = \"\";\n    data_t *new_value = NULL;\n    char *rxl_end = NULL;\n    int rxl_end_len;\n    char *rxl_child_end = NULL;\n    glusterd_volinfo_t *volinfo = NULL;\n    int rxl_id = 0;\n    int rxl_child_id = 0;\n    int brick_id = 0;\n    int int_len = 0;\n    int ret = 0;\n    glusterd_heal_rsp_conv_t *rsp_ctx = NULL;\n    glusterd_brickinfo_t *brickinfo = NULL;\n\n    rsp_ctx = data;\n    rxl_end = strchr(key, '-');\n    if (!rxl_end)\n        goto out;\n\n    rxl_child_end = strchr(rxl_end + 1, '-');\n    if (!rxl_child_end)\n        goto out;\n\n    rxl_end_len = strlen(rxl_end);\n    int_len = strlen(key) - rxl_end_len;\n    (void)memcpy(int_str, key, int_len);\n    int_str[int_len] = '\\0';\n\n    ret = gf_string2int(int_str, &rxl_id);\n    if (ret)\n        goto out;\n\n    int_len = rxl_end_len - strlen(rxl_child_end) - 1;\n    (void)memcpy(int_str, rxl_end + 1, int_len);\n    int_str[int_len] = '\\0';\n\n    ret = gf_string2int(int_str, &rxl_child_id);\n    if (ret)\n        goto out;\n\n    volinfo = rsp_ctx->volinfo;\n    brick_id = rxl_id * volinfo->replica_count + rxl_child_id;\n\n    if (!strcmp(rxl_child_end, \"-status\")) {\n        brickinfo = glusterd_get_brickinfo_by_position(volinfo, brick_id);\n        if (!brickinfo)\n            goto out;\n        if (!glusterd_is_local_brick(rsp_ctx->this, volinfo, brickinfo))\n            goto out;\n    }\n    new_value = data_copy(value);\n    int_len = snprintf(new_key, sizeof(new_key), \"%d%s\", brick_id,\n                       rxl_child_end);\n    dict_setn(rsp_ctx->dict, new_key, int_len, new_value);\n\nout:\n    return 0;\n}\n\nint\n_heal_volume_add_shd_rsp_of_statistics(dict_t *this, char *key, data_t *value,\n                                       void *data)\n{\n    char new_key[256] = \"\";\n    char int_str[16] = \"\";\n    char key_begin_string[128] = \"\";\n    data_t *new_value = NULL;\n    char *rxl_end = NULL;\n    int rxl_end_len;\n    char *rxl_child_end = NULL;\n    glusterd_volinfo_t *volinfo = NULL;\n    char *key_begin_str = NULL;\n    int key_begin_strlen;\n    int rxl_id = 0;\n    int rxl_child_id = 0;\n    int brick_id = 0;\n    int int_len = 0;\n    int ret = 0;\n    glusterd_heal_rsp_conv_t *rsp_ctx = NULL;\n    glusterd_brickinfo_t *brickinfo = NULL;\n\n    rsp_ctx = data;\n    key_begin_str = strchr(key, '-');\n    if (!key_begin_str)\n        goto out;\n\n    rxl_end = strchr(key_begin_str + 1, '-');\n    if (!rxl_end)\n        goto out;\n\n    rxl_child_end = strchr(rxl_end + 1, '-');\n    if (!rxl_child_end)\n        goto out;\n\n    key_begin_strlen = strlen(key_begin_str);\n    int_len = strlen(key) - key_begin_strlen;\n\n    (void)memcpy(key_begin_string, key, int_len);\n    key_begin_string[int_len] = '\\0';\n\n    rxl_end_len = strlen(rxl_end);\n    int_len = key_begin_strlen - rxl_end_len - 1;\n    (void)memcpy(int_str, key_begin_str + 1, int_len);\n    int_str[int_len] = '\\0';\n    ret = gf_string2int(int_str, &rxl_id);\n    if (ret)\n        goto out;\n\n    int_len = rxl_end_len - strlen(rxl_child_end) - 1;\n    (void)memcpy(int_str, rxl_end + 1, int_len);\n    int_str[int_len] = '\\0';\n    ret = gf_string2int(int_str, &rxl_child_id);\n    if (ret)\n        goto out;\n\n    volinfo = rsp_ctx->volinfo;\n    brick_id = rxl_id * volinfo->replica_count + rxl_child_id;\n\n    brickinfo = glusterd_get_brickinfo_by_position(volinfo, brick_id);\n    if (!brickinfo)\n        goto out;\n    if (!glusterd_is_local_brick(rsp_ctx->this, volinfo, brickinfo))\n        goto out;\n\n    new_value = data_copy(value);\n    int_len = snprintf(new_key, sizeof(new_key), \"%s-%d%s\", key_begin_string,\n                       brick_id, rxl_child_end);\n    dict_setn(rsp_ctx->dict, new_key, int_len, new_value);\n\nout:\n    return 0;\n}\n\nint\nglusterd_heal_volume_brick_rsp(dict_t *req_dict, dict_t *rsp_dict,\n                               dict_t *op_ctx, char **op_errstr)\n{\n    int ret = 0;\n    glusterd_heal_rsp_conv_t rsp_ctx = {0};\n    char *volname = NULL;\n    glusterd_volinfo_t *volinfo = NULL;\n    int heal_op = -1;\n\n    GF_ASSERT(rsp_dict);\n    GF_ASSERT(op_ctx);\n    GF_ASSERT(op_errstr);\n\n    ret = dict_get_strn(req_dict, \"volname\", SLEN(\"volname\"), &volname);\n    if (ret) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Unable to get volume name\");\n        goto out;\n    }\n\n    ret = dict_get_int32n(req_dict, \"heal-op\", SLEN(\"heal-op\"), &heal_op);\n    if (ret) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Unable to get heal_op\");\n        goto out;\n    }\n\n    ret = glusterd_volinfo_find(volname, &volinfo);\n\n    if (ret)\n        goto out;\n\n    rsp_ctx.dict = op_ctx;\n    rsp_ctx.volinfo = volinfo;\n    rsp_ctx.this = THIS;\n    if (heal_op == GF_SHD_OP_STATISTICS)\n        dict_foreach(rsp_dict, _heal_volume_add_shd_rsp_of_statistics,\n                     &rsp_ctx);\n    else\n        dict_foreach(rsp_dict, _heal_volume_add_shd_rsp, &rsp_ctx);\n\nout:\n    return ret;\n}\n\nint\n_status_volume_add_brick_rsp(dict_t *this, char *key, data_t *value, void *data)\n{\n    char new_key[256] = \"\";\n    int keylen;\n    data_t *new_value = 0;\n    glusterd_pr_brick_rsp_conv_t *rsp_ctx = NULL;\n\n    rsp_ctx = data;\n    new_value = data_copy(value);\n    keylen = snprintf(new_key, sizeof(new_key), \"brick%d.%s\", rsp_ctx->count,\n                      key);\n    dict_setn(rsp_ctx->dict, new_key, keylen, new_value);\n\n    return 0;\n}\n\nint\nglusterd_status_volume_brick_rsp(dict_t *rsp_dict, dict_t *op_ctx,\n                                 char **op_errstr)\n{\n    int ret = 0;\n    glusterd_pr_brick_rsp_conv_t rsp_ctx = {0};\n    int32_t count = 0;\n    int index = 0;\n\n    GF_ASSERT(rsp_dict);\n    GF_ASSERT(op_ctx);\n    GF_ASSERT(op_errstr);\n\n    ret = dict_get_int32n(op_ctx, \"count\", SLEN(\"count\"), &count);\n    if (ret) {\n        count = 0;\n    } else {\n        count++;\n    }\n    ret = dict_get_int32n(rsp_dict, \"index\", SLEN(\"index\"), &index);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Couldn't get node index\");\n        goto out;\n    }\n    dict_deln(rsp_dict, \"index\", SLEN(\"index\"));\n\n    rsp_ctx.count = index;\n    rsp_ctx.dict = op_ctx;\n    dict_foreach(rsp_dict, _status_volume_add_brick_rsp, &rsp_ctx);\n    ret = dict_set_int32n(op_ctx, \"count\", SLEN(\"count\"), count);\n\nout:\n    return ret;\n}\n\nint\nglusterd_status_volume_client_list(dict_t *rsp_dict, dict_t *op_ctx,\n                                   char **op_errstr)\n{\n    int ret = 0;\n    char *process = 0;\n    int32_t count = 0;\n    int32_t fuse_count = 0;\n    int32_t gfapi_count = 0;\n    int32_t rebalance_count = 0;\n    int32_t glustershd_count = 0;\n    int32_t quotad_count = 0;\n    int32_t snapd_count = 0;\n    int32_t client_count = 0;\n    int i = 0;\n    char key[64] = \"\";\n\n    GF_ASSERT(rsp_dict);\n    GF_ASSERT(op_ctx);\n    GF_ASSERT(op_errstr);\n\n    ret = dict_get_int32n(rsp_dict, \"clientcount\", SLEN(\"clientcount\"),\n                          &client_count);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_GET_FAILED,\n               \"Couldn't get node index\");\n    }\n    ret = dict_set_int32n(op_ctx, \"client-count\", SLEN(\"client-count\"),\n                          client_count);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Couldn't get node index\");\n        goto out;\n    }\n    for (i = 0; i < client_count; i++) {\n        count = 0;\n        ret = snprintf(key, sizeof(key), \"client%d.name\", i);\n        ret = dict_get_strn(rsp_dict, key, ret, &process);\n        if (ret) {\n            gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_GET_FAILED,\n                   \"Couldn't get client name\");\n            goto out;\n        }\n        ret = dict_add_dynstr_with_alloc(op_ctx, key, process);\n        if (ret) {\n            gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Couldn't set client name\");\n        }\n        if (!strncmp(process, \"fuse\", 4)) {\n            ret = dict_get_int32n(op_ctx, \"fuse-count\", SLEN(\"fuse-count\"),\n                                  &count);\n            if (ret) {\n                gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_GET_FAILED,\n                       \"Couldn't get fuse-count\");\n            }\n            fuse_count++;\n            continue;\n        } else if (!strncmp(process, \"gfapi\", 5)) {\n            ret = dict_get_int32n(op_ctx, \"gfapi-count\", SLEN(\"gfapi-count\"),\n                                  &count);\n            if (ret) {\n                gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_GET_FAILED,\n                       \"Couldn't get gfapi-count\");\n            }\n            gfapi_count++;\n            continue;\n\n        } else if (!strcmp(process, \"rebalance\")) {\n            ret = dict_get_int32n(op_ctx, \"rebalance-count\",\n                                  SLEN(\"rebalance-count\"), &count);\n            if (ret) {\n                gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_GET_FAILED,\n                       \"Couldn't get rebalance-count\");\n            }\n            rebalance_count++;\n            continue;\n        } else if (!strcmp(process, \"glustershd\")) {\n            ret = dict_get_int32n(op_ctx, \"glustershd-count\",\n                                  SLEN(\"glustershd-count\"), &count);\n            if (ret) {\n                gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_GET_FAILED,\n                       \"Couldn't get glustershd-count\");\n            }\n            glustershd_count++;\n            continue;\n        } else if (!strcmp(process, \"quotad\")) {\n            ret = dict_get_int32n(op_ctx, \"quotad-count\", SLEN(\"quotad-count\"),\n                                  &count);\n            if (ret) {\n                gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_GET_FAILED,\n                       \"Couldn't get quotad-count\");\n            }\n            quotad_count++;\n            continue;\n        } else if (!strcmp(process, \"snapd\")) {\n            ret = dict_get_int32n(op_ctx, \"snapd-count\", SLEN(\"snapd-count\"),\n                                  &count);\n            if (ret) {\n                gf_msg(THIS->name, GF_LOG_INFO, 0, GD_MSG_DICT_GET_FAILED,\n                       \"Couldn't get snapd-count\");\n            }\n            snapd_count++;\n        }\n    }\n\n    if (fuse_count) {\n        ret = dict_set_int32n(op_ctx, \"fuse-count\", SLEN(\"fuse-count\"),\n                              fuse_count);\n        if (ret) {\n            gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Couldn't set fuse-count\");\n            goto out;\n        }\n    }\n    if (gfapi_count) {\n        ret = dict_set_int32n(op_ctx, \"gfapi-count\", SLEN(\"gfapi-count\"),\n                              gfapi_count);\n        if (ret) {\n            gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Couldn't set gfapi-count\");\n            goto out;\n        }\n    }\n    if (rebalance_count) {\n        ret = dict_set_int32n(op_ctx, \"rebalance-count\",\n                              SLEN(\"rebalance-count\"), rebalance_count);\n        if (ret) {\n            gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Couldn't set rebalance-count\");\n            goto out;\n        }\n    }\n    if (glustershd_count) {\n        ret = dict_set_int32n(op_ctx, \"glustershd-count\",\n                              SLEN(\"glustershd-count\"), glustershd_count);\n        if (ret) {\n            gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Couldn't set glustershd-count\");\n            goto out;\n        }\n    }\n    if (quotad_count) {\n        ret = dict_set_int32n(op_ctx, \"quotad-count\", SLEN(\"quotad-count\"),\n                              quotad_count);\n        if (ret) {\n            gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Couldn't set quotad-count\");\n            goto out;\n        }\n    }\n    if (snapd_count) {\n        ret = dict_set_int32n(op_ctx, \"snapd-count\", SLEN(\"snapd-count\"),\n                              snapd_count);\n        if (ret) {\n            gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Couldn't set snapd-count\");\n            goto out;\n        }\n    }\n\nout:\n    return ret;\n}\n\nint\nglusterd_rebalance_rsp(dict_t *op_ctx, glusterd_rebalance_t *index, int32_t i)\n{\n    int ret = 0;\n    char key[64] = \"\";\n    int keylen;\n\n    snprintf(key, sizeof(key), \"files-%d\", i);\n    ret = dict_set_uint64(op_ctx, key, index->rebalance_files);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"failed to set file count\");\n\n    snprintf(key, sizeof(key), \"size-%d\", i);\n    ret = dict_set_uint64(op_ctx, key, index->rebalance_data);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"failed to set size of xfer\");\n\n    snprintf(key, sizeof(key), \"lookups-%d\", i);\n    ret = dict_set_uint64(op_ctx, key, index->lookedup_files);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"failed to set lookedup file count\");\n\n    keylen = snprintf(key, sizeof(key), \"status-%d\", i);\n    ret = dict_set_int32n(op_ctx, key, keylen, index->defrag_status);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"failed to set status\");\n\n    snprintf(key, sizeof(key), \"failures-%d\", i);\n    ret = dict_set_uint64(op_ctx, key, index->rebalance_failures);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"failed to set failure count\");\n\n    snprintf(key, sizeof(key), \"skipped-%d\", i);\n    ret = dict_set_uint64(op_ctx, key, index->skipped_files);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"failed to set skipped count\");\n\n    snprintf(key, sizeof(key), \"run-time-%d\", i);\n    ret = dict_set_double(op_ctx, key, index->rebalance_time);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"failed to set run-time\");\n\n    return ret;\n}\n\nint\nglusterd_defrag_volume_node_rsp(dict_t *req_dict, dict_t *rsp_dict,\n                                dict_t *op_ctx)\n{\n    int ret = 0;\n    char *volname = NULL;\n    glusterd_volinfo_t *volinfo = NULL;\n    char key[64] = \"\";\n    int keylen;\n    int32_t i = 0;\n    char buf[64] = \"\";\n    char *node_str = NULL;\n    int32_t cmd = 0;\n\n    GF_ASSERT(req_dict);\n\n    ret = dict_get_strn(req_dict, \"volname\", SLEN(\"volname\"), &volname);\n    if (ret) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Unable to get volume name\");\n        goto out;\n    }\n\n    ret = glusterd_volinfo_find(volname, &volinfo);\n\n    ret = dict_get_int32n(req_dict, \"rebalance-command\",\n                          SLEN(\"rebalance-command\"), &cmd);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, errno, GD_MSG_DICT_GET_FAILED,\n               \"Unable to get the cmd\");\n        goto out;\n    }\n\n    if (rsp_dict) {\n        ret = glusterd_defrag_volume_status_update(volinfo, rsp_dict, cmd);\n    }\n\n    if (!op_ctx) {\n        dict_copy(rsp_dict, op_ctx);\n        goto out;\n    }\n\n    ret = dict_get_int32n(op_ctx, \"count\", SLEN(\"count\"), &i);\n    i++;\n\n    ret = dict_set_int32n(op_ctx, \"count\", SLEN(\"count\"), i);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to set count\");\n\n    snprintf(buf, sizeof(buf), \"%s\", uuid_utoa(MY_UUID));\n    node_str = gf_strdup(buf);\n\n    keylen = snprintf(key, sizeof(key), \"node-uuid-%d\", i);\n    ret = dict_set_dynstrn(op_ctx, key, keylen, node_str);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"failed to set node-uuid\");\n\n    glusterd_rebalance_rsp(op_ctx, &volinfo->rebal, i);\n\n    snprintf(key, sizeof(key), \"time-left-%d\", i);\n    ret = dict_set_uint64(op_ctx, key, volinfo->rebal.time_left);\n    if (ret)\n        gf_msg(THIS->name, GF_LOG_ERROR, errno, GD_MSG_DICT_SET_FAILED,\n               \"failed to set time left\");\n\nout:\n    return ret;\n}\nint32_t\nglusterd_handle_node_rsp(dict_t *req_dict, void *pending_entry,\n                         glusterd_op_t op, dict_t *rsp_dict, dict_t *op_ctx,\n                         char **op_errstr, gd_node_type type)\n{\n    int ret = 0;\n    int32_t cmd = GF_OP_CMD_NONE;\n\n    GF_ASSERT(op_errstr);\n\n    switch (op) {\n        case GD_OP_PROFILE_VOLUME:\n            ret = glusterd_profile_volume_brick_rsp(pending_entry, rsp_dict,\n                                                    op_ctx, op_errstr, type);\n            break;\n        case GD_OP_STATUS_VOLUME:\n            ret = dict_get_int32n(req_dict, \"cmd\", SLEN(\"cmd\"), &cmd);\n            if (!ret && (cmd & GF_CLI_STATUS_CLIENT_LIST)) {\n                ret = glusterd_status_volume_client_list(rsp_dict, op_ctx,\n                                                         op_errstr);\n            } else\n                ret = glusterd_status_volume_brick_rsp(rsp_dict, op_ctx,\n                                                       op_errstr);\n            break;\n        case GD_OP_DEFRAG_BRICK_VOLUME:\n            glusterd_defrag_volume_node_rsp(req_dict, rsp_dict, op_ctx);\n            break;\n\n        case GD_OP_HEAL_VOLUME:\n            ret = glusterd_heal_volume_brick_rsp(req_dict, rsp_dict, op_ctx,\n                                                 op_errstr);\n            break;\n        case GD_OP_SCRUB_STATUS:\n            ret = glusterd_bitrot_volume_node_rsp(op_ctx, rsp_dict);\n\n            break;\n        default:\n            break;\n    }\n\n    gf_msg_debug(\"glusterd\", 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint32_t\nglusterd_set_originator_uuid(dict_t *dict)\n{\n    int ret = -1;\n    uuid_t *originator_uuid = NULL;\n\n    GF_ASSERT(dict);\n\n    originator_uuid = GF_MALLOC(sizeof(uuid_t), gf_common_mt_uuid_t);\n    if (!originator_uuid) {\n        ret = -1;\n        goto out;\n    }\n\n    gf_uuid_copy(*originator_uuid, MY_UUID);\n    ret = dict_set_bin(dict, \"originator_uuid\", originator_uuid,\n                       sizeof(uuid_t));\n    if (ret) {\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to set originator_uuid.\");\n        goto out;\n    }\n\nout:\n    if (ret && originator_uuid)\n        GF_FREE(originator_uuid);\n\n    return ret;\n}\n\n/* Should be used only when an operation is in progress, as that is the only\n * time a lock_owner is set\n */\ngf_boolean_t\nis_origin_glusterd(dict_t *dict)\n{\n    gf_boolean_t ret = _gf_false;\n    uuid_t lock_owner = {\n        0,\n    };\n    uuid_t *originator_uuid = NULL;\n\n    GF_ASSERT(dict);\n\n    ret = dict_get_bin(dict, \"originator_uuid\", (void **)&originator_uuid);\n    if (ret) {\n        /* If not originator_uuid has been set, then the command\n         * has been originated from a glusterd running on older version\n         * Hence fetching the lock owner */\n        ret = glusterd_get_lock_owner(&lock_owner);\n        if (ret) {\n            ret = _gf_false;\n            goto out;\n        }\n        ret = !gf_uuid_compare(MY_UUID, lock_owner);\n    } else\n        ret = !gf_uuid_compare(MY_UUID, *originator_uuid);\n\nout:\n    return ret;\n}\n\nint\nglusterd_generate_and_set_task_id(dict_t *dict, char *key, const int keylen)\n{\n    int ret = -1;\n    uuid_t task_id = {\n        0,\n    };\n    char *uuid_str = NULL;\n    xlator_t *this = NULL;\n\n    GF_ASSERT(dict);\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    gf_uuid_generate(task_id);\n    uuid_str = gf_strdup(uuid_utoa(task_id));\n    if (!uuid_str) {\n        ret = -1;\n        goto out;\n    }\n\n    ret = dict_set_dynstrn(dict, key, keylen, uuid_str);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to set %s in dict\", key);\n        goto out;\n    }\n    gf_msg(this->name, GF_LOG_INFO, 0, GD_MSG_TASK_ID_INFO,\n           \"Generated task-id %s for key %s\", uuid_str, key);\n\nout:\n    if (ret)\n        GF_FREE(uuid_str);\n    return ret;\n}\n\nint\nglusterd_copy_uuid_to_dict(uuid_t uuid, dict_t *dict, char *key,\n                           const int keylen)\n{\n    int ret = -1;\n    char tmp_str[40] = \"\";\n    char *task_id_str = NULL;\n\n    GF_ASSERT(dict);\n    GF_ASSERT(key);\n\n    gf_uuid_unparse(uuid, tmp_str);\n    task_id_str = gf_strdup(tmp_str);\n    if (!task_id_str)\n        return -1;\n\n    ret = dict_set_dynstrn(dict, key, keylen, task_id_str);\n    if (ret) {\n        GF_FREE(task_id_str);\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Error setting uuid in dict with key %s\", key);\n    }\n\n    return 0;\n}\n\nint\n_update_volume_op_versions(dict_t *this, char *key, data_t *value, void *data)\n{\n    int op_version = 0;\n    glusterd_volinfo_t *ctx = NULL;\n    gf_boolean_t enabled = _gf_true;\n    int ret = -1;\n\n    GF_ASSERT(data);\n    ctx = data;\n\n    op_version = glusterd_get_op_version_for_key(key);\n\n    if (gd_is_xlator_option(key) || gd_is_boolean_option(key)) {\n        ret = gf_string2boolean(value->data, &enabled);\n        if (ret)\n            return 0;\n\n        if (!enabled)\n            return 0;\n    }\n\n    if (op_version > ctx->op_version)\n        ctx->op_version = op_version;\n\n    if (gd_is_client_option(key) && (op_version > ctx->client_op_version))\n        ctx->client_op_version = op_version;\n\n    return 0;\n}\n\nvoid\ngd_update_volume_op_versions(glusterd_volinfo_t *volinfo)\n{\n    glusterd_conf_t *conf = NULL;\n    gf_boolean_t ob_enabled = _gf_false;\n\n    GF_ASSERT(volinfo);\n\n    conf = THIS->private;\n    GF_ASSERT(conf);\n\n    /* Reset op-versions to minimum */\n    volinfo->op_version = 1;\n    volinfo->client_op_version = 1;\n\n    dict_foreach(volinfo->dict, _update_volume_op_versions, volinfo);\n\n    /* Special case for open-behind\n     * If cluster op-version >= 2 and open-behind hasn't been explicitly\n     * disabled, volume op-versions must be updated to account for it\n     */\n\n    /* TODO: Remove once we have a general way to update automatically\n     * enabled features\n     */\n    if (conf->op_version >= 2) {\n        ob_enabled = dict_get_str_boolean(volinfo->dict,\n                                          \"performance.open-behind\", _gf_true);\n        if (ob_enabled) {\n            if (volinfo->op_version < 2)\n                volinfo->op_version = 2;\n            if (volinfo->client_op_version < 2)\n                volinfo->client_op_version = 2;\n        }\n    }\n\n    if (volinfo->type == GF_CLUSTER_TYPE_DISPERSE) {\n        if (volinfo->op_version < GD_OP_VERSION_3_6_0)\n            volinfo->op_version = GD_OP_VERSION_3_6_0;\n        if (volinfo->client_op_version < GD_OP_VERSION_3_6_0)\n            volinfo->client_op_version = GD_OP_VERSION_3_6_0;\n    }\n\n    return;\n}\n\nint\nop_version_check(xlator_t *this, int min_op_version, char *msg, int msglen)\n{\n    int ret = 0;\n    glusterd_conf_t *priv = NULL;\n\n    GF_ASSERT(this);\n    GF_ASSERT(msg);\n\n    priv = this->private;\n    if (priv->op_version < min_op_version) {\n        snprintf(msg, msglen,\n                 \"One or more nodes do not support \"\n                 \"the required op-version. Cluster op-version must \"\n                 \"at least be %d.\",\n                 min_op_version);\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_UNSUPPORTED_VERSION, \"%s\",\n               msg);\n        ret = -1;\n    }\n    return ret;\n}\n\n/* A task is committed/completed once the task-id for it is cleared */\ngf_boolean_t\ngd_is_remove_brick_committed(glusterd_volinfo_t *volinfo)\n{\n    GF_ASSERT(volinfo);\n\n    if ((GD_OP_REMOVE_BRICK == volinfo->rebal.op) &&\n        !gf_uuid_is_null(volinfo->rebal.rebalance_id))\n        return _gf_false;\n\n    return _gf_true;\n}\n\ngf_boolean_t\nglusterd_is_status_tasks_op(glusterd_op_t op, dict_t *dict)\n{\n    int ret = -1;\n    uint32_t cmd = GF_CLI_STATUS_NONE;\n    gf_boolean_t is_status_tasks = _gf_false;\n\n    if (op != GD_OP_STATUS_VOLUME)\n        goto out;\n\n    ret = dict_get_uint32(dict, \"cmd\", &cmd);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Failed to get opcode\");\n        goto out;\n    }\n\n    if (cmd & GF_CLI_STATUS_TASKS)\n        is_status_tasks = _gf_true;\n\nout:\n    return is_status_tasks;\n}\n\n/* Tells if rebalance needs to be started for the given volume on the peer\n *\n * Rebalance should be started on a peer only if an involved brick is present on\n * the peer.\n *\n * For a normal rebalance, if any one brick of the given volume is present on\n * the peer, the rebalance process should be started.\n *\n * For a rebalance as part of a remove-brick operation, the rebalance process\n * should be started only if one of the bricks being removed is present on the\n * peer\n */\ngf_boolean_t\ngd_should_i_start_rebalance(glusterd_volinfo_t *volinfo)\n{\n    gf_boolean_t retval = _gf_false;\n    int ret = -1;\n    glusterd_brickinfo_t *brick = NULL;\n    int count = 0;\n    int i = 0;\n    char key[64] = \"\";\n    int keylen;\n    char *brickname = NULL;\n\n    switch (volinfo->rebal.op) {\n        case GD_OP_REBALANCE:\n            cds_list_for_each_entry(brick, &volinfo->bricks, brick_list)\n            {\n                if (gf_uuid_compare(MY_UUID, brick->uuid) == 0) {\n                    retval = _gf_true;\n                    break;\n                }\n            }\n            break;\n        case GD_OP_REMOVE_BRICK:\n            ret = dict_get_int32n(volinfo->rebal.dict, \"count\", SLEN(\"count\"),\n                                  &count);\n            if (ret) {\n                goto out;\n            }\n            for (i = 1; i <= count; i++) {\n                keylen = snprintf(key, sizeof(key), \"brick%d\", i);\n                ret = dict_get_strn(volinfo->rebal.dict, key, keylen,\n                                    &brickname);\n                if (ret)\n                    goto out;\n                ret = glusterd_volume_brickinfo_get_by_brick(brickname, volinfo,\n                                                             &brick, _gf_false);\n                if (ret)\n                    goto out;\n                if (gf_uuid_compare(MY_UUID, brick->uuid) == 0) {\n                    retval = _gf_true;\n                    break;\n                }\n            }\n            break;\n        default:\n            break;\n    }\n\nout:\n    return retval;\n}\n\nint\nglusterd_is_volume_quota_enabled(glusterd_volinfo_t *volinfo)\n{\n    return (glusterd_volinfo_get_boolean(volinfo, VKEY_FEATURES_QUOTA));\n}\n\nint\nglusterd_is_volume_inode_quota_enabled(glusterd_volinfo_t *volinfo)\n{\n    return (glusterd_volinfo_get_boolean(volinfo, VKEY_FEATURES_INODE_QUOTA));\n}\n\nint\nglusterd_is_bitrot_enabled(glusterd_volinfo_t *volinfo)\n{\n    return glusterd_volinfo_get_boolean(volinfo, VKEY_FEATURES_BITROT);\n}\n\nint\nglusterd_validate_and_set_gfid(dict_t *op_ctx, dict_t *req_dict,\n                               char **op_errstr)\n{\n    int ret = -1;\n    int count = 0;\n    int i = 0;\n    int op_code = GF_QUOTA_OPTION_TYPE_NONE;\n    uuid_t uuid1 = {0};\n    uuid_t uuid2 = {\n        0,\n    };\n    char *path = NULL;\n    char key[64] = \"\";\n    int keylen;\n    char *uuid1_str = NULL;\n    char *uuid1_str_dup = NULL;\n    char *uuid2_str = NULL;\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    ret = dict_get_int32n(op_ctx, \"type\", SLEN(\"type\"), &op_code);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Failed to get quota opcode\");\n        goto out;\n    }\n\n    if ((op_code != GF_QUOTA_OPTION_TYPE_LIMIT_USAGE) &&\n        (op_code != GF_QUOTA_OPTION_TYPE_LIMIT_OBJECTS) &&\n        (op_code != GF_QUOTA_OPTION_TYPE_REMOVE) &&\n        (op_code != GF_QUOTA_OPTION_TYPE_REMOVE_OBJECTS)) {\n        ret = 0;\n        goto out;\n    }\n\n    ret = dict_get_strn(op_ctx, \"path\", SLEN(\"path\"), &path);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Failed to get path\");\n        goto out;\n    }\n\n    ret = dict_get_int32n(op_ctx, \"count\", SLEN(\"count\"), &count);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Failed to get count\");\n        goto out;\n    }\n\n    /* If count is 0, fail the command with ENOENT.\n     *\n     * If count is 1, treat gfid0 as the gfid on which the operation\n     * is to be performed and resume the command.\n     *\n     * if count > 1, get the 0th gfid from the op_ctx and,\n     * compare it with the remaining 'count -1' gfids.\n     * If they are found to be the same, set gfid0 in the op_ctx and\n     * resume the operation, else error out.\n     */\n\n    if (count == 0) {\n        gf_asprintf(op_errstr,\n                    \"Failed to get trusted.gfid attribute \"\n                    \"on path %s. Reason : %s\",\n                    path, strerror(ENOENT));\n        ret = -ENOENT;\n        goto out;\n    }\n\n    keylen = snprintf(key, sizeof(key), \"gfid%d\", 0);\n\n    ret = dict_get_strn(op_ctx, key, keylen, &uuid1_str);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Failed to get key '%s'\", key);\n        goto out;\n    }\n\n    gf_uuid_parse(uuid1_str, uuid1);\n\n    for (i = 1; i < count; i++) {\n        keylen = snprintf(key, sizeof(key), \"gfid%d\", i);\n\n        ret = dict_get_strn(op_ctx, key, keylen, &uuid2_str);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n                   \"Failed to get key \"\n                   \"'%s'\",\n                   key);\n            goto out;\n        }\n\n        gf_uuid_parse(uuid2_str, uuid2);\n\n        if (gf_uuid_compare(uuid1, uuid2)) {\n            gf_asprintf(op_errstr,\n                        \"gfid mismatch between %s and \"\n                        \"%s for path %s\",\n                        uuid1_str, uuid2_str, path);\n            ret = -1;\n            goto out;\n        }\n    }\n\n    if (i == count) {\n        uuid1_str_dup = gf_strdup(uuid1_str);\n        if (!uuid1_str_dup) {\n            ret = -1;\n            goto out;\n        }\n\n        ret = dict_set_dynstrn(req_dict, \"gfid\", SLEN(\"gfid\"), uuid1_str_dup);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Failed to set gfid\");\n            GF_FREE(uuid1_str_dup);\n            goto out;\n        }\n    } else {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_ITER_FAIL,\n               \"Failed to iterate through %d\"\n               \" entries in the req dict\",\n               count);\n        ret = -1;\n        goto out;\n    }\n\n    ret = 0;\nout:\n    return ret;\n}\n\nvoid\nglusterd_clean_up_quota_store(glusterd_volinfo_t *volinfo)\n{\n    char voldir[PATH_MAX] = \"\";\n    char quota_confpath[PATH_MAX] = \"\";\n    char cksum_path[PATH_MAX] = \"\";\n    xlator_t *this = NULL;\n    glusterd_conf_t *conf = NULL;\n    int32_t len = 0;\n\n    this = THIS;\n    GF_ASSERT(this);\n    conf = this->private;\n    GF_ASSERT(conf);\n\n    GLUSTERD_GET_VOLUME_DIR(voldir, volinfo, conf);\n\n    len = snprintf(quota_confpath, sizeof(quota_confpath), \"%s/%s\", voldir,\n                   GLUSTERD_VOLUME_QUOTA_CONFIG);\n    if ((len < 0) || (len >= sizeof(quota_confpath))) {\n        quota_confpath[0] = 0;\n    }\n    len = snprintf(cksum_path, sizeof(cksum_path), \"%s/%s\", voldir,\n                   GLUSTERD_VOL_QUOTA_CKSUM_FILE);\n    if ((len < 0) || (len >= sizeof(cksum_path))) {\n        cksum_path[0] = 0;\n    }\n\n    sys_unlink(quota_confpath);\n    sys_unlink(cksum_path);\n\n    gf_store_handle_destroy(volinfo->quota_conf_shandle);\n    volinfo->quota_conf_shandle = NULL;\n    volinfo->quota_conf_version = 0;\n}\n\nint\nglusterd_remove_auxiliary_mount(char *volname)\n{\n    int ret = -1;\n    char mountdir[PATH_MAX] = \"\";\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    GLUSTERD_GET_QUOTA_LIMIT_MOUNT_PATH(mountdir, volname, \"/\");\n    ret = gf_umount_lazy(this->name, mountdir, 1);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_LAZY_UMOUNT_FAIL,\n               \"umount on %s failed, \"\n               \"reason : %s\",\n               mountdir, strerror(errno));\n\n        /* Hide EBADF as it means the mount is already gone */\n        if (errno == EBADF)\n            ret = 0;\n    }\n\n    return ret;\n}\n\n/* Stops the rebalance process of the given volume\n */\nint\ngd_stop_rebalance_process(glusterd_volinfo_t *volinfo)\n{\n    int ret = -1;\n    xlator_t *this = NULL;\n    glusterd_conf_t *conf = NULL;\n    char pidfile[PATH_MAX] = \"\";\n\n    GF_ASSERT(volinfo);\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    conf = this->private;\n    GF_ASSERT(conf);\n\n    GLUSTERD_GET_DEFRAG_PID_FILE(pidfile, volinfo, conf);\n    ret = glusterd_service_stop(\"rebalance\", pidfile, SIGTERM, _gf_true);\n\n    return ret;\n}\n\nrpc_clnt_t *\nglusterd_rpc_clnt_unref(glusterd_conf_t *conf, rpc_clnt_t *rpc)\n{\n    rpc_clnt_t *ret = NULL;\n\n    GF_ASSERT(conf);\n    GF_ASSERT(rpc);\n    synclock_unlock(&conf->big_lock);\n    (void)rpc_clnt_reconnect_cleanup(&rpc->conn);\n    ret = rpc_clnt_unref(rpc);\n    synclock_lock(&conf->big_lock);\n\n    return ret;\n}\n\nint32_t\nglusterd_compare_volume_name(struct cds_list_head *list1,\n                             struct cds_list_head *list2)\n{\n    glusterd_volinfo_t *volinfo1 = NULL;\n    glusterd_volinfo_t *volinfo2 = NULL;\n\n    volinfo1 = cds_list_entry(list1, glusterd_volinfo_t, vol_list);\n    volinfo2 = cds_list_entry(list2, glusterd_volinfo_t, vol_list);\n    return strcmp(volinfo1->volname, volinfo2->volname);\n}\n\nstatic int\ngd_default_synctask_cbk(int ret, call_frame_t *frame, void *opaque)\n{\n    glusterd_conf_t *priv = THIS->private;\n    synclock_unlock(&priv->big_lock);\n    return ret;\n}\n\nvoid\nglusterd_launch_synctask(synctask_fn_t fn, void *opaque)\n{\n    xlator_t *this = NULL;\n    int ret = -1;\n\n    this = THIS;\n\n    /* synclock_lock must be called from within synctask, @fn must call it\n     * before it starts with its work*/\n    ret = synctask_new(this->ctx->env, fn, gd_default_synctask_cbk, NULL,\n                       opaque);\n    if (ret)\n        gf_msg(this->name, GF_LOG_CRITICAL, 0, GD_MSG_SPAWN_SVCS_FAIL,\n               \"Failed to spawn bricks\"\n               \" and other volume related services\");\n}\n\n/*\n * glusterd_enable_default_options enable certain options by default on the\n * given volume based on the cluster op-version. This is called only during\n * volume create or during volume reset\n *\n * @volinfo - volume on which to enable the default options\n * @option  - option to be set to default. If NULL, all possible options will be\n *            set to default\n *\n * Returns 0 on success and -1 on failure. If @option is given, but doesn't\n * match any of the options that could be set, it is a success.\n */\n/*\n * TODO: Make this able to parse the volume-set table to set options\n * Currently, the check and set for any option which wants to make use of this\n * 'framework' needs to be done here manually. This would mean more work for the\n * developer. This little extra work can be avoided if we make it possible to\n * parse the volume-set table to get the options which could be set and their\n * default values\n */\nint\nglusterd_enable_default_options(glusterd_volinfo_t *volinfo, char *option)\n{\n    int ret = 0;\n    xlator_t *this = NULL;\n    glusterd_conf_t *conf = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    GF_VALIDATE_OR_GOTO(this->name, volinfo, out);\n\n    conf = this->private;\n    GF_ASSERT(conf);\n\n#ifdef GD_OP_VERSION_3_8_0\n    if (conf->op_version >= GD_OP_VERSION_3_8_0) {\n        /* nfs.disable needs to be enabled for new volumes with\n         * >= gluster version 3.7 (for now) 3.8 later\n         */\n        if (!option || !strcmp(NFS_DISABLE_MAP_KEY, option)) {\n            ret = dict_set_dynstr_with_alloc(volinfo->dict, NFS_DISABLE_MAP_KEY,\n                                             \"on\");\n            if (ret) {\n                gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_DICT_SET_FAILED,\n                       \"Failed to set option '\" NFS_DISABLE_MAP_KEY\n                       \"' on volume \"\n                       \"%s\",\n                       volinfo->volname);\n                goto out;\n            }\n        }\n    }\n#endif\n\n    if (conf->op_version >= GD_OP_VERSION_3_7_0) {\n        /* Set needed volume options in volinfo->dict\n         * For ex.,\n         *\n         * if (!option || !strcmp(\"someoption\", option) {\n         *      ret = dict_set_str(volinfo->dict, \"someoption\", \"on\");\n         *      ...\n         * }\n         * */\n\n        /* Option 'features.quota-deem-statfs' should not be turned off\n         * with 'gluster volume reset <VOLNAME>', since quota features\n         * can be reset only with 'gluster volume quota <VOLNAME>\n         * disable'.\n         */\n\n        if (!option || !strcmp(\"features.quota-deem-statfs\", option)) {\n            if (glusterd_is_volume_quota_enabled(volinfo)) {\n                ret = dict_set_dynstr_with_alloc(\n                    volinfo->dict, \"features.quota-deem-statfs\", \"on\");\n                if (ret) {\n                    gf_msg(this->name, GF_LOG_ERROR, errno,\n                           GD_MSG_DICT_SET_FAILED,\n                           \"Failed to set option \"\n                           \"'features.quota-deem-statfs' \"\n                           \"on volume %s\",\n                           volinfo->volname);\n                    goto out;\n                }\n            }\n        }\n    }\n    if (conf->op_version >= GD_OP_VERSION_7_0) {\n        ret = dict_set_dynstr_with_alloc(volinfo->dict,\n                                         \"storage.fips-mode-rchecksum\", \"on\");\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, errno, GD_MSG_DICT_SET_FAILED,\n                   \"Failed to set option 'storage.fips-mode-rchecksum' \"\n                   \"on volume %s\",\n                   volinfo->volname);\n            goto out;\n        }\n    }\nout:\n    return ret;\n}\n\nvoid\nglusterd_get_gfproxy_client_volfile(glusterd_volinfo_t *volinfo, char *path,\n                                    int path_len)\n{\n    char workdir[PATH_MAX] = \"\";\n    glusterd_conf_t *priv = THIS->private;\n\n    GLUSTERD_GET_VOLUME_DIR(workdir, volinfo, priv);\n\n    switch (volinfo->transport_type) {\n        case GF_TRANSPORT_TCP:\n        case GF_TRANSPORT_BOTH_TCP_RDMA:\n            snprintf(path, path_len, \"%s/trusted-%s.tcp-gfproxy-fuse.vol\",\n                     workdir, volinfo->volname);\n            break;\n\n        case GF_TRANSPORT_RDMA:\n            snprintf(path, path_len, \"%s/trusted-%s.rdma-gfproxy-fuse.vol\",\n                     workdir, volinfo->volname);\n            break;\n        default:\n            break;\n    }\n}\n\nvoid\nglusterd_get_rebalance_volfile(glusterd_volinfo_t *volinfo, char *path,\n                               int path_len)\n{\n    char workdir[PATH_MAX] = \"\";\n    glusterd_conf_t *priv = THIS->private;\n\n    GLUSTERD_GET_VOLUME_DIR(workdir, volinfo, priv);\n\n    snprintf(path, path_len, \"%s/%s-rebalance.vol\", workdir, volinfo->volname);\n}\n\n/* This function will update the backend file-system\n * type and the mount options in origin and snap brickinfo.\n * This will be later used to perform file-system specific operation\n * during LVM snapshot.\n *\n * @param brick_path       brickpath for which fstype to be found\n * @param brickinfo        brickinfo of snap/origin volume\n * @return 0 on success and -1 on failure\n */\nint\nglusterd_update_mntopts(char *brick_path, glusterd_brickinfo_t *brickinfo)\n{\n    int32_t ret = -1;\n    char *mnt_pt = NULL;\n    char buff[PATH_MAX] = \"\";\n    struct mntent *entry = NULL;\n    struct mntent save_entry = {\n        0,\n    };\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n    GF_ASSERT(brick_path);\n    GF_ASSERT(brickinfo);\n\n    ret = glusterd_get_brick_root(brick_path, &mnt_pt);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_BRICKPATH_ROOT_GET_FAIL,\n               \"getting the root \"\n               \"of the brick (%s) failed \",\n               brick_path);\n        goto out;\n    }\n\n    entry = glusterd_get_mnt_entry_info(mnt_pt, buff, sizeof(buff),\n                                        &save_entry);\n    if (!entry) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_MNTENTRY_GET_FAIL,\n               \"getting the mount entry for \"\n               \"the brick (%s) failed\",\n               brick_path);\n        ret = -1;\n        goto out;\n    }\n\n    if (snprintf(brickinfo->fstype, sizeof(brickinfo->fstype), \"%s\",\n                 entry->mnt_type) >= sizeof(brickinfo->fstype)) {\n        ret = -1;\n        goto out;\n    }\n    (void)snprintf(brickinfo->mnt_opts, sizeof(brickinfo->mnt_opts), \"%s\",\n                   entry->mnt_opts);\n\n    gf_strncpy(brickinfo->mnt_opts, entry->mnt_opts,\n               sizeof(brickinfo->mnt_opts));\n\n    ret = 0;\nout:\n    if (mnt_pt)\n        GF_FREE(mnt_pt);\n    return ret;\n}\n\nint\nglusterd_get_value_for_vme_entry(struct volopt_map_entry *vme, char **def_val)\n{\n    int ret = -1;\n    char *key = NULL;\n    xlator_t *this = NULL;\n    char *descr = NULL;\n    char *local_def_val = NULL;\n    void *dl_handle = NULL;\n    volume_opt_list_t vol_opt_handle = {\n        {0},\n    };\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    CDS_INIT_LIST_HEAD(&vol_opt_handle.list);\n\n    if (_get_xlator_opt_key_from_vme(vme, &key)) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_GET_KEY_FAILED,\n               \"Failed to get %s key from \"\n               \"volume option entry\",\n               vme->key);\n        goto out;\n    }\n\n    ret = xlator_volopt_dynload(vme->voltype, &dl_handle, &vol_opt_handle);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_XLATOR_VOLOPT_DYNLOAD_ERROR,\n               \"xlator_volopt_dynload error \"\n               \"(%d)\",\n               ret);\n        ret = -2;\n        goto cont;\n    }\n\n    ret = xlator_option_info_list(&vol_opt_handle, key, &local_def_val, &descr);\n    if (ret) {\n        /*Swallow Error if option not found*/\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_GET_KEY_FAILED,\n               \"Failed to get option for %s \"\n               \"key\",\n               key);\n        ret = -2;\n        goto cont;\n    }\n    if (!local_def_val)\n        local_def_val = \"(null)\";\n\n    *def_val = gf_strdup(local_def_val);\n\ncont:\n    if (dl_handle) {\n        dlclose(dl_handle);\n        dl_handle = NULL;\n        vol_opt_handle.given_opt = NULL;\n    }\n    if (key) {\n        _free_xlator_opt_key(key);\n        key = NULL;\n    }\n\n    if (ret)\n        goto out;\n\nout:\n    gf_msg_debug(this->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_get_global_max_op_version(rpcsvc_request_t *req, dict_t *ctx,\n                                   int count)\n{\n    int ret = -1;\n    char *def_val = NULL;\n    char dict_key[50] = \"\";\n    int keylen;\n\n    ret = glusterd_mgmt_v3_initiate_all_phases(req, GD_OP_MAX_OPVERSION, ctx);\n\n    ret = dict_get_strn(ctx, \"max-opversion\", SLEN(\"max-opversion\"), &def_val);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Failed to get max-opversion value from\"\n               \" dictionary\");\n        goto out;\n    }\n\n    keylen = sprintf(dict_key, \"key%d\", count);\n    ret = dict_set_nstrn(ctx, dict_key, keylen, GLUSTERD_MAX_OP_VERSION_KEY,\n                         SLEN(GLUSTERD_MAX_OP_VERSION_KEY));\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to set %s in \"\n               \"dictionary\",\n               GLUSTERD_MAX_OP_VERSION_KEY);\n        goto out;\n    }\n\n    sprintf(dict_key, \"value%d\", count);\n    ret = dict_set_dynstr_with_alloc(ctx, dict_key, def_val);\n    if (ret) {\n        gf_msg(THIS->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to set %s for key %s in dictionary\", def_val,\n               GLUSTERD_MAX_OP_VERSION_KEY);\n        goto out;\n    }\n\nout:\n    return ret;\n}\n\nint\nglusterd_get_global_options_for_all_vols(rpcsvc_request_t *req, dict_t *ctx,\n                                         char **op_errstr)\n{\n    int ret = -1;\n    int count = 0;\n    gf_boolean_t all_opts = _gf_false;\n    gf_boolean_t key_found = _gf_false;\n    glusterd_conf_t *priv = NULL;\n    xlator_t *this = NULL;\n    char *key = NULL;\n    char *key_fixed = NULL;\n    char dict_key[50] = \"\";\n    char *def_val = NULL;\n    char err_str[PATH_MAX] = \"\";\n    char *allvolopt = NULL;\n    int32_t i = 0;\n    gf_boolean_t exists = _gf_false;\n    gf_boolean_t need_free = _gf_false;\n\n    this = THIS;\n    GF_VALIDATE_OR_GOTO(THIS->name, this, out);\n\n    priv = this->private;\n    GF_VALIDATE_OR_GOTO(this->name, priv, out);\n\n    GF_VALIDATE_OR_GOTO(this->name, ctx, out);\n\n    ret = dict_get_strn(ctx, \"key\", SLEN(\"key\"), &key);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Failed to get option key from dictionary\");\n        goto out;\n    }\n\n    if (strcasecmp(key, \"all\") == 0)\n        all_opts = _gf_true;\n    else {\n        exists = glusterd_check_option_exists(key, &key_fixed);\n        if (!exists) {\n            snprintf(err_str, sizeof(err_str),\n                     \"Option \"\n                     \"with name: %s does not exist\",\n                     key);\n            gf_msg(this->name, GF_LOG_ERROR, EINVAL, GD_MSG_UNKNOWN_KEY, \"%s\",\n                   err_str);\n            if (key_fixed)\n                snprintf(err_str, sizeof(err_str), \"Did you mean %s?\",\n                         key_fixed);\n            ret = -1;\n            goto out;\n        }\n        if (key_fixed)\n            key = key_fixed;\n    }\n    /* coverity[CONSTANT_EXPRESSION_RESULT] */\n    ALL_VOLUME_OPTION_CHECK(\"all\", _gf_true, key, ret, op_errstr, out);\n\n    for (i = 0; valid_all_vol_opts[i].option; i++) {\n        allvolopt = valid_all_vol_opts[i].option;\n\n        if (!all_opts && strcmp(key, allvolopt) != 0)\n            continue;\n\n        /* Found global option */\n        if (strcmp(allvolopt, GLUSTERD_MAX_OP_VERSION_KEY) == 0) {\n            count++;\n            ret = glusterd_get_global_max_op_version(req, ctx, count);\n            if (ret)\n                goto out;\n            else\n                continue;\n        }\n\n        ret = dict_get_str(priv->opts, allvolopt, &def_val);\n\n        /* If global option isn't set explicitly */\n\n        if (!def_val) {\n            if (!strcmp(allvolopt, GLUSTERD_GLOBAL_OP_VERSION_KEY)) {\n                gf_asprintf(&def_val, \"%d\", priv->op_version);\n                need_free = _gf_true;\n            } else {\n                def_val = valid_all_vol_opts[i].dflt_val;\n            }\n        }\n\n        count++;\n        ret = sprintf(dict_key, \"key%d\", count);\n        ret = dict_set_strn(ctx, dict_key, ret, allvolopt);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Failed to set %s in dictionary\", allvolopt);\n            goto out;\n        }\n\n        sprintf(dict_key, \"value%d\", count);\n        ret = dict_set_dynstr_with_alloc(ctx, dict_key, def_val);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Failed to set %s for key %s in dictionary\", def_val,\n                   allvolopt);\n            goto out;\n        }\n\n        if (need_free) {\n            GF_FREE(def_val);\n            need_free = _gf_false;\n        }\n        def_val = NULL;\n        allvolopt = NULL;\n\n        if (!all_opts)\n            break;\n    }\n\n    ret = dict_set_int32n(ctx, \"count\", SLEN(\"count\"), count);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to set count in dictionary\");\n    }\n\nout:\n    if (ret && !all_opts && !key_found) {\n        if (err_str[0] == 0)\n            snprintf(err_str, sizeof(err_str), \"option %s does not exist\", key);\n        if (*op_errstr == NULL)\n            *op_errstr = gf_strdup(err_str);\n    }\n\n    if (ret && need_free) {\n        GF_FREE(def_val);\n    }\n    GF_FREE(key_fixed);\n    gf_msg_debug(THIS->name, 0, \"Returning %d\", ret);\n\n    return ret;\n}\n\nchar *\nglusterd_get_option_value(glusterd_volinfo_t *volinfo, char *key)\n{\n    char *value = NULL;\n\n    if (!glusterd_is_volume_replicate(volinfo))\n        goto ret;\n\n    if (!strcmp(key, \"performance.client-io-threads\")) {\n        value = \"off\";\n    } else if (!strcmp(key, \"cluster.quorum-type\")) {\n        if (volinfo->replica_count % 2) {\n            value = \"auto\";\n        }\n    }\nret:\n    return value;\n}\n\nint\nglusterd_get_default_val_for_volopt(dict_t *ctx, gf_boolean_t all_opts,\n                                    char *input_key, char *orig_key,\n                                    glusterd_volinfo_t *volinfo,\n                                    char **op_errstr)\n{\n    struct volopt_map_entry *vme = NULL;\n    int ret = -1;\n    int count = 0;\n    xlator_t *this = NULL;\n    char *def_val = NULL;\n    char dict_key[50] = \"\";\n    int keylen;\n    gf_boolean_t key_found = _gf_false;\n    gf_boolean_t get_value_vme = _gf_false;\n    glusterd_conf_t *priv = NULL;\n    dict_t *vol_dict = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    priv = this->private;\n    GF_VALIDATE_OR_GOTO(this->name, priv, out);\n\n    vol_dict = volinfo->dict;\n    GF_VALIDATE_OR_GOTO(this->name, vol_dict, out);\n\n    /* Check whether key is passed for a single option */\n    if (!all_opts && !input_key) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_KEY_NULL, \"Key is NULL\");\n        goto out;\n    }\n\n    for (vme = &glusterd_volopt_map[0]; vme->key; vme++) {\n        if (!all_opts && strcmp(vme->key, input_key))\n            continue;\n        key_found = _gf_true;\n        get_value_vme = _gf_false;\n        /* First look for the key in the priv->opts for global option\n         * and then into vol_dict, if its not present then look for\n         * translator default value */\n        keylen = strlen(vme->key);\n        ret = dict_get_strn(priv->opts, vme->key, keylen, &def_val);\n        if (!def_val) {\n            ret = dict_get_strn(vol_dict, vme->key, keylen, &def_val);\n            if (ret == -ENOENT)\n                def_val = glusterd_get_option_value(volinfo, vme->key);\n            if (!def_val) {\n                if (vme->value) {\n                    def_val = vme->value;\n                } else {\n                    ret = glusterd_get_value_for_vme_entry(vme, &def_val);\n                    get_value_vme = _gf_true;\n                    if (!all_opts && ret)\n                        goto out;\n                    else if (ret == -2)\n                        continue;\n                }\n            }\n        }\n        count++;\n        keylen = sprintf(dict_key, \"key%d\", count);\n        ret = dict_set_strn(ctx, dict_key, keylen, vme->key);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Failed to \"\n                   \"set %s in dictionary\",\n                   vme->key);\n            goto out;\n        }\n        sprintf(dict_key, \"value%d\", count);\n        ret = dict_set_dynstr_with_alloc(ctx, dict_key, def_val);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n                   \"Failed to \"\n                   \"set %s for key %s in dictionary\",\n                   def_val, vme->key);\n            goto out;\n        }\n        if (get_value_vme)\n            GF_FREE(def_val);\n\n        def_val = NULL;\n        if (!all_opts)\n            break;\n    }\n    if (!all_opts && !key_found)\n        goto out;\n\n    ret = dict_set_int32n(ctx, \"count\", SLEN(\"count\"), count);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_SET_FAILED,\n               \"Failed to set count \"\n               \"in dictionary\");\n    }\n\nout:\n    if (ret && !all_opts && !key_found) {\n        char err_str[PATH_MAX];\n        snprintf(err_str, sizeof(err_str), \"option %s does not exist\",\n                 orig_key);\n        *op_errstr = gf_strdup(err_str);\n    }\n    if (def_val)\n        GF_FREE(def_val);\n    gf_msg_debug(this->name, 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_get_volopt_content(dict_t *ctx, gf_boolean_t xml_out)\n{\n    void *dl_handle = NULL;\n    volume_opt_list_t vol_opt_handle = {\n        {0},\n    };\n    char *key = NULL;\n    struct volopt_map_entry *vme = NULL;\n    int ret = -1;\n    char *def_val = NULL;\n    char *descr = NULL;\n    char *output = NULL;\n    size_t size = 0;\n    size_t used = 0;\n#if (HAVE_LIB_XML)\n    xmlTextWriterPtr writer = NULL;\n    xmlBufferPtr buf = NULL;\n\n    if (xml_out) {\n        ret = init_sethelp_xml_doc(&writer, &buf);\n        if (ret) /*logging done in init_xml_lib*/\n            goto out;\n    }\n#endif\n\n    if (!xml_out) {\n        size = 65536;\n        output = GF_MALLOC(size, gf_common_mt_char);\n        if (output == NULL) {\n            ret = -1;\n            goto out;\n        }\n    }\n\n    CDS_INIT_LIST_HEAD(&vol_opt_handle.list);\n\n    for (vme = &glusterd_volopt_map[0]; vme->key; vme++) {\n        if ((vme->type == NO_DOC) || (vme->type == GLOBAL_NO_DOC))\n            continue;\n\n        if (vme->description) {\n            descr = vme->description;\n            def_val = vme->value;\n        } else {\n            if (_get_xlator_opt_key_from_vme(vme, &key)) {\n                gf_msg_debug(\"glusterd\", 0,\n                             \"Failed to \"\n                             \"get %s key from volume option entry\",\n                             vme->key);\n                goto out; /*Some error while getting key*/\n            }\n\n            ret = xlator_volopt_dynload(vme->voltype, &dl_handle,\n                                        &vol_opt_handle);\n\n            if (ret) {\n                gf_msg_debug(\"glusterd\", 0, \"xlator_volopt_dynload error(%d)\",\n                             ret);\n                ret = 0;\n                goto cont;\n            }\n\n            ret = xlator_option_info_list(&vol_opt_handle, key, &def_val,\n                                          &descr);\n            if (ret) { /*Swallow Error i.e if option not found*/\n                gf_msg_debug(\"glusterd\", 0, \"Failed to get option for %s key\",\n                             key);\n                ret = 0;\n                goto cont;\n            }\n        }\n\n        if (xml_out) {\n#if (HAVE_LIB_XML)\n            if (xml_add_volset_element(writer, vme->key, def_val, descr)) {\n                ret = -1;\n                goto cont;\n            }\n#else\n            gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_MODULE_NOT_INSTALLED,\n                   \"Libxml not present\");\n#endif\n        } else {\n            void *tmp;\n            int len;\n\n            do {\n                len = snprintf(output + used, size - used,\n                               \"Option: %s\\nDefault Value: %s\\n\"\n                               \"Description: %s\\n\\n\",\n                               vme->key, def_val, descr);\n                if (len < 0) {\n                    ret = -1;\n                    goto cont;\n                }\n                if (used + len < size) {\n                    used += len;\n                    break;\n                }\n\n                size += (len + 65536) & ~65535;\n                tmp = GF_REALLOC(output, size);\n                if (tmp == NULL) {\n                    ret = -1;\n                    goto cont;\n                }\n                output = tmp;\n            } while (1);\n        }\n    cont:\n        if (dl_handle) {\n            dlclose(dl_handle);\n            dl_handle = NULL;\n            vol_opt_handle.given_opt = NULL;\n        }\n        if (key) {\n            _free_xlator_opt_key(key);\n            key = NULL;\n        }\n        if (ret)\n            goto out;\n    }\n\n#if (HAVE_LIB_XML)\n    if ((xml_out) && (ret = end_sethelp_xml_doc(writer)))\n        goto out;\n#else\n    if (xml_out)\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_MODULE_NOT_INSTALLED,\n               \"Libxml not present\");\n#endif\n\n    if (xml_out) {\n#if (HAVE_LIB_XML)\n        output = gf_strdup((char *)buf->content);\n        if (NULL == output) {\n            ret = -1;\n            goto out;\n        }\n#else\n        gf_msg(\"glusterd\", GF_LOG_ERROR, 0, GD_MSG_MODULE_NOT_INSTALLED,\n               \"Libxml not present\");\n#endif\n    }\n\n    ret = dict_set_dynstrn(ctx, \"help-str\", SLEN(\"help-str\"), output);\n    if (ret >= 0) {\n        output = NULL;\n    }\nout:\n    GF_FREE(output);\n    gf_msg_debug(\"glusterd\", 0, \"Returning %d\", ret);\n    return ret;\n}\n\nint\nglusterd_check_client_op_version_support(char *volname, uint32_t op_version,\n                                         char **op_errstr)\n{\n    int ret = 0;\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n    rpc_transport_t *xprt = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    pthread_mutex_lock(&priv->xprt_lock);\n    list_for_each_entry(xprt, &priv->xprt_list, list)\n    {\n        if ((!strcmp(volname, xprt->peerinfo.volname)) &&\n            ((op_version > xprt->peerinfo.max_op_version) ||\n             (op_version < xprt->peerinfo.min_op_version))) {\n            ret = -1;\n            break;\n        }\n    }\n    pthread_mutex_unlock(&priv->xprt_lock);\n\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_UNSUPPORTED_VERSION,\n               \"Client %s is running with min_op_version as %d and \"\n               \"max_op_version as %d and don't support the required \"\n               \"op-version %d\",\n               xprt->peerinfo.identifier, xprt->peerinfo.min_op_version,\n               xprt->peerinfo.max_op_version, op_version);\n        if (op_errstr)\n            ret = gf_asprintf(op_errstr,\n                              \"One of the client %s is \"\n                              \"running with op-version %d and \"\n                              \"doesn't support the required \"\n                              \"op-version %d. This client needs to\"\n                              \" be upgraded or disconnected \"\n                              \"before running this command again\",\n                              xprt->peerinfo.identifier,\n                              xprt->peerinfo.max_op_version, op_version);\n\n        return -1;\n    }\n    return 0;\n}\n\ngf_boolean_t\nglusterd_have_peers()\n{\n    xlator_t *this = NULL;\n    glusterd_conf_t *conf = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n    conf = this->private;\n    GF_ASSERT(conf);\n\n    return !cds_list_empty(&conf->peers);\n}\n\ngf_boolean_t\nglusterd_is_volume_started(glusterd_volinfo_t *volinfo)\n{\n    GF_ASSERT(volinfo);\n    return (volinfo->status == GLUSTERD_STATUS_STARTED);\n}\n\nint\nglusterd_volume_get_type_str(glusterd_volinfo_t *volinfo, char **voltype_str)\n{\n    int ret = -1;\n    int type = 0;\n\n    GF_VALIDATE_OR_GOTO(THIS->name, volinfo, out);\n\n    type = get_vol_type(volinfo->type, volinfo->dist_leaf_count,\n                        volinfo->brick_count);\n\n    *voltype_str = vol_type_str[type];\n\n    ret = 0;\nout:\n    return ret;\n}\n\nint\nglusterd_volume_get_status_str(glusterd_volinfo_t *volinfo, char *status_str)\n{\n    int ret = -1;\n\n    GF_VALIDATE_OR_GOTO(THIS->name, volinfo, out);\n    GF_VALIDATE_OR_GOTO(THIS->name, status_str, out);\n\n    switch (volinfo->status) {\n        case GLUSTERD_STATUS_NONE:\n            sprintf(status_str, \"%s\", \"Created\");\n            break;\n        case GLUSTERD_STATUS_STARTED:\n            sprintf(status_str, \"%s\", \"Started\");\n            break;\n        case GLUSTERD_STATUS_STOPPED:\n            sprintf(status_str, \"%s\", \"Stopped\");\n            break;\n        default:\n            goto out;\n    }\n    ret = 0;\nout:\n    return ret;\n}\n\nvoid\nglusterd_brick_get_status_str(glusterd_brickinfo_t *brickinfo, char *status_str)\n{\n    GF_VALIDATE_OR_GOTO(THIS->name, brickinfo, out);\n    GF_VALIDATE_OR_GOTO(THIS->name, status_str, out);\n\n    switch (brickinfo->status) {\n        case GF_BRICK_STOPPED:\n            sprintf(status_str, \"%s\", \"Stopped\");\n            break;\n        case GF_BRICK_STARTED:\n            sprintf(status_str, \"%s\", \"Started\");\n            break;\n        case GF_BRICK_STARTING:\n            sprintf(status_str, \"%s\", \"Starting\");\n            break;\n        case GF_BRICK_STOPPING:\n            sprintf(status_str, \"%s\", \"Stopping\");\n            break;\n        default:\n            sprintf(status_str, \"%s\", \"None\");\n            break;\n    }\n\nout:\n    return;\n}\n\nint\nglusterd_volume_get_transport_type_str(glusterd_volinfo_t *volinfo,\n                                       char *transport_type_str)\n{\n    int ret = -1;\n\n    GF_VALIDATE_OR_GOTO(THIS->name, volinfo, out);\n    GF_VALIDATE_OR_GOTO(THIS->name, transport_type_str, out);\n\n    switch (volinfo->transport_type) {\n        case GF_TRANSPORT_TCP:\n            sprintf(transport_type_str, \"%s\", \"tcp\");\n            break;\n        case GF_TRANSPORT_RDMA:\n            sprintf(transport_type_str, \"%s\", \"rdma\");\n            break;\n        case GF_TRANSPORT_BOTH_TCP_RDMA:\n            sprintf(transport_type_str, \"%s\", \"tcp_rdma_both\");\n            break;\n        default:\n            goto out;\n    }\n    ret = 0;\nout:\n    return ret;\n}\n\nint\nglusterd_volume_get_quorum_status_str(glusterd_volinfo_t *volinfo,\n                                      char *quorum_status_str)\n{\n    int ret = -1;\n\n    GF_VALIDATE_OR_GOTO(THIS->name, volinfo, out);\n    GF_VALIDATE_OR_GOTO(THIS->name, quorum_status_str, out);\n\n    switch (volinfo->quorum_status) {\n        case NOT_APPLICABLE_QUORUM:\n            sprintf(quorum_status_str, \"%s\", \"not_applicable\");\n            break;\n        case MEETS_QUORUM:\n            sprintf(quorum_status_str, \"%s\", \"meets\");\n            break;\n        case DOESNT_MEET_QUORUM:\n            sprintf(quorum_status_str, \"%s\", \"does_not_meet\");\n            break;\n        default:\n            goto out;\n    }\n    ret = 0;\nout:\n    return ret;\n}\n\nint\nglusterd_volume_get_rebalance_status_str(glusterd_volinfo_t *volinfo,\n                                         char *rebal_status_str)\n{\n    int ret = -1;\n\n    GF_VALIDATE_OR_GOTO(THIS->name, volinfo, out);\n    GF_VALIDATE_OR_GOTO(THIS->name, rebal_status_str, out);\n\n    switch (volinfo->rebal.defrag_status) {\n        case GF_DEFRAG_STATUS_NOT_STARTED:\n            sprintf(rebal_status_str, \"%s\", \"not_started\");\n            break;\n        case GF_DEFRAG_STATUS_STARTED:\n            sprintf(rebal_status_str, \"%s\", \"started\");\n            break;\n        case GF_DEFRAG_STATUS_STOPPED:\n            sprintf(rebal_status_str, \"%s\", \"stopped\");\n            break;\n        case GF_DEFRAG_STATUS_COMPLETE:\n            sprintf(rebal_status_str, \"%s\", \"completed\");\n            break;\n        case GF_DEFRAG_STATUS_FAILED:\n            sprintf(rebal_status_str, \"%s\", \"failed\");\n            break;\n        case GF_DEFRAG_STATUS_LAYOUT_FIX_STARTED:\n            sprintf(rebal_status_str, \"%s\", \"layout_fix_started\");\n            break;\n        case GF_DEFRAG_STATUS_LAYOUT_FIX_STOPPED:\n            sprintf(rebal_status_str, \"%s\", \"layout_fix_stopped\");\n            break;\n        case GF_DEFRAG_STATUS_LAYOUT_FIX_COMPLETE:\n            sprintf(rebal_status_str, \"%s\", \"layout_fix_complete\");\n            break;\n        case GF_DEFRAG_STATUS_LAYOUT_FIX_FAILED:\n            sprintf(rebal_status_str, \"%s\", \"layout_fix_failed\");\n            break;\n        default:\n            goto out;\n    }\n    ret = 0;\nout:\n    return ret;\n}\n\n/* This function will insert the element to the list in a order.\n   Order will be based on the compare function provided as a input.\n   If element to be inserted in ascending order compare should return:\n    0: if both the arguments are equal\n   >0: if first argument is greater than second argument\n   <0: if first argument is less than second argument */\nvoid\nglusterd_list_add_order(struct cds_list_head *new, struct cds_list_head *head,\n                        int (*compare)(struct cds_list_head *,\n                                       struct cds_list_head *))\n{\n    struct cds_list_head *pos = NULL;\n\n    cds_list_for_each_rcu(pos, head)\n    {\n        if (compare(new, pos) <= 0)\n            break;\n    }\n\n    cds_list_add_rcu(new, rcu_dereference(pos->prev));\n}\n\nint32_t\nglusterd_count_connected_peers(int32_t *count)\n{\n    glusterd_peerinfo_t *peerinfo = NULL;\n    glusterd_conf_t *conf = NULL;\n    int32_t ret = -1;\n    xlator_t *this = NULL;\n\n    this = THIS;\n    GF_VALIDATE_OR_GOTO(\"glusterd\", this, out);\n    conf = this->private;\n    GF_VALIDATE_OR_GOTO(this->name, conf, out);\n    GF_VALIDATE_OR_GOTO(this->name, count, out);\n\n    *count = 1;\n\n    RCU_READ_LOCK;\n    cds_list_for_each_entry_rcu(peerinfo, &conf->peers, uuid_list)\n    {\n        /* Find peer who is connected and is a friend */\n        if ((peerinfo->connected) &&\n            (peerinfo->state.state == GD_FRIEND_STATE_BEFRIENDED)) {\n            (*count)++;\n        }\n    }\n    RCU_READ_UNLOCK;\n\n    ret = 0;\nout:\n    return ret;\n}\n\nchar *\ngd_get_shd_key(int type)\n{\n    char *key = NULL;\n\n    switch (type) {\n        case GF_CLUSTER_TYPE_REPLICATE:\n            key = \"cluster.self-heal-daemon\";\n            break;\n        case GF_CLUSTER_TYPE_DISPERSE:\n            key = \"cluster.disperse-self-heal-daemon\";\n            break;\n        default:\n            key = NULL;\n            break;\n    }\n    return key;\n}\n\nint\nglusterd_handle_replicate_brick_ops(glusterd_volinfo_t *volinfo,\n                                    glusterd_brickinfo_t *brickinfo,\n                                    glusterd_op_t op)\n{\n    int32_t ret = -1;\n    char tmpmount[] = \"/tmp/mntXXXXXX\";\n    char logfile[PATH_MAX] = \"\";\n    int dirty[3] = {\n        0,\n    };\n    runner_t runner = {0};\n    glusterd_conf_t *priv = NULL;\n    char *pid = NULL;\n    char vpath[PATH_MAX] = \"\";\n    char *volfileserver = NULL;\n\n    priv = THIS->private;\n    GF_VALIDATE_OR_GOTO(THIS->name, priv, out);\n\n    dirty[2] = hton32(1);\n\n    ret = sys_lsetxattr(brickinfo->path, GF_AFR_DIRTY, dirty, sizeof(dirty), 0);\n    if (ret == -1) {\n        gf_msg(THIS->name, GF_LOG_ERROR, errno, GD_MSG_SETXATTR_FAIL,\n               \"Failed to set extended\"\n               \" attribute %s : %s.\",\n               GF_AFR_DIRTY, strerror(errno));\n        goto out;\n    }\n\n    if (mkdtemp(tmpmount) == NULL) {\n        gf_msg(THIS->name, GF_LOG_ERROR, errno, GD_MSG_DIR_OP_FAILED,\n               \"failed to create a temporary mount directory.\");\n        ret = -1;\n        goto out;\n    }\n\n    ret = gf_asprintf(&pid, \"%d\", GF_CLIENT_PID_ADD_REPLICA_MOUNT);\n    if (ret < 0)\n        goto out;\n\n    switch (op) {\n        case GD_OP_REPLACE_BRICK:\n            if (dict_get_strn(THIS->options, \"transport.socket.bind-address\",\n                              SLEN(\"transport.socket.bind-address\"),\n                              &volfileserver) != 0)\n                volfileserver = \"localhost\";\n\n            snprintf(logfile, sizeof(logfile),\n                     DEFAULT_LOG_FILE_DIRECTORY \"/%s-replace-brick-mount.log\",\n                     volinfo->volname);\n            if (!*logfile) {\n                ret = -1;\n                goto out;\n            }\n            runinit(&runner);\n            runner_add_args(&runner, SBIN_DIR \"/glusterfs\", \"-s\", volfileserver,\n                            \"--volfile-id\", volinfo->volname, \"--client-pid\",\n                            pid, \"-l\", logfile, tmpmount, NULL);\n            break;\n\n        case GD_OP_ADD_BRICK:\n            snprintf(logfile, sizeof(logfile),\n                     DEFAULT_LOG_FILE_DIRECTORY \"/%s-add-brick-mount.log\",\n                     volinfo->volname);\n            if (!*logfile) {\n                ret = -1;\n                goto out;\n            }\n            ret = glusterd_get_dummy_client_filepath(vpath, volinfo,\n                                                     volinfo->transport_type);\n            if (ret) {\n                gf_log(\"\", GF_LOG_ERROR,\n                       \"Failed to get \"\n                       \"volfile path\");\n                goto out;\n            }\n            runinit(&runner);\n            runner_add_args(&runner, SBIN_DIR \"/glusterfs\", \"--volfile\", vpath,\n                            \"--client-pid\", pid, \"-l\", logfile, tmpmount, NULL);\n            break;\n        default:\n            break;\n    }\n    synclock_unlock(&priv->big_lock);\n    ret = runner_run(&runner);\n\n    if (ret) {\n        gf_log(THIS->name, GF_LOG_ERROR,\n               \"mount command\"\n               \" failed.\");\n        goto lock;\n    }\n    ret = sys_lsetxattr(\n        tmpmount,\n        (op == GD_OP_REPLACE_BRICK) ? GF_AFR_REPLACE_BRICK : GF_AFR_ADD_BRICK,\n        brickinfo->brick_id, sizeof(brickinfo->brick_id), 0);\n    if (ret == -1)\n        gf_msg(THIS->name, GF_LOG_ERROR, errno, GD_MSG_SETXATTR_FAIL,\n               \"Failed to set extended\"\n               \" attribute %s : %s\",\n               (op == GD_OP_REPLACE_BRICK) ? GF_AFR_REPLACE_BRICK\n                                           : GF_AFR_ADD_BRICK,\n               strerror(errno));\n    gf_umount_lazy(THIS->name, tmpmount, 1);\nlock:\n    synclock_lock(&priv->big_lock);\nout:\n    if (pid)\n        GF_FREE(pid);\n    gf_msg_debug(\"glusterd\", 0, \"Returning with ret\");\n    return ret;\n}\n\nvoid\nassign_brick_groups(glusterd_volinfo_t *volinfo)\n{\n    glusterd_brickinfo_t *brickinfo = NULL;\n    uint16_t group_num = 0;\n    int in_group = 0;\n\n    list_for_each_entry(brickinfo, &volinfo->bricks, brick_list)\n    {\n        brickinfo->group = group_num;\n        if (++in_group >= volinfo->replica_count) {\n            in_group = 0;\n            ++group_num;\n        }\n    }\n}\n\nglusterd_brickinfo_t *\nget_last_brick_of_brick_group(glusterd_volinfo_t *volinfo,\n                              glusterd_brickinfo_t *brickinfo)\n{\n    glusterd_brickinfo_t *next = NULL;\n    glusterd_brickinfo_t *last = NULL;\n\n    last = brickinfo;\n    for (;;) {\n        next = list_next(last, &volinfo->bricks, glusterd_brickinfo_t,\n                         brick_list);\n        if (!next || (next->group != brickinfo->group)) {\n            break;\n        }\n        last = next;\n    }\n\n    return last;\n}\n\nint\nglusterd_get_rb_dst_brickinfo(glusterd_volinfo_t *volinfo,\n                              glusterd_brickinfo_t **brickinfo)\n{\n    int32_t ret = -1;\n\n    if (!volinfo || !brickinfo)\n        goto out;\n\n    *brickinfo = volinfo->rep_brick.dst_brick;\n\n    ret = 0;\n\nout:\n    return ret;\n}\n\nint\nrb_update_dstbrick_port(glusterd_brickinfo_t *dst_brickinfo, dict_t *rsp_dict,\n                        dict_t *req_dict)\n{\n    int ret = 0;\n    int dict_ret = 0;\n    int dst_port = 0;\n\n    dict_ret = dict_get_int32n(req_dict, \"dst-brick-port\",\n                               SLEN(\"dst-brick-port\"), &dst_port);\n    if (!dict_ret)\n        dst_brickinfo->port = dst_port;\n\n    if (gf_is_local_addr(dst_brickinfo->hostname)) {\n        gf_msg(\"glusterd\", GF_LOG_INFO, 0, GD_MSG_BRK_PORT_NO_ADD_INDO,\n               \"adding dst-brick port no %d\", dst_port);\n\n        if (rsp_dict) {\n            ret = dict_set_int32n(rsp_dict, \"dst-brick-port\",\n                                  SLEN(\"dst-brick-port\"), dst_brickinfo->port);\n            if (ret) {\n                gf_msg_debug(\"glusterd\", 0,\n                             \"Could not set dst-brick port no in rsp dict\");\n                goto out;\n            }\n        }\n\n        if (req_dict && !dict_ret) {\n            ret = dict_set_int32n(req_dict, \"dst-brick-port\",\n                                  SLEN(\"dst-brick-port\"), dst_brickinfo->port);\n            if (ret) {\n                gf_msg_debug(\"glusterd\", 0, \"Could not set dst-brick port no\");\n                goto out;\n            }\n        }\n    }\nout:\n    return ret;\n}\n\nint\nglusterd_brick_op_prerequisites(dict_t *dict, char **op, glusterd_op_t *gd_op,\n                                char **volname, glusterd_volinfo_t **volinfo,\n                                char **src_brick,\n                                glusterd_brickinfo_t **src_brickinfo,\n                                char *pidfile, char **op_errstr,\n                                dict_t *rsp_dict)\n{\n    int ret = 0;\n    char msg[2048] = \"\";\n    gsync_status_param_t param = {\n        0,\n    };\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n    glusterd_volinfo_t *v = NULL;\n    glusterd_brickinfo_t *b = NULL;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    ret = dict_get_strn(dict, \"operation\", SLEN(\"operation\"), op);\n    if (ret) {\n        gf_msg_debug(this->name, 0, \"dict get on operation type failed\");\n        goto out;\n    }\n\n    *gd_op = gd_cli_to_gd_op(*op);\n    if (*gd_op < 0)\n        goto out;\n\n    ret = dict_get_strn(dict, \"volname\", SLEN(\"volname\"), volname);\n\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Unable to get volume name\");\n        goto out;\n    }\n\n    ret = glusterd_volinfo_find(*volname, volinfo);\n    if (ret) {\n        snprintf(msg, sizeof(msg), \"volume: %s does not exist\", *volname);\n        *op_errstr = gf_strdup(msg);\n        goto out;\n    }\n\n    if (GLUSTERD_STATUS_STARTED != (*volinfo)->status) {\n        ret = -1;\n        snprintf(msg, sizeof(msg), \"volume: %s is not started\", *volname);\n        *op_errstr = gf_strdup(msg);\n        goto out;\n    }\n\n    /* If geo-rep is configured, for this volume, it should be stopped. */\n    param.volinfo = *volinfo;\n    ret = glusterd_check_geo_rep_running(&param, op_errstr);\n    if (ret || param.is_active) {\n        ret = -1;\n        goto out;\n    }\n\n    if (glusterd_is_defrag_on(*volinfo)) {\n        snprintf(msg, sizeof(msg),\n                 \"Volume name %s rebalance is in \"\n                 \"progress. Please retry after completion\",\n                 *volname);\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_OIP_RETRY_LATER, \"%s\", msg);\n        *op_errstr = gf_strdup(msg);\n        ret = -1;\n        goto out;\n    }\n\n    if (dict) {\n        if (!glusterd_is_fuse_available()) {\n            gf_msg(this->name, GF_LOG_ERROR, 0,\n                   (*gd_op == GD_OP_REPLACE_BRICK)\n                       ? GD_MSG_RB_CMD_FAIL\n                       : GD_MSG_RESET_BRICK_CMD_FAIL,\n                   \"Unable to open /dev/\"\n                   \"fuse (%s), %s command failed\",\n                   strerror(errno), gd_rb_op_to_str(*op));\n            snprintf(msg, sizeof(msg),\n                     \"Fuse unavailable\\n \"\n                     \"%s failed\",\n                     gd_rb_op_to_str(*op));\n            *op_errstr = gf_strdup(msg);\n            ret = -1;\n            goto out;\n        }\n    }\n\n    ret = dict_get_strn(dict, \"src-brick\", SLEN(\"src-brick\"), src_brick);\n\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Unable to get src brick\");\n        goto out;\n    }\n\n    gf_msg_debug(this->name, 0, \"src brick=%s\", *src_brick);\n\n    ret = glusterd_volume_brickinfo_get_by_brick(*src_brick, *volinfo,\n                                                 src_brickinfo, _gf_false);\n    if (ret) {\n        snprintf(msg, sizeof(msg),\n                 \"brick: %s does not exist in \"\n                 \"volume: %s\",\n                 *src_brick, *volname);\n        *op_errstr = gf_strdup(msg);\n        goto out;\n    }\n\n    if (gf_is_local_addr((*src_brickinfo)->hostname)) {\n        gf_msg_debug(this->name, 0, \"I AM THE SOURCE HOST\");\n        if ((*src_brickinfo)->port && rsp_dict) {\n            ret = dict_set_int32n(rsp_dict, \"src-brick-port\",\n                                  SLEN(\"src-brick-port\"),\n                                  (*src_brickinfo)->port);\n            if (ret) {\n                gf_msg_debug(this->name, 0, \"Could not set src-brick-port=%d\",\n                             (*src_brickinfo)->port);\n            }\n        }\n\n        v = *volinfo;\n        b = *src_brickinfo;\n        GLUSTERD_GET_BRICK_PIDFILE(pidfile, v, b, priv);\n    }\n\n    ret = 0;\nout:\n    return ret;\n}\n\nint\nglusterd_get_dst_brick_info(char **dst_brick, char *volname, char **op_errstr,\n                            glusterd_brickinfo_t **dst_brickinfo, char **host,\n                            dict_t *dict, char **dup_dstbrick)\n{\n    char *path = NULL;\n    char *c = NULL;\n    char msg[2048] = \"\";\n    xlator_t *this = NULL;\n    glusterd_conf_t *priv = NULL;\n    int ret = 0;\n\n    this = THIS;\n    GF_ASSERT(this);\n\n    priv = this->private;\n    GF_ASSERT(priv);\n\n    ret = dict_get_strn(dict, \"dst-brick\", SLEN(\"dst-brick\"), dst_brick);\n\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_DICT_GET_FAILED,\n               \"Unable to get dest brick.\");\n        goto out;\n    }\n\n    gf_msg_debug(this->name, 0, \"dst brick=%s\", *dst_brick);\n\n    if (!glusterd_store_is_valid_brickpath(volname, *dst_brick) ||\n        !glusterd_is_valid_volfpath(volname, *dst_brick)) {\n        snprintf(msg, sizeof(msg),\n                 \"brick path %s is too \"\n                 \"long.\",\n                 *dst_brick);\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_BRKPATH_TOO_LONG, \"%s\", msg);\n        *op_errstr = gf_strdup(msg);\n\n        ret = -1;\n        goto out;\n    }\n\n    *dup_dstbrick = gf_strdup(*dst_brick);\n    if (!*dup_dstbrick) {\n        ret = -1;\n        goto out;\n    }\n\n    /*\n     * IPv4 address contains '.' and ipv6 addresses contains ':'\n     * So finding the last occurrence of ':' to\n     * mark the start of brick path\n     */\n    c = strrchr(*dup_dstbrick, ':');\n    if (c != NULL) {\n        c[0] = '\\0';\n        *host = *dup_dstbrick;\n        path = c++;\n    }\n\n    if (!host || !path) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, GD_MSG_BAD_FORMAT,\n               \"dst brick %s is not of \"\n               \"form <HOSTNAME>:<export-dir>\",\n               *dst_brick);\n        ret = -1;\n        goto out;\n    }\n\n    ret = glusterd_brickinfo_new_from_brick(*dst_brick, dst_brickinfo, _gf_true,\n                                            NULL);\n    if (ret)\n        goto out;\n\n    ret = 0;\nout:\n    return ret;\n}\n\nint\nglusterd_get_volinfo_from_brick(char *brick, glusterd_volinfo_t **volinfo)\n{\n    int ret = -1;\n    xlator_t *this = NULL;\n    glusterd_conf_t *conf = NULL;\n    glusterd_volinfo_t *voliter = NULL;\n    glusterd_brickinfo_t *brickiter = NULL;\n    glusterd_snap_t *snap = NULL;\n\n    this = THIS;\n    GF_VALIDATE_OR_GOTO(\"glusterd\", this, out);\n    conf = this->private;\n    GF_VALIDATE_OR_GOTO(this->name, conf, out);\n\n    /* First check for normal volumes */\n    cds_list_for_each_entry(voliter, &conf->volumes, vol_list)\n    {\n        cds_list_for_each_entry(brickiter, &voliter->bricks, brick_list)\n        {\n            if (gf_uuid_compare(brickiter->uuid, MY_UUID))\n                continue;\n            if (!strcmp(brickiter->path, brick)) {\n                *volinfo = voliter;\n                return 0;\n            }\n        }\n    }\n    /* In case normal volume is not found, check for snapshot volumes */\n    cds_list_for_each_entry(snap, &conf->snapshots, snap_list)\n    {\n        cds_list_for_each_entry(voliter, &snap->volumes, vol_list)\n        {\n            cds_list_for_each_entry(brickiter, &voliter->bricks, brick_list)\n            {\n                if (gf_uuid_compare(brickiter->uuid, MY_UUID))\n                    continue;\n                if (!strcmp(brickiter->path, brick)) {\n                    *volinfo = voliter;\n                    return 0;\n                }\n            }\n        }\n    }\n\nout:\n    return ret;\n}\n\nglusterd_op_t\ngd_cli_to_gd_op(char *cli_op)\n{\n    if (!strcmp(cli_op, \"GF_RESET_OP_START\") ||\n        !strcmp(cli_op, \"GF_RESET_OP_COMMIT\") ||\n        !strcmp(cli_op, \"GF_RESET_OP_COMMIT_FORCE\")) {\n        return GD_OP_RESET_BRICK;\n    }\n\n    if (!strcmp(cli_op, \"GF_REPLACE_OP_COMMIT_FORCE\"))\n        return GD_OP_REPLACE_BRICK;\n\n    return -1;\n}\n\nchar *\ngd_rb_op_to_str(char *op)\n{\n    if (!strcmp(op, \"GF_RESET_OP_START\"))\n        return \"reset-brick start\";\n    if (!strcmp(op, \"GF_RESET_OP_COMMIT\"))\n        return \"reset-brick commit\";\n    if (!strcmp(op, \"GF_RESET_OP_COMMIT_FORCE\"))\n        return \"reset-brick commit force\";\n    if (!strcmp(op, \"GF_REPLACE_OP_COMMIT_FORCE\"))\n        return \"replace-brick commit force\";\n    return NULL;\n}\n\ngf_boolean_t\nglusterd_is_profile_on(glusterd_volinfo_t *volinfo)\n{\n    int ret = -1;\n    gf_boolean_t is_latency_on = _gf_false;\n    gf_boolean_t is_fd_stats_on = _gf_false;\n\n    GF_ASSERT(volinfo);\n\n    ret = glusterd_volinfo_get_boolean(volinfo, VKEY_DIAG_CNT_FOP_HITS);\n    if (ret != -1)\n        is_fd_stats_on = ret;\n    ret = glusterd_volinfo_get_boolean(volinfo, VKEY_DIAG_LAT_MEASUREMENT);\n    if (ret != -1)\n        is_latency_on = ret;\n    if ((_gf_true == is_latency_on) && (_gf_true == is_fd_stats_on))\n        return _gf_true;\n    return _gf_false;\n}\n\nint32_t\nglusterd_add_shd_to_dict(glusterd_volinfo_t *volinfo, dict_t *dict,\n                         int32_t count)\n{\n    int ret = -1;\n    int32_t pid = -1;\n    int32_t brick_online = -1;\n    char key[64] = {0};\n    int keylen;\n    char *pidfile = NULL;\n    xlator_t *this = NULL;\n    char *uuid_str = NULL;\n\n    this = THIS;\n    GF_VALIDATE_OR_GOTO(THIS->name, this, out);\n\n    GF_VALIDATE_OR_GOTO(this->name, volinfo, out);\n    GF_VALIDATE_OR_GOTO(this->name, dict, out);\n\n    keylen = snprintf(key, sizeof(key), \"brick%d.hostname\", count);\n    ret = dict_set_nstrn(dict, key, keylen, \"Self-heal Daemon\",\n                         SLEN(\"Self-heal Daemon\"));\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"brick%d.path\", count);\n    uuid_str = gf_strdup(uuid_utoa(MY_UUID));\n    if (!uuid_str) {\n        ret = -1;\n        goto out;\n    }\n    ret = dict_set_dynstrn(dict, key, keylen, uuid_str);\n    if (ret)\n        goto out;\n    uuid_str = NULL;\n\n    /* shd doesn't have a port. but the cli needs a port key with\n     * a zero value to parse.\n     * */\n\n    keylen = snprintf(key, sizeof(key), \"brick%d.port\", count);\n    ret = dict_set_int32n(dict, key, keylen, 0);\n    if (ret)\n        goto out;\n\n    pidfile = volinfo->shd.svc.proc.pidfile;\n\n    brick_online = gf_is_service_running(pidfile, &pid);\n\n    /* If shd is not running, then don't print the pid */\n    if (!brick_online)\n        pid = -1;\n    keylen = snprintf(key, sizeof(key), \"brick%d.pid\", count);\n    ret = dict_set_int32n(dict, key, keylen, pid);\n    if (ret)\n        goto out;\n\n    keylen = snprintf(key, sizeof(key), \"brick%d.status\", count);\n    ret = dict_set_int32n(dict, key, keylen, brick_online);\n\nout:\n    if (uuid_str)\n        GF_FREE(uuid_str);\n    if (ret)\n        gf_msg(this ? this->name : \"glusterd\", GF_LOG_ERROR, 0,\n               GD_MSG_DICT_SET_FAILED,\n               \"Returning %d. adding values to dict failed\", ret);\n\n    return ret;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-glusterfs-7.2-7bafu5wprzvvhnabtlwumqs3qxil5tgh/spack-src/xlators/features/cloudsync/src/cloudsync.c": "/*\n *   Copyright (c) 2018 Red Hat, Inc. <http://www.redhat.com>\n *   This file is part of GlusterFS.\n *\n *   This file is licensed to you under your choice of the GNU Lesser\n *   General Public License, version 3 or any later version (LGPLv3 or\n *   later), or the GNU General Public License, version 2 (GPLv2), in all\n *   cases as published by the Free Software Foundation.\n */\n\n#include <glusterfs/glusterfs.h>\n#include <glusterfs/xlator.h>\n#include <glusterfs/defaults.h>\n#include \"cloudsync.h\"\n#include \"cloudsync-common.h\"\n#include <glusterfs/call-stub.h>\n#include \"cloudsync-autogen-fops.h\"\n\n#include <string.h>\n#include <dlfcn.h>\n\nvoid\ncs_cleanup_private(cs_private_t *priv)\n{\n    if (priv) {\n        if (priv->stores) {\n            priv->stores->fini(priv->stores->config);\n            GF_FREE(priv->stores);\n        }\n\n        pthread_spin_destroy(&priv->lock);\n        GF_FREE(priv);\n    }\n\n    return;\n}\n\nstruct cs_plugin plugins[] = {\n    {.name = \"cloudsyncs3\",\n     .library = \"cloudsyncs3.so\",\n     .description = \"cloudsync s3 store.\"},\n#if defined(__linux__)\n    {.name = \"cvlt\",\n     .library = \"cloudsynccvlt.so\",\n     .description = \"Commvault content store.\"},\n#endif\n    {.name = NULL},\n};\n\nint\ncs_init(xlator_t *this)\n{\n    cs_private_t *priv = NULL;\n    gf_boolean_t per_vol = _gf_false;\n    int ret = 0;\n    char *libpath = NULL;\n    store_methods_t *store_methods = NULL;\n    void *handle = NULL;\n    char *temp_str = NULL;\n    int index = 0;\n    char *libname = NULL;\n\n    priv = GF_CALLOC(1, sizeof(*priv), gf_cs_mt_cs_private_t);\n    if (!priv) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"insufficient memory\");\n        goto out;\n    }\n\n    priv->this = this;\n\n    this->local_pool = mem_pool_new(cs_local_t, 512);\n    if (!this->local_pool) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, ENOMEM, \"initialisation failed.\");\n        ret = -1;\n        goto out;\n    }\n\n    this->private = priv;\n\n    GF_OPTION_INIT(\"cloudsync-remote-read\", priv->remote_read, bool, out);\n\n    /* temp workaround. Should be configurable through glusterd*/\n    per_vol = _gf_true;\n\n    if (per_vol) {\n        if (dict_get_str(this->options, \"cloudsync-storetype\", &temp_str) ==\n            0) {\n            for (index = 0; plugins[index].name; index++) {\n                if (!strcmp(temp_str, plugins[index].name)) {\n                    libname = plugins[index].library;\n                    break;\n                }\n            }\n        } else {\n            ret = 0;\n        }\n\n        if (!libname) {\n            gf_msg(this->name, GF_LOG_WARNING, 0, 0, \"no plugin enabled\");\n            ret = 0;\n            goto out;\n        }\n\n        ret = gf_asprintf(&libpath, \"%s/%s\", CS_PLUGINDIR, libname);\n        if (ret == -1) {\n            goto out;\n        }\n\n        handle = dlopen(libpath, RTLD_NOW);\n        if (!handle) {\n            gf_msg(this->name, GF_LOG_WARNING, 0, 0,\n                   \"could not \"\n                   \"load the required library. %s\",\n                   dlerror());\n            ret = 0;\n            goto out;\n        } else {\n            gf_msg(this->name, GF_LOG_INFO, 0, 0,\n                   \"loading library:%s successful\", libname);\n        }\n\n        priv->stores = GF_CALLOC(1, sizeof(struct cs_remote_stores),\n                                 gf_cs_mt_cs_remote_stores_t);\n        if (!priv->stores) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n                   \"Could not \"\n                   \"allocate memory for priv->stores\");\n            ret = -1;\n            goto out;\n        }\n\n        (void)dlerror(); /* clear out previous error string */\n\n        /* load library methods */\n        store_methods = (store_methods_t *)dlsym(handle, \"store_ops\");\n        if (!store_methods) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"null store_methods %s\",\n                   dlerror());\n            ret = -1;\n            goto out;\n        }\n\n        (void)dlerror();\n\n        if (priv->remote_read) {\n            priv->stores->rdfop = store_methods->fop_remote_read;\n            if (!priv->stores->rdfop) {\n                gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n                       \"failed to get\"\n                       \" read fop %s\",\n                       dlerror());\n                ret = -1;\n                goto out;\n            }\n        }\n\n        priv->stores->dlfop = store_methods->fop_download;\n        if (!priv->stores->dlfop) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n                   \"failed to get\"\n                   \" download fop %s\",\n                   dlerror());\n            ret = -1;\n            goto out;\n        }\n\n        (void)dlerror();\n        priv->stores->init = store_methods->fop_init;\n        if (!priv->stores->init) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n                   \"failed to get\"\n                   \" init fop %s\",\n                   dlerror());\n            ret = -1;\n            goto out;\n        }\n\n        (void)dlerror();\n        priv->stores->reconfigure = store_methods->fop_reconfigure;\n        if (!priv->stores->reconfigure) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n                   \"failed to get\"\n                   \" reconfigure fop %s\",\n                   dlerror());\n            ret = -1;\n            goto out;\n        }\n\n        priv->stores->handle = handle;\n\n        priv->stores->config = (void *)((priv->stores->init)(this));\n        if (!priv->stores->config) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"null config\");\n            ret = -1;\n            goto out;\n        }\n    }\n\n    ret = 0;\n\nout:\n    if (ret == -1) {\n        if (this->local_pool) {\n            mem_pool_destroy(this->local_pool);\n            this->local_pool = NULL;\n        }\n\n        cs_cleanup_private(priv);\n\n        if (handle) {\n            dlclose(handle);\n        }\n    }\n\n    GF_FREE(libpath);\n\n    return ret;\n}\n\nint\ncs_forget(xlator_t *this, inode_t *inode)\n{\n    uint64_t ctx_int = 0;\n    cs_inode_ctx_t *ctx = NULL;\n\n    inode_ctx_del(inode, this, &ctx_int);\n    if (!ctx_int)\n        return 0;\n\n    ctx = (cs_inode_ctx_t *)(uintptr_t)ctx_int;\n\n    GF_FREE(ctx);\n    return 0;\n}\n\nvoid\ncs_fini(xlator_t *this)\n{\n    cs_private_t *priv = NULL;\n    priv = this->private;\n\n    cs_cleanup_private(priv);\n}\n\nint\ncs_reconfigure(xlator_t *this, dict_t *options)\n{\n    cs_private_t *priv = NULL;\n    int ret = 0;\n\n    priv = this->private;\n    if (!priv) {\n        ret = -1;\n        goto out;\n    }\n\n    GF_OPTION_RECONF(\"cloudsync-remote-read\", priv->remote_read, options, bool,\n                     out);\n\n    /* needed only for per volume configuration*/\n    ret = priv->stores->reconfigure(this, options);\n\nout:\n    return ret;\n}\n\nint32_t\ncs_mem_acct_init(xlator_t *this)\n{\n    int ret = -1;\n\n    GF_VALIDATE_OR_GOTO(\"cloudsync\", this, out);\n\n    ret = xlator_mem_acct_init(this, gf_cs_mt_end + 1);\n\n    if (ret != 0) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"Memory accounting init failed\");\n        return ret;\n    }\nout:\n    return ret;\n}\n\nint32_t\ncs_readdirp(call_frame_t *frame, xlator_t *this, fd_t *fd, size_t size,\n            off_t off, dict_t *xdata)\n{\n    int ret = 0;\n    int op_errno = ENOMEM;\n\n    if (!xdata) {\n        xdata = dict_new();\n        if (!xdata) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, ENOMEM,\n                   \"failed to create \"\n                   \"dict\");\n            goto err;\n        }\n    }\n\n    ret = dict_set_uint32(xdata, GF_CS_OBJECT_STATUS, 1);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n               \"dict_set failed key:\"\n               \" %s\",\n               GF_CS_OBJECT_STATUS);\n        goto err;\n    }\n\n    STACK_WIND(frame, default_readdirp_cbk, FIRST_CHILD(this),\n               FIRST_CHILD(this)->fops->readdirp, fd, size, off, xdata);\n    return 0;\nerr:\n    STACK_UNWIND_STRICT(readdirp, frame, -1, op_errno, NULL, NULL);\n    return 0;\n}\n\nint32_t\ncs_truncate_cbk(call_frame_t *frame, void *cookie, xlator_t *this,\n                int32_t op_ret, int32_t op_errno, struct iatt *prebuf,\n                struct iatt *postbuf, dict_t *xdata)\n{\n    cs_local_t *local = NULL;\n    int ret = 0;\n    uint64_t val = 0;\n\n    local = frame->local;\n\n    local->call_cnt++;\n\n    if (op_ret == -1) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"truncate failed\");\n        ret = dict_get_uint64(xdata, GF_CS_OBJECT_STATUS, &val);\n        if (ret == 0) {\n            if (val == GF_CS_ERROR) {\n                gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n                       \"could not get file state, unwinding\");\n                op_ret = -1;\n                op_errno = EIO;\n                goto unwind;\n            } else {\n                __cs_inode_ctx_update(this, local->loc.inode, val);\n                gf_msg(this->name, GF_LOG_INFO, 0, 0, \" state = %\" PRIu64, val);\n\n                if (local->call_cnt == 1 &&\n                    (val == GF_CS_REMOTE || val == GF_CS_DOWNLOADING)) {\n                    gf_msg(this->name, GF_LOG_WARNING, 0, 0,\n                           \"will repair and download \"\n                           \"the file, current state : %\" PRIu64,\n                           val);\n                    goto repair;\n                } else {\n                    gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n                           \"second truncate, Unwinding\");\n                    goto unwind;\n                }\n            }\n        } else {\n            gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n                   \"file state \"\n                   \"could not be figured, unwinding\");\n            goto unwind;\n        }\n    } else {\n        /* successful write => file is local */\n        __cs_inode_ctx_update(this, local->loc.inode, GF_CS_LOCAL);\n        gf_msg(this->name, GF_LOG_INFO, 0, 0,\n               \"state : GF_CS_LOCAL\"\n               \", truncate successful\");\n\n        goto unwind;\n    }\n\nrepair:\n    ret = locate_and_execute(frame);\n    if (ret) {\n        goto unwind;\n    }\n\n    return 0;\n\nunwind:\n    CS_STACK_UNWIND(truncate, frame, op_ret, op_errno, prebuf, postbuf, xdata);\n    return 0;\n}\n\nint32_t\ncs_truncate(call_frame_t *frame, xlator_t *this, loc_t *loc, off_t offset,\n            dict_t *xdata)\n{\n    int op_errno = -1;\n    cs_local_t *local = NULL;\n    int ret = 0;\n    cs_inode_ctx_t *ctx = NULL;\n    gf_cs_obj_state state = -1;\n\n    VALIDATE_OR_GOTO(frame, err);\n    VALIDATE_OR_GOTO(this, err);\n    VALIDATE_OR_GOTO(loc, err);\n\n    local = cs_local_init(this, frame, loc, NULL, GF_FOP_TRUNCATE);\n    if (!local) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"local init failed\");\n        op_errno = ENOMEM;\n        goto err;\n    }\n\n    __cs_inode_ctx_get(this, loc->inode, &ctx);\n\n    if (ctx)\n        state = __cs_get_file_state(this, loc->inode, ctx);\n    else\n        state = GF_CS_LOCAL;\n\n    local->xattr_req = xdata ? dict_ref(xdata) : (xdata = dict_new());\n\n    ret = dict_set_uint32(local->xattr_req, GF_CS_OBJECT_STATUS, 1);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n               \"dict_set failed key:\"\n               \" %s\",\n               GF_CS_OBJECT_STATUS);\n        goto err;\n    }\n\n    local->stub = fop_truncate_stub(frame, cs_resume_truncate, loc, offset,\n                                    xdata);\n    if (!local->stub) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"insufficient memory\");\n        op_errno = ENOMEM;\n        goto err;\n    }\n\n    if (state == GF_CS_LOCAL) {\n        STACK_WIND(frame, cs_truncate_cbk, FIRST_CHILD(this),\n                   FIRST_CHILD(this)->fops->truncate, loc, offset, xdata);\n\n    } else {\n        local->call_cnt++;\n        ret = locate_and_execute(frame);\n        if (ret) {\n            op_errno = ENOMEM;\n            goto err;\n        }\n    }\n\n    return 0;\nerr:\n    CS_STACK_UNWIND(truncate, frame, -1, op_errno, NULL, NULL, NULL);\n    return 0;\n}\n\nint32_t\ncs_statfs_cbk(call_frame_t *frame, void *cookie, xlator_t *this, int32_t op_ret,\n              int32_t op_errno, struct statvfs *buf, dict_t *xdata)\n{\n    STACK_UNWIND_STRICT(statfs, frame, op_ret, op_errno, buf, xdata);\n    return 0;\n}\n\nint32_t\ncs_statfs(call_frame_t *frame, xlator_t *this, loc_t *loc, dict_t *xdata)\n{\n    STACK_WIND(frame, cs_statfs_cbk, FIRST_CHILD(this),\n               FIRST_CHILD(this)->fops->statfs, loc, xdata);\n    return 0;\n}\n\nint32_t\ncs_getxattr_cbk(call_frame_t *frame, void *cookie, xlator_t *this,\n                int32_t op_ret, int32_t op_errno, dict_t *dict, dict_t *xdata)\n{\n    STACK_UNWIND_STRICT(getxattr, frame, op_ret, op_errno, dict, xdata);\n    return 0;\n}\n\nint32_t\ncs_getxattr(call_frame_t *frame, xlator_t *this, loc_t *loc, const char *name,\n            dict_t *xattr_req)\n{\n    STACK_WIND(frame, cs_getxattr_cbk, FIRST_CHILD(this),\n               FIRST_CHILD(this)->fops->getxattr, loc, name, xattr_req);\n    return 0;\n}\n\nint32_t\ncs_setxattr_cbk(call_frame_t *frame, void *cookie, xlator_t *this,\n                int32_t op_ret, int32_t op_errno, dict_t *xdata)\n{\n    cs_local_t *local = NULL;\n\n    local = frame->local;\n\n    if (local->locked)\n        cs_inodelk_unlock(frame);\n\n    CS_STACK_UNWIND(setxattr, frame, op_ret, op_errno, xdata);\n\n    return 0;\n}\n\nint32_t\ncs_setxattr(call_frame_t *frame, xlator_t *this, loc_t *loc, dict_t *dict,\n            int32_t flags, dict_t *xdata)\n{\n    data_t *tmp = NULL;\n    cs_local_t *local = NULL;\n    int ret = 0;\n\n    VALIDATE_OR_GOTO(frame, err);\n    VALIDATE_OR_GOTO(this, err);\n\n    local = cs_local_init(this, frame, loc, NULL, GF_FOP_SETXATTR);\n    if (!local) {\n        ret = -1;\n        goto err;\n    }\n\n    local->xattr_req = xdata ? dict_ref(xdata) : (xdata = dict_new());\n\n    tmp = dict_get(dict, GF_CS_OBJECT_UPLOAD_COMPLETE);\n    if (tmp) {\n        /* Value of key should be the atime */\n        local->stub = fop_setxattr_stub(frame, cs_resume_setxattr, loc, dict,\n                                        flags, xdata);\n\n        if (!local->stub)\n            goto err;\n\n        ret = locate_and_execute(frame);\n        if (ret) {\n            goto err;\n        }\n\n        return 0;\n    }\n\n    STACK_WIND(frame, cs_setxattr_cbk, FIRST_CHILD(this),\n               FIRST_CHILD(this)->fops->setxattr, loc, dict, flags, xdata);\n    return 0;\nerr:\n    CS_STACK_UNWIND(setxattr, frame, -1, errno, NULL);\n    return 0;\n}\n\nint32_t\ncs_fgetxattr_cbk(call_frame_t *frame, void *cookie, xlator_t *this,\n                 int32_t op_ret, int32_t op_errno, dict_t *dict, dict_t *xdata)\n{\n    STACK_UNWIND_STRICT(fgetxattr, frame, op_ret, op_errno, dict, xdata);\n    return 0;\n}\n\nint32_t\ncs_fgetxattr(call_frame_t *frame, xlator_t *this, fd_t *fd, const char *name,\n             dict_t *xdata)\n{\n    STACK_WIND(frame, cs_fgetxattr_cbk, FIRST_CHILD(this),\n               FIRST_CHILD(this)->fops->fgetxattr, fd, name, xdata);\n    return 0;\n}\n\nint32_t\ncs_fsetxattr_cbk(call_frame_t *frame, void *cookie, xlator_t *this,\n                 int32_t op_ret, int32_t op_errno, dict_t *xdata)\n{\n    STACK_UNWIND_STRICT(fsetxattr, frame, op_ret, op_errno, xdata);\n    return 0;\n}\n\nint32_t\ncs_fsetxattr(call_frame_t *frame, xlator_t *this, fd_t *fd, dict_t *dict,\n             int32_t flags, dict_t *xdata)\n{\n    STACK_WIND(frame, cs_fsetxattr_cbk, FIRST_CHILD(this),\n               FIRST_CHILD(this)->fops->fsetxattr, fd, dict, flags, xdata);\n    return 0;\n}\n\nint32_t\ncs_unlink_cbk(call_frame_t *frame, void *cookie, xlator_t *this, int32_t op_ret,\n              int32_t op_errno, struct iatt *preparent, struct iatt *postparent,\n              dict_t *xdata)\n{\n    STACK_UNWIND_STRICT(unlink, frame, op_ret, op_errno, preparent, postparent,\n                        xdata);\n    return 0;\n}\n\nint32_t\ncs_unlink(call_frame_t *frame, xlator_t *this, loc_t *loc, int32_t flags,\n          dict_t *xattr_req)\n{\n    cs_local_t *local = NULL;\n    int ret = 0;\n\n    local = cs_local_init(this, frame, loc, NULL, GF_FOP_UNLINK);\n    if (!local)\n        goto err;\n\n    local->xattr_req = xattr_req ? dict_ref(xattr_req) : dict_new();\n\n    ret = dict_set_uint32(local->xattr_req, GF_CS_OBJECT_STATUS, 1);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n               \"dict_set failed key:\"\n               \" %s\",\n               GF_CS_OBJECT_STATUS);\n        goto err;\n    }\n    STACK_WIND(frame, cs_unlink_cbk, FIRST_CHILD(this),\n               FIRST_CHILD(this)->fops->unlink, loc, flags, local->xattr_req);\n    return 0;\nerr:\n    CS_STACK_UNWIND(unlink, frame, -1, errno, NULL, NULL, NULL);\n    return 0;\n}\n\nint32_t\ncs_open_cbk(call_frame_t *frame, void *cookie, xlator_t *this, int32_t op_ret,\n            int32_t op_errno, fd_t *fd, dict_t *xdata)\n{\n    int ret = 0;\n    uint64_t val = 0;\n\n    if (op_ret == 0) {\n        ret = dict_get_uint64(xdata, GF_CS_OBJECT_STATUS, &val);\n        if (!ret) {\n            ret = __cs_inode_ctx_update(this, fd->inode, val);\n            if (ret) {\n                gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"ctx update failed\");\n            }\n        }\n    } else {\n        cs_inode_ctx_reset(this, fd->inode);\n    }\n\n    CS_STACK_UNWIND(open, frame, op_ret, op_errno, fd, xdata);\n    return 0;\n}\n\nint32_t\ncs_open(call_frame_t *frame, xlator_t *this, loc_t *loc, int32_t flags,\n        fd_t *fd, dict_t *xattr_req)\n{\n    cs_local_t *local = NULL;\n    int ret = 0;\n\n    local = cs_local_init(this, frame, NULL, fd, GF_FOP_OPEN);\n    if (!local)\n        goto err;\n\n    local->xattr_req = xattr_req ? dict_ref(xattr_req) : dict_new();\n\n    ret = dict_set_uint32(local->xattr_req, GF_CS_OBJECT_STATUS, 1);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n               \"dict_set failed key:\"\n               \" %s\",\n               GF_CS_OBJECT_STATUS);\n        goto err;\n    }\n\n    STACK_WIND(frame, cs_open_cbk, FIRST_CHILD(this),\n               FIRST_CHILD(this)->fops->open, loc, flags, fd, local->xattr_req);\n    return 0;\nerr:\n    CS_STACK_UNWIND(open, frame, -1, errno, NULL, NULL);\n    return 0;\n}\n\nint32_t\ncs_fstat_cbk(call_frame_t *frame, void *cookie, xlator_t *this, int32_t op_ret,\n             int32_t op_errno, struct iatt *buf, dict_t *xdata)\n{\n    int ret = 0;\n    uint64_t val = 0;\n    fd_t *fd = NULL;\n    cs_local_t *local = NULL;\n\n    local = frame->local;\n\n    fd = local->fd;\n\n    if (op_ret == 0) {\n        ret = dict_get_uint64(xdata, GF_CS_OBJECT_STATUS, &val);\n        if (!ret) {\n            gf_msg_debug(this->name, 0, \"state %\" PRIu64, val);\n            ret = __cs_inode_ctx_update(this, fd->inode, val);\n            if (ret) {\n                gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"ctx update failed\");\n            }\n        }\n    } else {\n        cs_inode_ctx_reset(this, fd->inode);\n    }\n\n    CS_STACK_UNWIND(fstat, frame, op_ret, op_errno, buf, xdata);\n\n    return 0;\n}\n\nint32_t\ncs_fstat(call_frame_t *frame, xlator_t *this, fd_t *fd, dict_t *xattr_req)\n{\n    cs_local_t *local = NULL;\n    int ret = 0;\n\n    local = cs_local_init(this, frame, NULL, fd, GF_FOP_FSTAT);\n    if (!local)\n        goto err;\n\n    if (fd->inode->ia_type == IA_IFDIR)\n        goto wind;\n\n    local->xattr_req = xattr_req ? dict_ref(xattr_req) : dict_new();\n\n    ret = dict_set_uint32(local->xattr_req, GF_CS_OBJECT_STATUS, 1);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n               \"dict_set failed key:\"\n               \" %s\",\n               GF_CS_OBJECT_STATUS);\n        goto err;\n    }\n\nwind:\n    STACK_WIND(frame, cs_fstat_cbk, FIRST_CHILD(this),\n               FIRST_CHILD(this)->fops->fstat, fd, local->xattr_req);\n    return 0;\nerr:\n    CS_STACK_UNWIND(fstat, frame, -1, errno, NULL, NULL);\n    return 0;\n}\n\ncs_local_t *\ncs_local_init(xlator_t *this, call_frame_t *frame, loc_t *loc, fd_t *fd,\n              glusterfs_fop_t fop)\n{\n    cs_local_t *local = NULL;\n    int ret = 0;\n\n    local = mem_get0(this->local_pool);\n    if (!local)\n        goto out;\n\n    if (loc) {\n        ret = loc_copy(&local->loc, loc);\n        if (ret)\n            goto out;\n    }\n\n    if (fd) {\n        local->fd = fd_ref(fd);\n    }\n\n    local->op_ret = -1;\n    local->op_errno = EUCLEAN;\n    local->fop = fop;\n    local->dloffset = 0;\n    frame->local = local;\n    local->locked = _gf_false;\n    local->call_cnt = 0;\nout:\n    if (ret) {\n        if (local)\n            mem_put(local);\n        local = NULL;\n    }\n\n    return local;\n}\n\ncall_frame_t *\ncs_lock_frame(call_frame_t *parent_frame)\n{\n    call_frame_t *lock_frame = NULL;\n\n    lock_frame = copy_frame(parent_frame);\n\n    if (lock_frame == NULL)\n        goto out;\n\n    set_lk_owner_from_ptr(&lock_frame->root->lk_owner, parent_frame->root);\n\nout:\n    return lock_frame;\n}\n\nvoid\ncs_lock_wipe(call_frame_t *lock_frame)\n{\n    CS_STACK_DESTROY(lock_frame);\n}\n\nint32_t\ncs_inodelk_unlock_cbk(call_frame_t *frame, void *cookie, xlator_t *this,\n                      int32_t op_ret, int32_t op_errno, dict_t *xdata)\n{\n    cs_lock_wipe(frame);\n\n    return 0;\n}\n\nint\ncs_inodelk_unlock(call_frame_t *main_frame)\n{\n    xlator_t *this = NULL;\n    struct gf_flock flock = {\n        0,\n    };\n    call_frame_t *lock_frame = NULL;\n    cs_local_t *lock_local = NULL;\n    cs_local_t *main_local = NULL;\n    int ret = 0;\n\n    this = main_frame->this;\n    main_local = main_frame->local;\n\n    lock_frame = cs_lock_frame(main_frame);\n    if (!lock_frame)\n        goto out;\n\n    lock_local = cs_local_init(this, lock_frame, NULL, NULL, 0);\n    if (!lock_local)\n        goto out;\n\n    ret = cs_build_loc(&lock_local->loc, main_frame);\n    if (ret) {\n        goto out;\n    }\n\n    flock.l_type = F_UNLCK;\n\n    main_local->locked = _gf_false;\n\n    STACK_WIND(lock_frame, cs_inodelk_unlock_cbk, FIRST_CHILD(this),\n               FIRST_CHILD(this)->fops->inodelk, CS_LOCK_DOMAIN,\n               &lock_local->loc, F_SETLKW, &flock, NULL);\n\n    return 0;\n\nout:\n    gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n           \"Stale lock would be found on\"\n           \" server\");\n\n    if (lock_frame)\n        cs_lock_wipe(lock_frame);\n\n    return 0;\n}\n\nint\ncs_download_task(void *arg)\n{\n    call_frame_t *frame = NULL;\n    xlator_t *this = NULL;\n    cs_private_t *priv = NULL;\n    int ret = -1;\n    char *sign_req = NULL;\n    fd_t *fd = NULL;\n    cs_local_t *local = NULL;\n    dict_t *dict = NULL;\n\n    frame = (call_frame_t *)arg;\n\n    this = frame->this;\n\n    priv = this->private;\n\n    if (!priv->stores) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n               \"No remote store \"\n               \"plugins found\");\n        ret = -1;\n        goto out;\n    }\n\n    local = frame->local;\n\n    if (local->fd)\n        fd = fd_anonymous(local->fd->inode);\n    else\n        fd = fd_anonymous(local->loc.inode);\n\n    if (!fd) {\n        gf_msg(\"CS\", GF_LOG_ERROR, 0, 0, \"fd creation failed\");\n        ret = -1;\n        goto out;\n    }\n\n    local->dlfd = fd;\n    local->dloffset = 0;\n\n    dict = dict_new();\n    if (!dict) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, ENOMEM,\n               \"failed to create \"\n               \"dict\");\n        ret = -1;\n        goto out;\n    }\n\n    ret = dict_set_uint32(dict, GF_CS_OBJECT_DOWNLOADING, 1);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"dict_set failed\");\n        ret = -1;\n        goto out;\n    }\n\n    ret = syncop_fsetxattr(this, local->fd, dict, 0, NULL, NULL);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n               \"fsetxattr failed \"\n               \"key %s\",\n               GF_CS_OBJECT_DOWNLOADING);\n        ret = -1;\n        goto out;\n    }\n    /*this calling method is for per volume setting */\n    ret = priv->stores->dlfop(frame, priv->stores->config);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n               \"download failed\"\n               \", remotepath: %s\",\n               local->remotepath);\n\n        /*using dlfd as it is anonymous and have RDWR flag*/\n        ret = syncop_ftruncate(FIRST_CHILD(this), local->dlfd, 0, NULL, NULL,\n                               NULL, NULL);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, -ret, \"ftruncate failed\");\n        } else {\n            gf_msg_debug(this->name, 0, \"ftruncate succeed\");\n        }\n\n        ret = -1;\n        goto out;\n    } else {\n        gf_msg(this->name, GF_LOG_INFO, 0, 0,\n               \"download success, path\"\n               \" : %s\",\n               local->remotepath);\n\n        ret = syncop_fremovexattr(this, local->fd, GF_CS_OBJECT_REMOTE, NULL,\n                                  NULL);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, -ret,\n                   \"removexattr failed, remotexattr\");\n            ret = -1;\n            goto out;\n        } else {\n            gf_msg_debug(this->name, 0,\n                         \"fremovexattr success, \"\n                         \"path : %s\",\n                         local->remotepath);\n        }\n\n        ret = syncop_fremovexattr(this, local->fd, GF_CS_OBJECT_DOWNLOADING,\n                                  NULL, NULL);\n        if (ret) {\n            gf_msg(this->name, GF_LOG_ERROR, 0, -ret,\n                   \"removexattr failed, downloading xattr, path %s\",\n                   local->remotepath);\n            ret = -1;\n            goto out;\n        } else {\n            gf_msg_debug(this->name, 0,\n                         \"fremovexattr success\"\n                         \" path  %s\",\n                         local->remotepath);\n        }\n    }\n\nout:\n    GF_FREE(sign_req);\n\n    if (dict)\n        dict_unref(dict);\n\n    if (fd) {\n        fd_unref(fd);\n        local->dlfd = NULL;\n    }\n\n    return ret;\n}\n\nint\ncs_download(call_frame_t *frame)\n{\n    int ret = 0;\n    cs_local_t *local = NULL;\n    xlator_t *this = NULL;\n\n    local = frame->local;\n    this = frame->this;\n\n    if (!local->remotepath) {\n        ret = -1;\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n               \"remote path not\"\n               \" available. Check posix logs to resolve\");\n        goto out;\n    }\n\n    ret = cs_download_task((void *)frame);\nout:\n    return ret;\n}\n\nint\ncs_set_xattr_req(call_frame_t *frame)\n{\n    cs_local_t *local = NULL;\n    GF_UNUSED int ret = 0;\n\n    local = frame->local;\n\n    /* When remote reads are performed (i.e. reads on remote store),\n     * there needs to be a way to associate a file on gluster volume\n     * with its correspnding file on the remote store. In order to do\n     * that, a unique key can be maintained as an xattr\n     * (GF_CS_XATTR_ARCHIVE_UUID)on the stub file on gluster bricks.\n     * This xattr should be provided to the plugin to\n     * perform the read fop on the correct file. This assumes that the file\n     * hierarchy and name need not be the same on remote store as that of\n     * the gluster volume.\n     */\n    ret = dict_set_str(local->xattr_req, GF_CS_XATTR_ARCHIVE_UUID, \"1\");\n\n    return 0;\n}\n\nint\ncs_update_xattrs(call_frame_t *frame, dict_t *xdata)\n{\n    cs_local_t *local = NULL;\n    xlator_t *this = NULL;\n    int size = -1;\n    GF_UNUSED int ret = 0;\n\n    local = frame->local;\n    this = frame->this;\n\n    local->xattrinfo.lxattr = GF_CALLOC(1, sizeof(cs_loc_xattr_t),\n                                        gf_cs_mt_cs_lxattr_t);\n    if (!local->xattrinfo.lxattr) {\n        local->op_ret = -1;\n        local->op_errno = ENOMEM;\n        goto err;\n    }\n\n    gf_uuid_copy(local->xattrinfo.lxattr->gfid, local->loc.gfid);\n\n    if (local->remotepath) {\n        local->xattrinfo.lxattr->file_path = gf_strdup(local->remotepath);\n        if (!local->xattrinfo.lxattr->file_path) {\n            local->op_ret = -1;\n            local->op_errno = ENOMEM;\n            goto err;\n        }\n    }\n\n    ret = dict_get_gfuuid(xdata, GF_CS_XATTR_ARCHIVE_UUID,\n                          &(local->xattrinfo.lxattr->uuid));\n\n    if (ret) {\n        gf_uuid_clear(local->xattrinfo.lxattr->uuid);\n    }\n    size = strlen(this->name) - strlen(\"-cloudsync\") + 1;\n    local->xattrinfo.lxattr->volname = GF_CALLOC(1, size, gf_common_mt_char);\n    if (!local->xattrinfo.lxattr->volname) {\n        local->op_ret = -1;\n        local->op_errno = ENOMEM;\n        goto err;\n    }\n    strncpy(local->xattrinfo.lxattr->volname, this->name, size - 1);\n    local->xattrinfo.lxattr->volname[size - 1] = '\\0';\n\n    return 0;\nerr:\n    cs_xattrinfo_wipe(local);\n    return -1;\n}\n\nint\ncs_serve_readv(call_frame_t *frame, off_t offset, size_t size, uint32_t flags)\n{\n    xlator_t *this = NULL;\n    cs_private_t *priv = NULL;\n    int ret = -1;\n    fd_t *fd = NULL;\n    cs_local_t *local = NULL;\n\n    local = frame->local;\n    this = frame->this;\n    priv = this->private;\n\n    if (!local->remotepath) {\n        ret = -1;\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n               \"remote path not\"\n               \" available. Check posix logs to resolve\");\n        goto out;\n    }\n\n    if (!priv->stores) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n               \"No remote store \"\n               \"plugins found\");\n        ret = -1;\n        goto out;\n    }\n\n    if (local->fd) {\n        fd = fd_anonymous(local->fd->inode);\n    } else {\n        fd = fd_anonymous(local->loc.inode);\n    }\n\n    local->xattrinfo.size = size;\n    local->xattrinfo.offset = offset;\n    local->xattrinfo.flags = flags;\n\n    if (!fd) {\n        gf_msg(\"CS\", GF_LOG_ERROR, 0, 0, \"fd creation failed\");\n        ret = -1;\n        goto out;\n    }\n\n    local->dlfd = fd;\n    local->dloffset = offset;\n\n    /*this calling method is for per volume setting */\n    ret = priv->stores->rdfop(frame, priv->stores->config);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n               \"read failed\"\n               \", remotepath: %s\",\n               local->remotepath);\n        ret = -1;\n        goto out;\n    } else {\n        gf_msg(this->name, GF_LOG_INFO, 0, 0,\n               \"read success, path\"\n               \" : %s\",\n               local->remotepath);\n    }\n\nout:\n    if (fd) {\n        fd_unref(fd);\n        local->dlfd = NULL;\n    }\n    return ret;\n}\n\nint32_t\ncs_readv_cbk(call_frame_t *frame, void *cookie, xlator_t *this, int32_t op_ret,\n             int32_t op_errno, struct iovec *vector, int32_t count,\n             struct iatt *stbuf, struct iobref *iobref, dict_t *xdata)\n{\n    cs_local_t *local = NULL;\n    int ret = 0;\n    uint64_t val = 0;\n    fd_t *fd = NULL;\n\n    local = frame->local;\n    fd = local->fd;\n\n    local->call_cnt++;\n\n    if (op_ret == -1) {\n        ret = dict_get_uint64(xdata, GF_CS_OBJECT_STATUS, &val);\n        if (ret == 0) {\n            if (val == GF_CS_ERROR) {\n                gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n                       \"could not get file state, unwinding\");\n                op_ret = -1;\n                op_errno = EIO;\n                goto unwind;\n            } else {\n                __cs_inode_ctx_update(this, fd->inode, val);\n                gf_msg(this->name, GF_LOG_INFO, 0, 0, \" state = %\" PRIu64, val);\n\n                if (local->call_cnt == 1 &&\n                    (val == GF_CS_REMOTE || val == GF_CS_DOWNLOADING)) {\n                    gf_msg(this->name, GF_LOG_INFO, 0, 0,\n                           \" will read from remote : %\" PRIu64, val);\n                    goto repair;\n                } else {\n                    gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n                           \"second readv, Unwinding\");\n                    goto unwind;\n                }\n            }\n        } else {\n            gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n                   \"file state \"\n                   \"could not be figured, unwinding\");\n            goto unwind;\n        }\n    } else {\n        /* successful readv => file is local */\n        __cs_inode_ctx_update(this, fd->inode, GF_CS_LOCAL);\n        gf_msg(this->name, GF_LOG_INFO, 0, 0,\n               \"state : GF_CS_LOCAL\"\n               \", readv successful\");\n\n        goto unwind;\n    }\n\nrepair:\n    ret = locate_and_execute(frame);\n    if (ret) {\n        goto unwind;\n    }\n\n    return 0;\n\nunwind:\n    CS_STACK_UNWIND(readv, frame, op_ret, op_errno, vector, count, stbuf,\n                    iobref, xdata);\n\n    return 0;\n}\n\nint32_t\ncs_resume_readv(call_frame_t *frame, xlator_t *this, fd_t *fd, size_t size,\n                off_t offset, uint32_t flags, dict_t *xdata)\n{\n    int ret = 0;\n\n    ret = cs_resume_postprocess(this, frame, fd->inode);\n    if (ret) {\n        goto unwind;\n    }\n\n    cs_inodelk_unlock(frame);\n\n    STACK_WIND(frame, cs_readv_cbk, FIRST_CHILD(this),\n               FIRST_CHILD(this)->fops->readv, fd, size, offset, flags, xdata);\n\n    return 0;\n\nunwind:\n    cs_inodelk_unlock(frame);\n\n    cs_common_cbk(frame);\n\n    return 0;\n}\n\nint32_t\ncs_resume_remote_readv(call_frame_t *frame, xlator_t *this, fd_t *fd,\n                       size_t size, off_t offset, uint32_t flags, dict_t *xdata)\n{\n    int ret = 0;\n    cs_local_t *local = NULL;\n    gf_cs_obj_state state = -1;\n    cs_inode_ctx_t *ctx = NULL;\n\n    cs_inodelk_unlock(frame);\n\n    local = frame->local;\n    if (!local) {\n        ret = -1;\n        goto unwind;\n    }\n\n    __cs_inode_ctx_get(this, fd->inode, &ctx);\n\n    state = __cs_get_file_state(this, fd->inode, ctx);\n    if (state == GF_CS_ERROR) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n               \"status is GF_CS_ERROR.\"\n               \" Aborting readv\");\n        local->op_ret = -1;\n        local->op_errno = EREMOTE;\n        ret = -1;\n        goto unwind;\n    }\n\n    /* Serve readv from remote store only if it is remote. */\n    gf_msg_debug(this->name, 0, \"status of file %s is %d\",\n                 local->remotepath ? local->remotepath : \"\", state);\n\n    /* We will reach this condition if local inode ctx had REMOTE\n     * state when the control was in cs_readv but after stat\n     * we got an updated state saying that the file is LOCAL.\n     */\n    if (state == GF_CS_LOCAL) {\n        STACK_WIND(frame, cs_readv_cbk, FIRST_CHILD(this),\n                   FIRST_CHILD(this)->fops->readv, fd, size, offset, flags,\n                   xdata);\n    } else if (state == GF_CS_REMOTE) {\n        ret = cs_resume_remote_readv_postprocess(this, frame, fd->inode, offset,\n                                                 size, flags);\n        /* Failed to submit the remote readv fop to plugin */\n        if (ret) {\n            local->op_ret = -1;\n            local->op_errno = EREMOTE;\n            goto unwind;\n        }\n        /* When the file is in any other intermediate state,\n         * we should not perform remote reads.\n         */\n    } else {\n        local->op_ret = -1;\n        local->op_errno = EINVAL;\n        goto unwind;\n    }\n\n    return 0;\n\nunwind:\n    cs_common_cbk(frame);\n\n    return 0;\n}\n\nint32_t\ncs_readv(call_frame_t *frame, xlator_t *this, fd_t *fd, size_t size,\n         off_t offset, uint32_t flags, dict_t *xdata)\n{\n    int op_errno = -1;\n    cs_local_t *local = NULL;\n    int ret = 0;\n    cs_inode_ctx_t *ctx = NULL;\n    gf_cs_obj_state state = -1;\n    cs_private_t *priv = NULL;\n\n    VALIDATE_OR_GOTO(frame, err);\n    VALIDATE_OR_GOTO(this, err);\n    VALIDATE_OR_GOTO(fd, err);\n\n    priv = this->private;\n\n    local = cs_local_init(this, frame, NULL, fd, GF_FOP_READ);\n    if (!local) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"local init failed\");\n        op_errno = ENOMEM;\n        goto err;\n    }\n\n    __cs_inode_ctx_get(this, fd->inode, &ctx);\n\n    if (ctx)\n        state = __cs_get_file_state(this, fd->inode, ctx);\n    else\n        state = GF_CS_LOCAL;\n\n    local->xattr_req = xdata ? dict_ref(xdata) : (xdata = dict_new());\n\n    ret = dict_set_uint32(local->xattr_req, GF_CS_OBJECT_STATUS, 1);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n               \"dict_set failed key:\"\n               \" %s\",\n               GF_CS_OBJECT_STATUS);\n        goto err;\n    }\n\n    if (priv->remote_read) {\n        local->stub = fop_readv_stub(frame, cs_resume_remote_readv, fd, size,\n                                     offset, flags, xdata);\n    } else {\n        local->stub = fop_readv_stub(frame, cs_resume_readv, fd, size, offset,\n                                     flags, xdata);\n    }\n    if (!local->stub) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"insufficient memory\");\n        op_errno = ENOMEM;\n        goto err;\n    }\n\n    if (state == GF_CS_LOCAL) {\n        STACK_WIND(frame, cs_readv_cbk, FIRST_CHILD(this),\n                   FIRST_CHILD(this)->fops->readv, fd, size, offset, flags,\n                   xdata);\n    } else {\n        local->call_cnt++;\n        ret = locate_and_execute(frame);\n        if (ret) {\n            op_errno = ENOMEM;\n            goto err;\n        }\n    }\n\n    return 0;\n\nerr:\n    CS_STACK_UNWIND(readv, frame, -1, op_errno, NULL, -1, NULL, NULL, NULL);\n\n    return 0;\n}\n\nint\ncs_resume_remote_readv_postprocess(xlator_t *this, call_frame_t *frame,\n                                   inode_t *inode, off_t offset, size_t size,\n                                   uint32_t flags)\n{\n    int ret = 0;\n\n    ret = cs_serve_readv(frame, offset, size, flags);\n\n    return ret;\n}\n\nint\ncs_stat_check_cbk(call_frame_t *frame, void *cookie, xlator_t *this, int op_ret,\n                  int op_errno, struct iatt *stbuf, dict_t *xdata)\n{\n    cs_local_t *local = NULL;\n    call_stub_t *stub = NULL;\n    char *filepath = NULL;\n    int ret = 0;\n    inode_t *inode = NULL;\n    uint64_t val = 0;\n\n    local = frame->local;\n\n    if (op_ret == -1) {\n        local->op_ret = op_ret;\n        local->op_errno = op_errno;\n        gf_msg(this->name, GF_LOG_ERROR, 0, op_errno, \"stat check failed\");\n        goto err;\n    } else {\n        if (local->fd)\n            inode = local->fd->inode;\n        else\n            inode = local->loc.inode;\n\n        if (!inode) {\n            local->op_ret = -1;\n            local->op_errno = EINVAL;\n            gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n                   \"null inode \"\n                   \"returned\");\n            goto err;\n        }\n\n        ret = dict_get_uint64(xdata, GF_CS_OBJECT_STATUS, &val);\n        if (ret == 0) {\n            if (val == GF_CS_ERROR) {\n                cs_inode_ctx_reset(this, inode);\n                local->op_ret = -1;\n                local->op_errno = EIO;\n                gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n                       \"status = GF_CS_ERROR. failed to get \"\n                       \" file state\");\n                goto err;\n            } else {\n                ret = __cs_inode_ctx_update(this, inode, val);\n                gf_msg_debug(this->name, 0, \"status : %\" PRIu64, val);\n                if (ret) {\n                    gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"ctx update failed\");\n                    local->op_ret = -1;\n                    local->op_errno = ENOMEM;\n                    goto err;\n                }\n            }\n        } else {\n            gf_msg_debug(this->name, 0, \"status not found in dict\");\n            local->op_ret = -1;\n            local->op_errno = ENOMEM;\n            goto err;\n        }\n\n        ret = dict_get_str(xdata, GF_CS_OBJECT_REMOTE, &filepath);\n        if (filepath) {\n            gf_msg_debug(this->name, 0, \"filepath returned %s\", filepath);\n            local->remotepath = gf_strdup(filepath);\n            if (!local->remotepath) {\n                local->op_ret = -1;\n                local->op_errno = ENOMEM;\n                goto err;\n            }\n        } else {\n            gf_msg_debug(this->name, 0, \"NULL filepath\");\n        }\n\n        ret = cs_update_xattrs(frame, xdata);\n        if (ret)\n            goto err;\n\n        local->op_ret = 0;\n        local->xattr_rsp = dict_ref(xdata);\n        memcpy(&local->stbuf, stbuf, sizeof(struct iatt));\n    }\n\n    stub = local->stub;\n    local->stub = NULL;\n    call_resume(stub);\n\n    return 0;\nerr:\n    cs_inodelk_unlock(frame);\n\n    cs_common_cbk(frame);\n\n    return 0;\n}\n\nint\ncs_do_stat_check(call_frame_t *main_frame)\n{\n    cs_local_t *local = NULL;\n    xlator_t *this = NULL;\n    int ret = 0;\n\n    local = main_frame->local;\n    this = main_frame->this;\n\n    ret = dict_set_uint32(local->xattr_req, GF_CS_OBJECT_REPAIR, 256);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"dict_set failed\");\n        goto err;\n    }\n\n    cs_set_xattr_req(main_frame);\n\n    if (local->fd) {\n        STACK_WIND(main_frame, cs_stat_check_cbk, FIRST_CHILD(this),\n                   FIRST_CHILD(this)->fops->fstat, local->fd, local->xattr_req);\n    } else {\n        STACK_WIND(main_frame, cs_stat_check_cbk, FIRST_CHILD(this),\n                   FIRST_CHILD(this)->fops->stat, &local->loc,\n                   local->xattr_req);\n    }\n\n    return 0;\n\nerr:\n    cs_inodelk_unlock(main_frame);\n\n    cs_common_cbk(main_frame);\n\n    return 0;\n}\n\nvoid\ncs_common_cbk(call_frame_t *frame)\n{\n    glusterfs_fop_t fop = -1;\n    cs_local_t *local = NULL;\n\n    local = frame->local;\n\n    fop = local->fop;\n\n    /*Note: Only the failure case needs to be handled here. Since for\n     * successful stat check the fop will resume anyway. The unwind can\n     * happen from the fop_cbk and each cbk can unlock the inodelk in case\n     * a lock was taken before. The lock status can be stored in frame */\n\n    /* for failure case  */\n\n    /*TODO: add other fops*/\n    switch (fop) {\n        case GF_FOP_WRITE:\n            CS_STACK_UNWIND(writev, frame, local->op_ret, local->op_errno, NULL,\n                            NULL, NULL);\n            break;\n\n        case GF_FOP_SETXATTR:\n            CS_STACK_UNWIND(setxattr, frame, local->op_ret, local->op_errno,\n                            NULL);\n            break;\n        case GF_FOP_READ:\n            CS_STACK_UNWIND(readv, frame, local->op_ret, local->op_errno, NULL,\n                            0, NULL, NULL, NULL);\n            break;\n        case GF_FOP_FTRUNCATE:\n            CS_STACK_UNWIND(ftruncate, frame, local->op_ret, local->op_errno,\n                            NULL, NULL, NULL);\n            break;\n\n        case GF_FOP_TRUNCATE:\n            CS_STACK_UNWIND(truncate, frame, local->op_ret, local->op_errno,\n                            NULL, NULL, NULL);\n            break;\n        default:\n            break;\n    }\n\n    return;\n}\n\nint\ncs_blocking_inodelk_cbk(call_frame_t *lock_frame, void *cookie, xlator_t *this,\n                        int32_t op_ret, int32_t op_errno, dict_t *xdata)\n{\n    cs_local_t *main_local = NULL;\n    call_frame_t *main_frame = NULL;\n    cs_local_t *lock_local = NULL;\n\n    lock_local = lock_frame->local;\n\n    main_frame = lock_local->main_frame;\n    main_local = main_frame->local;\n\n    if (op_ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"inodelk failed\");\n        main_local->op_errno = op_errno;\n        main_local->op_ret = op_ret;\n        goto err;\n    }\n\n    main_local->locked = _gf_true;\n\n    cs_lock_wipe(lock_frame);\n\n    cs_do_stat_check(main_frame);\n\n    return 0;\nerr:\n    cs_common_cbk(main_frame);\n\n    cs_lock_wipe(lock_frame);\n\n    return 0;\n}\n\nint\ncs_build_loc(loc_t *loc, call_frame_t *frame)\n{\n    cs_local_t *local = NULL;\n    int ret = -1;\n\n    local = frame->local;\n\n    if (local->fd) {\n        loc->inode = inode_ref(local->fd->inode);\n        if (loc->inode) {\n            gf_uuid_copy(loc->gfid, loc->inode->gfid);\n            ret = 0;\n            goto out;\n        } else {\n            ret = -1;\n            goto out;\n        }\n    } else {\n        loc->inode = inode_ref(local->loc.inode);\n        if (loc->inode) {\n            gf_uuid_copy(loc->gfid, loc->inode->gfid);\n            ret = 0;\n            goto out;\n        } else {\n            ret = -1;\n            goto out;\n        }\n    }\nout:\n    return ret;\n}\n\nint\ncs_blocking_inodelk(call_frame_t *parent_frame)\n{\n    call_frame_t *lock_frame = NULL;\n    cs_local_t *lock_local = NULL;\n    xlator_t *this = NULL;\n    struct gf_flock flock = {\n        0,\n    };\n    int ret = 0;\n\n    this = parent_frame->this;\n\n    lock_frame = cs_lock_frame(parent_frame);\n    if (!lock_frame) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"insuffcient memory\");\n        goto err;\n    }\n\n    lock_local = cs_local_init(this, lock_frame, NULL, NULL, 0);\n    if (!lock_local) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"local init failed\");\n        goto err;\n    }\n\n    lock_local->main_frame = parent_frame;\n\n    flock.l_type = F_WRLCK;\n\n    ret = cs_build_loc(&lock_local->loc, parent_frame);\n    if (ret) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"build_loc failed\");\n        goto err;\n    }\n\n    STACK_WIND(lock_frame, cs_blocking_inodelk_cbk, FIRST_CHILD(this),\n               FIRST_CHILD(this)->fops->inodelk, CS_LOCK_DOMAIN,\n               &lock_local->loc, F_SETLKW, &flock, NULL);\n\n    return 0;\nerr:\n    if (lock_frame)\n        cs_lock_wipe(lock_frame);\n\n    return -1;\n}\n\nint\nlocate_and_execute(call_frame_t *frame)\n{\n    int ret = 0;\n\n    ret = cs_blocking_inodelk(frame);\n\n    if (ret)\n        return -1;\n    else\n        return 0;\n}\n\nint32_t\ncs_resume_truncate(call_frame_t *frame, xlator_t *this, loc_t *loc,\n                   off_t offset, dict_t *xattr_req)\n{\n    cs_local_t *local = NULL;\n    int ret = 0;\n\n    local = frame->local;\n\n    ret = cs_resume_postprocess(this, frame, loc->inode);\n    if (ret) {\n        goto unwind;\n    }\n\n    cs_inodelk_unlock(frame);\n\n    STACK_WIND(frame, cs_truncate_cbk, FIRST_CHILD(this),\n               FIRST_CHILD(this)->fops->truncate, loc, offset,\n               local->xattr_req);\n\n    return 0;\n\nunwind:\n    cs_inodelk_unlock(frame);\n\n    cs_common_cbk(frame);\n\n    return 0;\n}\n\nint32_t\ncs_resume_setxattr(call_frame_t *frame, xlator_t *this, loc_t *loc,\n                   dict_t *dict, int32_t flags, dict_t *xdata)\n{\n    cs_local_t *local = NULL;\n    cs_inode_ctx_t *ctx = NULL;\n    gf_cs_obj_state state = GF_CS_ERROR;\n\n    local = frame->local;\n\n    __cs_inode_ctx_get(this, loc->inode, &ctx);\n\n    state = __cs_get_file_state(this, loc->inode, ctx);\n\n    if (state == GF_CS_ERROR) {\n        /* file is already remote */\n        local->op_ret = -1;\n        local->op_errno = EINVAL;\n        gf_msg(this->name, GF_LOG_WARNING, 0, 0,\n               \"file %s , could not figure file state\", loc->path);\n        goto unwind;\n    }\n\n    if (state == GF_CS_REMOTE) {\n        /* file is already remote */\n        local->op_ret = -1;\n        local->op_errno = EINVAL;\n        gf_msg(this->name, GF_LOG_WARNING, 0, EINVAL,\n               \"file %s is already remote\", loc->path);\n        goto unwind;\n    }\n\n    if (state == GF_CS_DOWNLOADING) {\n        gf_msg(this->name, GF_LOG_WARNING, 0, 0,\n               \" file is in downloading state.\");\n        local->op_ret = -1;\n        local->op_errno = EINVAL;\n        goto unwind;\n    }\n\n    STACK_WIND(frame, cs_setxattr_cbk, FIRST_CHILD(this),\n               FIRST_CHILD(this)->fops->setxattr, loc, dict, flags,\n               local->xattr_req);\n\n    return 0;\nunwind:\n    cs_inodelk_unlock(frame);\n\n    cs_common_cbk(frame);\n\n    return 0;\n}\n\ngf_cs_obj_state\n__cs_get_file_state(xlator_t *this, inode_t *inode, cs_inode_ctx_t *ctx)\n{\n    gf_cs_obj_state state = -1;\n\n    if (!ctx)\n        return GF_CS_ERROR;\n\n    LOCK(&inode->lock);\n    {\n        state = ctx->state;\n    }\n    UNLOCK(&inode->lock);\n\n    return state;\n}\n\nvoid\n__cs_inode_ctx_get(xlator_t *this, inode_t *inode, cs_inode_ctx_t **ctx)\n{\n    uint64_t ctxint = 0;\n    int ret = 0;\n\n    LOCK(&inode->lock);\n    {\n        ret = __inode_ctx_get(inode, this, &ctxint);\n    }\n    UNLOCK(&inode->lock);\n\n    if (ret)\n        *ctx = NULL;\n    else\n        *ctx = (cs_inode_ctx_t *)(uintptr_t)ctxint;\n\n    return;\n}\n\nint\n__cs_inode_ctx_update(xlator_t *this, inode_t *inode, uint64_t val)\n{\n    cs_inode_ctx_t *ctx = NULL;\n    uint64_t ctxint = 0;\n    int ret = 0;\n\n    LOCK(&inode->lock);\n    {\n        ret = __inode_ctx_get(inode, this, &ctxint);\n        if (ret) {\n            ctx = GF_CALLOC(1, sizeof(*ctx), gf_cs_mt_cs_inode_ctx_t);\n            if (!ctx) {\n                gf_msg(this->name, GF_LOG_ERROR, 0, 0, \"ctx allocation failed\");\n                ret = -1;\n                goto out;\n            }\n\n            ctx->state = val;\n\n            ctxint = (uint64_t)(uintptr_t)ctx;\n\n            ret = __inode_ctx_set(inode, this, &ctxint);\n            if (ret) {\n                GF_FREE(ctx);\n                goto out;\n            }\n        } else {\n            ctx = (cs_inode_ctx_t *)(uintptr_t)ctxint;\n\n            ctx->state = val;\n        }\n    }\n\nout:\n    UNLOCK(&inode->lock);\n\n    return ret;\n}\n\nint\ncs_inode_ctx_reset(xlator_t *this, inode_t *inode)\n{\n    cs_inode_ctx_t *ctx = NULL;\n    uint64_t ctxint = 0;\n\n    inode_ctx_del(inode, this, &ctxint);\n    if (!ctxint) {\n        return 0;\n    }\n\n    ctx = (cs_inode_ctx_t *)(uintptr_t)ctxint;\n\n    GF_FREE(ctx);\n    return 0;\n}\n\nint\ncs_resume_postprocess(xlator_t *this, call_frame_t *frame, inode_t *inode)\n{\n    cs_local_t *local = NULL;\n    gf_cs_obj_state state = -1;\n    cs_inode_ctx_t *ctx = NULL;\n    int ret = 0;\n\n    local = frame->local;\n    if (!local) {\n        ret = -1;\n        goto out;\n    }\n\n    __cs_inode_ctx_get(this, inode, &ctx);\n\n    state = __cs_get_file_state(this, inode, ctx);\n    if (state == GF_CS_ERROR) {\n        gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n               \"status is GF_CS_ERROR.\"\n               \" Aborting write\");\n        local->op_ret = -1;\n        local->op_errno = EREMOTE;\n        ret = -1;\n        goto out;\n    }\n\n    if (state == GF_CS_REMOTE || state == GF_CS_DOWNLOADING) {\n        gf_msg_debug(this->name, 0, \"status is %d\", state);\n        ret = cs_download(frame);\n        if (ret == 0) {\n            gf_msg_debug(this->name, 0, \"Winding for Final Write\");\n        } else {\n            gf_msg(this->name, GF_LOG_ERROR, 0, 0,\n                   \" download failed, unwinding writev\");\n            local->op_ret = -1;\n            local->op_errno = EREMOTE;\n            ret = -1;\n        }\n    }\nout:\n    return ret;\n}\n\nint32_t\n__cs_get_dict_str(char **str, dict_t *xattr, const char *name, int *errnum)\n{\n    data_t *data = NULL;\n    int ret = -1;\n\n    assert(str != NULL);\n\n    data = dict_get(xattr, (char *)name);\n    if (!data) {\n        *errnum = ENODATA;\n        goto out;\n    }\n\n    *str = GF_CALLOC(data->len + 1, sizeof(char), gf_common_mt_char);\n    if (!(*str)) {\n        *errnum = ENOMEM;\n        goto out;\n    }\n\n    memcpy(*str, data->data, sizeof(char) * (data->len));\n    return 0;\n\nout:\n    return ret;\n}\n\nint32_t\n__cs_get_dict_uuid(uuid_t uuid, dict_t *xattr, const char *name, int *errnum)\n{\n    data_t *data = NULL;\n    int ret = -1;\n\n    assert(uuid != NULL);\n\n    data = dict_get(xattr, (char *)name);\n    if (!data) {\n        *errnum = ENODATA;\n        goto out;\n    }\n\n    assert(data->len == sizeof(uuid_t));\n\n    gf_uuid_copy(uuid, (unsigned char *)data->data);\n    return 0;\n\nout:\n    return ret;\n}\n\nint32_t\ncs_fdctx_to_dict(xlator_t *this, fd_t *fd, dict_t *dict)\n{\n    return 0;\n}\n\nint32_t\ncs_inode(xlator_t *this)\n{\n    return 0;\n}\n\nint32_t\ncs_inode_to_dict(xlator_t *this, dict_t *dict)\n{\n    return 0;\n}\n\nint32_t\ncs_history(xlator_t *this)\n{\n    return 0;\n}\n\nint32_t\ncs_fd(xlator_t *this)\n{\n    return 0;\n}\n\nint32_t\ncs_fd_to_dict(xlator_t *this, dict_t *dict)\n{\n    return 0;\n}\n\nint32_t\ncs_fdctx(xlator_t *this, fd_t *fd)\n{\n    return 0;\n}\n\nint32_t\ncs_inodectx(xlator_t *this, inode_t *ino)\n{\n    return 0;\n}\n\nint32_t\ncs_inodectx_to_dict(xlator_t *this, inode_t *ino, dict_t *dict)\n{\n    return 0;\n}\n\nint32_t\ncs_priv_to_dict(xlator_t *this, dict_t *dict, char *brickname)\n{\n    return 0;\n}\n\nint32_t\ncs_priv(xlator_t *this)\n{\n    return 0;\n}\n\nint\ncs_notify(xlator_t *this, int event, void *data, ...)\n{\n    return default_notify(this, event, data);\n}\n\nstruct xlator_fops cs_fops = {\n    .stat = cs_stat,\n    .readdirp = cs_readdirp,\n    .truncate = cs_truncate,\n    .seek = cs_seek,\n    .statfs = cs_statfs,\n    .fallocate = cs_fallocate,\n    .discard = cs_discard,\n    .getxattr = cs_getxattr,\n    .writev = cs_writev,\n    .setxattr = cs_setxattr,\n    .fgetxattr = cs_fgetxattr,\n    .lookup = cs_lookup,\n    .fsetxattr = cs_fsetxattr,\n    .readv = cs_readv,\n    .ftruncate = cs_ftruncate,\n    .rchecksum = cs_rchecksum,\n    .unlink = cs_unlink,\n    .open = cs_open,\n    .fstat = cs_fstat,\n    .zerofill = cs_zerofill,\n};\n\nstruct xlator_cbks cs_cbks = {\n    .forget = cs_forget,\n};\n\nstruct xlator_dumpops cs_dumpops = {\n    .fdctx_to_dict = cs_fdctx_to_dict,\n    .inode = cs_inode,\n    .inode_to_dict = cs_inode_to_dict,\n    .history = cs_history,\n    .fd = cs_fd,\n    .fd_to_dict = cs_fd_to_dict,\n    .fdctx = cs_fdctx,\n    .inodectx = cs_inodectx,\n    .inodectx_to_dict = cs_inodectx_to_dict,\n    .priv_to_dict = cs_priv_to_dict,\n    .priv = cs_priv,\n};\n\nstruct volume_options cs_options[] = {\n    {.key = {\"cloudsync-storetype\"},\n     .type = GF_OPTION_TYPE_STR,\n     .description = \"Defines which remote store is enabled\"},\n    {.key = {\"cloudsync-remote-read\"},\n     .type = GF_OPTION_TYPE_BOOL,\n     .description = \"Defines a remote read fop when on\"},\n    {.key = {\"cloudsync-store-id\"},\n     .type = GF_OPTION_TYPE_STR,\n     .description = \"Defines a volume wide store id\"},\n    {.key = {\"cloudsync-product-id\"},\n     .type = GF_OPTION_TYPE_STR,\n     .description = \"Defines a volume wide product id\"},\n    {.key = {NULL}},\n};\n\nxlator_api_t xlator_api = {\n    .init = cs_init,\n    .fini = cs_fini,\n    .notify = cs_notify,\n    .reconfigure = cs_reconfigure,\n    .mem_acct_init = cs_mem_acct_init,\n    .dumpops = &cs_dumpops,\n    .fops = &cs_fops,\n    .cbks = &cs_cbks,\n    .options = cs_options,\n    .identifier = \"cloudsync\",\n    .category = GF_TECH_PREVIEW,\n};\n",
        "/tmp/vanessa/spack-stage/spack-stage-glusterfs-7.2-7bafu5wprzvvhnabtlwumqs3qxil5tgh/spack-src/xlators/features/cloudsync/src/cloudsync-plugins/src/cvlt/src/libcvlt.h": "/*\n  Copyright (c) 2018 Commvault Systems, Inc. <http://www.commvault.com>\n  This file is part of GlusterFS.\n\n  This file is licensed to you under your choice of the GNU Lesser\n  General Public License, version 3 or any later version (LGPLv3 or\n  later), or the GNU General Public License, version 2 (GPLv2), in all\n  cases as published by the Free Software Foundation.\n*/\n#ifndef _LIBCVLT_H\n#define _LIBCVLT_H\n\n#include <semaphore.h>\n#include <glusterfs/xlator.h>\n#include <glusterfs/glusterfs.h>\n#include <glusterfs/call-stub.h>\n#include <glusterfs/syncop.h>\n#include <glusterfs/compat-errno.h>\n#include \"cloudsync-common.h\"\n#include \"libcvlt-mem-types.h\"\n#include \"archivestore.h\"\n\nenum _cvlt_op {\n    CVLT_READ_OP = 1,\n    CVLT_WRITE_OP = 2,\n    CVLT_RESTORE_OP = 3,\n    CVLT_ARCHIVE_OP = 4,\n    CVLT_LOOKUP_OP = 5,\n    CVLT_XATTR_OP = 6,\n    CVLT_STAT_OP = 7,\n    CVLT_FSTAT_op = 8,\n    CVLT_UNDEF_OP = 127\n};\ntypedef enum _cvlt_op cvlt_op_t;\n\nstruct _archive;\nstruct _cvlt_request {\n    uint64_t offset;\n    uint64_t bytes;\n    struct iobuf *iobuf;\n    struct iobref *iobref;\n    call_frame_t *frame;\n    cvlt_op_t op_type;\n    int32_t op_ret;\n    int32_t op_errno;\n    xlator_t *this;\n    sem_t sem;\n    archstore_info_t store_info;\n    archstore_fileinfo_t file_info;\n    cs_size_xattr_t szxattr;\n};\ntypedef struct _cvlt_request cvlt_request_t;\n\nstruct _archive {\n    gf_lock_t lock;                /* lock for controlling access   */\n    xlator_t *xl;                  /* xlator                        */\n    void *handle;                  /* handle returned from dlopen   */\n    int32_t nreqs;                 /* num requests active           */\n    struct mem_pool *req_pool;     /* pool for requests             */\n    struct iobuf_pool *iobuf_pool; /* iobuff pool                   */\n    archstore_desc_t descinfo;     /* Archive store descriptor info */\n    archstore_methods_t fops;      /* function pointers             */\n    char *product_id;\n    char *store_id;\n    char *trailer;\n};\ntypedef struct _archive archive_t;\n\nvoid *\ncvlt_init(xlator_t *);\n\nint\ncvlt_reconfigure(xlator_t *, dict_t *);\n\nvoid\ncvlt_fini(void *);\n\nint\ncvlt_download(call_frame_t *, void *);\n\nint\ncvlt_read(call_frame_t *, void *);\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-glusterfs-7.2-7bafu5wprzvvhnabtlwumqs3qxil5tgh/spack-src/xlators/features/cloudsync/src/cloudsync-plugins/src/cvlt/src/libcvlt.c": "#include <stdlib.h>\n#include <glusterfs/xlator.h>\n#include <glusterfs/glusterfs.h>\n#include \"libcvlt.h\"\n#include \"cloudsync-common.h\"\n#include \"cvlt-messages.h\"\n\n#define LIBARCHIVE_SO \"libopenarchive.so\"\n#define ALIGN_SIZE 4096\n#define CVLT_TRAILER \"cvltv1\"\n\nstore_methods_t store_ops = {\n    .fop_download = cvlt_download,\n    .fop_init = cvlt_init,\n    .fop_reconfigure = cvlt_reconfigure,\n    .fop_fini = cvlt_fini,\n    .fop_remote_read = cvlt_read,\n};\n\nstatic const int32_t num_req = 32;\nstatic const int32_t num_iatt = 32;\nstatic char *plugin = \"cvlt_cloudSync\";\n\nint32_t\nmem_acct_init(xlator_t *this)\n{\n    int ret = -1;\n\n    if (!this)\n        return ret;\n\n    ret = xlator_mem_acct_init(this, gf_libcvlt_mt_end + 1);\n\n    if (ret != 0) {\n        return ret;\n    }\n\n    return ret;\n}\n\nstatic void\ncvlt_free_resources(archive_t *arch)\n{\n    /*\n     * We will release all the resources that were allocated by the xlator.\n     * Check whether there are any buffers which have not been released\n     * back to a mempool.\n     */\n\n    if (arch->handle) {\n        dlclose(arch->handle);\n    }\n\n    if (arch->iobuf_pool) {\n        iobuf_pool_destroy(arch->iobuf_pool);\n    }\n\n    if (arch->req_pool) {\n        mem_pool_destroy(arch->req_pool);\n        arch->req_pool = NULL;\n    }\n\n    return;\n}\n\nstatic int32_t\ncvlt_extract_store_fops(xlator_t *this, archive_t *arch)\n{\n    int32_t op_ret = -1;\n    get_archstore_methods_t get_archstore_methods;\n\n    /*\n     * libopenarchive.so defines methods for performing data management\n     * operations. We will extract the methods from library and these\n     * methods will be invoked for moving data between glusterfs volume\n     * and the data management product.\n     */\n\n    VALIDATE_OR_GOTO(arch, err);\n\n    arch->handle = dlopen(LIBARCHIVE_SO, RTLD_NOW);\n    if (!arch->handle) {\n        gf_msg(plugin, GF_LOG_ERROR, 0, CVLT_DLOPEN_FAILED,\n               \" failed to open %s \", LIBARCHIVE_SO);\n        return op_ret;\n    }\n\n    dlerror(); /* Clear any existing error */\n\n    get_archstore_methods = dlsym(arch->handle, \"get_archstore_methods\");\n    if (!get_archstore_methods) {\n        gf_msg(plugin, GF_LOG_ERROR, 0, CVLT_EXTRACTION_FAILED,\n               \" Error extracting get_archstore_methods()\");\n        dlclose(arch->handle);\n        arch->handle = NULL;\n        return op_ret;\n    }\n\n    op_ret = get_archstore_methods(&(arch->fops));\n    if (op_ret) {\n        gf_msg(plugin, GF_LOG_ERROR, 0, CVLT_EXTRACTION_FAILED,\n               \" Failed to extract methods in get_archstore_methods\");\n        dlclose(arch->handle);\n        arch->handle = NULL;\n        return op_ret;\n    }\n\nerr:\n    return op_ret;\n}\n\nstatic int32_t\ncvlt_alloc_resources(xlator_t *this, archive_t *arch, int num_req, int num_iatt)\n{\n    /*\n     * Initialize information about all the memory pools that will be\n     * used by this xlator.\n     */\n    arch->nreqs = 0;\n\n    arch->req_pool = NULL;\n\n    arch->handle = NULL;\n    arch->xl = this;\n\n    arch->req_pool = mem_pool_new(cvlt_request_t, num_req);\n    if (!arch->req_pool) {\n        goto err;\n    }\n\n    arch->iobuf_pool = iobuf_pool_new();\n    if (!arch->iobuf_pool) {\n        goto err;\n    }\n\n    if (cvlt_extract_store_fops(this, arch)) {\n        goto err;\n    }\n\n    return 0;\n\nerr:\n\n    return -1;\n}\n\nstatic void\ncvlt_req_init(cvlt_request_t *req)\n{\n    sem_init(&(req->sem), 0, 0);\n\n    return;\n}\n\nstatic void\ncvlt_req_destroy(cvlt_request_t *req)\n{\n    if (req->iobuf) {\n        iobuf_unref(req->iobuf);\n    }\n\n    if (req->iobref) {\n        iobref_unref(req->iobref);\n    }\n\n    sem_destroy(&(req->sem));\n\n    return;\n}\n\nstatic cvlt_request_t *\ncvlt_alloc_req(archive_t *arch)\n{\n    cvlt_request_t *reqptr = NULL;\n\n    if (!arch) {\n        goto err;\n    }\n\n    if (arch->req_pool) {\n        reqptr = mem_get0(arch->req_pool);\n        if (reqptr) {\n            cvlt_req_init(reqptr);\n        }\n    }\n\n    if (reqptr) {\n        LOCK(&(arch->lock));\n        arch->nreqs++;\n        UNLOCK(&(arch->lock));\n    }\n\nerr:\n    return reqptr;\n}\n\nstatic int32_t\ncvlt_free_req(archive_t *arch, cvlt_request_t *reqptr)\n{\n    if (!reqptr) {\n        goto err;\n    }\n\n    if (!arch) {\n        goto err;\n    }\n\n    if (arch->req_pool) {\n        /*\n         * Free the request resources if they exist.\n         */\n\n        cvlt_req_destroy(reqptr);\n        mem_put(reqptr);\n\n        LOCK(&(arch->lock));\n        arch->nreqs--;\n        UNLOCK(&(arch->lock));\n    }\n\n    return 0;\n\nerr:\n    return -1;\n}\n\nstatic int32_t\ncvlt_init_xlator(xlator_t *this, archive_t *arch, int num_req, int num_iatt)\n{\n    int32_t ret = -1;\n    int32_t errnum = -1;\n    int32_t locked = 0;\n\n    /*\n     * Perform all the initializations needed for brining up the xlator.\n     */\n    if (!arch) {\n        goto err;\n    }\n\n    LOCK_INIT(&(arch->lock));\n    LOCK(&(arch->lock));\n\n    locked = 1;\n\n    ret = cvlt_alloc_resources(this, arch, num_req, num_iatt);\n\n    if (ret) {\n        goto err;\n    }\n\n    /*\n     * Now that the fops have been extracted initialize the store\n     */\n    ret = arch->fops.init(&(arch->descinfo), &errnum, plugin);\n    if (ret) {\n        goto err;\n    }\n\n    UNLOCK(&(arch->lock));\n    locked = 0;\n    ret = 0;\n\n    return ret;\n\nerr:\n    if (arch) {\n        cvlt_free_resources(arch);\n\n        if (locked) {\n            UNLOCK(&(arch->lock));\n        }\n    }\n\n    return ret;\n}\n\nstatic int32_t\ncvlt_term_xlator(archive_t *arch)\n{\n    int32_t errnum = -1;\n\n    if (!arch) {\n        goto err;\n    }\n\n    LOCK(&(arch->lock));\n\n    /*\n     * Release the resources that have been allocated inside store\n     */\n    arch->fops.fini(&(arch->descinfo), &errnum);\n\n    cvlt_free_resources(arch);\n\n    UNLOCK(&(arch->lock));\n\n    GF_FREE(arch);\n\n    return 0;\n\nerr:\n    return -1;\n}\n\nstatic int32_t\ncvlt_init_store_info(archive_t *priv, archstore_info_t *store_info)\n{\n    if (!store_info) {\n        return -1;\n    }\n\n    store_info->prod = priv->product_id;\n    store_info->prodlen = strlen(priv->product_id);\n\n    store_info->id = priv->store_id;\n    store_info->idlen = strlen(priv->store_id);\n\n    return 0;\n}\n\nstatic int32_t\ncvlt_init_file_info(cs_loc_xattr_t *xattr, archstore_fileinfo_t *file_info)\n{\n    if (!xattr || !file_info) {\n        return -1;\n    }\n\n    gf_uuid_copy(file_info->uuid, xattr->uuid);\n    file_info->path = xattr->file_path;\n    file_info->pathlength = strlen(xattr->file_path);\n\n    return 0;\n}\n\nstatic int32_t\ncvlt_init_gluster_store_info(cs_loc_xattr_t *xattr,\n                             archstore_info_t *store_info)\n{\n    static char *product = \"glusterfs\";\n\n    if (!xattr || !store_info) {\n        return -1;\n    }\n\n    store_info->prod = product;\n    store_info->prodlen = strlen(product);\n\n    store_info->id = xattr->volname;\n    store_info->idlen = strlen(xattr->volname);\n\n    return 0;\n}\n\nstatic int32_t\ncvlt_init_gluster_file_info(cs_loc_xattr_t *xattr,\n                            archstore_fileinfo_t *file_info)\n{\n    if (!xattr || !file_info) {\n        return -1;\n    }\n\n    gf_uuid_copy(file_info->uuid, xattr->gfid);\n    file_info->path = xattr->file_path;\n    file_info->pathlength = strlen(xattr->file_path);\n\n    return 0;\n}\n\nstatic void\ncvlt_copy_stat_info(struct iatt *buf, cs_size_xattr_t *xattrs)\n{\n    /*\n     * If the file was archived then the reported size will not be a\n     * correct one. We need to fix this.\n     */\n    if (buf && xattrs) {\n        buf->ia_size = xattrs->size;\n        buf->ia_blksize = xattrs->blksize;\n        buf->ia_blocks = xattrs->blocks;\n    }\n\n    return;\n}\n\nstatic void\ncvlt_readv_complete(archstore_desc_t *desc, app_callback_info_t *cbkinfo,\n                    void *cookie, int64_t op_ret, int32_t op_errno)\n{\n    struct iovec iov;\n    xlator_t *this = NULL;\n    struct iatt postbuf = {\n        0,\n    };\n    call_frame_t *frame = NULL;\n    cvlt_request_t *req = (cvlt_request_t *)cookie;\n    cs_local_t *local = NULL;\n    cs_private_t *cspriv = NULL;\n    archive_t *priv = NULL;\n\n    frame = req->frame;\n    this = frame->this;\n    local = frame->local;\n\n    cspriv = this->private;\n    priv = (archive_t *)cspriv->stores->config;\n\n    if (strcmp(priv->trailer, CVLT_TRAILER)) {\n        op_ret = -1;\n        op_errno = EINVAL;\n        goto out;\n    }\n\n    gf_msg_debug(plugin, 0,\n                 \" Read callback invoked offset:%\" PRIu64 \"bytes: %\" PRIu64\n                 \" op : %d ret : %\" PRId64 \" errno : %d\",\n                 req->offset, req->bytes, req->op_type, op_ret, op_errno);\n\n    if (op_ret < 0) {\n        goto out;\n    }\n\n    req->iobref = iobref_new();\n    if (!req->iobref) {\n        op_ret = -1;\n        op_errno = ENOMEM;\n        goto out;\n    }\n\n    iobref_add(req->iobref, req->iobuf);\n    iov.iov_base = iobuf_ptr(req->iobuf);\n    iov.iov_len = op_ret;\n\n    cvlt_copy_stat_info(&postbuf, &(req->szxattr));\n\n    /*\n     * Hack to notify higher layers of EOF.\n     */\n    if (!postbuf.ia_size || (req->offset + iov.iov_len >= postbuf.ia_size)) {\n        gf_msg_debug(plugin, 0, \" signalling end-of-file for uuid=%s\",\n                     uuid_utoa(req->file_info.uuid));\n        op_errno = ENOENT;\n    }\n\nout:\n\n    STACK_UNWIND_STRICT(readv, frame, op_ret, op_errno, &iov, 1, &postbuf,\n                        req->iobref, local->xattr_rsp);\n\n    cvlt_free_req(priv, req);\n\n    return;\n}\n\nstatic void\ncvlt_download_complete(archstore_desc_t *store, app_callback_info_t *cbk_info,\n                       void *cookie, int64_t ret, int errcode)\n{\n    cvlt_request_t *req = (cvlt_request_t *)cookie;\n\n    gf_msg_debug(plugin, 0,\n                 \" Download callback invoked  ret : %\" PRId64 \" errno : %d\",\n                 ret, errcode);\n\n    req->op_ret = ret;\n    req->op_errno = errcode;\n    sem_post(&(req->sem));\n\n    return;\n}\n\nvoid *\ncvlt_init(xlator_t *this)\n{\n    int ret = 0;\n    archive_t *priv = NULL;\n\n    if (!this->children || this->children->next) {\n        gf_msg(plugin, GF_LOG_ERROR, ENOMEM, 0,\n               \"should have exactly one child\");\n        ret = -1;\n        goto out;\n    }\n\n    if (!this->parents) {\n        gf_msg(plugin, GF_LOG_ERROR, ENOMEM, 0,\n               \"dangling volume. check volfile\");\n        ret = -1;\n        goto out;\n    }\n\n    priv = GF_CALLOC(1, sizeof(archive_t), gf_libcvlt_mt_cvlt_private_t);\n    if (!priv) {\n        ret = -1;\n        goto out;\n    }\n\n    priv->trailer = CVLT_TRAILER;\n    if (cvlt_init_xlator(this, priv, num_req, num_iatt)) {\n        gf_msg(plugin, GF_LOG_ERROR, ENOMEM, 0, \"xlator init failed\");\n        ret = -1;\n        goto out;\n    }\n\n    GF_OPTION_INIT(\"cloudsync-store-id\", priv->store_id, str, out);\n    GF_OPTION_INIT(\"cloudsync-product-id\", priv->product_id, str, out);\n\n    gf_msg(plugin, GF_LOG_INFO, 0, 0,\n           \"store id is : %s \"\n           \"product id is : %s.\",\n           priv->store_id, priv->product_id);\nout:\n    if (ret == -1) {\n        cvlt_term_xlator(priv);\n        return (NULL);\n    }\n    return priv;\n}\n\nint\ncvlt_reconfigure(xlator_t *this, dict_t *options)\n{\n    cs_private_t *cspriv = NULL;\n    archive_t *priv = NULL;\n\n    cspriv = this->private;\n    priv = (archive_t *)cspriv->stores->config;\n\n    if (strcmp(priv->trailer, CVLT_TRAILER))\n        goto out;\n\n    GF_OPTION_RECONF(\"cloudsync-store-id\", priv->store_id, options, str, out);\n\n    GF_OPTION_RECONF(\"cloudsync-product-id\", priv->product_id, options, str,\n                     out);\n    gf_msg_debug(plugin, 0,\n                 \"store id is : %s \"\n                 \"product id is : %s.\",\n                 priv->store_id, priv->product_id);\n    return 0;\nout:\n    return -1;\n}\n\nvoid\ncvlt_fini(void *config)\n{\n    archive_t *priv = NULL;\n\n    priv = (archive_t *)config;\n\n    if (strcmp(priv->trailer, CVLT_TRAILER))\n        return;\n\n    cvlt_term_xlator(priv);\n    gf_msg(plugin, GF_LOG_INFO, 0, CVLT_FREE, \" released xlator resources\");\n    return;\n}\n\nint\ncvlt_download(call_frame_t *frame, void *config)\n{\n    archive_t *parch = NULL;\n    cs_local_t *local = frame->local;\n    cs_loc_xattr_t *locxattr = local->xattrinfo.lxattr;\n    cvlt_request_t *req = NULL;\n    archstore_info_t dest_storeinfo;\n    archstore_fileinfo_t dest_fileinfo;\n    int32_t op_ret, op_errno;\n\n    parch = (archive_t *)config;\n\n    if (strcmp(parch->trailer, CVLT_TRAILER)) {\n        op_ret = -1;\n        op_errno = EINVAL;\n        goto err;\n    }\n\n    gf_msg_debug(plugin, 0, \" download invoked for uuid = %s  gfid=%s \",\n                 locxattr->uuid, uuid_utoa(locxattr->gfid));\n\n    if (!(parch->fops.restore)) {\n        op_errno = ELIBBAD;\n        goto err;\n    }\n\n    /*\n     * Download needs to be processed. Allocate a request.\n     */\n    req = cvlt_alloc_req(parch);\n\n    if (!req) {\n        gf_msg(plugin, GF_LOG_ERROR, ENOMEM, CVLT_RESOURCE_ALLOCATION_FAILED,\n               \" failed to allocated request for gfid=%s\",\n               uuid_utoa(locxattr->gfid));\n        op_errno = ENOMEM;\n        goto err;\n    }\n\n    /*\n     * Initialize the request object.\n     */\n    req->op_type = CVLT_RESTORE_OP;\n    req->frame = frame;\n\n    /*\n     * The file is currently residing inside a data management store.\n     * To restore the file contents we need to provide the information\n     * about data management store.\n     */\n    op_ret = cvlt_init_store_info(parch, &(req->store_info));\n    if (op_ret < 0) {\n        gf_msg(plugin, GF_LOG_ERROR, 0, CVLT_EXTRACTION_FAILED,\n               \" failed to extract store info for gfid=%s\",\n               uuid_utoa(locxattr->gfid));\n        goto err;\n    }\n\n    op_ret = cvlt_init_file_info(locxattr, &(req->file_info));\n    if (op_ret < 0) {\n        gf_msg(plugin, GF_LOG_ERROR, 0, CVLT_EXTRACTION_FAILED,\n               \" failed to extract file info for gfid=%s\",\n               uuid_utoa(locxattr->gfid));\n        goto err;\n    }\n\n    /*\n     * We need t perform in-place restore of the file from data managment\n     * store to gusterfs volume.\n     */\n    op_ret = cvlt_init_gluster_store_info(locxattr, &dest_storeinfo);\n    if (op_ret < 0) {\n        gf_msg(plugin, GF_LOG_ERROR, 0, CVLT_EXTRACTION_FAILED,\n               \" failed to extract destination store info for gfid=%s\",\n               uuid_utoa(locxattr->gfid));\n        goto err;\n    }\n\n    op_ret = cvlt_init_gluster_file_info(locxattr, &dest_fileinfo);\n    if (op_ret < 0) {\n        gf_msg(plugin, GF_LOG_ERROR, 0, CVLT_EXTRACTION_FAILED,\n               \" failed to extract file info for gfid=%s\",\n               uuid_utoa(locxattr->gfid));\n        goto err;\n    }\n\n    /*\n     * Submit the restore request.\n     */\n    op_ret = parch->fops.restore(&(parch->descinfo), &(req->store_info),\n                                 &(req->file_info), &dest_storeinfo,\n                                 &dest_fileinfo, &op_errno,\n                                 cvlt_download_complete, req);\n    if (op_ret < 0) {\n        gf_msg(plugin, GF_LOG_ERROR, 0, CVLT_RESTORE_FAILED,\n               \" failed to restore file gfid=%s from data managment store\",\n               uuid_utoa(locxattr->gfid));\n        goto err;\n    }\n\n    /*\n     * Wait for the restore to complete.\n     */\n    sem_wait(&(req->sem));\n\n    if (req->op_ret < 0) {\n        gf_msg(plugin, GF_LOG_ERROR, 0, CVLT_RESTORE_FAILED,\n               \" restored failed for gfid=%s\", uuid_utoa(locxattr->gfid));\n        goto err;\n    }\n\n    if (req) {\n        cvlt_free_req(parch, req);\n    }\n\n    return 0;\n\nerr:\n\n    if (req) {\n        cvlt_free_req(parch, req);\n    }\n\n    return -1;\n}\n\nint\ncvlt_read(call_frame_t *frame, void *config)\n{\n    int32_t op_ret = -1;\n    int32_t op_errno = 0;\n    archive_t *parch = NULL;\n    cvlt_request_t *req = NULL;\n    struct iovec iov = {\n        0,\n    };\n    struct iobref *iobref;\n    size_t size = 0;\n    off_t off = 0;\n\n    cs_local_t *local = frame->local;\n    cs_loc_xattr_t *locxattr = local->xattrinfo.lxattr;\n\n    size = local->xattrinfo.size;\n    off = local->xattrinfo.offset;\n\n    parch = (archive_t *)config;\n\n    if (strcmp(parch->trailer, CVLT_TRAILER)) {\n        op_ret = -1;\n        op_errno = EINVAL;\n        goto err;\n    }\n\n    gf_msg_debug(plugin, 0,\n                 \" read invoked for gfid = %s offset = %\" PRIu64\n                 \" file_size = %\" PRIu64,\n                 uuid_utoa(locxattr->gfid), off, local->stbuf.ia_size);\n\n    if (off >= local->stbuf.ia_size) {\n        /*\n         * Hack to notify higher layers of EOF.\n         */\n\n        op_errno = ENOENT;\n        op_ret = 0;\n\n        gf_msg(plugin, GF_LOG_ERROR, 0, CVLT_READ_FAILED,\n               \" reporting end-of-file for gfid=%s\", uuid_utoa(locxattr->gfid));\n\n        goto err;\n    }\n\n    if (!size) {\n        op_errno = EINVAL;\n\n        gf_msg(plugin, GF_LOG_ERROR, 0, CVLT_READ_FAILED,\n               \" zero size read attempted on gfid=%s\",\n               uuid_utoa(locxattr->gfid));\n        goto err;\n    }\n\n    if (!(parch->fops.read)) {\n        op_errno = ELIBBAD;\n        goto err;\n    }\n\n    /*\n     * The read request need to be processed. Allocate a request.\n     */\n    req = cvlt_alloc_req(parch);\n\n    if (!req) {\n        gf_msg(plugin, GF_LOG_ERROR, ENOMEM, CVLT_NO_MEMORY,\n               \" failed to allocated request for gfid=%s\",\n               uuid_utoa(locxattr->gfid));\n        op_errno = ENOMEM;\n        goto err;\n    }\n\n    req->iobuf = iobuf_get_page_aligned(parch->iobuf_pool, size, ALIGN_SIZE);\n    if (!req->iobuf) {\n        op_errno = ENOMEM;\n        goto err;\n    }\n\n    /*\n     * Initialize the request object.\n     */\n    req->op_type = CVLT_READ_OP;\n    req->offset = off;\n    req->bytes = size;\n    req->frame = frame;\n    req->szxattr.size = local->stbuf.ia_size;\n    req->szxattr.blocks = local->stbuf.ia_blocks;\n    req->szxattr.blksize = local->stbuf.ia_blksize;\n\n    /*\n     * The file is currently residing inside a data management store.\n     * To read the file contents we need to provide the information\n     * about data management store.\n     */\n    op_ret = cvlt_init_store_info(parch, &(req->store_info));\n    if (op_ret < 0) {\n        gf_msg(plugin, GF_LOG_ERROR, 0, CVLT_EXTRACTION_FAILED,\n               \" failed to extract store info for gfid=%s\"\n               \" offset=%\" PRIu64 \" size=%\" GF_PRI_SIZET\n               \", \"\n               \" buf=%p\",\n               uuid_utoa(locxattr->gfid), off, size, req->iobuf->ptr);\n        goto err;\n    }\n\n    op_ret = cvlt_init_file_info(locxattr, &(req->file_info));\n    if (op_ret < 0) {\n        gf_msg(plugin, GF_LOG_ERROR, 0, CVLT_EXTRACTION_FAILED,\n               \" failed to extract file info for gfid=%s\"\n               \" offset=%\" PRIu64 \" size=%\" GF_PRI_SIZET\n               \", \"\n               \" buf=%p\",\n               uuid_utoa(locxattr->gfid), off, size, req->iobuf->ptr);\n        goto err;\n    }\n\n    /*\n     * Submit the read request.\n     */\n    op_ret = parch->fops.read(&(parch->descinfo), &(req->store_info),\n                              &(req->file_info), off, req->iobuf->ptr, size,\n                              &op_errno, cvlt_readv_complete, req);\n\n    if (op_ret < 0) {\n        gf_msg(plugin, GF_LOG_ERROR, 0, CVLT_EXTRACTION_FAILED,\n               \" read failed on gfid=%s\"\n               \" offset=%\" PRIu64 \" size=%\" GF_PRI_SIZET\n               \", \"\n               \" buf=%p\",\n               uuid_utoa(locxattr->gfid), off, size, req->iobuf->ptr);\n        goto err;\n    }\n\n    return 0;\n\nerr:\n\n    iobref = iobref_new();\n    gf_msg_debug(plugin, 0, \" read unwinding stack op_ret = %d, op_errno = %d\",\n                 op_ret, op_errno);\n\n    STACK_UNWIND_STRICT(readv, frame, op_ret, op_errno, &iov, 1,\n                        &(local->stbuf), iobref, local->xattr_rsp);\n\n    if (iobref) {\n        iobref_unref(iobref);\n    }\n\n    if (req) {\n        cvlt_free_req(parch, req);\n    }\n\n    return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-glusterfs-7.2-7bafu5wprzvvhnabtlwumqs3qxil5tgh/spack-src/xlators/protocol/server/src/authenticate.c": "/*\n  Copyright (c) 2007-2013 Red Hat, Inc. <http://www.redhat.com>\n  This file is part of GlusterFS.\n\n  This file is licensed to you under your choice of the GNU Lesser\n  General Public License, version 3 or any later version (LGPLv3 or\n  later), or the GNU General Public License, version 2 (GPLv2), in all\n  cases as published by the Free Software Foundation.\n*/\n\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#include <stdio.h>\n#include <dlfcn.h>\n#include <errno.h>\n#include \"authenticate.h\"\n#include \"server-messages.h\"\n\nstatic int\ninit(dict_t *this, char *key, data_t *value, void *data)\n{\n    void *handle = NULL;\n    char *auth_file = NULL;\n    auth_handle_t *auth_handle = NULL;\n    auth_fn_t authenticate = NULL;\n    int *error = NULL;\n    int ret = 0;\n\n    /* It gets over written */\n    error = data;\n\n    if (!strncasecmp(key, \"ip\", SLEN(\"ip\"))) {\n        gf_msg(\"authenticate\", GF_LOG_ERROR, 0, PS_MSG_AUTHENTICATE_ERROR,\n               \"AUTHENTICATION MODULE \"\n               \"\\\"IP\\\" HAS BEEN REPLACED BY \\\"ADDR\\\"\");\n        dict_set(this, key, data_from_dynptr(NULL, 0));\n        /* TODO: 1.3.x backward compatibility */\n        // *error = -1;\n        // return;\n        key = \"addr\";\n    }\n\n    ret = gf_asprintf(&auth_file, \"%s/%s.so\", LIBDIR, key);\n    if (-1 == ret) {\n        dict_set(this, key, data_from_dynptr(NULL, 0));\n        *error = -1;\n        return -1;\n    }\n\n    handle = dlopen(auth_file, RTLD_LAZY);\n    if (!handle) {\n        gf_msg(\"authenticate\", GF_LOG_ERROR, 0, PS_MSG_AUTHENTICATE_ERROR,\n               \"dlopen(%s): %s\\n\", auth_file, dlerror());\n        dict_set(this, key, data_from_dynptr(NULL, 0));\n        GF_FREE(auth_file);\n        *error = -1;\n        return -1;\n    }\n    GF_FREE(auth_file);\n\n    authenticate = dlsym(handle, \"gf_auth\");\n    if (!authenticate) {\n        gf_msg(\"authenticate\", GF_LOG_ERROR, 0, PS_MSG_AUTHENTICATE_ERROR,\n               \"dlsym(gf_auth) on %s\\n\", dlerror());\n        dict_set(this, key, data_from_dynptr(NULL, 0));\n        dlclose(handle);\n        *error = -1;\n        return -1;\n    }\n\n    auth_handle = GF_CALLOC(1, sizeof(*auth_handle),\n                            gf_common_mt_auth_handle_t);\n    if (!auth_handle) {\n        dict_set(this, key, data_from_dynptr(NULL, 0));\n        *error = -1;\n        dlclose(handle);\n        return -1;\n    }\n    auth_handle->vol_opt = GF_CALLOC(1, sizeof(volume_opt_list_t),\n                                     gf_common_mt_volume_opt_list_t);\n    if (!auth_handle->vol_opt) {\n        dict_set(this, key, data_from_dynptr(NULL, 0));\n        *error = -1;\n        GF_FREE(auth_handle);\n        dlclose(handle);\n        return -1;\n    }\n    auth_handle->vol_opt->given_opt = dlsym(handle, \"options\");\n    if (auth_handle->vol_opt->given_opt == NULL) {\n        gf_msg_debug(\"authenticate\", 0,\n                     \"volume option validation \"\n                     \"not specified\");\n    }\n\n    auth_handle->authenticate = authenticate;\n    auth_handle->handle = handle;\n\n    dict_set(this, key, data_from_dynptr(auth_handle, sizeof(*auth_handle)));\n    return 0;\n}\n\nstatic int\nfini(dict_t *this, char *key, data_t *value, void *data)\n{\n    auth_handle_t *handle = data_to_ptr(value);\n    if (handle) {\n        dlclose(handle->handle);\n    }\n    return 0;\n}\n\nstatic int\n_gf_auth_option_validate(dict_t *d, char *k, data_t *v, void *tmp)\n{\n    auth_handle_t *handle = NULL;\n    xlator_t *xl = NULL;\n    int ret = 0;\n\n    xl = tmp;\n\n    handle = data_to_ptr(v);\n    if (!handle)\n        return 0;\n\n    list_add_tail(&(handle->vol_opt->list), &(xl->volume_options));\n\n    ret = xlator_options_validate_list(xl, xl->options, handle->vol_opt, NULL);\n    if (ret) {\n        gf_msg(\"authenticate\", GF_LOG_ERROR, 0, PS_MSG_VOL_VALIDATE_FAILED,\n               \"volume option validation \"\n               \"failed\");\n        return -1;\n    }\n    return 0;\n}\n\nint32_t\ngf_auth_init(xlator_t *xl, dict_t *auth_modules)\n{\n    int ret = 0;\n\n    dict_foreach(auth_modules, init, &ret);\n    if (ret)\n        goto out;\n\n    ret = dict_foreach(auth_modules, _gf_auth_option_validate, xl);\n\nout:\n    if (ret) {\n        gf_msg(xl->name, GF_LOG_ERROR, 0, PS_MSG_AUTH_INIT_FAILED,\n               \"authentication init failed\");\n        dict_foreach(auth_modules, fini, &ret);\n        ret = -1;\n    }\n    return ret;\n}\n\ntypedef struct {\n    dict_t *iparams;\n    dict_t *cparams;\n    int64_t result;\n} gf_auth_args_t;\n\nstatic int\ngf_auth_one_method(dict_t *this, char *key, data_t *value, void *data)\n{\n    gf_auth_args_t *args = data;\n    auth_handle_t *handle = NULL;\n\n    if (!value) {\n        return 0;\n    }\n\n    handle = data_to_ptr(value);\n    if (!handle || !handle->authenticate) {\n        return 0;\n    }\n\n    switch (handle->authenticate(args->iparams, args->cparams)) {\n        case AUTH_ACCEPT:\n            if (args->result != AUTH_REJECT) {\n                args->result = AUTH_ACCEPT;\n            }\n            /* FALLTHROUGH */\n        default:\n            return 0;\n        case AUTH_REJECT:\n            args->result = AUTH_REJECT;\n            return -1;\n    }\n}\n\nauth_result_t\ngf_authenticate(dict_t *input_params, dict_t *config_params,\n                dict_t *auth_modules)\n{\n    char *name = NULL;\n    data_t *peerinfo_data = NULL;\n    gf_auth_args_t args;\n\n    args.iparams = input_params;\n    args.cparams = config_params;\n    args.result = AUTH_DONT_CARE;\n\n    dict_foreach(auth_modules, gf_auth_one_method, &args);\n\n    if (AUTH_DONT_CARE == args.result) {\n        peerinfo_data = dict_get(input_params, \"peer-info-name\");\n\n        if (peerinfo_data) {\n            name = peerinfo_data->data;\n        }\n\n        gf_msg(\"auth\", GF_LOG_ERROR, 0, PS_MSG_REMOTE_CLIENT_REFUSED,\n               \"no authentication module is interested in \"\n               \"accepting remote-client %s\",\n               name);\n        args.result = AUTH_REJECT;\n    }\n\n    return args.result;\n}\n\nvoid\ngf_auth_fini(dict_t *auth_modules)\n{\n    int32_t dummy;\n\n    dict_foreach(auth_modules, fini, &dummy);\n}\n"
    },
    "skipped": [],
    "total_files": 2186
}