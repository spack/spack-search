{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.1.3-jlcavlngglayq5hx6645trhh2qf5ncm7/spack-src/README.md": "README for mbed TLS\n===================\n\nConfiguration\n-------------\n\nmbed TLS should build out of the box on most systems. Some platform specific options are available in the fully-documented configuration file `include/mbedtls/config.h`, which is also the place where features can be selected. This file can be edited manually, or in a more programmatic way using the Perl script `scripts/config.pl` (use `--help` for usage instructions).\n\nCompiler options can be set using standard variables such as `CC` and `CFLAGS` when using the Make and CMake build system (see below).\n\nCompiling\n---------\n\nThere are currently four active build systems within the mbed TLS releases:\n\n-   yotta\n-   Make\n-   CMake\n-   Microsoft Visual Studio (Visual Studio 6 and Visual Studio 2010)\n\nThe main systems used for development are CMake and yotta. Those systems are always complete and up-to-date. The others should reflect all changes present in the CMake and yotta build system, but some features are not ported there by default.\n\nPlease note that the yotta option is slightly different from the other build systems:\n\n-   a more minimalistic configuration file is used by default\n-   depending on the yotta target, features of mbed OS will be used in examples and tests\n\nThe Make and CMake build systems create three libraries: libmbedcrypto, libmbedx509, and libmbedtls. Note that libmbedtls depends on libmbedx509 and libmbedcrypto, and libmbedx509 depends on libmbedcrypto. As a result, some linkers will expect flags to be in a specific order, for example the GNU linker wants `-lmbedtls -lmbedx509 -lmbedcrypto`. Also, when loading shared libraries using dlopen(), you'll need to load libmbedcrypto first, then libmbedx509, before you can load libmbedtls.\n\n### Yotta\n\n[yotta](http://yottabuild.org) is a package manager and build system developed by mbed; it is the build system of mbed OS. To install it on your platform, please follow the yotta [installation instructions](http://docs.yottabuild.org/#installing).\n\nOnce yotta is installed, you can use it to download the latest version of mbed TLS form the yotta registry with:\n\n    yotta install mbedtls\n\nand build it with:\n\n    yotta build\n\nIf, on the other hand, you already have a copy of mbed TLS from a source other than the yotta registry, for example from cloning our github repository, or from downloading a tarball of the standalone edition, then you'll need first need to generate the yotta module by running:\n\n    yotta/create-module.sh\n\nfrom the mbed TLS root directory. This will create the yotta module in the `yotta/module` directory. You can then change to that directory and build as usual:\n\n    cd yotta/module\n    yotta build\n\nIn any case, you'll probably want to set the yotta target before building unless it's already set globally; for more information on using yotta, please consult the [yotta documentation](http://docs.yottabuild.org/).\n\nThe yotta edition of mbed TLS includes a few example programs, some of which demonstrate integration with mbed OS; for more details, please consult the [Readme at the root of the yotta module](https://github.com/ARMmbed/mbedtls/blob/development/yotta/data/README.md).\n\n### Make\n\nWe intentionally only use the absolute minimum of `Make` functionality, as a lot of `Make` features are not supported on all different implementations of Make on different platforms. As such, the Makefiles sometimes require some handwork or export statements in order to work for your platform.\n\nIn order to build the source using Make, just enter at the command line:\n\n    make\n\nIn order to run the tests, enter:\n\n    make check\n\nThe tests need Perl to be built and run. If you don't have Perl installed, you can skip building the tests with:\n\n    make no_test\n\nYou'll still be able to run a much smaller set of tests with:\n\n    programs/test/selftest\n\nIn order to build for a Windows platform, you should use `WINDOWS_BUILD=1` if the target is Windows but the build environment is Unix-like (for instance when cross-compiling, or compiling from an MSYS shell), and `WINDOWS=1` if the build environment is a Windows shell (for instance using mingw32-make) (in that case some targets will not be available).\n\nSetting the variable `SHARED` in your environment will build shared libraries in addition to the static libraries. Setting `DEBUG` gives you a debug build. You can override `CFLAGS` and `LDFLAGS` by setting them in your environment or on the make command line; if you do so, essential parts such as `-I` will still be preserved. Warning options may be overridden separately using `WARNING_CFLAGS`.\n\nDepending on your platform, you might run into some issues. Please check the Makefiles in `library/`, `programs/` and `tests/` for options to manually add or remove for specific platforms. You can also check [the mbed TLS Knowledge Base](https://tls.mbed.org/kb) for articles on your platform or issue.\n\nIn case you find that you need to do something else as well, please let us know what, so we can add it to the KB.\n\n### CMake\n\nIn order to build the source using CMake, just enter at the command line:\n\n    cmake .\n    make\n\nIn order to run the tests, enter:\n\n    make test\n\nThe test suites need Perl to be built. If you don't have Perl installed, you'll want to disable the test suites with:\n\n    cmake -DENABLE_TESTING=Off .\n\nIf you disabled the test suites, but kept the programs enabled, you can still run a much smaller set of tests with:\n\n    programs/test/selftest\n\nTo configure CMake for building shared libraries, use:\n\n    cmake -DUSE_SHARED_MBEDTLS_LIBRARY=On .\n\nThere are many different build modes available within the CMake buildsystem. Most of them are available for gcc and clang, though some are compiler-specific:\n\n-   Release. This generates the default code without any unnecessary information in the binary files.\n-   Debug. This generates debug information and disables optimization of the code.\n-   Coverage. This generates code coverage information in addition to debug information.\n-   ASan. This instruments the code with AddressSanitizer to check for memory errors. (This includes LeakSanitizer, with recent version of gcc and clang.) (With recent version of clang, this mode also instruments the code with UndefinedSanitizer to check for undefined behaviour.)\n-   ASanDbg. Same as ASan but slower, with debug information and better stack traces.\n-   MemSan. This instruments the code with MemorySanitizer to check for uninitialised memory reads. Experimental, needs recent clang on Linux/x86\\_64.\n-   MemSanDbg. Same as MemSan but slower, with debug information, better stack traces and origin tracking.\n-   Check. This activates the compiler warnings that depend on optimization and treats all warnings as errors.\n\nSwitching build modes in CMake is simple. For debug mode, enter at the command line:\n\n    cmake -D CMAKE_BUILD_TYPE=Debug .\n\nTo list other available CMake options, use:\n\n    cmake -LH\n\nNote that, with CMake, if you want to change the compiler or its options after you already ran CMake, you need to clear its cache first, e.g. (using GNU find):\n\n    find . -iname '*cmake*' -not -name CMakeLists.txt -exec rm -rf {} +\n    CC=gcc CFLAGS='-fstack-protector-strong -Wa,--noexecstack' cmake .\n\n### Microsoft Visual Studio\n\nThe build files for Microsoft Visual Studio are generated for Visual Studio 2010.\n\nThe solution file `mbedTLS.sln` contains all the basic projects needed to build the library and all the programs. The files in tests are not generated and compiled, as these need a perl environment as well. However, the selftest program in `programs/test/` is still available.\n\nExample programs\n----------------\n\nWe've included example programs for a lot of different features and uses in `programs/`. Most programs only focus on a single feature or usage scenario, so keep that in mind when copying parts of the code.\n\nTests\n-----\n\nmbed TLS includes an elaborate test suite in `tests/` that initially requires Perl to generate the tests files (e.g. `test\\_suite\\_mpi.c`). These files are generated from a `function file` (e.g. `suites/test\\_suite\\_mpi.function`) and a `data file` (e.g. `suites/test\\_suite\\_mpi.data`). The `function file` contains the test functions. The `data file` contains the test cases, specified as parameters that will be passed to the test function.\n\nFor machines with a Unix shell and OpenSSL (and optionally GnuTLS) installed, additional test scripts are available:\n\n-   `tests/ssl-opt.sh` runs integration tests for various TLS options (renegotiation, resumption, etc.) and tests interoperability of these options with other implementations.\n-   `tests/compat.sh` tests interoperability of every ciphersuite with other implementations.\n-   `tests/scripts/test-ref-configs.pl` test builds in various reduced configurations.\n-   `tests/scripts/key-exchanges.pl` test builds in configurations with a single key exchange enabled\n-   `tests/scripts/all.sh` runs a combination of the above tests, plus some more, with various build options (such as ASan, full `config.h`, etc).\n\nConfigurations\n--------------\n\nWe provide some non-standard configurations focused on specific use cases in the `configs/` directory. You can read more about those in `configs/README.txt`\n\nContributing\n------------\n\nWe gratefully accept bug reports and contributions from the community. There are some requirements we need to fulfill in order to be able to integrate contributions:\n\n-   Simple bug fixes to existing code do not contain copyright themselves and we can integrate without issue. The same is true of trivial contributions.\n-   For larger contributions, such as a new feature, the code can possibly fall under copyright law. We then need your consent to share in the ownership of the copyright. We have a form for this, which we will send to you in case you submit a contribution or pull request that we deem this necessary for.\n\n### Process\n\n1.  [Check for open issues](https://github.com/ARMmbed/mbedtls/issues) or [start a discussion](https://tls.mbed.org/discussions) around a feature idea or a bug.\n2.  Fork the [mbed TLS repository on GitHub](https://github.com/ARMmbed/mbedtls) to start making your changes. As a general rule, you should use the \"development\" branch as a basis.\n3.  Write a test which shows that the bug was fixed or that the feature works as expected.\n4.  Send a pull request and bug us until it gets merged and published. We will include your name in the ChangeLog :)\n\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.1.3-jlcavlngglayq5hx6645trhh2qf5ncm7/spack-src/tests/data_files/ec_prv.noopt.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.1.3-jlcavlngglayq5hx6645trhh2qf5ncm7/spack-src/tests/data_files/pkcs8_pbe_sha1_3des.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.1.3-jlcavlngglayq5hx6645trhh2qf5ncm7/spack-src/tests/data_files/ec_pub.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.1.3-jlcavlngglayq5hx6645trhh2qf5ncm7/spack-src/tests/data_files/pkcs8_pbes2_pbkdf2_3des.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.1.3-jlcavlngglayq5hx6645trhh2qf5ncm7/spack-src/tests/data_files/format_pkcs12.fmt",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.1.3-jlcavlngglayq5hx6645trhh2qf5ncm7/spack-src/tests/data_files/ec_prv.pk8.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.1.3-jlcavlngglayq5hx6645trhh2qf5ncm7/spack-src/tests/data_files/ec_prv.specdom.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.1.3-jlcavlngglayq5hx6645trhh2qf5ncm7/spack-src/tests/data_files/ec_prv.sec1.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.1.3-jlcavlngglayq5hx6645trhh2qf5ncm7/spack-src/tests/data_files/ec_prv.pk8.pw.der"
    ],
    "total_files": 657
}