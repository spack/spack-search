{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/README.md": "README for Mbed TLS\n===================\n\nMbed TLS is a C library that implements cryptographic primitives, X.509 certificate manipulation and the SSL/TLS and DTLS protocols. Its small code footprint makes it suitable for embedded systems.\n\nConfiguration\n-------------\n\nMbed TLS should build out of the box on most systems. Some platform specific options are available in the fully documented configuration file `include/mbedtls/config.h`, which is also the place where features can be selected. This file can be edited manually, or in a more programmatic way using the Perl script `scripts/config.pl` (use `--help` for usage instructions).\n\nCompiler options can be set using conventional environment variables such as `CC` and `CFLAGS` when using the Make and CMake build system (see below).\n\nCompiling\n---------\n\nThere are currently three active build systems used within Mbed TLS releases:\n\n-   GNU Make\n-   CMake\n-   Microsoft Visual Studio (Microsoft Visual Studio 2010 or later)\n\nThe main systems used for development are CMake and GNU Make. Those systems are always complete and up-to-date. The others should reflect all changes present in the CMake and Make build system, although features may not be ported there automatically.\n\nThe Make and CMake build systems create three libraries: libmbedcrypto, libmbedx509, and libmbedtls. Note that libmbedtls depends on libmbedx509 and libmbedcrypto, and libmbedx509 depends on libmbedcrypto. As a result, some linkers will expect flags to be in a specific order, for example the GNU linker wants `-lmbedtls -lmbedx509 -lmbedcrypto`. Also, when loading shared libraries using dlopen(), you'll need to load libmbedcrypto first, then libmbedx509, before you can load libmbedtls.\n\n### Make\n\nWe require GNU Make. To build the library and the sample programs, GNU Make and a C compiler are sufficient. Some of the more advanced build targets require some Unix/Linux tools.\n\nWe intentionally only use a minimum of functionality in the makefiles in order to keep them as simple and independent of different toolchains as possible, to allow users to more easily move between different platforms. Users who need more features are recommended to use CMake.\n\nIn order to build from the source code using GNU Make, just enter at the command line:\n\n    make\n\nIn order to run the tests, enter:\n\n    make check\n\nThe tests need Python to be built and Perl to be run. If you don't have one of them installed, you can skip building the tests with:\n\n    make no_test\n\nYou'll still be able to run a much smaller set of tests with:\n\n    programs/test/selftest\n\nIn order to build for a Windows platform, you should use `WINDOWS_BUILD=1` if the target is Windows but the build environment is Unix-like (for instance when cross-compiling, or compiling from an MSYS shell), and `WINDOWS=1` if the build environment is a Windows shell (for instance using mingw32-make) (in that case some targets will not be available).\n\nSetting the variable `SHARED` in your environment will build shared libraries in addition to the static libraries. Setting `DEBUG` gives you a debug build. You can override `CFLAGS` and `LDFLAGS` by setting them in your environment or on the make command line; compiler warning options may be overridden separately using `WARNING_CFLAGS`. Some directory-specific options (for example, `-I` directives) are still preserved.\n\nPlease note that setting `CFLAGS` overrides its default value of `-O2` and setting `WARNING_CFLAGS` overrides its default value (starting with `-Wall -W`), so if you just want to add some warning options to the default ones, you can do so by setting `CFLAGS=-O2 -Werror` for example. Setting `WARNING_CFLAGS` is useful when you want to get rid of its default content (for example because your compiler doesn't accept `-Wall` as an option). Directory-specific options cannot be overridden from the command line.\n\nDepending on your platform, you might run into some issues. Please check the Makefiles in `library/`, `programs/` and `tests/` for options to manually add or remove for specific platforms. You can also check [the Mbed TLS Knowledge Base](https://tls.mbed.org/kb) for articles on your platform or issue.\n\nIn case you find that you need to do something else as well, please let us know what, so we can add it to the [Mbed TLS Knowledge Base](https://tls.mbed.org/kb).\n\n### CMake\n\nIn order to build the source using CMake in a separate directory (recommended), just enter at the command line:\n\n    mkdir /path/to/build_dir && cd /path/to/build_dir\n    cmake /path/to/mbedtls_source\n    make\n\nIn order to run the tests, enter:\n\n    make test\n\nThe test suites need Python to be built and Perl to be executed. If you don't have one of these installed, you'll want to disable the test suites with:\n\n    cmake -DENABLE_TESTING=Off /path/to/mbedtls_source\n\nIf you disabled the test suites, but kept the programs enabled, you can still run a much smaller set of tests with:\n\n    programs/test/selftest\n\nTo configure CMake for building shared libraries, use:\n\n    cmake -DUSE_SHARED_MBEDTLS_LIBRARY=On /path/to/mbedtls_source\n\nThere are many different build modes available within the CMake buildsystem. Most of them are available for gcc and clang, though some are compiler-specific:\n\n-   `Release`. This generates the default code without any unnecessary information in the binary files.\n-   `Debug`. This generates debug information and disables optimization of the code.\n-   `Coverage`. This generates code coverage information in addition to debug information.\n-   `ASan`. This instruments the code with AddressSanitizer to check for memory errors. (This includes LeakSanitizer, with recent version of gcc and clang.) (With recent version of clang, this mode also instruments the code with UndefinedSanitizer to check for undefined behaviour.)\n-   `ASanDbg`. Same as ASan but slower, with debug information and better stack traces.\n-   `MemSan`. This instruments the code with MemorySanitizer to check for uninitialised memory reads. Experimental, needs recent clang on Linux/x86\\_64.\n-   `MemSanDbg`. Same as MemSan but slower, with debug information, better stack traces and origin tracking.\n-   `Check`. This activates the compiler warnings that depend on optimization and treats all warnings as errors.\n\nSwitching build modes in CMake is simple. For debug mode, enter at the command line:\n\n    cmake -D CMAKE_BUILD_TYPE=Debug /path/to/mbedtls_source\n\nTo list other available CMake options, use:\n\n    cmake -LH\n\nNote that, with CMake, you can't adjust the compiler or its flags after the\ninitial invocation of cmake. This means that `CC=your_cc make` and `make\nCC=your_cc` will *not* work (similarly with `CFLAGS` and other variables).\nThese variables need to be adjusted when invoking cmake for the first time,\nfor example:\n\n    CC=your_cc cmake /path/to/mbedtls_source\n\nIf you already invoked cmake and want to change those settings, you need to\nremove the build directory and create it again.\n\nNote that it is possible to build in-place; this will however overwrite the\nprovided Makefiles (see `scripts/tmp_ignore_makefiles.sh` if you want to\nprevent `git status` from showing them as modified). In order to do so, from\nthe Mbed TLS source directory, use:\n\n    cmake .\n    make\n\nIf you want to change `CC` or `CFLAGS` afterwards, you will need to remove the\nCMake cache. This can be done with the following command using GNU find:\n\n    find . -iname '*cmake*' -not -name CMakeLists.txt -exec rm -rf {} +\n\nYou can now make the desired change:\n\n    CC=your_cc cmake .\n    make\n\nRegarding variables, also note that if you set CFLAGS when invoking cmake,\nyour value of CFLAGS doesn't override the content provided by cmake (depending\non the build mode as seen above), it's merely prepended to it.\n\n### Microsoft Visual Studio\n\nThe build files for Microsoft Visual Studio are generated for Visual Studio 2010.\n\nThe solution file `mbedTLS.sln` contains all the basic projects needed to build the library and all the programs. The files in tests are not generated and compiled, as these need Python and perl environments as well. However, the selftest program in `programs/test/` is still available.\n\nExample programs\n----------------\n\nWe've included example programs for a lot of different features and uses in [`programs/`](programs/README.md). Most programs only focus on a single feature or usage scenario, so keep that in mind when copying parts of the code.\n\nTests\n-----\n\nMbed TLS includes an elaborate test suite in `tests/` that initially requires Python to generate the tests files (e.g. `test\\_suite\\_mpi.c`). These files are generated from a `function file` (e.g. `suites/test\\_suite\\_mpi.function`) and a `data file` (e.g. `suites/test\\_suite\\_mpi.data`). The `function file` contains the test functions. The `data file` contains the test cases, specified as parameters that will be passed to the test function.\n\nFor machines with a Unix shell and OpenSSL (and optionally GnuTLS) installed, additional test scripts are available:\n\n-   `tests/ssl-opt.sh` runs integration tests for various TLS options (renegotiation, resumption, etc.) and tests interoperability of these options with other implementations.\n-   `tests/compat.sh` tests interoperability of every ciphersuite with other implementations.\n-   `tests/scripts/test-ref-configs.pl` test builds in various reduced configurations.\n-   `tests/scripts/key-exchanges.pl` test builds in configurations with a single key exchange enabled\n-   `tests/scripts/all.sh` runs a combination of the above tests, plus some more, with various build options (such as ASan, full `config.h`, etc).\n\nConfigurations\n--------------\n\nWe provide some non-standard configurations focused on specific use cases in the `configs/` directory. You can read more about those in `configs/README.txt`\n\nPorting Mbed TLS\n----------------\n\nMbed TLS can be ported to many different architectures, OS's and platforms. Before starting a port, you may find the following Knowledge Base articles useful:\n\n-   [Porting Mbed TLS to a new environment or OS](https://tls.mbed.org/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS)\n-   [What external dependencies does Mbed TLS rely on?](https://tls.mbed.org/kb/development/what-external-dependencies-does-mbedtls-rely-on)\n-   [How do I configure Mbed TLS](https://tls.mbed.org/kb/compiling-and-building/how-do-i-configure-mbedtls)\n\nLicense\n-------\n\nUnless specifically indicated otherwise in a file, Mbed TLS files are provided under the [Apache-2.0](https://spdx.org/licenses/Apache-2.0.html) OR [GPL-2.0-or-later](https://spdx.org/licenses/GPL-2.0-or-later.html) licenses. A copy of these licenses can be found in [apache-2.0.txt](./apache-2.0.txt) and [gpl-2.0.txt](./gpl-2.0.txt). Contributors must accept that their contributions are made under both the Apache-2.0 AND GPL-2.0-or-later licenses.\n\nContributing\n------------\n\nWe gratefully accept bug reports and contributions from the community. Please see the [contributing guidelines](CONTRIBUTING.md) for details on how to do this.\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs1_2048_public.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/server2-sha256.crt.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_4096_des_sha384.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_2048_des_sha512.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_2048_3des_sha256.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_2048_des.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/server2.key.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/test-ca-sha1.crt.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_1024_3des_sha384.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbe_sha1_2048_rc4_128.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/cli-rsa-sha256.key.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/server5-der8.crt",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_1024_3des_sha256.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_4096_3des_sha384.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/server5.key.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_1024_des.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_2048_3des.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbe_sha1_1024_3des.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/ec_pub.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbe_sha1_4096_2des.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_4096_des_sha512.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_4096_3des_sha224.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_1024_des_sha256.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/secp521r1_prv.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_1024_3des_sha512.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_2048_des_sha224.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_1024_3des.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/server5-der0.crt",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbe_sha1_1024_2des.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/server2.crt.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/test-ca.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_1024_des_sha384.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_4096_3des.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_4096_des_sha256.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_1024_public.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/ec_prv.pk8nopubparam.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_1024_des_sha224.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_2048_3des_sha512.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbe_sha1_4096_3des.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/cli-rsa-sha256-badalg.crt.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/server2.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/cli2.key.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/ec_prv.pk8nopub.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/format_pkcs12.fmt",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/test-ca.key.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/cli2.crt.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/server5-der4.crt",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_2048_3des_sha224.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_2048_public.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/cli-rsa-sha256.crt.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/server5-der1b.crt",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/test-ca2.key.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_4096_des.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_4096_des_sha224.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/ec_prv.pk8.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_1024_des_sha512.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbe_sha1_2048_3des.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/server5.crt.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/ec_prv.specdom.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_4096_3des_sha256.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbe_sha1_2048_2des.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/server1.crt.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/server5-der2.crt",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/server1.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/server5-der9.crt",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_2048_3des_sha384.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_2048_des_sha256.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbe_sha1_1024_rc4_128.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/ec_prv.pk8param.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/test-ca-sha256.crt.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/ec_prv.sec1.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/test-ca.crt.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/ec_prv.pk8.pw.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_1024_3des_sha224.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/server5-der1a.crt",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbe_sha1_4096_rc4_128.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/cli-rsa.key.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_4096_3des_sha512.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/test-ca2.crt.der",
        "/tmp/vanessa/spack-stage/spack-stage-mbedtls-2.16.9-5zzifiwtbty6wrg32wfhz4ulficqu7s2/spack-src/tests/data_files/rsa_pkcs8_pbes2_pbkdf2_2048_des_sha384.der"
    ],
    "total_files": 992
}