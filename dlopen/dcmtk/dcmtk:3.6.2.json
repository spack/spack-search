{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-dcmtk-3.6.2-elvbyzfcym6jgicfip6mstufpq2wlfqb/spack-src/config/configure.in": "dnl Process this file with autoconf to produce a configure script.\nAC_INIT(dcmtk, 3.6.2, [bugs@dcmtk.org], [dcmtk-3.6.2], [http://www.dcmtk.org/])\nAC_PREREQ(2.60)\nAC_CONFIG_SRCDIR(Makefile.in)\nAC_CONFIG_HEADER(include/dcmtk/config/osconfig.h)\n\nm4_include([stdcxx.m4])\n\ndnl -------------------------------------------------------\ndnl Additional Package Information\ndnl -------------------------------------------------------\n\nPACKAGE_VERSION_NUMBER=362\nPACKAGE_VERSION_SUFFIX=\"\"\nPACKAGE_DATE=\"2017-07-14\"\n\nAC_DEFINE_UNQUOTED(PACKAGE_VERSION_NUMBER,${PACKAGE_VERSION_NUMBER},[Define to the version number of this package.])\nAC_DEFINE_UNQUOTED(PACKAGE_VERSION_SUFFIX,\"${PACKAGE_VERSION_SUFFIX}\",[Define to the version suffix of this package.])\nAC_DEFINE_UNQUOTED(PACKAGE_DATE,\"${PACKAGE_DATE}\",[Define to the release date of this package.])\n\nAC_SUBST(PACKAGE_VERSION_NUMBER)\nAC_SUBST(PACKAGE_VERSION_SUFFIX)\nAC_SUBST(PACKAGE_DATE)\n\ndnl -------------------------------------------------------\ndnl Identify the host platform we're compiling for,\ndnl using config.guess and config.sub.\ndnl -------------------------------------------------------\n\nAC_CANONICAL_HOST\nAC_DEFINE_UNQUOTED(CANONICAL_HOST_TYPE, \"${host}\", [Define the canonical host system type as a string constant.])\n\ncase \"${host}\" in\n\t*-*-cygwin)\n\t  BINEXT=\".exe\"\n\t  ;;\n\t*-*-mingw32)\n\t  BINEXT=\".exe\"\n\t  ;;\n\t*)\n\t  BINEXT=\"\"\n\t  ;;\nesac\n\ndnl -------------------------------------------------------\ndnl Configuration Utilities\ndnl -------------------------------------------------------\n\nif test \"x$prefix\" = xNONE ; then\nAC_DEFINE_UNQUOTED(DCMTK_PREFIX, \"${ac_default_prefix}\", [Define the DCMTK default path.])\nelse\nAC_DEFINE_UNQUOTED(DCMTK_PREFIX, \"${prefix}\", [Define the DCMTK default path.])\nfi\n\nDATA_DIR=\"${datadir}\"\nDATA_DIR=`(\n\ttest \"$prefix\" = NONE && prefix=${ac_default_prefix}\n\ttest \"$exec_prefix\" = NONE && exec_prefix=${prefix}\n\teval eval echo \"$DATA_DIR\"\n)`\nAC_DEFINE_UNQUOTED(DCM_DICT_DEFAULT_PATH, \"${DATA_DIR}/dicom.dic\", [Define the default data dictionary path for the dcmdata library package.])\nAC_DEFINE_UNQUOTED(DEFAULT_SUPPORT_DATA_DIR, \"${DATA_DIR}/\", [Define the default directory where support data files reside.])\n\nCONF_DIR=\"${sysconfdir}\"\nCONF_DIR=`(\n\ttest \"$prefix\" = NONE && prefix=${ac_default_prefix}\n\ttest \"$exec_prefix\" = NONE && exec_prefix=${prefix}\n\teval echo \"$CONF_DIR\"\n)`\nAC_DEFINE_UNQUOTED(DEFAULT_CONFIGURATION_DIR, \"${CONF_DIR}/\", [Define the default directory where configuration files reside.])\n\nAH_VERBATIM([PATH_SEPARATOR], [/* Define path separator. */\n#define PATH_SEPARATOR '/'])\n\nAH_VERBATIM([ENVIRONMENT_PATH_SEPARATOR], [/* Define the environment variable path separator. */\n#ifndef ENVIRONMENT_PATH_SEPARATOR\n#define ENVIRONMENT_PATH_SEPARATOR ':'\n#endif])\n\nAH_VERBATIM([HAVE_EMPTY_ARGC_ARGV], [/* Define if your system cannot pass command line arguments into main() (e.g. Macintosh). */\n/* #undef HAVE_EMPTY_ARGC_ARGV */])\n\nAH_TOP([#ifndef OSCONFIG_H\n#define OSCONFIG_H\n\n/*\n** Define enclosures for include files with C linkage (mostly system headers)\n*/\n#ifdef __cplusplus\n#define BEGIN_EXTERN_C extern \"C\" {\n#define END_EXTERN_C }\n#else\n#define BEGIN_EXTERN_C\n#define END_EXTERN_C\n#endif\n\n/* MinGW needs some special handling because it is a mixture of WIN32 and Posix.\n * The following settings are not tested by configure but need to be set for MinGW.\n */\n#ifdef __MINGW32__\n#define HAVE_WINDOWS_H 1\n#define HAVE_WINSOCK_H 1\n#define ENVIRONMENT_PATH_SEPARATOR ';'\n#endif])\n\nAH_BOTTOM([#if defined(HAVE_CXX11) && defined(__cplusplus) && __cplusplus < 201103L\n#error\\\nDCMTK was configured to use C++11 features, but your compiler does not or was not configured to provide them.\n#endif\n\n#endif /* OSCONFIG_H */])\n\n\ndnl Include general file\nsinclude(general.m4)dnl\n\nAC_CONFIG_AUX_DIR([.])\n\ndnl Checks for programs.\n\nAC_PROG_INSTALL\nAC_PROG_CC\nAC_PROG_CPP\nAC_CHECK_PROGS(CXX, $CCC c++ cc++ g++ gcc CC cxx, gcc)\n\npedantic=\"\"\nif test -f /bin/uname ; then\n\tos=`uname -s`\n\trev=`uname -r`\n\tif test \\( \"$os\" = SunOS \\) ; then\n\t\tcase \"$rev\" in\n\t\t\t# only use the -pedantic compiler option on\n\t\t\t# Solaris 2 machines.\n\t\t\t5.*) pedantic=\"-pedantic\" ;;\n\t\tesac\n\tfi\nfi\nif test \"${CXXFLAGS}set\" = set ; then\n\tcase \"$CXX\" in\n\t\tc++|g++|gcc)\n\t\t  CXXFLAGS=\"-Wall $pedantic\"\n\t\t  CFLAGS=\"-Wall $pedantic\"\n\t\t  ;;\n\t\tcc++)\n\t\t  CXXFLAGS=\"-Wall\"\n\t\t  CFLAGS=\"-Wall\"\n\t\t  ;;\n\t\t*)\n\t\t  CXXFLAGS=\"\"\n\t\t  CFLAGS=\"\"\n\t\t  ;;\n\tesac\nfi\n\nAC_PROG_CXXCPP\ndnl The next test is equivalent to AC_PROG_RANLIB\ndnl Do not use AC_PROG_RANLIB because this produces\ndnl an error on LINUX-systems in the configure script\nAC_CHECK_PROGS(RANLIB, ranlib, :)\n\ndnl Check for \"ar\" and \"libtool\". On certain systems, e.g. NeXTStep, we must\ndnl prefer \"libtool\" over \"ar\" if both are present. However, we don't use\ndnl GNU libtool at the moment which is something completely different\ndnl (not an \"ar\" replacement).\nAC_CHECK_PROGS(AR, ar, :)\nAC_CHECK_PROGS(LIBTOOL, libtool, :)\nif test \"${LIBTOOL}set\" = libtoolset ; then\n  AC_CHECK_GNU_LIBTOOL\n  if test $ac_cv_check_gnu_libtool = yes ; then\n    :\n  else\n    AR=$LIBTOOL\n  fi\nfi\n\ncase \"$AR\" in\nlibtool) ARFLAGS=-o ;;\nar) ARFLAGS=cruv ;;\nesac\n\nif test \"${LIBEXT}set\" = set ; then\n\tLIBEXT=\"a\"\nfi\n\nAC_SUBST(ARFLAGS)\nAC_SUBST(LIBEXT)\nAC_SUBST(BINEXT)\n\n# Try to find a strip utility\nAC_CHECK_PROGS(STRIP, strip, :)\n\ndnl -------------------------------------------------------\ndnl Check special systems\ndnl -------------------------------------------------------\n\nAC_AIX\nAC_ISC_POSIX\nAC_SYS_LONG_FILE_NAMES\n\ndnl -------------------------------------------------------\ndnl Perform some tests with the C compiler, needed for dcmjpeg\ndnl -------------------------------------------------------\n\nAC_MY_C_INLINE\nAC_MY_C_CONST\nAC_MY_C_CHAR_UNSIGNED\nAC_MY_C_RIGHTSHIFT_UNSIGNED\n\ndnl -------------------------------------------------------\ndnl Check some typedefs versus definitions in <sys/types.h>,\ndnl needed for JasPer support\ndnl -------------------------------------------------------\n\nAC_TYPEDEF(uchar, unsigned char)\nAC_TYPEDEF(ushort, unsigned short)\nAC_TYPEDEF(uint, unsigned int)\nAC_TYPEDEF(ulong, unsigned long)\nAC_CHECK_TYPES(longlong)\nAC_CHECK_TYPES(ulonglong)\nAC_CHECK_TYPES(long long)\nAC_CHECK_TYPES(unsigned long long)\nCHECK_VLA\n\ndnl File access stuff\nAC_CHECK_TYPES(fpos64_t)\nAC_CHECK_TYPES(off64_t)\n\ndnl stdbool.h and stdint.h are only defined in ANSI C, not in C++\nAC_CHECK_HEADERS(stdbool.h)\nAC_CHECK_HEADERS(stdint.h)\nAC_CHECK_HEADERS(cstdint)\n\nAC_CHECK_TYPES(int64_t)\nAC_CHECK_TYPES(uint64_t)\n\nAC_CHECK_TYPES([sigjmp_buf], [], [], [[#include <setjmp.h>]])\n\ndnl -------------------------------------------------------\ndnl Checks for libc library functions.\ndnl -------------------------------------------------------\n\nAC_FUNC_MEMCMP\nAC_FUNC_VPRINTF\nAC_TYPE_SIGNAL\nAC_FUNC_WAIT3\nAC_CHECK_FUNCS(gethostname gethostid socket sysinfo)\nAC_CHECK_FUNCS(strchr strstr strtoul itoa)\nAC_CHECK_FUNCS(memcpy memset memmove memcmp bcopy bcmp)\nAC_CHECK_FUNCS(getpid mktemp tempnam tmpnam getenv mkstemp)\nAC_CHECK_FUNCS(stat)\nAC_CHECK_FUNCS(malloc_debug)\nAC_CHECK_FUNCS(strerror strdup bzero index rindex access)\nAC_CHECK_FUNCS(uname cuserid getlogin getlogin_r)\nAC_CHECK_FUNCS(usleep)\nAC_CHECK_FUNCS(flock lockf)\nAC_CHECK_FUNCS(listen connect setsockopt getsockopt select)\nAC_CHECK_FUNCS(gethostbyname gethostbyname_r)\nAC_CHECK_FUNCS(gethostbyaddr_r getgrnam_r getpwnam_r)\nAC_CHECK_FUNCS(bind accept getsockname getaddrinfo)\nAC_CHECK_FUNCS(waitpid)\nAC_CHECK_FUNCS(getuid geteuid setuid getpwnam getgrnam)\nAC_CHECK_FUNCS(sleep fork)\nAC_CHECK_FUNCS(_findfirst)\nAC_CHECK_FUNCS(strlcpy strlcat)\nAC_CHECK_FUNCS(vsnprintf)\nAC_CHECK_FUNCS(mbstowcs wcstombs)\nAC_CHECK_FUNCS(popen pclose)\nAC_CHECK_FUNCS(readdir_r)\nAC_FUNC_FSEEKO\n\n\ndnl -------------------------------------------------------\ndnl Checks for libcs library functions needed by oflog\ndnl -------------------------------------------------------\n\nAC_DEFUN([TYPE_SOCKLEN_T],\n[\nAH_TEMPLATE([socklen_t], [Define to int if undefined.])\nAC_CACHE_CHECK([for socklen_t], ac_cv_type_socklen_t,\n[\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n   #include <sys/socket.h>]], [[socklen_t len = 42; return 0;]])],[ac_cv_type_socklen_t=yes],[ac_cv_type_socklen_t=no])\n])\n  if test $ac_cv_type_socklen_t != yes; then\n    AC_DEFINE(socklen_t, int)\n  fi\n])\n\nAC_CHECK_FUNCS(ftime gmtime_r localtime_r lstat nanosleep fcntl)\nAC_CHECK_FUNCS(htons htonl ntohs ntohl)\nAC_CHECK_HEADERS(netinet/in.h)\nAC_CHECK_HEADERS(syslog.h)\nTYPE_SOCKLEN_T\n\nAH_TEMPLATE([HAVE_ENAMETOOLONG])\nAC_COMPILE_IFELSE(\n  [AC_LANG_PROGRAM([#include <errno.h>], [int value = ENAMETOOLONG;])],\n  [AC_DEFINE([HAVE_ENAMETOOLONG], , [Define if your system provides ENAMETOOLONG errno value.])])\n\ndnl -------------------------------------------------------\ndnl Checks for libm library functions.\ndnl -------------------------------------------------------\n\nSAVELIBS=\"$LIBS\"\nLIBS=\"$LIBS -lm\"\nAC_CHECK_FUNCS(finite isinf isnan)\nLIBS=\"$SAVELIBS\"\n\ndnl -------------------------------------------------------\ndnl Perform remaining tests with C++ compiler\ndnl -------------------------------------------------------\nAC_LANG(C++)\n\nAC_CXX_CONST_CAST\nAC_CXX_DYNAMIC_CAST\nAC_CXX_REINTERPRET_CAST\nAC_CXX_STATIC_CAST\nAC_CXX_STD_NOTHROW\nAC_CXX_NOTHROW_DELETE\n\ndnl -------------------------------------------------------\ndnl Check for Debug Mode\ndnl -------------------------------------------------------\n\nDEBUG=\"-DNDEBUG\"\nDEBUGCXXFLAGS=\nDEBUGCFLAGS=\nAC_MSG_CHECKING(whether to compile in debug mode)\nAC_ARG_ENABLE(debug,\n[  --enable-debug          compile with debug code, don't optimize\n  --disable-debug         compile without debug code (default)],\n[ case \"$enableval\" in\n  yes)\n    AC_MSG_RESULT(yes)\n    DEBUGCXXFLAGS=\"-g\"\n    DEBUGCFLAGS=\"-g\"\n    DEBUG=\"-DDEBUG\"\n    ;;\n  *)\n    AC_MSG_RESULT(no)\n    DEBUGCXXFLAGS=\"-O\"\n    DEBUGCFLAGS=\"-O\"\n    ;;\n  esac ],\n  AC_MSG_RESULT(no)\n  DEBUGCXXFLAGS=\"-O\"\n  DEBUGCFLAGS=\"-O\"\n)\n\ndnl -------------------------------------------------------\ndnl Check for thread support\ndnl -------------------------------------------------------\n\nTHREADSUPPORT=\"auto\"\nAC_MSG_CHECKING(whether to enable thread support)\nAC_ARG_ENABLE(threads,\n[  --enable-threads=TYPE   compile with MT support (posix/solaris/auto=default)\n  --disable-threads       compile without MT support],\n[ case \"$enableval\" in\n  yes|auto)\n    AC_MSG_RESULT(automatic detection)\n    ;;\n  posix)\n    AC_MSG_RESULT([yes, type=posix])\n    THREADSUPPORT=\"posix\"\n    ;;\n  solaris)\n    AC_MSG_RESULT([yes, type=solaris])\n    THREADSUPPORT=\"solaris\"\n    ;;\n  no)\n    AC_MSG_RESULT(no)\n    THREADSUPPORT=\"no\"\n    ;;\n  *)\n    AC_MSG_RESULT([yes - type $enableval is unknown - using automatic detection])\n    ;;\n  esac ],\n  AC_MSG_RESULT(automatic detection)\n)\n\ndnl -------------------------------------------------------\ndnl Check for large file support\ndnl -------------------------------------------------------\n\nLFSSUPPORT=\"auto\"\nAC_MSG_CHECKING(whether to enable large file support)\nAC_ARG_ENABLE(lfs,\n[  --enable-lfs=TYPE       compile with LFS support (lfs/lfs64/auto=default)\n  --disable-lfs           compile without LFS support],\n[ case \"$enableval\" in\n  yes|auto)\n    AC_MSG_RESULT(automatic detection)\n    ;;\n  lfs)\n    AC_MSG_RESULT([yes, type=LFS])\n    LFSSUPPORT=\"lfs\"\n    ;;\n  lfs64)\n    AC_MSG_RESULT([yes, type=LFS64])\n    LFSSUPPORT=\"lfs64\"\n    ;;\n  no)\n    AC_MSG_RESULT(no)\n    LFSSUPPORT=\"no\"\n    ;;\n  *)\n    AC_MSG_RESULT([yes - type $enableval is unknown - using automatic detection])\n    ;;\n  esac ],\n  AC_MSG_RESULT(automatic detection)\n)\n\ndnl -------------------------------------------------------\ndnl Checks for libraries.\ndnl -------------------------------------------------------\n\nAC_CHECK_GXXLIB\nAC_CHECK_LIB(iostream, main)\ndnl Some C++ compilers have problems with recursive main calls\ndnl (e.g. Sun C++ 4.2). In this case we must test another function\ndnl to link.\nAC_CHECK_LIB(nsl, main)\nif test $ac_cv_lib_nsl_main = no ; then\nAC_CHECK_LIB(nsl, gethostbyname)\nfi\nAC_CHECK_LIB(socket, main)\nif test $ac_cv_lib_socket_main = no ; then\nAC_CHECK_LIB(socket, socket)\nfi\n\ndnl Some newer versions of OpenSSL must be linked against libdl.\ndnl We just check whether libdl exists and in this case always\ndnl add -ldl to OPENSSLLIBS.\ndnl\nOPENSSLLIBS=\"\"\nAC_CHECK_LIB(dl, main,[\nOPENSSLLIBS=\"-ldl\"\n])\nif test $ac_cv_lib_dl_main = no ; then\nAC_CHECK_LIB(dl, dlopen,[\nOPENSSLLIBS=\"-ldl\"\n])\nfi\n\nMATHLIBS=\"\"\nAC_CHECK_LIB(m, main,[\nMATHLIBS=\"-lm\"\n])\nif test $ac_cv_lib_m_main = no ; then\nAC_CHECK_LIB(m, sin,[\nMATHLIBS=\"-lm\"\n])\nfi\n\ndnl On MinGW we have to link against the winsock32 library\ndnl\nAC_CHECK_LIB(wsock32, main,[\nLIBS=\"$LIBS -lwsock32\"\n])\n\ndnl On MinGW we have to link against the netapi32 library\ndnl\nAC_CHECK_LIB(netapi32, main,[\nLIBS=\"$LIBS -lnetapi32\"\n])\n\ndnl -------------------------------------------------------\ndnl Checks for header files.\ndnl -------------------------------------------------------\n\nAC_HEADER_STDC\nAC_HEADER_SYS_WAIT\nAC_HEADER_DIRENT\nAC_CHECK_TCP_H\nAC_CHECK_HEADERS(alloca.h)\nAC_CHECK_HEADERS(arpa/inet.h)\nAC_CHECK_HEADERS(assert.h)\nAC_CHECK_HEADERS(ctype.h)\nAC_CHECK_HEADERS(errno.h)\nAC_CHECK_HEADERS(fcntl.h)\nAC_CHECK_HEADERS(float.h)\nAC_CHECK_HEADERS(fnmatch.h)\nAC_CHECK_HEADERS(fstream)\nAC_CHECK_HEADERS(fstream.h)\nAC_CHECK_HEADERS(grp.h)\nAC_CHECK_HEADERS(ieeefp.h)\nAC_CHECK_HEADERS(io.h)\nAC_CHECK_HEADERS(iomanip)\nAC_CHECK_HEADERS(iomanip.h)\nAC_CHECK_HEADERS(iostream)\nAC_CHECK_HEADERS(iostream.h)\nAC_CHECK_HEADERS(iso646.h)\nAC_CHECK_HEADERS(libc.h)\nAC_CHECK_HEADERS(limits.h)\nAC_CHECK_HEADERS(climits)\nAC_CHECK_HEADERS(locale.h)\nAC_CHECK_HEADERS(malloc.h)\nAC_CHECK_HEADERS(math.h)\nAC_CHECK_HEADERS(cmath)\nAC_CHECK_HEADERS(new)\nAC_CHECK_HEADERS(new.h)\nAC_CHECK_HEADERS(netdb.h)\nAC_CHECK_HEADERS(pthread.h)\nAC_CHECK_HEADERS(pwd.h)\nAC_CHECK_HEADERS(semaphore.h)\nAC_CHECK_HEADERS(setjmp.h)\nAC_CHECK_HEADERS(signal.h)\nAC_CHECK_HEADERS(sstream)\nAC_CHECK_HEADERS(sstream.h)\nAC_CHECK_HEADERS(stat.h)\nAC_CHECK_HEADERS(cstdarg)\nAC_CHECK_HEADERS(stdarg.h)\nAC_CHECK_HEADERS(stddef.h)\nAC_CHECK_HEADERS(cstddef)\nAC_CHECK_HEADERS(cstdio)\nAC_CHECK_HEADERS(stdio.h)\nAC_CHECK_HEADERS(stdint.h)\nAC_CHECK_HEADERS(stdlib.h)\nAC_CHECK_HEADERS(string.h)\nAC_CHECK_HEADERS(strings.h)\nAC_CHECK_HEADERS(strstrea.h)\nAC_CHECK_HEADERS(strstream)\nAC_CHECK_HEADERS(strstream.h)\nAC_CHECK_HEADERS(synch.h)\nAC_CHECK_HEADERS(sys/errno.h)\nAC_CHECK_HEADERS(sys/file.h)\nAC_CHECK_HEADERS(sys/param.h)\nAC_CHECK_HEADERS(sys/resource.h)\nAC_CHECK_HEADERS(sys/select.h)\nAC_CHECK_HEADERS(sys/socket.h)\nAC_CHECK_HEADERS(sys/stat.h)\nAC_CHECK_HEADERS(sys/syscall.h)\nAC_CHECK_HEADERS(sys/systeminfo.h)\nAC_CHECK_HEADERS(sys/time.h)\nAC_CHECK_HEADERS(sys/timeb.h)\nAC_CHECK_HEADERS(sys/types.h)\nAC_CHECK_HEADERS(sys/utime.h)\nAC_CHECK_HEADERS(sys/utsname.h)\nAC_CHECK_HEADERS(thread.h)\nAC_CHECK_HEADERS(time.h)\nAC_CHECK_HEADERS(unistd.h)\nAC_CHECK_HEADERS(unix.h)\nAC_CHECK_HEADERS(utime.h)\nAC_CHECK_HEADERS(wchar.h)\nAC_CHECK_HEADERS(wctype.h)\nAC_CHECK_HEADERS(fenv.h)\n\nif test $ac_cv_header_libc_h = yes ; then\n  if test $ac_cv_header_math_h = yes ; then\n    AC_CXX_LIBC_H_EXTERN_C\n  fi\nfi\n\ndnl -------------------------------------------------------\ndnl Tests for pointer vs. integer types\ndnl These tests REQUIRE as a prerequisite AC_CXX_STATIC_CAST\ndnl -------------------------------------------------------\n\nif test $ac_cv_header_pthread_h = yes ; then\n  AC_CHECK_POINTER_TYPE(pthread_t, pthread.h)\nfi\n\ndnl -------------------------------------------------------\ndnl Check for thread support\ndnl -------------------------------------------------------\n\ndnl\ndnl in auto mode, check whether we use solaris or posix threads\ndnl\nif test $THREADSUPPORT = auto ; then\n  if test $ac_cv_header_synch_h = yes ; then\n    THREADSUPPORT=\"solaris\"\n  fi\nfi\nif test $THREADSUPPORT = auto ; then\n  if test $ac_cv_header_pthread_h = yes ; then\n    THREADSUPPORT=\"posix\"\n  fi\nfi\nif test $THREADSUPPORT = auto ; then\n  THREADSUPPORT=\"no\"\nfi\n\ndnl\ndnl in solaris mode, check for -lthread\ndnl\n\nif test $THREADSUPPORT = solaris ; then\n  AC_CHECK_LIB(thread, sema_init, [\n  ac_tr_lib=HAVE_LIBTHREAD\n  AC_DEFINE_UNQUOTED($ac_tr_lib)\n  LIBS=\"-lthread $LIBS\"\n  ])\nfi\n\nif test $THREADSUPPORT = posix ; then\n  dnl\n  dnl check Posix MT libraries -lrt and -lpthread\n  dnl OSF/1 re-#defines most of the pthread function names.\n  dnl This is why we use pthread_key_create for the test.\n  dnl\n  AC_CHECK_LIB(pthread, pthread_key_create, [\n  ac_tr_lib=HAVE_LIBPTHREAD\n  AC_DEFINE_UNQUOTED($ac_tr_lib)\n  LIBS=\"-lpthread $LIBS\"\n  ])\n\n  AC_CHECK_LIB(rt, sem_init, [\n  ac_tr_lib=HAVE_LIBRT\n  AC_DEFINE_UNQUOTED($ac_tr_lib)\n  LIBS=\"-lrt $LIBS\"\n  ], , $LIBS )\n\n  dnl\n  dnl check whether the compiler required the -pthread option\n  dnl to correctly link code containing posix thread calls.\n  dnl This is true on FreeBSD.\n  dnl\n  AC_CHECK_PTHREAD_OPTION\n\n  dnl\n  dnl check whether Posix read/write locks are available\n  dnl\n  POSIXRWLOCKSAVAILABLE=\"no\"\n  AC_CHECK_LIB(pthread, pthread_rwlock_init, [\n    AC_DEFINE(HAVE_PTHREAD_RWLOCK, , [Define if your system supports POSIX read/write locks.])\n    dnl\n    dnl we're going to use POSIX threads with read/write locks.\n    dnl Linux 2.2.x only declares all prototypes if _XOPEN_SOURCE=500 and _BSD_SOURCE\n    dnl OSF/1 requires _XOPEN_SOURCE=500, _XOPEN_SOURCE_EXTENDED, _OSF_SOURCE and _POSIX_C_SOURCE=199506L\n    dnl Irix 6.x does not like _XOPEN_SOURCE=500 and _POSIX_C_SOURCE=199506L\n    dnl\n    POSIXRWLOCKSAVAILABLE=\"yes\"\n    case \"${host}\" in\n\tmips-sgi-irix6*)\n\t  CXXFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_BSD_SOURCE -D_BSD_COMPAT $CXXFLAGS\"\n\t  CFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_BSD_SOURCE -D_BSD_COMPAT $CFLAGS\"\n\t  ;;\n\t*-*-openbsd3*)\n\t  CXXFLAGS=\"-D_POSIX_C_SOURCE=199506L $CXXFLAGS\"\n\t  CFLAGS=\"-D_POSIX_C_SOURCE=199506L $CFLAGS\"\n\t  ;;\n\t*-*-openbsd4*)\n\t  ;;\n\t*-*-openbsd5*)\n\t  ;;\n\t*-*-freebsd*)\n\t  ;;\n\t*-*-netbsdelf2*)\n\t  ;;\n\t*-*-netbsd*)\n\t  CXXFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_NETBSD_SOURCE -D_BSD_COMPAT $CXXFLAGS\"\n\t  CFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_NETBSD_SOURCE -D_BSD_COMPAT $CFLAGS\"\n\t  ;;\n\t*-*-darwin*)\n\t  dnl On Mac OS X we need to have _DARWIN_C_SOURCE defined to enable UNIX standard API for system headers\n\t  CXXFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_BSD_SOURCE -D_BSD_COMPAT -D_OSF_SOURCE -D_DARWIN_C_SOURCE $CXXFLAGS\"\n\t  CFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_BSD_SOURCE -D_BSD_COMPAT -D_OSF_SOURCE -D_DARWIN_C_SOURCE $CXXFLAGS\"\n\t  ;;\n\t*)\n\t  CXXFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_BSD_COMPAT -D_OSF_SOURCE -D_POSIX_C_SOURCE=199506L $CXXFLAGS\"\n\t  CFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_BSD_COMPAT -D_OSF_SOURCE -D_POSIX_C_SOURCE=199506L $CFLAGS\"\n\t  ;;\n    esac\n  ],\n  [\n    dnl\n    dnl We did not find pthread_rwlock_init in libpthread. Maybe it is somewhere else, e.g. in libc_r on FreeBSD.\n    dnl We give it another try by just linking against the default libraries.\n    dnl\n    AC_MSG_CHECKING(for pthread_rwlock_init in default libraries)\n    AC_TRY_LINK([extern \"C\" int pthread_rwlock_init(void *rwlock, void *attr);\n      ] , [(void) pthread_rwlock_init(NULL, NULL);], [\n    AC_MSG_RESULT(yes)\n    AC_DEFINE(HAVE_PTHREAD_RWLOCK, , [Define if your system supports POSIX read/write locks.])\n    dnl\n    dnl we're going to use POSIX threads with read/write locks.\n    dnl Linux 2.2.x only declares all prototypes if _XOPEN_SOURCE=500 and _BSD_SOURCE\n    dnl OSF/1 requires _XOPEN_SOURCE=500, _XOPEN_SOURCE_EXTENDED, _OSF_SOURCE and _POSIX_C_SOURCE=199506L\n    dnl Irix 6.x does not like _XOPEN_SOURCE=500 and _POSIX_C_SOURCE=199506L\n    dnl\n    POSIXRWLOCKSAVAILABLE=\"yes\"\n    case \"${host}\" in\n\tmips-sgi-irix6*)\n\t  CXXFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_BSD_SOURCE -D_BSD_COMPAT $CXXFLAGS\"\n\t  CFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_BSD_SOURCE -D_BSD_COMPAT $CFLAGS\"\n\t  ;;\n\t*-*-openbsd3*)\n\t  CXXFLAGS=\"-D_POSIX_C_SOURCE=199506L $CXXFLAGS\"\n\t  CFLAGS=\"-D_POSIX_C_SOURCE=199506L $CFLAGS\"\n\t  ;;\n\t*-*-openbsd4*)\n\t  ;;\n\t*-*-openbsd5*)\n\t  ;;\n\t*-*-freebsd*)\n\t  ;;\n\t*-*-netbsdelf2*)\n\t  ;;\n\t*-*-netbsd*)\n\t  CXXFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_NETBSD_SOURCE -D_BSD_COMPAT $CXXFLAGS\"\n\t  CFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_NETBSD_SOURCE -D_BSD_COMPAT $CFLAGS\"\n\t  ;;\n\t*-*-darwin*)\n\t  dnl On Mac OS X we need to have _DARWIN_C_SOURCE source defined to enable UNIX standard API for system headers\n\t  CXXFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_BSD_SOURCE -D_BSD_COMPAT -D_OSF_SOURCE -D_DARWIN_C_SOURCE $CXXFLAGS\"\n\t  CFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_BSD_SOURCE -D_BSD_COMPAT -D_OSF_SOURCE -D_DARWIN_C_SOURCE $CXXFLAGS\"\n\t  ;;\n\t*)\n\t  CXXFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_BSD_COMPAT -D_OSF_SOURCE -D_POSIX_C_SOURCE=199506L $CXXFLAGS\"\n\t  CFLAGS=\"-D_XOPEN_SOURCE_EXTENDED -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_BSD_COMPAT -D_OSF_SOURCE -D_POSIX_C_SOURCE=199506L $CFLAGS\"\n\t  ;;\n    esac\n    ], AC_MSG_RESULT(no))\n  ]\n  )\nfi\n\nAC_MSG_CHECKING(multi-thread support)\ncase \"$THREADSUPPORT\" in\n  solaris)\n    AC_MSG_RESULT([yes, solaris threads])\n    CXXFLAGS=\"-D_REENTRANT $CXXFLAGS\"\n    CFLAGS=\"-D_REENTRANT $CFLAGS\"\n    AC_DEFINE(WITH_THREADS, , [Define if we are compiling with any type of multi-thread support.])\n    ;;\n  posix)\n    if test $POSIXRWLOCKSAVAILABLE = yes ; then\n      AC_MSG_RESULT([yes, posix threads with rwlock])\n    else\n      AC_MSG_RESULT([yes, posix threads without rwlock])\n    fi\n    CXXFLAGS=\"-D_REENTRANT $CXXFLAGS\"\n    CFLAGS=\"-D_REENTRANT $CFLAGS\"\n    AC_DEFINE(WITH_THREADS, , [Define if we are compiling with any type of multi-thread support.])\n    ;;\n  *)\n    AC_MSG_RESULT(none)\n    ;;\nesac\n\ndnl -------------------------------------------------------\ndnl Check for LFS support\ndnl -------------------------------------------------------\n\nif test $LFSSUPPORT = auto -o $LFSSUPPORT = lfs64; then\n  AC_LFS64\n  if test $ac_cv_lfs64_support = yes ; then\n    LFSSUPPORT=\"lfs64\"\n  fi\nfi\n\nif test $LFSSUPPORT = auto -o $LFSSUPPORT = lfs; then\n  MY_AC_SYS_LARGEFILE\nfi\n\ndnl -------------------------------------------------------\ndnl Checks for typedefs, structures, and compiler characteristics.\ndnl -------------------------------------------------------\n\nAC_TYPEDEF(size_t, unsigned)\nAC_TYPEDEF(ssize_t, long)\nAC_TYPEDEF(pid_t, int)\nAC_C_CHAR_UNSIGNED\nAC_CHECK_SIZEOF(char)\nAC_CHECK_SIZEOF(short)\nAC_CHECK_SIZEOF(int)\nAC_CHECK_SIZEOF(long)\nAC_CHECK_SIZEOF(float)\nAC_CHECK_SIZEOF(double)\nAC_CHECK_SIZEOF(void *)\nAC_STRUCT_TM\nAC_MY_SYMBOL_EXISTS([__FUNCTION__])\nAC_MY_SYMBOL_EXISTS([__PRETTY_FUNCTION__])\nAC_MY_SYMBOL_EXISTS([__func__])\n\ndnl -------------------------------------------------------\ndnl Checks for prototypes\ndnl -------------------------------------------------------\ndnl\ndnl The following AC_CHECK_* macros _must_ have corresponding entries in\ndnl the acconfig.h file.  This is because the macros are specific to the\ndnl DCMTK project and are not supported by GNU autoheader.\n\nAC_CHECK_PROTOTYPE(feenableexcept, fenv.h)\nAC_CHECK_PROTOTYPE(_stricmp, string.h)\nAC_CHECK_PROTOTYPE(accept, sys/types.h sys/socket.h)\nif test $ac_cv_prototype_accept = yes ; then\nAC_CHECK_INTP_ACCEPT(sys/types.h sys/socket.h)\nfi\nAC_CHECK_PROTOTYPE(bind, sys/types.h sys/socket.h)\nAC_CHECK_PROTOTYPE(bzero, string.h strings.h libc.h unistd.h stdlib.h)\nAC_CHECK_PROTOTYPE(connect, sys/types.h sys/socket.h)\nAC_CHECK_PROTOTYPE(finite, math.h)\nAC_CHECK_PROTOTYPE(isinf, math.h)\nAC_CHECK_PROTOTYPE(isnan, math.h)\nAC_CHECK_PROTOTYPE(std::finite, cmath)\nAC_CHECK_PROTOTYPE(std::isinf, cmath)\nAC_CHECK_PROTOTYPE(std::isnan, cmath)\nAC_CHECK_PROTOTYPE(flock, sys/file.h)\nAC_CHECK_PROTOTYPE(gethostbyname, libc.h unistd.h stdlib.h netdb.h)\nAC_CHECK_PROTOTYPE(gethostbyname_r, libc.h unistd.h stdlib.h netdb.h)\nAC_CHECK_PROTOTYPE(gethostbyaddr_r, libc.h unistd.h stdlib.h netdb.h)\nAC_CHECK_PROTOTYPE(gethostid, libc.h unistd.h stdlib.h netdb.h)\nAC_CHECK_PROTOTYPE(gethostname, unistd.h libc.h stdlib.h netdb.h)\nAC_CHECK_PROTOTYPE(getsockname, sys/types.h sys/socket.h)\nAC_CHECK_PROTOTYPE(getsockopt, sys/types.h sys/socket.h)\nAC_CHECK_PROTOTYPE(strerror_r, string.h)\nif test $ac_cv_prototype_strerror_r = yes ; then\nAC_CHECK_CHARP_STRERROR_R(string.h)\nfi\nif test $ac_cv_prototype_getsockopt = yes ; then\nAC_CHECK_INTP_GETSOCKOPT(sys/types.h sys/socket.h)\nfi\nAC_CHECK_PROTOTYPE(gettimeofday, sys/time.h unistd.h)\nAC_CHECK_PROTOTYPE(listen, sys/types.h sys/socket.h)\nAC_CHECK_PROTOTYPE(mktemp, libc.h unistd.h stdlib.h)\nAC_CHECK_PROTOTYPE(mkstemp, libc.h unistd.h stdlib.h)\nAC_CHECK_PROTOTYPE(select, sys/select.h sys/types.h sys/socket.h sys/time.h)\nif test $ac_cv_prototype_select = yes ; then\nAC_CHECK_INTP_SELECT(sys/select.h sys/types.h sys/socket.h sys/time.h)\nfi\nAC_CHECK_PROTOTYPE(setsockopt, sys/types.h sys/socket.h)\nAC_CHECK_PROTOTYPE(socket, sys/types.h sys/socket.h)\nAC_CHECK_PROTOTYPE(strcasecmp, string.h)\nAC_CHECK_PROTOTYPE(strncasecmp, string.h)\nAC_CHECK_PROTOTYPE(usleep, libc.h unistd.h stdlib.h)\nAC_CHECK_PROTOTYPE(vsnprintf, stdio.h stdarg.h)\nAC_CHECK_PROTOTYPE(wait3, libc.h sys/wait.h sys/time.h sys/resource.h)\nAC_CHECK_PROTOTYPE(waitpid, sys/wait.h sys/time.h sys/resource.h)\nAC_CHECK_DECLARATION(struct utimbuf, sys/types.h utime.h sys/utime.h)\nAC_CHECK_DECLARATION(socklen_t, sys/types.h sys/socket.h)\nAC_CHECK_OLD_READDIR_R\nAC_CHECK_ELLIPSE_SIGNAL_HANDLER(signal.h)\nif test $ac_cv_header_math_h = yes ; then\nAC_INCLUDE_MATH_H_AS_CXX\nfi\n\n\ndnl -------------------------------------------------------\ndnl Checks for the usage of standard C++ headers.\ndnl -------------------------------------------------------\n\nAC_MSG_CHECKING(whether to use C++ standard includes)\nac_use_std_includes=\"auto\"\nAC_ARG_ENABLE(std-includes,\n[  --enable-std-includes   use C++ ANSI standard includes (default: auto)\n  --disable-std-includes  use old C++ includes ],\n[ case \"$enableval\" in\n  yes)\n   ac_use_std_includes=\"yes\"\n   ;;\n\n  *)\n    ac_use_std_includes=\"no\"\n    ;;\n  esac ]\n)\n\nif test \"$ac_cv_header_fstream\" = \"yes\" -a \"$ac_cv_header_iostream\" = \"yes\" -a \"$ac_cv_header_iomanip\" = \"yes\"; then\n   ac_have_std_includes=\"yes\"\nelse\n   ac_have_std_includes=\"no\"\nfi\n\nif test \"$ac_cv_header_fstream_h\" = \"yes\" -a \"$ac_cv_header_iostream_h\" = \"yes\" -a \"$ac_cv_header_iomanip_h\" = \"yes\"; then\n   ac_have_old_includes=\"yes\"\nelse\n   ac_have_old_includes=\"no\"\nfi\n\nif test \"$ac_use_std_includes\" = \"yes\"; then\n   AC_MSG_RESULT(yes)\n   AC_DEFINE(USE_STD_CXX_INCLUDES, , [Define if ANSI standard C++ includes are used.])\nelif test \"$ac_use_std_includes\" = \"no\"; then\n   AC_MSG_RESULT(no)\nelif test \"$ac_have_std_includes\" = \"yes\"; then\n   AC_MSG_RESULT(yes)\n   AC_DEFINE(USE_STD_CXX_INCLUDES, , [Define if ANSI standard C++ includes are used.])\n   ac_use_std_includes=\"yes\"\nelse\n   AC_MSG_RESULT(no)\n   ac_use_std_includes=\"no\"\nfi\n\nif test \"$ac_use_std_includes\" = \"yes\"; then\n   AC_CHECK_STD_NAMESPACE\n   AC_CHECK_DECLARATION(std::ios_base::openmode, , iostream)\n   AC_CHECK_IOS_NOCREATE(std::ios, fstream)\n   AC_CHECK_COMPILES(std::vfprintf, cstdarg cstdio,\n     [FILE *stream; va_list ap; std::vfprintf(stream, \"\", ap);])\n   AC_CHECK_COMPILES(std::vsnprintf, cstdarg cstdio,\n     [char buf[256]; va_list ap; std::vsnprintf(buf, 0, \"\", ap);])\nelse\n   AC_CHECK_DECLARATION(std::ios_base::openmode, , iostream.h)\n   AC_CHECK_IOS_NOCREATE(ios, fstream.h)\n   AC_CHECK_COMPILES(std::vfprintf, stdarg.h stdio.h,\n     [FILE *stream; va_list ap; std::vfprintf(stream, \"\", ap);])\n   AC_CHECK_COMPILES(std::vsnprintf, stdarg.h stdio.h,\n     [char buf[256]; va_list ap; std::vsnprintf(buf, 0, \"\", ap);])\nfi\n\nAC_CHECK_CLASS_TEMPLATE\nAC_CHECK_STATIC_TEMPLATE_METHOD\nAC_CHECK_FUNCTION_TEMPLATE\nAC_CHECK_EXPLICIT_TEMPLATE_SPECIALIZATION\nAC_CHECK_CXX_BOOL\nAC_CHECK_CXX_VOLATILE\nAC_CXX_TYPENAME\nAC_STDIO_NAMESPACE\n\ndnl -------------------------------------------------------\ndnl Check for Private Tag support\ndnl -------------------------------------------------------\n\nAC_MSG_CHECKING(whether to enable private tag dictionary)\nAC_ARG_ENABLE(private-tags,\n[  --enable-private-tags   enable private tag dictionary\n  --disable-private-tags  don't enable private tag dictionary (default)],\n[ case \"$enableval\" in\n  yes)\n    AC_MSG_RESULT(yes)\n    AC_DEFINE(ENABLE_PRIVATE_TAGS, , [Define if we are compiling for enabling external private tag dictionary.])\n    AC_DEFINE_UNQUOTED(DCM_DICT_DEFAULT_PATH, \"${DATA_DIR}/dicom.dic:${DATA_DIR}/private.dic\", [Define the default data dictionary path for the dcmdata library package.])\n    ;;\n  *)\n    AC_MSG_RESULT(no)\n    ;;\n  esac ],\n  AC_MSG_RESULT(no)\n)\n\ndnl -------------------------------------------------------\ndnl Check for External Dictionary support\ndnl -------------------------------------------------------\n\nAC_MSG_CHECKING(whether to enable loading external dictionary from default path)\nAC_ARG_ENABLE(external-dict,\n[  --enable-external-dict  enable loading of external dictionary (default)\n  --disable-external-dict don't load external dictionary],\n[ case \"$enableval\" in\n  yes)\n    AC_MSG_RESULT(yes)\n    AC_DEFINE(ENABLE_EXTERNAL_DICTIONARY, , [Define if we are compiling for loading external dictionary from default path.])\n    ;;\n  *)\n    AC_MSG_RESULT(no)\n    dnl Reset default path so the dictionary is not loaded automatically on startup\n    AC_DEFINE_UNQUOTED(DCM_DICT_DEFAULT_PATH, \"\", [Empty default data dictionary path for the dcmdata library package.])\n    ;;\n  esac ],\n  AC_MSG_RESULT(yes)\n  AC_DEFINE(ENABLE_EXTERNAL_DICTIONARY, , [Define if we are compiling for loading external dictionary from default path.])\n)\n\ndnl -------------------------------------------------------\ndnl Check for Built-in (compiled-in) Dictionary support\ndnl -------------------------------------------------------\n\nAC_MSG_CHECKING(whether to enable built-in dictionary loading)\nAC_ARG_ENABLE(builtin-dict,\n[  --enable-builtin-dict   enable loading of built-in dictionary\n  --disable-builtin-dict  don't load built-in dictionary (default)],\n[ case \"$enableval\" in\n  yes)\n    AC_MSG_RESULT(yes)\n    AC_DEFINE(ENABLE_BUILTIN_DICTIONARY, , [Define if we are compiling with built-in (compiled-in) dictionary enabled.])\n    ;;\n  *)\n    AC_MSG_RESULT(no)\n    ;;\n  esac ],\n  AC_MSG_RESULT(no)\n)\n\ndnl -------------------------------------------------------\ndnl Check for OpenSSL support\ndnl -------------------------------------------------------\n\nAC_MY_LIB_PATH([openssl], [OpenSSL])\n\nAC_MSG_CHECKING([whether to include OpenSSL support])\nAC_ARG_WITH(openssl,\n[AS_HELP_STRING([--with-openssl], [include OpenSSL support (default: auto)])\nAS_HELP_STRING([--without-openssl], [don't include OpenSSL support])],\n[ case \"$withval\" in\n  yes)\n    AC_MSG_RESULT(yes)\n    AC_DEFINE(WITH_OPENSSL, , [Define if we are compiling with OpenSSL support.])\n    OPENSSLLIBS=\"-lssl -lcrypto $OPENSSLLIBS\"\n    ;;\n  *)\n    AC_MSG_RESULT(no)\n    ;;\n  esac ],\n[ SAVELIBS=\"$LIBS\"\n  LIBS=\"$LIBS -lssl -lcrypto\"\n  AC_TRY_LINK([#include <openssl/ssl.h>], [(void) TLSv1_method()],\n    [ AC_MSG_RESULT(yes)\n      AC_DEFINE(WITH_OPENSSL, , [Define if we are compiling with OpenSSL support.])\n      OPENSSLLIBS=\"-lssl -lcrypto $OPENSSLLIBS\" ],\n    [AC_MSG_RESULT(no)])\n  LIBS=\"$SAVELIBS\"] )\n\nAC_CHECK_SSL_CTX_GET0_PARAM\nAC_CHECK_RAND_EGD\n\ndnl -------------------------------------------------------\ndnl Check for libjpeg, which is needed by libtiff on some platforms\ndnl -------------------------------------------------------\n\nJPEGLIBS=\"\"\nAC_CHECK_LIB(jpeg, jpeg_set_defaults,[\nJPEGLIBS=\"-ljpeg\"\n])\nif test $ac_cv_lib_jpeg_jpeg_set_defaults = no ; then\nAC_CHECK_LIB(jpeg, jSetDefaults,[\nJPEGLIBS=\"-ljpeg\"\n])\nfi\n\ndnl -------------------------------------------------------\ndnl Check for zlib support\ndnl -------------------------------------------------------\n\nAC_MY_LIB_PATH([zlib])\n\nZLIBLIBS=\"\"\nAC_MSG_CHECKING(whether to include zlib support)\nAC_ARG_WITH(zlib,\n[AS_HELP_STRING([--with-zlib], [include zlib support (default: auto)])\nAS_HELP_STRING([--without-zlib], [don't include zlib support])],\n[ case \"$withval\" in\n  yes)\n    AC_MSG_RESULT(yes)\n    AC_DEFINE(WITH_ZLIB, , [Define if we are compiling with zlib support.])\n    ZLIBLIBS=\"-lz\"\n    ;;\n  *)\n    AC_MSG_RESULT(no)\n    ;;\n  esac ],\n[ SAVELIBS=\"$LIBS\"\n  LIBS=\"$LIBS -lz\"\n  AC_TRY_LINK([#include <zlib.h>], [(void) zlibVersion()],\n    [ AC_MSG_RESULT(yes)\n      AC_DEFINE(WITH_ZLIB, , [Define if we are compiling with zlib support.])\n      ZLIBLIBS=\"-lz\" ],\n    [AC_MSG_RESULT(no)])\n  LIBS=\"$SAVELIBS\"] )\n\ndnl -------------------------------------------------------\ndnl Check for libtiff support\ndnl -------------------------------------------------------\n\nAC_MY_LIB_PATH([libtiff])\n\nTIFFLIBS=\"\"\nAC_MSG_CHECKING(whether to include libtiff support)\nAC_ARG_WITH(libtiff,\n[AS_HELP_STRING([--with-libtiff], [include libtiff support (default: auto)])\nAS_HELP_STRING([--without-libtiff], [don't include libtiff support])],\n[ case \"$withval\" in\n  yes)\n    AC_MSG_RESULT(yes)\n    AC_DEFINE(WITH_LIBTIFF, , [Define if we are compiling with libtiff support.])\n    TIFFLIBS=\"-ltiff $JPEGLIBS $ZLIBLIBS\"\n    SAVELIBS=\"$LIBS\"\n    LIBS=\"$LIBS -ltiff $JPEGLIBS $ZLIBLIBS\"\n    AC_LIBTIFF_LZW_COMPRESSION\n    LIBS=\"$SAVELIBS\"\n    ;;\n  *)\n    AC_MSG_RESULT(no)\n    ;;\n  esac ],\n[ SAVELIBS=\"$LIBS\"\n  LIBS=\"$LIBS -ltiff $JPEGLIBS $ZLIBLIBS\"\n  AC_TRY_LINK([#include <tiffio.h>], [(void) TIFFGetVersion()],\n    [ AC_MSG_RESULT(yes)\n      AC_DEFINE(WITH_LIBTIFF, , [Define if we are compiling with libtiff support.])\n      TIFFLIBS=\"-ltiff $JPEGLIBS $ZLIBLIBS\"\n      AC_LIBTIFF_LZW_COMPRESSION\n    ],\n    [AC_MSG_RESULT(no)])\n  LIBS=\"$SAVELIBS\"] )\n\n\ndnl -------------------------------------------------------\ndnl Check for libpng support\ndnl -------------------------------------------------------\n\nAC_MY_LIB_PATH([libpng])\n\ndnl perform check for <libpng/png.h> only after we have evaluated --with-libpnginc\nAC_CHECK_HEADERS(libpng/png.h)\n\nPNGLIBS=\"\"\nAC_MSG_CHECKING(whether to include libpng support)\nAC_ARG_WITH(libpng,\n[AS_HELP_STRING([--with-libpng], [include libpng support (default: auto)])\nAS_HELP_STRING([--without-libpng], [don't include libpng support])],\n[ case \"$withval\" in\n  yes)\n    if test \"x$ZLIBLIBS\" != x; then\n        AC_MSG_RESULT(yes)\n        AC_DEFINE(WITH_LIBPNG, , [Define if we are compiling with libpng support.])\n        PNGLIBS=\"-lpng\"\n    else\n        AC_MSG_RESULT(no because libpng requires zlib)\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT(no)\n    ;;\n  esac ],\n[ if test \"x$ZLIBLIBS\" != x; then\n      SAVELIBS=\"$LIBS\"\n      LIBS=\"$LIBS -lpng $ZLIBLIBS\"\n\n      AC_TRY_LINK([#ifdef HAVE_LIBPNG_PNG_H\n#include <libpng/png.h>\n#else\n#include <png.h>\n#endif], [(void) png_access_version_number()],\n        [ AC_MSG_RESULT(yes)\n          AC_DEFINE(WITH_LIBPNG, , [Define if we are compiling with libpng support.])\n          PNGLIBS=\"-lpng\" ],\n        [AC_MSG_RESULT(no)])\n\n      LIBS=\"$SAVELIBS\"\n  else\n      AC_MSG_RESULT(no because libpng requires zlib)\n  fi\n] )\n\ndnl -------------------------------------------------------\ndnl Check for libxml support\ndnl -------------------------------------------------------\n\nAC_MY_LIB_PATH([libxml])\n\nLIBXMLCFLAGS=`xml2-config --cflags 2>/dev/null`\nif test \"${LIBXMLCFLAGS+set}\" = set; then\n  CXXFLAGS=\"$LIBXMLCFLAGS $CXXFLAGS\"\n  CFLAGS=\"$LIBXMLCFLAGS $CFLAGS\"\nfi\nLIBXMLLIBS=`xml2-config --libs 2>/dev/null`\n\nXMLLIBS=\"\"\nAC_MSG_CHECKING(whether to include libxml support)\nAC_ARG_WITH(libxml,\n[AS_HELP_STRING([--with-libxml], [include libxml support (default: auto)])\nAS_HELP_STRING([--without-libxml], [don't include libxml support])],\n[ case \"$withval\" in\n  yes)\n    AC_MSG_RESULT(yes)\n    AC_DEFINE(WITH_LIBXML, , [Define if we are compiling with libxml support.])\n    XMLLIBS=$LIBXMLLIBS\n    ;;\n  *)\n    AC_MSG_RESULT(no)\n    ;;\n  esac ],\n[ SAVELIBS=\"$LIBS\"\n  LIBS=\"$LIBS $LIBXMLLIBS\"\n  AC_TRY_LINK([#include <libxml/parser.h>], [(void) xmlInitParser()],\n    [ AC_MSG_RESULT(yes)\n      AC_DEFINE(WITH_LIBXML, , [Define if we are compiling with libxml support.])\n      XMLLIBS=$LIBXMLLIBS ],\n    [AC_MSG_RESULT(no)])\n  LIBS=\"$SAVELIBS\"] )\n\ndnl -------------------------------------------------------\ndnl Check for libwrap (TCP wrapper) support\ndnl -------------------------------------------------------\n\nAC_MY_LIB_PATH([libwrap])\n\nTCPWRAPPERLIBS=\"\"\nAC_MSG_CHECKING(whether to include libwrap support)\nAC_ARG_WITH(libwrap,\n[AS_HELP_STRING([--with-libwrap], [include libwrap support (default: auto)])\nAS_HELP_STRING([--without-libwrap], [don't include libwrap support])],\n[ case \"$withval\" in\n  yes)\n    AC_MSG_RESULT(yes)\n    AC_DEFINE(WITH_TCPWRAPPER, , [Define if we are compiling with libwrap (TCP wrapper) support.])\n    TCPWRAPPERLIBS=\"-lwrap\"\n    ;;\n  *)\n    AC_MSG_RESULT(no)\n    ;;\n  esac ],\n[ SAVELIBS=\"$LIBS\"\n  LIBS=\"-lwrap $LIBS\"\n  AC_TRY_LINK(\n    [#ifdef __cplusplus\n    extern \"C\" {\n    #endif\n    #ifdef HAVE_STDIO_H\n    /* on some platforms, tcpd.h needs stdio.h */\n    #include <stdio.h>\n    #endif\n    #ifdef HAVE_SYS_TYPES_H\n    /* on some platforms, tcpd.h needs sys/types.h */\n    #include <sys/types.h>\n    #endif\n    #include <tcpd.h>\n    #ifdef __cplusplus\n    }\n    #endif\n    int deny_severity = 0;\n    int allow_severity = 0;], [struct request_info r; (void) hosts_access(&r)],\n    [ AC_MSG_RESULT(yes)\n      AC_DEFINE(WITH_TCPWRAPPER, , [Define if we are compiling with libwrap (TCP wrapper) support.])\n    TCPWRAPPERLIBS=\"-lwrap\" ],\n    [AC_MSG_RESULT(no)])\n  LIBS=\"$SAVELIBS\"] )\n\n\ndnl -------------------------------------------------------\ndnl Check for libsndfile support\ndnl -------------------------------------------------------\n\nAC_MY_LIB_PATH([libsndfile])\n\nSNDFILELIBS=\"\"\nAC_MSG_CHECKING(whether to include libsndfile support)\nAC_ARG_WITH(libsndfile,\n  [AS_HELP_STRING([--with-libsndfile], [include libsndfile support (default: auto)])\nAS_HELP_STRING([--without-libsndfile], [don't include libsndfile support])],\n  [ case \"$withval\" in\n    yes)\n      AC_MSG_RESULT(yes)\n      AC_DEFINE(WITH_SNDFILE, , [Define if we are compiling with libsndfile support.])\n      SNDFILELIBS=\"-lsndfile\"\n      ;;\n    *)\n      AC_MSG_RESULT(no)\n      ;;\n    esac ],\n  [ SAVELIBS=\"$LIBS\"\n    LIBS=\"$LIBS -lsndfile\"\n    AC_TRY_LINK([#include <sndfile.h>], [char buffer [128]; sf_command (NULL, SFC_GET_LIB_VERSION, buffer, sizeof (buffer));],\n      [ AC_MSG_RESULT(yes)\n        AC_DEFINE(WITH_SNDFILE, , [Define if we are compiling with libsndfile support.])\n        SNDFILELIBS=\"-lsndfile\" ],\n      [AC_MSG_RESULT(no)])\n    LIBS=\"$SAVELIBS\"]\n)\n\ndnl -------------------------------------------------------\ndnl Check for libiconv support\ndnl -------------------------------------------------------\n\nAC_MY_LIB_PATH([libiconv])\nAH_TEMPLATE(WITH_LIBICONV, [Define if we are compiling with libiconv support.])\nWITH_LIBICONV=no\nICONVLIBS=\"\"\nAC_MSG_CHECKING(whether to include libiconv support)\nAC_ARG_WITH(libiconv,\n[AS_HELP_STRING([--with-libiconv], [include libiconv support (default: auto)])\nAS_HELP_STRING([--without-libiconv], [don't include libiconv support])],\n[ case \"$withval\" in\n  yes)\n    WITH_LIBICONV=yes\n    AC_DEFINE(WITH_LIBICONV)\n    ICONVLIBS=\"-liconv -lcharset\"\n    ;;\n  *)\n    ;;\n  esac ],\n[ SAVELIBS=\"$LIBS\"\n  LIBS=\"$LIBS -liconv -lcharset\"\n  AC_TRY_LINK([#include <iconv.h>], [iconv_t cd = iconv_open(\"\", \"\"); iconv(cd, 0, 0, 0, 0); iconv_close(cd);],\n    [ WITH_LIBICONV=yes\n      AC_DEFINE(WITH_LIBICONV)\n      ICONVLIBS=\"-liconv -lcharset\" ])\n  LIBS=\"$SAVELIBS\"] )\nAC_MSG_RESULT($WITH_LIBICONV)\n\nAC_MSG_CHECKING(whether the second argument to iconv() is const)\nSAVELIBS=\"$LIBS\"\nLIBS=\"$LIBS $ICONVLIBS\"\nAC_TRY_COMPILE([#include <iconv.h>], [iconv_t cd = iconv_open(\"\", \"\"); const char *in = 0; iconv(cd, &in, 0, 0, 0); iconv_close(cd);],\n  [ AC_MSG_RESULT(yes)\n    AC_DEFINE(LIBICONV_SECOND_ARGUMENT_CONST, , [Define if the second argument to iconv() is const.]) ],\n  [AC_MSG_RESULT(no)])\nLIBS=\"$SAVELIBS\"\n\ndnl -------------------------------------------------------\ndnl Check for iconv inside C standard library\ndnl -------------------------------------------------------\n\nAH_TEMPLATE([WITH_STDLIBC_ICONV], [Define if the C standard library has iconv builtin.])dnl\nWITH_STDLIBC_ICONV=no\nAC_MSG_CHECKING([whether the C standard library provides iconv functionality])\nSAVELIBS=\"$LIBS\"\nLIBS=\"\"\nAC_TRY_LINK([#include <iconv.h>], [iconv_t cd=iconv_open(\"\",\"\");iconv(cd,0,0,0,0);iconv_close(cd);],\n    [WITH_STDLIBC_ICONV=yes\n     AC_DEFINE(WITH_STDLIBC_ICONV)])\nAC_MSG_RESULT($WITH_STDLIBC_ICONV)\nLIBS=\"$SAVELIBS\"\n\ndnl -------------------------------------------------------\ndnl Check for libicu support\ndnl -------------------------------------------------------\n\nAC_MY_LIB_PATH([libicu])\nAH_TEMPLATE([WITH_LIBICU], [Define if we are compiling with ICU support.])\nWITH_LIBICU=no\nAC_ARG_WITH(libicu,\n[AS_HELP_STRING([--with-libicu], [include libicu support (default: auto)])\nAS_HELP_STRING([--without-libicu], [don't include libicu support])],\n[ AC_MSG_CHECKING(whether to include ICU support)\n  case \"$withval\" in\n  yes)\n    WITH_LIBICU=yes\n    AC_DEFINE(WITH_LIBICU)\n    ICULIBS=\"-licui18n -licuuc -licudata\"\n    ;;\n  *)\n    ;;\n  esac ],\n[\n  if test -z \"$ICU_CONFIG\"; then\n    AC_PATH_PROG(ICU_CONFIG, icu-config, no)\n    AC_MSG_CHECKING(whether to include ICU support)\n  fi\n  if [[ ! \"$ICU_CONFIG\" = \"no\" ]]; then\n    ICU_VERSION=`$ICU_CONFIG --version`\n        VERSION_CHECK=`expr $ICU_VERSION \\>\\= 3.4.1`\n        if test VERSION_CHECK=1; then\n            WITH_LIBICU=yes\n            AC_DEFINE(WITH_LIBICU)\n            ICUINCLUDES=`$ICU_CONFIG --cppflags`\n            ICULIBS=`$ICU_CONFIG --ldflags`\n        fi\n  fi\n])\nAC_MSG_RESULT($WITH_LIBICU)\n\ndnl -------------------------------------------------------\ndnl character set conversion support\ndnl -------------------------------------------------------\n\nAH_VERBATIM([DCMTK_CHARSET_CONVERSION_CONSTANTS], [/* character set conversion constants. */\n#define DCMTK_CHARSET_CONVERSION_ICU 1\n#define DCMTK_CHARSET_CONVERSION_ICONV 2\n#define DCMTK_CHARSET_CONVERSION_STDLIBC_ICONV 3\n\n/* LFS mode constants. */\n#define DCMTK_LFS 1\n#define DCMTK_LFS64 2])\n\nCHARCONVINCLUDES=\"\"\nCHARCONVLIBS=\"\"\n\nAC_DEFUN([AC_CHOOSE_CHARSET_LIBICONV],\n[\n    AC_MSG_RESULT([yes, type=libiconv])\n    CHARCONVLIBS=\"$ICONVLIBS\"\n    DCMTK_ENABLE_CHARSET_CONVERSION=\"DCMTK_CHARSET_CONVERSION_ICONV\"\n])\n\nAC_DEFUN([AC_CHOOSE_CHARSET_LIBICU],\n[\n    AC_MSG_RESULT([yes, type=libicu])\n    CHARCONVINCLUDES=\"$ICUINCLUDES\"\n    CHARCONVLIBS=\"$ICULIBS\"\n    DCMTK_ENABLE_CHARSET_CONVERSION=\"DCMTK_CHARSET_CONVERSION_ICU\"\n])\n\nAC_DEFUN([AC_CHOOSE_CHARSET_STDLIBC_ICONV],\n[\n    AC_MSG_RESULT([yes, type=stdlibc])\n    DCMTK_ENABLE_CHARSET_CONVERSION=\"DCMTK_CHARSET_CONVERSION_STDLIBC_ICONV\"\n])\n\nAC_DEFUN([AC_CHOOSE_CHARSET_IMPL],\n[\nif test \"$WITH_LIBICONV\" = \"yes\"; then\n    AC_CHOOSE_CHARSET_LIBICONV()\nelif test \"$WITH_LIBICU\" = \"yes\"; then\n    AC_CHOOSE_CHARSET_LIBICU()\nelif test \"$WITH_STDLIBC_ICONV\" = \"yes\"; then\n    AC_CHOOSE_CHARSET_STDLIBC_ICONV()\nelse\n    AC_MSG_RESULT(no)\nfi\n])\n\nAC_MSG_CHECKING(whether to enable character set conversion support)\nAC_ARG_ENABLE(charconv,\n[  --enable-charconv=TYPE  enable character set conversion support\n                          (libiconv/libicu/stdlibc/auto=default)\n  --disable-charconv      disable character set conversion support],\n[ case \"$enableval\" in\n  yes|auto)\n    AC_CHOOSE_CHARSET_IMPL()\n    ;;\n  libiconv)\n    AC_CHOOSE_CHARSET_LIBICONV()\n    ;;\n  libicu)\n    AC_CHOOSE_CHARSET_LIBICU()\n    ;;\n  stdlibc)\n    AC_CHOOSE_CHARSET_STDLIBC_ICONV()\n    ;;\n  no)\n    AC_MSG_RESULT(no)\n    ;;\n  *)\n    AC_CHOOSE_CHARSET_IMPL()\n    ;;\n  esac ],\n  [AC_CHOOSE_CHARSET_IMPL()]\n)\n\nAC_SUBST(CHARCONVINCLUDES)\nAC_SUBST(CHARCONVLIBS)\n\nif [[ ! -z \"$DCMTK_ENABLE_CHARSET_CONVERSION\" ]]; then\n  AC_DEFINE_UNQUOTED(DCMTK_ENABLE_CHARSET_CONVERSION,\n    [$DCMTK_ENABLE_CHARSET_CONVERSION],\n    [Define to select character set conversion implementation.])\nfi\n\n\ndnl -------------------------------------------------------\ndnl include config test code from config/tests\ndnl -------------------------------------------------------\n\nac_enable_cxx11=\"no\"\nAC_MSG_CHECKING(whether to enable C++11 support)\nAC_ARG_ENABLE(cxx11,\n[  --enable-cxx11          use C++11\n  --disable-cxx11         do not use C++11 (default)],\n[ case \"$enableval\" in\n  yes)\n   AC_MSG_RESULT()\n   AX_CXX_COMPILE_STDCXX([11], [noext], [optional])\n   if test \"$HAVE_CXX11 == 1\"; then\n     ac_enable_cxx11=\"yes\"\n   fi\n   AC_MSG_CHECKING(whether to enable C++11 support)\n   ;;\n\n  *)\n   ac_enable_cxx11=\"no\"\n   ;;\n  esac ]\n)\nAC_MSG_RESULT($ac_enable_cxx11)\n\n\ndnl -------------------------------------------------------\ndnl Enable/disable STL support.\ndnl -------------------------------------------------------\n\nac_enable_stl=\"no\"\nAC_MSG_CHECKING(whether to enable STL support)\nAC_ARG_ENABLE(stl,\n[  --enable-stl            use C++ STL\n  --disable-stl           do not use C++ STL (default)],\n[ case \"$enableval\" in\n  yes)\n   ac_enable_stl=\"yes\"\n   ;;\n\n  *)\n    ac_enable_stl=\"no\"\n    ;;\n  esac ]\n)\nAC_MSG_RESULT($ac_enable_stl)\n\n\nac_enable_stl_vector=\"auto\"\nAC_MSG_CHECKING(whether to enable STL vector support)\nAC_ARG_ENABLE(stl-vector,\n[  --enable-stl-vector     use C++ STL vector\n  --disable-stl-vector    do not use C++ STL vector],\n[ case \"$enableval\" in\n  yes)\n   ac_enable_stl_vector=\"yes\"\n   ;;\n\n  *)\n    ac_enable_stl_vector=\"no\"\n    ;;\n  esac]\n)\nif test \"$ac_enable_stl_vector\" = \"auto\"; then\n  ac_enable_stl_vector=\"$ac_enable_stl\"\nfi\nif test \"$ac_enable_stl_vector\" = \"yes\"; then\n  AC_RUN_IFELSE([AC_LANG_SOURCE([[#include \"tests/vector.cc\"]])], [AC_DEFINE(HAVE_STL_VECTOR, , [Define if STL's vector should be used.])], [ac_enable_stl_vector=\"unsupported -> no\"])\nfi\nAC_MSG_RESULT($ac_enable_stl_vector)\n\nac_enable_stl_algorithm=\"auto\"\nAC_MSG_CHECKING(whether to enable STL algorithm support)\nAC_ARG_ENABLE(stl-algorithm,\n[  --enable-stl-algorithm  use C++ STL algorithm\n  --disable-stl-algorithm do not use C++ STL algorithm],\n[ case \"$enableval\" in\n  yes)\n   ac_enable_stl_algorithm=\"yes\"\n   ;;\n\n  *)\n    ac_enable_stl_algorithm=\"no\"\n    ;;\n  esac ]\n)\nif test \"$ac_enable_stl_algorithm\" = \"auto\"; then\n  ac_enable_stl_algorithm=\"$ac_enable_stl\"\nfi\nif test \"$ac_enable_stl_algorithm\" = \"yes\"; then\n  AC_RUN_IFELSE([AC_LANG_SOURCE([[#include \"tests/algo.cc\"]])], [AC_DEFINE(HAVE_STL_ALGORITHM, , [Define if STL's algorithm should be used.])], [ac_enable_stl_algorithm=\"unsupported -> no\"])\nfi\nAC_MSG_RESULT($ac_enable_stl_algorithm)\n\nac_enable_stl_limits=\"auto\"\nAC_MSG_CHECKING(whether to enable STL limits support)\nAC_ARG_ENABLE(stl-limits,\n[  --enable-stl-limits     use C++ STL limits\n  --disable-stl-limits    do not use C++ STL limits],\n[ case \"$enableval\" in\n  yes)\n   ac_enable_stl_limits=\"yes\"\n   ;;\n\n  *)\n    ac_enable_stl_limits=\"no\"\n    ;;\n  esac ]\n)\nif test \"$ac_enable_stl_limits\" = \"auto\"; then\n  ac_enable_stl_limits=\"$ac_enable_stl\"\nfi\nif test \"$ac_enable_stl_limits\" = \"yes\"; then\n  AC_RUN_IFELSE([AC_LANG_SOURCE([[#include \"tests/limits.cc\"]])], [AC_DEFINE(HAVE_STL_LIMITS, , [Define if STL's limits should be used.])], [ac_enable_stl_limits=\"unsupported -> no\"])\nfi\nAC_MSG_RESULT($ac_enable_stl_limits)\n\nac_enable_stl_list=\"auto\"\nAC_MSG_CHECKING(whether to enable STL list support)\nAC_ARG_ENABLE(stl-list,\n[  --enable-stl-list       use C++ STL list\n  --disable-stl-list      do not use C++ STL list],\n[ case \"$enableval\" in\n  yes)\n   ac_enable_stl_list=\"yes\"\n   ;;\n\n  *)\n    ac_enable_stl_list=\"no\"\n    ;;\n  esac ]\n)\nif test \"$ac_enable_stl_list\" = \"auto\"; then\n  ac_enable_stl_list=\"$ac_enable_stl\"\nfi\nif test \"$ac_enable_stl_list\" = \"yes\"; then\n  AC_RUN_IFELSE([AC_LANG_SOURCE([[#include \"tests/list.cc\"]])], [AC_DEFINE(HAVE_STL_LIST, , [Define if STL's list should be used.])], [ac_enable_stl_list=\"unsupported -> no\"])\nfi\nAC_MSG_RESULT($ac_enable_stl_list)\n\nac_enable_stl_map=\"auto\"\nAC_MSG_CHECKING(whether to enable STL map support)\nAC_ARG_ENABLE(stl-map,\n[  --enable-stl-map        use C++ STL map\n  --disable-stl-map       do not use C++ STL map],\n[ case \"$enableval\" in\n  yes)\n   ac_enable_stl_map=\"yes\"\n   ;;\n\n  *)\n    ac_enable_stl_map=\"no\"\n    ;;\n  esac ]\n)\nif test \"$ac_enable_stl_map\" = \"auto\"; then\n  ac_enable_stl_map=\"$ac_enable_stl\"\nfi\nif test \"$ac_enable_stl_map\" = \"yes\"; then\n  AC_RUN_IFELSE([AC_LANG_SOURCE([[#include \"tests/map.cc\"]])], [AC_DEFINE(HAVE_STL_MAP, , [Define if STL's map should be used.])], [ac_enable_stl_map=\"unsupported -> no\"])\nfi\nAC_MSG_RESULT($ac_enable_stl_map)\n\nac_enable_stl_memory=\"auto\"\nAC_MSG_CHECKING(whether to enable STL memory support)\nAC_ARG_ENABLE(stl-memory,\n[  --enable-stl-memory     use C++ STL memory\n  --disable-stl-memory    do not use C++ STL memory],\n[ case \"$enableval\" in\n  yes)\n   ac_enable_stl_memory=\"yes\"\n   ;;\n\n  *)\n    ac_enable_stl_memory=\"no\"\n    ;;\n  esac ]\n)\nif test \"$ac_enable_stl_memory\" = \"auto\"; then\n  ac_enable_stl_memory=\"$ac_enable_stl\"\nfi\nif test \"$ac_enable_stl_memory\" = \"yes\"; then\n  AC_RUN_IFELSE([AC_LANG_SOURCE([[#include \"tests/memory.cc\"]])], [AC_DEFINE(HAVE_STL_MEMORY, , [Define if STL's memory should be used.])], [ac_enable_stl_memory=\"unsupported -> no\"])\nfi\nAC_MSG_RESULT($ac_enable_stl_memory)\n\nac_enable_stl_stack=\"auto\"\nAC_MSG_CHECKING(whether to enable STL stack support)\nAC_ARG_ENABLE(stl-stack,\n[  --enable-stl-stack      use C++ STL stack\n  --disable-stl-stack     do not use C++ STL stack],\n[ case \"$enableval\" in\n  yes)\n   ac_enable_stl_stack=\"yes\"\n   ;;\n\n  *)\n    ac_enable_stl_stack=\"no\"\n    ;;\n  esac ]\n)\nif test \"$ac_enable_stl_stack\" = \"auto\"; then\n  ac_enable_stl_stack=\"$ac_enable_stl\"\nfi\nif test \"$ac_enable_stl_stack\" = \"yes\"; then\n  AC_RUN_IFELSE([AC_LANG_SOURCE([[#include \"tests/stack.cc\"]])], [AC_DEFINE(HAVE_STL_STACK, , [Define if STL's stack should be used.])], []ac_enable_stl_stack=\"unsupported -> no\")\nfi\nAC_MSG_RESULT($ac_enable_stl_stack)\n\nac_enable_stl_string=\"auto\"\nAC_MSG_CHECKING(whether to enable STL string support)\nAC_ARG_ENABLE(stl-string,\n[  --enable-stl-string     use C++ STL string\n  --disable-stl-string    do not use C++ STL string],\n[ case \"$enableval\" in\n  yes)\n   ac_enable_stl_string=\"yes\"\n   ;;\n\n  *)\n    ac_enable_stl_string=\"no\"\n    ;;\n  esac ]\n)\nif test \"$ac_enable_stl_string\" = \"auto\"; then\n  ac_enable_stl_string=\"$ac_enable_stl\"\nfi\nif test \"$ac_enable_stl_string\" = \"yes\"; then\n  AC_RUN_IFELSE([AC_LANG_SOURCE([[#include \"tests/string.cc\"]])], [AC_DEFINE(HAVE_STL_STRING, , [Define if STL's string should be used.])], [ac_enable_stl_string=\"unsupported -> no\"])\nfi\nAC_MSG_RESULT($ac_enable_stl_string)\n\nac_enable_stl_type_traits=\"auto\"\nAC_MSG_CHECKING(whether to enable STL type-traits support)\nAC_ARG_ENABLE(stl-type-traits,\n[  --enable-stl-type-traits\n                          use C++ STL type-traits\n  --disable-stl-type-traits\n                          do not use C++ STL type-traits],\n[ case \"$enableval\" in\n  yes)\n   ac_enable_stl_type_traits=\"yes\"\n   ;;\n\n  *)\n    ac_enable_stl_type_traits=\"no\"\n    ;;\n  esac ]\n)\nif test \"$ac_enable_stl_type_traits\" = \"auto\"; then\n  ac_enable_stl_type_traits=\"$ac_enable_stl\"\nfi\nif test \"$ac_enable_stl_type_traits\" = \"yes\"; then\n  AC_RUN_IFELSE([AC_LANG_SOURCE([[#include \"tests/ttraits.cc\"]])], [AC_DEFINE(HAVE_STL_TYPE_TRAITS, , [Define if STL's type traits should be used.])], [ac_enable_stl_type_traits=\"unsupported -> no\"])\nfi\nAC_MSG_RESULT($ac_enable_stl_type_traits)\n\nac_enable_stl_tuple=\"auto\"\nAC_MSG_CHECKING(whether to enable STL tuple support)\nAC_ARG_ENABLE(stl-tuple,\n[  --enable-stl-tuple      use C++ STL tuple\n  --disable-stl-tuple     do not use C++ STL tuple],\n[ case \"$enableval\" in\n  yes)\n   ac_enable_stl_tuple=\"yes\"\n   ;;\n\n  *)\n    ac_enable_stl_tuple=\"no\"\n    ;;\n  esac ]\n)\nif test \"$ac_enable_stl_tuple\" = \"auto\"; then\n  ac_enable_stl_tuple=\"$ac_enable_stl\"\nfi\nif test \"$ac_enable_stl_tuple\" = \"yes\"; then\n  AC_RUN_IFELSE([AC_LANG_SOURCE([[#include \"tests/tuple.cc\"]])], [AC_DEFINE(HAVE_STL_TUPLE, , [Define if STL's tuple should be used.])], [ac_enable_stl_tuple=\"unsupported -> no\"])\nfi\nAC_MSG_RESULT($ac_enable_stl_tuple)\n\nac_enable_stl_system_error=\"auto\"\nAC_MSG_CHECKING(whether to enable STL system_error support)\nAC_ARG_ENABLE(stl-system-error,\n[  --enable-stl-system-error\n                          use C++ STL system_error\n  --disable-stl-system_error\n                          do not use C++ STL system_error],\n[ case \"$enableval\" in\n  yes)\n   ac_enable_stl_system_error=\"yes\"\n   ;;\n\n  *)\n    ac_enable_stl_system_error=\"no\"\n    ;;\n  esac ]\n)\nif test \"$ac_enable_stl_system_error\" = \"auto\"; then\n  ac_enable_stl_system_error=\"$ac_enable_stl\"\nfi\nif test \"$ac_enable_stl_system_error\" = \"yes\"; then\n  AC_RUN_IFELSE([AC_LANG_SOURCE([[#include \"tests/syserr.cc\"]])], [AC_DEFINE(HAVE_STL_SYSTEM_ERROR, , [Define if STL's system_error should be used.])], [ac_enable_stl_system_error=\"unsupported -> no\"])\nfi\nAC_MSG_RESULT($ac_enable_stl_system_error)\n\n\ndnl -------------------------------------------------------\ndnl Test for some additional functions and keywords\ndnl -------------------------------------------------------\n\nAC_CHECK_SYNC_FN([__sync_add_and_fetch],[HAVE_SYNC_ADD_AND_FETCH])\nAC_CHECK_SYNC_FN([__sync_sub_and_fetch],[HAVE_SYNC_SUB_AND_FETCH])\nAC_CHECK_ALIGNOF([HAVE_GNU_ALIGNOF])\nAC_CHECK_ATTRIBUTE_ALIGNED([HAVE_ATTRIBUTE_ALIGNED])\nAC_CHECK_ATTRIBUTE_ALIGNED_SUPPORTS_TEMPLATES([ATTRIBUTE_ALIGNED_SUPPORTS_TEMPLATES])\nAC_CHECK_DEFAULT_CONSTRUCTOR_DETECTION_VIA_SFINAE([HAVE_DEFAULT_CONSTRUCTOR_DETECTION_VIA_SFINAE])\n\ndnl -------------------------------------------------------\ndnl Test if passwd has the pw_gecos field\ndnl -------------------------------------------------------\n\nAC_MSG_CHECKING(whether struct pwd contains the field pw_gecos)\nAC_TRY_COMPILE([#include <pwd.h>],\n  [&passwd::pw_gecos;],\n  [ AC_MSG_RESULT(yes)\n    AC_DEFINE(HAVE_PASSWD_GECOS, , [Define if passwd::pw_gecos is available.]) ],\n  [AC_MSG_RESULT(no)])\n\ndnl -------------------------------------------------------\ndnl Test if SYS_gettid is available\ndnl -------------------------------------------------------\n\nAC_MSG_CHECKING(for SYS_gettid in sys/syscall.h)\nAC_TRY_COMPILE([#include <sys/syscall.h>],\n  [SYS_gettid;],\n  [ AC_MSG_RESULT(yes)\n    AC_DEFINE(HAVE_SYS_GETTID, , [Define if your system has a prototype for gettid.]) ],\n  [AC_MSG_RESULT(no)])\n\ndnl -------------------------------------------------------\ndnl Set optimizer and debug compiler flags\ndnl -------------------------------------------------------\nCFLAGS=\"$DEBUGCFLAGS $CFLAGS\"\nCXXFLAGS=\"$DEBUGCXXFLAGS $CXXFLAGS\"\n\ndnl -------------------------------------------------------\ndnl Special Definitions for output\ndnl -------------------------------------------------------\nAC_SUBST(CXXFLAGS)\nAC_SUBST(OPENSSLLIBS)\nAC_SUBST(TIFFLIBS)\nAC_SUBST(PNGLIBS)\nAC_SUBST(MATHLIBS)\nAC_SUBST(ZLIBLIBS)\nAC_SUBST(XMLLIBS)\nAC_SUBST(TCPWRAPPERLIBS)\nAC_SUBST(SNDFILELIBS)\nAC_SUBST(ICONVLIBS)\nAC_SUBST(DEBUG)\n\nAC_OUTPUT(Makefile.def Makefile)\n\ndnl disabled: AC_ARG_PROGRAM\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-dcmtk-3.6.2-elvbyzfcym6jgicfip6mstufpq2wlfqb/spack-src/dcmsr/include/dcmtk/dcmsr/codes/dcm.h",
        "/tmp/vanessa/spack-stage/spack-stage-dcmtk-3.6.2-elvbyzfcym6jgicfip6mstufpq2wlfqb/spack-src/dcmsr/tests/gmon.out"
    ],
    "total_files": 2699
}