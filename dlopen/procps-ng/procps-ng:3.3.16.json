{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/configure.ac": "#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\nAC_PREREQ([2.69])\nAC_CONFIG_MACRO_DIR([m4])\nAC_INIT([procps-ng],\n\tm4_esyscmd([misc/git-version-gen .tarball-version]),\n\t[procps@freelists.org],,[https://gitlab.com/procps-ng/procps])\nAM_INIT_AUTOMAKE([foreign 1.11 subdir-objects -Wall -Wno-portability tar-pax no-dist-gzip dist-xz])\nAM_SILENT_RULES([yes])\nAC_CONFIG_SRCDIR([free.c])\nAC_CONFIG_HEADERS([config.h])\n\n# Checks for programs.\nAC_USE_SYSTEM_EXTENSIONS\nAC_SYS_LARGEFILE\nAC_PROG_AWK\nAC_PROG_CC\nAC_PROG_CC_STDC\nif test \"$cross_compiling\" = no; then\n  if test \"x$ac_cv_prog_cc_c99\" = \"xno\" || test \"x$ac_cv_prog_cc_c99\" = \"x\"; then\n  # We might be on RHEL5 with a git checkout and so broken\n  # autoconf. Check if CC is gcc and if it bails when given -std=gnu99.\n  # If not, use that.  Yuck.\n    if test \"x$ac_cv_c_compiler_gnu\" = \"xyes\"; then\n       CC=\"$CC -std=gnu99\"\n       AC_RUN_IFELSE(\n          [AC_LANG_PROGRAM([],[[\n  return 0;\n      ]])],\n      [],\n      [AC_MSG_ERROR([Could not find a C99 compatible compiler])])\n    else\n      AC_MSG_ERROR([Could not find a C99 compatible compiler])\n    fi\n  fi\nfi\nAM_PROG_CC_C_O\nAC_PROG_CPP\nAC_PROG_INSTALL\nAC_PROG_LN_S\nPKG_PROG_PKG_CONFIG\nAC_PROG_MAKE_SET\n\nAC_PATH_PROG(PO4A, po4a)\nif test \"xPO4A\" = \"x\" ; then\n    AM_CONDITIONAL(USE_PO4A, false)\nelse\n    AM_CONDITIONAL(USE_PO4A, true)\nfi\n# Checks for header files.\nAC_HEADER_MAJOR\nAC_CHECK_HEADERS([arpa/inet.h fcntl.h float.h langinfo.h libintl.h limits.h locale.h netinet/in.h stdint.h stdio_ext.h stdlib.h string.h sys/file.h sys/ioctl.h sys/param.h sys/time.h termios.h unistd.h utmp.h values.h wchar.h wctype.h])\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_CHECK_HEADER_STDBOOL\nAC_TYPE_UID_T\nAC_C_INLINE\nAC_TYPE_INT32_T\nAC_TYPE_PID_T\nAC_C_RESTRICT\nAC_TYPE_SIZE_T\nAC_TYPE_SSIZE_T\nAC_CHECK_MEMBERS([struct stat.st_rdev])\n\ndnl libtool\nLT_INIT\n\n# Checks for library functions.\nAC_FUNC_ERROR_AT_LINE\nAC_FUNC_FORK\nAC_FUNC_MALLOC\nAC_FUNC_MBRTOWC\nAC_FUNC_MMAP\nAC_FUNC_REALLOC\nAC_FUNC_STRTOD\n\nusrbin_execdir='${exec_prefix}/bin'\nAC_SUBST([usrbin_execdir])\n\nif test \"x$host_os\" = xcygwin\nthen\n  prefix=/usr\n  sysconfdir=/etc\n  libexecdir=/usr/lib\n  localstatedir=/var\n  datadir=/usr/share\n  mandir=/usr/share/man\n  infodir=/usr/share/info\n  AC_SUBST([prefix])\n  AC_SUBST([sysconfdir])\n  AC_SUBST([libexecdir])\n  AC_SUBST([localstatedir])\n  AC_SUBST([datadir])\n  AC_SUBST([mandir])\n  AC_SUBST([infodir])\nfi\n\nAM_GNU_GETTEXT_VERSION([0.14.1])\nAM_GNU_GETTEXT([external])\nif test -d \"$srcdir/po\"\nthen\n\tALL_LINGUAS=`cd $srcdir/po > /dev/null && echo *.po | sed 's/\\.po//g'`\nelse\n\tALL_LINGUAS=\"af am ar as be bg bn_IN bn ca cs cy da de el en_GB es et eu_ES fa fi fr gl gu he hi hr hu hy id is it ja ka kn ko ku lo lt lv mk ml mr ms my nb nl nn no nso or pa pl pt_BR pt ro ru si sk sl sq sr@Latn sr sv ta te th tr uk ur vi zh_CN zh_TW zu\"\nfi\n\nAC_CHECK_HEADERS(error.h, [], [], AC_INCLUDES_DEFAULT)\n\nAC_CHECK_HEADERS(stdio_ext.h, [], [], AC_INCLUDES_DEFAULT)\n\nAC_MSG_CHECKING(whether program_invocation_name is defined)\nAC_TRY_COMPILE([#include <errno.h>],\n\t\t[program_invocation_name = \"test\";],\n\t\tAC_DEFINE(HAVE_PROGRAM_INVOCATION_NAME, 1,\n\t\t\t[Define if program_invocation_name is defined])\n\t\tAC_MSG_RESULT(yes),\n\t\tAC_MSG_RESULT(no))\n\nAC_MSG_CHECKING(whether program_invocation_short_name is defined)\nAC_TRY_COMPILE([#include <errno.h>],\n\t\t[program_invocation_short_name = \"test\";],\n\t\tAC_DEFINE(HAVE_PROGRAM_INVOCATION_SHORT_NAME, 1,\n\t\t\t[Define if program_invocation_short_name is defined])\n\t\tAC_MSG_RESULT(yes),\n\t\tAC_MSG_RESULT(no))\n\ndnl watch8bit must be before the AC_ARG_WITH set as it sets up ncurses\nAC_SUBST([WITH_WATCH8BIT])\nAC_ARG_ENABLE([watch8bit],\n  AS_HELP_STRING([--enable-watch8bit], [enable watch to be 8bit clean (requires ncursesw)]),\n  [], [enable_watch8bit=no]\n)\nif test \"$enable_watch8bit\" = \"yes\"; then\n  AC_DEFINE([WITH_WATCH8BIT], [1], [Enable 8 bit clean watch])\nfi\n\nAC_ARG_ENABLE([libselinux],\n  AS_HELP_STRING([--enable-libselinux], [enable libselinux]),\n  [], [enable_libselinux=no]\n)\nif test \"$enable_libselinux\" = \"yes\"; then\n  AC_DEFINE([ENABLE_LIBSELINUX], [1], [Enable libselinux])\nfi\n\n# Optional packages - AC_ARG_WITH\nAC_ARG_WITH([ncurses],\n  AS_HELP_STRING([--without-ncurses], [build only applications not needing ncurses]),\n  [], [with_ncurses=yes]\n)\nif test \"x$with_ncurses\" = xno; then\n  AM_CONDITIONAL(WITH_NCURSES, false)\nelse\n  PKG_CHECK_MODULES([NCURSES], [ncurses], [], [\n    AC_CHECK_LIB(ncurses, initscr, [have_ncurses=yes], [have_ncurses=no])\n    AC_CHECK_HEADERS(curses.h ncurses.h term.h, [], [have_ncurses=no], AC_INCLUDES_DEFAULT)\n    if test \"x$have_ncurses\" = xno; then\n      AC_MSG_ERROR([ncurses support missing/incomplete (for partial build use --without-ncurses)])\n    fi\n    NCURSES_LIBS=\"-lncurses\"\n  ])\n  AM_CONDITIONAL(WITH_NCURSES, true)\n  if test \"$enable_watch8bit\" = yes; then\n    PKG_CHECK_MODULES([NCURSESW], [ncursesw], [WATCH_NCURSES_LIBS=\"$NCURSESW_LIBS\"]\n    [WATCH_NCURSES_CFLAGS=\"$NCURSESW_CFLAGS\"], [\n      AC_CHECK_LIB([ncursesw], [addwstr], [WATCH_NCURSES_LIBS=-lncursesw],\n                   [AC_MSG_ERROR([Cannot find ncurses wide library ncursesw with --enable-watch8bit])])\n    ])\n  else\n    WATCH_NCURSES_LIBS=\"$NCURSES_LIBS\"\n  fi\nfi\nAC_SUBST([NCURSES_LIBS])\nAC_SUBST([WATCH_NCURSES_LIBS])\nAC_SUBST([WATCH_NCURSES_CFLAGS])\n\nAC_ARG_WITH([systemd],\n  [AS_HELP_STRING([--with-systemd], [enable systemd support])],\n  [], [with_systemd=no]\n)\nAS_IF([test \"x$with_systemd\" != \"xno\"], [\n  PKG_CHECK_MODULES([SYSTEMD], [libsystemd])\n  AC_DEFINE(WITH_SYSTEMD, 1, [enable systemd support])\n])\nAM_CONDITIONAL([WITH_SYSTEMD], [test x$with_systemd != xno])\n\nAC_ARG_WITH([elogind],\n  [AS_HELP_STRING([--with-elogind], [enable elogind support])],\n  [], [with_elogind=no]\n)\n# Do not allow elogind if systemd is wanted and found\nAS_IF([test \"x$with_systemd\" != \"xno\"], [with_elogind=no])\n\nAS_IF([test \"x$with_elogind\" != \"xno\"], [\n  PKG_CHECK_MODULES([ELOGIND], [libelogind])\n  AC_DEFINE(WITH_ELOGIND, 1, [enable elogind support])\n])\nAM_CONDITIONAL([WITH_ELOGIND], [test x$with_elogind != xno])\n\n# AC_ARG_ENABLEs\nAC_ARG_ENABLE([pidof],\n  AS_HELP_STRING([--disable-pidof], [do not build pidof]),\n  [], [enable_pidof=yes]\n)\nAM_CONDITIONAL(BUILD_PIDOF, test \"x$enable_pidof\" = xyes)\n\nAC_ARG_ENABLE([kill],\n  AS_HELP_STRING([--disable-kill], [do not build kill]),\n  [], [enable_kill=yes]\n)\nAM_CONDITIONAL(BUILD_KILL, test \"x$enable_kill\" = xyes)\nAM_CONDITIONAL(LINUX, test \"x$host_os\" = xlinux-gnu)\nAM_CONDITIONAL(CYGWIN, test \"x$host_os\" = xcygwin)\n\nAC_ARG_ENABLE([skill],\n  AS_HELP_STRING([--enable-skill], [build skill and snice]),\n  [], [enable_skill=no]\n)\nAM_CONDITIONAL(BUILD_SKILL, test \"x$enable_skill\" = xyes)\n\nAC_ARG_ENABLE([examples],\n  AS_HELP_STRING([--enable-examples], [add example files to installation]),\n  [], [enable_examples=no]\n)\nAM_CONDITIONAL(EXAMPLE_FILES, test \"x$enable_examples\" = xyes)\n\nAC_ARG_ENABLE([sigwinch],\n  AS_HELP_STRING([--enable-sigwinch], [reduce impact of x-windows resize operations on top]),\n  [], [enable_sigwinch=no]\n)\nif test \"x$enable_sigwinch\" = xyes; then\n  AC_DEFINE(SIGNALS_LESS, 1, [reduce impact of x-windows resize operations on top])\nfi\n\nAC_ARG_ENABLE([wide-percent],\n  AS_HELP_STRING([--enable-wide-percent], [provide extra precision under %CPU and %MEM for top]),\n  [], [enable_wide_percent=no]\n)\nif test \"x$enable_wide_percent\" = xyes; then\n  AC_DEFINE(BOOST_PERCNT, 1, [provide extra precision under %CPU and %MEM for top])\nfi\n\nAC_ARG_ENABLE([wide-memory],\n  AS_HELP_STRING([--enable-wide-memory], [provide extra precision under memory fields for top]),\n  [], [enable_wide_memory=no]\n)\nif test \"x$enable_wide_memory\" = xyes; then\n  AC_DEFINE(BOOST_MEMORY, 1, [provide extra precision under memory fields for top])\nfi\n\nAC_ARG_ENABLE([modern-top],\n  AS_HELP_STRING([--disable-modern-top], [disable new startup defaults, return to original top]),\n  [], [enable_modern_top=yes]\n)\nif test \"x$enable_modern_top\" = xno; then\n  AC_DEFINE(ORIG_TOPDEFS, 1, [disable new startup defaults, return to original top])\nfi\n\nDL_LIB=\nAC_ARG_ENABLE([numa],\n  AS_HELP_STRING([--disable-numa], [disable NUMA/Node support in top]),\n  [], [enable_numa=yes]\n)\nif test \"x$enable_numa\" = xno; then\n  AC_DEFINE([NUMA_DISABLE], [1], [disable NUMA/Node support in top])\nelse\n  AC_SEARCH_LIBS([dlopen], [dl], [],\n    [AC_MSG_ERROR([dynamic linking unavailable, circumvent with --disable-numa])])\n  if test \"x$ac_cv_search_dlopen\" != \"xnone required\"; then\n    DL_LIB=\"$ac_cv_search_dlopen\"\n  fi\nfi\nAC_SUBST([DL_LIB])\n\nAC_ARG_ENABLE([w-from],\n  AS_HELP_STRING([--enable-w-from], [enable w from field by default]),\n  [], [enable_w_from=no]\n)\nif test \"x$enable_w_from\" = xyes; then\n  AC_DEFINE(W_SHOWFROM, 1, [enable w from field by default])\nfi\n\nAC_ARG_ENABLE([whining],\n  AS_HELP_STRING([--disable-whining], [do not print unnecessary warnings (slackware-ism)]),\n  [], [enable_whining=yes]\n)\nif test \"x$enable_whining\" = xyes; then\n  AC_DEFINE(BUILD_WITH_WHINE, 1, [should extra warnings be printed (slackware-ism)])\nfi\n\nif test x\"$DEJAGNU\" = x\nthen\n  DEJAGNU=\"/dev/null\"\nfi\nAC_SUBST(DEJAGNU)\n\nAC_CHECK_FUNCS([__fpending alarm atexit dup2 gethostname getpagesize gettimeofday iswprint memchr memmove memset nl_langinfo putenv regcomp rpmatch select setlocale strcasecmp strchr strcspn strdup strerror strncasecmp strndup strpbrk strrchr strspn strstr strtol strtoul strtoull strverscmp utmpname wcwidth])\n\nAC_CONFIG_FILES([Makefile\n                 include/Makefile\n                 man-po/Makefile\n                 po/Makefile.in\n                 proc/libprocps.pc\n                 testsuite/Makefile])\nAC_OUTPUT\n",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/ltmain.sh": "#! /bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=\"2.4.6 Debian-2.4.6-11\"\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-01-20.17; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2015-10-07.11; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    _G_rc_run_hooks=false\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook funcions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      if eval $_G_hook '\"$@\"'; then\n        # store returned options list back into positional\n        # parameters for next 'cmd' execution.\n        eval _G_hook_result=\\$${_G_hook}_result\n        eval set dummy \"$_G_hook_result\"; shift\n        _G_rc_run_hooks=:\n      fi\n    done\n\n    $_G_rc_run_hooks && func_run_hooks_result=$_G_hook_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, you may remove/edit\n# any options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  In this case you also must return $EXIT_SUCCESS to let the\n# hook's caller know that it should pay attention to\n# '<hooked_function_name>_result'.  Returning $EXIT_FAILURE signalizes that\n# arguments are left untouched by the hook and therefore caller will ignore the\n# result variable.\n#\n# Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#        # No change in '$@' (ignored completely by this hook).  There is\n#        # no need to do the equivalent (but slower) action:\n#        # func_quote_for_eval ${1+\"$@\"}\n#        # my_options_prep_result=$func_quote_for_eval_result\n#        false\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        args_changed=false\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=:\n#                         args_changed=:\n#                         ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         args_changed=:\n#                         ;;\n#            *)           # Make sure the first unrecognised option \"$_G_opt\"\n#                         # is added back to \"$@\", we could need that later\n#                         # if $args_changed is true.\n#                         set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n#          esac\n#        done\n#\n#        if $args_changed; then\n#          func_quote_for_eval ${1+\"$@\"}\n#          my_silent_option_result=$func_quote_for_eval_result\n#        fi\n#\n#        $args_changed\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        false\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll also need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options_finish [ARG]...\n# ----------------------------\n# Finishing the option parse loop (call 'func_options' hooks ATM).\nfunc_options_finish ()\n{\n    $debug_cmd\n\n    _G_func_options_finish_exit=false\n    if func_run_hooks func_options ${1+\"$@\"}; then\n      func_options_finish_result=$func_run_hooks_result\n      _G_func_options_finish_exit=:\n    fi\n\n    $_G_func_options_finish_exit\n}\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    _G_rc_options=false\n\n    for my_func in options_prep parse_options validate_options options_finish\n    do\n      if eval func_$my_func '${1+\"$@\"}'; then\n        eval _G_res_var='$'\"func_${my_func}_result\"\n        eval set dummy \"$_G_res_var\" ; shift\n        _G_rc_options=:\n      fi\n    done\n\n    # Save modified positional parameters for caller.  As a top-level\n    # options-parser function we always need to set the 'func_options_result'\n    # variable (regardless the $_G_rc_options value).\n    if $_G_rc_options; then\n      func_options_result=$_G_res_var\n    else\n      func_quote_for_eval ${1+\"$@\"}\n      func_options_result=$func_quote_for_eval_result\n    fi\n\n    $_G_rc_options\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propagate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning $EXIT_SUCCESS (otherwise $EXIT_FAILURE is returned).\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    _G_rc_options_prep=false\n    if func_run_hooks func_options_prep ${1+\"$@\"}; then\n      _G_rc_options_prep=:\n      # save modified positional parameters for caller\n      func_options_prep_result=$func_run_hooks_result\n    fi\n\n    $_G_rc_options_prep\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    _G_rc_parse_options=false\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      if func_run_hooks func_parse_options ${1+\"$@\"}; then\n        eval set dummy \"$func_run_hooks_result\"; shift\n        _G_rc_parse_options=:\n      fi\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_match_parse_options=:\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      if test $# = 0 && func_missing_arg $_G_opt; then\n                        _G_rc_parse_options=:\n                        break\n                      fi\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           _G_rc_parse_options=: ; break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift\n                      _G_match_parse_options=false\n                      break\n                      ;;\n      esac\n\n      $_G_match_parse_options && _G_rc_parse_options=:\n    done\n\n\n    if $_G_rc_parse_options; then\n      # save modified positional parameters for caller\n      func_quote_for_eval ${1+\"$@\"}\n      func_parse_options_result=$func_quote_for_eval_result\n    fi\n\n    $_G_rc_parse_options\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    _G_rc_validate_options=false\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    if func_run_hooks func_validate_options ${1+\"$@\"}; then\n      # save modified positional parameters for caller\n      func_validate_options_result=$func_run_hooks_result\n      _G_rc_validate_options=:\n    fi\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    $_G_rc_validate_options\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname $scriptversion Debian-2.4.6-11\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/s/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    _G_rc_lt_options_prep=:\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    *)\n      _G_rc_lt_options_prep=false\n      ;;\n    esac\n\n    if $_G_rc_lt_options_prep; then\n      # Pass back the list of options.\n      func_quote_for_eval ${1+\"$@\"}\n      libtool_options_prep_result=$func_quote_for_eval_result\n    fi\n\n    $_G_rc_lt_options_prep\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    _G_rc_lt_parse_options=false\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_match_lt_parse_options=:\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        # An option not handled by this hook function:\n        *)              set dummy \"$_G_opt\" ${1+\"$@\"} ; shift\n                        _G_match_lt_parse_options=false\n                        break\n                        ;;\n      esac\n      $_G_match_lt_parse_options && _G_rc_lt_parse_options=:\n    done\n\n    if $_G_rc_lt_parse_options; then\n      # save modified positional parameters for caller\n      func_quote_for_eval ${1+\"$@\"}\n      libtool_parse_options_result=$func_quote_for_eval_result\n    fi\n\n    $_G_rc_lt_parse_options\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -specs=*             GCC specs files\n      # -stdlib=*            select c++ std lib with clang\n      # -fsanitize=*         Clang/GCC memory and address sanitizer\n      # -fuse-ld=*           Linker select flags for GCC\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*| \\\n      -specs=*|-fsanitize=*|-fuse-ld=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_for_eval \"$arg\"\n\t  arg=$func_quote_for_eval_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink)\n\t  libs=\"$deplibs %DEPLIBS%\"\n\t  test \"X$link_all_deplibs\" != Xno && libs=\"$libs $dependency_libs\"\n\t  ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t    tmp_libs=\n\t    for deplib in $dependency_libs; do\n\t      deplibs=\"$deplib $deplibs\"\n\t      if $opt_preserve_dup_deps; then\n\t\tcase \"$tmp_libs \" in\n\t\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t\tesac\n\t      fi\n\t      func_append tmp_libs \" $deplib\"\n\t    done\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  *)\n\t    func_fatal_configuration \"$modename: unknown library version type '$version_type'\"\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\n# serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsdelf*-gnu)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='NetBSD ld.elf_so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd* | netbsdelf*-gnu)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    $ECHO \"$as_me:$LINENO: $NM conftest.$ac_objext | $lt_cv_sys_global_symbol_pipe > $nlist\" >&AS_MESSAGE_LOG_FD\n    if eval \"$NM\" conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist 2>&AS_MESSAGE_LOG_FD && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd* | netbsdelf*-gnu)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # flang / f18. f95 an alias for gfortran or flang on Debian\n      flang* | f18* | f95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  linux* | k*bsd*-gnu | gnu*)\n    _LT_TAGVAR(link_all_deplibs, $1)=no\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  linux* | k*bsd*-gnu | gnu*)\n    _LT_TAGVAR(link_all_deplibs, $1)=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd* | netbsdelf*-gnu)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n\t_LT_TAGVAR(link_all_deplibs, $1)=no\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      ;;\n\n    netbsd* | netbsdelf*-gnu)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \" \\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \" \\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \" \\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \" \\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \" \\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \" \\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/m4/ltoptions.m4": "# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004-2005, 2007-2009, 2011-2015 Free Software\n#   Foundation, Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 8 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option '$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl 'shared' nor 'disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n\t\t   [_LT_ENABLE_FAST_INSTALL])\n  _LT_UNLESS_OPTIONS([LT_INIT], [aix-soname=aix aix-soname=both aix-soname=svr4],\n\t\t   [_LT_WITH_AIX_SONAME([aix])])\n  ])\n])# _LT_SET_OPTIONS\n\n\n## --------------------------------- ##\n## Macros to handle LT_INIT options. ##\n## --------------------------------- ##\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [1], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the 'shared' and\n# 'disable-shared' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the 'static' and\n# 'disable-static' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the 'fast-install'\n# and 'disable-fast-install' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_AIX_SONAME([DEFAULT])\n# ----------------------------------\n# implement the --with-aix-soname flag, and support the `aix-soname=aix'\n# and `aix-soname=both' and `aix-soname=svr4' LT_INIT options. DEFAULT\n# is either `aix', `both' or `svr4'.  If omitted, it defaults to `aix'.\nm4_define([_LT_WITH_AIX_SONAME],\n[m4_define([_LT_WITH_AIX_SONAME_DEFAULT], [m4_if($1, svr4, svr4, m4_if($1, both, both, aix))])dnl\nshared_archive_member_spec=\ncase $host,$enable_shared in\npower*-*-aix[[5-9]]*,yes)\n  AC_MSG_CHECKING([which variant of shared library versioning to provide])\n  AC_ARG_WITH([aix-soname],\n    [AS_HELP_STRING([--with-aix-soname=aix|svr4|both],\n      [shared library versioning (aka \"SONAME\") variant to provide on AIX, @<:@default=]_LT_WITH_AIX_SONAME_DEFAULT[@:>@.])],\n    [case $withval in\n    aix|svr4|both)\n      ;;\n    *)\n      AC_MSG_ERROR([Unknown argument to --with-aix-soname])\n      ;;\n    esac\n    lt_cv_with_aix_soname=$with_aix_soname],\n    [AC_CACHE_VAL([lt_cv_with_aix_soname],\n      [lt_cv_with_aix_soname=]_LT_WITH_AIX_SONAME_DEFAULT)\n    with_aix_soname=$lt_cv_with_aix_soname])\n  AC_MSG_RESULT([$with_aix_soname])\n  if test aix != \"$with_aix_soname\"; then\n    # For the AIX way of multilib, we name the shared archive member\n    # based on the bitwidth used, traditionally 'shr.o' or 'shr_64.o',\n    # and 'shr.imp' or 'shr_64.imp', respectively, for the Import File.\n    # Even when GNU compilers ignore OBJECT_MODE but need '-maix64' flag,\n    # the AIX toolchain works better with OBJECT_MODE set (default 32).\n    if test 64 = \"${OBJECT_MODE-32}\"; then\n      shared_archive_member_spec=shr_64\n    else\n      shared_archive_member_spec=shr\n    fi\n  fi\n  ;;\n*)\n  with_aix_soname=aix\n  ;;\nesac\n\n_LT_DECL([], [shared_archive_member_spec], [0],\n    [Shared archive member basename, for filename based shared library versioning on AIX])dnl\n])# _LT_WITH_AIX_SONAME\n\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=aix], [_LT_WITH_AIX_SONAME([aix])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=both], [_LT_WITH_AIX_SONAME([both])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=svr4], [_LT_WITH_AIX_SONAME([svr4])])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the 'pic-only' and 'no-pic'\n# LT_INIT options.\n# MODE is either 'yes' or 'no'.  If omitted, it defaults to 'both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic@<:@=PKGS@:>@],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for lt_pkg in $withval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [pic_mode=m4_default([$1], [default])])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n## ----------------- ##\n## LTDL_INIT Options ##\n## ----------------- ##\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/m4/lib-link.m4": "# lib-link.m4 serial 4 (gettext-0.12)\ndnl Copyright (C) 2001-2003 Free Software Foundation, Inc.\ndnl This file is free software, distributed under the terms of the GNU\ndnl General Public License.  As a special exception to the GNU General\ndnl Public License, this file may be distributed as part of a program\ndnl that contains a configuration script generated by Autoconf, under\ndnl the same distribution terms as the rest of that program.\n\ndnl From Bruno Haible.\n\ndnl AC_LIB_LINKFLAGS(name [, dependencies]) searches for libname and\ndnl the libraries corresponding to explicit and implicit dependencies.\ndnl Sets and AC_SUBSTs the LIB${NAME} and LTLIB${NAME} variables and\ndnl augments the CPPFLAGS variable.\nAC_DEFUN([AC_LIB_LINKFLAGS],\n[\n  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])\n  AC_REQUIRE([AC_LIB_RPATH])\n  define([Name],[translit([$1],[./-], [___])])\n  define([NAME],[translit([$1],[abcdefghijklmnopqrstuvwxyz./-],\n                               [ABCDEFGHIJKLMNOPQRSTUVWXYZ___])])\n  AC_CACHE_CHECK([how to link with lib[]$1], [ac_cv_lib[]Name[]_libs], [\n    AC_LIB_LINKFLAGS_BODY([$1], [$2])\n    ac_cv_lib[]Name[]_libs=\"$LIB[]NAME\"\n    ac_cv_lib[]Name[]_ltlibs=\"$LTLIB[]NAME\"\n    ac_cv_lib[]Name[]_cppflags=\"$INC[]NAME\"\n  ])\n  LIB[]NAME=\"$ac_cv_lib[]Name[]_libs\"\n  LTLIB[]NAME=\"$ac_cv_lib[]Name[]_ltlibs\"\n  INC[]NAME=\"$ac_cv_lib[]Name[]_cppflags\"\n  AC_LIB_APPENDTOVAR([CPPFLAGS], [$INC]NAME)\n  AC_SUBST([LIB]NAME)\n  AC_SUBST([LTLIB]NAME)\n  dnl Also set HAVE_LIB[]NAME so that AC_LIB_HAVE_LINKFLAGS can reuse the\n  dnl results of this search when this library appears as a dependency.\n  HAVE_LIB[]NAME=yes\n  undefine([Name])\n  undefine([NAME])\n])\n\ndnl AC_LIB_HAVE_LINKFLAGS(name, dependencies, includes, testcode)\ndnl searches for libname and the libraries corresponding to explicit and\ndnl implicit dependencies, together with the specified include files and\ndnl the ability to compile and link the specified testcode. If found, it\ndnl sets and AC_SUBSTs HAVE_LIB${NAME}=yes and the LIB${NAME} and\ndnl LTLIB${NAME} variables and augments the CPPFLAGS variable, and\ndnl #defines HAVE_LIB${NAME} to 1. Otherwise, it sets and AC_SUBSTs\ndnl HAVE_LIB${NAME}=no and LIB${NAME} and LTLIB${NAME} to empty.\nAC_DEFUN([AC_LIB_HAVE_LINKFLAGS],\n[\n  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])\n  AC_REQUIRE([AC_LIB_RPATH])\n  define([Name],[translit([$1],[./-], [___])])\n  define([NAME],[translit([$1],[abcdefghijklmnopqrstuvwxyz./-],\n                               [ABCDEFGHIJKLMNOPQRSTUVWXYZ___])])\n\n  dnl Search for lib[]Name and define LIB[]NAME, LTLIB[]NAME and INC[]NAME\n  dnl accordingly.\n  AC_LIB_LINKFLAGS_BODY([$1], [$2])\n\n  dnl Add $INC[]NAME to CPPFLAGS before performing the following checks,\n  dnl because if the user has installed lib[]Name and not disabled its use\n  dnl via --without-lib[]Name-prefix, he wants to use it.\n  ac_save_CPPFLAGS=\"$CPPFLAGS\"\n  AC_LIB_APPENDTOVAR([CPPFLAGS], [$INC]NAME)\n\n  AC_CACHE_CHECK([for lib[]$1], [ac_cv_lib[]Name], [\n    ac_save_LIBS=\"$LIBS\"\n    LIBS=\"$LIBS $LIB[]NAME\"\n    AC_TRY_LINK([$3], [$4], [ac_cv_lib[]Name=yes], [ac_cv_lib[]Name=no])\n    LIBS=\"$ac_save_LIBS\"\n  ])\n  if test \"$ac_cv_lib[]Name\" = yes; then\n    HAVE_LIB[]NAME=yes\n    AC_DEFINE([HAVE_LIB]NAME, 1, [Define if you have the $1 library.])\n    AC_MSG_CHECKING([how to link with lib[]$1])\n    AC_MSG_RESULT([$LIB[]NAME])\n  else\n    HAVE_LIB[]NAME=no\n    dnl If $LIB[]NAME didn't lead to a usable library, we don't need\n    dnl $INC[]NAME either.\n    CPPFLAGS=\"$ac_save_CPPFLAGS\"\n    LIB[]NAME=\n    LTLIB[]NAME=\n  fi\n  AC_SUBST([HAVE_LIB]NAME)\n  AC_SUBST([LIB]NAME)\n  AC_SUBST([LTLIB]NAME)\n  undefine([Name])\n  undefine([NAME])\n])\n\ndnl Determine the platform dependent parameters needed to use rpath:\ndnl libext, shlibext, hardcode_libdir_flag_spec, hardcode_libdir_separator,\ndnl hardcode_direct, hardcode_minus_L.\nAC_DEFUN([AC_LIB_RPATH],\n[\n  AC_REQUIRE([AC_PROG_CC])                dnl we use $CC, $GCC, $LDFLAGS\n  AC_REQUIRE([AC_LIB_PROG_LD])            dnl we use $LD, $with_gnu_ld\n  AC_REQUIRE([AC_CANONICAL_HOST])         dnl we use $host\n  AC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT]) dnl we use $ac_aux_dir\n  AC_CACHE_CHECK([for shared library run path origin], acl_cv_rpath, [\n    CC=\"$CC\" GCC=\"$GCC\" LDFLAGS=\"$LDFLAGS\" LD=\"$LD\" with_gnu_ld=\"$with_gnu_ld\" \\\n    ${CONFIG_SHELL-/bin/sh} \"$ac_aux_dir/config.rpath\" \"$host\" > conftest.sh\n    . ./conftest.sh\n    rm -f ./conftest.sh\n    acl_cv_rpath=done\n  ])\n  wl=\"$acl_cv_wl\"\n  libext=\"$acl_cv_libext\"\n  shlibext=\"$acl_cv_shlibext\"\n  hardcode_libdir_flag_spec=\"$acl_cv_hardcode_libdir_flag_spec\"\n  hardcode_libdir_separator=\"$acl_cv_hardcode_libdir_separator\"\n  hardcode_direct=\"$acl_cv_hardcode_direct\"\n  hardcode_minus_L=\"$acl_cv_hardcode_minus_L\"\n  dnl Determine whether the user wants rpath handling at all.\n  AC_ARG_ENABLE(rpath,\n    [  --disable-rpath         do not hardcode runtime library paths],\n    :, enable_rpath=yes)\n])\n\ndnl AC_LIB_LINKFLAGS_BODY(name [, dependencies]) searches for libname and\ndnl the libraries corresponding to explicit and implicit dependencies.\ndnl Sets the LIB${NAME}, LTLIB${NAME} and INC${NAME} variables.\nAC_DEFUN([AC_LIB_LINKFLAGS_BODY],\n[\n  define([NAME],[translit([$1],[abcdefghijklmnopqrstuvwxyz./-],\n                               [ABCDEFGHIJKLMNOPQRSTUVWXYZ___])])\n  dnl By default, look in $includedir and $libdir.\n  use_additional=yes\n  AC_LIB_WITH_FINAL_PREFIX([\n    eval additional_includedir=\\\"$includedir\\\"\n    eval additional_libdir=\\\"$libdir\\\"\n  ])\n  AC_LIB_ARG_WITH([lib$1-prefix],\n[  --with-lib$1-prefix[=DIR]  search for lib$1 in DIR/include and DIR/lib\n  --without-lib$1-prefix     don't search for lib$1 in includedir and libdir],\n[\n    if test \"X$withval\" = \"Xno\"; then\n      use_additional=no\n    else\n      if test \"X$withval\" = \"X\"; then\n        AC_LIB_WITH_FINAL_PREFIX([\n          eval additional_includedir=\\\"$includedir\\\"\n          eval additional_libdir=\\\"$libdir\\\"\n        ])\n      else\n        additional_includedir=\"$withval/include\"\n        additional_libdir=\"$withval/lib\"\n      fi\n    fi\n])\n  dnl Search the library and its dependencies in $additional_libdir and\n  dnl $LDFLAGS. Using breadth-first-seach.\n  LIB[]NAME=\n  LTLIB[]NAME=\n  INC[]NAME=\n  rpathdirs=\n  ltrpathdirs=\n  names_already_handled=\n  names_next_round='$1 $2'\n  while test -n \"$names_next_round\"; do\n    names_this_round=\"$names_next_round\"\n    names_next_round=\n    for name in $names_this_round; do\n      already_handled=\n      for n in $names_already_handled; do\n        if test \"$n\" = \"$name\"; then\n          already_handled=yes\n          break\n        fi\n      done\n      if test -z \"$already_handled\"; then\n        names_already_handled=\"$names_already_handled $name\"\n        dnl See if it was already located by an earlier AC_LIB_LINKFLAGS\n        dnl or AC_LIB_HAVE_LINKFLAGS call.\n        uppername=`echo \"$name\" | sed -e 'y|abcdefghijklmnopqrstuvwxyz./-|ABCDEFGHIJKLMNOPQRSTUVWXYZ___|'`\n        eval value=\\\"\\$HAVE_LIB$uppername\\\"\n        if test -n \"$value\"; then\n          if test \"$value\" = yes; then\n            eval value=\\\"\\$LIB$uppername\\\"\n            test -z \"$value\" || LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$value\"\n            eval value=\\\"\\$LTLIB$uppername\\\"\n            test -z \"$value\" || LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }$value\"\n          else\n            dnl An earlier call to AC_LIB_HAVE_LINKFLAGS has determined\n            dnl that this library doesn't exist. So just drop it.\n            :\n          fi\n        else\n          dnl Search the library lib$name in $additional_libdir and $LDFLAGS\n          dnl and the already constructed $LIBNAME/$LTLIBNAME.\n          found_dir=\n          found_la=\n          found_so=\n          found_a=\n          if test $use_additional = yes; then\n            if test -n \"$shlibext\" && test -f \"$additional_libdir/lib$name.$shlibext\"; then\n              found_dir=\"$additional_libdir\"\n              found_so=\"$additional_libdir/lib$name.$shlibext\"\n              if test -f \"$additional_libdir/lib$name.la\"; then\n                found_la=\"$additional_libdir/lib$name.la\"\n              fi\n            else\n              if test -f \"$additional_libdir/lib$name.$libext\"; then\n                found_dir=\"$additional_libdir\"\n                found_a=\"$additional_libdir/lib$name.$libext\"\n                if test -f \"$additional_libdir/lib$name.la\"; then\n                  found_la=\"$additional_libdir/lib$name.la\"\n                fi\n              fi\n            fi\n          fi\n          if test \"X$found_dir\" = \"X\"; then\n            for x in $LDFLAGS $LTLIB[]NAME; do\n              AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n              case \"$x\" in\n                -L*)\n                  dir=`echo \"X$x\" | sed -e 's/^X-L//'`\n                  if test -n \"$shlibext\" && test -f \"$dir/lib$name.$shlibext\"; then\n                    found_dir=\"$dir\"\n                    found_so=\"$dir/lib$name.$shlibext\"\n                    if test -f \"$dir/lib$name.la\"; then\n                      found_la=\"$dir/lib$name.la\"\n                    fi\n                  else\n                    if test -f \"$dir/lib$name.$libext\"; then\n                      found_dir=\"$dir\"\n                      found_a=\"$dir/lib$name.$libext\"\n                      if test -f \"$dir/lib$name.la\"; then\n                        found_la=\"$dir/lib$name.la\"\n                      fi\n                    fi\n                  fi\n                  ;;\n              esac\n              if test \"X$found_dir\" != \"X\"; then\n                break\n              fi\n            done\n          fi\n          if test \"X$found_dir\" != \"X\"; then\n            dnl Found the library.\n            LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-L$found_dir -l$name\"\n            if test \"X$found_so\" != \"X\"; then\n              dnl Linking with a shared library. We attempt to hardcode its\n              dnl directory into the executable's runpath, unless it's the\n              dnl standard /usr/lib.\n              if test \"$enable_rpath\" = no || test \"X$found_dir\" = \"X/usr/lib\"; then\n                dnl No hardcoding is needed.\n                LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n              else\n                dnl Use an explicit option to hardcode DIR into the resulting\n                dnl binary.\n                dnl Potentially add DIR to ltrpathdirs.\n                dnl The ltrpathdirs will be appended to $LTLIBNAME at the end.\n                haveit=\n                for x in $ltrpathdirs; do\n                  if test \"X$x\" = \"X$found_dir\"; then\n                    haveit=yes\n                    break\n                  fi\n                done\n                if test -z \"$haveit\"; then\n                  ltrpathdirs=\"$ltrpathdirs $found_dir\"\n                fi\n                dnl The hardcoding into $LIBNAME is system dependent.\n                if test \"$hardcode_direct\" = yes; then\n                  dnl Using DIR/libNAME.so during linking hardcodes DIR into the\n                  dnl resulting binary.\n                  LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n                else\n                  if test -n \"$hardcode_libdir_flag_spec\" && test \"$hardcode_minus_L\" = no; then\n                    dnl Use an explicit option to hardcode DIR into the resulting\n                    dnl binary.\n                    LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n                    dnl Potentially add DIR to rpathdirs.\n                    dnl The rpathdirs will be appended to $LIBNAME at the end.\n                    haveit=\n                    for x in $rpathdirs; do\n                      if test \"X$x\" = \"X$found_dir\"; then\n                        haveit=yes\n                        break\n                      fi\n                    done\n                    if test -z \"$haveit\"; then\n                      rpathdirs=\"$rpathdirs $found_dir\"\n                    fi\n                  else\n                    dnl Rely on \"-L$found_dir\".\n                    dnl But don't add it if it's already contained in the LDFLAGS\n                    dnl or the already constructed $LIBNAME\n                    haveit=\n                    for x in $LDFLAGS $LIB[]NAME; do\n                      AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                      if test \"X$x\" = \"X-L$found_dir\"; then\n                        haveit=yes\n                        break\n                      fi\n                    done\n                    if test -z \"$haveit\"; then\n                      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-L$found_dir\"\n                    fi\n                    if test \"$hardcode_minus_L\" != no; then\n                      dnl FIXME: Not sure whether we should use\n                      dnl \"-L$found_dir -l$name\" or \"-L$found_dir $found_so\"\n                      dnl here.\n                      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_so\"\n                    else\n                      dnl We cannot use $hardcode_runpath_var and LD_RUN_PATH\n                      dnl here, because this doesn't fit in flags passed to the\n                      dnl compiler. So give up. No hardcoding. This affects only\n                      dnl very old systems.\n                      dnl FIXME: Not sure whether we should use\n                      dnl \"-L$found_dir -l$name\" or \"-L$found_dir $found_so\"\n                      dnl here.\n                      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-l$name\"\n                    fi\n                  fi\n                fi\n              fi\n            else\n              if test \"X$found_a\" != \"X\"; then\n                dnl Linking with a static library.\n                LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$found_a\"\n              else\n                dnl We shouldn't come here, but anyway it's good to have a\n                dnl fallback.\n                LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-L$found_dir -l$name\"\n              fi\n            fi\n            dnl Assume the include files are nearby.\n            additional_includedir=\n            case \"$found_dir\" in\n              */lib | */lib/)\n                basedir=`echo \"X$found_dir\" | sed -e 's,^X,,' -e 's,/lib/*$,,'`\n                additional_includedir=\"$basedir/include\"\n                ;;\n            esac\n            if test \"X$additional_includedir\" != \"X\"; then\n              dnl Potentially add $additional_includedir to $INCNAME.\n              dnl But don't add it\n              dnl   1. if it's the standard /usr/include,\n              dnl   2. if it's /usr/local/include and we are using GCC on Linux,\n              dnl   3. if it's already present in $CPPFLAGS or the already\n              dnl      constructed $INCNAME,\n              dnl   4. if it doesn't exist as a directory.\n              if test \"X$additional_includedir\" != \"X/usr/include\"; then\n                haveit=\n                if test \"X$additional_includedir\" = \"X/usr/local/include\"; then\n                  if test -n \"$GCC\"; then\n                    case $host_os in\n                      linux*) haveit=yes;;\n                    esac\n                  fi\n                fi\n                if test -z \"$haveit\"; then\n                  for x in $CPPFLAGS $INC[]NAME; do\n                    AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                    if test \"X$x\" = \"X-I$additional_includedir\"; then\n                      haveit=yes\n                      break\n                    fi\n                  done\n                  if test -z \"$haveit\"; then\n                    if test -d \"$additional_includedir\"; then\n                      dnl Really add $additional_includedir to $INCNAME.\n                      INC[]NAME=\"${INC[]NAME}${INC[]NAME:+ }-I$additional_includedir\"\n                    fi\n                  fi\n                fi\n              fi\n            fi\n            dnl Look for dependencies.\n            if test -n \"$found_la\"; then\n              dnl Read the .la file. It defines the variables\n              dnl dlname, library_names, old_library, dependency_libs, current,\n              dnl age, revision, installed, dlopen, dlpreopen, libdir.\n              save_libdir=\"$libdir\"\n              case \"$found_la\" in\n                */* | *\\\\*) . \"$found_la\" ;;\n                *) . \"./$found_la\" ;;\n              esac\n              libdir=\"$save_libdir\"\n              dnl We use only dependency_libs.\n              for dep in $dependency_libs; do\n                case \"$dep\" in\n                  -L*)\n                    additional_libdir=`echo \"X$dep\" | sed -e 's/^X-L//'`\n                    dnl Potentially add $additional_libdir to $LIBNAME and $LTLIBNAME.\n                    dnl But don't add it\n                    dnl   1. if it's the standard /usr/lib,\n                    dnl   2. if it's /usr/local/lib and we are using GCC on Linux,\n                    dnl   3. if it's already present in $LDFLAGS or the already\n                    dnl      constructed $LIBNAME,\n                    dnl   4. if it doesn't exist as a directory.\n                    if test \"X$additional_libdir\" != \"X/usr/lib\"; then\n                      haveit=\n                      if test \"X$additional_libdir\" = \"X/usr/local/lib\"; then\n                        if test -n \"$GCC\"; then\n                          case $host_os in\n                            linux*) haveit=yes;;\n                          esac\n                        fi\n                      fi\n                      if test -z \"$haveit\"; then\n                        haveit=\n                        for x in $LDFLAGS $LIB[]NAME; do\n                          AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                          if test \"X$x\" = \"X-L$additional_libdir\"; then\n                            haveit=yes\n                            break\n                          fi\n                        done\n                        if test -z \"$haveit\"; then\n                          if test -d \"$additional_libdir\"; then\n                            dnl Really add $additional_libdir to $LIBNAME.\n                            LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-L$additional_libdir\"\n                          fi\n                        fi\n                        haveit=\n                        for x in $LDFLAGS $LTLIB[]NAME; do\n                          AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n                          if test \"X$x\" = \"X-L$additional_libdir\"; then\n                            haveit=yes\n                            break\n                          fi\n                        done\n                        if test -z \"$haveit\"; then\n                          if test -d \"$additional_libdir\"; then\n                            dnl Really add $additional_libdir to $LTLIBNAME.\n                            LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-L$additional_libdir\"\n                          fi\n                        fi\n                      fi\n                    fi\n                    ;;\n                  -R*)\n                    dir=`echo \"X$dep\" | sed -e 's/^X-R//'`\n                    if test \"$enable_rpath\" != no; then\n                      dnl Potentially add DIR to rpathdirs.\n                      dnl The rpathdirs will be appended to $LIBNAME at the end.\n                      haveit=\n                      for x in $rpathdirs; do\n                        if test \"X$x\" = \"X$dir\"; then\n                          haveit=yes\n                          break\n                        fi\n                      done\n                      if test -z \"$haveit\"; then\n                        rpathdirs=\"$rpathdirs $dir\"\n                      fi\n                      dnl Potentially add DIR to ltrpathdirs.\n                      dnl The ltrpathdirs will be appended to $LTLIBNAME at the end.\n                      haveit=\n                      for x in $ltrpathdirs; do\n                        if test \"X$x\" = \"X$dir\"; then\n                          haveit=yes\n                          break\n                        fi\n                      done\n                      if test -z \"$haveit\"; then\n                        ltrpathdirs=\"$ltrpathdirs $dir\"\n                      fi\n                    fi\n                    ;;\n                  -l*)\n                    dnl Handle this in the next round.\n                    names_next_round=\"$names_next_round \"`echo \"X$dep\" | sed -e 's/^X-l//'`\n                    ;;\n                  *.la)\n                    dnl Handle this in the next round. Throw away the .la's\n                    dnl directory; it is already contained in a preceding -L\n                    dnl option.\n                    names_next_round=\"$names_next_round \"`echo \"X$dep\" | sed -e 's,^X.*/,,' -e 's,^lib,,' -e 's,\\.la$,,'`\n                    ;;\n                  *)\n                    dnl Most likely an immediate library name.\n                    LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$dep\"\n                    LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }$dep\"\n                    ;;\n                esac\n              done\n            fi\n          else\n            dnl Didn't find the library; assume it is in the system directories\n            dnl known to the linker and runtime loader. (All the system\n            dnl directories known to the linker should also be known to the\n            dnl runtime loader, otherwise the system is severely misconfigured.)\n            LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }-l$name\"\n            LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-l$name\"\n          fi\n        fi\n      fi\n    done\n  done\n  if test \"X$rpathdirs\" != \"X\"; then\n    if test -n \"$hardcode_libdir_separator\"; then\n      dnl Weird platform: only the last -rpath option counts, the user must\n      dnl pass all path elements in one option. We can arrange that for a\n      dnl single library, but not when more than one $LIBNAMEs are used.\n      alldirs=\n      for found_dir in $rpathdirs; do\n        alldirs=\"${alldirs}${alldirs:+$hardcode_libdir_separator}$found_dir\"\n      done\n      dnl Note: hardcode_libdir_flag_spec uses $libdir and $wl.\n      acl_save_libdir=\"$libdir\"\n      libdir=\"$alldirs\"\n      eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n      libdir=\"$acl_save_libdir\"\n      LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$flag\"\n    else\n      dnl The -rpath options are cumulative.\n      for found_dir in $rpathdirs; do\n        acl_save_libdir=\"$libdir\"\n        libdir=\"$found_dir\"\n        eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n        libdir=\"$acl_save_libdir\"\n        LIB[]NAME=\"${LIB[]NAME}${LIB[]NAME:+ }$flag\"\n      done\n    fi\n  fi\n  if test \"X$ltrpathdirs\" != \"X\"; then\n    dnl When using libtool, the option that works for both libraries and\n    dnl executables is -R. The -R options are cumulative.\n    for found_dir in $ltrpathdirs; do\n      LTLIB[]NAME=\"${LTLIB[]NAME}${LTLIB[]NAME:+ }-R$found_dir\"\n    done\n  fi\n])\n\ndnl AC_LIB_APPENDTOVAR(VAR, CONTENTS) appends the elements of CONTENTS to VAR,\ndnl unless already present in VAR.\ndnl Works only for CPPFLAGS, not for LIB* variables because that sometimes\ndnl contains two or three consecutive elements that belong together.\nAC_DEFUN([AC_LIB_APPENDTOVAR],\n[\n  for element in [$2]; do\n    haveit=\n    for x in $[$1]; do\n      AC_LIB_WITH_FINAL_PREFIX([eval x=\\\"$x\\\"])\n      if test \"X$x\" = \"X$element\"; then\n        haveit=yes\n        break\n      fi\n    done\n    if test -z \"$haveit\"; then\n      [$1]=\"${[$1]}${[$1]:+ }$element\"\n    fi\n  done\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/ps/output.c": "/*\n * output.c - ps output definitions\n * Copyright 1999-2004 by Albert Cahalan\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n/*\n * This file is really gross, and I know it. I looked into several\n * alternate ways to deal with the mess, and they were all ugly.\n *\n * FreeBSD has a fancy hack using offsets into a struct -- that\n * saves code but it is _really_ gross. See the PO macro below.\n *\n * We could have a second column width for wide output format.\n * For example, Digital prints the real-time signals.\n */\n\n/*\n * Data table idea:\n *\n * table 1 maps aix to specifier\n * table 2 maps shortsort to specifier\n * table 3 maps macro to specifiers\n * table 4 maps specifier to title,datatype,offset,vendor,helptext\n * table 5 maps datatype to justification,width,widewidth,sorting,printing\n *\n * Here, \"datatype\" could be user,uid,u16,pages,deltaT,signals,tty,longtty...\n * It must be enough to determine printing and sorting.\n *\n * After the tables, increase width as needed to fit the header.\n *\n * Table 5 could go in a file with the output functions.\n */\n\n#include <ctype.h>\n#if ENABLE_LIBSELINUX\n#include <dlfcn.h>\n#endif\n#include <fcntl.h>\n#include <grp.h>\n#include <limits.h>\n#include <pwd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n#include <unistd.h>\n\n#include <sys/ioctl.h>\n#include <sys/mman.h>\n#include <sys/resource.h>\n#include <sys/types.h>\n\n#include \"../proc/readproc.h\"\n#include \"../proc/sysinfo.h\"\n#include \"../proc/wchan.h\"\n#include \"../proc/procps.h\"\n#include \"../proc/devname.h\"\n#include \"../proc/escape.h\"\n#include \"../proc/numa.h\"\n\n#include \"common.h\"\n\n/* TODO:\n * Stop assuming system time is local time.\n */\n\n#define COLWID 240 /* satisfy snprintf, which is faster than sprintf */\n\nstatic unsigned max_rightward = OUTBUF_SIZE-1; /* space for RIGHT stuff */\nstatic unsigned max_leftward = OUTBUF_SIZE-1; /* space for LEFT stuff */\n\n\n\nstatic int wide_signals;  /* true if we have room */\n\nstatic time_t seconds_since_1970;\n\n\n/*************************************************************************/\n/************ Lots of sort functions, starting with the NOP **************/\n\nstatic int sr_nop(const proc_t* a, const proc_t* b){\n  (void)a;(void)b; /* shut up gcc */\n  return 0;\n}\n\nstatic int sr_cgroup(const proc_t* a, const proc_t* b)\n{\n    /* This is a \"vector\" of one */\n    if (*a->cgroup == NULL || *b->cgroup == NULL)\n        return 0;\n    return strcmp(*a->cgroup, *b->cgroup);\n}\n\n#define CMP_STR(NAME) \\\nstatic int sr_ ## NAME(const proc_t* P, const proc_t* Q) { \\\n    return strcmp(P->NAME, Q->NAME); \\\n}\n\n#define CMP_INT(NAME) \\\nstatic int sr_ ## NAME (const proc_t* P, const proc_t* Q) { \\\n    if (P->NAME < Q->NAME) return -1; \\\n    if (P->NAME > Q->NAME) return  1; \\\n    return 0; \\\n}\n\n/* fast versions, for values which either:\n * a. differ by no more than 0x7fffffff\n * b. only need to be grouped same w/ same\n */\n#define CMP_SMALL(NAME) \\\nstatic int sr_ ## NAME (const proc_t* P, const proc_t* Q) { \\\n    return (int)(P->NAME) - (int)(Q->NAME); \\\n}\n#define CMP_SMALL2(NAME,WHAT) \\\nstatic int sr_ ## NAME (const proc_t* P, const proc_t* Q) { \\\n    return (int)(P->WHAT) - (int)(Q->WHAT); \\\n}\n\n#define cook_time(P) (P->utime + P->stime) / Hertz\n\n#define cook_etime(P) (((unsigned long long)seconds_since_boot >= (P->start_time / Hertz)) ? ((unsigned long long)seconds_since_boot - (P->start_time / Hertz)) : 0)\n\n#define CMP_COOKED_TIME(NAME) \\\nstatic int sr_ ## NAME (const proc_t* P, const proc_t* Q) { \\\n    unsigned long p_time,q_time; \\\n    p_time=cook_ ##NAME (P); \\\n    q_time=cook_ ##NAME (Q); \\\n    if (p_time < q_time) return -1; \\\n    if (p_time > q_time) return 1; \\\n    return 0; \\\n}\n\n#define CMP_NS(NAME, ID) \\\nstatic int sr_ ## NAME (const proc_t* P, const proc_t* Q) { \\\n    if ((unsigned long)P->ns[ID] < (unsigned long)Q->ns[ID]) return -1; \\\n    if ((unsigned long)P->ns[ID] > (unsigned long)Q->ns[ID]) return  1; \\\n    return 0; \\\n}\n\nCMP_INT(rtprio)\nCMP_SMALL(sched)\nCMP_INT(cutime)\nCMP_SMALL(priority)                                             /* nice */\nCMP_SMALL(nlwp)\nCMP_SMALL(nice)                                                 /* priority */\nCMP_INT(rss)      /* resident set size from stat file */ /* vm_rss, resident */\nCMP_INT(alarm)\nCMP_INT(size)      /* total pages */                     /* vm_size, vsize */\nCMP_INT(resident)  /* resident pages */                     /* vm_rss, rss */\nCMP_INT(share)     /* shared pages */\nCMP_INT(trs)       /* executable pages */\nCMP_INT(lrs)       /* obsolete \"library\" pages above 0x60000000 */\nCMP_INT(drs)       /* other pages (assumed data?) */\nCMP_INT(dt)        /* dirty pages */\n\nCMP_INT(vm_size)    /* kB VM */                             /* size, vsize */\nCMP_INT(vm_lock)    /* kB locked */\nCMP_INT(vm_rss)     /* kB rss */                          /* rss, resident */\nCMP_INT(vm_data)    /* kB \"data\" == data-stack */\nCMP_INT(vm_stack)   /* kB stack */\nCMP_INT(vm_exe)     /* kB \"exec\" == exec-lib */\nCMP_INT(vm_lib)     /* kB \"libraries\" */\nCMP_INT(vsize)      /* pages VM */                        /* size, vm_size */\nCMP_INT(rss_rlim)\nCMP_SMALL(flags)\nCMP_INT(min_flt)\nCMP_INT(maj_flt)\nCMP_INT(cmin_flt)\nCMP_INT(cmaj_flt)\nCMP_INT(utime)\nCMP_INT(stime)    /* Old: sort by systime. New: show start time. Uh oh. */\nCMP_INT(start_code)\nCMP_INT(end_code)\nCMP_INT(start_stack)\nCMP_INT(kstk_esp)\nCMP_INT(kstk_eip)\nCMP_INT(start_time)\nCMP_INT(wchan)\n\n/* CMP_STR(*environ) */\n/* CMP_STR(*cmdline) */\n\nCMP_STR(ruser)\nCMP_STR(euser)\nCMP_STR(suser)\nCMP_STR(fuser)\nCMP_STR(rgroup)\nCMP_STR(egroup)\nCMP_STR(sgroup)\nCMP_STR(fgroup)\nCMP_STR(cmd)\n/* CMP_STR(ttyc) */    /* FIXME -- use strncmp with 8 max */\n\nCMP_INT(ruid)\nCMP_INT(rgid)\nCMP_INT(euid)\nCMP_INT(egid)\nCMP_INT(suid)\nCMP_INT(sgid)\nCMP_INT(fuid)\nCMP_INT(fgid)\nCMP_SMALL2(procs,tgid)\nCMP_SMALL2(tasks,tid)\nCMP_SMALL(ppid)\nCMP_SMALL(pgrp)\nCMP_SMALL(session)\nCMP_INT(tty)\nCMP_SMALL(tpgid)\n\nCMP_SMALL(pcpu)\n\nCMP_SMALL(state)\n\nCMP_COOKED_TIME(time)\nCMP_COOKED_TIME(etime)\n\nCMP_NS(ipcns, IPCNS);\nCMP_NS(mntns, MNTNS);\nCMP_NS(netns, NETNS);\nCMP_NS(pidns, PIDNS);\nCMP_NS(userns, USERNS);\nCMP_NS(utsns, UTSNS);\n\nCMP_STR(lxcname)\nCMP_STR(cgname)\n\n/* approximation to: kB of address space that could end up in swap */\nstatic int sr_swapable(const proc_t* P, const proc_t* Q) {\n  unsigned long p_swapable = P->vm_data + P->vm_stack;\n  unsigned long q_swapable = Q->vm_data + Q->vm_stack;\n  if (p_swapable < q_swapable) return -1;\n  if (p_swapable > q_swapable) return  1;\n  return 0;\n}\n\n\n/***************************************************************************/\n/************ Lots of format functions, starting with the NOP **************/\n\n// so popular it can't be \"static\"\nint pr_nop(char *restrict const outbuf, const proc_t *restrict const pp){\n  (void)pp;\n  return snprintf(outbuf, COLWID, \"%c\", '-');\n}\n\n\n/********* Unix 98 ************/\n\n/***\n\nOnly comm and args are allowed to contain blank characters; all others are\nnot. Any implementation-dependent variables will be specified in the system\ndocumentation along with the default header and indicating if the field\nmay contain blank characters.\n\nSome headers do not have a standardized specifier!\n\n%CPU\tpcpu\tThe % of cpu time used recently, with unspecified \"recently\".\nADDR\t\tThe address of the process.\nC\t\tProcessor utilisation for scheduling.\nCMD\t\tThe command name, or everything with -f.\nCOMMAND\targs\tCommand + args. May chop as desired. May use either version.\nCOMMAND\tcomm\targv[0]\nELAPSED\tetime\tElapsed time since the process was started. [[dd-]hh:]mm:ss\nF\t\tFlags (octal and additive)\nGROUP\tgroup\tEffective group ID, prefer text over decimal.\nNI\tnice\tDecimal system scheduling priority, see nice(1).\nPGID\tpgid\tThe decimal value of the process group ID.\nPID\tpid\tDecimal PID.\nPPID\tppid\tDecimal PID.\nPRI\t\tPriority. Higher numbers mean lower priority.\nRGROUP\trgroup\tReal group ID, prefer text over decimal.\nRUSER\truser\tReal user ID, prefer text over decimal.\nS\t\tThe state of the process.\nSTIME\t\tStarting time of the process.\nSZ\t\tThe size in blocks of the core image of the process.\nTIME\ttime\tCumulative CPU time. [dd-]hh:mm:ss\nTT\ttty\tName of tty in format used by who(1).\nTTY\t\tThe controlling terminal for the process.\nUID\t\tUID, or name when -f\nUSER\tuser\tEffective user ID, prefer text over decimal.\nVSZ\tvsz\tVirtual memory size in decimal kB.\nWCHAN\t\tWhere waiting/sleeping or blank if running.\n\nThe nice value is used to compute the priority.\n\nFor some undefined ones, Digital does:\n\nF       flag    Process flags -- but in hex!\nPRI     pri     Process priority\nS       state   Symbolic process status\nTTY     tt,tty,tname,longtname  -- all do \"ttyp1\", \"console\", \"??\"\nUID     uid     Process user ID (effective UID)\nWCHAN   wchan   Address of event on which a\n\nFor some undefined ones, Sun does:\n\nADDR\taddr\tmemory address of the process\nC\tc\tProcessor utilization  for  scheduling  (obsolete).\nCMD\nF\tf\nS\ts\tstate: OSRZT\nSTIME\t\tstart time, printed w/o blanks. If 24h old, months & days\nSZ\t\tsize (in pages) of the swappable process's image in main memory\nTTY\nUID\tuid\nWCHAN\twchan\n\nFor some undefined ones, SCO does:\nADDR\taddr\tVirtual address of the process' entry in the process table.\nSZ\t\tswappable size in kB of the virtual data and stack\nSTIME\tstime\thms or md time format\n***/\n\n/* Source & destination are known. Return bytes or screen characters? */\n//\n//       OldLinux   FreeBSD    HPUX\n// ' '    '    '     '  '      '  '\n// 'L'    ' \\_ '     '`-'      '  '\n// '+'    ' \\_ '     '|-'      '  '\n// '|'    ' |  '     '| '      '  '\n//\nstatic int forest_helper(char *restrict const outbuf){\n  char *p = forest_prefix;\n  char *q = outbuf;\n  int rightward = max_rightward < OUTBUF_SIZE ? max_rightward : OUTBUF_SIZE-1;\n  *q = '\\0';\n  if(!*p) return 0;\n  /* Arrrgh! somebody defined unix as 1 */\n  if(forest_type == 'u') goto unixy;\n  while(*p){\n    if (rightward < 4) break;\n    switch(*p){\n    case ' ': strcpy(q, \"    \");  break;\n    case 'L': strcpy(q, \" \\\\_ \"); break;\n    case '+': strcpy(q, \" \\\\_ \"); break;\n    case '|': strcpy(q, \" |  \");  break;\n    case '\\0': return q-outbuf;    /* redundant & not used */\n    }\n    q += 4;\n    rightward -= 4;\n    p++;\n  }\n  return q-outbuf;   /* gcc likes this here */\nunixy:\n  while(*p){\n    if (rightward < 2) break;\n    switch(*p){\n    case ' ': strcpy(q, \"  \"); break;\n    case 'L': strcpy(q, \"  \"); break;\n    case '+': strcpy(q, \"  \"); break;\n    case '|': strcpy(q, \"  \"); break;\n    case '\\0': return q-outbuf;    /* redundant & not used */\n    }\n    q += 2;\n    rightward -= 2;\n    p++;\n  }\n  return q-outbuf;   /* gcc likes this here */\n}\n\n\n/* XPG4-UNIX, according to Digital:\nThe \"args\" and \"command\" specifiers show what was passed to the command.\nModifications to the arguments are not shown.\n*/\n\n/*\n * pp->cmd       short accounting name (comm & ucomm)\n * pp->cmdline   long name with args (args & command)\n * pp->environ   environment\n */\n\n// FIXME: some of these may hit the guard page in forest mode\n\n#define OUTBUF_SIZE_AT(endp) \\\n  (((endp) >= outbuf && (endp) < outbuf + OUTBUF_SIZE) ? (outbuf + OUTBUF_SIZE) - (endp) : 0)\n\n/*\n * \"args\", \"cmd\", \"command\" are all the same:  long  unless  c\n * \"comm\", \"ucmd\", \"ucomm\"  are all the same:  short unless -f\n * ( determinations are made in display.c, we mostly deal with results ) */\nstatic int pr_args(char *restrict const outbuf, const proc_t *restrict const pp){\n  char *endp = outbuf;\n  int rightward = max_rightward;\n  int fh = forest_helper(outbuf);\n\n  endp += fh;\n  rightward -= fh;\n\n  if(pp->cmdline && !bsd_c_option)\n    endp += escaped_copy(endp, *pp->cmdline, OUTBUF_SIZE_AT(endp), &rightward);\n  else\n    endp += escape_command(endp, pp, OUTBUF_SIZE_AT(endp), &rightward, ESC_DEFUNCT);\n\n  if(bsd_e_option && rightward>1 && OUTBUF_SIZE_AT(endp)>1) {\n    if(pp->environ && *pp->environ) {\n      *endp++ = ' ';\n      rightward--;\n      endp += escape_strlist(endp, pp->environ, OUTBUF_SIZE_AT(endp), &rightward);\n    }\n  }\n  return max_rightward-rightward;\n}\n\n/*\n * \"args\", \"cmd\", \"command\" are all the same:  long  unless  c\n * \"comm\", \"ucmd\", \"ucomm\"  are all the same:  short unless -f\n * ( determinations are made in display.c, we mostly deal with results ) */\nstatic int pr_comm(char *restrict const outbuf, const proc_t *restrict const pp){\n  char *endp = outbuf;\n  int rightward = max_rightward;\n  int fh = forest_helper(outbuf);\n\n  endp += fh;\n  rightward -= fh;\n\n  if(pp->cmdline && unix_f_option)\n    endp += escaped_copy(endp, *pp->cmdline, OUTBUF_SIZE_AT(endp), &rightward);\n  else\n    endp += escape_command(endp, pp, OUTBUF_SIZE_AT(endp), &rightward, ESC_DEFUNCT);\n\n  if(bsd_e_option && rightward>1 && OUTBUF_SIZE_AT(endp)>1) {\n    if(pp->environ && *pp->environ) {\n      *endp++ = ' ';\n      rightward--;\n      endp += escape_strlist(endp, pp->environ, OUTBUF_SIZE_AT(endp), &rightward);\n    }\n  }\n  return max_rightward-rightward;\n}\n\nstatic int pr_cgname(char *restrict const outbuf, const proc_t *restrict const pp){\n  int rightward = max_rightward;\n\n  escaped_copy(outbuf, pp->cgname, OUTBUF_SIZE, &rightward);\n  return max_rightward-rightward;\n}\n\nstatic int pr_cgroup(char *restrict const outbuf,const proc_t *restrict const pp) {\n  int rightward = max_rightward;\n\n  escaped_copy(outbuf, *pp->cgroup, OUTBUF_SIZE, &rightward);\n  return max_rightward-rightward;\n}\n\n/* Non-standard, from SunOS 5 */\nstatic int pr_fname(char *restrict const outbuf, const proc_t *restrict const pp){\n  char *endp = outbuf;\n  int rightward = max_rightward;\n  int fh = forest_helper(outbuf);\n\n  endp += fh;\n  rightward -= fh;\n\n  if (rightward>8)  /* 8=default, but forest maybe feeds more */\n    rightward = 8;\n\n  endp += escape_str(endp, pp->cmd, OUTBUF_SIZE_AT(endp), &rightward);\n  //return endp - outbuf;\n  return max_rightward-rightward;\n}\n\n#undef OUTBUF_SIZE_AT\n\n/* elapsed wall clock time, [[dd-]hh:]mm:ss format (not same as \"time\") */\nstatic int pr_etime(char *restrict const outbuf, const proc_t *restrict const pp){\n  unsigned long t;\n  unsigned dd,hh,mm,ss;\n  char *cp = outbuf;\n  t = cook_etime(pp);\n  ss = t%60;\n  t /= 60;\n  mm = t%60;\n  t /= 60;\n  hh = t%24;\n  t /= 24;\n  dd = t;\n  cp +=(     dd      ?  snprintf(cp, COLWID, \"%u-\", dd)           :  0 );\n  cp +=( (dd || hh)  ?  snprintf(cp, COLWID, \"%02u:\", hh)         :  0 );\n  cp +=                 snprintf(cp, COLWID, \"%02u:%02u\", mm, ss)       ;\n  return (int)(cp-outbuf);\n}\n\n/* elapsed wall clock time in seconds */\nstatic int pr_etimes(char *restrict const outbuf, const proc_t *restrict const pp){\n  unsigned t = cook_etime(pp);\n  return snprintf(outbuf, COLWID, \"%u\", t);\n}\n\n/* \"Processor utilisation for scheduling.\"  --- we use %cpu w/o fraction */\nstatic int pr_c(char *restrict const outbuf, const proc_t *restrict const pp){\n  unsigned long long total_time;   /* jiffies used by this process */\n  unsigned pcpu = 0;               /* scaled %cpu, 99 means 99% */\n  unsigned long long seconds;      /* seconds of process life */\n  total_time = pp->utime + pp->stime;\n  if(include_dead_children) total_time += (pp->cutime + pp->cstime);\n  seconds = cook_etime(pp);\n  if(seconds) pcpu = (total_time * 100ULL / Hertz) / seconds;\n  if (pcpu > 99U) pcpu = 99U;\n  return snprintf(outbuf, COLWID, \"%2u\", pcpu);\n}\n/* normal %CPU in ##.# format. */\nstatic int pr_pcpu(char *restrict const outbuf, const proc_t *restrict const pp){\n  unsigned long long total_time;   /* jiffies used by this process */\n  unsigned pcpu = 0;               /* scaled %cpu, 999 means 99.9% */\n  unsigned long long seconds;      /* seconds of process life */\n  total_time = pp->utime + pp->stime;\n  if(include_dead_children) total_time += (pp->cutime + pp->cstime);\n  seconds = cook_etime(pp);\n  if(seconds) pcpu = (total_time * 1000ULL / Hertz) / seconds;\n  if (pcpu > 999U)\n    return snprintf(outbuf, COLWID, \"%u\", pcpu/10U);\n  return snprintf(outbuf, COLWID, \"%u.%u\", pcpu/10U, pcpu%10U);\n}\n/* this is a \"per-mill\" format, like %cpu with no decimal point */\nstatic int pr_cp(char *restrict const outbuf, const proc_t *restrict const pp){\n  unsigned long long total_time;   /* jiffies used by this process */\n  unsigned pcpu = 0;               /* scaled %cpu, 999 means 99.9% */\n  unsigned long long seconds;      /* seconds of process life */\n  total_time = pp->utime + pp->stime;\n  if(include_dead_children) total_time += (pp->cutime + pp->cstime);\n  seconds = cook_etime(pp);\n  if(seconds) pcpu = (total_time * 1000ULL / Hertz) / seconds;\n  if (pcpu > 999U) pcpu = 999U;\n  return snprintf(outbuf, COLWID, \"%3u\", pcpu);\n}\n\nstatic int pr_pgid(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%u\", pp->pgrp);\n}\nstatic int pr_ppid(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%u\", pp->ppid);\n}\n\n\n/* cumulative CPU time, [dd-]hh:mm:ss format (not same as \"etime\") */\nstatic int pr_time(char *restrict const outbuf, const proc_t *restrict const pp){\n  unsigned long t;\n  unsigned dd,hh,mm,ss;\n  int c;\n  t = cook_time(pp);\n  ss = t%60;\n  t /= 60;\n  mm = t%60;\n  t /= 60;\n  hh = t%24;\n  t /= 24;\n  dd = t;\n  c  =( dd ? snprintf(outbuf, COLWID, \"%u-\", dd) : 0              );\n  c +=( snprintf(outbuf+c, COLWID, \"%02u:%02u:%02u\", hh, mm, ss)    );\n  return c;\n}\n\n/* cumulative CPU time in seconds (not same as \"etimes\") */\nstatic int pr_times(char *restrict const outbuf, const proc_t *restrict const pp){\n  unsigned t = cook_time(pp);\n  return snprintf(outbuf, COLWID, \"%u\", t);\n}\n\n/* HP-UX puts this (I forget, vsz or vsize?) in kB and uses \"sz\" for pages.\n * Unix98 requires \"vsz\" to be kB.\n * Tru64 does both vsize and vsz like \"1.23M\"\n *\n * Our pp->vm_size is kB and our pp->vsize is pages.\n *\n * TODO: add flag for \"1.23M\" behavior, on this and other columns.\n */\nstatic int pr_vsz(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%lu\", pp->vm_size);\n}\n\n//////////////////////////////////////////////////////////////////////////////////////\n\n// \"PRI\" is created by \"opri\", or by \"pri\" when -c is used.\n//\n// Unix98 only specifies that a high \"PRI\" is low priority.\n// Sun and SCO add the -c behavior. Sun defines \"pri\" and \"opri\".\n// Linux may use \"priority\" for historical purposes.\n//\n// According to the kernel's fs/proc/array.c and kernel/sched.c source,\n// the kernel reports it in /proc via this:\n//        p->prio - MAX_RT_PRIO\n// such that \"RT tasks are offset by -200. Normal tasks are centered\n// around 0, value goes from -16 to +15\" but who knows if that is\n// before or after the conversion...\n//\n// <linux/sched.h> says:\n// MAX_RT_PRIO is currently 100.       (so we see 0 in /proc)\n// RT tasks have a p->prio of 0 to 99. (so we see -100 to -1)\n// non-RT tasks are from 100 to 139.   (so we see 0 to 39)\n// Lower values have higher priority, as in the UNIX standard.\n//\n// In any case, pp->priority+100 should get us back to what the kernel\n// has for p->prio.\n//\n// Test results with the \"yes\" program on a 2.6.x kernel:\n//\n// # ps -C19,_20 -o pri,opri,intpri,priority,ni,pcpu,pid,comm\n// PRI PRI PRI PRI  NI %CPU  PID COMMAND\n//   0  99  99  39  19 10.6 8686 19\n//  34  65  65   5 -20 94.7 8687 _20\n//\n// Grrr. So the UNIX standard \"PRI\" must NOT be from \"pri\".\n// Either of the others will do. We use \"opri\" for this.\n// (and use \"pri\" when the \"-c\" option is used)\n// Probably we should have Linux-specific \"pri_for_l\" and \"pri_for_lc\"\n//\n// sched_get_priority_min.2 says the Linux static priority is\n// 1..99 for RT and 0 for other... maybe 100 is kernel-only?\n//\n// A nice range would be -99..0 for RT and 1..40 for normal,\n// which is pp->priority+1. (3-digit max, positive is normal,\n// negative or 0 is RT, and meets the standard for PRI)\n//\n\n// legal as UNIX \"PRI\"\n// \"priority\"         (was -20..20, now -100..39)\nstatic int pr_priority(char *restrict const outbuf, const proc_t *restrict const pp){    /* -20..20 */\n    return snprintf(outbuf, COLWID, \"%ld\", pp->priority);\n}\n\n// legal as UNIX \"PRI\"\n// \"intpri\" and \"opri\" (was 39..79, now  -40..99)\nstatic int pr_opri(char *restrict const outbuf, const proc_t *restrict const pp){        /* 39..79 */\n    return snprintf(outbuf, COLWID, \"%ld\", 60 + pp->priority);\n}\n\n// legal as UNIX \"PRI\"\n// \"pri_foo\"   --  match up w/ nice values of sleeping processes (-120..19)\nstatic int pr_pri_foo(char *restrict const outbuf, const proc_t *restrict const pp){\n    return snprintf(outbuf, COLWID, \"%ld\", pp->priority - 20);\n}\n\n// legal as UNIX \"PRI\"\n// \"pri_bar\"   --  makes RT pri show as negative       (-99..40)\nstatic int pr_pri_bar(char *restrict const outbuf, const proc_t *restrict const pp){\n    return snprintf(outbuf, COLWID, \"%ld\", pp->priority + 1);\n}\n\n// legal as UNIX \"PRI\"\n// \"pri_baz\"   --  the kernel's ->prio value, as of Linux 2.6.8     (1..140)\nstatic int pr_pri_baz(char *restrict const outbuf, const proc_t *restrict const pp){\n    return snprintf(outbuf, COLWID, \"%ld\", pp->priority + 100);\n}\n\n\n// not legal as UNIX \"PRI\"\n// \"pri\"               (was 20..60, now    0..139)\nstatic int pr_pri(char *restrict const outbuf, const proc_t *restrict const pp){         /* 20..60 */\n    return snprintf(outbuf, COLWID, \"%ld\", 39 - pp->priority);\n}\n\n// not legal as UNIX \"PRI\"\n// \"pri_api\"   --  match up w/ RT API    (-40..99)\nstatic int pr_pri_api(char *restrict const outbuf, const proc_t *restrict const pp){\n    return snprintf(outbuf, COLWID, \"%ld\", -1 - pp->priority);\n}\n\n// Linux applies nice value in the scheduling policies (classes)\n// SCHED_OTHER(0) and SCHED_BATCH(3).  Ref: sched_setscheduler(2).\n// Also print nice value for old kernels which didn't use scheduling\n// policies (-1).\nstatic int pr_nice(char *restrict const outbuf, const proc_t *restrict const pp){\n  if(pp->sched!=0 && pp->sched!=3 && pp->sched!=-1) return snprintf(outbuf, COLWID, \"-\");\n  return snprintf(outbuf, COLWID, \"%ld\", pp->nice);\n}\n\n// HP-UX   \"cls\": RT RR RR2 ???? HPUX FIFO KERN\n// Solaris \"class\": SYS TS FX IA RT FSS (FIFO is RR w/ Inf quant)\n//                  FIFO+RR share RT; FIFO has Inf quant\n//                  IA=interactive; FX=fixed; TS=timeshare; SYS=system\n//                  FSS=fairshare; INTS=interrupts\n// Tru64   \"policy\": FF RR TS\n// IRIX    \"class\": RT TS B BC WL GN\n//                  RT=real-time; TS=time-share; B=batch; BC=batch-critical\n//                  WL=weightless; GN=gang-scheduled\n//                  see miser(1) for this; PRI has some letter codes too\nstatic int pr_class(char *restrict const outbuf, const proc_t *restrict const pp){\n  switch(pp->sched){\n  case -1: return snprintf(outbuf, COLWID, \"-\");   // not reported\n  case  0: return snprintf(outbuf, COLWID, \"TS\");  // SCHED_OTHER SCHED_NORMAL\n  case  1: return snprintf(outbuf, COLWID, \"FF\");  // SCHED_FIFO\n  case  2: return snprintf(outbuf, COLWID, \"RR\");  // SCHED_RR\n  case  3: return snprintf(outbuf, COLWID, \"B\");   // SCHED_BATCH\n  case  4: return snprintf(outbuf, COLWID, \"ISO\"); // reserved for SCHED_ISO (Con Kolivas)\n  case  5: return snprintf(outbuf, COLWID, \"IDL\"); // SCHED_IDLE\n  case  6: return snprintf(outbuf, COLWID, \"DLN\"); // SCHED_DEADLINE\n  case  7: return snprintf(outbuf, COLWID, \"#7\");  //\n  case  8: return snprintf(outbuf, COLWID, \"#8\");  //\n  case  9: return snprintf(outbuf, COLWID, \"#9\");  //\n  default: return snprintf(outbuf, COLWID, \"?\");   // unknown value\n  }\n}\n// Based on \"type\", FreeBSD would do:\n//    REALTIME  \"real:%u\", prio\n//    NORMAL    \"normal\"\n//    IDLE      \"idle:%u\", prio\n//    default   \"%u:%u\", type, prio\n// We just print the priority, and have other keywords for type.\nstatic int pr_rtprio(char *restrict const outbuf, const proc_t *restrict const pp){\n  if(pp->sched==0 || pp->sched==(unsigned long)-1) return snprintf(outbuf, COLWID, \"-\");\n  return snprintf(outbuf, COLWID, \"%ld\", pp->rtprio);\n}\nstatic int pr_sched(char *restrict const outbuf, const proc_t *restrict const pp){\n  if(pp->sched==(unsigned long)-1) return snprintf(outbuf, COLWID, \"-\");\n  return snprintf(outbuf, COLWID, \"%ld\", pp->sched);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nstatic int pr_wchan(char *restrict const outbuf, const proc_t *restrict const pp){\n/*\n * Unix98 says \"blank if running\" and also \"no blanks\"! :-(\n * Unix98 also says to use '-' if something is meaningless.\n * Digital uses both '*' and '-', with undocumented differences.\n * (the '*' for -1 (rare) and the '-' for 0)\n * Sun claims to use a blank AND use '-', in the same man page.\n * Perhaps \"blank\" should mean '-'.\n *\n * AIX uses '-' for running processes, the location when there is\n * only one thread waiting in the kernel, and '*' when there is\n * more than one thread waiting in the kernel.\n *\n * The output should be truncated to maximal columns width -- overflow\n * is not supported for the \"wchan\".\n */\n  const char *w;\n  size_t len;\n  if(!(pp->wchan & 0xffffff)) return memcpy(outbuf,\"-\",2),1;\n  if(wchan_is_number) return snprintf(outbuf, COLWID, \"%x\", (unsigned)(pp->wchan) & 0xffffffu);\n  w = lookup_wchan(pp->XXXID);\n  len = strlen(w);\n  if(len>max_rightward) len=max_rightward;\n  memcpy(outbuf, w, len);\n  outbuf[len] = '\\0';\n  return len;\n}\n\nstatic int pr_wname(char *restrict const outbuf, const proc_t *restrict const pp){\n/* SGI's IRIX always uses a number for \"wchan\", so \"wname\" is provided too.\n *\n * We use '-' for running processes, the location when there is\n * only one thread waiting in the kernel, and '*' when there is\n * more than one thread waiting in the kernel.\n *\n * The output should be truncated to maximal columns width -- overflow\n * is not supported for the \"wchan\".\n */\n  const char *w;\n  size_t len;\n  if(!(pp->wchan & 0xffffff)) return memcpy(outbuf,\"-\",2),1;\n  w = lookup_wchan(pp->XXXID);\n  len = strlen(w);\n  if(len>max_rightward) len=max_rightward;\n  memcpy(outbuf, w, len);\n  outbuf[len] = '\\0';\n  return len;\n}\n\nstatic int pr_nwchan(char *restrict const outbuf, const proc_t *restrict const pp){\n  if(!(pp->wchan & 0xffffff)) return memcpy(outbuf,\"-\",2),1;\n  return snprintf(outbuf, COLWID, \"%x\", (unsigned)(pp->wchan) & 0xffffffu);\n}\n\n/* Terrible trunctuation, like BSD crap uses: I999 J999 K999 */\n/* FIXME: disambiguate /dev/tty69 and /dev/pts/69. */\nstatic int pr_tty4(char *restrict const outbuf, const proc_t *restrict const pp){\n/* snprintf(outbuf, COLWID, \"%02x:%02x\", pp->tty>>8, pp->tty&0xff); */\n  return dev_to_tty(outbuf, 4, pp->tty, pp->XXXID, ABBREV_DEV|ABBREV_TTY|ABBREV_PTS);\n}\n\n/* Unix98: format is unspecified, but must match that used by who(1). */\nstatic int pr_tty8(char *restrict const outbuf, const proc_t *restrict const pp){\n/* snprintf(outbuf, COLWID, \"%02x:%02x\", pp->tty>>8, pp->tty&0xff); */\n  return dev_to_tty(outbuf, COLWID, pp->tty, pp->XXXID, ABBREV_DEV);\n}\n\n#if 0\n/* This BSD state display may contain spaces, which is illegal. */\nstatic int pr_oldstate(char *restrict const outbuf, const proc_t *restrict const pp){\n    return snprintf(outbuf, COLWID, \"%s\", status(pp));\n}\n#endif\n\n// This state display is Unix98 compliant and has lots of info like BSD.\nstatic int pr_stat(char *restrict const outbuf, const proc_t *restrict const pp){\n    int end = 0;\n    outbuf[end++] = pp->state;\n//  if(pp->rss==0 && pp->state!='Z')  outbuf[end++] = 'W'; // useless \"swapped out\"\n    if(pp->nice < 0)                  outbuf[end++] = '<';\n    if(pp->nice > 0)                  outbuf[end++] = 'N';\n// In this order, NetBSD would add:\n//     traced   'X'\n//     systrace 'x'\n//     exiting  'E' (not printed for zombies)\n//     vforked  'V'\n//     system   'K' (and do not print 'L' too)\n    if(pp->vm_lock)                   outbuf[end++] = 'L';\n    if(pp->session == pp->tgid)       outbuf[end++] = 's'; // session leader\n    if(pp->nlwp > 1)                  outbuf[end++] = 'l'; // multi-threaded\n    if(pp->pgrp == pp->tpgid)         outbuf[end++] = '+'; // in foreground process group\n    outbuf[end] = '\\0';\n    return end;\n}\n\n/* This minimal state display is Unix98 compliant, like SCO and SunOS 5 */\nstatic int pr_s(char *restrict const outbuf, const proc_t *restrict const pp){\n    outbuf[0] = pp->state;\n    outbuf[1] = '\\0';\n    return 1;\n}\n\nstatic int pr_flag(char *restrict const outbuf, const proc_t *restrict const pp){\n    /* Unix98 requires octal flags */\n    /* this user-hostile and volatile junk gets 1 character */\n    return snprintf(outbuf, COLWID, \"%o\", (unsigned)(pp->flags>>6U)&0x7U);\n}\n\n// plus these: euid,ruid,egroup,rgroup (elsewhere in this file)\n\n/*********** non-standard ***********/\n\n/*** BSD\nsess\tsession pointer\n(SCO has:Process session leader ID as a decimal value. (SESSION))\njobc\tjob control count\ncpu\tshort-term cpu usage factor (for scheduling)\nsl\tsleep time (in seconds; 127 = infinity)\nre\tcore residency time (in seconds; 127 = infinity)\npagein\tpageins (same as majflt)\nlim\tsoft memory limit\ntsiz\ttext size (in Kbytes)\n***/\n\nstatic int pr_stackp(char *restrict const outbuf, const proc_t *restrict const pp){\n    return snprintf(outbuf, COLWID, \"%0*lx\", (int)(2*sizeof(long)), pp->start_stack);\n}\n\nstatic int pr_esp(char *restrict const outbuf, const proc_t *restrict const pp){\n    return snprintf(outbuf, COLWID, \"%0*lx\", (int)(2*sizeof(long)), pp->kstk_esp);\n}\n\nstatic int pr_eip(char *restrict const outbuf, const proc_t *restrict const pp){\n    return snprintf(outbuf, COLWID, \"%0*lx\", (int)(2*sizeof(long)), pp->kstk_eip);\n}\n\n/* This function helps print old-style time formats */\nstatic int old_time_helper(char *dst, unsigned long long t, unsigned long long rel) {\n  if(!t)            return snprintf(dst, COLWID, \"    -\");\n  if(t == ~0ULL)    return snprintf(dst, COLWID, \"   xx\");\n  if((long long)(t-=rel) < 0)  t=0ULL;\n  if(t>9999ULL)     return snprintf(dst, COLWID, \"%5llu\", t/100ULL);\n  else              return snprintf(dst, COLWID, \"%2u.%02u\", (unsigned)t/100U, (unsigned)t%100U);\n}\n\nstatic int pr_bsdtime(char *restrict const outbuf, const proc_t *restrict const pp){\n    unsigned long long t;\n    unsigned u;\n    t = pp->utime + pp->stime;\n    if(include_dead_children) t += (pp->cutime + pp->cstime);\n    u = t / Hertz;\n    return snprintf(outbuf, COLWID, \"%3u:%02u\", u/60U, u%60U);\n}\n\nstatic int pr_bsdstart(char *restrict const outbuf, const proc_t *restrict const pp){\n  time_t start;\n  time_t seconds_ago;\n  start = getbtime() + pp->start_time / Hertz;\n  seconds_ago = seconds_since_1970 - start;\n  if(seconds_ago < 0) seconds_ago=0;\n  if(seconds_ago > 3600*24)  snprintf(outbuf, COLWID, \"%s\", ctime(&start)+4);\n  else                       snprintf(outbuf, COLWID, \"%s\", ctime(&start)+10);\n  outbuf[6] = '\\0';\n  return 6;\n}\n\nstatic int pr_alarm(char *restrict const outbuf, const proc_t *restrict const pp){\n    return old_time_helper(outbuf, pp->alarm, 0ULL);\n}\n\n/* HP-UX puts this in pages and uses \"vsz\" for kB */\nstatic int pr_sz(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%lu\", (pp->vm_size)/(page_size/1024));\n}\n\n\n/*\n * FIXME: trs,drs,tsiz,dsiz,m_trs,m_drs,vm_exe,vm_data,trss\n * I suspect some/all of those are broken. They seem to have been\n * inherited by Linux and AIX from early BSD systems. FreeBSD only\n * retains tsiz. The prefixed versions come from Debian.\n * Sun and Digital have none of this crap. The code here comes\n * from an old Linux ps, and might not be correct for ELF executables.\n *\n * AIX            TRS    size of resident-set (real memory) of text\n * AIX            TSIZ   size of text (shared-program) image\n * FreeBSD        tsiz   text size (in Kbytes)\n * 4.3BSD NET/2   trss   text resident set size (in Kbytes)\n * 4.3BSD NET/2   tsiz   text size (in Kbytes)\n */\n\n/* kB data size. See drs, tsiz & trs. */\nstatic int pr_dsiz(char *restrict const outbuf, const proc_t *restrict const pp){\n    long dsiz = 0;\n    if(pp->vsize) dsiz += (pp->vsize - pp->end_code + pp->start_code) >> 10;\n    return snprintf(outbuf, COLWID, \"%ld\", dsiz);\n}\n\n/* kB text (code) size. See trs, dsiz & drs. */\nstatic int pr_tsiz(char *restrict const outbuf, const proc_t *restrict const pp){\n    long tsiz = 0;\n    if(pp->vsize) tsiz += (pp->end_code - pp->start_code) >> 10;\n    return snprintf(outbuf, COLWID, \"%ld\", tsiz);\n}\n\n/* kB _resident_ data size. See dsiz, tsiz & trs. */\nstatic int pr_drs(char *restrict const outbuf, const proc_t *restrict const pp){\n    long drs = 0;\n    if(pp->vsize) drs += (pp->vsize - pp->end_code + pp->start_code) >> 10;\n    return snprintf(outbuf, COLWID, \"%ld\", drs);\n}\n\n/* kB text _resident_ (code) size. See tsiz, dsiz & drs. */\nstatic int pr_trs(char *restrict const outbuf, const proc_t *restrict const pp){\n    long trs = 0;\n    if(pp->vsize) trs += (pp->end_code - pp->start_code) >> 10;\n    return snprintf(outbuf, COLWID, \"%ld\", trs);\n}\n\n/* approximation to: kB of address space that could end up in swap */\nstatic int pr_swapable(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%ld\", pp->vm_data + pp->vm_stack);\n}\n\n/* nasty old Debian thing */\nstatic int pr_size(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%ld\", pp->size);\n}\n\n\nstatic int pr_minflt(char *restrict const outbuf, const proc_t *restrict const pp){\n    long flt = pp->min_flt;\n    if(include_dead_children) flt += pp->cmin_flt;\n    return snprintf(outbuf, COLWID, \"%ld\", flt);\n}\n\nstatic int pr_majflt(char *restrict const outbuf, const proc_t *restrict const pp){\n    long flt = pp->maj_flt;\n    if(include_dead_children) flt += pp->cmaj_flt;\n    return snprintf(outbuf, COLWID, \"%ld\", flt);\n}\n\nstatic int pr_lim(char *restrict const outbuf, const proc_t *restrict const pp){\n    if(pp->rss_rlim == RLIM_INFINITY){\n      outbuf[0] = 'x';\n      outbuf[1] = 'x';\n      outbuf[2] = '\\0';\n      return 2;\n    }\n    return snprintf(outbuf, COLWID, \"%5ld\", pp->rss_rlim >> 10);\n}\n\n/* should print leading tilde ('~') if process is bound to the CPU */\nstatic int pr_psr(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%d\", pp->processor);\n}\n\nstatic int pr_numa(char *restrict const outbuf, const proc_t *restrict const pp){\n  static int first = 1;\n  if (first) { numa_init(); first = 0; }   // we'll keep this dependency local\n  return snprintf(outbuf, COLWID, \"%d\", numa_node_of_cpu(pp->processor));\n}\n\nstatic int pr_rss(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%lu\", pp->vm_rss);\n}\n\n/* pp->vm_rss * 1000 would overflow on 32-bit systems with 64 GB memory */\nstatic int pr_pmem(char *restrict const outbuf, const proc_t *restrict const pp){\n  unsigned long pmem = 0;\n  pmem = pp->vm_rss * 1000ULL / kb_main_total;\n  if (pmem > 999) pmem = 999;\n  return snprintf(outbuf, COLWID, \"%2u.%u\", (unsigned)(pmem/10), (unsigned)(pmem%10));\n}\n\nstatic int pr_lstart(char *restrict const outbuf, const proc_t *restrict const pp){\n  time_t t;\n  t = getbtime() + pp->start_time / Hertz;\n  return snprintf(outbuf, COLWID, \"%24.24s\", ctime(&t));\n}\n\n/* Unix98 specifies a STIME header for a column that shows the start\n * time of the process, but does not specify a format or format specifier.\n * From the general Unix98 rules, we know there must not be any spaces.\n * Most systems violate that rule, though the Solaris documentation\n * claims to print the column without spaces. (NOT!)\n *\n * So this isn't broken, but could be renamed to u98_std_stime,\n * as long as it still shows as STIME when using the -f option.\n */\nstatic int pr_stime(char *restrict const outbuf, const proc_t *restrict const pp){\n  struct tm *proc_time;\n  struct tm *our_time;\n  time_t t;\n  const char *fmt;\n  int tm_year;\n  int tm_yday;\n  size_t len;\n  our_time = localtime(&seconds_since_1970);   /* not reentrant */\n  tm_year = our_time->tm_year;\n  tm_yday = our_time->tm_yday;\n  t = getbtime() + pp->start_time / Hertz;\n  proc_time = localtime(&t); /* not reentrant, this corrupts our_time */\n  fmt = \"%H:%M\";                                   /* 03:02 23:59 */\n  if(tm_yday != proc_time->tm_yday) fmt = \"%b%d\";  /* Jun06 Aug27 */\n  if(tm_year != proc_time->tm_year) fmt = \"%Y\";    /* 1991 2001 */\n  len = strftime(outbuf, COLWID, fmt, proc_time);\n  if(len <= 0 || len >= COLWID) outbuf[len = 0] = '\\0';\n  return len;\n}\n\nstatic int pr_start(char *restrict const outbuf, const proc_t *restrict const pp){\n  time_t t;\n  char *str;\n  t = getbtime() + pp->start_time / Hertz;\n  str = ctime(&t);\n  if(str[8]==' ')  str[8]='0';\n  if(str[11]==' ') str[11]='0';\n  if((unsigned long)t+60*60*24 > (unsigned long)seconds_since_1970)\n    return snprintf(outbuf, COLWID, \"%8.8s\", str+11);\n  return snprintf(outbuf, COLWID, \"  %6.6s\", str+4);\n}\n\n\n#ifdef SIGNAL_STRING\nstatic int help_pr_sig(char *restrict const outbuf, const char *restrict const sig){\n  const size_t len = strlen(sig);\n  if(wide_signals){\n    if(len>8) return snprintf(outbuf, COLWID, \"%s\", sig);\n    return snprintf(outbuf, COLWID, \"00000000%s\", sig);\n  }\n  if(len-strspn(sig,\"0\") > 8)\n    return snprintf(outbuf, COLWID, \"<%s\", sig+len-8);\n  if(len < 8)\n    return snprintf(outbuf, COLWID, \"%s%s\", \"00000000\"+len, sig);\n  return snprintf(outbuf, COLWID,  \"%s\", sig+len-8);\n}\n#else\nstatic int help_pr_sig(unsigned long long sig){\n  if(wide_signals) return snprintf(outbuf, COLWID, \"%016Lx\", sig);\n  if(sig>>32)      return snprintf(outbuf, COLWID, \"<%08Lx\", sig&0xffffffffLL);\n  return                  snprintf(outbuf, COLWID,  \"%08Lx\", sig&0xffffffffLL);\n}\n#endif\n\n// This one is always thread-specific pending. (from Dragonfly BSD)\nstatic int pr_tsig(char *restrict const outbuf, const proc_t *restrict const pp){\n  return help_pr_sig(outbuf, pp->_sigpnd);\n}\n// This one is (wrongly?) thread-specific when printing thread lines,\n// but process-pending otherwise.\nstatic int pr_sig(char *restrict const outbuf, const proc_t *restrict const pp){\n  return help_pr_sig(outbuf, pp->signal);\n}\nstatic int pr_sigmask(char *restrict const outbuf, const proc_t *restrict const pp){\n  return help_pr_sig(outbuf, pp->blocked);\n}\nstatic int pr_sigignore(char *restrict const outbuf, const proc_t *restrict const pp){\n  return help_pr_sig(outbuf, pp->sigignore);\n}\nstatic int pr_sigcatch(char *restrict const outbuf, const proc_t *restrict const pp){\n  return help_pr_sig(outbuf, pp->sigcatch);\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*\n * internal terms:  ruid  euid  suid  fuid\n * kernel vars:      uid  euid  suid fsuid\n * command args:    ruid   uid svuid   n/a\n */\n\nstatic int pr_egid(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%d\", pp->egid);\n}\nstatic int pr_rgid(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%d\", pp->rgid);\n}\nstatic int pr_sgid(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%d\", pp->sgid);\n}\nstatic int pr_fgid(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%d\", pp->fgid);\n}\n\nstatic int pr_euid(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%d\", pp->euid);\n}\nstatic int pr_ruid(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%d\", pp->ruid);\n}\nstatic int pr_suid(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%d\", pp->suid);\n}\nstatic int pr_fuid(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%d\", pp->fuid);\n}\n\n// The Open Group Base Specifications Issue 6 (IEEE Std 1003.1, 2004 Edition)\n// requires that user and group names print as decimal numbers if there is\n// not enough room in the column.  However, we will now truncate such names\n// and provide a visual hint of such truncation.  Hopefully, this will reduce\n// the volume of bug reports regarding that former 'feature'.\n//\n// The UNIX and POSIX way to change column width is to rename it:\n//      ps -o pid,user=CumbersomeUserNames -o comm\n// The easy way is to directly specify the desired width:\n//      ps -o pid,user:19,comm\n//\nstatic int do_pr_name(char *restrict const outbuf, const char *restrict const name, unsigned u){\n  if(!user_is_number){\n    int rightward = OUTBUF_SIZE;\t/* max cells */\n    int len;\t\t\t\t/* real cells */\n\n    escape_str(outbuf, name, OUTBUF_SIZE, &rightward);\n    len = OUTBUF_SIZE-rightward;\n\n    if(len <= (int)max_rightward)\n      return len;  /* returns number of cells */\n\n    // only use '+' when not on a multi-byte char, else show uid\n    if (max_rightward >= 1 && (unsigned)outbuf[max_rightward-1] < 127) {\n      len = max_rightward-1;\n      outbuf[len++] = '+';\n      outbuf[len] = 0;\n      return len;\n    }\n  }\n  return snprintf(outbuf, COLWID, \"%u\", u);\n}\n\nstatic int pr_ruser(char *restrict const outbuf, const proc_t *restrict const pp){\n  return do_pr_name(outbuf, pp->ruser, pp->ruid);\n}\nstatic int pr_euser(char *restrict const outbuf, const proc_t *restrict const pp){\n  return do_pr_name(outbuf, pp->euser, pp->euid);\n}\nstatic int pr_fuser(char *restrict const outbuf, const proc_t *restrict const pp){\n  return do_pr_name(outbuf, pp->fuser, pp->fuid);\n}\nstatic int pr_suser(char *restrict const outbuf, const proc_t *restrict const pp){\n  return do_pr_name(outbuf, pp->suser, pp->suid);\n}\nstatic int pr_egroup(char *restrict const outbuf, const proc_t *restrict const pp){\n  return do_pr_name(outbuf, pp->egroup, pp->egid);\n}\nstatic int pr_rgroup(char *restrict const outbuf, const proc_t *restrict const pp){\n  return do_pr_name(outbuf, pp->rgroup, pp->rgid);\n}\nstatic int pr_fgroup(char *restrict const outbuf, const proc_t *restrict const pp){\n  return do_pr_name(outbuf, pp->fgroup, pp->fgid);\n}\nstatic int pr_sgroup(char *restrict const outbuf, const proc_t *restrict const pp){\n  return do_pr_name(outbuf, pp->sgroup, pp->sgid);\n}\n\n//////////////////////////////////////////////////////////////////////////////////\n\n// PID pid, TGID tgid\nstatic int pr_procs(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%u\", pp->tgid);\n}\n// LWP lwp, SPID spid, TID tid\nstatic int pr_tasks(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%u\", pp->tid);\n}\n// thcount THCNT\nstatic int pr_nlwp(char *restrict const outbuf, const proc_t *restrict const pp){\n    return snprintf(outbuf, COLWID, \"%d\", pp->nlwp);\n}\n\nstatic int pr_sess(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%u\", pp->session);\n}\n\nstatic int pr_supgid(char *restrict const outbuf, const proc_t *restrict const pp){\n  int rightward = max_rightward;\n  escaped_copy(outbuf, pp->supgid, OUTBUF_SIZE, &rightward);\n  return max_rightward-rightward;\n}\n\nstatic int pr_supgrp(char *restrict const outbuf, const proc_t *restrict const pp){\n  int rightward = max_rightward;\n  escaped_copy(outbuf, pp->supgrp, OUTBUF_SIZE, &rightward);\n  return max_rightward-rightward;\n}\n\nstatic int pr_tpgid(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%d\", pp->tpgid);\n}\n\n/* SGI uses \"cpu\" to print the processor ID with header \"P\" */\nstatic int pr_sgi_p(char *restrict const outbuf, const proc_t *restrict const pp){          /* FIXME */\n  if(pp->state == 'R') return snprintf(outbuf, COLWID, \"%d\", pp->processor);\n  return snprintf(outbuf, COLWID, \"*\");\n}\n\n/* LoginID implementation */\nstatic int pr_luid(char *restrict const outbuf, const proc_t *restrict const pp){\n    char filename[48];\n    ssize_t num_read;\n    int fd;\n    u_int32_t luid;\n\n    snprintf(filename, sizeof filename, \"/proc/%d/loginuid\", pp->tgid);\n\n    if ((fd = open(filename, O_RDONLY, 0)) != -1) {\n        num_read = read(fd, outbuf, OUTBUF_SIZE - 1);\n        close(fd);\n        if (num_read > 0) {\n            outbuf[num_read] = '\\0';\n\n            // processes born before audit have no LoginID set\n            luid = (u_int32_t) atoi(outbuf);\n            if (luid != -1)\n                return num_read;\n        }\n    }\n    outbuf[0] = '-';\n    outbuf[1] = '\\0';\n    num_read = 1;\n    return num_read;\n}\n\n\n/************************* Systemd stuff ********************************/\nstatic int pr_sd_unit(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%s\", pp->sd_unit);\n}\n\nstatic int pr_sd_session(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%s\", pp->sd_sess);\n}\n\nstatic int pr_sd_ouid(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%s\", pp->sd_ouid);\n}\n\nstatic int pr_sd_machine(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%s\", pp->sd_mach);\n}\n\nstatic int pr_sd_uunit(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%s\", pp->sd_uunit);\n}\n\nstatic int pr_sd_seat(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%s\", pp->sd_seat);\n}\n\nstatic int pr_sd_slice(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%s\", pp->sd_slice);\n}\n/************************ Linux namespaces ******************************/\n\n#define _pr_ns(NAME, ID)\\\nstatic int pr_##NAME(char *restrict const outbuf, const proc_t *restrict const pp) {\\\n  if (pp->ns[ID])\\\n    return snprintf(outbuf, COLWID, \"%lu\", (unsigned long)pp->ns[ID]);\\\n  else\\\n    return snprintf(outbuf, COLWID, \"-\");\\\n}\n_pr_ns(ipcns, IPCNS);\n_pr_ns(mntns, MNTNS);\n_pr_ns(netns, NETNS);\n_pr_ns(pidns, PIDNS);\n_pr_ns(userns, USERNS);\n_pr_ns(utsns, UTSNS);\n\n/************************ Linux containers ******************************/\nstatic int pr_lxcname(char *restrict const outbuf, const proc_t *restrict const pp){\n  return snprintf(outbuf, COLWID, \"%s\", pp->lxcname);\n}\n\n/****************** FLASK & seLinux security stuff **********************/\n// move the bulk of this to libproc sometime\n\n// This needs more study, considering:\n// 1. the static linking option (maybe disable this in that case)\n// 2. the -z and -Z option issue\n// 3. width of output\nstatic int pr_context(char *restrict const outbuf, const proc_t *restrict const pp){\n  static void (*ps_freecon)(char*) = 0;\n  static int (*ps_getpidcon)(pid_t pid, char **context) = 0;\n  static int selinux_enabled = 0;;\n  size_t len;\n  char *context;\n\n#if ENABLE_LIBSELINUX\n  static int (*ps_is_selinux_enabled)(void) = 0;\n  static int tried_load = 0;\n\n  if(!ps_getpidcon && !tried_load){\n    void *handle = dlopen(\"libselinux.so.1\", RTLD_NOW);\n    if(handle){\n      ps_freecon = dlsym(handle, \"freecon\");\n      if(dlerror())\n        ps_freecon = 0;\n      dlerror();\n      ps_getpidcon = dlsym(handle, \"getpidcon\");\n      if(dlerror())\n        ps_getpidcon = 0;\n      ps_is_selinux_enabled = dlsym(handle, \"is_selinux_enabled\");\n      if(dlerror())\n        ps_is_selinux_enabled = 0;\n      else\n        selinux_enabled = ps_is_selinux_enabled();\n    }\n    tried_load++;\n  }\n#endif\n  if(ps_getpidcon && selinux_enabled && !ps_getpidcon(pp->tgid, &context)){\n    size_t max_len = OUTBUF_SIZE-1;\n    len = strlen(context);\n    if(len > max_len) len = max_len;\n    memcpy(outbuf, context, len);\n    if (len >= 1 && outbuf[len-1] == '\\n') --len;\n    outbuf[len] = '\\0';\n    ps_freecon(context);\n  }else{\n    char filename[48];\n    ssize_t num_read;\n    int fd;\n\n// wchan file is suitable for testing\n//snprintf(filename, sizeof filename, \"/proc/%d/wchan\", pp->tgid);\n    snprintf(filename, sizeof filename, \"/proc/%d/attr/current\", pp->tgid);\n\n    if ((fd = open(filename, O_RDONLY, 0)) != -1) {\n      num_read = read(fd, outbuf, OUTBUF_SIZE-1);\n      close(fd);\n      if (num_read > 0) {\n        outbuf[num_read] = '\\0';\n        len = 0;\n        while(isprint(outbuf[len]))\n          len++;\n        outbuf[len] = '\\0';\n        if(len)\n          return len;\n      }\n    }\n    outbuf[0] = '-';\n    outbuf[1] = '\\0';\n    len = 1;\n  }\n  return len;\n}\n\n////////////////////////////// Test code /////////////////////////////////\n\n// like \"args\"\nstatic int pr_t_unlimited(char *restrict const outbuf, const proc_t *restrict const pp){\n  static const char *const vals[] = {\"[123456789-12345] <defunct>\",\"ps\",\"123456789-123456\"};\n  (void)pp;\n  snprintf(outbuf, max_rightward+1, \"%s\", vals[lines_to_next_header%3u]);\n  return strlen(outbuf);\n}\nstatic int pr_t_unlimited2(char *restrict const outbuf, const proc_t *restrict const pp){\n  static const char *const vals[] = {\"unlimited\", \"[123456789-12345] <defunct>\",\"ps\",\"123456789-123456\"};\n  (void)pp;\n  snprintf(outbuf, max_rightward+1, \"%s\", vals[lines_to_next_header%4u]);\n  return strlen(outbuf);\n}\n\n// like \"etime\"\nstatic int pr_t_right(char *restrict const outbuf, const proc_t *restrict const pp){\n  static const char *const vals[] = {\"999-23:59:59\",\"99-23:59:59\",\"9-23:59:59\",\"59:59\"};\n  (void)pp;\n  return snprintf(outbuf, COLWID, \"%s\", vals[lines_to_next_header%4u]);\n}\nstatic int pr_t_right2(char *restrict const outbuf, const proc_t *restrict const pp){\n  static const char *const vals[] = {\"999-23:59:59\",\"99-23:59:59\",\"9-23:59:59\"};\n  (void)pp;\n  return snprintf(outbuf, COLWID, \"%s\", vals[lines_to_next_header%3u]);\n}\n\n// like \"tty\"\nstatic int pr_t_left(char *restrict const outbuf, const proc_t *restrict const pp){\n  static const char *const vals[] = {\"tty7\",\"pts/9999\",\"iseries/vtty42\",\"ttySMX0\",\"3270/tty4\"};\n  (void)pp;\n  return snprintf(outbuf, COLWID, \"%s\", vals[lines_to_next_header%5u]);\n}\nstatic int pr_t_left2(char *restrict const outbuf, const proc_t *restrict const pp){\n  static const char *const vals[] = {\"tty7\",\"pts/9999\",\"ttySMX0\",\"3270/tty4\"};\n  (void)pp;\n  return snprintf(outbuf, COLWID, \"%s\", vals[lines_to_next_header%4u]);\n}\n\n/***************************************************************************/\n/*************************** other stuff ***********************************/\n\n/*\n * Old header specifications.\n *\n * short   Up  \"  PID TTY STAT  TIME COMMAND\"\n * long  l Pp  \" FLAGS   UID   PID  PPID PRI  NI   SIZE   RSS WCHAN       STA TTY TIME COMMAND\n * user  u up  \"USER       PID %CPU %MEM  SIZE   RSS TTY STAT START   TIME COMMAND\n * jobs  j gPp \" PPID   PID  PGID   SID TTY TPGID  STAT   UID   TIME COMMAND\n * sig   s p   \"  UID   PID SIGNAL   BLOCKED  IGNORED  CATCHED  STAT TTY   TIME COMMAND\n * vm    v r   \"  PID TTY STAT  TIME  PAGEIN TSIZ DSIZ  RSS   LIM %MEM COMMAND\n * m     m r   \"  PID TTY MAJFLT MINFLT   TRS   DRS  SIZE  SWAP   RSS  SHRD   LIB  DT COMMAND\n * regs  X p   \"NR   PID    STACK      ESP      EIP TMOUT ALARM STAT TTY   TIME COMMAND\n */\n\n/*\n * Unix98 requires that the heading for tty is TT, though XPG4, Digital,\n * and BSD use TTY. The Unix98 headers are:\n *              args,comm,etime,group,nice,pcpu,pgid\n *              pid,ppid,rgroup,ruser,time,tty,user,vsz\n *\n * BSD c:   \"command\" becomes accounting name (\"comm\" or \"ucomm\")\n * BSD n:   \"user\" becomes \"uid\" and \"wchan\" becomes \"nwchan\" (number)\n */\n\n/* Justification control for flags field. */\n#define USER      CF_USER   // left if text, right if numeric\n#define LEFT      CF_LEFT\n#define RIGHT     CF_RIGHT\n#define UNLIMITED CF_UNLIMITED\n#define WCHAN     CF_WCHAN  // left if text, right if numeric\n#define SIGNAL    CF_SIGNAL // right in 9, or 16 if room\n#define PIDMAX    CF_PIDMAX\n#define TO        CF_PRINT_THREAD_ONLY\n#define PO        CF_PRINT_PROCESS_ONLY\n#define ET        CF_PRINT_EVERY_TIME\n#define AN        CF_PRINT_AS_NEEDED // no idea\n\n/* short names to save space */\n#define MEM PROC_FILLMEM     /* read statm  */\n#define ARG PROC_FILLARG     /* read cmdline (cleared if c option) */\n#define COM PROC_FILLCOM     /* read cmdline (cleared if not -f option) */\n#define ENV PROC_FILLENV     /* read environ */\n#define USR PROC_FILLUSR     /* uid_t -> user names */\n#define GRP PROC_FILLGRP     /* gid_t -> group names */\n#define NS  PROC_FILLNS      /* read namespace information */\n#define LXC PROC_FILL_LXC    /* value the lxc name field */\n#define SD  PROC_FILLSYSTEMD /* retrieve systemd stuff */\n#define SGRP PROC_FILLSTATUS | PROC_FILLSUPGRP  /* supgid -> supgrp (names) */\n#define CGRP PROC_FILLCGROUP | PROC_EDITCGRPCVT /* read cgroup */\n\n/* TODO\n *      pull out annoying BSD aliases into another table (to macro table?)\n *      add sorting functions here (to unify names)\n */\n\n/* temporary hack -- mark new stuff grabbed from Debian ps */\n#define LNx LNX\n\n/* there are about 211 listed */\n\n/* Many of these are placeholders for unsupported options. */\nstatic const format_struct format_array[] = {\n/* code       header     print()      sort()    width need vendor flags  */\n{\"%cpu\",      \"%CPU\",    pr_pcpu,     sr_pcpu,    4,   0,    BSD, ET|RIGHT}, /*pcpu*/\n{\"%mem\",      \"%MEM\",    pr_pmem,     sr_rss,     4,   0,    BSD, PO|RIGHT}, /*pmem*/\n{\"_left\",     \"LLLLLLLL\", pr_t_left,  sr_nop,     8,   0,    TST, ET|LEFT},\n{\"_left2\",    \"L2L2L2L2\", pr_t_left2, sr_nop,     8,   0,    TST, ET|LEFT},\n{\"_right\",    \"RRRRRRRRRRR\", pr_t_right, sr_nop, 11,   0,    TST, ET|RIGHT},\n{\"_right2\",   \"R2R2R2R2R2R\", pr_t_right2, sr_nop, 11,  0,    TST, ET|RIGHT},\n{\"_unlimited\",\"U\",   pr_t_unlimited,  sr_nop,    16,   0,    TST, ET|UNLIMITED},\n{\"_unlimited2\",\"U2\", pr_t_unlimited2, sr_nop,    16,   0,    TST, ET|UNLIMITED},\n{\"acflag\",    \"ACFLG\",   pr_nop,      sr_nop,     5,   0,    XXX, AN|RIGHT}, /*acflg*/\n{\"acflg\",     \"ACFLG\",   pr_nop,      sr_nop,     5,   0,    BSD, AN|RIGHT}, /*acflag*/\n{\"addr\",      \"ADDR\",    pr_nop,      sr_nop,     4,   0,    XXX, AN|RIGHT},\n{\"addr_1\",    \"ADDR\",    pr_nop,      sr_nop,     1,   0,    LNX, AN|LEFT},\n{\"alarm\",     \"ALARM\",   pr_alarm,    sr_alarm,   5,   0,    LNX, AN|RIGHT},\n{\"argc\",      \"ARGC\",    pr_nop,      sr_nop,     4,   0,    LNX, PO|RIGHT},\n{\"args\",      \"COMMAND\", pr_args,     sr_cmd,    27, ARG,    U98, PO|UNLIMITED}, /*command*/\n{\"atime\",     \"TIME\",    pr_time,     sr_time,    8,   0,    SOE, ET|RIGHT}, /*cputime*/ /* was 6 wide */\n{\"blocked\",   \"BLOCKED\", pr_sigmask,  sr_nop,     9,   0,    BSD, TO|SIGNAL}, /*sigmask*/\n{\"bnd\",       \"BND\",     pr_nop,      sr_nop,     1,   0,    AIX, TO|RIGHT},\n{\"bsdstart\",  \"START\",   pr_bsdstart, sr_nop,     6,   0,    LNX, ET|RIGHT},\n{\"bsdtime\",   \"TIME\",    pr_bsdtime,  sr_nop,     6,   0,    LNX, ET|RIGHT},\n{\"c\",         \"C\",       pr_c,        sr_pcpu,    2,   0,    SUN, ET|RIGHT},\n{\"caught\",    \"CAUGHT\",  pr_sigcatch, sr_nop,     9,   0,    BSD, TO|SIGNAL}, /*sigcatch*/\n{\"cgname\",    \"CGNAME\",  pr_cgname,   sr_cgname, 27,CGRP,    LNX, PO|UNLIMITED},\n{\"cgroup\",    \"CGROUP\",  pr_cgroup,   sr_cgroup, 27,CGRP,    LNX, PO|UNLIMITED},\n{\"class\",     \"CLS\",     pr_class,    sr_sched,   3,   0,    XXX, TO|LEFT},\n{\"cls\",       \"CLS\",     pr_class,    sr_sched,   3,   0,    HPU, TO|RIGHT}, /*says HPUX or RT*/\n{\"cmaj_flt\",  \"-\",       pr_nop,      sr_cmaj_flt, 1,  0,    LNX, AN|RIGHT},\n{\"cmd\",       \"CMD\",     pr_args,     sr_cmd,    27, ARG,    DEC, PO|UNLIMITED}, /*ucomm*/\n{\"cmin_flt\",  \"-\",       pr_nop,      sr_cmin_flt, 1,  0,    LNX, AN|RIGHT},\n{\"cnswap\",    \"-\",       pr_nop,      sr_nop,     1,   0,    LNX, AN|RIGHT},\n{\"comm\",      \"COMMAND\", pr_comm,     sr_cmd,    15, COM,    U98, PO|UNLIMITED}, /*ucomm*/\n{\"command\",   \"COMMAND\", pr_args,     sr_cmd,    27, ARG,    XXX, PO|UNLIMITED}, /*args*/\n{\"context\",   \"CONTEXT\", pr_context,  sr_nop,    31,   0,    LNX, ET|LEFT},\n{\"cp\",        \"CP\",      pr_cp,       sr_pcpu,    3,   0,    DEC, ET|RIGHT}, /*cpu*/\n{\"cpu\",       \"CPU\",     pr_nop,      sr_nop,     3,   0,    BSD, AN|RIGHT}, /* FIXME ... HP-UX wants this as the CPU number for SMP? */\n{\"cpuid\",     \"CPUID\",   pr_psr,      sr_nop,     5,   0,    BSD, TO|RIGHT}, // OpenBSD: 8 wide!\n{\"cputime\",   \"TIME\",    pr_time,     sr_time,    8,   0,    DEC, ET|RIGHT}, /*time*/\n{\"cputimes\",  \"TIME\",    pr_times,    sr_time,    8,   0,    LNX, ET|RIGHT}, /*time*/\n{\"ctid\",      \"CTID\",    pr_nop,      sr_nop,     5,   0,    SUN, ET|RIGHT}, // resource contracts?\n{\"cursig\",    \"CURSIG\",  pr_nop,      sr_nop,     6,   0,    DEC, AN|RIGHT},\n{\"cutime\",    \"-\",       pr_nop,      sr_cutime,  1,   0,    LNX, AN|RIGHT},\n{\"cwd\",       \"CWD\",     pr_nop,      sr_nop,     3,   0,    LNX, AN|LEFT},\n{\"drs\",       \"DRS\",     pr_drs,      sr_drs,     5, MEM,    LNX, PO|RIGHT},\n{\"dsiz\",      \"DSIZ\",    pr_dsiz,     sr_nop,     4,   0,    LNX, PO|RIGHT},\n{\"egid\",      \"EGID\",    pr_egid,     sr_egid,    5,   0,    LNX, ET|RIGHT},\n{\"egroup\",    \"EGROUP\",  pr_egroup,   sr_egroup,  8, GRP,    LNX, ET|USER},\n{\"eip\",       \"EIP\",     pr_eip,      sr_kstk_eip, (int)(2*sizeof(long)), 0, LNX, TO|RIGHT},\n{\"emul\",      \"EMUL\",    pr_nop,      sr_nop,    13,   0,    BSD, PO|LEFT}, /* \"FreeBSD ELF32\" and such */\n{\"end_code\",  \"E_CODE\",  pr_nop,      sr_end_code, (int)(2*sizeof(long)), 0, LNx, PO|RIGHT},\n{\"environ\",\"ENVIRONMENT\",pr_nop,      sr_nop,    11, ENV,    LNx, PO|UNLIMITED},\n{\"esp\",       \"ESP\",     pr_esp,      sr_kstk_esp, (int)(2*sizeof(long)), 0, LNX, TO|RIGHT},\n{\"etime\",     \"ELAPSED\", pr_etime,    sr_etime,  11,   0,    U98, ET|RIGHT}, /* was 7 wide */\n{\"etimes\",    \"ELAPSED\", pr_etimes,   sr_etime,   7,   0,    BSD, ET|RIGHT}, /* FreeBSD */\n{\"euid\",      \"EUID\",    pr_euid,     sr_euid,    5,   0,    LNX, ET|RIGHT},\n{\"euser\",     \"EUSER\",   pr_euser,    sr_euser,   8, USR,    LNX, ET|USER},\n{\"f\",         \"F\",       pr_flag,     sr_flags,   1,   0,    XXX, ET|RIGHT}, /*flags*/\n{\"fgid\",      \"FGID\",    pr_fgid,     sr_fgid,    5,   0,    LNX, ET|RIGHT},\n{\"fgroup\",    \"FGROUP\",  pr_fgroup,   sr_fgroup,  8, GRP,    LNX, ET|USER},\n{\"flag\",      \"F\",       pr_flag,     sr_flags,   1,   0,    DEC, ET|RIGHT},\n{\"flags\",     \"F\",       pr_flag,     sr_flags,   1,   0,    BSD, ET|RIGHT}, /*f*/ /* was FLAGS, 8 wide */\n{\"fname\",     \"COMMAND\", pr_fname,    sr_nop,     8,   0,    SUN, PO|LEFT},\n{\"fsgid\",     \"FSGID\",   pr_fgid,     sr_fgid,    5,   0,    LNX, ET|RIGHT},\n{\"fsgroup\",   \"FSGROUP\", pr_fgroup,   sr_fgroup,  8, GRP,    LNX, ET|USER},\n{\"fsuid\",     \"FSUID\",   pr_fuid,     sr_fuid,    5,   0,    LNX, ET|RIGHT},\n{\"fsuser\",    \"FSUSER\",  pr_fuser,    sr_fuser,   8, USR,    LNX, ET|USER},\n{\"fuid\",      \"FUID\",    pr_fuid,     sr_fuid,    5,   0,    LNX, ET|RIGHT},\n{\"fuser\",     \"FUSER\",   pr_fuser,    sr_fuser,   8, USR,    LNX, ET|USER},\n{\"gid\",       \"GID\",     pr_egid,     sr_egid,    5,   0,    SUN, ET|RIGHT},\n{\"group\",     \"GROUP\",   pr_egroup,   sr_egroup,  8, GRP,    U98, ET|USER},\n{\"ignored\",   \"IGNORED\", pr_sigignore,sr_nop,     9,   0,    BSD, TO|SIGNAL}, /*sigignore*/\n{\"inblk\",     \"INBLK\",   pr_nop,      sr_nop,     5,   0,    BSD, AN|RIGHT}, /*inblock*/\n{\"inblock\",   \"INBLK\",   pr_nop,      sr_nop,     5,   0,    DEC, AN|RIGHT}, /*inblk*/\n{\"intpri\",    \"PRI\",     pr_opri,     sr_priority, 3,  0,    HPU, TO|RIGHT},\n{\"ipcns\",     \"IPCNS\",   pr_ipcns,    sr_ipcns,  10,  NS,    LNX, ET|RIGHT},\n{\"jid\",       \"JID\",     pr_nop,      sr_nop,     1,   0,    SGI, PO|RIGHT},\n{\"jobc\",      \"JOBC\",    pr_nop,      sr_nop,     4,   0,    XXX, AN|RIGHT},\n{\"ktrace\",    \"KTRACE\",  pr_nop,      sr_nop,     8,   0,    BSD, AN|RIGHT},\n{\"ktracep\",   \"KTRACEP\", pr_nop,      sr_nop,     8,   0,    BSD, AN|RIGHT},\n{\"label\",     \"LABEL\",   pr_context,  sr_nop,    31,  0,     SGI, ET|LEFT},\n{\"lastcpu\",   \"C\",       pr_psr,      sr_nop,     3,   0,    BSD, TO|RIGHT}, // DragonFly\n{\"lim\",       \"LIM\",     pr_lim,      sr_rss_rlim, 5,  0,    BSD, AN|RIGHT},\n{\"login\",     \"LOGNAME\", pr_nop,      sr_nop,     8,   0,    BSD, AN|LEFT}, /*logname*/   /* double check */\n{\"logname\",   \"LOGNAME\", pr_nop,      sr_nop,     8,   0,    XXX, AN|LEFT}, /*login*/\n{\"longtname\", \"TTY\",     pr_tty8,     sr_tty,     8,   0,    DEC, PO|LEFT},\n{\"lsession\",  \"SESSION\", pr_sd_session, sr_nop,  11,  SD,    LNX, ET|LEFT},\n{\"lstart\",    \"STARTED\", pr_lstart,   sr_nop,    24,   0,    XXX, ET|RIGHT},\n{\"luid\",      \"LUID\",    pr_luid,     sr_nop,     5,   0,    LNX, ET|RIGHT}, /* login ID */\n{\"luser\",     \"LUSER\",   pr_nop,      sr_nop,     8, USR,    LNX, ET|USER}, /* login USER */\n{\"lwp\",       \"LWP\",     pr_tasks,    sr_tasks,   5,   0,    SUN, TO|PIDMAX|RIGHT},\n{\"lxc\",       \"LXC\",     pr_lxcname,  sr_lxcname, 8, LXC,    LNX, ET|LEFT},\n{\"m_drs\",     \"DRS\",     pr_drs,      sr_drs,     5, MEM,    LNx, PO|RIGHT},\n{\"m_dt\",      \"DT\",      pr_nop,      sr_dt,      4, MEM,    LNx, PO|RIGHT},\n{\"m_lrs\",     \"LRS\",     pr_nop,      sr_lrs,     5, MEM,    LNx, PO|RIGHT},\n{\"m_resident\", \"RES\",    pr_nop,      sr_resident, 5,MEM,    LNx, PO|RIGHT},\n{\"m_share\",   \"SHRD\",    pr_nop,      sr_share,   5, MEM,    LNx, PO|RIGHT},\n{\"m_size\",    \"SIZE\",    pr_size,     sr_size,    5, MEM,    LNX, PO|RIGHT},\n{\"m_swap\",    \"SWAP\",    pr_nop,      sr_nop,     5,   0,    LNx, PO|RIGHT},\n{\"m_trs\",     \"TRS\",     pr_trs,      sr_trs,     5, MEM,    LNx, PO|RIGHT},\n{\"machine\",   \"MACHINE\", pr_sd_machine, sr_nop,  31,  SD,    LNX, ET|LEFT},\n{\"maj_flt\",   \"MAJFL\",   pr_majflt,   sr_maj_flt, 6,   0,    LNX, AN|RIGHT},\n{\"majflt\",    \"MAJFLT\",  pr_majflt,   sr_maj_flt, 6,   0,    XXX, AN|RIGHT},\n{\"min_flt\",   \"MINFL\",   pr_minflt,   sr_min_flt, 6,   0,    LNX, AN|RIGHT},\n{\"minflt\",    \"MINFLT\",  pr_minflt,   sr_min_flt, 6,   0,    XXX, AN|RIGHT},\n{\"mntns\",     \"MNTNS\",   pr_mntns,    sr_mntns,  10,  NS,    LNX, ET|RIGHT},\n{\"msgrcv\",    \"MSGRCV\",  pr_nop,      sr_nop,     6,   0,    XXX, AN|RIGHT},\n{\"msgsnd\",    \"MSGSND\",  pr_nop,      sr_nop,     6,   0,    XXX, AN|RIGHT},\n{\"mwchan\",    \"MWCHAN\",  pr_nop,      sr_nop,     6,   0,    BSD, TO|WCHAN}, /* mutex (FreeBSD) */\n{\"netns\",     \"NETNS\",   pr_netns,    sr_netns,  10,  NS,    LNX, ET|RIGHT},\n{\"ni\",        \"NI\",      pr_nice,     sr_nice,    3,   0,    BSD, TO|RIGHT}, /*nice*/\n{\"nice\",      \"NI\",      pr_nice,     sr_nice,    3,   0,    U98, TO|RIGHT}, /*ni*/\n{\"nivcsw\",    \"IVCSW\",   pr_nop,      sr_nop,     5,   0,    XXX, AN|RIGHT},\n{\"nlwp\",      \"NLWP\",    pr_nlwp,     sr_nlwp,    4,   0,    SUN, PO|RIGHT},\n{\"nsignals\",  \"NSIGS\",   pr_nop,      sr_nop,     5,   0,    DEC, AN|RIGHT}, /*nsigs*/\n{\"nsigs\",     \"NSIGS\",   pr_nop,      sr_nop,     5,   0,    BSD, AN|RIGHT}, /*nsignals*/\n{\"nswap\",     \"NSWAP\",   pr_nop,      sr_nop,     5,   0,    XXX, AN|RIGHT},\n{\"numa\",      \"NUMA\",    pr_numa,     sr_nop,     4,   0,    XXX, AN|RIGHT},\n{\"nvcsw\",     \"VCSW\",    pr_nop,      sr_nop,     5,   0,    XXX, AN|RIGHT},\n{\"nwchan\",    \"WCHAN\",   pr_nwchan,   sr_nop,     6,   0,    XXX, TO|RIGHT},\n{\"opri\",      \"PRI\",     pr_opri,     sr_priority, 3,  0,    SUN, TO|RIGHT},\n{\"osz\",       \"SZ\",      pr_nop,      sr_nop,     2,   0,    SUN, PO|RIGHT},\n{\"oublk\",     \"OUBLK\",   pr_nop,      sr_nop,     5,   0,    BSD, AN|RIGHT}, /*oublock*/\n{\"oublock\",   \"OUBLK\",   pr_nop,      sr_nop,     5,   0,    DEC, AN|RIGHT}, /*oublk*/\n{\"ouid\",      \"OWNER\",   pr_sd_ouid,  sr_nop,     5,  SD,    LNX, ET|LEFT},\n{\"p_ru\",      \"P_RU\",    pr_nop,      sr_nop,     6,   0,    BSD, AN|RIGHT},\n{\"paddr\",     \"PADDR\",   pr_nop,      sr_nop,     6,   0,    BSD, AN|RIGHT},\n{\"pagein\",    \"PAGEIN\",  pr_majflt,   sr_maj_flt, 6,   0,    XXX, AN|RIGHT},\n{\"pcpu\",      \"%CPU\",    pr_pcpu,     sr_pcpu,    4,   0,    U98, ET|RIGHT}, /*%cpu*/\n{\"pending\",   \"PENDING\", pr_sig,      sr_nop,     9,   0,    BSD, ET|SIGNAL}, /*sig*/\n{\"pgid\",      \"PGID\",    pr_pgid,     sr_pgrp,    5,   0,    U98, PO|PIDMAX|RIGHT},\n{\"pgrp\",      \"PGRP\",    pr_pgid,     sr_pgrp,    5,   0,    LNX, PO|PIDMAX|RIGHT},\n{\"pid\",       \"PID\",     pr_procs,    sr_procs,   5,   0,    U98, PO|PIDMAX|RIGHT},\n{\"pidns\",     \"PIDNS\",   pr_pidns,    sr_pidns,  10,  NS,    LNX, ET|RIGHT},\n{\"pmem\",      \"%MEM\",    pr_pmem,     sr_rss,     4,   0,    XXX, PO|RIGHT}, /*%mem*/\n{\"poip\",      \"-\",       pr_nop,      sr_nop,     1,   0,    BSD, AN|RIGHT},\n{\"policy\",    \"POL\",     pr_class,    sr_sched,   3,   0,    DEC, TO|LEFT},\n{\"ppid\",      \"PPID\",    pr_ppid,     sr_ppid,    5,   0,    U98, PO|PIDMAX|RIGHT},\n{\"pri\",       \"PRI\",     pr_pri,      sr_nop,     3,   0,    XXX, TO|RIGHT},\n{\"pri_api\",   \"API\",     pr_pri_api,  sr_nop,     3,   0,    LNX, TO|RIGHT},\n{\"pri_bar\",   \"BAR\",     pr_pri_bar,  sr_nop,     3,   0,    LNX, TO|RIGHT},\n{\"pri_baz\",   \"BAZ\",     pr_pri_baz,  sr_nop,     3,   0,    LNX, TO|RIGHT},\n{\"pri_foo\",   \"FOO\",     pr_pri_foo,  sr_nop,     3,   0,    LNX, TO|RIGHT},\n{\"priority\",  \"PRI\",     pr_priority, sr_priority, 3,  0,    LNX, TO|RIGHT},\n{\"prmgrp\",    \"PRMGRP\",  pr_nop,      sr_nop,    12,   0,    HPU, PO|RIGHT},\n{\"prmid\",     \"PRMID\",   pr_nop,      sr_nop,    12,   0,    HPU, PO|RIGHT},\n{\"project\",   \"PROJECT\", pr_nop,      sr_nop,    12,   0,    SUN, PO|LEFT}, // see prm* andctid\n{\"projid\",    \"PROJID\",  pr_nop,      sr_nop,     5,   0,    SUN, PO|RIGHT},\n{\"pset\",      \"PSET\",    pr_nop,      sr_nop,     4,   0,    DEC, TO|RIGHT},\n{\"psr\",       \"PSR\",     pr_psr,      sr_nop,     3,   0,    DEC, TO|RIGHT},\n{\"psxpri\",    \"PPR\",     pr_nop,      sr_nop,     3,   0,    DEC, TO|RIGHT},\n{\"re\",        \"RE\",      pr_nop,      sr_nop,     3,   0,    BSD, AN|RIGHT},\n{\"resident\",  \"RES\",     pr_nop,      sr_resident, 5,MEM,    LNX, PO|RIGHT},\n{\"rgid\",      \"RGID\",    pr_rgid,     sr_rgid,    5,   0,    XXX, ET|RIGHT},\n{\"rgroup\",    \"RGROUP\",  pr_rgroup,   sr_rgroup,  8, GRP,    U98, ET|USER}, /* was 8 wide */\n{\"rlink\",     \"RLINK\",   pr_nop,      sr_nop,     8,   0,    BSD, AN|RIGHT},\n{\"rss\",       \"RSS\",     pr_rss,      sr_rss,     5,   0,    XXX, PO|RIGHT}, /* was 5 wide */\n{\"rssize\",    \"RSS\",     pr_rss,      sr_vm_rss,  5,   0,    DEC, PO|RIGHT}, /*rsz*/\n{\"rsz\",       \"RSZ\",     pr_rss,      sr_vm_rss,  5,   0,    BSD, PO|RIGHT}, /*rssize*/\n{\"rtprio\",    \"RTPRIO\",  pr_rtprio,   sr_rtprio,  6,   0,    BSD, TO|RIGHT},\n{\"ruid\",      \"RUID\",    pr_ruid,     sr_ruid,    5,   0,    XXX, ET|RIGHT},\n{\"ruser\",     \"RUSER\",   pr_ruser,    sr_ruser,   8, USR,    U98, ET|USER},\n{\"s\",         \"S\",       pr_s,        sr_state,   1,   0,    SUN, TO|LEFT}, /*stat,state*/\n{\"sched\",     \"SCH\",     pr_sched,    sr_sched,   3,   0,    AIX, TO|RIGHT},\n{\"scnt\",      \"SCNT\",    pr_nop,      sr_nop,     4,   0,    DEC, AN|RIGHT},  /* man page misspelling of scount? */\n{\"scount\",    \"SC\",      pr_nop,      sr_nop,     4,   0,    AIX, AN|RIGHT},  /* scnt==scount, DEC claims both */\n{\"seat\",      \"SEAT\",    pr_sd_seat,  sr_nop,    11,  SD,    LNX, ET|LEFT},\n{\"sess\",      \"SESS\",    pr_sess,     sr_session, 5,   0,    XXX, PO|PIDMAX|RIGHT},\n{\"session\",   \"SESS\",    pr_sess,     sr_session, 5,   0,    LNX, PO|PIDMAX|RIGHT},\n{\"sgi_p\",     \"P\",       pr_sgi_p,    sr_nop,     1,   0,    LNX, TO|RIGHT}, /* \"cpu\" number */\n{\"sgi_rss\",   \"RSS\",     pr_rss,      sr_nop,     4,   0,    LNX, PO|LEFT}, /* SZ:RSS */\n{\"sgid\",      \"SGID\",    pr_sgid,     sr_sgid,    5,   0,    LNX, ET|RIGHT},\n{\"sgroup\",    \"SGROUP\",  pr_sgroup,   sr_sgroup,  8, GRP,    LNX, ET|USER},\n{\"share\",     \"-\",       pr_nop,      sr_share,   1, MEM,    LNX, PO|RIGHT},\n{\"sid\",       \"SID\",     pr_sess,     sr_session, 5,   0,    XXX, PO|PIDMAX|RIGHT}, /* Sun & HP */\n{\"sig\",       \"PENDING\", pr_sig,      sr_nop,     9,   0,    XXX, ET|SIGNAL}, /*pending -- Dragonfly uses this for whole-proc and \"tsig\" for thread */\n{\"sig_block\", \"BLOCKED\",  pr_sigmask, sr_nop,     9,   0,    LNX, TO|SIGNAL},\n{\"sig_catch\", \"CATCHED\", pr_sigcatch, sr_nop,     9,   0,    LNX, TO|SIGNAL},\n{\"sig_ignore\", \"IGNORED\",pr_sigignore, sr_nop,    9,   0,    LNX, TO|SIGNAL},\n{\"sig_pend\",  \"SIGNAL\",   pr_sig,     sr_nop,     9,   0,    LNX, ET|SIGNAL},\n{\"sigcatch\",  \"CAUGHT\",  pr_sigcatch, sr_nop,     9,   0,    XXX, TO|SIGNAL}, /*caught*/\n{\"sigignore\", \"IGNORED\", pr_sigignore,sr_nop,     9,   0,    XXX, TO|SIGNAL}, /*ignored*/\n{\"sigmask\",   \"BLOCKED\", pr_sigmask,  sr_nop,     9,   0,    XXX, TO|SIGNAL}, /*blocked*/\n{\"size\",      \"SIZE\",    pr_swapable, sr_swapable, 5,  0,    SCO, PO|RIGHT},\n{\"sl\",        \"SL\",      pr_nop,      sr_nop,     3,   0,    XXX, AN|RIGHT},\n{\"slice\",      \"SLICE\",  pr_sd_slice, sr_nop,    31,  SD,    LNX, ET|LEFT},\n{\"spid\",      \"SPID\",    pr_tasks,    sr_tasks,   5,   0,    SGI, TO|PIDMAX|RIGHT},\n{\"stackp\",    \"STACKP\",  pr_stackp,   sr_start_stack, (int)(2*sizeof(long)), 0, LNX, PO|RIGHT}, /*start_stack*/\n{\"start\",     \"STARTED\", pr_start,    sr_nop,     8,   0,    XXX, ET|RIGHT},\n{\"start_code\", \"S_CODE\",  pr_nop,     sr_start_code,  (int)(2*sizeof(long)), 0, LNx, PO|RIGHT},\n{\"start_stack\", \"STACKP\", pr_stackp,  sr_start_stack, (int)(2*sizeof(long)), 0, LNX, PO|RIGHT}, /*stackp*/\n{\"start_time\", \"START\",  pr_stime,    sr_start_time, 5, 0,   LNx, ET|RIGHT},\n{\"stat\",      \"STAT\",    pr_stat,     sr_state,   4,   0,    BSD, TO|LEFT}, /*state,s*/\n{\"state\",     \"S\",       pr_s,        sr_state,   1,   0,    XXX, TO|LEFT}, /*stat,s*/ /* was STAT */\n{\"status\",    \"STATUS\",  pr_nop,      sr_nop,     6,   0,    DEC, AN|RIGHT},\n{\"stime\",     \"STIME\",   pr_stime,    sr_stime,   5,   0,    XXX, ET|RIGHT}, /* was 6 wide */\n{\"suid\",      \"SUID\",    pr_suid,     sr_suid,    5,   0,    LNx, ET|RIGHT},\n{\"supgid\",    \"SUPGID\",  pr_supgid,   sr_nop,    20,   0,    LNX, PO|UNLIMITED},\n{\"supgrp\",    \"SUPGRP\",  pr_supgrp,   sr_nop,    40,SGRP,    LNX, PO|UNLIMITED},\n{\"suser\",     \"SUSER\",   pr_suser,    sr_suser,   8, USR,    LNx, ET|USER},\n{\"svgid\",     \"SVGID\",   pr_sgid,     sr_sgid,    5,   0,    XXX, ET|RIGHT},\n{\"svgroup\",   \"SVGROUP\", pr_sgroup,   sr_sgroup,  8, GRP,    LNX, ET|USER},\n{\"svuid\",     \"SVUID\",   pr_suid,     sr_suid,    5,   0,    XXX, ET|RIGHT},\n{\"svuser\",    \"SVUSER\",  pr_suser,    sr_suser,   8, USR,    LNX, ET|USER},\n{\"systime\",   \"SYSTEM\",  pr_nop,      sr_nop,     6,   0,    DEC, ET|RIGHT},\n{\"sz\",        \"SZ\",      pr_sz,       sr_nop,     5,   0,    HPU, PO|RIGHT},\n{\"taskid\",    \"TASKID\",  pr_nop,      sr_nop,     5,   0,    SUN, TO|PIDMAX|RIGHT}, // is this a thread ID?\n{\"tdev\",      \"TDEV\",    pr_nop,      sr_nop,     4,   0,    XXX, AN|RIGHT},\n{\"tgid\",      \"TGID\",    pr_procs,    sr_procs,   5,   0,    LNX, PO|PIDMAX|RIGHT},\n{\"thcount\",   \"THCNT\",   pr_nlwp,     sr_nlwp,    5,   0,    AIX, PO|RIGHT},\n{\"tid\",       \"TID\",     pr_tasks,    sr_tasks,   5,   0,    AIX, TO|PIDMAX|RIGHT},\n{\"time\",      \"TIME\",    pr_time,     sr_time,    8,   0,    U98, ET|RIGHT}, /*cputime*/ /* was 6 wide */\n{\"timeout\",   \"TMOUT\",   pr_nop,      sr_nop,     5,   0,    LNX, AN|RIGHT}, // 2.0.xx era\n{\"times\",     \"TIME\",    pr_times,    sr_time,    8,   0,    LNX, ET|RIGHT},\n{\"tmout\",     \"TMOUT\",   pr_nop,      sr_nop,     5,   0,    LNX, AN|RIGHT}, // 2.0.xx era\n{\"tname\",     \"TTY\",     pr_tty8,     sr_tty,     8,   0,    DEC, PO|LEFT},\n{\"tpgid\",     \"TPGID\",   pr_tpgid,    sr_tpgid,   5,   0,    XXX, PO|PIDMAX|RIGHT},\n{\"trs\",       \"TRS\",     pr_trs,      sr_trs,     4, MEM,    AIX, PO|RIGHT},\n{\"trss\",      \"TRSS\",    pr_trs,      sr_trs,     4, MEM,    BSD, PO|RIGHT}, /* 4.3BSD NET/2 */\n{\"tsess\",     \"TSESS\",   pr_nop,      sr_nop,     5,   0,    BSD, PO|PIDMAX|RIGHT},\n{\"tsession\",  \"TSESS\",   pr_nop,      sr_nop,     5,   0,    DEC, PO|PIDMAX|RIGHT},\n{\"tsid\",      \"TSID\",    pr_nop,      sr_nop,     5,   0,    BSD, PO|PIDMAX|RIGHT},\n{\"tsig\",      \"PENDING\", pr_tsig,     sr_nop,     9,   0,    BSD, ET|SIGNAL}, /* Dragonfly used this for thread-specific, and \"sig\" for whole-proc */\n{\"tsiz\",      \"TSIZ\",    pr_tsiz,     sr_nop,     4,   0,    BSD, PO|RIGHT},\n{\"tt\",        \"TT\",      pr_tty8,     sr_tty,     8,   0,    BSD, PO|LEFT},\n{\"tty\",       \"TT\",      pr_tty8,     sr_tty,     8,   0,    U98, PO|LEFT}, /* Unix98 requires \"TT\" but has \"TTY\" too. :-( */  /* was 3 wide */\n{\"tty4\",      \"TTY\",     pr_tty4,     sr_tty,     4,   0,    LNX, PO|LEFT},\n{\"tty8\",      \"TTY\",     pr_tty8,     sr_tty,     8,   0,    LNX, PO|LEFT},\n{\"u_procp\",   \"UPROCP\",  pr_nop,      sr_nop,     6,   0,    DEC, AN|RIGHT},\n{\"ucmd\",      \"CMD\",     pr_comm,     sr_cmd,    15, COM,    DEC, PO|UNLIMITED}, /*ucomm*/\n{\"ucomm\",     \"COMMAND\", pr_comm,     sr_cmd,    15, COM,    XXX, PO|UNLIMITED}, /*comm*/\n{\"uid\",       \"UID\",     pr_euid,     sr_euid,    5,   0,    XXX, ET|RIGHT},\n{\"uid_hack\",  \"UID\",     pr_euser,    sr_euser,   8, USR,    XXX, ET|USER},\n{\"umask\",     \"UMASK\",   pr_nop,      sr_nop,     5,   0,    DEC, AN|RIGHT},\n{\"uname\",     \"USER\",    pr_euser,    sr_euser,   8, USR,    DEC, ET|USER}, /* man page misspelling of user? */\n{\"unit\",      \"UNIT\",    pr_sd_unit,  sr_nop,    31,  SD,    LNX, ET|LEFT},\n{\"upr\",       \"UPR\",     pr_nop,      sr_nop,     3,   0,    BSD, TO|RIGHT}, /*usrpri*/\n{\"uprocp\",    \"UPROCP\",  pr_nop,      sr_nop,     8,   0,    BSD, AN|RIGHT},\n{\"user\",      \"USER\",    pr_euser,    sr_euser,   8, USR,    U98, ET|USER}, /* BSD n forces this to UID */\n{\"userns\",    \"USERNS\",  pr_userns,   sr_userns, 10,  NS,    LNX, ET|RIGHT},\n{\"usertime\",  \"USER\",    pr_nop,      sr_nop,     4,   0,    DEC, ET|RIGHT},\n{\"usrpri\",    \"UPR\",     pr_nop,      sr_nop,     3,   0,    DEC, TO|RIGHT}, /*upr*/\n{\"util\",      \"C\",       pr_c,        sr_pcpu,    2,   0,    SGI, ET|RIGHT}, // not sure about \"C\"\n{\"utime\",     \"UTIME\",   pr_nop,      sr_utime,   6,   0,    LNx, ET|RIGHT},\n{\"utsns\",     \"UTSNS\",   pr_utsns,    sr_utsns,  10,  NS,    LNX, ET|RIGHT},\n{\"uunit\",     \"UUNIT\",   pr_sd_uunit, sr_nop,    31,  SD,    LNX, ET|LEFT},\n{\"vm_data\",   \"DATA\",    pr_nop,      sr_vm_data, 5,   0,    LNx, PO|RIGHT},\n{\"vm_exe\",    \"EXE\",     pr_nop,      sr_vm_exe,  5,   0,    LNx, PO|RIGHT},\n{\"vm_lib\",    \"LIB\",     pr_nop,      sr_vm_lib,  5,   0,    LNx, PO|RIGHT},\n{\"vm_lock\",   \"LCK\",     pr_nop,      sr_vm_lock, 3,   0,    LNx, PO|RIGHT},\n{\"vm_stack\",  \"STACK\",   pr_nop,      sr_vm_stack, 5,  0,    LNx, PO|RIGHT},\n{\"vsize\",     \"VSZ\",     pr_vsz,      sr_vsize,   6,   0,    DEC, PO|RIGHT}, /*vsz*/\n{\"vsz\",       \"VSZ\",     pr_vsz,      sr_vm_size, 6,   0,    U98, PO|RIGHT}, /*vsize*/\n{\"wchan\",     \"WCHAN\",   pr_wchan,    sr_wchan,   6,   0,    XXX, TO|WCHAN}, /* BSD n forces this to nwchan */ /* was 10 wide */\n{\"wname\",     \"WCHAN\",   pr_wname,    sr_nop,     6,   0,    SGI, TO|WCHAN}, /* opposite of nwchan */\n{\"xstat\",     \"XSTAT\",   pr_nop,      sr_nop,     5,   0,    BSD, AN|RIGHT},\n{\"zone\",      \"ZONE\",    pr_context,  sr_nop,    31,   0,    SUN, ET|LEFT}, // Solaris zone == Linux context?\n{\"zoneid\",    \"ZONEID\",  pr_nop,      sr_nop,    31,   0,    SUN, ET|RIGHT},// Linux only offers context names\n{\"~\",         \"-\",       pr_nop,      sr_nop,     1,   0,    LNX, AN|RIGHT}  /* NULL would ruin alphabetical order */\n};\n\n#undef USER\n#undef LEFT\n#undef RIGHT\n#undef UNLIMITED\n#undef WCHAN\n#undef SIGNAL\n#undef PIDMAX\n#undef PO\n#undef TO\n#undef AN\n#undef ET\n\nstatic const int format_array_count = sizeof(format_array)/sizeof(format_struct);\n\n\n/****************************** Macro formats *******************************/\n/* First X field may be NR, which is p->start_code>>26 printed with %2ld */\n/* That seems useless though, and Debian already killed it. */\n/* The ones marked \"Digital\" have the name defined, not just the data. */\nstatic const macro_struct macro_array[] = {\n{\"DFMT\",     \"pid,tname,state,cputime,cmd\"},         /* Digital's default */\n{\"DefBSD\",   \"pid,tname,stat,bsdtime,args\"},               /* Our BSD default */\n{\"DefSysV\",  \"pid,tname,time,cmd\"},                     /* Our SysV default */\n{\"END_BSD\",  \"state,tname,cputime,comm\"},                 /* trailer for O */\n{\"END_SYS5\", \"state,tname,time,command\"},                 /* trailer for -O */\n{\"F5FMT\",    \"uname,pid,ppid,c,start,tname,time,cmd\"},       /* Digital -f */\n\n{\"FB_\",      \"pid,tt,stat,time,command\"},                          /* FreeBSD default */\n{\"FB_j\",     \"user,pid,ppid,pgid,sess,jobc,stat,tt,time,command\"},     /* FreeBSD j */\n{\"FB_l\",     \"uid,pid,ppid,cpu,pri,nice,vsz,rss,wchan,stat,tt,time,command\"},   /* FreeBSD l */\n{\"FB_u\",     \"user,pid,pcpu,pmem,vsz,rss,tt,stat,start,time,command\"},     /* FreeBSD u */\n{\"FB_v\",     \"pid,stat,time,sl,re,pagein,vsz,rss,lim,tsiz,pcpu,pmem,command\"},   /* FreeBSD v */\n\n{\"FD_\",      \"pid,tty,time,comm\"},                                 /* Fictional Debian SysV default */\n{\"FD_f\",     \"user,pid,ppid,start_time,tty,time,comm\"},                /* Fictional Debian -f */\n{\"FD_fj\",    \"user,pid,ppid,start_time,tty,time,pgid,sid,comm\"},        /* Fictional Debian -jf */\n{\"FD_j\",     \"pid,tty,time,pgid,sid,comm\"},                                  /* Fictional Debian -j */\n{\"FD_l\",     \"flags,state,uid,pid,ppid,priority,nice,vsz,wchan,tty,time,comm\"},    /* Fictional Debian -l */\n{\"FD_lj\",    \"flags,state,uid,pid,ppid,priority,nice,vsz,wchan,tty,time,pgid,sid,comm\"}, /* Fictional Debian -jl */\n\n{\"FL5FMT\",   \"f,state,uid,pid,ppid,pcpu,pri,nice,rss,wchan,start,time,command\"},  /* Digital -fl */\n\n{\"FLASK_context\",   \"pid,context,command\"},  /* Flask Linux context, --context */\n\n{\"HP_\",      \"pid,tty,time,comm\"},  /* HP default */\n{\"HP_f\",     \"user,pid,ppid,cpu,stime,tty,time,args\"},  /* HP -f */\n{\"HP_fl\",    \"flags,state,user,pid,ppid,cpu,intpri,nice,addr,sz,wchan,stime,tty,time,args\"},  /* HP -fl */\n{\"HP_l\",     \"flags,state,uid,pid,ppid,cpu,intpri,nice,addr,sz,wchan,tty,time,comm\"},  /* HP -l */\n\n{\"J390\",     \"pid,sid,pgrp,tname,atime,args\"},   /* OS/390 -j */\n{\"JFMT\",     \"user,pid,ppid,pgid,sess,jobc,state,tname,cputime,command\"},   /* Digital j and -j */\n{\"L5FMT\",    \"f,state,uid,pid,ppid,c,pri,nice,addr,sz,wchan,tt,time,ucmd\"},   /* Digital -l */\n{\"LFMT\",     \"uid,pid,ppid,cp,pri,nice,vsz,rss,wchan,state,tname,cputime,command\"},   /* Digital l */\n\n{\"OL_X\",     \"pid,start_stack,esp,eip,timeout,alarm,stat,tname,bsdtime,args\"},      /* Old i386 Linux X */\n{\"OL_j\",     \"ppid,pid,pgid,sid,tname,tpgid,stat,uid,bsdtime,args\"},                   /* Old Linux j */\n{\"OL_l\",     \"flags,uid,pid,ppid,priority,nice,vsz,rss,wchan,stat,tname,bsdtime,args\"},     /* Old Linux l */\n{\"OL_m\",     \"pid,tname,majflt,minflt,m_trs,m_drs,m_size,m_swap,rss,m_share,vm_lib,m_dt,args\"}, /* Old Linux m */\n{\"OL_s\",     \"uid,pid,pending,sig_block,sig_ignore,caught,stat,tname,bsdtime,args\"},  /* Old Linux s */\n{\"OL_u\",     \"user,pid,pcpu,pmem,vsz,rss,tname,stat,start_time,bsdtime,args\"},       /* Old Linux u */\n{\"OL_v\",     \"pid,tname,stat,bsdtime,maj_flt,m_trs,m_drs,rss,pmem,args\"},            /* Old Linux v */\n\n{\"RD_\",      \"pid,tname,state,bsdtime,comm\"},                                       /* Real Debian default */\n{\"RD_f\",     \"uid,pid,ppid,start_time,tname,bsdtime,args\"},                         /* Real Debian -f */\n{\"RD_fj\",    \"uid,pid,ppid,start_time,tname,bsdtime,pgid,sid,args\"},                /* Real Debian -jf */\n{\"RD_j\",     \"pid,tname,state,bsdtime,pgid,sid,comm\"},                               /* Real Debian -j */\n{\"RD_l\",     \"flags,state,uid,pid,ppid,priority,nice,wchan,tname,bsdtime,comm\"},           /* Real Debian -l */\n{\"RD_lj\",    \"flags,state,uid,pid,ppid,priority,nice,wchan,tname,bsdtime,pgid,sid,comm\"},  /* Real Debian -jl */\n\n{\"RUSAGE\",   \"minflt,majflt,nswap,inblock,oublock,msgsnd,msgrcv,nsigs,nvcsw,nivcsw\"}, /* Digital -o \"RUSAGE\" */\n{\"SCHED\",    \"user,pcpu,pri,usrpri,nice,psxpri,psr,policy,pset\"},                /* Digital -o \"SCHED\" */\n{\"SFMT\",     \"uid,pid,cursig,sig,sigmask,sigignore,sigcatch,stat,tname,command\"},  /* Digital s */\n\n{\"Std_f\",    \"uid_hack,pid,ppid,c,stime,tname,time,cmd\"},                     /* new -f */\n{\"Std_fl\",   \"f,s,uid_hack,pid,ppid,c,opri,ni,addr,sz,wchan,stime,tname,time,cmd\"}, /* -fl */\n{\"Std_l\",    \"f,s,uid,pid,ppid,c,opri,ni,addr,sz,wchan,tname,time,ucmd\"},  /* new -l */\n\n{\"THREAD\",   \"user,pcpu,pri,scnt,wchan,usertime,systime\"},                /* Digital -o \"THREAD\" */\n{\"UFMT\",     \"uname,pid,pcpu,pmem,vsz,rss,tt,state,start,time,command\"},   /* Digital u */\n{\"VFMT\",     \"pid,tt,state,time,sl,pagein,vsz,rss,pcpu,pmem,command\"},   /* Digital v */\n{\"~\", \"~\"} /* NULL would ruin alphabetical order */\n};\n\nstatic const int macro_array_count = sizeof(macro_array)/sizeof(macro_struct);\n\n\n/*************************** AIX formats ********************/\n/* Convert AIX format codes to normal format specifiers. */\nstatic const aix_struct aix_array[] = {\n{'C', \"pcpu\",   \"%CPU\"},\n{'G', \"group\",  \"GROUP\"},\n{'P', \"ppid\",   \"PPID\"},\n{'U', \"user\",   \"USER\"},\n{'a', \"args\",   \"COMMAND\"},\n{'c', \"comm\",   \"COMMAND\"},\n{'g', \"rgroup\", \"RGROUP\"},\n{'n', \"nice\",   \"NI\"},\n{'p', \"pid\",    \"PID\"},\n{'r', \"pgid\",   \"PGID\"},\n{'t', \"etime\",  \"ELAPSED\"},\n{'u', \"ruser\",  \"RUSER\"},\n{'x', \"time\",   \"TIME\"},\n{'y', \"tty\",    \"TTY\"},\n{'z', \"vsz\",    \"VSZ\"},\n{'~', \"~\",      \"~\"} /* NULL would ruin alphabetical order */\n};\n//static const int aix_array_count = sizeof(aix_array)/sizeof(aix_struct);\n\n\n/********************* sorting ***************************/\n/* Convert short sorting codes to normal format specifiers. */\nstatic const shortsort_struct shortsort_array[] = {\n{'C', \"pcpu\"       },\n{'G', \"tpgid\"      },\n{'J', \"cstime\"     },\n/* {'K', \"stime\"      }, */  /* conflict, system vs. start time */\n{'M', \"maj_flt\"    },\n{'N', \"cmaj_flt\"   },\n{'P', \"ppid\"       },\n{'R', \"resident\"   },\n{'S', \"share\"      },\n{'T', \"start_time\" },\n{'U', \"uid\"        }, /* euid */\n{'c', \"cmd\"        },\n{'f', \"flags\"      },\n{'g', \"pgrp\"       },\n{'j', \"cutime\"     },\n{'k', \"utime\"      },\n{'m', \"min_flt\"    },\n{'n', \"cmin_flt\"   },\n{'o', \"session\"    },\n{'p', \"pid\"        },\n{'r', \"rss\"        },\n{'s', \"size\"       },\n{'t', \"tty\"        },\n{'u', \"user\"       },\n{'v', \"vsize\"      },\n{'y', \"priority\"   }, /* nice */\n{'~', \"~\"          } /* NULL would ruin alphabetical order */\n};\n//static const int shortsort_array_count = sizeof(shortsort_array)/sizeof(shortsort_struct);\n\n\n/*********** print format_array **********/\n/* called by the parser in another file */\nvoid print_format_specifiers(void){\n  const format_struct *walk = format_array;\n  while(*(walk->spec) != '~'){\n    if(walk->pr != pr_nop) printf(\"%-12.12s %-8.8s\\n\", walk->spec, walk->head);\n    walk++;\n  }\n}\n\n/************ comparison functions for bsearch *************/\n\nstatic int compare_format_structs(const void *a, const void *b){\n  return strcmp(((const format_struct*)a)->spec,((const format_struct*)b)->spec);\n}\n\nstatic int compare_macro_structs(const void *a, const void *b){\n  return strcmp(((const macro_struct*)a)->spec,((const macro_struct*)b)->spec);\n}\n\n/******** look up structs as needed by the sort & format parsers ******/\n\nconst shortsort_struct *search_shortsort_array(const int findme){\n  const shortsort_struct *walk = shortsort_array;\n  while(walk->desc != '~'){\n    if(walk->desc == findme) return walk;\n    walk++;\n  }\n  return NULL;\n}\n\nconst aix_struct *search_aix_array(const int findme){\n  const aix_struct *walk = aix_array;\n  while(walk->desc != '~'){\n    if(walk->desc == findme) return walk;\n    walk++;\n  }\n  return NULL;\n}\n\nconst format_struct *search_format_array(const char *findme){\n  format_struct key;\n  key.spec = findme;\n  return bsearch(&key, format_array, format_array_count,\n    sizeof(format_struct), compare_format_structs\n  );\n}\n\nconst macro_struct *search_macro_array(const char *findme){\n  macro_struct key;\n  key.spec = findme;\n  return bsearch(&key, macro_array, macro_array_count,\n    sizeof(macro_struct), compare_macro_structs\n  );\n}\n\nstatic unsigned int active_cols;  /* some multiple of screen_cols */\n\n/***** Last chance, avoid needless trunctuation. */\nstatic void check_header_width(void){\n  format_node *walk = format_list;\n  unsigned int total = 0;\n  int was_normal = 0;\n  unsigned int i = 0;\n  unsigned int sigs = 0;\n  while(walk){\n    switch((walk->flags) & CF_JUST_MASK){\n    default:\n      total += walk->width;\n      total += was_normal;\n      was_normal = 1;\n      break;\n    case CF_SIGNAL:\n      sigs++;\n      total += walk->width;\n      total += was_normal;\n      was_normal = 1;\n      break;\n    case CF_UNLIMITED:  /* could chop this a bit */\n      if(walk->next) total += walk->width;\n      else total += 3; /* not strlen(walk->name) */\n      total += was_normal;\n      was_normal = 1;\n      break;\n    case 0:  /* AIX */\n      total += walk->width;\n      was_normal = 0;\n      break;\n    }\n    walk = walk->next;\n  }\n  for(;;){\n    i++;\n    active_cols = screen_cols * i;\n    if(active_cols>=total) break;\n    if(screen_cols*i >= OUTBUF_SIZE/2) break; /* can't go over */\n  }\n  wide_signals = (total+sigs*7 <= active_cols);\n}\n\n\n/********** show one process (NULL proc prints header) **********/\n\n//#define SPACE_AMOUNT page_size\n#define SPACE_AMOUNT 144\n\nstatic char *saved_outbuf;\n\nvoid show_one_proc(const proc_t *restrict const p, const format_node *restrict fmt){\n  /* unknown: maybe set correct & actual to 1, remove +/- 1 below */\n  int correct  = 0;  /* screen position we should be at */\n  int actual   = 0;  /* screen position we are at */\n  int amount   = 0;  /* amount of text that this data is */\n  int leftpad  = 0;  /* amount of space this column _could_ need */\n  int space    = 0;  /* amount of space we actually need to print */\n  int dospace  = 0;  /* previous column determined that we need a space */\n  int legit    = 0;  /* legitimately stolen extra space */\n  int sz       = 0;  /* real size of data in outbuffer */\n  int tmpspace = 0;\n  char *restrict const outbuf = saved_outbuf;\n  static int did_stuff = 0;  /* have we ever printed anything? */\n\n  if(unlikely(-1==(long)p)){    /* true only once, at the end */\n    if(did_stuff) return;\n    /* have _never_ printed anything, but might need a header */\n    if(!--lines_to_next_header){\n      lines_to_next_header = header_gap;\n      show_one_proc(NULL,fmt);\n    }\n    /* fprintf(stderr, \"No processes available.\\n\"); */  /* legal? */\n    exit(1);\n  }\n  if(likely(p)){  /* not header, maybe we should call ourselves for it */\n    if(unlikely(!--lines_to_next_header)){\n      lines_to_next_header = header_gap;\n      show_one_proc(NULL,fmt);\n    }\n  }\n  did_stuff = 1;\n  if(unlikely(active_cols>(int)OUTBUF_SIZE)) fprintf(stderr,_(\"fix bigness error\\n\"));\n\n  /* print row start sequence */\n  for(;;){\n    legit = 0;\n    /* set width suggestion which might be ignored */\n//    if(likely(fmt->next)) max_rightward = fmt->width;\n//    else max_rightward = active_cols-((correct>actual) ? correct : actual);\n\n    if(likely(fmt->next)){\n      max_rightward = fmt->width;\n      tmpspace = 0;\n    }else{\n      tmpspace = correct-actual;\n      if (tmpspace<1){\n        tmpspace = dospace;\n        max_rightward = active_cols-actual-tmpspace;\n      }else{\n\tmax_rightward = active_cols - ( (correct>actual) ? correct : actual );\n      }\n    }\n    if(max_rightward <= 0) max_rightward = 0;\n    else if(max_rightward >= OUTBUF_SIZE) max_rightward = OUTBUF_SIZE-1;\n\n    max_leftward  = fmt->width + actual - correct; /* TODO check this */\n    if(max_leftward <= 0) max_leftward = 0;\n    else if(max_leftward >= OUTBUF_SIZE) max_leftward = OUTBUF_SIZE-1;\n\n//    fprintf(stderr, \"cols: %d, max_rightward: %d, max_leftward: %d, actual: %d, correct: %d\\n\",\n//\t\t    active_cols, max_rightward, max_leftward, actual, correct);\n\n    /* prepare data and calculate leftpad */\n    if(likely(p) && likely(fmt->pr)) amount = (*fmt->pr)(outbuf,p);\n    else amount = snprintf(outbuf, OUTBUF_SIZE, \"%s\", fmt->name); /* AIX or headers */\n\n    if(amount < 0) outbuf[amount = 0] = '\\0';\n    else if(amount >= OUTBUF_SIZE) outbuf[amount = OUTBUF_SIZE-1] = '\\0';\n\n    switch((fmt->flags) & CF_JUST_MASK){\n    case 0:  /* for AIX, assigned outside this file */\n      leftpad = 0;\n      break;\n    case CF_LEFT:          /* bad */\n      leftpad = 0;\n      break;\n    case CF_RIGHT:     /* OK */\n      leftpad = fmt->width - amount;\n      if(leftpad < 0) leftpad = 0;\n      break;\n    case CF_SIGNAL:\n      /* if the screen is wide enough, use full 16-character output */\n      if(wide_signals){\n        leftpad = 16 - amount;\n        legit = 7;\n      }else{\n        leftpad =  9 - amount;\n      }\n      if(leftpad < 0) leftpad = 0;\n      break;\n    case CF_USER:       /* bad */\n      leftpad = fmt->width - amount;\n      if(leftpad < 0) leftpad = 0;\n      if(!user_is_number) leftpad = 0;\n      break;\n    case CF_WCHAN:       /* bad */\n      if(wchan_is_number){\n        leftpad = fmt->width - amount;\n        if(leftpad < 0) leftpad = 0;\n        break;\n      }else{\n        if ((active_cols-actual-tmpspace)<1)\n          outbuf[1] = '\\0';  /* oops, we (mostly) lose this column... */\n        leftpad = 0;\n        break;\n      }\n    case CF_UNLIMITED:\n    {\n      if(active_cols-actual-tmpspace < 1)\n        outbuf[1] = '\\0';    /* oops, we (mostly) lose this column... */\n      leftpad = 0;\n      break;\n    }\n    default:\n      fprintf(stderr, _(\"bad alignment code\\n\"));\n      break;\n    }\n    /* At this point:\n     *\n     * correct   from previous column\n     * actual    from previous column\n     * amount    not needed (garbage due to chopping)\n     * leftpad   left padding for this column alone (not make-up or gap)\n     * space     not needed (will recalculate now)\n     * dospace   if we require space between this and the prior column\n     * legit     space we were allowed to steal, and thus did steal\n     */\n    space = correct - actual + leftpad;\n    if(space<1) space=dospace;\n    if(unlikely(space>SPACE_AMOUNT)) space=SPACE_AMOUNT;  // only so much available\n\n    /* real size -- don't forget in 'amount' is number of cells */\n    outbuf[OUTBUF_SIZE-1] = '\\0';\n    sz = strlen(outbuf);\n\n    /* print data, set x position stuff */\n    if(unlikely(!fmt->next)){\n      /* Last column. Write padding + data + newline all together. */\n      outbuf[sz] = '\\n';\n      fwrite(outbuf-space, space+sz+1, 1, stdout);\n      break;\n    }\n    /* Not the last column. Write padding + data together. */\n    fwrite(outbuf-space, space+sz, 1, stdout);\n    actual  += space+amount;\n    correct += fmt->width;\n    correct += legit;        /* adjust for SIGNAL expansion */\n    if(fmt->pr && fmt->next->pr){ /* neither is AIX filler */\n      correct++;\n      dospace = 1;\n    }else{\n      dospace = 0;\n    }\n    fmt = fmt->next;\n    /* At this point:\n     *\n     * correct   screen position we should be at\n     * actual    screen position we are at\n     * amount    not needed\n     * leftpad   not needed\n     * space     not needed\n     * dospace   if have determined that we need a space next time\n     * legit     not needed\n     */\n  }\n}\n\n\nvoid init_output(void){\n  int outbuf_pages;\n  char *outbuf;\n\n  // add page_size-1 to round up\n  outbuf_pages = (OUTBUF_SIZE+SPACE_AMOUNT+page_size-1)/page_size;\n  outbuf = mmap(\n    0,\n    page_size * (outbuf_pages+1), // 1 more, for guard page at high addresses\n    PROT_READ | PROT_WRITE,\n    MAP_PRIVATE | MAP_ANONYMOUS,\n    -1,\n    0\n  );\n  if(outbuf == MAP_FAILED)\n    catastrophic_failure(__FILE__, __LINE__, _(\"please report this bug\"));\n\n  memset(outbuf, ' ', SPACE_AMOUNT);\n  if(SPACE_AMOUNT==page_size) mprotect(outbuf, page_size, PROT_READ);\n  mprotect(outbuf + page_size*outbuf_pages, page_size, PROT_NONE); // guard page\n  saved_outbuf = outbuf + SPACE_AMOUNT;\n  // available space:  page_size*outbuf_pages-SPACE_AMOUNT\n\n  seconds_since_1970 = time(NULL);\n\n  meminfo();\n\n  check_header_width();\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/proc/numa.c": "/*\n * NUMA node support for <PIDS> & <STAT> interfaces\n * Copyright 2017 by James C. Warmer\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n#ifndef NUMA_DISABLE\n#include <dlfcn.h>\n#endif\n#include <stdlib.h>\n\n#include \"numa.h\"\n\n/*\n * We're structured so that if numa_init() is NOT called or that ./configure |\n * --disable-numa WAS specified, then calls to both of our primary functions |\n * of numa_max_node() plus numa_node_of_cpu() would always return a negative |\n * 1 which signifies that NUMA information isn't available. That ./configure |\n * option might be required when libdl.so (necessary for dlopen) is missing. |\n */\n\n\n/* ------------------------------------------------------------------------- +\n   a strictly development #define, existing specifically for the top program |\n   ( and it has no affect if ./configure --disable-numa has been specified ) | */\n//#define PRETEND_NUMA     // pretend there are 3 'discontiguous' numa nodes |\n// ------------------------------------------------------------------------- +\n\n\nstatic int null_max_node (void) { return -1; }\nstatic int null_node_of_cpu (int n) { (void)n; return -1; }\n\n\n#ifndef NUMA_DISABLE\n #ifdef PRETEND_NUMA\nstatic int fake_max_node (void) { return 3; }\nstatic int fake_node_of_cpu (int n) { return (1 == (n % 4)) ? 0 : (n % 4); }\n #endif\n#endif\n\n\n#ifndef NUMA_DISABLE\nstatic void *libnuma_handle;\n#endif\nint (*numa_max_node) (void)   = null_max_node;\nint (*numa_node_of_cpu) (int) = null_node_of_cpu;\n\n\nvoid numa_init (void) {\n    static int initialized;\n\n    if (initialized)\n        return;\n\n#ifndef NUMA_DISABLE\n #ifndef PRETEND_NUMA\n    // we'll try for the most recent version, then a version we know works...\n    if ((libnuma_handle = dlopen(\"libnuma.so\", RTLD_LAZY))\n    || (libnuma_handle = dlopen(\"libnuma.so.1\", RTLD_LAZY))) {\n        numa_max_node = dlsym(libnuma_handle, \"numa_max_node\");\n        numa_node_of_cpu = dlsym(libnuma_handle, \"numa_node_of_cpu\");\n        if (numa_max_node == NULL\n        || (numa_node_of_cpu == NULL)) {\n            // this dlclose is safe - we've yet to call numa_node_of_cpu\n            // ( there's one other dlclose which has now been disabled )\n            dlclose(libnuma_handle);\n            libnuma_handle = NULL;\n            numa_max_node = null_max_node;\n            numa_node_of_cpu = null_node_of_cpu;\n        }\n    }\n #else\n    libnuma_handle = (void *)-1;\n    numa_max_node = fake_max_node;\n    numa_node_of_cpu = fake_node_of_cpu;\n #endif\n#endif\n    initialized = 1;\n} // end: numa_init\n\n\nvoid numa_uninit (void) {\n#ifndef PRETEND_NUMA\n    /* note: we'll skip a dlcose() to avoid the following libnuma memory\n     *       leak which is triggered after a call to numa_node_of_cpu():\n     *         ==1234== LEAK SUMMARY:\n     *         ==1234==    definitely lost: 512 bytes in 1 blocks\n     *         ==1234==    indirectly lost: 48 bytes in 2 blocks\n     *         ==1234==    ...\n     * [ thanks very much libnuma for all the pains you have caused us ]\n     */\n//  if (libnuma_handle)\n//      dlclose(libnuma_handle);\n#endif\n} // end: numa_uninit\n\n\n#if defined(PRETEND_NUMA) && defined(NUMA_DISABLE)\n# warning 'PRETEND_NUMA' ignored, 'NUMA_DISABLE' is active\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/proc/sysinfo.c": "/*\n * File for parsing top-level /proc entities.\n * Copyright (C) 1992-1998 by Michael K. Johnson, johnsonm@redhat.com\n * Copyright 1998-2003 Albert Cahalan\n * June 2003, Fabian Frederick, disk and slab info\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <locale.h>\n#include <limits.h>\n#include <errno.h>\n\n#include <unistd.h>\n#include <fcntl.h>\n#ifdef __CYGWIN__\n#include <sys/param.h>\n#endif\n#include \"alloc.h\"\n#include \"version.h\"\n#include \"sysinfo.h\" /* include self to verify prototypes */\n\n#ifndef HZ\n#include <netinet/in.h>  /* htons */\n#endif\n\n#ifndef __CYGWIN__\n#include <link.h>\n#endif\n#include <elf.h>\n\nlong smp_num_cpus;     /* number of CPUs */\nlong page_bytes;       /* this architecture's page size */\n\n#define BAD_OPEN_MESSAGE\t\t\t\t\t\\\n\"Error: /proc must be mounted\\n\"\t\t\t\t\\\n\"  To mount /proc at boot you need an /etc/fstab line like:\\n\"\t\\\n\"      proc   /proc   proc    defaults\\n\"\t\t\t\\\n\"  In the meantime, run \\\"mount proc /proc -t proc\\\"\\n\"\n\n#define STAT_FILE    \"/proc/stat\"\nstatic int stat_fd = -1;\n#define UPTIME_FILE  \"/proc/uptime\"\nstatic int uptime_fd = -1;\n#define LOADAVG_FILE \"/proc/loadavg\"\nstatic int loadavg_fd = -1;\n#define MEMINFO_FILE \"/proc/meminfo\"\nstatic int meminfo_fd = -1;\n#define VMINFO_FILE \"/proc/vmstat\"\nstatic int vminfo_fd = -1;\n#define VM_MIN_FREE_FILE \"/proc/sys/vm/min_free_kbytes\"\nstatic int vm_min_free_fd = -1;\n\n// As of 2.6.24 /proc/meminfo seems to need 888 on 64-bit,\n// and would need 1258 if the obsolete fields were there.\n// As of 3.13 /proc/vmstat needs 2623,\n// and /proc/stat needs 3076.\nstatic char buf[8192];\n\n/* This macro opens filename only if necessary and seeks to 0 so\n * that successive calls to the functions are more efficient.\n * It also reads the current contents of the file into the global buf.\n */\n#define FILE_TO_BUF(filename, fd) do{\t\t\t\t\\\n    static int local_n;\t\t\t\t\t\t\\\n    if (fd == -1 && (fd = open(filename, O_RDONLY)) == -1) {\t\\\n\tfputs(BAD_OPEN_MESSAGE, stderr);\t\t\t\\\n\tfflush(NULL);\t\t\t\t\t\t\\\n\t_exit(102);\t\t\t\t\t\t\\\n    }\t\t\t\t\t\t\t\t\\\n    lseek(fd, 0L, SEEK_SET);\t\t\t\t\t\\\n    if ((local_n = read(fd, buf, sizeof buf - 1)) < 0) {\t\\\n\tperror(filename);\t\t\t\t\t\\\n\tfflush(NULL);\t\t\t\t\t\t\\\n\t_exit(103);\t\t\t\t\t\t\\\n    }\t\t\t\t\t\t\t\t\\\n    buf[local_n] = '\\0';\t\t\t\t\t\\\n}while(0)\n\n/* evals 'x' twice */\n#define SET_IF_DESIRED(x,y) do{  if(x) *(x) = (y); }while(0)\n\n/* return minimum of two values */\n#ifndef __CYGWIN__\n#define MIN(x,y) ((x) < (y) ? (x) : (y))\n#endif\n\n/***********************************************************************/\nint uptime(double *restrict uptime_secs, double *restrict idle_secs) {\n    double up=0, idle=0;\n    char *savelocale;\n\n    FILE_TO_BUF(UPTIME_FILE,uptime_fd);\n    savelocale = strdup(setlocale(LC_NUMERIC, NULL));\n    setlocale(LC_NUMERIC,\"C\");\n    if (sscanf(buf, \"%lf %lf\", &up, &idle) < 2) {\n        setlocale(LC_NUMERIC,savelocale);\n        free(savelocale);\n        fputs(\"bad data in \" UPTIME_FILE \"\\n\", stderr);\n\t    return 0;\n    }\n    setlocale(LC_NUMERIC,savelocale);\n    free(savelocale);\n    SET_IF_DESIRED(uptime_secs, up);\n    SET_IF_DESIRED(idle_secs, idle);\n    return up;\t/* assume never be zero seconds in practice */\n}\n\nunsigned long getbtime(void) {\n    static unsigned long btime = 0;\n    bool found_btime = false;\n    FILE *f;\n\n    if (btime)\n\treturn btime;\n\n    /* /proc/stat can get very large on multi-CPU systems so we\n       can't use FILE_TO_BUF */\n    if (!(f = fopen(STAT_FILE, \"r\"))) {\n\tfputs(BAD_OPEN_MESSAGE, stderr);\n\tfflush(NULL);\n\t_exit(102);\n    }\n\n    while ((fgets(buf, sizeof buf, f))) {\n        if (sscanf(buf, \"btime %lu\", &btime) == 1) {\n            found_btime = true;\n            break;\n        }\n    }\n    fclose(f);\n\n    if (!found_btime) {\n\tfputs(\"missing btime in \" STAT_FILE \"\\n\", stderr);\n\texit(1);\n    }\n\n    return btime;\n}\n\n/***********************************************************************\n * Some values in /proc are expressed in units of 1/HZ seconds, where HZ\n * is the kernel clock tick rate. One of these units is called a jiffy.\n * The HZ value used in the kernel may vary according to hacker desire.\n * According to Linus Torvalds, this is not true. He considers the values\n * in /proc as being in architecture-dependent units that have no relation\n * to the kernel clock tick rate. Examination of the kernel source code\n * reveals that opinion as wishful thinking.\n *\n * In any case, we need the HZ constant as used in /proc. (the real HZ value\n * may differ, but we don't care) There are several ways we could get HZ:\n *\n * 1. Include the kernel header file. If it changes, recompile this library.\n * 2. Use the sysconf() function. When HZ changes, recompile the C library!\n * 3. Ask the kernel. This is obviously correct...\n *\n * Linus Torvalds won't let us ask the kernel, because he thinks we should\n * not know the HZ value. Oh well, we don't have to listen to him.\n * Someone smuggled out the HZ value. :-)\n *\n * This code should work fine, even if Linus fixes the kernel to match his\n * stated behavior. The code only fails in case of a partial conversion.\n *\n * Recent update: on some architectures, the 2.4 kernel provides an\n * ELF note to indicate HZ. This may be for ARM or user-mode Linux\n * support. This ought to be investigated. Note that sysconf() is still\n * unreliable, because it doesn't return an error code when it is\n * used with a kernel that doesn't support the ELF note. On some other\n * architectures there may be a system call or sysctl() that will work.\n */\n\nunsigned long long Hertz;\n\nstatic void old_Hertz_hack(void){\n  unsigned long long user_j, nice_j, sys_j, other_j, wait_j, hirq_j, sirq_j, stol_j;  /* jiffies (clock ticks) */\n  double up_1, up_2, seconds;\n  unsigned long long jiffies;\n  unsigned h;\n  char *savelocale;\n  long hz;\n\n#ifdef _SC_CLK_TCK\n  if((hz = sysconf(_SC_CLK_TCK)) > 0){\n    Hertz = hz;\n    return;\n  }\n#endif\n\n  wait_j = hirq_j = sirq_j = stol_j = 0;\n  savelocale = strdup(setlocale(LC_NUMERIC, NULL));\n  setlocale(LC_NUMERIC, \"C\");\n  do{\n    FILE_TO_BUF(UPTIME_FILE,uptime_fd);  sscanf(buf, \"%lf\", &up_1);\n    /* uptime(&up_1, NULL); */\n    FILE_TO_BUF(STAT_FILE,stat_fd);\n    sscanf(buf, \"cpu %llu %llu %llu %llu %llu %llu %llu %llu\", &user_j, &nice_j, &sys_j, &other_j, &wait_j, &hirq_j, &sirq_j, &stol_j);\n    FILE_TO_BUF(UPTIME_FILE,uptime_fd);  sscanf(buf, \"%lf\", &up_2);\n    /* uptime(&up_2, NULL); */\n  } while((long long)( (up_2-up_1)*1000.0/up_1 )); /* want under 0.1% error */\n  setlocale(LC_NUMERIC, savelocale);\n  free(savelocale);\n  jiffies = user_j + nice_j + sys_j + other_j + wait_j + hirq_j + sirq_j + stol_j ;\n  seconds = (up_1 + up_2) / 2;\n  h = (unsigned)( (double)jiffies/seconds/smp_num_cpus );\n  /* actual values used by 2.4 kernels: 32 64 100 128 1000 1024 1200 */\n  switch(h){\n  case    9 ...   11 :  Hertz =   10; break; /* S/390 (sometimes) */\n  case   18 ...   22 :  Hertz =   20; break; /* user-mode Linux */\n  case   30 ...   34 :  Hertz =   32; break; /* ia64 emulator */\n  case   48 ...   52 :  Hertz =   50; break;\n  case   58 ...   61 :  Hertz =   60; break;\n  case   62 ...   65 :  Hertz =   64; break; /* StrongARM /Shark */\n  case   95 ...  105 :  Hertz =  100; break; /* normal Linux */\n  case  124 ...  132 :  Hertz =  128; break; /* MIPS, ARM */\n  case  195 ...  204 :  Hertz =  200; break; /* normal << 1 */\n  case  247 ...  252 :  Hertz =  250; break;\n  case  253 ...  260 :  Hertz =  256; break;\n  case  393 ...  408 :  Hertz =  400; break; /* normal << 2 */\n  case  410 ...  600 :  Hertz =  500; break; /* SMP WinNT */\n  case  790 ...  808 :  Hertz =  800; break; /* normal << 3 */\n  case  990 ... 1010 :  Hertz = 1000; break; /* ARM */\n  case 1015 ... 1035 :  Hertz = 1024; break; /* Alpha, ia64 */\n  case 1180 ... 1220 :  Hertz = 1200; break; /* Alpha */\n  default:\n#ifdef HZ\n    Hertz = (unsigned long long)HZ;    /* <asm/param.h> */\n#else\n    /* If 32-bit or big-endian (not Alpha or ia64), assume HZ is 100. */\n    Hertz = (sizeof(long)==sizeof(int) || htons(999)==999) ? 100UL : 1024UL;\n#endif\n    fprintf(stderr, \"Unknown HZ value! (%d) Assume %Ld.\\n\", h, Hertz);\n  }\n}\n\n// same as:   euid != uid || egid != gid\n#ifndef AT_SECURE\n#define AT_SECURE      23     // secure mode boolean (true if setuid, etc.)\n#endif\n\n#ifndef AT_CLKTCK\n#define AT_CLKTCK       17    // frequency of times()\n#endif\n\n#define NOTE_NOT_FOUND 42\n\nextern char** environ;\n\nstatic unsigned long find_elf_note(unsigned long type)\n{\n#ifdef __CYGWIN__\n  return NOTE_NOT_FOUND;\n#else\n  ElfW(auxv_t) auxv_struct;\n  ElfW(auxv_t) *auxv_temp;\n  FILE *fd;\n  int i;\n  static ElfW(auxv_t) *auxv = NULL;\n  unsigned long *ep = (unsigned long *)environ;\n  unsigned long ret_val = NOTE_NOT_FOUND;\n\n\n  if(!auxv) {\n\n    fd = fopen(\"/proc/self/auxv\", \"rb\");\n\n    if(!fd) {  // can't open auxv? that could be caused by euid change\n               // ... and we need to fall back to the old and unsafe\n               // ... method that doesn't work when calling library\n               // ... functions with dlopen -> FIXME :(\n\n      while(*ep++);  // for ELF executables, notes are pushed\n      while(*ep){    // ... before environment and args\n        if(ep[0]==type) return ep[1];\n        ep+=2;\n      }\n      return NOTE_NOT_FOUND;\n    }\n\n    auxv = (ElfW(auxv_t) *) malloc(getpagesize());\n    if (!auxv) {\n      perror(\"malloc\");\n      exit(EXIT_FAILURE);\n    }\n\n    i = 0;\n    do {\n      fread(&auxv_struct, sizeof(ElfW(auxv_t)), 1, fd);\n      auxv[i] = auxv_struct;\n      i++;\n    } while (auxv_struct.a_type != AT_NULL);\n\n    fclose(fd);\n\n  }\n\n  auxv_temp = auxv;\n  i = 0;\n  do {\n    if(auxv_temp[i].a_type == type) {\n      ret_val = (unsigned long)auxv_temp[i].a_un.a_val;\n      break;\n    }\n    i++;\n  } while (auxv_temp[i].a_type != AT_NULL);\n\n  if (auxv){\n\t  auxv_temp = NULL;\n\t  free(auxv);\n\t  auxv = NULL;\n  }\n  return ret_val;\n#endif\n}\n\nint have_privs;\n\nstatic int check_for_privs(void){\n  unsigned long rc = find_elf_note(AT_SECURE);\n  if(rc==NOTE_NOT_FOUND){\n    // not valid to run this code after UID or GID change!\n    // (if needed, may use AT_UID and friends instead)\n    rc = geteuid() != getuid() || getegid() != getgid();\n  }\n  return !!rc;\n}\n\nstatic void init_libproc(void) __attribute__((constructor));\nstatic void init_libproc(void){\n  have_privs = check_for_privs();\n  int linux_version_code = procps_linux_version();\n\n  cpuinfo();\n  page_bytes = sysconf(_SC_PAGESIZE);\n\n#ifdef __linux__\n  if(linux_version_code > LINUX_VERSION(2, 4, 0)){\n    Hertz = find_elf_note(AT_CLKTCK);\n    if(Hertz!=NOTE_NOT_FOUND) return;\n//  fputs(\"2.4+ kernel w/o ELF notes? -- report this\\n\", stderr);\n  }\n#endif /* __linux __ */\n#if defined(__FreeBSD_kernel__) || defined(__FreeBSD__)\n  /* On FreeBSD the Hertz hack is unrelaible, there is no ELF note and\n   * Hertz isn't defined in asm/params.h\n   * See Debian Bug #460331\n   */\n  Hertz = 100;\n  return;\n#endif /* __FreeBSD__ */\n#ifdef __CYGWIN__\n  // On Cygwin we can rely on the HZ value given in sys/param.h\n  Hertz = (unsigned long long)HZ;    /* <sys/param.h> */\n  return;\n#endif\n  old_Hertz_hack();\n}\n\n#if 0\n/***********************************************************************\n * The /proc filesystem calculates idle=jiffies-(user+nice+sys) and we\n * recover jiffies by adding up the 4 or 5 numbers we are given. SMP kernels\n * (as of pre-2.4 era) can report idle time going backwards, perhaps due\n * to non-atomic reads and updates. There is no locking for these values.\n */\n#ifndef NAN\n#define NAN (-0.0)\n#endif\n#define JT unsigned long long\nvoid eight_cpu_numbers(double *restrict uret, double *restrict nret, double *restrict sret, double *restrict iret, double *restrict wret, double *restrict xret, double *restrict yret, double *restrict zret){\n    double tmp_u, tmp_n, tmp_s, tmp_i, tmp_w, tmp_x, tmp_y, tmp_z;\n    double scale;  /* scale values to % */\n    static JT old_u, old_n, old_s, old_i, old_w, old_x, old_y, old_z;\n    JT new_u, new_n, new_s, new_i, new_w, new_x, new_y, new_z;\n    JT ticks_past; /* avoid div-by-0 by not calling too often :-( */\n\n    tmp_w = 0.0;\n    new_w = 0;\n    tmp_x = 0.0;\n    new_x = 0;\n    tmp_y = 0.0;\n    new_y = 0;\n    tmp_z = 0.0;\n    new_z = 0;\n\n    FILE_TO_BUF(STAT_FILE,stat_fd);\n    sscanf(buf, \"cpu %llu %llu %llu %llu %llu %llu %llu %llu\", &new_u, &new_n, &new_s, &new_i, &new_w, &new_x, &new_y, &new_z);\n    ticks_past = (new_u+new_n+new_s+new_i+new_w+new_x+new_y+new_z)-(old_u+old_n+old_s+old_i+old_w+old_x+old_y+old_z);\n    if(ticks_past){\n      scale = 100.0 / (double)ticks_past;\n      tmp_u = ( (double)new_u - (double)old_u ) * scale;\n      tmp_n = ( (double)new_n - (double)old_n ) * scale;\n      tmp_s = ( (double)new_s - (double)old_s ) * scale;\n      tmp_i = ( (double)new_i - (double)old_i ) * scale;\n      tmp_w = ( (double)new_w - (double)old_w ) * scale;\n      tmp_x = ( (double)new_x - (double)old_x ) * scale;\n      tmp_y = ( (double)new_y - (double)old_y ) * scale;\n      tmp_z = ( (double)new_z - (double)old_z ) * scale;\n    }else{\n      tmp_u = NAN;\n      tmp_n = NAN;\n      tmp_s = NAN;\n      tmp_i = NAN;\n      tmp_w = NAN;\n      tmp_x = NAN;\n      tmp_y = NAN;\n      tmp_z = NAN;\n    }\n    SET_IF_DESIRED(uret, tmp_u);\n    SET_IF_DESIRED(nret, tmp_n);\n    SET_IF_DESIRED(sret, tmp_s);\n    SET_IF_DESIRED(iret, tmp_i);\n    SET_IF_DESIRED(wret, tmp_w);\n    SET_IF_DESIRED(xret, tmp_x);\n    SET_IF_DESIRED(yret, tmp_y);\n    SET_IF_DESIRED(zret, tmp_z);\n    old_u=new_u;\n    old_n=new_n;\n    old_s=new_s;\n    old_i=new_i;\n    old_w=new_w;\n    old_x=new_x;\n    old_y=new_y;\n    old_z=new_z;\n}\n#undef JT\n#endif\n\n/***********************************************************************/\nvoid loadavg(double *restrict av1, double *restrict av5, double *restrict av15) {\n    double avg_1=0, avg_5=0, avg_15=0;\n    char *savelocale;\n\n    FILE_TO_BUF(LOADAVG_FILE,loadavg_fd);\n    savelocale = strdup(setlocale(LC_NUMERIC, NULL));\n    setlocale(LC_NUMERIC, \"C\");\n    if (sscanf(buf, \"%lf %lf %lf\", &avg_1, &avg_5, &avg_15) < 3) {\n\tfputs(\"bad data in \" LOADAVG_FILE \"\\n\", stderr);\n\tfree(savelocale);\n\texit(1);\n    }\n    setlocale(LC_NUMERIC, savelocale);\n    free(savelocale);\n    SET_IF_DESIRED(av1,  avg_1);\n    SET_IF_DESIRED(av5,  avg_5);\n    SET_IF_DESIRED(av15, avg_15);\n}\n\n  static char buff[BUFFSIZE]; /* used in the procedures */\n/***********************************************************************/\n\nstatic void crash(const char *filename) {\n    perror(filename);\n    exit(EXIT_FAILURE);\n}\n\n/***********************************************************************/\n\nstatic void getrunners(unsigned int *restrict running, unsigned int *restrict blocked) {\n  struct dirent *ent;\n  DIR *proc;\n\n  *running=0;\n  *blocked=0;\n\n  if((proc=opendir(\"/proc\"))==NULL) crash(\"/proc\");\n\n  while(( ent=readdir(proc) )) {\n    char tbuf[32];\n    char *cp;\n    int fd;\n    char c;\n\n    if (!isdigit(ent->d_name[0])) continue;\n    sprintf(tbuf, \"/proc/%s/stat\", ent->d_name);\n\n    fd = open(tbuf, O_RDONLY, 0);\n    if (fd == -1) continue;\n    memset(tbuf, '\\0', sizeof tbuf); // didn't feel like checking read()\n    read(fd, tbuf, sizeof tbuf - 1); // need 32 byte buffer at most\n    close(fd);\n\n    cp = strrchr(tbuf, ')');\n    if(!cp) continue;\n    c = cp[2];\n\n    if (c=='R') {\n      (*running)++;\n      continue;\n    }\n    if (c=='D') {\n      (*blocked)++;\n      continue;\n    }\n  }\n  closedir(proc);\n}\n\n/***********************************************************************/\n\nvoid getstat(jiff *restrict cuse, jiff *restrict cice, jiff *restrict csys, jiff *restrict cide, jiff *restrict ciow, jiff *restrict cxxx, jiff *restrict cyyy, jiff *restrict czzz,\n\t     unsigned long *restrict pin, unsigned long *restrict pout, unsigned long *restrict s_in, unsigned long *restrict sout,\n\t     unsigned *restrict intr, unsigned *restrict ctxt,\n\t     unsigned int *restrict running, unsigned int *restrict blocked,\n\t     unsigned int *restrict btime, unsigned int *restrict processes) {\n  static int fd;\n  unsigned long long llbuf = 0;\n  int need_vmstat_file = 0;\n  int need_proc_scan = 0;\n  const char* b;\n  memset(buff, '\\0', BUFFSIZE);  /* ensure null termination in buffer */\n\n  if(fd){\n    lseek(fd, 0L, SEEK_SET);\n  }else{\n    fd = open(\"/proc/stat\", O_RDONLY, 0);\n    if(fd == -1) crash(\"/proc/stat\");\n  }\n  read(fd,buff,BUFFSIZE-1);\n  *intr = 0;\n  *ciow = 0;  /* not separated out until the 2.5.41 kernel */\n  *cxxx = 0;  /* not separated out until the 2.6.0-test4 kernel */\n  *cyyy = 0;  /* not separated out until the 2.6.0-test4 kernel */\n  *czzz = 0;  /* not separated out until the 2.6.11 kernel */\n\n  b = strstr(buff, \"cpu \");\n  if(b) sscanf(b,  \"cpu  %llu %llu %llu %llu %llu %llu %llu %llu\", cuse, cice, csys, cide, ciow, cxxx, cyyy, czzz);\n\n  b = strstr(buff, \"page \");\n  if(b) sscanf(b,  \"page %lu %lu\", pin, pout);\n  else need_vmstat_file = 1;\n\n  b = strstr(buff, \"swap \");\n  if(b) sscanf(b,  \"swap %lu %lu\", s_in, sout);\n  else need_vmstat_file = 1;\n\n  b = strstr(buff, \"intr \");\n  if(b) sscanf(b,  \"intr %llu\", &llbuf);\n  *intr = llbuf;\n\n  b = strstr(buff, \"ctxt \");\n  if(b) sscanf(b,  \"ctxt %llu\", &llbuf);\n  *ctxt = llbuf;\n\n  b = strstr(buff, \"btime \");\n  if(b) sscanf(b,  \"btime %u\", btime);\n\n  b = strstr(buff, \"processes \");\n  if(b) sscanf(b,  \"processes %u\", processes);\n\n  b = strstr(buff, \"procs_running \");\n  if(b) sscanf(b,  \"procs_running %u\", running);\n  else need_proc_scan = 1;\n\n  b = strstr(buff, \"procs_blocked \");\n  if(b) sscanf(b,  \"procs_blocked %u\", blocked);\n  else need_proc_scan = 1;\n\n  if(need_proc_scan){   /* Linux 2.5.46 (approximately) and below */\n    getrunners(running, blocked);\n  }\n\n  if(*running)\n    (*running)--;   // exclude vmstat itself\n\n  if(need_vmstat_file){  /* Linux 2.5.40-bk4 and above */\n    vminfo();\n    *pin  = vm_pgpgin;\n    *pout = vm_pgpgout;\n    *s_in = vm_pswpin;\n    *sout = vm_pswpout;\n  }\n}\n\n/***********************************************************************/\n/*\n * Copyright 1999 by Albert Cahalan; all rights reserved.\n * This file may be used subject to the terms and conditions of the\n * GNU Library General Public License Version 2, or any later version\n * at your option, as published by the Free Software Foundation.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Library General Public License for more details.\n */\n\ntypedef struct mem_table_struct {\n  const char *name;     /* memory type name */\n  unsigned long *slot; /* slot in return struct */\n} mem_table_struct;\n\nstatic int compare_mem_table_structs(const void *a, const void *b){\n  return strcmp(((const mem_table_struct*)a)->name,((const mem_table_struct*)b)->name);\n}\n\n/* example data, following junk, with comments added:\n *\n * MemTotal:        61768 kB    old\n * MemFree:          1436 kB    old\n * Buffers:          1312 kB    old\n * Cached:          20932 kB    old\n * Active:          12464 kB    new\n * Inact_dirty:      7772 kB    new\n * Inact_clean:      2008 kB    new\n * Inact_target:        0 kB    new\n * Inact_laundry:       0 kB    new, and might be missing too\n * HighTotal:           0 kB\n * HighFree:            0 kB\n * LowTotal:        61768 kB\n * LowFree:          1436 kB\n * SwapTotal:      122580 kB    old\n * SwapFree:        60352 kB    old\n * Inactive:        20420 kB    2.5.41+\n * Dirty:               0 kB    2.5.41+\n * Writeback:           0 kB    2.5.41+\n * Mapped:           9792 kB    2.5.41+\n * Shmem:              28 kB    2.6.32+\n * Slab:             4564 kB    2.5.41+\n * Committed_AS:     8440 kB    2.5.41+\n * PageTables:        304 kB    2.5.41+\n * ReverseMaps:      5738       2.5.41+\n * SwapCached:          0 kB    2.5.??+\n * HugePages_Total:   220       2.5.??+\n * HugePages_Free:    138       2.5.??+\n * Hugepagesize:     4096 kB    2.5.??+\n */\n\n/* Shmem in 2.6.32+ */\nunsigned long kb_main_shared;\n/* old but still kicking -- the important stuff */\nstatic unsigned long kb_page_cache;\nunsigned long kb_main_buffers;\nunsigned long kb_main_free;\nunsigned long kb_main_total;\nunsigned long kb_swap_free;\nunsigned long kb_swap_total;\n/* recently introduced */\nunsigned long kb_high_free;\nunsigned long kb_high_total;\nunsigned long kb_low_free;\nunsigned long kb_low_total;\nunsigned long kb_main_available;\n/* 2.4.xx era */\nunsigned long kb_active;\nunsigned long kb_inact_laundry;\nunsigned long kb_inact_dirty;\nunsigned long kb_inact_clean;\nunsigned long kb_inact_target;\nunsigned long kb_swap_cached;  /* late 2.4 and 2.6+ only */\n/* derived values */\nunsigned long kb_main_cached;\nunsigned long kb_swap_used;\nunsigned long kb_main_used;\n/* 2.5.41+ */\nunsigned long kb_writeback;\nunsigned long kb_slab;\nunsigned long nr_reversemaps;\nunsigned long kb_committed_as;\nunsigned long kb_dirty;\nunsigned long kb_inactive;\nunsigned long kb_mapped;\nunsigned long kb_pagetables;\n// seen on a 2.6.x kernel:\nstatic unsigned long kb_vmalloc_chunk;\nstatic unsigned long kb_vmalloc_total;\nstatic unsigned long kb_vmalloc_used;\n// seen on 2.6.24-rc6-git12\nstatic unsigned long kb_anon_pages;\nstatic unsigned long kb_bounce;\nstatic unsigned long kb_commit_limit;\nstatic unsigned long kb_nfs_unstable;\n// seen on 2.6.18\nstatic unsigned long kb_min_free;\n// 2.6.19+\nstatic unsigned long kb_slab_reclaimable;\nstatic unsigned long kb_slab_unreclaimable;\n// 2.6.27+\nstatic unsigned long kb_active_file;\nstatic unsigned long kb_inactive_file;\n\n\nvoid meminfo(void){\n  char namebuf[32]; /* big enough to hold any row name */\n  int linux_version_code = procps_linux_version();\n  mem_table_struct findme = { namebuf, NULL};\n  mem_table_struct *found;\n  char *head;\n  char *tail;\n  static const mem_table_struct mem_table[] = {\n  {\"Active\",       &kb_active},       // important\n  {\"Active(file)\", &kb_active_file},\n  {\"AnonPages\",    &kb_anon_pages},\n  {\"Bounce\",       &kb_bounce},\n  {\"Buffers\",      &kb_main_buffers}, // important\n  {\"Cached\",       &kb_page_cache},  // important\n  {\"CommitLimit\",  &kb_commit_limit},\n  {\"Committed_AS\", &kb_committed_as},\n  {\"Dirty\",        &kb_dirty},        // kB version of vmstat nr_dirty\n  {\"HighFree\",     &kb_high_free},\n  {\"HighTotal\",    &kb_high_total},\n  {\"Inact_clean\",  &kb_inact_clean},\n  {\"Inact_dirty\",  &kb_inact_dirty},\n  {\"Inact_laundry\",&kb_inact_laundry},\n  {\"Inact_target\", &kb_inact_target},\n  {\"Inactive\",     &kb_inactive},     // important\n  {\"Inactive(file)\",&kb_inactive_file},\n  {\"LowFree\",      &kb_low_free},\n  {\"LowTotal\",     &kb_low_total},\n  {\"Mapped\",       &kb_mapped},       // kB version of vmstat nr_mapped\n  {\"MemAvailable\", &kb_main_available}, // important\n  {\"MemFree\",      &kb_main_free},    // important\n  {\"MemTotal\",     &kb_main_total},   // important\n  {\"NFS_Unstable\", &kb_nfs_unstable},\n  {\"PageTables\",   &kb_pagetables},   // kB version of vmstat nr_page_table_pages\n  {\"ReverseMaps\",  &nr_reversemaps},  // same as vmstat nr_page_table_pages\n  {\"SReclaimable\", &kb_slab_reclaimable}, // \"slab reclaimable\" (dentry and inode structures)\n  {\"SUnreclaim\",   &kb_slab_unreclaimable},\n  {\"Shmem\",        &kb_main_shared},  // kernel 2.6.32 and later\n  {\"Slab\",         &kb_slab},         // kB version of vmstat nr_slab\n  {\"SwapCached\",   &kb_swap_cached},\n  {\"SwapFree\",     &kb_swap_free},    // important\n  {\"SwapTotal\",    &kb_swap_total},   // important\n  {\"VmallocChunk\", &kb_vmalloc_chunk},\n  {\"VmallocTotal\", &kb_vmalloc_total},\n  {\"VmallocUsed\",  &kb_vmalloc_used},\n  {\"Writeback\",    &kb_writeback},    // kB version of vmstat nr_writeback\n  };\n  const int mem_table_count = sizeof(mem_table)/sizeof(mem_table_struct);\n  unsigned long watermark_low;\n  signed long mem_available, mem_used;\n\n  FILE_TO_BUF(MEMINFO_FILE,meminfo_fd);\n\n  kb_inactive = ~0UL;\n  kb_low_total = kb_main_available = 0;\n\n  head = buf;\n  for(;;){\n    tail = strchr(head, ':');\n    if(!tail) break;\n    *tail = '\\0';\n    if(strlen(head) >= sizeof(namebuf)){\n      head = tail+1;\n      goto nextline;\n    }\n    strcpy(namebuf,head);\n    found = bsearch(&findme, mem_table, mem_table_count,\n        sizeof(mem_table_struct), compare_mem_table_structs\n    );\n    head = tail+1;\n    if(!found) goto nextline;\n    *(found->slot) = (unsigned long)strtoull(head,&tail,10);\nnextline:\n    tail = strchr(head, '\\n');\n    if(!tail) break;\n    head = tail+1;\n  }\n  if(!kb_low_total){  /* low==main except with large-memory support */\n    kb_low_total = kb_main_total;\n    kb_low_free  = kb_main_free;\n  }\n  if(kb_inactive==~0UL){\n    kb_inactive = kb_inact_dirty + kb_inact_clean + kb_inact_laundry;\n  }\n  kb_main_cached = kb_page_cache + kb_slab_reclaimable;\n  kb_swap_used = kb_swap_total - kb_swap_free;\n\n  /* if kb_main_available is greater than kb_main_total or our calculation of\n     mem_used overflows, that's symptomatic of running within a lxc container\n     where such values will be dramatically distorted over those of the host. */\n  if (kb_main_available > kb_main_total)\n    kb_main_available = kb_main_free;\n  mem_used = kb_main_total - kb_main_free - kb_main_cached - kb_main_buffers;\n  if (mem_used < 0)\n    mem_used = kb_main_total - kb_main_free;\n  kb_main_used = (unsigned long)mem_used;\n\n  /* zero? might need fallback for 2.6.27 <= kernel <? 3.14 */\n  if (!kb_main_available) {\n#ifdef __linux__\n    if (linux_version_code < LINUX_VERSION(2, 6, 27))\n      kb_main_available = kb_main_free;\n    else {\n      FILE_TO_BUF(VM_MIN_FREE_FILE, vm_min_free_fd);\n      kb_min_free = (unsigned long) strtoull(buf,&tail,10);\n\n      watermark_low = kb_min_free * 5 / 4; /* should be equal to sum of all 'low' fields in /proc/zoneinfo */\n\n      mem_available = (signed long)kb_main_free - watermark_low\n      + kb_inactive_file + kb_active_file - MIN((kb_inactive_file + kb_active_file) / 2, watermark_low)\n      + kb_slab_reclaimable - MIN(kb_slab_reclaimable / 2, watermark_low);\n\n      if (mem_available < 0) mem_available = 0;\n      kb_main_available = (unsigned long)mem_available;\n    }\n#else\n      kb_main_available = kb_main_free;\n#endif /* linux */\n  }\n}\n\n/*****************************************************************/\n\n/* read /proc/vminfo only for 2.5.41 and above */\n\ntypedef struct vm_table_struct {\n  const char *name;     /* VM statistic name */\n  unsigned long *slot;       /* slot in return struct */\n} vm_table_struct;\n\nstatic int compare_vm_table_structs(const void *a, const void *b){\n  return strcmp(((const vm_table_struct*)a)->name,((const vm_table_struct*)b)->name);\n}\n\n// see include/linux/page-flags.h and mm/page_alloc.c\nunsigned long vm_nr_dirty;           // dirty writable pages\nunsigned long vm_nr_writeback;       // pages under writeback\nunsigned long vm_nr_pagecache;       // pages in pagecache -- gone in 2.5.66+ kernels\nunsigned long vm_nr_page_table_pages;// pages used for pagetables\nunsigned long vm_nr_reverse_maps;    // includes PageDirect\nunsigned long vm_nr_mapped;          // mapped into pagetables\nunsigned long vm_nr_slab;            // in slab\nunsigned long vm_nr_slab_reclaimable;  // 2.6.19+ kernels\nunsigned long vm_nr_slab_unreclaimable;// 2.6.19+ kernels\nunsigned long vm_nr_active_file;       // 2.6.27+ kernels\nunsigned long vm_nr_inactive_file;     // 2.6.27+ kernels\nunsigned long vm_nr_free_pages;        // 2.6.21+ kernels\nunsigned long vm_pgpgin;             // kB disk reads  (same as 1st num on /proc/stat page line)\nunsigned long vm_pgpgout;            // kB disk writes (same as 2nd num on /proc/stat page line)\nunsigned long vm_pswpin;             // swap reads     (same as 1st num on /proc/stat swap line)\nunsigned long vm_pswpout;            // swap writes    (same as 2nd num on /proc/stat swap line)\nunsigned long vm_pgalloc;            // page allocations\nunsigned long vm_pgfree;             // page freeings\nunsigned long vm_pgactivate;         // pages moved inactive -> active\nunsigned long vm_pgdeactivate;       // pages moved active -> inactive\nunsigned long vm_pgfault;           // total faults (major+minor)\nunsigned long vm_pgmajfault;       // major faults\nunsigned long vm_pgscan;          // pages scanned by page reclaim\nunsigned long vm_pgrefill;       // inspected by refill_inactive_zone\nunsigned long vm_pgsteal;       // total pages reclaimed\nunsigned long vm_kswapd_steal; // pages reclaimed by kswapd\n// next 3 as defined by the 2.5.52 kernel\nunsigned long vm_pageoutrun;  // times kswapd ran page reclaim\nunsigned long vm_allocstall; // times a page allocator ran direct reclaim\nunsigned long vm_pgrotated; // pages rotated to the tail of the LRU for immediate reclaim\n// seen on a 2.6.8-rc1 kernel, apparently replacing old fields\nstatic unsigned long vm_pgalloc_dma;          //\nstatic unsigned long vm_pgalloc_high;         //\nstatic unsigned long vm_pgalloc_normal;       //\nstatic unsigned long vm_pgrefill_dma;         //\nstatic unsigned long vm_pgrefill_high;        //\nstatic unsigned long vm_pgrefill_normal;      //\nstatic unsigned long vm_pgscan_direct_dma;    //\nstatic unsigned long vm_pgscan_direct_high;   //\nstatic unsigned long vm_pgscan_direct_normal; //\nstatic unsigned long vm_pgscan_kswapd_dma;    //\nstatic unsigned long vm_pgscan_kswapd_high;   //\nstatic unsigned long vm_pgscan_kswapd_normal; //\nstatic unsigned long vm_pgsteal_dma;          //\nstatic unsigned long vm_pgsteal_high;         //\nstatic unsigned long vm_pgsteal_normal;       //\n// seen on a 2.6.8-rc1 kernel\nstatic unsigned long vm_kswapd_inodesteal;    //\nstatic unsigned long vm_nr_unstable;          //\nstatic unsigned long vm_pginodesteal;         //\nstatic unsigned long vm_slabs_scanned;        //\n\nvoid vminfo(void){\n  char namebuf[32]; /* big enough to hold any row name */\n  vm_table_struct findme = { namebuf, NULL};\n  vm_table_struct *found;\n  char *head;\n  char *tail;\n  static const vm_table_struct vm_table[] = {\n  {\"allocstall\",          &vm_allocstall},\n  {\"kswapd_inodesteal\",   &vm_kswapd_inodesteal},\n  {\"kswapd_steal\",        &vm_kswapd_steal},\n  {\"nr_active_file\",      &vm_nr_active_file},     // 2.6.27+ kernels\n  {\"nr_dirty\",            &vm_nr_dirty},           // page version of meminfo Dirty\n  {\"nr_free_pages\",       &vm_nr_free_pages},      // 2.6.21+ kernels\n  {\"nr_inactive_file\",    &vm_nr_inactive_file},   // 2.6.27+ kernels\n  {\"nr_mapped\",           &vm_nr_mapped},          // page version of meminfo Mapped\n  {\"nr_page_table_pages\", &vm_nr_page_table_pages},// same as meminfo PageTables\n  {\"nr_pagecache\",        &vm_nr_pagecache},       // gone in 2.5.66+ kernels\n  {\"nr_reverse_maps\",     &vm_nr_reverse_maps},    // page version of meminfo ReverseMaps GONE\n  {\"nr_slab\",             &vm_nr_slab},            // page version of meminfo Slab (gone in 2.6.19+)\n  {\"nr_slab_reclaimable\", &vm_nr_slab_reclaimable},// 2.6.19+ kernels\n {\"nr_slab_unreclaimable\",&vm_nr_slab_unreclaimable},// 2.6.19+ kernels\n  {\"nr_unstable\",         &vm_nr_unstable},\n  {\"nr_writeback\",        &vm_nr_writeback},       // page version of meminfo Writeback\n  {\"pageoutrun\",          &vm_pageoutrun},\n  {\"pgactivate\",          &vm_pgactivate},\n  {\"pgalloc\",             &vm_pgalloc},  // GONE (now separate dma,high,normal)\n  {\"pgalloc_dma\",         &vm_pgalloc_dma},\n  {\"pgalloc_high\",        &vm_pgalloc_high},\n  {\"pgalloc_normal\",      &vm_pgalloc_normal},\n  {\"pgdeactivate\",        &vm_pgdeactivate},\n  {\"pgfault\",             &vm_pgfault},\n  {\"pgfree\",              &vm_pgfree},\n  {\"pginodesteal\",        &vm_pginodesteal},\n  {\"pgmajfault\",          &vm_pgmajfault},\n  {\"pgpgin\",              &vm_pgpgin},     // important\n  {\"pgpgout\",             &vm_pgpgout},     // important\n  {\"pgrefill\",            &vm_pgrefill},  // GONE (now separate dma,high,normal)\n  {\"pgrefill_dma\",        &vm_pgrefill_dma},\n  {\"pgrefill_high\",       &vm_pgrefill_high},\n  {\"pgrefill_normal\",     &vm_pgrefill_normal},\n  {\"pgrotated\",           &vm_pgrotated},\n  {\"pgscan\",              &vm_pgscan},  // GONE (now separate direct,kswapd and dma,high,normal)\n  {\"pgscan_direct_dma\",   &vm_pgscan_direct_dma},\n  {\"pgscan_direct_high\",  &vm_pgscan_direct_high},\n  {\"pgscan_direct_normal\",&vm_pgscan_direct_normal},\n  {\"pgscan_kswapd_dma\",   &vm_pgscan_kswapd_dma},\n  {\"pgscan_kswapd_high\",  &vm_pgscan_kswapd_high},\n  {\"pgscan_kswapd_normal\",&vm_pgscan_kswapd_normal},\n  {\"pgsteal\",             &vm_pgsteal},  // GONE (now separate dma,high,normal)\n  {\"pgsteal_dma\",         &vm_pgsteal_dma},\n  {\"pgsteal_high\",        &vm_pgsteal_high},\n  {\"pgsteal_normal\",      &vm_pgsteal_normal},\n  {\"pswpin\",              &vm_pswpin},     // important\n  {\"pswpout\",             &vm_pswpout},     // important\n  {\"slabs_scanned\",       &vm_slabs_scanned},\n  };\n  const int vm_table_count = sizeof(vm_table)/sizeof(vm_table_struct);\n\n#if __SIZEOF_LONG__ == 4\n  unsigned long long slotll;\n#endif\n\n  vm_pgalloc = 0;\n  vm_pgrefill = 0;\n  vm_pgscan = 0;\n  vm_pgsteal = 0;\n\n  FILE_TO_BUF(VMINFO_FILE,vminfo_fd);\n\n  head = buf;\n  for(;;){\n    tail = strchr(head, ' ');\n    if(!tail) break;\n    *tail = '\\0';\n    if(strlen(head) >= sizeof(namebuf)){\n      head = tail+1;\n      goto nextline;\n    }\n    strcpy(namebuf,head);\n    found = bsearch(&findme, vm_table, vm_table_count,\n        sizeof(vm_table_struct), compare_vm_table_structs\n    );\n    head = tail+1;\n    if(!found) goto nextline;\n#if __SIZEOF_LONG__ == 4\n    // A 32 bit kernel would have already truncated the value, a 64 bit kernel\n    // doesn't need to.  Truncate here to let 32 bit programs to continue to get\n    // truncated values.  It's that or change the API for a larger data type.\n    slotll = strtoull(head,&tail,10);\n    *(found->slot) = (unsigned long)slotll;\n#else\n    *(found->slot) = strtoul(head,&tail,10);\n#endif\nnextline:\n\n//if(found) fprintf(stderr,\"%s=%d\\n\",found->name,*(found->slot));\n//else      fprintf(stderr,\"%s not found\\n\",findme.name);\n\n    tail = strchr(head, '\\n');\n    if(!tail) break;\n    head = tail+1;\n  }\n  if(!vm_pgalloc)\n    vm_pgalloc  = vm_pgalloc_dma + vm_pgalloc_high + vm_pgalloc_normal;\n  if(!vm_pgrefill)\n    vm_pgrefill = vm_pgrefill_dma + vm_pgrefill_high + vm_pgrefill_normal;\n  if(!vm_pgscan)\n    vm_pgscan   = vm_pgscan_direct_dma + vm_pgscan_direct_high + vm_pgscan_direct_normal\n                + vm_pgscan_kswapd_dma + vm_pgscan_kswapd_high + vm_pgscan_kswapd_normal;\n  if(!vm_pgsteal)\n    vm_pgsteal  = vm_pgsteal_dma + vm_pgsteal_high + vm_pgsteal_normal;\n}\n\n///////////////////////////////////////////////////////////////////////\n// based on Fabian Frederick's /proc/diskstats parser\n\n\nunsigned int getpartitions_num(struct disk_stat *disks, int ndisks){\n  int i=0;\n  int partitions=0;\n\n  for (i=0;i<ndisks;i++){\n\tpartitions+=disks[i].partitions;\n  }\n  return partitions;\n\n}\n\n/////////////////////////////////////////////////////////////////////////////\nstatic int is_disk(char *dev)\n{\n  char syspath[64];\n  char *slash;\n\n  while ((slash = strchr(dev, '/')))\n    *slash = '!';\n  snprintf(syspath, sizeof(syspath), \"/sys/block/%s\", dev);\n  return !(access(syspath, F_OK));\n}\n\n/////////////////////////////////////////////////////////////////////////////\n\nunsigned int getdiskstat(struct disk_stat **disks, struct partition_stat **partitions){\n  FILE* fd;\n  int cDisk = 0;\n  int cPartition = 0;\n  int fields;\n  unsigned dummy;\n  char devname[35];\n\n  *disks = NULL;\n  *partitions = NULL;\n  buff[BUFFSIZE-1] = 0;\n  fd = fopen(\"/proc/diskstats\", \"rb\");\n  if(!fd) crash(\"/proc/diskstats\");\n\n  for (;;) {\n    if (!fgets(buff,BUFFSIZE-1,fd)){\n      fclose(fd);\n      break;\n    }\n    fields = sscanf(buff, \" %*d %*d %34s %*u %*u %*u %*u %*u %*u %*u %*u %*u %*u %u\", devname, &dummy);\n    if (fields == 2 && is_disk(devname)){\n      if (cDisk < 0 || (size_t)cDisk >= INT_MAX / sizeof(struct disk_stat)) {\n        errno = EFBIG;\n        crash(\"/proc/diskstats\");\n      }\n      (*disks) = xrealloc(*disks, (cDisk+1)*sizeof(struct disk_stat));\n      sscanf(buff,  \"   %*d    %*d %31s %u %u %llu %u %u %u %llu %u %u %u %u\",\n        //&disk_major,\n        //&disk_minor,\n        (*disks)[cDisk].disk_name,\n        &(*disks)[cDisk].reads,\n        &(*disks)[cDisk].merged_reads,\n        &(*disks)[cDisk].reads_sectors,\n        &(*disks)[cDisk].milli_reading,\n        &(*disks)[cDisk].writes,\n        &(*disks)[cDisk].merged_writes,\n        &(*disks)[cDisk].written_sectors,\n        &(*disks)[cDisk].milli_writing,\n        &(*disks)[cDisk].inprogress_IO,\n        &(*disks)[cDisk].milli_spent_IO,\n        &(*disks)[cDisk].weighted_milli_spent_IO\n      );\n        (*disks)[cDisk].partitions=0;\n      cDisk++;\n    }else{\n      if (cPartition < 0 || (size_t)cPartition >= INT_MAX / sizeof(struct partition_stat)) {\n        errno = EFBIG;\n        crash(\"/proc/diskstats\");\n      }\n      (*partitions) = xrealloc(*partitions, (cPartition+1)*sizeof(struct partition_stat));\n      fflush(stdout);\n      sscanf(buff,  (fields == 2)\n          ? \"   %*d    %*d %34s %u %*u %llu %*u %u %*u %llu %*u %*u %*u %*u\"\n          : \"   %*d    %*d %34s %u %llu %u %llu\",\n        //&part_major,\n        //&part_minor,\n        (*partitions)[cPartition].partition_name,\n        &(*partitions)[cPartition].reads,\n        &(*partitions)[cPartition].reads_sectors,\n        &(*partitions)[cPartition].writes,\n        &(*partitions)[cPartition].requested_writes\n      );\n\n      if (cDisk > 0) {\n        (*partitions)[cPartition++].parent_disk = cDisk-1;\n        (*disks)[cDisk-1].partitions++;\n      }\n    }\n  }\n\n  return cDisk;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// based on Fabian Frederick's /proc/slabinfo parser\n\nunsigned int getslabinfo (struct slab_cache **slab){\n  FILE* fd;\n  int cSlab = 0;\n  buff[BUFFSIZE-1] = 0;\n  *slab = NULL;\n  fd = fopen(\"/proc/slabinfo\", \"rb\");\n  if(!fd) crash(\"/proc/slabinfo\");\n  while (fgets(buff,BUFFSIZE-1,fd)){\n    if(!memcmp(\"slabinfo - version:\",buff,19)) continue; // skip header\n    if(*buff == '#')                           continue; // skip comments\n    if(cSlab < 0 || (size_t)cSlab >= INT_MAX / sizeof(struct slab_cache)){\n      errno = EFBIG;\n      crash(\"/proc/slabinfo\");\n    }\n    (*slab) = xrealloc(*slab, (cSlab+1)*sizeof(struct slab_cache));\n    sscanf(buff,  \"%47s %u %u %u %u\",  // allow 47; max seen is 24\n      (*slab)[cSlab].name,\n      &(*slab)[cSlab].active_objs,\n      &(*slab)[cSlab].num_objs,\n      &(*slab)[cSlab].objsize,\n      &(*slab)[cSlab].objperslab\n    ) ;\n    cSlab++;\n  }\n  fclose(fd);\n  return cSlab;\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nunsigned get_pid_digits(void){\n  char pidbuf[24];\n  char *endp;\n  long rc;\n  int fd;\n  static unsigned ret;\n\n  if(ret) goto out;\n  ret = 5;\n  fd = open(\"/proc/sys/kernel/pid_max\", O_RDONLY);\n  if(fd==-1) goto out;\n  rc = read(fd, pidbuf, sizeof pidbuf - 1);\n  close(fd);\n  if(rc<3) goto out;\n  pidbuf[rc] = '\\0';\n  rc = strtol(pidbuf,&endp,10);\n  if(rc<42) goto out;\n  if(*endp && *endp!='\\n') goto out;\n  rc--;  // the pid_max value is really the max PID plus 1\n  ret = 0;\n  while(rc){\n    rc /= 10;\n    ret++;\n  }\nout:\n  return ret;\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nvoid cpuinfo (void) {\n  // ought to count CPUs in /proc/stat instead of relying\n  // on glibc, which foolishly tries to parse /proc/cpuinfo\n  // note: that may have been the case but now /proc/stat\n  //       is the default source.  parsing of /proc/cpuinfo\n  //       only occurs if the open on /proc/stat fails\n  //\n  // SourceForge has an old Alpha running Linux 2.2.20 that\n  // appears to have a non-SMP kernel on a 2-way SMP box.\n  // _SC_NPROCESSORS_CONF returns 2, resulting in HZ=512\n  // _SC_NPROCESSORS_ONLN returns 1, which should work OK\n\n  smp_num_cpus = sysconf(_SC_NPROCESSORS_ONLN);\n  if (smp_num_cpus<1)        /* SPARC glibc is buggy */\n    smp_num_cpus=1;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/top/top.c": "/* top.c - Source file:         show Linux processes */\n/*\n * Copyright (c) 2002-2019, by: James C. Warner\n *\n * This file may be used subject to the terms and conditions of the\n * GNU Library General Public License Version 2, or any later version\n * at your option, as published by the Free Software Foundation.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Library General Public License for more details.\n */\n/* For contributions to this program, the author wishes to thank:\n *    Craig Small, <csmall@small.dropbear.id.au>\n *    Albert D. Cahalan, <albert@users.sf.net>\n *    Sami Kerola, <kerolasa@iki.fi>\n */\n\n#include <ctype.h>\n#include <curses.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <float.h>\n#include <limits.h>\n#include <pwd.h>\n#include <signal.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <term.h>            // foul sob, defines all sorts of stuff...\n#undef    raw\n#undef    tab\n#undef    TTY\n#include <termios.h>\n#include <time.h>\n#include <unistd.h>\n#include <wchar.h>\n\n#include <sys/ioctl.h>\n#include <sys/resource.h>\n#include <sys/select.h>      // also available via <sys/types.h>\n#include <sys/stat.h>\n#include <sys/time.h>\n#include <sys/types.h>       // also available via <stdlib.h>\n\n#include \"../include/fileutils.h\"\n#include \"../include/nls.h\"\n\n#include \"../proc/alloc.h\"\n#include \"../proc/devname.h\"\n#include \"../proc/numa.h\"\n#include \"../proc/procps.h\"\n#include \"../proc/readproc.h\"\n#include \"../proc/sig.h\"\n#include \"../proc/sysinfo.h\"\n#include \"../proc/version.h\"\n#include \"../proc/wchan.h\"\n#include \"../proc/whattime.h\"\n\n#include \"top.h\"\n#include \"top_nls.h\"\n\n\n/*######  Miscellaneous global stuff  ####################################*/\n\n        /* The original and new terminal definitions\n           (only set when not in 'Batch' mode) */\nstatic struct termios Tty_original,    // our inherited terminal definition\n#ifdef TERMIOS_ONLY\n                      Tty_tweaked,     // for interactive 'line' input\n#endif\n                      Tty_raw;         // for unsolicited input\nstatic int Ttychanged = 0;\n\n        /* Last established cursor state/shape */\nstatic const char *Cursor_state = \"\";\n\n        /* Program name used in error messages and local 'rc' file name */\nstatic char *Myname;\n\n        /* Our constant sigset, so we need initialize it but once */\nstatic sigset_t Sigwinch_set;\n\n        /* The 'local' config file support */\nstatic char  Rc_name [OURPATHSZ];\nstatic RCF_t Rc = DEF_RCFILE;\nstatic int   Rc_questions;\n\n        /* The run-time acquired page stuff */\nstatic unsigned Pg2K_shft = 0;\n\n        /* SMP, Irix/Solaris mode, Linux 2.5.xx support */\nstatic CPU_t      *Cpu_tics;\nstatic int         Cpu_faux_tot;\nstatic float       Cpu_pmax;\nstatic const char *Cpu_States_fmts;\n\n        /* Specific process id monitoring support */\nstatic pid_t Monpids [MONPIDMAX+1] = { 0 };\nstatic int   Monpidsidx = 0;\n\n        /* Current screen dimensions.\n           note: the number of processes displayed is tracked on a per window\n                 basis (see the WIN_t).  Max_lines is the total number of\n                 screen rows after deducting summary information overhead. */\n        /* Current terminal screen size. */\nstatic int Screen_cols, Screen_rows, Max_lines;\n\n        /* This is really the number of lines needed to display the summary\n           information (0 - nn), but is used as the relative row where we\n           stick the cursor between frames. */\nstatic int Msg_row;\n\n        /* Global/Non-windows mode stuff that is NOT persistent */\nstatic int Batch = 0,           // batch mode, collect no input, dumb output\n           Loops = -1,          // number of iterations, -1 loops forever\n           Secure_mode = 0,     // set if some functionality restricted\n           Thread_mode = 0,     // set w/ 'H' - show threads via readeither()\n           Width_mode = 0;      // set w/ 'w' - potential output override\n\n        /* Unchangeable cap's stuff built just once (if at all) and\n           thus NOT saved in a WIN_t's RCW_t.  To accommodate 'Batch'\n           mode, they begin life as empty strings so the overlying\n           logic need not change ! */\nstatic char  Cap_clr_eol    [CAPBUFSIZ] = \"\",    // global and/or static vars\n             Cap_nl_clreos  [CAPBUFSIZ] = \"\",    // are initialized to zeros!\n             Cap_clr_scr    [CAPBUFSIZ] = \"\",    // the assignments used here\n             Cap_curs_norm  [CAPBUFSIZ] = \"\",    // cost nothing but DO serve\n             Cap_curs_huge  [CAPBUFSIZ] = \"\",    // to remind people of those\n             Cap_curs_hide  [CAPBUFSIZ] = \"\",    // batch requirements!\n             Cap_clr_eos    [CAPBUFSIZ] = \"\",\n             Cap_home       [CAPBUFSIZ] = \"\",\n             Cap_norm       [CAPBUFSIZ] = \"\",\n             Cap_reverse    [CAPBUFSIZ] = \"\",\n             Caps_off       [CAPBUFSIZ] = \"\",\n             Caps_endline   [CAPBUFSIZ] = \"\";\n#ifndef RMAN_IGNORED\nstatic char  Cap_rmam       [CAPBUFSIZ] = \"\",\n             Cap_smam       [CAPBUFSIZ] = \"\";\n        /* set to 1 if writing to the last column would be troublesome\n           (we don't distinguish the lowermost row from the other rows) */\nstatic int   Cap_avoid_eol = 0;\n#endif\nstatic int   Cap_can_goto = 0;\n\n        /* Some optimization stuff, to reduce output demands...\n           The Pseudo_ guys are managed by adj_geometry and frame_make.  They\n           are exploited in a macro and represent 90% of our optimization.\n           The Stdout_buf is transparent to our code and regardless of whose\n           buffer is used, stdout is flushed at frame end or if interactive. */\nstatic char  *Pseudo_screen;\nstatic int    Pseudo_row = PROC_XTRA;\nstatic size_t Pseudo_size;\n#ifndef OFF_STDIOLBF\n        // less than stdout's normal buffer but with luck mostly '\\n' anyway\nstatic char  Stdout_buf[2048];\n#endif\n\n        /* Our four WIN_t's, and which of those is considered the 'current'\n           window (ie. which window is associated with any summ info displayed\n           and to which window commands are directed) */\nstatic WIN_t  Winstk [GROUPSMAX];\nstatic WIN_t *Curwin;\n\n        /* Frame oriented stuff that can't remain local to any 1 function\n           and/or that would be too cumbersome managed as parms,\n           and/or that are simply more efficiently handled as globals\n           [ 'Frames_...' (plural) stuff persists beyond 1 frame ]\n           [ or are used in response to async signals received ! ] */\nstatic volatile int Frames_signal;     // time to rebuild all column headers\nstatic          int Frames_libflags;   // PROC_FILLxxx flags\nstatic int          Frame_maxtask;     // last known number of active tasks\n                                       // ie. current 'size' of proc table\nstatic float        Frame_etscale;     // so we can '*' vs. '/' WHEN 'pcpu'\nstatic unsigned     Frame_running,     // state categories for this frame\n                    Frame_sleepin,\n                    Frame_stopped,\n                    Frame_zombied;\nstatic int          Frame_srtflg,      // the subject window's sort direction\n                    Frame_ctimes,      // the subject window's ctimes flag\n                    Frame_cmdlin;      // the subject window's cmdlin flag\n\n        /* Support for 'history' processing so we can calculate %cpu */\nstatic int    HHist_siz;               // max number of HST_t structs\nstatic HST_t *PHist_sav,               // alternating 'old/new' HST_t anchors\n             *PHist_new;\n#ifndef OFF_HST_HASH\n#define       HHASH_SIZ  1024\nstatic int    HHash_one [HHASH_SIZ],   // actual hash tables ( hereafter known\n              HHash_two [HHASH_SIZ],   // as PHash_sav/PHash_new )\n              HHash_nul [HHASH_SIZ];   // 'empty' hash table image\nstatic int   *PHash_sav = HHash_one,   // alternating 'old/new' hash tables\n             *PHash_new = HHash_two;\n#endif\n\n        /* Support for automatically sized fixed-width column expansions.\n         * (hopefully, the macros help clarify/document our new 'feature') */\nstatic int Autox_array [EU_MAXPFLGS],\n           Autox_found;\n#define AUTOX_NO      EU_MAXPFLGS\n#define AUTOX_COL(f)  if (EU_MAXPFLGS > f && f >= 0) Autox_array[f] = Autox_found = 1\n#define AUTOX_MODE   (0 > Rc.fixed_widest)\n\n        /* Support for scale_mem and scale_num (to avoid duplication. */\n#ifdef CASEUP_SUFIX                                                // nls_maybe\n   static char Scaled_sfxtab[] =  { 'K', 'M', 'G', 'T', 'P', 'E', 0 };\n#else                                                              // nls_maybe\n   static char Scaled_sfxtab[] =  { 'k', 'm', 'g', 't', 'p', 'e', 0 };\n#endif\n\n        /* Support for NUMA Node display and node expansion/targeting */\n#ifndef OFF_STDERROR\nstatic int Stderr_save = -1;\n#endif\nstatic int Numa_node_tot;\nstatic int Numa_node_sel = -1;\n\n        /* Support for Graphing of the View_STATES ('t') and View_MEMORY ('m')\n           commands -- which are now both 4-way toggles */\n#define GRAPH_prefix  25     // beginning text + opening '['\n#define GRAPH_actual  100    // the actual bars or blocks\n#define GRAPH_suffix  2      // ending ']' + trailing space\nstatic float Graph_adj;      // bars/blocks scaling factor\nstatic int   Graph_len;      // scaled length (<= GRAPH_actual)\nstatic const char Graph_blks[] = \"                                                                                                    \";\nstatic const char Graph_bars[] = \"||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\";\n\n        /* Support for 'Other Filters' in the configuration file */\nstatic const char Osel_delim_1_txt[] = \"begin: saved other filter data -------------------\\n\";\nstatic const char Osel_delim_2_txt[] = \"end  : saved other filter data -------------------\\n\";\nstatic const char Osel_window_fmts[] = \"window #%d, osel_tot=%d\\n\";\n#define OSEL_FILTER   \"filter=\"\nstatic const char Osel_filterO_fmt[] = \"\\ttype=%d,\\t\" OSEL_FILTER \"%s\\n\";\nstatic const char Osel_filterI_fmt[] = \"\\ttype=%d,\\t\" OSEL_FILTER \"%*s\\n\";\n\f\n/*######  Sort callbacks  ################################################*/\n\n        /*\n         * These happen to be coded in the enum identifier alphabetic order,\n         * not the order of the enum 'pflgs' value.  Also note that a callback\n         * routine may serve more than one column.\n         */\n\nSCB_STRS(CGN, cgname)\nSCB_STRS(CGR, cgroup[0])\nSCB_STRV(CMD, Frame_cmdlin, cmdline, cmd)\nSCB_NUM1(COD, trs)\nSCB_NUMx(CPN, processor)\nSCB_NUM1(CPU, pcpu)\nSCB_NUM1(DAT, drs)\nSCB_NUM1(DRT, dt)\nSCB_STRS(ENV, environ[0])\nSCB_NUM1(FL1, maj_flt)\nSCB_NUM1(FL2, min_flt)\nSCB_NUM1(FLG, flags)\nSCB_NUM1(FV1, maj_delta)\nSCB_NUM1(FV2, min_delta)\nSCB_NUMx(GID, egid)\nSCB_STRS(GRP, egroup)\nSCB_STRS(LXC, lxcname)\nSCB_NUMx(NCE, nice)\nstatic int SCB_NAME(NMA) (const proc_t **P, const proc_t **Q) {\n   /* this is a terrible cost to pay for sorting on numa nodes, but it's\n      necessary if we're to avoid ABI breakage via changes to the proc_t */\n   int p = numa_node_of_cpu((*P)->processor);\n   int q = numa_node_of_cpu((*Q)->processor);\n   return Frame_srtflg * ( q - p );\n}\nSCB_NUM1(NS1, ns[IPCNS])\nSCB_NUM1(NS2, ns[MNTNS])\nSCB_NUM1(NS3, ns[NETNS])\nSCB_NUM1(NS4, ns[PIDNS])\nSCB_NUM1(NS5, ns[USERNS])\nSCB_NUM1(NS6, ns[UTSNS])\nSCB_NUM1(OOA, oom_adj)\nSCB_NUM1(OOM, oom_score)\nSCB_NUMx(PGD, pgrp)\nSCB_NUMx(PID, tid)\nSCB_NUMx(PPD, ppid)\nSCB_NUMx(PRI, priority)\nSCB_NUM1(RES, resident)                // also serves MEM !\nSCB_NUM1(RZA, vm_rss_anon)\nSCB_NUM1(RZF, vm_rss_file)\nSCB_NUM1(RZL, vm_lock)\nSCB_NUM1(RZS, vm_rss_shared)\nSCB_STRX(SGD, supgid)\nSCB_STRS(SGN, supgrp)\nSCB_NUM1(SHR, share)\nSCB_NUM1(SID, session)\nSCB_NUMx(STA, state)\nSCB_NUM1(SWP, vm_swap)\nSCB_NUMx(TGD, tgid)\nSCB_NUMx(THD, nlwp)\n                                       // also serves TM2 !\nstatic int SCB_NAME(TME) (const proc_t **P, const proc_t **Q) {\n   if (Frame_ctimes) {\n      if (((*P)->cutime + (*P)->cstime + (*P)->utime + (*P)->stime)\n        < ((*Q)->cutime + (*Q)->cstime + (*Q)->utime + (*Q)->stime))\n           return SORT_lt;\n      if (((*P)->cutime + (*P)->cstime + (*P)->utime + (*P)->stime)\n        > ((*Q)->cutime + (*Q)->cstime + (*Q)->utime + (*Q)->stime))\n           return SORT_gt;\n   } else {\n      if (((*P)->utime + (*P)->stime) < ((*Q)->utime + (*Q)->stime))\n         return SORT_lt;\n      if (((*P)->utime + (*P)->stime) > ((*Q)->utime + (*Q)->stime))\n         return SORT_gt;\n   }\n   return SORT_eq;\n}\nSCB_NUM1(TPG, tpgid)\nSCB_NUMx(TTY, tty)\nSCB_NUMx(UED, euid)\nSCB_STRS(UEN, euser)\nSCB_NUMx(URD, ruid)\nSCB_STRS(URN, ruser)\nSCB_NUMx(USD, suid)\nSCB_NUM2(USE, vm_rss, vm_swap)\nSCB_STRS(USN, suser)\nSCB_NUM1(VRT, size)\nSCB_NUM1(WCH, wchan)\n\n#ifdef OFF_HST_HASH\n        /* special sort for procs_hlp() ! ------------------------ */\nstatic int sort_HST_t (const HST_t *P, const HST_t *Q) {\n   return P->pid - Q->pid;\n}\n#endif\n\f\n/*######  Tiny useful routine(s)  ########################################*/\n\n        /*\n         * This routine simply formats whatever the caller wants and\n         * returns a pointer to the resulting 'const char' string... */\nstatic const char *fmtmk (const char *fmts, ...) __attribute__((format(printf,1,2)));\nstatic const char *fmtmk (const char *fmts, ...) {\n   static char buf[BIGBUFSIZ];          // with help stuff, our buffer\n   va_list va;                          // requirements now exceed 1k\n\n   va_start(va, fmts);\n   vsnprintf(buf, sizeof(buf), fmts, va);\n   va_end(va);\n   return (const char *)buf;\n} // end: fmtmk\n\n\n        /*\n         * This guy is just our way of avoiding the overhead of the standard\n         * strcat function (should the caller choose to participate) */\nstatic inline char *scat (char *dst, const char *src) {\n   while (*dst) dst++;\n   while ((*(dst++) = *(src++)));\n   return --dst;\n} // end: scat\n\n\n        /*\n         * This guy just facilitates Batch and protects against dumb ttys\n         * -- we'd 'inline' him but he's only called twice per frame,\n         * yet used in many other locations. */\nstatic const char *tg2 (int x, int y) {\n   // it's entirely possible we're trying for an invalid row...\n   return Cap_can_goto ? tgoto(cursor_address, x, y) : \"\";\n} // end: tg2\n\f\n/*######  Exit/Interrput routines  #######################################*/\n\n        /*\n         * Reset the tty, if necessary */\nstatic void at_eoj (void) {\n   if (Ttychanged) {\n      tcsetattr(STDIN_FILENO, TCSAFLUSH, &Tty_original);\n      if (keypad_local) putp(keypad_local);\n      putp(tg2(0, Screen_rows));\n      putp(\"\\n\");\n#ifdef OFF_SCROLLBK\n      if (exit_ca_mode) {\n         // this next will also replace top's most recent screen with the\n         // original display contents that were visible at our invocation\n         putp(exit_ca_mode);\n      }\n#endif\n      putp(Cap_curs_norm);\n      putp(Cap_clr_eol);\n#ifndef RMAN_IGNORED\n      putp(Cap_smam);\n#endif\n   }\n   fflush(stdout);\n#ifndef OFF_STDERROR\n   /* we gotta reverse the stderr redirect which was employed during start up\n      and needed because the two libnuma 'weak' functions were useless to us! */\n   if (-1 < Stderr_save) {\n      dup2(Stderr_save, fileno(stderr));\n      close(Stderr_save);\n      Stderr_save = -1;      // we'll be ending soon anyway but what the heck\n   }\n#endif\n} // end: at_eoj\n\n\n        /*\n         * The real program end */\nstatic void bye_bye (const char *str) NORETURN;\nstatic void bye_bye (const char *str) {\n   sigset_t ss;\n\n// POSIX.1-2004 async-signal-safe: sigfillset, sigprocmask\n   sigfillset(&ss);\n   sigprocmask(SIG_BLOCK, &ss, NULL);\n   at_eoj();                 // restore tty in preparation for exit\n#ifdef ATEOJ_RPTSTD\n{  proc_t *p;\n   if (!str && !Frames_signal && Ttychanged) { fprintf(stderr,\n      \"\\n%s's Summary report:\"\n      \"\\n\\tProgram\"\n      \"\\n\\t   %s\"\n      \"\\n\\t   Hertz = %u (%u bytes, %u-bit time)\"\n      \"\\n\\t   page_bytes = %d, Cpu_faux_tot = %d, smp_num_cpus = %d\"\n      \"\\n\\t   sizeof(CPU_t) = %u, sizeof(HST_t) = %u (%d HST_t's/Page), HHist_siz = %u\"\n      \"\\n\\t   sizeof(proc_t) = %u, sizeof(proc_t.cmd) = %u, sizeof(proc_t *) = %u\"\n      \"\\n\\t   Frames_libflags = %08lX\"\n      \"\\n\\t   SCREENMAX = %u, ROWMINSIZ = %u, ROWMAXSIZ = %u\"\n      \"\\n\\t   PACKAGE = '%s', LOCALEDIR = '%s'\"\n      \"\\n\\tTerminal: %s\"\n      \"\\n\\t   device = %s, ncurses = v%s\"\n      \"\\n\\t   max_colors = %d, max_pairs = %d\"\n      \"\\n\\t   Cap_can_goto = %s\"\n      \"\\n\\t   Screen_cols = %d, Screen_rows = %d\"\n      \"\\n\\t   Max_lines = %d, most recent Pseudo_size = %u\"\n#ifndef OFF_STDIOLBF\n      \"\\n\\t   Stdout_buf = %u, BUFSIZ = %u\"\n#endif\n      \"\\n\\tWindows and Curwin->\"\n      \"\\n\\t   sizeof(WIN_t) = %u, GROUPSMAX = %d\"\n      \"\\n\\t   winname = %s, grpname = %s\"\n#ifdef CASEUP_HEXES\n      \"\\n\\t   winflags = %08X, maxpflgs = %d\"\n#else\n      \"\\n\\t   winflags = %08x, maxpflgs = %d\"\n#endif\n      \"\\n\\t   sortindx = %d, fieldscur = %s\"\n      \"\\n\\t   maxtasks = %d, varcolsz = %d, winlines = %d\"\n      \"\\n\\t   strlen(columnhdr) = %d\"\n      \"\\n\"\n      , __func__\n      , PACKAGE_STRING\n      , (unsigned)Hertz, (unsigned)sizeof(Hertz), (unsigned)sizeof(Hertz) * 8\n      , (int)page_bytes, Cpu_faux_tot, (int)smp_num_cpus, (unsigned)sizeof(CPU_t)\n      , (unsigned)sizeof(HST_t), ((int)page_bytes / (int)sizeof(HST_t)), HHist_siz\n      , (unsigned)sizeof(proc_t), (unsigned)sizeof(p->cmd), (unsigned)sizeof(proc_t *)\n      , (long)Frames_libflags\n      , (unsigned)SCREENMAX, (unsigned)ROWMINSIZ, (unsigned)ROWMAXSIZ\n      , PACKAGE, LOCALEDIR\n#ifdef PRETENDNOCAP\n      , \"dumb\"\n#else\n      , termname()\n#endif\n      , ttyname(STDOUT_FILENO), NCURSES_VERSION\n      , max_colors, max_pairs\n      , Cap_can_goto ? \"yes\" : \"No!\"\n      , Screen_cols, Screen_rows\n      , Max_lines, (unsigned)Pseudo_size\n#ifndef OFF_STDIOLBF\n      , (unsigned)sizeof(Stdout_buf), (unsigned)BUFSIZ\n#endif\n      , (unsigned)sizeof(WIN_t), GROUPSMAX\n      , Curwin->rc.winname, Curwin->grpname\n      , Curwin->rc.winflags, Curwin->maxpflgs\n      , Curwin->rc.sortindx, Curwin->rc.fieldscur\n      , Curwin->rc.maxtasks, Curwin->varcolsz, Curwin->winlines\n      , (int)strlen(Curwin->columnhdr)\n      );\n   }\n}\n#endif // end: ATEOJ_RPTSTD\n\n#ifndef OFF_HST_HASH\n#ifdef ATEOJ_RPTHSH\n   if (!str && !Frames_signal && Ttychanged) {\n      int i, j, pop, total_occupied, maxdepth, maxdepth_sav, numdepth\n         , cross_foot, sz = HHASH_SIZ * (unsigned)sizeof(int);\n      int depths[HHASH_SIZ];\n\n      for (i = 0, total_occupied = 0, maxdepth = 0; i < HHASH_SIZ; i++) {\n         int V = PHash_new[i];\n         j = 0;\n         if (-1 < V) {\n            ++total_occupied;\n            while (-1 < V) {\n               V = PHist_new[V].lnk;\n               if (-1 < V) j++;\n            }\n         }\n         depths[i] = j;\n         if (maxdepth < j) maxdepth = j;\n      }\n      maxdepth_sav = maxdepth;\n\n      fprintf(stderr,\n         \"\\n%s's Supplementary HASH report:\"\n         \"\\n\\tTwo Tables providing for %d entries each + 1 extra for 'empty' image\"\n         \"\\n\\t%dk (%d bytes) per table, %d total bytes (including 'empty' image)\"\n         \"\\n\\tResults from latest hash (PHash_new + PHist_new)...\"\n         \"\\n\"\n         \"\\n\\tTotal hashed = %d\"\n         \"\\n\\tLevel-0 hash entries = %d (%d%% occupied)\"\n         \"\\n\\tMax Depth = %d\"\n         \"\\n\\n\"\n         , __func__\n         , HHASH_SIZ, sz / 1024, sz, sz * 3\n         , Frame_maxtask\n         , total_occupied, (total_occupied * 100) / HHASH_SIZ\n         , maxdepth + 1);\n\n      if (total_occupied) {\n         for (pop = total_occupied, cross_foot = 0; maxdepth; maxdepth--) {\n            for (i = 0, numdepth = 0; i < HHASH_SIZ; i++)\n               if (depths[i] == maxdepth) ++numdepth;\n            fprintf(stderr,\n               \"\\t %5d (%3d%%) hash table entries at depth %d\\n\"\n               , numdepth, (numdepth * 100) / total_occupied, maxdepth + 1);\n            pop -= numdepth;\n            cross_foot += numdepth;\n            if (0 == pop && cross_foot == total_occupied) break;\n         }\n         if (pop) {\n            fprintf(stderr, \"\\t %5d (%3d%%) unchained hash table entries\\n\"\n               , pop, (pop * 100) / total_occupied);\n            cross_foot += pop;\n         }\n         fprintf(stderr,\n            \"\\t -----\\n\"\n            \"\\t %5d total entries occupied\\n\", cross_foot);\n\n         if (maxdepth_sav > 1) {\n            fprintf(stderr, \"\\nPIDs at max depth: \");\n            for (i = 0; i < HHASH_SIZ; i++)\n               if (depths[i] == maxdepth_sav) {\n                  j = PHash_new[i];\n                  fprintf(stderr, \"\\n\\tpos %4d:  %05d\", i, PHist_new[j].pid);\n                  while (-1 < j) {\n                     j = PHist_new[j].lnk;\n                     if (-1 < j) fprintf(stderr, \", %05d\", PHist_new[j].pid);\n                  }\n               }\n            fprintf(stderr, \"\\n\");\n         }\n      }\n   }\n#endif // end: ATEOJ_RPTHSH\n#endif // end: OFF_HST_HASH\n\n   numa_uninit();\n   if (str) {\n      fputs(str, stderr);\n      exit(EXIT_FAILURE);\n   }\n   if (Batch) fputs(\"\\n\", stdout);\n   exit(EXIT_SUCCESS);\n} // end: bye_bye\n\n\n        /*\n         * Standard error handler to normalize the look of all err output */\nstatic void error_exit (const char *str) NORETURN;\nstatic void error_exit (const char *str) {\n   static char buf[MEDBUFSIZ];\n\n   /* we'll use our own buffer so callers can still use fmtmk() and, after\n      twelve long years, 2013 was the year we finally eliminated the leading\n      tab character -- now our message can get lost in screen clutter too! */\n   snprintf(buf, sizeof(buf), \"%s: %s\\n\", Myname, str);\n   bye_bye(buf);\n} // end: error_exit\n\n\n        /*\n         * Catches all remaining signals not otherwise handled */\nstatic void sig_abexit (int sig) {\n   sigset_t ss;\n\n// POSIX.1-2004 async-signal-safe: sigfillset, sigprocmask, signal, raise\n   sigfillset(&ss);\n   sigprocmask(SIG_BLOCK, &ss, NULL);\n   at_eoj();                 // restore tty in preparation for exit\n   fprintf(stderr, N_fmt(EXIT_signals_fmt)\n      , sig, signal_number_to_name(sig), Myname);\n   signal(sig, SIG_DFL);     // allow core dumps, if applicable\n   raise(sig);               // ( plus set proper return code )\n   _exit(sig | 0x80);        // if default sig action is ignore\n} // end: sig_abexit\n\n\n        /*\n         * Catches:\n         *    SIGALRM, SIGHUP, SIGINT, SIGPIPE, SIGQUIT, SIGTERM,\n         *    SIGUSR1 and SIGUSR2 */\nstatic void sig_endpgm (int dont_care_sig) NORETURN;\nstatic void sig_endpgm (int dont_care_sig) {\n   bye_bye(NULL);\n   (void)dont_care_sig;\n} // end: sig_endpgm\n\n\n        /*\n         * Catches:\n         *    SIGTSTP, SIGTTIN and SIGTTOU */\nstatic void sig_paused (int dont_care_sig) {\n// POSIX.1-2004 async-signal-safe: tcsetattr, tcdrain, raise\n   if (-1 == tcsetattr(STDIN_FILENO, TCSAFLUSH, &Tty_original))\n      error_exit(fmtmk(N_fmt(FAIL_tty_set_fmt), strerror(errno)));\n   if (keypad_local) putp(keypad_local);\n   putp(tg2(0, Screen_rows));\n   putp(Cap_curs_norm);\n#ifndef RMAN_IGNORED\n   putp(Cap_smam);\n#endif\n   // tcdrain(STDOUT_FILENO) was not reliable prior to ncurses-5.9.20121017,\n   // so we'll risk POSIX's wrath with good ol' fflush, lest 'Stopped' gets\n   // co-mingled with our most recent output...\n   fflush(stdout);\n   raise(SIGSTOP);\n   // later, after SIGCONT...\n   if (-1 == tcsetattr(STDIN_FILENO, TCSAFLUSH, &Tty_raw))\n      error_exit(fmtmk(N_fmt(FAIL_tty_set_fmt), strerror(errno)));\n#ifndef RMAN_IGNORED\n   putp(Cap_rmam);\n#endif\n   if (keypad_xmit) putp(keypad_xmit);\n   putp(Cursor_state);\n   Frames_signal = BREAK_sig;\n   (void)dont_care_sig;\n} // end: sig_paused\n\n\n        /*\n         * Catches:\n         *    SIGCONT and SIGWINCH */\nstatic void sig_resize (int dont_care_sig) {\n// POSIX.1-2004 async-signal-safe: tcdrain\n   tcdrain(STDOUT_FILENO);\n   Frames_signal = BREAK_sig;\n   (void)dont_care_sig;\n} // end: sig_resize\n\n\n        /*\n         * Handles libproc memory errors, so our tty can be reset */\nstatic void xalloc_our_handler (const char *fmts, ...) {\n   static char buf[MEDBUFSIZ];\n   va_list va;\n\n   va_start(va, fmts);\n   vsnprintf(buf, sizeof(buf), fmts, va);\n   va_end(va);\n   scat(buf, \"\\n\");\n   bye_bye(buf);\n} // end: xalloc_our_handler\n\f\n/*######  Special UTF-8 Multi-Byte support  ##############################*/\n\n        /* Support for NLS translated multi-byte strings */\nstatic char UTF8_tab[] = {\n   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x00 - 0x0F\n   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x10 - 0x1F\n   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x20 - 0x2F\n   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x30 - 0x3F\n   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x40 - 0x4F\n   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x50 - 0x5F\n   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x60 - 0x6F\n   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0x70 - 0x7F\n  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, // 0x80 - 0x8F\n  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, // 0x90 - 0x9F\n  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, // 0xA0 - 0xAF\n  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, // 0xB0 - 0xBF\n  -1,-1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // 0xC0 - 0xCF, 0xC2 = begins 2\n   2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // 0xD0 - 0xDF\n   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, // 0xE0 - 0xEF, 0xE0 = begins 3\n   4, 4, 4, 4, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, // 0xF0 - 0xFF, 0xF0 = begins 4\n};                                                 //            ( 0xF5 & beyond invalid )\n\n\n        /*\n         * Accommodate any potential differences between some multibyte\n         * character sequence and the screen columns needed to print it */\nstatic inline int utf8_cols (const unsigned char *p, int n) {\n#ifndef OFF_XTRAWIDE\n   wchar_t wc;\n\n   if (n > 1) {\n      (void)mbtowc(&wc, (const char *)p, n);\n      if ((n = wcwidth(wc)) < 1) n = 1;\n   }\n   return n;\n#else\n   (void)p; (void)n;\n   return 1;\n#endif\n} // end: utf8_cols\n\n\n        /*\n         * Determine difference between total bytes versus printable\n         * characters in that passed, potentially multi-byte, string */\nstatic int utf8_delta (const char *str) {\n   const unsigned char *p = (const unsigned char *)str;\n   int clen, cnum = 0;\n\n   while (*p) {\n      // -1 represents a decoding error, pretend it's untranslated ...\n      if (0 > (clen = UTF8_tab[*p])) return 0;\n      cnum += utf8_cols(p, clen);\n      p += clen;\n   }\n   return (int)((const char *)p - str) - cnum;\n} // end: utf8_delta\n\n\n        /*\n         * Determine a physical end within a potential multi-byte string\n         * where maximum printable chars could be accommodated in width */\nstatic int utf8_embody (const char *str, int width) {\n   const unsigned char *p = (const unsigned char *)str;\n   int clen, cnum = 0;\n\n   if (width > 0) {\n      while (*p) {\n         // -1 represents a decoding error, pretend it's untranslated ...\n         if (0 > (clen = UTF8_tab[*p])) return width;\n         if (width < (cnum += utf8_cols(p, clen))) break;\n         p += clen;\n      }\n   }\n   return (int)((const char *)p - str);\n} // end: utf8_embody\n\n\n        /*\n         * Like the regular justify_pad routine but this guy\n         * can accommodate the multi-byte translated strings */\nstatic const char *utf8_justify (const char *str, int width, int justr) {\n   static char l_fmt[]  = \"%-*.*s%s\", r_fmt[] = \"%*.*s%s\";\n   static char buf[SCREENMAX];\n   char tmp[SCREENMAX];\n\n   snprintf(tmp, sizeof(tmp), \"%.*s\", utf8_embody(str, width), str);\n   width += utf8_delta(tmp);\n   snprintf(buf, sizeof(buf), justr ? r_fmt : l_fmt, width, width, tmp, COLPADSTR);\n   return buf;\n} // end: utf8_justify\n\n\n        /*\n         * Returns a physical or logical column number given a\n         * multi-byte string and a target column value */\nstatic int utf8_proper_col (const char *str, int col, int tophysical) {\n   const unsigned char *p = (const unsigned char *)str;\n   int clen, tlen = 0, cnum = 0;\n\n   while (*p) {\n      // -1 represents a decoding error, don't encourage repositioning ...\n      if (0 > (clen = UTF8_tab[*p])) return col;\n      if (cnum + 1 > col && tophysical) break;\n      p += clen;\n      tlen += clen;\n      if (tlen > col && !tophysical) break;\n      ++cnum;\n   }\n   return tophysical ? tlen : cnum;\n} // end: utf8_proper_col\n\f\n/*######  Misc Color/Display support  ####################################*/\n\n        /*\n         * Make the appropriate caps/color strings for a window/field group.\n         * note: we avoid the use of background color so as to maximize\n         *       compatibility with the user's xterm settings */\nstatic void capsmk (WIN_t *q) {\n   /* macro to test if a basic (non-color) capability is valid\n         thanks: Floyd Davidson <floyd@ptialaska.net> */\n #define tIF(s)  s ? s : \"\"\n   /* macro to make compatible with netbsd-curses too\n         thanks: rofl0r <retnyg@gmx.net> */\n #define tPM(a,b) tparm(a, b, 0, 0, 0, 0, 0, 0, 0, 0)\n   static int capsdone = 0;\n\n   // we must NOT disturb our 'empty' terminfo strings!\n   if (Batch) return;\n\n   // these are the unchangeable puppies, so we only do 'em once\n   if (!capsdone) {\n      STRLCPY(Cap_clr_eol, tIF(clr_eol))\n      STRLCPY(Cap_clr_eos, tIF(clr_eos))\n      STRLCPY(Cap_clr_scr, tIF(clear_screen))\n      // due to the leading newline, the following must be used with care\n      snprintf(Cap_nl_clreos, sizeof(Cap_nl_clreos), \"\\n%s\", tIF(clr_eos));\n      STRLCPY(Cap_curs_huge, tIF(cursor_visible))\n      STRLCPY(Cap_curs_norm, tIF(cursor_normal))\n      STRLCPY(Cap_curs_hide, tIF(cursor_invisible))\n      STRLCPY(Cap_home, tIF(cursor_home))\n      STRLCPY(Cap_norm, tIF(exit_attribute_mode))\n      STRLCPY(Cap_reverse, tIF(enter_reverse_mode))\n#ifndef RMAN_IGNORED\n      if (!eat_newline_glitch) {\n         STRLCPY(Cap_rmam, tIF(exit_am_mode))\n         STRLCPY(Cap_smam, tIF(enter_am_mode))\n         if (!*Cap_rmam || !*Cap_smam) {\n            *Cap_rmam = '\\0';\n            *Cap_smam = '\\0';\n            if (auto_right_margin)\n               Cap_avoid_eol = 1;\n         }\n         putp(Cap_rmam);\n      }\n#endif\n      snprintf(Caps_off, sizeof(Caps_off), \"%s%s\", Cap_norm, tIF(orig_pair));\n      snprintf(Caps_endline, sizeof(Caps_endline), \"%s%s\", Caps_off, Cap_clr_eol);\n      if (tgoto(cursor_address, 1, 1)) Cap_can_goto = 1;\n      capsdone = 1;\n   }\n\n   /* the key to NO run-time costs for configurable colors -- we spend a\n      little time with the user now setting up our terminfo strings, and\n      the job's done until he/she/it has a change-of-heart */\n   STRLCPY(q->cap_bold, CHKw(q, View_NOBOLD) ? Cap_norm : tIF(enter_bold_mode))\n   if (CHKw(q, Show_COLORS) && max_colors > 0) {\n      STRLCPY(q->capclr_sum, tPM(set_a_foreground, q->rc.summclr))\n      snprintf(q->capclr_msg, sizeof(q->capclr_msg), \"%s%s\"\n         , tPM(set_a_foreground, q->rc.msgsclr), Cap_reverse);\n      snprintf(q->capclr_pmt, sizeof(q->capclr_pmt), \"%s%s\"\n         , tPM(set_a_foreground, q->rc.msgsclr), q->cap_bold);\n      snprintf(q->capclr_hdr, sizeof(q->capclr_hdr), \"%s%s\"\n         , tPM(set_a_foreground, q->rc.headclr), Cap_reverse);\n      snprintf(q->capclr_rownorm, sizeof(q->capclr_rownorm), \"%s%s\"\n         , Caps_off, tPM(set_a_foreground, q->rc.taskclr));\n   } else {\n      q->capclr_sum[0] = '\\0';\n#ifdef USE_X_COLHDR\n      snprintf(q->capclr_msg, sizeof(q->capclr_msg), \"%s%s\"\n         , Cap_reverse, q->cap_bold);\n#else\n      STRLCPY(q->capclr_msg, Cap_reverse)\n#endif\n      STRLCPY(q->capclr_pmt, q->cap_bold)\n      STRLCPY(q->capclr_hdr, Cap_reverse)\n      STRLCPY(q->capclr_rownorm, Cap_norm)\n   }\n\n   // composite(s), so we do 'em outside and after the if\n   snprintf(q->capclr_rowhigh, sizeof(q->capclr_rowhigh), \"%s%s\"\n      , q->capclr_rownorm, CHKw(q, Show_HIBOLD) ? q->cap_bold : Cap_reverse);\n #undef tIF\n #undef tPM\n} // end: capsmk\n\n\n        /*\n         * Show an error message (caller may include '\\a' for sound) */\nstatic void show_msg (const char *str) {\n   PUTT(\"%s%s %.*s %s%s%s\"\n      , tg2(0, Msg_row)\n      , Curwin->capclr_msg\n      , utf8_embody(str, Screen_cols - 2)\n      , str\n      , Cap_curs_hide\n      , Caps_off\n      , Cap_clr_eol);\n   fflush(stdout);\n   usleep(MSG_USLEEP);\n} // end: show_msg\n\n\n        /*\n         * Show an input prompt + larger cursor (if possible) */\nstatic int show_pmt (const char *str) {\n   char buf[MEDBUFSIZ];\n   int len;\n\n   snprintf(buf, sizeof(buf), \"%.*s\", utf8_embody(str, Screen_cols - 2), str);\n   len = utf8_delta(buf);\n#ifdef PRETENDNOCAP\n   PUTT(\"\\n%s%s%.*s %s%s%s\"\n#else\n   PUTT(\"%s%s%.*s %s%s%s\"\n#endif\n      , tg2(0, Msg_row)\n      , Curwin->capclr_pmt\n      , (Screen_cols - 2) + len\n      , buf\n      , Cap_curs_huge\n      , Caps_off\n      , Cap_clr_eol);\n   fflush(stdout);\n   len = strlen(buf) - len;\n   // +1 for the space we added or -1 for the cursor...\n   return (len + 1 < Screen_cols) ? len + 1 : Screen_cols - 1;\n} // end: show_pmt\n\n\n        /*\n         * Create and print the optional scroll coordinates message */\nstatic void show_scroll (void) {\n   char tmp1[SMLBUFSIZ];\n#ifndef SCROLLVAR_NO\n   char tmp2[SMLBUFSIZ];\n#endif\n   int totpflgs = Curwin->totpflgs;\n   int begpflgs = Curwin->begpflg + 1;\n\n#ifndef USE_X_COLHDR\n   if (CHKw(Curwin, Show_HICOLS)) {\n      totpflgs -= 2;\n      if (ENUpos(Curwin, Curwin->rc.sortindx) < Curwin->begpflg) begpflgs -= 2;\n   }\n#endif\n   if (1 > totpflgs) totpflgs = 1;\n   if (1 > begpflgs) begpflgs = 1;\n   snprintf(tmp1, sizeof(tmp1), N_fmt(SCROLL_coord_fmt), Curwin->begtask + 1, Frame_maxtask, begpflgs, totpflgs);\n#ifndef SCROLLVAR_NO\n   if (Curwin->varcolbeg) {\n      snprintf(tmp2, sizeof(tmp2), \" + %d\", Curwin->varcolbeg);\n      scat(tmp1, tmp2);\n   }\n#endif\n   PUTT(\"%s%s  %.*s%s\", tg2(0, Msg_row), Caps_off, Screen_cols - 3, tmp1, Cap_clr_eol);\n} // end: show_scroll\n\n\n        /*\n         * Show lines with specially formatted elements, but only output\n         * what will fit within the current screen width.\n         *    Our special formatting consists of:\n         *       \"some text <_delimiter_> some more text <_delimiter_>...\\n\"\n         *    Where <_delimiter_> is a two byte combination consisting of a\n         *    tilde followed by an ascii digit in the range of 1 - 8.\n         *       examples: ~1, ~5, ~8, etc.\n         *    The tilde is effectively stripped and the next digit\n         *    converted to an index which is then used to select an\n         *    'attribute' from a capabilities table.  That attribute\n         *    is then applied to the *preceding* substring.\n         * Once recognized, the delimiter is replaced with a null character\n         * and viola, we've got a substring ready to output!  Strings or\n         * substrings without delimiters will receive the Cap_norm attribute.\n         *\n         * Caution:\n         *    This routine treats all non-delimiter bytes as displayable\n         *    data subject to our screen width marching orders.  If callers\n         *    embed non-display data like tabs or terminfo strings in our\n         *    glob, a line will truncate incorrectly at best.  Worse case\n         *    would be truncation of an embedded tty escape sequence.\n         *\n         *    Tabs must always be avoided or our efforts are wasted and\n         *    lines will wrap.  To lessen but not eliminate the risk of\n         *    terminfo string truncation, such non-display stuff should\n         *    be placed at the beginning of a \"short\" line. */\nstatic void show_special (int interact, const char *glob) {\n  /* note: the following is for documentation only,\n           the real captab is now found in a group's WIN_t !\n     +------------------------------------------------------+\n     | char *captab[] = {                 :   Cap's = Index |\n     |   Cap_norm, Cap_norm,              =   \\000, \\001,   |\n     |   cap_bold, capclr_sum,            =   \\002, \\003,   |\n     |   capclr_msg, capclr_pmt,          =   \\004, \\005,   |\n     |   capclr_hdr,                      =   \\006,         |\n     |   capclr_rowhigh,                  =   \\007,         |\n     |   capclr_rownorm  };               =   \\010 [octal!] |\n     +------------------------------------------------------+ */\n  /* ( Pssst, after adding the termcap transitions, row may )\n     ( exceed 300+ bytes, even in an 80x24 terminal window! )\n     ( Shown here are the former buffer size specifications )\n     ( char tmp[SMLBUFSIZ], lin[MEDBUFSIZ], row[LRGBUFSIZ]. )\n     ( So now we use larger buffers and a little protection )\n     ( against overrunning them with this 'lin_end - glob'. )\n\n     ( That was uncovered during 'Inspect' development when )\n     ( this guy was being considered for a supporting role. )\n     ( However, such an approach was abandoned. As a result )\n     ( this function is called only with a glob under top's )\n     ( control and never containing any 'raw/binary' chars! ) */\n   char tmp[LRGBUFSIZ], lin[LRGBUFSIZ], row[ROWMAXSIZ];\n   char *rp, *lin_end, *sub_beg, *sub_end;\n   int room;\n\n   // handle multiple lines passed in a bunch\n   while ((lin_end = strchr(glob, '\\n'))) {\n     #define myMIN(a,b) (((a) < (b)) ? (a) : (b))\n      size_t lessor = myMIN((size_t)(lin_end - glob), sizeof(lin) -3);\n\n      // create a local copy we can extend and otherwise abuse\n      memcpy(lin, glob, lessor);\n      // zero terminate this part and prepare to parse substrings\n      lin[lessor] = '\\0';\n      room = Screen_cols;\n      sub_beg = sub_end = lin;\n      *(rp = row) = '\\0';\n\n      while (*sub_beg) {\n         int ch = *sub_end;\n         if ('~' == ch) ch = *(sub_end + 1) - '0';\n         switch (ch) {\n            case 0:                    // no end delim, captab makes normal\n               // only possible when '\\n' was NOT preceded with a '~#' sequence\n               // ( '~1' thru '~8' is valid range, '~0' is never actually used )\n               *(sub_end + 1) = '\\0';  // extend str end, then fall through\n               *(sub_end + 2) = '\\0';  // ( +1 optimization for usual path )\n            case 1: case 2: case 3: case 4:\n            case 5: case 6: case 7: case 8:\n               *sub_end = '\\0';\n               snprintf(tmp, sizeof(tmp), \"%s%.*s%s\"\n                  , Curwin->captab[ch], utf8_embody(sub_beg, room), sub_beg, Caps_off);\n               rp = scat(rp, tmp);\n               room -= (sub_end - sub_beg);\n               room += utf8_delta(sub_beg);\n               sub_beg = (sub_end += 2);\n               break;\n            default:                   // nothin' special, just text\n               ++sub_end;\n         }\n         if (0 >= room) break;         // skip substrings that won't fit\n      }\n\n      if (interact) PUTT(\"%s%s\\n\", row, Cap_clr_eol);\n      else PUFF(\"%s%s\\n\", row, Caps_endline);\n      glob = ++lin_end;                // point to next line (maybe)\n\n     #undef myMIN\n   } // end: while 'lines'\n\n   /* If there's anything left in the glob (by virtue of no trailing '\\n'),\n      it probably means caller wants to retain cursor position on this final\n      line.  That, in turn, means we're interactive and so we'll just do our\n      'fit-to-screen' thingy while also leaving room for the cursor... */\n   if (*glob) PUTT(\"%.*s\", utf8_embody(glob, Screen_cols - 1), glob);\n} // end: show_special\n\f\n/*######  Low Level Memory/Keyboard/File I/O support  ####################*/\n\n        /*\n         * Handle our own memory stuff without the risk of leaving the\n         * user's terminal in an ugly state should things go sour. */\n\nstatic void *alloc_c (size_t num) MALLOC;\nstatic void *alloc_c (size_t num) {\n   void *pv;\n\n   if (!num) ++num;\n   if (!(pv = calloc(1, num)))\n      error_exit(N_txt(FAIL_alloc_c_txt));\n   return pv;\n} // end: alloc_c\n\n\nstatic void *alloc_r (void *ptr, size_t num) MALLOC;\nstatic void *alloc_r (void *ptr, size_t num) {\n   void *pv;\n\n   if (!num) ++num;\n   if (!(pv = realloc(ptr, num)))\n      error_exit(N_txt(FAIL_alloc_r_txt));\n   return pv;\n} // end: alloc_r\n\n\nstatic char *alloc_s (const char *str) MALLOC;\nstatic char *alloc_s (const char *str) {\n   return strcpy(alloc_c(strlen(str) +1), str);\n} // end: alloc_s\n\n\n        /*\n         * An 'I/O available' routine which will detect raw single byte |\n         * unsolicited keyboard input which was susceptible to SIGWINCH |\n         * interrupts (or any other signal).  He'll also support timout |\n         * in the absence of any user keystrokes or a signal interrupt. | */\nstatic inline int ioa (struct timespec *ts) {\n   fd_set fs;\n   int rc;\n\n   FD_ZERO(&fs);\n   FD_SET(STDIN_FILENO, &fs);\n\n#ifdef SIGNALS_LESS // conditional comments are silly, but help in documenting\n   // hold here until we've got keyboard input, any signal except SIGWINCH\n   // or (optionally) we timeout with nanosecond granularity\n#else\n   // hold here until we've got keyboard input, any signal (including SIGWINCH)\n   // or (optionally) we timeout with nanosecond granularity\n#endif\n   rc = pselect(STDIN_FILENO + 1, &fs, NULL, NULL, ts, &Sigwinch_set);\n\n   if (rc < 0) rc = 0;\n   return rc;\n} // end: ioa\n\n\n        /*\n         * This routine isolates ALL user INPUT and ensures that we\n         * wont be mixing I/O from stdio and low-level read() requests */\nstatic int ioch (int ech, char *buf, unsigned cnt) {\n   int rc = -1;\n\n#ifdef TERMIOS_ONLY\n   if (ech) {\n      tcsetattr(STDIN_FILENO, TCSAFLUSH, &Tty_tweaked);\n      rc = read(STDIN_FILENO, buf, cnt);\n      tcsetattr(STDIN_FILENO, TCSAFLUSH, &Tty_raw);\n   } else {\n      if (ioa(NULL))\n         rc = read(STDIN_FILENO, buf, cnt);\n   }\n#else\n   (void)ech;\n   if (ioa(NULL))\n      rc = read(STDIN_FILENO, buf, cnt);\n#endif\n\n   // zero means EOF, might happen if we erroneously get detached from terminal\n   if (0 == rc) bye_bye(NULL);\n\n   // it may have been the beginning of a lengthy escape sequence\n   tcflush(STDIN_FILENO, TCIFLUSH);\n\n   // note: we do NOT produce a valid 'string'\n   return rc;\n} // end: ioch\n\n\n        /*\n         * Support for single or multiple keystroke input AND\n         * escaped cursor motion keys.\n         * note: we support more keys than we currently need, in case\n         *       we attract new consumers in the future */\nstatic int iokey (int action) {\n   static struct {\n      const char *str;\n      int key;\n   } tinfo_tab[] = {\n      { NULL, kbd_BKSP  }, { NULL, kbd_INS   }, { NULL, kbd_DEL   },\n      { NULL, kbd_LEFT  }, { NULL, kbd_DOWN  }, { NULL, kbd_UP    }, { NULL, kbd_RIGHT },\n      { NULL, kbd_HOME  }, { NULL, kbd_PGDN  }, { NULL, kbd_PGUP  }, { NULL, kbd_END   },\n         // remainder are alternatives for above, just in case...\n         // ( the h,j,k,l entries are the vim cursor motion keys )\n      { \"\\033h\",    kbd_LEFT  }, { \"\\033j\",    kbd_DOWN  }, /* meta+      h,j */\n      { \"\\033k\",    kbd_UP    }, { \"\\033l\",    kbd_RIGHT }, /* meta+      k,l */\n      { \"\\033\\010\", kbd_HOME  }, { \"\\033\\012\", kbd_PGDN  }, /* ctrl+meta+ h,j */\n      { \"\\033\\013\", kbd_PGUP  }, { \"\\033\\014\", kbd_END   }, /* ctrl+meta+ k,l */\n      { \"\\xC3\\xA8\", kbd_LEFT  }, { \"\\xC3\\xAA\", kbd_DOWN  }, /* meta+      h,j (some xterms) */\n      { \"\\xC3\\xAB\", kbd_UP    }, { \"\\xC3\\xAC\", kbd_RIGHT }, /* meta+      k,l (some xterms) */\n      { \"\\xC2\\x88\", kbd_HOME  }, { \"\\xC2\\x8A\", kbd_PGDN  }, /* ctrl+meta+ h,j (some xterms) */\n      { \"\\xC2\\x8B\", kbd_PGUP  }, { \"\\xC2\\x8C\", kbd_END   }  /* ctrl+meta+ k,l (some xterms) */\n   };\n#ifdef TERMIOS_ONLY\n   char buf[SMLBUFSIZ], *pb;\n#else\n   static char buf[SMLBUFSIZ];\n   static int pos, len;\n   char *pb;\n#endif\n   int i;\n\n   if (action == 0) {\n    #define tOk(s)  s ? s : \"\"\n      tinfo_tab[0].str  = tOk(key_backspace);\n      tinfo_tab[1].str  = tOk(key_ic);\n      tinfo_tab[2].str  = tOk(key_dc);\n      tinfo_tab[3].str  = tOk(key_left);\n      tinfo_tab[4].str  = tOk(key_down);\n      tinfo_tab[5].str  = tOk(key_up);\n      tinfo_tab[6].str  = tOk(key_right);\n      tinfo_tab[7].str  = tOk(key_home);\n      tinfo_tab[8].str  = tOk(key_npage);\n      tinfo_tab[9].str  = tOk(key_ppage);\n      tinfo_tab[10].str = tOk(key_end);\n      // next is critical so returned results match bound terminfo keys\n      putp(tOk(keypad_xmit));\n      // ( converse keypad_local issued at pause/pgm end, just in case )\n      return 0;\n    #undef tOk\n   }\n\n   if (action == 1) {\n      memset(buf, '\\0', sizeof(buf));\n      if (1 > ioch(0, buf, sizeof(buf)-1)) return 0;\n   }\n\n#ifndef TERMIOS_ONLY\n   if (action == 2) {\n      if (pos < len)\n         return buf[pos++];            // exhaust prior keystrokes\n      pos = len = 0;\n      memset(buf, '\\0', sizeof(buf));\n      if (1 > ioch(0, buf, sizeof(buf)-1)) return 0;\n      if (isprint(buf[0])) {           // no need for translation\n         len = strlen(buf);\n         pos = 1;\n         return buf[0];\n      }\n   }\n#endif\n\n   /* some emulators implement 'key repeat' too well and we get duplicate\n      key sequences -- so we'll focus on the last escaped sequence, while\n      also allowing use of the meta key... */\n   if (!(pb = strrchr(buf, '\\033'))) pb = buf;\n   else if (pb > buf && '\\033' == *(pb - 1)) --pb;\n\n   for (i = 0; i < MAXTBL(tinfo_tab); i++)\n      if (!strcmp(tinfo_tab[i].str, pb))\n         return tinfo_tab[i].key;\n\n   // no match, so we'll return single non-escaped keystrokes only\n   if (buf[0] == '\\033' && buf[1]) return -1;\n   return buf[0];\n} // end: iokey\n\n\n#ifdef TERMIOS_ONLY\n        /*\n         * Get line oriented interactive input from the user,\n         * using native tty support */\nstatic char *ioline (const char *prompt) {\n   static const char ws[] = \"\\b\\f\\n\\r\\t\\v\\x1b\\x9b\";  // 0x1b + 0x9b are escape\n   static char buf[MEDBUFSIZ];\n   char *p;\n\n   show_pmt(prompt);\n   memset(buf, '\\0', sizeof(buf));\n   ioch(1, buf, sizeof(buf)-1);\n\n   if ((p = strpbrk(buf, ws))) *p = '\\0';\n   // note: we DO produce a vaid 'string'\n   return buf;\n} // end: ioline\n\n#else\n        /*\n         * Get line oriented interactive input from the user,\n         * going way beyond native tty support by providing:\n         * . true line editing, not just destructive backspace\n         * . an input limit sensitive to current screen dimensions\n         * . ability to recall prior strings for re-input/re-editing */\nstatic char *ioline (const char *prompt) {\n #define savMAX  50\n    // thank goodness memmove allows the two strings to overlap\n #define sqzSTR  { memmove(&buf[pos], &buf[pos+1], bufMAX-pos); \\\n       buf[sizeof(buf)-1] = '\\0'; }\n #define expSTR  if (len+1 < bufMAX && len+beg+1 < Screen_cols) { \\\n       memmove(&buf[pos+1], &buf[pos], bufMAX-pos); buf[pos] = ' '; }\n #define logCOL  (pos+1)\n #define phyCOL  (beg+pos+1)\n #define bufMAX  ((int)sizeof(buf)-2)  // -1 for '\\0' string delimeter\n   static char buf[MEDBUFSIZ+1];       // +1 for '\\0' string delimeter\n   static int ovt;\n   int beg, pos, len, key, i;\n   struct lin_s {\n      struct lin_s *bkw;               // ptr to older saved strs\n      struct lin_s *fwd;               // ptr to newer saved strs\n      char *str;                       // the saved string\n   };\n   static struct lin_s *anchor, *plin;\n\n   if (!anchor) {\n      anchor = alloc_c(sizeof(struct lin_s));\n      anchor->str = alloc_s(\"\");       // top-of-stack == empty str\n   }\n   plin = anchor;\n   pos = 0;\n   beg = show_pmt(prompt);\n   memset(buf, '\\0', sizeof(buf));\n   putp(ovt ? Cap_curs_huge : Cap_curs_norm);\n\n   do {\n      fflush(stdout);\n      len = strlen(buf);\n      key = iokey(2);\n      switch (key) {\n         case 0:\n            buf[0] = '\\0';\n            return buf;\n         case kbd_ESC:\n            buf[0] = kbd_ESC;\n            return buf;\n         case kbd_ENTER:\n            continue;\n         case kbd_INS:\n            ovt = !ovt;\n            putp(ovt ? Cap_curs_huge : Cap_curs_norm);\n            break;\n         case kbd_DEL:\n            sqzSTR\n            break;\n         case kbd_BKSP :\n            if (0 < pos) { --pos; sqzSTR }\n            break;\n         case kbd_LEFT:\n            if (0 < pos) --pos;\n            break;\n         case kbd_RIGHT:\n            if (pos < len) ++pos;\n            break;\n         case kbd_HOME:\n            pos = 0;\n            break;\n         case kbd_END:\n            pos = len;\n            break;\n         case kbd_UP:\n            if (plin->bkw) {\n               plin = plin->bkw;\n               memset(buf, '\\0', sizeof(buf));\n               pos = snprintf(buf, sizeof(buf), \"%.*s\", Screen_cols - beg - 1, plin->str);\n            }\n            break;\n         case kbd_DOWN:\n            memset(buf, '\\0', sizeof(buf));\n            if (plin->fwd) plin = plin->fwd;\n            pos = snprintf(buf, sizeof(buf), \"%.*s\", Screen_cols - beg - 1, plin->str);\n            break;\n         default:                      // what we REALLY wanted (maybe)\n            if (isprint(key) && logCOL < bufMAX && phyCOL < Screen_cols) {\n               if (!ovt) expSTR\n               buf[pos++] = key;\n            }\n            break;\n      }\n      putp(fmtmk(\"%s%s%s\", tg2(beg, Msg_row), Cap_clr_eol, buf));\n      putp(tg2(beg+pos, Msg_row));\n   } while (key != kbd_ENTER);\n\n   // weed out duplicates, including empty strings (top-of-stack)...\n   for (i = 0, plin = anchor; ; i++) {\n#ifdef RECALL_FIXED\n      if (!STRCMP(plin->str, buf))     // if matched, retain original order\n         return buf;\n#else\n      if (!STRCMP(plin->str, buf)) {   // if matched, rearrange stack order\n         if (i > 1) {                  // but not null str or if already #2\n            if (plin->bkw)             // splice around this matched string\n               plin->bkw->fwd = plin->fwd; // if older exists link to newer\n            plin->fwd->bkw = plin->bkw;    // newer linked to older or NULL\n            anchor->bkw->fwd = plin;   // stick matched on top of former #2\n            plin->bkw = anchor->bkw;   // keep empty string at top-of-stack\n            plin->fwd = anchor;        // then prepare to be the 2nd banana\n            anchor->bkw = plin;        // by sliding us in below the anchor\n         }\n         return buf;\n      }\n#endif\n      if (!plin->bkw) break;           // let i equal total stacked strings\n      plin = plin->bkw;                // ( with plin representing bottom )\n   }\n   if (i < savMAX)\n      plin = alloc_c(sizeof(struct lin_s));\n   else {                              // when a new string causes overflow\n      plin->fwd->bkw = NULL;           // make next-to-last string new last\n      free(plin->str);                 // and toss copy but keep the struct\n   }\n   plin->str = alloc_s(buf);           // copy user's new unique input line\n   plin->bkw = anchor->bkw;            // keep empty string as top-of-stack\n   if (plin->bkw)                      // did we have some already stacked?\n      plin->bkw->fwd = plin;           // yep, so point prior to new string\n   plin->fwd = anchor;                 // and prepare to be a second banana\n   anchor->bkw = plin;                 // by sliding it in as new number 2!\n\n   return buf;                         // protect our copy, return original\n #undef savMAX\n #undef sqzSTR\n #undef expSTR\n #undef logCOL\n #undef phyCOL\n #undef bufMAX\n} // end: ioline\n#endif\n\n\n        /*\n         * Make locale unaware float (but maybe restrict to whole numbers). */\nstatic int mkfloat (const char *str, float *num, int whole) {\n   char tmp[SMLBUFSIZ], *ep;\n\n   if (whole) {\n      *num = (float)strtol(str, &ep, 0);\n      if (ep != str && *ep == '\\0' && *num < INT_MAX)\n         return 1;\n      return 0;\n   }\n   snprintf(tmp, sizeof(tmp), \"%s\", str);\n   *num = strtof(tmp, &ep);\n   if (*ep != '\\0') {\n      // fallback - try to swap the floating point separator\n      if (*ep == '.') *ep = ',';\n      else if (*ep == ',') *ep = '.';\n      *num = strtof(tmp, &ep);\n   }\n   if (ep != tmp && *ep == '\\0' && *num < INT_MAX)\n      return 1;\n   return 0;\n} // end: mkfloat\n\n\n        /*\n         * This routine provides the i/o in support of files whose size\n         * cannot be determined in advance.  Given a stream pointer, he'll\n         * try to slurp in the whole thing and return a dynamically acquired\n         * buffer supporting that single string glob.\n         *\n         * He always creates a buffer at least READMINSZ big, possibly\n         * all zeros (an empty string), even if the file wasn't read. */\nstatic int readfile (FILE *fp, char **baddr, size_t *bsize, size_t *bread) {\n   char chunk[4096*16];\n   size_t num;\n\n   *bread = 0;\n   *bsize = READMINSZ;\n   *baddr = alloc_c(READMINSZ);\n   if (fp) {\n      while (0 < (num = fread(chunk, 1, sizeof(chunk), fp))) {\n         *baddr = alloc_r(*baddr, num + *bsize);\n         memcpy(*baddr + *bread, chunk, num);\n         *bread += num;\n         *bsize += num;\n      };\n      *(*baddr + *bread) = '\\0';\n      return ferror(fp);\n   }\n   return ENOENT;\n} // end: readfile\n\f\n/*######  Small Utility routines  ########################################*/\n\n#define GET_NUM_BAD  INT_MIN\n#define GET_NUM_ESC (INT_MIN + 1)\n#define GET_NUM_NOT (INT_MIN + 2)\n\n        /*\n         * Get a float from the user */\nstatic float get_float (const char *prompt) {\n   char *line;\n   float f;\n\n   line = ioline(prompt);\n   if (line[0] == kbd_ESC || Frames_signal) return GET_NUM_ESC;\n   if (!line[0]) return GET_NUM_NOT;\n   // note: we're not allowing negative floats\n   if (!mkfloat(line, &f, 0) || f < 0) {\n      show_msg(N_txt(BAD_numfloat_txt));\n      return GET_NUM_BAD;\n   }\n   return f;\n} // end: get_float\n\n\n        /*\n         * Get an integer from the user, returning INT_MIN for error */\nstatic int get_int (const char *prompt) {\n   char *line;\n   float f;\n\n   line = ioline(prompt);\n   if (line[0] == kbd_ESC || Frames_signal) return GET_NUM_ESC;\n   if (!line[0]) return GET_NUM_NOT;\n   // note: we've got to allow negative ints (renice)\n   if (!mkfloat(line, &f, 1)) {\n      show_msg(N_txt(BAD_integers_txt));\n      return GET_NUM_BAD;\n   }\n   return (int)f;\n} // end: get_int\n\n\n        /*\n         * Make a hex value, and maybe suppress zeroes. */\nstatic inline const char *hex_make (KLONG num, int noz) {\n   static char buf[SMLBUFSIZ];\n   int i;\n\n#ifdef CASEUP_HEXES\n   snprintf(buf, sizeof(buf), \"%08\" KLF \"X\", num);\n#else\n   snprintf(buf, sizeof(buf), \"%08\" KLF \"x\", num);\n#endif\n   if (noz)\n      for (i = 0; buf[i]; i++)\n         if ('0' == buf[i])\n            buf[i] = '.';\n   return buf;\n} // end: hex_make\n\n\n        /*\n         * Validate the passed string as a user name or number,\n         * and/or update the window's 'u/U' selection stuff. */\nstatic const char *user_certify (WIN_t *q, const char *str, char typ) {\n   struct passwd *pwd;\n   char *endp;\n   uid_t num;\n\n   q->usrseltyp = 0;\n   q->usrselflg = 1;\n   Monpidsidx = 0;\n   if (*str) {\n      if ('!' == *str) { ++str; q->usrselflg = 0; }\n      num = (uid_t)strtoul(str, &endp, 0);\n      if ('\\0' == *endp) {\n         pwd = getpwuid(num);\n         if (!pwd) {\n         /* allow foreign users, from e.g within chroot\n          ( thanks Dr. Werner Fink <werner@suse.de> ) */\n            q->usrseluid = num;\n            q->usrseltyp = typ;\n            return NULL;\n         }\n      } else\n         pwd = getpwnam(str);\n      if (!pwd) return N_txt(BAD_username_txt);\n      q->usrseluid = pwd->pw_uid;\n      q->usrseltyp = typ;\n   }\n   return NULL;\n} // end: user_certify\n\f\n/*######  Basic Formatting support  ######################################*/\n\n        /*\n         * Just do some justify stuff, then add post column padding. */\nstatic inline const char *justify_pad (const char *str, int width, int justr) {\n   static char l_fmt[]  = \"%-*.*s%s\", r_fmt[] = \"%*.*s%s\";\n   static char buf[SCREENMAX];\n\n   snprintf(buf, sizeof(buf), justr ? r_fmt : l_fmt, width, width, str, COLPADSTR);\n   return buf;\n} // end: justify_pad\n\n\n        /*\n         * Make and then justify a single character. */\nstatic inline const char *make_chr (const char ch, int width, int justr) {\n   static char buf[SMLBUFSIZ];\n\n   snprintf(buf, sizeof(buf), \"%c\", ch);\n   return justify_pad(buf, width, justr);\n} // end: make_chr\n\n\n        /*\n         * Make and then justify an integer NOT subject to scaling,\n         * and include a visual clue should tuncation be necessary. */\nstatic inline const char *make_num (long num, int width, int justr, int col, int noz) {\n   static char buf[SMLBUFSIZ];\n\n   buf[0] = '\\0';\n   if (noz && Rc.zero_suppress && 0 == num)\n      goto end_justifies;\n\n   if (width < snprintf(buf, sizeof(buf), \"%ld\", num)) {\n      if (width <= 0 || (size_t)width >= sizeof(buf))\n         width = sizeof(buf)-1;\n      buf[width-1] = COLPLUSCH;\n      buf[width] = '\\0';\n      AUTOX_COL(col);\n   }\nend_justifies:\n   return justify_pad(buf, width, justr);\n} // end: make_num\n\n\n        /*\n         * Make and then justify a character string,\n         * and include a visual clue should tuncation be necessary. */\nstatic inline const char *make_str (const char *str, int width, int justr, int col) {\n   static char buf[SCREENMAX];\n\n   if (width < snprintf(buf, sizeof(buf), \"%s\", str)) {\n      if (width <= 0 || (size_t)width >= sizeof(buf))\n         width = sizeof(buf)-1;\n      buf[width-1] = COLPLUSCH;\n      buf[width] = '\\0';\n      AUTOX_COL(col);\n   }\n   return justify_pad(buf, width, justr);\n} // end: make_str\n\n\n        /*\n         * Make and then justify a potentially multi-byte character string,\n         * and include a visual clue should tuncation be necessary. */\nstatic inline const char *make_str_utf8 (const char *str, int width, int justr, int col) {\n   static char buf[SCREENMAX];\n   int delta = utf8_delta(str);\n\n   if (width + delta < snprintf(buf, sizeof(buf), \"%s\", str)) {\n      snprintf(buf, sizeof(buf), \"%.*s%c\", utf8_embody(str, width-1), str, COLPLUSCH);\n      delta = utf8_delta(buf);\n      AUTOX_COL(col);\n   }\n   return justify_pad(buf, width + delta, justr);\n} // end: make_str_utf8\n\n\n        /*\n         * Do some scaling then justify stuff.\n         * We'll interpret 'num' as a kibibytes quantity and try to\n         * format it to reach 'target' while also fitting 'width'. */\nstatic const char *scale_mem (int target, unsigned long num, int width, int justr) {\n   //                               SK_Kb   SK_Mb      SK_Gb      SK_Tb      SK_Pb      SK_Eb\n#ifdef BOOST_MEMORY\n   static const char *fmttab[] =  { \"%.0f\", \"%#.1f%c\", \"%#.3f%c\", \"%#.3f%c\", \"%#.3f%c\", NULL };\n#else\n   static const char *fmttab[] =  { \"%.0f\", \"%.1f%c\",  \"%.1f%c\",  \"%.1f%c\",  \"%.1f%c\",  NULL };\n#endif\n   static char buf[SMLBUFSIZ];\n   float scaled_num;\n   char *psfx;\n   int i;\n\n   buf[0] = '\\0';\n   if (Rc.zero_suppress && 0 >= num)\n      goto end_justifies;\n\n   scaled_num = num;\n   for (i = SK_Kb, psfx = Scaled_sfxtab; i < SK_Eb; psfx++, i++) {\n      if (i >= target\n      && (width >= snprintf(buf, sizeof(buf), fmttab[i], scaled_num, *psfx)))\n         goto end_justifies;\n      scaled_num /= 1024.0;\n   }\n\n   // well shoot, this outta' fit...\n   snprintf(buf, sizeof(buf), \"?\");\nend_justifies:\n   return justify_pad(buf, width, justr);\n} // end: scale_mem\n\n\n        /*\n         * Do some scaling then justify stuff. */\nstatic const char *scale_num (unsigned long num, int width, int justr) {\n   static char buf[SMLBUFSIZ];\n   float scaled_num;\n   char *psfx;\n\n   buf[0] = '\\0';\n   if (Rc.zero_suppress && 0 >= num)\n      goto end_justifies;\n   if (width >= snprintf(buf, sizeof(buf), \"%lu\", num))\n      goto end_justifies;\n\n   scaled_num = num;\n   for (psfx = Scaled_sfxtab; 0 < *psfx; psfx++) {\n      scaled_num /= 1024.0;\n      if (width >= snprintf(buf, sizeof(buf), \"%.1f%c\", scaled_num, *psfx))\n         goto end_justifies;\n      if (width >= snprintf(buf, sizeof(buf), \"%.0f%c\", scaled_num, *psfx))\n         goto end_justifies;\n   }\n\n   // well shoot, this outta' fit...\n   snprintf(buf, sizeof(buf), \"?\");\nend_justifies:\n   return justify_pad(buf, width, justr);\n} // end: scale_num\n\n\n        /*\n         * Make and then justify a percentage, with decreasing precision. */\nstatic const char *scale_pcnt (float num, int width, int justr) {\n   static char buf[SMLBUFSIZ];\n\n   buf[0] = '\\0';\n   if (Rc.zero_suppress && 0 >= num)\n      goto end_justifies;\n#ifdef BOOST_PERCNT\n   if (width >= snprintf(buf, sizeof(buf), \"%#.3f\", num))\n      goto end_justifies;\n   if (width >= snprintf(buf, sizeof(buf), \"%#.2f\", num))\n      goto end_justifies;\n#endif\n   if (width >= snprintf(buf, sizeof(buf), \"%#.1f\", num))\n      goto end_justifies;\n   if (width >= snprintf(buf, sizeof(buf), \"%*.0f\", width, num))\n      goto end_justifies;\n\n   // well shoot, this outta' fit...\n   snprintf(buf, sizeof(buf), \"?\");\nend_justifies:\n   return justify_pad(buf, width, justr);\n} // end: scale_pcnt\n\n\n        /*\n         * Do some scaling stuff.\n         * Format 'tics' to fit 'width', then justify it. */\nstatic const char *scale_tics (TIC_t tics, int width, int justr) {\n#ifdef CASEUP_SUFIX\n #define HH \"%uH\"                                                  // nls_maybe\n #define DD \"%uD\"\n #define WW \"%uW\"\n#else\n #define HH \"%uh\"                                                  // nls_maybe\n #define DD \"%ud\"\n #define WW \"%uw\"\n#endif\n   static char buf[SMLBUFSIZ];\n   unsigned long nt;    // narrow time, for speed on 32-bit\n   unsigned cc;         // centiseconds\n   unsigned nn;         // multi-purpose whatever\n\n   buf[0] = '\\0';\n   nt  = (tics * 100ull) / Hertz;               // up to 68 weeks of cpu time\n   if (Rc.zero_suppress && 0 >= nt)\n      goto end_justifies;\n   cc  = nt % 100;                              // centiseconds past second\n   nt /= 100;                                   // total seconds\n   nn  = nt % 60;                               // seconds past the minute\n   nt /= 60;                                    // total minutes\n   if (width >= snprintf(buf, sizeof(buf), \"%lu:%02u.%02u\", nt, nn, cc))\n      goto end_justifies;\n   if (width >= snprintf(buf, sizeof(buf), \"%lu:%02u\", nt, nn))\n      goto end_justifies;\n   nn  = nt % 60;                               // minutes past the hour\n   nt /= 60;                                    // total hours\n   if (width >= snprintf(buf, sizeof(buf), \"%lu,%02u\", nt, nn))\n      goto end_justifies;\n   nn = nt;                                     // now also hours\n   if (width >= snprintf(buf, sizeof(buf), HH, nn))\n      goto end_justifies;\n   nn /= 24;                                    // now days\n   if (width >= snprintf(buf, sizeof(buf), DD, nn))\n      goto end_justifies;\n   nn /= 7;                                     // now weeks\n   if (width >= snprintf(buf, sizeof(buf), WW, nn))\n      goto end_justifies;\n\n   // well shoot, this outta' fit...\n   snprintf(buf, sizeof(buf), \"?\");\nend_justifies:\n   return justify_pad(buf, width, justr);\n #undef HH\n #undef DD\n #undef WW\n} // end: scale_tics\n\f\n/*######  Fields Management support  #####################################*/\n\n   /* These are the Fieldstab.lflg values used here and in calibrate_fields.\n      (own identifiers as documentation and protection against changes) */\n#define L_stat     PROC_FILLSTAT\n#define L_statm    PROC_FILLMEM\n#define L_status   PROC_FILLSTATUS\n#define L_CGROUP   PROC_EDITCGRPCVT | PROC_FILLCGROUP\n#define L_CMDLINE  PROC_EDITCMDLCVT | PROC_FILLARG\n#define L_ENVIRON  PROC_EDITENVRCVT | PROC_FILLENV\n#define L_EUSER    PROC_FILLUSR\n#define L_OUSER    PROC_FILLSTATUS | PROC_FILLUSR\n#define L_EGROUP   PROC_FILLSTATUS | PROC_FILLGRP\n#define L_SUPGRP   PROC_FILLSTATUS | PROC_FILLSUPGRP\n#define L_NS       PROC_FILLNS\n#define L_LXC      PROC_FILL_LXC\n#define L_OOM      PROC_FILLOOM\n   // make 'none' non-zero (used to be important to Frames_libflags)\n#define L_NONE     PROC_SPARE_1\n   // from 'status' or 'stat' (favor stat), via bits not otherwise used\n#define L_EITHER   PROC_SPARE_2\n   // for calibrate_fields and summary_show 1st pass\n#define L_DEFAULT  PROC_FILLSTAT\n\n        /* These are our gosh darn 'Fields' !\n           They MUST be kept in sync with pflags !! */\nstatic FLD_t Fieldstab[] = {\n   // a temporary macro, soon to be undef'd...\n #define SF(f) (QFP_t)SCB_NAME(f)\n   // these identifiers reflect the default column alignment but they really\n   // contain the WIN_t flag used to check/change justification at run-time!\n #define A_left  Show_JRSTRS       /* toggled with lower case 'j' */\n #define A_right Show_JRNUMS       /* toggled with upper case 'J' */\n\n/* .width anomalies:\n        a -1 width represents variable width columns\n        a  0 width represents columns set once at startup (see zap_fieldstab)\n   .lflg anomalies:\n        EU_UED, L_NONE - natural outgrowth of 'stat()' in readproc        (euid)\n        EU_CPU, L_stat - never filled by libproc, but requires times      (pcpu)\n        EU_CMD, L_stat - may yet require L_CMDLINE in calibrate_fields    (cmd/cmdline)\n        L_EITHER       - favor L_stat (L_status == ++cost of gpref & hash scheme)\n\n     .width  .scale  .align    .sort     .lflg\n     ------  ------  --------  --------  --------  */\n   {     0,     -1,  A_right,  SF(PID),  L_NONE    },\n   {     0,     -1,  A_right,  SF(PPD),  L_EITHER  },\n   {     5,     -1,  A_right,  SF(UED),  L_NONE    },\n   {     8,     -1,  A_left,   SF(UEN),  L_EUSER   },\n   {     5,     -1,  A_right,  SF(URD),  L_status  },\n   {     8,     -1,  A_left,   SF(URN),  L_OUSER   },\n   {     5,     -1,  A_right,  SF(USD),  L_status  },\n   {     8,     -1,  A_left,   SF(USN),  L_OUSER   },\n   {     5,     -1,  A_right,  SF(GID),  L_NONE    },\n   {     8,     -1,  A_left,   SF(GRP),  L_EGROUP  },\n   {     0,     -1,  A_right,  SF(PGD),  L_stat    },\n   {     8,     -1,  A_left,   SF(TTY),  L_stat    },\n   {     0,     -1,  A_right,  SF(TPG),  L_stat    },\n   {     0,     -1,  A_right,  SF(SID),  L_stat    },\n   {     3,     -1,  A_right,  SF(PRI),  L_stat    },\n   {     3,     -1,  A_right,  SF(NCE),  L_stat    },\n   {     3,     -1,  A_right,  SF(THD),  L_EITHER  },\n   {     0,     -1,  A_right,  SF(CPN),  L_stat    },\n   {     5,     -1,  A_right,  SF(CPU),  L_stat    },\n   {     6,     -1,  A_right,  SF(TME),  L_stat    },\n   {     9,     -1,  A_right,  SF(TME),  L_stat    }, // EU_TM2 slot\n   {     5,     -1,  A_right,  SF(RES),  L_statm   }, // EU_MEM slot\n   {     7,  SK_Kb,  A_right,  SF(VRT),  L_statm   },\n   {     6,  SK_Kb,  A_right,  SF(SWP),  L_status  },\n   {     6,  SK_Kb,  A_right,  SF(RES),  L_statm   },\n   {     6,  SK_Kb,  A_right,  SF(COD),  L_statm   },\n   {     7,  SK_Kb,  A_right,  SF(DAT),  L_statm   },\n   {     6,  SK_Kb,  A_right,  SF(SHR),  L_statm   },\n   {     4,     -1,  A_right,  SF(FL1),  L_stat    },\n   {     4,     -1,  A_right,  SF(FL2),  L_stat    },\n   {     4,     -1,  A_right,  SF(DRT),  L_statm   },\n   {     1,     -1,  A_right,  SF(STA),  L_EITHER  },\n   {    -1,     -1,  A_left,   SF(CMD),  L_EITHER  },\n   {    10,     -1,  A_left,   SF(WCH),  L_stat    },\n   {     8,     -1,  A_left,   SF(FLG),  L_stat    },\n   {    -1,     -1,  A_left,   SF(CGR),  L_CGROUP  },\n   {    -1,     -1,  A_left,   SF(SGD),  L_status  },\n   {    -1,     -1,  A_left,   SF(SGN),  L_SUPGRP  },\n   {     0,     -1,  A_right,  SF(TGD),  L_NONE    },\n   {     5,     -1,  A_right,  SF(OOA),  L_OOM     },\n   {     4,     -1,  A_right,  SF(OOM),  L_OOM     },\n   {    -1,     -1,  A_left,   SF(ENV),  L_ENVIRON },\n   {     3,     -1,  A_right,  SF(FV1),  L_stat    },\n   {     3,     -1,  A_right,  SF(FV2),  L_stat    },\n   {     6,  SK_Kb,  A_right,  SF(USE),  L_status  },\n   {    10,     -1,  A_right,  SF(NS1),  L_NS      }, // IPCNS\n   {    10,     -1,  A_right,  SF(NS2),  L_NS      }, // MNTNS\n   {    10,     -1,  A_right,  SF(NS3),  L_NS      }, // NETNS\n   {    10,     -1,  A_right,  SF(NS4),  L_NS      }, // PIDNS\n   {    10,     -1,  A_right,  SF(NS5),  L_NS      }, // USERNS\n   {    10,     -1,  A_right,  SF(NS6),  L_NS      }, // UTSNS\n   {     8,     -1,  A_left,   SF(LXC),  L_LXC     },\n   {     6,  SK_Kb,  A_right,  SF(RZA),  L_status  },\n   {     6,  SK_Kb,  A_right,  SF(RZF),  L_status  },\n   {     6,  SK_Kb,  A_right,  SF(RZL),  L_status  },\n   {     6,  SK_Kb,  A_right,  SF(RZS),  L_status  },\n   {    -1,     -1,  A_left,   SF(CGN),  L_CGROUP  },\n   {     0,     -1,  A_right,  SF(NMA),  L_stat    },\n #undef SF\n #undef A_left\n #undef A_right\n};\n\n\n        /*\n         * A calibrate_fields() *Helper* function to refresh the\n         * cached screen geometry and related variables */\nstatic void adj_geometry (void) {\n   static size_t pseudo_max = 0;\n   static int w_set = 0, w_cols = 0, w_rows = 0;\n   struct winsize wz;\n\n   Screen_cols = columns;    // <term.h>\n   Screen_rows = lines;      // <term.h>\n\n   if (-1 != ioctl(STDOUT_FILENO, TIOCGWINSZ, &wz)\n   && 0 < wz.ws_col && 0 < wz.ws_row) {\n      Screen_cols = wz.ws_col;\n      Screen_rows = wz.ws_row;\n   }\n\n#ifndef RMAN_IGNORED\n   // be crudely tolerant of crude tty emulators\n   if (Cap_avoid_eol) Screen_cols--;\n#endif\n\n   // we might disappoint some folks (but they'll deserve it)\n   if (Screen_cols > SCREENMAX) Screen_cols = SCREENMAX;\n   if (Screen_cols < W_MIN_COL) Screen_cols = W_MIN_COL;\n\n   if (!w_set) {\n      if (Width_mode > 0)              // -w with arg, we'll try to honor\n         w_cols = Width_mode;\n      else\n      if (Width_mode < 0) {            // -w without arg, try environment\n         char *env_columns = getenv(\"COLUMNS\"),\n              *env_lines = getenv(\"LINES\"),\n              *ep;\n         if (env_columns && *env_columns) {\n            long t, tc = 0;\n            t = strtol(env_columns, &ep, 0);\n            if (!*ep && (t > 0) && (t <= 0x7fffffffL)) tc = t;\n            if (0 < tc) w_cols = (int)tc;\n         }\n         if (env_lines && *env_lines) {\n            long t, tr = 0;\n            t = strtol(env_lines, &ep, 0);\n            if (!*ep && (t > 0) && (t <= 0x7fffffffL)) tr = t;\n            if (0 < tr) w_rows = (int)tr;\n         }\n         if (!w_cols) w_cols = SCREENMAX;\n         if (w_cols && w_cols < W_MIN_COL) w_cols = W_MIN_COL;\n         if (w_rows && w_rows < W_MIN_ROW) w_rows = W_MIN_ROW;\n      }\n      if (w_cols > SCREENMAX) w_cols = SCREENMAX;\n      w_set = 1;\n   }\n\n   /* keep our support for output optimization in sync with current reality\n      note: when we're in Batch mode, we don't really need a Pseudo_screen\n            and when not Batch, our buffer will contain 1 extra 'line' since\n            Msg_row is never represented -- but it's nice to have some space\n            between us and the great-beyond... */\n   if (Batch) {\n      if (w_cols) Screen_cols = w_cols;\n      Screen_rows = w_rows ? w_rows : INT_MAX;\n      Pseudo_size = (sizeof(*Pseudo_screen) * ROWMAXSIZ);\n   } else {\n      const int max_rows = INT_MAX / (sizeof(*Pseudo_screen) * ROWMAXSIZ);\n      if (w_cols && w_cols < Screen_cols) Screen_cols = w_cols;\n      if (w_rows && w_rows < Screen_rows) Screen_rows = w_rows;\n      if (Screen_rows < 0 || Screen_rows > max_rows) Screen_rows = max_rows;\n      Pseudo_size = (sizeof(*Pseudo_screen) * ROWMAXSIZ) * Screen_rows;\n   }\n   // we'll only grow our Pseudo_screen, never shrink it\n   if (pseudo_max < Pseudo_size) {\n      pseudo_max = Pseudo_size;\n      Pseudo_screen = alloc_r(Pseudo_screen, pseudo_max);\n   }\n   // ensure each row is repainted (just in case)\n   PSU_CLREOS(0);\n\n   // prepare to customize potential cpu/memory graphs\n   Graph_len = Screen_cols - GRAPH_prefix - GRAPH_actual - GRAPH_suffix;\n   if (Graph_len >= 0) Graph_len = GRAPH_actual;\n   else if (Screen_cols > 80) Graph_len = Screen_cols - GRAPH_prefix - GRAPH_suffix;\n   else Graph_len = 80 - GRAPH_prefix - GRAPH_suffix;\n   Graph_adj = (float)Graph_len / 100.0;\n\n   fflush(stdout);\n   Frames_signal = BREAK_off;\n} // end: adj_geometry\n\n\n        /*\n         * A calibrate_fields() *Helper* function to build the\n         * actual column headers and required library flags */\nstatic void build_headers (void) {\n   FLG_t f;\n   char *s;\n   WIN_t *w = Curwin;\n#ifdef EQUCOLHDRYES\n   int x, hdrmax = 0;\n#endif\n   int i;\n\n   Frames_libflags = 0;\n\n   do {\n      if (VIZISw(w)) {\n         memset((s = w->columnhdr), 0, sizeof(w->columnhdr));\n         if (Rc.mode_altscr) s = scat(s, fmtmk(\"%d\", w->winnum));\n         for (i = 0; i < w->maxpflgs; i++) {\n            f = w->procflgs[i];\n#ifdef USE_X_COLHDR\n            if (CHKw(w, Show_HICOLS) && f == w->rc.sortindx) {\n               s = scat(s, fmtmk(\"%s%s\", Caps_off, w->capclr_msg));\n               w->hdrcaplen += strlen(Caps_off) + strlen(w->capclr_msg);\n            }\n#else\n            if (EU_MAXPFLGS <= f) continue;\n#endif\n            if (EU_CMD == f && CHKw(w, Show_CMDLIN)) Frames_libflags |= L_CMDLINE;\n            Frames_libflags |= Fieldstab[f].lflg;\n            s = scat(s, utf8_justify(N_col(f)\n               , VARcol(f) ? w->varcolsz : Fieldstab[f].width\n               , CHKw(w, Fieldstab[f].align)));\n#ifdef USE_X_COLHDR\n            if (CHKw(w, Show_HICOLS) && f == w->rc.sortindx) {\n               s = scat(s, fmtmk(\"%s%s\", Caps_off, w->capclr_hdr));\n               w->hdrcaplen += strlen(Caps_off) + strlen(w->capclr_hdr);\n            }\n#endif\n         }\n#ifdef EQUCOLHDRYES\n         // prepare to even out column header lengths...\n         if (hdrmax + w->hdrcaplen < (x = strlen(w->columnhdr))) hdrmax = x - w->hdrcaplen;\n#endif\n         // with forest view mode, we'll need tgid, ppid & start_time...\n         if (CHKw(w, Show_FOREST)) Frames_libflags |= L_stat;\n         // for 'busy' only processes, we'll need pcpu (utime & stime)...\n         if (!CHKw(w, Show_IDLEPS)) Frames_libflags |= L_stat;\n         // we must also accommodate an out of view sort field...\n         f = w->rc.sortindx;\n         Frames_libflags |= Fieldstab[f].lflg;\n         if (EU_CMD == f && CHKw(w, Show_CMDLIN)) Frames_libflags |= L_CMDLINE;\n         // for 'U' filtering we need the other user ids too\n         if (w->usrseltyp == 'U') Frames_libflags |= L_status;\n      } // end: VIZISw(w)\n\n      if (Rc.mode_altscr) w = w->next;\n   } while (w != Curwin);\n\n#ifdef EQUCOLHDRYES\n   /* now we can finally even out column header lengths\n      (we're assuming entire columnhdr was memset to '\\0') */\n   if (Rc.mode_altscr && SCREENMAX > Screen_cols)\n      for (i = 0; i < GROUPSMAX; i++) {\n         w = &Winstk[i];\n         if (CHKw(w, Show_TASKON))\n            if (hdrmax + w->hdrcaplen > (x = strlen(w->columnhdr)))\n               memset(&w->columnhdr[x], ' ', hdrmax + w->hdrcaplen - x);\n      }\n#endif\n\n   // finalize/touchup the libproc PROC_FILLxxx flags for current config...\n   if (Frames_libflags & L_EITHER) {\n      if (!(Frames_libflags & (L_stat | L_status)))\n         Frames_libflags |= L_stat;\n   }\n   if (!Frames_libflags) Frames_libflags = L_DEFAULT;\n   if (Monpidsidx) Frames_libflags |= PROC_PID;\n} // end: build_headers\n\n\n        /*\n         * This guy coordinates the activities surrounding the maintenance\n         * of each visible window's columns headers and the library flags\n         * required for the openproc interface. */\nstatic void calibrate_fields (void) {\n   FLG_t f;\n   char *s;\n   const char *h;\n   WIN_t *w = Curwin;\n   int i, varcolcnt, len;\n\n   adj_geometry();\n\n   do {\n      if (VIZISw(w)) {\n         w->hdrcaplen = 0;   // really only used with USE_X_COLHDR\n         // build window's pflgsall array, establish upper bounds for maxpflgs\n         for (i = 0, w->totpflgs = 0; i < EU_MAXPFLGS; i++) {\n            if (FLDviz(w, i)) {\n               f = FLDget(w, i);\n#ifdef USE_X_COLHDR\n               w->pflgsall[w->totpflgs++] = f;\n#else\n               if (CHKw(w, Show_HICOLS) && f == w->rc.sortindx) {\n                  w->pflgsall[w->totpflgs++] = EU_XON;\n                  w->pflgsall[w->totpflgs++] = f;\n                  w->pflgsall[w->totpflgs++] = EU_XOF;\n               } else\n                  w->pflgsall[w->totpflgs++] = f;\n#endif\n            }\n         }\n         if (!w->totpflgs) w->pflgsall[w->totpflgs++] = EU_PID;\n\n         /* build a preliminary columns header not to exceed screen width\n            while accounting for a possible leading window number */\n         w->varcolsz = varcolcnt = 0;\n         *(s = w->columnhdr) = '\\0';\n         if (Rc.mode_altscr) s = scat(s, \" \");\n         for (i = 0; i + w->begpflg < w->totpflgs; i++) {\n            f = w->pflgsall[i + w->begpflg];\n            w->procflgs[i] = f;\n#ifndef USE_X_COLHDR\n            if (EU_MAXPFLGS <= f) continue;\n#endif\n            h = N_col(f);\n            len = (VARcol(f) ? (int)strlen(h) : Fieldstab[f].width) + COLPADSIZ;\n            // oops, won't fit -- we're outta here...\n            if (Screen_cols < ((int)(s - w->columnhdr) + len)) break;\n            if (VARcol(f)) { ++varcolcnt; w->varcolsz += strlen(h); }\n            s = scat(s, fmtmk(\"%*.*s\", len, len, h));\n         }\n#ifndef USE_X_COLHDR\n         if (i >= 1 && EU_XON == w->procflgs[i - 1]) --i;\n#endif\n\n         /* establish the final maxpflgs and prepare to grow the variable column\n            heading(s) via varcolsz - it may be a fib if their pflags weren't\n            encountered, but that's ok because they won't be displayed anyway */\n         w->maxpflgs = i;\n         w->varcolsz += Screen_cols - strlen(w->columnhdr);\n         if (varcolcnt) w->varcolsz /= varcolcnt;\n\n         /* establish the field where all remaining fields would still\n            fit within screen width, including a leading window number */\n         *(s = w->columnhdr) = '\\0';\n         if (Rc.mode_altscr) s = scat(s, \" \");\n         w->endpflg = 0;\n         for (i = w->totpflgs - 1; -1 < i; i--) {\n            f = w->pflgsall[i];\n#ifndef USE_X_COLHDR\n            if (EU_MAXPFLGS <= f) { w->endpflg = i; continue; }\n#endif\n            h = N_col(f);\n            len = (VARcol(f) ? (int)strlen(h) : Fieldstab[f].width) + COLPADSIZ;\n            if (Screen_cols < ((int)(s - w->columnhdr) + len)) break;\n            s = scat(s, fmtmk(\"%*.*s\", len, len, h));\n            w->endpflg = i;\n         }\n#ifndef USE_X_COLHDR\n         if (EU_XOF == w->pflgsall[w->endpflg]) ++w->endpflg;\n#endif\n      } // end: if (VIZISw(w))\n\n      if (Rc.mode_altscr) w = w->next;\n   } while (w != Curwin);\n\n   build_headers();\n} // end: calibrate_fields\n\n\n        /*\n         * Display each field represented in the current window's fieldscur\n         * array along with its description.  Mark with bold and a leading\n         * asterisk those fields associated with the \"on\" or \"active\" state.\n         *\n         * Special highlighting will be accorded the \"focus\" field with such\n         * highlighting potentially extended to include the description.\n         *\n         * Below is the current Fieldstab space requirement and how\n         * we apportion it.  The xSUFX is considered sacrificial,\n         * something we can reduce or do without.\n         *            0        1         2         3\n         *            12345678901234567890123456789012\n         *            * HEADING = Longest Description!\n         *      xPRFX ----------______________________ xSUFX\n         *    ( xPRFX has pos 2 & 10 for 'extending' when at minimums )\n         *\n         * The first 4 screen rows are reserved for explanatory text, and\n         * the maximum number of columns is Screen_cols / xPRFX + 1 space\n         * between columns.  Thus, for example, with 42 fields a tty will\n         * still remain useable under these extremes:\n         *       rows       columns     what's\n         *       tty  top   tty  top    displayed\n         *       ---  ---   ---  ---    ------------------\n         *        46   42    10    1    xPRFX only\n         *        46   42    32    1    full xPRFX + xSUFX\n         *         6    2   231   21    xPRFX only\n         *        10    6   231    7    full xPRFX + xSUFX\n         */\nstatic void display_fields (int focus, int extend) {\n #define mkERR { putp(\"\\n\"); putp(N_txt(XTRA_winsize_txt)); return; }\n #define mxCOL ( (Screen_cols / 11) > 0 ? (Screen_cols / 11) : 1 )\n #define yRSVD  4\n #define xEQUS  2                      // length of suffix beginning '= '\n #define xSUFX  22                     // total suffix length, incl xEQUS\n #define xPRFX (10 + xadd)\n #define xTOTL (xPRFX + xSUFX)\n   static int col_sav, row_sav;\n   WIN_t *w = Curwin;                  // avoid gcc bloat with a local copy\n   int i;                              // utility int (a row, tot cols, ix)\n   int smax;                           // printable width of xSUFX\n   int xadd = 0;                       // spacing between data columns\n   int cmax = Screen_cols;             // total data column width\n   int rmax = Screen_rows - yRSVD;     // total useable rows\n\n   i = (EU_MAXPFLGS % mxCOL) ? 1 : 0;\n   if (rmax < i + (EU_MAXPFLGS / mxCOL)) mkERR;\n   i = EU_MAXPFLGS / rmax;\n   if (EU_MAXPFLGS % rmax) ++i;\n   if (i > 1) { cmax /= i; xadd = 1; }\n   if (cmax > xTOTL) cmax = xTOTL;\n   smax = cmax - xPRFX;\n   if (smax < 0) mkERR;\n\n   /* we'll go the extra distance to avoid any potential screen flicker\n      which occurs under some terminal emulators (but it was our fault) */\n   if (col_sav != Screen_cols || row_sav != Screen_rows) {\n      col_sav = Screen_cols;\n      row_sav = Screen_rows;\n      putp(Cap_clr_eos);\n   }\n   fflush(stdout);\n\n   for (i = 0; i < EU_MAXPFLGS; ++i) {\n      int b = FLDviz(w, i), x = (i / rmax) * cmax, y = (i % rmax) + yRSVD;\n      const char *e = (i == focus && extend) ? w->capclr_hdr : \"\";\n      FLG_t f = FLDget(w, i);\n      char sbuf[xSUFX*4];                        // 4 = max multi-byte\n      int xcol, xfld;\n\n      /* prep sacrificial suffix (allowing for beginning '= ')\n         note: width passed to 'utf8_embody' may go negative, but he'll be just fine */\n      snprintf(sbuf, sizeof(sbuf), \"= %.*s\", utf8_embody(N_fld(f), smax - xEQUS), N_fld(f));\n\n      // obtain translated deltas (if any) ...\n      xcol = utf8_delta(fmtmk(\"%.*s\", utf8_embody(N_col(f), 7), N_col(f)));\n      xfld = utf8_delta(sbuf + xEQUS);           // ignore beginning '= '\n\n      PUTT(\"%s%c%s%s %s%-*.*s%s%s%s %-*.*s%s\"\n         , tg2(x, y)\n         , b ? '*' : ' '\n         , b ? w->cap_bold : Cap_norm\n         , e\n         , i == focus ? w->capclr_hdr : \"\"\n         , 7 + xcol, 7 + xcol\n         , N_col(f)\n         , Cap_norm\n         , b ? w->cap_bold : \"\"\n         , e\n         , smax + xfld, smax + xfld\n         , sbuf\n         , Cap_norm);\n   }\n\n   putp(Caps_off);\n #undef mkERR\n #undef mxCOL\n #undef yRSVD\n #undef xEQUS\n #undef xSUFX\n #undef xPRFX\n #undef xTOTL\n} // end: display_fields\n\n\n        /*\n         * Manage all fields aspects (order/toggle/sort), for all windows. */\nstatic void fields_utility (void) {\n#ifndef SCROLLVAR_NO\n #define unSCRL  { w->begpflg = w->varcolbeg = 0; OFFw(w, Show_HICOLS); }\n#else\n #define unSCRL  { w->begpflg = 0; OFFw(w, Show_HICOLS); }\n#endif\n #define swapEM  { char c; unSCRL; c = w->rc.fieldscur[i]; \\\n       w->rc.fieldscur[i] = *p; *p = c; p = &w->rc.fieldscur[i]; }\n #define spewFI  { char *t; f = w->rc.sortindx; t = strchr(w->rc.fieldscur, f + FLD_OFFSET); \\\n       if (!t) t = strchr(w->rc.fieldscur, (f + FLD_OFFSET) | 0x80); \\\n       i = (t) ? (int)(t - w->rc.fieldscur) : 0; }\n   WIN_t *w = Curwin;             // avoid gcc bloat with a local copy\n   const char *h = NULL;\n   char *p = NULL;\n   int i, key;\n   FLG_t f;\n\n   spewFI\nsignify_that:\n   putp(Cap_clr_scr);\n   adj_geometry();\n\n   do {\n      if (!h) h = N_col(f);\n      putp(Cap_home);\n      show_special(1, fmtmk(N_unq(FIELD_header_fmt)\n         , w->grpname, CHKw(w, Show_FOREST) ? N_txt(FOREST_views_txt) : h));\n      display_fields(i, (p != NULL));\n      fflush(stdout);\n\n      if (Frames_signal) goto signify_that;\n      key = iokey(1);\n      if (key < 1) goto signify_that;\n\n      switch (key) {\n         case kbd_UP:\n            if (i > 0) { --i; if (p) swapEM }\n            break;\n         case kbd_DOWN:\n            if (i + 1 < EU_MAXPFLGS) { ++i; if (p) swapEM }\n            break;\n         case kbd_LEFT:\n         case kbd_ENTER:\n            p = NULL;\n            break;\n         case kbd_RIGHT:\n            p = &w->rc.fieldscur[i];\n            break;\n         case kbd_HOME:\n         case kbd_PGUP:\n            if (!p) i = 0;\n            break;\n         case kbd_END:\n         case kbd_PGDN:\n            if (!p) i = EU_MAXPFLGS - 1;\n            break;\n         case kbd_SPACE:\n         case 'd':\n            if (!p) { FLDtog(w, i); unSCRL }\n            break;\n         case 's':\n#ifdef TREE_NORESET\n            if (!p && !CHKw(w, Show_FOREST)) { w->rc.sortindx = f = FLDget(w, i); h = NULL; unSCRL }\n#else\n            if (!p) { w->rc.sortindx = f = FLDget(w, i); h = NULL; unSCRL; OFFw(w, Show_FOREST); }\n#endif\n            break;\n         case 'a':\n         case 'w':\n            Curwin = w = ('a' == key) ? w->next : w->prev;\n            spewFI\n            h = p = NULL;\n            break;\n         default:                 // keep gcc happy\n            break;\n      }\n   } while (key != 'q' && key != kbd_ESC);\n #undef unSCRL\n #undef swapEM\n #undef spewFI\n} // end: fields_utility\n\n\n        /*\n         * This routine takes care of auto sizing field widths\n         * if/when the user sets Rc.fixed_widest to -1.  Along the\n         * way he reinitializes some things for the next frame. */\nstatic inline void widths_resize (void) {\n   int i;\n\n   // next var may also be set by the guys that actually truncate stuff\n   Autox_found = 0;\n   for (i = 0; i < EU_MAXPFLGS; i++) {\n      if (Autox_array[i]) {\n         Fieldstab[i].width++;\n         Autox_array[i] = 0;\n         Autox_found = 1;\n      }\n   }\n   if (Autox_found) calibrate_fields();\n} // end: widths_resize\n\n\n        /*\n         * This routine exists just to consolidate most of the messin'\n         * around with the Fieldstab array and some related stuff. */\nstatic void zap_fieldstab (void) {\n#ifdef WIDEN_COLUMN\n #define maX(E) ( (wtab[E].wnls > wtab[E].wmin) \\\n  ? wtab[E].wnls : wtab[E].wmin )\n   static struct {\n      int wmin;         // minimum field width (-1 == variable width)\n      int wnls;         // translated header column requirements\n      int watx;         // +1 == non-scalable auto sized columns\n   } wtab[EU_MAXPFLGS];\n#endif\n   static int once;\n   unsigned digits;\n   char buf[8];\n   int i;\n\n   if (!once) {\n      Fieldstab[EU_CPN].width = 1;\n      Fieldstab[EU_NMA].width = 2;\n      Fieldstab[EU_PID].width = Fieldstab[EU_PPD].width\n         = Fieldstab[EU_PGD].width = Fieldstab[EU_SID].width\n         = Fieldstab[EU_TGD].width = Fieldstab[EU_TPG].width = 5;\n      if (5 < (digits = get_pid_digits())) {\n         if (10 < digits) error_exit(N_txt(FAIL_widepid_txt));\n         Fieldstab[EU_PID].width = Fieldstab[EU_PPD].width\n            = Fieldstab[EU_PGD].width = Fieldstab[EU_SID].width\n            = Fieldstab[EU_TGD].width = Fieldstab[EU_TPG].width = digits;\n      }\n#ifdef WIDEN_COLUMN\n      // identify our non-scalable auto sized columns\n      wtab[EU_UED].watx = wtab[EU_UEN].watx = wtab[EU_URD].watx\n         = wtab[EU_URN].watx = wtab[EU_USD].watx = wtab[EU_USN].watx\n         = wtab[EU_GID].watx = wtab[EU_GRP].watx = wtab[EU_TTY].watx\n         = wtab[EU_WCH].watx = wtab[EU_NS1].watx = wtab[EU_NS2].watx\n         = wtab[EU_NS3].watx = wtab[EU_NS4].watx = wtab[EU_NS5].watx\n         = wtab[EU_NS6].watx = wtab[EU_LXC].watx = +1;\n      /* establish translatable header 'column' requirements\n         and ensure .width reflects the widest value */\n      for (i = 0; i < EU_MAXPFLGS; i++) {\n         wtab[i].wmin = Fieldstab[i].width;\n         wtab[i].wnls = (int)strlen(N_col(i)) - utf8_delta(N_col(i));\n         if (wtab[i].wmin != -1)\n            Fieldstab[i].width = maX(i);\n      }\n#endif\n      once = 1;\n   }\n\n   /*** hotplug_acclimated ***/\n\n   Cpu_pmax = 99.9;\n   if (Rc.mode_irixps && smp_num_cpus > 1 && !Thread_mode) {\n      Cpu_pmax = 100.0 * smp_num_cpus;\n      if (smp_num_cpus > 10) {\n         if (Cpu_pmax > 99999.0) Cpu_pmax = 99999.0;\n      } else {\n         if (Cpu_pmax > 999.9) Cpu_pmax = 999.9;\n      }\n   }\n\n#ifdef WIDEN_COLUMN\n   digits = (unsigned)snprintf(buf, sizeof(buf), \"%u\", (unsigned)smp_num_cpus);\n   if (wtab[EU_CPN].wmin < digits) {\n      if (5 < digits) error_exit(N_txt(FAIL_widecpu_txt));\n      wtab[EU_CPN].wmin = digits;\n      Fieldstab[EU_CPN].width = maX(EU_CPN);\n   }\n   digits = (unsigned)snprintf(buf, sizeof(buf), \"%u\", (unsigned)Numa_node_tot);\n   if (wtab[EU_NMA].wmin < digits) {\n      wtab[EU_NMA].wmin = digits;\n      Fieldstab[EU_NMA].width = maX(EU_NMA);\n   }\n\n   // and accommodate optional wider non-scalable columns (maybe)\n   if (!AUTOX_MODE) {\n      for (i = 0; i < EU_MAXPFLGS; i++) {\n         if (wtab[i].watx)\n            Fieldstab[i].width = Rc.fixed_widest ? Rc.fixed_widest + maX(i) : maX(i);\n      }\n   }\n#else\n   digits = (unsigned)snprintf(buf, sizeof(buf), \"%u\", (unsigned)smp_num_cpus);\n   if (1 < digits) {\n      if (5 < digits) error_exit(N_txt(FAIL_widecpu_txt));\n      Fieldstab[EU_CPN].width = digits;\n   }\n   digits = (unsigned)snprintf(buf, sizeof(buf), \"%u\", (unsigned)Numa_node_tot);\n   if (2 < digits) {\n      Fieldstab[EU_NMA].width = digits;\n   }\n   // and accommodate optional wider non-scalable columns (maybe)\n   if (!AUTOX_MODE) {\n      Fieldstab[EU_UED].width = Fieldstab[EU_URD].width\n         = Fieldstab[EU_USD].width = Fieldstab[EU_GID].width\n         = Rc.fixed_widest ? 5 + Rc.fixed_widest : 5;\n      Fieldstab[EU_UEN].width = Fieldstab[EU_URN].width\n         = Fieldstab[EU_USN].width = Fieldstab[EU_GRP].width\n         = Rc.fixed_widest ? 8 + Rc.fixed_widest : 8;\n      Fieldstab[EU_TTY].width = Fieldstab[EU_LXC].width\n         = Rc.fixed_widest ? 8 + Rc.fixed_widest : 8;\n      Fieldstab[EU_WCH].width\n         = Rc.fixed_widest ? 10 + Rc.fixed_widest : 10;\n      for (i = EU_NS1; i < EU_NS1 + NUM_NS; i++)\n         Fieldstab[i].width\n            = Rc.fixed_widest ? 10 + Rc.fixed_widest : 10;\n   }\n#endif\n\n   /* plus user selectable scaling */\n   Fieldstab[EU_VRT].scale = Fieldstab[EU_SWP].scale\n      = Fieldstab[EU_RES].scale = Fieldstab[EU_COD].scale\n      = Fieldstab[EU_DAT].scale = Fieldstab[EU_SHR].scale\n      = Fieldstab[EU_USE].scale = Fieldstab[EU_RZA].scale\n      = Fieldstab[EU_RZF].scale = Fieldstab[EU_RZL].scale\n      = Fieldstab[EU_RZS].scale = Rc.task_mscale;\n\n   // lastly, ensure we've got proper column headers...\n   calibrate_fields();\n #undef maX\n} // end: zap_fieldstab\n\f\n/*######  Library Interface  #############################################*/\n\n        /*\n         * This guy's modeled on libproc's 'eight_cpu_numbers' function except\n         * we preserve all cpu data in our CPU_t array which is organized\n         * as follows:\n         *    Cpu_tics[0] thru Cpu_tics[n] == tics for each separate cpu\n         *    Cpu_tics[sumSLOT]            == tics from /proc/stat line #1\n         *  [ and beyond sumSLOT           == tics for each cpu NUMA node ] */\nstatic void cpus_refresh (void) {\n #define sumSLOT ( smp_num_cpus )\n #define totSLOT ( 1 + smp_num_cpus + Numa_node_tot)\n   static FILE *fp = NULL;\n   static int siz, sav_slot = -1;\n   static char *buf;\n   CPU_t *sum_ptr;                               // avoid gcc subscript bloat\n   int i, num, tot_read;\n   int node;\n   char *bp;\n\n   /*** hotplug_acclimated ***/\n   if (sav_slot != sumSLOT) {\n      sav_slot = sumSLOT;\n      zap_fieldstab();\n      if (fp) { fclose(fp); fp = NULL; }\n      if (Cpu_tics) free(Cpu_tics);\n   }\n\n   /* by opening this file once, we'll avoid the hit on minor page faults\n      (sorry Linux, but you'll have to close it for us) */\n   if (!fp) {\n      if (!(fp = fopen(\"/proc/stat\", \"r\")))\n         error_exit(fmtmk(N_fmt(FAIL_statopn_fmt), strerror(errno)));\n      /* note: we allocate one more CPU_t via totSLOT than 'cpus' so that a\n               slot can hold tics representing the /proc/stat cpu summary */\n      Cpu_tics = alloc_c(totSLOT * sizeof(CPU_t));\n   }\n   rewind(fp);\n   fflush(fp);\n\n #define buffGRW 1024\n   /* we slurp in the entire directory thus avoiding repeated calls to fgets,\n      especially in a massively parallel environment.  additionally, each cpu\n      line is then frozen in time rather than changing until we get around to\n      accessing it.  this helps to minimize (not eliminate) most distortions. */\n   tot_read = 0;\n   if (buf) buf[0] = '\\0';\n   else buf = alloc_c((siz = buffGRW));\n   while (0 < (num = fread(buf + tot_read, 1, (siz - tot_read), fp))) {\n      tot_read += num;\n      if (tot_read < siz) break;\n      buf = alloc_r(buf, (siz += buffGRW));\n   };\n   buf[tot_read] = '\\0';\n   bp = buf;\n #undef buffGRW\n\n   // remember from last time around\n   sum_ptr = &Cpu_tics[sumSLOT];\n   memcpy(&sum_ptr->sav, &sum_ptr->cur, sizeof(CT_t));\n   // then value the last slot with the cpu summary line\n   if (4 > sscanf(bp, \"cpu %llu %llu %llu %llu %llu %llu %llu %llu\"\n      , &sum_ptr->cur.u, &sum_ptr->cur.n, &sum_ptr->cur.s\n      , &sum_ptr->cur.i, &sum_ptr->cur.w, &sum_ptr->cur.x\n      , &sum_ptr->cur.y, &sum_ptr->cur.z))\n         error_exit(N_txt(FAIL_statget_txt));\n#ifndef CPU_ZEROTICS\n   sum_ptr->cur.tot = sum_ptr->cur.u + sum_ptr->cur.s\n      + sum_ptr->cur.n + sum_ptr->cur.i + sum_ptr->cur.w\n      + sum_ptr->cur.x + sum_ptr->cur.y + sum_ptr->cur.z;\n   /* if a cpu has registered substantially fewer tics than those expected,\n      we'll force it to be treated as 'idle' so as not to present misleading\n      percentages. */\n   sum_ptr->edge =\n      ((sum_ptr->cur.tot - sum_ptr->sav.tot) / smp_num_cpus) / (100 / TICS_EDGE);\n#endif\n\n   // forget all of the prior node statistics (maybe)\n   if (CHKw(Curwin, View_CPUNOD) && Numa_node_tot)\n      memset(sum_ptr + 1, 0, Numa_node_tot * sizeof(CPU_t));\n\n   // now value each separate cpu's tics...\n   for (i = 0; i < sumSLOT; i++) {\n      CPU_t *cpu_ptr = &Cpu_tics[i];           // avoid gcc subscript bloat\n#ifdef PRETEND8CPUS\n      bp = buf;\n#endif\n      bp = 1 + strchr(bp, '\\n');\n      // remember from last time around\n      memcpy(&cpu_ptr->sav, &cpu_ptr->cur, sizeof(CT_t));\n      if (4 > sscanf(bp, \"cpu%d %llu %llu %llu %llu %llu %llu %llu %llu\", &cpu_ptr->id\n         , &cpu_ptr->cur.u, &cpu_ptr->cur.n, &cpu_ptr->cur.s\n         , &cpu_ptr->cur.i, &cpu_ptr->cur.w, &cpu_ptr->cur.x\n         , &cpu_ptr->cur.y, &cpu_ptr->cur.z)) {\n            break;        // tolerate cpus taken offline\n      }\n\n#ifndef CPU_ZEROTICS\n      cpu_ptr->edge = sum_ptr->edge;\n#endif\n#ifdef PRETEND8CPUS\n      cpu_ptr->id = i;\n#endif\n      /* henceforth, with just a little more arithmetic we can avoid\n         maintaining *any* node stats unless they're actually needed */\n      if (CHKw(Curwin, View_CPUNOD)\n      && Numa_node_tot\n      && -1 < (node = numa_node_of_cpu(cpu_ptr->id))) {\n         // use our own pointer to avoid gcc subscript bloat\n         CPU_t *nod_ptr = sum_ptr + 1 + node;\n         nod_ptr->cur.u += cpu_ptr->cur.u; nod_ptr->sav.u += cpu_ptr->sav.u;\n         nod_ptr->cur.n += cpu_ptr->cur.n; nod_ptr->sav.n += cpu_ptr->sav.n;\n         nod_ptr->cur.s += cpu_ptr->cur.s; nod_ptr->sav.s += cpu_ptr->sav.s;\n         nod_ptr->cur.i += cpu_ptr->cur.i; nod_ptr->sav.i += cpu_ptr->sav.i;\n         nod_ptr->cur.w += cpu_ptr->cur.w; nod_ptr->sav.w += cpu_ptr->sav.w;\n         nod_ptr->cur.x += cpu_ptr->cur.x; nod_ptr->sav.x += cpu_ptr->sav.x;\n         nod_ptr->cur.y += cpu_ptr->cur.y; nod_ptr->sav.y += cpu_ptr->sav.y;\n         nod_ptr->cur.z += cpu_ptr->cur.z; nod_ptr->sav.z += cpu_ptr->sav.z;\n#ifndef CPU_ZEROTICS\n         /* yep, we re-value this repeatedly for each cpu encountered, but we\n            can then avoid a prior loop to selectively initialize each node */\n         nod_ptr->edge = sum_ptr->edge;\n#endif\n         cpu_ptr->node = node;\n#ifndef OFF_NUMASKIP\n         nod_ptr->id = -1;\n#endif\n      }\n   } // end: for each cpu\n\n   Cpu_faux_tot = i;      // tolerate cpus taken offline\n #undef sumSLOT\n #undef totSLOT\n} // end: cpus_refresh\n\n\n#ifdef OFF_HST_HASH\n        /*\n         * Binary Search for HST_t's put/get support */\n\nstatic inline HST_t *hstbsrch (HST_t *hst, int max, int pid) {\n   int mid, min = 0;\n\n   while (min <= max) {\n      mid = (min + max) / 2;\n      if (pid < hst[mid].pid) max = mid - 1;\n      else if (pid > hst[mid].pid) min = mid + 1;\n      else return &hst[mid];\n   }\n   return NULL;\n} // end: hstbsrch\n\n#else\n        /*\n         * Hashing functions for HST_t's put/get support\n         * (not your normal 'chaining', those damn HST_t's might move!) */\n\n#define _HASH_(K) (K & (HHASH_SIZ - 1))\n\nstatic inline HST_t *hstget (int pid) {\n   int V = PHash_sav[_HASH_(pid)];\n\n   while (-1 < V) {\n      if (PHist_sav[V].pid == pid) return &PHist_sav[V];\n      V = PHist_sav[V].lnk; }\n   return NULL;\n} // end: hstget\n\n\nstatic inline void hstput (unsigned idx) {\n   int V = _HASH_(PHist_new[idx].pid);\n\n   PHist_new[idx].lnk = PHash_new[V];\n   PHash_new[V] = idx;\n} // end: hstput\n\n#undef _HASH_\n#endif\n\n        /*\n         * Refresh procs *Helper* function to eliminate yet one more need\n         * to loop through our darn proc_t table.  He's responsible for:\n         *    1) calculating the elapsed time since the previous frame\n         *    2) counting the number of tasks in each state (run, sleep, etc)\n         *    3) maintaining the HST_t's and priming the proc_t pcpu field\n         *    4) establishing the total number tasks for this frame */\nstatic void procs_hlp (proc_t *this) {\n#ifdef OFF_HST_HASH\n   static unsigned maxt_sav = 0;        // prior frame's max tasks\n#endif\n   TIC_t tics;\n   HST_t *h;\n\n   if (!this) {\n      static double uptime_sav;\n      double uptime_cur;\n      float et;\n      void *v;\n\n      uptime(&uptime_cur, NULL);\n      et = uptime_cur - uptime_sav;\n      if (et < 0.01) et = 0.005;\n      uptime_sav = uptime_cur;\n\n      // if in Solaris mode, adjust our scaling for all cpus\n      Frame_etscale = 100.0f / ((float)Hertz * (float)et * (Rc.mode_irixps ? 1 : smp_num_cpus));\n#ifdef OFF_HST_HASH\n      maxt_sav = Frame_maxtask;\n#endif\n      Frame_maxtask = Frame_running = Frame_sleepin = Frame_stopped = Frame_zombied = 0;\n\n      // prep for saving this frame's HST_t's (and reuse mem each time around)\n      v = PHist_sav;\n      PHist_sav = PHist_new;\n      PHist_new = v;\n#ifdef OFF_HST_HASH\n      // prep for binary search by sorting the last frame's HST_t's\n      qsort(PHist_sav, maxt_sav, sizeof(HST_t), (QFP_t)sort_HST_t);\n#else\n      v = PHash_sav;\n      PHash_sav = PHash_new;\n      PHash_new = v;\n      memcpy(PHash_new, HHash_nul, sizeof(HHash_nul));\n#endif\n      return;\n   }\n\n   switch (this->state) {\n      case 'R':\n         Frame_running++;\n         break;\n      case 't':     // 't' (tracing stop)\n      case 'T':\n         Frame_stopped++;\n         break;\n      case 'Z':\n         Frame_zombied++;\n         break;\n      default:\n         /* currently: 'D' (disk sleep),\n                       'I' (idle),\n                       'P' (parked),\n                       'S' (sleeping),\n                       'X' (dead - actually 'dying' & probably never seen)\n         */\n         Frame_sleepin++;\n         break;\n   }\n\n   if (Frame_maxtask+1 >= HHist_siz) {\n      /* we're subject to integer overflow if total linux tasks ever approach |\n         400+ million (but, do you think memory might be the bigger problem?) | */\n      HHist_siz = HHist_siz * 5 / 4 + 100;\n      PHist_sav = alloc_r(PHist_sav, sizeof(HST_t) * HHist_siz);\n      PHist_new = alloc_r(PHist_new, sizeof(HST_t) * HHist_siz);\n   }\n\n   /* calculate time in this process; the sum of user time (utime) and\n      system time (stime) -- but PLEASE dont waste time and effort on\n      calcs and saves that go unused, like the old top! */\n   PHist_new[Frame_maxtask].pid  = this->tid;\n   PHist_new[Frame_maxtask].tics = tics = (this->utime + this->stime);\n   // finally, save major/minor fault counts in case the deltas are displayable\n   PHist_new[Frame_maxtask].maj = this->maj_flt;\n   PHist_new[Frame_maxtask].min = this->min_flt;\n\n#ifdef OFF_HST_HASH\n   // find matching entry from previous frame and make stuff elapsed\n   if ((h = hstbsrch(PHist_sav, maxt_sav - 1, this->tid))) {\n      tics -= h->tics;\n      this->maj_delta = this->maj_flt - h->maj;\n      this->min_delta = this->min_flt - h->min;\n   }\n#else\n   // hash & save for the next frame\n   hstput(Frame_maxtask);\n   // find matching entry from previous frame and make stuff elapsed\n   if ((h = hstget(this->tid))) {\n      tics -= h->tics;\n      this->maj_delta = this->maj_flt - h->maj;\n      this->min_delta = this->min_flt - h->min;\n   }\n#endif\n\n   /* we're just saving elapsed tics, to be converted into %cpu if\n      this task wins it's displayable screen row lottery... */\n   this->pcpu = tics;\n\n   // shout this to the world with the final call (or us the next time in)\n   Frame_maxtask++;\n} // end: procs_hlp\n\n\n        /*\n         * This guy's modeled on libproc's 'readproctab' function except\n         * we reuse and extend any prior proc_t's.  He's been customized\n         * for our specific needs and to avoid the use of <stdarg.h> */\nstatic void procs_refresh (void) {\n #define n_used  Frame_maxtask                   // maintained by procs_hlp()\n   static proc_t **private_ppt;                  // our base proc_t ptr table\n   static int n_alloc = 0;                       // size of our private_ppt\n   static int n_saved = 0;                       // last window ppt size\n   proc_t *ptask;\n   PROCTAB* PT;\n   int i;\n   proc_t *(*read_something)(PROCTAB*, proc_t *);\n\n   procs_hlp(NULL);                              // prep for a new frame\n   if (NULL == (PT = openproc(Frames_libflags, Monpids)))\n      error_exit(fmtmk(N_fmt(FAIL_openlib_fmt), strerror(errno)));\n   read_something = Thread_mode ? readeither : readproc;\n\n   for (;;) {\n      if (n_used == n_alloc) {\n         /* we're subject to integer overflow if total linux tasks ever approach |\n            400+ million (but, do you think memory might be the bigger problem?) | */\n         n_alloc = 10 + ((n_alloc * 5) / 4);     // grow by over 25%\n         private_ppt = alloc_r(private_ppt, sizeof(proc_t *) * n_alloc);\n         // ensure NULL pointers for the additional memory just acquired\n         memset(private_ppt + n_used, 0, sizeof(proc_t *) * (n_alloc - n_used));\n      }\n      // on the way to n_alloc, the library will allocate the underlying\n      // proc_t storage whenever our private_ppt[] pointer is NULL...\n      if (!(ptask = read_something(PT, private_ppt[n_used]))) break;\n      procs_hlp((private_ppt[n_used] = ptask));  // tally this proc_t\n   }\n\n   closeproc(PT);\n\n   // lastly, refresh each window's proc pointers table...\n   if (n_saved == n_alloc)\n      for (i = 0; i < GROUPSMAX; i++)\n         memcpy(Winstk[i].ppt, private_ppt, sizeof(proc_t *) * n_used);\n   else {\n      n_saved = n_alloc;\n      for (i = 0; i < GROUPSMAX; i++) {\n         Winstk[i].ppt = alloc_r(Winstk[i].ppt, sizeof(proc_t *) * n_alloc);\n         memcpy(Winstk[i].ppt, private_ppt, sizeof(proc_t *) * n_used);\n      }\n   }\n #undef n_used\n} // end: procs_refresh\n\n\n        /*\n         * This serves as our interface to the memory & cpu count (sysinfo)\n         * portion of libproc.  In support of those hotpluggable resources,\n         * the sampling frequencies are reduced so as to minimize overhead. */\nstatic void sysinfo_refresh (int forced) {\n   static time_t sav_secs;\n   time_t cur_secs;\n\n   if (forced)\n      sav_secs = 0;\n   cur_secs = time(NULL);\n\n   /*** hotplug_acclimated ***/\n   if (3 <= cur_secs - sav_secs) {\n      meminfo();\n#ifndef PRETEND8CPUS\n      cpuinfo();\n#endif\n      Numa_node_tot = numa_max_node() + 1;\n      sav_secs = cur_secs;\n   }\n} // end: sysinfo_refresh\n\f\n/*######  Inspect Other Output  ##########################################*/\n\n        /*\n         * HOWTO Extend the top 'inspect' functionality:\n         *\n         * To exploit the 'Y' interactive command, one must add entries to\n         * the top personal configuration file.  Such entries simply reflect\n         * a file to be read or command/pipeline to be executed whose results\n         * will then be displayed in a separate scrollable window.\n         *\n         * Entries beginning with a '#' character are ignored, regardless of\n         * content.  Otherwise they consist of the following 3 elements, each\n         * of which must be separated by a tab character (thus 2 '\\t' total):\n         *     type:  literal 'file' or 'pipe'\n         *     name:  selection shown on the Inspect screen\n         *     fmts:  string representing a path or command\n         *\n         * The two types of Inspect entries are not interchangeable.\n         * Those designated 'file' will be accessed using fopen/fread and must\n         * reference a single file in the 'fmts' element.  Entries specifying\n         * 'pipe' will employ popen/fread, their 'fmts' element could contain\n         * many pipelined commands and, none can be interactive.\n         *\n         * Here are some examples of both types of inspection entries.\n         * The first entry will be ignored due to the initial '#' character.\n         * For clarity, the pseudo tab depictions (^I) are surrounded by an\n         * extra space but the actual tabs would not be.\n         *\n         *     # pipe ^I Sockets ^I lsof -n -P -i 2>&1\n         *     pipe ^I Open Files ^I lsof -P -p %d 2>&1\n         *     file ^I NUMA Info ^I /proc/%d/numa_maps\n         *     pipe ^I Log ^I tail -n100 /var/log/syslog | sort -Mr\n         *\n         * Caution:  If the output contains unprintable characters they will\n         * be displayed in either the ^I notation or hexidecimal <FF> form.\n         * This applies to tab characters as well.  So if one wants a more\n         * accurate display, any tabs should be expanded within the 'fmts'.\n         *\n         * The following example takes what could have been a 'file' entry\n         * but employs a 'pipe' instead so as to expand the tabs.\n         *\n         *     # next would have contained '\\t' ...\n         *     # file ^I <your_name> ^I /proc/%d/status\n         *     # but this will eliminate embedded '\\t' ...\n         *     pipe ^I <your_name> ^I cat /proc/%d/status | expand -\n         *\n         * Note: If a pipe such as the following was established, one must\n         * use Ctrl-C to terminate that pipe in order to review the results.\n         * This is the single occasion where a '^C' will not terminate top.\n         *\n         *     pipe ^I Trace ^I /usr/bin/strace -p %d 2>&1\n         */\n\n        /*\n         * Our driving table support, the basis for generalized inspection,\n         * built at startup (if at all) from rcfile or demo entries. */\nstruct I_ent {\n   void (*func)(char *, int);     // a pointer to file/pipe/demo function\n   char *type;                    // the type of entry ('file' or 'pipe')\n   char *name;                    // the selection label for display\n   char *fmts;                    // format string to build path or command\n   int   farg;                    // 1 = '%d' in fmts, 0 = not (future use)\n   const char *caps;              // not really caps, show_special() delim's\n   char *fstr;                    // entry's current/active search string\n   int   flen;                    // above's strlen, without call overhead\n};\nstruct I_struc {\n   int demo;                      // do NOT save table entries in rcfile\n   int total;                     // total I_ent table entries\n   char *raw;                     // all entries for 'W', incl '#' & blank\n   struct I_ent *tab;\n};\nstatic struct I_struc Inspect;\n\nstatic char   **Insp_p;           // pointers to each line start\nstatic int      Insp_nl;          // total lines, total Insp_p entries\nstatic int      Insp_utf8;        // treat Insp_buf as translatable, else raw\nstatic char    *Insp_buf;         // the results from insp_do_file/pipe\nstatic size_t   Insp_bufsz;       // allocated size of Insp_buf\nstatic size_t   Insp_bufrd;       // bytes actually in Insp_buf\nstatic struct I_ent *Insp_sel;    // currently selected Inspect entry\n\n        // Our 'make status line' macro\n#define INSP_MKSL(big,txt) { int _sz = big ? Screen_cols : 80; \\\n   const char *_p; \\\n   _sz += utf8_delta(txt); \\\n   _p = fmtmk(\"%-*.*s\", _sz, _sz, txt); \\\n   PUTT(\"%s%s%.*s%s\", tg2(0, (Msg_row = 3)), Curwin->capclr_hdr \\\n      , utf8_embody(_p, Screen_cols), _p, Cap_clr_eol); \\\n   putp(Caps_off); fflush(stdout); }\n\n        // Our 'row length' macro, equivalent to a strlen() call\n#define INSP_RLEN(idx) (int)(Insp_p[idx +1] - Insp_p[idx] -1)\n\n        // Our 'busy/working' macro\n#define INSP_BUSY(enu)  { INSP_MKSL(0, N_txt(enu)) }\n\n\n        /*\n         * Establish the number of lines present in the Insp_buf glob plus\n         * build the all important row start array.  It is that array that\n         * others will rely on since we dare not try to use strlen() on what\n         * is potentially raw binary data.  Who knows what some user might\n         * name as a file or include in a pipeline (scary, ain't it?). */\nstatic void insp_cnt_nl (void) {\n   char *beg = Insp_buf;\n   char *cur = Insp_buf;\n   char *end = Insp_buf + Insp_bufrd + 1;\n\n#ifdef INSP_SAVEBUF\n{\n   static int n = 1;\n   char fn[SMLBUFSIZ];\n   FILE *fd;\n   snprintf(fn, sizeof(fn), \"%s.Insp_buf.%02d.txt\", Myname, n++);\n   fd = fopen(fn, \"w\");\n   if (fd) {\n      fwrite(Insp_buf, 1, Insp_bufrd, fd);\n      fclose(fd);\n   }\n}\n#endif\n   Insp_p = alloc_c(sizeof(char *) * 2);\n\n   for (Insp_nl = 0; beg < end; beg++) {\n      if (*beg == '\\n') {\n         Insp_p[Insp_nl++] = cur;\n         // keep our array ahead of next potential need (plus the 2 above)\n         Insp_p = alloc_r(Insp_p, (sizeof(char *) * (Insp_nl +3)));\n         cur = beg +1;\n      }\n   }\n   Insp_p[0] = Insp_buf;\n   Insp_p[Insp_nl++] = cur;\n   Insp_p[Insp_nl] = end;\n   if ((end - cur) == 1)          // if there's an eof null delimiter,\n      --Insp_nl;                  // don't count it as a new line\n} // end: insp_cnt_nl\n\n\n#ifndef INSP_OFFDEMO\n        /*\n         * The pseudo output DEMO utility. */\nstatic void insp_do_demo (char *fmts, int pid) {\n   (void)fmts; (void)pid;\n   /* next will put us on a par with the real file/pipe read buffers\n    ( and also avoid a harmless, but evil sounding, valgrind warning ) */\n   Insp_bufsz = READMINSZ + strlen(N_txt(YINSP_dstory_txt));\n   Insp_buf   = alloc_c(Insp_bufsz);\n   Insp_bufrd = snprintf(Insp_buf, Insp_bufsz, \"%s\", N_txt(YINSP_dstory_txt));\n   insp_cnt_nl();\n} // end: insp_do_demo\n#endif\n\n\n        /*\n         * The generalized FILE utility. */\nstatic void insp_do_file (char *fmts, int pid) {\n   char buf[LRGBUFSIZ];\n   FILE *fp;\n   int rc;\n\n   snprintf(buf, sizeof(buf), fmts, pid);\n   fp = fopen(buf, \"r\");\n   rc = readfile(fp, &Insp_buf, &Insp_bufsz, &Insp_bufrd);\n   if (fp) fclose(fp);\n   if (rc) Insp_bufrd = snprintf(Insp_buf, Insp_bufsz, \"%s\"\n      , fmtmk(N_fmt(YINSP_failed_fmt), strerror(errno)));\n   insp_cnt_nl();\n} // end: insp_do_file\n\n\n        /*\n         * The generalized PIPE utility. */\nstatic void insp_do_pipe (char *fmts, int pid) {\n   char buf[LRGBUFSIZ];\n   struct sigaction sa;\n   FILE *fp;\n   int rc;\n\n   memset(&sa, 0, sizeof(sa));\n   sigemptyset(&sa.sa_mask);\n   sa.sa_handler = SIG_IGN;\n   sigaction(SIGINT, &sa, NULL);\n\n   snprintf(buf, sizeof(buf), fmts, pid);\n   fp = popen(buf, \"r\");\n   rc = readfile(fp, &Insp_buf, &Insp_bufsz, &Insp_bufrd);\n   if (fp) pclose(fp);\n   if (rc) Insp_bufrd = snprintf(Insp_buf, Insp_bufsz, \"%s\"\n      , fmtmk(N_fmt(YINSP_failed_fmt), strerror(errno)));\n   insp_cnt_nl();\n\n   sa.sa_handler = sig_endpgm;\n   sigaction(SIGINT, &sa, NULL);\n} // end: insp_do_pipe\n\n\n        /*\n         * This guy is a *Helper* function serving the following two masters:\n         *   insp_find_str() - find the next Insp_sel->fstr match\n         *   insp_mkrow_...  - highlight any Insp_sel->fstr matches in-view\n         * If Insp_sel->fstr is found in the designated row, he returns the\n         * offset from the start of the row, otherwise he returns a huge\n         * integer so traditional fencepost usage can be employed. */\nstatic inline int insp_find_ofs (int col, int row) {\n #define begFS (int)(fnd - Insp_p[row])\n   char *p, *fnd = NULL;\n\n   if (Insp_sel->fstr[0]) {\n      // skip this row, if there's no chance of a match\n      if (memchr(Insp_p[row], Insp_sel->fstr[0], INSP_RLEN(row))) {\n         for ( ; col < INSP_RLEN(row); col++) {\n            if (!*(p = Insp_p[row] + col))       // skip any empty strings\n               continue;\n            fnd = STRSTR(p, Insp_sel->fstr);     // with binary data, each\n            if (fnd)                             // row may have '\\0'.  so\n               break;                            // our scans must be done\n            col += strlen(p);                    // as individual strings.\n         }\n         if (fnd && fnd < Insp_p[row + 1])       // and, we must watch out\n            return begFS;                        // for potential overrun!\n      }\n   }\n   return INT_MAX;\n #undef begFS\n} // end: insp_find_ofs\n\n\n        /*\n         * This guy supports the inspect 'L' and '&' search provisions\n         * and returns the row and *optimal* column for viewing any match\n         * ( we'll always opt for left column justification since any )\n         * ( preceding ctrl chars appropriate an unpredictable amount ) */\nstatic void insp_find_str (int ch, int *col, int *row) {\n #define reDUX (found) ? N_txt(WORD_another_txt) : \"\"\n   static int found;\n\n   if ((ch == '&' || ch == 'n') && !Insp_sel->fstr[0]) {\n      show_msg(N_txt(FIND_no_next_txt));\n      return;\n   }\n   if (ch == 'L' || ch == '/') {\n      char *str = ioline(N_txt(GET_find_str_txt));\n      if (*str == kbd_ESC) return;\n      snprintf(Insp_sel->fstr, FNDBUFSIZ, \"%s\", str);\n      Insp_sel->flen = strlen(Insp_sel->fstr);\n      found = 0;\n   }\n   if (Insp_sel->fstr[0]) {\n      int xx, yy;\n\n      INSP_BUSY(YINSP_waitin_txt);\n      for (xx = *col, yy = *row; yy < Insp_nl; ) {\n         xx = insp_find_ofs(xx, yy);\n         if (xx < INSP_RLEN(yy)) {\n            found = 1;\n            if (xx == *col &&  yy == *row) {     // matched where we were!\n               ++xx;                             // ( was the user maybe )\n               continue;                         // ( trying to fool us? )\n            }\n            *col = xx;\n            *row = yy;\n            return;\n         }\n         xx = 0;\n         ++yy;\n      }\n      show_msg(fmtmk(N_fmt(FIND_no_find_fmt), reDUX, Insp_sel->fstr));\n   }\n #undef reDUX\n} // end: insp_find_str\n\n\n        /*\n         * This guy is a *Helper* function responsible for positioning a\n         * single row in the current 'X axis', then displaying the results.\n         * Along the way, he makes sure control characters and/or unprintable\n         * characters display in a less-like fashion:\n         *    '^A'    for control chars\n         *    '<BC>'  for other unprintable stuff\n         * Those will be highlighted with the current windows's capclr_msg,\n         * while visible search matches display with capclr_hdr for emphasis.\n         * ( we hide ugly plumbing in macros to concentrate on the algorithm ) */\nstatic void insp_mkrow_raw (int col, int row) {\n #define maxSZ ( Screen_cols - to )\n #define capNO { if (hicap) { putp(Caps_off); hicap = 0; } }\n #define mkFND { PUTT(\"%s%.*s%s\", Curwin->capclr_hdr, maxSZ, Insp_sel->fstr, Caps_off); \\\n    fr += Insp_sel->flen -1; to += Insp_sel->flen; hicap = 0; }\n#ifndef INSP_JUSTNOT\n #define mkCTL { const char *p = fmtmk(\"^%c\", uch + '@'); \\\n    PUTT(\"%s%.*s\", (!hicap) ? Curwin->capclr_msg : \"\", maxSZ, p); to += 2; hicap = 1; }\n #define mkUNP { const char *p = fmtmk(\"<%02X>\", uch); \\\n    PUTT(\"%s%.*s\", (!hicap) ? Curwin->capclr_msg : \"\", maxSZ, p); to += 4; hicap = 1; }\n#else\n #define mkCTL { if ((to += 2) <= Screen_cols) \\\n    PUTT(\"%s^%c\", (!hicap) ? Curwin->capclr_msg : \"\", uch + '@'); hicap = 1; }\n #define mkUNP { if ((to += 4) <= Screen_cols) \\\n    PUTT(\"%s<%02X>\", (!hicap) ? Curwin->capclr_msg : \"\", uch); hicap = 1; }\n#endif\n #define mkSTD { capNO; if (++to <= Screen_cols) { static char _str[2]; \\\n    _str[0] = uch; putp(_str); } }\n   unsigned char tline[SCREENMAX];\n   int fr, to, ofs;\n   int hicap = 0;\n\n   if (col < INSP_RLEN(row))\n      memcpy(tline, Insp_p[row] + col, sizeof(tline));\n   else tline[0] = '\\n';\n\n   for (fr = 0, to = 0, ofs = 0; to < Screen_cols; fr++) {\n      if (!ofs)\n         ofs = insp_find_ofs(col + fr, row);\n      if (col + fr < ofs) {\n         unsigned char uch = tline[fr];\n         if (uch == '\\n')   break;     // a no show  (he,he)\n         if (uch > 126)     mkUNP      // show as: '<AB>'\n         else if (uch < 32) mkCTL      // show as:  '^C'\n         else               mkSTD      // a show off (he,he)\n      } else {              mkFND      // a big show (he,he)\n         ofs = 0;\n      }\n      if (col + fr >= INSP_RLEN(row)) break;\n   }\n   capNO;\n   putp(Cap_clr_eol);\n\n #undef maxSZ\n #undef capNO\n #undef mkFND\n #undef mkCTL\n #undef mkUNP\n #undef mkSTD\n} // end: insp_mkrow_raw\n\n\n        /*\n         * This guy is a *Helper* function responsible for positioning a\n         * single row in the current 'X axis' within a multi-byte string\n         * then displaying the results. Along the way he ensures control\n         * characters will then be displayed in two positions like '^A'.\n         * ( assuming they can even get past those 'gettext' utilities ) */\nstatic void insp_mkrow_utf8 (int col, int row) {\n #define maxSZ ( Screen_cols - to )\n #define mkFND { PUTT(\"%s%.*s%s\", Curwin->capclr_hdr, maxSZ, Insp_sel->fstr, Caps_off); \\\n    fr += Insp_sel->flen; to += Insp_sel->flen; }\n#ifndef INSP_JUSTNOT\n #define mkCTL { const char *p = fmtmk(\"^%c\", uch + '@'); \\\n    PUTT(\"%s%.*s%s\", Curwin->capclr_msg, maxSZ, p, Caps_off); to += 2; }\n#else\n #define mkCTL { if ((to += 2) <= Screen_cols) \\\n    PUTT(\"%s^%c%s\", Curwin->capclr_msg, uch + '@', Caps_off); }\n#endif\n #define mkNUL { buf1[0] = ' '; doPUT(buf1) }\n #define doPUT(buf) if ((to += cno) <= Screen_cols) putp(buf);\n   static char buf1[2], buf2[3], buf3[4], buf4[5];\n   unsigned char tline[BIGBUFSIZ];\n   int fr, to, ofs;\n\n   col = utf8_proper_col(Insp_p[row], col, 1);\n   if (col < INSP_RLEN(row))\n      memcpy(tline, Insp_p[row] + col, sizeof(tline));\n   else tline[0] = '\\n';\n\n   for (fr = 0, to = 0, ofs = 0; to < Screen_cols; ) {\n      if (!ofs)\n         ofs = insp_find_ofs(col + fr, row);\n      if (col + fr < ofs) {\n         unsigned char uch = tline[fr];\n         int bno = UTF8_tab[uch];\n         int cno = utf8_cols(&tline[fr++], bno);\n         switch (bno) {\n            case 1:\n               if (uch == '\\n') break;\n               if (uch < 32) mkCTL\n               else if (uch == 127) mkNUL\n               else { buf1[0] = uch; doPUT(buf1) }\n               break;\n            case 2:\n               buf2[0] = uch; buf2[1] = tline[fr++];\n               doPUT(buf2)\n               break;\n            case 3:\n               buf3[0] = uch; buf3[1] = tline[fr++]; buf3[2] = tline[fr++];\n               doPUT(buf3)\n               break;\n            case 4:\n               buf4[0] = uch; buf4[1] = tline[fr++]; buf4[2] = tline[fr++]; buf4[3] = tline[fr++];\n               doPUT(buf4)\n               break;\n            default:\n               mkNUL\n               break;\n         }\n      } else {\n         mkFND\n         ofs = 0;\n      }\n      if (col + fr >= INSP_RLEN(row)) break;\n   }\n   putp(Cap_clr_eol);\n\n #undef maxSZ\n #undef mkFND\n #undef mkCTL\n #undef mkNUL\n #undef doPUT\n} // end: insp_mkrow_utf8\n\n\n        /*\n         * This guy is an insp_view_choice() *Helper* function who displays\n         * a page worth of of the user's damages.  He also creates a status\n         * line based on maximum digits for the current selection's lines and\n         * hozizontal position (so it serves to inform, not distract, by\n         * otherwise being jumpy). */\nstatic inline void insp_show_pgs (int col, int row, int max) {\n   char buf[SMLBUFSIZ];\n   void (*mkrow_func)(int, int);\n   int r = snprintf(buf, sizeof(buf), \"%d\", Insp_nl);\n   int c = snprintf(buf, sizeof(buf), \"%d\", col +Screen_cols);\n   int l = row +1, ls = Insp_nl;;\n\n   if (!Insp_bufrd)\n      l = ls = 0;\n   snprintf(buf, sizeof(buf), N_fmt(YINSP_status_fmt)\n      , Insp_sel->name\n      , r, l, r, ls\n      , c, col + 1, c, col + Screen_cols\n      , (unsigned long)Insp_bufrd);\n   INSP_MKSL(0, buf);\n\n   mkrow_func = Insp_utf8 ? insp_mkrow_utf8 : insp_mkrow_raw;\n\n   for ( ; max && row < Insp_nl; row++) {\n      putp(\"\\n\");\n      mkrow_func(col, row);\n      --max;\n   }\n\n   if (max)\n      putp(Cap_nl_clreos);\n} // end: insp_show_pgs\n\n\n        /*\n         * This guy is responsible for displaying the Insp_buf contents and\n         * managing all scrolling/locate requests until the user gives up. */\nstatic int insp_view_choice (proc_t *p) {\n#ifdef INSP_SLIDE_1\n #define hzAMT  1\n#else\n #define hzAMT  8\n#endif\n #define maxLN (Screen_rows - (Msg_row +1))\n #define makHD(b1,b2) { \\\n    snprintf(b1, sizeof(b1), \"%d\", p->tid); \\\n    snprintf(b2, sizeof(b2), \"%s\", p->cmd); }\n #define makFS(dst) { if (Insp_sel->flen < 22) \\\n       snprintf(dst, sizeof(dst), \"%s\", Insp_sel->fstr); \\\n    else snprintf(dst, sizeof(dst), \"%.19s...\", Insp_sel->fstr); }\n   char buf[LRGBUFSIZ];\n   int key, curlin = 0, curcol = 0;\n\nsignify_that:\n   putp(Cap_clr_scr);\n   adj_geometry();\n\n   for (;;) {\n      char pid[6], cmd[64];\n\n      if (curcol < 0) curcol = 0;\n      if (curlin >= Insp_nl) curlin = Insp_nl -1;\n      if (curlin < 0) curlin = 0;\n\n      makFS(buf)\n      makHD(pid,cmd)\n      putp(Cap_home);\n      show_special(1, fmtmk(N_unq(YINSP_hdview_fmt)\n         , pid, cmd, (Insp_sel->fstr[0]) ? buf : \" N/A \"));   // nls_maybe\n      insp_show_pgs(curcol, curlin, maxLN);\n      fflush(stdout);\n      /* fflush(stdin) didn't do the trick, so we'll just dip a little deeper\n         lest repeated <Enter> keys produce immediate re-selection in caller */\n      tcflush(STDIN_FILENO, TCIFLUSH);\n\n      if (Frames_signal) goto signify_that;\n      key = iokey(1);\n      if (key < 1) goto signify_that;\n\n      switch (key) {\n         case kbd_ENTER:          // must force new iokey()\n            key = INT_MAX;        // fall through !\n         case kbd_ESC:\n         case 'q':\n            putp(Cap_clr_scr);\n            return key;\n         case kbd_LEFT:\n            curcol -= hzAMT;\n            break;\n         case kbd_RIGHT:\n            curcol += hzAMT;\n            break;\n         case kbd_UP:\n            --curlin;\n            break;\n         case kbd_DOWN:\n            ++curlin;\n            break;\n         case kbd_PGUP:\n         case 'b':\n            curlin -= maxLN -1;   // keep 1 line for reference\n            break;\n         case kbd_PGDN:\n         case kbd_SPACE:\n            curlin += maxLN -1;   // ditto\n            break;\n         case kbd_HOME:\n         case 'g':\n            curcol = curlin = 0;\n            break;\n         case kbd_END:\n         case 'G':\n            curcol = 0;\n            curlin = Insp_nl - maxLN;\n            break;\n         case 'L':\n         case '&':\n         case '/':\n         case 'n':\n            if (!Insp_utf8)\n               insp_find_str(key, &curcol, &curlin);\n            else {\n               int tmpcol = utf8_proper_col(Insp_p[curlin], curcol, 1);\n               insp_find_str(key, &tmpcol, &curlin);\n               curcol = utf8_proper_col(Insp_p[curlin], tmpcol, 0);\n            }\n            // must re-hide cursor in case a prompt for a string makes it huge\n            putp((Cursor_state = Cap_curs_hide));\n            break;\n         case '=':\n            snprintf(buf, sizeof(buf), \"%s: %s\", Insp_sel->type, Insp_sel->fmts);\n            INSP_MKSL(1, buf);    // show an extended SL\n            if (iokey(1) < 1)\n               goto signify_that;\n            break;\n         default:                 // keep gcc happy\n            break;\n      }\n   }\n #undef hzAMT\n #undef maxLN\n #undef makHD\n #undef makFS\n} // end: insp_view_choice\n\n\n        /*\n         * This is the main Inspect routine, responsible for:\n         *   1) validating the passed pid (required, but not always used)\n         *   2) presenting/establishing the target selection\n         *   3) arranging to fill Insp_buf (via the Inspect.tab[?].func)\n         *   4) invoking insp_view_choice for viewing/scrolling/searching\n         *   5) cleaning up the dynamically acquired memory afterwards */\nstatic void inspection_utility (int pid) {\n #define mkSEL(dst) { for (i = 0; i < Inspect.total; i++) Inspect.tab[i].caps = \"~1\"; \\\n      Inspect.tab[sel].caps = \"~4\"; dst[0] = '\\0'; \\\n      for (i = 0; i < Inspect.total; i++) { char _s[SMLBUFSIZ]; \\\n         snprintf(_s, sizeof(_s), \" %s %s\", Inspect.tab[i].name, Inspect.tab[i].caps); \\\n         strncat(dst, _s, (sizeof(dst) - 1) - strlen(dst)); } }\n   char sels[SCREENMAX];\n   static int sel;\n   int i, key;\n   proc_t *p;\n\n   for (i = 0, p = NULL; i < Frame_maxtask; i++)\n      if (pid == Curwin->ppt[i]->tid) {\n         p = Curwin->ppt[i];\n         break;\n      }\n   if (!p) {\n      show_msg(fmtmk(N_fmt(YINSP_pidbad_fmt), pid));\n      return;\n   }\n   // must re-hide cursor since the prompt for a pid made it huge\n   putp((Cursor_state = Cap_curs_hide));\nsignify_that:\n   putp(Cap_clr_scr);\n   adj_geometry();\n\n   key = INT_MAX;\n   do {\n      mkSEL(sels);\n      putp(Cap_home);\n      show_special(1, fmtmk(N_unq(YINSP_hdsels_fmt)\n         , pid, p->cmd, sels));\n      INSP_MKSL(0, \" \");\n\n      if (Frames_signal) goto signify_that;\n      if (key == INT_MAX) key = iokey(1);\n      if (key < 1) goto signify_that;\n\n      switch (key) {\n         case 'q':\n         case kbd_ESC:\n            break;\n         case kbd_END:\n            sel = 0;              // fall through !\n         case kbd_LEFT:\n            if (--sel < 0) sel = Inspect.total -1;\n            key = INT_MAX;\n            break;\n         case kbd_HOME:\n            sel = Inspect.total;  // fall through !\n         case kbd_RIGHT:\n            if (++sel >= Inspect.total) sel = 0;\n            key = INT_MAX;\n            break;\n         case kbd_ENTER:\n            INSP_BUSY(!strcmp(\"file\", Inspect.tab[sel].type)\n               ? YINSP_waitin_txt : YINSP_workin_txt);\n            Insp_sel = &Inspect.tab[sel];\n            Inspect.tab[sel].func(Inspect.tab[sel].fmts, pid);\n            Insp_utf8 = utf8_delta(Insp_buf);\n            key = insp_view_choice(p);\n            free(Insp_buf);\n            free(Insp_p);\n            break;\n         default:\n            goto signify_that;\n      }\n   } while (key != 'q' && key != kbd_ESC);\n\n #undef mkSEL\n} // end: inspection_utility\n#undef INSP_MKSL\n#undef INSP_RLEN\n#undef INSP_BUSY\n\f\n/*######  Other Filtering  ###############################################*/\n\n        /*\n         * This sructure is hung from a WIN_t when other filtering is active */\nstruct osel_s {\n   struct osel_s *nxt;                         // the next criteria or NULL.\n   int (*rel)(const char *, const char *);     // relational strings compare\n   char *(*sel)(const char *, const char *);   // for selection str compares\n   char *raw;                                  // raw user input (dup check)\n   char *val;                                  // value included or excluded\n   int   ops;                                  // filter delimiter/operation\n   int   inc;                                  // include == 1, exclude == 0\n   int   enu;                                  // field (procflag) to filter\n   int   typ;                                  // typ used to set: rel & sel\n};\n\n        /*\n         * A function to parse, validate and build a single 'other filter' */\nstatic const char *osel_add (WIN_t *q, int ch, char *glob, int push) {\n   int (*rel)(const char *, const char *);\n   char *(*sel)(const char *, const char *);\n   char raw[MEDBUFSIZ], ops, *pval;\n   struct osel_s *osel;\n   int inc, enu;\n\n   if (ch == 'o') {\n      rel   = strcasecmp;\n      sel   = strcasestr;\n   } else {\n      rel   = strcmp;\n      sel   = strstr;\n   }\n\n   if (!snprintf(raw, sizeof(raw), \"%s\", glob))\n      return NULL;\n   for (osel = q->osel_1st; osel; ) {\n      if (!strcmp(osel->raw, raw))             // #1: is criteria duplicate?\n         return N_txt(OSEL_errdups_txt);\n      osel = osel->nxt;\n   }\n   if (*glob != '!') inc = 1;                  // #2: is it include/exclude?\n   else { ++glob; inc = 0; }\n\n   if (!(pval = strpbrk(glob, \"<=>\")))         // #3: do we see a delimiter?\n      return fmtmk(N_fmt(OSEL_errdelm_fmt)\n         , inc ? N_txt(WORD_include_txt) : N_txt(WORD_exclude_txt));\n   ops = *(pval);\n   *(pval++) = '\\0';\n\n   for (enu = 0; enu < EU_MAXPFLGS; enu++)     // #4: is this a valid field?\n      if (!STRCMP(N_col(enu), glob)) break;\n   if (enu == EU_MAXPFLGS)\n      return fmtmk(N_fmt(XTRA_badflds_fmt), glob);\n\n   if (!(*pval))                               // #5: did we get some value?\n      return fmtmk(N_fmt(OSEL_errvalu_fmt)\n         , inc ? N_txt(WORD_include_txt) : N_txt(WORD_exclude_txt));\n\n   osel = alloc_c(sizeof(struct osel_s));\n   osel->typ = ch;\n   osel->inc = inc;\n   osel->enu = enu;\n   osel->ops = ops;\n   if (ops == '=') osel->val = alloc_s(pval);\n   else osel->val = alloc_s(justify_pad(pval, Fieldstab[enu].width, Fieldstab[enu].align));\n   osel->rel = rel;\n   osel->sel = sel;\n   osel->raw = alloc_s(raw);\n\n   if (push) {\n      // a LIFO queue was used when we're interactive\n      osel->nxt = q->osel_1st;\n      q->osel_1st = osel;\n   } else {\n      // a FIFO queue must be employed for the rcfile\n      if (!q->osel_1st)\n         q->osel_1st = osel;\n      else {\n         struct osel_s *prev, *walk = q->osel_1st;\n         do {\n            prev = walk;\n            walk = walk->nxt;\n         } while (walk);\n         prev->nxt = osel;\n      }\n   }\n   q->osel_tot += 1;\n\n   return NULL;\n} // end: osel_add\n\n\n        /*\n         * A function to turn off entire other filtering in the given window */\nstatic void osel_clear (WIN_t *q) {\n   struct osel_s *osel = q->osel_1st;\n\n   while (osel) {\n      struct osel_s *nxt = osel->nxt;\n      free(osel->val);\n      free(osel->raw);\n      free(osel);\n      osel = nxt;\n   }\n   q->osel_tot = 0;\n   q->osel_1st = NULL;\n#ifndef USE_X_COLHDR\n   OFFw(q, NOHISEL_xxx);\n#endif\n} // end: osel_clear\n\n\n        /*\n         * Determine if there are matching values or relationships among the\n         * other criteria in this passed window -- it's called from only one\n         * place, and likely inlined even without the directive */\nstatic inline int osel_matched (const WIN_t *q, FLG_t enu, const char *str) {\n   struct osel_s *osel = q->osel_1st;\n\n   while (osel) {\n      if (osel->enu == enu) {\n         int r;\n         switch (osel->ops) {\n            case '<':                          // '<' needs the r < 0 unless\n               r = osel->rel(str, osel->val);  // '!' which needs an inverse\n               if ((r >= 0 && osel->inc) || (r < 0 && !osel->inc)) return 0;\n               break;\n            case '>':                          // '>' needs the r > 0 unless\n               r = osel->rel(str, osel->val);  // '!' which needs an inverse\n               if ((r <= 0 && osel->inc) || (r > 0 && !osel->inc)) return 0;\n               break;\n            default:\n            {  char *p = osel->sel(str, osel->val);\n               if ((!p && osel->inc) || (p && !osel->inc)) return 0;\n            }\n               break;\n         }\n      }\n      osel = osel->nxt;\n   }\n   return 1;\n} // end: osel_matched\n\f\n/*######  Startup routines  ##############################################*/\n\n        /*\n         * No matter what *they* say, we handle the really really BIG and\n         * IMPORTANT stuff upon which all those lessor functions depend! */\nstatic void before (char *me) {\n   struct sigaction sa;\n   proc_t p;\n   int i;\n#ifndef PRETEND2_5_X\n   int linux_version_code = procps_linux_version();\n#else\n   int linux_version_code = LINUX_VERSION(2,5,43);\n#endif\n\n   atexit(close_stdout);\n\n   // is /proc mounted?\n   look_up_our_self(&p);\n\n   // setup our program name\n   Myname = strrchr(me, '/');\n   if (Myname) ++Myname; else Myname = me;\n\n   // accommodate nls/gettext potential translations\n   initialize_nls();\n\n   // override default library memory alloc error handler\n   xalloc_err_handler = xalloc_our_handler;\n\n   // establish cpu particulars\n   cpuinfo();\n#ifdef PRETEND8CPUS\n   smp_num_cpus = 8;\n#endif\n   Cpu_States_fmts = N_unq(STATE_lin2x4_fmt);\n   if (linux_version_code > LINUX_VERSION(2, 5, 41))\n      Cpu_States_fmts = N_unq(STATE_lin2x5_fmt);\n   if (linux_version_code >= LINUX_VERSION(2, 6, 0))\n      Cpu_States_fmts = N_unq(STATE_lin2x6_fmt);\n   if (linux_version_code >= LINUX_VERSION(2, 6, 11))\n      Cpu_States_fmts = N_unq(STATE_lin2x7_fmt);\n\n   // get virtual page stuff\n   i = page_bytes; // from sysinfo.c, at lib init\n   while(i > 1024) { i >>= 1; Pg2K_shft++; }\n\n#ifndef OFF_HST_HASH\n   // prep for HST_t's put/get hashing optimizations\n   for (i = 0; i < HHASH_SIZ; i++) HHash_nul[i] = -1;\n   memcpy(HHash_one, HHash_nul, sizeof(HHash_nul));\n   memcpy(HHash_two, HHash_nul, sizeof(HHash_nul));\n#endif\n\n   numa_init();\n   Numa_node_tot = numa_max_node() + 1;\n\n#ifndef SIGRTMAX       // not available on hurd, maybe others too\n#define SIGRTMAX 32\n#endif\n   // lastly, establish a robust signals environment\n   memset(&sa, 0, sizeof(sa));\n   sigemptyset(&sa.sa_mask);\n   // with user position preserved through SIGWINCH, we must avoid SA_RESTART\n   sa.sa_flags = 0;\n   for (i = SIGRTMAX; i; i--) {\n      switch (i) {\n         case SIGALRM: case SIGHUP:  case SIGINT:\n         case SIGPIPE: case SIGQUIT: case SIGTERM:\n         case SIGUSR1: case SIGUSR2:\n            sa.sa_handler = sig_endpgm;\n            break;\n         case SIGTSTP: case SIGTTIN: case SIGTTOU:\n            sa.sa_handler = sig_paused;\n            break;\n         case SIGCONT: case SIGWINCH:\n            sa.sa_handler = sig_resize;\n            break;\n         default:\n            sa.sa_handler = sig_abexit;\n            break;\n         case SIGKILL: case SIGSTOP:\n         // because uncatchable, fall through\n         case SIGCHLD: // we can't catch this\n            continue;  // when opening a pipe\n      }\n      sigaction(i, &sa, NULL);\n   }\n} // end: before\n\n\n        /*\n         * A configs_file *Helper* function responsible for converting\n         * a single window's old rc stuff into a new style rcfile entry */\nstatic int config_cvt (WIN_t *q) {\n   static struct {\n      int old, new;\n   } flags_tab[] = {\n    #define old_View_NOBOLD  0x000001\n    #define old_VISIBLE_tsk  0x000008\n    #define old_Qsrt_NORMAL  0x000010\n    #define old_Show_HICOLS  0x000200\n    #define old_Show_THREAD  0x010000\n      { old_View_NOBOLD, View_NOBOLD },\n      { old_VISIBLE_tsk, Show_TASKON },\n      { old_Qsrt_NORMAL, Qsrt_NORMAL },\n      { old_Show_HICOLS, Show_HICOLS },\n      { old_Show_THREAD, 0           }\n    #undef old_View_NOBOLD\n    #undef old_VISIBLE_tsk\n    #undef old_Qsrt_NORMAL\n    #undef old_Show_HICOLS\n    #undef old_Show_THREAD\n   };\n   static const char fields_src[] = CVT_FIELDS;\n   char fields_dst[PFLAGSSIZ], *p1, *p2;\n   int i, j, x;\n\n   // first we'll touch up this window's winflags...\n   x = q->rc.winflags;\n   q->rc.winflags = 0;\n   for (i = 0; i < MAXTBL(flags_tab); i++) {\n      if (x & flags_tab[i].old) {\n         x &= ~flags_tab[i].old;\n         q->rc.winflags |= flags_tab[i].new;\n      }\n   }\n   q->rc.winflags |= x;\n\n   // now let's convert old top's more limited fields...\n   j = strlen(q->rc.fieldscur);\n   if (j > CVT_FLDMAX)\n      return 1;\n   strcpy(fields_dst, fields_src);\n   /* all other fields represent the 'on' state with a capitalized version\n      of a particular qwerty key.  for the 2 additional suse out-of-memory\n      fields it makes perfect sense to do the exact opposite, doesn't it?\n      in any case, we must turn them 'off' temporarily... */\n   if ((p1 = strchr(q->rc.fieldscur, '[')))  *p1 = '{';\n   if ((p2 = strchr(q->rc.fieldscur, '\\\\'))) *p2 = '|';\n   for (i = 0; i < j; i++) {\n      int c = q->rc.fieldscur[i];\n      x = tolower(c) - 'a';\n      if (x < 0 || x >= CVT_FLDMAX)\n         return 1;\n      fields_dst[i] = fields_src[x];\n      if (isupper(c))\n         FLDon(fields_dst[i]);\n   }\n   // if we turned any suse only fields off, turn 'em back on OUR way...\n   if (p1) FLDon(fields_dst[p1 - q->rc.fieldscur]);\n   if (p2) FLDon(fields_dst[p2 - q->rc.fieldscur]);\n   strcpy(q->rc.fieldscur, fields_dst);\n\n   // lastly, we must adjust the old sort field enum...\n   x = q->rc.sortindx;\n   q->rc.sortindx = fields_src[x] - FLD_OFFSET;\n   if (q->rc.sortindx < 0 || q->rc.sortindx >= EU_MAXPFLGS)\n      return 1;\n\n   return 0;\n} // end: config_cvt\n\n\n        /*\n         * A configs_file *Helper* function responsible for reading\n         * and validating a configuration file's 'Inspection' entries */\nstatic int config_insp (FILE *fp, char *buf, size_t size) {\n   int i;\n\n   // we'll start off with a 'potential' blank or empty line\n   // ( only realized if we end up with Inspect.total > 0 )\n   if (!buf[0] || buf[0] != '\\n') Inspect.raw = alloc_s(\"\\n\");\n   else Inspect.raw = alloc_c(1);\n\n   for (i = 0;;) {\n    #define iT(element) Inspect.tab[i].element\n    #define nxtLINE { buf[0] = '\\0'; continue; }\n      size_t lraw = strlen(Inspect.raw) +1;\n      int n, x;\n      char *s1, *s2, *s3;\n\n      if (i < 0 || (size_t)i >= INT_MAX / sizeof(struct I_ent)) break;\n      if (lraw >= INT_MAX - size) break;\n\n      if (!buf[0] && !fgets(buf, size, fp)) break;\n      lraw += strlen(buf) +1;\n      Inspect.raw = alloc_r(Inspect.raw, lraw);\n      strcat(Inspect.raw, buf);\n\n      if (buf[0] == '#' || buf[0] == '\\n') nxtLINE;\n      Inspect.tab = alloc_r(Inspect.tab, sizeof(struct I_ent) * (i + 1));\n\n      // part of this is used in a show_special() call, so let's sanitize it\n      for (n = 0, x = strlen(buf); n < x; n++) {\n         if ((buf[n] != '\\t' && buf[n] != '\\n')\n          && (buf[n] < ' ')) {\n            buf[n] = '.';\n            Rc_questions = 1;\n         }\n      }\n      if (!(s1 = strtok(buf, \"\\t\\n\")))  { Rc_questions = 1; nxtLINE; }\n      if (!(s2 = strtok(NULL, \"\\t\\n\"))) { Rc_questions = 1; nxtLINE; }\n      if (!(s3 = strtok(NULL, \"\\t\\n\"))) { Rc_questions = 1; nxtLINE; }\n\n      switch (toupper(buf[0])) {\n         case 'F':\n            iT(func) = insp_do_file;\n            break;\n         case 'P':\n            iT(func) = insp_do_pipe;\n            break;\n         default:\n            Rc_questions = 1;\n            nxtLINE;\n      }\n      iT(type) = alloc_s(s1);\n      iT(name) = alloc_s(s2);\n      iT(fmts) = alloc_s(s3);\n      iT(farg) = (strstr(iT(fmts), \"%d\")) ? 1 : 0;\n      iT(fstr) = alloc_c(FNDBUFSIZ);\n      iT(flen) = 0;\n\n      buf[0] = '\\0';\n      ++i;\n    #undef iT\n    #undef nxtLINE\n   } // end: for ('inspect' entries)\n\n   Inspect.total = i;\n#ifndef INSP_OFFDEMO\n   if (!Inspect.total) {\n    #define mkS(n) N_txt(YINSP_demo ## n ## _txt)\n      const char *sels[] = { mkS(01), mkS(02), mkS(03) };\n      Inspect.total = Inspect.demo = MAXTBL(sels);\n      Inspect.tab = alloc_c(sizeof(struct I_ent) * Inspect.total);\n      for (i = 0; i < Inspect.total; i++) {\n         Inspect.tab[i].type = alloc_s(N_txt(YINSP_deqtyp_txt));\n         Inspect.tab[i].name = alloc_s(sels[i]);\n         Inspect.tab[i].func = insp_do_demo;\n         Inspect.tab[i].fmts = alloc_s(N_txt(YINSP_deqfmt_txt));\n         Inspect.tab[i].fstr = alloc_c(FNDBUFSIZ);\n      }\n    #undef mkS\n   }\n#endif\n   return 0;\n} // end: config_insp\n\n\n        /*\n         * A configs_file *Helper* function responsible for reading\n         * and validating a configuration file's 'Other Filter' entries */\nstatic int config_osel (FILE *fp, char *buf, size_t size) {\n   int i, ch, tot, wno, begun;\n   char *p;\n\n   for (begun = 0;;) {\n      if (!fgets(buf, size, fp)) return 0;\n      if (buf[0] == '\\n') continue;\n      // whoa, must be an 'inspect' entry\n      if (!begun && !strstr(buf, Osel_delim_1_txt))\n         return 0;\n      // ok, we're now beginning\n      if (!begun && strstr(buf, Osel_delim_1_txt)) {\n         begun = 1;\n         continue;\n      }\n      // this marks the end of our stuff\n      if (begun && strstr(buf, Osel_delim_2_txt))\n         break;\n\n      if (2 != sscanf(buf, Osel_window_fmts, &wno, &tot))\n         goto end_oops;\n\n      for (i = 0; i < tot; i++) {\n         if (!fgets(buf, size, fp)) return 1;\n         if (1 > sscanf(buf, Osel_filterI_fmt, &ch)) goto end_oops;\n         if ((p = strchr(buf, '\\n'))) *p = '\\0';\n         if (!(p = strstr(buf, OSEL_FILTER))) goto end_oops;\n         p += sizeof(OSEL_FILTER) - 1;\n         if (osel_add(&Winstk[wno], ch, p, 0)) goto end_oops;\n      }\n   }\n   // let's prime that buf for the next guy...\n   fgets(buf, size, fp);\n   return 0;\n\nend_oops:\n   Rc_questions = 1;\n   return 1;\n} // end: config_osel\n\n\n        /*\n         * A configs_reads *Helper* function responsible for processing\n         * a configuration file (personal or system-wide default) */\nstatic const char *configs_file (FILE *fp, const char *name, float *delay) {\n   char fbuf[LRGBUFSIZ];\n   int i, tmp_whole, tmp_fract;\n   const char *p = NULL;\n\n   p = fmtmk(N_fmt(RC_bad_files_fmt), name);\n   (void)fgets(fbuf, sizeof(fbuf), fp);     // ignore eyecatcher\n   if (6 != fscanf(fp\n      , \"Id:%c, Mode_altscr=%d, Mode_irixps=%d, Delay_time=%d.%d, Curwin=%d\\n\"\n      , &Rc.id, &Rc.mode_altscr, &Rc.mode_irixps, &tmp_whole, &tmp_fract, &i)) {\n         return p;\n   }\n   if (Rc.id < 'a' || Rc.id > RCF_VERSION_ID)\n      return p;\n   if (Rc.mode_altscr < 0 || Rc.mode_altscr > 1)\n      return p;\n   if (Rc.mode_irixps < 0 || Rc.mode_irixps > 1)\n      return p;\n   if (tmp_whole < 0)\n      return p;\n   // you saw that, right?  (fscanf stickin' it to 'i')\n   if (i < 0 || i >= GROUPSMAX)\n      return p;\n   Curwin = &Winstk[i];\n   // this may be ugly, but it keeps us locale independent...\n   *delay = (float)tmp_whole + (float)tmp_fract / 1000;\n\n   for (i = 0 ; i < GROUPSMAX; i++) {\n      int n, x;\n      WIN_t *w = &Winstk[i];\n      p = fmtmk(N_fmt(RC_bad_entry_fmt), i+1, name);\n\n      // note: \"fieldscur=%__s\" on next line should equal (PFLAGSSIZ -1) !\n      if (2 != fscanf(fp, \"%3s\\tfieldscur=%99s\\n\"\n         , w->rc.winname, w->rc.fieldscur))\n            return p;\n#if PFLAGSSIZ != 100\n // too bad fscanf is not as flexible with his format string as snprintf\n #error Hey, fix the above fscanf 'PFLAGSSIZ' dependency !\n#endif\n      // ensure there's been no manual alteration of fieldscur\n      for (n = 0 ; n < EU_MAXPFLGS; n++) {\n         if (&w->rc.fieldscur[n] != strrchr(w->rc.fieldscur, w->rc.fieldscur[n]))\n            return p;\n      }\n      // be tolerant of missing release 3.3.10 graph modes additions\n      if (3 > fscanf(fp, \"\\twinflags=%d, sortindx=%d, maxtasks=%d, graph_cpus=%d, graph_mems=%d\\n\"\n         , &w->rc.winflags, &w->rc.sortindx, &w->rc.maxtasks, &w->rc.graph_cpus, &w->rc.graph_mems))\n            return p;\n      if (w->rc.sortindx < 0 || w->rc.sortindx >= EU_MAXPFLGS)\n         return p;\n      if (w->rc.maxtasks < 0)\n         return p;\n      if (w->rc.graph_cpus < 0 || w->rc.graph_cpus > 2)\n         return p;\n      if (w->rc.graph_mems < 0 || w->rc.graph_mems > 2)\n         return p;\n\n      if (4 != fscanf(fp, \"\\tsummclr=%d, msgsclr=%d, headclr=%d, taskclr=%d\\n\"\n         , &w->rc.summclr, &w->rc.msgsclr, &w->rc.headclr, &w->rc.taskclr))\n            return p;\n      // would prefer to use 'max_colors', but it isn't available yet...\n      if (w->rc.summclr < 0 || w->rc.summclr > 255) return p;\n      if (w->rc.msgsclr < 0 || w->rc.msgsclr > 255) return p;\n      if (w->rc.headclr < 0 || w->rc.headclr > 255) return p;\n      if (w->rc.taskclr < 0 || w->rc.taskclr > 255) return p;\n\n      switch (Rc.id) {\n         case 'a':                          // 3.2.8 (former procps)\n            if (config_cvt(w))\n               return p;\n         case 'f':                          // 3.3.0 thru 3.3.3 (ng)\n            SETw(w, Show_JRNUMS);\n         case 'g':                          // from 3.3.4 thru 3.3.8\n            scat(w->rc.fieldscur, RCF_PLUS_H);\n         case 'h':                          // this is release 3.3.9\n            w->rc.graph_cpus = w->rc.graph_mems = 0;\n            // these next 2 are really global, but best documented here\n            Rc.summ_mscale = Rc.task_mscale = SK_Kb;\n         case 'i':                          // actual RCF_VERSION_ID\n            scat(w->rc.fieldscur, RCF_PLUS_J);\n         case 'j':                          // and the next version\n         default:\n            if (strlen(w->rc.fieldscur) != sizeof(DEF_FIELDS) - 1)\n               return p;\n            for (x = 0; x < EU_MAXPFLGS; ++x)\n               if (EU_MAXPFLGS <= FLDget(w, x))\n                  return p;\n            break;\n      }\n#ifndef USE_X_COLHDR\n      OFFw(w, NOHIFND_xxx | NOHISEL_xxx);\n#endif\n   } // end: for (GROUPSMAX)\n\n   // any new addition(s) last, for older rcfiles compatibility...\n   (void)fscanf(fp, \"Fixed_widest=%d, Summ_mscale=%d, Task_mscale=%d, Zero_suppress=%d\\n\"\n      , &Rc.fixed_widest, &Rc.summ_mscale, &Rc.task_mscale, &Rc.zero_suppress);\n   if (Rc.fixed_widest < -1 || Rc.fixed_widest > SCREENMAX)\n      Rc.fixed_widest = 0;\n   if (Rc.summ_mscale < 0   || Rc.summ_mscale > SK_Eb)\n      Rc.summ_mscale = 0;\n   if (Rc.task_mscale < 0   || Rc.task_mscale > SK_Pb)\n      Rc.task_mscale = 0;\n   if (Rc.zero_suppress < 0 || Rc.zero_suppress > 1)\n      Rc.zero_suppress = 0;\n\n   // lastly, let's process any optional glob(s) ...\n   // (darn, must do osel 1st even though alphabetically 2nd)\n   fbuf[0] = '\\0';\n   config_osel(fp, fbuf, sizeof(fbuf));\n   config_insp(fp, fbuf, sizeof(fbuf));\n\n   return NULL;\n} // end: configs_file\n\n\n        /*\n         * A configs_reads *Helper* function responsible for ensuring the\n         * complete path was established, otherwise force the 'W' to fail */\nstatic int configs_path (const char *const fmts, ...) __attribute__((format(printf,1,2)));\nstatic int configs_path (const char *const fmts, ...) {\n   int len;\n   va_list ap;\n\n   va_start(ap, fmts);\n   len = vsnprintf(Rc_name, sizeof(Rc_name), fmts, ap);\n   va_end(ap);\n   if (len <= 0 || (size_t)len >= sizeof(Rc_name)) {\n      Rc_name[0] = '\\0';\n      len = 0;\n   }\n   return len;\n} // end: configs_path\n\n\n        /*\n         * Try reading up to 3 rcfiles\n         * 1. 'SYS_RCRESTRICT' contains two lines consisting of the secure\n         *     mode switch and an update interval.  Its presence limits what\n         *     ordinary users are allowed to do.\n         * 2. 'Rc_name' contains multiple lines - 3 global + 3 per window.\n         *     line 1  : an eyecatcher and creating program/alias name\n         *     line 2  : an id, Mode_altcsr, Mode_irixps, Delay_time, Curwin.\n         *     For each of the 4 windows:\n         *       line a: contains w->winname, fieldscur\n         *       line b: contains w->winflags, sortindx, maxtasks, graph modes\n         *       line c: contains w->summclr, msgsclr, headclr, taskclr\n         *     line 15 : miscellaneous additional global settings\n         *     Any remaining lines are devoted to the optional entries\n         *     supporting the 'Other Filter' and 'Inspect' provisions.\n         * 3. 'SYS_RCDEFAULTS' system-wide defaults if 'Rc_name' absent\n         *     format is identical to #2 above */\nstatic void configs_reads (void) {\n   float tmp_delay = DEF_DELAY;\n   const char *p, *p_home;\n   FILE *fp;\n\n   fp = fopen(SYS_RCRESTRICT, \"r\");\n   if (fp) {\n      char fbuf[SMLBUFSIZ];\n      if (fgets(fbuf, sizeof(fbuf), fp)) {     // sys rc file, line 1\n         Secure_mode = 1;\n         if (fgets(fbuf, sizeof(fbuf), fp))    // sys rc file, line 2\n            sscanf(fbuf, \"%f\", &Rc.delay_time);\n      }\n      fclose(fp);\n   }\n\n   Rc_name[0] = '\\0'; // \"fopen() shall fail if pathname is an empty string.\"\n   // attempt to use the legacy file first, if we cannot access that file, use\n   // the new XDG basedir locations (XDG_CONFIG_HOME or HOME/.config) instead.\n   p_home = getenv(\"HOME\");\n   if (!p_home || p_home[0] != '/') {\n      const struct passwd *const pwd = getpwuid(getuid());\n      if (!pwd || !(p_home = pwd->pw_dir) || p_home[0] != '/') {\n         p_home = NULL;\n      }\n   }\n   if (p_home) {\n      configs_path(\"%s/.%src\", p_home, Myname);\n   }\n\n   if (!(fp = fopen(Rc_name, \"r\"))) {\n      p = getenv(\"XDG_CONFIG_HOME\");\n      // ensure the path we get is absolute, fallback otherwise.\n      if (!p || p[0] != '/') {\n         if (!p_home) goto system_default;\n         p = fmtmk(\"%s/.config\", p_home);\n         (void)mkdir(p, 0700);\n      }\n      if (!configs_path(\"%s/procps\", p)) goto system_default;\n      (void)mkdir(Rc_name, 0700);\n      if (!configs_path(\"%s/procps/%src\", p, Myname)) goto system_default;\n      fp = fopen(Rc_name, \"r\");\n   }\n\n   if (fp) {\n      p = configs_file(fp, Rc_name, &tmp_delay);\n      fclose(fp);\n      if (p) goto default_or_error;\n   } else {\nsystem_default:\n      fp = fopen(SYS_RCDEFAULTS, \"r\");\n      if (fp) {\n         p = configs_file(fp, SYS_RCDEFAULTS, &tmp_delay);\n         fclose(fp);\n         if (p) goto default_or_error;\n      }\n   }\n\n   // lastly, establish the true runtime secure mode and delay time\n   if (!getuid()) Secure_mode = 0;\n   if (!Secure_mode) Rc.delay_time = tmp_delay;\n   return;\n\ndefault_or_error:\n#ifdef RCFILE_NOERR\n{  RCF_t rcdef = DEF_RCFILE;\n   int i;\n   Rc = rcdef;\n   for (i = 0 ; i < GROUPSMAX; i++)\n      Winstk[i].rc  = Rc.win[i];\n}\n#else\n   error_exit(p);\n#endif\n} // end: configs_reads\n\n\n        /*\n         * Parse command line arguments.\n         * Note: it's assumed that the rc file(s) have already been read\n         *       and our job is to see if any of those options are to be\n         *       overridden -- we'll force some on and negate others in our\n         *       best effort to honor the loser's (oops, user's) wishes... */\nstatic void parse_args (char **args) {\n   /* differences between us and the former top:\n      -C (separate CPU states for SMP) is left to an rcfile\n      -u (user monitoring) added to compliment interactive 'u'\n      -p (pid monitoring) allows a comma delimited list\n      -q (zero delay) eliminated as redundant, incomplete and inappropriate\n            use: \"nice -n-10 top -d0\" to achieve what was only claimed\n      .  most switches act as toggles (not 'on' sw) for more user flexibility\n      .  no deprecated/illegal use of 'breakargv:' with goto\n      .  bunched args are actually handled properly and none are ignored\n      .  we tolerate NO whitespace and NO switches -- maybe too tolerant? */\n   static const char numbs_str[] = \"+,-.0123456789\";\n   float tmp_delay = FLT_MAX;\n   int i;\n\n   while (*args) {\n      const char *cp = *(args++);\n\n      while (*cp) {\n         char ch;\n         float tmp;\n\n         switch ((ch = *cp)) {\n            case '\\0':\n               break;\n            case '-':\n               if (cp[1]) ++cp;\n               else if (*args) cp = *args++;\n               if (strspn(cp, \"+,-.\"))\n                  error_exit(fmtmk(N_fmt(WRONG_switch_fmt)\n                     , cp, Myname, N_txt(USAGE_abbrev_txt)));\n               continue;\n            case '1':   // ensure behavior identical to run-time toggle\n               if (CHKw(Curwin, View_CPUNOD)) OFFw(Curwin, View_CPUSUM);\n               else TOGw(Curwin, View_CPUSUM);\n               OFFw(Curwin, View_CPUNOD);\n               SETw(Curwin, View_STATES);\n               goto bump_cp;\n            case 'b':\n               Batch = 1;\n               goto bump_cp;\n            case 'c':\n               TOGw(Curwin, Show_CMDLIN);\n               goto bump_cp;\n            case 'd':\n               if (cp[1]) ++cp;\n               else if (*args) cp = *args++;\n               else error_exit(fmtmk(N_fmt(MISSING_args_fmt), ch));\n               if (!mkfloat(cp, &tmp_delay, 0))\n                  error_exit(fmtmk(N_fmt(BAD_delayint_fmt), cp));\n               if (0 > tmp_delay)\n                  error_exit(N_txt(DELAY_badarg_txt));\n               break;\n            case 'E':\n            {  const char *get = \"kmgtpe\", *got;\n               if (cp[1]) cp++;\n               else if (*args) cp = *args++;\n               else error_exit(fmtmk(N_fmt(MISSING_args_fmt), ch));\n               if (!(got = strchr(get, tolower(*cp))))\n                  error_exit(fmtmk(N_fmt(BAD_memscale_fmt), *cp));\n               Rc.summ_mscale = (int)(got - get);\n            }  goto bump_cp;\n            case 'H':\n               Thread_mode = 1;\n               goto bump_cp;\n            case 'h':\n            case 'v':\n               puts(fmtmk(N_fmt(HELP_cmdline_fmt)\n                  , PACKAGE_STRING, Myname, N_txt(USAGE_abbrev_txt)));\n               bye_bye(NULL);\n            case 'i':\n               TOGw(Curwin, Show_IDLEPS);\n               Curwin->rc.maxtasks = 0;\n               goto bump_cp;\n            case 'n':\n               if (cp[1]) cp++;\n               else if (*args) cp = *args++;\n               else error_exit(fmtmk(N_fmt(MISSING_args_fmt), ch));\n               if (!mkfloat(cp, &tmp, 1) || 1.0 > tmp)\n                  error_exit(fmtmk(N_fmt(BAD_niterate_fmt), cp));\n               Loops = (int)tmp;\n               break;\n            case 'o':\n               if (cp[1]) cp++;\n               else if (*args) cp = *args++;\n               else error_exit(fmtmk(N_fmt(MISSING_args_fmt), ch));\n               if (*cp == '+') { SETw(Curwin, Qsrt_NORMAL); ++cp; }\n               else if (*cp == '-') { OFFw(Curwin, Qsrt_NORMAL); ++cp; }\n               for (i = 0; i < EU_MAXPFLGS; i++)\n                  if (!STRCMP(cp, N_col(i))) break;\n               if (i == EU_MAXPFLGS)\n                  error_exit(fmtmk(N_fmt(XTRA_badflds_fmt), cp));\n               OFFw(Curwin, Show_FOREST);\n               Curwin->rc.sortindx = i;\n               cp += strlen(cp);\n               break;\n            case 'O':\n               for (i = 0; i < EU_MAXPFLGS; i++)\n                  puts(N_col(i));\n               bye_bye(NULL);\n            case 'p':\n            {  int pid; char *p;\n               if (Curwin->usrseltyp) error_exit(N_txt(SELECT_clash_txt));\n               do {\n                  if (cp[1]) cp++;\n                  else if (*args) cp = *args++;\n                  else error_exit(fmtmk(N_fmt(MISSING_args_fmt), ch));\n                  if (Monpidsidx >= MONPIDMAX)\n                     error_exit(fmtmk(N_fmt(LIMIT_exceed_fmt), MONPIDMAX));\n                  if (1 != sscanf(cp, \"%d\", &pid)\n                  || strpbrk(cp, \"+-.\"))\n                     error_exit(fmtmk(N_fmt(BAD_mon_pids_fmt), cp));\n                  if (!pid) pid = getpid();\n                  for (i = 0; i < Monpidsidx; i++)\n                     if (Monpids[i] == pid) goto next_pid;\n                  Monpids[Monpidsidx++] = pid;\n               next_pid:\n                  if (!(p = strchr(cp, ','))) break;\n                  cp = p;\n               } while (*cp);\n            }  break;\n            case 's':\n               Secure_mode = 1;\n               goto bump_cp;\n            case 'S':\n               TOGw(Curwin, Show_CTIMES);\n               goto bump_cp;\n            case 'u':\n            case 'U':\n            {  const char *errmsg;\n               if (Monpidsidx || Curwin->usrseltyp) error_exit(N_txt(SELECT_clash_txt));\n               if (cp[1]) cp++;\n               else if (*args) cp = *args++;\n               else error_exit(fmtmk(N_fmt(MISSING_args_fmt), ch));\n               if ((errmsg = user_certify(Curwin, cp, ch))) error_exit(errmsg);\n               cp += strlen(cp);\n            }  break;\n            case 'w':\n            {  const char *pn = NULL;\n               int ai = 0, ci = 0;\n               tmp = -1;\n               if (cp[1]) pn = &cp[1];\n               else if (*args) { pn = *args; ai = 1; }\n               if (pn && !(ci = strspn(pn, numbs_str))) { ai = 0; pn = NULL; }\n               if (pn && (!mkfloat(pn, &tmp, 1) || tmp < W_MIN_COL || tmp > SCREENMAX))\n                  error_exit(fmtmk(N_fmt(BAD_widtharg_fmt), pn));\n               Width_mode = (int)tmp;\n               cp++;\n               args += ai;\n               if (pn) cp = pn + ci;\n            }  continue;\n            default :\n               error_exit(fmtmk(N_fmt(UNKNOWN_opts_fmt)\n                  , *cp, Myname, N_txt(USAGE_abbrev_txt)));\n         } // end: switch (*cp)\n\n         // advance cp and jump over any numerical args used above\n         if (*cp) cp += strspn(&cp[1], numbs_str);\nbump_cp:\n         if (*cp) ++cp;\n      } // end: while (*cp)\n   } // end: while (*args)\n\n   // fixup delay time, maybe...\n   if (FLT_MAX > tmp_delay) {\n      if (Secure_mode)\n         error_exit(N_txt(DELAY_secure_txt));\n      Rc.delay_time = tmp_delay;\n   }\n} // end: parse_args\n\n\n        /*\n         * Set up the terminal attributes */\nstatic void whack_terminal (void) {\n   static char dummy[] = \"dumb\";\n   struct termios tmptty;\n\n   // the curses part...\n   if (Batch) {\n      setupterm(dummy, STDOUT_FILENO, NULL);\n      return;\n   }\n#ifdef PRETENDNOCAP\n   setupterm(dummy, STDOUT_FILENO, NULL);\n#else\n   setupterm(NULL, STDOUT_FILENO, NULL);\n#endif\n   // our part...\n   if (-1 == tcgetattr(STDIN_FILENO, &Tty_original))\n      error_exit(N_txt(FAIL_tty_get_txt));\n   // ok, haven't really changed anything but we do have our snapshot\n   Ttychanged = 1;\n\n   // first, a consistent canonical mode for interactive line input\n   tmptty = Tty_original;\n   tmptty.c_lflag |= (ECHO | ECHOCTL | ECHOE | ICANON | ISIG);\n   tmptty.c_lflag &= ~NOFLSH;\n   tmptty.c_oflag &= ~TAB3;\n   tmptty.c_iflag |= BRKINT;\n   tmptty.c_iflag &= ~IGNBRK;\n   if (key_backspace && 1 == strlen(key_backspace))\n      tmptty.c_cc[VERASE] = *key_backspace;\n#ifdef TERMIOS_ONLY\n   if (-1 == tcsetattr(STDIN_FILENO, TCSAFLUSH, &tmptty))\n      error_exit(fmtmk(N_fmt(FAIL_tty_set_fmt), strerror(errno)));\n   tcgetattr(STDIN_FILENO, &Tty_tweaked);\n#endif\n   // lastly, a nearly raw mode for unsolicited single keystrokes\n   tmptty.c_lflag &= ~(ECHO | ECHOCTL | ECHOE | ICANON);\n   tmptty.c_cc[VMIN] = 1;\n   tmptty.c_cc[VTIME] = 0;\n   if (-1 == tcsetattr(STDIN_FILENO, TCSAFLUSH, &tmptty))\n      error_exit(fmtmk(N_fmt(FAIL_tty_set_fmt), strerror(errno)));\n   tcgetattr(STDIN_FILENO, &Tty_raw);\n\n#ifndef OFF_STDIOLBF\n   // thanks anyway stdio, but we'll manage buffering at the frame level...\n   setbuffer(stdout, Stdout_buf, sizeof(Stdout_buf));\n#endif\n#ifdef OFF_SCROLLBK\n   // this has the effect of disabling any troublesome scrollback buffer...\n   if (enter_ca_mode) putp(enter_ca_mode);\n#endif\n   // and don't forget to ask iokey to initialize his tinfo_tab\n   iokey(0);\n} // end: whack_terminal\n\f\n/*######  Windows/Field Groups support  #################################*/\n\n        /*\n         * Value a window's name and make the associated group name. */\nstatic void win_names (WIN_t *q, const char *name) {\n   /* note: sprintf/snprintf results are \"undefined\" when src==dst,\n            according to C99 & POSIX.1-2001 (thanks adc) */\n   if (q->rc.winname != name)\n      snprintf(q->rc.winname, sizeof(q->rc.winname), \"%s\", name);\n   snprintf(q->grpname, sizeof(q->grpname), \"%d:%s\", q->winnum, name);\n} // end: win_names\n\n\n        /*\n         * This guy just resets (normalizes) a single window\n         * and he ensures pid monitoring is no longer active. */\nstatic void win_reset (WIN_t *q) {\n         SETw(q, Show_IDLEPS | Show_TASKON);\n#ifndef SCROLLVAR_NO\n         q->rc.maxtasks = q->usrseltyp = q->begpflg = q->begtask = q->begnext = q->varcolbeg = 0;\n#else\n         q->rc.maxtasks = q->usrseltyp = q->begpflg = q->begtask = q->begnext = 0;\n#endif\n         Monpidsidx = 0;\n         osel_clear(q);\n         q->findstr[0] = '\\0';\n#ifndef USE_X_COLHDR\n         // NOHISEL_xxx is redundant (already turned off by osel_clear)\n         OFFw(q, NOHIFND_xxx | NOHISEL_xxx);\n#endif\n} // end: win_reset\n\n\n        /*\n         * Display a window/field group (ie. make it \"current\"). */\nstatic WIN_t *win_select (int ch) {\n   WIN_t *w = Curwin;             // avoid gcc bloat with a local copy\n\n   /* if there's no ch, it means we're supporting the external interface,\n      so we must try to get our own darn ch by begging the user... */\n   if (!ch) {\n      show_pmt(N_txt(CHOOSE_group_txt));\n      if (1 > (ch = iokey(1))) return w;\n   }\n   switch (ch) {\n      case 'a':                   // we don't carry 'a' / 'w' in our\n         w = w->next;             // pmt - they're here for a good\n         break;                   // friend of ours -- wins_colors.\n      case 'w':                   // (however those letters work via\n         w = w->prev;             // the pmt too but gee, end-loser\n         break;                   // should just press the darn key)\n      case '1': case '2' : case '3': case '4':\n         w = &Winstk[ch - '1'];\n         break;\n      default:                    // keep gcc happy\n         break;\n   }\n   Curwin = w;\n   mkVIZrow1(Curwin);\n   return Curwin;\n} // end: win_select\n\n\n        /*\n         * Just warn the user when a command can't be honored. */\nstatic int win_warn (int what) {\n   switch (what) {\n      case Warn_ALT:\n         show_msg(N_txt(DISABLED_cmd_txt));\n         break;\n      case Warn_VIZ:\n         show_msg(fmtmk(N_fmt(DISABLED_win_fmt), Curwin->grpname));\n         break;\n      default:                    // keep gcc happy\n         break;\n   }\n   /* we gotta' return false 'cause we're somewhat well known within\n      macro society, by way of that sassy little tertiary operator... */\n   return 0;\n} // end: win_warn\n\n\n        /*\n         * Change colors *Helper* function to save/restore settings;\n         * ensure colors will show; and rebuild the terminfo strings. */\nstatic void wins_clrhlp (WIN_t *q, int save) {\n   static int flgssav, summsav, msgssav, headsav, tasksav;\n\n   if (save) {\n      flgssav = q->rc.winflags; summsav = q->rc.summclr;\n      msgssav = q->rc.msgsclr;  headsav = q->rc.headclr; tasksav = q->rc.taskclr;\n      SETw(q, Show_COLORS);\n   } else {\n      q->rc.winflags = flgssav; q->rc.summclr = summsav;\n      q->rc.msgsclr = msgssav;  q->rc.headclr = headsav; q->rc.taskclr = tasksav;\n   }\n   capsmk(q);\n} // end: wins_clrhlp\n\n\n        /*\n         * Change colors used in display */\nstatic void wins_colors (void) {\n #define kbdABORT  'q'\n #define kbdAPPLY  kbd_ENTER\n   WIN_t *w = Curwin;             // avoid gcc bloat with a local copy\n   int clr = w->rc.taskclr, *pclr = &w->rc.taskclr;\n   char tgt = 'T';\n   int key;\n\n   if (0 >= max_colors) {\n      show_msg(N_txt(COLORS_nomap_txt));\n      return;\n   }\n   wins_clrhlp(w, 1);\n   putp((Cursor_state = Cap_curs_huge));\nsignify_that:\n   putp(Cap_clr_scr);\n   adj_geometry();\n\n   do {\n      putp(Cap_home);\n      // this string is well above ISO C89's minimum requirements!\n      show_special(1, fmtmk(N_unq(COLOR_custom_fmt)\n         , w->grpname\n         , CHKw(w, View_NOBOLD) ? N_txt(ON_word_only_txt) : N_txt(OFF_one_word_txt)\n         , CHKw(w, Show_COLORS) ? N_txt(ON_word_only_txt) : N_txt(OFF_one_word_txt)\n         , CHKw(w, Show_HIBOLD) ? N_txt(ON_word_only_txt) : N_txt(OFF_one_word_txt)\n         , tgt, max_colors, clr, w->grpname));\n      putp(Cap_clr_eos);\n      fflush(stdout);\n\n      if (Frames_signal) goto signify_that;\n      key = iokey(1);\n      if (key < 1) goto signify_that;\n      if (key == kbd_ESC) break;\n\n      switch (key) {\n         case 'S':\n            pclr = &w->rc.summclr;\n            clr = *pclr;\n            tgt = key;\n            break;\n         case 'M':\n            pclr = &w->rc.msgsclr;\n            clr = *pclr;\n            tgt = key;\n            break;\n         case 'H':\n            pclr = &w->rc.headclr;\n            clr = *pclr;\n            tgt = key;\n            break;\n         case 'T':\n            pclr = &w->rc.taskclr;\n            clr = *pclr;\n            tgt = key;\n            break;\n         case '0': case '1': case '2': case '3':\n         case '4': case '5': case '6': case '7':\n            clr = key - '0';\n            *pclr = clr;\n            break;\n         case kbd_UP:\n            ++clr;\n            if (clr >= max_colors) clr = 0;\n            *pclr = clr;\n            break;\n         case kbd_DOWN:\n            --clr;\n            if (clr < 0) clr = max_colors - 1;\n            *pclr = clr;\n            break;\n         case 'B':\n            TOGw(w, View_NOBOLD);\n            break;\n         case 'b':\n            TOGw(w, Show_HIBOLD);\n            break;\n         case 'z':\n            TOGw(w, Show_COLORS);\n            break;\n         case 'a':\n         case 'w':\n            wins_clrhlp((w = win_select(key)), 1);\n            clr = w->rc.taskclr, pclr = &w->rc.taskclr;\n            tgt = 'T';\n            break;\n         default:\n            break;                // keep gcc happy\n      }\n      capsmk(w);\n   } while (key != kbdAPPLY && key != kbdABORT);\n\n   if (key == kbdABORT || key == kbd_ESC) wins_clrhlp(w, 0);\n\n #undef kbdABORT\n #undef kbdAPPLY\n} // end: wins_colors\n\n\n        /*\n         * Manipulate flag(s) for all our windows. */\nstatic void wins_reflag (int what, int flg) {\n   WIN_t *w = Curwin;             // avoid gcc bloat with a local copy\n\n   do {\n      switch (what) {\n         case Flags_TOG:\n            TOGw(w, flg);\n            break;\n         case Flags_SET:          // Ummmm, i can't find anybody\n            SETw(w, flg);         // who uses Flags_set ...\n            break;\n         case Flags_OFF:\n            OFFw(w, flg);\n            break;\n         default:                 // keep gcc happy\n            break;\n      }\n         /* a flag with special significance -- user wants to rebalance\n            display so we gotta' off some stuff then force on two flags... */\n      if (EQUWINS_xxx == flg)\n         win_reset(w);\n\n      w = w->next;\n   } while (w != Curwin);\n} // end: wins_reflag\n\n\n        /*\n         * Set up the raw/incomplete field group windows --\n         * they'll be finished off after startup completes.\n         * [ and very likely that will override most/all of our efforts ]\n         * [               --- life-is-NOT-fair ---                     ] */\nstatic void wins_stage_1 (void) {\n   WIN_t *w;\n   int i;\n\n   for (i = 0; i < GROUPSMAX; i++) {\n      w = &Winstk[i];\n      w->winnum = i + 1;\n      w->rc = Rc.win[i];\n      w->captab[0] = Cap_norm;\n      w->captab[1] = Cap_norm;\n      w->captab[2] = w->cap_bold;\n      w->captab[3] = w->capclr_sum;\n      w->captab[4] = w->capclr_msg;\n      w->captab[5] = w->capclr_pmt;\n      w->captab[6] = w->capclr_hdr;\n      w->captab[7] = w->capclr_rowhigh;\n      w->captab[8] = w->capclr_rownorm;\n      w->next = w + 1;\n      w->prev = w - 1;\n   }\n\n   // fixup the circular chains...\n   Winstk[GROUPSMAX - 1].next = &Winstk[0];\n   Winstk[0].prev = &Winstk[GROUPSMAX - 1];\n   Curwin = Winstk;\n} // end: wins_stage_1\n\n\n        /*\n         * This guy just completes the field group windows after the\n         * rcfiles have been read and command line arguments parsed.\n         * And since he's the cabose of startup, he'll also tidy up\n         * a few final things... */\nstatic void wins_stage_2 (void) {\n   int i;\n\n   for (i = 0; i < GROUPSMAX; i++) {\n      win_names(&Winstk[i], Winstk[i].rc.winname);\n      capsmk(&Winstk[i]);\n      Winstk[i].findstr = alloc_c(FNDBUFSIZ);\n      Winstk[i].findlen = 0;\n   }\n   if (!Batch)\n      putp((Cursor_state = Cap_curs_hide));\n   else {\n      OFFw(Curwin, View_SCROLL);\n      signal(SIGHUP, SIG_IGN);    // allow running under nohup\n   }\n   // fill in missing Fieldstab members and build each window's columnhdr\n   zap_fieldstab();\n\n#ifndef OFF_STDERROR\n   /* there's a chance that damn libnuma may spew to stderr so we gotta\n      make sure he does not corrupt poor ol' top's first output screen!\n      Yes, he provides some overridable 'weak' functions to change such\n      behavior but we can't exploit that since we don't follow a normal\n      ld route to symbol resolution (we use that dlopen() guy instead)! */\n   Stderr_save = dup(fileno(stderr));\n   if (-1 < Stderr_save && freopen(\"/dev/null\", \"w\", stderr))\n      ;                           // avoid -Wunused-result\n#endif\n\n   // with preserved 'other filters' & command line 'user filters',\n   // we must ensure that we always have a visible task on row one.\n   mkVIZrow1(Curwin);\n\n   // lastly, initialize a signal set used to throttle one troublesome signal\n   sigemptyset(&Sigwinch_set);\n#ifdef SIGNALS_LESS\n   sigaddset(&Sigwinch_set, SIGWINCH);\n#endif\n} // end: wins_stage_2\n\n\n        /*\n         * Determine if this task matches the 'u/U' selection\n         * criteria for a given window */\nstatic inline int wins_usrselect (const WIN_t *q, const int idx) {\n   proc_t *p = q->ppt[idx];\n   switch(q->usrseltyp) {\n      case 0:                                    // uid selection inactive\n         return 1;\n      case 'U':                                  // match any uid\n         if (p->ruid == q->usrseluid) return q->usrselflg;\n         if (p->suid == q->usrseluid) return q->usrselflg;\n         if (p->fuid == q->usrseluid) return q->usrselflg;\n      // fall through...\n      case 'u':                                  // match effective uid\n         if (p->euid == q->usrseluid) return q->usrselflg;\n      // fall through...\n      default:                                   // no match...\n         ;\n   }\n   return !q->usrselflg;\n} // end: wins_usrselect\n\f\n/*######  Forest View support  ###########################################*/\n\n        /*\n         * We try keeping most existing code unaware of these activities\n         * ( plus, maintain alphabetical order within carefully chosen )\n         * ( function names of: forest_a, forest_b, forest_c, forest_d )\n         * ( with each name exactly 1 letter more than its predecessor ) */\nstatic proc_t **Seed_ppt;                   // temporary win ppt pointer\nstatic proc_t **Tree_ppt;                   // forest_create will resize\nstatic int      Tree_idx;                   // frame_make resets to zero\n        /* the next three support collapse/expand children. the Hide_pid\n           array holds parent pids whose children have been manipulated.\n           positive pid values represent parents with collapsed children\n           while a negative pid value means children have been expanded.\n           ( the first two are managed under the 'keys_task()' routine ) */\nstatic int *Hide_pid;                       // collapsible process array\nstatic int  Hide_tot;                       // total used in above array\n#ifndef TREE_VCPUOFF\nstatic unsigned *Hide_cpu;                  // accum tics from collapsed\n#endif\n\n        /*\n         * This little recursive guy is the real forest view workhorse.\n         * He fills in the Tree_ppt array and also sets the child indent\n         * level which is stored in an unused proc_t padding byte. */\nstatic void forest_adds (const int self, int level) {\n   int i;\n\n   if (Tree_idx < Frame_maxtask) {          // immunize against insanity\n      if (level > 100) level = 101;         // our arbitrary nests limit\n      Tree_ppt[Tree_idx] = Seed_ppt[self];  // add this as root or child\n      Tree_ppt[Tree_idx++]->pad_3 = level;  // borrow 1 byte, 127 levels\n#ifdef TREE_SCANALL\n      for (i = 0; i < Frame_maxtask; i++) {\n         if (i == self) continue;\n#else\n      for (i = self + 1; i < Frame_maxtask; i++) {\n#endif\n         if (Seed_ppt[self]->tid == Seed_ppt[i]->tgid\n         || (Seed_ppt[self]->tid == Seed_ppt[i]->ppid && Seed_ppt[i]->tid == Seed_ppt[i]->tgid))\n            forest_adds(i, level + 1);      // got one child any others?\n      }\n   }\n} // end: forest_adds\n\n\n#ifndef TREE_SCANALL\n        /*\n         * Our qsort callback to order a ppt by the non-display start_time\n         * which will make us immune from any pid, ppid or tgid anomalies\n         * if/when pid values are wrapped by the kernel! */\nstatic int forest_based (const proc_t **x, const proc_t **y) {\n   if ( (*x)->start_time > (*y)->start_time ) return  1;\n   if ( (*x)->start_time < (*y)->start_time ) return -1;\n   return 0;\n} // end: forest_based\n#endif\n\n\n        /*\n         * This routine is responsible for preparing the proc_t's for\n         * a forest display in a designated window. After completion,\n         * he will replace the original window ppt with our specially\n         * ordered forest version. He also marks any hidden children! */\nstatic void forest_create (WIN_t *q) {\n   static int hwmsav;\n   int i, j;\n\n   Seed_ppt = q->ppt;                       // avoid passing WIN_t ptrs\n   if (!Tree_idx) {                         // do just once per frame\n      if (hwmsav < Frame_maxtask) {         // grow, but never shrink\n         hwmsav = Frame_maxtask;\n         Tree_ppt = alloc_r(Tree_ppt, sizeof(proc_t *) * hwmsav);\n#ifndef TREE_VCPUOFF\n         Hide_cpu = alloc_r(Hide_cpu, sizeof(unsigned) * hwmsav);\n#endif\n      }\n\n#ifndef TREE_SCANALL\n      qsort(Seed_ppt, Frame_maxtask, sizeof(proc_t *), (QFP_t)forest_based);\n#endif\n      for (i = 0; i < Frame_maxtask; i++) { // avoid any hidepid distortions\n         if (!Seed_ppt[i]->pad_3)           // real & pseudo parents == zero\n            forest_adds(i, 0);              // add a parent and its children\n      }\n#ifndef TREE_VCPUOFF\n      memset(Hide_cpu, 0, sizeof(unsigned) * Frame_maxtask);\n#endif\n      /* we're borrowing some pad bytes in the proc_t,\n         pad_2: 'x' means a collapsed thread, 'z' means an unseen child\n         pad_3: where level number is stored (0 - 100) */\n      for (i = 0; i < Hide_tot; i++) {\n         if (Hide_pid[i] > 0) {\n            for (j = 0; j < Frame_maxtask; j++) {\n               if (Tree_ppt[j]->tid == Hide_pid[i]) {\n                  int parent = j;\n                  int children = 0;\n                  char level = Tree_ppt[j]->pad_3;\n\n                  while (j+1 < Frame_maxtask && Tree_ppt[j+1]->pad_3 > level) {\n                     ++j;\n                     Tree_ppt[j]->pad_2 = 'z';\n#ifndef TREE_VCPUOFF\n                     Hide_cpu[parent] += Tree_ppt[j]->pcpu;\n#endif\n                     children = 1;\n                  }\n                  /* if any children found (and collapsed), mark the parent\n                     ( when children aren't found we won't negate the pid )\n                     ( to prevent a future scan since who's to say such a )\n                     ( task won't fork one or more children in the future ) */\n                  if (children) Tree_ppt[parent]->pad_2 = 'x';\n                  // this will force a check of the next Hide_pid[], if any\n                  j = Frame_maxtask + 1;\n               }\n            }\n            // if target task disappeared (ended), prevent further scanning\n            if (j == Frame_maxtask) Hide_pid[i] = -Hide_pid[i];\n         }\n      }\n   }\n   memcpy(Seed_ppt, Tree_ppt, sizeof(proc_t *) * Frame_maxtask);\n} // end: forest_create\n\n\n        /*\n         * This guy adds the artwork to either p->cmd or p->cmdline\n         * when in forest view mode, otherwise he just returns 'em. */\nstatic inline const char *forest_display (const WIN_t *q, const proc_t *p) {\n#ifndef SCROLLVAR_NO\n   static char buf[1024*64*2]; // the same as readproc's MAX_BUFSZ\n#else\n   static char buf[ROWMINSIZ];\n#endif\n   const char *which = (CHKw(q, Show_CMDLIN)) ? *p->cmdline : p->cmd;\n\n   if (!CHKw(q, Show_FOREST) || !p->pad_3) return which;\n#ifndef TREE_VWINALL\n   if (q == Curwin)            // note: the following is NOT indented\n#endif\n   if (p->pad_2 == 'x') {\n#ifdef TREE_VALTMRK\n      snprintf(buf, sizeof(buf), \"%*s%s\", (4 * p->pad_3), \"`+ \", which);\n#else\n      snprintf(buf, sizeof(buf), \"+%*s%s\", ((4 * p->pad_3) - 1), \"`- \", which);\n#endif\n      return buf;\n   }\n   if (p->pad_3 > 100) snprintf(buf, sizeof(buf), \"%400s%s\", \" +  \", which);\n   else snprintf(buf, sizeof(buf), \"%*s%s\", (4 * p->pad_3), \" `- \", which);\n   return buf;\n} // end: forest_display\n\f\n/*######  Interactive Input Tertiary support  ############################*/\n\n  /*\n   * This section exists so as to offer some function naming freedom\n   * while also maintaining the strict alphabetical order protocol\n   * within each section. */\n\n        /*\n         * This guy is a *Helper* function serving the following two masters:\n         *   find_string() - find the next match in a given window\n         *   task_show()   - highlight all matches currently in-view\n         * If q->findstr is found in the designated buffer, he returns the\n         * offset from the start of the buffer, otherwise he returns -1. */\nstatic inline int find_ofs (const WIN_t *q, const char *buf) {\n   char *fnd;\n\n   if (q->findstr[0] && (fnd = STRSTR(buf, q->findstr)))\n      return (int)(fnd - buf);\n   return -1;\n} // end: find_ofs\n\n\n\n   /* This is currently the one true prototype require by top.\n      It is placed here, instead of top.h, so as to avoid a compiler\n      warning when top_nls.c is compiled. */\nstatic const char *task_show (const WIN_t *q, const int idx);\n\nstatic void find_string (int ch) {\n #define reDUX (found) ? N_txt(WORD_another_txt) : \"\"\n   static int found;\n   int i;\n\n   if ('&' == ch && !Curwin->findstr[0]) {\n      show_msg(N_txt(FIND_no_next_txt));\n      return;\n   }\n   if ('L' == ch) {\n      char *str = ioline(N_txt(GET_find_str_txt));\n      if (*str == kbd_ESC) return;\n      snprintf(Curwin->findstr, FNDBUFSIZ, \"%s\", str);\n      Curwin->findlen = strlen(Curwin->findstr);\n      found = 0;\n#ifndef USE_X_COLHDR\n      if (Curwin->findstr[0]) SETw(Curwin, NOHIFND_xxx);\n      else OFFw(Curwin, NOHIFND_xxx);\n#endif\n   }\n   if (Curwin->findstr[0]) {\n      SETw(Curwin, NOPRINT_xxx);\n      for (i = Curwin->begtask; i < Frame_maxtask; i++) {\n         const char *row = task_show(Curwin, i);\n         if (*row && -1 < find_ofs(Curwin, row)) {\n            found = 1;\n            if (i == Curwin->begtask) continue;\n            Curwin->begtask = i;\n            return;\n         }\n      }\n      show_msg(fmtmk(N_fmt(FIND_no_find_fmt), reDUX, Curwin->findstr));\n   }\n #undef reDUX\n} // end: find_string\n\n\nstatic void help_view (void) {\n   WIN_t *w = Curwin;             // avoid gcc bloat with a local copy\n   char key = 1;\n\n   putp((Cursor_state = Cap_curs_huge));\nsignify_that:\n   putp(Cap_clr_scr);\n   adj_geometry();\n\n   show_special(1, fmtmk(N_unq(KEYS_helpbas_fmt)\n      , PACKAGE_STRING\n      , w->grpname\n      , CHKw(w, Show_CTIMES) ? N_txt(ON_word_only_txt) : N_txt(OFF_one_word_txt)\n      , Rc.delay_time\n      , Secure_mode ? N_txt(ON_word_only_txt) : N_txt(OFF_one_word_txt)\n      , Secure_mode ? \"\" : N_unq(KEYS_helpext_fmt)));\n   putp(Cap_clr_eos);\n   fflush(stdout);\n\n   if (Frames_signal) goto signify_that;\n   key = iokey(1);\n   if (key < 1) goto signify_that;\n\n   switch (key) {\n      case kbd_ESC: case 'q':\n         break;\n      case '?': case 'h': case 'H':\n         do {\n            putp(Cap_home);\n            show_special(1, fmtmk(N_unq(WINDOWS_help_fmt)\n               , w->grpname\n               , Winstk[0].rc.winname, Winstk[1].rc.winname\n               , Winstk[2].rc.winname, Winstk[3].rc.winname));\n            putp(Cap_clr_eos);\n            fflush(stdout);\n            if (Frames_signal || (key = iokey(1)) < 1) {\n               adj_geometry();\n               putp(Cap_clr_scr);\n            } else w = win_select(key);\n         } while (key != kbd_ENTER && key != kbd_ESC);\n         break;\n      default:\n         goto signify_that;\n   }\n} // end: help_view\n\n\nstatic void other_filters (int ch) {\n   WIN_t *w = Curwin;             // avoid gcc bloat with a local copy\n   const char *txt, *p;\n   char *glob;\n\n   switch (ch) {\n      case 'o':\n      case 'O':\n         if (ch == 'o') txt = N_txt(OSEL_casenot_txt);\n         else txt = N_txt(OSEL_caseyes_txt);\n         glob = ioline(fmtmk(N_fmt(OSEL_prompts_fmt), w->osel_tot + 1, txt));\n         if (*glob == kbd_ESC || *glob == '\\0')\n            return;\n         if ((p = osel_add(w, ch, glob, 1))) {\n            show_msg(p);\n            return;\n         }\n#ifndef USE_X_COLHDR\n         SETw(w, NOHISEL_xxx);\n#endif\n         break;\n      case kbd_CtrlO:\n         if (VIZCHKw(w)) {\n            char buf[SCREENMAX], **pp;\n            struct osel_s *osel;\n            int i;\n\n            i = 0;\n            osel = w->osel_1st;\n            pp = alloc_c((w->osel_tot + 1) * sizeof(char **));\n            while (osel && i < w->osel_tot) {\n               pp[i++] = osel->raw;\n               osel = osel->nxt;\n            }\n            buf[0] = '\\0';\n            for ( ; i > 0; )\n               strncat(buf, fmtmk(\"%s'%s'\", \" + \" , pp[--i]), sizeof(buf) - (strlen(buf) + 1));\n            if (buf[0]) p = buf + strspn(buf, \" + \");\n            else p = N_txt(WORD_noneone_txt);\n            ioline(fmtmk(N_fmt(OSEL_statlin_fmt), p));\n            free(pp);\n         }\n         break;\n      default:                    // keep gcc happy\n         break;\n   }\n} // end: other_filters\n\n\nstatic void write_rcfile (void) {\n   FILE *fp;\n   int i;\n\n   if (Rc_questions) {\n      show_pmt(N_txt(XTRA_warncfg_txt));\n      if ('y' != tolower(iokey(1)))\n         return;\n      Rc_questions = 0;\n   }\n   if (!(fp = fopen(Rc_name, \"w\"))) {\n      show_msg(fmtmk(N_fmt(FAIL_rc_open_fmt), Rc_name, strerror(errno)));\n      return;\n   }\n   fprintf(fp, \"%s's \" RCF_EYECATCHER, Myname);\n   fprintf(fp, \"Id:%c, Mode_altscr=%d, Mode_irixps=%d, Delay_time=%d.%d, Curwin=%d\\n\"\n      , RCF_VERSION_ID\n      , Rc.mode_altscr, Rc.mode_irixps\n        // this may be ugly, but it keeps us locale independent...\n      , (int)Rc.delay_time, (int)((Rc.delay_time - (int)Rc.delay_time) * 1000)\n      , (int)(Curwin - Winstk));\n\n   for (i = 0 ; i < GROUPSMAX; i++) {\n      fprintf(fp, \"%s\\tfieldscur=%s\\n\"\n         , Winstk[i].rc.winname, Winstk[i].rc.fieldscur);\n      fprintf(fp, \"\\twinflags=%d, sortindx=%d, maxtasks=%d, graph_cpus=%d, graph_mems=%d\\n\"\n         , Winstk[i].rc.winflags, Winstk[i].rc.sortindx, Winstk[i].rc.maxtasks\n         , Winstk[i].rc.graph_cpus,  Winstk[i].rc.graph_mems);\n      fprintf(fp, \"\\tsummclr=%d, msgsclr=%d, headclr=%d, taskclr=%d\\n\"\n         , Winstk[i].rc.summclr, Winstk[i].rc.msgsclr\n         , Winstk[i].rc.headclr, Winstk[i].rc.taskclr);\n   }\n\n   // any new addition(s) last, for older rcfiles compatibility...\n   fprintf(fp, \"Fixed_widest=%d, Summ_mscale=%d, Task_mscale=%d, Zero_suppress=%d\\n\"\n      , Rc.fixed_widest, Rc.summ_mscale, Rc.task_mscale, Rc.zero_suppress);\n\n   if (Winstk[0].osel_tot + Winstk[1].osel_tot\n     + Winstk[2].osel_tot + Winstk[3].osel_tot) {\n      fprintf(fp, \"\\n\");\n      fprintf(fp, Osel_delim_1_txt);\n      for (i = 0 ; i < GROUPSMAX; i++) {\n         struct osel_s *osel = Winstk[i].osel_1st;\n         if (osel) {\n            fprintf(fp, Osel_window_fmts, i, Winstk[i].osel_tot);\n            do {\n               fprintf(fp, Osel_filterO_fmt, osel->typ, osel->raw);\n               osel = osel->nxt;\n            } while (osel);\n         }\n      }\n      fprintf(fp, Osel_delim_2_txt);\n   }\n\n   if (Inspect.raw)\n      fputs(Inspect.raw, fp);\n\n   fclose(fp);\n   show_msg(fmtmk(N_fmt(WRITE_rcfile_fmt), Rc_name));\n} // end: write_rcfile\n\f\n/*######  Interactive Input Secondary support (do_key helpers)  ##########*/\n\n  /*\n   *  These routines exist just to keep the do_key() function\n   *  a reasonably modest size. */\n\nstatic void keys_global (int ch) {\n   WIN_t *w = Curwin;             // avoid gcc bloat with a local copy\n\n   switch (ch) {\n      case '?':\n      case 'h':\n         help_view();\n         break;\n      case 'B':\n         TOGw(w, View_NOBOLD);\n         capsmk(w);\n         break;\n      case 'd':\n      case 's':\n         if (Secure_mode)\n            show_msg(N_txt(NOT_onsecure_txt));\n         else {\n            float tmp =\n               get_float(fmtmk(N_fmt(DELAY_change_fmt), Rc.delay_time));\n            if (tmp > -1) Rc.delay_time = tmp;\n         }\n         break;\n      case 'E':\n         if (++Rc.summ_mscale > SK_Eb) Rc.summ_mscale = SK_Kb;\n         break;\n      case 'e':\n         if (++Rc.task_mscale > SK_Pb) Rc.task_mscale = SK_Kb;\n         break;\n      case 'F':\n      case 'f':\n         fields_utility();\n         break;\n      case 'g':\n         win_select(0);\n         break;\n      case 'H':\n         Thread_mode = !Thread_mode;\n         if (!CHKw(w, View_STATES))\n            show_msg(fmtmk(N_fmt(THREADS_show_fmt)\n               , Thread_mode ? N_txt(ON_word_only_txt) : N_txt(OFF_one_word_txt)));\n         Winstk[0].begtask = Winstk[1].begtask = Winstk[2].begtask = Winstk[3].begtask = 0;\n         // force an extra procs refresh to avoid %cpu distortions...\n         Pseudo_row = PROC_XTRA;\n         break;\n      case 'I':\n         if (smp_num_cpus > 1) {\n            Rc.mode_irixps = !Rc.mode_irixps;\n            show_msg(fmtmk(N_fmt(IRIX_curmode_fmt)\n               , Rc.mode_irixps ? N_txt(ON_word_only_txt) : N_txt(OFF_one_word_txt)));\n         } else\n            show_msg(N_txt(NOT_smp_cpus_txt));\n         break;\n      case 'k':\n         if (Secure_mode) {\n            show_msg(N_txt(NOT_onsecure_txt));\n         } else {\n            int sig = SIGTERM,\n                def = w->ppt[w->begtask]->tid,\n                pid = get_int(fmtmk(N_txt(GET_pid2kill_fmt), def));\n            if (pid > GET_NUM_ESC) {\n               char *str;\n               if (pid == GET_NUM_NOT) pid = def;\n               str = ioline(fmtmk(N_fmt(GET_sigs_num_fmt), pid, SIGTERM));\n               if (*str != kbd_ESC) {\n                  if (*str) sig = signal_name_to_number(str);\n                  if (Frames_signal) break;\n                  if (0 < sig && kill(pid, sig))\n                     show_msg(fmtmk(N_fmt(FAIL_signals_fmt)\n                        , pid, sig, strerror(errno)));\n                  else if (0 > sig) show_msg(N_txt(BAD_signalid_txt));\n               }\n            }\n         }\n         break;\n      case 'r':\n         if (Secure_mode)\n            show_msg(N_txt(NOT_onsecure_txt));\n         else {\n            int val,\n                def = w->ppt[w->begtask]->tid,\n                pid = get_int(fmtmk(N_fmt(GET_pid2nice_fmt), def));\n            if (pid > GET_NUM_ESC) {\n               if (pid == GET_NUM_NOT) pid = def;\n               val = get_int(fmtmk(N_fmt(GET_nice_num_fmt), pid));\n               if (val > GET_NUM_NOT\n               && setpriority(PRIO_PROCESS, (unsigned)pid, val))\n                  show_msg(fmtmk(N_fmt(FAIL_re_nice_fmt)\n                     , pid, val, strerror(errno)));\n            }\n         }\n         break;\n      case 'X':\n      {  int wide = get_int(fmtmk(N_fmt(XTRA_fixwide_fmt), Rc.fixed_widest));\n         if (wide > GET_NUM_NOT) {\n            if (wide >= 0 && wide <= SCREENMAX) Rc.fixed_widest = wide;\n            else Rc.fixed_widest = -1;\n         }\n      }\n         break;\n      case 'Y':\n         if (!Inspect.total)\n            ioline(N_txt(YINSP_noents_txt));\n         else {\n            int def = w->ppt[w->begtask]->tid,\n                pid = get_int(fmtmk(N_fmt(YINSP_pidsee_fmt), def));\n            if (pid > GET_NUM_ESC) {\n               if (pid == GET_NUM_NOT) pid = def;\n               if (pid) inspection_utility(pid);\n            }\n         }\n         break;\n      case 'Z':\n         wins_colors();\n         break;\n      case '0':\n         Rc.zero_suppress = !Rc.zero_suppress;\n         break;\n      case kbd_ENTER:             // these two have the effect of waking us\n      case kbd_SPACE:             // from 'pselect', refreshing the display\n         break;                   // and updating any hot-plugged resources\n      default:                    // keep gcc happy\n         break;\n   }\n} // end: keys_global\n\n\nstatic void keys_summary (int ch) {\n   WIN_t *w = Curwin;             // avoid gcc bloat with a local copy\n\n   switch (ch) {\n      case '1':\n         if (CHKw(w, View_CPUNOD)) OFFw(w, View_CPUSUM);\n         else TOGw(w, View_CPUSUM);\n         OFFw(w, View_CPUNOD);\n         SETw(w, View_STATES);\n         break;\n      case '2':\n         if (!Numa_node_tot)\n            show_msg(N_txt(NUMA_nodenot_txt));\n         else {\n            if (Numa_node_sel < 0) TOGw(w, View_CPUNOD);\n            if (!CHKw(w, View_CPUNOD)) SETw(w, View_CPUSUM);\n            SETw(w, View_STATES);\n            Numa_node_sel = -1;\n         }\n         break;\n      case '3':\n         if (!Numa_node_tot)\n            show_msg(N_txt(NUMA_nodenot_txt));\n         else {\n            int num = get_int(fmtmk(N_fmt(NUMA_nodeget_fmt), Numa_node_tot -1));\n            if (num > GET_NUM_NOT) {\n               if (num >= 0 && num < Numa_node_tot) {\n                  Numa_node_sel = num;\n                  SETw(w, View_CPUNOD | View_STATES);\n                  OFFw(w, View_CPUSUM);\n               } else\n                  show_msg(N_txt(NUMA_nodebad_txt));\n            }\n         }\n         break;\n      case 'C':\n         VIZTOGw(w, View_SCROLL);\n         break;\n      case 'l':\n         TOGw(w, View_LOADAV);\n         break;\n      case 'm':\n         if (!CHKw(w, View_MEMORY))\n            SETw(w, View_MEMORY);\n         else if (++w->rc.graph_mems > 2) {\n            w->rc.graph_mems = 0;;\n            OFFw(w, View_MEMORY);\n         }\n         break;\n      case 't':\n         if (!CHKw(w, View_STATES))\n            SETw(w, View_STATES);\n         else if (++w->rc.graph_cpus > 2) {\n            w->rc.graph_cpus = 0;;\n            OFFw(w, View_STATES);\n         }\n         break;\n      default:                    // keep gcc happy\n         break;\n   }\n} // end: keys_summary\n\n\nstatic void keys_task (int ch) {\n   WIN_t *w = Curwin;             // avoid gcc bloat with a local copy\n\n   switch (ch) {\n      case '#':\n      case 'n':\n         if (VIZCHKw(w)) {\n            int num = get_int(fmtmk(N_fmt(GET_max_task_fmt), w->rc.maxtasks));\n            if (num > GET_NUM_NOT) {\n               if (-1 < num ) w->rc.maxtasks = num;\n               else show_msg(N_txt(BAD_max_task_txt));\n            }\n         }\n         break;\n      case '<':\n#ifdef TREE_NORESET\n         if (CHKw(w, Show_FOREST)) break;\n#endif\n         if (VIZCHKw(w)) {\n            FLG_t *p = w->procflgs + w->maxpflgs - 1;\n            while (p > w->procflgs && *p != w->rc.sortindx) --p;\n            if (*p == w->rc.sortindx) {\n               --p;\n#ifndef USE_X_COLHDR\n               if (EU_MAXPFLGS < *p) --p;\n#endif\n               if (p >= w->procflgs) {\n                  w->rc.sortindx = *p;\n#ifndef TREE_NORESET\n                  OFFw(w, Show_FOREST);\n#endif\n               }\n            }\n         }\n         break;\n      case '>':\n#ifdef TREE_NORESET\n         if (CHKw(w, Show_FOREST)) break;\n#endif\n         if (VIZCHKw(w)) {\n            FLG_t *p = w->procflgs + w->maxpflgs - 1;\n            while (p > w->procflgs && *p != w->rc.sortindx) --p;\n            if (*p == w->rc.sortindx) {\n               ++p;\n#ifndef USE_X_COLHDR\n               if (EU_MAXPFLGS < *p) ++p;\n#endif\n               if (p < w->procflgs + w->maxpflgs) {\n                  w->rc.sortindx = *p;\n#ifndef TREE_NORESET\n                  OFFw(w, Show_FOREST);\n#endif\n               }\n            }\n         }\n         break;\n      case 'b':\n         TOGw(w, Show_HIBOLD);\n         capsmk(w);\n         break;\n      case 'c':\n         VIZTOGw(w, Show_CMDLIN);\n         break;\n      case 'i':\n      {  static WIN_t *w_sav;\n         static int beg_sav;\n         if (w_sav != w) { beg_sav = 0; w_sav = w; }\n         if (CHKw(w, Show_IDLEPS)) { beg_sav = w->begtask; w->begtask = 0; }\n         else { w->begtask = beg_sav; beg_sav = 0; }\n      }\n         VIZTOGw(w, Show_IDLEPS);\n         break;\n      case 'J':\n         VIZTOGw(w, Show_JRNUMS);\n         break;\n      case 'j':\n         VIZTOGw(w, Show_JRSTRS);\n         break;\n      case 'R':\n#ifdef TREE_NORESET\n         if (!CHKw(w, Show_FOREST)) VIZTOGw(w, Qsrt_NORMAL);\n#else\n         if (VIZCHKw(w)) {\n            TOGw(w, Qsrt_NORMAL);\n            OFFw(w, Show_FOREST);\n         }\n#endif\n         break;\n      case 'S':\n         if (VIZCHKw(w)) {\n            TOGw(w, Show_CTIMES);\n            show_msg(fmtmk(N_fmt(TIME_accumed_fmt) , CHKw(w, Show_CTIMES)\n               ? N_txt(ON_word_only_txt) : N_txt(OFF_one_word_txt)));\n         }\n         break;\n      case 'O':\n      case 'o':\n      case kbd_CtrlO:\n         if (VIZCHKw(w)) {\n            other_filters(ch);\n            mkVIZrow1(w);\n         }\n         break;\n      case 'U':\n      case 'u':\n         if (VIZCHKw(w)) {\n            const char *errmsg, *str = ioline(N_txt(GET_user_ids_txt));\n            if (*str != kbd_ESC\n            && (errmsg = user_certify(w, str, ch)))\n                show_msg(errmsg);\n            mkVIZrow1(w);\n         }\n         break;\n      case 'V':\n         if (VIZCHKw(w)) {\n            TOGw(w, Show_FOREST);\n            if (!ENUviz(w, EU_CMD))\n               show_msg(fmtmk(N_fmt(FOREST_modes_fmt) , CHKw(w, Show_FOREST)\n                  ? N_txt(ON_word_only_txt) : N_txt(OFF_one_word_txt)));\n         }\n         break;\n      case 'v':\n         if (VIZCHKw(w)) {\n            if (CHKw(w, Show_FOREST)) {\n               int i, pid = w->ppt[w->begtask]->tid;\n#ifdef TREE_VPROMPT\n               int got = get_int(fmtmk(N_txt(XTRA_vforest_fmt), pid));\n               if (got < GET_NUM_NOT) break;\n               if (got > GET_NUM_NOT) pid = got;\n#endif\n               for (i = 0; i < Hide_tot; i++) {\n                  if (Hide_pid[i] == pid || Hide_pid[i] == -pid) {\n                     Hide_pid[i] = -Hide_pid[i];\n                     break;\n                  }\n               }\n               if (i == Hide_tot) {\n                  static int totsav;\n                  if (Hide_tot >= totsav) {\n                     totsav += 128;\n                     Hide_pid = alloc_r(Hide_pid, sizeof(int) * totsav);\n                  }\n                  Hide_pid[Hide_tot++] = pid;\n               } else {\n                  // if everything's expanded, let's empty the array ...\n                  for (i = 0; i < Hide_tot; i++)\n                     if (Hide_pid[i] > 0) break;\n                  if (i == Hide_tot) Hide_tot = 0;\n               }\n            }\n         }\n         break;\n      case 'x':\n         if (VIZCHKw(w)) {\n#ifdef USE_X_COLHDR\n            TOGw(w, Show_HICOLS);\n            capsmk(w);\n#else\n            if (ENUviz(w, w->rc.sortindx)\n            && !CHKw(w, NOHIFND_xxx | NOHISEL_xxx)) {\n               TOGw(w, Show_HICOLS);\n               if (ENUpos(w, w->rc.sortindx) < w->begpflg) {\n                  if (CHKw(w, Show_HICOLS)) w->begpflg += 2;\n                  else w->begpflg -= 2;\n                  if (0 > w->begpflg) w->begpflg = 0;\n               }\n               capsmk(w);\n            }\n#endif\n         }\n         break;\n      case 'y':\n         if (VIZCHKw(w)) {\n            TOGw(w, Show_HIROWS);\n            capsmk(w);\n         }\n         break;\n      case 'z':\n         if (VIZCHKw(w)) {\n            TOGw(w, Show_COLORS);\n            capsmk(w);\n         }\n         break;\n      default:                    // keep gcc happy\n         break;\n   }\n} // end: keys_task\n\n\nstatic void keys_window (int ch) {\n   WIN_t *w = Curwin;             // avoid gcc bloat with a local copy\n\n   switch (ch) {\n      case '+':\n         if (ALTCHKw) wins_reflag(Flags_OFF, EQUWINS_xxx);\n         Hide_tot = 0;\n         break;\n      case '-':\n         if (ALTCHKw) TOGw(w, Show_TASKON);\n         break;\n      case '=':\n         win_reset(w);\n         Hide_tot = 0;\n         break;\n      case '_':\n         if (ALTCHKw) wins_reflag(Flags_TOG, Show_TASKON);\n         break;\n      case '&':\n      case 'L':\n         if (VIZCHKw(w)) find_string(ch);\n         break;\n      case 'A':\n         Rc.mode_altscr = !Rc.mode_altscr;\n         break;\n      case 'a':\n      case 'w':\n         if (ALTCHKw) win_select(ch);\n         break;\n      case 'G':\n         if (ALTCHKw) {\n            char tmp[SMLBUFSIZ];\n            STRLCPY(tmp, ioline(fmtmk(N_fmt(NAME_windows_fmt), w->rc.winname)));\n            if (tmp[0] && tmp[0] != kbd_ESC) win_names(w, tmp);\n         }\n         break;\n      case kbd_UP:\n         if (VIZCHKw(w)) if (CHKw(w, Show_IDLEPS)) w->begnext = -1;\n         break;\n      case kbd_DOWN:\n         if (VIZCHKw(w)) if (CHKw(w, Show_IDLEPS)) w->begnext = +1;\n         break;\n#ifdef USE_X_COLHDR // ------------------------------------\n      case kbd_LEFT:\n#ifndef SCROLLVAR_NO\n         if (VIZCHKw(w)) {\n            if (VARleft(w))\n               w->varcolbeg -= SCROLLAMT;\n            else if (0 < w->begpflg)\n               w->begpflg -= 1;\n         }\n#else\n         if (VIZCHKw(w)) if (0 < w->begpflg) w->begpflg -= 1;\n#endif\n         break;\n      case kbd_RIGHT:\n#ifndef SCROLLVAR_NO\n         if (VIZCHKw(w)) {\n            if (VARright(w)) {\n               w->varcolbeg += SCROLLAMT;\n               if (0 > w->varcolbeg) w->varcolbeg = 0;\n            } else if (w->begpflg + 1 < w->totpflgs)\n               w->begpflg += 1;\n         }\n#else\n         if (VIZCHKw(w)) if (w->begpflg + 1 < w->totpflgs) w->begpflg += 1;\n#endif\n         break;\n#else  // USE_X_COLHDR ------------------------------------\n      case kbd_LEFT:\n#ifndef SCROLLVAR_NO\n         if (VIZCHKw(w)) {\n            if (VARleft(w))\n               w->varcolbeg -= SCROLLAMT;\n            else if (0 < w->begpflg) {\n               w->begpflg -= 1;\n               if (EU_MAXPFLGS < w->pflgsall[w->begpflg]) w->begpflg -= 2;\n            }\n         }\n#else\n         if (VIZCHKw(w)) if (0 < w->begpflg) {\n            w->begpflg -= 1;\n            if (EU_MAXPFLGS < w->pflgsall[w->begpflg]) w->begpflg -= 2;\n         }\n#endif\n         break;\n      case kbd_RIGHT:\n#ifndef SCROLLVAR_NO\n         if (VIZCHKw(w)) {\n            if (VARright(w)) {\n               w->varcolbeg += SCROLLAMT;\n               if (0 > w->varcolbeg) w->varcolbeg = 0;\n            } else if (w->begpflg + 1 < w->totpflgs) {\n               if (EU_MAXPFLGS < w->pflgsall[w->begpflg])\n                  w->begpflg += (w->begpflg + 3 < w->totpflgs) ? 3 : 0;\n               else w->begpflg += 1;\n            }\n         }\n#else\n         if (VIZCHKw(w)) if (w->begpflg + 1 < w->totpflgs) {\n            if (EU_MAXPFLGS < w->pflgsall[w->begpflg])\n               w->begpflg += (w->begpflg + 3 < w->totpflgs) ? 3 : 0;\n            else w->begpflg += 1;\n         }\n#endif\n         break;\n#endif // USE_X_COLHDR ------------------------------------\n      case kbd_PGUP:\n         if (VIZCHKw(w)) {\n            if (CHKw(w, Show_IDLEPS) && 0 < w->begtask) {\n               w->begnext = -(w->winlines - (Rc.mode_altscr ? 1 : 2));\n            }\n         }\n         break;\n      case kbd_PGDN:\n         if (VIZCHKw(w)) {\n            if (CHKw(w, Show_IDLEPS) && w->begtask < Frame_maxtask - 1) {\n               w->begnext = +(w->winlines - (Rc.mode_altscr ? 1 : 2));\n            }\n         }\n         break;\n      case kbd_HOME:\n#ifndef SCROLLVAR_NO\n         if (VIZCHKw(w)) if (CHKw(w, Show_IDLEPS)) w->begtask = w->begpflg = w->varcolbeg = 0;\n         mkVIZrow1(w);\n#else\n         if (VIZCHKw(w)) if (CHKw(w, Show_IDLEPS)) w->begtask = w->begpflg = 0;\n         mkVIZrow1(w);\n#endif\n         break;\n      case kbd_END:\n         if (VIZCHKw(w)) {\n            if (CHKw(w, Show_IDLEPS)) {\n               w->begnext = (Frame_maxtask - w->winlines) + 1;\n               w->begpflg = w->endpflg;\n#ifndef SCROLLVAR_NO\n               w->varcolbeg = 0;\n#endif\n            }\n         }\n         break;\n      default:                    // keep gcc happy\n         break;\n   }\n} // end: keys_window\n\n\nstatic void keys_xtra (int ch) {\n// const char *xmsg;\n   WIN_t *w = Curwin;             // avoid gcc bloat with a local copy\n\n#ifdef TREE_NORESET\n   if (CHKw(w, Show_FOREST)) return;\n#else\n   OFFw(w, Show_FOREST);\n#endif\n   /* these keys represent old-top compatibility --\n      they're grouped here so that if users could ever be weaned,\n      we would just whack do_key's key_tab entry and this function... */\n   switch (ch) {\n      case 'M':\n         w->rc.sortindx = EU_MEM;\n//       xmsg = \"Memory\";\n         break;\n      case 'N':\n         w->rc.sortindx = EU_PID;\n//       xmsg = \"Numerical\";\n         break;\n      case 'P':\n         w->rc.sortindx = EU_CPU;\n//       xmsg = \"CPU\";\n         break;\n      case 'T':\n         w->rc.sortindx = EU_TM2;\n//       xmsg = \"Time\";\n         break;\n      default:                    // keep gcc happy\n         break;\n   }\n// some have objected to this message, so we'll just keep silent...\n// show_msg(fmtmk(\"%s sort compatibility key honored\", xmsg));\n} // end: keys_xtra\n\f\n/*######  Main Screen routines  ##########################################*/\n\n        /*\n         * Process keyboard input during the main loop */\nstatic void do_key (int ch) {\n   static struct {\n      void (*func)(int ch);\n      char keys[SMLBUFSIZ];\n   } key_tab[] = {\n      { keys_global,\n         { '?', 'B', 'd', 'E', 'e', 'F', 'f', 'g', 'H', 'h'\n         , 'I', 'k', 'r', 's', 'X', 'Y', 'Z', '0'\n         , kbd_ENTER, kbd_SPACE, '\\0' } },\n      { keys_summary,\n         { '1', '2', '3', 'C', 'l', 'm', 't', '\\0' } },\n      { keys_task,\n         { '#', '<', '>', 'b', 'c', 'i', 'J', 'j', 'n', 'O', 'o'\n         , 'R', 'S', 'U', 'u', 'V', 'v', 'x', 'y', 'z'\n         , kbd_CtrlO, '\\0' } },\n      { keys_window,\n         { '+', '-', '=', '_', '&', 'A', 'a', 'G', 'L', 'w'\n         , kbd_UP, kbd_DOWN, kbd_LEFT, kbd_RIGHT, kbd_PGUP, kbd_PGDN\n         , kbd_HOME, kbd_END, '\\0' } },\n      { keys_xtra,\n         { 'M', 'N', 'P', 'T', '\\0'} }\n   };\n   int i;\n\n   switch (ch) {\n      case 0:                // ignored (always)\n      case kbd_ESC:          // ignored (sometimes)\n         goto all_done;\n      case 'q':              // no return from this guy\n         bye_bye(NULL);\n      case 'W':              // no need for rebuilds\n         write_rcfile();\n         goto all_done;\n      default:               // and now, the real work...\n         for (i = 0; i < MAXTBL(key_tab); ++i)\n            if (strchr(key_tab[i].keys, ch)) {\n               key_tab[i].func(ch);\n               Frames_signal = BREAK_kbd;\n               goto all_done;\n            }\n   };\n   /* Frames_signal above will force a rebuild of all column headers and\n      the PROC_FILLxxx flags.  It's NOT simply lazy programming.  Here are\n      some keys that COULD require new column headers and/or libproc flags:\n         'A' - likely\n         'c' - likely when !Mode_altscr, maybe when Mode_altscr\n         'F' - likely\n         'f' - likely\n         'g' - likely\n         'H' - likely\n         'I' - likely\n         'J' - always\n         'j' - always\n         'Z' - likely, if 'Curwin' changed when !Mode_altscr\n         '-' - likely (restricted to Mode_altscr)\n         '_' - likely (restricted to Mode_altscr)\n         '=' - maybe, but only when Mode_altscr\n         '+' - likely (restricted to Mode_altscr)\n         PLUS, likely for FOUR of the EIGHT cursor motion keys (scrolled)\n      ( At this point we have a human being involved and so have all the time )\n      ( in the world.  We can afford a few extra cpu cycles every now & then! )\n    */\n\n   show_msg(N_txt(UNKNOWN_cmds_txt));\nall_done:\n   sysinfo_refresh(1);       // let's be more responsive to hot-pluggin'\n   putp((Cursor_state = Cap_curs_hide));\n} // end: do_key\n\n\n        /*\n         * State display *Helper* function to calc and display the state\n         * percentages for a single cpu.  In this way, we can support\n         * the following environments without the usual code bloat.\n         *    1) single cpu machines\n         *    2) modest smp boxes with room for each cpu's percentages\n         *    3) massive smp guys leaving little or no room for process\n         *       display and thus requiring the cpu summary toggle */\nstatic void summary_hlp (CPU_t *cpu, const char *pfx) {\n   /* we'll trim to zero if we get negative time ticks,\n      which has happened with some SMP kernels (pre-2.4?)\n      and when cpus are dynamically added or removed */\n #define TRIMz(x)  ((tz = (SIC_t)(x)) < 0 ? 0 : tz)\n   //    user    syst    nice    idle    wait    hirg    sirq    steal\n   SIC_t u_frme, s_frme, n_frme, i_frme, w_frme, x_frme, y_frme, z_frme, tot_frme, tz;\n   float scale;\n\n   u_frme = TRIMz(cpu->cur.u - cpu->sav.u);\n   s_frme = TRIMz(cpu->cur.s - cpu->sav.s);\n   n_frme = TRIMz(cpu->cur.n - cpu->sav.n);\n   i_frme = TRIMz(cpu->cur.i - cpu->sav.i);\n   w_frme = TRIMz(cpu->cur.w - cpu->sav.w);\n   x_frme = TRIMz(cpu->cur.x - cpu->sav.x);\n   y_frme = TRIMz(cpu->cur.y - cpu->sav.y);\n   z_frme = TRIMz(cpu->cur.z - cpu->sav.z);\n   tot_frme = u_frme + s_frme + n_frme + i_frme + w_frme + x_frme + y_frme + z_frme;\n#ifndef CPU_ZEROTICS\n   if (tot_frme < cpu->edge)\n      tot_frme = u_frme = s_frme = n_frme = i_frme = w_frme = x_frme = y_frme = z_frme = 0;\n#endif\n   if (1 > tot_frme) i_frme = tot_frme = 1;\n   scale = 100.0 / (float)tot_frme;\n\n   /* display some kinda' cpu state percentages\n      (who or what is explained by the passed prefix) */\n   if (Curwin->rc.graph_cpus) {\n      static struct {\n         const char *user, *syst, *type;\n      } gtab[] = {\n         { \"%-.*s~7\", \"%-.*s~8\", Graph_bars },\n         { \"%-.*s~4\", \"%-.*s~6\", Graph_blks }\n      };\n      char user[SMLBUFSIZ], syst[SMLBUFSIZ], dual[MEDBUFSIZ];\n      int ix = Curwin->rc.graph_cpus - 1;\n      float pct_user = (float)(u_frme + n_frme) * scale,\n            pct_syst = (float)(s_frme + x_frme + y_frme) * scale;\n#ifndef QUICK_GRAPHS\n      int num_user = (int)((pct_user * Graph_adj) + .5),\n          num_syst = (int)((pct_syst * Graph_adj) + .5);\n      if (num_user + num_syst > Graph_len) num_syst = Graph_len - num_user;\n      snprintf(user, sizeof(user), gtab[ix].user, num_user, gtab[ix].type);\n      snprintf(syst, sizeof(syst), gtab[ix].syst, num_syst, gtab[ix].type);\n#else\n      snprintf(user, sizeof(user), gtab[ix].user, (int)((pct_user * Graph_adj) + .5), gtab[ix].type);\n      snprintf(syst, sizeof(syst), gtab[ix].syst, (int)((pct_syst * Graph_adj) + .4), gtab[ix].type);\n#endif\n      snprintf(dual, sizeof(dual), \"%s%s\", user, syst);\n      show_special(0, fmtmk(\"%%%s ~3%#5.1f~2/%-#5.1f~3 %3.0f[~1%-*s]~1\\n\"\n         , pfx, pct_user, pct_syst, pct_user + pct_syst, Graph_len +4, dual));\n   } else {\n      show_special(0, fmtmk(Cpu_States_fmts, pfx\n         , (float)u_frme * scale, (float)s_frme * scale\n         , (float)n_frme * scale, (float)i_frme * scale\n         , (float)w_frme * scale, (float)x_frme * scale\n         , (float)y_frme * scale, (float)z_frme * scale));\n   }\n #undef TRIMz\n} // end: summary_hlp\n\n\n        /*\n         * In support of a new frame:\n         *    1) Display uptime and load average (maybe)\n         *    2) Display task/cpu states (maybe)\n         *    3) Display memory & swap usage (maybe) */\nstatic void summary_show (void) {\n #define isROOM(f,n) (CHKw(w, f) && Msg_row + (n) < Screen_rows - 1)\n #define anyFLG 0xffffff\n   WIN_t *w = Curwin;             // avoid gcc bloat with a local copy\n   char tmp[MEDBUFSIZ];\n   int i;\n\n   // Display Uptime and Loadavg\n   if (isROOM(View_LOADAV, 1)) {\n      if (!Rc.mode_altscr)\n         show_special(0, fmtmk(LOADAV_line, Myname, sprint_uptime(0)));\n      else\n         show_special(0, fmtmk(CHKw(w, Show_TASKON)? LOADAV_line_alt : LOADAV_line\n            , w->grpname, sprint_uptime(0)));\n      Msg_row += 1;\n   } // end: View_LOADAV\n\n   // Display Task and Cpu(s) States\n   if (isROOM(View_STATES, 2)) {\n      show_special(0, fmtmk(N_unq(STATE_line_1_fmt)\n         , Thread_mode ? N_txt(WORD_threads_txt) : N_txt(WORD_process_txt)\n         , Frame_maxtask, Frame_running, Frame_sleepin\n         , Frame_stopped, Frame_zombied));\n      Msg_row += 1;\n\n      cpus_refresh();\n\n      if (!Numa_node_tot) goto numa_nope;\n\n      if (CHKw(w, View_CPUNOD)) {\n         if (Numa_node_sel < 0) {\n            // display the 1st /proc/stat line, then the nodes (if room)\n            summary_hlp(&Cpu_tics[smp_num_cpus], N_txt(WORD_allcpus_txt));\n            Msg_row += 1;\n            // display each cpu node's states\n            for (i = 0; i < Numa_node_tot; i++) {\n               CPU_t *nod_ptr = &Cpu_tics[1 + smp_num_cpus + i];\n               if (!isROOM(anyFLG, 1)) break;\n#ifndef OFF_NUMASKIP\n               if (nod_ptr->id) {\n#endif\n               snprintf(tmp, sizeof(tmp), N_fmt(NUMA_nodenam_fmt), i);\n               summary_hlp(nod_ptr, tmp);\n               Msg_row += 1;\n#ifndef OFF_NUMASKIP\n               }\n#endif\n            }\n         } else {\n            // display the node summary, then the associated cpus (if room)\n            snprintf(tmp, sizeof(tmp), N_fmt(NUMA_nodenam_fmt), Numa_node_sel);\n            summary_hlp(&Cpu_tics[1 + smp_num_cpus + Numa_node_sel], tmp);\n            Msg_row += 1;\n            for (i = 0; i < Cpu_faux_tot; i++) {\n               if (Numa_node_sel == Cpu_tics[i].node) {\n                  if (!isROOM(anyFLG, 1)) break;\n                  snprintf(tmp, sizeof(tmp), N_fmt(WORD_eachcpu_fmt), Cpu_tics[i].id);\n                  summary_hlp(&Cpu_tics[i], tmp);\n                  Msg_row += 1;\n               }\n            }\n         }\n      } else\nnuma_nope:\n      if (CHKw(w, View_CPUSUM)) {\n         // display just the 1st /proc/stat line\n         summary_hlp(&Cpu_tics[smp_num_cpus], N_txt(WORD_allcpus_txt));\n         Msg_row += 1;\n\n      } else {\n         // display each cpu's states separately, screen height permitting...\n         for (i = 0; i < Cpu_faux_tot; i++) {\n            snprintf(tmp, sizeof(tmp), N_fmt(WORD_eachcpu_fmt), Cpu_tics[i].id);\n            summary_hlp(&Cpu_tics[i], tmp);\n            Msg_row += 1;\n            if (!isROOM(anyFLG, 1)) break;\n         }\n      }\n   } // end: View_STATES\n\n   // Display Memory and Swap stats\n   if (isROOM(View_MEMORY, 2)) {\n    #define bfT(n)  buftab[n].buf\n    #define scT(e)  scaletab[Rc.summ_mscale]. e\n    #define mkM(x) (float)kb_main_ ## x / scT(div)\n    #define mkS(x) (float)kb_swap_ ## x / scT(div)\n    #define prT(b,z) { if (9 < snprintf(b, 10, scT(fmts), z)) b[8] = '+'; }\n      static struct {\n         float div;\n         const char *fmts;\n         const char *label;\n      } scaletab[] = {\n         { 1, \"%.0f \", NULL },                             // kibibytes\n#ifdef BOOST_MEMORY\n         { 1024.0, \"%#.3f \", NULL },                       // mebibytes\n         { 1024.0*1024, \"%#.3f \", NULL },                  // gibibytes\n         { 1024.0*1024*1024, \"%#.3f \", NULL },             // tebibytes\n         { 1024.0*1024*1024*1024, \"%#.3f \", NULL },        // pebibytes\n         { 1024.0*1024*1024*1024*1024, \"%#.3f \", NULL }    // exbibytes\n#else\n         { 1024.0, \"%#.1f \", NULL },                       // mebibytes\n         { 1024.0*1024, \"%#.1f \", NULL },                  // gibibytes\n         { 1024.0*1024*1024, \"%#.1f \", NULL },             // tebibytes\n         { 1024.0*1024*1024*1024, \"%#.1f \", NULL },        // pebibytes\n         { 1024.0*1024*1024*1024*1024, \"%#.1f \", NULL }    // exbibytes\n#endif\n      };\n      struct { //                                            0123456789\n      // snprintf contents of each buf (after SK_Kb):       'nnnn.nnn 0'\n      // and prT macro might replace space at buf[8] with:   ------> +\n         char buf[10]; // MEMORY_lines_fmt provides for 8+1 bytes\n      } buftab[8];\n\n      if (!scaletab[0].label) {\n         scaletab[0].label = N_txt(AMT_kilobyte_txt);\n         scaletab[1].label = N_txt(AMT_megabyte_txt);\n         scaletab[2].label = N_txt(AMT_gigabyte_txt);\n         scaletab[3].label = N_txt(AMT_terabyte_txt);\n         scaletab[4].label = N_txt(AMT_petabyte_txt);\n         scaletab[5].label = N_txt(AMT_exxabyte_txt);\n      }\n\n      if (w->rc.graph_mems) {\n         static const struct {\n            const char *used, *misc, *swap, *type;\n         } gtab[] = {\n            { \"%-.*s~7\", \"%-.*s~8\", \"%-.*s~8\", Graph_bars },\n            { \"%-.*s~4\", \"%-.*s~6\", \"%-.*s~6\", Graph_blks }\n         };\n         char used[SMLBUFSIZ], util[SMLBUFSIZ], dual[MEDBUFSIZ];\n         float pct_used, pct_misc, pct_swap;\n         int ix, num_used, num_misc;\n\n         pct_used = (float)kb_main_used * (100.0 / (float)kb_main_total);\n#ifdef MEMGRAPH_OLD\n         pct_misc = (float)(kb_main_buffers + kb_main_cached) * (100.0 / (float)kb_main_total);\n#else\n         pct_misc = (float)(kb_main_total - kb_main_available - kb_main_used) * (100.0 / (float)kb_main_total);\n#endif\n         if (pct_used + pct_misc > 100.0 || pct_misc < 0) pct_misc = 0;\n         pct_swap = kb_swap_total ? (float)kb_swap_used * (100.0 / (float)kb_swap_total) : 0;\n         ix = w->rc.graph_mems - 1;\n#ifndef QUICK_GRAPHS\n         num_used = (int)((pct_used * Graph_adj) + .5),\n         num_misc = (int)((pct_misc * Graph_adj) + .5);\n         if (num_used + num_misc > Graph_len) num_misc = Graph_len - num_used;\n         snprintf(used, sizeof(used), gtab[ix].used, num_used, gtab[ix].type);\n         snprintf(util, sizeof(util), gtab[ix].misc, num_misc, gtab[ix].type);\n#else\n         (void)num_used; (void)num_misc;\n         snprintf(used, sizeof(used), gtab[ix].used, (int)((pct_used * Graph_adj) + .5), gtab[ix].type);\n         snprintf(util, sizeof(util), gtab[ix].misc, (int)((pct_misc * Graph_adj) + .4), gtab[ix].type);\n#endif\n         snprintf(dual, sizeof(dual), \"%s%s\", used, util);\n         snprintf(util, sizeof(util), gtab[ix].swap, (int)((pct_swap * Graph_adj) + .5), gtab[ix].type);\n         prT(bfT(0), mkM(total)); prT(bfT(1), mkS(total));\n         show_special(0, fmtmk( \"%s %s:~3%#5.1f~2/%-9.9s~3[~1%-*s]~1\\n%s %s:~3%#5.1f~2/%-9.9s~3[~1%-*s]~1\\n\"\n            , scT(label), N_txt(WORD_abv_mem_txt), pct_used + pct_misc, bfT(0), Graph_len +4, dual\n            , scT(label), N_txt(WORD_abv_swp_txt), pct_swap, bfT(1), Graph_len +2, util));\n      } else {\n         unsigned long kb_main_my_misc = kb_main_buffers + kb_main_cached;\n         prT(bfT(0), mkM(total)); prT(bfT(1), mkM(free));\n         prT(bfT(2), mkM(used));  prT(bfT(3), mkM(my_misc));\n         prT(bfT(4), mkS(total)); prT(bfT(5), mkS(free));\n         prT(bfT(6), mkS(used));  prT(bfT(7), mkM(available));\n         show_special(0, fmtmk(N_unq(MEMORY_lines_fmt)\n            , scT(label), N_txt(WORD_abv_mem_txt), bfT(0), bfT(1), bfT(2), bfT(3)\n            , scT(label), N_txt(WORD_abv_swp_txt), bfT(4), bfT(5), bfT(6), bfT(7)\n            , N_txt(WORD_abv_mem_txt)));\n      }\n      Msg_row += 2;\n    #undef bfT\n    #undef scT\n    #undef mkM\n    #undef mkS\n    #undef prT\n   } // end: View_MEMORY\n\n #undef isROOM\n #undef anyFLG\n} // end: summary_show\n\n\n        /*\n         * Build the information for a single task row and\n         * display the results or return them to the caller. */\nstatic const char *task_show (const WIN_t *q, const int idx) {\n#ifndef SCROLLVAR_NO\n #define makeVAR(v)  { const char *pv = v; \\\n    if (!q->varcolbeg) cp = make_str(pv, q->varcolsz, Js, AUTOX_NO); \\\n    else cp = make_str(q->varcolbeg < (int)strlen(pv) ? pv + q->varcolbeg : \"\", q->varcolsz, Js, AUTOX_NO); }\n #define varUTF8(v)  { const char *pv = v; \\\n    if (!q->varcolbeg) cp = make_str_utf8(pv, q->varcolsz, Js, AUTOX_NO); \\\n    else cp = make_str_utf8((q->varcolbeg < ((int)strlen(pv) - utf8_delta(pv))) \\\n    ? pv + utf8_embody(pv, q->varcolbeg) : \"\", q->varcolsz, Js, AUTOX_NO); }\n#else\n #define makeVAR(v) cp = make_str(v, q->varcolsz, Js, AUTOX_NO)\n #define varUTF8(v) cp = make_str_utf8(v, q->varcolsz, Js, AUTOX_NO)\n#endif\n #define pages2K(n)  (unsigned long)( (n) << Pg2K_shft )\n   static char rbuf[ROWMINSIZ];\n   char *rp;\n   int x;\n   proc_t *p = q->ppt[idx];\n\n   /* we're borrowing some pad bytes in the proc_t,\n      pad_2: 'x' means a collapsed thread, 'z' means an unseen child\n      pad_3: where level number is stored (0 - 100) */\n#ifndef TREE_VWINALL\n   if (q == Curwin)            // note: the following is NOT indented\n#endif\n   if (CHKw(q, Show_FOREST) && p->pad_2 == 'z')\n      return \"\";\n\n   // we must begin a row with a possible window number in mind...\n   *(rp = rbuf) = '\\0';\n   if (Rc.mode_altscr) rp = scat(rp, \" \");\n\n   for (x = 0; x < q->maxpflgs; x++) {\n      const char *cp = NULL;\n      FLG_t       i = q->procflgs[x];\n      #define S   Fieldstab[i].scale        // these used to be variables\n      #define W   Fieldstab[i].width        // but it's much better if we\n      #define Js  CHKw(q, Show_JRSTRS)      // represent them as #defines\n      #define Jn  CHKw(q, Show_JRNUMS)      // and only exec code if used\n\n      switch (i) {\n#ifndef USE_X_COLHDR\n         // these 2 aren't real procflgs, they're used in column highlighting!\n         case EU_XON:\n         case EU_XOF:\n            cp = NULL;\n            if (!CHKw(q, NOPRINT_xxx | NOHIFND_xxx | NOHISEL_xxx)) {\n               /* treat running tasks specially - entire row may get highlighted\n                  so we needn't turn it on and we MUST NOT turn it off */\n               if (!('R' == p->state && CHKw(q, Show_HIROWS)))\n                  cp = (EU_XON == i ? q->capclr_rowhigh : q->capclr_rownorm);\n            }\n            break;\n#endif\n         case EU_CGN:\n            makeVAR(p->cgname);\n            break;\n         case EU_CGR:\n            makeVAR(p->cgroup[0]);\n            break;\n         case EU_CMD:\n            makeVAR(forest_display(q, p));\n            break;\n         case EU_COD:\n            cp = scale_mem(S, pages2K(p->trs), W, Jn);\n            break;\n         case EU_CPN:\n            cp = make_num(p->processor, W, Jn, AUTOX_NO, 0);\n            break;\n         case EU_CPU:\n         {  float u = (float)p->pcpu;\n#ifndef TREE_VCPUOFF\n #ifndef TREE_VWINALL\n            if (q == Curwin)   // note: the following is NOT indented\n #endif\n            if (CHKw(q, Show_FOREST)) u += Hide_cpu[idx];\n            u *= Frame_etscale;\n            if (p->pad_2 != 'x' && u > 100.0 * p->nlwp) u = 100.0 * p->nlwp;\n#else\n            u *= Frame_etscale;\n            /* process can't use more %cpu than number of threads it has\n             ( thanks Jaromir Capik <jcapik@redhat.com> ) */\n            if (u > 100.0 * p->nlwp) u = 100.0 * p->nlwp;\n#endif\n            if (u > Cpu_pmax) u = Cpu_pmax;\n            cp = scale_pcnt(u, W, Jn);\n         }\n            break;\n         case EU_DAT:\n            cp = scale_mem(S, pages2K(p->drs), W, Jn);\n            break;\n         case EU_DRT:\n            cp = scale_num(p->dt, W, Jn);\n            break;\n         case EU_ENV:\n            makeVAR(p->environ[0]);\n            break;\n         case EU_FL1:\n            cp = scale_num(p->maj_flt, W, Jn);\n            break;\n         case EU_FL2:\n            cp = scale_num(p->min_flt, W, Jn);\n            break;\n         case EU_FLG:\n            cp = make_str(hex_make(p->flags, 1), W, Js, AUTOX_NO);\n            break;\n         case EU_FV1:\n            cp = scale_num(p->maj_delta, W, Jn);\n            break;\n         case EU_FV2:\n            cp = scale_num(p->min_delta, W, Jn);\n            break;\n         case EU_GID:\n            cp = make_num(p->egid, W, Jn, EU_GID, 0);\n            break;\n         case EU_GRP:\n            cp = make_str_utf8(p->egroup, W, Js, EU_GRP);\n            break;\n         case EU_LXC:\n            cp = make_str(p->lxcname, W, Js, EU_LXC);\n            break;\n         case EU_MEM:\n            cp = scale_pcnt((float)pages2K(p->resident) * 100 / kb_main_total, W, Jn);\n            break;\n         case EU_NCE:\n            cp = make_num(p->nice, W, Jn, AUTOX_NO, 1);\n            break;\n         case EU_NMA:\n            cp = make_num(numa_node_of_cpu(p->processor), W, Jn, AUTOX_NO, 0);\n            break;\n         case EU_NS1:  // IPCNS\n         case EU_NS2:  // MNTNS\n         case EU_NS3:  // NETNS\n         case EU_NS4:  // PIDNS\n         case EU_NS5:  // USERNS\n         case EU_NS6:  // UTSNS\n         {  long ino = p->ns[i - EU_NS1];\n            cp = make_num(ino, W, Jn, i, 1);\n         }\n            break;\n         case EU_OOA:\n            cp = make_num(p->oom_adj, W, Jn, AUTOX_NO, 1);\n            break;\n         case EU_OOM:\n            cp = make_num(p->oom_score, W, Jn, AUTOX_NO, 1);\n            break;\n         case EU_PGD:\n            cp = make_num(p->pgrp, W, Jn, AUTOX_NO, 0);\n            break;\n         case EU_PID:\n            cp = make_num(p->tid, W, Jn, AUTOX_NO, 0);\n            break;\n         case EU_PPD:\n            cp = make_num(p->ppid, W, Jn, AUTOX_NO, 0);\n            break;\n         case EU_PRI:\n            if (-99 > p->priority || 999 < p->priority) {\n               cp = make_str(\"rt\", W, Jn, AUTOX_NO);\n            } else\n               cp = make_num(p->priority, W, Jn, AUTOX_NO, 0);\n            break;\n         case EU_RES:\n            cp = scale_mem(S, pages2K(p->resident), W, Jn);\n            break;\n         case EU_RZA:\n            cp = scale_mem(S, p->vm_rss_anon, W, Jn);\n            break;\n         case EU_RZF:\n            cp = scale_mem(S, p->vm_rss_file, W, Jn);\n            break;\n         case EU_RZL:\n            cp = scale_mem(S, p->vm_lock, W, Jn);\n            break;\n         case EU_RZS:\n            cp = scale_mem(S, p->vm_rss_shared, W, Jn);\n            break;\n         case EU_SGD:\n            makeVAR(p->supgid);\n            break;\n         case EU_SGN:\n            varUTF8(p->supgrp);\n            break;\n         case EU_SHR:\n            cp = scale_mem(S, pages2K(p->share), W, Jn);\n            break;\n         case EU_SID:\n            cp = make_num(p->session, W, Jn, AUTOX_NO, 0);\n            break;\n         case EU_STA:\n            cp = make_chr(p->state, W, Js);\n            break;\n         case EU_SWP:\n            cp = scale_mem(S, p->vm_swap, W, Jn);\n            break;\n         case EU_TGD:\n            cp = make_num(p->tgid, W, Jn, AUTOX_NO, 0);\n            break;\n         case EU_THD:\n            cp = make_num(p->nlwp, W, Jn, AUTOX_NO, 0);\n            break;\n         case EU_TM2:\n         case EU_TME:\n         {  TIC_t t = p->utime + p->stime;\n            if (CHKw(q, Show_CTIMES)) t += (p->cutime + p->cstime);\n            cp = scale_tics(t, W, Jn);\n         }\n            break;\n         case EU_TPG:\n            cp = make_num(p->tpgid, W, Jn, AUTOX_NO, 0);\n            break;\n         case EU_TTY:\n         {  char tmp[SMLBUFSIZ];\n            dev_to_tty(tmp, W, p->tty, p->tid, ABBREV_DEV);\n            cp = make_str(tmp, W, Js, EU_TTY);\n         }\n            break;\n         case EU_UED:\n            cp = make_num(p->euid, W, Jn, EU_UED, 0);\n            break;\n         case EU_UEN:\n            cp = make_str_utf8(p->euser, W, Js, EU_UEN);\n            break;\n         case EU_URD:\n            cp = make_num(p->ruid, W, Jn, EU_URD, 0);\n            break;\n         case EU_URN:\n            cp = make_str_utf8(p->ruser, W, Js, EU_URN);\n            break;\n         case EU_USD:\n            cp = make_num(p->suid, W, Jn, EU_USD, 0);\n            break;\n         case EU_USE:\n            cp = scale_mem(S, (p->vm_swap + p->vm_rss), W, Jn);\n            break;\n         case EU_USN:\n            cp = make_str_utf8(p->suser, W, Js, EU_USN);\n            break;\n         case EU_VRT:\n            cp = scale_mem(S, pages2K(p->size), W, Jn);\n            break;\n         case EU_WCH:\n            cp = make_str(lookup_wchan(p->tid), W, Js, EU_WCH);\n            break;\n         default:                 // keep gcc happy\n            continue;\n\n      } // end: switch 'procflag'\n\n      if (cp) {\n         if (q->osel_tot && !osel_matched(q, i, cp)) return \"\";\n         rp = scat(rp, cp);\n      }\n      #undef S\n      #undef W\n      #undef Js\n      #undef Jn\n   } // end: for 'maxpflgs'\n\n   if (!CHKw(q, NOPRINT_xxx)) {\n      const char *cap = ((CHKw(q, Show_HIROWS) && 'R' == p->state))\n         ? q->capclr_rowhigh : q->capclr_rownorm;\n      char *row = rbuf;\n      int ofs;\n      /* since we can't predict what the search string will be and,\n         considering what a single space search request would do to\n         potential buffer needs, when any matches are found we skip\n         normal output routing and send all of the results directly\n         to the terminal (and we sound asthmatic: poof, putt, puff) */\n      if (-1 < (ofs = find_ofs(q, row))) {\n         POOF(\"\\n\", cap);\n         do {\n            row[ofs] = '\\0';\n            PUTT(\"%s%s%s%s\", row, q->capclr_hdr, q->findstr, cap);\n            row += (ofs + q->findlen);\n            ofs = find_ofs(q, row);\n         } while (-1 < ofs);\n         PUTT(\"%s%s\", row, Caps_endline);\n         // with a corrupted rbuf, ensure row is 'counted' by window_show\n         rbuf[0] = '!';\n      } else\n         PUFF(\"\\n%s%s%s\", cap, row, Caps_endline);\n   }\n   return rbuf;\n #undef makeVAR\n #undef varUTF8\n #undef pages2K\n} // end: task_show\n\n\n        /*\n         * A window_show *Helper* function ensuring that Curwin's 'begtask'\n         * represents a visible process (not any hidden/filtered-out task).\n         * In reality, this function is called:\n         *   1) exclusively for the 'current' window\n         *   2) immediately after interacting with the user\n         *   3) who struck: up, down, pgup, pgdn, home, end, 'o/O' or 'u/U'\n         *   4) or upon the user switching from one window to another window */\nstatic void window_hlp (void) {\n   WIN_t *w = Curwin;             // avoid gcc bloat with a local copy\n   int i, reversed;\n\n   SETw(w, NOPRINT_xxx);\n   w->begtask += w->begnext;\n   // next 'if' will force a forward scan ...\n   if (w->begtask <= 0) { w->begtask = 0; w->begnext = +1; }\n   else if (w->begtask >= Frame_maxtask) w->begtask = Frame_maxtask - 1;\n\n   reversed = 0;\n   // potentially scroll forward ...\n   if (w->begnext > 0) {\nfwd_redux:\n      for (i = w->begtask; i < Frame_maxtask; i++) {\n         if (wins_usrselect(w, i)\n         && (*task_show(w, i)))\n            break;\n      }\n      if (i < Frame_maxtask) {\n         w->begtask = i;\n         goto wrap_up;\n      }\n      // no luck forward, so let's try backward\n      w->begtask = Frame_maxtask - 1;\n   }\n\n   // potentially scroll backward ...\n   for (i = w->begtask; i > 0; i--) {\n      if (wins_usrselect(w, i)\n      && (*task_show(w, i)))\n         break;\n   }\n   // reached the top, but maybe this guy ain't visible\n   if (!(w->begtask = i) && !reversed) {\n      if (!(wins_usrselect(w, 0))\n      || (!(*task_show(w, 0)))) {\n         reversed = 1;\n         goto fwd_redux;\n      }\n   }\n\nwrap_up:\n   w->begnext = 0;\n   OFFw(w, NOPRINT_xxx);\n} // end: window_hlp\n\n\n        /*\n         * Squeeze as many tasks as we can into a single window,\n         * after sorting the passed proc table. */\nstatic int window_show (WIN_t *q, int wmax) {\n /* the isBUSY macro determines if a task is 'active' --\n    it returns true if some cpu was used since the last sample.\n    ( actual 'running' tasks will be a subset of those selected ) */\n #define isBUSY(x)   (0 < (x)->pcpu)\n #define winMIN(a,b) (((a) < (b)) ? (a) : (b))\n   int i, lwin;\n\n   // Display Column Headings -- and distract 'em while we sort (maybe)\n   PUFF(\"\\n%s%s%s\", q->capclr_hdr, q->columnhdr, Caps_endline);\n\n   if (CHKw(q, Show_FOREST))\n      forest_create(q);\n   else {\n      if (CHKw(q, Qsrt_NORMAL)) Frame_srtflg = 1;   // this is always needed!\n      else Frame_srtflg = -1;\n      Frame_ctimes = CHKw(q, Show_CTIMES);          // this & next, only maybe\n      Frame_cmdlin = CHKw(q, Show_CMDLIN);\n      qsort(q->ppt, Frame_maxtask, sizeof(proc_t *), Fieldstab[q->rc.sortindx].sort);\n   }\n\n   if (q->begnext) window_hlp();\n   else OFFw(q, NOPRINT_xxx);\n\n   i = q->begtask;\n   lwin = 1;                                        // 1 for the column header\n   wmax = winMIN(wmax, q->winlines + 1);            // ditto for winlines, too\n\n   /* the least likely scenario is also the most costly, so we'll try to avoid\n      checking some stuff with each iteration and check it just once... */\n   if (CHKw(q, Show_IDLEPS) && !q->usrseltyp)\n      while (i < Frame_maxtask && lwin < wmax) {\n         if (*task_show(q, i++))\n            ++lwin;\n      }\n   else\n      while (i < Frame_maxtask && lwin < wmax) {\n         if ((CHKw(q, Show_IDLEPS) || isBUSY(q->ppt[i]))\n         && wins_usrselect(q, i)\n         && *task_show(q, i))\n            ++lwin;\n         ++i;\n      }\n\n   return lwin;\n #undef isBUSY\n #undef winMIN\n} // end: window_show\n\f\n/*######  Entry point plus two  ##########################################*/\n\n        /*\n         * This guy's just a *Helper* function who apportions the\n         * remaining amount of screen real estate under multiple windows */\nstatic void frame_hlp (int wix, int max) {\n   int i, size, wins;\n\n   // calc remaining number of visible windows\n   for (i = wix, wins = 0; i < GROUPSMAX; i++)\n      if (CHKw(&Winstk[i], Show_TASKON))\n         ++wins;\n\n   if (!wins) wins = 1;\n   // deduct 1 line/window for the columns heading\n   size = (max - wins) / wins;\n\n   /* for subject window, set WIN_t winlines to either the user's\n      maxtask (1st choice) or our 'foxized' size calculation\n      (foxized  adj. -  'fair and balanced') */\n   Winstk[wix].winlines =\n      Winstk[wix].rc.maxtasks ? Winstk[wix].rc.maxtasks : size;\n} // end: frame_hlp\n\n\n        /*\n         * Initiate the Frame Display Update cycle at someone's whim!\n         * This routine doesn't do much, mostly he just calls others.\n         *\n         * (Whoa, wait a minute, we DO caretake those row guys, plus)\n         * (we CALCULATE that IMPORTANT Max_lines thingy so that the)\n         * (*subordinate* functions invoked know WHEN the user's had)\n         * (ENOUGH already.  And at Frame End, it SHOULD be apparent)\n         * (WE am d'MAN -- clearing UNUSED screen LINES and ensuring)\n         * (that those auto-sized columns are addressed, know what I)\n         * (mean?  Huh, \"doesn't DO MUCH\"!  Never, EVER think or say)\n         * (THAT about THIS function again, Ok?  Good that's better.)\n         *\n         * (ps. we ARE the UNEQUALED justification KING of COMMENTS!)\n         * (No, I don't mean significance/relevance, only alignment.)\n         */\nstatic void frame_make (void) {\n   WIN_t *w = Curwin;             // avoid gcc bloat with a local copy\n   int i, scrlins;\n\n   // deal with potential signal(s) since the last time around...\n   if (Frames_signal)\n      zap_fieldstab();\n\n   // whoa either first time or thread/task mode change, (re)prime the pump...\n   if (Pseudo_row == PROC_XTRA) {\n      cpus_refresh();\n      procs_refresh();\n      usleep(LIB_USLEEP);\n      putp(Cap_clr_scr);\n   } else\n      putp(Batch ? \"\\n\\n\" : Cap_home);\n\n   sysinfo_refresh(0);\n   procs_refresh();\n\n   Tree_idx = Pseudo_row = Msg_row = scrlins = 0;\n   summary_show();\n   Max_lines = (Screen_rows - Msg_row) - 1;\n\n   // we're now on Msg_row so clear out any residual messages ...\n   putp(Cap_clr_eol);\n\n   if (!Rc.mode_altscr) {\n      // only 1 window to show so, piece o' cake\n      w->winlines = w->rc.maxtasks ? w->rc.maxtasks : Max_lines;\n      scrlins = window_show(w, Max_lines);\n   } else {\n      // maybe NO window is visible but assume, pieces o' cakes\n      for (i = 0 ; i < GROUPSMAX; i++) {\n         if (CHKw(&Winstk[i], Show_TASKON)) {\n            frame_hlp(i, Max_lines - scrlins);\n            scrlins += window_show(&Winstk[i], Max_lines - scrlins);\n         }\n         if (Max_lines <= scrlins) break;\n      }\n   }\n\n   /* clear to end-of-screen - critical if last window is 'idleps off'\n      (main loop must iterate such that we're always called before sleep) */\n   if (scrlins < Max_lines) {\n      putp(Cap_nl_clreos);\n      PSU_CLREOS(Pseudo_row);\n   }\n\n   if (CHKw(w, View_SCROLL) && VIZISw(Curwin))\n      show_scroll();\n   fflush(stdout);\n\n   /* we'll deem any terminal not supporting tgoto as dumb and disable\n      the normal non-interactive output optimization... */\n   if (!Cap_can_goto) PSU_CLREOS(0);\n\n   /* lastly, check auto-sized width needs for the next iteration */\n   if (AUTOX_MODE && Autox_found)\n      widths_resize();\n} // end: frame_make\n\n\n        /*\n         * duh... */\nint main (int dont_care_argc, char **argv) {\n   (void)dont_care_argc;\n   before(*argv);\n                                        //                 +-------------+\n   wins_stage_1();                      //                 top (sic) slice\n   configs_reads();                     //                 > spread etc, <\n   parse_args(&argv[1]);                //                 > lean stuff, <\n   whack_terminal();                    //                 > onions etc. <\n   wins_stage_2();                      //                 as bottom slice\n                                        //                 +-------------+\n\n   for (;;) {\n      struct timespec ts;\n\n      frame_make();\n\n      if (0 < Loops) --Loops;\n      if (!Loops) bye_bye(NULL);\n\n      ts.tv_sec = Rc.delay_time;\n      ts.tv_nsec = (Rc.delay_time - (int)Rc.delay_time) * 1000000000;\n\n      if (Batch)\n         pselect(0, NULL, NULL, NULL, &ts, NULL);\n      else {\n         if (ioa(&ts))\n            do_key(iokey(1));\n      }\n           /* note: that above ioa routine exists to consolidate all logic\n                    which is susceptible to signal interrupt and must then\n                    produce a screen refresh. in this main loop frame_make\n                    assumes responsibility for such refreshes. other logic\n                    in contact with users must deal more obliquely with an\n                    interrupt/refresh (hint: Frames_signal + return code)!\n\n                    (everything is perfectly justified plus right margins)\n                    (are completely filled, but of course it must be luck)\n            */\n   }\n   return 0;\n} // end: main\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/lib/strverscmp.c",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/po/sv.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/po/uk.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/po/pt_BR.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/po/fr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/po/de.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/po/pl.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/po/vi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/po/zh_CN.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-procps-ng-3.3.16-4kllveodphw3yszfllxyjpcemlbsf4zu/spack-src/top/top.h"
    ],
    "total_files": 269
}