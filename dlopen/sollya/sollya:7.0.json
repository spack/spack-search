{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-sollya-7.0-d2v6iu4jkfdedpugpbvpzwrlag7udcvx/spack-src/configure.ac": "\n#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n# Skeleton initially generated with autoscan\nAC_PREREQ(2.59)\nAC_INIT([sollya], [7.0], [sollya-devl@lists.gforge.inria.fr])\nAC_CONFIG_MACRO_DIR([m4])  # To please autoconf. See c8fd07aa1d2bd54f8c1b519052849aed1ec39663\nAC_CONFIG_AUX_DIR([build-aux]) # Put auxiliary files of autoconf into a specific directory\nAC_CONFIG_SRCDIR([sollya-library-wrappers.h]) # Checks that we are really trying to configure Sollya and not something else...\nAC_CONFIG_HEADER([config.h])\nAM_INIT_AUTOMAKE([1.6 no-define dist-zip dist-bzip2])\nAM_MAINTAINER_MODE([]) # Disables automatic call to ./configure after a modification has been made to configure.ac, Makefile.am, etc.\n                       # This simplifies the life of Debian maintainers when they apply patches.\n                       # The default behavior (automatic call to ./configure when necessary), that is probably desired for every-day developers is achieved by passing the option --enable-maintainer-mode to configure.\n\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])]) # On systems with a recent version of automake, produces a more synthetic output when compiling\n\n# Checks for programs.\nAC_PROG_YACC\nAC_PROG_CC\nAC_PROG_CPP\nAC_PROG_CXX\nAC_PROG_AWK  # Used by ltmain.sh\nAC_PROG_SED  # Used in some tests (although we do not currently use its replacement variable $SED)\nAM_PROG_CC_C_O  # To please autoconf. See 68da652992422c073b8bd2fe0814cd1cf37ee1fc\n\nAC_LANG_PUSH([C++])\nAC_MSG_CHECKING([whether C++ compiler works])\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <stdlib.h>]], [[exit(0);]])],\n               [AC_MSG_RESULT(yes)],\n               [AC_MSG_RESULT(no)\n                AC_MSG_ERROR([C++ compiler does not work])])\nAC_LANG_POP([C++])\nAC_PROG_LEX\nif test \"$missing_dir\" = \"\"; then\n   missing_dir=\".\"\nfi\nif test \"$LEX\" != flex; then\n  LEX=\"$SHELL $missing_dir/missing flex\"\n  AC_SUBST(LEX_OUTPUT_ROOT, lex.yy)\n  AC_SUBST(LEXLIB, '')\nfi\nAC_PROG_INSTALL\nAC_PROG_LN_S\nAC_PROG_MAKE_SET\nAC_PROG_MKDIR_P\nAC_LIBTOOL_DLOPEN\nLT_INIT([dlopen shared])   # AC_PROG_RANLIB is superseeded by LT_INIT\nAC_SUBST(LIBTOOL_DEPS)\nAC_SUBST(AR_FLAGS, \"cr\")   # To prevent a warning on some Ubuntu. See fbb8016beff7b45734e53ef8b80d2c306334c248\nAC_PATH_PROG([HELP2MAN],[help2man],[no])\nAM_CONDITIONAL([HAVE_HELP2MAN], [test \"x$HELP2MAN\" != \"xno\"])\n\nif test \"x$HELP2MAN\" != \"xno\"\nthen\n  AC_MSG_CHECKING([whether help2man supports the --locale option])\n  if help2man --locale=C.UTF-8 -o .tmp_help2man help2man 2> /dev/null\n  then\n    HELP2MAN_SUPPORTS_LOCALE=\"yes\"\n  else\n    HELP2MAN_SUPPORTS_LOCALE=\"no\"\n  fi\n  AC_MSG_RESULT($HELP2MAN_SUPPORTS_LOCALE)\n  rm -rf .tmp_help2man\nfi\nAM_CONDITIONAL([HAVE_HELP2MAN_LOCALE], [test \"x$HELP2MAN_SUPPORTS_LOCALE\" == \"xyes\"])\n\n#Checking for pdflatex with the required packages\nAC_PATH_PROG([PDFLATEX],[pdflatex],[no])\nif test \"x$PDFLATEX\" != \"xno\"\nthen\n  AC_MSG_CHECKING([that pdflatex comes with the necessary packages])\n  rm -rf .tmp_sollya_ac_pdflatex\n  mkdir .tmp_sollya_ac_pdflatex\n  cd .tmp_sollya_ac_pdflatex\n  echo \"\\documentclass@<:@a4paper@:>@{article}\" > conftest.tex\n  echo \"\\usepackage@<:@T1@:>@{fontenc}\" >> conftest.tex\n  echo \"\\usepackage@<:@utf8@:>@{inputenc}\" >> conftest.tex\n  echo \"\\usepackage@<:@english@:>@{babel}\" >> conftest.tex\n  echo \"\\usepackage@<:@naturalnames@:>@{hyperref}\" >> conftest.tex\n  echo \"\\usepackage{fullpage}\" >> conftest.tex\n  echo \"\\usepackage{xspace}\" >> conftest.tex\n  echo \"\\usepackage{amssymb}\" >> conftest.tex\n  echo \"\\usepackage{fancyvrb}\" >> conftest.tex\n  echo \"\\usepackage{cmap}\" >> conftest.tex\n  echo \"\\usepackage{lmodern}\" >> conftest.tex\n  echo \"\\usepackage{color}\" >> conftest.tex\n  echo \"\\usepackage{tocloft}\" >> conftest.tex\n  echo \"\\begin{document}\" >> conftest.tex\n  echo \"Test\" >> conftest.tex\n  echo \"\\end{document}\" >> conftest.tex\n  PDFLATEX_WITH_PACKAGES=\"no\"\n  $PDFLATEX -interaction=batchmode conftest.tex 2>&1 1>/dev/null && PDFLATEX_WITH_PACKAGES=\"$PDFLATEX\"\n  PDFLATEX=\"$PDFLATEX_WITH_PACKAGES\"\n  cd ..\n  rm -rf .tmp_sollya_ac_pdflatex\n  if test \"x$PDFLATEX\" != \"xno\"\n  then\n    AC_MSG_RESULT(yes)\n  else\n    AC_MSG_RESULT(no)\n  fi\nfi\nAM_CONDITIONAL([HAVE_PDFLATEX], [test \"x$PDFLATEX\" != \"xno\"])\n\n#Check whether flex and bison support interactive and pure parsers\nAC_ARG_ENABLE(strict-lexer-parser-check,\n              [[  --enable-strict-lexer-parser-check enables strict compatibility checking for building the lexer and parser files]],\n              [STRICTFLEXBISONTESTING=\"1\"],\n              [STRICTFLEXBISONTESTING=\"\"])\n\nAC_MSG_CHECKING([flex supports interactive and pure lexers])\nif test `echo -e \"%{\\n%}\\n\\n%option always-interactive\\n%option reentrant\\n%option prefix=\\\"coucou\\\"\\n%option bison-bridge\\n%option nounput\\n\\n%%\\n\"test\" { }\\n%%\\n\" > conftest.l ; $LEX conftest.l > /dev/null 2> /dev/null ; echo $?; rm -f lex.coucou.c` -eq 0\nthen\n  AC_MSG_RESULT(yes)\nelse\n  if test \"x$STRICTFLEXBISONTESTING\" = \"x\"\n  then\n    AC_MSG_RESULT([flex version unable to compile the lexer from the grammar files])\n  else\n    AC_MSG_RESULT(no)\n    AC_MSG_ERROR([flex does not support interactive and pure lexers])\n  fi\nfi\n\nAC_MSG_CHECKING([bison supports interactive and pure parsers])\nif test `echo -e \"%{\\n#define YYERROR_VERBOSE 1\\n#define YYPARSE_PARAM scanner\\n#define YYLEX_PARAM scanner\\n%}\\n\\n%defines\\n%name-prefix \\\"internyy\\\"\\n%pure-parser\\n\\n%%\\nstart: \\\".\\\"\\n{ }\\n;\\n\\n\" > conftest.y ; $YACC conftest.y > /dev/null 2> /dev/null ; echo $?; rm -f y.tab.*` -eq 0\nthen\n  AC_MSG_RESULT(yes)\nelse\n  if test \"x$STRICTFLEXBISONTESTING\" = \"x\"; then\n    AC_MSG_RESULT([bison version unable to compile the parser from the grammar files])\n  else\n    AC_MSG_RESULT(no)\n    AC_MSG_ERROR([bison does not support interactive and pure parsers])\n  fi\nfi\n\n# withs...\nSO_LIB_PATH=\"\"\nFPLLLVERSIONSTRING=\"\"\n\nAC_ARG_WITH(gmp-include,\n            [  --with-gmp-include=DIR  GMP include directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               AM_CPPFLAGS=\"$AM_CPPFLAGS -I$withval\"\n             fi])\nAC_ARG_WITH(gmp-lib,\n            [  --with-gmp-lib=DIR      GMP lib directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               AM_LDFLAGS=\"$AM_LDFLAGS -L$withval\"\n               SO_LIB_PATH=\"${SO_LIB_PATH:+$SO_LIB_PATH:}$withval\"\n             fi\n            ])\nAC_ARG_WITH(gmp,\n            [  --with-gmp=DIR          GMP install directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               AM_CPPFLAGS=\"$AM_CPPFLAGS -I$withval/include\"\n               AM_LDFLAGS=\"$AM_LDFLAGS -L$withval/lib\"\n               SO_LIB_PATH=\"${SO_LIB_PATH:+$SO_LIB_PATH:}$withval/lib\"\n             fi\n            ])\n\n\nAC_ARG_WITH(mpfr-include,\n            [  --with-mpfr-include=DIR  MPFR include directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               AM_CPPFLAGS=\"$AM_CPPFLAGS -I$withval\"\n\t     fi])\nAC_ARG_WITH(mpfr-lib,\n            [  --with-mpfr-lib=DIR      MPFR lib directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               AM_LDFLAGS=\"$AM_LDFLAGS -L$withval\"\n               SO_LIB_PATH=\"${SO_LIB_PATH:+$SO_LIB_PATH:}$withval\"\n\t     fi\n            ])\nAC_ARG_WITH(mpfr,\n            [  --with-mpfr=DIR          MPFR install directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               AM_CPPFLAGS=\"$AM_CPPFLAGS -I$withval/include\"\n               AM_LDFLAGS=\"$AM_LDFLAGS -L$withval/lib\"\n               SO_LIB_PATH=\"${SO_LIB_PATH:+$SO_LIB_PATH:}$withval/lib\"\n\t     fi\n            ])\n\n\nAC_ARG_WITH(fplll-include,\n            [  --with-fplll-include=DIR  fplll include directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n\t       AM_CPPFLAGS=\"$AM_CPPFLAGS -I$withval\"\n               FPLLLVERSIONSTRING=\"$FPLLLVERSIONSTRING--with-fplll-include given as '$withval', \"\n\t     fi\n            ])\nAC_ARG_WITH(fplll-lib,\n            [  --with-fplll-lib=DIR      fplll lib directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               AM_LDFLAGS=\"$AM_LDFLAGS -L$withval\"\n               SO_LIB_PATH=\"${SO_LIB_PATH:+$SO_LIB_PATH:}$withval\"\n               FPLLLVERSIONSTRING=\"$FPLLLVERSIONSTRING--with-fplll-lib given as '$withval', \"\n\t     fi\n            ])\nAC_ARG_WITH(fplll,\n            [  --with-fplll=DIR          fplll install directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               AM_CPPFLAGS=\"$AM_CPPFLAGS -I$withval/include\"\n               AM_LDFLAGS=\"$AM_LDFLAGS -L$withval/lib\"\n               SO_LIB_PATH=\"${SO_LIB_PATH:+$SO_LIB_PATH:}$withval/lib\"\n               FPLLLVERSIONSTRING=\"$FPLLLVERSIONSTRING--with-fplll given as '$withval', \"\n\t     fi\n            ])\n\n\nAC_ARG_WITH(z-include,\n            [  --with-z-include=DIR  z include directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               AM_CPPFLAGS=\"$AM_CPPFLAGS -I$withval\"\n\t     fi])\nAC_ARG_WITH(z-lib,\n            [  --with-z-lib=DIR      z lib directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n\t       AM_LDFLAGS=\"$AM_LDFLAGS -L$withval\"\n\t     fi])\nAC_ARG_WITH(z,\n            [  --with-z=DIR          z install directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               AM_CPPFLAGS=\"$AM_CPPFLAGS -I$withval/include\"\n               AM_LDFLAGS=\"$AM_LDFLAGS -L$withval/lib\"\n\t     fi\n            ])\n\n\nAC_ARG_WITH(iconv-include,\n            [  --with-iconv-include=DIR  iconv include directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n\t       AM_CPPFLAGS=\"$AM_CPPFLAGS -I$withval\"\n\t     fi])\nAC_ARG_WITH(iconv-lib,\n            [  --with-iconv-lib=DIR      iconv lib directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n\t       AM_LDFLAGS=\"$AM_LDFLAGS -L$withval\"\n\t     fi])\nAC_ARG_WITH(iconv,\n            [  --with-iconv=DIR          iconv install directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               AM_CPPFLAGS=\"$AM_CPPFLAGS -I$withval/include\"\n               AM_LDFLAGS=\"$AM_LDFLAGS -L$withval/lib\"\n             fi\n\t    ])\n\n\nAC_ARG_WITH(mpfi-include,\n            [  --with-mpfi-include=DIR  MPFI include directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n\t       AM_CPPFLAGS=\"$AM_CPPFLAGS -I$withval\"\n\t     fi])\nAC_ARG_WITH(mpfi-lib,\n            [  --with-mpfi-lib=DIR      MPFI lib directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               AM_LDFLAGS=\"$AM_LDFLAGS -L$withval\"\n               SO_LIB_PATH=\"${SO_LIB_PATH:+$SO_LIB_PATH:}$withval\"\n\t     fi\n            ])\nAC_ARG_WITH(mpfi,\n            [  --with-mpfi=DIR          MPFI install directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               AM_CPPFLAGS=\"$AM_CPPFLAGS -I$withval/include\"\n               AM_LDFLAGS=\"$AM_LDFLAGS -L$withval/lib\"\n               SO_LIB_PATH=\"${SO_LIB_PATH:+$SO_LIB_PATH:}$withval/lib\"\n\t     fi\n            ])\n\n\nXML2INCLUDEGIVEN=\"\"\nXML2LIBGIVEN=\"\"\nAC_ARG_WITH(xml2-include,\n            [  --with-xml2-include=DIR  XML2 include directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n\t       AM_CPPFLAGS=\"$AM_CPPFLAGS -I$withval -I$withval/libxml2\"\n               XML2INCLUDEGIVEN=1\n\t     fi\n            ])\nAC_ARG_WITH(xml2-lib,\n            [  --with-xml2-lib=DIR      XML2 lib directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               AM_LDFLAGS=\"$AM_LDFLAGS -L$withval\"\n               SO_LIB_PATH=\"${SO_LIB_PATH:+$SO_LIB_PATH:}$withval\"\n               XML2LIBGIVEN=1\n\t     fi\n            ])\nAC_ARG_WITH(xml2,\n            [  --with-xml2=DIR          XML2 install directory ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               AM_CPPFLAGS=\"$AM_CPPFLAGS -I$withval/include -I$withval/include/libxml2\"\n               AM_LDFLAGS=\"$AM_LDFLAGS -L$withval/lib\"\n               SO_LIB_PATH=\"${SO_LIB_PATH:+$SO_LIB_PATH:}$withval/lib\"\n               XML2INCLUDEGIVEN=1\n               XML2LIBGIVEN=1\n\t     fi\n            ])\n\n\n#Add xml2 include and lib\nXML2CONFIGGIVEN=\"\"\nAC_ARG_WITH(xml2-config,\n            [  --with-xml2-config=executable XML2 config tool ],\n            [if test \"x$withval\" != \"xyes\" -a \"x$withval\" != \"x\"\n             then\n               XML2CONFIG=\"$withval\"\n               XML2CONFIGGIVEN=1\n\t     fi\n            ])\n\nif test \"x$XML2CONFIGGIVEN\" = \"x\"\nthen\n  AC_CHECK_PROG(XML2CONFIG, xml2-config, [xml2-config], [false])\nfi\n\nif test \"x$XML2INCLUDEGIVEN\" = \"x\"\nthen\n  AM_CPPFLAGS=\"$AM_CPPFLAGS \"`$XML2CONFIG --cflags`\nfi\n\nif test \"x$XML2LIBGIVEN\" = \"x\"\nthen\n  XML2LIBS=`$XML2CONFIG --libs --static`\n  XML2LIBSPURE=`$XML2CONFIG --libs | $SED -e 's/^-l//g;s/[[[:blank:]]]-l//g;'`\n  AC_SEARCH_LIBS([xmlTextReaderIsEmptyElement], [$XML2LIBSPURE], [], [], [$XML2LIBS])\nfi\n\n\n# Save user flags and set flags given by configure for the rest of the tests\nUSER_CFLAGS=\"$CFLAGS\"\nUSER_CXXFLAGS=\"$CXXFLAGS\"\nUSER_CPPFLAGS=\"$CPPFLAGS\"\nUSER_LDFLAGS=\"$LDFLAGS\"\nCFLAGS=\"$AM_CFLAGS $USER_CFLAGS\"\nCXXFLAGS=\"$AM_CXXFLAGS $USER_CXXFLAGS\"\nCPPFLAGS=\"$AM_CPPFLAGS $USER_CPPFLAGS\"\nLDFLAGS=\"$AM_LDFLAGS $USER_LDFLAGS\"\nexport LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$SO_LIB_PATH\"\n\n# Checks for libraries.\ndlopen_ok=\"yes\"\nAC_CHECK_LIB([c], [dlopen], [], [dlopen_ok=\"no\"])\nif test \"x${dlopen_ok}y\" = \"xnoy\" ; then\n  AC_CHECK_LIB([dl], [dlopen], [], AC_MSG_ERROR([libdl unusable]))\nfi\nAC_CHECK_LIB([gmp], [__gmpz_init], [true], AC_MSG_ERROR([libgmp unusable]))\nAC_CHECK_LIB([gmp], [__gmpz_fac_ui], [true], AC_MSG_ERROR([libgmp version too old]))\nAC_CHECK_LIB([gmp], [__gmpz_bin_uiui], [true], AC_MSG_ERROR([libgmp version too old]))\nAC_CHECK_LIB([gmp], [__gmpz_export], [], AC_MSG_ERROR([libgmp version too old])) # This one adds -lgmp in case of success\nAC_CHECK_LIB([mpfr], [mpfr_init], [true], AC_MSG_ERROR([libmpfr unusable]))\nAC_CHECK_LIB([mpfr], [mpfr_set_z_2exp], [true], AC_MSG_ERROR([libmpfr version too old]))\nAC_CHECK_LIB([mpfr], [mpfr_erfc], [], AC_MSG_ERROR([libmpfr version too old])) # This one adds -lmpfr in case of success\nAC_CHECK_LIB([mpfi], [mpfi_init], [], AC_MSG_ERROR([libmpfi unusable]))\nAC_CHECK_LIB([z], [gzdopen], [], [])\nAC_CHECK_LIB([iconv], [libiconv_open], [], []) # This for providing a statically linked program under Cygwin. See e0d7171f9daf0027e075723d21fb40a864578cd5\nAC_CHECK_LIB([m],[cos])\nAC_CHECK_LIB([xml2], [xmlTextReaderIsEmptyElement], [], AC_MSG_ERROR([libxml2 unusable]))\n\n# Check that dynamic libraries are available at runtime\nAC_MSG_CHECKING([if libgmp is found at runtime])\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[#include <gmp.h>]],\n                               [[mpz_t a; mpz_init(a); mpz_clear(a); return 0;]])],\n\t      [AC_MSG_RESULT(yes)],\n              [AC_MSG_RESULT(no)\n               AC_MSG_WARN([libgmp is found at compile time but not at run time. This may or may not be an issue. If it is an issue (viz. if compilation fails), try checking /etc/ld.so.conf and run ldconfig and/or check all settings concerning search paths for shared libraries.])])\n\n\nAC_MSG_CHECKING([if libmpfr is found at runtime])\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[#include <mpfr.h>]],\n                               [[mpfr_t a; mpfr_init2(a, 53); mpfr_clear(a); return 0;]])],\n\t      [AC_MSG_RESULT(yes)],\n              [AC_MSG_RESULT(no)\n               AC_MSG_WARN([libmpfr is found at compile time but not at run time. This may or may not be an issue. If it is an issue (viz. if compilation fails), try checking /etc/ld.so.conf and run ldconfig and/or check all settings concerning search paths for shared libraries.])])\n\n\nAC_MSG_CHECKING([if libmpfi is found at runtime])\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[#include <mpfi.h>]],\n                               [[mpfi_t a; mpfi_init(a); mpfi_clear(a); return 0;]])],\n\t      [AC_MSG_RESULT(yes)],\n              [AC_MSG_RESULT(no)\n               AC_MSG_WARN([libmpfi is found at compile time but not at run time. This may or may not be an issue. If it is an issue (viz. if compilation fails), try checking /etc/ld.so.conf and run ldconfig and/or check all settings concerning search paths for shared libraries.])])\n\n\nAC_MSG_CHECKING([if libxml2 is found at runtime])\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[#include <libxml/xmlreader.h>]],\n                               [[xmlCleanupParser(); return 0;]])],\n\t      [AC_MSG_RESULT(yes)],\n              [AC_MSG_RESULT(no)\n               AC_MSG_WARN([libxml2 is found at compile time but not at run time. This may or may not be an issue. If it is an issue (viz. if compilation fails), try checking /etc/ld.so.conf and run ldconfig and/or check all settings concerning search paths for shared libraries.])])\n\n\n\n#Special check for fplll\nAC_LANG_PUSH([C++])\n\n#Check for -std=c++11 or -std=gnu++11\nCXXFLAGS=\"$AM_CXXFLAGS -std=c++11 $USER_CXXFLAGS\"\nAC_MSG_CHECKING([for -std=c++11 or -std=gnu++11 support])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],\n                  [\n                     AC_MSG_RESULT(yes)\n                     STDCXX11=\"-std=c++11\"\n                  ],\n                  [\n\t\t     CXXFLAGS=\"$AM_CXXFLAGS -std=gnu++11 $USER_CXXFLAGS\"\n\t\t     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],\n                     \t\t       [\n                                          AC_MSG_RESULT(yes)\n\t\t\t\t\t  STDCXX11=\"-std=gnu++11\"\n\t\t\t\t       ],\n\t\t\t\t       [\n\t\t\t\t          AC_MSG_RESULT(no)\n\t\t\t\t\t  STDCXX11=\"\"\n\t\t\t\t       ])\n\t\t  ])\n\n# We currently have 4 parameters that can take two values and depending on the version of fplll and g++, a given combination of them might work or not:\n#  - include <fplll.h> or <fplll/fplll.h>\n#  - link with -lfplll flag or not\n#  - use -std=c+11 or not\n#  - use the old or new API of fplll\n# It seems reasonable to filter the 16 possible cases by noticing that the the necessity of including the -std option is quite recent, whereas the include <fplll/fplll.h> actually corresponds to fairly old versions of fplll. Also, the compilation with -lfplll is required for quite a while now.\n# We first assume a relatively recent vers of fplll: trying include <fplll.h> and linking with -lfplll, we explore the 4 remaining possibilities.\n# If none of these possibilities worked, we assume a fairly old version of fplll: trying the old API and without the -std option, we explore the 3 remaining possibilitie.\n# If nothing worked of these 7 possibilities, we give up.\n\nFPLLL_PROGV3=`printf \"\\\n  ZZ_mat<mpz_t> *M; Z_NR<mpz_t>  zval; mpz_t mpzval; wrapper *LLLwrapper; int i,j;\\n\\\n  mpz_init(mpzval);\\n\\\n  M = new ZZ_mat<mpz_t>(3, 3);\\n\\\n  for(i=0;i<=2;i++) {\\n\\\n    for(j=0;j<=2;j++) {\\n\\\n      mpz_set_ui(mpzval, (i+1)*(j+2));\\n\\\n      zval.set(mpzval);\\n\\\n      M->Set(i,j,zval);\\n\\\n    }\\n\\\n  }\\n\\\n  LLLwrapper = new wrapper(M);\\n\\\n  LLLwrapper->LLL();\\\n\"`\nFPLLL_PROG=`printf \"\\\n  ZZ_mat<mpz_t> *M; Z_NR<mpz_t>  zval; mpz_t mpzval; int i,j;\\n\\\n  mpz_init(mpzval);\\n\\\n  M = new ZZ_mat<mpz_t>(3, 3);\\n\\\n  for(i=0;i<=2;i++) {\\n\\\n    for(j=0;j<=2;j++) {\\n\\\n      mpz_set_ui(mpzval, (i+1)*(j+2));\\n\\\n      zval = mpzval;\\n\\\n      (*M)@<:@i@:>@@<:@j@:>@ = zval;\\n\\\n    }\\n\\\n  }\\n\\\n  lll_reduction(*M);\\\n\"`\n\nFPLLL_NORMAL_HEADER=`printf \"\\\n  #include <stdlib.h>\\n\\\n  #include <fplll.h>\\n\\\n  #include <gmp.h>\\\n\"`\n\nFPLLL_SPECIAL_HEADER=`printf \"\\\n  #include <stdlib.h>\\n\\\n  #include <fplll/fplll.h>\\n\\\n  #include <gmp.h>\\\n\"`\n\nFPLLLSPECIALINCLUDE=\"no\"\nFPLLLISREALLIB=\"no\"\nFPLLLCXX11=\"no\"\nFPLLLMODERNAPI=\"no\"\n\nAC_MSG_CHECKING([for a suitable installation of fplll])\nOLD_LIBS=\"$LIBS\";\n\nLIBS=\"-lfplll $LIBS\";\nCXXFLAGS=\"$AM_CXXFLAGS $STDCXX11 $USER_CXXFLAGS\"\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[$FPLLL_NORMAL_HEADER]], [[$FPLLL_PROG]])],\n               [\n                  FPLLLSPECIALINCLUDE=\"no\"\n                  FPLLLISREALLIB=\"yes\"\n                  FPLLLCXX11=\"yes\"\n                  FPLLLMODERNAPI=\"yes\"\n\t\t  AC_MSG_RESULT(yes)\n               ],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM([[$FPLLL_NORMAL_HEADER]], [[$FPLLL_PROGV3]])],\n                  [\n                     FPLLLSPECIALINCLUDE=\"no\"\n                     FPLLLISREALLIB=\"yes\"\n                     FPLLLCXX11=\"yes\"\n                     FPLLLMODERNAPI=\"no\"\n\t\t     AC_MSG_RESULT(yes)\n\t\t  ],\n    [CXXFLAGS=\"$AM_CXXFLAGS $USER_CXXFLAGS\"\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[$FPLLL_NORMAL_HEADER]], [[$FPLLL_PROGV3]])],\n                                     [\n                                        FPLLLSPECIALINCLUDE=\"no\"\n                                        FPLLLISREALLIB=\"yes\"\n                                        FPLLLCXX11=\"no\"\n                                        FPLLLMODERNAPI=\"no\"\n                                        AC_MSG_RESULT(yes)\n                                     ],\n      [AC_LINK_IFELSE([AC_LANG_PROGRAM([[$FPLLL_NORMAL_HEADER]], [[$FPLLL_PROG]])],\n                                       [\n                                          FPLLLSPECIALINCLUDE=\"no\"\n                                          FPLLLISREALLIB=\"yes\"\n                                          FPLLLCXX11=\"no\"\n                                          FPLLLMODERNAPI=\"yes\"\n                                          AC_MSG_RESULT(yes)\n                                       ],\n        [AC_LINK_IFELSE([AC_LANG_PROGRAM([[$FPLLL_SPECIAL_HEADER]], [[$FPLLL_PROGV3]])],\n                                         [\n                                            FPLLLSPECIALINCLUDE=\"yes\"\n                                            FPLLLISREALLIB=\"yes\"\n                                            FPLLLCXX11=\"no\"\n                                            FPLLLMODERNAPI=\"no\"\n                                            AC_MSG_RESULT(yes)\n                                         ],\n          [LIBS=\"$OLD_LIBS\"\n\t   AC_LINK_IFELSE([AC_LANG_PROGRAM([[$FPLLL_SPECIAL_HEADER]], [[$FPLLL_PROGV3]])],\n                                           [\n                                              FPLLLSPECIALINCLUDE=\"yes\"\n                                              FPLLLISREALLIB=\"no\"\n                                              FPLLLCXX11=\"no\"\n                                              FPLLLMODERNAPI=\"no\"\n                                              AC_MSG_RESULT(yes)\n                                           ],\n            [AC_LINK_IFELSE([AC_LANG_PROGRAM([[$FPLLL_NORMAL_HEADER]], [[$FPLLL_PROGV3]])],\n                                             [\n                                                FPLLLSPECIALINCLUDE=\"no\"\n                                                FPLLLISREALLIB=\"no\"\n                                                FPLLLCXX11=\"no\"\n                                                FPLLLMODERNAPI=\"no\"\n                                                AC_MSG_RESULT(yes)\n                                             ],\n                                             [AC_MSG_RESULT(no)\n                                              AC_MSG_ERROR([libfplll not found])]\n            )]\n          )]\n        )]\n      )]\n    )]\n  )]\n)\n\nif test \"x${FPLLLSPECIALINCLUDE}y\" = \"xyesy\"\nthen\n  FPLLL_GOOD_HEADER=\"$FPLLL_SPECIAL_HEADER\"\n  AC_DEFINE([HAVE_SPECIAL_FPLLL_INCLUDE],[1],[Define for determining a special version of FPLLL])\n  FPLLLVERSIONSTRING=\"$FPLLLVERSIONSTRING\"\"fplll.h lies inside a subdirectory of the include directory (Debian-like), \"\nelse\n  FPLLL_GOOD_HEADER=\"$FPLLL_NORMAL_HEADER\"\n  AC_DEFINE([HAVE_SPECIAL_FPLLL_INCLUDE],[0],[Define for determining a special version of FPLLL])\n  FPLLLVERSIONSTRING=\"$FPLLLVERSIONSTRING\"\"fplll.h lies directly in the include directory, \"\nfi\n\n\nif test \"x${FPLLLISREALLIB}y\" = \"xyesy\"\nthen\n  LIBS=\"-lfplll $OLD_LIBS\"\n  FPLLLVERSIONSTRING=\"$FPLLLVERSIONSTRING\"\"linkage with -lfplll is compatible, \"\nelse\n  LIBS=\"$OLD_LIBS\"\n  FPLLLVERSIONSTRING=\"$FPLLLVERSIONSTRING\"\"linkage with -lfplll is not compatible, \"\nfi\n\nif test \"x${FPLLLCXX11}y\" = \"xyesy\"\nthen\n  AM_CXXFLAGS=\"$AM_CXXFLAGS $STDCXX11\"\n  FPLLLVERSIONSTRING=\"$FPLLLVERSIONSTRING\"\"-std option is passed (\"\"$STDCXX11\"\"), \"\nelse\n  FPLLLVERSIONSTRING=\"$FPLLLVERSIONSTRING\"\"no -std option is passed, \"\nfi\nCXXFLAGS=\"$AM_CXXFLAGS $USER_CXXFLAGS\"\n\nif test \"x${FPLLLMODERNAPI}y\" = \"xyesy\"\nthen\n  FPLLL_GOOD_PROG=\"$FPLLL_PROG\"\n  AC_DEFINE([HAVE_FPLLL_OLD_API],[0],[Define for determining what API to use with FPLLL])\n  FPLLLVERSIONSTRING=\"$FPLLLVERSIONSTRING\"\"using standard API.\"\nelse\n  FPLLL_GOOD_PROG=\"$FPLLL_PROGV3\"\n  AC_DEFINE([HAVE_FPLLL_OLD_API],[1],[Define for determining what API to use with FPLLL])\n  FPLLLVERSIONSTRING=\"$FPLLLVERSIONSTRING\"\"using the FPLLL_V3_COMPAT API.\"\nfi\n\nAC_DEFINE_UNQUOTED([HAVE_FPLLL_VERSION_STRING],[\"$FPLLLVERSIONSTRING\"],[Define a kind of a version string for FPLLL])\nAC_LANG_POP([C++])\n\n# Testing if -lstdc++ works both with the C compiler and the C++ compiler.\n# We add it only if it works with both.\nADD_LSTDC=\"yes\"\nOLD_LIBS=\"$LIBS\"; LIBS=\"$LIBS -lstdc++\"\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],\n                  [],\n                  [ADD_LSTDC=\"no\"])\nAC_LANG_PUSH([C++])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],\n                  [],\n                  [ADD_LSTDC=\"no\"])\nAC_LANG_POP([C++])\nif test \"x${ADD_LSTDC}y\" = \"xnoy\"\nthen\n  LIBS=\"$OLD_LIBS\"\nfi\n\nAC_LANG_PUSH([C++])\n# Checking that libfplll is found at runtime\nAC_MSG_CHECKING([if libfplll is found at runtime])\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[ #undef malloc\n                                  #undef realloc\n                                  $FPLLL_GOOD_HEADER]],\n                               [[$FPLLL_GOOD_PROG]])\n              ],\n              [AC_MSG_RESULT(yes)],\n              [AC_MSG_RESULT(no)\n               AC_MSG_WARN([libfplll is found at compile time but not at run time. This may or may not be an issue. If it is an issue (viz. if compilation fails), try checking /etc/ld.so.conf and run ldconfig and/or check all settings concerning search paths for shared libraries.])])\n\nAC_LANG_POP([C++])\n\n\n\n#Check for -Wl,-export-dynamic etc.\nCFLAGS=\"$AM_CFLAGS -fPIC -Werror $USER_CFLAGS\"\nAC_MSG_CHECKING([for -fPIC support])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[]])],\n                  [\n                     AC_MSG_RESULT(yes)\n                     AM_CFLAGS=\"$AM_CFLAGS -fPIC\"\n\t\t     CFLAGS=\"$AM_CFLAGS $USER_CFLAGS\"\n                  ],\n                  [\n                     AC_MSG_RESULT(no)\n                     CFLAGS=\"$AM_CFLAGS $USER_CFLAGS\"\n                  ])\n\nLDFLAGS=\"$AM_LDFLAGS -Wl,--export-dynamic $USER_LDFLAGS\"\nAC_MSG_CHECKING([for --export-dynamic support])\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[#include <stdlib.h>]],\n                               [[exit(0);]]\n                              )],\n              [\n                 AC_MSG_RESULT(yes)\n                 AM_LDFLAGS=\"$AM_LDFLAGS -Wl,--export-dynamic\"\n              ],\n              [\n                 AC_MSG_RESULT(no)\n                 LDFLAGS=\"$AM_LDFLAGS $USER_LDFLAGS\"\n              ])\n\n\nLDFLAGS=\"$AM_LDFLAGS -Xlinker --allow-multiple-definition $USER_LDFLAGS\"\nAC_MSG_CHECKING([for -Xlinker --allow-multiple-definition support])\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[#include <stdlib.h>]],\n                               [[exit(0);]]\n                              )],\n              [\n                 AC_MSG_RESULT(yes)\n                 AM_LDFLAGS=\"$AM_LDFLAGS -Xlinker --allow-multiple-definition\"\n              ],\n              [\n                 AC_MSG_RESULT(no)\n                 LDFLAGS=\"$AM_LDFLAGS $USER_LDFLAGS\"\n              ])\n\nLDFLAGS=\"$AM_LDFLAGS -z muldefs $USER_LDFLAGS\"\nAC_MSG_CHECKING([for -z muldefs support])\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[#include <stdlib.h>]],\n                               [[exit(0);]]\n                              )],\n              [\n                 AC_MSG_RESULT(yes)\n                 AM_LDFLAGS=\"$AM_LDFLAGS -z muldefs\"\n              ],\n              [\n                 AC_MSG_RESULT(no)\n                 LDFLAGS=\"$AM_LDFLAGS $USER_LDFLAGS\"\n              ])\n\nAC_MSG_CHECKING([if compiler activates FTZ by default])\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[#include <stdint.h>]],\n                               [[\n                                 union {\n                                   uint64_t i;\n                                   double d;\n                                 } xct, yct;\n                                 volatile double x, y;\n                                 xct.i = 0x1f20000000000000ull;\n                                 x = xct.d;\n                                 y = x * x;\n                                 yct.d = y;\n                                 if (yct.i == 0x0000000000000000ull) return 1;]]\n                              )],\n              [AC_MSG_RESULT(no)],\n              [\n                 AC_MSG_RESULT(yes)\n                 AC_MSG_CHECKING([if compiler supports -fp-model precise flag])\n                 CFLAGS=\"$AM_CFLAGS -fp-model precise $USER_CFLAGS\"\n                 AC_RUN_IFELSE([AC_LANG_PROGRAM([[#include <stdlib.h>]],\n                                                [[exit(0);]]\n                                               )],\n                               [\n                                  AC_MSG_RESULT(yes)\n                                  AM_CFLAGS=\"$AM_CFLAGS -fp-model precise\"\n                               ],\n                               [\n                                  AC_MSG_RESULT(no)\n                                  CFLAGS=\"$AM_CFLAGS $USER_CFLAGS\"\n                               ])\n              ])\n\n# Checks for linker script support:\ngl_LD_VERSION_SCRIPT\n\n# Checks for header files.\nAC_FUNC_ALLOCA\nAC_HEADER_STDC\nAC_HEADER_SYS_WAIT\n\n# If we do not have these ones, we consider that we cannot work properly.\n# As for termios.h we might do something even if it is missing (e.g., build the\n# library and provide the tool able to read files but not working\n# interactively). The current position is: we do not.\nAC_CHECK_HEADERS([inttypes.h stddef.h stdint.h stdlib.h string.h termios.h unistd.h limits.h wchar.h], [ ], AC_MSG_ERROR([Necessary header is missing]))\n# If we do not have these ones, we can survive, protecting corresponding calls by a #ifdef HAVE_....\nAC_CHECK_HEADERS([sys/ioctl.h sys/time.h])\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_HEADER_STDBOOL\nAC_TYPE_INT8_T\nAC_TYPE_INT16_T\nAC_TYPE_INT32_T\nAC_TYPE_INT64_T\nAC_TYPE_UINT8_T\nAC_TYPE_UINT16_T\nAC_TYPE_UINT32_T\nAC_TYPE_UINT64_T\nAC_HEADER_TIME\nAC_TYPE_PID_T\nAC_TYPE_SIZE_T\nAC_TYPE_SSIZE_T\nAC_C_VOLATILE\nAC_C_INLINE\nAC_CHECK_TYPES([ptrdiff_t])\n\n# Checks for library functions.\nAC_FUNC_FORK\nAC_PROG_GCC_TRADITIONAL  # To support very old versions of gcc\nAC_TYPE_SIGNAL\nAC_FUNC_VPRINTF\nAC_FUNC_MALLOC\nAC_FUNC_REALLOC\n\n# If we do not have these functions we should survive because they shall be reimplemented in Sollya if necessaray if they are not provided by the system. In any case a test #ifdef HAVE_ shall protect any call to a function listed here.\nAC_CHECK_FUNCS(gettimeofday memmove memset strchr strerror strrchr strtol dup2 strstr dladdr clock_gettime time sigaction sigaddset sigemptyset sigprocmask)\n\nAC_MSG_CHECKING([if the system allows %n in a writable segment])\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[#define _BSD_SOURCE\n\t\t\t\t #define _DEFAULT_SOURCE\n                                 #include <stdio.h>\n                                 #include <stdlib.h>]],\n                               [[ char *str;\n                                  int count;\n                                  str = malloc(20*sizeof(char));\n                                  sprintf(str, \"%%n\");\n                                  printf(str, &count);\n                                  free(str);\n                                  return 0;]]\n                              )],\n\t      [ AC_MSG_RESULT(yes) ],\n              [\n                AC_MSG_RESULT(no)\n\t\tAC_DEFINE([SYSTEM_DOES_NOT_ALLOW_COMPLETE_PRINTF],[1],[The system does not allow %n in malloced strings])\n              ])\n\n\nAC_MSG_CHECKING([if the Dl_info type is usable])\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[#define _GNU_SOURCE 1\n                                 #define _DARWIN_C_SOURCE 1\n                                 #include <dlfcn.h>\n\t\t\t         #include <stdlib.h>]],\n                               [[ Dl_info myInfo;\n                                  if (dladdr(main, &myInfo) != 0) return 0;\n                                  exit(1);]]\n                              )],\n              [\n                 AC_MSG_RESULT(yes)\n                 AC_DEFINE([HAVE_DL_INFO_TYPE],[1],[Enabling Dl_info type usage])\n              ],\n              AC_MSG_RESULT(no))\n\nFALLTHRU_CFLAGS=\"$CFLAGS\"\nCFLAGS=\"$CFLAGS -Werror\"\nAC_MSG_CHECKING([if the \"__attribute__((fallthrough));\" syntax is supported])\nAC_RUN_IFELSE([AC_LANG_PROGRAM([[]],\n                               [[ volatile int a, b;\n\t\t\t          a = 1;\n\t\t\t\t  b = 0;\n\t\t\t\t  switch (a) {\n\t\t\t\t  case 1:\n\t\t\t\t       b = 1;\n\t\t\t\t       __attribute__((fallthrough));\n\t\t\t\t  case 2:\n\t\t\t\t       b = 2;\n\t\t\t\t  }\n\t\t\t\t  if (b != 2) return 1;\n\t\t\t\t  return 0;]]\n                              )],\n              [\n                 AC_MSG_RESULT(yes)\n                 AC_DEFINE([HAVE_FALLTHRU_ATTRIBUTE],[1],[Enabling the fallthrough attribute])\n              ],\n              AC_MSG_RESULT(no))\nCFLAGS=\"$FALLTHRU_CFLAGS\"\n\n\n\nAC_CHECK_TYPES([mp_bitcnt_t], [], [], [[#include <gmp.h>]])\n\nCPPFLAGS=\"$USER_CPPFLAGS\"\nCFLAGS=\"$USER_CFLAGS\"\nLDFLAGS=\"$USER_LDFLAGS\"\n\n\n# The following two lines are supposed to fix bug #17197.\nAM_CPPFLAGS=\"-I\\${abs_top_srcdir} $AM_CPPFLAGS\"\n\n\nAC_SUBST(AM_CPPFLAGS)\nAC_SUBST(AM_CFLAGS)\nAC_SUBST(AM_LDFLAGS)\nAC_CONFIG_FILES([Makefile doc/Makefile tests-tool/Makefile tests-lib/Makefile])\nAC_OUTPUT\n",
        "/tmp/vanessa/spack-stage/spack-stage-sollya-7.0-d2v6iu4jkfdedpugpbvpzwrlag7udcvx/spack-src/library.c": "/*\n\n  Copyright 2007-2017 by\n\n  Laboratoire de l'Informatique du Parallelisme,\n  UMR CNRS - ENS Lyon - UCB Lyon 1 - INRIA 5668,\n\n  LORIA (CNRS, INPL, INRIA, UHP, U-Nancy 2),\n\n  Laboratoire d'Informatique de Paris 6, equipe PEQUAN,\n  UPMC Universite Paris 06 - CNRS - UMR 7606 - LIP6, Paris, France\n\n  and by\n\n  Laboratoire d'Informatique de Paris 6 - \u00c9quipe PEQUAN\n  Sorbonne Universit\u00e9s\n  UPMC Univ Paris 06\n  UMR 7606, LIP6\n  Bo\u00eete Courrier 169\n  4, place Jussieu\n  F-75252 Paris Cedex 05\n  France.\n\n  Contributors Ch. Lauter, S. Chevillard\n\n  christoph.lauter@ens-lyon.org\n  sylvain.chevillard@ens-lyon.org\n\n  This software is a computer program whose purpose is to provide an\n  environment for safe floating-point code development. It is\n  particularly targeted to the automated implementation of\n  mathematical floating-point libraries (libm). Amongst other features,\n  it offers a certified infinity norm, an automatic polynomial\n  implementer and a fast Remez algorithm.\n\n  This software is governed by the CeCILL-C license under French law and\n  abiding by the rules of distribution of free software.  You can  use,\n  modify and/ or redistribute the software under the terms of the CeCILL-C\n  license as circulated by CEA, CNRS and INRIA at the following URL\n  \"http://www.cecill.info\".\n\n  As a counterpart to the access to the source code and  rights to copy,\n  modify and redistribute granted by the license, users are provided only\n  with a limited warranty  and the software's author,  the holder of the\n  economic rights,  and the successive licensors  have only  limited\n  liability.\n\n  In this respect, the user's attention is drawn to the risks associated\n  with loading,  using,  modifying and/or developing or reproducing the\n  software by the user in light of its specific status of free software,\n  that may mean  that it is complicated to manipulate,  and  that  also\n  therefore means  that it is reserved for developers  and  experienced\n  professionals having in-depth computer knowledge. Users are therefore\n  encouraged to load and test the software's suitability as regards their\n  requirements in conditions enabling the security of their systems and/or\n  data to be ensured and,  more generally, to use and operate it in the\n  same conditions as regards security.\n\n  The fact that you are presently reading this means that you have had\n  knowledge of the CeCILL-C license and that you accept its terms.\n\n  This program is distributed WITHOUT ANY WARRANTY; without even the\n  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n*/\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#if (defined(HAVE_DLADDR) && (HAVE_DLADDR) && defined(HAVE_DL_INFO_TYPE) && (HAVE_DL_INFO_TYPE))\n#define _GNU_SOURCE 1\n#define _DARWIN_C_SOURCE 1\n#endif\n\n#include <dlfcn.h>\n\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <string.h>\n#include <mpfr.h>\n#include \"mpfi-compat.h\"\n#include \"expression.h\"\n#include \"general.h\"\n#include \"library.h\"\n#include \"chain.h\"\n#include \"execute.h\"\n\n#ifndef RTLD_LOCAL\n#define RTLD_LOCAL 0\n#endif\n\n#define LIBRARYFUNCTION_CASE 0\n#define LIBRARYCONSTANT_CASE 1\n#define LIBRARYPROC_CASE 2\n\n/* List of Sollya keywords we must not bind dynamic objects to.\n\n   The last entry must be NULL.\n\n*/\nstatic const char* sollyaKeywords[] = { \"D\",\n\t\t\t\t\t\"DD\",\n\t\t\t\t\t\"DE\",\n\t\t\t\t\t\"Pi\",\n\t\t\t\t\t\"RD\",\n\t\t\t\t\t\"RN\",\n\t\t\t\t\t\"RU\",\n\t\t\t\t\t\"RZ\",\n\t\t\t\t\t\"SG\",\n\t\t\t\t\t\"TD\",\n\t\t\t\t\t\"abs\",\n\t\t\t\t\t\"absolute\",\n\t\t\t\t\t\"accurateinfnorm\",\n\t\t\t\t\t\"acos\",\n\t\t\t\t\t\"acosh\",\n\t\t\t\t\t\"annotatefunction\",\n\t\t\t\t\t\"asciiplot\",\n\t\t\t\t\t\"asin\",\n\t\t\t\t\t\"asinh\",\n\t\t\t\t\t\"atan\",\n\t\t\t\t\t\"atanh\",\n\t\t\t\t\t\"autodiff\",\n\t\t\t\t\t\"autosimplify\",\n\t\t\t\t\t\"bashexecute\",\n\t\t\t\t\t\"begin\",\n\t\t\t\t\t\"binary\",\n\t\t\t\t\t\"bind\",\n\t\t\t\t\t\"boolean\",\n\t\t\t\t\t\"by\",\n\t\t\t\t\t\"canonical\",\n\t\t\t\t\t\"ceil\",\n\t\t\t\t\t\"chebyshevform\",\n\t\t\t\t\t\"checkinfnorm\",\n\t\t\t\t\t\"coeff\",\n\t\t\t\t\t\"composepolynomials\",\n\t\t\t\t\t\"constant\",\n\t\t\t\t\t\"cos\",\n\t\t\t\t\t\"cosh\",\n\t\t\t\t\t\"decimal\",\n\t\t\t\t\t\"default\",\n\t\t\t\t\t\"degree\",\n\t\t\t\t\t\"denominator\",\n\t\t\t\t\t\"diam\",\n\t\t\t\t\t\"dieonerrormode\",\n\t\t\t\t\t\"diff\",\n\t\t\t\t\t\"dirtyfindzeros\",\n\t\t\t\t\t\"dirtyinfnorm\",\n\t\t\t\t\t\"dirtyintegral\",\n\t\t\t\t\t\"dirtysimplify\",\n\t\t\t\t\t\"display\",\n\t\t\t\t\t\"div\",\n\t\t\t\t\t\"do\",\n\t\t\t\t\t\"double\",\n\t\t\t\t\t\"doubledouble\",\n\t\t\t\t\t\"doubleextended\",\n\t\t\t\t\t\"dyadic\",\n\t\t\t\t\t\"else\",\n\t\t\t\t\t\"end\",\n\t\t\t\t\t\"erf\",\n\t\t\t\t\t\"erfc\",\n\t\t\t\t\t\"error\",\n\t\t\t\t\t\"evaluate\",\n\t\t\t\t\t\"execute\",\n\t\t\t\t\t\"exp\",\n\t\t\t\t\t\"expand\",\n\t\t\t\t\t\"expm1\",\n\t\t\t\t\t\"exponent\",\n\t\t\t\t\t\"externalplot\",\n\t\t\t\t\t\"externalproc\",\n\t\t\t\t\t\"false\",\n\t\t\t\t\t\"file\",\n\t\t\t\t\t\"findzeros\",\n\t\t\t\t\t\"fixed\",\n\t\t\t\t\t\"floating\",\n\t\t\t\t\t\"floor\",\n\t\t\t\t\t\"for\",\n\t\t\t\t\t\"fpfindzeros\",\n\t\t\t\t\t\"fpminimax\",\n\t\t\t\t\t\"from\",\n\t\t\t\t\t\"fullparentheses\",\n\t\t\t\t\t\"function\",\n\t\t\t\t\t\"gcd\",\n\t\t\t\t\t\"getsuppressedmessages\",\n\t\t\t\t\t\"getbacktrace\",\n\t\t\t\t\t\"guessdegree\",\n\t\t\t\t\t\"head\",\n\t\t\t\t\t\"hexadecimal\",\n\t\t\t\t\t\"honorcoeffprec\",\n\t\t\t\t\t\"hopitalrecursions\",\n\t\t\t\t\t\"horner\",\n\t\t\t\t\t\"if\",\n\t\t\t\t\t\"implementpoly\",\n\t\t\t\t\t\"implementconstant\",\n\t\t\t\t\t\"in\",\n\t\t\t\t\t\"inf\",\n\t\t\t\t\t\"infnorm\",\n\t\t\t\t\t\"integer\",\n\t\t\t\t\t\"integral\",\n\t\t\t\t\t\"isbound\",\n\t\t\t\t\t\"isevaluable\",\n\t\t\t\t\t\"length\",\n\t\t\t\t\t\"library\",\n\t\t\t\t\t\"libraryconstant\",\n\t\t\t\t\t\"list\",\n\t\t\t\t\t\"log\",\n\t\t\t\t\t\"log10\",\n\t\t\t\t\t\"log1p\",\n\t\t\t\t\t\"log2\",\n\t\t\t\t\t\"mantissa\",\n\t\t\t\t\t\"max\",\n\t\t\t\t\t\"mid\",\n\t\t\t\t\t\"midpointmode\",\n\t\t\t\t\t\"min\",\n\t\t\t\t\t\"mod\",\n\t\t\t\t\t\"nearestint\",\n\t\t\t\t\t\"numberroots\",\n\t\t\t\t\t\"nop\",\n\t\t\t\t\t\"numerator\",\n\t\t\t\t\t\"object\",\n\t\t\t\t\t\"objectname\",\n\t\t\t\t\t\"of\",\n\t\t\t\t\t\"off\",\n\t\t\t\t\t\"on\",\n\t\t\t\t\t\"parse\",\n\t\t\t\t\t\"perturb\",\n\t\t\t\t\t\"pi\",\n\t\t\t\t\t\"plot\",\n\t\t\t\t\t\"points\",\n\t\t\t\t\t\"postscript\",\n\t\t\t\t\t\"postscriptfile\",\n\t\t\t\t\t\"powers\",\n\t\t\t\t\t\"prec\",\n\t\t\t\t\t\"precision\",\n\t\t\t\t\t\"print\",\n\t\t\t\t\t\"printbinary\",\n\t\t\t\t\t\"printdouble\",\n\t\t\t\t\t\"printexpansion\",\n\t\t\t\t\t\"printfloat\",\n\t\t\t\t\t\"printhexa\",\n\t\t\t\t\t\"printsingle\",\n\t\t\t\t\t\"printxml\",\n\t\t\t\t\t\"proc\",\n\t\t\t\t\t\"procedure\",\n\t\t\t\t\t\"quit\",\n\t\t\t\t\t\"range\",\n\t\t\t\t\t\"rationalapprox\",\n\t\t\t\t\t\"rationalmode\",\n\t\t\t\t\t\"readfile\",\n\t\t\t\t\t\"readxml\",\n\t\t\t\t\t\"relative\",\n\t\t\t\t\t\"remez\",\n\t\t\t\t\t\"rename\",\n\t\t\t\t\t\"restart\",\n\t\t\t\t\t\"return\",\n\t\t\t\t\t\"revert\",\n\t\t\t\t\t\"round\",\n\t\t\t\t\t\"roundcoefficients\",\n\t\t\t\t\t\"roundcorrectly\",\n\t\t\t\t\t\"roundingwarnings\",\n\t\t\t\t\t\"searchgal\",\n\t\t\t\t\t\"showmessagenumbers\",\n\t\t\t\t\t\"simplify\",\n\t\t\t\t\t\"simplifysafe\",\n\t\t\t\t\t\"sin\",\n\t\t\t\t\t\"single\",\n\t\t\t\t\t\"sinh\",\n\t\t\t\t\t\"sort\",\n\t\t\t\t\t\"sqrt\",\n\t\t\t\t\t\"string\",\n\t\t\t\t\t\"subpoly\",\n\t\t\t\t\t\"substitute\",\n\t\t\t\t\t\"sup\",\n\t\t\t\t\t\"supnorm\",\n\t\t\t\t\t\"suppressmessage\",\n\t\t\t\t\t\"tail\",\n\t\t\t\t\t\"tan\",\n\t\t\t\t\t\"tanh\",\n\t\t\t\t\t\"taylor\",\n\t\t\t\t\t\"taylorform\",\n\t\t\t\t\t\"taylorrecursions\",\n\t\t\t\t\t\"then\",\n\t\t\t\t\t\"time\",\n\t\t\t\t\t\"timing\",\n\t\t\t\t\t\"to\",\n\t\t\t\t\t\"tripledouble\",\n\t\t\t\t\t\"true\",\n\t\t\t\t\t\"unsuppressmessage\",\n\t\t\t\t\t\"var\",\n\t\t\t\t\t\"verbosity\",\n\t\t\t\t\t\"version\",\n\t\t\t\t\t\"void\",\n\t\t\t\t\t\"while\",\n\t\t\t\t\t\"worstcase\",\n\t\t\t\t\t\"write\",\n\t\t\t\t\t\"zerodenominators\",\n\t\t\t\t\t\"_x_\",\n\t\t\t\t\t\"quad\",\n\t\t\t\t\t\"halfprecision\",\n\t\t\t\t\t\"QD\",\n\t\t\t\t\t\"HP\",\n\t\t\t\t\t\"bashevaluate\",\n\t\t\t\t\t\"help\",\n\t\t\t\t\t\"match\",\n\t\t\t\t\t\"with\",\n\t\t\t\t\tNULL }; /* The last entry must be NULL */\n\nchain *openedFunctionLibraries = NULL;\nchain *openedConstantLibraries = NULL;\nchain *openedProcLibraries = NULL;\n\nchain *globalLibraryFunctions = NULL;\nchain *globalLibraryConstants = NULL;\nchain *globalLibraryProcedures = NULL;\n\nvoid copyIdentifierSymbols(char *ptr, const char *src) {\n  char *currPtr;\n  const char *currSrc;\n\n  currPtr = ptr;\n  currSrc = src;\n  while ((*currPtr = *currSrc) != '\\0') {\n    if (currPtr == ptr) {\n      if (((*currSrc >= 'a') && (*currSrc <= 'z')) ||\n\t  ((*currSrc >= 'A') && (*currSrc <= 'Z')) ||\n\t  (*currSrc == '_') ||\n\t  (*currSrc == '$')) {\n\tcurrPtr++;\n      }\n    } else {\n      if (((*currSrc >= 'a') && (*currSrc <= 'z')) ||\n\t  ((*currSrc >= 'A') && (*currSrc <= 'Z')) ||\n\t  ((*currSrc >= '0') && (*currSrc <= '9')) ||\n\t  (*currSrc == '_') ||\n\t  (*currSrc == '$')) {\n\tcurrPtr++;\n      }\n    }\n    currSrc++;\n  }\n}\n\nchar *getBaseFunctionName(void *func, const char *base, int hasData, void *data) {\n  char *myFuncName, *funcName;\n#if (defined(HAVE_DLADDR) && (HAVE_DLADDR) && defined(HAVE_DL_INFO_TYPE) && (HAVE_DL_INFO_TYPE))\n  int errorOccurred;\n  Dl_info myInfo;\n  char *temp;\n  errorOccurred = 0;\n  if (dladdr(func, &myInfo) != 0) {\n    if ((myInfo.dli_sname != NULL) && (myInfo.dli_saddr != NULL)) {\n      if (myInfo.dli_saddr == func) {\n\tif (strlen(myInfo.dli_sname) > 0) {\n\t  temp = (char *) safeCalloc(strlen(myInfo.dli_sname) + 8 * sizeof(void *) + 1 + 1, sizeof(char));\n\t  if (hasData) {\n\t    sprintf(temp, \"%s_%p\", myInfo.dli_sname, data);\n\t  } else {\n\t    sprintf(temp, \"%s\", myInfo.dli_sname);\n\t  }\n\t  myFuncName = (char *) safeCalloc(strlen(myInfo.dli_sname) + 8 * sizeof(void *) + 1 + 1, sizeof(char));\n\t  copyIdentifierSymbols(myFuncName, temp);\n\t  safeFree(temp);\n\t} else {\n\t  errorOccurred = 1;\n\t}\n      } else {\n\terrorOccurred = 1;\n      }\n    } else {\n      errorOccurred = 1;\n    }\n  } else {\n    errorOccurred = 1;\n  }\n  if (errorOccurred) {\n    myFuncName = (char *) safeCalloc(strlen(base) + 3 + 8 * sizeof(void *) + 1 + 8 * sizeof(void *) + 1 + 8 * sizeof(void *) + 1,sizeof(char));\n    if (hasData) {\n      sprintf(myFuncName, \"%s_%p_%p\", base, func, data);\n    } else {\n      sprintf(myFuncName, \"%s_%p\", base, func);\n    }\n  }\n#else\n  myFuncName = (char *) safeCalloc(strlen(base) + 3 + 8 * sizeof(void *) + 1 + 8 * sizeof(void *) + 1 + 8 * sizeof(void *) + 1,sizeof(char));\n  if (hasData) {\n    sprintf(myFuncName, \"%s_%p_%p\", base, func, data);\n  } else {\n    sprintf(myFuncName, \"%s_%p\", base, func);\n  }\n#endif\n  funcName = (char *) safeCalloc(strlen(myFuncName)+1,sizeof(char));\n  strcpy(funcName, myFuncName);\n  safeFree(myFuncName);\n  return funcName;\n}\n\nchar *filterSymbolName(char *basename) {\n  char *res;\n\n  res = (char *) safeCalloc(strlen(basename)+1,sizeof(char));\n\n  copyIdentifierSymbols(res, basename);\n\n  return res;\n}\n\nint symbolNameIsKeyword(char *name) {\n  int i;\n\n  for (i=0; sollyaKeywords[i] != NULL; i++) {\n    if (!strcmp(name, sollyaKeywords[i])) return 1;\n  }\n\n  return 0;\n}\n\nint isValidIdentifier(char *name) {\n  char *tmp;\n  int equal;\n  \n  if (symbolNameIsKeyword(name)) return 0;\n  tmp = (char *) safeCalloc(strlen(name) + 1, sizeof(char));\n  copyIdentifierSymbols(tmp, name);\n  equal = (strcmp(tmp, name) == 0);\n  safeFree(tmp);\n  return equal;\n}\n\nchar *unifySymbolName(char *basename) {\n  char *res, *str;\n  uint64_t number;\n  int found;\n  size_t lenbasename;\n\n  if (!(symbolNameAlreadyUsed(basename) || symbolNameIsKeyword(basename))) {\n    res = (char *) safeCalloc(strlen(basename)+1,sizeof(char));\n    strcpy(res, basename);\n    return res;\n  }\n\n  lenbasename = strlen(basename);\n  number = 0;\n  found = 0;\n  str = NULL;\n  do {\n    if (str != NULL) {\n      safeFree(str);\n      str = NULL;\n    }\n    str = (char *) safeCalloc(lenbasename + 1 + 8 * sizeof(uint64_t) + 1, sizeof(char));\n    sprintf(str,\"%s_%\" PRIu64, basename, number);\n    if (!(symbolNameAlreadyUsed(str) || symbolNameIsKeyword(str))) {\n      found = 1;\n    } else {\n      number++;\n    }\n  } while (!found);\n\n  res = safeCalloc(strlen(str)+1,sizeof(char));\n  strcpy(res, str);\n  safeFree(str);\n\n  return res;\n}\n\nlibraryHandle *getLibraryHandle(char *libraryName, int type) {\n  chain *curr;\n  chain *openedLibraries;\n  libraryHandle *currHandle;\n  void *dlfcnHandle, *otherDlfcnHandle;\n  int shallowCopy, foundElsewhere, i;\n  chain *otherLibraries[2];\n  \n  openedLibraries = NULL;\n\n  switch(type) {\n  case LIBRARYFUNCTION_CASE: openedLibraries = openedFunctionLibraries; break;\n  case LIBRARYCONSTANT_CASE: openedLibraries = openedConstantLibraries; break;\n  case LIBRARYPROC_CASE: openedLibraries = openedProcLibraries; break;\n  }\n\n  curr = openedLibraries;\n  while (curr != NULL) {\n    currHandle = (libraryHandle *) curr->value;\n    if (strcmp(currHandle->libraryName,libraryName) == 0)\n      return currHandle;\n    curr = curr->next;\n  }\n\n  switch (type) {\n  case LIBRARYFUNCTION_CASE:\n    otherLibraries[0] = openedConstantLibraries;\n    otherLibraries[1] = openedProcLibraries;\n    break;\n  case LIBRARYCONSTANT_CASE:\n    otherLibraries[0] = openedFunctionLibraries;\n    otherLibraries[1] = openedProcLibraries;\n    break;\n  case LIBRARYPROC_CASE:\n    otherLibraries[0] = openedConstantLibraries;\n    otherLibraries[1] = openedFunctionLibraries;\n    break;\n  default:\n    sollyaFprintf(stderr,\"Error: getLibraryHandle: unknown type (%d)\\n\", type);\n    exit(1);\n  }\n  otherDlfcnHandle = NULL;\n  for (i=0,foundElsewhere=0;(i<2)&&(!foundElsewhere);i++) {\n    curr = otherLibraries[i];\n    while (curr != NULL) {\n      currHandle = (libraryHandle *) curr->value;\n      if (strcmp(currHandle->libraryName,libraryName) == 0) {\n\totherDlfcnHandle = currHandle->libraryDescriptor;\n\tfoundElsewhere = 1;\n\tbreak;\n      }\n      curr = curr->next;\n    }\n  }\n\n  if (!foundElsewhere) {\n    dlerror();\n    dlfcnHandle = dlopen(libraryName, RTLD_LOCAL | RTLD_NOW);\n    if (dlfcnHandle == NULL)\n      return NULL;\n    shallowCopy = 0;\n  } else {\n    dlfcnHandle = otherDlfcnHandle;\n    shallowCopy = 1;\n  }\n\n  currHandle = (libraryHandle *) safeMalloc(sizeof(libraryHandle));\n  currHandle->libraryName = (char *) safeCalloc(strlen(libraryName)+1,sizeof(char));\n  strcpy(currHandle->libraryName,libraryName);\n  currHandle->libraryDescriptor = dlfcnHandle;\n  currHandle->functionList = NULL;\n  currHandle->shallowCopy = shallowCopy;\n\n  openedLibraries = addElement(openedLibraries,currHandle);\n\n  switch(type) {\n  case LIBRARYFUNCTION_CASE: openedFunctionLibraries = openedLibraries; break;\n  case LIBRARYCONSTANT_CASE: openedConstantLibraries = openedLibraries; break;\n  case LIBRARYPROC_CASE: openedProcLibraries = openedLibraries; break;\n  }\n\n  return currHandle;\n}\n\nlibraryHandle *getLibraryFunctionHandle(char *libraryName) {\n  return getLibraryHandle(libraryName, LIBRARYFUNCTION_CASE);\n}\n\nlibraryHandle *getConstantLibraryHandle(char *libraryName) {\n  return getLibraryHandle(libraryName, LIBRARYCONSTANT_CASE);\n}\n\nlibraryHandle *getProcLibraryHandle(char *libraryName) {\n  return getLibraryHandle(libraryName, LIBRARYPROC_CASE);\n}\n\n\n/* Functions related to library functions */\nlibraryFunction *bindFunction(char* libraryName, char *functionName) {\n  libraryHandle *libHandle;\n  libraryFunction *currFunct;\n  int (*myFunction)(sollya_mpfi_t, sollya_mpfi_t, int);\n  char *error;\n  sollya_mpfi_t op, rop;\n\n  currFunct = getFunction(functionName);\n  if (currFunct != NULL) {\n    printMessage(1,SOLLYA_MSG_EXTERNAL_FUNC_OR_PROC_ALREADY_BOUND,\"Warning: a function named \\\"%s\\\" has already been bound.\\n\",functionName);\n    return currFunct;\n  }\n\n  libHandle = getLibraryFunctionHandle(libraryName);\n  if (libHandle == NULL) {\n    printMessage(1,SOLLYA_MSG_COULD_NOT_OPEN_LIBRARY_WITH_EXTERN_FUNC_OR_PROC,\"Error: could not open library \\\"%s\\\" for binding \\\"%s\\\": %s\\n\",libraryName,functionName,dlerror());\n    return NULL;\n  }\n\n  dlerror();\n  myFunction = (int (*)(sollya_mpfi_t, sollya_mpfi_t, int)) dlsym(libHandle->libraryDescriptor, functionName);\n  if ((error = dlerror()) != NULL) {\n    printMessage(1, SOLLYA_MSG_EXTERNAL_FUNC_OR_PROC_NOT_FOUND_IN_LIBRARY, \"Error: could not find function \\\"%s\\\" in library \\\"%s\\\" for binding: %s\\n\",functionName,libraryName,error);\n    return NULL;\n  }\n\n  sollya_mpfi_init2(rop,12);\n  sollya_mpfi_init2(op,12);\n  sollya_mpfi_set_d(op,1.0);\n\n  enterExternalCode();\n  myFunction(rop,op,0);\n  leaveExternalCode();\n\n  sollya_mpfi_clear(rop);\n  sollya_mpfi_clear(op);\n\n  currFunct = (libraryFunction *) safeMalloc(sizeof(libraryFunction));\n  currFunct->functionName = (char *) safeCalloc(strlen(functionName)+1,sizeof(char));\n  strcpy(currFunct->functionName,functionName);\n  currFunct->code = (void *) myFunction;\n  currFunct->hasData = 0;\n  currFunct->data = NULL;\n  currFunct->dealloc = NULL;\n\n  libHandle->functionList = addElement(libHandle->functionList,currFunct);\n\n  return currFunct;\n}\n\nlibraryFunction *getFunction(char *functionName) {\n  chain *currLibList, *currFunList;\n  libraryFunction *currFunct;\n  libraryHandle *currLibHandle;\n\n  for (currFunList=globalLibraryFunctions;currFunList!=NULL;currFunList=currFunList->next) {\n    currFunct = (libraryFunction *) currFunList->value;\n    if (strcmp(currFunct->functionName,functionName) == 0)\n      return currFunct;\n  }\n\n  currLibList = openedFunctionLibraries;\n  while (currLibList != NULL) {\n    currLibHandle = (libraryHandle *) currLibList->value;\n    currFunList = currLibHandle->functionList;\n    while (currFunList != NULL) {\n      currFunct = (libraryFunction *) currFunList->value;\n      if (strcmp(currFunct->functionName,functionName) == 0)\n        return currFunct;\n      currFunList = currFunList->next;\n    }\n    currLibList = currLibList->next;\n  }\n\n  return NULL;\n}\n\nlibraryFunction *getFunctionByPtr(void *func, int hasData, void *data) {\n  chain *currLibList, *currFunList;\n  libraryFunction *currFunct;\n  libraryHandle *currLibHandle;\n\n  for (currFunList=globalLibraryFunctions;currFunList!=NULL;currFunList=currFunList->next) {\n    currFunct = (libraryFunction *) currFunList->value;\n    if ((currFunct->code == func) && ((!(currFunct->hasData && hasData)) || (currFunct->data == data)))\n      return currFunct;\n  }\n\n  currLibList = openedFunctionLibraries;\n  while (currLibList != NULL) {\n    currLibHandle = (libraryHandle *) currLibList->value;\n    currFunList = currLibHandle->functionList;\n    while (currFunList != NULL) {\n      currFunct = (libraryFunction *) currFunList->value;\n      if ((currFunct->code == func) && ((!(currFunct->hasData && hasData)) || (currFunct->data == data)))\n        return currFunct;\n      currFunList = currFunList->next;\n    }\n    currLibList = currLibList->next;\n  }\n\n  return NULL;\n}\n\nstatic libraryFunction *__bindFunctionByPtrImpl(char *suggestedName, void *func, int hasData, void *data, void *dealloc) {\n  libraryFunction *res;\n  char *unifiedName, *basename, *filteredSuggestedName, *filteredBaseName;\n\n  res = getFunctionByPtr(func, hasData, data);\n  if (res != NULL) {\n    if (hasData) {\n      if (res->hasData) {\n\tif (res->dealloc != dealloc) {\n\t  res->dealloc = dealloc;\n\t}\n      }\n    }\n    return res;\n  }\n    \n  if (suggestedName != NULL) {\n    filteredSuggestedName = filterSymbolName(suggestedName);\n    if (filteredSuggestedName[0] == '\\0') {\n      basename = getBaseFunctionName(func, \"func\", hasData, data);\n      filteredBaseName = filterSymbolName(basename);\n      safeFree(basename);\n      if (filteredBaseName[0] == '\\0') {\n\tunifiedName = unifySymbolName(\"func\");\n      } else {\n\tunifiedName = unifySymbolName(filteredBaseName);\n      }\n      safeFree(filteredBaseName);\n    } else {\n      unifiedName = unifySymbolName(filteredSuggestedName);\n    }\n    safeFree(filteredSuggestedName);\n  } else {\n    basename = getBaseFunctionName(func, \"func\", hasData, data);\n    filteredBaseName = filterSymbolName(basename);\n    safeFree(basename);\n    if (filteredBaseName[0] == '\\0') {\n      unifiedName = unifySymbolName(\"func\");\n    } else {\n      unifiedName = unifySymbolName(filteredBaseName);\n    }\n    safeFree(filteredBaseName);\n  }\n\n  res = (libraryFunction *) safeMalloc(sizeof(libraryFunction));\n  res->functionName = unifiedName;\n  res->code = func;\n  res->hasData = hasData;\n  res->data = data;\n  res->dealloc = dealloc;\n\n  globalLibraryFunctions = addElement(globalLibraryFunctions, res);\n\n  return res;\n}\n\nlibraryFunction *bindFunctionByPtr(char *suggestedName, int (*func)(mpfi_t, mpfi_t, int)) {\n  return __bindFunctionByPtrImpl(suggestedName, ((void *) func), 0, NULL, NULL);\n}\n\nlibraryFunction *bindFunctionByPtrWithData(char *suggestedName, int (*func)(mpfi_t, mpfi_t, int, void *), void *data, void (*dealloc)(void *)) {\n  return __bindFunctionByPtrImpl(suggestedName, ((void *) func), 1, data, ((void *) dealloc));\n}\n\nvoid freeFunctionLibraries() {\n  chain *currLibList, *currFunList, *prevFunList, *prevLibList;\n  libraryFunction *currFunct;\n  libraryHandle *currLibHandle;\n  int (*myFunction)(void);\n  int res;\n\n  currFunList = globalLibraryFunctions;\n  while (currFunList != NULL) {\n    currFunct = (libraryFunction *) currFunList->value;\n    if (currFunct->dealloc != NULL) {\n      if (currFunct->hasData) {\n\tenterExternalCode();\n\t((void (*)(void *)) currFunct->dealloc)(currFunct->data);\n\tleaveExternalCode();\n      } else {\n\tenterExternalCode();\n\t((void (*)()) currFunct->dealloc)();\n\tleaveExternalCode();\n      }\n    }\n    safeFree(currFunct->functionName);\n    safeFree(currFunList->value);\n    prevFunList = currFunList;\n    currFunList = currFunList->next;\n    safeFree(prevFunList);\n  }\n\n  currLibList = openedFunctionLibraries;\n  while (currLibList != NULL) {\n    currLibHandle = (libraryHandle *) currLibList->value;\n    if (!(currLibHandle->shallowCopy)) {\n      dlerror();\n      myFunction = (int (*)(void)) dlsym(currLibHandle->libraryDescriptor, \"sollya_external_lib_close\");\n      if (dlerror() == NULL) {\n\tenterExternalCode();\n\tres = myFunction();\n\tleaveExternalCode();\n\tif (res) {\n\t  printMessage(1,SOLLYA_MSG_LIBRARY_CLOSER_ERROR,\"Warning: while closing library \\\"%s\\\", the function \\\"sollya_external_lib_close\\\" was found and called but it signaled the error %d\\n\",currLibHandle->libraryName,res);\n\t}\n      }\n    }\n    currFunList = currLibHandle->functionList;\n    while (currFunList != NULL) {\n      currFunct = (libraryFunction *) currFunList->value;\n      if (currFunct->dealloc != NULL) {\n\tif (currFunct->hasData) {\n\t  enterExternalCode();\n\t  ((void (*)(void *)) currFunct->dealloc)(currFunct->data);\n\t  leaveExternalCode();\n\t} else {\n\t  enterExternalCode();\n\t  ((void (*)()) currFunct->dealloc)();\n\t  leaveExternalCode();\n\t}\n      }\n      safeFree(currFunct->functionName);\n      safeFree(currFunList->value);\n      prevFunList = currFunList;\n      currFunList = currFunList->next;\n      safeFree(prevFunList);\n    }\n    if (!(currLibHandle->shallowCopy)) {\n      dlerror();\n      if (dlclose(currLibHandle->libraryDescriptor) != 0)\n\tprintMessage(1,SOLLYA_MSG_COULD_NOT_CLOSE_LIBRARY,\"Warning: could not close library \\\"%s\\\": %s\\n\",currLibHandle->libraryName,dlerror());\n    }\n    safeFree(currLibHandle->libraryName);\n    safeFree(currLibHandle);\n    prevLibList = currLibList;\n    currLibList = currLibList->next;\n    safeFree(prevLibList);\n  }\n  openedFunctionLibraries = NULL;\n}\n\n\n\n/* Functions related to library constants */\nlibraryFunction *bindConstantFunction(char* libraryName, char *functionName) {\n  libraryHandle *libHandle;\n  libraryFunction *currFunct;\n  void (*myFunction)(mpfr_t, mp_prec_t);\n  char *error;\n  mpfr_t op;\n\n  currFunct = getConstantFunction(functionName);\n  if (currFunct != NULL) {\n    printMessage(1,SOLLYA_MSG_EXTERNAL_FUNC_OR_PROC_ALREADY_BOUND,\"Warning: a function named \\\"%s\\\" has already been bound.\\n\",functionName);\n    return currFunct;\n  }\n\n  libHandle = getConstantLibraryHandle(libraryName);\n  if (libHandle == NULL) {\n    printMessage(1,SOLLYA_MSG_COULD_NOT_OPEN_LIBRARY_WITH_EXTERN_FUNC_OR_PROC,\"Error: could not open library \\\"%s\\\" for binding \\\"%s\\\": %s\\n\",libraryName,functionName,dlerror());\n    return NULL;\n  }\n\n  dlerror();\n  myFunction = (void (*)(mpfr_t, mp_prec_t)) dlsym(libHandle->libraryDescriptor, functionName);\n  if ((error = dlerror()) != NULL) {\n    printMessage(1, SOLLYA_MSG_EXTERNAL_FUNC_OR_PROC_NOT_FOUND_IN_LIBRARY, \"Error: could not find function \\\"%s\\\" in library \\\"%s\\\" for binding: %s\\n\",functionName,libraryName,error);\n    return NULL;\n  }\n\n  mpfr_init2(op,20);\n\n  enterExternalCode();\n  myFunction(op,5);\n  leaveExternalCode();\n\n  mpfr_clear(op);\n\n  currFunct = (libraryFunction *) safeMalloc(sizeof(libraryFunction));\n  currFunct->functionName = (char *) safeCalloc(strlen(functionName)+1,sizeof(char));\n  strcpy(currFunct->functionName,functionName);\n  currFunct->code = (void *) myFunction;\n  currFunct->hasData = 0;\n  currFunct->data = NULL;\n  currFunct->dealloc = NULL;\n\n  libHandle->functionList = addElement(libHandle->functionList,currFunct);\n\n  return currFunct;\n}\n\nlibraryFunction *getConstantFunction(char *functionName) {\n  chain *currLibList, *currFunList;\n  libraryFunction *currFunct;\n  libraryHandle *currLibHandle;\n\n  for (currFunList=globalLibraryConstants;currFunList!=NULL;currFunList=currFunList->next) {\n    currFunct = (libraryFunction *) currFunList->value;\n    if (strcmp(currFunct->functionName,functionName) == 0)\n      return currFunct;\n  }\n\n  currLibList = openedConstantLibraries;\n  while (currLibList != NULL) {\n    currLibHandle = (libraryHandle *) currLibList->value;\n    currFunList = currLibHandle->functionList;\n    while (currFunList != NULL) {\n      currFunct = (libraryFunction *) currFunList->value;\n      if (strcmp(currFunct->functionName,functionName) == 0)\n        return currFunct;\n      currFunList = currFunList->next;\n    }\n    currLibList = currLibList->next;\n  }\n\n  return NULL;\n}\n\nlibraryFunction *getConstantFunctionByPtr(void *func, int hasData, void *data) {\n  chain *currLibList, *currFunList;\n  libraryFunction *currFunct;\n  libraryHandle *currLibHandle;\n\n  for (currFunList=globalLibraryConstants;currFunList!=NULL;currFunList=currFunList->next) {\n    currFunct = (libraryFunction *) currFunList->value;\n    if ((currFunct->code == func) && ((!(currFunct->hasData && hasData)) || (currFunct->data == data)))\n      return currFunct;\n  }\n\n  currLibList = openedConstantLibraries;\n  while (currLibList != NULL) {\n    currLibHandle = (libraryHandle *) currLibList->value;\n    currFunList = currLibHandle->functionList;\n    while (currFunList != NULL) {\n      currFunct = (libraryFunction *) currFunList->value;\n      if ((currFunct->code == func) && ((!(currFunct->hasData && hasData)) || (currFunct->data == data)))\n        return currFunct;\n      currFunList = currFunList->next;\n    }\n    currLibList = currLibList->next;\n  }\n\n  return NULL;\n}\n\nstatic libraryFunction *__bindConstantFunctionByPtrImpl(char *suggestedName, void *func, int hasData, void *data, void *dealloc) {\n  libraryFunction *res;\n  char *unifiedName, *basename, *filteredBaseName, *filteredSuggestedName;\n\n  res = getConstantFunctionByPtr(func, hasData, data);\n  if (res != NULL) {\n    if (hasData) {\n      if (res->hasData) {\n\tif (res->dealloc != dealloc) {\n\t  res->dealloc = dealloc;\n\t}\n      }\n    }\n    return res;\n  }\n\n  if (suggestedName != NULL) {\n    filteredSuggestedName = filterSymbolName(suggestedName);\n    if (filteredSuggestedName[0] == '\\0') {\n      basename = getBaseFunctionName(func, \"const\", hasData, data);\n      filteredBaseName = filterSymbolName(basename);\n      safeFree(basename);\n      if (filteredBaseName[0] == '\\0') {\n\tunifiedName = unifySymbolName(\"const\");\n      } else {\n\tunifiedName = unifySymbolName(filteredBaseName);\n      }\n      safeFree(filteredBaseName);\n    } else {\n      unifiedName = unifySymbolName(filteredSuggestedName);\n    }\n    safeFree(filteredSuggestedName);\n  } else {\n    basename = getBaseFunctionName(func, \"const\", hasData, data);\n    filteredBaseName = filterSymbolName(basename);\n    safeFree(basename);\n    if (filteredBaseName[0] == '\\0') {\n      unifiedName = unifySymbolName(\"const\");\n    } else {\n      unifiedName = unifySymbolName(filteredBaseName);\n    }\n    safeFree(filteredBaseName);\n  }\n\n  res = (libraryFunction *) safeMalloc(sizeof(libraryFunction));\n  res->functionName = unifiedName;\n  res->code = func;\n  res->hasData = hasData;\n  res->data = data;\n  res->dealloc = dealloc;\n  \n\n  globalLibraryConstants = addElement(globalLibraryConstants, res);\n\n  return res;\n}\n\nlibraryFunction *bindConstantFunctionByPtr(char *suggestedName, void (*func)(mpfr_t, mp_prec_t)) {\n  return __bindConstantFunctionByPtrImpl(suggestedName, ((void *) func), 0, NULL, NULL);\n}\n\nlibraryFunction *bindConstantFunctionByPtrWithData(char *suggestedName, void (*func)(mpfr_t, mp_prec_t, void *), void *data, void (*dealloc)(void *)) {\n  return __bindConstantFunctionByPtrImpl(suggestedName, ((void *) func), 1, data, ((void *) dealloc));\n}\n\nvoid freeConstantLibraries() {\n  chain *currLibList, *currFunList, *prevFunList, *prevLibList;\n  libraryFunction *currFunct;\n  libraryHandle *currLibHandle;\n  int res;\n  int (*myFunction)(void);\n\n  currFunList = globalLibraryConstants;\n  while (currFunList != NULL) {\n    currFunct = (libraryFunction *) currFunList->value;\n    if (currFunct->dealloc != NULL) {\n      if (currFunct->hasData) {\n\tenterExternalCode();\n\t((void (*)(void *)) currFunct->dealloc)(currFunct->data);\n\tleaveExternalCode();\n      } else {\n\tenterExternalCode();\n\t((void (*)()) currFunct->dealloc)();\n\tleaveExternalCode();\n      }\n    }\n    safeFree(currFunct->functionName);\n    safeFree(currFunList->value);\n    prevFunList = currFunList;\n    currFunList = currFunList->next;\n    safeFree(prevFunList);\n  }\n\n  currLibList = openedConstantLibraries;\n  while (currLibList != NULL) {\n    currLibHandle = (libraryHandle *) currLibList->value;\n    if (!(currLibHandle->shallowCopy)) {\n      dlerror();\n      myFunction = (int (*)(void)) dlsym(currLibHandle->libraryDescriptor, \"sollya_external_lib_close\");\n      if (dlerror() == NULL) {\n\tenterExternalCode();\n\tres = myFunction();\n\tleaveExternalCode();\n\tif (res) {\n\t  printMessage(1,SOLLYA_MSG_LIBRARY_CLOSER_ERROR,\"Warning: while closing library \\\"%s\\\", the function \\\"sollya_external_lib_close\\\" was found and called but it signaled the error %d\\n\",currLibHandle->libraryName,res);\n\t}\n      }\n    }\n    currFunList = currLibHandle->functionList;\n    while (currFunList != NULL) {\n      currFunct = (libraryFunction *) currFunList->value;\n      if (currFunct->dealloc != NULL) {\n\tif (currFunct->hasData) {\n\t  enterExternalCode();\n\t  ((void (*)(void *)) currFunct->dealloc)(currFunct->data);\n\t  leaveExternalCode();\n\t} else {\n\t  enterExternalCode();\n\t  ((void (*)()) currFunct->dealloc)();\n\t  leaveExternalCode();\n\t}\n      }\n      safeFree(currFunct->functionName);\n      safeFree(currFunList->value);\n      prevFunList = currFunList;\n      currFunList = currFunList->next;\n      safeFree(prevFunList);\n    }\n    if (!(currLibHandle->shallowCopy)) {\n      dlerror();\n      if (dlclose(currLibHandle->libraryDescriptor) != 0)\n\tprintMessage(1,SOLLYA_MSG_COULD_NOT_CLOSE_LIBRARY,\"Warning: could not close library \\\"%s\\\": %s\\n\",currLibHandle->libraryName,dlerror());\n    }\n    safeFree(currLibHandle->libraryName);\n    safeFree(currLibHandle);\n    prevLibList = currLibList;\n    currLibList = currLibList->next;\n    safeFree(prevLibList);\n  }\n  openedConstantLibraries = NULL;\n}\n\n/* Functions related to external procedures */\nlibraryProcedure *bindProcedure(char* libraryName, char *procedureName, chain *signature) {\n  libraryHandle *libHandle;\n  libraryProcedure *currProc;\n  char *error;\n  void *myFunction;\n\n  currProc = getProcedure(procedureName);\n  if (currProc != NULL) {\n    printMessage(1,SOLLYA_MSG_EXTERNAL_FUNC_OR_PROC_ALREADY_BOUND,\"Warning: a function named \\\"%s\\\" has already been bound.\\n\",procedureName);\n    return currProc;\n  }\n\n  libHandle = getProcLibraryHandle(libraryName);\n  if (libHandle == NULL) {\n    printMessage(1,SOLLYA_MSG_COULD_NOT_OPEN_LIBRARY_WITH_EXTERN_FUNC_OR_PROC,\"Error: could not open library \\\"%s\\\" for binding \\\"%s\\\": %s\\n\",libraryName,procedureName,dlerror());\n    return NULL;\n  }\n\n  dlerror();\n  myFunction = dlsym(libHandle->libraryDescriptor, procedureName);\n  if ((error = dlerror()) != NULL) {\n    printMessage(1, SOLLYA_MSG_EXTERNAL_FUNC_OR_PROC_NOT_FOUND_IN_LIBRARY, \"Error: could not find function \\\"%s\\\" in library \\\"%s\\\" for binding: %s\\n\",procedureName,libraryName,error);\n    return NULL;\n  }\n\n  currProc = (libraryProcedure *) safeMalloc(sizeof(libraryProcedure));\n  currProc->procedureName = (char *) safeCalloc(strlen(procedureName)+1,sizeof(char));\n  strcpy(currProc->procedureName,procedureName);\n  currProc->code = myFunction;\n  currProc->signature = copyChainWithoutReversal(signature, copyIntPtrOnVoid);\n  currProc->hasData = 0;\n  currProc->data = NULL;\n  currProc->dealloc = NULL;\n\n\n  libHandle->functionList = addElement(libHandle->functionList,currProc);\n\n  return currProc;\n}\n\nlibraryProcedure *getProcedure(char *procedureName) {\n  chain *currLibList, *currProcList;\n  libraryProcedure *currProc;\n  libraryHandle *currLibHandle;\n\n  for (currProcList=globalLibraryProcedures;currProcList!=NULL;currProcList=currProcList->next) {\n    currProc = (libraryProcedure *) currProcList->value;\n    if (strcmp(currProc->procedureName,procedureName) == 0)\n      return currProc;\n  }\n\n  currLibList = openedProcLibraries;\n  while (currLibList != NULL) {\n    currLibHandle = (libraryHandle *) currLibList->value;\n    currProcList = currLibHandle->functionList;\n    while (currProcList != NULL) {\n      currProc = (libraryProcedure *) currProcList->value;\n      if (strcmp(currProc->procedureName,procedureName) == 0)\n\treturn currProc;\n      currProcList = currProcList->next;\n    }\n    currLibList = currLibList->next;\n  }\n\n  return NULL;\n}\n\nlibraryProcedure *getProcedureByPtr(void *ptr, int hasData, void *data) {\n  chain *currLibList, *currProcList;\n  libraryProcedure *currProc;\n  libraryHandle *currLibHandle;\n\n  for (currProcList=globalLibraryProcedures;currProcList!=NULL;currProcList=currProcList->next) {\n    currProc = (libraryProcedure *) currProcList->value;\n    if ((currProc->code == ptr) && ((!(currProc->hasData && hasData)) || (currProc->data == data)))\n      return currProc;\n  }\n\n  currLibList = openedProcLibraries;\n  while (currLibList != NULL) {\n    currLibHandle = (libraryHandle *) currLibList->value;\n    currProcList = currLibHandle->functionList;\n    while (currProcList != NULL) {\n      currProc = (libraryProcedure *) currProcList->value;\n      if ((currProc->code == ptr) && ((!(currProc->hasData && hasData)) || (currProc->data == data)))\n\treturn currProc;\n      currProcList = currProcList->next;\n    }\n    currLibList = currLibList->next;\n  }\n\n  return NULL;\n}\n\nstatic libraryProcedure *__bindProcedureByPtrImpl(int resType, int *argTypes, int arity, char *suggestedName, void *func, int hasData, void *data, void *dealloc) {\n  libraryProcedure *res;\n  char *unifiedName, *basename, *filteredBaseName, *filteredSuggestedName;\n  chain *signature, *temp;\n  int i;\n  int *t;\n\n  if (arity < 0) return NULL;\n  if (arity > 1) {\n    for (i=1;i<arity;i++) {\n      if (argTypes[i] == VOID_TYPE)\n\treturn NULL;\n    }\n  }\n  \n  res = getProcedureByPtr(func, hasData, data);\n  if (res != NULL) {\n    if (hasData) {\n      if (res->hasData) {\n\tif (res->dealloc != dealloc) {\n\t  res->dealloc = dealloc;\n\t}\n      }\n    }\n    return res;\n  }\n\n  signature = NULL;\n  t = (int *) safeMalloc(sizeof(int));\n  *t = resType;\n  signature = addElement(signature, t);\n  if (arity == 0) {\n    t = (int *) safeMalloc(sizeof(int));\n    *t = VOID_TYPE;\n    signature = addElement(signature, t);\n  } else {\n    for (i=0;i<arity;i++) {\n      t = (int *) safeMalloc(sizeof(int));\n      *t = argTypes[i];\n      signature = addElement(signature, t);\n    }\n  }\n  temp = copyChain(signature, copyIntPtrOnVoid);\n  freeChain(signature,freeIntPtr);\n  signature = temp;\n  \n  if (suggestedName != NULL) {\n    filteredSuggestedName = filterSymbolName(suggestedName);\n    if (filteredSuggestedName[0] == '\\0') {\n      basename = getBaseFunctionName(func, \"proc\", hasData, data);\n      filteredBaseName = filterSymbolName(basename);\n      safeFree(basename);\n      if (filteredBaseName[0] == '\\0') {\n\tunifiedName = unifySymbolName(\"proc\");\n      } else {\n\tunifiedName = unifySymbolName(filteredBaseName);\n      }\n      safeFree(filteredBaseName);\n    } else {\n      unifiedName = unifySymbolName(filteredSuggestedName);\n    }\n    safeFree(filteredSuggestedName);\n  } else {\n    basename = getBaseFunctionName(func, \"proc\", hasData, data);\n    filteredBaseName = filterSymbolName(basename);\n    safeFree(basename);\n    if (filteredBaseName[0] == '\\0') {\n      unifiedName = unifySymbolName(\"proc\");\n    } else {\n      unifiedName = unifySymbolName(filteredBaseName);\n    }\n    safeFree(filteredBaseName);\n  }\n\n  res = (libraryProcedure *) safeMalloc(sizeof(libraryProcedure));\n  res->procedureName = unifiedName;\n  res->code = func;\n  res->signature = signature;\n  res->hasData = hasData;\n  res->data = data;\n  res->dealloc = dealloc;\n\n  globalLibraryProcedures = addElement(globalLibraryProcedures, res);\n\n  return res;\n}\n\nlibraryProcedure *bindProcedureByPtr(int resType, int *argTypes, int arity, char *suggestedName, void *func) {\n  return __bindProcedureByPtrImpl(resType, argTypes, arity, suggestedName, func, 0, NULL, NULL);\n}\n\nlibraryProcedure *bindProcedureByPtrWithData(int resType, int *argTypes, int arity, char *suggestedName, void *func, void *data, void (*dealloc)(void *)) {\n  return __bindProcedureByPtrImpl(resType, argTypes, arity, suggestedName, func, 1, data, ((void *) dealloc));\n}\n\nvoid freeProcLibraries() {\n  chain *currLibList, *currProcList, *prevProcList, *prevLibList;\n  libraryProcedure *currProc;\n  libraryHandle *currLibHandle;\n  int res;\n  int (*myFunction)(void);\n\n  currProcList = globalLibraryProcedures;\n  while (currProcList != NULL) {\n    currProc = (libraryProcedure *) currProcList->value;\n    if (currProc->dealloc != NULL) {\n      if (currProc->hasData) {\n\tenterExternalCode();\n\t((void (*)(void *)) currProc->dealloc)(currProc->data);\n\tleaveExternalCode();\n      } else {\n\tenterExternalCode();\n\t((void (*)()) currProc->dealloc)();\n\tleaveExternalCode();\n      }\n    }\n    safeFree(currProc->procedureName);\n    freeChain(currProc->signature,freeIntPtr);\n    safeFree(currProcList->value);\n    prevProcList = currProcList;\n    currProcList = currProcList->next;\n    safeFree(prevProcList);\n  }\n  \n  currLibList = openedProcLibraries;\n  while (currLibList != NULL) {\n    currLibHandle = (libraryHandle *) currLibList->value;\n    if (!(currLibHandle->shallowCopy)) {\n      dlerror();\n      myFunction = (int (*)(void)) dlsym(currLibHandle->libraryDescriptor, \"sollya_external_lib_close\");\n      if (dlerror() == NULL) {\n\tenterExternalCode();\n\tres = myFunction();\n\tleaveExternalCode();\n\tif (res) {\n\t  printMessage(1,SOLLYA_MSG_LIBRARY_CLOSER_ERROR,\"Warning: while closing library \\\"%s\\\", the function \\\"sollya_external_lib_close\\\" was found and called but it signaled the error %d\\n\",currLibHandle->libraryName,res);\n\t}\n      }\n    }\n    currProcList = currLibHandle->functionList;\n    while (currProcList != NULL) {\n      currProc = (libraryProcedure *) currProcList->value;\n      if (currProc->dealloc != NULL) {\n\tif (currProc->hasData) {\n\t  ((void (*)(void *)) currProc->dealloc)(currProc->data);\n\t} else {\n\t  ((void (*)()) currProc->dealloc)();\n\t}\n      }\n      safeFree(currProc->procedureName);\n      freeChain(currProc->signature,freeIntPtr);\n      safeFree(currProcList->value);\n      prevProcList = currProcList;\n      currProcList = currProcList->next;\n      safeFree(prevProcList);\n    }\n    if (!(currLibHandle->shallowCopy)) {\n      dlerror();\n      if (dlclose(currLibHandle->libraryDescriptor) != 0)\n\tprintMessage(1,SOLLYA_MSG_COULD_NOT_CLOSE_LIBRARY,\"Warning: could not close library \\\"%s\\\": %s\\n\",currLibHandle->libraryName,dlerror());\n    }\n    safeFree(currLibHandle->libraryName);\n    safeFree(currLibHandle);\n    prevLibList = currLibList;\n    currLibList = currLibList->next;\n    safeFree(prevLibList);\n  }\n  openedProcLibraries = NULL;\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-sollya-7.0-d2v6iu4jkfdedpugpbvpzwrlag7udcvx/spack-src/help.h": "/*\n \n  Copyright 2007-2018 by\n \n  Laboratoire de l'Informatique du Parallelisme,\n  UMR CNRS - ENS Lyon - UCB Lyon 1 - INRIA 5668,\n \n  LORIA (CNRS, INPL, INRIA, UHP, U-Nancy 2),\n \n  Laboratoire d'Informatique de Paris 6, equipe PEQUAN,\n  UPMC Universite Paris 06 - CNRS - UMR 7606 - LIP6, Paris, France,\n \n  Laboratoire d'Informatique de Paris 6 - \u00c9quipe PEQUAN\n  Sorbonne Universit\u00e9s\n  UPMC Univ Paris 06\n  UMR 7606, LIP6\n  Bo\u00eete Courrier 169\n  4, place Jussieu\n  F-75252 Paris Cedex 05\n  France,\n \n  Sorbonne Universit\u00e9\n  CNRS, Laboratoire d'Informatique de Paris 6, LIP6\n  F - 75005 Paris\n  France\n \n  and by\n \n  Centre de recherche INRIA Sophia Antipolis Mediterranee,\n  Equipes APICS, FACTAS,\n  Sophia Antipolis, France.\n \n  Contributors Ch. Lauter, S. Chevillard, M. Joldes\n \n  christoph.lauter@ens-lyon.org\n  sylvain.chevillard@ens-lyon.org\n  joldes@laas.fr\n \n  This software is a computer program whose purpose is to provide an\n  environment for safe floating-point code development. It is\n  particularly targeted to the automated implementation of\n  mathematical floating-point libraries (libm). Amongst other features,\n  it offers a certified infinity norm, an automatic polynomial\n  implementer and a fast Remez algorithm.\n \n  This software is governed by the CeCILL-C license under French law and\n  abiding by the rules of distribution of free software.  You can  use,\n  modify and/ or redistribute the software under the terms of the CeCILL-C\n  license as circulated by CEA, CNRS and INRIA at the following URL\n  \"http://www.cecill.info\".\n \n  As a counterpart to the access to the source code and  rights to copy,\n  modify and redistribute granted by the license, users are provided only\n  with a limited warranty  and the software's author,  the holder of the\n  economic rights,  and the successive licensors  have only  limited\n  liability.\n \n  In this respect, the user's attention is drawn to the risks associated\n  with loading,  using,  modifying and/or developing or reproducing the\n  software by the user in light of its specific status of free software,\n  that may mean  that it is complicated to manipulate,  and  that  also\n  therefore means  that it is reserved for developers  and  experienced\n  professionals having in-depth computer knowledge. Users are therefore\n  encouraged to load and test the software's suitability as regards their\n  requirements in conditions enabling the security of their systems and/or\n  data to be ensured and,  more generally, to use and operate it in the\n  same conditions as regards security.\n \n  The fact that you are presently reading this means that you have had\n  knowledge of the CeCILL-C license and that you accept its terms.\n \n  This program is distributed WITHOUT ANY WARRANTY; without even the\n  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n \n*/\n \n#ifndef HELP_H\n#define HELP_H\n#define HELP_PRINTFLOAT_TEXT \"Name: printsingle\\n==> prints a constant value as a hexadecimal single precision number\\n\\nUsage: \\n   printsingle({constant}) : constant -> void\\n\\nParameters: \\n   {constant} represents a constant\\n\\nDescription: \\n   * Prints a constant value as a hexadecimal number on 8 hexadecimal\\n   digits. The hexadecimal number represents the integer equivalent to\\n   the 32 bit memory representation of the constant considered as a\\n   single precision number.\\n    \\n   If the constant value does not hold on a single precision number, it\\n   is first rounded to the nearest single precision number before it is\\n   displayed. A warning is displayed in this case.\\n\\nExample 1: \\n   > printsingle(3);\\n   0x40400000\\n\\nExample 2: \\n   > prec=100!;\\n   > verbosity = 1!;\\n   > printsingle(exp(5));\\n   Warning: the given expression is not a constant but an expression to evaluate. A faithful evaluation will be used.\\n   Warning: rounding down occurred before printing a value as a simple.\\n   0x431469c5\\n\\nSee also: printdouble, single\\n\"\n#define HELP_PRINTHEXA_TEXT \"Name: printdouble\\n==> prints a constant value as a hexadecimal double precision number\\n\\nUsage: \\n   printdouble({constant}) : constant -> void\\n\\nParameters: \\n   {constant} represents a constant\\n\\nDescription: \\n   * Prints a constant value as a hexadecimal number on 16 hexadecimal\\n   digits. The hexadecimal number represents the integer equivalent to\\n   the 64 bit memory representation of the constant considered as a\\n   double precision number.\\n    \\n   If the constant value does not hold on a double precision number, it\\n   is first rounded to the nearest double precision number before\\n   displayed. A warning is displayed in this case.\\n\\nExample 1: \\n   > printdouble(3);\\n   0x4008000000000000\\n\\nExample 2: \\n   > prec=100!;\\n   > verbosity = 1!;\\n   > printdouble(exp(5));\\n   Warning: the given expression is not a constant but an expression to evaluate. A faithful evaluation will be used.\\n   Warning: rounding down occurred before printing a value as a double.\\n   0x40628d389970338f\\n\\nSee also: printsingle, printexpansion, double\\n\"\n#define HELP_ABSOLUTE_TEXT \"Name: absolute\\n==> indicates an absolute error for externalplot, fpminimax or supnorm\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_absolute()\\n   int sollya_lib_is_absolute(sollya_obj_t)\\n\\nUsage: \\n   absolute : absolute|relative\\n\\nDescription: \\n   * The use of absolute in the command externalplot indicates that during\\n   plotting in externalplot an absolute error is to be considered.\\n    \\n   See externalplot for details.\\n\\n   * Used with fpminimax, absolute indicates that fpminimax must try to minimize\\n   the absolute error.\\n    \\n   See fpminimax for details.\\n\\n   * When given in argument to supnorm, absolute indicates that an absolute error\\n   is to be considered for supremum norm computation.\\n    \\n   See supnorm for details.\\n\\nExample 1: \\n   > bashexecute(\\\"gcc -fPIC -c externalplotexample.c\\\");\\n   > bashexecute(\\\"gcc -shared -o externalplotexample externalplotexample.o -lgmp -lmpfr\\\");\\n   > externalplot(\\\"./externalplotexample\\\",absolute,exp(x),[-1/2;1/2],12,perturb);\\n\\nSee also: externalplot, fpminimax, relative, bashexecute, supnorm\\n\"\n#define HELP_ABS_TEXT \"Name: abs\\n==> the absolute value.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_abs(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_abs(sollya_obj_t)\\n   #define SOLLYA_ABS(x) sollya_lib_build_function_abs(x)\\n\\nDescription: \\n   * abs is the absolute value function. abs(x)=x if x>0 and -x otherwise.\\n\\n\"\n#define HELP_ACCURATEINFNORM_TEXT \"Name: accurateinfnorm\\n==> computes a faithful rounding of the infinity norm of a function \\n\\nUsage: \\n   accurateinfnorm({function},{range},{constant}) : (function, range, constant) -> constant\\n   accurateinfnorm({function},{range},{constant},{exclusion range 1},...,{exclusion range n}) : (function, range, constant, range, ..., range) -> constant\\n\\nParameters: \\n   {function} represents the function whose infinity norm is to be computed\\n   {range} represents the infinity norm is to be considered on\\n   {constant} represents the number of bits in the significant of the result\\n   {exclusion range 1} through {exclusion range n} represent ranges to be excluded \\n\\nDescription: \\n   * The command accurateinfnorm computes an upper bound to the infinity norm of\\n   function {function} in {range}. This upper bound is the least\\n   floating-point number greater than the value of the infinity norm that\\n   lies in the set of dyadic floating point numbers having {constant}\\n   significant mantissa bits. This means the value accurateinfnorm evaluates to\\n   is at the time an upper bound and a faithful rounding to {constant}\\n   bits of the infinity norm of function {function} on range {range}.\\n    \\n   If given, the fourth and further arguments of the command accurateinfnorm,\\n   {exclusion range 1} through {exclusion range n} the infinity norm of\\n   the function {function} is not to be considered on.\\n\\n   * The command accurateinfnorm is now considered DEPRECATED in Sollya.\\n   Users should be aware about the fact that the algorithm behind\\n   accurateinfnorm is highly inefficient and that other, better suited\\n   algorithms, such as supnorm, are available inside Sollya. As a\\n   matter of fact, while accurateinfnorm is maintained for compatibility reasons\\n   with legacy Sollya codes, users are advised to avoid using accurateinfnorm\\n   in new Sollya scripts and to replace it, where possible, by the\\n   supnorm command.\\n\\nExample 1: \\n   > p = remez(exp(x), 5, [-1;1]);\\n   > accurateinfnorm(p - exp(x), [-1;1], 20);\\n   4.52055246569216251373291015625e-5\\n   > accurateinfnorm(p - exp(x), [-1;1], 30);\\n   4.5205513970358879305422306060791015625e-5\\n   > accurateinfnorm(p - exp(x), [-1;1], 40);\\n   4.520551396713923253400935209356248378753662109375e-5\\n\\nExample 2: \\n   > p = remez(exp(x), 5, [-1;1]);\\n   > midpointmode = on!;\\n   > infnorm(p - exp(x), [-1;1]);\\n   0.45205~5/7~e-4\\n   > accurateinfnorm(p - exp(x), [-1;1], 40);\\n   4.520551396713923253400935209356248378753662109375e-5\\n\\nSee also: infnorm, dirtyinfnorm, supnorm, checkinfnorm, remez, diam\\n\"\n#define HELP_ACOSH_TEXT \"Name: acosh\\n==> the arg-hyperbolic cosine function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_acosh(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_acosh(sollya_obj_t)\\n   #define SOLLYA_ACOSH(x) sollya_lib_build_function_acosh(x)\\n\\nDescription: \\n   * acosh is the inverse of the function cosh: acosh(y) is the unique number \\n   x in [0; +Inf] such that cosh(x)=y.\\n\\n   * It is defined only for y in [0; +Inf].\\n\\nSee also: cosh\\n\"\n#define HELP_ACOS_TEXT \"Name: acos\\n==> the arccosine function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_acos(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_acos(sollya_obj_t)\\n   #define SOLLYA_ACOS(x) sollya_lib_build_function_acos(x)\\n\\nDescription: \\n   * acos is the inverse of the function cos: acos(y) is the unique number \\n   x in [0; Pi] such that cos(x)=y.\\n\\n   * It is defined only for y in [-1; 1].\\n\\nSee also: cos\\n\"\n#define HELP_AND_TEXT \"Name: &&\\n==> boolean AND operator\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_and(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   {expr1} && {expr2} : (boolean, boolean) -> boolean\\n\\nParameters: \\n   {expr1} and {expr2} represent boolean expressions\\n\\nDescription: \\n   * && evaluates to the boolean AND of the two\\n   boolean expressions {expr1} and {expr2}. && evaluates to \\n   true iff both {expr1} and {expr2} evaluate to true.\\n\\nExample 1: \\n   > true && false;\\n   false\\n\\nExample 2: \\n   > (1 == exp(0)) && (0 == log(1));\\n   true\\n\\nSee also: ||, !\\n\"\n#define HELP_ANNOTATEFUNCTION_TEXT \"Name: annotatefunction\\n==> Annotates a Sollya function object with an approximation that is faster to evaluate\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_annotatefunction(sollya_obj_t, sollya_obj_t,\\n                                            sollya_obj_t, sollya_obj_t, ...);\\n   sollya_obj_t sollya_lib_v_annotatefunction(sollya_obj_t, sollya_obj_t,\\n                                              sollya_obj_t, sollya_obj_t,\\n                                              va_list);\\n\\nUsage: \\n   annotatefunction({f}, {g}, {I}, {d}) : (function, function, range, range) -> function\\n   annotatefunction({f}, {g}, {I}, {d}, {x0}) : (function, function, range, range, constant) -> function\\n\\nParameters: \\n   {f} is a function.\\n   {g} is a function, in most cases a polynomial.\\n   {I} is an interval.\\n   {d} is an interval.\\n   {x0} is a constant (default value is 0 when not provided).\\n\\nDescription: \\n   * When a given function {f} is to be evaluated at several points of a given\\n   interval {I} to a given precision, it might be useful to precompute a good\\n   approximant {g} of {f} and further evaluate it instead of {f} when the\\n   approximation is good enough to provide the desire precision. If {f} is a\\n   complicated expression, whereas {g} is, e.g., a polynomial of low degree,\\n   the cost of precomputing {g} can be well compensated by the gain of time in\\n   each subsequent evaluation. The purpose of annotatefunction is to provide\\n   such a mechanism to the user.\\n\\n   * When using annotatefunction({f}, {g}, {I}, {d}, {x0}),\\n   resp. annotatefunction({f}, {g}, {I}, {d}) (where {x0} is assumed to be\\n   zero), it is assumed that\\n    \\n                   forall x in I, f(x) - g(x - x0) in d.\\n    \\n   It is the user responsibility to ensure this property. Otherwise, any\\n   subsequent use of {f} on points of {I} might lead to incorrect values.\\n\\n   * A call to annotatefunction({f}, {g}, {I}, {d}, {x0}) annotates the given\\n   Sollya function object {f} with the approximation {g}. In further use, when\\n   asked to evaluate {f} on a point x of {I}, Sollya will first evaluate {g}\\n   on x-x0 and check if the result is accurate enough in the given context\\n   (accounting for the fact that the error of approximation between the true\\n   value and g(x-x0) belongs to {d}). If not (and only in this case), an\\n   evaluation of the expression of {f} on x is performed.\\n\\n   * The approximation {g} can be any Sollya function but particular\\n   performance is expected when {g} is a polynomial. Upon annotation with a\\n   polynomial, precomputations are performed to analyze certain properties of\\n   the given approximation polynomial.\\n\\n   * annotatefunction updates the internal representation of {f} so as to\\n   persistently keep this information attached with the Sollya object\\n   representing {f}. In particular, the annotation is persistent through copy\\n   or use of {f} as a subexpression to build up bigger expressions. Notice\\n   however, that there is no way of deducing an annotation for the derivative\\n   of {f} from an annotation of {f}. So, in general, it should not be expected\\n   that diff({f}) will be automatically annotated (notice, however that {f}\\n   might be a subexpression of its derivative, e.g., for {f}=exp or {f}=tan, in\\n   which case the corresponding subexpressions of the derivative could inherit\\n   the annotations from {f}. It is currently not specified whether Sollya does\\n   this automatically or not).\\n\\n   * annotatefunction really is an imperative statement that modifies the\\n   internal representation of {f}. However, for convenience annotatefunction\\n   returns {f} itself.\\n\\n   * Sollya function objects can be annotated more than once with different\\n   approximations on different domains, that do not need to be disjoint. Upon\\n   evaluation of the annotated function object, Sollya chooses an\\n   approximation annotation (if any) that provides for sufficient accuracy at\\n   the evaluation point. It is not specified in which order Sollya tries\\n   different possible annotations when several are available for a given\\n   point {x}.\\n\\nExample 1: \\n   > verbosity=1!;\\n   > procedure EXP(X,n,p) {\\n               var res, oldPrec;\\n               oldPrec = prec;\\n               prec = p!;\\n               \\\"Using procedure function exponential with X=\\\" @ X @ \\\", n=\\\" @ n @ \\\", and p=\\\" @ p;\\n               res = exp(X);\\n               prec = oldPrec!;\\n               return res;\\n          };\\n   > g = function(EXP);\\n   > p = 46768052394588893382516870161332864698044514954899b-165 + x * (23384026197294446691258465802074096632225783601255b-164 + x * (5846006549323611672948426613035653821819225877423b-163 + x * (3897337699549074448627696490806815137319821946501b-164 + x * (7794675399098148717422744621371434831048848817417b-167 + x * (24942961277114075921122941174178849425809856036737b-171 + x * (8314320425704876115613838900105097456456371179471b-172 + x * (19004160973039701371579356991645932289422670402995b-176 + x * (19004160972669324148912122254449912156003926801563b-179 + x * (33785175062542597526738679493857229456702396042255b-183 + x * (6757035113643674378393625988264926886191860669891b-184 + x * (9828414707511252769908089206114262766633532289937b-188 + x * (26208861108003813314724515233584738706961162212965b-193 + x * (32257064253325954315953742396999456577223350602741b-197 + x * (578429089657689569703509185903214676926704485495b-195 + x * 2467888542176675658523627105540996778984959471957b-201))))))))))))));\\n   > h = annotatefunction(g, p, [-1/2;1/2], [-475294848522543b-124;475294848522543b-124]);\\n   > h == g;\\n   true\\n   > prec = 24;\\n   The precision has been set to 24 bits.\\n   > h(0.25);\\n   Warning: rounding has happened. The value displayed is a faithful rounding to 24 bits of the true result.\\n   1.2840254\\n   > prec = 165;\\n   The precision has been set to 165 bits.\\n   > h(0.25);\\n   Using procedure function exponential with X=[0.25;0.25], n=0, and p=185\\n   Warning: rounding has happened. The value displayed is a faithful rounding to 165 bits of the true result.\\n   1.28402541668774148407342056806243645833628086528147\\n\\nSee also: chebyshevform, taylorform, remez, supnorm, infnorm\\n\"\n#define HELP_APPEND_TEXT \"Name: :.\\n==> add an element at the end of a list.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_append(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   {L}:.{x} : (list, any type) -> list\\n\\nParameters: \\n   {L} is a list (possibly empty).\\n   {x} is an object of any type.\\n\\nDescription: \\n   * :. adds the element {x} at the end of the list {L}.\\n\\n   * Note that since {x} may be of any type, it can in particular be a list.\\n\\nExample 1: \\n   > [|2,3,4|]:.5;\\n   [|2, 3, 4, 5|]\\n\\nExample 2: \\n   > [|1,2,3|]:.[|4,5,6|];\\n   [|1, 2, 3, [|4, 5, 6|]|]\\n\\nExample 3: \\n   > [||]:.1;\\n   [|1|]\\n\\nSee also: .:, @\\n\"\n#define HELP_APPROX_TEXT \"Name: ~\\n==> floating-point evaluation of a constant expression\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_approx(sollya_obj_t)\\n\\nUsage: \\n   ~ {expression} : function -> constant\\n   ~ {something} : any type -> any type\\n\\nParameters: \\n   {expression} stands for an expression that is a constant\\n   {something} stands for some language element that is not a constant expression\\n\\nDescription: \\n   * ~ {expression} evaluates the {expression} that is a constant\\n   term to a floating-point constant. The evaluation may involve a\\n   rounding. If {expression} is not a constant, the evaluated constant is\\n   a faithful rounding of {expression} with precision bits, unless the\\n   {expression} is exactly 0 as a result of cancellation. In the\\n   latter case, a floating-point approximation of some (unknown) accuracy\\n   is returned.\\n\\n   * ~ does not do anything on all language elements that are not a\\n   constant expression.  In other words, it behaves like the identity\\n   function on any type that is not a constant expression. It can hence\\n   be used in any place where one wants to be sure that expressions are\\n   simplified using floating-point computations to constants of a known\\n   precision, regardless of the type of actual language elements.\\n\\n   * ~ error evaluates to error and provokes a warning.\\n\\n   * ~ is a prefix operator not requiring parentheses. Its\\n   precedence is the same as for the unary + and -\\n   operators. It cannot be repeatedly used without brackets.\\n\\nExample 1: \\n   > print(exp(5));\\n   exp(5)\\n   > print(~ exp(5));\\n   148.41315910257660342111558004055227962348766759388\\n\\nExample 2: \\n   > autosimplify = off!;\\n\\nExample 3: \\n   > print(~sin(5 * pi));\\n   0\\n\\nExample 4: \\n   > print(~exp(x));\\n   exp(x)\\n   > print(~ \\\"Hello\\\");\\n   Hello\\n\\nExample 5: \\n   > print(~exp(x*5*Pi));\\n   exp((pi) * 5 * x)\\n   > print(exp(x* ~(5*Pi)));\\n   exp(x * 15.7079632679489661923132169163975144209858469968757)\\n\\nExample 6: \\n   > print(~exp(5)*x);\\n   148.41315910257660342111558004055227962348766759388 * x\\n   > print( (~exp(5))*x);\\n   148.41315910257660342111558004055227962348766759388 * x\\n   > print(~(exp(5)*x));\\n   exp(5) * x\\n\\nSee also: evaluate, prec, error\\n\"\n#define HELP_ASCIIPLOT_TEXT \"Name: asciiplot\\n==> plots a function in a range using ASCII characters\\n\\nLibrary name:\\n   void sollya_lib_asciiplot(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   asciiplot({function}, {range}) : (function, range) -> void\\n\\nParameters: \\n   {function} represents a function to be plotted\\n   {range} represents a range the function is to be plotted in \\n\\nDescription: \\n   * asciiplot plots the function {function} in range {range} using ASCII\\n   characters.  On systems that provide the necessary \\n   TIOCGWINSZ ioctl, Sollya determines the size of the\\n   terminal for the plot size if connected to a terminal. If it is not\\n   connected to a terminal or if the test is not possible, the plot is of\\n   fixed size 77x25 characters.  The function is\\n   evaluated on a number of points equal to the number of columns\\n   available. Its value is rounded to the next integer in the range of\\n   lines available. A letter \\\"x\\\" is written at this place. If zero is in\\n   the hull of the image domain of the function, an x-axis is\\n   displayed. If zero is in range, a y-axis is displayed.  If the\\n   function is constant or if the range is reduced to one point, the\\n   function is evaluated to a constant and the constant is displayed\\n   instead of a plot.\\n\\nExample 1: \\n   > asciiplot(exp(x),[1;2]);\\n                                                                             xx\\n                                                                           xx  \\n                                                                         xx    \\n                                                                       xx      \\n                                                                     xx        \\n                                                                  xxx          \\n                                                                xx             \\n                                                             xxx               \\n                                                           xx                  \\n                                                        xxx                    \\n                                                     xxx                       \\n                                                  xxx                          \\n                                               xxx                             \\n                                            xxx                                \\n                                        xxxx                                   \\n                                     xxx                                       \\n                                 xxxx                                          \\n                             xxxx                                              \\n                         xxxx                                                  \\n                     xxxx                                                      \\n                xxxxx                                                          \\n           xxxxx                                                               \\n      xxxxx                                                                    \\n   xxx                                                                         \\n\\nExample 2: \\n   > asciiplot(expm1(x),[-1;2]);\\n                            |                                                 x\\n                            |                                                x \\n                            |                                               x  \\n                            |                                              x   \\n                            |                                            xx    \\n                            |                                           x      \\n                            |                                          x       \\n                            |                                        xx        \\n                            |                                       x          \\n                            |                                     xx           \\n                            |                                   xx             \\n                            |                                 xx               \\n                            |                               xx                 \\n                            |                             xx                   \\n                            |                           xx                     \\n                            |                        xxx                       \\n                            |                     xxx                          \\n                            |                 xxxx                             \\n                            |             xxxx                                 \\n                            |         xxxx                                     \\n                            |   xxxxxx                                         \\n   ---------------------xxxxxxxx-----------------------------------------------\\n            xxxxxxxxxxxx    |                                                  \\n   xxxxxxxxx                |                                                  \\n\\nExample 3: \\n   > asciiplot(5,[-1;1]);\\n   5\\n\\nExample 4: \\n   > asciiplot(exp(x),[1;1]);\\n   2.7182818284590452353602874713526624977572470937\\n\\nSee also: plot, externalplot\\n\"\n#define HELP_ASINH_TEXT \"Name: asinh\\n==> the arg-hyperbolic sine function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_asinh(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_asinh(sollya_obj_t)\\n   #define SOLLYA_ASINH(x) sollya_lib_build_function_asinh(x)\\n\\nDescription: \\n   * asinh is the inverse of the function sinh: asinh(y) is the unique number \\n   x in [-Inf; +Inf] such that sinh(x)=y.\\n\\n   * It is defined for every real number y.\\n\\nSee also: sinh\\n\"\n#define HELP_ASIN_TEXT \"Name: asin\\n==> the arcsine function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_asin(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_asin(sollya_obj_t)\\n   #define SOLLYA_ASIN(x) sollya_lib_build_function_asin(x)\\n\\nDescription: \\n   * asin is the inverse of the function sin: asin(y) is the unique number \\n   x in [-Pi/2; Pi/2] such that sin(x)=y.\\n\\n   * It is defined only for y in [-1; 1].\\n\\nSee also: sin\\n\"\n#define HELP_ATANH_TEXT \"Name: atanh\\n==> the hyperbolic arctangent function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_atanh(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_atanh(sollya_obj_t)\\n   #define SOLLYA_ATANH(x) sollya_lib_build_function_atanh(x)\\n\\nDescription: \\n   * atanh is the inverse of the function tanh: atanh(y) is the unique number \\n   x in [-Inf; +Inf] such that tanh(x)=y.\\n\\n   * It is defined only for y in [-1; 1].\\n\\nSee also: tanh\\n\"\n#define HELP_ATAN_TEXT \"Name: atan\\n==> the arctangent function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_atan(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_atan(sollya_obj_t)\\n   #define SOLLYA_ATAN(x) sollya_lib_build_function_atan(x)\\n\\nDescription: \\n   * atan is the inverse of the function tan: atan(y) is the unique number \\n   x in [-Pi/2; Pi/2] such that tan(x)=y.\\n\\n   * It is defined for every real number y.\\n\\nSee also: tan\\n\"\n#define HELP_AUTODIFF_TEXT \"Name: autodiff\\n==> Computes the first n derivatives of a function at a point or over an interval.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_autodiff(sollya_obj_t, sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   autodiff({f}, {n}, {x0}) : (function, integer, constant) -> list\\n   autodiff({f}, {n}, {I}) : (function, integer, range) -> list\\n\\nParameters: \\n   {f} is the function to be differentiated.\\n   {n} is the order of differentiation.\\n   {x0} is the point at which the function is differentiated.\\n   {I} is the interval over which the function is differentiated.\\n\\nDescription: \\n   * autodiff computes the first n derivatives of f at point x0. The computation\\n   is performed numerically, without symbolically differentiating the expression\\n   of f. Yet, the computation is safe since small interval enclosures are\\n   produced. More precisely, autodiff returns a list [f_0, ..., f_n] such that,\\n   for each i, f_i is a small interval enclosing the exact value of f^(i)(x0).\\n\\n   * Since it does not perform any symbolic differentiation, autodiff is much \\n   more efficient than diff and should be preferred when only numerical values\\n   are necessary.\\n\\n   * If an interval I is provided instead of a point x0, the list returned by\\n   autodiff satisfies: for each i, f^(i)(I) is included in f_i. A particular use\\n   is when one wants to know the successive derivatives of a function at a non\\n   representable point such as pi. In this case, it suffices to call autodiff\\n   with the (almost) point interval I = [pi].\\n\\n   * When I is almost a point interval, the returned enclosures f_i are also\\n   almost point intervals. However, when the interval I begins to be fairly\\n   large, the enclosures can be deeply overestimated due to the dependency\\n   phenomenon present with interval arithmetic.\\n\\n   * As a particular case, f_0 is an enclosure of the image of f over I.\\n   However, since the algorithm is not specially designed for this purpose it is\\n   not very efficient for this particular task. In particular, it is not able to\\n   return a finite enclosure for functions with removable singularities\\n   (e.g. sin(x)/x at 0). The command evaluate is much more efficient for\\n   computing an accurate enclosure of the image of a function over an interval.\\n\\nExample 1: \\n   > L = autodiff(exp(cos(x))+sin(exp(x)), 5, 0);\\n   > midpointmode = on!;\\n   > for f_i in L do f_i;\\n   0.3559752813266941742012789792982961497379810154498~2/4~e1\\n   0.5403023058681397174009366074429766037323104206179~0/3~\\n   -0.3019450507398802024611853185539984893647499733880~6/2~e1\\n   -0.252441295442368951995750696489089699886768918239~6/4~e1\\n   0.31227898756481033145214529184139729746320579069~1/3~e1\\n   -0.16634307959006696033484053579339956883955954978~3/1~e2\\n\\nExample 2: \\n   > f = log(cos(x)+x);\\n   > L = autodiff(log(cos(x)+x), 5, [2,4]);\\n   > L[0];\\n   [0;1.27643852425465597132446653114905059102580436018893]\\n   > evaluate(f, [2,4]);\\n   [0.45986058925497069206106494332976097408234056912429;1.20787210589964169595901037621103012113048821362855]\\n   > fprime = diff(f);\\n   > L[1];\\n   [2.53086745013099407167484456656211083053393118778677e-2;1.7568024953079282513726390945118290941359128873365]\\n   > evaluate(fprime,[2,4]);\\n   [2.71048755415961996452136364304380881763456815673085e-2;1.1091953066394329083739722578862353140555843127995]\\n\\nExample 3: \\n   > L = autodiff(sin(x)/x, 0, [-1,1]);\\n   > L[0];\\n   [-infty;infty]\\n   > evaluate(sin(x)/x, [-1,1]);\\n   [0.5403023058681397174009366074429766037323104206179;1]\\n\\nSee also: diff, evaluate\\n\"\n#define HELP_AUTOSIMPLIFY_TEXT \"Name: autosimplify\\n==> activates, deactivates or inspects the value of the automatic simplification state variable\\n\\nLibrary names:\\n   void sollya_lib_set_autosimplify_and_print(sollya_obj_t)\\n   void sollya_lib_set_autosimplify(sollya_obj_t)\\n   sollya_obj_t sollya_lib_get_autosimplify()\\n\\nUsage: \\n   autosimplify = {activation value} : on|off -> void\\n   autosimplify = {activation value} ! : on|off -> void\\n   autosimplify : on|off\\n\\nParameters: \\n   {activation value} represents on or off, i.e. activation or deactivation\\n\\nDescription: \\n   * An assignment autosimplify = {activation value}, where {activation value}\\n   is one of on or off, activates respectively deactivates the\\n   automatic safe simplification of expressions of functions generated by\\n   the evaluation of commands or in argument of other commands.\\n    \\n   Sollya commands like remez, taylor or rationalapprox sometimes\\n   produce expressions that can be simplified. Constant subexpressions\\n   can be evaluated to dyadic floating-point numbers, monomials with\\n   coefficients 0 can be eliminated. Further, expressions\\n   indicated by the user perform better in many commands when simplified\\n   before being passed in argument to a command. When the automatic\\n   simplification of expressions is activated, Sollya automatically\\n   performs a safe (not value changing) simplification process on such\\n   expressions.\\n    \\n   The automatic generation of subexpressions can be annoying, in\\n   particular if it takes too much time for not enough benefit. Further the\\n   user might want to inspect the structure of the expression tree\\n   returned by a command. In this case, the automatic simplification\\n   should be deactivated.\\n    \\n   If the assignment autosimplify = {activation value} is followed by an\\n   exclamation mark, no message indicating the new state is\\n   displayed. Otherwise the user is informed of the new state of the\\n   global mode by an indication.\\n\\nExample 1: \\n   > autosimplify = on !;\\n   > print(x - x);\\n   0\\n   > autosimplify = off ;\\n   Automatic pure tree simplification has been deactivated.\\n   > print(x - x);\\n   x - x\\n\\nExample 2: \\n   > autosimplify = on !; \\n   > print(rationalapprox(sin(pi/5.9),7));\\n   33 / 65\\n   > autosimplify = off !; \\n   > print(rationalapprox(sin(pi/5.9),7));\\n   33 / 65\\n\\nSee also: print, ==, !=, prec, points, diam, display, verbosity, canonical, taylorrecursions, timing, fullparentheses, midpointmode, hopitalrecursions, remez, rationalapprox, taylor\\n\"\n#define HELP_BASHEVALUATE_TEXT \"Name: bashevaluate\\n==> executes a shell command and returns its output as a string\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_bashevaluate(sollya_obj_t, ...)\\n   sollya_obj_t sollya_lib_v_bashevaluate(sollya_obj_t, va_list)\\n\\nUsage: \\n   bashevaluate({command}) : string -> string\\n   bashevaluate({command},{input}) : (string, string) -> string\\n\\nParameters: \\n   {command} is a command to be interpreted by the shell.\\n   {input} is an optional character sequence to be fed to the command.\\n\\nDescription: \\n   * bashevaluate({command}) will execute the shell command {command} in a shell.\\n   All output on the command's standard output is collected and returned \\n   as a character sequence.\\n\\n   * If an additional argument {input} is given in a call to\\n   bashevaluate({command},{input}), this character sequence is written to the\\n   standard input of the command {command} that gets executed.\\n\\n   * All characters output by {command} are included in the character\\n   sequence to which bashevaluate evaluates but two exceptions. Every NULL\\n   character ('\\\\0') in the output is replaced with\\n   '?' as Sollya is unable to handle character sequences containing that\\n   character. Additionally, if the output ends in a newline character\\n   ('\\\\n'), this character is stripped off. Other\\n   newline characters which are not at the end of the output are left as\\n   such.\\n\\nExample 1: \\n   > bashevaluate(\\\"LANG=C date\\\");\\n   Thu Sep 20 12:00:09 CEST 2018\\n\\nExample 2: \\n   > [| bashevaluate(\\\"echo Hello\\\") |];\\n   [|\\\"Hello\\\"|]\\n\\nExample 3: \\n   > a = bashevaluate(\\\"sed -e 's/a/e/g;'\\\", \\\"Hallo\\\");\\n   > a;\\n   Hello\\n\\nSee also: bashexecute\\n\"\n#define HELP_BASHEXECUTE_TEXT \"Name: bashexecute\\n==> executes a shell command.\\n\\nLibrary name:\\n   void sollya_lib_bashexecute(sollya_obj_t)\\n\\nUsage: \\n   bashexecute({command}) : string -> void\\n\\nParameters: \\n   {command} is a command to be interpreted by the shell.\\n\\nDescription: \\n   * bashexecute({command}) lets the shell interpret {command}. It is useful to execute\\n   some external code within Sollya.\\n\\n   * bashexecute does not return anything. It just executes its argument. However, if\\n   {command} produces an output in a file, this result can be imported in Sollya\\n   with help of commands like execute, readfile and parse.\\n\\nExample 1: \\n   > bashexecute(\\\"LANG=C date\\\");\\n   Thu Sep 20 12:00:12 CEST 2018\\n\\nSee also: execute, readfile, parse, bashevaluate\\n\"\n#define HELP_BINARY_TEXT \"Name: binary\\n==> special value for global state display\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_binary()\\n   int sollya_lib_is_binary(sollya_obj_t)\\n\\nDescription: \\n   * binary is a special value used for the global state display.  If\\n   the global state display is equal to binary, all data will be\\n   output in binary notation.\\n    \\n   As any value it can be affected to a variable and stored in lists.\\n\\nSee also: decimal, dyadic, powers, hexadecimal, display\\n\"\n#define HELP_BIND_TEXT \"Name: bind\\n==> partially applies a procedure to an argument, returning a procedure with one argument less\\n\\nUsage: \\n   bind({proc}, {ident}, {obj}) : (procedure, identifier type, any type) -> procedure\\n\\nParameters: \\n   {proc} is a procedure to be partially applied to an argument\\n   {ident} is one of the formal arguments of {proc}\\n   {obj} is any Sollya object {ident} is to be bound to\\n\\nDescription: \\n   * bind allows a formal parameter {ident} of a procedure {proc} to \\n   be bound to an object {obj}, hence {proc} to be partially applied.\\n   The result of this curryfied application, returned by bind, is \\n   a procedure with one argument less. This way, bind permits \\n   specialization of a generic procedure, parameterized e.g. by a function\\n   or range.\\n\\n   * In the case when {proc} does not have a formal parameter named \\n   {ident}, bind prints a warning and returns the procedure \\n   {proc} unmodified. \\n\\n   * bind always returns a procedure, even if {proc} only has one \\n   argument, which gets bound to {ident}. In this case, bind\\n   returns a procedure which does not take any argument. Hence \\n   evaluation, which might provoke side effects, is only performed\\n   once the procedure gets used.\\n\\n   * bind does not work on procedures with an arbitrary number\\n   of arguments.\\n\\nExample 1: \\n   > procedure add(X,Y) { return X + Y; };\\n   > succ = bind(add,X,1);\\n   > succ(5);\\n   6\\n   > succ;\\n   proc(Y)\\n   {\\n   nop;\\n   return (proc(X, Y)\\n   {\\n   nop;\\n   return (X) + (Y);\\n   })(1, Y);\\n   }\\n\\nExample 2: \\n   > procedure add(X,Y) { return X + Y; };\\n   > succ = bind(add,X,1);\\n   > five = bind(succ,Y,4);\\n   > five();\\n   5\\n   > five;\\n   proc()\\n   {\\n   nop;\\n   return (proc(Y)\\n   {\\n   nop;\\n   return (proc(X, Y)\\n   {\\n   nop;\\n   return (X) + (Y);\\n   })(1, Y);\\n   })(4);\\n   }\\n\\nExample 3: \\n   > verbosity = 1!;\\n   > procedure add(X,Y) { return X + Y; };\\n   > foo = bind(add,R,1);\\n   Warning: the given procedure has no argument named \\\"R\\\". The procedure is returned unchanged.\\n   > foo;\\n   proc(X, Y)\\n   {\\n   nop;\\n   return (X) + (Y);\\n   }\\n\\nSee also: procedure, proc, function, @\\n\"\n#define HELP_BOOLEAN_TEXT \"Name: boolean\\n==> keyword representing a boolean type \\n\\nLibrary name:\\n   SOLLYA_EXTERNALPROC_TYPE_BOOLEAN\\n\\nUsage: \\n   boolean : type type\\n\\nDescription: \\n   * boolean represents the boolean type for declarations\\n   of external procedures by means of externalproc.\\n    \\n   Remark that in contrast to other indicators, type indicators like\\n   boolean cannot be handled outside the externalproc context.  In\\n   particular, they cannot be assigned to variables.\\n\\nSee also: externalproc, constant, function, integer, list of, range, string, object\\n\"\n#define HELP_CANONICAL_TEXT \"Name: canonical\\n==> brings all polynomial subexpressions of an expression to canonical form or activates, deactivates or checks canonical form printing\\n\\nLibrary names:\\n   void sollya_lib_set_canonical_and_print(sollya_obj_t)\\n   void sollya_lib_set_canonical(sollya_obj_t)\\n   sollya_obj_t sollya_lib_canonical(sollya_obj_t)\\n   sollya_obj_t sollya_lib_get_canonical()\\n\\nUsage: \\n   canonical({function}) : function -> function\\n   canonical = {activation value} : on|off -> void\\n   canonical = {activation value} ! : on|off -> void\\n\\nParameters: \\n   {function} represents the expression to be rewritten in canonical form\\n   {activation value} represents on or off, i.e. activation or deactivation\\n\\nDescription: \\n   * The command canonical rewrites the expression representing the function\\n   {function} in a way such that all polynomial subexpressions (or the\\n   whole expression itself, if it is a polynomial) are written in\\n   canonical form, i.e. as a sum of monomials in the canonical base. The\\n   canonical base is the base of the integer powers of the global free\\n   variable. The command canonical does not endanger the safety of\\n   computations even in Sollya's floating-point environment: the\\n   function returned is mathematically equal to the function {function}.\\n\\n   * An assignment canonical = {activation value}, where {activation value}\\n   is one of on or off, activates respectively deactivates the\\n   automatic printing of polynomial expressions in canonical form,\\n   i.e. as a sum of monomials in the canonical base. If automatic\\n   printing in canonical form is deactivated, automatic printing yields to\\n   displaying polynomial subexpressions in Horner form.\\n    \\n   If the assignment canonical = {activation value} is followed by an\\n   exclamation mark, no message indicating the new state is\\n   displayed. Otherwise the user is informed of the new state of the\\n   global mode by an indication.\\n\\nExample 1: \\n   > print(canonical(1 + x * (x + 3 * x^2)));\\n   1 + x^2 + 3 * x^3\\n   > print(canonical((x + 1)^7));\\n   1 + 7 * x + 21 * x^2 + 35 * x^3 + 35 * x^4 + 21 * x^5 + 7 * x^6 + x^7\\n\\nExample 2: \\n   > print(canonical(exp((x + 1)^5) - log(asin(((x + 2) + x)^4 * (x + 1)) + x)));\\n   exp(1 + 5 * x + 10 * x^2 + 10 * x^3 + 5 * x^4 + x^5) - log(asin(16 + 80 * x + 160 * x^2 + 160 * x^3 + 80 * x^4 + 16 * x^5) + x)\\n\\nExample 3: \\n   > canonical;\\n   off\\n   > (x + 2)^9;\\n   512 + x * (2304 + x * (4608 + x * (5376 + x * (4032 + x * (2016 + x * (672 + x * (144 + x * (18 + x))))))))\\n   > canonical = on;\\n   Canonical automatic printing output has been activated.\\n   > (x + 2)^9;\\n   512 + 2304 * x + 4608 * x^2 + 5376 * x^3 + 4032 * x^4 + 2016 * x^5 + 672 * x^6 + 144 * x^7 + 18 * x^8 + x^9\\n   > canonical;\\n   on\\n   > canonical = off!;\\n   > (x + 2)^9;\\n   512 + x * (2304 + x * (4608 + x * (5376 + x * (4032 + x * (2016 + x * (672 + x * (144 + x * (18 + x))))))))\\n\\nSee also: horner, print, autosimplify\\n\"\n#define HELP_CEIL_TEXT \"Name: ceil\\n==> the usual function ceil.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_ceil(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_ceil(sollya_obj_t)\\n   #define SOLLYA_CEIL(x) sollya_lib_build_function_ceil(x)\\n\\nDescription: \\n   * ceil is defined as usual: ceil(x) is the smallest integer y such that y >= x.\\n\\n   * It is defined for every real number x.\\n\\nSee also: floor, nearestint, round, RU\\n\"\n#define HELP_CHEBYSHEVFORM_TEXT \"Name: chebyshevform\\n==> computes a rigorous polynomial approximation\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_chebyshevform(sollya_obj_t, sollya_obj_t,\\n                                         sollya_obj_t);\\n\\nUsage: \\n   chebyshevform({f}, {n}, {I}) : (function, integer, range) -> list\\n\\nParameters: \\n   {f} is the function to be approximated.\\n   {n} is the degree of the polynomial that must approximate {f}.\\n   {I} is the interval over which the function is to be approximated. This interval cannot be a point interval, i.e. its endpoints have to be different.\\n\\nDescription: \\n   * WARNING: chebyshevform is a certified command, not difficult to use but not\\n   completely straightforward to use either. In order to be sure to use it\\n   correctly, the reader is invited to carefully read this documentation\\n   entirely.\\n\\n   * chebyshevform computes an approximation polynomial and an interval error\\n   bound for a given function f.\\n    \\n   More precisely, it returns a list L=[p, coeffErrors, Delta, chebCoeffs]\\n   where: \\n     - p is an approximation polynomial of degree n which is roughly speaking a\\n   numerical Chebyshev interpolation polynomial of f over I represented in\\n   monomial basis.\\n     - coeffsErrors is a list of n+1 intervals. Each interval coeffsErrors[i]\\n   contains an enclosure of all the errors accumulated when computing the i-th\\n   coefficient of p.\\n     - Delta is an interval that provides a bound for the approximation error\\n   between p and f. See details below.\\n     - chebCoeffs is a list of n+1 intervals. These are the interval\\n   coefficients obtained for the representation of interpolation polynomial\\n   considered in Chebyshev basis. See details below. \\n\\n   * The polynomial p and the bound Delta are obtained using Chebyshev Models\\n   principles.\\n\\n   * More formally, the mathematical property ensured by the algorithm may be\\n   stated as follows:\\n    \\n   Using monomial basis representation given by p: there exist (small) values\\n   eps[i] in coeffsErrors[i] such that:\\n   for all x in I, there exists delta in Delta such that\\n                   f(x) - p(x) = sum{i=0...n} eps[i]*x^i + delta.\\n    \\n   Using Chebyshev basis representation given by chebCoeffs: there exist values\\n   alpha[i] in chebCoeffs[i] such that:\\n   for all x in I, there exists delta in Delta such that\\n                   f(x) - sum{i=0...n} alpha[i]*T_i(y) = delta,\\n   where [a,b]=I, y=(2*x-b-a)/(b-a) and T_i(y) is the i-th Chebyshev polynomial\\n   over [-1,1].\\n\\n   * The algorithm does not guarantee that by increasing the degree of the\\n   approximation, the remainder bound will become smaller. Moreover, it may even\\n   become larger due to the dependency phenomenon present with interval\\n   arithmetic. In order to reduce this phenomenon, a possible solution is to\\n   split the definition domain I into several smaller intervals.\\n\\nExample 1: \\n   > TL=chebyshevform(exp(x), 10, [-1,1]);\\n   > p=TL[0];\\n   > Delta=TL[2];\\n   > p; Delta;\\n   1.00000000000000000000000000000000000000000000000017 + x * (1.0000000002738981919773953471453626764777115166417 + x * (0.50000000002276754368023326882542097365411870042312 + x * (0.166666661190450656168988993421371510533693281444003 + x * (4.1666666211440433973188799509591566161569698904644e-2 + x * (8.3333639749825520034240517636254576844423981913793e-3 + x * (1.38889143636148090706862105537216777944219976325265e-3 + x * (1.98342776066472142284727329700227389403558111865906e-4 + x * (2.47957727598277888282218067965324267955768146489014e-5 + x * (2.8254033440982477266316370012542019511804700836066e-6 + x * 2.8136983333718843135828091163040197490633045592362e-7)))))))))\\n   [-2.71406412827174505775085010461449926572460824320373e-11;2.71406412827174505775085010461449926572460824320373e-11]\\n\\nSee also: taylorform, diff, autodiff, taylor, remez\\n\"\n#define HELP_CHECKINFNORM_TEXT \"Name: checkinfnorm\\n==> checks whether the infinity norm of a function is bounded by a value\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_checkinfnorm(sollya_obj_t, sollya_obj_t,\\n                                        sollya_obj_t)\\n\\nUsage: \\n   checkinfnorm({function},{range},{constant}) : (function, range, constant) -> boolean\\n\\nParameters: \\n   {function} represents the function whose infinity norm is to be checked\\n   {range} represents the infinity norm is to be considered on\\n   {constant} represents the upper bound the infinity norm is to be checked to\\n\\nDescription: \\n   * The command checkinfnorm checks whether the infinity norm of the given\\n   function {function} in the range {range} can be proven (by Sollya) to\\n   be less than the given bound {bound}. This means, if checkinfnorm\\n   evaluates to true, the infinity norm has been proven (by Sollya's\\n   interval arithmetic) to be less than the bound. If checkinfnorm evaluates\\n   to false, there are two possibilities: either the bound is less than\\n   or equal to the infinity norm of the function or the bound is greater\\n   than the infinity norm but Sollya could not conclude using its\\n   internal interval arithmetic.\\n    \\n   checkinfnorm is sensitive to the global variable diam. The smaller diam,\\n   the more time Sollya will spend on the evaluation of checkinfnorm in\\n   order to prove the bound before returning false although the infinity\\n   norm is bounded by the bound. If diam is equal to 0, Sollya will\\n   eventually spend infinite time on instances where the given bound\\n   {bound} is less or equal to the infinity norm of the function\\n   {function} in range {range}. In contrast, with diam being zero,\\n   checkinfnorm evaluates to true iff the infinity norm of the function in\\n   the range is bounded by the given bound.\\n\\nExample 1: \\n   > checkinfnorm(sin(x),[0;1.75], 1);\\n   true\\n   > checkinfnorm(sin(x),[0;1.75], 1/2); checkinfnorm(sin(x),[0;20/39],1/2);\\n   false\\n   true\\n\\nExample 2: \\n   > p = remez(exp(x), 5, [-1;1]);\\n   > b = dirtyinfnorm(p - exp(x), [-1;1]);\\n   > checkinfnorm(p - exp(x), [-1;1], b);\\n   false\\n   > b1 = round(b, 15, RU);\\n   > checkinfnorm(p - exp(x), [-1;1], b1);\\n   true\\n   > b2 = round(b, 25, RU);\\n   > checkinfnorm(p - exp(x), [-1;1], b2);\\n   false\\n   > diam = 1b-20!;\\n   > checkinfnorm(p - exp(x), [-1;1], b2);\\n   true\\n\\nSee also: infnorm, dirtyinfnorm, supnorm, accurateinfnorm, remez, diam\\n\"\n#define HELP_COEFF_TEXT \"Name: coeff\\n==> gives the coefficient of degree n of a polynomial\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_coeff(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   coeff({f},{n}) : (function, integer) -> constant\\n\\nParameters: \\n   {f} is a function (usually a polynomial).\\n   {n} is an integer\\n\\nDescription: \\n   * If {f} is a polynomial, coeff({f}, {n}) returns the coefficient of\\n   degree {n} in {f}.\\n\\n   * If {f} is a function that is not a polynomial, coeff({f}, {n}) returns 0.\\n\\nExample 1: \\n   > coeff((1+x)^5,3);\\n   10\\n\\nExample 2: \\n   > coeff(sin(x),0);\\n   0\\n\\nSee also: degree, roundcoefficients, subpoly\\n\"\n#define HELP_COMPOSEPOLYNOMIALS_TEXT \"Name: composepolynomials\\n==> computes an approximation to the composition of two polynomials and bounds the error\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_composepolynomials(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   composepolynomials({p},{q}) : (function, function) -> structure\\n\\nParameters: \\n   {p} and {q} are polynomials\\n\\nDescription: \\n   * Given two polynomials p and q, composepolynomials({p}, {q}) computes an \\n   approximation r to the polynomial (p o q) and bounds the\\n   error polynomial r - (p o q) using interval arithmetic.\\n\\n   * composepolynomials always returns a structure containing two elements,\\n   poly and radii.  The element\\n   poly is contains the approximate composed polynomial\\n   r. The element radii contains a list of n + 1 \\n   intervals ai bounding the coefficients of the\\n   error polynomial, which is of the same degree n as is the\\n   composed polynomial (p o q).  This is, there exist\\n   alphai in ai such that \\n   sum_i alphai * x^i = r(x) - (p o q)(x).\\n\\n   * In the case when either of p or q is not a polynomial, composepolynomials\\n   behaves like substitute used in a literate structure. The list of intervals\\n   bounding the coefficients of the error polynomial is returned empty.\\n\\nExample 1: \\n   > composepolynomials(1 + 2 * x + 3 * x^2 + 4 * x^3, 5 + 6 * x + 7 * x^2);\\n   { .radii = [|[0;0], [0;0], [0;0], [0;0], [0;0], [0;0], [0;0]|], .poly = 586 + x * (1992 + x * (4592 + x * (6156 + x * (6111 + x * (3528 + x * 1372))))) }\\n\\nExample 2: \\n   > print(composepolynomials(1/5 * x + exp(17) + log(2) * x^2, x^4 + 1/3 * x^2));\\n   { .radii = [|[-3.5873240686715317015647477332221852960774705712039e-43;3.5873240686715317015647477332221852960774705712039e-43], [0;0], [-2.67276471009219564614053646715148187881519688010505e-51;2.67276471009219564614053646715148187881519688010505e-51], [0;0], [-1.06910588403687825845621458686059275152607875204202e-50;1.06910588403687825845621458686059275152607875204202e-50], [0;0], [-2.13821176807375651691242917372118550305215750408404e-50;2.13821176807375651691242917372118550305215750408404e-50], [0;0], [-1.06910588403687825845621458686059275152607875204202e-50;1.06910588403687825845621458686059275152607875204202e-50]|], .poly = 2.41549527535752982147754351803858238798675673527228e7 + x^2 * (6.6666666666666666666666666666666666666666666666666e-2 + x^2 * (0.2770163533955494788241369023842418408972777927067 + x^2 * (0.46209812037329687294482141430545104538366675624017 + x^2 * 0.69314718055994530941723212145817656807550013436026))) }\\n\\nExample 3: \\n   > composepolynomials(sin(x),x + x^2);\\n   { .radii = [| |], .poly = sin(x * (1 + x)) }\\n\\nSee also: substitute\\n\"\n#define HELP_CONCAT_TEXT \"Name: @\\n==> concatenates two lists or strings or applies a list as arguments to a procedure\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_concat(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   {L1}@{L2} : (list, list) -> list\\n   {string1}@{string2} : (string, string) -> string\\n   {proc}@{L1} : (procedure, list) -> any type\\n\\nParameters: \\n   {L1} and {L2} are two lists.\\n   {string1} and {string2} are two strings.\\n   {proc} is a procedure or an external procedure.\\n\\nDescription: \\n   * In its first usage form, @ concatenates two lists or strings.\\n\\n   * In its second usage form, @ applies the elements of a list as\\n   arguments to a procedure or an external procedure. In the case when {proc} is\\n   a procedure or external procedure with a fixed number of arguments, a check\\n   is done if the number of elements in the list corresponds to the number of\\n   formal parameters of {proc}. An empty list can therefore be applied only to a\\n   procedure that does not take any argument. In the case when {proc} accepts an\\n   arbitrary number of arguments, no such check is performed.\\n\\nExample 1: \\n   > [|1,...,3|]@[|7,8,9|];\\n   [|1, 2, 3, 7, 8, 9|]\\n\\nExample 2: \\n   > \\\"Hello \\\"@\\\"World!\\\";\\n   Hello World!\\n\\nExample 3: \\n   > procedure cool(a,b,c) { \\n     write(a,\\\", \\\", b,\\\" and \\\",c,\\\" are cool guys.\\\\n\\\");\\n     };\\n   > cool @ [| \\\"Christoph\\\", \\\"Mioara\\\", \\\"Sylvain\\\" |];\\n   Christoph, Mioara and Sylvain are cool guys.\\n\\nExample 4: \\n   > procedure sayhello() { \\n     \\\"Hello! how are you?\\\";\\n     };\\n   > sayhello();\\n   Hello! how are you?\\n   > sayhello @ [||];\\n   Hello! how are you?\\n\\nExample 5: \\n   > bashexecute(\\\"gcc -fPIC -Wall -c externalprocexample.c\\\");\\n   > bashexecute(\\\"gcc -fPIC -shared -o externalprocexample externalprocexample.o\\\");\\n   > externalproc(foo, \\\"./externalprocexample\\\", (integer, integer) -> integer);\\n   > foo;\\n   foo\\n   > foo @ [|5, 6|];\\n   11\\n\\nExample 6: \\n   > procedure add(L = ...) {\\n     var acc, i;\\n     acc = 0;\\n     for i in L do acc = i + acc;\\n     return acc;\\n     };\\n   > add(1,2);\\n   3\\n   > add(1,2,3);\\n   6\\n   > add @ [|1, 2|];\\n   3\\n   > add @ [|1, 2, 3|];\\n   6\\n   > add @ [||];\\n   0\\n\\nSee also: .:, :., procedure, externalproc, proc, bind, getbacktrace\\n\"\n#define HELP_CONSTANT_TEXT \"Name: constant\\n==> keyword representing a constant type \\n\\nLibrary name:\\n   SOLLYA_EXTERNALPROC_TYPE_CONSTANT\\n\\nUsage: \\n   constant : type type\\n\\nDescription: \\n   * constant represents the constant type for declarations\\n   of external procedures externalproc.\\n    \\n   Remark that in contrast to other indicators, type indicators like\\n   constant cannot be handled outside the externalproc context.  In\\n   particular, they cannot be assigned to variables.\\n\\nSee also: externalproc, boolean, function, integer, list of, range, string, object\\n\"\n#define HELP_COSH_TEXT \"Name: cosh\\n==> the hyperbolic cosine function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_cosh(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_cosh(sollya_obj_t)\\n   #define SOLLYA_COSH(x) sollya_lib_build_function_cosh(x)\\n\\nDescription: \\n   * cosh is the usual hyperbolic function: cosh(x) = (exp(x)+exp(-x))/2.\\n\\n   * It is defined for every real number x.\\n\\nSee also: acosh, sinh, tanh, exp\\n\"\n#define HELP_COS_TEXT \"Name: cos\\n==> the cosine function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_cos(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_cos(sollya_obj_t)\\n   #define SOLLYA_COS(x) sollya_lib_build_function_cos(x)\\n\\nDescription: \\n   * cos is the usual cosine function.\\n\\n   * It is defined for every real number x.\\n\\nSee also: acos, sin, tan\\n\"\n#define HELP_DD_TEXT \"Name: DD\\n==> short form for doubledouble\\n\\nSee also: doubledouble\\n\"\n#define HELP_DECIMAL_TEXT \"Name: decimal\\n==> special value for global state display\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_decimal()\\n   int sollya_lib_is_decimal(sollya_obj_t)\\n\\nDescription: \\n   * decimal is a special value used for the global state display.\\n   If the global state display is equal to decimal, all data will\\n   be output in decimal notation.\\n    \\n   As any value it can be affected to a variable and stored in lists.\\n\\nSee also: dyadic, powers, hexadecimal, binary, display\\n\"\n#define HELP_DEFAULT_TEXT \"Name: default\\n==> default value for some commands.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_default()\\n   int sollya_lib_is_default(sollya_obj_t)\\n\\nDescription: \\n   * default is a special value and is replaced by something depending on the \\n   context where it is used. It can often be used as a joker, when you want to \\n   specify one of the optional parameters of a command and not the others: set \\n   the value of uninteresting parameters to default.\\n\\n   * Global variables can be reset by affecting them the special value default.\\n\\nExample 1: \\n   > p = remez(exp(x),5,[0;1],default,1e-5);\\n   > q = remez(exp(x),5,[0;1],1,1e-5);\\n   > p==q;\\n   true\\n\\nExample 2: \\n   > prec;\\n   165\\n   > prec=200;\\n   The precision has been set to 200 bits.\\n\\n\"\n#define HELP_DEGREE_TEXT \"Name: degree\\n==> gives the degree of a polynomial.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_degree(sollya_obj_t)\\n\\nUsage: \\n   degree({f}) : function -> integer\\n\\nParameters: \\n   {f} is a function (usually a polynomial).\\n\\nDescription: \\n   * If {f} is a polynomial, degree({f}) returns the degree of {f}.\\n\\n   * Contrary to the usage, Sollya considers that the degree of the null polynomial\\n   is 0.\\n\\n   * If {f} is a function that is not a polynomial, degree({f}) returns -1.\\n\\nExample 1: \\n   > degree((1+x)*(2+5*x^2));\\n   3\\n   > degree(0);\\n   0\\n\\nExample 2: \\n   > degree(sin(x));\\n   -1\\n\\nSee also: coeff, subpoly, roundcoefficients\\n\"\n#define HELP_DENOMINATOR_TEXT \"Name: denominator\\n==> gives the denominator of an expression\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_denominator(sollya_obj_t)\\n\\nUsage: \\n   denominator({expr}) : function -> function\\n\\nParameters: \\n   {expr} represents an expression\\n\\nDescription: \\n   * If {expr} represents a fraction {expr1}/{expr2}, denominator({expr})\\n   returns the denominator of this fraction, i.e. {expr2}.\\n    \\n   If {expr} represents something else, denominator({expr}) \\n   returns 1.\\n    \\n   Note that for all expressions {expr}, numerator({expr}) / denominator({expr})\\n   is equal to {expr}.\\n\\nExample 1: \\n   > denominator(5/3);\\n   3\\n\\nExample 2: \\n   > denominator(exp(x));\\n   1\\n\\nExample 3: \\n   > a = 5/3;\\n   > b = numerator(a)/denominator(a);\\n   > print(a);\\n   5 / 3\\n   > print(b);\\n   5 / 3\\n\\nExample 4: \\n   > a = exp(x/3);\\n   > b = numerator(a)/denominator(a);\\n   > print(a);\\n   exp(x / 3)\\n   > print(b);\\n   exp(x / 3)\\n\\nSee also: numerator, rationalmode\\n\"\n#define HELP_DE_TEXT \"Name: DE\\n==> short form for doubleextended\\n\\nSee also: doubleextended\\n\"\n#define HELP_DIAM_TEXT \"Name: diam\\n==> parameter used in safe algorithms of Sollya and controlling the maximal length of the involved intervals.\\n\\nLibrary names:\\n   void sollya_lib_set_diam_and_print(sollya_obj_t)\\n   void sollya_lib_set_diam(sollya_obj_t)\\n   sollya_obj_t sollya_lib_get_diam()\\n\\nUsage: \\n   diam = {width} : constant -> void\\n   diam = {width} ! : constant -> void\\n   diam : constant\\n\\nParameters: \\n   {width} represents the maximal relative width of the intervals used\\n\\nDescription: \\n   * diam is a global variable. Its value represents the maximal width allowed\\n   for intervals involved in safe algorithms of Sollya (namely infnorm,\\n   checkinfnorm, accurateinfnorm, integral, findzeros, supnorm).\\n\\n   * More precisely, diam is relative to the width of the input interval of\\n   the command. For instance, suppose that diam=1e-5: if infnorm is called\\n   on interval [0;1], the maximal width of an interval will be 1e-5. But if it\\n   is called on interval [0;1e-3], the maximal width will be 1e-8.\\n\\nSee also: infnorm, checkinfnorm, accurateinfnorm, integral, findzeros, supnorm\\n\"\n#define HELP_DIEONERRORMODE_TEXT \"Name: dieonerrormode\\n==> global variable controlling if Sollya is exited on an error or not.\\n\\nLibrary names:\\n   void sollya_lib_set_dieonerrormode_and_print(sollya_obj_t)\\n   void sollya_lib_set_dieonerrormode(sollya_obj_t)\\n   sollya_obj_t sollya_lib_get_dieonerrormode()\\n\\nUsage: \\n   dieonerrormode = {activation value} : on|off -> void\\n   dieonerrormode = {activation value} ! : on|off -> void\\n   dieonerrormode : on|off\\n\\nParameters: \\n   {activation value} controls if Sollya is exited on an error or not.\\n\\nDescription: \\n   * dieonerrormode is a global variable. When its value is off, which is the default,\\n   Sollya will not exit on any syntax, typing, side-effect errors. These\\n   errors will be caught by the tool, even if a memory might be leaked at \\n   that point. On evaluation, the error special value will be produced.\\n\\n   * When the value of the dieonerrormode variable is on, Sollya will exit\\n   on any syntax, typing, side-effect errors. A warning message will\\n   be printed in these cases at appropriate verbosity levels. \\n\\nExample 1: \\n   > verbosity = 1!;\\n   > dieonerrormode = off;\\n   Die-on-error mode has been deactivated.\\n   > for i from true to false do i + \\\"Salut\\\";\\n   Warning: one of the arguments of the for loop does not evaluate to a constant.\\n   The for loop will not be executed.\\n   > exp(17);\\n   Warning: rounding has happened. The value displayed is a faithful rounding to 165 bits of the true result.\\n   2.41549527535752982147754351803858238798675673527224e7\\n\\nExample 2: \\n   > verbosity = 1!;\\n   > dieonerrormode = off!;\\n   > 5 */  4;\\n   Warning: syntax error, unexpected /.\\n   The last symbol read has been \\\"/\\\".\\n   Will skip input until next semicolon after the unexpected token. May leak memory.\\n     exp(17);\\n   Warning: rounding has happened. The value displayed is a faithful rounding to 165 bits of the true result.\\n   2.41549527535752982147754351803858238798675673527224e7\\n\\nExample 3: \\n   > verbosity = 1!;\\n   > dieonerrormode;\\n   off\\n   > dieonerrormode = on!;\\n   > dieonerrormode;\\n   on\\n   > for i from true to false do i + \\\"Salut\\\";\\n   Warning: one of the arguments of the for loop does not evaluate to a constant.\\n   The for loop will not be executed.\\n   Warning: some syntax, typing or side-effect error has occurred.\\n   As the die-on-error mode is activated, the tool will be exited.\\n\\nExample 4: \\n   > verbosity = 1!;\\n   > dieonerrormode = on!;\\n   > 5 */  4;\\n   Warning: syntax error, unexpected /.\\n   The last symbol read has been \\\"/\\\".\\n   Will skip input until next semicolon after the unexpected token. May leak memory.\\n   Warning: some syntax, typing or side-effect error has occurred.\\n   As the die-on-error mode is activated, the tool will be exited.\\n\\nExample 5: \\n   > verbosity = 0!;\\n   > dieonerrormode = on!;\\n   > 5 */  4;\\n\\nSee also: on, off, verbosity, error\\n\"\n#define HELP_DIFF_TEXT \"Name: diff\\n==> differentiation operator\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_diff(sollya_obj_t)\\n\\nUsage: \\n   diff({function}) : function -> function\\n\\nParameters: \\n   {function} represents a function\\n\\nDescription: \\n   * diff({function}) returns the symbolic derivative of the function\\n   {function} by the global free variable.\\n    \\n   If {function} represents a function symbol that is externally bound\\n   to some code by library, the derivative is performed as a symbolic\\n   annotation to the returned expression tree.\\n\\nExample 1: \\n   > diff(sin(x));\\n   cos(x)\\n\\nExample 2: \\n   > diff(x);\\n   1\\n\\nExample 3: \\n   > diff(x^x);\\n   x^x * (1 + log(x))\\n\\nSee also: library, autodiff, taylor, taylorform\\n\"\n#define HELP_DIRTYFINDZEROS_TEXT \"Name: dirtyfindzeros\\n==> gives a list of numerical values listing the zeros of a function on an interval.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_dirtyfindzeros(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   dirtyfindzeros({f},{I}) : (function, range) -> list\\n\\nParameters: \\n   {f} is a function.\\n   {I} is an interval.\\n\\nDescription: \\n   * dirtyfindzeros({f},{I}) returns a list containing some zeros of {f} in the\\n   interval {I}. The values in the list are numerical approximation of the exact\\n   zeros. The precision of these approximations is approximately the precision\\n   stored in prec. If {f} does not have two zeros very close to each other, it \\n   can be expected that all zeros are listed. However, some zeros may be\\n   forgotten. This command should be considered as a numerical algorithm and\\n   should not be used if safety is critical.\\n\\n   * More precisely, the algorithm relies on global variables prec and points and it performs the following steps: \\n   let n be the value of variable points and t be the value\\n   of variable prec.\\n    \\n      - Evaluate |f| at n evenly distributed points in the interval I.\\n        The working precision to be used is automatically chosen in order to ensure that the sign\\n        is correct.\\n      - Whenever f changes its sign for two consecutive points,\\n        find an approximation x of its zero with precision t using\\n        Newton's algorithm. The number of steps in Newton's iteration depends on t:\\n        the precision of the approximation is supposed to be doubled at each step.\\n      - Add this value to the list.\\n    \\n\\n   * The user should be aware that the list returned by dirtyfindzeros may\\n   contain a certain floating-point number twice. These repetitions\\n   reflect the existence of different zeros of the function the value of\\n   which rounds to the same floating-point number in the current working\\n   precision. In this case, increasing the working precision will end up\\n   making the two zeros distinguishable even in rounded floating-point\\n   arithmetic.\\n\\nExample 1: \\n   > dirtyfindzeros(sin(x),[-5;5]);\\n   [|-3.1415926535897932384626433832795028841971693993751, 0, 3.1415926535897932384626433832795028841971693993751|]\\n\\nExample 2: \\n   > L1=dirtyfindzeros(x^2*sin(1/x),[0;1]);\\n   > points=1000!;\\n   > L2=dirtyfindzeros(x^2*sin(1/x),[0;1]);\\n   > length(L1); length(L2);\\n   18\\n   25\\n\\nSee also: prec, points, findzeros, dirtyinfnorm, numberroots\\n\"\n#define HELP_DIRTYINFNORM_TEXT \"Name: dirtyinfnorm\\n==> computes a numerical approximation of the infinity norm of a function on an interval.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_dirtyinfnorm(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   dirtyinfnorm({f},{I}) : (function, range) -> constant\\n\\nParameters: \\n   {f} is a function.\\n   {I} is an interval.\\n\\nDescription: \\n   * dirtyinfnorm({f},{I}) computes an approximation of the infinity norm of the \\n   given function f on the interval I, e.g. max {|f(x)|, x in I}.\\n\\n   * The interval must be bound. If the interval contains one of -Inf or +Inf, the \\n   result of dirtyinfnorm is NaN.\\n\\n   * The result of this command depends on the global variables prec and points.\\n   Therefore, the returned result is generally a good approximation of the exact\\n   infinity norm, with precision prec. However, the result is generally \\n   underestimated and should not be used when safety is critical.\\n   Use infnorm instead.\\n\\n   * The following algorithm is used: let n be the value of variable points\\n   and t be the value of variable prec.\\n    \\n      - Evaluate |f| at n evenly distributed points in the\\n        interval I. The evaluation are faithful roundings of the exact\\n        results at precision t.\\n      - Whenever the derivative of f changes its sign for two consecutive \\n        points, find an approximation x of its zero with precision t.\\n        Then compute a faithful rounding of |f(x)| at precision t.\\n      - Return the maximum of all computed values.\\n    \\n\\nExample 1: \\n   > dirtyinfnorm(sin(x),[-10;10]);\\n   1\\n\\nExample 2: \\n   > prec=15!;\\n   > dirtyinfnorm(exp(cos(x))*sin(x),[0;5]);\\n   1.45856\\n   > prec=40!;\\n   > dirtyinfnorm(exp(cos(x))*sin(x),[0;5]);\\n   1.458528537136\\n   > prec=100!;\\n   > dirtyinfnorm(exp(cos(x))*sin(x),[0;5]);\\n   1.458528537136237644438147455025\\n   > prec=200!;\\n   > dirtyinfnorm(exp(cos(x))*sin(x),[0;5]);\\n   1.458528537136237644438147455023841718299214087993682374094153\\n\\nExample 3: \\n   > dirtyinfnorm(x^2, [log(0);log(1)]);\\n   NaN\\n\\nSee also: prec, points, infnorm, checkinfnorm, supnorm\\n\"\n#define HELP_DIRTYINTEGRAL_TEXT \"Name: dirtyintegral\\n==> computes a numerical approximation of the integral of a function on an interval.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_dirtyintegral(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   dirtyintegral({f},{I}) : (function, range) -> constant\\n\\nParameters: \\n   {f} is a function.\\n   {I} is an interval.\\n\\nDescription: \\n   * dirtyintegral({f},{I}) computes an approximation of the integral of {f} on {I}.\\n\\n   * The interval must be bound. If the interval contains one of -Inf or +Inf, the \\n   result of dirtyintegral is NaN, even if the integral has a meaning.\\n\\n   * The result of this command depends on the global variables prec and points.\\n   The method used is the trapezium rule applied at n evenly distributed\\n   points in the interval, where n is the value of global variable points.\\n\\n   * This command computes a numerical approximation of the exact value of the \\n   integral. It should not be used if safety is critical. In this case, use\\n   command integral instead.\\n\\n   * Warning: this command is currently known to be unsatisfactory. If you really\\n   need to compute integrals, think of using another tool or report a feature\\n   request to sylvain.chevillard@ens-lyon.org.\\n\\nExample 1: \\n   > sin(10);\\n   -0.54402111088936981340474766185137728168364301291622\\n   > dirtyintegral(cos(x),[0;10]);\\n   -0.54400304905152629822448058882475382036536298356282\\n   > points=2000!;\\n   > dirtyintegral(cos(x),[0;10]);\\n   -0.54401997751158321972222697312583199035995837926893\\n\\nSee also: prec, points, integral\\n\"\n#define HELP_DIRTYSIMPLIFY_TEXT \"Name: dirtysimplify\\n==> simplifies an expression representing a function\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_dirtysimplify(sollya_obj_t)\\n\\nUsage: \\n   dirtysimplify({function}) : function -> function\\n\\nParameters: \\n   {function} represents the expression to be simplified\\n\\nDescription: \\n   * The command dirtysimplify simplifies constant subexpressions of the\\n   expression given in argument representing the function\\n   {function}. Those constant subexpressions are evaluated using\\n   floating-point arithmetic with the global precision prec.\\n\\nExample 1: \\n   > print(dirtysimplify(sin(pi * x)));\\n   sin(3.1415926535897932384626433832795028841971693993751 * x)\\n   > print(dirtysimplify(erf(exp(3) + x * log(4))));\\n   erf(20.0855369231876677409285296545817178969879078385544 + x * 1.3862943611198906188344642429163531361510002687205)\\n\\nExample 2: \\n   > prec = 20!;\\n   > t = erf(0.5);\\n   > s = dirtysimplify(erf(0.5));\\n   > prec = 200!;\\n   > t;\\n   0.520499877813046537682746653891964528736451575757963700058806\\n   > s;\\n   0.52050018310546875\\n\\nSee also: simplify, autosimplify, prec, evaluate, horner, rationalmode\\n\"\n#define HELP_DISPLAY_TEXT \"Name: display\\n==> sets or inspects the global variable specifying number notation\\n\\nLibrary names:\\n   void sollya_lib_set_display_and_print(sollya_obj_t)\\n   void sollya_lib_set_display(sollya_obj_t)\\n   sollya_obj_t sollya_lib_get_display()\\n\\nUsage: \\n   display = {notation value} : decimal|binary|dyadic|powers|hexadecimal -> void\\n   display = {notation value} ! : decimal|binary|dyadic|powers|hexadecimal -> void\\n   display : decimal|binary|dyadic|powers|hexadecimal\\n\\nParameters: \\n   {notation value} represents a variable of type decimal|binary|dyadic|powers|hexadecimal\\n\\nDescription: \\n   * An assignment display = {notation value}, where {notation value} is\\n   one of decimal, dyadic, powers, binary or hexadecimal, activates\\n   the corresponding notation for output of values in print, write or\\n   at the Sollya prompt.\\n    \\n   If the global notation variable display is decimal, all numbers will\\n   be output in scientific decimal notation.  If the global notation\\n   variable display is dyadic, all numbers will be output as dyadic\\n   numbers with Gappa notation.  If the global notation variable display\\n   is powers, all numbers will be output as dyadic numbers with a\\n   notation compatible with Maple and PARI/GP.  If the global notation\\n   variable display is binary, all numbers will be output in binary\\n   notation.  If the global notation variable display is hexadecimal,\\n   all numbers will be output in C99/ IEEE754-2008 notation.  All output\\n   notations can be parsed back by Sollya, inducing no error if the input\\n   and output precisions are the same (see prec).\\n    \\n   If the assignment display = {notation value} is followed by an\\n   exclamation mark, no message indicating the new state is\\n   displayed. Otherwise the user is informed of the new state of the\\n   global mode by an indication.\\n\\nExample 1: \\n   > display = decimal;\\n   Display mode is decimal numbers.\\n   > a = evaluate(sin(pi * x), 0.25);\\n   > a;\\n   0.70710678118654752440084436210484903928483593768847\\n   > display = binary;\\n   Display mode is binary numbers.\\n   > a;\\n   1.01101010000010011110011001100111111100111011110011001001000010001011001011111011000100110110011011101010100101010111110100111110001110101101111011000001011101010001_2 * 2^(-1)\\n   > display = hexadecimal;\\n   Display mode is hexadecimal numbers.\\n   > a;\\n   0x1.6a09e667f3bcc908b2fb1366ea957d3e3adec1751p-1\\n   > display = dyadic;\\n   Display mode is dyadic numbers.\\n   > a;\\n   33070006991101558613323983488220944360067107133265b-165\\n   > display = powers;\\n   Display mode is dyadic numbers in integer-power-of-2 notation.\\n   > a;\\n   33070006991101558613323983488220944360067107133265 * 2^(-165)\\n\\nSee also: print, write, decimal, dyadic, powers, binary, hexadecimal, prec\\n\"\n#define HELP_DIVEUCL_TEXT \"Name: div\\n==> Computes the euclidian division of polynomials or numbers and returns the quotient\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_euclidian_div(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   div({a}, {b}) : (function, function) -> function\\n\\nParameters: \\n   {a} is a constant or a polynomial.\\n   {b} is a constant or a polynomial.\\n\\nDescription: \\n   * When both {a} and {b} are constants, div({a},{b}) computes\\n   floor({a} / {b}). In other words, it returns the quotient of the Euclidian\\n   division of {a} by {b}.\\n\\n   * When both {a} and {b} are polynomials with at least one being non-constant,\\n   div({a},{b}) computes a polynomial {q} such that the polynomial {r} equal to\\n   {a} - {q} * {b} is of degree strictly smaller than the degree of {b} (see\\n   exception below). In order to recover {r}, use the mod command.\\n\\n   * div works on polynomials whose coefficients are constant\\n   expressions that cannot be simplified (by the tool) to rational\\n   numbers. In most cases, the tool is able to perform the Euclidian\\n   polynomial division for such polynomials and stop the Euclidian\\n   division algorithm only when {r} is of degree strictly smaller than\\n   the degree of {b}. In certain cases, when the polynomials involve\\n   coefficients given as constant expressions that are mathematically\\n   zero but for which the tool is unable to detect this fact, the tool\\n   may be unable to correctly determine that {r} is actually of degree\\n   stricly smaller than the degree of {b}. The issue arises in particular\\n   for polynomials whose leading coefficient is a constant expression\\n   which is zero without the tool being able to detect this. In these\\n   cases, div, together with mod, just guarantee that {q} and\\n   {r}, as returned by the two commands, satisfy that {r} added to the\\n   product of {q} and {b} yields {a}, and that {r} is of the smallest\\n   degree the tool can admit. However, there might exist another pair of\\n   a quotient and remainder polynomial for which the remainder polynomial\\n   is of a degree less than the one of {r}.\\n\\n   * When at least one of {a} or {b} is a function that is no polynomial,\\n   div({a},{b}) returns 0.\\n\\nExample 1: \\n   > div(1001, 231);\\n   4\\n   > div(13, 17);\\n   0\\n   > div(-14, 15);\\n   -1\\n   > div(-213, -5);\\n   42\\n   > div(23/13, 11/17);\\n   2\\n   > div(exp(13),-sin(17));\\n   460177\\n\\nExample 2: \\n   > div(24 + 68 * x + 74 * x^2 + 39 * x^3 + 10 * x^4 + x^5, 4 + 4 * x + x^2);\\n   6 + x * (11 + x * (6 + x))\\n   > div(24 + 68 * x + 74 * x^2 + 39 * x^3 + 10 * x^4 + x^5, 2 * x^3);\\n   19.5 + x * (5 + x * 0.5)\\n   > div(x^2, x^3);\\n   0\\n\\nExample 3: \\n   > div(exp(x), x^2);\\n   0\\n\\nSee also: gcd, mod, numberroots\\n\"\n#define HELP_DIVIDE_TEXT \"Name: /\\n==> division function\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_div(sollya_obj_t, sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_div(sollya_obj_t, sollya_obj_t)\\n   #define SOLLYA_DIV(x,y) sollya_lib_build_function_div((x), (y))\\n\\nUsage: \\n   {function1} / {function2} : (function, function) -> function\\n   {interval1} / {interval2} : (range, range) -> range\\n   {interval1} / {constant} : (range, constant) -> range\\n   {interval1} / {constant} : (constant, range) -> range\\n\\nParameters: \\n   {function1} and {function2} represent functions\\n   {interval1} and {interval2} represent intervals (ranges)\\n   {constant} represents a constant or constant expression\\n\\nDescription: \\n   * / represents the division (function) on reals. \\n   The expression {function1} / {function2} stands for\\n   the function composed of the division function and the two\\n   functions {function1} and {function2}, where {function1} is\\n   the numerator and {function2} the denominator.\\n\\n   * / can be used for interval arithmetic on intervals\\n   (ranges). / will evaluate to an interval that safely\\n   encompasses all images of the division function with arguments\\n   varying in the given intervals. If the intervals given contain points\\n   where the division function is not defined, infinities and NaNs will be\\n   produced in the output interval.  Any combination of intervals with\\n   intervals or constants (resp. constant expressions) is\\n   supported. However, it is not possible to represent families of\\n   functions using an interval as one argument and a function (varying in\\n   the free variable) as the other one.\\n\\nExample 1: \\n   > 5 / 2;\\n   2.5\\n\\nExample 2: \\n   > x / 2;\\n   x * 0.5\\n\\nExample 3: \\n   > x / x;\\n   1\\n\\nExample 4: \\n   > 3 / 0;\\n   NaN\\n\\nExample 5: \\n   > diff(sin(x) / exp(x));\\n   (exp(x) * cos(x) - sin(x) * exp(x)) / exp(x)^2\\n\\nExample 6: \\n   > [1;2] / [3;4];\\n   [0.25;0.66666666666666666666666666666666666666666666666668]\\n   > [1;2] / 17;\\n   [5.8823529411764705882352941176470588235294117647059e-2;0.11764705882352941176470588235294117647058823529412]\\n   > -13 / [4;17];\\n   [-3.25;-0.76470588235294117647058823529411764705882352941175]\\n\\nSee also: +, -, *, ^\\n\"\n#define HELP_DOUBLEDOUBLE_TEXT \"Names: doubledouble, DD\\n==> represents a number as the sum of two IEEE doubles.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_double_double(sollya_obj_t)\\n   sollya_obj_t sollya_lib_double_double_obj()\\n   int sollya_lib_is_double_double_obj(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_double_double(sollya_obj_t)\\n   #define SOLLYA_DD(x) sollya_lib_build_function_double_double(x)\\n\\nDescription: \\n   * doubledouble is both a function and a constant.\\n\\n   * As a function, it rounds its argument to the nearest number that can be written\\n   as the sum of two double precision numbers.\\n\\n   * The algorithm used to compute doubledouble(x) is the following: let xh = double(x)\\n   and let xl = double(x - xh). Return the number xh + xl. Note that if the current \\n   precision is not sufficient to exactly represent xh + xl, a rounding will occur\\n   and the result of doubledouble(x) will be useless.\\n\\n   * As a constant, it symbolizes the double-double precision format. It is used in \\n   contexts when a precision format is necessary, e.g. in the commands \\n   round, roundcoefficients and implementpoly.\\n   See the corresponding help pages for examples.\\n\\nExample 1: \\n   > verbosity=1!;\\n   > a = 1+ 2^(-100);\\n   > DD(a);\\n   1.0000000000000000000000000000007888609052210118054\\n   > prec=50!;\\n   > DD(a);\\n   1.000000000000000000000000000000788860905\\n\\nSee also: halfprecision, single, double, doubleextended, quad, tripledouble, roundcoefficients, implementpoly, round\\n\"\n#define HELP_DOUBLEEXTENDED_TEXT \"Names: doubleextended, DE\\n==> computes the nearest number with 64 bits of mantissa.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_doubleextended(sollya_obj_t)\\n   sollya_obj_t sollya_lib_doubleextended_obj()\\n   int sollya_lib_is_doubleextended_obj(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_doubleextended(sollya_obj_t)\\n   #define SOLLYA_DE(x) sollya_lib_build_function_doubleextended(x)\\n\\nDescription: \\n   * doubleextended is a function that computes the nearest floating-point number with\\n   64 bits of mantissa to a given number. Since it is a function, it can be\\n   composed with other Sollya functions such as exp, sin, etc.\\n\\n   * doubleextended now does handle subnormal numbers for a presumed exponent width\\n   of the double-extended format of 15 bits. This means, with respect to \\n   rounding, doubleextended behaves as a IEEE 754-2008 binary79 with a 64 bit \\n   significand (with a hidden bit normal range), one sign bit and a \\n   15 bit exponent field would behave. This behavior may be different\\n   from the one observed on Intel-based IA32/Intel64 processors (or compatible\\n   versions from other vendors). However it is the one seen on HP/Intel \\n   Itanium when the precision specifier is double-extended and pseudo-denormals\\n   are activated.\\n\\n   * Since it is a function and not a command, its behavior is a bit different from \\n   the behavior of round(x,64,RN) even if the result is exactly the same.\\n   round(x,64,RN) is immediately evaluated whereas doubleextended(x) can be composed \\n   with other functions (and thus be plotted and so on).\\n\\nExample 1: \\n   > display=binary!;\\n   > DE(0.1);\\n   1.100110011001100110011001100110011001100110011001100110011001101_2 * 2^(-4)\\n   > round(0.1,64,RN);\\n   1.100110011001100110011001100110011001100110011001100110011001101_2 * 2^(-4)\\n\\nExample 2: \\n   > D(2^(-2000));\\n   0\\n   > DE(2^(-20000));\\n   0\\n\\nExample 3: \\n   > verbosity=1!;\\n   > f = sin(DE(x));\\n   > f(pi);\\n   Warning: rounding has happened. The value displayed is a faithful rounding to 165 bits of the true result.\\n   -5.016557612668332023557327080330757013831561670255e-20\\n   > g = sin(round(x,64,RN));\\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\\n   or its evaluation has failed because of some error on a side-effect.\\n\\nSee also: roundcoefficients, halfprecision, single, double, doubledouble, quad, tripledouble, round\\n\"\n#define HELP_DOUBLE_TEXT \"Names: double, D\\n==> rounding to the nearest IEEE 754 double (binary64).\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_double(sollya_obj_t)\\n   sollya_obj_t sollya_lib_double_obj()\\n   int sollya_lib_is_double_obj(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_double(sollya_obj_t)\\n   #define SOLLYA_D(x) sollya_lib_build_function_double(x)\\n\\nDescription: \\n   * double is both a function and a constant.\\n\\n   * As a function, it rounds its argument to the nearest IEEE 754 double precision (i.e. IEEE754-2008 binary64) number.\\n   Subnormal numbers are supported as well as standard numbers: it is the real\\n   rounding described in the standard.\\n\\n   * As a constant, it symbolizes the double precision format. It is used in \\n   contexts when a precision format is necessary, e.g. in the commands \\n   round, roundcoefficients and implementpoly.\\n   See the corresponding help pages for examples.\\n\\nExample 1: \\n   > display=binary!;\\n   > D(0.1);\\n   1.100110011001100110011001100110011001100110011001101_2 * 2^(-4)\\n   > D(4.17);\\n   1.000010101110000101000111101011100001010001111010111_2 * 2^(2)\\n   > D(1.011_2 * 2^(-1073));\\n   1.1_2 * 2^(-1073)\\n\\nSee also: halfprecision, single, doubleextended, doubledouble, quad, tripledouble, roundcoefficients, implementpoly, round, printdouble\\n\"\n#define HELP_D_TEXT \"Name: D\\n==> short form for double\\n\\nSee also: double\\n\"\n#define HELP_DYADIC_TEXT \"Name: dyadic\\n==> special value for global state display\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_dyadic()\\n   int sollya_lib_is_dyadic(sollya_obj_t)\\n\\nDescription: \\n   * dyadic is a special value used for the global state display.\\n   If the global state display is equal to dyadic, all data will\\n   be output in dyadic notation with numbers displayed in Gappa format.\\n    \\n   As any value it can be affected to a variable and stored in lists.\\n\\nSee also: decimal, powers, hexadecimal, binary, display\\n\"\n#define HELP_EQUAL_TEXT \"Name: ==\\n==> equality test operator\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_cmp_equal(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   {expr1} == {expr2} : (any type, any type) -> boolean\\n\\nParameters: \\n   {expr1} and {expr2} represent expressions\\n\\nDescription: \\n   * The test {expr1} == {expr2} returns true when {expr1} and {expr2} are\\n   syntactically equal and different from error, @NaN@ and [@NaN@, @NaN].\\n   Conversely if {expr1} and {expr2} are objects that are mathematically\\n   different and Sollya manages to figure it out, the test returns false.\\n   In between these two cases, there is the grey zone of expressions that are\\n   not syntactically equal but are mathematically equal. In such a case,\\n   Sollya normally tries to determine if the expressions are mathematically\\n   equal and if it manages to prove it, it returns true, without a warning. In\\n   the case when {expr1} and {expr2} are two constant expressions, Sollya will\\n   in particular try to evaluate their difference: in the case when the\\n   difference is 0 or is so small that Sollya does not manage to obtain a\\n   faithful rounding of the real value, it will return true (with a warning if\\n   it has not been possible to actually prove that the real value is 0). In any\\n   other case, when both expressions are not syntactically equal and Sollya\\n   has not been able to prove that they are mathematically equal, it\\n   returns false.\\n\\n   * The level of simplifications performed by Sollya to determine if\\n   expressions are mathematically equal depends on the value of autosimplify.\\n   If it is off, no formal simplification is performed, hence expression trees\\n   as simple as x+1 and 1+x will be considered not equal. Conversely, if\\n   autosimplify is set to on, polynomial subexpressions that are\\n   mathematically equal will in general be recognized as being equal.\\n\\n   * The user should always keep in mind that a litteral constant written in\\n   decimal arithmetic (such as 0.1 for instance) is not considered as an exact\\n   constant by Sollya (unless it is exactly representable in binary without\\n   requiring too much precision) and is first correctly rounded at precision\\n   prec, prior to any other operation. Of course, this leads to a rounding\\n   warning, but it is important to remember that this is done before the\\n   expression trees are compared, possibly leading to two expressions comparing\\n   equal, while they are obviously mathematically different, just because they\\n   contain different constants that have been rounded to the same value at\\n   precision prec. As a general rule, to avoid this behavior, the user should\\n   represent constants in an exact format such as hexadecimal or represent\\n   decimal constants as integer fractions (e.g., 0.1 represented by the constant\\n   expression 1/10).\\n\\n   * Notice that @NaN@, [@NaN, @NaN@] and error share the property that they\\n   compare not equal to anything, including themselves. This means if a variable\\n   {a} contains @NaN@, [@NaN, @NaN@] or error and whatever the content of\\n   variable {b} is, the test {a} == {b} returns false. The standard way of\\n   testing if {a} contains @NaN@, [@NaN@, @NaN@] or error is indeed to check if\\n   {a} == {a} returns false. error can be distinguished from @NaN@ and\\n   [@NaN@, @NaN@] using the != operator. In order to distinguish @NaN@ from\\n   [@NaN@, @NaN@], a match ... with ... construct must be used.\\n\\nExample 1: \\n   > \\\"Hello\\\" == \\\"Hello\\\";\\n   true\\n   > \\\"Hello\\\" == \\\"Salut\\\";\\n   false\\n   > \\\"Hello\\\" == 5;\\n   false\\n   > 5 + x == 5 + x;\\n   true\\n\\nExample 2: \\n   > verbosity = 1!;\\n   > asin(1) * 2 == pi;\\n   true\\n   > cos(3)^2 == 1 - sin(3)^2;\\n   Warning: the tool is unable to decide an equality test by evaluation even though faithful evaluation of the terms has been possible. The terms will be considered to be equal.\\n   true\\n   > exp(5) == log(4);\\n   false\\n\\nExample 3: \\n   > autosimplify=off;\\n   Automatic pure tree simplification has been deactivated.\\n   > exp(1+x) == exp(x+1);\\n   false\\n   > autosimplify=on;\\n   Automatic pure tree simplification has been activated.\\n   > exp(1+x) == exp(x+1);\\n   false\\n   > (1/3+x)^2 == x^2 + 1/9 + (5-3)*x/3;\\n   true\\n   > log(x)/log(10) == log10(x);\\n   false\\n\\nExample 4: \\n   > prec = 12;\\n   The precision has been set to 12 bits.\\n   > verbosity = 1!;\\n   > 16384.1 == 16385.1;\\n   Warning: Rounding occurred when converting the constant \\\"16384.1\\\" to floating-point with 12 bits.\\n   If safe computation is needed, try to increase the precision.\\n   Warning: Rounding occurred when converting the constant \\\"16385.1\\\" to floating-point with 12 bits.\\n   If safe computation is needed, try to increase the precision.\\n   true\\n   > 16384 == 16384.25;\\n   false\\n   > 0.1 == 1/10;\\n   Warning: Rounding occurred when converting the constant \\\"0.1\\\" to floating-point with 12 bits.\\n   If safe computation is needed, try to increase the precision.\\n   false\\n   > 0.1 == round(1/10, prec, RN);\\n   Warning: Rounding occurred when converting the constant \\\"0.1\\\" to floating-point with 12 bits.\\n   If safe computation is needed, try to increase the precision.\\n   true\\n\\nExample 5: \\n   > error == error;\\n   false\\n   > error != error;\\n   false\\n   > @NaN@ == @NaN@;\\n   false\\n   > @NaN@ != @NaN@;\\n   true\\n   > [@NaN@,@NaN@] == [@NaN@,@NaN@];\\n   false\\n   > [@NaN@,@NaN@] != [@NaN@,@NaN@];\\n   true\\n   > error == @NaN@;\\n   false\\n   > error != @NaN@;\\n   false\\n   > a = error;\\n   > match a with\\n      @NaN@ : (\\\"a contains @NaN@\\\")\\n      [@NaN@, @NaN@] : (\\\"a contains [@NaN@, @NaN@]\\\")\\n      default:(\\\"a contains something else\\\");\\n   error\\n   > a = @NaN@;\\n   > match a with\\n      @NaN@ : (\\\"a contains @NaN@\\\")\\n      [@NaN@, @NaN@] : (\\\"a contains [@NaN@, @NaN@]\\\")\\n      default:(\\\"a contains something else\\\");\\n   a contains @NaN@\\n   > a = [@NaN@, @NaN@];\\n   > match a with\\n      @NaN@ : (\\\"a contains @NaN@\\\")\\n      [@NaN@, @NaN@] : (\\\"a contains [@NaN@, @NaN@]\\\")\\n      default:(\\\"a contains something else\\\");\\n   a contains [@NaN@, @NaN@]\\n\\nSee also: !=, >, >=, <=, <, in, !, &&, ||, error, prec, autosimplify\\n\"\n#define HELP_ERFC_TEXT \"Name: erfc\\n==> the complementary error function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_erfc(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_erfc(sollya_obj_t)\\n   #define SOLLYA_ERFC(x) sollya_lib_build_function_erfc(x)\\n\\nDescription: \\n   * erfc is the complementary error function defined by erfc(x) = 1 - erf(x).\\n\\n   * It is defined for every real number x.\\n\\nSee also: erf\\n\"\n#define HELP_ERF_TEXT \"Name: erf\\n==> the error function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_erf(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_erf(sollya_obj_t)\\n   #define SOLLYA_ERF(x) sollya_lib_build_function_erf(x)\\n\\nDescription: \\n   * erf is the error function defined by:\\n   erf(x) = (2/sqrt(Pi)) * integral(exp(-t^2), [0;x])\\n\\n   * It is defined for every real number x.\\n\\nSee also: erfc, exp\\n\"\n#define HELP_ERROR_TEXT \"Name: error\\n==> expression representing an input that is wrongly typed or that cannot be executed\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_error()\\n   int sollya_lib_obj_is_error(sollya_obj_t)\\n\\nUsage: \\n   error : error\\n\\nDescription: \\n   * The variable error represents an input during the evaluation of\\n   which a type or execution error has been detected or is to be\\n   detected. Inputs that are syntactically correct but wrongly typed\\n   evaluate to error at some stage.  Inputs that are correctly typed\\n   but containing commands that depend on side-effects that cannot be\\n   performed or inputs that are wrongly typed at meta-level (cf. parse),\\n   evaluate to error.\\n    \\n   Remark that in contrast to all other elements of the Sollya language,\\n   error compares neither equal nor unequal to itself. This provides a\\n   means of detecting syntax errors inside the Sollya language itself\\n   without introducing issues of two different wrongly typed inputs being\\n   equal.\\n\\nExample 1: \\n   > print(5 + \\\"foo\\\");\\n   error\\n\\nExample 2: \\n   > error;\\n   error\\n\\nExample 3: \\n   > error == error;\\n   false\\n   > error != error;\\n   false\\n\\nExample 4: \\n   > correct = 5 + 6;\\n   > incorrect = 5 + \\\"foo\\\";\\n   > correct == correct;\\n   true\\n   > incorrect == incorrect;\\n   false\\n   > errorhappened = !(incorrect == incorrect);\\n   > errorhappened;\\n   true\\n\\nSee also: void, parse, ==, !=\\n\"\n#define HELP_EVALUATE_TEXT \"Name: evaluate\\n==> evaluates a function at a constant point or in a range\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_evaluate(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   evaluate({function}, {constant}) : (function, constant) -> constant | range\\n   evaluate({function}, {range}) : (function, range) -> range\\n   evaluate({function}, {function2}) : (function, function) -> function\\n\\nParameters: \\n   {function} represents a function\\n   {constant} represents a constant point\\n   {range} represents a range\\n   {function2} represents a function that is not constant\\n\\nDescription: \\n   * If its second argument is a constant {constant}, evaluate evaluates\\n   its first argument {function} at the point indicated by\\n   {constant}. This evaluation is performed in a way that the result is a\\n   faithful rounding of the real value of the {function} at {constant} to\\n   the current global precision. If such a faithful rounding is not\\n   possible, evaluate returns a range surely encompassing the real value\\n   of the function {function} at {constant}. If even interval evaluation\\n   is not possible because the expression is undefined or numerically\\n   unstable, NaN will be produced.\\n\\n   * If its second argument is a range {range}, evaluate evaluates its\\n   first argument {function} by interval evaluation on this range\\n   {range}. This ensures that the image domain of the function {function}\\n   on the preimage domain {range} is surely enclosed in the returned\\n   range.\\n\\n   * In the case when the second argument is a range that is reduced to a\\n   single point (such that [1;1] for instance), the evaluation\\n   is performed in the same way as when the second argument is a constant but\\n   it produces a range as a result: evaluate automatically adjusts the precision\\n   of the intern computations and returns a range that contains at most three floating-point\\n   consecutive numbers in precision prec. This corresponds to the same accuracy\\n   as a faithful rounding of the actual result. If such a faithful rounding\\n   is not possible, evaluate has the same behavior as in the case when the\\n   second argument is a constant.\\n\\n   * If its second argument is a function {function2} that is not a\\n   constant, evaluate replaces all occurrences of the free variable in\\n   function {function} by function {function2}.\\n\\nExample 1: \\n   > midpointmode=on!;\\n   > print(evaluate(sin(pi * x), 2.25));\\n   0.70710678118654752440084436210484903928483593768847\\n   > print(evaluate(sin(pi * x), [2.25; 2.25]));\\n   0.707106781186547524400844362104849039284835937688~4/5~\\n\\nExample 2: \\n   > print(evaluate(sin(pi * x), 2));\\n   [-3.100365765139897619749121887390789523854170596558e-13490;5.3002401585857127605350842426029223241500776302528e-13489]\\n\\nExample 3: \\n   > print(evaluate(sin(pi * x), [2, 2.25]));\\n   [-5.143390272677254630046998919961912407349224165421e-50;0.70710678118654752440084436210484903928483593768866]\\n\\nExample 4: \\n   > print(evaluate(sin(pi * x), 2 + 0.25 * x));\\n   sin((pi) * 2 + x * (pi) * 0.25)\\n\\nExample 5: \\n   > print(evaluate(sin(pi * 1/x), 0));\\n   [-1;1]\\n\\nSee also: isevaluable\\n\"\n#define HELP_EXECUTE_TEXT \"Name: execute\\n==> executes the content of a file\\n\\nLibrary name:\\n   void sollya_lib_execute(sollya_obj_t)\\n\\nUsage: \\n   execute({filename}) : string -> void\\n\\nParameters: \\n   {filename} is a string representing a file name\\n\\nDescription: \\n   * execute opens the file indicated by {filename}, and executes the sequence of \\n   commands it contains. This command is evaluated at execution time: this way you\\n   can modify the file {filename} (for instance using bashexecute) and execute it\\n   just after.\\n\\n   * If {filename} contains a command execute, it will be executed recursively.\\n\\n   * If {filename} contains a call to restart, it will be neglected.\\n\\n   * If {filename} contains a call to quit, the commands following quit\\n   in {filename} will be neglected.\\n\\nExample 1: \\n   > a=2;\\n   > a;\\n   2\\n   > print(\\\"a=1;\\\") > \\\"example.sollya\\\";\\n   > execute(\\\"example.sollya\\\"); \\n   > a;\\n   1\\n\\nExample 2: \\n   > verbosity=1!;\\n   > print(\\\"a=1; restart; a=2;\\\") > \\\"example.sollya\\\";\\n   > execute(\\\"example.sollya\\\"); \\n   Warning: a restart command has been used in a file read into another.\\n   This restart command will be neglected.\\n   > a;\\n   2\\n\\nExample 3: \\n   > verbosity=1!;\\n   > print(\\\"a=1; quit; a=2;\\\") > \\\"example.sollya\\\";\\n   > execute(\\\"example.sollya\\\"); \\n   Warning: the execution of a file read by execute demanded stopping the interpretation but it is not stopped.\\n   > a;\\n   1\\n\\nSee also: parse, readfile, write, print, bashexecute, quit, restart\\n\"\n#define HELP_EXPAND_TEXT \"Name: expand\\n==> expands polynomial subexpressions\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_expand(sollya_obj_t)\\n\\nUsage: \\n   expand({function}) : function -> function\\n\\nParameters: \\n   {function} represents a function\\n\\nDescription: \\n   * expand({function}) expands all polynomial subexpressions in function\\n   {function} as far as possible. Factors of sums are multiplied out,\\n   power operators with constant positive integer exponents are replaced\\n   by multiplications.\\n\\nExample 1: \\n   > print(expand(x^3));\\n   x * x * x\\n\\nExample 2: \\n   > print(expand((x + 2)^3 + 2 * x));\\n   8 + 12 * x + 6 * x * x + x * x * x + 2 * x\\n\\nExample 3: \\n   > print(expand(exp((x + (x + 3))^5)));\\n   exp(243 + 405 * x + 270 * x * x + 90 * x * x * x + 15 * x * x * x * x + x * x * x * x * x + x * 405 + 108 * x * 5 * x + 54 * x * x * 5 * x + 12 * x * x * x * 5 * x + x * x * x * x * 5 * x + x * x * 270 + 27 * x * x * x * 10 + 9 * x * x * x * x * 10 + x * x * x * x * x * 10 + x * x * x * 90 + 6 * x * x * x * x * 10 + x * x * x * x * x * 10 + x * x * x * x * 5 * x + 15 * x * x * x * x + x * x * x * x * x)\\n\\nSee also: dirtysimplify, simplify, horner, coeff, degree\\n\"\n#define HELP_EXPM1_TEXT \"Name: expm1\\n==> shifted exponential function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_expm1(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_expm1(sollya_obj_t)\\n   #define SOLLYA_EXPM1(x) sollya_lib_build_function_expm1(x)\\n\\nDescription: \\n   * expm1 is defined by expm1(x) = exp(x)-1.\\n\\n   * It is defined for every real number x.\\n\\nSee also: exp\\n\"\n#define HELP_EXPONENT_TEXT \"Name: exponent\\n==> returns the scaled binary exponent of a number.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_exponent(sollya_obj_t)\\n\\nUsage: \\n   exponent({x}) : constant -> integer\\n\\nParameters: \\n   {x} is a dyadic number.\\n\\nDescription: \\n   * exponent(x) is by definition 0 if x is one of 0, NaN, or Inf.\\n\\n   * If {x} is not zero, it can be uniquely written as x = m*2^e where\\n   m is an odd integer and e is an integer. exponent(x) returns e. \\n\\nExample 1: \\n   > a=round(Pi,20,RN);\\n   > e=exponent(a);\\n   > e;\\n   -17\\n   > m=mantissa(a);\\n   > a-m*2^e;\\n   0\\n\\nSee also: mantissa, precision\\n\"\n#define HELP_EXP_TEXT \"Name: exp\\n==> the exponential function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_exp(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_exp(sollya_obj_t)\\n   #define SOLLYA_EXP(x) sollya_lib_build_function_exp(x)\\n\\nDescription: \\n   * exp is the usual exponential function defined as the solution of the\\n   ordinary differential equation y' = y with y(0)=1.\\n\\n   * exp(x) is defined for every real number x.\\n\\nSee also: exp, log\\n\"\n#define HELP_EXTERNALPLOT_TEXT \"Name: externalplot\\n==> plots the error of an external code with regard to a function\\n\\nLibrary names:\\n   void sollya_lib_externalplot(sollya_obj_t, sollya_obj_t, sollya_obj_t,\\n                                sollya_obj_t, sollya_obj_t, ...)\\n   void sollya_lib_v_externalplot(sollya_obj_t, sollya_obj_t, sollya_obj_t,\\n                                  sollya_obj_t, sollya_obj_t, va_list)\\n\\nUsage: \\n   externalplot({filename}, {mode}, {function}, {range}, {precision}) : (string, absolute|relative, function, range, integer) -> void\\n   externalplot({filename}, {mode}, {function}, {range}, {precision}, {perturb}) : (string, absolute|relative, function, range, integer, perturb) -> void\\n   externalplot({filename}, {mode}, {function}, {range}, {precision}, {plot mode}, {result filename}) : (string, absolute|relative, function, range, integer, file|postscript|postscriptfile, string) -> void\\n   externalplot({filename}, {mode}, {function}, {range}, {precision}, {perturb}, {plot mode}, {result filename}) : (string, absolute|relative, function, range, integer, perturb, file|postscript|postscriptfile, string) -> void\\n\\nDescription: \\n   * The command externalplot plots the error of an external function\\n   evaluation code sequence implemented in the object file named\\n   {filename} with regard to the function {function}.  If {mode}\\n   evaluates to {absolute}, the difference of both functions is\\n   considered as an error function; if {mode} evaluates to {relative},\\n   the difference is divided by the function {function}. The resulting\\n   error function is plotted on all floating-point numbers with\\n   {precision} significant mantissa bits in the range {range}. \\n    \\n   If the sixth argument of the command externalplot is given and evaluates to\\n   perturb, each of the floating-point numbers the function is evaluated at gets perturbed by a\\n   random value that is uniformly distributed in +/-1 ulp\\n   around the original {precision} bit floating-point variable.\\n    \\n   If a sixth and seventh argument, respectively a seventh and eighth\\n   argument in the presence of perturb as a sixth argument, are given\\n   that evaluate to a variable of type file|postscript|postscriptfile respectively to a\\n   character sequence of type string, externalplot will plot\\n   (additionally) to a file in the same way as the command plot\\n   does. See plot for details.\\n    \\n   The external function evaluation code given in the object file name\\n   {filename} is supposed to define a function name f as\\n   follows (here in C syntax): void f(mpfr_t rop, mpfr_t op). \\n   This function is supposed to evaluate op with an accuracy corresponding\\n   to the precision of rop and assign this value to\\n   rop.\\n\\nExample 1: \\n   > bashexecute(\\\"gcc -fPIC -c externalplotexample.c\\\");\\n   > bashexecute(\\\"gcc -shared -o externalplotexample externalplotexample.o -lgmp -lmpfr\\\");\\n   > externalplot(\\\"./externalplotexample\\\",relative,exp(x),[-1/2;1/2],12,perturb);\\n\\nSee also: plot, asciiplot, perturb, absolute, relative, file, postscript, postscriptfile, bashexecute, externalproc, library\\n\"\n#define HELP_EXTERNALPROC_TEXT \"Name: externalproc\\n==> binds an external code to a Sollya procedure\\n\\nLibrary names:\\n     sollya_obj_t sollya_lib_externalprocedure(sollya_externalprocedure_type_t, \\n                                               sollya_externalprocedure_type_t *,\\n                                               int, char *, void *);\\n     sollya_obj_t sollya_lib_externalprocedure_with_data(\\n                                               sollya_externalprocedure_type_t, \\n                                               sollya_externalprocedure_type_t *,\\n                                               int, char *, void *, void *,\\n                                               void (*)(void *));\\n\\nUsage: \\n   externalproc({identifier}, {filename}, {argumenttype} -> {resulttype}) : (identifier type, string, type type, type type) -> void\\n\\nParameters: \\n   {identifier} represents the identifier the code is to be bound to\\n   {filename} of type string represents the name of the object file where the code of procedure can be found\\n   {argumenttype} represents a definition of the types of the arguments of the Sollya procedure and the external code\\n   {resulttype} represents a definition of the result type of the external code\\n\\nDescription: \\n   * externalproc allows for binding the Sollya identifier {identifier} to an\\n   external code. After this binding, when Sollya encounters {identifier}\\n   applied to a list of actual parameters, it will evaluate these parameters and\\n   call the external code with these parameters. If the external code indicated\\n   success, it will receive the result produced by the external code, transform\\n   it to Sollya's internal representation and return it.\\n    \\n   In order to allow correct evaluation and typing of the data in parameter and\\n   in result to be passed to and received from the external code, externalproc\\n   has a third parameter {argumenttype} -> {resulttype}. Both {argumenttype} and\\n   {resulttype} are one of void, constant, function, object, range, integer,\\n   string, boolean, list of constant, list of function, list of object,\\n   list of range, list of integer, list of string, list of boolean.\\n    \\n   It is worth mentionning that the difference between the data and\\n   result type function and the type object is minimal and due to\\n   support of legacy Sollya code. Both Sollya functions and Sollya\\n   objects are transferred from and to the external procedure thru the C\\n   type sollya_obj_t. The difference is that\\n   Sollya will check that a certain object is a mathematical function\\n   when function is used as a type, and will skip this test if the\\n   object type is used. Similarly, Sollya relies on an object produced\\n   by the external procedure to be a mathematical function when function\\n   is used and will not make this assumption for object.\\n    \\n   If upon a usage of a procedure bound to an external procedure the type of the\\n   actual parameters given or its number is not correct, Sollya produces a type\\n   error. An external function not applied to arguments represents itself and\\n   prints out with its argument and result types.\\n    \\n   The external function is supposed to return an integer indicating success. It\\n   returns its result depending on its Sollya result type as follows. Here, the\\n   external procedure is assumed to be implemented as a C function. \\n      - If the Sollya result type is void, the C function has no pointer\\n        argument for the result.\\n      - If the Sollya result type is constant, the first argument of the\\n        C function is of C type mpfr_t *, the result is returned by affecting\\n        the MPFR variable.\\n      - If the Sollya result type is function, the first argument of the\\n        C function is of C type sollya_obj_t *, the result is returned by\\n        affecting the sollya_obj_t variable.\\n      - If the Sollya result type is object, the first argument of the\\n        C function is of C type sollya_obj_t *, the result is returned by\\n        affecting the sollya_obj_t variable.\\n      - If the Sollya result type is range, the first argument of the C function\\n        is of C type mpfi_t *, the result is returned by affecting the MPFI\\n        variable.\\n      - If the Sollya result type is integer, the first argument of the\\n        C function is of C type int *, the result is returned by affecting the\\n        int variable.\\n      - If the Sollya result type is string, the first argument of the\\n        C function is of C type char **, the result is returned by the char *\\n        pointed with a new char *.\\n      - If the Sollya result type is boolean, the first argument of the\\n        C function is of C type int *, the result is returned by affecting the\\n        int variable with a boolean value.\\n      - If the Sollya result type is list of type, the first argument of the\\n        C function is of a C type depending on the Sollya return type: \\n          - For a list of constant: sollya_constant_list_t *\\n          - For a list of function: sollya_obj_list_t *\\n          - For a list of object: sollya_obj_list_t *\\n          - For a list of range: sollya_constant_list_t *\\n          - For a list of integer: sollya_int_list_t *\\n          - For a list of string: sollya_string_list_t *\\n          - For a list of boolean: sollya_boolean_list_t *  \\n    \\n   The external procedure affects its possible pointer argument if and only if\\n   it succeeds. This means, if the function returns an integer indicating\\n   failure, it does not leak any memory to the encompassing environment.\\n    \\n   The external procedure receives its arguments as follows: If the Sollya\\n   argument type is void, no argument array is given. Otherwise the C function\\n   receives a C void ** argument representing an array of size equal to the\\n   arity of the function where each entry (of C type void *) represents a value\\n   with a C type depending on the corresponding Sollya type. \\n      - If the Sollya type is constant, the void * is to be cast to mpfr_t *.\\n      - If the Sollya type is function, the void * is to be cast to\\n        sollya_obj_t.\\n      - If the Sollya type is object, the void * is to be cast to sollya_obj_t.\\n      - If the Sollya type is range, the void * is to be cast to mpfi_t *.\\n      - If the Sollya type is integer, the void * is to be cast to int *.\\n      - If the Sollya type is string, the void * is to be cast to char *.\\n      - If the Sollya type is boolean, the void * is to be cast to int *.\\n      - If the Sollya type is list of type, the void * is to be cast to a list\\n        of a type depending on the type of the list argument: \\n          - For a list of constant: sollya_constant_list_t\\n          - For a list of function: sollya_obj_list_t\\n          - For a list of object: sollya_obj_list_t\\n          - For a list of range: sollya_interval_list_t\\n          - For a list of integer: sollya_int_list_t\\n          - For a list of string: sollya_string_list_t\\n          - For a list of boolean: sollya_boolean_list_t  \\n    \\n   The external procedure is not supposed to alter the memory pointed by its\\n   array argument void **.\\n    \\n   In both directions (argument and result values), empty lists are represented\\n   by NULL pointers.\\n    \\n   Similarly to internal procedures, externally bounded procedures can be\\n   considered to be objects inside Sollya that can be assigned to other\\n   variables, stored in list etc.\\n\\n   * The user should be aware that they may use the Sollya library in external\\n   codes to be dynamically bound to Sollya using externalproc. On most systems,\\n   it suffices to include the header of the Sollya library into the source code\\n   of the external procedure. Linking with the actual Sollya library is not\\n   necessary on most systems; as the interactive Sollya executable contains a\\n   superset of the Sollya library functions. On some systems, linking with the\\n   Sollya library or some of its dependencies may be necessary.\\n    \\n   In particular, the Sollya library -- and, of course, its header file --\\n   contain a certain set of functions to manipulate lists with elements of\\n   certain types, such as sollya_constant_list_t, sollya_obj_list_t and so on.\\n   As explained above, these types are passed in argument to (and received back\\n   thru a reference from) an external procedure. These list manipulation\\n   functions are not strictly necessary to the use of the Sollya library in\\n   free-standing applications that do not use the functionality provided with\\n   externalproc. They are therefore provided as-is without any further\\n   documentation, besides the comments given in the Sollya library header file.\\n\\n   * The dynamic object file whose name is given to externalproc for binding of\\n   an external procedure may also define a destructor function\\n   int sollya_external_lib_close(void). If Sollya finds such a destructor\\n   function in the dynamic object file, it will call that function when closing\\n   the dynamic object file again. This happens when Sollya is terminated or when\\n   the current Sollya session is restarted using restart. The purpose of the\\n   destructor function is to allow the dynamically bound code to free any memory\\n   that it might have allocated before Sollya is terminated or restarted.\\n    \\n   The dynamic object file is not necessarily needed to define a destructor\\n   function. This ensure backward compatibility with older Sollya external\\n   library function object files.\\n    \\n   When defined, the destructor function is supposed to return an integer\\n   value indicating if an error has happened. Upon success, the destructor\\n   functions is to return a zero value, upon error a non-zero value.\\n\\nExample 1: \\n   > bashexecute(\\\"gcc -fPIC -Wall -c externalprocexample.c\\\");\\n   > bashexecute(\\\"gcc -fPIC -shared -o externalprocexample externalprocexample.o\\\");\\n   > externalproc(foo, \\\"./externalprocexample\\\", (integer, integer) -> integer);\\n   > foo;\\n   foo\\n   > foo(5, 6);\\n   11\\n   > verbosity = 1!;\\n   > foo();\\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\\n   or its evaluation has failed because of some error on a side-effect.\\n   error\\n   > a = foo;\\n   > a(5,6);\\n   11\\n\\nSee also: library, libraryconstant, externalplot, bashexecute, void, constant, function, range, integer, string, boolean, list of, object\\n\"\n#define HELP_FALSE_TEXT \"Name: false\\n==> the boolean value representing the false.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_false()\\n   int sollya_lib_is_false(sollya_obj_t)\\n\\nDescription: \\n   * false is the usual boolean value.\\n\\nExample 1: \\n   > true && false;\\n   false\\n   > 2<1;\\n   false\\n\\nSee also: true, &&, ||\\n\"\n#define HELP_FILE_TEXT \"Name: file\\n==> special value for commands plot and externalplot\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_file()\\n   int sollya_lib_is_file(sollya_obj_t)\\n\\nDescription: \\n   * file is a special value used in commands plot and externalplot to save\\n   the result of the command in a data file.\\n\\n   * As any value it can be affected to a variable and stored in lists.\\n\\nExample 1: \\n   > savemode=file;\\n   > name=\\\"plotSinCos\\\";\\n   > plot(sin(x),0,cos(x),[-Pi,Pi],savemode, name);\\n\\nSee also: externalplot, plot, postscript, postscriptfile\\n\"\n#define HELP_FINDZEROS_TEXT \"Name: findzeros\\n==> gives a list of intervals containing all zeros of a function on an interval.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_findzeros(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   findzeros({f},{I}) : (function, range) -> list\\n\\nParameters: \\n   {f} is a function.\\n   {I} is an interval.\\n\\nDescription: \\n   * findzeros({f},{I}) returns a list of intervals {I1}, ... ,{In} such that, for \\n   every zero z of f, there exists some k such that z is in Ik.\\n\\n   * The list may contain intervals {Ik} that do not contain any zero of {f}.\\n   An interval {Ik} may contain many zeros of {f}.\\n\\n   * This command is meant for cases when safety is critical. If you want to be sure\\n   not to forget any zero, use findzeros. However, if you just want to know \\n   numerical values for the zeros of {f}, dirtyfindzeros should be quite \\n   satisfactory and a lot faster.\\n\\n   * If d denotes the value of global variable diam, the algorithm ensures\\n   that for each k, |Ik| < d*|I|.\\n\\n   * The algorithm used is basically a bisection algorithm. It is the same algorithm\\n   that the one used for infnorm. See the help page of this command for more \\n   details. In short, the behavior of the algorithm depends on global variables\\n   prec, diam, taylorrecursions and hopitalrecursions.\\n\\nExample 1: \\n   > findzeros(sin(x),[-5;5]);\\n   [|[-3.14208984375;-3.140869140625], [-1.220703125e-3;1.220703125e-3], [3.140869140625;3.14208984375]|]\\n   > diam=1e-10!;\\n   > findzeros(sin(x),[-5;5]);\\n   [|[-3.14159265370108187198638916015625;-3.141592652536928653717041015625], [-1.16415321826934814453125e-9;1.16415321826934814453125e-9], [3.141592652536928653717041015625;3.14159265370108187198638916015625]|]\\n\\nSee also: dirtyfindzeros, infnorm, prec, diam, taylorrecursions, hopitalrecursions, numberroots\\n\"\n#define HELP_FIXED_TEXT \"Name: fixed\\n==> indicates that fixed-point formats should be used for fpminimax\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_fixed()\\n   int sollya_lib_is_fixed(sollya_obj_t)\\n\\nUsage: \\n   fixed : fixed|floating\\n\\nDescription: \\n   * The use of fixed in the command fpminimax indicates that the list of\\n   formats given as argument is to be considered to be a list of fixed-point\\n   formats.\\n   See fpminimax for details.\\n\\nExample 1: \\n   > fpminimax(cos(x),6,[|32,32,32,32,32,32,32|],[-1;1],fixed);\\n   0.9999997480772435665130615234375 + x^2 * (-0.4999928693287074565887451171875 + x^2 * (4.163351492024958133697509765625e-2 + x^2 * (-1.338223926723003387451171875e-3)))\\n\\nSee also: fpminimax, floating\\n\"\n#define HELP_FLOATING_TEXT \"Name: floating\\n==> indicates that floating-point formats should be used for fpminimax\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_floating()\\n   int sollya_lib_is_floating(sollya_obj_t)\\n\\nUsage: \\n   floating : fixed|floating\\n\\nDescription: \\n   * The use of floating in the command fpminimax indicates that the list of\\n   formats given as argument is to be considered to be a list of floating-point\\n   formats.\\n   See fpminimax for details.\\n\\nExample 1: \\n   > fpminimax(cos(x),6,[|D...|],[-1;1],floating);\\n   0.99999974816012215939053930924274027347564697265625 + x * (-2.795931796958502334440230695107655659202089892465e-15 + x * (-0.49999286980201401719980935922649223357439041137695 + x * (4.0484539189054105169841244454207387920433372507922e-14 + x * (4.1633515528919168291466235132247675210237503051758e-2 + x * (-4.015858818743733758578949218474363725507386355118e-14 + x * (-1.3382240885483781024645200119493892998434603214264e-3))))))\\n\\nSee also: fpminimax, fixed\\n\"\n#define HELP_FLOOR_TEXT \"Name: floor\\n==> the usual function floor.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_floor(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_floor(sollya_obj_t)\\n   #define SOLLYA_FLOOR(x) sollya_lib_build_function_floor(x)\\n\\nDescription: \\n   * floor is defined as usual: floor(x) is the greatest integer y such that y <= x.\\n\\n   * It is defined for every real number x.\\n\\nSee also: ceil, nearestint, round, RD\\n\"\n#define HELP_FPMINIMAX_TEXT \"Name: fpminimax\\n==> computes a good polynomial approximation with fixed-point or floating-point coefficients\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_fpminimax(sollya_obj_t, sollya_obj_t, sollya_obj_t,\\n                                     sollya_obj_t, ...)\\n   sollya_obj_t sollya_lib_v_fpminimax(sollya_obj_t, sollya_obj_t,\\n                                       sollya_obj_t, sollya_obj_t, va_list)\\n\\nUsage: \\n   fpminimax({f}, {n}, {formats}, {range}, {indic1}, {indic2}, {indic3}, {P}) : (function, integer, list, range, absolute|relative | fixed|floating | function, absolute|relative | fixed|floating | function, absolute|relative | fixed|floating | function, function) -> function\\n   fpminimax({f}, {monomials}, {formats}, {range}, {indic1}, {indic2}, {indic3}, {P}) : (function, list, list, range,  absolute|relative | fixed|floating | function, absolute|relative | fixed|floating | function, absolute|relative | fixed|floating | function, function) -> function\\n   fpminimax({f}, {n}, {formats}, {L}, {indic1}, {indic2}, {indic3}, {P}) : (function, integer, list, list,  absolute|relative | fixed|floating | function, absolute|relative | fixed|floating | function, absolute|relative | fixed|floating | function, function) -> function\\n   fpminimax({f}, {monomials}, {formats}, {L}, {indic1}, {indic2}, {indic3}, {P}) : (function, list, list, list,  absolute|relative | fixed|floating | function, absolute|relative | fixed|floating | function, absolute|relative | fixed|floating | function, function) -> function\\n\\nParameters: \\n   {f} is the function to be approximated\\n   {n} is the degree of the polynomial that must approximate {f}\\n   {monomials} is a list of integers or a list of function. It indicates the basis for the approximation of {f}\\n   {formats} is a list indicating the formats that the coefficients of the polynomial must have\\n   {range} is the interval where the function must be approximated\\n   {L} is a list of interpolation points used by the method\\n   {indic1} (optional) is one of the optional indication parameters. See the detailed description below.\\n   {indic2} (optional) is one of the optional indication parameters. See the detailed description below.\\n   {indic3} (optional) is one of the optional indication parameters. See the detailed description below.\\n   {P} (optional) is the minimax polynomial to be considered for solving the problem.\\n\\nDescription: \\n   * fpminimax uses a heuristic (but practically efficient) method to find a\\n   good polynomial approximation of a function {f} on an interval {range}. It\\n   implements the method published in the article: \\n   Efficient polynomial L^\\\\infty - approximations\\n   Nicolas Brisebarre and Sylvain Chevillard \\n   Proceedings of the 18th IEEE Symposium on Computer Arithmetic (ARITH 18) \\n   pp. 169-176\\n\\n   * The basic usage of this command is fpminimax({f}, {n}, {formats}, {range}).\\n   It computes a polynomial approximation of f with degree at most n\\n   on the interval {range}. {formats} is a list of integers or format types\\n   (such as double, doubledouble, etc.). The polynomial returned by the\\n   command has its coefficients that fit the formats indications. For\\n   instance, if formats[0] is 35, the coefficient of degree 0 of the\\n   polynomial will fit a floating-point format of 35 bits. If formats[1]\\n   is D, the coefficient of degree 1 will be representable by a floating-point\\n   number with a precision of 53 bits (which is not necessarily an IEEE 754\\n   double precision number. See the remark below), etc.\\n\\n   * The second argument may be either an integer, a list of integers or a list\\n   of functions. An integer indicates the degree of the desired polynomial\\n   approximation. A list of integers indicates the list of desired monomials.\\n   For instance, the list [|0,2,4,6|] indicates that the polynomial must be\\n   even and of degree at most 6. Giving an integer n as second argument is\\n   equivalent as giving [|0,...,n|].\\n   Finally, a list of function g_k indicates that the desired approximation\\n   must be a linear combination of the g_k. \\n   The list of formats is interpreted with respect to the list of monomials. For\\n   instance, if the list of monomials is [|0,2,4,6|] and the list\\n   of formats is [|161,107,53,24|], the coefficients of degree 0 is\\n   searched as a floating-point number with precision 161, the coefficient of\\n   degree 2 is searched as a number of precision 107, and so on.\\n\\n   * The list of formats may contain either integers or format types\\n   (halfprecision, single, double, doubledouble, tripledouble, doubleextended\\n   and quad). The list may be too large or even infinite. Only the first\\n   indications will be considered. For instance, for a degree n polynomial,\\n   formats[n+1] and above will be discarded. This lets one use elliptical\\n   indications for the last coefficients.\\n\\n   * The floating-point coefficients considered by fpminimax do not have an\\n   exponent range. In particular, in the format list, double is an exact synonym\\n   for 53. Currently, fpminimax only ensures that the corresponding coefficient\\n   has at most 53 bits of mantissa. It does not imply that it is an\\n   IEEE-754 double.\\n\\n   * By default, the list of formats is interpreted as a list of floating-point\\n   formats. This may be changed by passing fixed as an optional argument (see\\n   below). Let us take an example: fpminimax(f, 2, [|107, DD, 53|], [0;1]).\\n   Here the optional argument is missing (we could have set it to floating).\\n   Thus, fpminimax will search for a polynomial of degree 2 with a constant\\n   coefficient that is a 107 bits floating-point number, etc. \\n   Currently, doubledouble is just a synonym for 107 and tripledouble a\\n   synonym for 161. This behavior may change in the future (taking into\\n   account the fact that some double-doubles are not representable with\\n   107 bits). \\n   Second example: fpminimax(f, 2, [|25, 18, 30|], [0;1], fixed).\\n   In this case, fpminimax will search for a polynomial of degree 2 with a\\n   constant coefficient of the form m/2^25 where m is an\\n   integer. In other words, it is a fixed-point number with 25 bits after\\n   the point. Note that even with argument fixed, the formats list is\\n   allowed to contain halfprecision, single, double, doubleextended,\\n   doubledouble, quad or tripledouble. In this this case, it is just\\n   a synonym for 11, 24, 53, 64, 107, 113 or 161. This is deprecated and\\n   may change in the future.\\n\\n   * The fourth argument may be a range or a list. Lists are for advanced users\\n   that know what they are doing. The core of the  method is a kind of\\n   approximated interpolation. The list given here is a list of points that\\n   must be considered for the interpolation. It must contain at least as\\n   many points as unknown coefficients. If you give a list, it is also\\n   recommended that you provide the minimax polynomial as last argument.\\n   If you give a range, the list of points will be automatically computed.\\n\\n   * The fifth, sixth and seventh arguments are optional. By default, fpminimax\\n   will approximate f while optimizing the relative error, and interpreting\\n   the list of formats as a list of floating-point formats. \\n   This default behavior may be changed with these optional arguments. You\\n   may provide zero, one, two or three of the arguments in any order.\\n   This lets the user indicate only the non-default arguments. \\n   The three possible arguments are:  \\n       - relative or absolute: the error to be optimized;\\n       - floating or fixed: formats of the coefficients;\\n       - a constrained part q.\\n    \\n   The constrained part lets the user assign in advance some of the\\n   coefficients. For instance, for approximating exp(x), it may\\n   be interesting to search for a polynomial p of the form\\n                   p = 1 + x + x^2/2 + a3 x^3 + a4 x^4.\\n   Thus, there is a constrained part q = 1 + x + x^2/2 and the unknown\\n   polynomial should be considered in the monomial basis [|3, 4|].\\n   Calling fpminimax with monomial basis [|3,4|] and constrained\\n   part q, will return a polynomial with the right form.\\n\\n   * The last argument is for advanced users. It is the minimax polynomial that\\n   approximates the function f in the given basis. If it is not given\\n   this polynomial will be automatically computed by fpminimax.\\n    \\n   This minimax polynomial is used to compute the list of interpolation\\n   points required by the method. It is also used, when floating-point\\n   coefficients are desired, to give an initial assumption for the\\n   exponents of the coeffcients. In general, you do not have to provide this\\n   argument. But if you want to obtain several polynomials of the same degree\\n   that approximate the same function on the same range, just changing the\\n   formats, you should probably consider computing only once the minimax\\n   polynomial and the list of points instead of letting fpminimax recompute\\n   them each time.\\n    \\n   Note that in the case when a constrained part is given, the minimax\\n   polynomial must take that into account. For instance, in the previous\\n   example, the minimax would be obtained by the following command:\\n          P = remez(1-(1+x+x^2/2)/exp(x), [|3,4|], range, 1/exp(x));\\n   Note that the constrained part is not to be added to P.\\n    \\n   In the case when the second argument is an integer or a list of integers,\\n   there is no restriction for P, as long as it is a polynomial.\\n   However, when the second argument is a list of functions, and even if these\\n   functions are all polynomials, P must be expanded in the given basis.\\n   For instance, if the second argument is 2 or [|0, 1, 2|], P can be given\\n   in Horner form. However, if the second argument is [|1, x, x^2|], P must\\n   be written as a linear combination of 1, x and x^2, otherwise, the algorithm\\n   will fail to recover the coefficients of P and will fail with an error\\n   message.\\n    \\n   Please also note that recovering the coefficients of P in an arbitrary\\n   basis is performed heuristically and no verification is performed to check\\n   that P does not contain other functions than the functions of the basis.\\n\\n   * Note that fpminimax internally computes a minimax polynomial (using\\n   the same algorithm as remez command). Thus fpminimax may encounter\\n   the same problems as remez. In particular, it may be very slow\\n   when Haar condition is not fulfilled. Another consequence is that\\n   currently fpminimax has to be run with a sufficiently high working precision.\\n\\nExample 1: \\n   > P = fpminimax(cos(x),6,[|DD, DD, D...|],[-1b-5;1b-5]);\\n   > printexpansion(P);\\n   (0x3ff0000000000000 + 0xbc09fda15e029b00) + x * ((0x3af9eb57163024a8 + 0x37942c2f3f3e3839) + x * (0xbfdfffffffffff98 + x * (0xbbd1693f9c028849 + x * (0x3fa5555555145337 + x * (0x3c7a25f610ad9ebc + x * 0xbf56c138142da5b0)))))\\n\\nExample 2: \\n   > P = fpminimax(sin(x),6,[|32...|],[-1b-5;1b-5], fixed, absolute);\\n   > display = powers!;\\n   > P;\\n   x * (1 + x^2 * (-357913941 * 2^(-31) + x^2 * (35789873 * 2^(-32))))\\n\\nExample 3: \\n   > P = fpminimax(exp(x), [|3,4|], [|D,24|], [-1/256; 1/246], 1+x+x^2/2);\\n   > display = powers!;\\n   > P;\\n   1 + x * (1 + x * (1 * 2^(-1) + x * (375300225001191 * 2^(-51) + x * (5592621 * 2^(-27)))))\\n\\nExample 4: \\n   > f = cos(exp(x));\\n   > pstar = remez(f, 5, [-1b-7;1b-7]);\\n   > listpoints = dirtyfindzeros(f-pstar, [-1b-7; 1b-7]);\\n   > P1 = fpminimax(f, 5, [|DD...|], listpoints, absolute, default, default, pstar);\\n   > P2 = fpminimax(f, 5, [|D...|], listpoints, absolute, default, default, pstar);\\n   > P3 = fpminimax(f, 5, [|D, D, D, 24...|], listpoints, absolute, default, default, pstar);\\n   > print(\\\"Error of pstar: \\\", dirtyinfnorm(f-pstar, [-1b-7; 1b-7]));\\n   Error of pstar:  7.9048441259903026332577436001060063099817726177425e-16\\n   > print(\\\"Error of P1:    \\\", dirtyinfnorm(f-P1, [-1b-7; 1b-7]));\\n   Error of P1:     7.9048441259903026580081299123420463921479618202064e-16\\n   > print(\\\"Error of P2:    \\\", dirtyinfnorm(f-P2, [-1b-7; 1b-7]));\\n   Error of P2:     8.2477144579950871737109573536791331686347620955985e-16\\n   > print(\\\"Error of P3:    \\\", dirtyinfnorm(f-P3, [-1b-7; 1b-7]));\\n   Error of P3:     1.08454277156993282593701156841863009789063333951055e-15\\n\\nExample 5: \\n   > L = [|exp(x), sin(x), cos(x)-1, sin(x^3)|];\\n   > g = (2^x-1)/x;\\n   > p = fpminimax(g, L, [|D...|], [-1/16;1/16],absolute);\\n   > display = powers!;\\n   > p;\\n   -3267884797436153 * 2^(-54) * sin(x^3) + 5247089102535885 * 2^(-53) * (cos(x) - 1) + -8159095033730771 * 2^(-54) * sin(x) + 6243315658446641 * 2^(-53) * exp(x)\\n\\nExample 6: \\n   > n = 9;\\n   > T = [|1, x|];\\n   > for i from 2 to n do T[i] = canonical(2*x*T[i-1]-T[i-2]);\\n   > g = (2^x-1)/x;\\n   > PCheb = fpminimax(g, T, [|DD,DE...|], [-1/16;1/16],absolute);\\n   > display = dyadic!;\\n   > print(PCheb);\\n   8733930098894247371b-98 * (9 * x + -120 * x^3 + 432 * x^5 + -576 * x^7 + 256 * x^9) + 15750497046710770365b-94 * (1 + -32 * x^2 + 160 * x^4 + -256 * x^6 + 128 * x^8) + 6467380330985872933b-88 * (-7 * x + 56 * x^3 + -112 * x^5 + 64 * x^7) + 9342762606926218927b-84 * (-1 + 18 * x^2 + -48 * x^4 + 32 * x^6) + 11814521367456461131b-80 * (5 * x + -20 * x^3 + 16 * x^5) + 6405479474328570593b-75 * (1 + -8 * x^2 + 8 * x^4) + 11584457324781949889b-72 * (-3 * x + 4 * x^3) + 16779705312447201161b-69 * (-1 + 2 * x^2) + 18265014280997359319b-66 * x + 117054497448175143902009975397253b-107\\n\\nSee also: remez, dirtyfindzeros, absolute, relative, fixed, floating, default, halfprecision, single, double, doubleextended, doubledouble, quad, tripledouble, implementpoly, coeff, degree, roundcoefficients, guessdegree\\n\"\n#define HELP_FULLPARENTHESES_TEXT \"Name: fullparentheses\\n==> activates, deactivates or inspects the state variable controlling output with full parenthesising\\n\\nLibrary names:\\n   void sollya_lib_set_fullparentheses_and_print(sollya_obj_t);\\n   void sollya_lib_set_fullparentheses(sollya_obj_t);\\n   sollya_obj_t sollya_lib_get_fullparentheses();\\n\\nUsage: \\n   fullparentheses = {activation value} : on|off -> void\\n   fullparentheses = {activation value} ! : on|off -> void\\n\\nParameters: \\n   {activation value} represents on or off, i.e. activation or deactivation\\n\\nDescription: \\n   * An assignment fullparentheses = {activation value}, where {activation value}\\n   is one of on or off, activates respectively deactivates the output\\n   of expressions with full parenthesising. In full parenthesising mode,\\n   Sollya commands like print, write and the implicit command when an\\n   expression is given at the prompt will output expressions with\\n   parenthesising at all places where it is necessary for expressions\\n   containing infix operators to be parsed back with the same\\n   result. Otherwise parentheses around associative operators are\\n   omitted.\\n    \\n   If the assignment fullparentheses = {activation value} is followed by an\\n   exclamation mark, no message indicating the new state is\\n   displayed. Otherwise the user is informed of the new state of the\\n   global mode by an indication.\\n\\nExample 1: \\n   > autosimplify = off!;\\n   > fullparentheses = off;\\n   Full parentheses mode has been deactivated.\\n   > print(1 + 2 + 3);\\n   1 + 2 + 3\\n   > fullparentheses = on;\\n   Full parentheses mode has been activated.\\n   > print(1 + 2 + 3);\\n   (1 + 2) + 3\\n\\nSee also: print, write, autosimplify\\n\"\n#define HELP_FUNCTION_TEXT \"Name: function\\n==> keyword for declaring a procedure-based function or a keyword representing a function type \\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_procedurefunction(sollya_obj_t, sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_procedurefunction(sollya_obj_t,\\n                                                            sollya_obj_t)\\n   SOLLYA_EXTERNALPROC_TYPE_FUNCTION\\n\\nUsage: \\n   function({procedure})  : procedure -> function\\n   function : type type\\n\\nParameters: \\n   {procedure} is a procedure of type (range, integer, integer) -> range\\n\\nDescription: \\n   * For the sake of safety and mathematical consistency, Sollya\\n   distinguishes clearly between functions, seen in the mathematical\\n   sense of the term, i.e. mappings, and procedures, seen in the sense\\n   Computer Science gives to functions, i.e. pieces of code that compute\\n   results for arguments following an algorithm. In some cases however,\\n   it is interesting to use such Computer Science procedures as\\n   realisations of mathematical functions, e.g. in order to plot them or\\n   even to perform polynomial approximation on them. The function keyword\\n   allows for such a transformation of a Sollya procedure into a Sollya\\n   function. \\n\\n   * The procedure to be used as a function through function({procedure})\\n   must be of type (range, integer, integer)\\n   -> range. This means it must take in argument\\n   an interval X, a degree of differentiation n and a\\n   working precision p. It must return in result an interval\\n   Y encompassing the image f^(n)(X) of the\\n   n-th derivative of the implemented function f,\\n   i.e. f^(n)(X) c Y. In order to allow\\n   Sollya's algorithms to work properly, the procedure must ensure that,\\n   whenever (p, diam(X)) tends to (infinity, 0),\\n   the computed over-estimated bounding Y tends to the actual image f^(n)(X).\\n\\n   * The user must be aware that they are responsible of the correctness\\n   of the procedure. If, for some n and X, {procedure} returns an interval Y\\n   such that f^n(X) is not included in Y, function will successfully\\n   return a function without any complain, but this function might behave\\n   inconsistently in further computations.\\n\\n   * For cases when the procedure does not have the correct signature or\\n   does not return a finite interval as a result function({procedure})\\n   evaluates to Not-A-Number (resp. to an interval of Not-A-Numbers for\\n   interval evaluation).\\n\\n   * function also represents the function type for declarations\\n   of external procedures by means of externalproc.\\n    \\n   Remark that in contrast to other indicators, type indicators like\\n   function cannot be handled outside the externalproc context.  In\\n   particular, they cannot be assigned to variables.\\n\\nExample 1: \\n   > procedure EXP(X,n,p) {\\n     \\t  var res, oldPrec;\\n     \\t  oldPrec = prec;\\n     \\t  prec = p!;\\n     \\t  \\n     \\t  res = exp(X);\\n     \\t  \\n     \\t  prec = oldPrec!;\\n     \\t  return res;\\n     };\\n   > f = function(EXP);\\n   > f(1);\\n   2.7182818284590452353602874713526624977572470937\\n   > exp(1);\\n   2.7182818284590452353602874713526624977572470937\\n   > f(x + 3);\\n   (function(proc(X, n, p)\\n   {\\n   var res, oldPrec;\\n   oldPrec = prec;\\n   prec = p!;\\n   res = exp(X);\\n   prec = oldPrec!;\\n   return res;\\n   }))(3 + x)\\n   > diff(f);\\n   diff(function(proc(X, n, p)\\n   {\\n   var res, oldPrec;\\n   oldPrec = prec;\\n   prec = p!;\\n   res = exp(X);\\n   prec = oldPrec!;\\n   return res;\\n   }))\\n   > (diff(f))(0);\\n   1\\n   > g = f(sin(x));\\n   > g(17);\\n   0.38235816999386683402690554641655641359573458342088\\n   > diff(g);\\n   (diff(function(proc(X, n, p)\\n   {\\n   var res, oldPrec;\\n   oldPrec = prec;\\n   prec = p!;\\n   res = exp(X);\\n   prec = oldPrec!;\\n   return res;\\n   })))(sin(x)) * cos(x)\\n   > (diff(g))(1);\\n   1.25338076749344683697237458088447611474812675164344\\n   > p = remez(f,3,[-1/2;1/2]);\\n   > p;\\n   0.99967120901420646830315493949039176881764871951833 + x * (0.99973702983571140134762682913614052309208076875596 + x * (0.510497293602826249216227216546435103583073053437 + x * 0.169814324607133287588897694747370380479108785868016))\\n\\nSee also: proc, library, procedure, externalproc, boolean, constant, integer, list of, range, string, object\\n\"\n#define HELP_GCD_TEXT \"Name: gcd\\n==> Computes the greatest common divisor of polynomials or numbers.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_gcd(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   gcd({p}, {q}) : (function, function) -> function\\n\\nParameters: \\n   {p} is a constant or a polynomial.\\n   {q} is a constant or a polynomial.\\n\\nDescription: \\n   * When both {p} and {q} are integers, gcd({p},{q}) computes the greatest\\n   common divisor of these two integers, i.e. the greatest non-negative integer\\n   dividing both {p} and {q}.\\n\\n   * When both {p} and {q} are rational numbers, say a/b and c/d,\\n   gcd({p},{q}) computes the greatest common divisor of a * d and b * c,\\n   divided by the product of the denominators, b * d.\\n\\n   * When both {p} and {q} are constants but at least one of them is no rational\\n   number, gcd({p},{q}) returns 1.\\n\\n   * When both {p} and {q} are polynomials with at least one being non-constant,\\n   gcd({p},{q}) returns the polynomial of greatest degree dividing both {p} and\\n   {q}, and whose leading coefficient is the greatest common divisor of the\\n   leading coefficients of {p} and {q}.\\n\\n   * Similarly to the cases documented for div and mod, gcd\\n   may fail to return the unique polynomial of largest degree dividing\\n   both {p} and {q} in cases when certain coefficients of either {p} or\\n   {q} are constant expressions for which the tool is unable to determine\\n   whether they are zero or not. These cases typically involve\\n   polynomials whose leading coefficient is zero but the tool is unable\\n   to detect this fact.\\n\\n   * When at least one of {p} or {q} is a function that is no polynomial,\\n   gcd({p},{q}) returns 1.\\n\\nExample 1: \\n   > gcd(1001, 231);\\n   77\\n   > gcd(13, 17);\\n   1\\n   > gcd(-210, 462);\\n   42\\n\\nExample 2: \\n   > rationalmode = on!;\\n   > gcd(6/7, 33/13);\\n   3 / 91\\n\\nExample 3: \\n   > gcd(exp(13),sin(17));\\n   1\\n\\nExample 4: \\n   > gcd(24 + 68 * x + 74 * x^2 + 39 * x^3 + 10 * x^4 + x^5, 480 + 776 * x + 476 * x^2 + 138 * x^3 + 19 * x^4 + x^5);\\n   4 + x * (4 + x)\\n   > gcd(1001 * x^2, 231 * x);\\n   x * 77\\n\\nExample 5: \\n   > gcd(exp(x), x^2);\\n   1\\n\\nSee also: div, mod, numberroots\\n\"\n#define HELP_GE_TEXT \"Name: >=\\n==> greater-than-or-equal-to operator\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_cmp_greater_equal(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   {expr1} >= {expr2} : (constant, constant) -> boolean\\n\\nParameters: \\n   {expr1} and {expr2} represent constant expressions\\n\\nDescription: \\n   * The operator >= evaluates to true iff its operands {expr1} and\\n   {expr2} evaluate to two floating-point numbers a1\\n   respectively a2 with the global precision prec and\\n   a1 is greater than or equal to a2. The user should\\n   be aware of the fact that because of floating-point evaluation, the\\n   operator >= is not exactly the same as the mathematical\\n   operation \\\"greater-than-or-equal-to\\\".\\n\\nExample 1: \\n   > 5 >= 4;\\n   true\\n   > 5 >= 5;\\n   true\\n   > 5 >= 6;\\n   false\\n   > exp(2) >= exp(1);\\n   true\\n   > log(1) >= exp(2);\\n   false\\n\\nExample 2: \\n   > prec = 12;\\n   The precision has been set to 12 bits.\\n   > 16384.1 >= 16385.1;\\n   true\\n\\nSee also: ==, !=, >, <=, <, in, !, &&, ||, prec, max, min\\n\"\n#define HELP_GETBACKTRACE_TEXT \"Name: getbacktrace\\n==> returns the list of Sollya procedures currently run\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_getbacktrace();\\n\\nUsage: \\n   getbacktrace() : void -> list\\n\\nDescription: \\n   * The getbacktrace command allows the stack of Sollya procedures that are\\n   currently run to be inspected. When called, getbacktrace returns an\\n   ordered list of structures, each of which contains an element\\n   passed_args and an element called_proc. The element called_proc\\n   contains the Sollya object representing the procedure being run. The\\n   element passed_args contains an ordered list of all effective\\n   arguments passed to the procedure when it was called. The procedure called\\n   last (i.e., on top of the stack) comes first in the list returned\\n   by getbacktrace. When any of the procedure called takes no arguments, the\\n   passed_arg element of the corresponding structure evaluates to an empty\\n   list.\\n\\n   * When called from outside any procedure (at toplevel), getbacktrace returns\\n   an empty list.\\n\\n   * When called for a stack containing a call to a variadic procedure that was\\n   called with an infinite number of effective arguments, the corresponding\\n   passed_args element evaluates to an end-elliptic list.\\n\\nExample 1: \\n   > procedure testA() {\\n     \\t  \\\"Current backtrace:\\\";\\n     \\t  getbacktrace();\\n     };\\n   > procedure testB(X) {\\n     \\t  \\\"X = \\\", X;\\n     \\t  testA();\\n     };\\n   > procedure testC(X, Y) {\\n     \\t  \\\"X = \\\", X, \\\", Y = \\\", Y;\\n     \\t  testB(Y);\\n     };\\n   > testC(17, 42);\\n   X = 17, Y = 42\\n   X = 42\\n   Current backtrace:\\n   [|{ .passed_args = [| |], .called_proc = proc()\\n   {\\n   \\\"Current backtrace:\\\";\\n   getbacktrace();\\n   return void;\\n   } }, { .passed_args = [|42|], .called_proc = proc(X)\\n   {\\n   \\\"X = \\\", X;\\n   testA();\\n   return void;\\n   } }, { .passed_args = [|17, 42|], .called_proc = proc(X, Y)\\n   {\\n   \\\"X = \\\", X, \\\", Y = \\\", Y;\\n   testB(Y);\\n   return void;\\n   } }|]\\n\\nExample 2: \\n   > getbacktrace();\\n   [| |]\\n\\nExample 3: \\n   > procedure printnumargs(X) {\\n     \\t  var L, t;\\n     \\t  \\\"number of arguments: \\\", X;\\n     \\t  L = getbacktrace();\\n     \\t  \\\"Backtrace:\\\";\\n     \\t  for t in L do {\\n     \\t    \\\"  \\\" @ objectname(t.called_proc) @ \\\", \\\", t.passed_args;\\n     \\t  };\\n     };\\n   > procedure numargs(l = ...) {\\n     \\t  \\\"l[17] = \\\", l[17];\\n     \\t  printnumargs(length(l));\\n     };\\n   > procedure test() {\\n     \\t  numargs @ [|25, 26, 27 ...|];\\n     };\\n   > test();\\n   l[17] = 42\\n   number of arguments: infty\\n   Backtrace:\\n     printnumargs, [|infty|]\\n     numargs, [|25, 26, 27...|]\\n     test, [| |]\\n\\nSee also: proc, procedure, objectname, bind, @\\n\"\n#define HELP_GETSUPPRESSEDMESSAGES_TEXT \"Name: getsuppressedmessages\\n==> returns a list of numbers of messages that have been suppressed from message output\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_getsuppressedmessages();\\n\\nUsage: \\n   getsuppressedmessages()   : void -> list\\n\\nDescription: \\n   * The getsuppressedmessages command allows the user to inspect the state of warning\\n   and information message suppression. When called, getsuppressedmessages returns a\\n   list of integers numbers that stand for the warning and information\\n   messages that have been suppressed.  If no message is suppressed,\\n   getsuppressedmessages returns an empty list.\\n\\n   * Every Sollya warning or information message (that is not fatal to the\\n   tool's execution) has a message number. By default, these numbers are\\n   not displayed when a message is output. When message number displaying\\n   is activated using showmessagenumbers, the message numbers are\\n   displayed together with the message. This allows the user to match the\\n   numbers returned in a list by getsuppressedmessages with the actual warning and\\n   information messages.\\n\\n   * The list of message numbers returned by getsuppressedmessages is suitable to be fed\\n   into the unsuppressmessage command. This way, the user may unsuppress\\n   all warning and information messages that have been suppressed.\\n\\nExample 1: \\n   > verbosity = 1;\\n   The verbosity level has been set to 1.\\n   > 0.1;\\n   Warning: Rounding occurred when converting the constant \\\"0.1\\\" to floating-point with 165 bits.\\n   If safe computation is needed, try to increase the precision.\\n   0.1\\n   > suppressmessage(174);\\n   > 0.1;\\n   0.1\\n   > suppressmessage(407);\\n   > 0.1;\\n   0.1\\n   > getsuppressedmessages();\\n   [|174, 407|]\\n   > suppressmessage(207, 196);\\n   > getsuppressedmessages();\\n   [|174, 196, 207, 407|]\\n\\nExample 2: \\n   > suppressmessage(174, 209, 13, 24, 196);\\n   > suppressmessage([| 16, 17 |]);\\n   > suppressmessage(19);\\n   > unsuppressmessage([| 13, 17 |]);\\n   > getsuppressedmessages();\\n   [|16, 19, 24, 174, 196, 209|]\\n   > unsuppressmessage(getsuppressedmessages());\\n   > getsuppressedmessages();\\n   [| |]\\n\\nExample 3: \\n   > verbosity = 12;\\n   The verbosity level has been set to 12.\\n   > suppressmessage(174);\\n   > exp(x * 0.1);\\n   Information: no Horner simplification will be performed because the given tree is already in Horner form.\\n   exp(x * 0.1)\\n   > getsuppressedmessages();\\n   [|174|]\\n   > verbosity = 0;\\n   The verbosity level has been set to 0.\\n   > exp(x * 0.1);\\n   exp(x * 0.1)\\n   > getsuppressedmessages();\\n   [|174|]\\n\\nSee also: getsuppressedmessages, suppressmessage, unsuppressmessage, verbosity, roundingwarnings\\n\"\n#define HELP_GT_TEXT \"Name: >\\n==> greater-than operator\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_cmp_greater(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   {expr1} > {expr2} : (constant, constant) -> boolean\\n\\nParameters: \\n   {expr1} and {expr2} represent constant expressions\\n\\nDescription: \\n   * The operator > evaluates to true iff its operands {expr1} and\\n   {expr2} evaluate to two floating-point numbers a1\\n   respectively a2 with the global precision prec and\\n   a1 is greater than a2. The user should\\n   be aware of the fact that because of floating-point evaluation, the\\n   operator > is not exactly the same as the mathematical\\n   operation \\\"greater-than\\\".\\n\\nExample 1: \\n   > 5 > 4;\\n   true\\n   > 5 > 5;\\n   false\\n   > 5 > 6;\\n   false\\n   > exp(2) > exp(1);\\n   true\\n   > log(1) > exp(2);\\n   false\\n\\nExample 2: \\n   > prec = 12;\\n   The precision has been set to 12 bits.\\n   > 16385.1 > 16384.1;\\n   false\\n\\nSee also: ==, !=, >=, <=, <, in, !, &&, ||, prec, max, min\\n\"\n#define HELP_GUESSDEGREE_TEXT \"Name: guessdegree\\n==> returns the minimal degree needed for a polynomial to approximate a function with a certain error on an interval.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_guessdegree(sollya_obj_t, sollya_obj_t,\\n                                       sollya_obj_t, ...)\\n   sollya_obj_t sollya_lib_v_guessdegree(sollya_obj_t, sollya_obj_t,\\n                                         sollya_obj_t, va_list)\\n\\nUsage: \\n   guessdegree({f},{I},{eps},{w},{bound}) : (function, range, constant, function, constant) -> range\\n\\nParameters: \\n   {f} is the function to be approximated.\\n   {I} is the interval where the function must be approximated.\\n   {eps} is the maximal acceptable error.\\n   {w} (optional) is a weight function. Default is 1.\\n   {bound} (optional) is a bound on the degree. Default is currently 128.\\n\\nDescription: \\n   * guessdegree tries to find the minimal degree needed to approximate {f}\\n   on {I} by a polynomial with an error err=p*w-f whose infinity norm not\\n   greater than {eps}. More precisely, it finds n minimal such that there exists\\n   a polynomial p of degree n such that ||p*w-f|| < eps.\\n\\n   * guessdegree returns an interval: for common cases, this interval is reduced\\n   to a single number (i.e. the minimal degree). But in certain cases,\\n   guessdegree does not succeed in finding the minimal degree. In such cases the\\n   returned interval is of the form [n,p] such that:\\n      - no polynomial of degree n-1 gives an error less than {eps}.\\n      - there exists a polynomial of degree p giving an error less than {eps}.\\n\\n   * The fifth optional argument {bound} is used to prevent guessdegree from\\n   trying to find too large degrees. If guessdegree does not manage to find a\\n   degree n satisfying the error and such that n<=bound, an interval of the\\n   form [*, +Inf] is returned. Note that {bound} must be a positive integer.\\n\\nExample 1: \\n   > guessdegree(exp(x),[-1;1],1e-10);\\n   [10;10]\\n\\nExample 2: \\n   > guessdegree(exp(x),[-1;1],1e-10,default, 9);\\n   [10;infty]\\n\\nExample 3: \\n   > guessdegree(1, [-1;1], 1e-8, 1/exp(x));\\n   [8;9]\\n\\nSee also: dirtyinfnorm, remez, fpminimax, degree\\n\"\n#define HELP_HALFPRECISION_TEXT \"Names: halfprecision, HP\\n==> rounding to the nearest IEEE 754 half-precision number (binary16).\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_halfprecision(sollya_obj_t)\\n   sollya_obj_t sollya_lib_halfprecision_obj()\\n   int sollya_lib_is_halfprecision_obj(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_halfprecision(sollya_obj_t)\\n   #define SOLLYA_HP(x) sollya_lib_build_function_halfprecision(x)\\n\\nDescription: \\n   * halfprecision is both a function and a constant.\\n\\n   * As a function, it rounds its argument to the nearest IEEE 754 half-precision (i.e. IEEE754-2008 binary16) number.\\n   Subnormal numbers are supported as well as standard numbers: it is the real\\n   rounding described in the standard.\\n\\n   * As a constant, it symbolizes the half-precision format. It is used in \\n   contexts when a precision format is necessary, e.g. in the commands \\n   round and roundcoefficients. It is not supported for implementpoly.\\n   See the corresponding help pages for examples.\\n\\nExample 1: \\n   > display=binary!;\\n   > HP(0.1);\\n   1.100110011_2 * 2^(-4)\\n   > HP(4.17);\\n   1.00001011_2 * 2^(2)\\n   > HP(1.011_2 * 2^(-23));\\n   1.1_2 * 2^(-23)\\n\\nSee also: single, double, doubleextended, doubledouble, quad, tripledouble, roundcoefficients, fpminimax, implementpoly, round, printsingle\\n\"\n#define HELP_HEAD_TEXT \"Name: head\\n==> gives the first element of a list.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_head(sollya_obj_t)\\n\\nUsage: \\n   head({L}) : list -> any type\\n\\nParameters: \\n   {L} is a list.\\n\\nDescription: \\n   * head({L}) returns the first element of the list {L}. It is equivalent\\n   to L[0].\\n\\n   * If {L} is empty, the command will fail with an error.\\n\\nExample 1: \\n   > head([|1,2,3|]);\\n   1\\n   > head([|1,2...|]);\\n   1\\n\\nSee also: tail, revert\\n\"\n#define HELP_HEXADECIMAL_TEXT \"Name: hexadecimal\\n==> special value for global state display\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_hexadecimal()\\n   int sollya_lib_is_hexadecimal(sollya_obj_t)\\n\\nDescription: \\n   * hexadecimal is a special value used for the global state display.  If\\n   the global state display is equal to hexadecimal, all data will be\\n   output in hexadecimal C99/ IEEE 754-2008 notation.\\n    \\n   As any value it can be affected to a variable and stored in lists.\\n\\nSee also: decimal, dyadic, powers, binary, display\\n\"\n#define HELP_HONORCOEFFPREC_TEXT \"Name: honorcoeffprec\\n==> indicates the (forced) honoring the precision of the coefficients in implementpoly\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_honorcoeffprec()\\n   int sollya_lib_is_honorcoeffprec(sollya_obj_t)\\n\\nUsage: \\n   honorcoeffprec : honorcoeffprec\\n\\nDescription: \\n   * Used with command implementpoly, honorcoeffprec makes implementpoly honor\\n   the precision of the given polynomial. This means if a coefficient\\n   needs a double-double or a triple-double to be exactly stored,\\n   implementpoly will allocate appropriate space and use a double-double\\n   or triple-double operation even if the automatic (heuristic)\\n   determination implemented in command implementpoly indicates that the\\n   coefficient could be stored on less precision or, respectively, the\\n   operation could be performed with less precision. See implementpoly\\n   for details.\\n\\nExample 1: \\n   > verbosity = 1!;\\n   > q = implementpoly(1 - dirtysimplify(TD(1/6)) * x^2,[-1b-10;1b-10],1b-60,DD,\\\"p\\\",\\\"implementation.c\\\");\\n   Warning: at least one of the coefficients of the given polynomial has been rounded in a way\\n   that the target precision can be achieved at lower cost. Nevertheless, the implemented polynomial\\n   is different from the given one.\\n   > printexpansion(q);\\n   0x3ff0000000000000 + x^2 * 0xbfc5555555555555\\n   > r = implementpoly(1 - dirtysimplify(TD(1/6)) * x^2,[-1b-10;1b-10],1b-60,DD,\\\"p\\\",\\\"implementation.c\\\",honorcoeffprec);\\n   Warning: the inferred precision of the 2th coefficient of the polynomial is greater than\\n   the necessary precision computed for this step. This may make the automatic determination\\n   of precisions useless.\\n   > printexpansion(r);\\n   0x3ff0000000000000 + x^2 * (0xbfc5555555555555 + 0xbc65555555555555 + 0xb905555555555555)\\n\\nSee also: implementpoly, printexpansion, fpminimax\\n\"\n#define HELP_HOPITALRECURSIONS_TEXT \"Name: hopitalrecursions\\n==> controls the number of recursion steps when applying L'Hopital's rule.\\n\\nLibrary names:\\n   void sollya_lib_set_hopitalrecursions_and_print(sollya_obj_t)\\n   void sollya_lib_set_hopitalrecursions(sollya_obj_t)\\n   sollya_obj_t sollya_lib_get_hopitalrecursions()\\n\\nUsage: \\n   hopitalrecursions = {n} : integer -> void\\n   hopitalrecursions = {n} ! : integer -> void\\n   hopitalrecursions : integer\\n\\nParameters: \\n   {n} represents the number of recursions\\n\\nDescription: \\n   * hopitalrecursions is a global variable. Its value represents the number of steps of\\n   recursion that are tried when applying L'Hopital's rule. This rule is applied\\n   by the interval evaluator present in the core of Sollya (and particularly\\n   visible in commands like infnorm).\\n\\n   * If an expression of the form f/g has to be evaluated by interval \\n   arithmetic on an interval I and if f and g have a common zero\\n   in I, a direct evaluation leads to NaN.\\n   Sollya implements a safe heuristic to avoid this, based on L'Hopital's rule: in \\n   such a case, it can be shown that (f/g)(I) C (f'/g')(I). Since\\n   the same problem may exist for f'/g', the rule is applied recursively.\\n   The number of step in this recursion process is controlled by hopitalrecursions.\\n\\n   * Setting hopitalrecursions to 0 makes Sollya use this rule only once;\\n   setting it to 1 makes Sollya use the rule twice, and so on.\\n   In particular: the rule is always applied at least once, if necessary.\\n\\nExample 1: \\n   > hopitalrecursions=0;\\n   The number of recursions for Hopital's rule has been set to 0.\\n   > evaluate(log(1+x)^2/x^2,[-1/2; 1]);\\n   [-infty;infty]\\n   > hopitalrecursions=1;\\n   The number of recursions for Hopital's rule has been set to 1.\\n   > evaluate(log(1+x)^2/x^2,[-1/2; 1]);\\n   [-2.5225887222397812376689284858327062723020005374411;6.7725887222397812376689284858327062723020005374412]\\n\\nSee also: taylorrecursions, infnorm, findzeros, evaluate\\n\"\n#define HELP_HORNER_TEXT \"Name: horner\\n==> brings all polynomial subexpressions of an expression to Horner form\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_horner(sollya_obj_t)\\n\\nUsage: \\n   horner({function}) : function -> function\\n\\nParameters: \\n   {function} represents the expression to be rewritten in Horner form\\n\\nDescription: \\n   * The command horner rewrites the expression representing the function\\n   {function} in a way such that all polynomial subexpressions (or the\\n   whole expression itself, if it is a polynomial) are written in Horner\\n   form.  The command horner does not endanger the safety of\\n   computations even in Sollya's floating-point environment: the\\n   function returned is mathematically equal to the function {function}.\\n\\nExample 1: \\n   > print(horner(1 + 2 * x + 3 * x^2));\\n   1 + x * (2 + x * 3)\\n   > print(horner((x + 1)^7));\\n   1 + x * (7 + x * (21 + x * (35 + x * (35 + x * (21 + x * (7 + x))))))\\n\\nExample 2: \\n   > print(horner(exp((x + 1)^5) - log(asin(x + x^3) + x)));\\n   exp(1 + x * (5 + x * (10 + x * (10 + x * (5 + x))))) - log(asin(x * (1 + x^2)) + x)\\n\\nSee also: canonical, print, coeff, degree, autosimplify, simplify\\n\"\n#define HELP_HP_TEXT \"Name: HP\\n==> short form for halfprecision\\n\\nSee also: halfprecision\\n\"\n#define HELP_IMPLEMENTCONSTANT_TEXT \"Name: implementconstant\\n==> implements a constant in arbitrary precision\\n\\nLibrary names:\\n   void sollya_lib_implementconstant(sollya_obj_t, ...);\\n   void sollya_lib_v_implementconstant(sollya_obj_t, va_list);\\n\\nUsage: \\n   implementconstant({expr}) : constant -> void\\n   implementconstant({expr},{filename}) : (constant, string) -> void\\n   implementconstant({expr},{filename},{functionname}) : (constant, string, string) -> void\\n\\nDescription: \\n   * The command implementconstant implements the constant expression {expr} in \\n   arbitrary precision. More precisely, it generates the source code (written\\n   in C, and using MPFR) of a C function const_something with the following\\n   signature:\\n    \\n             void const_something (mpfr_ptr y, mp_prec_t prec)\\n    \\n   Let us denote by c the exact mathematical value of the constant defined by\\n   the expression {expr}. When called with arguments y and prec (where the\\n   variable y is supposed to be already initialized), the function\\n   mpfr_const_something sets the precision of y to a suitable precision and\\n   stores in it an approximate value of c such that\\n                               |y-c| <= |c|*2^(1-prec).\\n\\n   * When no filename {filename} is given or if default is given as\\n   {filename}, the source code produced by implementconstant is printed on\\n   standard output. Otherwise, when {filename} is given as a \\n   string of characters, the source code is output to a file \\n   named {filename}. If that file cannot be opened and/or \\n   written to, implementconstant fails and has no other effect.\\n\\n   * When {functionname} is given as an argument to implementconstant and\\n   {functionname} evaluates to a string of characters, the default name\\n   for the C function const_something is\\n   replaced by {functionname}. When default is given as {functionname},\\n   the default name is used nevertheless, as if no {functionname}\\n   argument were given.  When choosing a character sequence for\\n   {functionname}, the user should keep attention to the fact that\\n   {functionname} must be a valid C identifier in order to enable\\n   error-free compilation of the produced code.\\n\\n   * If {expr} refers to a constant defined with libraryconstant, the produced\\n   code uses the external code implementing this constant. The user should\\n   keep in mind that it is up to them to make sure the symbol for that \\n   external code can get resolved when the newly generated code is to \\n   be loaded.\\n\\n   * If a subexpression of {expr} evaluates to 0, implementconstant will most\\n   likely fail with an error message.\\n\\n   * implementconstant is unable to implement constant expressions {expr} that\\n   contain procedure-based functions, i.e. functions created from Sollya\\n   procedures using the function construct. If {expr} contains such a\\n   procedure-based function, implementconstant prints a warning and fails\\n   silently. The reason for this lack of functionality is that the\\n   produced C source code, which is supposed to be compiled, would have\\n   to call back to the Sollya interpreter in order to evaluate the\\n   procedure-based function.\\n\\n   * Similarly, implementconstant is currently unable to implement constant\\n   expressions {expr} that contain library-based functions, i.e.\\n   functions dynamically bound to Sollya using the library construct.\\n   If {expr} contains such a library-based function, implementconstant prints\\n   a warning and fails silently. Support for this feature is in principle\\n   feasible from a technical standpoint and might be added in a future\\n   release of Sollya.\\n\\n   * Currently, non-differentiable functions such as double, doubledouble,\\n   tripledouble, single, halfprecision, quad, doubleextended, \\n   floor, ceil, nearestint are not supported by implementconstant. \\n   If implementconstant encounters one of them, a warning message is displayed \\n   and no code is produced. However, if autosimplify equals on, it is \\n   possible that Sollya silently simplifies subexpressions of {expr} \\n   containing such functions and that implementconstant successfully produces \\n   code for evaluating {expr}.\\n\\n   * While it produces an MPFR-based C source code for {expr}, implementconstant\\n   takes architectural and system-dependent parameters into account.  For\\n   example, it checks whether literal constants figuring in {expr} can be\\n   represented on a C long int type or if they must\\n   be stored in a different manner not to affect their accuracy. These\\n   tests, performed by Sollya during execution of implementconstant, depend\\n   themselves on the architecture Sollya is running on. Users should\\n   keep this matter in mind, especially when trying to compile source\\n   code on one machine whilst it has been produced on another.\\n\\nExample 1: \\n   > implementconstant(exp(1)+log(2)/sqrt(1/10)); \\n\\n           [ The first 100 lines of the output have been removed  ]\\n\\n       modify or redistribute this generated code itself, or its skeleton,\\n       you may (at your option) remove this special exception, which will\\n       cause this generated code and its skeleton and the resulting Sollya\\n       output files to be licensed under the CeCILL-C licence without this\\n       special exception.\\n       \\n       This special exception was added by the Sollya copyright holders in\\n       version 4.1 of Sollya.\\n       \\n   */\\n   \\n   \\n   #include <mpfr.h>\\n   \\n   void\\n   const_something (mpfr_ptr y, mp_prec_t prec)\\n   {\\n     /* Declarations */\\n     mpfr_t tmp1;\\n     mpfr_t tmp2;\\n     mpfr_t tmp3;\\n     mpfr_t tmp4;\\n     mpfr_t tmp5;\\n     mpfr_t tmp6;\\n     mpfr_t tmp7;\\n   \\n     /* Initializations */\\n     mpfr_init2 (tmp2, prec+5);\\n     mpfr_init2 (tmp1, prec+3);\\n     mpfr_init2 (tmp4, prec+8);\\n     mpfr_init2 (tmp3, prec+7);\\n     mpfr_init2 (tmp6, prec+11);\\n     mpfr_init2 (tmp7, prec+11);\\n     mpfr_init2 (tmp5, prec+11);\\n   \\n     /* Core */\\n     mpfr_set_prec (tmp2, prec+4);\\n     mpfr_set_ui (tmp2, 1, MPFR_RNDN);\\n     mpfr_set_prec (tmp1, prec+3);\\n     mpfr_exp (tmp1, tmp2, MPFR_RNDN);\\n     mpfr_set_prec (tmp4, prec+8);\\n     mpfr_set_ui (tmp4, 2, MPFR_RNDN);\\n     mpfr_set_prec (tmp3, prec+7);\\n     mpfr_log (tmp3, tmp4, MPFR_RNDN);\\n     mpfr_set_prec (tmp6, prec+11);\\n     mpfr_set_ui (tmp6, 1, MPFR_RNDN);\\n     mpfr_set_prec (tmp7, prec+11);\\n     mpfr_set_ui (tmp7, 10, MPFR_RNDN);\\n     mpfr_set_prec (tmp5, prec+11);\\n     mpfr_div (tmp5, tmp6, tmp7, MPFR_RNDN);\\n     mpfr_set_prec (tmp4, prec+7);\\n     mpfr_sqrt (tmp4, tmp5, MPFR_RNDN);\\n     mpfr_set_prec (tmp2, prec+5);\\n     mpfr_div (tmp2, tmp3, tmp4, MPFR_RNDN);\\n     mpfr_set_prec (y, prec+3);\\n     mpfr_add (y, tmp1, tmp2, MPFR_RNDN);\\n   \\n     /* Cleaning stuff */\\n     mpfr_clear(tmp1);\\n     mpfr_clear(tmp2);\\n     mpfr_clear(tmp3);\\n     mpfr_clear(tmp4);\\n     mpfr_clear(tmp5);\\n     mpfr_clear(tmp6);\\n     mpfr_clear(tmp7);\\n   }\\n\\nExample 2: \\n   > implementconstant(sin(13/17),\\\"sine_of_thirteen_seventeenth.c\\\");\\n   > bashevaluate(\\\"tail -n 30 sine_of_thirteen_seventeenth.c\\\");\\n   #include <mpfr.h>\\n   \\n   void\\n   const_something (mpfr_ptr y, mp_prec_t prec)\\n   {\\n     /* Declarations */\\n     mpfr_t tmp1;\\n     mpfr_t tmp2;\\n     mpfr_t tmp3;\\n   \\n     /* Initializations */\\n     mpfr_init2 (tmp2, prec+6);\\n     mpfr_init2 (tmp3, prec+6);\\n     mpfr_init2 (tmp1, prec+6);\\n   \\n     /* Core */\\n     mpfr_set_prec (tmp2, prec+6);\\n     mpfr_set_ui (tmp2, 13, MPFR_RNDN);\\n     mpfr_set_prec (tmp3, prec+6);\\n     mpfr_set_ui (tmp3, 17, MPFR_RNDN);\\n     mpfr_set_prec (tmp1, prec+6);\\n     mpfr_div (tmp1, tmp2, tmp3, MPFR_RNDN);\\n     mpfr_set_prec (y, prec+2);\\n     mpfr_sin (y, tmp1, MPFR_RNDN);\\n   \\n     /* Cleaning stuff */\\n     mpfr_clear(tmp1);\\n     mpfr_clear(tmp2);\\n     mpfr_clear(tmp3);\\n   }\\n\\nExample 3: \\n   > implementconstant(asin(1/3 * pi),default,\\\"arcsin_of_one_third_pi\\\"); \\n\\n           [ The first 100 lines of the output have been removed  ]\\n\\n       modify or redistribute this generated code itself, or its skeleton,\\n       you may (at your option) remove this special exception, which will\\n       cause this generated code and its skeleton and the resulting Sollya\\n       output files to be licensed under the CeCILL-C licence without this\\n       special exception.\\n       \\n       This special exception was added by the Sollya copyright holders in\\n       version 4.1 of Sollya.\\n       \\n   */\\n   \\n   \\n   #include <mpfr.h>\\n   \\n   void\\n   arcsin_of_one_third_pi (mpfr_ptr y, mp_prec_t prec)\\n   {\\n     /* Declarations */\\n     mpfr_t tmp1;\\n     mpfr_t tmp2;\\n     mpfr_t tmp3;\\n   \\n     /* Initializations */\\n     mpfr_init2 (tmp2, prec+8);\\n     mpfr_init2 (tmp3, prec+8);\\n     mpfr_init2 (tmp1, prec+8);\\n   \\n     /* Core */\\n     mpfr_set_prec (tmp2, prec+8);\\n     mpfr_const_pi (tmp2, MPFR_RNDN);\\n     mpfr_set_prec (tmp3, prec+8);\\n     mpfr_set_ui (tmp3, 3, MPFR_RNDN);\\n     mpfr_set_prec (tmp1, prec+8);\\n     mpfr_div (tmp1, tmp2, tmp3, MPFR_RNDN);\\n     mpfr_set_prec (y, prec+2);\\n     mpfr_asin (y, tmp1, MPFR_RNDN);\\n   \\n     /* Cleaning stuff */\\n     mpfr_clear(tmp1);\\n     mpfr_clear(tmp2);\\n     mpfr_clear(tmp3);\\n   }\\n\\nExample 4: \\n   > implementconstant(ceil(log(19 + 1/3)),\\\"constant_code.c\\\",\\\"magic_constant\\\");\\n   > bashevaluate(\\\"tail -n -9 constant_code.c\\\");\\n   void\\n   magic_constant (mpfr_ptr y, mp_prec_t prec)\\n   {\\n     /* Initializations */\\n   \\n     /* Core */\\n     mpfr_set_prec (y, prec);\\n     mpfr_set_ui (y, 3, MPFR_RNDN);\\n   }\\n\\nExample 5: \\n   > bashexecute(\\\"gcc -fPIC -Wall -c libraryconstantexample.c -I$HOME/.local/include\\\");\\n   > bashexecute(\\\"gcc -shared -o libraryconstantexample libraryconstantexample.o -lgmp -lmpfr\\\");\\n   > euler_gamma = libraryconstant(\\\"./libraryconstantexample\\\");\\n   > implementconstant(euler_gamma^(1/3), \\\"euler.c\\\");\\n   > bashevaluate(\\\"tail -n -17 euler.c\\\");\\n   void\\n   const_something (mpfr_ptr y, mp_prec_t prec)\\n   {\\n     /* Declarations */\\n     mpfr_t tmp1;\\n   \\n     /* Initializations */\\n     mpfr_init2 (tmp1, prec+1);\\n   \\n     /* Core */\\n     euler_gamma (tmp1, prec+1);\\n     mpfr_set_prec (y, prec+2);\\n     mpfr_root (y, tmp1, 3, MPFR_RNDN);\\n   \\n     /* Cleaning stuff */\\n     mpfr_clear(tmp1);\\n   }\\n\\nSee also: implementpoly, libraryconstant, library, function, bashevaluate\\n\"\n#define HELP_IMPLEMENTPOLY_TEXT \"Name: implementpoly\\n==> implements a polynomial using double, double-double and triple-double arithmetic and generates a Gappa proof\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_implementpoly(sollya_obj_t, sollya_obj_t,\\n                                         sollya_obj_t, sollya_obj_t,\\n                                         sollya_obj_t, sollya_obj_t, ...)\\n   sollya_obj_t sollya_lib_v_implementpoly(sollya_obj_t, sollya_obj_t,\\n                                           sollya_obj_t, sollya_obj_t,\\n                                           sollya_obj_t, sollya_obj_t, va_list)\\n\\nUsage: \\n   implementpoly({polynomial}, {range}, {error bound}, {format}, {functionname}, {filename}) : (function, range, constant, D|double|DD|doubledouble|TD|tripledouble, string, string) -> function\\n   implementpoly({polynomial}, {range}, {error bound}, {format}, {functionname}, {filename}, {honor coefficient precisions}) : (function, range, constant, D|double|DD|doubledouble|TD|tripledouble, string, string, honorcoeffprec) -> function\\n   implementpoly({polynomial}, {range}, {error bound}, {format}, {functionname}, {filename}, {proof filename}) : (function, range, constant, D|double|DD|doubledouble|TD|tripledouble, string, string, string) -> function\\n   implementpoly({polynomial}, {range}, {error bound}, {format}, {functionname}, {filename}, {honor coefficient precisions}, {proof filename}) : (function, range, constant, D|double|DD|doubledouble|TD|tripledouble, string, string, honorcoeffprec, string) -> function\\n\\nDescription: \\n   * The command implementpoly implements the polynomial {polynomial} in range\\n   {range} as a function called {functionname} in C code\\n   using double, double-double and triple-double arithmetic in a way that\\n   the rounding error (estimated at its first order) is bounded by {error bound}. \\n   The produced code is output in a file named {filename}. The\\n   argument {format} indicates the double, double-double or triple-double\\n   format of the variable in which the polynomial varies, influencing\\n   also in the signature of the C function.\\n    \\n   If a seventh or eighth argument {proof filename} is given and if this\\n   argument evaluates to a variable of type string, the command\\n   implementpoly will produce a Gappa proof that the\\n   rounding error is less than the given bound. This proof will be output\\n   in Gappa syntax in a file name {proof filename}.\\n    \\n   The command implementpoly returns the polynomial that has been\\n   implemented. As the command implementpoly tries to adapt the precision\\n   needed in each evaluation step to its strict minimum and as it applies\\n   renormalization to double-double and triple-double precision\\n   coefficients to bring them to a round-to-nearest expansion form, the\\n   returned polynomial may differ from the polynomial\\n   {polynomial}. Nevertheless the difference will be small enough that\\n   the rounding error bound with regard to the polynomial {polynomial}\\n   (estimated at its first order) will be less than the given error\\n   bound.\\n    \\n   If a seventh argument {honor coefficient precisions} is given and\\n   evaluates to a variable honorcoeffprec of type honorcoeffprec,\\n   implementpoly will honor the precision of the given polynomial\\n   {polynomials}. This means if a coefficient needs a double-double or a\\n   triple-double to be exactly stored, implementpoly will allocate appropriate\\n   space and use a double-double or triple-double operation even if the\\n   automatic (heuristic) determination implemented in command implementpoly\\n   indicates that the coefficient could be stored on less precision or,\\n   respectively, the operation could be performed with less\\n   precision. The use of honorcoeffprec has advantages and\\n   disadvantages. If the polynomial {polynomial} given has not been\\n   determined by a process considering directly polynomials with\\n   floating-point coefficients, honorcoeffprec should not be\\n   indicated. The implementpoly command can then determine the needed\\n   precision using the same error estimation as used for the\\n   determination of the precisions of the operations. Generally, the\\n   coefficients will get rounded to double, double-double and\\n   triple-double precision in a way that minimizes their number and\\n   respects the rounding error bound {error bound}.  Indicating\\n   honorcoeffprec may in this case short-circuit most precision\\n   estimations leading to sub-optimal code. On the other hand, if the\\n   polynomial {polynomial} has been determined with floating-point\\n   precisions in mind, honorcoeffprec should be indicated because such\\n   polynomials often are very sensitive in terms of error propagation with\\n   regard to their coefficients' values. Indicating honorcoeffprec\\n   prevents the implementpoly command from rounding the coefficients and\\n   altering by many orders of magnitude the approximation error of the\\n   polynomial with regard to the function it approximates.\\n    \\n   The implementer behind the implementpoly command makes some assumptions on\\n   its input and verifies them. If some assumption cannot be verified,\\n   the implementation will not succeed and implementpoly will evaluate to a\\n   variable error of type error. The same behaviour is observed if\\n   some file is not writable or some other side-effect fails, e.g. if\\n   the implementer runs out of memory.\\n    \\n   As error estimation is performed only on the first order, the code\\n   produced by the implementpoly command should be considered valid iff a\\n   Gappa proof has been produced and successfully run\\n   in Gappa.\\n\\nExample 1: \\n   > implementpoly(1 - 1/6 * x^2 + 1/120 * x^4, [-1b-10;1b-10], 1b-30, D, \\\"p\\\",\\\"implementation.c\\\");\\n   1 + x^2 * (-0.166666666666666657414808128123695496469736099243164 + x^2 * 8.3333333333333332176851016015461937058717012405396e-3)\\n   > bashevaluate(\\\"tail -n -29 implementation.c\\\");\\n   #define p_coeff_0h 1.00000000000000000000000000000000000000000000000000000000000000000000000000000000e+00\\n   #define p_coeff_2h -1.66666666666666657414808128123695496469736099243164062500000000000000000000000000e-01\\n   #define p_coeff_4h 8.33333333333333321768510160154619370587170124053955078125000000000000000000000000e-03\\n   \\n   \\n   void p(double *p_resh, double x) {\\n   double p_x_0_pow2h;\\n   \\n   \\n   p_x_0_pow2h = x * x;\\n   \\n   \\n   double p_t_1_0h;\\n   double p_t_2_0h;\\n   double p_t_3_0h;\\n   double p_t_4_0h;\\n   double p_t_5_0h;\\n    \\n   \\n   \\n   p_t_1_0h = p_coeff_4h;\\n   p_t_2_0h = p_t_1_0h * p_x_0_pow2h;\\n   p_t_3_0h = p_coeff_2h + p_t_2_0h;\\n   p_t_4_0h = p_t_3_0h * p_x_0_pow2h;\\n   p_t_5_0h = p_coeff_0h + p_t_4_0h;\\n   *p_resh = p_t_5_0h;\\n   \\n   \\n   }\\n\\nExample 2: \\n   > implementpoly(1 - 1/6 * x^2 + 1/120 * x^4, [-1b-10;1b-10], 1b-30, D, \\\"p\\\",\\\"implementation.c\\\",\\\"implementation.gappa\\\");\\n   1 + x^2 * (-0.166666666666666657414808128123695496469736099243164 + x^2 * 8.3333333333333332176851016015461937058717012405396e-3)\\n\\nExample 3: \\n   > verbosity = 1!;\\n   > q = implementpoly(1 - dirtysimplify(TD(1/6)) * x^2,[-1b-10;1b-10],1b-60,DD,\\\"p\\\",\\\"implementation.c\\\");\\n   Warning: at least one of the coefficients of the given polynomial has been rounded in a way\\n   that the target precision can be achieved at lower cost. Nevertheless, the implemented polynomial\\n   is different from the given one.\\n   > printexpansion(q);\\n   0x3ff0000000000000 + x^2 * 0xbfc5555555555555\\n   > r = implementpoly(1 - dirtysimplify(TD(1/6)) * x^2,[-1b-10;1b-10],1b-60,DD,\\\"p\\\",\\\"implementation.c\\\",honorcoeffprec);\\n   Warning: the inferred precision of the 2th coefficient of the polynomial is greater than\\n   the necessary precision computed for this step. This may make the automatic determination\\n   of precisions useless.\\n   > printexpansion(r);\\n   0x3ff0000000000000 + x^2 * (0xbfc5555555555555 + 0xbc65555555555555 + 0xb905555555555555)\\n\\nExample 4: \\n   > p = 0x3ff0000000000000 + x * (0x3ff0000000000000 + x * (0x3fe0000000000000 + x * (0x3fc5555555555559 + x * (0x3fa55555555555bd + x * (0x3f811111111106e2 + x * (0x3f56c16c16bf5eb7 + x * (0x3f2a01a01a292dcd + x * (0x3efa01a0218a016a + x * (0x3ec71de360331aad + x * (0x3e927e42e3823bf3 + x * (0x3e5ae6b2710c2c9a + x * (0x3e2203730c0a7c1d + x * 0x3de5da557e0781df))))))))))));\\n   > q = implementpoly(p,[-1/2;1/2],1b-60,D,\\\"p\\\",\\\"implementation.c\\\",honorcoeffprec,\\\"implementation.gappa\\\");\\n   > if (q != p) then print(\\\"During implementation, rounding has happened.\\\") else print(\\\"Polynomial implemented as given.\\\");\\t\\n   Polynomial implemented as given.\\n\\nSee also: honorcoeffprec, roundcoefficients, double, doubledouble, tripledouble, bashevaluate, printexpansion, error, remez, fpminimax, taylor, implementconstant\\n\"\n#define HELP_INFNORM_TEXT \"Name: infnorm\\n==> computes an interval bounding the infinity norm of a function on an interval.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_infnorm(sollya_obj_t, sollya_obj_t, ...)\\n   sollya_obj_t sollya_lib_v_infnorm(sollya_obj_t, sollya_obj_t, va_list)\\n\\nUsage: \\n   infnorm({f},{I},{filename},{Ilist}) : (function, range, string, list) -> range\\n\\nParameters: \\n   {f} is a function.\\n   {I} is an interval.\\n   {filename} (optional) is the name of the file into a proof will be saved.\\n   {IList} (optional) is a list of intervals to be excluded.\\n\\nDescription: \\n   * infnorm({f},{range}) computes an interval bounding the infinity norm of the \\n   given function f on the interval I, e.g. computes an interval J\\n   such that max {|f(x)|, x in I} C J.\\n\\n   * If {filename} is given, a proof in English will be produced (and stored in file\\n   called {filename}) proving that  max {|f(x)|, x in I} C J.\\n\\n   * If a list {IList} of intervals {I1}, ... ,{In} is given, the infinity norm will\\n   be computed on I \\\\ (I1 U ... U I2).\\n\\n   * The function {f} is assumed to be at least twice continuous on {I}. More \\n   generally, if {f} is Ck, global variables hopitalrecursions and\\n   taylorrecursions must have values not greater than k.  \\n\\n   * If the interval is reduced to a single point, the result of infnorm is an \\n   interval containing the exact absolute value of {f} at this point.\\n\\n   * If the interval is not bound, the result will be [0, +Inf] \\n   which is correct but perfectly useless. infnorm is not meant to be used with \\n   infinite intervals.\\n\\n   * The result of this command depends on the global variables prec, diam,\\n   taylorrecursions and hopitalrecursions. The contribution of each variable is \\n   not easy even to analyse.\\n    \\n      - The algorithm uses interval arithmetic with precision prec. The\\n        precision should thus be set high enough to ensure that no critical\\n        cancellation will occur.\\n      - When an evaluation is performed on an interval [a,b], if the result\\n        is considered being too large, the interval is split into [a,(a+b)/2]\\n        and [(a+b)/2,b] and so on recursively. This recursion step\\n        is  not performed if the (b-a) < d*|I| where d is the value\\n        of variable diam. In other words, diam controls the minimum length of an\\n        interval during the algorithm.\\n      - To perform the evaluation of a function on an interval, Taylor's rule is\\n        applied, e.g. f([a,b]) C f(m) + [a-m, b-m]*f'([a,b])\\n        where m=(a+b)/2. This rule is recursively applied n times\\n        where n is the value of variable taylorrecursions. Roughly speaking,\\n        the evaluations will avoid decorrelation up to order n.\\n      - When a function of the form g/h has to be evaluated on an\\n        interval [a,b] and when g and h vanish at a same point\\n        z of the interval, the ratio may be defined even if the expression\\n        g(z)/h(z)=0/0 does not make any sense. In this case, L'Hopital's rule\\n        may be used and (g/h)([a,b]) C (g'/h')([a,b]).\\n        Since the same can occur with the ratio g'/h', the rule is applied\\n        recursively. The variable hopitalrecursions controls the number of \\n        recursion steps.\\n    \\n\\n   * The algorithm used for this command is quite complex to be explained here. \\n   Please find a complete description in the following article:\\n        S. Chevillard and C. Lauter\\n        A certified infinity norm for the implementation of elementary functions\\n        LIP Research Report number RR2007-26\\n        http://prunel.ccsd.cnrs.fr/ensl-00119810\\n\\n   * Users should be aware about the fact that the algorithm behind\\n   infnorm is inefficient in most cases and that other, better suited\\n   algorithms, such as supnorm, are available inside Sollya. As a\\n   matter of fact, while infnorm is maintained for compatibility reasons\\n   with legacy Sollya codes, users are advised to avoid using infnorm\\n   in new Sollya scripts and to replace it, where possible, by the\\n   supnorm command.\\n\\nExample 1: \\n   > infnorm(exp(x),[-2;3]);\\n   [20.085536923187667740928529654581717896987907838554;20.0855369231876677409285296545817178969879078385544]\\n\\nExample 2: \\n   > infnorm(exp(x),[-2;3],\\\"proof.txt\\\");\\n   [20.085536923187667740928529654581717896987907838554;20.0855369231876677409285296545817178969879078385544]\\n\\nExample 3: \\n   > infnorm(exp(x),[-2;3],[| [0;1], [2;2.5] |]);\\n   [20.085536923187667740928529654581717896987907838554;20.0855369231876677409285296545817178969879078385544]\\n\\nExample 4: \\n   > infnorm(exp(x),[-2;3],\\\"proof.txt\\\", [| [0;1], [2;2.5] |]);\\n   [20.085536923187667740928529654581717896987907838554;20.0855369231876677409285296545817178969879078385544]\\n\\nExample 5: \\n   > infnorm(exp(x),[1;1]);\\n   [2.7182818284590452353602874713526624977572470936999;2.7182818284590452353602874713526624977572470937]\\n\\nExample 6: \\n   > infnorm(exp(x), [log(0);log(1)]);\\n   [0;infty]\\n\\nSee also: prec, diam, hopitalrecursions, taylorrecursions, dirtyinfnorm, checkinfnorm, supnorm, findzeros, diff, taylorrecursions, autodiff, numberroots, taylorform\\n\"\n#define HELP_INF_TEXT \"Name: inf\\n==> gives the lower bound of an interval.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_inf(sollya_obj_t)\\n\\nUsage: \\n   inf({I}) : range -> constant\\n   inf({x}) : constant -> constant\\n\\nParameters: \\n   {I} is an interval.\\n   {x} is a real number.\\n\\nDescription: \\n   * Returns the lower bound of the interval {I}. Each bound of an interval has its \\n   own precision, so this command is exact, even if the current precision is too \\n   small to represent the bound.\\n\\n   * When called on a real number {x}, inf behaves like the identity.\\n\\nExample 1: \\n   > inf([1;3]);\\n   1\\n   > inf(0);\\n   0\\n\\nExample 2: \\n   > display=binary!;\\n   > I=[0.111110000011111_2; 1];\\n   > inf(I);\\n   1.11110000011111_2 * 2^(-1)\\n   > prec=12!;\\n   > inf(I);\\n   1.11110000011111_2 * 2^(-1)\\n\\nSee also: mid, sup, max, min\\n\"\n#define HELP_IN_TEXT \"Name: in\\n==> containment test operator\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_cmp_in(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   {expr} in {range1} : (constant, range) -> boolean\\n   {range1} in {range2} : (range, range) -> boolean\\n\\nParameters: \\n   {expr} represents a constant expression\\n   {range1} and {range2} represent ranges (intervals)\\n\\nDescription: \\n   * When its first operand is a constant expression {expr},\\n   the operator in evaluates to true iff the constant value\\n   of the expression {expr} is contained in the interval {range1}.\\n\\n   * When both its operands are ranges (intervals), \\n   the operator in evaluates to true iff all values\\n   in {range1} are contained in the interval {range2}.\\n\\n   * in is also used as a keyword for loops over the different\\n   elements of a list.\\n\\nExample 1: \\n   > 5 in [-4;7];\\n   true\\n   > 4 in [-1;1];\\n   false\\n   > 0 in sin([-17;17]);\\n   true\\n\\nExample 2: \\n   > [5;7] in [2;8];\\n   true\\n   > [2;3] in [4;5];\\n   false\\n   > [2;3] in [2.5;5];\\n   false\\n\\nExample 3: \\n   > for i in [|1,...,5|] do print(i);\\n   1\\n   2\\n   3\\n   4\\n   5\\n\\nSee also: ==, !=, >=, >, <=, <, !, &&, ||, prec, print\\n\"\n#define HELP_INTEGER_TEXT \"Name: integer\\n==> keyword representing a machine integer type \\n\\nLibrary name:\\n   SOLLYA_EXTERNALPROC_TYPE_INTEGER\\n\\nUsage: \\n   integer : type type\\n\\nDescription: \\n   * integer represents the machine integer type for declarations\\n   of external procedures externalproc.\\n    \\n   Remark that in contrast to other indicators, type indicators like\\n   integer cannot be handled outside the externalproc context.  In\\n   particular, they cannot be assigned to variables.\\n\\nSee also: externalproc, boolean, constant, function, list of, range, string, object\\n\"\n#define HELP_INTEGRAL_TEXT \"Name: integral\\n==> computes an interval bounding the integral of a function on an interval.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_integral(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   integral({f},{I}) : (function, range) -> range\\n\\nParameters: \\n   {f} is a function.\\n   {I} is an interval.\\n\\nDescription: \\n   * integral({f},{I}) returns an interval J such that the exact value of \\n   the integral of {f} on {I} lies in J.\\n\\n   * This command is safe but very inefficient. Use dirtyintegral if you just want\\n   an approximate value.\\n\\n   * The result of this command depends on the global variable diam.\\n   The method used is the following: {I} is cut into intervals of length not \\n   greater then d*|I| where d is the value\\n   of global variable diam.\\n   On each small interval {J}, an evaluation of {f} by interval is\\n   performed. The result is multiplied by the length of {J}. Finally all values \\n   are summed.\\n\\nExample 1: \\n   > sin(10);\\n   -0.54402111088936981340474766185137728168364301291622\\n   > integral(cos(x),[0;10]);\\n   [-0.54710197983579690224097637163525943075698599257333;-0.54094015130013183848150540881373370744053741191729]\\n   > diam=1e-5!;\\n   > integral(cos(x),[0;10]);\\n   [-0.54432915685955427101857780295936956775293876382777;-0.54371306401249969508039644221927489010425803173555]\\n\\nSee also: diam, dirtyintegral, prec\\n\"\n#define HELP_ISBOUND_TEXT \"Name: isbound\\n==> indicates whether a variable is bound or not.\\n\\nUsage: \\n   isbound({ident}) : boolean\\n\\nParameters: \\n   {ident} is a name.\\n\\nDescription: \\n   * isbound({ident}) returns a boolean value indicating whether the name {ident}\\n   is used or not to represent a variable. It returns true when {ident} is the \\n   name used to represent the global variable or if the name is currently used\\n   to refer to a (possibly local) variable.\\n\\n   * When a variable is defined in a block and has not been defined outside, \\n   isbound returns true when called inside the block, and false outside.\\n   Note that isbound returns true as soon as a variable has been declared with \\n   var, even if no value is actually stored in it.\\n\\n   * If {ident1} is bound to a variable and if {ident2} refers to the global \\n   variable, the command rename({ident2}, {ident1}) hides the value of {ident1}\\n   which becomes the global variable. However, if the global variable is again\\n   renamed, {ident1} gets its value back. In this case, isbound({ident1}) returns\\n   true. If {ident1} was not bound before, isbound({ident1}) returns false after\\n   that {ident1} has been renamed.\\n\\nExample 1: \\n   > isbound(x);\\n   false\\n   > isbound(f);\\n   false\\n   > isbound(g);\\n   false\\n   > f=sin(x);\\n   > isbound(x);\\n   true\\n   > isbound(f);\\n   true\\n   > isbound(g);\\n   false\\n\\nExample 2: \\n   > isbound(a);\\n   false\\n   > { var a; isbound(a); };\\n   true\\n   > isbound(a);\\n   false\\n\\nExample 3: \\n   > f=sin(x);\\n   > isbound(x);\\n   true\\n   > rename(x,y);\\n   > isbound(x);\\n   false\\n\\nExample 4: \\n   > x=1;\\n   > f=sin(y);\\n   > rename(y,x);\\n   > f;\\n   sin(x)\\n   > x;\\n   x\\n   > isbound(x);\\n   true\\n   > rename(x,y);\\n   > isbound(x);\\n   true\\n   > x;\\n   1\\n\\nSee also: rename\\n\"\n#define HELP_ISEVALUABLE_TEXT \"Name: isevaluable\\n==> tests whether a function can be evaluated at a point \\n\\nUsage: \\n   isevaluable({function}, {constant}) : (function, constant) -> boolean\\n\\nParameters: \\n   {function} represents a function\\n   {constant} represents a constant point\\n\\nDescription: \\n   * isevaluable applied to function {function} and a constant {constant}\\n   returns a boolean indicating whether or not a subsequent call to evaluate on\\n   the same function {function} and constant {constant} will produce a numerical\\n   result or NaN. This means isevaluable returns false iff evaluate will\\n   return NaN.\\n\\n   * The command isevaluable is now considered DEPRECATED in Sollya.\\n   As checks for NaNs are now possible in Sollya, the command isevaluable\\n   can be fully emulated with a call to evaluate and a couple of tests, \\n   as shown below in the last example.\\n\\nExample 1: \\n   > isevaluable(sin(pi * log(x)), 0.5);\\n   true\\n   > print(evaluate(sin(pi * log(x)), 0.5));\\n   -0.82148283122563882875872566228649962370813607461095\\n\\nExample 2: \\n   > isevaluable(sin(pi * log(x)), 0);\\n   true\\n   > print(evaluate(sin(pi * log(x)), 0));\\n   [-1;1]\\n\\nExample 3: \\n   > isevaluable(sin(pi * 1/x), 0.5);\\n   true\\n   > print(evaluate(sin(pi * 1/x), 0.5));\\n   [-3.100365765139897619749121887390789523854170596558e-13490;5.3002401585857127605350842426029223241500776302528e-13489]\\n\\nExample 4: \\n   > procedure isEvaluableEmulation(f, c) {\\n     \\t  return match evaluate(f, c) with \\n     \\t  \\t       NaN : (false)\\n     \\t\\t       [NaN;NaN] : (false)\\n     \\t\\t       default : (true);\\n     };\\n   > isEvaluableEmulation(sin(pi * log(x)), 0.5);\\n   true\\n   > isEvaluableEmulation(sin(pi * log(x)), 0);\\n   true\\n   > isEvaluableEmulation(sin(pi * log(x)), -1);\\n   false\\n\\nSee also: evaluate\\n\"\n#define HELP_LENGTH_TEXT \"Name: length\\n==> computes the length of a list or string.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_length(sollya_obj_t)\\n\\nUsage: \\n   length({L}) : list -> integer\\n   length({s}) : string -> integer\\n\\nParameters: \\n   {L} is a list.\\n   {s} is a string.\\n\\nDescription: \\n   * length returns the length of a list or a string, e.g. the number of elements\\n   or letters.\\n\\n   * The empty list or string have length 0.\\n   If {L} is an end-elliptic list, length returns +Inf.\\n\\nExample 1: \\n   > length(\\\"Hello World!\\\");\\n   12\\n\\nExample 2: \\n   > length([|1,...,5|]);\\n   5\\n\\nExample 3: \\n   > length([| |]);\\n   0\\n\\nExample 4: \\n   > length([|1,2...|]);\\n   infty\\n\\n\"\n#define HELP_LE_TEXT \"Name: <=\\n==> less-than-or-equal-to operator\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_cmp_less_equal(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   {expr1} <= {expr2} : (constant, constant) -> boolean\\n\\nParameters: \\n   {expr1} and {expr2} represent constant expressions\\n\\nDescription: \\n   * The operator <= evaluates to true iff its operands {expr1} and\\n   {expr2} evaluate to two floating-point numbers a1\\n   respectively a2 with the global precision prec and\\n   a1 is less than or equal to a2. The user should\\n   be aware of the fact that because of floating-point evaluation, the\\n   operator <= is not exactly the same as the mathematical\\n   operation \\\"less-than-or-equal-to\\\".\\n\\nExample 1: \\n   > 5 <= 4;\\n   false\\n   > 5 <= 5;\\n   true\\n   > 5 <= 6;\\n   true\\n   > exp(2) <= exp(1);\\n   false\\n   > log(1) <= exp(2);\\n   true\\n\\nExample 2: \\n   > prec = 12;\\n   The precision has been set to 12 bits.\\n   > 16385.1 <= 16384.1;\\n   true\\n\\nSee also: ==, !=, >=, >, <, in, !, &&, ||, prec, max, min\\n\"\n#define HELP_LIBRARYCONSTANT_TEXT \"Name: libraryconstant\\n==> binds an external mathematical constant to a variable in Sollya\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_libraryconstant(char *, void (*)(mpfr_t, mp_prec_t))\\n   sollya_obj_t sollya_lib_build_function_libraryconstant(char *,\\n                                                          void (*)(mpfr_t,\\n                                                                   mp_prec_t))\\n   sollya_obj_t sollya_lib_libraryconstant_with_data(char *,\\n                                                     void (*)(mpfr_t,\\n                                                              mp_prec_t,\\n                                                              void *),\\n                                                     void *,\\n                                                     void (*)(void *))\\n   sollya_obj_t sollya_lib_build_function_libraryconstant_with_data(\\n                                                     char *,\\n                                                     void (*)(mpfr_t,\\n                                                              mp_prec_t,\\n                                                              void *),\\n                                                     void *,\\n                                                     void (*)(void *))\\n\\nUsage: \\n   libraryconstant({path}) : string -> function\\n\\nDescription: \\n   * The command libraryconstant lets you extend the set of mathematical\\n   constants known to Sollya.\\n   By default, the only mathematical constant known by Sollya is pi.\\n   For particular applications, one may want to\\n   manipulate other constants, such as Euler's gamma constant, for instance.\\n\\n   * libraryconstant makes it possible to let Sollya know about new constants.\\n   In order to let it know, you have to provide an implementation of the\\n   constant you are interested in. This implementation is a C file containing\\n   a function of the form:\\n                 void my_ident(mpfr_t result, mp_prec_t prec) \\n   The semantic of this function is the following: it is an implementation of\\n   the constant in arbitrary precision.\\n   my_ident(result, prec) shall set the\\n   precision of the variable result to a suitable precision (the variable is\\n   assumed to be already initialized) and store in result an approximate value\\n   of the constant with a relative error not greater than 2^(1-prec).\\n   More precisely, if c is the exact value of the constant, the value stored\\n   in result should satisfy |result-c| <= 2^(1-prec)*|c|.\\n\\n   * You can include sollya.h in your implementation and use library \\n   functionnalities of Sollya for your implementation. However, this requires to\\n   have compiled Sollya with -fPIC in order to make the Sollya executable\\n   code position independent and to use a system on with programs, using dlopen\\n   to open dynamic routines can dynamically open themselves.\\n\\n   * To bind your constant into Sollya, you must use the same identifier as the\\n   function name used in your implementation file (my_ident in the previous\\n   example). Once the function code has been bound to an identifier, you can use\\n   a simple assignment to assign the bound identifier to yet another identifier.\\n   This way, you may use convenient names inside Sollya even if your\\n   implementation environment requires you to use a less convenient name.\\n\\n   * Once your constant is bound, it is considered by Sollya as an infinitely\\n   accurate constant (i.e. a 0-ary function, exactly like pi).\\n\\n   * The dynamic object file whose name is given to libraryconstant for binding of an\\n   external library constant may also define a destructor function int sollya_external_lib_close(void).\\n   If Sollya finds such a destructor function in the dynamic object file, it will call \\n   that function when closing the dynamic object file again. This happens when Sollya\\n   is terminated or when the current Sollya session is restarted using restart.\\n   The purpose of the destructor function is to allow the dynamically bound code\\n   to free any memory that it might have allocated before Sollya is terminated \\n   or restarted. \\n   The dynamic object file is not necessarily needed to define a destructor\\n   function. This ensure backward compatibility with older Sollya external \\n   library function object files.\\n   When defined, the destructor function is supposed to return an integer\\n   value indicating if an error has happened. Upon success, the destructor\\n   functions is to return a zero value, upon error a non-zero value.\\n\\nExample 1: \\n   > bashexecute(\\\"gcc -fPIC -Wall -c libraryconstantexample.c -I$HOME/.local/include\\\");\\n   > bashexecute(\\\"gcc -shared -o libraryconstantexample libraryconstantexample.o -lgmp -lmpfr\\\");\\n   > euler_gamma = libraryconstant(\\\"./libraryconstantexample\\\");\\n   > prec = 20!;\\n   > euler_gamma;\\n   0.577215\\n   > prec = 100!;\\n   > euler_gamma;\\n   0.577215664901532860606512090082\\n   > midpointmode = on;\\n   Midpoint mode has been activated.\\n   > [euler_gamma];\\n   0.57721566490153286060651209008~2/4~\\n\\nSee also: bashexecute, externalproc, externalplot, pi, library, evaluate, implementconstant\\n\"\n#define HELP_LIBRARY_TEXT \"Name: library\\n==> binds an external mathematical function to a variable in Sollya\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_libraryfunction(sollya_obj_t, char *,\\n                                           int (*)(mpfi_t, mpfi_t, int))\\n   sollya_obj_t sollya_lib_build_function_libraryfunction(sollya_obj_t, char *,\\n                                                          int (*)(mpfi_t,\\n                                                                  mpfi_t, int))\\n   sollya_obj_t sollya_lib_libraryfunction_with_data(\\n                                           sollya_obj_t, char *,\\n                                           int (*)(mpfi_t, mpfi_t, int, void *),\\n                                           void *, void (*)(void *))\\n   sollya_obj_t sollya_lib_build_function_libraryfunction_with_data(\\n                                           sollya_obj_t, char *,\\n                                           int (*)(mpfi_t,\\n                                                   mpfi_t, int, void *),\\n                                           void *, void (*)(void *))\\n\\nUsage: \\n   library({path}) : string -> function\\n\\nDescription: \\n   * The command library lets you extend the set of mathematical\\n   functions known to Sollya.\\n   By default, Sollya knows the most common mathematical functions such\\n   as exp, sin, erf, etc. Within Sollya, these functions may be\\n   composed. This way, Sollya should satisfy the needs of a lot of\\n   users. However, for particular applications, one may want to\\n   manipulate other functions such as Bessel functions, or functions\\n   defined by an integral or even a particular solution of an ODE.\\n\\n   * library makes it possible to let Sollya know about new functions. In\\n   order to let it know, you have to provide an implementation of the\\n   function you are interested in. This implementation is a C file containing\\n   a function of the form:\\n                 int my_ident(sollya_mpfi_t result, sollya_mpfi_t op, int n) \\n   The semantic of this function is the following: it is an implementation of\\n   the function and its derivatives in interval arithmetic.\\n   my_ident(result, I, n) shall store in result an enclosure \\n   of the image set of the n-th derivative\\n   of the function f over I: f^(n)(I) C result.\\n\\n   * The integer value returned by the function implementation currently has no\\n   meaning.\\n\\n   * You do not need to provide a working implementation for any n. Most\\n   functions of Sollya requires a relevant implementation only for f,\\n   f' and f''. For higher derivatives, its is not so critical and the\\n   implementation may just store [-Inf, +Inf] in result whenever n>2.\\n\\n   * Note that you should respect somehow interval-arithmetic standards in your\\n   implementation: result has its own precision and you should perform the \\n   intermediate computations so that result is as tight as possible.\\n\\n   * You can include sollya.h in your implementation and use library \\n   functionnalities of Sollya for your implementation. However, this requires to\\n   have compiled Sollya with -fPIC in order to make the Sollya executable code\\n   position independent and to use a system on with programs, using dlopen to\\n   open dynamic routines can dynamically open themselves. IMPORTANT NOTICE: as\\n   the code will be run in a context where a sollya session is already opened,\\n   the library functions must be used directly, without calling sollya_lib_init\\n   and sollya_lib_close (calling these functions would conflict with the\\n   current session, leading to weird and hard to debug behaviors).\\n\\n   * To bind your function into Sollya, you must use the same identifier as the\\n   function name used in your implementation file (my_ident in the previous\\n   example). Once the function code has been bound to an identifier, you can use\\n   a simple assignment to assign the bound identifier to yet another identifier.\\n   This way, you may use convenient names inside Sollya even if your\\n   implementation environment requires you to use a less convenient name.\\n\\n   * The dynamic object file whose name is given to library for binding of an\\n   external library function may also define a destructor function\\n     int sollya_external_lib_close(void).\\n   If Sollya finds such a destructor function in the dynamic object file, it\\n   will call that function when closing the dynamic object file again.\\n   This happens when Sollya is terminated or when the current Sollya session\\n   is restarted using restart.\\n   The purpose of the destructor function is to allow the dynamically bound code\\n   to free any memory that it might have allocated before Sollya is terminated \\n   or restarted. \\n   The dynamic object file is not necessarily needed to define a destructor\\n   function. This ensure backward compatibility with older Sollya external \\n   library function object files.\\n   When defined, the destructor function is supposed to return an integer\\n   value indicating if an error has happened. Upon success, the destructor\\n   functions is to return a zero value, upon error a non-zero value.\\n\\nExample 1: \\n   > bashexecute(\\\"gcc -fPIC -Wall -c libraryexample.c -I$HOME/.local/include\\\");\\n   > bashexecute(\\\"gcc -shared -o libraryexample libraryexample.o -lgmp -lmpfr\\\");\\n   > myownlog = library(\\\"./libraryexample\\\");\\n   > evaluate(log(x), 2);\\n   0.69314718055994530941723212145817656807550013436025\\n   > evaluate(myownlog(x), 2);\\n   0.69314718055994530941723212145817656807550013436025\\n\\nSee also: function, bashexecute, externalproc, externalplot, diff, evaluate, libraryconstant\\n\"\n#define HELP_LISTOF_TEXT \"Name: list of\\n==> keyword used in combination with a type keyword\\n\\nLibrary names:\\n   SOLLYA_EXTERNALPROC_TYPE_CONSTANT_LIST\\n   SOLLYA_EXTERNALPROC_TYPE_FUNCTION_LIST\\n   SOLLYA_EXTERNALPROC_TYPE_RANGE_LIST\\n   SOLLYA_EXTERNALPROC_TYPE_INTEGER_LIST\\n   SOLLYA_EXTERNALPROC_TYPE_STRING_LIST\\n   SOLLYA_EXTERNALPROC_TYPE_BOOLEAN_LIST\\n   SOLLYA_EXTERNALPROC_TYPE_OBJECT_LIST\\n\\nDescription: \\n   * list of is used in combination with one of the following keywords for\\n   indicating lists of the respective type in declarations of external\\n   procedures using externalproc: boolean, constant, function,\\n   integer, range, object and string.\\n\\nSee also: externalproc, boolean, constant, function, integer, range, string, object\\n\"\n#define HELP_LOG10_TEXT \"Name: log10\\n==> decimal logarithm.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_log10(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_log10(sollya_obj_t)\\n   #define SOLLYA_LOG10(x) sollya_lib_build_function_log10(x)\\n\\nDescription: \\n   * log10 is the decimal logarithm defined by: log10(x) = log(x)/log(10).\\n\\n   * It is defined only for x in [0; +Inf].\\n\\nSee also: log, log2\\n\"\n#define HELP_LOG1P_TEXT \"Name: log1p\\n==> translated logarithm.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_log1p(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_log1p(sollya_obj_t)\\n   #define SOLLYA_LOG1P(x) sollya_lib_build_function_log1p(x)\\n\\nDescription: \\n   * log1p is the function defined by log1p(x) = log(1+x).\\n\\n   * It is defined only for x in [-1; +Inf].\\n\\nSee also: log\\n\"\n#define HELP_LOG2_TEXT \"Name: log2\\n==> binary logarithm.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_log2(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_log2(sollya_obj_t)\\n   #define SOLLYA_LOG2(x) sollya_lib_build_function_log2(x)\\n\\nDescription: \\n   * log2 is the binary logarithm defined by: log2(x) = log(x)/log(2).\\n\\n   * It is defined only for x in [0; +Inf].\\n\\nSee also: log, log10\\n\"\n#define HELP_LOG_TEXT \"Name: log\\n==> natural logarithm.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_log(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_log(sollya_obj_t)\\n   #define SOLLYA_LOG(x) sollya_lib_build_function_log(x)\\n\\nDescription: \\n   * log is the natural logarithm defined as the inverse of the exponential\\n   function: log(y) is the unique real number x such that exp(x)=y.\\n\\n   * It is defined only for y in [0; +Inf].\\n\\nSee also: exp, log2, log10\\n\"\n#define HELP_LT_TEXT \"Name: <\\n==> less-than operator\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_cmp_less(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   {expr1} < {expr2} : (constant, constant) -> boolean\\n\\nParameters: \\n   {expr1} and {expr2} represent constant expressions\\n\\nDescription: \\n   * The operator < evaluates to true iff its operands {expr1} and\\n   {expr2} evaluate to two floating-point numbers a1\\n   respectively a2 with the global precision prec and\\n   a1 is less than a2. The user should\\n   be aware of the fact that because of floating-point evaluation, the\\n   operator < is not exactly the same as the mathematical\\n   operation \\\"less-than\\\".\\n\\nExample 1: \\n   > 5 < 4;\\n   false\\n   > 5 < 5;\\n   false\\n   > 5 < 6;\\n   true\\n   > exp(2) < exp(1);\\n   false\\n   > log(1) < exp(2);\\n   true\\n\\nExample 2: \\n   > prec = 12;\\n   The precision has been set to 12 bits.\\n   > 16384.1 < 16385.1;\\n   false\\n\\nSee also: ==, !=, >=, >, <=, in, !, &&, ||, prec, max, min\\n\"\n#define HELP_MANTISSA_TEXT \"Name: mantissa\\n==> returns the integer mantissa of a number.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_mantissa(sollya_obj_t)\\n\\nUsage: \\n   mantissa({x}) : constant -> integer\\n\\nParameters: \\n   {x} is a dyadic number.\\n\\nDescription: \\n   * mantissa(x) is by definition x if x equals 0, NaN, or Inf.\\n\\n   * If {x} is not zero, it can be uniquely written as x = m*2^e where\\n   m is an odd integer and e is an integer. mantissa(x) returns m. \\n\\nExample 1: \\n   > a=round(Pi,20,RN);\\n   > e=exponent(a);\\n   > m=mantissa(a);\\n   > m;\\n   411775\\n   > a-m*2^e;\\n   0\\n\\nSee also: exponent, precision\\n\"\n#define HELP_MAX_TEXT \"Name: max\\n==> determines which of given constant expressions has maximum value\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_max(sollya_obj_t, ...)\\n   sollya_obj_t sollya_lib_v_max(sollya_obj_t, va_list)\\n\\nUsage: \\n   max({expr1},{expr2},...,{exprn}) : (constant, constant, ..., constant) -> constant\\n   max({l}) : list -> constant\\n\\nParameters: \\n   {expr} are constant expressions.\\n   {l} is a list of constant expressions.\\n\\nDescription: \\n   * max determines which of a given set of constant expressions\\n   {expr} has maximum value. To do so, max tries to increase the\\n   precision used for evaluation until it can decide the ordering or some\\n   maximum precision is reached. In the latter case, a warning is printed\\n   indicating that there might actually be another expression that has a\\n   greater value.\\n\\n   * Even though max determines the maximum expression by evaluation, it \\n   returns the expression that is maximum as is, i.e. as an expression\\n   tree that might be evaluated to any accuracy afterwards.\\n\\n   * max can be given either an arbitrary number of constant\\n   expressions in argument or a list of constant expressions. The list\\n   however must not be end-elliptic.\\n\\n   * Users should be aware that the behavior of max follows the IEEE\\n   754-2008 standard with respect to NaNs. In particular, max\\n   evaluates to NaN if and only if all arguments of max are\\n   NaNs. This means that NaNs may disappear during computations.\\n\\nExample 1: \\n   > max(1,2,3,exp(5),log(0.25));\\n   148.41315910257660342111558004055227962348766759388\\n   > max(17);\\n   17\\n\\nExample 2: \\n   > l = [|1,2,3,exp(5),log(0.25)|];\\n   > max(l);\\n   148.41315910257660342111558004055227962348766759388\\n\\nExample 3: \\n   > print(max(exp(17),sin(62)));\\n   exp(17)\\n\\nExample 4: \\n   > verbosity = 1!;\\n   > print(max(17 + log2(13)/log2(9),17 + log(13)/log(9)));\\n   Warning: the tool is unable to decide a maximum computation by evaluation even though faithful evaluation of the terms has been possible. The terms will be considered to be equal.\\n   17 + log2(13) / log2(9)\\n\\nSee also: min, ==, !=, >=, >, <, <=, in, inf, sup\\n\"\n#define HELP_MIDPOINTMODE_TEXT \"Name: midpointmode\\n==> global variable controlling the way intervals are displayed.\\n\\nLibrary names:\\n   void sollya_lib_set_midpointmode_and_print(sollya_obj_t)\\n   void sollya_lib_set_midpointmode(sollya_obj_t)\\n   sollya_obj_t sollya_lib_get_midpointmode()\\n\\nUsage: \\n   midpointmode = {activation value} : on|off -> void\\n   midpointmode = {activation value} ! : on|off -> void\\n   midpointmode : on|off\\n\\nParameters: \\n   {activation value} enables or disables the mode.\\n\\nDescription: \\n   * midpointmode is a global variable. When its value is off, intervals are displayed\\n   as usual (in the form [a;b]).\\n   When its value is on, and if a and b have the same first significant digits,\\n   the interval in displayed in a way that lets one immediately see the common\\n   digits of the two bounds.\\n\\n   * This mode is supported only with display set to decimal. In other modes of \\n   display, midpointmode value is simply ignored.\\n\\nExample 1: \\n   > a = round(Pi,30,RD);\\n   > b = round(Pi,30,RU);\\n   > d = [a,b];\\n   > d;\\n   [3.1415926516056060791015625;3.1415926553308963775634765625]\\n   > midpointmode=on!;\\n   > d;\\n   0.314159265~1/6~e1\\n\\nSee also: on, off, roundingwarnings, display, decimal\\n\"\n#define HELP_MID_TEXT \"Name: mid\\n==> gives the middle of an interval.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_mid(sollya_obj_t)\\n\\nUsage: \\n   mid({I}) : range -> constant\\n   mid({x}) : constant -> constant\\n\\nParameters: \\n   {I} is an interval.\\n   {x} is a real number.\\n\\nDescription: \\n   * Returns the middle of the interval {I}. If the middle is not exactly\\n   representable at the current precision, the value is returned as an\\n   unevaluated expression.\\n\\n   * When called on a real number {x}, mid behaves like the identity.\\n\\nExample 1: \\n   > mid([1;3]);\\n   2\\n   > mid(17);\\n   17\\n\\nSee also: inf, sup\\n\"\n#define HELP_MIN_TEXT \"Name: min\\n==> determines which of given constant expressions has minimum value\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_min(sollya_obj_t, ...)\\n   sollya_obj_t sollya_lib_v_min(sollya_obj_t, va_list)\\n\\nUsage: \\n   min({expr1},{expr2},...,{exprn}) : (constant, constant, ..., constant) -> constant\\n   min({l}) : list -> constant\\n\\nParameters: \\n   {expr} are constant expressions.\\n   {l} is a list of constant expressions.\\n\\nDescription: \\n   * min determines which of a given set of constant expressions\\n   {expr} has minimum value. To do so, min tries to increase the\\n   precision used for evaluation until it can decide the ordering or some\\n   maximum precision is reached. In the latter case, a warning is printed\\n   indicating that there might actually be another expression that has a\\n   lesser value.\\n\\n   * Even though min determines the minimum expression by evaluation, it \\n   returns the expression that is minimum as is, i.e. as an expression\\n   tree that might be evaluated to any accuracy afterwards.\\n\\n   * min can be given either an arbitrary number of constant\\n   expressions in argument or a list of constant expressions. The list\\n   however must not be end-elliptic.\\n\\n   * Users should be aware that the behavior of min follows the IEEE\\n   754-2008 standard with respect to NaNs. In particular, min\\n   evaluates to NaN if and only if all arguments of min are\\n   NaNs. This means that NaNs may disappear during computations.\\n\\nExample 1: \\n   > min(1,2,3,exp(5),log(0.25));\\n   -1.3862943611198906188344642429163531361510002687205\\n   > min(17);\\n   17\\n\\nExample 2: \\n   > l = [|1,2,3,exp(5),log(0.25)|];\\n   > min(l);\\n   -1.3862943611198906188344642429163531361510002687205\\n\\nExample 3: \\n   > print(min(exp(17),sin(62)));\\n   sin(62)\\n\\nExample 4: \\n   > verbosity = 1!;\\n   > print(min(17 + log2(13)/log2(9),17 + log(13)/log(9)));\\n   Warning: the tool is unable to decide a minimum computation by evaluation even though faithful evaluation of the terms has been possible. The terms will be considered to be equal.\\n   17 + log(13) / log(9)\\n\\nSee also: max, ==, !=, >=, >, <, <=, in, inf, sup\\n\"\n#define HELP_MINUS_TEXT \"Name: -\\n==> subtraction function\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_sub(sollya_obj_t, sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_sub(sollya_obj_t, sollya_obj_t)\\n   #define SOLLYA_SUB(x,y) sollya_lib_build_function_sub((x), (y))\\n   sollya_obj_t sollya_lib_neg(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_neg(sollya_obj_t)\\n   #define SOLLYA_NEG(x) sollya_lib_build_function_neg(x)\\n\\nUsage: \\n   {function1} - {function2} : (function, function) -> function\\n   {interval1} - {interval2} : (range, range) -> range\\n   {interval1} - {constant} : (range, constant) -> range\\n   {interval1} - {constant} : (constant, range) -> range\\n   - {function1} : function -> function\\n   - {interval1} : range -> range\\n\\nParameters: \\n   {function1} and {function2} represent functions\\n   {interval1} and {interval2} represent intervals (ranges)\\n   {constant} represents a constant or constant expression\\n\\nDescription: \\n   * - represents the subtraction (function) on reals. \\n   The expression {function1} - {function2} stands for\\n   the function composed of the subtraction function and the two\\n   functions {function1} and {function2}, where {function1} is \\n   the subtrahend and {function2} the subtractor.\\n\\n   * - can be used for interval arithmetic on intervals\\n   (ranges). - will evaluate to an interval that safely\\n   encompasses all images of the subtraction function with arguments varying\\n   in the given intervals.  Any combination of intervals with intervals\\n   or constants (resp. constant expressions) is supported. However, it is\\n   not possible to represent families of functions using an interval as\\n   one argument and a function (varying in the free variable) as the\\n   other one.\\n\\n   * - stands also for the negation function.\\n\\nExample 1: \\n   > 5 - 2;\\n   3\\n\\nExample 2: \\n   > x - 2;\\n   -2 + x\\n\\nExample 3: \\n   > x - x;\\n   0\\n\\nExample 4: \\n   > diff(sin(x) - exp(x));\\n   cos(x) - exp(x)\\n\\nExample 5: \\n   > [1;2] - [3;4];\\n   [-3;-1]\\n   > [1;2] - 17;\\n   [-16;-15]\\n   > 13 - [-4;17];\\n   [-4;17]\\n\\nExample 6: \\n   > -exp(x);\\n   -exp(x)\\n   > -13;\\n   -13\\n   > -[13;17];\\n   [-17;-13]\\n\\nSee also: +, *, /, ^\\n\"\n#define HELP_MODEUCL_TEXT \"Name: mod\\n==> Computes the euclidian division of polynomials or numbers and returns the rest\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_euclidian_mod(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   mod({a}, {b}) : (function, function) -> function\\n\\nParameters: \\n   {a} is a constant or a polynomial.\\n   {b} is a constant or a polynomial.\\n\\nDescription: \\n   * mod({a},{b}) computes {a} - ({b} * div({a},{b})).\\n   In other words, it returns the remainder of the Euclidian division\\n   of {a} by {b}.\\n\\n   * See div for subtle cases involving polynomials whose degree can\\n   not easily be computed by the tool as their leading coefficient is\\n   given as a constant expression that is mathematically zero but for\\n   which the tool is unable to detect this fact.\\n\\nExample 1: \\n   > mod(1001, 231);\\n   77\\n   > mod(13, 17);\\n   13\\n   > mod(-14, 15);\\n   1\\n   > mod(-213, -5);\\n   -3\\n   > print(mod(23/13, 11/17));\\n   105 / 221\\n   > print(mod(exp(13),-sin(17)));\\n   exp(13) + 460177 * sin(17)\\n\\nExample 2: \\n   > mod(24 + 68 * x + 74 * x^2 + 39 * x^3 + 10 * x^4 + x^5, 4 + 4 * x + x^2);\\n   0\\n   > mod(24 + 68 * x + 74 * x^2 + 39 * x^3 + 10 * x^4 + x^5, 2 * x^3);\\n   24 + x * (68 + x * 74)\\n   > mod(x^2, x^3);\\n   x^2\\n\\nExample 3: \\n   > mod(exp(x), x^2);\\n   exp(x)\\n   > mod(x^3, sin(x));\\n   x^3\\n\\nSee also: gcd, div, numberroots\\n\"\n#define HELP_MULT_TEXT \"Name: *\\n==> multiplication function\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_mul(sollya_obj_t, sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_mul(sollya_obj_t, sollya_obj_t)\\n   #define SOLLYA_MUL(x,y) sollya_lib_build_function_mul((x), (y))\\n\\nUsage: \\n   {function1} * {function2} : (function, function) -> function\\n   {interval1} * {interval2} : (range, range) -> range\\n   {interval1} * {constant} : (range, constant) -> range\\n   {interval1} * {constant} : (constant, range) -> range\\n\\nParameters: \\n   {function1} and {function2} represent functions\\n   {interval1} and {interval2} represent intervals (ranges)\\n   {constant} represents a constant or constant expression\\n\\nDescription: \\n   * * represents the multiplication (function) on reals. \\n   The expression {function1} * {function2} stands for\\n   the function composed of the multiplication function and the two\\n   functions {function1} and {function2}.\\n\\n   * * can be used for interval arithmetic on intervals\\n   (ranges). * will evaluate to an interval that safely\\n   encompasses all images of the multiplication function with arguments varying\\n   in the given intervals.  Any combination of intervals with intervals\\n   or constants (resp. constant expressions) is supported. However, it is\\n   not possible to represent families of functions using an interval as\\n   one argument and a function (varying in the free variable) as the\\n   other one.\\n\\nExample 1: \\n   > 5 * 2;\\n   10\\n\\nExample 2: \\n   > x * 2;\\n   x * 2\\n\\nExample 3: \\n   > x * x;\\n   x^2\\n\\nExample 4: \\n   > diff(sin(x) * exp(x));\\n   sin(x) * exp(x) + exp(x) * cos(x)\\n\\nExample 5: \\n   > [1;2] * [3;4];\\n   [3;8]\\n   > [1;2] * 17;\\n   [17;34]\\n   > 13 * [-4;17];\\n   [-52;221]\\n\\nSee also: +, -, /, ^\\n\"\n#define HELP_NEARESTINT_TEXT \"Name: nearestint\\n==> the function mapping the reals to the integers nearest to them.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_nearestint(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_nearestint(sollya_obj_t)\\n   #define SOLLYA_NEARESTINT(x) sollya_lib_build_function_nearestint(x)\\n\\nDescription: \\n   * nearestint is defined as usual: nearestint(x) is the integer nearest to x, with the\\n   special rule that the even integer is chosen if there exist two integers equally near to x.\\n\\n   * It is defined for every real number x.\\n\\nSee also: ceil, floor, round, RN\\n\"\n#define HELP_NEQ_TEXT \"Name: !=\\n==> negated equality test operator\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_cmp_not_equal(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   {expr1} != {expr2} : (any type, any type) -> boolean\\n\\nParameters: \\n   {expr1} and {expr2} represent expressions\\n\\nDescription: \\n   * The operator != evaluates to true iff its operands {expr1} and\\n   {expr2} are syntactically unequal and both different from error,\\n   constant expressions that are not constants and that evaluate to two\\n   different floating-point number with the global precision prec or \\n   polynomials that are unequal while automatic expression simplification \\n   is activated. The user should be aware of the fact that because of \\n   floating-point evaluation, the operator != is not exactly the \\n   same as the negation of the mathematical equality. Further, expressions \\n   that are polynomials may not be structurally equal when != evaluates \\n   to false; in order to obtain purely structural tests, the user should \\n   deactivate automatic simplification using autosimplify.\\n    \\n   Following the IEEE 754 standard, NaN compares unequal to itself, even though\\n   this corresponds to a case when {expr1} and {expr2} are syntactically equal\\n   and different from error. Accordingly, the interval [NaN, NaN] compares\\n   unequal to itself.\\n    \\n   Note that the expressions !({expr1} != {expr2}) and {expr1} == {expr2}\\n   do not always evaluate to the same boolean value. See error for details.\\n\\nExample 1: \\n   > \\\"Hello\\\" != \\\"Hello\\\";\\n   false\\n   > \\\"Hello\\\" != \\\"Salut\\\";\\n   true\\n   > \\\"Hello\\\" != 5;\\n   true\\n   > 5 + x != 5 + x;\\n   false\\n\\nExample 2: \\n   > 1 != exp(0);\\n   false\\n   > asin(1) * 2 != pi;\\n   false\\n   > exp(5) != log(4);\\n   true\\n\\nExample 3: \\n   > sin(pi/6) != 1/2 * sqrt(3);\\n   true\\n\\nExample 4: \\n   > prec = 12;\\n   The precision has been set to 12 bits.\\n   > 16384.1 != 16385.1;\\n   false\\n\\nExample 5: \\n   > NaN != NaN;\\n   true\\n   > [NaN,NaN] != [NaN,NaN];\\n   true\\n   > error != error;\\n   false\\n\\nExample 6: \\n   > p = x + x^2;\\n   > q = x * (1 + x);\\n   > autosimplify = on;\\n   Automatic pure tree simplification has been activated.\\n   > p != q;\\n   false\\n   > autosimplify = off;\\n   Automatic pure tree simplification has been deactivated.\\n   > p != q;\\n   true\\n\\nSee also: ==, >, >=, <=, <, in, !, &&, ||, error, prec, autosimplify\\n\"\n#define HELP_NOP_TEXT \"Name: nop\\n==> no operation\\n\\nUsage: \\n   nop : void -> void\\n   nop() : void -> void\\n   nop({n}) : integer -> void\\n\\nDescription: \\n   * The command nop does nothing. This means it is an explicit parse\\n   element in the Sollya language that finally does not produce any\\n   result or side-effect.\\n\\n   * The command nop may take an optional positive integer argument\\n   {n}. The argument controls how much (useless) multiprecision\\n   floating-point multiplications Sollya performs while doing nothing.\\n   With this behaviour, nop can be used for calibration of timing\\n   tests.\\n\\n   * The keyword nop is implicit in some procedure\\n   definitions. Procedures without imperative body get parsed as if they\\n   had an imperative body containing one nop statement.\\n\\nExample 1: \\n   > nop;\\n\\nExample 2: \\n   > nop(100);\\n\\nExample 3: \\n   > succ = proc(n) { return n + 1; };\\n   > succ;\\n   proc(n)\\n   {\\n   nop;\\n   return (n) + (1);\\n   }\\n   > succ(5);\\n   6\\n\\nSee also: proc, time\\n\"\n#define HELP_NOT_TEXT \"Name: !\\n==> boolean NOT operator\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_negate(sollya_obj_t)\\n\\nUsage: \\n   ! {expr} : boolean -> boolean\\n\\nParameters: \\n   {expr} represents a boolean expression\\n\\nDescription: \\n   * ! evaluates to the boolean NOT of the boolean expression\\n   {expr}. ! {expr} evaluates to true iff {expr} does not evaluate\\n   to true.\\n\\nExample 1: \\n   > ! false;\\n   true\\n\\nExample 2: \\n   > ! (1 == exp(0));\\n   false\\n\\nSee also: &&, ||\\n\"\n#define HELP_NUMBERROOTS_TEXT \"Name: numberroots\\n==> Computes the number of roots of a polynomial in a given range.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_numberroots(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   numberroots({p}, {I}) : (function, range) -> integer\\n\\nParameters: \\n   {p} is a polynomial.\\n   {I} is an interval.\\n\\nDescription: \\n   * numberroots rigorously computes the number of roots of polynomial the p in\\n   the interval I. The technique used is Sturm's algorithm. The value returned\\n   is not just a numerical estimation of the number of roots of p in I: it is\\n   the exact number of roots.\\n\\n   * The command findzeros computes safe enclosures of all the zeros of a\\n   function, without forgetting any, but it is not guaranteed to separate them\\n   all in distinct intervals. numberroots is more accurate since it guarantees \\n   the exact number of roots. However, it does not compute them. It may be used,\\n   for instance, to certify that findzeros did not put two distinct roots in \\n   the same interval.\\n\\n   * Multiple roots are counted only once.\\n\\n   * The interval I must be bounded. The algorithm cannot handle unbounded\\n   intervals. Moreover, the interval is considered as a closed interval: if one\\n   (or both) of the endpoints of I are roots of p, they are counted.\\n\\n   * The argument p can be any expression, but if Sollya fails to prove that\\n   it is a polynomial an error is produced. Also, please note that if the\\n   coefficients of p or the endpoints of I are not exactly representable,\\n   they are first numerically evaluated, before the algorithm is used. In that\\n   case, the counted number of roots corresponds to the rounded polynomial on\\n   the rounded interval *and not* to the exact parameters given by the user.\\n   A warning is displayed to inform the user.\\n\\nExample 1: \\n   > numberroots(1+x-x^2, [1,2]);\\n   1\\n   > findzeros(1+x-x^2, [1,2]);\\n   [|[1.617919921875;1.6180419921875]|]\\n\\nExample 2: \\n   > numberroots((1+x)*(1-x), [-1,1]);\\n   2\\n   > numberroots(x^2, [-1,1]);\\n   1\\n\\nExample 3: \\n   > verbosity = 1!;\\n   > numberroots(x-pi, [0,4]);\\n   Warning: the 0th coefficient of the polynomial is neither a floating point\\n   constant nor can be evaluated without rounding to a floating point constant.\\n   Will faithfully evaluate it with the current precision (165 bits) \\n   1\\n\\nExample 4: \\n   > verbosity = 1!;\\n   > numberroots(1+x-x^2, [0, @Inf@]);\\n   Warning: the given interval must have finite bounds.\\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\\n   or its evaluation has failed because of some error on a side-effect.\\n   error\\n   > numberroots(exp(x), [0, 1]);\\n   Warning: the given function must be a polynomial in this context.\\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\\n   or its evaluation has failed because of some error on a side-effect.\\n   error\\n\\nSee also: dirtyfindzeros, findzeros, gcd\\n\"\n#define HELP_NUMERATOR_TEXT \"Name: numerator\\n==> gives the numerator of an expression\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_numerator(sollya_obj_t)\\n\\nUsage: \\n   numerator({expr}) : function -> function\\n\\nParameters: \\n   {expr} represents an expression\\n\\nDescription: \\n   * If {expr} represents a fraction {expr1}/{expr2}, numerator({expr})\\n   returns the numerator of this fraction, i.e. {expr1}.\\n    \\n   If {expr} represents something else, numerator({expr}) \\n   returns the expression itself, i.e. {expr}.\\n    \\n   Note that for all expressions {expr}, numerator({expr}) / denominator({expr})\\n   is equal to {expr}.\\n\\nExample 1: \\n   > numerator(5/3);\\n   5\\n\\nExample 2: \\n   > numerator(exp(x));\\n   exp(x)\\n\\nExample 3: \\n   > a = 5/3;\\n   > b = numerator(a)/denominator(a);\\n   > print(a);\\n   5 / 3\\n   > print(b);\\n   5 / 3\\n\\nExample 4: \\n   > a = exp(x/3);\\n   > b = numerator(a)/denominator(a);\\n   > print(a);\\n   exp(x / 3)\\n   > print(b);\\n   exp(x / 3)\\n\\nSee also: denominator, rationalmode\\n\"\n#define HELP_OBJECTNAME_TEXT \"Name: objectname\\n==> returns, given a Sollya object, a string that can be reparsed to the object\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_objectname(sollya_obj_t);\\n\\nUsage: \\n   objectname({obj}) : any type -> string\\n\\nDescription: \\n   * objectname({obj}) queries the Sollya symbol table in order to recover the\\n   name of an identifier the object {obj} is assigned to. If it succeeds, it\\n   returns a string containing the recovered identifier. In contrast, if it\\n   does not succeed, it returns a string simply containing a textual\\n   representation of {obj}.\\n\\n   * The only condition for an identifier to be eligible to be returned by\\n   objectname({obj}) is to be accessible in the scope objectname is executed in,\\n   i.e., not to be shadowed by an identifier of the same name which does not\\n   hold the object {obj}.\\n\\n   * In any case, if the string returned by objectname is given to the parse\\n   command in the same scope, the original object {obj} is recovered.\\n\\n   * objectname is particularly useful in combination with getbacktrace, when\\n   the Sollya procedure stack is to be displayed in a fashion, where\\n   procedures are identified by their name and not their procedural content.\\n\\n   * objectname may also be used to get a string representation of the free\\n   mathematical variable.\\n\\n   * If an object is simply to be cast into a string, without trying to\\n   retrieve an identifier for it, objectname is not appropriate. In this case,\\n   it suffices to concatenate it to an empty string with the @ operator.\\n\\nExample 1: \\n   > s = \\\"Hello\\\";\\n   > objectname(\\\"Hello\\\");\\n   s\\n\\nExample 2: \\n   > f = exp(x);\\n   > g = sin(x);\\n   > [| objectname(exp(x)), objectname(sin(x)), objectname(cos(x)) |];\\n   [|\\\"f\\\", \\\"g\\\", \\\"cos(x)\\\"|]\\n\\nExample 3: \\n   > o = { .f = exp(x), .I = [-1;1] };\\n   > s1 = o@\\\"\\\"; s1;\\n   { .f = exp(x), .I = [-1;1] }\\n   > s2 = objectname({ .I = [-1;1], .f = exp(x)}); s2;\\n   o\\n   > parse(s1) == parse(s2);\\n   true\\n   > write(\\\"s2 = \\\\\\\"\\\", s2, \\\"\\\\\\\" parses to \\\", parse(s2), \\\"\\\\n\\\");\\n   s2 = \\\"o\\\" parses to { .f = exp(x), .I = [-1;1] }\\n\\nExample 4: \\n   > n = 1664;\\n   > objectname(n);\\n   n\\n\\nExample 5: \\n   > f = exp(x);\\n   > g = sin(x);\\n   > procedure test() {\\n         var f;\\n         var h;\\n         f = tan(x);\\n         h = cos(x);\\n         [| objectname(exp(x)), objectname(sin(x)), objectname(cos(x)), objectname(tan(x)) |];\\n     };\\n   > test();\\n   [|\\\"exp(x)\\\", \\\"g\\\", \\\"h\\\", \\\"f\\\"|]\\n\\nExample 6: \\n   > procedure apply_proc(p, a, b) {\\n         return p(a, b);\\n     };\\n   > procedure show_trace_and_add(n, m) {\\n         var i, bt;\\n         bt = getbacktrace();\\n         write(\\\"Procedure stack:\\\\n\\\");\\n         for i from 0 to length(bt) - 1 do {\\n         \\twrite(\\\"   Procedure \\\", objectname((bt[i]).called_proc), \\\" called with \\\", length((bt[i]).passed_args), \\\" arguments\\\\n\\\");\\n         };\\n         write(\\\"\\\\n\\\");\\n         return n + m;\\n     };\\n   > procedure show_and_succ(u) {\\n     \\t  return apply_proc(show_trace_and_add, u, 1);\\n     };\\n   > show_and_succ(16);\\n   Procedure stack:\\n      Procedure show_trace_and_add called with 2 arguments\\n      Procedure apply_proc called with 3 arguments\\n      Procedure show_and_succ called with 1 arguments\\n   \\n   17\\n\\nExample 7: \\n   > f = exp(three_decker_sauerkraut_and_toadstool_sandwich_with_arsenic_sauce);\\n   > g = sin(_x_);\\n   > h = f(g);\\n   > h;\\n   exp(sin(three_decker_sauerkraut_and_toadstool_sandwich_with_arsenic_sauce))\\n   > objectname(_x_);\\n   three_decker_sauerkraut_and_toadstool_sandwich_with_arsenic_sauce\\n\\nSee also: parse, var, getbacktrace, proc, procedure, @\\n\"\n#define HELP_OBJECT_TEXT \"Name: object\\n==> keyword representing a Sollya object type \\n\\nLibrary name:\\n   SOLLYA_EXTERNALPROC_TYPE_OBJECT\\n\\nUsage: \\n   object : type type\\n\\nDescription: \\n   * object represents the Sollya object type for declarations\\n   of external procedures externalproc.\\n    \\n   Remark that in contrast to other indicators, type indicators like\\n   object cannot be handled outside the externalproc context.  In\\n   particular, they cannot be assigned to variables.\\n\\nSee also: externalproc, boolean, constant, function, list of, range, string, integer\\n\"\n#define HELP_OFF_TEXT \"Name: off\\n==> special value for certain global variables.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_off()\\n   int sollya_lib_is_off(sollya_obj_t)\\n\\nDescription: \\n   * off is a special value used to deactivate certain functionnalities\\n   of Sollya.\\n\\n   * As any value it can be affected to a variable and stored in lists.\\n\\nExample 1: \\n   > canonical=on;\\n   Canonical automatic printing output has been activated.\\n   > p=1+x+x^2;\\n   > mode=off;\\n   > p;\\n   1 + x + x^2\\n   > canonical=mode;\\n   Canonical automatic printing output has been deactivated.\\n   > p;\\n   1 + x * (1 + x)\\n\\nSee also: on, autosimplify, canonical, timing, fullparentheses, midpointmode, rationalmode, roundingwarnings, timing, dieonerrormode\\n\"\n#define HELP_ON_TEXT \"Name: on\\n==> special value for certain global variables.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_on()\\n   int sollya_lib_is_on(sollya_obj_t)\\n\\nDescription: \\n   * on is a special value used to activate certain functionnalities \\n   of Sollya.\\n\\n   * As any value it can be affected to a variable and stored in lists.\\n\\nExample 1: \\n   > p=1+x+x^2;\\n   > mode=on;\\n   > p;\\n   1 + x * (1 + x)\\n   > canonical=mode;\\n   Canonical automatic printing output has been activated.\\n   > p;\\n   1 + x + x^2\\n\\nSee also: off, autosimplify, canonical, timing, fullparentheses, midpointmode, rationalmode, roundingwarnings, timing, dieonerrormode\\n\"\n#define HELP_OR_TEXT \"Name: ||\\n==> boolean OR operator\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_or(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   {expr1} || {expr2} : (boolean, boolean) -> boolean\\n\\nParameters: \\n   {expr1} and {expr2} represent boolean expressions\\n\\nDescription: \\n   * || evaluates to the boolean OR of the two\\n   boolean expressions {expr1} and {expr2}. || evaluates to \\n   true iff at least one of {expr1} or {expr2} evaluates to true.\\n\\nExample 1: \\n   > false || false;\\n   false\\n\\nExample 2: \\n   > (1 == exp(0)) || (0 == log(1));\\n   true\\n\\nSee also: &&, !\\n\"\n#define HELP_PARSE_TEXT \"Name: parse\\n==> parses an expression contained in a string\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_parse(sollya_obj_t)\\n\\nUsage: \\n   parse({string}) : string -> function | error\\n\\nParameters: \\n   {string} represents a character sequence\\n\\nDescription: \\n   * parse({string}) parses the character sequence {string} containing\\n   an expression built on constants and base functions.\\n    \\n   If the character sequence does not contain a well-defined expression,\\n   a warning is displayed indicating a syntax error and parse returns\\n   a error of type error.\\n\\n   * The character sequence to be parsed by parse may contain commands that \\n   return expressions, including parse itself. Those commands get executed after the string has been parsed.\\n   parse({string}) will return the expression computed by the commands contained in the character \\n   sequence {string}.\\n\\nExample 1: \\n   > parse(\\\"exp(x)\\\");\\n   exp(x)\\n\\nExample 2: \\n   > text = \\\"remez(exp(x),5,[-1;1])\\\";\\n   > print(\\\"The string\\\", text, \\\"gives\\\", parse(text));\\n   The string remez(exp(x),5,[-1;1]) gives 8.7381909882756203676868315731687604903964388498642e-3 * x^5 + 4.3793696379596015478233171265365272893795005588381e-2 * x^4 + 0.16642465614952768185129433844012193925654065755905 * x^3 + 0.49919698262963614991826575452094101562044819693772 * x^2 + 1.00003834650599815466340068058231011540878088492516 * x + 1.00004475029559502606203712816558243384077522932213\\n\\nExample 3: \\n   > verbosity = 1!;\\n   > parse(\\\"5 + * 3\\\");\\n   Warning: syntax error, unexpected *. Will try to continue parsing (expecting \\\";\\\"). May leak memory.\\n   Warning: the string \\\"5 + * 3\\\" could not be parsed by the miniparser.\\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\\n   or its evaluation has failed because of some error on a side-effect.\\n   error\\n\\nSee also: execute, readfile, print, error, dieonerrormode\\n\"\n#define HELP_PERTURB_TEXT \"Name: perturb\\n==> indicates random perturbation of sampling points for externalplot\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_perturb()\\n   int sollya_lib_is_perturb(sollya_obj_t)\\n\\nUsage: \\n   perturb : perturb\\n\\nDescription: \\n   * The use of perturb in the command externalplot enables the addition\\n   of some random noise around each sampling point in externalplot.\\n    \\n   See externalplot for details.\\n\\nExample 1: \\n   > bashexecute(\\\"gcc -fPIC -c externalplotexample.c\\\");\\n   > bashexecute(\\\"gcc -shared -o externalplotexample externalplotexample.o -lgmp -lmpfr\\\");\\n   > externalplot(\\\"./externalplotexample\\\",relative,exp(x),[-1/2;1/2],12,perturb);\\n\\nSee also: externalplot, absolute, relative, bashexecute\\n\"\n#define HELP_PI_TEXT \"Name: pi\\n==> the constant Pi.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_pi()\\n   int sollya_lib_is_pi(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_pi()\\n   #define SOLLYA_PI (sollya_lib_build_function_pi())\\n\\nDescription: \\n   * pi is the constant Pi, defined as half the period of sine and cosine.\\n\\n   * In Sollya, pi is considered a 0-ary function. This way, the constant \\n   is not evaluated at the time of its definition but at the time of its use. For \\n   instance, when you define a constant or a function relating to Pi, the current\\n   precision at the time of the definition does not matter. What is important is \\n   the current precision when you evaluate the function or the constant value.\\n\\n   * Remark that when you define an interval, the bounds are first evaluated and \\n   then the interval is defined. In this case, pi will be evaluated as any \\n   other constant value at the definition time of the interval, thus using the \\n   current precision at this time.\\n\\nExample 1: \\n   > verbosity=1!; prec=12!;\\n   > a = 2*pi;\\n   > a;\\n   Warning: rounding has happened. The value displayed is a faithful rounding to 12 bits of the true result.\\n   6.283\\n   > prec=20!;\\n   > a;\\n   Warning: rounding has happened. The value displayed is a faithful rounding to 20 bits of the true result.\\n   6.28319\\n\\nExample 2: \\n   > display=binary;\\n   Display mode is binary numbers.\\n   > prec=12!;\\n   > d = [pi; 5];\\n   > d;\\n   [1.1001001_2 * 2^(1);1.01_2 * 2^(2)]\\n   > prec=20!;\\n   > d;\\n   [1.1001001_2 * 2^(1);1.01_2 * 2^(2)]\\n\\nSee also: cos, sin, tan, asin, acos, atan, evaluate, prec, libraryconstant\\n\"\n#define HELP_PLOT_TEXT \"Name: plot\\n==> plots one or several functions\\n\\nLibrary names:\\n   void sollya_lib_plot(sollya_obj_t, sollya_obj_t, ...)\\n   void sollya_lib_v_plot(sollya_obj_t, sollya_obj_t, va_list)\\n\\nUsage: \\n   plot({f1}, ... ,{fn}, {I}) : (function, ... ,function, range) -> void\\n   plot({f1}, ... ,{fn}, {I}, file, {name}) : (function, ... ,function, range, file, string) -> void\\n   plot({f1}, ... ,{fn}, {I}, postscript, {name}) : (function, ... ,function, range, postscript, string) -> void\\n   plot({f1}, ... ,{fn}, {I}, postscriptfile, {name}) : (function, ... ,function, range, postscriptfile, string) -> void\\n   plot({L}, {I}) : (list, range) -> void\\n   plot({L}, {I}, file, {name}) : (list, range, file, string) -> void\\n   plot({L}, {I}, postscript, {name}) : (list, range, postscript, string) -> void\\n   plot({L}, {I}, postscriptfile, {name}) : (list, range, postscriptfile, string) -> void\\n\\nParameters: \\n   {f1}, ..., {fn} are functions to be plotted.\\n   {L} is a list of functions to be plotted.\\n   {I} is the interval where the functions have to be plotted.\\n   {name} is a string representing the name of a file.\\n\\nDescription: \\n   * This command plots one or several functions {f1}, ... ,{fn} on an\\n   interval {I}. Functions can be either given as parameters of plot or as a\\n   list {L} which elements are functions.\\n   The functions are drawn on the same plot with different colors.\\n\\n   * If {L} contains an element that is not a function (or a constant), an error\\n   occurs.\\n\\n   * plot relies on the value of global variable points. Let n be the \\n   value of this variable. The algorithm is the following: each function is \\n   evaluated at n evenly distributed points in {I}. At each point, the \\n   computed value is a faithful rounding of the exact value with a sufficiently\\n   high precision. Each point is finally plotted.\\n   This should avoid numerical artefacts such as critical cancellations.\\n\\n   * The plot can be saved either as a data file or as a postscript file.\\n\\n   * If you use argument file with a string {name}, Sollya will save a data file\\n   called name.dat and a gnuplot directives file called name.p. Invoking gnuplot\\n   on name.p will plot the data stored in name.dat.\\n\\n   * If you use argument postscript with a string {name}, Sollya will save a \\n   postscript file called name.eps representing your plot.\\n\\n   * If you use argument postscriptfile with a string {name}, Sollya will \\n   produce the corresponding name.dat, name.p and name.eps.\\n\\n   * By default, this command uses gnuplot to produce the final plot. If Sollya\\n   is run while the environment variable SOLLYA_GNUPLOT is set, the content of\\n   that variable is used as the gnuplot binary.\\n   If your terminal is not graphic (typically if you use Sollya through \\n   ssh without -X)\\n   gnuplot should be able to detect that and produce an ASCII-art version on the\\n   standard output. If it is not the case, you can either store the plot in a\\n   postscript file to view it locally, or use asciiplot command.\\n\\n   * If every function is constant, plot will not plot them but just display\\n   their value.\\n\\n   * If the interval is reduced to a single point, plot will just display the\\n   value of the functions at this point.\\n\\nExample 1: \\n   > plot(sin(x),0,cos(x),[-Pi,Pi]);\\n\\nExample 2: \\n   > plot(sin(x),0,cos(x),[-Pi,Pi],postscriptfile,\\\"plotSinCos\\\");\\n\\nExample 3: \\n   > plot(exp(0), sin(1), [0;1]);\\n   1\\n   0.84147098480789650665250232163029899962256306079837\\n\\nExample 4: \\n   > plot(sin(x), cos(x), [1;1]);\\n   0.84147098480789650665250232163029899962256306079837\\n   0.54030230586813971740093660744297660373231042061792\\n\\nSee also: externalplot, asciiplot, file, postscript, postscriptfile, points\\n\"\n#define HELP_PLUS_TEXT \"Name: +\\n==> addition function\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_add(sollya_obj_t, sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_add(sollya_obj_t, sollya_obj_t)\\n   #define SOLLYA_ADD(x,y) sollya_lib_build_function_add((x), (y))\\n\\nUsage: \\n   {function1} + {function2} : (function, function) -> function\\n   {interval1} + {interval2} : (range, range) -> range\\n   {interval1} + {constant} : (range, constant) -> range\\n   {interval1} + {constant} : (constant, range) -> range\\n\\nParameters: \\n   {function1} and {function2} represent functions\\n   {interval1} and {interval2} represent intervals (ranges)\\n   {constant} represents a constant or constant expression\\n\\nDescription: \\n   * + represents the addition (function) on reals. \\n   The expression {function1} + {function2} stands for\\n   the function composed of the addition function and the two\\n   functions {function1} and {function2}.\\n\\n   * + can be used for interval arithmetic on intervals\\n   (ranges). + will evaluate to an interval that safely\\n   encompasses all images of the addition function with arguments varying\\n   in the given intervals.  Any combination of intervals with intervals\\n   or constants (resp. constant expressions) is supported. However, it is\\n   not possible to represent families of functions using an interval as\\n   one argument and a function (varying in the free variable) as the\\n   other one.\\n\\nExample 1: \\n   > 1 + 2;\\n   3\\n\\nExample 2: \\n   > x + 2;\\n   2 + x\\n\\nExample 3: \\n   > x + x;\\n   x * 2\\n\\nExample 4: \\n   > diff(sin(x) + exp(x));\\n   cos(x) + exp(x)\\n\\nExample 5: \\n   > [1;2] + [3;4];\\n   [4;6]\\n   > [1;2] + 17;\\n   [18;19]\\n   > 13 + [-4;17];\\n   [9;30]\\n\\nSee also: -, *, /, ^\\n\"\n#define HELP_POINTS_TEXT \"Name: points\\n==> controls the number of points chosen by Sollya in certain commands.\\n\\nLibrary names:\\n   void sollya_lib_set_points_and_print(sollya_obj_t)\\n   void sollya_lib_set_points(sollya_obj_t)\\n   sollya_obj_t sollya_lib_get_points()\\n\\nUsage: \\n   points = {n} : integer -> void\\n   points = {n} ! : integer -> void\\n   points : constant\\n\\nParameters: \\n   {n} represents the number of points\\n\\nDescription: \\n   * points is a global variable. Its value represents the number of points\\n   used in numerical algorithms of Sollya (namely dirtyinfnorm,\\n   dirtyintegral, dirtyfindzeros, plot).\\n\\nExample 1: \\n   > f=x^2*sin(1/x);\\n   > points=10;\\n   The number of points has been set to 10.\\n   > dirtyfindzeros(f, [0;1]);\\n   [|0, 0.31830988618379067153776752674502872406891929148092|]\\n   > points=100;\\n   The number of points has been set to 100.\\n   > dirtyfindzeros(f, [0;1]);\\n   [|0, 2.4485375860291590118289809749617594159147637806224e-2, 3.9788735772973833942220940843128590508614911435115e-2, 4.5472840883398667362538218106432674866988470211559e-2, 5.3051647697298445256294587790838120678153215246819e-2, 6.3661977236758134307553505349005744813783858296184e-2, 7.957747154594766788444188168625718101722982287023e-2, 0.106103295394596890512589175581676241356306430493638, 0.15915494309189533576888376337251436203445964574046, 0.31830988618379067153776752674502872406891929148092|]\\n\\nSee also: dirtyinfnorm, dirtyintegral, dirtyfindzeros, plot, diam, prec\\n\"\n#define HELP_POSTSCRIPTFILE_TEXT \"Name: postscriptfile\\n==> special value for commands plot and externalplot\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_postscriptfile()\\n   int sollya_lib_is_postscriptfile(sollya_obj_t)\\n\\nDescription: \\n   * postscriptfile is a special value used in commands plot and externalplot to save\\n   the result of the command in a data file and a postscript file.\\n\\n   * As any value it can be affected to a variable and stored in lists.\\n\\nExample 1: \\n   > savemode=postscriptfile;\\n   > name=\\\"plotSinCos\\\";\\n   > plot(sin(x),0,cos(x),[-Pi,Pi],savemode, name);\\n\\nSee also: externalplot, plot, file, postscript\\n\"\n#define HELP_POSTSCRIPT_TEXT \"Name: postscript\\n==> special value for commands plot and externalplot\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_postscript()\\n   int sollya_lib_is_postscript(sollya_obj_t)\\n\\nDescription: \\n   * postscript is a special value used in commands plot and externalplot to save\\n   the result of the command in a postscript file.\\n\\n   * As any value it can be affected to a variable and stored in lists.\\n\\nExample 1: \\n   > savemode=postscript;\\n   > name=\\\"plotSinCos\\\";\\n   > plot(sin(x),0,cos(x),[-Pi,Pi],savemode, name);\\n\\nSee also: externalplot, plot, file, postscriptfile\\n\"\n#define HELP_POWER_TEXT \"Name: ^\\n==> power function\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_pow(sollya_obj_t, sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_pow(sollya_obj_t, sollya_obj_t)\\n   #define SOLLYA_POW(x,y) sollya_lib_build_function_pow((x), (y))\\n\\nUsage: \\n   {function1} ^ {function2} : (function, function) -> function\\n   {interval1} ^ {interval2} : (range, range) -> range\\n   {interval1} ^ {constant} : (range, constant) -> range\\n   {interval1} ^ {constant} : (constant, range) -> range\\n\\nParameters: \\n   {function1} and {function2} represent functions\\n   {interval1} and {interval2} represent intervals (ranges)\\n   {constant} represents a constant or constant expression\\n\\nDescription: \\n   * ^ represents the power (function) on reals. \\n   The expression {function1} ^ {function2} stands for\\n   the function composed of the power function and the two\\n   functions {function1} and {function2}, where {function1} is\\n   the base and {function2} the exponent.\\n   If {function2} is a constant integer, ^ is defined\\n   on negative values of {function1}. Otherwise ^\\n   is defined as exp(y * log(x)).\\n\\n   * Note that whenever several ^ are composed, the priority goes\\n   to the last ^. This corresponds to the natural way of\\n   thinking when a tower of powers is written on a paper.\\n   Thus, 2^3^5 is interpreted as 2^(3^5).\\n\\n   * ^ can be used for interval arithmetic on intervals\\n   (ranges). ^ will evaluate to an interval that safely\\n   encompasses all images of the power function with arguments\\n   varying in the given intervals. If the intervals given contain points\\n   where the power function is not defined, infinities and NaNs will be\\n   produced in the output interval.  Any combination of intervals with\\n   intervals or constants (resp. constant expressions) is\\n   supported. However, it is not possible to represent families of\\n   functions using an interval as one argument and a function (varying in\\n   the free variable) as the other one.\\n\\nExample 1: \\n   > 5 ^ 2;\\n   25\\n\\nExample 2: \\n   > x ^ 2;\\n   x^2\\n\\nExample 3: \\n   > 3 ^ (-5);\\n   4.1152263374485596707818930041152263374485596707819e-3\\n\\nExample 4: \\n   > (-3) ^ (-2.5);\\n   NaN\\n\\nExample 5: \\n   > diff(sin(x) ^ exp(x));\\n   sin(x)^exp(x) * ((cos(x) * exp(x)) / sin(x) + exp(x) * log(sin(x)))\\n\\nExample 6: \\n   > 2^3^5;\\n   1.4134776518227074636666380005943348126619871175005e73\\n   > (2^3)^5;\\n   32768\\n   > 2^(3^5);\\n   1.4134776518227074636666380005943348126619871175005e73\\n\\nExample 7: \\n   > [1;2] ^ [3;4];\\n   [1;16.000000000000000000000000000000000000000000000001]\\n   > [1;2] ^ 17;\\n   [1;131072]\\n   > 13 ^ [-4;17];\\n   [3.501277966457757081334687160813696999404782745702e-5;8650415919381337933]\\n\\nSee also: +, -, *, /\\n\"\n#define HELP_POWERS_TEXT \"Name: powers\\n==> special value for global state display\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_powers()\\n   int sollya_lib_is_powers(sollya_obj_t)\\n\\nDescription: \\n   * powers is a special value used for the global state display.  If\\n   the global state display is equal to powers, all data will be\\n   output in dyadic notation with numbers displayed in a Maple and\\n   PARI/GP compatible format.\\n    \\n   As any value it can be affected to a variable and stored in lists.\\n\\nSee also: decimal, dyadic, hexadecimal, binary, display\\n\"\n#define HELP_PRECISION_TEXT \"Name: precision\\n==> returns the precision necessary to represent a number.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_precision(sollya_obj_t)\\n\\nUsage: \\n   precision({x}) : constant -> integer\\n\\nParameters: \\n   {x} is a dyadic number.\\n\\nDescription: \\n   * precision(x) is by definition |x| if x equals 0, NaN, or Inf.\\n\\n   * If {x} is not zero, it can be uniquely written as x = m*2^e where\\n   m is an odd integer and e is an integer. precision(x) returns the number\\n   of bits necessary to write m in binary (i.e. 1+floor(log2(m))).\\n\\nExample 1: \\n   > a=round(Pi,20,RN);\\n   > precision(a);\\n   19\\n   > m=mantissa(a);\\n   > 1+floor(log2(m));\\n   19\\n\\nExample 2: \\n   > a=255;\\n   > precision(a);\\n   8\\n   > m=mantissa(a);\\n   > 1+floor(log2(m));\\n   8\\n\\nExample 3: \\n   > a=256;\\n   > precision(a);\\n   1\\n   > m=mantissa(a);\\n   > 1+floor(log2(m));\\n   1\\n\\nSee also: mantissa, exponent, round\\n\"\n#define HELP_PREC_TEXT \"Name: prec\\n==> controls the precision used in numerical computations.\\n\\nLibrary names:\\n   void sollya_lib_set_prec_and_print(sollya_obj_t)\\n   void sollya_lib_set_prec(sollya_obj_t)\\n   sollya_obj_t sollya_lib_get_prec()\\n\\nDescription: \\n   * prec is a global variable. Its value represents the precision of the \\n   floating-point format used in numerical computations.\\n\\n   * Many commands try to adapt their working precision in order to have \\n   approximately n correct bits in output, where n is the value of prec.\\n\\nExample 1: \\n   > display=binary!;\\n   > prec=50;\\n   The precision has been set to 50 bits.\\n   > dirtyinfnorm(exp(x),[1;2]);\\n   1.110110001110011001001011100011010100110111011011_2 * 2^(2)\\n   > prec=100;\\n   The precision has been set to 100 bits.\\n   > dirtyinfnorm(exp(x),[1;2]);\\n   1.11011000111001100100101110001101010011011101101011011100110000110011101000111011101000100000011011_2 * 2^(2)\\n\\nSee also: evaluate, diam\\n\"\n#define HELP_PREPEND_TEXT \"Name: .:\\n==> add an element at the beginning of a list.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_prepend(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   {x}.:{L} : (any type, list) -> list\\n\\nParameters: \\n   {x} is an object of any type.\\n   {L} is a list (possibly empty).\\n\\nDescription: \\n   * .: adds the element {x} at the beginning of the list {L}.\\n\\n   * Note that since {x} may be of any type, it can be in particular a list.\\n\\nExample 1: \\n   > 1.:[|2,3,4|];\\n   [|1, 2, 3, 4|]\\n\\nExample 2: \\n   > [|1,2,3|].:[|4,5,6|];\\n   [|[|1, 2, 3|], 4, 5, 6|]\\n\\nExample 3: \\n   > 1.:[||];\\n   [|1|]\\n\\nSee also: :., @\\n\"\n#define HELP_PRINTDOUBLE_TEXT \"Name: printdouble\\n==> prints a constant value as a hexadecimal double precision number\\n\\nLibrary name:\\n   void sollya_lib_printdouble(sollya_obj_t)\\n\\nUsage: \\n   printdouble({constant}) : constant -> void\\n\\nParameters: \\n   {constant} represents a constant\\n\\nDescription: \\n   * Prints a constant value as a hexadecimal number on 16 hexadecimal\\n   digits. The hexadecimal number represents the integer equivalent to\\n   the 64 bit memory representation of the constant considered as a\\n   double precision number.\\n    \\n   If the constant value does not hold on a double precision number, it\\n   is first rounded to the nearest double precision number before\\n   displayed. A warning is displayed in this case.\\n\\nExample 1: \\n   > printdouble(3);\\n   0x4008000000000000\\n\\nExample 2: \\n   > prec=100!;\\n   > verbosity = 1!;\\n   > printdouble(exp(5));\\n   Warning: the given expression is not a constant but an expression to evaluate. A faithful evaluation to 100 bits will be used.\\n   Warning: rounding down occurred before printing a value as a double.\\n   0x40628d389970338f\\n\\nSee also: printsingle, printexpansion, double\\n\"\n#define HELP_PRINTEXPANSION_TEXT \"Name: printexpansion\\n==> prints a polynomial in Horner form with its coefficients written as a expansions of double precision numbers\\n\\nLibrary name:\\n   void sollya_lib_printexpansion(sollya_obj_t)\\n\\nUsage: \\n   printexpansion({polynomial}) : function -> void\\n\\nParameters: \\n   {polynomial} represents the polynomial to be printed\\n\\nDescription: \\n   * The command printexpansion prints the polynomial {polynomial} in Horner form\\n   writing its coefficients as expansions of double precision\\n   numbers. The double precision numbers themselves are displayed in\\n   hexadecimal memory notation (see printdouble). \\n    \\n   If some of the coefficients of the polynomial {polynomial} are not\\n   floating-point constants but constant expressions, they are evaluated\\n   to floating-point constants using the global precision prec.  If a\\n   rounding occurs in this evaluation, a warning is displayed.\\n    \\n   If the exponent range of double precision is not sufficient to display\\n   all the mantissa bits of a coefficient, the coefficient is displayed\\n   rounded and a warning is displayed.\\n    \\n   If the argument {polynomial} does not a polynomial, nothing but a\\n   warning or a newline is displayed. Constants can be displayed using\\n   printexpansion since they are polynomials of degree 0.\\n\\nExample 1: \\n   > printexpansion(roundcoefficients(taylor(exp(x),5,0),[|DD...|]));\\n   0x3ff0000000000000 + x * (0x3ff0000000000000 + x * (0x3fe0000000000000 + x * ((0x3fc5555555555555 + 0x3c65555555555555) + x * ((0x3fa5555555555555 + 0x3c45555555555555) + x * (0x3f81111111111111 + 0x3c01111111111111)))))\\n\\nExample 2: \\n   > printexpansion(remez(exp(x),5,[-1;1]));\\n   (0x3ff0002eec90e5a6 + 0x3c9ea6a6a0087757 + 0xb8eb3e644ef44998) + x * ((0x3ff00028358fd3ac + 0x3c8ffa7d96c95f7a + 0xb91da9809b13dd54 + 0x35c0000000000000) + x * ((0x3fdff2d7e6a9fea5 + 0x3c74460e4c0e4fe2 + 0x38fcd1b6b4e85bb0 + 0x3590000000000000) + x * ((0x3fc54d6733b4839e + 0x3c6654e4d8614a44 + 0xb905c7a26b66ea92 + 0xb598000000000000) + x * ((0x3fa66c209b7150a8 + 0x3c34b1bba8f78092 + 0xb8c75f6eb90dae02 + 0x3560000000000000) + x * (0x3f81e554242ab128 + 0xbc23e920a76e760c + 0x38c0589c2cae6caf + 0x3564000000000000)))))\\n\\nExample 3: \\n   > verbosity = 1!;\\n   > prec = 3500!;\\n   > printexpansion(pi);\\n   (0x400921fb54442d18 + 0x3ca1a62633145c07 + 0xb92f1976b7ed8fbc + 0x35c4cf98e804177d + 0x32631d89cd9128a5 + 0x2ec0f31c6809bbdf + 0x2b5519b3cd3a431b + 0x27e8158536f92f8a + 0x246ba7f09ab6b6a9 + 0xa0eedd0dbd2544cf + 0x1d779fb1bd1310ba + 0x1a1a637ed6b0bff6 + 0x96aa485fca40908e + 0x933e501295d98169 + 0x8fd160dbee83b4e0 + 0x8c59b6d799ae131c + 0x08f6cf70801f2e28 + 0x05963bf0598da483 + 0x023871574e69a459 + 0x8000000005702db3 + 0x8000000000000000)\\n   Warning: the expansion is not complete because of the limited exponent range of double precision.\\n   Warning: rounding occurred while printing.\\n\\nSee also: printdouble, horner, print, prec, remez, taylor, roundcoefficients, fpminimax, implementpoly\\n\"\n#define HELP_PRINT_TEXT \"Name: print\\n==> prints an expression\\n\\nUsage: \\n   print({expr1},...,{exprn}) : (any type,..., any type) -> void\\n   print({expr1},...,{exprn}) > {filename} : (any type,..., any type, string) -> void\\n   print({expr1},...,{exprn}) >> {filename} : (any type,...,any type, string) -> void\\n\\nParameters: \\n   {expr} represents an expression\\n   {filename} represents a character sequence indicating a file name\\n\\nDescription: \\n   * print({expr1},...,{exprn}) prints the expressions {expr1} through\\n   {exprn} separated by spaces and followed by a newline.\\n    \\n   If a second argument {filename} is given after a single  \\\">\\\", the\\n   displaying is not output on the standard output of Sollya but if in\\n   the file {filename} that get newly created or overwritten. If a double\\n    \\\">>\\\" is given, the output will be appended to the file {filename}.\\n    \\n   The global variables display, midpointmode and fullparentheses have\\n   some influence on the formatting of the output (see display,\\n   midpointmode and fullparentheses).\\n    \\n   Remark that if one of the expressions {expri} given in argument is of\\n   type string, the character sequence {expri} evaluates to is\\n   displayed. However, if {expri} is of type list and this list\\n   contains a variable of type string, the expression for the list\\n   is displayed, i.e.  all character sequences get displayed surrounded\\n   by double quotes (\\\"). Nevertheless, escape sequences used upon defining\\n   character sequences are interpreted immediately.\\n\\nExample 1: \\n   > print(x + 2 + exp(sin(x))); \\n   x + 2 + exp(sin(x))\\n   > print(\\\"Hello\\\",\\\"world\\\");\\n   Hello world\\n   > print(\\\"Hello\\\",\\\"you\\\", 4 + 3, \\\"other persons.\\\");\\n   Hello you 7 other persons.\\n\\nExample 2: \\n   > print(\\\"Hello\\\");\\n   Hello\\n   > print([|\\\"Hello\\\"|]);\\n   [|\\\"Hello\\\"|]\\n   > s = \\\"Hello\\\";\\n   > print(s,[|s|]);\\n   Hello [|\\\"Hello\\\"|]\\n   > t = \\\"Hello\\\\tyou\\\";\\n   > print(t,[|t|]);\\n   Hello\\tyou [|\\\"Hello\\\\tyou\\\"|]\\n\\nExample 3: \\n   > print(x + 2 + exp(sin(x))) > \\\"foo.sol\\\";\\n   > readfile(\\\"foo.sol\\\");\\n   x + 2 + exp(sin(x))\\n   \\n\\nExample 4: \\n   > print(x + 2 + exp(sin(x))) >> \\\"foo.sol\\\";\\n\\nExample 5: \\n   > display = decimal;\\n   Display mode is decimal numbers.\\n   > a = evaluate(sin(pi * x), 0.25);\\n   > b = evaluate(sin(pi * x), [0.25; 0.25 + 1b-50]);\\n   > print(a);\\n   0.70710678118654752440084436210484903928483593768847\\n   > display = binary;\\n   Display mode is binary numbers.\\n   > print(a);\\n   1.01101010000010011110011001100111111100111011110011001001000010001011001011111011000100110110011011101010100101010111110100111110001110101101111011000001011101010001_2 * 2^(-1)\\n   > display = hexadecimal;\\n   Display mode is hexadecimal numbers.\\n   > print(a);\\n   0x1.6a09e667f3bcc908b2fb1366ea957d3e3adec1751p-1\\n   > display = dyadic;\\n   Display mode is dyadic numbers.\\n   > print(a);\\n   33070006991101558613323983488220944360067107133265b-165\\n   > display = powers;\\n   Display mode is dyadic numbers in integer-power-of-2 notation.\\n   > print(a);\\n   33070006991101558613323983488220944360067107133265 * 2^(-165)\\n   > display = decimal;\\n   Display mode is decimal numbers.\\n   > midpointmode = off;\\n   Midpoint mode has been deactivated.\\n   > print(b);\\n   [0.70710678118654752440084436210484903928483593768845;0.70710678118654949743721782517557347782646274417049]\\n   > midpointmode = on;\\n   Midpoint mode has been activated.\\n   > print(b);\\n   0.7071067811865~4/5~\\n   > display = dyadic;\\n   Display mode is dyadic numbers.\\n   > print(b);\\n   [2066875436943847413332748968013809022504194195829b-161;16535003495550825444196237019385936414432675156571b-164]\\n   > display = decimal;\\n   Display mode is decimal numbers.\\n   > autosimplify = off;\\n   Automatic pure tree simplification has been deactivated.\\n   > fullparentheses = off;\\n   Full parentheses mode has been deactivated.\\n   > print(x + x * ((x + 1) + 1));\\n   x + x * (x + 1 + 1)\\n   > fullparentheses = on;\\n   Full parentheses mode has been activated.\\n   > print(x + x * ((x + 1) + 1));\\n   x + (x * ((x + 1) + 1))\\n\\nSee also: write, printexpansion, printdouble, printsingle, printxml, readfile, autosimplify, display, midpointmode, fullparentheses, evaluate, rationalmode\\n\"\n#define HELP_PRINTSINGLE_TEXT \"Name: printsingle\\n==> prints a constant value as a hexadecimal single precision number\\n\\nLibrary name:\\n   void sollya_lib_printsingle(sollya_obj_t)\\n\\nUsage: \\n   printsingle({constant}) : constant -> void\\n\\nParameters: \\n   {constant} represents a constant\\n\\nDescription: \\n   * Prints a constant value as a hexadecimal number on 8 hexadecimal\\n   digits. The hexadecimal number represents the integer equivalent to\\n   the 32 bit memory representation of the constant considered as a\\n   single precision number.\\n    \\n   If the constant value does not hold on a single precision number, it\\n   is first rounded to the nearest single precision number before it is\\n   displayed. A warning is displayed in this case.\\n\\nExample 1: \\n   > printsingle(3);\\n   0x40400000\\n\\nExample 2: \\n   > prec=100!;\\n   > verbosity = 1!;\\n   > printsingle(exp(5));\\n   Warning: the given expression is not a constant but an expression to evaluate. A faithful evaluation to 100 bits will be used.\\n   Warning: rounding up occurred before printing a value as a single.\\n   0x431469c5\\n\\nSee also: printdouble, single\\n\"\n#define HELP_PRINTXML_TEXT \"Name: printxml\\n==> prints an expression as an MathML-Content-Tree\\n\\nLibrary names:\\n   void sollya_lib_printxml(sollya_obj_t)\\n   void sollya_lib_printxml_newfile(sollya_obj_t, sollya_obj_t)\\n   void sollya_lib_printxml_appendfile(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   printxml({expr}) : function -> void\\n   printxml({expr}) > {filename} : (function, string) -> void\\n   printxml({expr}) > > {filename} : (function, string) -> void\\n\\nParameters: \\n   {expr} represents a functional expression\\n   {filename} represents a character sequence indicating a file name\\n\\nDescription: \\n   * printxml({expr}) prints the functional expression {expr} as a tree of\\n   MathML Content Definition Markups. This XML tree can be re-read in\\n   external tools or by usage of the readxml command.\\n    \\n   If a second argument {filename} is given after a single \\\">\\\", the\\n   MathML tree is not output on the standard output of Sollya but if in\\n   the file {filename} that get newly created or overwritten. If a double\\n   \\\">\\\" is given, the output will be appended to the file {filename}.\\n\\nExample 1: \\n   > printxml(x + 2 + exp(sin(x)));\\n   \\n   <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n   <!-- generated by sollya: http://sollya.org/ -->\\n   <!-- syntax: printxml(...);   example: printxml(x^2-2*x+5); -->\\n   <?xml-stylesheet type=\\\"text/xsl\\\" href=\\\"http://sollya.org/mathmlc2p-web.xsl\\\"?>\\n   <?xml-stylesheet type=\\\"text/xsl\\\" href=\\\"mathmlc2p-web.xsl\\\"?>\\n   <!-- This stylesheet allows direct web browsing of MathML-c XML files (http:// or file://) -->\\n   \\n   <math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\">\\n   <semantics>\\n   <annotation-xml encoding=\\\"MathML-Content\\\">\\n   <lambda>\\n   <bvar><ci> x </ci></bvar>\\n   <apply>\\n   <apply>\\n   <plus/>\\n   <apply>\\n   <plus/>\\n   <ci> x </ci>\\n   <cn type=\\\"integer\\\" base=\\\"10\\\"> 2 </cn>\\n   </apply>\\n   <apply>\\n   <exp/>\\n   <apply>\\n   <sin/>\\n   <ci> x </ci>\\n   </apply>\\n   </apply>\\n   </apply>\\n   </apply>\\n   </lambda>\\n   </annotation-xml>\\n   <annotation encoding=\\\"sollya/text\\\">(x + 1b1) + exp(sin(x))</annotation>\\n   </semantics>\\n   </math>\\n   \\n\\nExample 2: \\n   > printxml(x + 2 + exp(sin(x))) > \\\"foo.xml\\\";\\n\\nExample 3: \\n   > printxml(x + 2 + exp(sin(x))) >> \\\"foo.xml\\\";\\n\\nSee also: readxml, print, write\\n\"\n#define HELP_PROCEDURE_TEXT \"Name: procedure\\n==> defines and assigns a Sollya procedure\\n\\nUsage: \\n   procedure {identifier}({formal parameter1}, {formal parameter2},..., {formal parameter n}) { {procedure body} } : void -> void\\n   procedure {identifier}({formal parameter1}, {formal parameter2},..., {formal parameter n}) { {procedure body} return {expression}; } : void -> void\\n   procedure {identifier}({formal list parameter} = ...) { {procedure body} } : void -> void\\n   procedure {identifier}({formal list parameter} = ...) { {procedure body} return {expression}; } : void -> void\\n\\nParameters: \\n   {identifier} represents the name of the procedure to be defined and assigned\\n   {formal parameter1}, {formal parameter2} through {formal parameter n} represent identifiers used as formal parameters\\n   {formal list parameter} represents an identifier used as a formal parameter for the list of an arbitrary number of parameters\\n   {procedure body} represents the imperative statements in the body of the procedure\\n   {expression} represents the expression procedure shall evaluate to\\n\\nDescription: \\n   * The procedure keyword allows for defining and assigning procedures in\\n   the Sollya language. It is an abbreviation to a procedure definition\\n   using proc with the same formal parameters, procedure body and\\n   return-expression followed by an assignment of the procedure (object)\\n   to the identifier {identifier}. In particular, all rules concerning\\n   local variables declared using the var keyword apply for procedure.\\n\\nExample 1: \\n   > procedure succ(n) { return n + 1; };\\n   > succ(5);\\n   6\\n   > 3 + succ(0);\\n   4\\n   > succ;\\n   proc(n)\\n   {\\n   nop;\\n   return (n) + (1);\\n   }\\n\\nExample 2: \\n   > procedure myprint(L = ...) { var i; for i in L do i; };\\n   > myprint(\\\"Lyon\\\",\\\"Nancy\\\",\\\"Beaverton\\\",\\\"Coye-la-Foret\\\",\\\"Amberg\\\",\\\"Nizhny Novgorod\\\",\\\"Cluj-Napoca\\\");\\n   Lyon\\n   Nancy\\n   Beaverton\\n   Coye-la-Foret\\n   Amberg\\n   Nizhny Novgorod\\n   Cluj-Napoca\\n\\nSee also: proc, var, bind, getbacktrace\\n\"\n#define HELP_PROC_TEXT \"Name: proc\\n==> defines a Sollya procedure\\n\\nUsage: \\n   proc({formal parameter1}, {formal parameter2},..., {formal parameter n}) { {procedure body} } : void -> procedure\\n   proc({formal parameter1}, {formal parameter2},..., {formal parameter n}) { {procedure body} return {expression}; } : void -> procedure\\n   proc({formal list parameter} = ...) { {procedure body} } : void -> procedure\\n   proc({formal list parameter} = ...) { {procedure body} return {expression}; } : void -> procedure\\n\\nParameters: \\n   {formal parameter1}, {formal parameter2} through {formal parameter n} represent identifiers used as formal parameters\\n   {formal list parameter} represents an identifier used as a formal parameter for the list of an arbitrary number of parameters\\n   {procedure body} represents the imperative statements in the body of the procedure\\n   {expression} represents the expression proc shall evaluate to\\n\\nDescription: \\n   * The proc keyword allows for defining procedures in the Sollya\\n   language. These procedures are common Sollya objects that can be\\n   applied to actual parameters after definition. Upon such an\\n   application, the Sollya interpreter applies the actual parameters to\\n   the formal parameters {formal parameter1} through {formal parameter n}\\n   (resp. builds up the list of arguments and applies it to the list\\n   {formal list parameter}) and executes the {procedure body}. The\\n   procedure applied to actual parameters evaluates then to the\\n   expression {expression} in the return statement after the {procedure body} \\n   or to void, if no return statement is given (i.e. a return\\n   void statement is implicitly given).\\n\\n   * Sollya procedures defined by proc have no name. They can be bound\\n   to an identifier by assigning the procedure object a proc\\n   expression produces to an identifier. However, it is possible to use\\n   procedures without giving them any name. For instance, Sollya\\n   procedures, i.e. procedure objects, can be elements of lists. They can\\n   even be given as an argument to other internal Sollya procedures. See\\n   also procedure on this subject.\\n\\n   * Upon definition of a Sollya procedure using proc, no type check\\n   is performed. More precisely, the statements in {procedure body} are\\n   merely parsed but not interpreted upon procedure definition with\\n   proc. Type checks are performed once the procedure is applied to\\n   actual parameters or to void. At this time, if the procedure was\\n   defined using several different formal parameters {formal parameter 1}\\n   through {formal parameter n}, it is checked whether the number of\\n   actual parameters corresponds to the number of formal parameters. If\\n   the procedure was defined using the syntax for a procedure with an\\n   arbitrary number of parameters by giving a {formal list parameter},\\n   the number of actual arguments is not checked but only a list\\n   {formal list parameter} of appropriate length is built up. Type checks are\\n   further performed upon execution of each statement in {procedure body}\\n   and upon evaluation of the expression {expression} to be returned.\\n    \\n   Procedures defined by proc containing a quit or restart command\\n   cannot be executed (i.e. applied). Upon application of a procedure,\\n   the Sollya interpreter checks beforehand for such a statement. If one\\n   is found, the application of the procedure to its arguments evaluates\\n   to error. A warning is displayed. Remark that in contrast to other\\n   type or semantic correctness checks, this check is really performed\\n   before interpreting any other statement in the body of the procedure.\\n\\n   * Through the var keyword it is possible to declare local\\n   variables and thus to have full support of recursive procedures. This\\n   means a procedure defined using proc may contain in its {procedure body} \\n   an application of itself to some actual parameters: it suffices\\n   to assign the procedure (object) to an identifier with an appropriate\\n   name.\\n\\n   * Sollya procedures defined using proc may return other\\n   procedures. Further {procedure body} may contain assignments of\\n   locally defined procedure objects to identifiers. See var for the\\n   particular behaviour of local and global variables.\\n\\n   * The expression {expression} returned by a procedure is evaluated with\\n   regard to Sollya commands, procedures and external\\n   procedures. Simplification may be performed.  However, an application\\n   of a procedure defined by proc to actual parameters evaluates to the\\n   expression {expression} that may contain the free global variable or\\n   that may be composed.\\n\\nExample 1: \\n   > succ = proc(n) { return n + 1; };\\n   > succ(5);\\n   6\\n   > 3 + succ(0);\\n   4\\n   > succ;\\n   proc(n)\\n   {\\n   nop;\\n   return (n) + (1);\\n   }\\n\\nExample 2: \\n   > add = proc(m,n) { var res; res := m + n; return res; };\\n   > add(5,6);\\n   11\\n   > add;\\n   proc(m, n)\\n   {\\n   var res;\\n   res := (m) + (n);\\n   return res;\\n   }\\n   > verbosity = 1!;\\n   > add(3);\\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\\n   or its evaluation has failed because of some error on a side-effect.\\n   error\\n   > add(true,false);\\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\\n   or its evaluation has failed because of some error on a side-effect.\\n   Warning: the given expression or command could not be handled.\\n   error\\n\\nExample 3: \\n   > succ = proc(n) { return n + 1; };\\n   > succ(5);\\n   6\\n   > succ(x);\\n   1 + x\\n\\nExample 4: \\n   > hey = proc() { print(\\\"Hello world.\\\"); };\\n   > hey();\\n   Hello world.\\n   > print(hey());\\n   Hello world.\\n   void\\n   > hey;\\n   proc()\\n   {\\n   print(\\\"Hello world.\\\");\\n   return void;\\n   }\\n\\nExample 5: \\n   > fac = proc(n) { var res; if (n == 0) then res := 1 else res := n * fac(n - 1); return res; };\\n   > fac(5);\\n   120\\n   > fac(11);\\n   39916800\\n   > fac;\\n   proc(n)\\n   {\\n   var res;\\n   if (n) == (0) then\\n   res := 1\\n   else\\n   res := (n) * (fac((n) - (1)));\\n   return res;\\n   }\\n\\nExample 6: \\n   > myprocs = [| proc(m,n) { return m + n; }, proc(m,n) { return m - n; } |];\\n   > (myprocs[0])(5,6);\\n   11\\n   > (myprocs[1])(5,6);\\n   -1\\n   > succ = proc(n) { return n + 1; };\\n   > pred = proc(n) { return n - 1; };\\n   > applier = proc(p,n) { return p(n); };\\n   > applier(succ,5);\\n   6\\n   > applier(pred,5);\\n   4\\n\\nExample 7: \\n   > verbosity = 1!;\\n   > myquit = proc(n) { print(n); quit; };\\n   > myquit;\\n   proc(n)\\n   {\\n   print(n);\\n   quit;\\n   return void;\\n   }\\n   > myquit(5);\\n   Warning: a quit or restart command may not be part of a procedure body.\\n   The procedure will not be executed.\\n   Warning: an error occurred while executing a procedure.\\n   Warning: the given expression or command could not be handled.\\n   error\\n\\nExample 8: \\n   > printsucc = proc(n) { var succ; succ = proc(n) { return n + 1; }; print(\\\"Successor of\\\",n,\\\"is\\\",succ(n)); };\\n   > printsucc(5);\\n   Successor of 5 is 6\\n\\nExample 9: \\n   > makeadd = proc(n) { var add; print(\\\"n =\\\",n); add = proc(m,n) { return n + m; }; return add; };\\n   > makeadd(4);\\n   n = 4\\n   proc(m, n)\\n   {\\n   nop;\\n   return (n) + (m);\\n   }\\n   > (makeadd(4))(5,6);\\n   n = 4\\n   11\\n\\nExample 10: \\n   > sumall = proc(L = ...) { var acc, i; acc = 0; for i in L do acc = acc + i; return acc; };\\n   > sumall;\\n   proc(L = ...)\\n   {\\n   var acc, i;\\n   acc = 0;\\n   for i in L do\\n   acc = (acc) + (i);\\n   return acc;\\n   }\\n   > sumall();\\n   0\\n   > sumall(2);\\n   2\\n   > sumall(2,5);\\n   7\\n   > sumall(2,5,7,9,16);\\n   39\\n   > sumall @ [|1,...,10|];\\n   55\\n\\nSee also: return, externalproc, void, quit, restart, var, @, bind, getbacktrace, error\\n\"\n#define HELP_QD_TEXT \"Name: QD\\n==> short form for quad\\n\\nSee also: quad\\n\"\n#define HELP_QUAD_TEXT \"Names: quad, QD\\n==> rounding to the nearest IEEE 754 quad (binary128).\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_quad(sollya_obj_t)\\n   sollya_obj_t sollya_lib_quad_obj()\\n   int sollya_lib_is_quad_obj(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_quad(sollya_obj_t)\\n   #define SOLLYA_QD(x) sollya_lib_build_function_quad(x)\\n\\nDescription: \\n   * quad is both a function and a constant.\\n\\n   * As a function, it rounds its argument to the nearest IEEE 754 quad precision (i.e. IEEE754-2008 binary128) number.\\n   Subnormal numbers are supported as well as standard numbers: it is the real\\n   rounding described in the standard.\\n\\n   * As a constant, it symbolizes the quad precision format. It is used in \\n   contexts when a precision format is necessary, e.g. in the commands \\n   round and roundcoefficients. It is not supported for implementpoly.\\n   See the corresponding help pages for examples.\\n\\nExample 1: \\n   > display=binary!;\\n   > QD(0.1);\\n   1.100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001101_2 * 2^(-4)\\n   > QD(4.17);\\n   1.000010101110000101000111101011100001010001111010111000010100011110101110000101000111101011100001010001111010111_2 * 2^(2)\\n   > QD(1.011_2 * 2^(-16493));\\n   1.1_2 * 2^(-16493)\\n\\nSee also: halfprecision, single, double, doubleextended, doubledouble, tripledouble, roundcoefficients, implementpoly, fpminimax, round, printsingle\\n\"\n#define HELP_QUIT_TEXT \"Name: quit\\n==> quits Sollya\\n\\nUsage: \\n   quit : void -> void\\n\\nDescription: \\n   * The command quit, when executed, stops the execution of a Sollya\\n   script and leaves the Sollya interpreter unless the quit command \\n   is executed in a Sollya script read into a main Sollya script by\\n   execute or #include.\\n    \\n   Upon exiting the Sollya interpreter, all state is thrown away, all\\n   memory is deallocated, all bound libraries are unbound and the\\n   temporary files produced by plot and externalplot are deleted.\\n    \\n   If the quit command does not lead to a halt of the Sollya\\n   interpreter, a warning is displayed.\\n\\nExample 1: \\n   > quit;\\n\\nSee also: restart, execute, plot, externalplot, return\\n\"\n#define HELP_RANGE_TEXT \"Name: range\\n==> keyword representing a range type \\n\\nLibrary name:\\n   SOLLYA_EXTERNALPROC_TYPE_RANGE\\n\\nUsage: \\n   range : type type\\n\\nDescription: \\n   * range represents the range type for declarations\\n   of external procedures by means of externalproc.\\n    \\n   Remark that in contrast to other indicators, type indicators like\\n   range cannot be handled outside the externalproc context.  In\\n   particular, they cannot be assigned to variables.\\n\\nSee also: externalproc, boolean, constant, function, integer, list of, string, object\\n\"\n#define HELP_RATIONALAPPROX_TEXT \"Name: rationalapprox\\n==> returns a fraction close to a given number.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_rationalapprox(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   rationalapprox({x},{n}) : (constant, integer) -> function\\n\\nParameters: \\n   {x} is a number to approximate.\\n   {n} is a integer (representing a format).\\n\\nDescription: \\n   * rationalapprox({x},{n}) returns a constant function of the form a/b where a and b are\\n   integers. The value a/b is an approximation of {x}. The quality of this \\n   approximation is determined by the parameter {n} that indicates the number of\\n   correct bits that a/b should have.\\n\\n   * The command is not safe in the sense that it is not ensured that the error \\n   between a/b and {x} is less than 2^(-n).\\n\\n   * The following algorithm is used: {x} is first rounded downwards and upwards to\\n   a format of {n} bits, thus obtaining an interval [xl,xu]. This interval is then\\n   developed into a continued fraction as far as the representation is the same\\n   for every elements of [xl,xu]. The corresponding fraction is returned.\\n\\n   * Since rational numbers are not a primitive object of Sollya, the fraction is\\n   returned as a constant function. This can be quite amazing, because Sollya\\n   immediately simplifies a constant function by evaluating it when the constant\\n   has to be displayed.\\n   To avoid this, you can use print (that displays the expression representing\\n   the constant and not the constant itself) or the commands numerator \\n   and denominator.\\n\\nExample 1: \\n   > pi10 = rationalapprox(Pi,10);\\n   > pi50 = rationalapprox(Pi,50);\\n   > pi100 = rationalapprox(Pi,100);\\n   > print( pi10, \\\": \\\", dirtysimplify(floor(-log2(abs(pi10-Pi)/Pi))), \\\"bits.\\\" );\\n   3.140625 :  11 bits.\\n   > print( pi50, \\\": \\\", dirtysimplify(floor(-log2(abs(pi50-Pi)/Pi))), \\\"bits.\\\" );\\n   85563208 / 27235615 :  51 bits.\\n   > print( pi100, \\\": \\\", dirtysimplify(floor(-log2(abs(pi100-Pi)/Pi))), \\\"bits.\\\" );\\n   4422001152019829 / 1407566683404023 :  100 bits.\\n\\nExample 2: \\n   > a=0.1;\\n   > b=rationalapprox(a,4);\\n   > numerator(b); denominator(b);\\n   1\\n   10\\n   > print(dirtysimplify(floor(-log2(abs((b-a)/a)))), \\\"bits.\\\");\\n   166 bits.\\n\\nSee also: print, numerator, denominator, rationalmode\\n\"\n#define HELP_RATIONALMODE_TEXT \"Name: rationalmode\\n==> global variable controlling if rational arithmetic is used or not.\\n\\nLibrary names:\\n   void sollya_lib_set_rationalmode_and_print(sollya_obj_t)\\n   void sollya_lib_set_rationalmode(sollya_obj_t)\\n   sollya_obj_t sollya_lib_get_rationalmode()\\n\\nUsage: \\n   rationalmode = {activation value} : on|off -> void\\n   rationalmode = {activation value} ! : on|off -> void\\n   rationalmode : on|off\\n\\nParameters: \\n   {activation value} controls if rational arithmetic should be used or not\\n\\nDescription: \\n   * rationalmode is a global variable. When its value is off, which is the default,\\n   Sollya will not use rational arithmetic to simplify expressions. All computations,\\n   including the evaluation of constant expressions given on the Sollya prompt,\\n   will be performed using floating-point and interval arithmetic. Constant expressions\\n   will be approximated by floating-point numbers, which are in most cases faithful \\n   roundings of the expressions, when shown at the prompt. \\n\\n   * When the value of the global variable rationalmode is on, Sollya will use \\n   rational arithmetic when simplifying expressions. Constant expressions, given \\n   at the Sollya prompt, will be simplified to rational numbers and displayed \\n   as such when they are in the set of the rational numbers. Otherwise, flaoting-point\\n   and interval arithmetic will be used to compute a floating-point approximation,\\n   which is in most cases a faithful rounding of the constant expression.\\n\\nExample 1: \\n   > rationalmode=off!;\\n   > 19/17 + 3/94;\\n   1.1495619524405506883604505632040050062578222778473\\n   > rationalmode=on!;\\n   > 19/17 + 3/94;\\n   1837 / 1598\\n\\nExample 2: \\n   > rationalmode=off!;\\n   > exp(19/17 + 3/94);\\n   3.1568097739551413675470920894482427634032816281442\\n   > rationalmode=on!;\\n   > exp(19/17 + 3/94);\\n   3.1568097739551413675470920894482427634032816281442\\n\\nSee also: on, off, numerator, denominator, simplify, rationalapprox, autosimplify\\n\"\n#define HELP_RD_TEXT \"Name: RD\\n==> constant representing rounding-downwards mode.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_round_down()\\n   int sollya_lib_is_round_down(sollya_obj_t)\\n\\nDescription: \\n   * RD is used in command round to specify that the value x must be rounded\\n   to the greatest floating-point number y such that y <= x.\\n\\nExample 1: \\n   > display=binary!;\\n   > round(Pi,20,RD);\\n   1.1001001000011111101_2 * 2^(1)\\n\\nSee also: RZ, RU, RN, round, floor\\n\"\n#define HELP_READFILE_TEXT \"Name: readfile\\n==> reads the content of a file into a string variable\\n\\nUsage: \\n   readfile({filename}) : string -> string\\n\\nParameters: \\n   {filename} represents a character sequence indicating a file name\\n\\nDescription: \\n   * readfile opens the file indicated by {filename}, reads it and puts its\\n   contents in a character sequence of type string that is returned.\\n    \\n   If the file indicated by {filename} cannot be opened for reading, a\\n   warning is displayed and readfile evaluates to an error variable of\\n   type error.\\n\\nExample 1: \\n   > print(\\\"Hello world\\\") > \\\"myfile.txt\\\";\\n   > t = readfile(\\\"myfile.txt\\\"); \\n   > t;\\n   Hello world\\n   \\n\\nExample 2: \\n   > verbosity=1!;\\n   > readfile(\\\"afile.txt\\\");\\n   Warning: the file \\\"afile.txt\\\" could not be opened for reading.\\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\\n   or its evaluation has failed because of some error on a side-effect.\\n   error\\n\\nSee also: parse, execute, write, print, bashexecute, error\\n\"\n#define HELP_READXML_TEXT \"Name: readxml\\n==> reads an expression written as a MathML-Content-Tree in a file\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_readxml(sollya_obj_t)\\n\\nUsage: \\n   readxml({filename}) : string -> function | error\\n\\nParameters: \\n   {filename} represents a character sequence indicating a file name\\n\\nDescription: \\n   * readxml({filename}) reads the first occurrence of a lambda\\n   application with one bounded variable on applications of the supported\\n   basic functions in file {filename} and returns it as a Sollya\\n   functional expression.\\n    \\n   If the file {filename} does not contain a valid MathML-Content tree,\\n   readxml tries to find an \\\"annotation encoding\\\" markup of type\\n   \\\"sollya/text\\\". If this annotation contains a character sequence\\n   that can be parsed by parse, readxml returns that expression.  Otherwise\\n   readxml displays a warning and returns an error variable of type\\n   error.\\n\\nExample 1: \\n   > readxml(\\\"readxmlexample.xml\\\");\\n   2 + x + exp(sin(x))\\n\\nSee also: printxml, readfile, parse, error\\n\"\n#define HELP_RELATIVE_TEXT \"Name: relative\\n==> indicates a relative error for externalplot, fpminimax or supnorm\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_relative()\\n   int sollya_lib_is_relative(sollya_obj_t)\\n\\nUsage: \\n   relative : absolute|relative\\n\\nDescription: \\n   * The use of relative in the command externalplot indicates that during\\n   plotting in externalplot a relative error is to be considered.\\n    \\n   See externalplot for details.\\n\\n   * Used with fpminimax, relative indicates that fpminimax must try to minimize\\n   the relative error.\\n    \\n   See fpminimax for details.\\n\\n   * When given in argument to supnorm, relative indicates that a relative error\\n   is to be considered for supremum norm computation.\\n    \\n   See supnorm for details.\\n\\nExample 1: \\n   > bashexecute(\\\"gcc -fPIC -c externalplotexample.c\\\");\\n   > bashexecute(\\\"gcc -shared -o externalplotexample externalplotexample.o -lgmp -lmpfr\\\");\\n   > externalplot(\\\"./externalplotexample\\\",absolute,exp(x),[-1/2;1/2],12,perturb);\\n\\nSee also: externalplot, fpminimax, absolute, bashexecute, supnorm\\n\"\n#define HELP_REMEZ_TEXT \"Name: remez\\n==> computes the minimax of a function on an interval.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_remez(sollya_obj_t, sollya_obj_t, sollya_obj_t, ...)\\n   sollya_obj_t sollya_lib_v_remez(sollya_obj_t, sollya_obj_t, sollya_obj_t,\\n                                   va_list)\\n\\nUsage: \\n   remez({f}, {n}, {range}, {w}, {quality}, {bounds}) : (function, integer, range, function, constant, range) -> function\\n   remez({f}, {L}, {range}, {w}, {quality}, {bounds}) : (function, list, range, function, constant, range) -> function\\n\\nParameters: \\n   {f} is the function to be approximated\\n   {n} is the degree of the polynomial that must approximate {f}\\n   {L} is a list of integers or a list of functions and indicates the basis for the approximation of {f}\\n   {range} is the interval where the function must be approximated\\n   {w} (optional) is a weight function. Default is 1.\\n   {quality} (optional) is a parameter that controls the quality of the returned polynomial {p}, with respect to the exact minimax p*. Default is 1e-5.\\n   {bounds} (optional) is a parameter that allows the user to make the algorithm stop earlier, whenever a given accuracy is reached or a given accuracy is proved unreachable. Default is [0, +Inf].\\n\\nDescription: \\n   * remez computes an approximation of the function f with respect to\\n   the weight function w on the interval {range}. More precisely, it\\n   searches p such that ||p*w-f|| is\\n   (almost) minimal among all p of a certain form. The norm is\\n   the infinity norm, e.g. ||g|| = max {|g(x)|, x in {range}}.\\n\\n   * If w=1 (the default case), it consists in searching the best\\n   polynomial approximation of f with respect to the absolute error.\\n   If f=1 and w is of the form 1/g, it consists in\\n   searching the best polynomial approximation of g with respect to the\\n   relative error.\\n\\n   * If n is given, p is searched among the polynomials with degree not\\n   greater than n.\\n   If {L} is given and is a list of integers, p is searched as a linear\\n   combination of monomials X^k where k belongs to {L}.\\n   In the case when {L} is a list of integers, it may contain ellipses but\\n   cannot be end-elliptic.\\n   If {L} is given and is a list of functions g_k, p is searched as a\\n   linear combination of the g_k. In that case {L} cannot contain ellipses.\\n   It is the user responsibility to check that the g_k are linearly independent\\n   over the interval {range}. Moreover, the functions w*g_k must be at least\\n   twice differentiable over {range}. If these conditions are not fulfilled, the\\n   algorithm might fail or even silently return a result as if it successfully\\n   found the minimax, though the returned p is not optimal.\\n\\n   * The polynomial is obtained by a convergent iteration called Remez'\\n   algorithm (and an extension of this algorithm, due to Stiefel).\\n   The algorithm computes a sequence p1, ..., pk, ...\\n   such that ek = ||pk*w-f|| converges towards\\n   the optimal value e. The algorithm is stopped when the relative error\\n   between ek and e is less than {quality}.\\n\\n   * The optional argument {bounds} is an interval [satisfying_err, target_err]\\n   with the following behavior: \\n     - if, during the algorithm, we manage to prove that target_err is\\n       unreachable, we stop the algorithm returning the last computed\\n       polynomial.\\n     - if, during the algorithm, we obtain a polynomial with an error smaller\\n       than satisfying_err, we stop the algorithm returning that polynomial.\\n     - otherwise we loop until we find an optimal polynomial with the required\\n       quality, as usual. \\n   Examples of use: \\n     [0, +Inf] (compute the optimal polynomial with the required quality) \\n     [target_err] (stops as soon as a polynomial achieving target_err is\\n                   obtained or as soon as such a polynomial is proved not to\\n                   exist). \\n     [0, target_err] (finds the optimal polynomial, but provided that its error\\n                      is smaller than target_err). \\n     [satisfying_err, +Inf] (stops as soon as a polynomial achieving\\n                             satisfying_err is obtained. If such a polynomial\\n                             does not exist, returns the optimal polynomial).\\n\\nExample 1: \\n   > p = remez(exp(x),5,[0;1]);\\n   > degree(p);\\n   5\\n   > dirtyinfnorm(p-exp(x),[0;1]);\\n   1.1295698151096148707171193829266077607222634589363e-6\\n\\nExample 2: \\n   > p = remez(1,[|0,2,4,6,8|],[0,Pi/4],1/cos(x));\\n   > canonical=on!;\\n   > p;\\n   0.99999999994393732180959690352543887130348096061124 + -0.49999999571556857768772053063721544670949467222259 * x^2 + 4.1666613233473633009941059480570275870113220089059e-2 * x^4 + -1.3886529147145693651355523880319714051047635695061e-3 * x^6 + 2.4372679177224179934800328511009205218114284220126e-5 * x^8\\n\\nExample 3: \\n   > p1 = remez(exp(x),5,[0;1],default,1e-5);\\n   > p2 = remez(exp(x),5,[0;1],default,1e-10);\\n   > p3 = remez(exp(x),5,[0;1],default,1e-15);\\n   > dirtyinfnorm(p1-exp(x),[0;1]);\\n   1.1295698151096148707171193829266077607222634589363e-6\\n   > dirtyinfnorm(p2-exp(x),[0;1]);\\n   1.12956980227478675612619255125474525171079325793124e-6\\n   > dirtyinfnorm(p3-exp(x),[0;1]);\\n   1.12956980227478675612619255125474525171079325793124e-6\\n\\nExample 4: \\n   > L = [|exp(x), sin(x), cos(x)-1, sin(x^3)|];\\n   > g = (2^x-1)/x;\\n   > p1 = remez(g, L, [-1/16;1/16]);\\n   > p2 = remez(g, 3, [-1/16;1/16]);\\n   > dirtyinfnorm(p1 - g, [-1/16;1/16]);\\n   9.8841323829271038137685646777951687620288462194746e-8\\n   > dirtyinfnorm(p2 - g, [-1/16;1/16]);\\n   2.54337800593461418356437401152248866818783932027105e-9\\n\\nExample 5: \\n   > f = sin(x);\\n   > I = [-3b-5;-1b-1074];\\n   > time(popt = remez(1, [|1, 3, 4, 5, 7, 8, 9|], I, 1/f));\\n   0.16447240599999999999999999999999999998681952527666\\n   > time(p1 = remez(1, [|1, 3, 4, 5, 7, 8, 9|], I, 1/f, default, [0, 1b-73]));\\n   0.124159228000000000000000000000000000007882524317292\\n   > time(p2 = remez(1, [|1, 3, 4, 5, 7, 8, 9|], I, 1/f, default, [3b-72, +@Inf@]));\\n   0.138620057999999999999999999999999999992397535989277\\n   > dirtyinfnorm(popt/f-1, I);\\n   2.06750931454112835098093903810531156576504665659064e-22\\n   > dirtyinfnorm(p1/f-1, I);\\n   2.49711266837493110470637913808914046704452778960875e-22\\n   > dirtyinfnorm(p2/f-1, I);\\n   5.4567247553615435246376977231253834265248756996947e-22\\n   > 1b-73;\\n   1.05879118406787542383540312584955245256423950195312e-22\\n   > 3b-72;\\n   6.3527471044072525430124187550973147153854370117187e-22\\n\\nSee also: dirtyinfnorm, infnorm, fpminimax, guessdegree, taylorform, taylor\\n\"\n#define HELP_RENAME_TEXT \"Name: rename\\n==> rename the free variable.\\n\\nLibrary name:\\n   void sollya_lib_name_free_variable(const char *)\\n\\nUsage: \\n   rename({ident1},{ident2}) : void\\n\\nParameters: \\n   {ident1} is the current name of the free variable.\\n   {ident2} is a fresh name.\\n\\nDescription: \\n   * rename permits a change of the name of the free variable. Sollya can handle\\n   only one free variable at a time. The first time in a session that an\\n   unbound name is used in a context where it can be interpreted as a free\\n   variable, the name is used to represent the free variable of Sollya. In the\\n   following, this name can be changed using rename.\\n\\n   * Be careful: if {ident2} has been set before, its value will be lost. Use\\n   the command isbound to know if {ident2} is already used or not.\\n\\n   * If {ident1} is not the current name of the free variable, an error occurs.\\n\\n   * If rename is used at a time when the name of the free variable has not been\\n   defined, {ident1} is just ignored and the name of the free variable is set\\n   to {ident2}.\\n\\n   * It is always possible to use the special keyword _x_ to denote the free\\n   variable. Hence {ident1} can be _x_.\\n\\nExample 1: \\n   > f=sin(x);\\n   > f;\\n   sin(x)\\n   > rename(x,y);\\n   > f;\\n   sin(y)\\n\\nExample 2: \\n   > a=1;\\n   > f=sin(x);\\n   > rename(x,a);\\n   > a;\\n   a\\n   > f;\\n   sin(a)\\n\\nExample 3: \\n   > verbosity=1!;\\n   > f=sin(x);\\n   > rename(y, z);\\n   Warning: the current free variable is named \\\"x\\\" and not \\\"y\\\". Can only rename the free variable.\\n   The last command will have no effect.\\n   > rename(_x_, z);\\n   Information: the free variable has been renamed from \\\"x\\\" to \\\"z\\\".\\n\\nExample 4: \\n   > verbosity=1!;\\n   > rename(x,y);\\n   Information: the free variable has been named \\\"y\\\".\\n   > isbound(x);\\n   false\\n   > isbound(y);\\n   true\\n\\nSee also: isbound\\n\"\n#define HELP_RESTART_TEXT \"Name: restart\\n==> brings Sollya back to its initial state\\n\\nUsage: \\n   restart : void -> void\\n\\nDescription: \\n   * The command restart brings Sollya back to its initial state.  All\\n   current state is abandoned, all libraries unbound and all memory freed.\\n    \\n   The restart command has no effect when executed inside a Sollya\\n   script read into a main Sollya script using execute. It is executed\\n   in a Sollya script included by a #include macro.\\n    \\n   Using the restart command in nested elements of imperative\\n   programming like for or while loops is possible. Since in most cases\\n   abandoning the current state of Sollya means altering a loop\\n   invariant, warnings for the impossibility of continuing a loop may\\n   follow unless the state is rebuilt.\\n\\nExample 1: \\n   > print(exp(x));\\n   exp(x)\\n   > a = 3;\\n   > restart;\\n   The tool has been restarted.\\n   > print(x);\\n   x\\n   > a;\\n   Warning: the identifier \\\"a\\\" is neither assigned to, nor bound to a library function nor external procedure, nor equal to the current free variable.\\n   Will interpret \\\"a\\\" as \\\"x\\\".\\n   x\\n\\nExample 2: \\n   > print(exp(x));\\n   exp(x)\\n   > for i from 1 to 10 do {\\n     \\tprint(i);\\n     \\tif (i == 5) then restart;\\n     };\\n   1\\n   2\\n   3\\n   4\\n   5\\n   The tool has been restarted.\\n   Warning: the tool has been restarted inside a for loop.\\n   The for loop will no longer be executed.\\n\\nExample 3: \\n   > print(exp(x));\\n   exp(x)\\n   > a = 3;\\n   > for i from 1 to 10 do {\\n     \\tprint(i);\\n     \\tif (i == 5) then {\\n     \\t\\trestart;\\n     \\t\\ti = 7;\\n     \\t};\\n     };\\n   1\\n   2\\n   3\\n   4\\n   5\\n   The tool has been restarted.\\n   8\\n   9\\n   10\\n   > print(x);\\n   x\\n   > a;\\n   Warning: the identifier \\\"a\\\" is neither assigned to, nor bound to a library function nor external procedure, nor equal to the current free variable.\\n   Will interpret \\\"a\\\" as \\\"x\\\".\\n   x\\n\\nSee also: quit, execute\\n\"\n#define HELP_RETURN_TEXT \"Name: return\\n==> indicates an expression to be returned in a procedure\\n\\nUsage: \\n   return {expression} : void\\n\\nParameters: \\n   {expression} represents the expression to be returned\\n\\nDescription: \\n   * The keyword return allows for returning the (evaluated) expression\\n   {expression} at the end of a begin-end-block ({}-block) used as a\\n   Sollya procedure body. See proc for further details concerning\\n   Sollya procedure definitions.\\n     \\n   Statements for returning expressions using return are only possible\\n    at the end of a begin-end-block used as a Sollya procedure\\n    body. Only one return statement can be given per begin-end-block.\\n\\n   * If at the end of a procedure definition using proc no return\\n   statement is given, a return void statement is implicitly\\n   added. Procedures, i.e. procedure objects, when printed out in Sollya\\n   defined with an implicit return void statement are displayed with\\n   this statement explicitly given.\\n\\nExample 1: \\n   > succ = proc(n) { var res; res := n + 1; return res; };\\n   > succ(5);\\n   6\\n   > succ;\\n   proc(n)\\n   {\\n   var res;\\n   res := (n) + (1);\\n   return res;\\n   }\\n\\nExample 2: \\n   > hey = proc(s) { print(\\\"Hello\\\",s); };\\n   > hey(\\\"world\\\");\\n   Hello world\\n   > hey;\\n   proc(s)\\n   {\\n   print(\\\"Hello\\\", s);\\n   return void;\\n   }\\n\\nSee also: proc, void\\n\"\n#define HELP_REVERT_TEXT \"Name: revert\\n==> reverts a list.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_revert(sollya_obj_t)\\n\\nUsage: \\n   revert({L}) : list -> list\\n\\nParameters: \\n   {L} is a list.\\n\\nDescription: \\n   * revert({L}) returns the same list, but with its elements in reverse order.\\n\\n   * If {L} is an end-elliptic list, revert will fail with an error.\\n\\nExample 1: \\n   > revert([| |]);\\n   [| |]\\n\\nExample 2: \\n   > revert([|2,3,5,2,1,4|]);\\n   [|4, 1, 2, 5, 3, 2|]\\n\\nSee also: sort, head, tail\\n\"\n#define HELP_RN_TEXT \"Name: RN\\n==> constant representing rounding-to-nearest mode.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_round_to_nearest()\\n   int sollya_lib_is_round_to_nearest(sollya_obj_t)\\n\\nDescription: \\n   * RN is used in command round to specify that the value must be rounded\\n   to the nearest representable floating-point number.\\n\\nExample 1: \\n   > display=binary!;\\n   > round(Pi,20,RN);\\n   1.100100100001111111_2 * 2^(1)\\n\\nSee also: RD, RU, RZ, round, nearestint\\n\"\n#define HELP_ROUNDCOEFFICIENTS_TEXT \"Name: roundcoefficients\\n==> rounds the coefficients of a polynomial to classical formats.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_roundcoefficients(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   roundcoefficients({p},{L}) : (function, list) -> function\\n\\nParameters: \\n   {p} is a function. Usually a polynomial.\\n   {L} is a list of formats.\\n\\nDescription: \\n   * If {p} is a polynomial and {L} a list of floating-point formats, \\n   roundcoefficients({p},{L}) rounds each coefficient of {p} to the corresponding format\\n   in {L}.\\n\\n   * If {p} is not a polynomial, roundcoefficients does not do anything.\\n\\n   * If {L} contains other elements than HP, halfprecision, SG, single, D, double, \\n   DE, doubleextended, DD, doubledouble, QD, quad, TD and tripledouble,\\n   an error occurs.\\n\\n   * The coefficients in {p} corresponding to X^i is rounded to the \\n   format L[i]. If {L} does not contain enough elements\\n   (e.g. if length(L) < degree(p)+1), a warning is displayed. However, the\\n   coefficients corresponding to an element of {L} are rounded. The trailing \\n   coefficients (that do not have a corresponding element in {L}) are kept with\\n   their own precision.\\n   If {L} contains too much elements, the trailing useless elements are ignored.\\n   In particular {L} may be end-elliptic in which case roundcoefficients has the \\n   natural behavior.\\n\\nExample 1: \\n   > p=exp(1) + x*(exp(2) + x*exp(3));\\n   > display=binary!;\\n   > roundcoefficients(p,[|DD,D,D|]);\\n   1.010110111111000010101000101100010100010101110110100101010011010101011111101110001010110001000000010011101_2 * 2^(1) + x * (1.110110001110011001001011100011010100110111011010111_2 * 2^(2) + x * (1.010000010101111001011011111101101111101100010000011_2 * 2^(4)))\\n   > roundcoefficients(p,[|DD,D...|]);\\n   1.010110111111000010101000101100010100010101110110100101010011010101011111101110001010110001000000010011101_2 * 2^(1) + x * (1.110110001110011001001011100011010100110111011010111_2 * 2^(2) + x * (1.010000010101111001011011111101101111101100010000011_2 * 2^(4)))\\n\\nExample 2: \\n   > f=sin(exp(1)*x);\\n   > display=binary!;\\n   > f;\\n   sin(x * (1.0101101111110000101010001011000101000101011101101001010100110101010111111011100010101100010000000100111001111010011110011110001110110001011100111000101100000111101_2 * 2^(1)))\\n   > roundcoefficients(f,[|D...|]);\\n   sin(x * (1.0101101111110000101010001011000101000101011101101001010100110101010111111011100010101100010000000100111001111010011110011110001110110001011100111000101100000111101_2 * 2^(1)))\\n\\nExample 3: \\n   > p=exp(1) + x*(exp(2) + x*exp(3));\\n   > verbosity=1!;\\n   > display=binary!;\\n   > roundcoefficients(p,[|DD,D|]);\\n   Warning: the number of the given formats does not correspond to the degree of the given polynomial.\\n   Warning: the 0th coefficient of the given polynomial does not evaluate to a floating-point constant without any rounding.\\n   Will evaluate the coefficient in the current precision in floating-point before rounding to the target format.\\n   Warning: the 1th coefficient of the given polynomial does not evaluate to a floating-point constant without any rounding.\\n   Will evaluate the coefficient in the current precision in floating-point before rounding to the target format.\\n   Warning: rounding may have happened.\\n   1.010110111111000010101000101100010100010101110110100101010011010101011111101110001010110001000000010011101_2 * 2^(1) + x * (1.110110001110011001001011100011010100110111011010111_2 * 2^(2) + x * (1.01000001010111100101101111110110111110110001000001011111001011010100101111011111110001010011011101000100110000111010001110010000010110000101100000111001011100101001_2 * 2^(4)))\\n\\nSee also: halfprecision, single, double, doubleextended, doubledouble, quad, tripledouble, fpminimax, remez, implementpoly, subpoly\\n\"\n#define HELP_ROUNDCORRECTLY_TEXT \"Name: roundcorrectly\\n==> rounds an approximation range correctly to some precision\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_roundcorrectly(sollya_obj_t)\\n\\nUsage: \\n   roundcorrectly({range}) : range -> constant\\n\\nParameters: \\n   {range} represents a range in which an exact value lies\\n\\nDescription: \\n   * Let {range} be a range of values, determined by some approximation\\n   process, safely bounding an unknown value v. The command\\n   roundcorrectly({range}) determines a precision such that for this precision,\\n   rounding to the nearest any value in {range} yields to the same\\n   result, i.e. to the correct rounding of v.\\n    \\n   If no such precision exists, a warning is displayed and roundcorrectly\\n   evaluates to NaN.\\n\\nExample 1: \\n   > printbinary(roundcorrectly([1.010001_2; 1.0101_2]));\\n   1.01_2\\n   > printbinary(roundcorrectly([1.00001_2; 1.001_2]));\\n   1_2\\n\\nExample 2: \\n   > roundcorrectly([-1; 1]);\\n   NaN\\n\\nSee also: round, mantissa, exponent, precision\\n\"\n#define HELP_ROUNDINGWARNINGS_TEXT \"Name: roundingwarnings\\n==> global variable controlling whether or not a warning is displayed when roundings occur.\\n\\nLibrary names:\\n   void sollya_lib_set_roundingwarnings_and_print(sollya_obj_t)\\n   void sollya_lib_set_roundingwarnings(sollya_obj_t)\\n   sollya_obj_t sollya_lib_get_roundingwarnings()\\n\\nUsage: \\n   roundingwarnings = {activation value} : on|off -> void\\n   roundingwarnings = {activation value} ! : on|off -> void\\n   roundingwarnings : on|off\\n\\nParameters: \\n   {activation value} controls if warnings should be shown or not\\n\\nDescription: \\n   * roundingwarnings is a global variable. When its value is on, warnings are\\n   emitted in appropriate verbosity modes (see verbosity) when roundings\\n   occur.  When its value is off, these warnings are suppressed.\\n\\n   * This mode depends on a verbosity of at least 1. See\\n   verbosity for more details.\\n\\n   * Default is on when the standard input is a terminal and\\n   off when Sollya input is read from a file.\\n\\nExample 1: \\n   > verbosity=1!;\\n   > roundingwarnings = on;\\n   Rounding warning mode has been activated.\\n   > exp(0.1);\\n   Warning: Rounding occurred when converting the constant \\\"0.1\\\" to floating-point with 165 bits.\\n   If safe computation is needed, try to increase the precision.\\n   Warning: rounding has happened. The value displayed is a faithful rounding to 165 bits of the true result.\\n   1.1051709180756476248117078264902466682245471947375\\n   > roundingwarnings = off;\\n   Rounding warning mode has been deactivated.\\n   > exp(0.1);\\n   1.1051709180756476248117078264902466682245471947375\\n\\nSee also: on, off, verbosity, midpointmode, rationalmode, suppressmessage, unsuppressmessage, showmessagenumbers, getsuppressedmessages\\n\"\n#define HELP_ROUND_TEXT \"Name: round\\n==> rounds a number to a floating-point format.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_round(sollya_obj_t, sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   round({x},{n},{mode}) : (constant, integer, RN|RZ|RU|RD) -> constant\\n   round({x},{format},{mode}) : (constant, HP|halfprecision|SG|single|D|double|DE|doubleextended|DD|doubledouble|QD|quad|TD|tripledouble, RN|RZ|RU|RD) -> constant\\n\\nParameters: \\n   {x} is a constant to be rounded.\\n   {n} is the precision of the target format.\\n   {format} is the name of a supported floating-point format.\\n   {mode} is the desired rounding mode.\\n\\nDescription: \\n   * If used with an integer parameter {n}, round({x},{n},{mode}) rounds {x} to a floating-point number with \\n   precision {n}, according to rounding-mode {mode}. \\n\\n   * If used with a format parameter {format}, round({x},{format},{mode}) rounds {x} to a floating-point number in the \\n   floating-point format {format}, according to rounding-mode {mode}. \\n\\n   * Subnormal numbers are handled for the case when {format} is one of\\n   halfprecision, single, double, doubleextended, doubledouble,\\n   quad or tripledouble. Otherwise, when {format} is an integer,\\n   round does not take any exponent range into consideration,\\n   i.e. typically uses the full exponent range of the underlying MPFR\\n   library.\\n\\n   * It is worth mentionning that the result of round does not depend on\\n   the current global precision of Sollya, unless a warning is\\n   displayed. As a matter of fact, round rounds the given constant or\\n   constant expression {x} applying all rules of IEEE 754 correct\\n   rounding, unless a warning is displayed. The result of round is\\n   hence the floating-point value of the given precision {n} or format\\n   {format} that is nearest to {x} (resp. just below or just above,\\n   depending on {mode}), computed as if infinite precision were used for\\n   evaluating the constant {x}, unless a warning is displayed.\\n\\nExample 1: \\n   > display=binary!;\\n   > round(Pi,20,RN);\\n   1.100100100001111111_2 * 2^(1)\\n\\nExample 2: \\n   > printdouble(round(exp(17),53,RU));\\n   0x417709348c0ea4f9\\n   > printdouble(D(exp(17)));\\n   0x417709348c0ea4f9\\n\\nExample 3: \\n   > display=binary!;\\n   > a=2^(-1100);\\n   > round(a,53,RN);\\n   1_2 * 2^(-1100)\\n   > round(a,D,RN);\\n   0\\n   > double(a);\\n   0\\n\\nSee also: RN, RD, RU, RZ, halfprecision, single, double, doubleextended, doubledouble, quad, tripledouble, roundcoefficients, roundcorrectly, printdouble, printsingle, ceil, floor, nearestint\\n\"\n#define HELP_RU_TEXT \"Name: RU\\n==> constant representing rounding-upwards mode.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_round_up()\\n   int sollya_lib_is_round_up(sollya_obj_t)\\n\\nDescription: \\n   * RU is used in command round to specify that the value x must be rounded\\n   to the smallest floating-point number y such that x <= y.\\n\\nExample 1: \\n   > display=binary!;\\n   > round(Pi,20,RU);\\n   1.100100100001111111_2 * 2^(1)\\n\\nSee also: RZ, RD, RN, round, ceil\\n\"\n#define HELP_RZ_TEXT \"Name: RZ\\n==> constant representing rounding-to-zero mode.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_round_towards_zero()\\n   int sollya_lib_is_round_towards_zero(sollya_obj_t)\\n\\nDescription: \\n   * RZ is used in command round to specify that the value must be rounded\\n   to the closest floating-point number towards zero. It just consists in \\n   truncating the value to the desired format.\\n\\nExample 1: \\n   > display=binary!;\\n   > round(Pi,20,RZ);\\n   1.1001001000011111101_2 * 2^(1)\\n\\nSee also: RD, RU, RN, round, floor, ceil\\n\"\n#define HELP_SEARCHGAL_TEXT \"Name: searchgal\\n==> searches for a preimage of a function such that the rounding the image yields an error smaller than a constant\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_searchgal(sollya_obj_t, sollya_obj_t, sollya_obj_t,\\n                                     sollya_obj_t, sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   searchgal({function}, {start}, {preimage precision}, {steps}, {format}, {error bound}) : (function, constant, integer, integer, HP|halfprecision|SG|single|D|double|DE|doubleextended|DD|doubledouble|QD|quad|TD|tripledouble, constant) -> list\\n   searchgal({list of functions}, {start}, {preimage precision}, {steps}, {list of format}, {list of error bounds}) : (list, constant, integer, integer, list, list) -> list\\n\\nParameters: \\n   {function} represents the function to be considered\\n   {start} represents a value around which the search is to be performed\\n   {preimage precision} represents the precision (discretization) for the eligible preimage values\\n   {steps} represents the binary logarithm (log2) of the number of search steps to be performed\\n   {format} represents the format the image of the function is to be rounded to\\n   {error bound} represents a upper bound on the relative rounding error when rounding the image\\n   {list of functions} represents the functions to be considered\\n   {list of formats} represents the respective formats the images of the functions are to be rounded to\\n   {list of error bounds} represents a upper bound on the relative rounding error when rounding the image\\n\\nDescription: \\n   * The command searchgal searches for a preimage z of function\\n   {function} or a list of functions {list of functions} such that\\n   z is a floating-point number with {preimage precision}\\n   significant mantissa bits and the image y of the function,\\n   respectively each image yi of the functions, rounds to\\n   format {format} respectively to the corresponding format in {list of format} \\n   with a relative rounding error less than {error bound}\\n   respectively the corresponding value in {list of error bounds}. During\\n   this search, at most 2^{steps} attempts are made. The search\\n   starts with a preimage value equal to {start}. This value is then\\n   increased and decreased by 1 ulp in precision {preimage precision} \\n   until a value is found or the step limit is reached.\\n    \\n   If the search finds an appropriate preimage z, searchgal\\n   evaluates to a list containing this value. Otherwise, searchgal\\n   evaluates to an empty list.\\n\\nExample 1: \\n   > searchgal(log(x),2,53,15,DD,1b-112);\\n   [| |]\\n   > searchgal(log(x),2,53,18,DD,1b-112);\\n   [|2.0000000000384972054234822280704975128173828125|]\\n\\nExample 2: \\n   > f = exp(x);\\n   > s = searchgal(f,2,53,18,DD,1b-112);\\n   > if (s != [||]) then {\\n        v = s[0];\\n        print(\\\"The rounding error is 2^(\\\",evaluate(log2(abs(DD(f)/f - 1)),v),\\\")\\\");\\n     } else print(\\\"No value found\\\");\\n   The rounding error is 2^( -112.106878438809380148206984258358542322113874177832 )\\n\\nExample 3: \\n   > searchgal([|sin(x),cos(x)|],1,53,15,[|D,D|],[|1b-62,1b-60|]);\\n   [|1.00000000000159494639717649988597258925437927246094|]\\n\\nSee also: round, double, doubledouble, tripledouble, evaluate, worstcase\\n\"\n#define HELP_SG_TEXT \"Name: SG\\n==> short form for single\\n\\nSee also: single\\n\"\n#define HELP_SHOWMESSAGENUMBERS_TEXT \"Name: showmessagenumbers\\n==> activates, deactivates or inspects the state variable controlling the displaying of numbers for messages\\n\\nLibrary names:\\n   void sollya_lib_set_showmessagenumbers_and_print(sollya_obj_t)\\n   void sollya_lib_set_showmessagenumbers(sollya_obj_t)\\n   sollya_obj_t sollya_lib_get_showmessagenumbers()\\n\\nUsage: \\n   showmessagenumbers = {activation value} : on|off -> void\\n   showmessagenumbers = {activation value} ! : on|off -> void\\n   showmessagenumbers : on|off\\n\\nParameters: \\n   {activation value} represents on or off, i.e. activation or deactivation\\n\\nDescription: \\n   * An assignment showmessagenumbers = {activation value}, where {activation value}\\n   is one of on or off, activates respectively deactivates the\\n   displaying of numbers for warning and information messages. Every\\n   Sollya warning or information message (that is not fatal to the\\n   tool's execution) has a message number. By default, these numbers are\\n   not displayed when a message is output. When message number displaying\\n   is activated, the message numbers are displayed together with the\\n   message. This allows the user to recover the number of a particular\\n   message in order to suppress resp. unsuppress the displaying of this\\n   particular message (see suppressmessage and unsuppressmessage).\\n\\n   * The user should be aware of the fact that message number display\\n   activation resp. deactivation through showmessagenumbers does not affect message\\n   displaying in general. For instance, even with message number\\n   displaying activated, messages with only displayed when general\\n   verbosity and rounding warning mode are set accordingly.\\n\\n   * If the assignment showmessagenumbers = {activation value} is followed by an\\n   exclamation mark, no message indicating the new state is\\n   displayed. Otherwise the user is informed of the new state of the\\n   global mode by an indication.\\n\\nExample 1: \\n   > verbosity = 1;\\n   The verbosity level has been set to 1.\\n   > 0.1;\\n   Warning: Rounding occurred when converting the constant \\\"0.1\\\" to floating-point with 165 bits.\\n   If safe computation is needed, try to increase the precision.\\n   0.1\\n   > showmessagenumbers = on;\\n   Displaying of message numbers has been activated.\\n   > 0.1;\\n   Warning (174): Rounding occurred when converting the constant \\\"0.1\\\" to floating-point with 165 bits.\\n   If safe computation is needed, try to increase the precision.\\n   0.1\\n   > showmessagenumbers;\\n   on\\n   > showmessagenumbers = off!;\\n   > 0.1;\\n   Warning: Rounding occurred when converting the constant \\\"0.1\\\" to floating-point with 165 bits.\\n   If safe computation is needed, try to increase the precision.\\n   0.1\\n\\nExample 2: \\n   > showmessagenumbers = on;\\n   Displaying of message numbers has been activated.\\n   > verbosity = 1;\\n   The verbosity level has been set to 1.\\n   > diff(0.1 * x + 1.5 * x^2);\\n   Warning (174): Rounding occurred when converting the constant \\\"0.1\\\" to floating-point with 165 bits.\\n   If safe computation is needed, try to increase the precision.\\n   0.1 + x * 3\\n   > verbosity = 0;\\n   The verbosity level has been set to 0.\\n   > diff(0.1 * x + 1.5 * x^2);\\n   0.1 + x * 3\\n   > verbosity = 12;\\n   The verbosity level has been set to 12.\\n   > diff(0.1 * x + 1.5 * x^2);\\n   Warning (174): Rounding occurred when converting the constant \\\"0.1\\\" to floating-point with 165 bits.\\n   If safe computation is needed, try to increase the precision.\\n   Information (196): formally differentiating a function.\\n   Information (197): differentiating the expression '0.1 * x + 1.5 * x^2'\\n   Information (195): expression '0.1 + 2 * 1.5 * x' has been simplified to expression '0.1 + 3 * x'.\\n   0.1 + x * 3\\n\\nSee also: getsuppressedmessages, suppressmessage, unsuppressmessage, verbosity, roundingwarnings\\n\"\n#define HELP_SIMPLIFY_TEXT \"Name: simplify\\n==> simplifies an expression representing a function\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_simplify(sollya_obj_t)\\n\\nUsage: \\n   simplify({function}) : function -> function\\n\\nParameters: \\n   {function} represents the expression to be simplified\\n\\nDescription: \\n   * The command simplify simplifies the expression given in argument\\n   representing the function {function}.  The command simplify does not\\n   endanger the safety of computations even in Sollya's floating-point\\n   environment: the function returned is mathematically equal to the\\n   function {function}. \\n    \\n   Remark that the simplification provided by simplify is not perfect:\\n   they may exist simpler equivalent expressions for expressions returned\\n   by simplify.\\n\\nExample 1: \\n   > print(simplify((6 + 2) + (5 + exp(0)) * x));\\n   8 + 6 * x\\n\\nExample 2: \\n   > print(simplify((log(x - x + 1) + asin(1))));\\n   (pi) / 2\\n\\nExample 3: \\n   > print(simplify((log(x - x + 1) + asin(1)) - (atan(1) * 2)));\\n   (pi) / 2 - (pi) / 4 * 2\\n\\nSee also: dirtysimplify, autosimplify, rationalmode, horner\\n\"\n#define HELP_SINGLE_TEXT \"Names: single, SG\\n==> rounding to the nearest IEEE 754 single (binary32).\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_single(sollya_obj_t)\\n   sollya_obj_t sollya_lib_single_obj()\\n   int sollya_lib_is_single_obj(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_single(sollya_obj_t)\\n   #define SOLLYA_SG(x) sollya_lib_build_function_single(x)\\n\\nDescription: \\n   * single is both a function and a constant.\\n\\n   * As a function, it rounds its argument to the nearest IEEE 754 single precision (i.e. IEEE754-2008 binary32) number.\\n   Subnormal numbers are supported as well as standard numbers: it is the real\\n   rounding described in the standard.\\n\\n   * As a constant, it symbolizes the single precision format. It is used in \\n   contexts when a precision format is necessary, e.g. in the commands \\n   round and roundcoefficients. In is not supported for implementpoly.\\n   See the corresponding help pages for examples.\\n\\nExample 1: \\n   > display=binary!;\\n   > SG(0.1);\\n   1.10011001100110011001101_2 * 2^(-4)\\n   > SG(4.17);\\n   1.000010101110000101001_2 * 2^(2)\\n   > SG(1.011_2 * 2^(-1073));\\n   0\\n\\nSee also: halfprecision, double, doubleextended, doubledouble, quad, tripledouble, roundcoefficients, implementpoly, round, printsingle\\n\"\n#define HELP_SINH_TEXT \"Name: sinh\\n==> the hyperbolic sine function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_sinh(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_sinh(sollya_obj_t)\\n   #define SOLLYA_SINH(x) sollya_lib_build_function_sinh(x)\\n\\nDescription: \\n   * sinh is the usual hyperbolic sine function: sinh(x) = (exp(x)-exp(-x))/2.\\n\\n   * It is defined for every real number x.\\n\\nSee also: asinh, cosh, tanh\\n\"\n#define HELP_SIN_TEXT \"Name: sin\\n==> the sine function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_sin(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_sin(sollya_obj_t)\\n   #define SOLLYA_SIN(x) sollya_lib_build_function_sin(x)\\n\\nDescription: \\n   * sin is the usual sine function.\\n\\n   * It is defined for every real number x.\\n\\nSee also: asin, cos, tan\\n\"\n#define HELP_SORT_TEXT \"Name: sort\\n==> sorts a list of real numbers.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_sort(sollya_obj_t)\\n\\nUsage: \\n   sort({L}) : list -> list\\n\\nParameters: \\n   {L} is a list.\\n\\nDescription: \\n   * If {L} contains only constant values, sort({L}) returns the same list, but\\n   sorted in increasing order.\\n\\n   * If {L} contains at least one element that is not a constant, the command fails \\n   with a type error.\\n\\n   * If {L} is an end-elliptic list, sort will fail with an error.\\n\\nExample 1: \\n   > sort([| |]);\\n   [| |]\\n   > sort([|2,3,5,2,1,4|]);\\n   [|1, 2, 2, 3, 4, 5|]\\n\\nSee also: revert\\n\"\n#define HELP_SQRT_TEXT \"Name: sqrt\\n==> square root.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_sqrt(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_sqrt(sollya_obj_t)\\n   #define SOLLYA_SQRT(x) sollya_lib_build_function_sqrt(x)\\n\\nDescription: \\n   * sqrt is the square root, e.g. the inverse of the function square: sqrt(y)\\n   is the unique positive x such that x^2=y.\\n\\n   * It is defined only for x in [0; +Inf].\\n\\n\"\n#define HELP_STRING_TEXT \"Name: string\\n==> keyword representing a string type \\n\\nLibrary name:\\n   SOLLYA_EXTERNALPROC_TYPE_STRING\\n\\nUsage: \\n   string : type type\\n\\nDescription: \\n   * string represents the string type for declarations\\n   of external procedures by means of externalproc.\\n    \\n   Remark that in contrast to other indicators, type indicators like\\n   string cannot be handled outside the externalproc context.  In\\n   particular, they cannot be assigned to variables.\\n\\nSee also: externalproc, boolean, constant, function, integer, list of, range, object\\n\"\n#define HELP_SUBPOLY_TEXT \"Name: subpoly\\n==> restricts the monomial basis of a polynomial to a list of monomials\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_subpoly(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   subpoly({polynomial}, {list}) : (function, list) -> function\\n\\nParameters: \\n   {polynomial} represents the polynomial the coefficients are taken from\\n   {list} represents the list of monomials to be taken\\n\\nDescription: \\n   * subpoly extracts the coefficients of a polynomial {polynomial} and builds up a\\n   new polynomial out of those coefficients associated to monomial degrees figuring in\\n   the list {list}. \\n    \\n   If {polynomial} represents a function that is not a polynomial, subpoly returns 0.\\n    \\n   If {list} is a list that is end-elliptic, let be j the last value explicitly specified\\n   in the list. All coefficients of the polynomial associated to monomials greater or\\n   equal to j are taken.\\n\\nExample 1: \\n   > p = taylor(exp(x),5,0);\\n   > s = subpoly(p,[|1,3,5|]);\\n   > print(p);\\n   1 + x * (1 + x * (0.5 + x * (1 / 6 + x * (1 / 24 + x * 1 / 120))))\\n   > print(s);\\n   x * (1 + x^2 * (1 / 6 + x^2 / 120))\\n\\nExample 2: \\n   > p = remez(atan(x),10,[-1,1]);\\n   > subpoly(p,[|1,3,5...|]);\\n   x * (0.99986632941452949026018468446163586361700915018232 + x^2 * (-0.33030478502455936362667794059988443130926433421739 + x^2 * (0.18015929317818756462894237037824735129130095574422 + x * (2.2845584115424788285112501565358576642429856963072e-9 + x * (-8.5156349064111377895500552996061844977507560037485e-2 + x * (-2.717563409627750199168187692393409435243830189218e-9 + x * (2.08451134307114729373239910549169872454686955895e-2 + x * 1.10889861181129057657199664386826630081793400489512e-9)))))))\\n\\nExample 3: \\n   > subpoly(exp(x),[|1,2,3|]);\\n   0\\n\\nSee also: roundcoefficients, taylor, remez, fpminimax, implementpoly\\n\"\n#define HELP_SUBSTITUTE_TEXT \"Name: substitute\\n==> replace the occurrences of the free variable in an expression.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_substitute(sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   substitute({f},{g}) : (function, function) -> function\\n   substitute({f},{t}) : (function, constant) -> constant\\n\\nParameters: \\n   {f} is a function.\\n   {g} is a function.\\n   {t} is a real number.\\n\\nDescription: \\n   * substitute({f}, {g}) produces the function (f o g) : x -> f(g(x)).\\n\\n   * substitute({f}, {t}) is the constant f(t). Note that the constant is\\n   represented by its expression until it has been evaluated (exactly the same\\n   way as if you type the expression {f} replacing instances of the free variable \\n   by {t}).\\n\\n   * If {f} is stored in a variable {F}, the effect of the commands substitute({F},{g}) or substitute({F},{t}) is absolutely equivalent to \\n   writing {F(g)} resp. {F(t)}.\\n\\nExample 1: \\n   > f=sin(x);\\n   > g=cos(x);\\n   > substitute(f,g);\\n   sin(cos(x))\\n   > f(g);\\n   sin(cos(x))\\n\\nExample 2: \\n   > a=1;\\n   > f=sin(x);\\n   > substitute(f,a);\\n   0.84147098480789650665250232163029899962256306079837\\n   > f(a);\\n   0.84147098480789650665250232163029899962256306079837\\n\\nSee also: evaluate, composepolynomials\\n\"\n#define HELP_SUPNORM_TEXT \"Name: supnorm\\n==> computes an interval bounding the supremum norm of an approximation error (absolute or relative) between a given polynomial and a function.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_supnorm(sollya_obj_t, sollya_obj_t, sollya_obj_t,\\n                                   sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   supnorm({p}, {f}, {I}, {errorType}, {accuracy}) : (function, function, range, absolute|relative, constant) -> range\\n\\nParameters: \\n   {p} is a polynomial.\\n   {f} is a function.\\n   {I} is an interval.\\n   {errorType} is the type of error to be considered: absolute or relative (see details below).\\n   {accuracy} is a constant that controls the relative tightness of the interval returned. \\n\\nDescription: \\n   * supnorm({p}, {f}, {I}, {errorType}, {accuracy}) tries to compute an\\n   interval bound r=[l,u] for the supremum norm of the error function\\n   epsilon_absolute=p-f (when {errorType} evaluates to absolute)\\n   or epsilon_relative=p/f-1 (when {errorType} evaluates to relative),\\n   over the interval I, such that sup{|epsilon(x)|, x in I} C r\\n   and 0<|u/l-1|< {accuracy}. If supnorm succeeds in computing a suitable\\n   interval r, which it returns, that interval is guaranteed to contain the\\n   supremum norm value and to satisfy the required quality. Otherwise, supnorm\\n   evaluates to error, displaying a corresponding error message. These failure\\n   cases are rare and basically happen only for functions which are too\\n   complicated.\\n\\n   * Roughly speaking, supnorm is based on taylorform to obtain a higher\\n   degree polynomial approximation for {f}. This process is coupled with\\n   an a posteriori validation of a potential supremum norm upper bound. \\n   The validation is based on showing a certain polynomial the problem gets\\n   reduced to does not vanish. In cases when this process alone does not \\n   succeed, for instance because taylorform is unable to compute a \\n   sufficiently good approximation to {f}, supnorm falls back to\\n   bisecting the working interval until safe supremum norm bounds can be\\n   computed with the required accuracy or until the width of the\\n   subintervals becomes less than diam times the original interval {I}, \\n   in which case supnorm fails.\\n\\n   * The algorithm used for supnorm is quite complex, which makes it impossible \\n   to explain it here in further detail. \\n   Please find a complete description in the following article:\\n    \\n      Sylvain Chevillard, John Harrison, Mioara Joldes, Christoph Lauter\\n      Efficient and accurate computation of upper bounds of approximation errors\\n      Journal of Theoretical Computer Science (TCS), 2010\\n      LIP Research Report number RR LIP2010-2\\n      http://prunel.ccsd.cnrs.fr/ensl-00445343/fr/\\n\\n   * In practical cases, supnorm should be able to automatically handle\\n   removable discontinuities that relative errors might have. This means\\n   that usually, if {f} vanishes at a point x0 in the interval\\n   considered, the approximation polynomial {p} is designed such that it\\n   also vanishes at the same point with a multiplicity large\\n   enough. Hence, although {f} vanishes, epsilon_relative=p/f-1 may be \\n   defined by continuous extension at such points x0, called \\n   removable discontinuities (see Example 3).\\n\\nExample 1: \\n   > p = remez(exp(x), 5, [-1;1]);\\n   > midpointmode=on!;\\n   > supnorm(p, exp(x), [-1;1], absolute, 2^(-40));\\n   0.45205513967~0/2~e-4\\n\\nExample 2: \\n   > prec=200!;\\n   > midpointmode=on!;\\n   > d = [1;2];\\n   > f = exp(cos(x)^2 + 1);\\n   > p = remez(1,15,d,1/f,1e-40);\\n   > theta=1b-60;\\n   > prec=default!;\\n   > mode=relative;\\n   > supnorm(p,f,d,mode,theta);\\n   0.30893006200251428~5/6~e-13\\n\\nExample 3: \\n   > midpointmode=on!;\\n   > mode=relative;\\n   > theta=1b-135;\\n   > d = [-1b-2;1b-2];\\n   > f = expm1(x);\\n   > p = x * (1 +  x * ( 2097145 * 2^(-22) + x * ( 349527 * 2^(-21) + x * (87609 * 2^(-21) + x * 4369 * 2^(-19))))); \\n   > theta=1b-40;\\n   > supnorm(p,f,d,mode,theta);\\n   0.98349131972~2/3~e-7\\n\\nSee also: dirtyinfnorm, infnorm, checkinfnorm, absolute, relative, taylorform, autodiff, numberroots, diam\\n\"\n#define HELP_SUPPRESSMESSAGE_TEXT \"Name: suppressmessage\\n==> suppresses the displaying of messages with a certain number\\n\\nLibrary names:\\n   void sollya_lib_suppressmessage(sollya_obj_t, ...);\\n   void sollya_lib_v_suppressmessage(sollya_obj_t, va_list);\\n\\nUsage: \\n   suppressmessage({msg num 1}, ..., {msg num n})   : (integer, ..., integer) -> void\\n   suppressmessage({msg list})   : list -> void\\n\\nParameters: \\n   {msg num 1} thru {msg num n} represent the numbers of n messages to be suppressed\\n   {msg list} represents a list with numbers of messages to be suppressed\\n\\nDescription: \\n   * The suppressmessage command allows particular warning and information\\n   messages to be suppressed from message output, while maintaining\\n   global verbosity levels (see verbosity) high. Every Sollya warning\\n   or information message (that is not fatal to the tool's execution) has\\n   a message number. When these message numbers {msg num 1} thru {msg num n} \\n   are given to suppressmessage, the corresponding message are no longer\\n   displayed.  The unsuppressmessage command reverts this suppression\\n   from output for a particular message.\\n\\n   * Instead of giving suppressmessage several message numbers {msg num 1} thru\\n   {msg num n} or calling suppressmessage several times, it is possible to give\\n   a whole list {msg list} of message numbers to suppressmessage.\\n\\n   * The user should be aware that suppressmessage presents sticky behavior for\\n   the warning and information messages suppressed from output. This\\n   means that even if subsequent calls to suppressmessage occur, a message\\n   suppressed by a call to suppressmessage stays suppressed until it is\\n   unsuppressed using unsuppressmessage or the tool is restarted. This\\n   behavior distinguishes message suppression from other global states of\\n   the Sollya tool. The user may use getsuppressedmessages to obtain a\\n   list of currently suppressed messages.\\n\\n   * When suppressmessage is used on message numbers that do not exist in the\\n   current version of the tool, a warning is displayed. The call has no\\n   other effect though.\\n\\nExample 1: \\n   > verbosity = 1;\\n   The verbosity level has been set to 1.\\n   > 0.1;\\n   Warning: Rounding occurred when converting the constant \\\"0.1\\\" to floating-point with 165 bits.\\n   If safe computation is needed, try to increase the precision.\\n   0.1\\n   > suppressmessage(174);\\n   > 0.1;\\n   0.1\\n   > suppressmessage(407);\\n   > 0.1;\\n   0.1\\n   > verbosity = 12;\\n   The verbosity level has been set to 12.\\n   > showmessagenumbers = on;\\n   Displaying of message numbers has been activated.\\n   > diff(exp(x * 0.1));\\n   Information (196): formally differentiating a function.\\n   Information (197): differentiating the expression 'exp(x * 0.1)'\\n   Information (207): no Horner simplification will be performed because the given tree is already in Horner form.\\n   exp(x * 0.1) * 0.1\\n   > suppressmessage(207, 196);\\n   > diff(exp(x * 0.1));\\n   Information (197): differentiating the expression 'exp(x * 0.1)'\\n   exp(x * 0.1) * 0.1\\n   > unsuppressmessage(174);\\n   > 0.1;\\n   Warning (174): Rounding occurred when converting the constant \\\"0.1\\\" to floating-point with 165 bits.\\n   If safe computation is needed, try to increase the precision.\\n   0.1\\n\\nExample 2: \\n   > verbosity = 12;\\n   The verbosity level has been set to 12.\\n   > showmessagenumbers = on; \\n   Displaying of message numbers has been activated.\\n   > diff(exp(x * 0.1));\\n   Warning (174): Rounding occurred when converting the constant \\\"0.1\\\" to floating-point with 165 bits.\\n   If safe computation is needed, try to increase the precision.\\n   Information (196): formally differentiating a function.\\n   Information (197): differentiating the expression 'exp(x * 0.1)'\\n   Information (207): no Horner simplification will be performed because the given tree is already in Horner form.\\n   exp(x * 0.1) * 0.1\\n   > suppressmessage([| 174, 207, 196 |]);\\n   > diff(exp(x * 0.1));\\n   Information (197): differentiating the expression 'exp(x * 0.1)'\\n   exp(x * 0.1) * 0.1\\n\\nSee also: getsuppressedmessages, suppressmessage, unsuppressmessage, verbosity, roundingwarnings\\n\"\n#define HELP_SUP_TEXT \"Name: sup\\n==> gives the upper bound of an interval.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_sup(sollya_obj_t)\\n\\nUsage: \\n   sup({I}) : range -> constant\\n   sup({x}) : constant -> constant\\n\\nParameters: \\n   {I} is an interval.\\n   {x} is a real number.\\n\\nDescription: \\n   * Returns the upper bound of the interval {I}. Each bound of an interval has its \\n   own precision, so this command is exact, even if the current precision is too \\n   small to represent the bound.\\n\\n   * When called on a real number {x}, sup behaves like the identity.\\n\\nExample 1: \\n   > sup([1;3]);\\n   3\\n   > sup(5);\\n   5\\n\\nExample 2: \\n   > display=binary!;\\n   > I=[0; 0.111110000011111_2];\\n   > sup(I);\\n   1.11110000011111_2 * 2^(-1)\\n   > prec=12!;\\n   > sup(I);\\n   1.11110000011111_2 * 2^(-1)\\n\\nSee also: inf, mid, max, min\\n\"\n#define HELP_TAIL_TEXT \"Name: tail\\n==> gives the tail of a list.\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_tail(sollya_obj_t)\\n\\nUsage: \\n   tail({L}) : list -> list\\n\\nParameters: \\n   {L} is a list.\\n\\nDescription: \\n   * tail({L}) returns the list {L} without its first element.\\n\\n   * If {L} is empty, the command will fail with an error.\\n\\n   * tail can also be used with end-elliptic lists. In this case, the result of\\n   tail is also an end-elliptic list.\\n\\nExample 1: \\n   > tail([|1,2,3|]);\\n   [|2, 3|]\\n   > tail([|1,2...|]);\\n   [|2...|]\\n\\nSee also: head, revert\\n\"\n#define HELP_TANH_TEXT \"Name: tanh\\n==> the hyperbolic tangent function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_tanh(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_tanh(sollya_obj_t)\\n   #define SOLLYA_TANH(x) sollya_lib_build_function_tanh(x)\\n\\nDescription: \\n   * tanh is the hyperbolic tangent function, defined by tanh(x) = sinh(x)/cosh(x).\\n\\n   * It is defined for every real number x.\\n\\nSee also: atanh, cosh, sinh\\n\"\n#define HELP_TAN_TEXT \"Name: tan\\n==> the tangent function.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_tan(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_tan(sollya_obj_t)\\n   #define SOLLYA_TAN(x) sollya_lib_build_function_tan(x)\\n\\nDescription: \\n   * tan is the tangent function, defined by tan(x) = sin(x)/cos(x).\\n\\n   * It is defined for every real number x that is not of the form n*Pi+Pi/2 where n is an integer.\\n\\nSee also: atan, cos, sin\\n\"\n#define HELP_TAYLORFORM_TEXT \"Name: taylorform\\n==> computes a rigorous polynomial approximation (polynomial, interval error bound) for a function, based on Taylor expansions.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_taylorform(sollya_obj_t, sollya_obj_t,\\n                                      sollya_obj_t, ...)\\n   sollya_obj_t sollya_lib_v_taylorform(sollya_obj_t, sollya_obj_t,\\n                                        sollya_obj_t, va_list)\\n\\nUsage: \\n   taylorform({f}, {n}, {x0}, {I}, {errorType}) : (function, integer, constant, range, absolute|relative) -> list\\n   taylorform({f}, {n}, {x0}, {I}, {errorType}) : (function, integer, range, range, absolute|relative) -> list\\n   taylorform({f}, {n}, {x0}, {errorType}) : (function, integer, constant, absolute|relative) -> list\\n   taylorform({f}, {n}, {x0}, {errorType}) : (function, integer, range, absolute|relative) -> list\\n\\nParameters: \\n   {f} is the function to be approximated.\\n   {n} is the degree of the polynomial that must approximate {f}.\\n   {x0} is the point (it can be a real number or an interval) where the Taylor exansion of the function is to be considered.\\n   {I} is the interval over which the function is to be approximated. If this parameter is omitted, the behavior is changed (see detailed description below).\\n   {errorType} (optional) is the type of error to be considered. See the detailed description below. Default is absolute.\\n\\nDescription: \\n   * WARNING: taylorform is a certified command, not difficult to use but not\\n   completely straightforward to use either. In order to be sure to use it\\n   correctly, the reader is invited to carefully read this documentation\\n   entirely.\\n\\n   * taylorform computes an approximation polynomial and an interval error\\n   bound for function f. \\n   More precisely, it returns a list\\n   L=[p, coeffErrors, Delta] where:\\n    \\n     - p is an approximation polynomial of degree n such that p(x-x0) is\\n   roughly speaking a numerical Taylor expansion of f at the point x0.\\n     - coeffsErrors is a list of n+1 intervals. Each interval coeffsErrors[i]\\n   contains an enclosure of all the errors accumulated when computing the i-th\\n   coefficient of p.\\n     - Delta is an interval that provides a bound for the approximation error\\n   between p and f. Its significance depends on the {errorType} considered.\\n    \\n\\n   * The polynomial p and the bound  Delta are obtained using Taylor Models\\n   principles.\\n\\n   * Please note that x0 can be an interval. In general, it is meant to be a\\n   small interval approximating a non representable value. If x0 is given as a\\n   constant expression, it is first numerically evaluated (leading to a faithful\\n   rounding xapprox0 at precision prec), and it is then replaced by the (exactly\\n   representable) point-interval [xapprox0, xapprox0]. In particular, it is not\\n   the same to call taylorform with x0 = pi and with x0 = [pi], for instance.\\n   In general, if the point around which one desires to compute the polynomial\\n   is not exactly representable, one should preferably use a small interval\\n   for x0.\\n\\n   * More formally, the mathematical property ensured by the algorithm may be\\n   stated as follows. For all xi0 in x0, there exist (small) values\\n   eps[i] in coeffsErrors[i] such that:\\n    \\n   If {errorType} is absolute, for all x in I, there exists delta in Delta such\\n   that f(x) - p(x-xi0) = sum{i=0...n} eps[i]*(x-xi0)^i + delta.\\n    \\n   If {errorType} is relative, for all x in I, there exists delta in Delta such\\n   that f(x) - p(x-xi0) = sum{i=0...n} eps[i]*(x-xi0)^i + delta*(x-xi0)^(n+1).\\n\\n   * It is also possible to use a large interval for x0, though it is not\\n   obvious to give an intuitive sense to the result of taylorform in that case.\\n   A particular case that might be interesting is when x0=I in relative mode.\\n   In that case, denoting by p_i the coefficient of p of order i, the interval\\n   p_i + coeffsError[i] gives an enclosure of f^(i)(I)/i!.\\n   However, the command autodiff is more convenient for computing such\\n   enclosures.\\n\\n   * When the interval I is not given, the approximated Taylor polynomial is\\n   computed but no remainder is produced. In that case the returned list\\n   is L=[p, coeffErrors].\\n\\n   * The relative case is especially useful when functions with removable\\n   singularities are considered. In such a case, this routine is able to compute\\n   a finite remainder bound, provided that the expansion point given is the\\n   problematic removable singularity point.\\n\\n   * The algorithm does not guarantee that by increasing the degree of the\\n   approximation, the remainder bound will become smaller. Moreover, it may \\n   even become larger due to the dependency phenomenon present with interval\\n   arithmetic. In order to reduce this phenomenon, a possible solution is to\\n   split the definition domain I into several smaller intervals. \\n\\n   * The command taylor also computes a Taylor polynomial of a function. However\\n   it does not provide a bound on the remainder. Besides, taylor is a somehow\\n   symbolic command: each coefficient of the Taylor polynomial is computed\\n   exactly and returned as an expression tree exactly equal to theoretical\\n   value. It is henceforth much more inefficient than taylorform and taylorform\\n   should be preferred if only numercial (yet safe) computations are required.\\n   The same difference exists between commands diff and autodiff.\\n\\nExample 1: \\n   > TL=taylorform(sin(x)/x, 10, 0, [-1,1], relative);\\n   > p=TL[0];\\n   > Delta=TL[2];\\n   > errors=TL[1];\\n   > for epsi in errors do epsi;\\n   [0;0]\\n   [0;0]\\n   [0;5.3455294201843912922810729343029637576303937602101e-51]\\n   [0;0]\\n   [-3.3409558876152445576756705839393523485189961001313e-52;3.3409558876152445576756705839393523485189961001313e-52]\\n   [0;0]\\n   [-1.04404871487976392427364705748104760891218628129103e-53;1.04404871487976392427364705748104760891218628129103e-53]\\n   [0;0]\\n   [-1.63132611699963113167757352731413688892529106451724e-55;1.63132611699963113167757352731413688892529106451724e-55]\\n   [0;0]\\n   [-1.91171029335894273243465647732125416670932546623114e-57;1.91171029335894273243465647732125416670932546623114e-57]\\n   > p; Delta;\\n   1 + x^2 * (-0.16666666666666666666666666666666666666666666666667 + x^2 * (8.3333333333333333333333333333333333333333333333333e-3 + x^2 * (-1.984126984126984126984126984126984126984126984127e-4 + x^2 * (2.7557319223985890652557319223985890652557319223986e-6 + x^2 * (-2.5052108385441718775052108385441718775052108385442e-8)))))\\n   [-1.6135797443886066084999806203254010793747502812764e-10;1.6135797443886066084999806203254010793747502812764e-10]\\n\\nExample 2: \\n   > TL=taylorform(exp(x), 10, 0, [-1,1], absolute);\\n   > p=TL[0];\\n   > Delta=TL[2];\\n   > p; Delta;\\n   1 + x * (1 + x * (0.5 + x * (0.16666666666666666666666666666666666666666666666667 + x * (4.1666666666666666666666666666666666666666666666668e-2 + x * (8.3333333333333333333333333333333333333333333333333e-3 + x * (1.3888888888888888888888888888888888888888888888889e-3 + x * (1.984126984126984126984126984126984126984126984127e-4 + x * (2.4801587301587301587301587301587301587301587301587e-5 + x * (2.7557319223985890652557319223985890652557319223986e-6 + x * 2.7557319223985890652557319223985890652557319223986e-7)))))))))\\n   [-2.3114271964118761944124253418268474583253955510297e-8;2.7312660755642474420206278018039434042553645532164e-8]\\n\\nExample 3: \\n   > TL1 = taylorform(exp(x), 10, log2(10), [-1,1], absolute);\\n   > TL2 = taylorform(exp(x), 10, [log2(10)], [-1,1], absolute);\\n   > TL1==TL2;\\n   false\\n\\nExample 4: \\n   > TL1 = taylorform(exp(x), 3, 0, [0,1], relative);\\n   > TL2 = taylorform(exp(x), 3, 0, relative);\\n   > TL1[0]==TL2[0];\\n   true\\n   > TL1[1]==TL2[1];\\n   true\\n   > length(TL1);\\n   3\\n   > length(TL2);\\n   2\\n\\nExample 5: \\n   > f = exp(cos(x)); x0 = 0;\\n   > TL = taylorform(f, 3, x0);\\n   > T1 = TL[0];\\n   > T2 = taylor(f, 3, x0);\\n   > print(coeff(T1, 2));\\n   -1.35914091422952261768014373567633124887862354685\\n   > print(coeff(T2, 2));\\n   -(0.5 * exp(1))\\n\\nSee also: diff, autodiff, taylor, remez, chebyshevform\\n\"\n#define HELP_TAYLORRECURSIONS_TEXT \"Name: taylorrecursions\\n==> controls the number of recursion steps when applying Taylor's rule.\\n\\nLibrary names:\\n   void sollya_lib_set_taylorrecursions_and_print(sollya_obj_t)\\n   void sollya_lib_set_taylorrecursions(sollya_obj_t)\\n   sollya_obj_t sollya_lib_get_taylorrecursions()\\n\\nUsage: \\n   taylorrecursions = {n} : integer -> void\\n   taylorrecursions = {n} ! : integer -> void\\n   taylorrecursions : integer\\n\\nParameters: \\n   {n} represents the number of recursions\\n\\nDescription: \\n   * taylorrecursions is a global variable. Its value represents the number of steps\\n   of recursion that are used when applying Taylor's rule. This rule is applied\\n   by the interval evaluator present in the core of Sollya (and particularly\\n   visible in commands like infnorm).\\n\\n   * To improve the quality of an interval evaluation of a function f, in \\n   particular when there are problems of decorrelation), the evaluator of Sollya\\n   uses Taylor's rule:  f([a,b]) C f(m) + [a-m, b-m]*f'([a,b]) where m=(a+b)/2.\\n   This rule can be applied recursively.\\n   The number of step in this recursion process is controlled by taylorrecursions.\\n\\n   * Setting taylorrecursions to 0 makes Sollya use this rule only once;\\n   setting it to 1 makes Sollya use the rule twice, and so on.\\n   In particular: the rule is always applied at least once.\\n\\nExample 1: \\n   > f=exp(x);\\n   > p=remez(f,3,[0;1]);\\n   > taylorrecursions=0;\\n   The number of recursions for Taylor evaluation has been set to 0.\\n   > evaluate(f-p, [0;1]);\\n   [-0.46839364816268368775174657814112460243249079671039;0.46947781754646820647293019728402934746974652584671]\\n   > taylorrecursions=1;\\n   The number of recursions for Taylor evaluation has been set to 1.\\n   > evaluate(f-p, [0;1]);\\n   [-0.138131114954063839905475752120786856031651747712954;0.13921528433784835862665937126369160106890747684927]\\n\\nSee also: hopitalrecursions, evaluate, infnorm\\n\"\n#define HELP_TAYLOR_TEXT \"Name: taylor\\n==> computes a Taylor expansion of a function in a point\\n\\nLibrary name:\\n   sollya_obj_t sollya_lib_taylor(sollya_obj_t, sollya_obj_t, sollya_obj_t)\\n\\nUsage: \\n   taylor({function}, {degree}, {point}) : (function, integer, constant) -> function\\n\\nParameters: \\n   {function} represents the function to be expanded\\n   {degree} represents the degree of the expansion to be delivered\\n   {point} represents the point in which the function is to be developed\\n\\nDescription: \\n   * The command taylor returns an expression that is a Taylor expansion\\n   of function {function} in point {point} having the degree {degree}.\\n    \\n   Let f be the function {function}, t be the point {point} and\\n   n be the degree {degree}. Then, taylor({function},{degree},{point}) \\n   evaluates to an expression mathematically equal to\\n        f(t) + f'(t) * x + ... + 1/(n!) * f[n](t) * x^n.\\n   In other words, if p(x) denotes the polynomial returned by taylor,\\n   p(x-t) is the Taylor polynomial of degree n of f developed at point t.\\n    \\n   Remark that taylor evaluates to 0 if the degree {degree} is negative.\\n\\nExample 1: \\n   > print(taylor(exp(x),3,1));\\n   exp(1) + x * (exp(1) + x * (0.5 * exp(1) + x * exp(1) / 6))\\n\\nExample 2: \\n   > print(taylor(asin(x),7,0));\\n   x * (1 + x^2 * (1 / 6 + x^2 * (3 / 40 + x^2 * 5 / 112)))\\n\\nExample 3: \\n   > print(taylor(erf(x),6,0));\\n   x * (2 / sqrt(pi) + x^2 * ((2 / sqrt(pi) * (-2)) / 6 + x^2 * (2 / sqrt(pi) * 12) / 120))\\n\\nSee also: remez, fpminimax, taylorform\\n\"\n#define HELP_TD_TEXT \"Name: TD\\n==> short form for tripledouble\\n\\nSee also: tripledouble\\n\"\n#define HELP_TIME_TEXT \"Name: time\\n==> procedure for timing Sollya code.\\n\\nUsage: \\n   time({code}) : code -> constant\\n\\nParameters: \\n   {code} is the code to be timed.\\n\\nDescription: \\n   * time permits timing a Sollya instruction, resp. a begin-end block\\n   of Sollya instructions. The timing value, measured in seconds, is returned\\n   as a Sollya constant (and not merely displayed as for timing). This \\n   permits performing computations of the timing measurement value inside Sollya.\\n\\n   * The extended nop command permits executing a defined number of\\n   useless instructions. Taking the ratio of the time needed to execute a\\n   certain Sollya instruction and the time for executing a nop\\n   therefore gives a way to abstract from the speed of a particular \\n   machine when evaluating an algorithm's performance.\\n\\nExample 1: \\n   > t = time(p=remez(sin(x),10,[-1;1]));\\n   > write(t,\\\"s were spent computing p = \\\",p,\\\"\\\\n\\\");\\n   4.4660923999999999999999999999999999995731940631712e-2s were spent computing p = 9.0486898749977990986908851357759191711354777014602e-17 * x^10 + 2.68762595115123596299959320959141640012683406736586e-6 * x^9 + -2.4247978492521313349073232289246205727856268698001e-16 * x^8 + -1.98344863020965929701245606503586461226130937598776e-4 * x^7 + 2.2748214757753544349162426281857910162575492126267e-16 * x^6 + 8.3333037186560980567697821420813799547276481409702e-3 * x^5 + -8.574715198972066974170696130354953131211051121887e-17 * x^4 + -0.166666661386013237076216566493953847771564552744173 * x^3 + 1.05699558969863875841493332282097022580493449058156e-17 * x^2 + 0.99999999973628365676559825181776417246038944720795 * x + (-3.1206530956601883024316320853642604562810646600878e-19)\\n\\nExample 2: \\n   > write(time({ p=remez(sin(x),10,[-1;1]); write(\\\"The error is 2^(\\\", log2(dirtyinfnorm(p-sin(x),[-1;1])), \\\")\\\\n\\\"); }), \\\" s were spent\\\\n\\\");\\n   The error is 2^(log2(2.39601979446524486606649528289933482070294808074097e-11))\\n   7.7647750999999999999999999999999999997499619319982e-2 s were spent\\n\\nExample 3: \\n   > t = time(bashexecute(\\\"sleep 10\\\"));\\n   > write(~(t-10),\\\"s of execution overhead.\\\\n\\\");\\n   3.3215590000000000000000000000000007150662030998927e-3s of execution overhead.\\n\\nExample 4: \\n   > ratio := time(p=remez(sin(x),10,[-1;1]))/time(nop(10));\\n   > write(\\\"This ratio = \\\", ratio, \\\" should somehow be independent of the type of machine.\\\\n\\\");\\n   This ratio = 1.56063578370725991088654244856444711603864571618457 should somehow be independent of the type of machine.\\n\\nSee also: timing, nop\\n\"\n#define HELP_TIMING_TEXT \"Name: timing\\n==> global variable controlling timing measures in Sollya.\\n\\nLibrary names:\\n   void sollya_lib_set_timing_and_print(sollya_obj_t)\\n   void sollya_lib_set_timing(sollya_obj_t)\\n   sollya_obj_t sollya_lib_get_timing()\\n\\nUsage: \\n   timing = {activation value} : on|off -> void\\n   timing = {activation value} ! : on|off -> void\\n   timing : on|off\\n\\nParameters: \\n   {activation value} controls if timing should be performed or not\\n\\nDescription: \\n   * timing is a global variable. When its value is on, the time spent in each \\n   command is measured and displayed (for verbosity levels higher than 1).\\n\\nExample 1: \\n   > verbosity=1!;\\n   > timing=on;\\n   Timing has been activated.\\n   > p=remez(sin(x),10,[-1;1]);\\n   Information: Remez: computing the quality of approximation spent 5 ms\\n   Information: Remez: computing the quality of approximation spent 4 ms\\n   Information: Remez: computing the quality of approximation spent 4 ms\\n   Information: computing a minimax approximation spent 32 ms\\n   Information: assignment spent 38 ms\\n   Information: full execution of the last parse chunk spent 43 ms\\n\\nSee also: on, off, time\\n\"\n#define HELP_TRIPLEDOUBLE_TEXT \"Names: tripledouble, TD\\n==> represents a number as the sum of three IEEE doubles.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_triple_double(sollya_obj_t)\\n   sollya_obj_t sollya_lib_triple_double_obj()\\n   int sollya_lib_is_triple_double_obj(sollya_obj_t)\\n   sollya_obj_t sollya_lib_build_function_triple_double(sollya_obj_t)\\n   #define SOLLYA_TD(x) sollya_lib_build_function_triple_double(x)\\n\\nDescription: \\n   * tripledouble is both a function and a constant.\\n\\n   * As a function, it rounds its argument to the nearest number that can be written\\n   as the sum of three double precision numbers.\\n\\n   * The algorithm used to compute tripledouble(x) is the following: let xh = double(x),\\n   let xm = double(x - xh) and let xl = double(x - xh - xm). \\n   Return the number xh + xm + xl. Note that if the\\n   current precision is not sufficient to represent exactly xh + xm + xl, a rounding will\\n   occur and the result of tripledouble(x) will be useless.\\n\\n   * As a constant, it symbolizes the triple-double precision format. It is used in \\n   contexts when a precision format is necessary, e.g. in the commands \\n   roundcoefficients and implementpoly.\\n   See the corresponding help pages for examples.\\n\\nExample 1: \\n   > verbosity=1!;\\n   > a = 1+ 2^(-55)+2^(-115);\\n   > TD(a);\\n   1.00000000000000002775557561562891353466491600711096\\n   > prec=110!;\\n   > TD(a);\\n   1.000000000000000027755575615628913534664916007110955975699724\\n\\nSee also: halfprecision, single, double, doubleextended, doubledouble, quad, roundcoefficients, implementpoly, fpminimax, printexpansion\\n\"\n#define HELP_TRUE_TEXT \"Name: true\\n==> the boolean value representing the truth.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_true()\\n   int sollya_lib_is_true(sollya_obj_t)\\n\\nDescription: \\n   * true is the usual boolean value.\\n\\nExample 1: \\n   > true && false;\\n   false\\n   > 2>1;\\n   true\\n\\nSee also: false, &&, ||\\n\"\n#define HELP_UNSUPPRESSMESSAGE_TEXT \"Name: unsuppressmessage\\n==> unsuppresses the displaying of messages with a certain number\\n\\nLibrary names:\\n   void sollya_lib_unsuppressmessage(sollya_obj_t, ...);\\n   void sollya_lib_v_unsuppressmessage(sollya_obj_t, va_list);\\n\\nUsage: \\n   unsuppressmessage({msg num 1}, ..., {msg num n})   : (integer, ..., integer) -> void\\n   unsuppressmessage({msg list})   : list -> void\\n\\nParameters: \\n   {msg num 1} thru {msg num n} represent the numbers of n messages to be suppressed\\n   {msg list} represents a list with numbers of messages to be suppressed\\n\\nDescription: \\n   * The unsuppressmessage command allows particular warning and information\\n   messages that have been suppressed from message output to be\\n   unsuppressed, i.e. activated for display again. Every Sollya warning\\n   or information message (that is not fatal to the tool's execution) has\\n   a message number. When these message numbers {msg num 1} thru {msg num n} \\n   are given to unsuppressmessage, the corresponding message are displayed\\n   again, as they are by default at according verbosity levels. Actually,\\n   the unsuppressmessage command just reverts the effects of the suppressmessage\\n   command.\\n\\n   * Instead of giving unsuppressmessage several message numbers {msg num 1} thru\\n   {msg num n} or calling unsuppressmessage several times, it is possible to give\\n   a whole list {msg list} of message numbers to unsuppressmessage.\\n\\n   * The user should be aware that unsuppressmessage presents sticky behavior for\\n   the warning and information messages suppressed from output.  In fact,\\n   unsuppressmessage just unsuppresses the warning or information messages given\\n   in argument.  All other suppressed messages stay suppressed until they\\n   get unsuppressed by subsequent calls to unsuppressmessage or the Sollya tool\\n   is restarted. This behavior distinguishes message suppression from\\n   other global states of the Sollya tool. The user may use\\n   getsuppressedmessages to obtain a list of currently suppressed\\n   messages. In particular, in order to unsuppressed all currently\\n   suppressed warning or information messages, the user may feed the\\n   output of getsuppressedmessages (a list) into unsuppressmessage.\\n\\n   * The user should also note that unsuppressing warning or information\\n   messages with unsuppressmessage just reverts the effects of the suppressmessage\\n   command but that other conditions exist that affect the actual displaying \\n   of a message, such as global verbosity (see verbosity) and modes\\n   like rounding warnings (see roundingwarnings). A message will not just \\n   get displayed because it was unsuppressed with unsuppressmessage.\\n\\n   * When unsuppressmessage is used on message numbers that do not exist in the\\n   current version of the tool, a warning is displayed. The call has no\\n   other effect though.\\n\\nExample 1: \\n   > verbosity = 1;\\n   The verbosity level has been set to 1.\\n   > 0.1;\\n   Warning: Rounding occurred when converting the constant \\\"0.1\\\" to floating-point with 165 bits.\\n   If safe computation is needed, try to increase the precision.\\n   0.1\\n   > suppressmessage(174);\\n   > 0.1;\\n   0.1\\n   > suppressmessage(174);\\n   > 0.1;\\n   0.1\\n\\nExample 2: \\n   > verbosity = 12;\\n   The verbosity level has been set to 12.\\n   > showmessagenumbers = on; \\n   Displaying of message numbers has been activated.\\n   > diff(exp(x * 0.1));\\n   Warning (174): Rounding occurred when converting the constant \\\"0.1\\\" to floating-point with 165 bits.\\n   If safe computation is needed, try to increase the precision.\\n   Information (196): formally differentiating a function.\\n   Information (197): differentiating the expression 'exp(x * 0.1)'\\n   Information (207): no Horner simplification will be performed because the given tree is already in Horner form.\\n   exp(x * 0.1) * 0.1\\n   > suppressmessage([| 174, 207, 196 |]);\\n   > diff(exp(x * 0.1));\\n   Information (197): differentiating the expression 'exp(x * 0.1)'\\n   exp(x * 0.1) * 0.1\\n   > unsuppressmessage([| 174, 196 |]);\\n\\nExample 3: \\n   > verbosity = 12;\\n   The verbosity level has been set to 12.\\n   > showmessagenumbers = on;\\n   Displaying of message numbers has been activated.\\n   > suppressmessage(207, 387, 390, 388, 391, 196, 195, 197, 205);\\n   > getsuppressedmessages();\\n   [|195, 196, 197, 205, 207, 387, 388, 390, 391|]\\n   > evaluate(x/sin(x) - 1, [-1;1]);\\n   [0;0.8508157176809256179117532413986501934703966550941]\\n   > unsuppressmessage(getsuppressedmessages());\\n   > getsuppressedmessages();\\n   [| |]\\n\\nSee also: getsuppressedmessages, suppressmessage, unsuppressmessage, verbosity, roundingwarnings\\n\"\n#define HELP_VAR_TEXT \"Name: var\\n==> declaration of a local variable in a scope\\n\\nUsage: \\n   var {identifier1}, {identifier2},... , {identifiern} : void\\n\\nParameters: \\n   {identifier1}, {identifier2},... , {identifiern} represent variable identifiers\\n\\nDescription: \\n   * The keyword var allows for the declaration of local variables\\n   {identifier1} through {identifiern} in a begin-end-block ({}-block).\\n   Once declared as a local variable, an identifier will shadow\\n   identifiers declared in higher scopes and undeclared identifiers\\n   available at top-level.\\n    \\n   Variable declarations using var are only possible in the\\n   beginning of a begin-end-block. Several var statements can be\\n   given. Once another statement is given in a begin-end-block, no more\\n   var statements can be given.\\n    \\n   Variables declared by var statements are dereferenced as error\\n   until they are assigned a value. \\n\\nExample 1: \\n   > exp(x); \\n   exp(x)\\n   > a = 3; \\n   > {var a, b; a=5; b=3; {var a; var b; b = true; a = 1; a; b;}; a; b; }; \\n   1\\n   true\\n   5\\n   3\\n   > a;\\n   3\\n\\nSee also: error, proc\\n\"\n#define HELP_VERBOSITY_TEXT \"Name: verbosity\\n==> global variable controlling the amount of information displayed by commands.\\n\\nLibrary names:\\n   void sollya_lib_set_verbosity_and_print(sollya_obj_t)\\n   void sollya_lib_set_verbosity(sollya_obj_t)\\n   sollya_obj_t sollya_lib_get_verbosity()\\n\\nUsage: \\n   verbosity = {n} : integer -> void\\n   verbosity = {n} ! : integer -> void\\n   verbosity : integer\\n\\nParameters: \\n   {n} controls the amount of information to be displayed\\n\\nDescription: \\n   * verbosity accepts any integer value. At level 0, commands do not display anything\\n   on standard output. Note that very critical information may however be displayed on\\n   standard error.\\n\\n   * Default level is 1. It displays important information such as warnings when \\n   roundings happen.\\n\\n   * For higher levels more information is displayed depending on the command.\\n\\nExample 1: \\n   > verbosity=0!;\\n   > 1.2+\\\"toto\\\";\\n   error\\n   > verbosity=1!;\\n   > 1.2+\\\"toto\\\";\\n   Warning: Rounding occurred when converting the constant \\\"1.2\\\" to floating-point with 165 bits.\\n   If safe computation is needed, try to increase the precision.\\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\\n   or its evaluation has failed because of some error on a side-effect.\\n   error\\n   > verbosity=2!;\\n   > 1.2+\\\"toto\\\";\\n   Warning: Rounding occurred when converting the constant \\\"1.2\\\" to floating-point with 165 bits.\\n   If safe computation is needed, try to increase the precision.\\n   Warning: at least one of the given expressions or a subexpression is not correctly typed\\n   or its evaluation has failed because of some error on a side-effect.\\n   Information: the expression or a partial evaluation of it has been the following:\\n   (1.2) + (\\\"toto\\\")\\n   error\\n\\nSee also: roundingwarnings, suppressmessage, unsuppressmessage, showmessagenumbers, getsuppressedmessages\\n\"\n#define HELP_VOID_TEXT \"Name: void\\n==> the functional result of a side-effect or empty argument resp. the corresponding type\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_void()\\n   int sollya_lib_is_void(sollya_obj_t)\\n   SOLLYA_EXTERNALPROC_TYPE_VOID\\n\\nUsage: \\n   void : void | type type\\n\\nDescription: \\n   * The variable void represents the functional result of a\\n   side-effect or an empty argument.  It is used only in combination with\\n   the applications of procedures or identifiers bound through\\n   externalproc to external procedures.\\n    \\n   The void result produced by a procedure or an external procedure\\n   is not printed at the prompt. However, it is possible to print it out\\n   in a print statement or in complex data types such as lists.\\n    \\n   The void argument is implicit when giving no argument to a\\n   procedure or an external procedure when applied. It can nevertheless be given\\n   explicitly.  For example, suppose that foo is a procedure or an\\n   external procedure with a void argument. Then foo() and foo(void) are\\n   correct calls to foo. Here, a distinction must be made for procedures having an\\n   arbitrary number of arguments. In this case, an implicit void\\n   as the only parameter to a call of such a procedure gets converted into \\n   an empty list of arguments, an explicit void gets passed as-is in the\\n   formal list of parameters the procedure receives.\\n\\n   * void is used also as a type identifier for\\n   externalproc. Typically, an external procedure taking void as an\\n   argument or returning void is bound with a signature void ->\\n   some type or some type -> void. See externalproc for more\\n   details.\\n\\nExample 1: \\n   > print(void);\\n   void\\n   > void;\\n\\nExample 2: \\n   > hey = proc() { print(\\\"Hello world.\\\"); };\\n   > hey;\\n   proc()\\n   {\\n   print(\\\"Hello world.\\\");\\n   return void;\\n   }\\n   > hey();\\n   Hello world.\\n   > hey(void);\\n   Hello world.\\n   > print(hey());\\n   Hello world.\\n   void\\n\\nExample 3: \\n   > bashexecute(\\\"gcc -fPIC -Wall -c externalprocvoidexample.c\\\");\\n   > bashexecute(\\\"gcc -fPIC -shared -o externalprocvoidexample externalprocvoidexample.o\\\");\\n   > externalproc(foo, \\\"./externalprocvoidexample\\\", void -> void);\\n   > foo;\\n   foo\\n   > foo();\\n   Hello from the external world.\\n   > foo(void);\\n   Hello from the external world.\\n   > print(foo());\\n   Hello from the external world.\\n   void\\n\\nExample 4: \\n   > procedure blub(L = ...) { print(\\\"Argument list:\\\", L); };\\n   > blub(1);\\n   Argument list: [|1|]\\n   > blub();\\n   Argument list: [| |]\\n   > blub(void); \\n   Argument list: [|void|]\\n\\nSee also: error, proc, externalproc\\n\"\n#define HELP_WORSTCASE_TEXT \"Name: worstcase\\n==> searches for hard-to-round cases of a function\\n\\nLibrary names:\\n   void sollya_lib_worstcase(sollya_obj_t, sollya_obj_t, sollya_obj_t,\\n                             sollya_obj_t, sollya_obj_t, ...)\\n   void sollya_lib_v_worstcase(sollya_obj_t, sollya_obj_t, sollya_obj_t,\\n                               sollya_obj_t, sollya_obj_t, va_list)\\n\\nUsage: \\n   worstcase({function}, {preimage precision}, {preimage exponent range}, {image precision}, {error bound}) : (function, integer, range, integer, constant) -> void\\n   worstcase({function}, {preimage precision}, {preimage exponent range}, {image precision}, {error bound}, {filename}) : (function, integer, range, integer, constant, string) -> void\\n\\nParameters: \\n   {function} represents the function to be considered\\n   {preimage precision} represents the precision of the preimages\\n   {preimage exponent range} represents the exponents in the preimage format\\n   {image precision} represents the precision of the format the images are to be rounded to\\n   {error bound} represents the upper bound for the search w.r.t. the relative rounding error\\n   {filename} represents a character sequence containing a filename\\n\\nDescription: \\n   * The worstcase command is deprecated. It searches for hard-to-round cases of\\n   a function. The command searchgal has a comparable functionality.\\n\\nExample 1: \\n   > worstcase(exp(x),24,[1,2],24,1b-26);\\n   prec = 165\\n   x = 1.99999988079071044921875\\t\\tf(x) = 7.3890552520751953125\\t\\teps = 4.5998601423446695596184695493764120138001954979037e-9 = 2^(-27.695763) \\n   x = 2\\t\\tf(x) = 7.38905620574951171875\\t\\teps = 1.44563608749673018122228379395533417878125150587072e-8 = 2^(-26.043720) \\n   \\n\\nSee also: round, searchgal, evaluate\\n\"\n#define HELP_WRITE_TEXT \"Name: write\\n==> prints an expression without separators\\n\\nUsage: \\n   write({expr1},...,{exprn}) : (any type,..., any type) -> void\\n   write({expr1},...,{exprn}) > {filename} : (any type,..., any type, string) -> void\\n   write({expr1},...,{exprn}) >> {filename} : (any type,...,any type, string) -> void\\n\\nParameters: \\n   {expr} represents an expression\\n   {filename} represents a character sequence indicating a file name\\n\\nDescription: \\n   * write({expr1},...,{exprn}) prints the expressions {expr1} through\\n   {exprn}. The character sequences corresponding to the expressions are\\n   concatenated without any separator. No newline is displayed at the\\n   end.  In contrast to print, write expects the user to give all\\n   separators and newlines explicitly.\\n    \\n   If a second argument {filename} is given after a single \\\">\\\", the\\n   displaying is not output on the standard output of Sollya but if in\\n   the file {filename} that get newly created or overwritten. If a double\\n    \\\">>\\\" is given, the output will be appended to the file {filename}.\\n    \\n   The global variables display, midpointmode and fullparentheses have\\n   some influence on the formatting of the output (see display,\\n   midpointmode and fullparentheses).\\n    \\n   Remark that if one of the expressions {expri} given in argument is of\\n   type string, the character sequence {expri} evaluates to is\\n   displayed. However, if {expri} is of type list and this list\\n   contains a variable of type string, the expression for the list\\n   is displayed, i.e.  all character sequences get displayed surrounded\\n   by quotes (\\\"). Nevertheless, escape sequences used upon defining\\n   character sequences are interpreted immediately.\\n\\nExample 1: \\n   > write(x + 2 + exp(sin(x))); \\n   > write(\\\"Hello\\\\n\\\");\\n   x + 2 + exp(sin(x))Hello\\n   > write(\\\"Hello\\\",\\\"world\\\\n\\\");\\n   Helloworld\\n   > write(\\\"Hello\\\",\\\"you\\\", 4 + 3, \\\"other persons.\\\\n\\\");\\n   Helloyou7other persons.\\n\\nExample 2: \\n   > write(\\\"Hello\\\",\\\"\\\\n\\\");\\n   Hello\\n   > write([|\\\"Hello\\\"|],\\\"\\\\n\\\");\\n   [|\\\"Hello\\\"|]\\n   > s = \\\"Hello\\\";\\n   > write(s,[|s|],\\\"\\\\n\\\");\\n   Hello[|\\\"Hello\\\"|]\\n   > t = \\\"Hello\\\\tyou\\\";\\n   > write(t,[|t|],\\\"\\\\n\\\");\\n   Hello\\tyou[|\\\"Hello\\\\tyou\\\"|]\\n\\nExample 3: \\n   > write(x + 2 + exp(sin(x))) > \\\"foo.sol\\\";\\n   > readfile(\\\"foo.sol\\\");\\n   x + 2 + exp(sin(x))\\n\\nExample 4: \\n   > write(x + 2 + exp(sin(x))) >> \\\"foo.sol\\\";\\n\\nSee also: print, printexpansion, printdouble, printsingle, printxml, readfile, autosimplify, display, midpointmode, fullparentheses, evaluate, roundingwarnings, autosimplify\\n\"\n#define HELP_XFREEVARIABLE_TEXT \"Name: _x_\\n==> universal name for the mathematical free variable.\\n\\nLibrary names:\\n   sollya_obj_t sollya_lib_free_variable()\\n   sollya_obj_t sollya_lib_build_function_free_variable()\\n   #define SOLLYA_X_ (sollya_lib_build_function_free_variable())\\n\\nDescription: \\n   * _x_ is an identifier that always denotes the mathematical free variable.\\n   It cannot be assigned.\\n\\n   * Sollya manipulates mathematical functions of a single variable. The first\\n   time that a variable name is used without having been assigned before, this\\n   variable name is automatically considered by Sollya as the name of the\\n   free variable. Subsequently, any other unassigned variable name will be\\n   considered as the free variable with a warning making this conversion\\n   explicit. This is convenient for an every-day use of the interactive tool,\\n   but it has the drawback that the free variable name can change from a\\n   session to another. There are contexts (e.g., within a procedure, or for\\n   doing pattern matching) when one might want to refer to the free variable\\n   regardless of its name in the current session. For this purpose _x_ is\\n   a universal identifier, always available and always denoting the free\\n   variable, whatever its name is in the current context.\\n\\nExample 1: \\n   > verbosity=1!;\\n   > sin(a);\\n   sin(a)\\n   > b;\\n   Warning: the identifier \\\"b\\\" is neither assigned to, nor bound to a library function nor external procedure, nor equal to the current free variable.\\n   Will interpret \\\"b\\\" as \\\"a\\\".\\n   a\\n   > _x_;\\n   a\\n\\nExample 2: \\n   > verbosity=1!;\\n   > sin(y);\\n   sin(y)\\n   > f = proc(a) {\\n       return sin(a + _x_);\\n     };\\n   > rename(y,z);\\n   Information: the free variable has been renamed from \\\"y\\\" to \\\"z\\\".\\n   > f(1);\\n   sin(1 + z)\\n\\nExample 3: \\n   > f = sin(y);\\n   > match f with\\n       sin(a) : { print(\\\"sin of a with a =\\\", a);\\n                  match a with\\n                    _x_ : { print(\\\"a turns out to be the free variable\\\"); }\\n     \\t       default : { print(\\\"a is some expression\\\"); };\\n                }\\n       _x_ : { print(\\\"Free variable\\\") ; }\\n       default: { print(\\\"Something else\\\"); };\\n   sin of a with a = y\\n   a turns out to be the free variable\\n\\nSee also: rename, isbound, proc\\n\"\n#endif /* ifdef HELP_H*/\n",
        "/tmp/vanessa/spack-stage/spack-stage-sollya-7.0-d2v6iu4jkfdedpugpbvpzwrlag7udcvx/spack-src/external.c": "/*\n\n  Copyright 2006-2018 by\n\n  Laboratoire de l'Informatique du Parallelisme,\n  UMR CNRS - ENS Lyon - UCB Lyon 1 - INRIA 5668,\n\n  Laboratoire d'Informatique de Paris 6, equipe PEQUAN,\n  UPMC Universite Paris 06 - CNRS - UMR 7606 - LIP6, Paris, France,\n\n  Laboratoire d'Informatique de Paris 6 - \u00c9quipe PEQUAN\n  Sorbonne Universit\u00e9s\n  UPMC Univ Paris 06\n  UMR 7606, LIP6\n  Bo\u00eete Courrier 169\n  4, place Jussieu\n  F-75252 Paris Cedex 05\n  France\n\n  and by\n\n  Sorbonne Universit\u00e9\n  CNRS, Laboratoire d'Informatique de Paris 6, LIP6\n  F - 75005 Paris\n  France.\n\n  Contributors Ch. Lauter, S. Chevillard\n\n  christoph.lauter@ens-lyon.org\n  sylvain.chevillard@ens-lyon.org\n\n  This software is a computer program whose purpose is to provide an\n  environment for safe floating-point code development. It is\n  particularly targeted to the automated implementation of\n  mathematical floating-point libraries (libm). Amongst other features,\n  it offers a certified infinity norm, an automatic polynomial\n  implementer and a fast Remez algorithm.\n\n  This software is governed by the CeCILL-C license under French law and\n  abiding by the rules of distribution of free software.  You can  use,\n  modify and/ or redistribute the software under the terms of the CeCILL-C\n  license as circulated by CEA, CNRS and INRIA at the following URL\n  \"http://www.cecill.info\".\n\n  As a counterpart to the access to the source code and  rights to copy,\n  modify and redistribute granted by the license, users are provided only\n  with a limited warranty  and the software's author,  the holder of the\n  economic rights,  and the successive licensors  have only  limited\n  liability.\n\n  In this respect, the user's attention is drawn to the risks associated\n  with loading,  using,  modifying and/or developing or reproducing the\n  software by the user in light of its specific status of free software,\n  that may mean  that it is complicated to manipulate,  and  that  also\n  therefore means  that it is reserved for developers  and  experienced\n  professionals having in-depth computer knowledge. Users are therefore\n  encouraged to load and test the software's suitability as regards their\n  requirements in conditions enabling the security of their systems and/or\n  data to be ensured and,  more generally, to use and operate it in the\n  same conditions as regards security.\n\n  The fact that you are presently reading this means that you have had\n  knowledge of the CeCILL-C license and that you accept its terms.\n\n  This program is distributed WITHOUT ANY WARRANTY; without even the\n  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n*/\n\n#define _BSD_SOURCE\n#define _DEFAULT_SOURCE\n\n#include <unistd.h> /* execve, fork, daemon */\n#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/types.h>\n#include <stdio.h>\n#include <sys/wait.h>\n#include <dlfcn.h>\n#include <gmp.h>\n#include <mpfr.h>\n#include \"expression.h\"\n#include \"external.h\"\n#include \"plot.h\"\n#include \"infnorm.h\"\n#include \"general.h\"\n#include \"printf.h\"\n#include \"signalhandling.h\"\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#define READ_BUFFER_SIZE 2048\n\nextern int fileNumber;\n\nint bashExecute(char *command) {\n  int i;\n  deferSignalHandling();\n  fflush(NULL);\n  i = system(command);\n  fflush(NULL);\n  resumeSignalHandling();\n  return WEXITSTATUS(i);\n}\n\nchar *evaluateStringAsBashCommand(char *command, char *input) {\n  char *res;\n  int okay, errorOnInput;\n  int pipesToBash[2];\n  int pipesFromBash[2];\n  pid_t pid;\n  int childStatus;\n  char readBuffer[READ_BUFFER_SIZE];\n  int readLen;\n  char *buf;\n  int len;\n  int i;\n\n  if ((command == NULL) || (strlen(command) == 0)) {\n    printMessage(1,SOLLYA_MSG_NO_COMMAND_PROVIDED,\"Warning in bashevaluate: no command provided\\n\");\n    return NULL;\n  }\n\n  res = NULL;\n  okay = 0;\n  deferSignalHandling();\n  fflush(NULL);\n  resumeSignalHandling();\n\n  /* Create two unnamed pipes */\n  if ((input != NULL) && (pipe(pipesToBash) == -1)) {\n    /* Error creating the pipe */\n    printMessage(1,SOLLYA_MSG_ERROR_WHILE_CREATING_A_PIPE,\"Warning in bashevaluate: error while creating a pipe\");\n  } else {\n    if (pipe(pipesFromBash) == -1) {\n      /* Error creating the pipe */\n      printMessage(1, SOLLYA_MSG_ERROR_WHILE_CREATING_A_PIPE, \"Warning in bashevaluate: error while creating a pipe\");\n    } else {\n      /* Fork\n      //\n      // Flush before forking\n      */\n      deferSignalHandling();\n      fflush(NULL);\n      parserFlushInput();\n      resumeSignalHandling();\n      if ((pid = fork()) == -1) {\n\t/* Error forking */\n\tprintMessage(1, SOLLYA_MSG_ERROR_WHILE_FORKING, \"Warning in bashevaluate: error while forking\");\n      } else {\n\t/* Fork worked */\n\tif (pid == 0) {\n\t  /* I am the child\n\t  //\n\t  // Close the unneeded ends of the pipes.\n\t  */\n\t  if (input != NULL) close(pipesToBash[1]);\n\t  close(pipesFromBash[0]);\n\n\t  /* Connect my input and output to the pipe\n\t   */\n\t  if (input != NULL) {\n\t    if (sollya_dup2(pipesToBash[0],0) == -1) {\n\t      _exit(1);\n\t    }\n\t  }\n\t  if (sollya_dup2(pipesFromBash[1],1) == -1) {\n\t    _exit(1);\n\t  }\n\n\t  /* Execute bash\n\t   */\n\t  deferSignalHandling();\n\t  fflush(NULL);\n\t  execlp(\"sh\",\"sh\",\"-c\",command,(char *) NULL);\n\t  fflush(NULL);\n\t  resumeSignalHandling();\n\n\t  _exit(1);\n\t} else {\n\t  /* I am the father\n\t  //\n\t  // Close the unneeded ends of the pipes.\n\t  */\n\t  if (input != NULL) close(pipesToBash[0]);\n\t  close(pipesFromBash[1]);\n\n\t  /* Do my job\n\t   */\n\t  errorOnInput = 0;\n\t  if (input != NULL) {\n\t    if (write(pipesToBash[1],input,\n\t\t      strlen(input) * sizeof(char)) == -1) {\n\t      printMessage(1,SOLLYA_MSG_UNABLE_TO_WRITE_TO_BASH,\"Warning in bashevaluate: unable to write to bash\");\n\t      errorOnInput = 1;\n\t    }\n\t    close(pipesToBash[1]);\n\t  }\n\n\t  deferSignalHandling();\n\t  fflush(NULL);\n\t  resumeSignalHandling();\n\n\t  if (!errorOnInput) {\n\t    do {\n\t      readLen = read(pipesFromBash[0],readBuffer,READ_BUFFER_SIZE);\n\t      if (readLen > 0) {\n\t\tif (res == NULL) {\n\t\t  res = safeCalloc(readLen + 1, sizeof(char));\n\t\t  buf = res;\n\t\t} else {\n\t\t  len = strlen(res);\n\t\t  buf = safeCalloc(len + readLen + 1, sizeof(char));\n\t\t  strcpy(buf,res);\n\t\t  safeFree(res);\n\t\t  res = buf;\n\t\t  buf += len;\n\t\t}\n\t\tfor (i=0;i<readLen;i++) {\n\t\t  *buf = (readBuffer[i] == '\\0') ? '?' : readBuffer[i];\n\t\t  buf++;\n\t\t}\n\t      }\n\t    } while (readLen == READ_BUFFER_SIZE);\n\n\t    /* Wait for my child to exit */\n\t    wait(&childStatus);\n\n\t    /* Read the rest of the pipe if it filled up again after\n\t       having been emptied already.\n\t    */\n\t    do {\n\t      readLen = read(pipesFromBash[0],readBuffer,READ_BUFFER_SIZE);\n\t      if (readLen > 0) {\n\t\tif (res == NULL) {\n\t\t  res = safeCalloc(readLen + 1, sizeof(char));\n\t\t  buf = res;\n\t\t} else {\n\t\t  len = strlen(res);\n\t\t  buf = safeCalloc(len + readLen + 1, sizeof(char));\n\t\t  strcpy(buf,res);\n\t\t  safeFree(res);\n\t\t  res = buf;\n\t\t  buf += len;\n\t\t}\n\t\tfor (i=0;i<readLen;i++) {\n\t\t  *buf = (readBuffer[i] == '\\0') ? '?' : readBuffer[i];\n\t\t  buf++;\n\t\t}\n\t      }\n\t    } while (readLen == READ_BUFFER_SIZE);\n\n\t    if (WEXITSTATUS(childStatus) != 0) {\n\t      printMessage(1, SOLLYA_MSG_THE_EXIT_CODE_OF_CHILD_PROCESS_IS, \"Warning in bashevaluate: the exit code of the child process is %d.\\n\", WEXITSTATUS(childStatus));\n\t    } else {\n\t      printMessage(2, SOLLYA_MSG_THE_EXIT_CODE_OF_CHILD_PROCESS_IS, \"Information in bashevaluate: the exit code of the child process is %d.\\n\", WEXITSTATUS(childStatus));\n\t    }\n\n\t    close(pipesFromBash[0]);\n\n\t    okay = 1;\n\t    if (res == NULL) {\n\t      res = safeCalloc(2, sizeof(char));\n\t    }\n\t    len = strlen(res);\n\t    if (len >= 1) {\n\t      if (res[len-1] == '\\n') res[len-1] = '\\0';\n\t    }\n\t  }\n\t}\n      }\n    }\n  }\n\n  if (!okay) {\n    if (res != NULL) safeFree(res);\n    res = NULL;\n  }\n\n  deferSignalHandling();\n  fflush(NULL);\n  parserFlushInput();\n  resumeSignalHandling();\n\n  return res;\n}\n\n\nvoid externalPlot(char *library, mpfr_t a, mpfr_t b, mp_prec_t samplingPrecision, int random, node *func, int mode, mp_prec_t prec, char *name, int type) {\n  void *descr;\n  void  (*myFunction)(mpfr_t, mpfr_t);\n  char *error;\n  mpfr_t x_h,x,y,temp,perturb,ulp,min_value;\n  double xd, yd;\n  FILE *file;\n  gmp_randstate_t state;\n  char *gplotname;\n  char *dataname;\n  char *outputname;\n  int n;\n  char *gnuplotname;\n\n  gnuplotname = getGnuplotName();\n\n  if(samplingPrecision > prec) {\n    printMessage(1,SOLLYA_MSG_SAMPLING_PREC_MUST_BE_LOWER_THAN_CURR_PREC,\"Error: you must use a sampling precision lower than the current precision\\n\");\n    return;\n  }\n\n  descr = dlopen(library, RTLD_NOW);\n  if (descr==NULL) {\n    printMessage(1,SOLLYA_MSG_EXTERNALPLOT_COULD_NOT_OPEN_A_LIBRARY, \"Error: the given library (%s) is not available (%s)!\\n\",library,dlerror());\n    return;\n  }\n\n  dlerror(); /* Clear any existing error */\n  myFunction = (void (*)(mpfr_t, mpfr_t)) dlsym(descr, \"f\");\n  if ((error = dlerror()) != NULL) {\n    printMessage(1, SOLLYA_MSG_EXTERNALPLOT_DID_NOT_FIND_FUNCTION_F, \"Error: the function f cannot be found in library %s (%s)\\n\",library,error);\n    return;\n  }\n\n  if(name==NULL) {\n    n = sollya_snprintf(NULL, 0, \"%s/%s%s-%04d\", getTempDir(), PACKAGE_NAME, getUniqueId(), fileNumber);\n    gplotname = (char *)safeCalloc(n+3, sizeof(char));\n    sollya_snprintf(gplotname, n+3, \"%s/%s%s-%04d.p\",getTempDir(), PACKAGE_NAME, getUniqueId(), fileNumber);\n    dataname = (char *)safeCalloc(n+5, sizeof(char));\n    sollya_snprintf(dataname, n+5, \"%s/%s%s-%04d.dat\",getTempDir(),PACKAGE_NAME,getUniqueId(), fileNumber);\n    outputname = (char *)safeCalloc(1, sizeof(char));\n    fileNumber++;\n    if (fileNumber >= NUMBEROFFILES) fileNumber=0;\n  }\n  else {\n    gplotname = (char *)safeCalloc(strlen(name)+3,sizeof(char));\n    sprintf(gplotname,\"%s.p\",name);\n    dataname = (char *)safeCalloc(strlen(name)+5,sizeof(char));\n    sprintf(dataname,\"%s.dat\",name);\n    outputname = (char *)safeCalloc(strlen(name)+5,sizeof(char));\n    if ((type==PLOTPOSTSCRIPT) || (type==PLOTPOSTSCRIPTFILE)) sprintf(outputname,\"%s.eps\",name);\n  }\n\n\n  /* Beginning of the interesting part of the code */\n  file = fopen(gplotname, \"w\");\n  if (file == NULL) {\n    printMessage(1,SOLLYA_MSG_COULD_NOT_OPEN_PLOT_FILE,\"Error: the file %s requested by plot could not be opened for writing: \",gplotname);\n    printMessage(1,SOLLYA_MSG_CONTINUATION,\"\\\"%s\\\".\\n\",strerror(errno));\n    return;\n  }\n  sollyaFprintf(file, \"# Gnuplot script generated by %s\\n\",PACKAGE_NAME);\n  if ((type==PLOTPOSTSCRIPT) || (type==PLOTPOSTSCRIPTFILE)) sollyaFprintf(file,\"set terminal postscript eps color\\nset out \\\"%s\\\"\\n\",outputname);\n  sollyaFprintf(file, \"set format x \\\"%%g\\\"\\n\");\n  sollyaFprintf(file, \"set format y \\\"%%g\\\"\\n\");\n  sollyaFprintf(file, \"set xrange [%1.50e:%1.50e]\\n\", sollya_mpfr_get_d(a, GMP_RNDD),sollya_mpfr_get_d(b, GMP_RNDU));\n  sollyaFprintf(file, \"plot \\\"%s\\\" using 1:2 with dots t \\\"\\\"\\n\",dataname);\n  if ((name==NULL) || (type==PLOTFILE)) {\n    sollyaFprintf(file,\"pause mouse close\\n\");\n  }\n  fclose(file);\n\n  file = fopen(dataname, \"w\");\n  if (file == NULL) {\n    printMessage(1,SOLLYA_MSG_COULD_NOT_OPEN_PLOT_FILE,\"Error: the file %s requested by plot could not be opened for writing: \",dataname);\n    printMessage(1,SOLLYA_MSG_CONTINUATION,\"\\\"%s\\\".\\n\",strerror(errno));\n    return;\n  }\n\n  gmp_randinit_default (state);\n\n  mpfr_init2(x_h,samplingPrecision);\n  mpfr_init2(perturb, prec);\n  mpfr_init2(x,prec);\n  mpfr_init2(y,prec);\n  mpfr_init2(temp,prec);\n  mpfr_init2(ulp,prec);\n  mpfr_init2(min_value,53);\n\n  mpfr_sub(min_value, b, a, GMP_RNDN);\n  mpfr_div_2ui(min_value, min_value, 12, GMP_RNDN);\n\n  mpfr_set(x_h,a,GMP_RNDD);\n\n  while(mpfr_less_p(x_h,b)) {\n    mpfr_set(x, x_h, GMP_RNDN); /* exact */\n\n    if (mpfr_zero_p(x_h)) {\n      mpfr_set(x_h, min_value, GMP_RNDU);\n    }\n    else {\n      if (mpfr_cmpabs(x_h, min_value) < 0) mpfr_set_d(x_h, 0., GMP_RNDN);\n      else mpfr_nextabove(x_h);\n    }\n\n    if(random) {\n      mpfr_sub(ulp, x_h, x, GMP_RNDN);\n      mpfr_urandomb(perturb, state);\n      mpfr_mul(perturb, perturb, ulp, GMP_RNDN);\n      mpfr_add(x, x, perturb, GMP_RNDN);\n    }\n\n    if (mpfr_zero_p(x)) {\n      mpfr_mul(x,x,x,GMP_RNDN); /* (+/- 0)^2 = + 0 */\n    }\n    (*myFunction)(temp,x);\n    evaluateFaithful(y, func, x,prec);\n    mpfr_sub(temp, temp, y, GMP_RNDN);\n    if(mode==RELATIVE) mpfr_div(temp, temp, y, GMP_RNDN);\n    xd =  sollya_mpfr_get_d(x, GMP_RNDN);\n    if (xd >= MAX_VALUE_GNUPLOT) xd = MAX_VALUE_GNUPLOT;\n    if (xd <= -MAX_VALUE_GNUPLOT) xd = -MAX_VALUE_GNUPLOT;\n    sollyaFprintf(file, \"%1.50e\",xd);\n    if (!mpfr_number_p(temp)) {\n      printMessage(2,SOLLYA_MSG_A_FUNCTION_COULD_NOT_BE_PLOTTED_AT_A_POINT,\"Information: function undefined or not evaluable in point %s = %v\\nThis point will not be plotted.\\n\",((variablename == NULL) ? \"_x_\" : variablename),x);\n    }\n    yd = sollya_mpfr_get_d(temp, GMP_RNDN);\n    if (yd >= MAX_VALUE_GNUPLOT) yd = MAX_VALUE_GNUPLOT;\n    if (yd <= -MAX_VALUE_GNUPLOT) yd = -MAX_VALUE_GNUPLOT;\n    sollyaFprintf(file, \"\\t%1.50e\\n\", yd);\n  }\n\n  fclose(file);\n\n  /* End of the interesting part.... */\n\n  dlclose(descr);\n  mpfr_clear(x);\n  mpfr_clear(y);\n  mpfr_clear(x_h);\n  mpfr_clear(temp);\n  mpfr_clear(perturb);\n  mpfr_clear(ulp);\n  mpfr_clear(min_value);\n\n  deferSignalHandling();\n  fflush(NULL);\n  parserFlushInput();\n  resumeSignalHandling();\n  if ((name==NULL) || (type==PLOTFILE)) {\n    if (fork()==0) { /* The daemon call could fail (and will on certain Cygwin), in which case a double fork yields (almost (mod HUP etc.)) the same result. If daemon works, the fork has no effect */\n      if (daemon(1,0) == 0) { /* We want the prompt to return, so we need a daemon. We need to connect that daemon to /dev/null, which we do by setting the 2nd arg to zero */\n\tif (fork() == 0) { /* We need a child of the daemon that waits for gnuplot to remove the file */\n\t  execlp(gnuplotname, gnuplotname, gplotname, NULL);\n\t  perror(\"An error occurred when calling gnuplot \");\n\t  exit(1);\n\t} else {\n\t  wait(NULL);\n\t  sleep(1);\n\t  remove(gplotname);\n\t  remove(dataname);\n\t  sleep(1);\n\t  exit(0);\n\t}\n      } else {\n\tfprintf(stderr, \"Could not create a daemon for gnuplot\\n\");\n\tif (fork() == 0) { /* We could not create a daemon but we still want a child to wait for us */\n\t  execlp(gnuplotname, gnuplotname, gplotname, NULL);\n\t  perror(\"An error occurred when calling gnuplot \");\n\t  exit(1);\n\t} else {\n\t  wait(NULL);\n\t  sleep(2);\n\t  exit(0);\n\t}\t  \n      }\n    }\n    else {\n      wait(NULL);\n      sleep(1);\n    }\n  }\n  else { /* Case we have an output: no daemon */\n    if (fork()==0) {\n      execlp(gnuplotname, gnuplotname, gplotname, NULL);\n      perror(\"An error occurred when calling gnuplot \");\n      exit(1);\n    }\n    else {\n      wait(NULL);\n      if(type==PLOTPOSTSCRIPT) {\n\tremove(gplotname);\n\tremove(dataname);\n      }\n      sleep(1);\n    }\n  }\n\n  deferSignalHandling();\n  fflush(NULL);\n  parserFlushInput();\n  resumeSignalHandling();\n  \n  safeFree(gplotname);\n  safeFree(dataname);\n  safeFree(outputname);\n  gmp_randclear(state);\n  return;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-sollya-7.0-d2v6iu4jkfdedpugpbvpzwrlag7udcvx/spack-src/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\n# serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsdelf*-gnu)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='NetBSD ld.elf_so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd* | netbsdelf*-gnu)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd* | netbsdelf*-gnu)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  linux* | k*bsd*-gnu | gnu*)\n    _LT_TAGVAR(link_all_deplibs, $1)=no\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  linux* | k*bsd*-gnu | gnu*)\n    _LT_TAGVAR(link_all_deplibs, $1)=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd* | netbsdelf*-gnu)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n\t_LT_TAGVAR(link_all_deplibs, $1)=no\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      ;;\n\n    netbsd* | netbsdelf*-gnu)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-sollya-7.0-d2v6iu4jkfdedpugpbvpzwrlag7udcvx/spack-src/m4/ltoptions.m4": "# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004-2005, 2007-2009, 2011-2015 Free Software\n#   Foundation, Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 8 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option '$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl 'shared' nor 'disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n\t\t   [_LT_ENABLE_FAST_INSTALL])\n  _LT_UNLESS_OPTIONS([LT_INIT], [aix-soname=aix aix-soname=both aix-soname=svr4],\n\t\t   [_LT_WITH_AIX_SONAME([aix])])\n  ])\n])# _LT_SET_OPTIONS\n\n\n## --------------------------------- ##\n## Macros to handle LT_INIT options. ##\n## --------------------------------- ##\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [1], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the 'shared' and\n# 'disable-shared' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the 'static' and\n# 'disable-static' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the 'fast-install'\n# and 'disable-fast-install' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_AIX_SONAME([DEFAULT])\n# ----------------------------------\n# implement the --with-aix-soname flag, and support the `aix-soname=aix'\n# and `aix-soname=both' and `aix-soname=svr4' LT_INIT options. DEFAULT\n# is either `aix', `both' or `svr4'.  If omitted, it defaults to `aix'.\nm4_define([_LT_WITH_AIX_SONAME],\n[m4_define([_LT_WITH_AIX_SONAME_DEFAULT], [m4_if($1, svr4, svr4, m4_if($1, both, both, aix))])dnl\nshared_archive_member_spec=\ncase $host,$enable_shared in\npower*-*-aix[[5-9]]*,yes)\n  AC_MSG_CHECKING([which variant of shared library versioning to provide])\n  AC_ARG_WITH([aix-soname],\n    [AS_HELP_STRING([--with-aix-soname=aix|svr4|both],\n      [shared library versioning (aka \"SONAME\") variant to provide on AIX, @<:@default=]_LT_WITH_AIX_SONAME_DEFAULT[@:>@.])],\n    [case $withval in\n    aix|svr4|both)\n      ;;\n    *)\n      AC_MSG_ERROR([Unknown argument to --with-aix-soname])\n      ;;\n    esac\n    lt_cv_with_aix_soname=$with_aix_soname],\n    [AC_CACHE_VAL([lt_cv_with_aix_soname],\n      [lt_cv_with_aix_soname=]_LT_WITH_AIX_SONAME_DEFAULT)\n    with_aix_soname=$lt_cv_with_aix_soname])\n  AC_MSG_RESULT([$with_aix_soname])\n  if test aix != \"$with_aix_soname\"; then\n    # For the AIX way of multilib, we name the shared archive member\n    # based on the bitwidth used, traditionally 'shr.o' or 'shr_64.o',\n    # and 'shr.imp' or 'shr_64.imp', respectively, for the Import File.\n    # Even when GNU compilers ignore OBJECT_MODE but need '-maix64' flag,\n    # the AIX toolchain works better with OBJECT_MODE set (default 32).\n    if test 64 = \"${OBJECT_MODE-32}\"; then\n      shared_archive_member_spec=shr_64\n    else\n      shared_archive_member_spec=shr\n    fi\n  fi\n  ;;\n*)\n  with_aix_soname=aix\n  ;;\nesac\n\n_LT_DECL([], [shared_archive_member_spec], [0],\n    [Shared archive member basename, for filename based shared library versioning on AIX])dnl\n])# _LT_WITH_AIX_SONAME\n\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=aix], [_LT_WITH_AIX_SONAME([aix])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=both], [_LT_WITH_AIX_SONAME([both])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=svr4], [_LT_WITH_AIX_SONAME([svr4])])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the 'pic-only' and 'no-pic'\n# LT_INIT options.\n# MODE is either 'yes' or 'no'.  If omitted, it defaults to 'both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic@<:@=PKGS@:>@],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for lt_pkg in $withval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [pic_mode=m4_default([$1], [default])])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n## ----------------- ##\n## LTDL_INIT Options ##\n## ----------------- ##\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n",
        "/tmp/vanessa/spack-stage/spack-stage-sollya-7.0-d2v6iu4jkfdedpugpbvpzwrlag7udcvx/spack-src/build-aux/ltmain.sh": "#! /bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=\"2.4.6 Debian-2.4.6-2.1\"\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-10-12.13; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_arg pretty \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_arg_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_arg pretty \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_arg_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_portable EVAL ARG\n# ----------------------------\n# Internal function to portably implement func_quote_arg.  Note that we still\n# keep attention to performance here so we as much as possible try to avoid\n# calling sed binary (so far O(N) complexity as long as func_append is O(1)).\nfunc_quote_portable ()\n{\n    $debug_cmd\n\n    func_quote_portable_result=$2\n\n    # one-time-loop (easy break)\n    while true\n    do\n      if $1; then\n        func_quote_portable_result=`$ECHO \"$2\" | $SED \\\n          -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"`\n        break\n      fi\n\n      # Quote for eval.\n      case $func_quote_portable_result in\n        *[\\\\\\`\\\"\\$]*)\n          case $func_quote_portable_result in\n            *[\\[\\*\\?]*)\n              func_quote_portable_result=`$ECHO \"$func_quote_portable_result\" | $SED \"$sed_quote_subst\"`\n              break\n              ;;\n          esac\n\n          func_quote_portable_old_IFS=$IFS\n          for _G_char in '\\' '`' '\"' '$'\n          do\n            # STATE($1) PREV($2) SEPARATOR($3)\n            set start \"\" \"\"\n            func_quote_portable_result=dummy\"$_G_char$func_quote_portable_result$_G_char\"dummy\n            IFS=$_G_char\n            for _G_part in $func_quote_portable_result\n            do\n              case $1 in\n              quote)\n                func_append func_quote_portable_result \"$3$2\"\n                set quote \"$_G_part\" \"\\\\$_G_char\"\n                ;;\n              start)\n                set first \"\" \"\"\n                func_quote_portable_result=\n                ;;\n              first)\n                set quote \"$_G_part\" \"\"\n                ;;\n              esac\n            done\n          done\n          IFS=$func_quote_portable_old_IFS\n          ;;\n        *) ;;\n      esac\n      break\n    done\n\n    func_quote_portable_unquoted_result=$func_quote_portable_result\n    case $func_quote_portable_result in\n      # double-quote args containing shell metacharacters to delay\n      # word splitting, command substitution and variable expansion\n      # for a subsequent eval.\n      # many bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        func_quote_portable_result=\\\"$func_quote_portable_result\\\"\n        ;;\n    esac\n}\n\n\n# func_quotefast_eval ARG\n# -----------------------\n# Quote one ARG (internal).  This is equivalent to 'func_quote_arg eval ARG',\n# but optimized for speed.  Result is stored in $func_quotefast_eval.\nif test xyes = `(x=; printf -v x %q yes; echo x\"$x\") 2>/dev/null`; then\n  func_quotefast_eval ()\n  {\n    printf -v func_quotefast_eval_result %q \"$1\"\n  }\nelse\n  func_quotefast_eval ()\n  {\n    func_quote_portable false \"$1\"\n    func_quotefast_eval_result=$func_quote_portable_result\n  }\nfi\n\n\n# func_quote_arg MODEs ARG\n# ------------------------\n# Quote one ARG to be evaled later.  MODEs argument may contain zero ore more\n# specifiers listed below separated by ',' character.  This function returns two\n# values:\n#   i) func_quote_arg_result\n#      double-quoted (when needed), suitable for a subsequent eval\n#  ii) func_quote_arg_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.  Available only if 'unquoted' is specified.\n#\n# Available modes:\n# ----------------\n# 'eval' (default)\n#       - escape shell special characters\n# 'expand'\n#       - the same as 'eval';  but do not quote variable references\n# 'pretty'\n#       - request aesthetic output, i.e. '\"a b\"' instead of 'a\\ b'.  This might\n#         later used in func_quote to get output like: 'echo \"a b\"' instead of\n#         'echo a\\ b'.  This is slower than default on some shells.\n# 'unquoted'\n#       - produce also $func_quote_arg_unquoted_result which does not contain\n#         wrapping double-quotes.\n#\n# Examples for 'func_quote_arg pretty,unquoted string':\n#\n#   string      | *_result              | *_unquoted_result\n#   ------------+-----------------------+-------------------\n#   \"           | \\\"                    | \\\"\n#   a b         | \"a b\"                 | a b\n#   \"a b\"       | \"\\\"a b\\\"\"             | \\\"a b\\\"\n#   *           | \"*\"                   | *\n#   z=\"${x-$y}\" | \"z=\\\"\\${x-\\$y}\\\"\"     | z=\\\"\\${x-\\$y}\\\"\n#\n# Examples for 'func_quote_arg pretty,unquoted,expand string':\n#\n#   string        |   *_result          |  *_unquoted_result\n#   --------------+---------------------+--------------------\n#   z=\"${x-$y}\"   | \"z=\\\"${x-$y}\\\"\"     | z=\\\"${x-$y}\\\"\nfunc_quote_arg ()\n{\n    _G_quote_expand=false\n    case ,$1, in\n      *,expand,*)\n        _G_quote_expand=:\n        ;;\n    esac\n\n    case ,$1, in\n      *,pretty,*|*,expand,*|*,unquoted,*)\n        func_quote_portable $_G_quote_expand \"$2\"\n        func_quote_arg_result=$func_quote_portable_result\n        func_quote_arg_unquoted_result=$func_quote_portable_unquoted_result\n        ;;\n      *)\n        # Faster quote-for-eval for some shells.\n        func_quotefast_eval \"$2\"\n        func_quote_arg_result=$func_quotefast_eval_result\n        ;;\n    esac\n}\n\n\n# func_quote MODEs ARGs...\n# ------------------------\n# Quote all ARGs to be evaled later and join them into single command.  See\n# func_quote_arg's description for more info.\nfunc_quote ()\n{\n    $debug_cmd\n    _G_func_quote_mode=$1 ; shift\n    func_quote_result=\n    while test 0 -lt $#; do\n      func_quote_arg \"$_G_func_quote_mode\" \"$1\"\n      if test -n \"$func_quote_result\"; then\n        func_append func_quote_result \" $func_quote_arg_result\"\n      else\n        func_append func_quote_result \"$func_quote_arg_result\"\n      fi\n      shift\n    done\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_arg pretty,expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_arg_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_arg expand,pretty \"$_G_cmd\"\n      eval \"func_echo $func_quote_arg_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2015-10-12.13; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    _G_rc_run_hooks=false\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook funcions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      if eval $_G_hook '\"$@\"'; then\n        # store returned options list back into positional\n        # parameters for next 'cmd' execution.\n        eval _G_hook_result=\\$${_G_hook}_result\n        eval set dummy \"$_G_hook_result\"; shift\n        _G_rc_run_hooks=:\n      fi\n    done\n\n    $_G_rc_run_hooks && func_run_hooks_result=$_G_hook_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, you may remove/edit\n# any options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  In this case you also must return $EXIT_SUCCESS to let the\n# hook's caller know that it should pay attention to\n# '<hooked_function_name>_result'.  Returning $EXIT_FAILURE signalizes that\n# arguments are left untouched by the hook and therefore caller will ignore the\n# result variable.\n#\n# Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#        # No change in '$@' (ignored completely by this hook).  There is\n#        # no need to do the equivalent (but slower) action:\n#        # func_quote eval ${1+\"$@\"}\n#        # my_options_prep_result=$func_quote_result\n#        false\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        args_changed=false\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=:\n#                         args_changed=:\n#                         ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         args_changed=:\n#                         ;;\n#            *)           # Make sure the first unrecognised option \"$_G_opt\"\n#                         # is added back to \"$@\", we could need that later\n#                         # if $args_changed is true.\n#                         set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n#          esac\n#        done\n#\n#        if $args_changed; then\n#          func_quote eval ${1+\"$@\"}\n#          my_silent_option_result=$func_quote_result\n#        fi\n#\n#        $args_changed\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        false\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll also need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options_finish [ARG]...\n# ----------------------------\n# Finishing the option parse loop (call 'func_options' hooks ATM).\nfunc_options_finish ()\n{\n    $debug_cmd\n\n    _G_func_options_finish_exit=false\n    if func_run_hooks func_options ${1+\"$@\"}; then\n      func_options_finish_result=$func_run_hooks_result\n      _G_func_options_finish_exit=:\n    fi\n\n    $_G_func_options_finish_exit\n}\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    _G_rc_options=false\n\n    for my_func in options_prep parse_options validate_options options_finish\n    do\n      if eval func_$my_func '${1+\"$@\"}'; then\n        eval _G_res_var='$'\"func_${my_func}_result\"\n        eval set dummy \"$_G_res_var\" ; shift\n        _G_rc_options=:\n      fi\n    done\n\n    # Save modified positional parameters for caller.  As a top-level\n    # options-parser function we always need to set the 'func_options_result'\n    # variable (regardless the $_G_rc_options value).\n    if $_G_rc_options; then\n      func_options_result=$_G_res_var\n    else\n      func_quote eval ${1+\"$@\"}\n      func_options_result=$func_quote_result\n    fi\n\n    $_G_rc_options\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propagate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning $EXIT_SUCCESS (otherwise $EXIT_FAILURE is returned).\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    _G_rc_options_prep=false\n    if func_run_hooks func_options_prep ${1+\"$@\"}; then\n      _G_rc_options_prep=:\n      # save modified positional parameters for caller\n      func_options_prep_result=$func_run_hooks_result\n    fi\n\n    $_G_rc_options_prep\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    _G_rc_parse_options=false\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      if func_run_hooks func_parse_options ${1+\"$@\"}; then\n        eval set dummy \"$func_run_hooks_result\"; shift\n        _G_rc_parse_options=:\n      fi\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_match_parse_options=:\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      if test $# = 0 && func_missing_arg $_G_opt; then\n                        _G_rc_parse_options=:\n                        break\n                      fi\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           _G_rc_parse_options=: ; break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift\n                      _G_match_parse_options=false\n                      break\n                      ;;\n      esac\n\n      $_G_match_parse_options && _G_rc_parse_options=:\n    done\n\n\n    if $_G_rc_parse_options; then\n      # save modified positional parameters for caller\n      func_quote eval ${1+\"$@\"}\n      func_parse_options_result=$func_quote_result\n    fi\n\n    $_G_rc_parse_options\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    _G_rc_validate_options=false\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    if func_run_hooks func_validate_options ${1+\"$@\"}; then\n      # save modified positional parameters for caller\n      func_validate_options_result=$func_run_hooks_result\n      _G_rc_validate_options=:\n    fi\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    $_G_rc_validate_options\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname $scriptversion Debian-2.4.6-2.1\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/s/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    _G_rc_lt_options_prep=:\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    *)\n      _G_rc_lt_options_prep=false\n      ;;\n    esac\n\n    if $_G_rc_lt_options_prep; then\n      # Pass back the list of options.\n      func_quote eval ${1+\"$@\"}\n      libtool_options_prep_result=$func_quote_result\n    fi\n\n    $_G_rc_lt_options_prep\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    _G_rc_lt_parse_options=false\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_match_lt_parse_options=:\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        # An option not handled by this hook function:\n        *)              set dummy \"$_G_opt\" ${1+\"$@\"} ; shift\n                        _G_match_lt_parse_options=false\n                        break\n                        ;;\n      esac\n      $_G_match_lt_parse_options && _G_rc_lt_parse_options=:\n    done\n\n    if $_G_rc_lt_parse_options; then\n      # save modified positional parameters for caller\n      func_quote eval ${1+\"$@\"}\n      libtool_parse_options_result=$func_quote_result\n    fi\n\n    $_G_rc_lt_parse_options\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_arg pretty \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_arg_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_arg pretty \"$srcfile\"\n    qsrcfile=$func_quote_arg_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_arg pretty \"$nonopt\"\n      install_prog=\"$func_quote_arg_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_arg pretty \"$arg\"\n    func_append install_prog \"$func_quote_arg_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_arg pretty \"$arg\"\n      func_append install_prog \" $func_quote_arg_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_arg pretty \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_arg_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_arg pretty \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_arg_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_arg expand,pretty \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_arg_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    func_quote_arg pretty \"$ECHO\"\n    qECHO=$func_quote_arg_result\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=$qECHO\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_arg pretty,unquoted \"$arg\"\n      qarg=$func_quote_arg_unquoted_result\n      func_append libtool_args \" $func_quote_arg_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_arg pretty \"$flag\"\n\t  func_append arg \" $func_quote_arg_result\"\n\t  func_append compiler_flags \" $func_quote_arg_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_arg pretty \"$flag\"\n\t  func_append arg \" $wl$func_quote_arg_result\"\n\t  func_append compiler_flags \" $wl$func_quote_arg_result\"\n\t  func_append linker_flags \" $func_quote_arg_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_arg pretty \"$arg\"\n\targ=$func_quote_arg_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -specs=*             GCC specs files\n      # -stdlib=*            select c++ std lib with clang\n      # -fsanitize=*         Clang/GCC memory and address sanitizer\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*| \\\n      -specs=*|-fsanitize=*)\n        func_quote_arg pretty \"$arg\"\n\targ=$func_quote_arg_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_arg pretty \"$arg\"\n\t  arg=$func_quote_arg_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_arg pretty \"$arg\"\n\targ=$func_quote_arg_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_arg pretty \"$arg\"\n\targ=$func_quote_arg_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink)\n\t  libs=\"$deplibs %DEPLIBS%\"\n\t  test \"X$link_all_deplibs\" != Xno && libs=\"$libs $dependency_libs\"\n\t  ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t    tmp_libs=\n\t    for deplib in $dependency_libs; do\n\t      deplibs=\"$deplib $deplibs\"\n\t      if $opt_preserve_dup_deps; then\n\t\tcase \"$tmp_libs \" in\n\t\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t\tesac\n\t      fi\n\t      func_append tmp_libs \" $deplib\"\n\t    done\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  *)\n\t    func_fatal_configuration \"$modename: unknown library version type '$version_type'\"\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_arg expand,pretty \"$cmd\"\n\t\t  eval \"func_echo $func_quote_arg_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_arg expand,pretty \"$cmd\"\n\t    eval \"func_echo $func_quote_arg_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_arg pretty \"$var_value\"\n\t    relink_command=\"$var=$func_quote_arg_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\tfunc_quote_arg pretty,unquoted \"(cd `pwd`; $relink_command)\"\n\trelink_command=$func_quote_arg_unquoted_result\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_arg pretty,unquoted \"$var_value\"\n\t  relink_command=\"$var=$func_quote_arg_unquoted_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      func_quote_arg pretty,unquoted \"$relink_command\"\n      relink_command=$func_quote_arg_unquoted_result\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-sollya-7.0-d2v6iu4jkfdedpugpbvpzwrlag7udcvx/spack-src/doc/libraryconstant.tex": "\\subsection{libraryconstant}\n\\label{lablibraryconstant}\n\\noindent Name: \\textbf{libraryconstant}\\\\\n\\phantom{aaa}binds an external mathematical constant to a variable in \\sollya\\\\[0.2cm]\n\\noindent Library names:\\\\\n\\verb|   sollya_obj_t sollya_lib_libraryconstant(char *, void (*)(mpfr_t, mp_prec_t))|\\\\\n\\verb|   sollya_obj_t sollya_lib_build_function_libraryconstant(char *,|\\\\\n\\verb|                                                          void (*)(mpfr_t,|\\\\\n\\verb|                                                                   mp_prec_t))|\\\\\n\\verb|   sollya_obj_t sollya_lib_libraryconstant_with_data(char *,|\\\\\n\\verb|                                                     void (*)(mpfr_t,|\\\\\n\\verb|                                                              mp_prec_t,|\\\\\n\\verb|                                                              void *),|\\\\\n\\verb|                                                     void *,|\\\\\n\\verb|                                                     void (*)(void *))|\\\\\n\\verb|   sollya_obj_t sollya_lib_build_function_libraryconstant_with_data(|\\\\\n\\verb|                                                     char *,|\\\\\n\\verb|                                                     void (*)(mpfr_t,|\\\\\n\\verb|                                                              mp_prec_t,|\\\\\n\\verb|                                                              void *),|\\\\\n\\verb|                                                     void *,|\\\\\n\\verb|                                                     void (*)(void *))|\\\\[0.2cm]\n\\noindent Usage: \n\\begin{center}\n\\textbf{libraryconstant}(\\emph{path}) : \\textsf{string} $\\rightarrow$ \\textsf{function}\\\\\n\\end{center}\n\\noindent Description: \\begin{itemize}\n\n\\item The command \\textbf{libraryconstant} lets you extend the set of mathematical\n   constants known to \\sollya.\n   By default, the only mathematical constant known by \\sollya is \\textbf{pi}.\n   For particular applications, one may want to\n   manipulate other constants, such as Euler's gamma constant, for instance.\n\n\\item \\textbf{libraryconstant} makes it possible to let \\sollya know about new constants.\n   In order to let it know, you have to provide an implementation of the\n   constant you are interested in. This implementation is a C file containing\n   a function of the form:\n   \\begin{verbatim} void my_ident(mpfr_t result, mp_prec_t prec)\\end{verbatim}\n   The semantic of this function is the following: it is an implementation of\n   the constant in arbitrary precision.\n   \\verb|my_ident(result, prec)| shall set the\n   precision of the variable result to a suitable precision (the variable is\n   assumed to be already initialized) and store in result an approximate value\n   of the constant with a relative error not greater than $2^{1-\\mathrm{prec}}$.\n   More precisely, if $c$ is the exact value of the constant, the value stored\n   in result should satisfy $$|\\mathrm{result}-c| \\le |c|\\,2^{1-\\mathrm{prec}}.$$\n\n\\item You can include sollya.h in your implementation and use library \n   functionnalities of \\sollya for your implementation. However, this requires to\n   have compiled \\sollya with \\texttt{-fPIC} in order to make the \\sollya executable\n   code position independent and to use a system on with programs, using \\texttt{dlopen}\n   to open dynamic routines can dynamically open themselves.\n\n\\item To bind your constant into \\sollya, you must use the same identifier as the\n   function name used in your implementation file (\\verb|my_ident| in the previous\n   example). Once the function code has been bound to an identifier, you can use\n   a simple assignment to assign the bound identifier to yet another identifier.\n   This way, you may use convenient names inside \\sollya even if your\n   implementation environment requires you to use a less convenient name.\n\n\\item Once your constant is bound, it is considered by \\sollya as an infinitely\n   accurate constant (i.e. a 0-ary function, exactly like \\textbf{pi}).\n\n\\item The dynamic object file whose name is given to \\textbf{libraryconstant} for binding of an\n   external library constant may also define a destructor function \\verb|int sollya_external_lib_close(void)|.\n   If \\sollya finds such a destructor function in the dynamic object file, it will call \n   that function when closing the dynamic object file again. This happens when \\sollya\n   is terminated or when the current \\sollya session is restarted using \\textbf{restart}.\n   The purpose of the destructor function is to allow the dynamically bound code\n   to free any memory that it might have allocated before \\sollya is terminated \n   or restarted. \n   The dynamic object file is not necessarily needed to define a destructor\n   function. This ensure backward compatibility with older \\sollya external \n   library function object files.\n   When defined, the destructor function is supposed to return an integer\n   value indicating if an error has happened. Upon success, the destructor\n   functions is to return a zero value, upon error a non-zero value.\n\\end{itemize}\n\\noindent Example 1: \n\\begin{center}\\begin{minipage}{15cm}\\begin{Verbatim}[frame=single]\n> bashexecute(\"gcc -fPIC -Wall -c libraryconstantexample.c -I$HOME/.local/includ\ne\");\n> bashexecute(\"gcc -shared -o libraryconstantexample libraryconstantexample.o -l\ngmp -lmpfr\");\n> euler_gamma = libraryconstant(\"./libraryconstantexample\");\n> prec = 20!;\n> euler_gamma;\n0.577215\n> prec = 100!;\n> euler_gamma;\n0.577215664901532860606512090082\n> midpointmode = on;\nMidpoint mode has been activated.\n> [euler_gamma];\n0.57721566490153286060651209008~2/4~\n\\end{Verbatim}\n\\end{minipage}\\end{center}\nSee also: \\textbf{bashexecute} (\\ref{labbashexecute}), \\textbf{externalproc} (\\ref{labexternalproc}), \\textbf{externalplot} (\\ref{labexternalplot}), \\textbf{pi} (\\ref{labpi}), \\textbf{library} (\\ref{lablibrary}), \\textbf{evaluate} (\\ref{labevaluate}), \\textbf{implementconstant} (\\ref{labimplementconstant})\n",
        "/tmp/vanessa/spack-stage/spack-stage-sollya-7.0-d2v6iu4jkfdedpugpbvpzwrlag7udcvx/spack-src/doc/library.tex": "\\subsection{library}\n\\label{lablibrary}\n\\noindent Name: \\textbf{library}\\\\\n\\phantom{aaa}binds an external mathematical function to a variable in \\sollya\\\\[0.2cm]\n\\noindent Library names:\\\\\n\\verb|   sollya_obj_t sollya_lib_libraryfunction(sollya_obj_t, char *,|\\\\\n\\verb|                                           int (*)(mpfi_t, mpfi_t, int))|\\\\\n\\verb|   sollya_obj_t sollya_lib_build_function_libraryfunction(sollya_obj_t, char *,|\\\\\n\\verb|                                                          int (*)(mpfi_t,|\\\\\n\\verb|                                                                  mpfi_t, int))|\\\\\n\\verb|   sollya_obj_t sollya_lib_libraryfunction_with_data(|\\\\\n\\verb|                                           sollya_obj_t, char *,|\\\\\n\\verb|                                           int (*)(mpfi_t, mpfi_t, int, void *),|\\\\\n\\verb|                                           void *, void (*)(void *))|\\\\\n\\verb|   sollya_obj_t sollya_lib_build_function_libraryfunction_with_data(|\\\\\n\\verb|                                           sollya_obj_t, char *,|\\\\\n\\verb|                                           int (*)(mpfi_t,|\\\\\n\\verb|                                                   mpfi_t, int, void *),|\\\\\n\\verb|                                           void *, void (*)(void *))|\\\\[0.2cm]\n\\noindent Usage: \n\\begin{center}\n\\textbf{library}(\\emph{path}) : \\textsf{string} $\\rightarrow$ \\textsf{function}\\\\\n\\end{center}\n\\noindent Description: \\begin{itemize}\n\n\\item The command \\textbf{library} lets you extend the set of mathematical\n   functions known to \\sollya.\n   By default, \\sollya knows the most common mathematical functions such\n   as \\textbf{exp}, \\textbf{sin}, \\textbf{erf}, etc. Within \\sollya, these functions may be\n   composed. This way, \\sollya should satisfy the needs of a lot of\n   users. However, for particular applications, one may want to\n   manipulate other functions such as Bessel functions, or functions\n   defined by an integral or even a particular solution of an ODE.\n\n\\item \\textbf{library} makes it possible to let \\sollya know about new functions. In\n   order to let it know, you have to provide an implementation of the\n   function you are interested in. This implementation is a C file containing\n   a function of the form:\n   \\begin{verbatim} int my_ident(sollya_mpfi_t result, sollya_mpfi_t op, int n)\\end{verbatim}\n   The semantic of this function is the following: it is an implementation of\n   the function and its derivatives in interval arithmetic.\n   \\verb|my_ident(result, I, n)| shall store in \\verb|result| an enclosure \n   of the image set of the $n$-th derivative\n   of the function f over \\verb|I|: $f^{(n)}(I) \\subseteq \\mathrm{result}$.\n\n\\item The integer value returned by the function implementation currently has no\n   meaning.\n\n\\item You do not need to provide a working implementation for any \\verb|n|. Most\n   functions of \\sollya requires a relevant implementation only for $f$,\n   $f'$ and $f''$. For higher derivatives, its is not so critical and the\n   implementation may just store $[-\\infty,\\,+\\infty]$ in result whenever $n>2$.\n\n\\item Note that you should respect somehow interval-arithmetic standards in your\n   implementation: \\verb|result| has its own precision and you should perform the \n   intermediate computations so that \\verb|result| is as tight as possible.\n\n\\item You can include sollya.h in your implementation and use library \n   functionnalities of \\sollya for your implementation. However, this requires to\n   have compiled \\sollya with \\texttt{-fPIC} in order to make the \\sollya executable code\n   position independent and to use a system on with programs, using \\texttt{dlopen} to\n   open dynamic routines can dynamically open themselves. \\textbf{Important notice:} as\n   the code will be run in a context where a sollya session is already opened,\n   the library functions must be used directly, without calling \\verb|sollya_lib_init|\n   and \\verb|sollya_lib_close| (calling these functions would conflict with the\n   current session, leading to weird and hard to debug behaviors).\n\n\\item To bind your function into \\sollya, you must use the same identifier as the\n   function name used in your implementation file (\\verb|my_ident| in the previous\n   example). Once the function code has been bound to an identifier, you can use\n   a simple assignment to assign the bound identifier to yet another identifier.\n   This way, you may use convenient names inside \\sollya even if your\n   implementation environment requires you to use a less convenient name.\n\n\\item The dynamic object file whose name is given to \\textbf{library} for binding of an\n   external library function may also define a destructor function\n   \\verb|int sollya_external_lib_close(void)|.\n   If \\sollya finds such a destructor function in the dynamic object file, it\n   will call that function when closing the dynamic object file again.\n   This happens when \\sollya is terminated or when the current \\sollya session\n   is restarted using \\textbf{restart}.\n   The purpose of the destructor function is to allow the dynamically bound code\n   to free any memory that it might have allocated before \\sollya is terminated \n   or restarted. \n   The dynamic object file is not necessarily needed to define a destructor\n   function. This ensure backward compatibility with older \\sollya external \n   library function object files.\n   When defined, the destructor function is supposed to return an integer\n   value indicating if an error has happened. Upon success, the destructor\n   functions is to return a zero value, upon error a non-zero value.\n\\end{itemize}\n\\noindent Example 1: \n\\begin{center}\\begin{minipage}{15cm}\\begin{Verbatim}[frame=single]\n> bashexecute(\"gcc -fPIC -Wall -c libraryexample.c -I$HOME/.local/include\");\n> bashexecute(\"gcc -shared -o libraryexample libraryexample.o -lgmp -lmpfr\");\n> myownlog = library(\"./libraryexample\");\n> evaluate(log(x), 2);\n0.69314718055994530941723212145817656807550013436025\n> evaluate(myownlog(x), 2);\n0.69314718055994530941723212145817656807550013436025\n\\end{Verbatim}\n\\end{minipage}\\end{center}\nSee also: \\textbf{function} (\\ref{labfunction}), \\textbf{bashexecute} (\\ref{labbashexecute}), \\textbf{externalproc} (\\ref{labexternalproc}), \\textbf{externalplot} (\\ref{labexternalplot}), \\textbf{diff} (\\ref{labdiff}), \\textbf{evaluate} (\\ref{labevaluate}), \\textbf{libraryconstant} (\\ref{lablibraryconstant})\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-sollya-7.0-d2v6iu4jkfdedpugpbvpzwrlag7udcvx/spack-src/doc/sollya.pdf"
    ],
    "total_files": 1132
}