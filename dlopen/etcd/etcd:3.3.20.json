{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/glide.lock": "hash: 3fece95d13153dbb91034bd2708f8f7a39510c682dfda4c3ff691f09a61a2fc1\nupdated: 2019-08-19T20:45:29.93927922-07:00\nimports:\n- name: github.com/beorn7/perks\n  version: 37c8de3658fcb183f997c4e13e8337516ab753e6\n  subpackages:\n  - quantile\n- name: github.com/bgentry/speakeasy\n  version: 4aabc24848ce5fd31929f7d1e4ea74d3709c14cd\n- name: github.com/coreos/bbolt\n  version: a0458a2b35708eef59eb5f620ceb3cd1c01a824d\n- name: github.com/coreos/go-semver\n  version: 8ab6407b697782a06568d4b7f1db25550ec2e4c6\n  subpackages:\n  - semver\n- name: github.com/coreos/go-systemd\n  version: e64a0ec8b42a61e2a9801dc1d0abe539dea79197\n  subpackages:\n  - daemon\n  - journal\n  - util\n- name: github.com/coreos/pkg\n  version: 97fdf19511ea361ae1c100dd393cc47f8dcfa1e1\n  subpackages:\n  - capnslog\n  - dlopen\n- name: github.com/cpuguy83/go-md2man\n  version: 23709d0847197db6021a51fdb193e66e9222d4e7\n  subpackages:\n  - md2man\n- name: github.com/dgrijalva/jwt-go\n  version: d2709f9f1f31ebcda9651b03077758c1f3a0018c\n- name: github.com/dustin/go-humanize\n  version: 9f541cc9db5d55bce703bd99987c9d5cb8eea45e\n- name: github.com/ghodss/yaml\n  version: 0ca9ea5df5451ffdf184b4428c902747c2c11cd7\n- name: github.com/gogo/protobuf\n  version: ba06b47c162d49f2af050fb4c75bcbc86a159d5c\n  subpackages:\n  - gogoproto\n  - proto\n  - protoc-gen-gogo/descriptor\n- name: github.com/golang/groupcache\n  version: 869f871628b6baa9cfbc11732cdf6546b17c1298\n  subpackages:\n  - lru\n- name: github.com/golang/protobuf\n  version: 6c65a5562fc06764971b7c5d05c76c75e84bdbf7\n  subpackages:\n  - jsonpb\n  - proto\n  - protoc-gen-go/descriptor\n  - ptypes\n  - ptypes/any\n  - ptypes/duration\n  - ptypes/struct\n  - ptypes/timestamp\n- name: github.com/google/btree\n  version: 4030bb1f1f0c35b30ca7009e9ebd06849dd45306\n- name: github.com/google/uuid\n  version: d460ce9f8df2e77fb1ba55ca87fafed96c607494\n- name: github.com/gorilla/websocket\n  version: 4201258b820c74ac8e6922fc9e6b52f71fe46f8d\n- name: github.com/grpc-ecosystem/go-grpc-middleware\n  version: c250d6563d4d4c20252cd865923440e829844f4e\n- name: github.com/grpc-ecosystem/go-grpc-prometheus\n  version: 0dafe0d496ea71181bf2dd039e7e3f44b6bd11a7\n- name: github.com/grpc-ecosystem/grpc-gateway\n  version: 8cc3a55af3bcf171a1c23a90c4df9cf591706104\n  subpackages:\n  - runtime\n  - runtime/internal\n  - utilities\n- name: github.com/inconshreveable/mousetrap\n  version: 76626ae9c91c4f2a10f34cad8ce83ea42c93bb75\n- name: github.com/jonboulle/clockwork\n  version: 2eee05ed794112d45db504eb05aa693efd2b8b09\n- name: github.com/json-iterator/go\n  version: 27518f6661eba504be5a7a9a9f6d9460d892ade3\n- name: github.com/kr/pty\n  version: 2c10821df3c3cf905230d078702dfbe9404c9b23\n- name: github.com/mattn/go-runewidth\n  version: 9e777a8366cce605130a531d2cd6363d07ad7317\n  subpackages:\n  - runewidth.go\n- name: github.com/matttproud/golang_protobuf_extensions\n  version: c182affec369e30f25d3eb8cd8a478dee585ae7d\n  subpackages:\n  - pbutil\n- name: github.com/modern-go/concurrent\n  version: bacd9c7ef1dd9b15be4a9909b8ac7a4e313eec94\n- name: github.com/modern-go/reflect2\n  version: 94122c33edd36123c84d5368cfb2b69df93a0ec8\n- name: github.com/olekukonko/tablewriter\n  version: a0225b3f23b5ce0cbec6d7a66a968f8a59eca9c4\n- name: github.com/prometheus/client_golang\n  version: 5cec1d0429b02e4323e042eb04dafdb079ddf568\n  subpackages:\n  - prometheus\n  - prometheus/promhttp\n- name: github.com/prometheus/client_model\n  version: 6f3806018612930941127f2a7c6c453ba2c527d2\n  subpackages:\n  - go\n- name: github.com/prometheus/common\n  version: e3fb1a1acd7605367a2b378bc2e2f893c05174b7\n  subpackages:\n  - expfmt\n  - internal/bitbucket.org/ww/goautoneg\n  - model\n- name: github.com/prometheus/procfs\n  version: a6e9df898b1336106c743392c48ee0b71f5c4efa\n  subpackages:\n  - xfs\n- name: github.com/russross/blackfriday\n  version: 4048872b16cc0fc2c5fd9eacf0ed2c2fedaa0c8c\n- name: github.com/sirupsen/logrus\n  version: f006c2ac4710855cf0f916dd6b77acf6b048dc6e\n- name: github.com/soheilhy/cmux\n  version: e09e9389d85d8492d313d73d1469c029e710623f\n- name: github.com/spf13/cobra\n  version: 1c44ec8d3f1552cac48999f9306da23c4d8a288b\n- name: github.com/spf13/pflag\n  version: e57e3eeb33f795204c1ca35f56c44f83227c6e66\n- name: github.com/tmc/grpc-websocket-proxy\n  version: 89b8d40f7ca833297db804fcb3be53a76d01c238\n  subpackages:\n  - wsproxy\n- name: github.com/ugorji/go\n  version: bdcc60b419d136a85cdf2e7cbcac34b3f1cd6e57\n  subpackages:\n  - codec\n- name: github.com/urfave/cli\n  version: 1efa31f08b9333f1bd4882d61f9d668a70cd902e\n- name: github.com/xiang90/probing\n  version: 07dd2e8dfe18522e9c447ba95f2fe95262f63bb2\n- name: go.uber.org/atomic\n  version: df976f2515e274675050de7b3f42545de80594fd\n- name: go.uber.org/multierr\n  version: 3c4937480c32f4c13a875a1829af76c98ca3d40a\n- name: go.uber.org/zap\n  version: 27376062155ad36be76b0f12cf1572a221d3a48c\n  subpackages:\n  - buffer\n  - internal/bufferpool\n  - internal/color\n  - internal/exit\n  - zapcore\n- name: golang.org/x/crypto\n  version: c2843e01d9a2bc60bb26ad24e09734fdc2d9ec58\n  subpackages:\n  - bcrypt\n  - blowfish\n  - ssh/terminal\n- name: golang.org/x/net\n  version: 74dc4d7220e7acc4e100824340f3e66577424772\n  subpackages:\n  - context\n  - http/httpguts\n  - http2\n  - http2/hpack\n  - idna\n  - internal/timeseries\n  - trace\n- name: golang.org/x/sys\n  version: fde4db37ae7ad8191b03d30d27f258b5291ae4e3\n  subpackages:\n  - unix\n  - windows\n- name: golang.org/x/text\n  version: 342b2e1fbaa52c93f31447ad2c6abc048c63e475\n  subpackages:\n  - secure/bidirule\n  - transform\n  - unicode/bidi\n  - unicode/norm\n- name: golang.org/x/time\n  version: c06e80d9300e4443158a03817b8a8cb37d230320\n  subpackages:\n  - rate\n- name: google.golang.org/genproto\n  version: 09f6ed296fc66555a25fe4ce95173148778dfa85\n  subpackages:\n  - googleapis/api/annotations\n  - googleapis/rpc/status\n- name: google.golang.org/grpc\n  version: 6eaf6f47437a6b4e2153a190160ef39a92c7eceb\n  subpackages:\n  - balancer\n  - balancer/base\n  - balancer/roundrobin\n  - binarylog/grpc_binarylog_v1\n  - codes\n  - connectivity\n  - credentials\n  - credentials/internal\n  - encoding\n  - encoding/proto\n  - grpclog\n  - health\n  - health/grpc_health_v1\n  - internal\n  - internal/backoff\n  - internal/balancerload\n  - internal/binarylog\n  - internal/channelz\n  - internal/envconfig\n  - internal/grpcrand\n  - internal/grpcsync\n  - internal/syscall\n  - internal/transport\n  - keepalive\n  - metadata\n  - naming\n  - peer\n  - resolver\n  - resolver/dns\n  - resolver/passthrough\n  - serviceconfig\n  - stats\n  - status\n  - tap\n  - transport\n- name: gopkg.in/cheggaaa/pb.v1\n  version: 226d21d43a305fac52b3a104ef83e721b15275e0\n- name: gopkg.in/yaml.v2\n  version: 51d6538a90f86fe93ac480b35f37b2be17fef232\n- name: sigs.k8s.io/yaml\n  version: fd68e9863619f6ec2fdd8625fe1f02e7c877e480\ntestImports: []\n",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/vendor/github.com/coreos/pkg/dlopen/dlopen_example.go": "// Copyright 2015 CoreOS, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// +build linux\n\npackage dlopen\n\n// #include <string.h>\n// #include <stdlib.h>\n//\n// int\n// my_strlen(void *f, const char *s)\n// {\n//   size_t (*strlen)(const char *);\n//\n//   strlen = (size_t (*)(const char *))f;\n//   return strlen(s);\n// }\nimport \"C\"\n\nimport (\n\t\"fmt\"\n\t\"unsafe\"\n)\n\nfunc strlen(libs []string, s string) (int, error) {\n\th, err := GetHandle(libs)\n\tif err != nil {\n\t\treturn -1, fmt.Errorf(`couldn't get a handle to the library: %v`, err)\n\t}\n\tdefer h.Close()\n\n\tf := \"strlen\"\n\tcs := C.CString(s)\n\tdefer C.free(unsafe.Pointer(cs))\n\n\tstrlen, err := h.GetSymbolPointer(f)\n\tif err != nil {\n\t\treturn -1, fmt.Errorf(`couldn't get symbol %q: %v`, f, err)\n\t}\n\n\tlen := C.my_strlen(strlen, cs)\n\n\treturn int(len), nil\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/vendor/github.com/coreos/pkg/dlopen/dlopen.go": "// Copyright 2016 CoreOS, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Package dlopen provides some convenience functions to dlopen a library and\n// get its symbols.\npackage dlopen\n\n// #cgo LDFLAGS: -ldl\n// #include <stdlib.h>\n// #include <dlfcn.h>\nimport \"C\"\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"unsafe\"\n)\n\nvar ErrSoNotFound = errors.New(\"unable to open a handle to the library\")\n\n// LibHandle represents an open handle to a library (.so)\ntype LibHandle struct {\n\tHandle  unsafe.Pointer\n\tLibname string\n}\n\n// GetHandle tries to get a handle to a library (.so), attempting to access it\n// by the names specified in libs and returning the first that is successfully\n// opened. Callers are responsible for closing the handler. If no library can\n// be successfully opened, an error is returned.\nfunc GetHandle(libs []string) (*LibHandle, error) {\n\tfor _, name := range libs {\n\t\tlibname := C.CString(name)\n\t\tdefer C.free(unsafe.Pointer(libname))\n\t\thandle := C.dlopen(libname, C.RTLD_LAZY)\n\t\tif handle != nil {\n\t\t\th := &LibHandle{\n\t\t\t\tHandle:  handle,\n\t\t\t\tLibname: name,\n\t\t\t}\n\t\t\treturn h, nil\n\t\t}\n\t}\n\treturn nil, ErrSoNotFound\n}\n\n// GetSymbolPointer takes a symbol name and returns a pointer to the symbol.\nfunc (l *LibHandle) GetSymbolPointer(symbol string) (unsafe.Pointer, error) {\n\tsym := C.CString(symbol)\n\tdefer C.free(unsafe.Pointer(sym))\n\n\tC.dlerror()\n\tp := C.dlsym(l.Handle, sym)\n\te := C.dlerror()\n\tif e != nil {\n\t\treturn nil, fmt.Errorf(\"error resolving symbol %q: %v\", symbol, errors.New(C.GoString(e)))\n\t}\n\n\treturn p, nil\n}\n\n// Close closes a LibHandle.\nfunc (l *LibHandle) Close() error {\n\tC.dlerror()\n\tC.dlclose(l.Handle)\n\te := C.dlerror()\n\tif e != nil {\n\t\treturn fmt.Errorf(\"error closing %v: %v\", l.Libname, errors.New(C.GoString(e)))\n\t}\n\n\treturn nil\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/vendor/github.com/coreos/go-systemd/util/util_cgo.go": "// Copyright 2016 CoreOS, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// +build cgo\n\npackage util\n\n// #include <stdlib.h>\n// #include <sys/types.h>\n// #include <unistd.h>\n//\n// int\n// my_sd_pid_get_owner_uid(void *f, pid_t pid, uid_t *uid)\n// {\n//   int (*sd_pid_get_owner_uid)(pid_t, uid_t *);\n//\n//   sd_pid_get_owner_uid = (int (*)(pid_t, uid_t *))f;\n//   return sd_pid_get_owner_uid(pid, uid);\n// }\n//\n// int\n// my_sd_pid_get_unit(void *f, pid_t pid, char **unit)\n// {\n//   int (*sd_pid_get_unit)(pid_t, char **);\n//\n//   sd_pid_get_unit = (int (*)(pid_t, char **))f;\n//   return sd_pid_get_unit(pid, unit);\n// }\n//\n// int\n// my_sd_pid_get_slice(void *f, pid_t pid, char **slice)\n// {\n//   int (*sd_pid_get_slice)(pid_t, char **);\n//\n//   sd_pid_get_slice = (int (*)(pid_t, char **))f;\n//   return sd_pid_get_slice(pid, slice);\n// }\n//\n// int\n// am_session_leader()\n// {\n//   return (getsid(0) == getpid());\n// }\nimport \"C\"\nimport (\n\t\"fmt\"\n\t\"syscall\"\n\t\"unsafe\"\n\n\t\"github.com/coreos/pkg/dlopen\"\n)\n\nvar libsystemdNames = []string{\n\t// systemd < 209\n\t\"libsystemd-login.so.0\",\n\t\"libsystemd-login.so\",\n\n\t// systemd >= 209 merged libsystemd-login into libsystemd proper\n\t\"libsystemd.so.0\",\n\t\"libsystemd.so\",\n}\n\nfunc getRunningSlice() (slice string, err error) {\n\tvar h *dlopen.LibHandle\n\th, err = dlopen.GetHandle(libsystemdNames)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer func() {\n\t\tif err1 := h.Close(); err1 != nil {\n\t\t\terr = err1\n\t\t}\n\t}()\n\n\tsd_pid_get_slice, err := h.GetSymbolPointer(\"sd_pid_get_slice\")\n\tif err != nil {\n\t\treturn\n\t}\n\n\tvar s string\n\tsl := C.CString(s)\n\tdefer C.free(unsafe.Pointer(sl))\n\n\tret := C.my_sd_pid_get_slice(sd_pid_get_slice, 0, &sl)\n\tif ret < 0 {\n\t\terr = fmt.Errorf(\"error calling sd_pid_get_slice: %v\", syscall.Errno(-ret))\n\t\treturn\n\t}\n\n\treturn C.GoString(sl), nil\n}\n\nfunc runningFromSystemService() (ret bool, err error) {\n\tvar h *dlopen.LibHandle\n\th, err = dlopen.GetHandle(libsystemdNames)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer func() {\n\t\tif err1 := h.Close(); err1 != nil {\n\t\t\terr = err1\n\t\t}\n\t}()\n\n\tsd_pid_get_owner_uid, err := h.GetSymbolPointer(\"sd_pid_get_owner_uid\")\n\tif err != nil {\n\t\treturn\n\t}\n\n\tvar uid C.uid_t\n\terrno := C.my_sd_pid_get_owner_uid(sd_pid_get_owner_uid, 0, &uid)\n\tserrno := syscall.Errno(-errno)\n\t// when we're running from a unit file, sd_pid_get_owner_uid returns\n\t// ENOENT (systemd <220), ENXIO (systemd 220-223), or ENODATA\n\t// (systemd >=234)\n\tswitch {\n\tcase errno >= 0:\n\t\tret = false\n\tcase serrno == syscall.ENOENT, serrno == syscall.ENXIO, serrno == syscall.ENODATA:\n\t\t// Since the implementation of sessions in systemd relies on\n\t\t// the `pam_systemd` module, using the sd_pid_get_owner_uid\n\t\t// heuristic alone can result in false positives if that module\n\t\t// (or PAM itself) is not present or properly configured on the\n\t\t// system. As such, we also check if we're the session leader,\n\t\t// which should be the case if we're invoked from a unit file,\n\t\t// but not if e.g. we're invoked from the command line from a\n\t\t// user's login session\n\t\tret = C.am_session_leader() == 1\n\tdefault:\n\t\terr = fmt.Errorf(\"error calling sd_pid_get_owner_uid: %v\", syscall.Errno(-errno))\n\t}\n\treturn\n}\n\nfunc currentUnitName() (unit string, err error) {\n\tvar h *dlopen.LibHandle\n\th, err = dlopen.GetHandle(libsystemdNames)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer func() {\n\t\tif err1 := h.Close(); err1 != nil {\n\t\t\terr = err1\n\t\t}\n\t}()\n\n\tsd_pid_get_unit, err := h.GetSymbolPointer(\"sd_pid_get_unit\")\n\tif err != nil {\n\t\treturn\n\t}\n\n\tvar s string\n\tu := C.CString(s)\n\tdefer C.free(unsafe.Pointer(u))\n\n\tret := C.my_sd_pid_get_unit(sd_pid_get_unit, 0, &u)\n\tif ret < 0 {\n\t\terr = fmt.Errorf(\"error calling sd_pid_get_unit: %v\", syscall.Errno(-ret))\n\t\treturn\n\t}\n\n\tunit = C.GoString(u)\n\treturn\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/logos/etcd-stacked-bw.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/logos/etcd-glyph-color.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/logos/etcd-offset-color.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/logos/etcd-offset-bw.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/logos/etcd-horizontal-color.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/logos/etcd-stacked-color.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/logos/etcd-horizontal-bw.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/pkg/adt/img/red-black-tree-06-delete-11.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/pkg/adt/img/red-black-tree-01-insertion.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/pkg/adt/img/red-black-tree-03-delete-11.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/pkg/adt/img/red-black-tree-07-delete-11.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/pkg/adt/img/red-black-tree-08-delete-11.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/pkg/adt/img/red-black-tree-02-delete-514.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/pkg/adt/img/red-black-tree-09-delete-11.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/pkg/adt/img/red-black-tree-05-delete-11.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/pkg/adt/img/red-black-tree-04-delete-11.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/Documentation/README.md",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/Documentation/op-guide/etcd-sample-grafana.png",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/clientv3/snapshot/testdata/corrupted_backup.db",
        "/tmp/vanessa/spack-stage/spack-stage-etcd-3.3.20-qjx666qjennfc6n5zcdj7ubodwrctmzw/spack-src/integration/fixtures/revoke.crl"
    ],
    "total_files": 2237
}