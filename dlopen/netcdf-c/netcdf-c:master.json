{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/configure.ac": "#                                               -*- Autoconf -*-\n## Process this file with autoconf to produce a configure script.\n\n# This is part of Unidata's netCDF package. Copyright 2005-2018, see\n# the COPYRIGHT file for more information.\n# Ed Hartnett, Ward Fisher, Dennis Heimbigner\n\n# Running autoconf on this file will trigger a warning if\n# autoconf is not at least the specified version.\nAC_PREREQ([2.59])\n\n# Initialize with name, version, and support email address.\nAC_INIT([netCDF], [4.8.0-development], [support-netcdf@unidata.ucar.edu], [netcdf-c])\n\n##\n# Prefer an empty CFLAGS variable instead of the default -g -O2.\n# See:\n#   * http://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/html_node/C-Compiler.html#C-Compiler\n##\n: ${CFLAGS=\"\"}\n\nAC_SUBST([NC_VERSION_MAJOR]) NC_VERSION_MAJOR=4\nAC_SUBST([NC_VERSION_MINOR]) NC_VERSION_MINOR=8\nAC_SUBST([NC_VERSION_PATCH]) NC_VERSION_PATCH=0\nAC_SUBST([NC_VERSION_NOTE]) NC_VERSION_NOTE=\"-development\"\n\n#####\n# Set some variables used to generate a libnetcdf.settings file,\n# pattered after the files generated by libhdf4, libhdf5.\n#####\n\n# Create the VERSION file, which contains the package version from\n# AC_INIT.\necho AC_PACKAGE_VERSION>VERSION\nAC_SUBST(PACKAGE_VERSION)\n\nAC_MSG_NOTICE([netCDF AC_PACKAGE_VERSION])\n\n# Keep libtool macros in an m4 directory.\nAC_CONFIG_MACRO_DIR([m4])\n\n# Configuration Date\nif test \"x$SOURCE_DATE_EPOCH\" != \"x\" ; then\n    AC_SUBST([CONFIG_DATE]) CONFIG_DATE=\"`date -u -d \"${SOURCE_DATE_EPOCH}\"`\"\nelse\n    AC_SUBST([CONFIG_DATE]) CONFIG_DATE=\"`date`\"\nfi\n\n# Find out about the host we're building on.\nAC_CANONICAL_HOST\n\n# Find out about the target we're building for.\nAC_CANONICAL_TARGET\n\nAC_CONFIG_HEADERS([config.h])\n\n##\n# Some files need to exist in build directories\n# that do not correspond to their source directory, or\n# the test program makes an assumption about where files\n# live.  AC_CONFIG_LINKS provides a mechanism to link/copy files\n# if an out-of-source build is happening.\n##\n\nAC_CONFIG_LINKS([nc_test4/ref_hdf5_compat1.nc:nc_test4/ref_hdf5_compat1.nc])\nAC_CONFIG_LINKS([nc_test4/ref_hdf5_compat2.nc:nc_test4/ref_hdf5_compat2.nc])\nAC_CONFIG_LINKS([nc_test4/ref_hdf5_compat3.nc:nc_test4/ref_hdf5_compat3.nc])\n\nAC_CONFIG_LINKS([hdf4_test/ref_chunked.hdf4:hdf4_test/ref_chunked.hdf4])\nAC_CONFIG_LINKS([hdf4_test/ref_contiguous.hdf4:hdf4_test/ref_contiguous.hdf4])\n\nAM_INIT_AUTOMAKE([foreign dist-zip subdir-objects])\n\n# Check for the existence of this file before proceeding.\nAC_CONFIG_SRCDIR([include/netcdf.h])\n\nAC_MSG_NOTICE([checking supported formats])\n\n# An explicit disable of netcdf-4 | netcdf4 is treated as if it was disable-hdf5\nAC_MSG_CHECKING([whether we should build with netcdf4 (alias for HDF5)])\nAC_ARG_ENABLE([netcdf4], [AS_HELP_STRING([--disable-netcdf4],\n              [(synonym for --enable-hdf5)])])\ntest \"x$enable_netcdf4\" = xno || enable_netcdf4=yes\nAC_MSG_RESULT([$enable_netcdf4])\nAC_MSG_CHECKING([whether we should build with netcdf-4 (alias for HDF5)])\nAC_ARG_ENABLE([netcdf-4], [AS_HELP_STRING([--disable-netcdf-4],\n              [(synonym for --disable-netcdf4)])])\ntest \"x$enable_netcdf_4\" = xno || enable_netcdf_4=yes\nAC_MSG_RESULT([$enable_netcdf_4])\n# Propagate the alias\nif test \"x$enable_netcdf_4\" = xno ; then enable_netcdf4=no; fi\nif test \"x$enable_netcdf4\" = xno ; then enable_netcdf_4=no; fi\n\n# Does the user want to use HDF5?\nAC_MSG_CHECKING([whether we should build with HDF5])\nAC_ARG_ENABLE([hdf5], [AS_HELP_STRING([--disable-hdf5],\n              [do not build with HDF5])])\ntest \"x$enable_hdf5\" = xno || enable_hdf5=yes\nif test \"x$enable_netcdf4\" = xno ; then enable_hdf5=no ; fi\n# disable-netcdf4 is synonym for disable-hdf5\nAC_MSG_RESULT([$enable_hdf5])\n\n# Check whether we want to enable CDF5 support.\nAC_MSG_CHECKING([whether CDF5 support should be disabled])\nAC_ARG_ENABLE([cdf5],\n              [AS_HELP_STRING([--disable-cdf5],\n                              [build without CDF5 support. @<:@default: auto@:>@])],\n              [enable_cdf5=${enableval}], [enable_cdf5=auto]\n)\nAC_MSG_RESULT($enable_cdf5)\n\n# Does the user want to turn on HDF4 read ability?\nAC_MSG_CHECKING([whether reading of HDF4 SD files is to be enabled])\nAC_ARG_ENABLE([hdf4], [AS_HELP_STRING([--enable-hdf4],\n              [build netcdf with HDF4 read capability (HDF4, HDF5 and zlib required)])])\ntest \"x$enable_hdf4\" = xyes || enable_hdf4=no\nAC_MSG_RESULT($enable_hdf4)\n\nAC_MSG_CHECKING([whether parallel I/O for classic files is to be enabled])\nAC_ARG_ENABLE([pnetcdf], [AS_HELP_STRING([--enable-pnetcdf],\n              [build with parallel I/O for classic files. @<:@default: disabled@:>@])])\ntest \"x$enable_pnetcdf\" = xyes || enable_pnetcdf=no\nAC_MSG_RESULT($enable_pnetcdf)\n\n## Capture the state of the --enable-dap flag => enable dap2+dap4\nAC_MSG_CHECKING([whether DAP client(s) are to be built])\nAC_ARG_ENABLE([dap],\n                 [AS_HELP_STRING([--disable-dap],\n                                 [build without DAP client support.])])\ntest \"x$enable_dap\" = xno || enable_dap=yes\nAC_MSG_RESULT($enable_dap)\n\nAC_MSG_CHECKING([whether netcdf zarr storage format should be enabled])\nAC_ARG_ENABLE([nczarr],\n              [AS_HELP_STRING([--enable-nczarr],\n                              [enable netcdf zarr storage support; requires netCDF-4 and libcurl])])\ntest \"x$enable_nczarr\" = xyes || enable_nczarr=no\nAC_MSG_RESULT($enable_nczarr)\n\n# HDF5 | HDF4 | NCZarr => netcdf-4\nif test \"x$enable_hdf5\" = xyes || test \"x$enable_hdf4\" = xyes || test \"x$enable_nczarr\" = xyes ; then\nenable_netcdf_4=yes\nfi\nAC_MSG_CHECKING([whether netcdf-4 should be forcibly enabled])\nAC_MSG_RESULT([$enable_netcdf_4])\n# Synonym\nenable_netcdf4=${enable_netcdf_4}\n\nAC_MSG_NOTICE([checking user options])\n\n# Did the user specify a default minimum blocksize (NCIO_MINBLOCKSIZE) for posixio?\nAC_MSG_CHECKING([whether a NCIO_MINBLOCKSIZE was specified])\nAC_ARG_WITH([minblocksize],\n              [AS_HELP_STRING([--with-minblocksize=<integer>],\n                              [Specify minimum I/O blocksize for netCDF classic and 64-bit offset format files.])],\n            [NCIO_MINBLOCKSIZE=$with_minblocksize], [NCIO_MINBLOCKSIZE=256])\nAC_MSG_RESULT([$NCIO_MINBLOCKSIZE])\nAC_DEFINE_UNQUOTED([NCIO_MINBLOCKSIZE], [$NCIO_MINBLOCKSIZE], [min blocksize for posixio.])\n\n# Find valgrind, if available, and add targets for it.\nAX_VALGRIND_DFLT([sgcheck], [off])\nAX_VALGRIND_CHECK\nAM_CONDITIONAL(ENABLE_VALGRIND, [test \"x$VALGRIND_ENABLED\" = xyes])\n\n###\n# Doxygen and doxygen-related options.\n###\nAC_ARG_ENABLE([doxygen],\n  [AS_HELP_STRING([--enable-doxygen],\n    [Enable generation of documentation.])])\ntest \"x$enable_doxygen\" = xyes || enable_doxygen=no\nAM_CONDITIONAL([BUILD_DOCS], [test \"x$enable_doxygen\" = xyes])\n\nAC_ARG_ENABLE([doxygen-tasks],\n    [AS_HELP_STRING([--enable-doxygen-tasks],\n        [Enable Doxygen-generated test, todo and bug list documentation. Developers only.])])\ntest \"x$enable_doxygen_tasks\" = xyes || enable_doxygen_tasks=no\nAM_CONDITIONAL([SHOW_DOXYGEN_TAG_LIST], [test \"x$enable_doxygen_tasks\" = xyes])\nAC_SUBST([SHOW_DOXYGEN_TAG_LIST], [$enable_doxygen_tasks])\n\n###\n# Determine if we should build documentation\n# configured for releases on the Unidata web server.\n###\nAC_ARG_ENABLE([doxygen-build-release-docs],\n    [AS_HELP_STRING([--enable-doxygen-build-release-docs],\n        [Build release documentation.  This is of interest only to developers.])])\ntest \"x$enable_doxygen_build_release_docs\" = xyes || enable_doxygen_build_release_docs=no\nAM_CONDITIONAL([DOXYGEN_BUILD_RELEASE_DOCS], [test \"x$enable_doxygen_build_release_docs\" = xyes])\n\nif test $enable_doxygen_build_release_docs = yes; then\n   AC_SUBST([DOXYGEN_CSS_FILE], [\"release.css\"])\n   AC_SUBST([DOXYGEN_HEADER_FILE], [\"release_header.html\"])\n   AC_SUBST([DOXYGEN_SEARCHENGINE], [\"NO\"])\nelse\n   AC_SUBST([DOXYGEN_CSS_FILE], [])\n   AC_SUBST([DOXYGEN_HEADER_FILE], [])\n   AC_SUBST([DOXYGEN_SEARCHENGINE], [\"YES\"])\nfi\nAC_SUBST([DOXYGEN_SERVER_BASED_SEARCH], [\"NO\"])\n\nAC_ARG_ENABLE([doxygen-pdf-output],\n    [AS_HELP_STRING([--enable-doxygen-pdf-output],\n        [Build netCDF library documentation in PDF format. Experimental.])])\n               AM_CONDITIONAL([NC_ENABLE_DOXYGEN_PDF_OUTPUT], [test \"x$enable_doxygen_pdf_output\" = xyes])\nAC_SUBST([NC_ENABLE_DOXYGEN_PDF_OUTPUT], [$enable_doxygen_pdf_output])\n\nAC_ARG_ENABLE([dot],\n\t[AS_HELP_STRING([--enable-dot],\n\t[Use dot (provided by graphviz) to generate charts and graphs in the doxygen-based documentation.])])\n\ttest \"x$enable_dot\" = xyes || enable_dot=no\n\nAC_ARG_ENABLE([internal-docs],\n  [AS_HELP_STRING([--enable-internal-docs],\n    [Include documentation of library internals. This is of interest only to those developing the netCDF library.])])\ntest \"x$enable_internal_docs\" = xyes || enable_internal_docs=no\nAC_SUBST([BUILD_INTERNAL_DOCS], [$enable_internal_docs])\n\n# Doxygen is apparently buggy when trying to combine a markdown\n# file with @internal. The equivalent can be faked using\n# the Doxygen ENABLED_SECTIONS mechanism. See docs/testserver.dox\n# to see how this is done.\nsections=\nif test \"x$enable_internal_docs\" = xyes ; then\nsections=\"$sections INTERNAL\"\nfi\nAC_SUBST([ENABLED_DOC_SECTIONS], [$sections])\n\nAC_MSG_CHECKING([if fsync support is enabled])\nAC_ARG_ENABLE([fsync],\n              [AS_HELP_STRING([--enable-fsync],\n                              [enable fsync support])],\n\t\t\t\t[],\n\t\t\t\t[enable_fsync=no])\ntest \"x$enable_fsync\" = xno || enable_fsync=yes\nAC_MSG_RESULT($enable_fsync)\nif test \"x$enable_fsync\" = xyes ; then\nAC_DEFINE([USE_FSYNC], [1], [if true, include experimental fsync code])\nfi\n\n# Temporary until JNA bug is fixed (which is probably never).\n# The problem being solved is this:\n# > On Windows using the microsoft runtime, it is an error\n# > for one library to free memory allocated by a different library.\n# This is probably only an issue when using the netcdf-c library\n# via JNA under Java.\nAC_MSG_CHECKING([if jna bug workaround is enabled])\nAC_ARG_ENABLE([jna],\n              [AS_HELP_STRING([--enable-jna],\n                              [enable jna bug workaround])],\n\t\t\t\t[],\n\t\t\t\t[enable_jna=no])\ntest \"x$enable_jna\" = xno || enable_jna=yes\nAC_MSG_RESULT($enable_jna)\nif test \"x$enable_jna\" = xyes ; then\nAC_DEFINE([JNA], [1], [if true, include jna bug workaround code])\nfi\n\n# Should tests with unfixed memory leaks be run?\nAC_MSG_CHECKING([if unfixed tests with memory leaks should be enabled])\nAC_ARG_ENABLE([unfixed-memory-leaks],\n  [AS_HELP_STRING([--enable-unfixed-memory-leaks],\n    [Enable tests in the ncdump directory that have unfixed memory leaks])])\ntest \"x$enable_unfixed_memory_leaks\" = xyes || enable_unfixed_memory_leaks=no\nAC_MSG_RESULT($enable_unfixed_memory_leaks)\nAM_CONDITIONAL([ENABLE_UNFIXED_MEMORY_LEAKS], [test \"x$enable_unfixed_memory_leaks\" = xyes])\n\n# Does the user want to turn off unit tests (useful for test coverage\n# analysis).\nAC_MSG_CHECKING([if unit tests should be disabled])\nAC_ARG_ENABLE([unit-tests],\n  [AS_HELP_STRING([--disable-unit-tests],\n    [Disable tests in unit_test directory. Other tests still run.])])\ntest \"x$enable_unit_tests\" = xno || enable_unit_tests=yes\nAC_MSG_RESULT($enable_unit_tests)\nAM_CONDITIONAL([BUILD_UNIT_TESTS], [test \"x$enable_unit_tests\" = xyes])\n\n# Does the user require dynamic loading?\n# This is only for those hdf5 installs that support it.\nAC_MSG_CHECKING([do we require hdf5 dynamic-loading support])\nAC_ARG_ENABLE([dynamic-loading], [AS_HELP_STRING([--enable-dynamic-loading],\n\t\t\t\t [enable dynamic loading for use with supported hdf5 installs (libdl, HDF5 required)])])\ntest \"x$enable_dynamic_loading\" = xno || enable_dynamic_loading=yes\nAC_MSG_RESULT([$enable_dynamic_loading])\n\n\n# Does the user want to turn on extra HDF4 file tests?\nAC_MSG_CHECKING([whether to fetch some sample HDF4 files from Unidata ftp site to test HDF4 reading (requires wget)])\nAC_ARG_ENABLE([hdf4-file-tests], [AS_HELP_STRING([--enable-hdf4-file-tests],\n              [get some HDF4 files from Unidata ftp site and test that they can be read])])\ntest \"x$enable_hdf4\" = xyes -a \"x$enable_hdf4_file_tests\" = xyes || enable_hdf4_file_tests=no\nif test \"x$enable_hdf4_file_tests\" = xyes; then\n   AC_DEFINE([USE_HDF4_FILE_TESTS], 1, [If true, use use wget to fetch some sample HDF4 data, and then test against it.])\nfi\nAC_MSG_RESULT($enable_hdf4_file_tests)\n\n# Does the user want to try to install netcdf-fortran\n# automatically?\nAC_MSG_CHECKING([whether we should attempt to install netcdf-fortran (EXPERIMENTAL)])\nAC_ARG_ENABLE([remote-fortran-bootstrap], [AS_HELP_STRING([--enable-remote-fortran-bootstrap],\n\t\t\t [Download and install netcdf-fortran (EXPERIMENTAL)])])\ntest \"x$enable_remote_fortran_bootstrap\" = xyes || enable_remote_fortran_bootstrap=no\nAC_MSG_RESULT([$enable_remote_fortran_bootstrap])\n\n# Does the user want to run extra parallel tests when parallel netCDF-4 is built?\nAC_MSG_CHECKING([whether parallel IO tests should be run])\nAC_ARG_ENABLE([parallel-tests],\n              [AS_HELP_STRING([--enable-parallel-tests],\n                              [Run extra parallel IO tests. Requires netCDF-4\n                              with parallel I/O support.])])\ntest \"x$enable_parallel_tests\" = xyes || enable_parallel_tests=no\nAC_MSG_RESULT($enable_parallel_tests)\n\n# Did the user specify an MPI launcher other than mpiexec?\nAC_MSG_CHECKING([whether a user specified program to run mpi programs])\nAC_ARG_WITH([mpiexec],\n              [AS_HELP_STRING([--with-mpiexec=<command>],\n                              [Specify command to launch MPI parallel tests.])],\n            [MPIEXEC=$with_mpiexec], [MPIEXEC=mpiexec])\nAC_MSG_RESULT([$MPIEXEC])\nAC_SUBST([MPIEXEC], [$MPIEXEC])\n\n# Did the user specify a default chunk size?\nAC_MSG_CHECKING([whether a default chunk size in bytes was specified])\nAC_ARG_WITH([default-chunk-size],\n              [AS_HELP_STRING([--with-default-chunk-size=<integer>],\n                              [Specify default size of chunks in bytes.])],\n            [DEFAULT_CHUNK_SIZE=$with_default_chunk_size], [DEFAULT_CHUNK_SIZE=4194304])\nAC_MSG_RESULT([$DEFAULT_CHUNK_SIZE])\nAC_DEFINE_UNQUOTED([DEFAULT_CHUNK_SIZE], [$DEFAULT_CHUNK_SIZE], [default chunk size in bytes])\n\n# Did the user specify a max per-var cache size?\nAC_MSG_CHECKING([whether a maximum per-variable cache size for HDF5 was specified])\nAC_ARG_WITH([max-default-cache-size],\n              [AS_HELP_STRING([--with-max-default-cache-size=<integer>],\n                              [Specify maximum size (in bytes) for the default per-var chunk cache.])],\n            [MAX_DEFAULT_CACHE_SIZE=$with_max_default_cache_size], [MAX_DEFAULT_CACHE_SIZE=67108864])\nAC_MSG_RESULT([$MAX_DEFAULT_CACHE_SIZE])\nAC_DEFINE_UNQUOTED([MAX_DEFAULT_CACHE_SIZE], [$MAX_DEFAULT_CACHE_SIZE], [max size of the default per-var chunk cache.])\n\n# Did the user specify a number of chunks in default per-var cache size?\nAC_MSG_CHECKING([whether a number of chunks for the default per-variable cache was specified])\nAC_ARG_WITH([default-chunks-in-cache],\n              [AS_HELP_STRING([--with-default-chunks-in-cache=<integer>],\n                              [Specify the number of chunks to store in default per-variable cache.])],\n            [DEFAULT_CHUNKS_IN_CACHE=$with_default_chunks_in_cache], [DEFAULT_CHUNKS_IN_CACHE=10])\nAC_MSG_RESULT([$DEFAULT_CHUNKS_IN_CACHE])\nAC_DEFINE_UNQUOTED([DEFAULT_CHUNKS_IN_CACHE], [$DEFAULT_CHUNKS_IN_CACHE], [num chunks in default per-var chunk cache.])\n\n# Did the user specify a default cache size for HDF5?\nAC_MSG_CHECKING([whether a default file cache size for HDF5 was specified])\nAC_ARG_WITH([chunk-cache-size],\n              [AS_HELP_STRING([--with-chunk-cache-size=<integer>],\n                              [Specify default file cache chunk size for HDF5 files in bytes.])],\n            [CHUNK_CACHE_SIZE=$with_chunk_cache_size], [CHUNK_CACHE_SIZE=16777216])\nAC_MSG_RESULT([$CHUNK_CACHE_SIZE])\nAC_DEFINE_UNQUOTED([CHUNK_CACHE_SIZE], [$CHUNK_CACHE_SIZE], [default file chunk cache size in bytes.])\n\n# Did the user specify a default cache nelems?\nAC_MSG_CHECKING([whether a default file cache maximum number of elements for HDF5 was specified])\nAC_ARG_WITH([chunk-cache-nelems],\n              [AS_HELP_STRING([--with-chunk-cache-nelems=<integer>],\n                              [Specify default maximum number of elements in the file chunk cache chunk for HDF5 files (should be prime number).])],\n            [CHUNK_CACHE_NELEMS=$with_chunk_cache_nelems], [CHUNK_CACHE_NELEMS=4133])\nAC_MSG_RESULT([$CHUNK_CACHE_NELEMS])\nAC_DEFINE_UNQUOTED([CHUNK_CACHE_NELEMS], [$CHUNK_CACHE_NELEMS], [default file chunk cache nelems.])\n\n# Did the user specify a default cache preemption?\nAC_MSG_CHECKING([whether a default cache preemption for HDF5 was specified])\nAC_ARG_WITH([chunk-cache-preemption],\n              [AS_HELP_STRING([--with-chunk-cache-preemption=<float between 0 and 1 inclusive>],\n                              [Specify default file chunk cache preemption policy for HDF5 files (a number between 0 and 1, inclusive).])],\n            [CHUNK_CACHE_PREEMPTION=$with_chunk_cache_preemption], [CHUNK_CACHE_PREEMPTION=0.75])\nAC_MSG_RESULT([$CHUNK_CACHE_PREEMPTION])\nAC_DEFINE_UNQUOTED([CHUNK_CACHE_PREEMPTION], [$CHUNK_CACHE_PREEMPTION], [default file chunk cache preemption policy.])\n\n# Does the user want to enable netcdf-4 logging?\nAC_MSG_CHECKING([whether netCDF-4 logging is enabled])\nAC_ARG_ENABLE([logging],\n              [AS_HELP_STRING([--enable-logging],\n                              [enable logging capability (only applies when netCDF-4 is built). \\\n\t\t\t      This debugging features is only of interest to netCDF developers. \\\n\t\t\t      Ignored if netCDF-4 is not enabled.])])\ntest \"x$enable_logging\" = xyes || enable_logging=no\nAC_MSG_RESULT([$enable_logging])\n\n# Does the user want to turn off nc_set_log_level() function? (It will\n# always be defined if --enable-logging is used.)\nAC_MSG_CHECKING([whether nc_set_log_level() function is included (will do nothing unless enable-logging is also used)])\nAC_ARG_ENABLE([set_log_level_func], [AS_HELP_STRING([--disable-set-log-level-func],\n              [disable the nc_set_log_level function])])\ntest \"x$enable_set_log_level_func\" = xno -a \"x$enable_logging\" = xno || enable_set_log_level_func=yes\nif test \"x$enable_set_log_level_func\" = xyes -a \"x$enable_netcdf_4\" = xyes; then\n   AC_DEFINE([ENABLE_SET_LOG_LEVEL], 1, [If true, define nc_set_log_level.])\nfi\nAC_MSG_RESULT($enable_set_log_level_func)\n\n# We need curl for DAP and byterange\nAC_CHECK_LIB([curl],[curl_easy_setopt],[found_curl=yes],[found_curl=no])\nif test \"x$found_curl\" = \"xyes\" ; then\n   AC_SEARCH_LIBS([curl_easy_setopt],[curl curl.dll cygcurl.dll], [],\n      [AC_MSG_ERROR([curl required for remote access. Install curl or disable relevant options.])])\nfi\n\n# CURLOPT_USERNAME is not defined until curl version 7.19.1\n# CURLOPT_PASSWORD is not defined until curl version 7.19.1\n# CURLOPT_KEYPASSWD is not defined until curl version 7.16.4\n# CURLINFO_RESPONSE_CODE is not defined until curl version 7.10.7\n# CURLOPT_CHUNK_BGN_FUNCTION is not defined until curl version 7.21.0\n# CURL_MAX_READ_SIZE is not defined until 7.59\n\n# Save/restore CFLAGS\nSAVECFLAGS=\"$CFLAGS\"\nCFLAGS=\"${curl_cflags}\"\n\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n[#include \"curl/curl.h\"],\n[[int x = CURLOPT_USERNAME;]])],\n                   [haveusername=yes],\n                   [haveusername=no])\nAC_MSG_CHECKING([whether CURLOPT_USERNAME is defined])\nAC_MSG_RESULT([${haveusername}])\nif test $haveusername = yes; then\n  AC_DEFINE([HAVE_CURLOPT_USERNAME],[1],[Is CURLOPT_USERNAME defined])\nfi\n\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n[#include \"curl/curl.h\"],\n[[int x = CURLOPT_PASSWORD;]])],\n                   [havepassword=yes],\n                   [havepassword=no])\nAC_MSG_CHECKING([whether CURLOPT_PASSWORD is defined])\nAC_MSG_RESULT([${havepassword}])\nif test $havepassword = yes; then\n  AC_DEFINE([HAVE_CURLOPT_PASSWORD],[1],[Is CURLOPT_PASSWORD defined])\nfi\n\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n[#include \"curl/curl.h\"],\n[[int x = CURLOPT_KEYPASSWD;]])],\n                   [havekeypassword=yes],\n                   [havekeypassword=no])\nAC_MSG_CHECKING([whether CURLOPT_KEYPASSWD is defined])\nAC_MSG_RESULT([${havekeypassword}])\nif test $havekeypassword = yes; then\n  AC_DEFINE([HAVE_CURLOPT_KEYPASSWD],[1],[Is CURLOPT_KEYPASSWD defined])\nfi\n\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n[#include \"curl/curl.h\"],\n[[int x = CURLINFO_RESPONSE_CODE;]])],\n                   [haveresponsecode=yes],\n                   [haveresponsecode=no])\nAC_MSG_CHECKING([whether CURLINFO_RESPONSE_CODE is defined])\nAC_MSG_RESULT([${haveresponsecode}])\nif test $haveresponsecode = yes; then\n  AC_DEFINE([HAVE_CURLINFO_RESPONSE_CODE],[1],[Is CURLINFO_RESPONSE_CODE defined])\nfi\n\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n[#include \"curl/curl.h\"],\n[[int x = CURLOPT_BUFFERSIZE;]])],\n                   [havecurloption=yes],\n                   [havecurloption=no])\nAC_MSG_CHECKING([whether CURLOPT_BUFFERSIZE is defined])\nAC_MSG_RESULT([${havecurloption}])\nif test $havecurloption = yes; then\n  AC_DEFINE([HAVE_CURLOPT_BUFFERSIZE],[1],[Is CURLOPT_BUFFERSIZE defined])\nfi\n\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n[#include \"curl/curl.h\"],\n[[int x = CURLOPT_TCP_KEEPALIVE;]])],\n                   [havecurloption=yes],\n                   [havecurloption=no])\nAC_MSG_CHECKING([whether CURLOPT_TCP_KEEPALIVE is defined])\nAC_MSG_RESULT([${havecurloption}])\nif test $havecurloption = yes; then\n  AC_DEFINE([HAVE_CURLOPT_KEEPALIVE],[1],[Is CURLOPT_TCP_KEEPALIVE defined])\nfi\n# CURLOPT_VERIFYHOST semantics differ depending on version\nAC_MSG_CHECKING([whether libcurl is version 7.66 or later?])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n[#include \"curl/curl.h\"],\n[[\n#if LIBCURL_VERSION_NUM < 0x074200\nerror \"<7.66\";\n#endif\n]])], [libcurl766=yes], [libcurl766=no])\n\nAC_MSG_RESULT([$libcurl766])\nif test x$libcurl66 = xno; then\n  AC_DEFINE([HAVE_LIBCURL_766],[1],[Is libcurl version 7.66 or later])\nfi\n\nCFLAGS=\"$SAVECFLAGS\"\n\n# --enable-dap => enable-dap4\nenable_dap4=$enable_dap\n# Default is to do the short remote tests.\nAC_MSG_CHECKING([whether dap remote testing should be enabled (default off)])\nAC_ARG_ENABLE([dap-remote-tests],\n              [AS_HELP_STRING([--enable-dap-remote-tests],\n                                 [enable dap remote tests])])\ntest \"x$enable_dap_remote_tests\" = xno || enable_dap_remote_tests=yes\nif test \"x$enable_dap\" = \"xno\" ; then\n  enable_dap_remote_tests=no\nfi\nAC_MSG_RESULT($enable_dap_remote_tests)\n\n# Default is not to do the remote authorization tests.\nAC_MSG_CHECKING([whether dap remote authorization testing should be enabled (default off)])\nAC_ARG_ENABLE([dap-auth-tests],\n              [AS_HELP_STRING([--enable-dap-auth-tests],\n                                 [enable dap remote authorization tests])])\ntest \"x$enable_dap_auth_tests\" = xyes || enable_dap_auth_tests=no\n# dap must be enabled\nif test \"x$enable_dap\" = \"xno\" ; then\n  enable_dap_auth_tests=no\nfi\n# if remote tests are disabled, then so is this\nif test \"x$enable_dap_remote_tests\" = \"xno\" ; then\n  enable_dap_remote_tests=no\nfi\nAC_MSG_RESULT($enable_dap_auth_tests)\n\n# Did the user specify a list of test servers to try for remote tests?\nAC_MSG_CHECKING([which remote test server(s) to use])\nAC_ARG_WITH([testservers],\n              [AS_HELP_STRING([--with-testservers=<host:port>,<host:port>...],\n                              [Specify the testserver(s) to try for remote tests.])],\n            [REMOTETESTSERVERS=$with_testservers], [REMOTETESTSERVERS=no])\nmsg=\"$REMOTETESTSERVERS\"\nif test \"x$REMOTETESTSERVERS\" = xno ; then\n  svclist=\"remotetest.unidata.ucar.edu\"\n  REMOTETESTSERVERS=\"$svclist\"\nfi\nAC_MSG_RESULT([$svclist])\nAC_DEFINE_UNQUOTED([REMOTETESTSERVERS], [\"$REMOTETESTSERVERS\"], [the testservers for remote tests.])\n\n# Set the config.h flags\nif test \"x$enable_dap\" = xyes; then\n   AC_DEFINE([USE_DAP], [1], [if true, build DAP Client])\n   AC_DEFINE([ENABLE_DAP], [1], [if true, build DAP Client])\nfi\n\nif test \"x$enable_dap_remote_tests\" = xyes; then\n   AC_DEFINE([ENABLE_DAP_REMOTE_TESTS], [1], [if true, do remote tests])\nfi\n\nAC_MSG_CHECKING([whether the time-consuming dap tests should be enabled (default off)])\nAC_ARG_ENABLE([dap-long-tests],\n              [AS_HELP_STRING([--enable-dap-long-tests],\n                                 [enable dap long tests])])\ntest \"x$enable_dap_long_tests\" = xyes || enable_dap_long_tests=no\nif test \"x$enable_dap_remote_tests\" = \"xno\" ; then\n  enable_dap_long_tests=no\nfi\nAC_MSG_RESULT([$enable_dap_long_tests])\n\n# Control zarr storage\nif test \"x$enable_nczarr\" = xyes ; then\nif test \"x$enable_netcdf_4\" = xno ; then\nAC_MSG_ERROR([netCDF-4 disabled, so you must not enable nczarr])\nenable_nczarr=no\nfi\nfi\nif test \"x$enable_nczarr\" = xyes; then\n   AC_DEFINE([ENABLE_NCZARR], [1], [if true, build NCZarr Client])\n   AC_SUBST(ENABLE_NCZARR)\nfi\nAM_CONDITIONAL(ENABLE_NCZARR, [test x$enable_nczarr = xyes])\n\n# Check for enabling of S3 support\nAC_MSG_CHECKING([whether netcdf zarr S3 support should be enabled])\nAC_ARG_ENABLE([nczarr-s3],\n              [AS_HELP_STRING([--enable-nczarr-s3],\n                              [enable netcdf zarr S3 support; make sure to set LDFLAGS])])\ntest \"x$enable_nczarr_s3\" = xyes || enable_nczarr_s3=no\nAC_MSG_RESULT($enable_nczarr_s3)\n\n# Check for enabling S3 testing\nAC_MSG_CHECKING([whether netcdf zarr S3 testing should be enabled])\nAC_ARG_ENABLE([nczarr-s3-tests],\n              [AS_HELP_STRING([--enable-nczarr-s3-tests],\n                              [enable netcdf zarr S3 testing])])\ntest \"x$enable_nczarr_s3_tests\" = xyes || enable_nczarr_s3_tests=no\nAC_MSG_RESULT($enable_nczarr_s3_tests)\n\n# Disable S3 tests if S3 support is disabled\nif test \"x$enable_nczarr_s3\" = xno && test \"x$enable_nczarr_s3_tests\" = xyes ; then\n    AC_MSG_ERROR([NCZarr S3 support is disabled; please specify option --disable-nczarr-s3-tests])\n    enable_nczarr_s3_tests=no\nfi\n\n# Set default\nhave_aws=no\n\nif test \"x$enable_nczarr_s3\" = xyes ; then\n# See if we have the s3 aws library\n# Check for the AWS S3 SDK library\nAC_LANG_PUSH([C++])\nAC_SEARCH_LIBS([aws_allocator_is_valid],[aws-c-common aws-cpp-sdk-s3 aws-cpp-sdk-core], [have_aws=yes],[have_aws=no])\nAC_LANG_POP\nAC_MSG_CHECKING([whether AWS S3 SDK library is available])\nAC_MSG_RESULT([$have_aws])\n\nif test \"x$have_aws\" = xyes ; then\nAC_DEFINE([ENABLE_S3_SDK], [1], [If true, then S3 sdk was found])\nfi\nfi\nAM_CONDITIONAL(ENABLE_S3_SDK, [test \"x$have_aws\" = xyes])\n\nif test \"x$have_aws\" = xno ; then\n  if test \"x$enable_nczarr_s3\" = xyes || test \"x$enable_nczarr_s3_tests\" = xyes ; then\n    AC_MSG_ERROR([AWS S3 libraries not found; please specify options --disable-nczarr-s3 and --disable-nczarr-s3-tests])\n    enable_nczarr_s3_tests=no\n    enable_nczarr_s3=no\n  fi\nfi\n\nif test \"x$enable_nczarr_s3\" = xyes ; then\n  AC_DEFINE([ENABLE_NCZARR_S3], [1], [if true, build libnczarr with S3 support enabled])\nfi\nAM_CONDITIONAL(ENABLE_NCZARR_S3, [test \"x$enable_nczarr_s3\" = xyes])\n\nif test \"x$enable_nczarr_s3_tests\" = xyes ; then\n  AC_DEFINE([ENABLE_NCZARR_S3_TESTS], [1], [if true, build libnczarr with S3 tests enabled])\nfi\nAM_CONDITIONAL(ENABLE_NCZARR_S3_TESTS, [test \"x$enable_nczarr_s3_tests\" = xyes])\n\nif test \"x$enable_nczarr_s3_tests\" = xyes ; then\n  AC_MSG_WARN([*** DO NOT ENABLE_NCZARR_S3_TESTS UNLESS YOU HAVE ACCESS TO THE UNIDATA S3 BUCKET! ***])\nfi\n\n# Set default\n# See if we have libzip\nAC_CHECK_LIB([zip],[zip_open],[have_zip=yes],[have_zip=no])\nif test \"x$have_zip\" = \"xyes\" ; then\n   AC_SEARCH_LIBS([zip_open],[zip zip.dll cygzip.dll], [],\n      [AC_MSG_ERROR([libzip search failed.])])\nfi\nAC_MSG_CHECKING([whether libzip library is available])\nAC_MSG_RESULT([${have_zip}])\n\nenable_nczarr_zip=${have_zip} # alias\n\nif test \"x$enable_nczarr_zip\" = xyes ; then\nAC_DEFINE([ENABLE_NCZARR_ZIP], [1], [If true, then libzip found])\nfi\nAM_CONDITIONAL(ENABLE_NCZARR_ZIP, [test \"x$enable_nczarr_zip\" = xyes])\n\n# Did the user specify a default cache size for NCZarr?\nAC_MSG_CHECKING([whether a default file cache size for NCZarr was specified])\nAC_ARG_WITH([chunk-cache-size-nczarr],\n              [AS_HELP_STRING([--with-chunk-cache-size-nczarr=<integer>],\n                              [Specify default maximum space used by the chunk cache NCZarr.])],\n            [CHUNK_CACHE_SIZE_NCZARR=$with_chunk_cache_size_nczarr], [CHUNK_CACHE_SIZE_NCZARR=4194304])\nAC_MSG_RESULT([$CHUNK_CACHE_SIZE_NCZARR])\nAC_DEFINE_UNQUOTED([CHUNK_CACHE_SIZE_NCZARR], [$CHUNK_CACHE_SIZE_NCZARR], [default nczarr chunk cache size.])\n\n# This has multiversion capability\nAC_MSG_CHECKING([whether multi-filter support is enabled])\nhas_multifilters=yes\nAC_MSG_RESULT($has_multifilters)\nAC_DEFINE([HAS_MULTIFILTERS], [1], [if true, multi-filter support enabled])\n\n# Check whether we want to enable strict null byte header padding.\n# See https://github.com/Unidata/netcdf-c/issues/657 for more information.\nAC_MSG_CHECKING([whether to enable strict null-byte header padding when reading (default off)])\nAC_ARG_ENABLE([strict-null-byte-header-padding],\n    [AS_HELP_STRING([--enable-strict-null-byte-header-padding],\n                    [enable strict null-byte header padding when reading netCDF3 files.])])\ntest \"x$enable_strict_null_byte_header_padding\" = xyes || enable_strict_null_byte_header_padding=no\nAC_MSG_RESULT($enable_strict_null_byte_header_padding)\n\nif test \"x$enable_strict_null_byte_header_padding\" = xyes; then\n   AC_DEFINE([USE_STRICT_NULL_BYTE_HEADER_PADDING], [1], [if true, enable strict null byte header padding])\nfi\n\nAM_CONDITIONAL(USE_STRICT_NULL_BYTE_HEADER_PADDING, [test x$enable_strict_null_byte_header_padding = xyes ])\n\n# Does the user want to use the ffio module?\nAC_MSG_CHECKING([whether FFIO will be used])\nAC_ARG_ENABLE([ffio],\n              [AS_HELP_STRING([--enable-ffio],\n                              [use ffio instead of posixio (ex. on the Cray)])])\ntest \"x$enable_ffio\" = xyes || enable_ffio=no\nAC_MSG_RESULT($enable_ffio)\nif test \"x$enable_ffio\" = xyes; then\n   AC_DEFINE([USE_FFIO], [1], [if true, use ffio instead of posixio])\nfi\nAM_CONDITIONAL(USE_FFIO, [test x$enable_ffio = xyes])\n\n# Does the user want to use the stdio module?\nAC_MSG_CHECKING([whether STDIO will be used])\nAC_ARG_ENABLE([stdio],\n              [AS_HELP_STRING([--enable-stdio],\n                              [use stdio instead of posixio (ex. on the Cray)])])\ntest \"x$enable_stdio\" = xyes || enable_stdio=no\nAC_MSG_RESULT($enable_stdio)\nif test \"x$enable_stdio\" = xyes; then\n   AC_DEFINE([USE_STDIO], [1], [if true, use stdio instead of posixio])\nfi\nAM_CONDITIONAL(USE_STDIO, [test x$enable_stdio = xyes])\n\nnc_build_c=yes\nnc_build_v2=yes\nnc_build_utilities=yes\nnc_build_tests=yes\nnc_build_examples=yes\n\n# Does the user want to build examples?\nAC_MSG_CHECKING([whether examples should be built])\nAC_ARG_ENABLE([examples],\n              [AS_HELP_STRING([--disable-examples],\n                              [don't build the netCDF examples during make check \\\n                              (examples are treated as extra tests by netCDF)])])\ntest \"x$enable_examples\" = xno && nc_build_examples=no\nAC_MSG_RESULT($nc_build_examples)\nAM_CONDITIONAL(BUILD_EXAMPLES, [test x$nc_build_examples = xyes])\n\n# Does the user want to disable the V2 API?\nAC_MSG_CHECKING([whether v2 netCDF API should be built])\nAC_ARG_ENABLE([v2],\n              [AS_HELP_STRING([--disable-v2],\n                              [turn off the netCDF version 2 API])])\ntest \"x$enable_v2\" = xno && nc_build_v2=no\nAC_MSG_RESULT($nc_build_v2)\nAM_CONDITIONAL(BUILD_V2, [test x$nc_build_v2 = xyes])\nif test \"x$nc_build_v2\" = xno; then\n   AC_DEFINE_UNQUOTED(NO_NETCDF_2, 1, [do not build the netCDF version 2 API])\nelse\n   AC_DEFINE_UNQUOTED(USE_NETCDF_2, 1, [build the netCDF version 2 API])\nfi\n\n# Does the user want to disable ncgen/ncdump/nccopy/...?\nAC_MSG_CHECKING([whether the ncgen/ncdump/nccopy should be built])\nAC_ARG_ENABLE([utilities],\n              [AS_HELP_STRING([--disable-utilities],\n                              [don't build netCDF utilities ncgen, ncdump, and nccopy])])\ntest \"x$nc_build_c\" = xno && enable_utilities=no\ntest \"x$enable_utilities\" = xno && nc_build_utilities=no\nAC_MSG_RESULT($nc_build_utilities)\nAM_CONDITIONAL(BUILD_UTILITIES, [test x$nc_build_utilities = xyes])\n\n# Does the user want to disable all tests?\nAC_MSG_CHECKING([whether test should be built and run])\nAC_ARG_ENABLE([testsets],\n              [AS_HELP_STRING([--disable-testsets],\n                              [don't build or run netCDF tests])])\ntest \"x$enable_testsets\" = xno || enable_testsets=yes\nnc_build_tests=$enable_testsets\nAC_MSG_RESULT($nc_build_tests)\nAM_CONDITIONAL(BUILD_TESTSETS, [test x$nc_build_tests = xyes])\n\n# Does the user want to run tests for large files (> 2GiB)?\nAC_MSG_CHECKING([whether large file (> 2GB) tests should be run])\nAC_ARG_ENABLE([large-file-tests],\n              [AS_HELP_STRING([--enable-large-file-tests],\n                              [Run tests which create very large data files (~13 GB disk space\n                              required, but it will be recovered when tests are complete). See\n                              option --with-temp-large to specify temporary directory])])\ntest \"x$enable_large_file_tests\" = xyes || enable_large_file_tests=no\nAC_MSG_RESULT($enable_large_file_tests)\nAM_CONDITIONAL(LARGE_FILE_TESTS, [test x$enable_large_file_tests = xyes])\nif test \"x$enable_large_file_tests\" = xyes; then\n   AC_DEFINE([LARGE_FILE_TESTS], [1], [do large file tests])\nfi\n\n# Does the user want to run benchmarks?\nAC_MSG_CHECKING([whether benchmarks should be run])\nAC_ARG_ENABLE([benchmarks],\n              [AS_HELP_STRING([--enable-benchmarks],\n                              [Run benchmarks. This will cause sample data files from the Unidata ftp\n                              site to be fetched. The benchmarks are a bunch of extra tests, which\n                              are timed. We use these tests to check netCDF performance.])])\ntest \"x$enable_benchmarks\" = xyes || enable_benchmarks=no\nAC_MSG_RESULT($enable_benchmarks)\nif test \"x$enable_HDF5\" = xno -a \"x$enable_benchmarks\" = xyes; then\nAC_MSG_ERROR([Can't use benchmarks if HDF5 is disabled.])\nfi\nAM_CONDITIONAL(BUILD_BENCHMARKS, [test x$enable_benchmarks = xyes])\n\n# Does the user want to use extreme numbers in testing.\nAC_MSG_CHECKING([whether extreme numbers should be used in tests])\nAC_ARG_ENABLE([extreme-numbers],\n              [AS_HELP_STRING([--disable-extreme-numbers],\n                              [don't use extreme numbers during testing, such as MAX_INT - 1])])\ncase \"$host_cpu $host_os\" in\n     *386*solaris*)\n        test \"x$enable_extreme_numbers\" = xyes || enable_extreme_numbers=no\n        ;;\n     *)\n        test \"x$enable_extreme_numbers\" = xno || enable_extreme_numbers=yes\n        ;;\nesac\nAC_MSG_RESULT($enable_extreme_numbers)\n\nif test \"x$enable_extreme_numbers\" = xyes; then\n   AC_DEFINE(USE_EXTREME_NUMBERS, 1, [set this to use extreme numbers in tests])\nfi\n\n# If the env. variable TEMP_LARGE is set, or if\n# --with-temp-large=<directory>, use it as a place for the large\n# (i.e. > 2 GiB) files created during the large file testing.\nAC_MSG_CHECKING([where to put large temp files if large file tests are run])\nAC_ARG_WITH([temp-large],\n            [AS_HELP_STRING([--with-temp-large=<directory>],\n                            [specify directory where large files (i.e. >2 GB) \\\n                            will be written, if large files tests are run with\n                            --enable-large-file-tests])],\n            [TEMP_LARGE=$with_temp_large])\nTEMP_LARGE=${TEMP_LARGE-.}\nAC_MSG_RESULT($TEMP_LARGE)\n#AC_SUBST(TEMP_LARGE)\nAC_DEFINE_UNQUOTED([TEMP_LARGE], [\"$TEMP_LARGE\"], [Place to put very large netCDF test files.])\n\n# Specify extra values to add to _NCProperties attribute\n# --with-ncproperties-extra=\"<name>=<value>|...\".\n# Note: need to figure out a way to do this programmatically also\nAC_MSG_CHECKING([Extra values for _NCProperties])\nAC_ARG_WITH([ncproperties-extra],\n            [AS_HELP_STRING([--with-ncproperties-extra=\"<name>=<value>,...],\n                            [specify extra pairs for _NCProperties])],\n            [NCPROPERTIES_EXTRA=$with_ncproperties_extra],\n            [NCPROPERTIES_EXTRA=\"\"])\nAC_MSG_RESULT([$NCPROPERTIES_EXTRA])\nAC_DEFINE_UNQUOTED([NCPROPERTIES_EXTRA], [\"$NCPROPERTIES_EXTRA\"], [Extra pairs for _NCProperties])\n\n# Did the user specify a user-defined format 0?\nAC_MSG_CHECKING([whether user-defined format 0 was specified])\nAC_ARG_WITH([udf0],\n              [AS_HELP_STRING([--with-udf0=<dispatch_name>],\n                              [Specify a dispatch table for user-defined format 0.])],\n            [UDF0_DISPATCH=$with_udf0])\nAC_MSG_RESULT([$UDF0_DISPATCH])\nif test -n \"$UDF0_DISPATCH\"; then\n   AC_DEFINE_UNQUOTED([UDF0_DISPATCH], [$UDF0_DISPATCH], [dispatch table for user-defined format 0.])\n   AC_DEFINE_UNQUOTED([UDF0_DISPATCH_FUNC], [get_$UDF0_DISPATCH()], [function to get dispatch table for user-defined format 0.])\n   AC_DEFINE([USE_UDF0], [1], [if true, use user-defined format 0 in utilities])\n   AC_CHECK_LIB([$UDF0_DISPATCH], [get_$UDF0_DISPATCH], [],\n                                 [AC_MSG_ERROR([Can't find or link to the user-defined format 0 library.])],\n                                 [])\nfi\n\n# Did the user specify a magic number for user-defined format 0?\nAC_MSG_CHECKING([whether a magic number for user-defined format 0 was specified])\nAC_ARG_WITH([udf0-magic-number],\n              [AS_HELP_STRING([--with-udf0-magic-number=<magic_number>],\n                              [Specify a magic number for user-defined format 0 (ignored unless --with-udf0 is also used).])],\n            [UDF0_MAGIC_NUMBER=$with_udf0_magic_number])\nAC_MSG_RESULT([$UDF0_MAGIC_NUMBER])\n\n# Did the user specify a user-defined format 1?\nAC_MSG_CHECKING([whether user-defined format 1 was specified])\nAC_ARG_WITH([udf1],\n              [AS_HELP_STRING([--with-udf1=<dispatch_name>],\n                              [Specify a dispatch table for user-defined format 1.])],\n            [UDF1_DISPATCH=$with_udf1])\nAC_MSG_RESULT([$UDF1_DISPATCH])\nif test -n \"$UDF1_DISPATCH\"; then\n   AC_DEFINE_UNQUOTED([UDF1_DISPATCH], [$UDF1_DISPATCH], [dispatch table for user-defined format 1.])\n   AC_DEFINE_UNQUOTED([UDF1_DISPATCH_FUNC], [get_$UDF1_DISPATCH()], [function to get dispatch table for user-defined format 1.])\n   AC_DEFINE([USE_UDF1], [1], [if true, use user-defined format 1 in utilities])\n   AC_CHECK_LIB([$UDF1_DISPATCH], [get_$UDF1_DISPATCH], [],\n                                 [AC_MSG_ERROR([Can't find or link to the user-defined format 1 library.])],\n                                 [])\nfi\n\n# Did the user specify a magic number for user-defined format 0?\nAC_MSG_CHECKING([whether a magic number for user-defined format 1 was specified])\nAC_ARG_WITH([udf1-magic-number],\n              [AS_HELP_STRING([--with-udf1-magic-number=<magic_number>],\n                              [Specify a magic number for user-defined format 1 (ignored unless --with-udf1 is also used).])],\n            [UDF1_MAGIC_NUMBER=$with_udf1_magic_number])\nAC_MSG_RESULT([$UDF1_MAGIC_NUMBER])\n\n# According to the autoconf mailing list gurus, we must test for\n# compilers unconditionally. That is, we can't skip looking for the\n# fortran compilers, just because the user doesn't want fortran. This\n# is due to a limitation in autoconf.\n\n# Find the C compiler.\nAC_MSG_NOTICE([finding C compiler])\n\n## Compiler with version information. This consists of the full path\n## name of the compiler and the reported version number.\nAC_SUBST([CC_VERSION])\n## Strip anything that looks like a flag off of $CC\nCC_NOFLAGS=`echo $CC | sed 's/ -.*//'`\n\nif `echo $CC_NOFLAGS | grep ^/ >/dev/null 2>&1`; then\n  CC_VERSION=\"$CC\"\nelse\n  CC_VERSION=\"$CC\";\n  for x in `echo $PATH | sed -e 's/:/ /g'`; do\n    if test -x $x/$CC_NOFLAGS; then\n      CC_VERSION=\"$x/$CC\"\n      break\n    fi\n  done\nfi\nif test -n \"$cc_version_info\"; then\n  CC_VERSION=\"$CC_VERSION ( $cc_version_info)\"\nfi\n\n\nAC_PROG_CC\nAC_PROG_CXX\nAM_PROG_CC_C_O\nAC_C_CONST\n\n# Set up libtool.\nAC_MSG_NOTICE([setting up libtool])\nLT_PREREQ([2.2])\nLT_INIT()\n\nAC_MSG_NOTICE([finding other utilities])\n\n# Is m4 installed? If not, bail.\nAC_CHECK_PROGS([NC_M4], [m4])\nif test -z \"$NC_M4\"; then\n   AC_MSG_ERROR([Cannot find m4 utility. Install m4 and try again.])\nfi\n\n# Is doxygen installed? If so, have configure construct the Doxyfile.\nAC_CHECK_PROGS([DOXYGEN], [doxygen])\nif test -z \"$DOXYGEN\"; then\n   AC_MSG_WARN([Doxygen not found - documentation will not be built])\nfi\n\n# Is graphviz/dot installed? If so, we'll use dot to create\n# graphs in the documentation.\nAC_CHECK_PROGS([DOT], [dot])\nif test -z \"$DOT\"; then\n   AC_MSG_WARN([dot not found - will use simple charts in documentation])\n   HAVE_DOT=NO\nelif test \"x$enable_dot\" = xno; then\n   HAVE_DOT=NO\nelse\n   HAVE_DOT=YES\nfi\n# If we have doxygen, and it's enabled, then process the file.\nif test \"x$enable_doxygen\" != xno; then\n   if test -n \"$DOXYGEN\"; then\n        AC_SUBST(HAVE_DOT)\n        AC_CONFIG_FILES([docs/Doxyfile])\n   fi\n# Note: the list of files to input to doxygen\n# has been moved to docs/Doxyfile.in so\n# that make distcheck works correctly.\n# Any new inputs should be inserted into\n# docs/Doxyfile.in and possibley docs/Makefile.am\nfi\n\n# Find the install program.\nAC_PROG_INSTALL\n\n# Check to see if any macros must be set to enable large (>2GB) files.\nAC_SYS_LARGEFILE\n\nAC_MSG_NOTICE([displaying some results])\n\n## This next macro just prints some results for debugging\n## support issues.\nUD_DISPLAY_RESULTS\n\n# For nightly build testing, output CC, FC, etc.\necho \"CPPFLAGS=$CPPFLAGS CC=$CC CFLAGS=$CFLAGS LDFLAGS=$LDFLAGS LIBS=$LIBS\" >> comps.txt\n\nAC_MSG_NOTICE([checking types, headers, and functions])\n\nAC_CHECK_HEADERS([sys/param.h])\nAC_CHECK_HEADERS([libgen.h])\n#AC_CHECK_HEADERS([locale.h])\nAC_HEADER_STDC\nAC_CHECK_HEADERS([locale.h stdio.h stdarg.h fcntl.h malloc.h stdlib.h string.h strings.h unistd.h sys/stat.h getopt.h sys/time.h sys/types.h time.h dirent.h])\n\n# Do sys/resource.h separately\n#AC_CHECK_HEADERS([sys/resource.h],[havesysresource=1],[havesysresource=0])\n#if test \"x$enable_dll\" != xyes ; then\nAC_CHECK_HEADERS([sys/resource.h])\n#fi\n\n# See if we have ftw.h to walk directory trees\nAC_CHECK_HEADERS([ftw.h])\n\n# See if we can do stack tracing programmatically\nAC_CHECK_HEADERS([execinfo.h])\n\n# Check for these functions...\nAC_CHECK_FUNCS([strlcat snprintf strcasecmp fileno \\\n                strdup strtoll strtoull \\\n\t\tmkstemp mktemp random \\\n\t\tgetrlimit gettimeofday fsync MPI_Comm_f2c MPI_Info_f2c \\\n\t\tstrncasecmp])\n\n# See if clock_gettime is available and its arg types.\nAC_CHECK_FUNCS([clock_gettime])\nAC_CHECK_TYPES([struct timespec])\n\n# disable dap4 if netcdf-4 is disabled\n#if test \"x$enable_netcdf_4\" = \"xno\" ; then\nif test \"x$enable_hdf5\" = \"xno\" ; then\n    AC_MSG_WARN([netcdf-4 not enabled; disabling DAP4])\n    enable_dap4=no\nfi\n\nif test \"x$enable_dap4\" = xyes; then\n   AC_DEFINE([ENABLE_DAP4], [1], [if true, build DAP4 Client])\nfi\n\n# check for useful, but not essential, memio support\nAC_CHECK_FUNCS([memmove getpagesize sysconf])\n\n# Does the user want to allow use of mmap for NC_DISKLESS?\nAC_MSG_CHECKING([whether mmap is enabled for in-memory files])\nAC_ARG_ENABLE([mmap],\n              [AS_HELP_STRING([--enable-mmap],\n                              [allow mmap for in-memory files])])\ntest \"x$enable_mmap\" = xyes || enable_mmap=no\nAC_MSG_RESULT($enable_mmap)\n\n# check for mmap availability before committing to use mmap\nhave_mmap=\"$enable_mmap\"\nAC_CHECK_FUNCS([mmap],[havemmapfcn=yes],[havemmapfcn=no])\nif test \"x$havemmapfcn\" = xno ; then\nhave_mmap=no\nfi\n\n# check for mremap availability; not strictly needed\nAC_CHECK_FUNCS([mremap],[havemremapfcn=yes],[havemmapfcn=no])\n\n# Check for MAP_ANONYMOUS\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n[#include <sys/mman.h>],\n[[int x = MAP_ANONYMOUS;]])],\n                   [havemapanon=yes],\n                   [havemapanon=no])\nAC_MSG_CHECKING([whether MAP_ANONYMOUS is defined])\nAC_MSG_RESULT([${havemapanon}])\nif test \"x$havemapanon\" != xyes ; then\n  have_mmap=no\nfi\n\nif test \"x$have_mmap\" != xyes ; then\n  echo \"mmap functionality is not available: disabling mmap\"\n  enable_mmap=no\nfi\n\nif test \"x$enable_mmap\" = xyes; then\n    AC_DEFINE([USE_MMAP], [1], [if true, use mmap for in-memory files])\nfi\n\n# Does the user want to allow reading of remote data via range headers?\nAC_MSG_CHECKING([whether byte range support is enabled])\nAC_ARG_ENABLE([byterange],\n              [AS_HELP_STRING([--enable-byterange],\n                              [allow byte-range I/O])])\ntest \"x$enable_byterange\" = xyes || enable_byterange=no\nAC_MSG_RESULT($enable_byterange)\n# Need curl for byte ranges\nif test \"x$found_curl\" = xno && test \"x$enable_byterange\" = xyes ; then\n  AC_MSG_ERROR([curl required for byte range support. Install curl or build without --enable-byterange.])\n  enable_byterange=no\nfi\n\nif test \"x$enable_byterange\" = xyes; then\n    AC_DEFINE([ENABLE_BYTERANGE], [1], [if true, support byte-range read of remote datasets.])\nfi\n\nAC_FUNC_ALLOCA\nAC_CHECK_DECLS([isnan, isinf, isfinite],,,[#include <math.h>])\nAC_STRUCT_ST_BLKSIZE\nUD_CHECK_IEEE\nAC_CHECK_TYPES([size_t, ssize_t, schar, uchar, longlong, ushort, uint, int64, uint64, size64_t, ssize64_t, _off64_t, uint64_t])\nAC_TYPE_OFF_T\nAC_TYPE_UINTPTR_T\nAC_C_CHAR_UNSIGNED\nAC_C_BIGENDIAN\n\n# Figure out platforms of special interest\ncase \"`uname`\" in\n  CYGWIN*) ISCYGWIN=yes;;\n  WIN*) ISMSVC=yes;;\nesac\nAM_CONDITIONAL(ISCYGWIN, [test \"x$ISCYGWIN\" = xyes])\nAM_CONDITIONAL(ISMSVC, [test \"x$ISMSVC\" = xyes])\n\n###\n# Crude hack to work around an issue\n# in Cygwin.\n###\nSLEEPCMD=\"\"\nif test \"x$ISCYGWIN\" = \"xyes\"; then\n   SLEEPCMD=\"sleep 5\"\n   AC_MSG_NOTICE([Pausing between sizeof() checks to mitigate a Cygwin issue.])\nfi\n\n$SLEEPCMD\nAC_CHECK_SIZEOF(short)\n$SLEEPCMD\nAC_CHECK_SIZEOF(int)\n$SLEEPCMD\nAC_CHECK_SIZEOF(long)\n$SLEEPCMD\nAC_CHECK_SIZEOF(long long)\n$SLEEPCMD\nAC_CHECK_SIZEOF(float)\n$SLEEPCMD\nAC_CHECK_SIZEOF(double)\n$SLEEPCMD\nAC_CHECK_SIZEOF(off_t)\n$SLEEPCMD\nAC_CHECK_SIZEOF(size_t)\n$SLEEPCMD\nAC_CHECK_SIZEOF(unsigned long long)\n\n\nif test \"$ac_cv_sizeof_size_t\" -lt \"8\" ; then\n   if test \"x${enable_cdf5}\" = xyes ; then\n      dnl unable to support CDF5, but --enable-cdf5 is explicitly set\n      AC_MSG_ERROR([Unable to support CDF5 feature because size_t is less than 8 bytes])\n   fi\n   enable_cdf5=no\nelse\n   if test \"x${enable_cdf5}\" != xno ; then\n      enable_cdf5=yes\n   fi\nfi\n\nif test \"x${enable_cdf5}\" = xyes; then\n   AC_DEFINE([ENABLE_CDF5], [1], [if true, enable CDF5 Support])\nfi\nAM_CONDITIONAL(ENABLE_CDF5, [test x$enable_cdf5 = xyes ])\n\n$SLEEPCMD\nif test \"$ac_cv_type_uchar\" = yes ; then\n   AC_CHECK_SIZEOF(uchar)\nelse\n   AC_CHECK_SIZEOF(unsigned char)\nfi\n\n$SLEEPCMD\nif test \"$ac_cv_type_ushort\" = yes ; then\n   AC_CHECK_SIZEOF(ushort)\nelse\n   AC_CHECK_SIZEOF(unsigned short int)\nfi\n\n$SLEEPCMD\nif test \"$ac_cv_type_uint\" = yes ; then\n   AC_CHECK_SIZEOF(uint)\nelse\n   AC_CHECK_SIZEOF(unsigned int)\nfi\n$SLEEPCMD\nif test \"$ac_cv_type_ushort\" = yes ; then\n   AC_CHECK_SIZEOF(ushort)\nelse\n   AC_CHECK_SIZEOF(unsigned short int)\nfi\n$SLEEPCMD\nif test \"$ac_cv_type_uint\" = yes ; then\n   AC_CHECK_SIZEOF(uint)\nelse\n   AC_CHECK_SIZEOF(unsigned int)\nfi\n$SLEEPCMD\nAC_CHECK_SIZEOF(ssize_t)\n$SLEEPCMD\nAC_CHECK_SIZEOF([void*])\n\nif test \"x$enable_hdf5\" = xyes || test \"x$enable_dap\" = xyes; then\n   AC_SEARCH_LIBS([deflate], [zlibwapi zlibstat zlib zlib1 z], [], [\n     AC_MSG_ERROR([Can't find or link to the z library. Turn off netCDF-4 and \\\n     DAP clients with --disable-hdf5 --disable-dap, or see config.log for errors.])])\n   AC_SEARCH_LIBS([dlopen], [dl dld], [], [])\nfi\n\n# We need the math library\nAC_CHECK_LIB([m], [floor], [],\n[AC_MSG_ERROR([Can't find or link to the math library.])])\n\nif test \"x$enable_netcdf_4\" = xyes; then\n   AC_DEFINE([USE_NETCDF4], [1], [if true, build netCDF-4])\nfi\n\n# Set defaults\nhdf5_parallel=no\nhdf5_supports_par_filters=no\nenable_szlib=no\nhas_ross3=no\n\nif test \"x$enable_hdf5\" = xyes; then\n\n   AC_DEFINE([USE_HDF5], [1], [if true, use HDF5])\n   AC_DEFINE([H5_USE_16_API], [1], [use HDF5 1.6 API])\n\n   # Check for the main hdf5 and hdf5_hl library.\n\n   AC_SEARCH_LIBS([H5Fflush], [hdf5dll hdf5], [],\n   [AC_MSG_ERROR([Can't find or link to the hdf5 library. Use --disable-hdf5, or see config.log for errors.])])\n   AC_SEARCH_LIBS([H5DSis_scale], [hdf5_hldll hdf5_hl], [],\n   [AC_MSG_ERROR([Can't find or link to the hdf5 high-level. Use --disable-hdf5, or see config.log for errors.])])\n\n   AC_CHECK_HEADERS([hdf5.h], [], [AC_MSG_ERROR([Compiling a test with HDF5 failed.  Either hdf5.h cannot be found, or config.log should be checked for other reason.])])\n\n   # Was HDF5 built with zlib as netCDF requires?\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([#include \"H5public.h\"],\n   [[#if !H5_HAVE_ZLIB_H\n   # error\n   #endif]\n   ])], [], [AC_MSG_ERROR([HDF5 was not built with zlib, which is required. Rebuild HDF5 with zlib.])])\n\n   # H5Pset_fapl_mpiposix and H5Pget_fapl_mpiposix have been removed since HDF5 1.8.12.\n   # Use H5Pset_fapl_mpio and H5Pget_fapl_mpio, instead.\n   AC_CHECK_FUNCS([H5Pget_fapl_mpio H5Pset_deflate H5Z_SZIP H5free_memory H5resize_memory H5allocate_memory H5Pset_libver_bounds H5Pset_all_coll_metadata_ops])\n\n   # Check to see if HDF5 library has collective metadata APIs, (HDF5 >= 1.10.0)\n   if test \"x$ac_cv_func_H5Pset_all_coll_metadata_ops\" = xyes; then\n      AC_DEFINE([HDF5_HAS_COLL_METADATA_OPS], [1], [if true, use collective metadata ops in parallel netCDF-4])\n   fi\n\n   # If parallel is available in hdf5, enable it in the C code. Also add some stuff to netcdf.h.\n   if test \"x$ac_cv_func_H5Pget_fapl_mpio\" = xyes -o \"x$ac_cv_func_H5Pget_fapl_mpiposix\" = xyes; then\n      hdf5_parallel=yes\n   fi\n   AC_MSG_CHECKING([whether parallel io is enabled in hdf5])\n   AC_MSG_RESULT([$hdf5_parallel])\n\n   # See if H5Dread_chunk is available\n   AC_SEARCH_LIBS([H5Dread_chunk],[hdf5_hldll hdf5_hl], [has_readchunks=yes], [has_readdhunks=no])\n\n   # See if hdf5 library supports Read-Only S3 (byte-range) driver\n   AC_SEARCH_LIBS([H5Pset_fapl_ros3],[hdf5_hldll hdf5_hl], [has_ros3=yes], [has_ros3=no])\n   if test \"x$has_ros3\" = xyes && test \"x$enable_byterange\" = xyes; then\n    AC_DEFINE([ENABLE_HDF5_ROS3], [1], [if true, support byte-range using hdf5 virtual file driver.])\n   fi\n\n   # Check to see if HDF5 library is 1.10.3 or greater. If so, allows\n   # parallel I/O with filters. This allows zlib/szip compression to\n   # be used with parallel I/O, which is very helpful to HPC users.\n   if test \"x$has_readchunks\" = xyes; then\n      AC_DEFINE([HDF5_SUPPORTS_PAR_FILTERS], [1], [if true, HDF5 is at least version 1.10.3 and allows parallel I/O with zip])\n      hdf5_supports_par_filters=yes\n   fi\n   AC_MSG_CHECKING([whether HDF5 allows parallel filters])\n   AC_MSG_RESULT([$has_readchunks])\n\n   # Check to see if user asked for parallel build, but HDF5 does not support it.\n   if test \"x$hdf5_parallel\" = \"xno\"; then\n      if test \"x$enable_parallel_tests\" = \"xyes\"; then\n         AC_MSG_ERROR([Parallel tests requested, but no parallel HDF5 installation detected.])\n      fi\n   fi\n\n   # Check whether HDF5 was built with the SZLIB library. If so we\n   # must be able to link to szip library.\n   AC_MSG_CHECKING([whether szlib was used when building HDF5])\n   if test \"x$ac_cv_func_H5Z_SZIP\" = xyes; then\n      enable_szlib=yes\n      AC_DEFINE([USE_SZIP], [1], [if true, compile in szip compression in netCDF-4 variables])\n   fi\n   AC_MSG_RESULT([$enable_szlib])\n\n   # Check to see if HDF5 library is 1.10.6 or greater.\n   # Used to control path name conversion\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <H5public.h>]], [[\n#if (H5_VERS_MAJOR*10000 + H5_VERS_MINOR*100 + H5_VERS_RELEASE < 11006)\n      choke me\n#endif\n  ]])], [hdf5_version_1106=yes], [hdf5_version_1106=no])\n  AC_MSG_CHECKING([whether HDF5 library is version 1.10.6 or later])\n  AC_MSG_RESULT([$hdf5_version_1106])\n  if test \"x$hdf5_version_1106\" = xyes; then\n      AC_DEFINE([HDF5_UTF8_PATHS], [1], [if true, HDF5 paths can be utf-8])\n   fi\nfi\n\nAM_CONDITIONAL(ENABLE_NCDUMPCHUNKS, [test \"x$has_readchunks\" = xyes ])\n\n# If the user wants hdf4 built in, check it out.\nif test \"x$enable_hdf4\" = xyes; then\n   AC_CHECK_LIB([jpeg], [jpeg_CreateCompress], [],\n                [AC_MSG_ERROR([Jpeg library required for --enable-hdf4 builds.])])\n   AC_CHECK_HEADERS([mfhdf.h], [], [nc_mfhdf_h_missing=yes])\n   if test \"x$nc_mfhdf_h_missing\" = xyes; then\n      AC_MSG_ERROR([Cannot find mfhdf.h, yet --enable-hdf4 was used.])\n   fi\n   AC_CHECK_LIB([df], [Hclose], [], [AC_MSG_ERROR([Can't find or link to the hdf4 df library. See config.log for errors.])])\n   AC_CHECK_LIB([mfhdf], [NC_arrayfill], [AC_MSG_ERROR([HDF4 library must be built with --disable-netcdf.])], [])\n   AC_CHECK_LIB([mfhdf], [SDcreate], [], [AC_MSG_ERROR([Can't find or link to the hdf4 mfhdf library. See config.log for errors.])])\n\n   AC_CHECK_LIB([jpeg], [jpeg_set_quality], [], [AC_MSG_ERROR([Can't find or link to the jpeg library (required by hdf4). See config.log for errors.])])\n   AC_DEFINE([USE_HDF4], [1], [if true, use HDF4 too])\nfi\n\n# There are several cases for parallelism:\n# 1. PnetCDF enabled => we want to parallelism for CDF-1,CDF-2,and CDF-5\n# 2. hdf5 has mpio enabled\n#    a. do not want to use it for netcdf4\n#    b. do want to use it for netcdf4\n\n# Should we provide parallel io for netcdf-4?\nif test \"x$enable_hdf5\" = xyes ; then\n   AC_ARG_ENABLE([parallel4],\n\t[AS_HELP_STRING([--disable-parallel4],\n                        [disable parallel I/O for netcdf-4, even if it's enabled in libhdf5])],\n\t\t\t[user_set_parallel4=${enableval}]2)\n   test \"x$enable_parallel4\" = xno || enable_parallel4=yes\n\n   # If user wants parallel IO for netCDF-4, make sure HDF5 can provide it.\n   if test \"x$enable_parallel4\" = xyes; then\n      if test \"x$hdf5_parallel\" = xno; then\n      \t # If user specifically asked for parallel4, then error out.\n\t if test \"x$user_set_parallel4\" = xyes; then\n\t    AC_MSG_ERROR([Paralllel IO in netCDF-4 requested, but HDF5 does not provide parallel IO.])\n\t fi\n         # User didn't specify, so disable parallel4\n\t enable_parallel4=no\n\t AC_MSG_WARN([Parallel io disabled for netcdf-4 because hdf5 does not support])\n      fi\n   fi\nelse\n   enable_parallel4=no\nfi\nAC_MSG_CHECKING([whether parallel I/O is enabled for netcdf-4])\nAC_MSG_RESULT($enable_parallel4)\n\n# We have already tested for parallel io in netcdf4\n# parallel I/O for CDF-1, 2, and 5 files can also be done through PnetCDF\n# See if the PnetCDF lib is available and of the\n# right version (1.6.0 or later)\nif test \"x$enable_pnetcdf\" = xyes; then\n  pnetcdf_conflict=no\n  AC_CHECK_LIB([pnetcdf], [ncmpi_create], [],[pnetcdf_conflict=yes])\n\n  if test \"x$pnetcdf_conflict\" = xyes ; then\n     AC_MSG_ERROR([Cannot link to PnetCDF library.])\n  fi\n\n  # Pnetcdf did not support utf-8 until 1.6.0\n\n  AC_MSG_CHECKING([Is libpnetcdf version 1.6.0 or later?])\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <pnetcdf.h>]], [[\n#if (PNETCDF_VERSION_MAJOR*1000 + PNETCDF_VERSION_MINOR < 1006)\n      choke me\n#endif\n  ]])], [pnetcdf16=yes], [pnetcdf16=no])\n  AC_MSG_RESULT([$pnetcdf16])\n  if test x$pnetcdf16 = xno; then\n    AC_MSG_ERROR([--enable-pnetcdf requires version 1.6.0 or later])\n  fi\nfi\n\n# Now, set enable_parallel if either enable_pnetcdf or enable_parallel4 is set\nif test \"x$enable_pnetcdf\" = xyes -o \"x$enable_parallel4\" = xyes; then\n  enable_parallel=yes\nelse\n  enable_parallel=no\nfi\nAM_CONDITIONAL(ENABLE_PARALLEL, [test x$enable_parallel = xyes ])\n\nif test \"x$hdf5_parallel\" = xyes; then\n  # Provide more precise parallel control\n  AC_DEFINE([HDF5_PARALLEL], [1], [if true, hdf5 has parallelism enabled])\nfi\n\n# Set config flags\nif test \"x$enable_parallel4\" = xyes; then\n  # Provide more precise parallel control\n  AC_DEFINE([USE_PARALLEL4], [1], [if true, parallel netcdf-4 is in use])\nfi\n\nif test \"x$enable_pnetcdf\" = xyes; then\n  AC_DEFINE([USE_PNETCDF], [1], [if true, PnetCDF is used])\nfi\n\n# If enable_parallel is in use, enable it in the C code. Also add some stuff to netcdf.h.\nif test \"x$enable_parallel\" = xyes; then\n  AC_DEFINE([USE_PARALLEL], [1], [if true, PnetCDF or parallel netcdf-4 is in use])\nfi\n\nAC_ARG_ENABLE([erange_fill],\n   [AS_HELP_STRING([--enable-erange-fill],\n                   [Enable use of fill value when out-of-range type\n                    conversion causes NC_ERANGE error. @<:@default: disabled@:>@])],\n   [enable_erange_fill=${enableval}], [enable_erange_fill=auto]\n)\n\n# check PnetCDF's settings on enable_erange_fill and relax_coord_bound\nif test \"x$enable_pnetcdf\" = xyes; then\n   UD_CHECK_HEADER_PATH([pnetcdf.h])\n\n   AC_MSG_CHECKING([if erange-fill is enabled in PnetCDF])\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <pnetcdf.h>]], [[\n#if !defined(PNETCDF_ERANGE_FILL) || PNETCDF_ERANGE_FILL == 0\n      choke me\n#endif]])], [enable_erange_fill_pnetcdf=yes], [enable_erange_fill_pnetcdf=no])\n   AC_MSG_RESULT([$enable_erange_fill_pnetcdf])\n   if test \"x$enable_erange_fill\" = xauto ; then\n      enable_erange_fill=$enable_erange_fill_pnetcdf\n   elif test \"$enable_erange_fill\" != \"$enable_erange_fill_pnetcdf\"; then\n      if test \"$enable_erange_fill\" = yes; then\n         AC_MSG_ERROR([Enabling erange-fill conflicts with PnetCDF setting])\n      else\n         AC_MSG_ERROR([Disabling erange-fill conflicts with PnetCDF setting])\n      fi\n   fi\n\n   AC_MSG_CHECKING([if relax-coord-bound is enabled in PnetCDF])\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <pnetcdf.h>]], [[\n#if !defined(PNETCDF_RELAX_COORD_BOUND) || PNETCDF_RELAX_COORD_BOUND == 0\n      choke me\n#endif]])], [relax_coord_bound_pnetcdf=yes], [relax_coord_bound_pnetcdf=no])\n   AC_MSG_RESULT([$relax_coord_bound_pnetcdf])\n   if test x\"$relax_coord_bound_pnetcdf\" != xyes; then\n      AC_MSG_ERROR([PNetCDF must be built with relax-coord-bound])\n   fi\nelse\n   if test \"x$enable_erange_fill\" = xauto; then\n      # if --enable-erange-fill is not used, default setting is no\n      enable_erange_fill=no\n   fi\nfi\n\nif test \"x$enable_erange_fill\" = xyes ; then\n   if test \"x$M4FLAGS\" = x ; then\n      M4FLAGS=\"-DERANGE_FILL\"\n   else\n      M4FLAGS=\"$M4FLAGS -DERANGE_FILL\"\n   fi\n   AC_DEFINE([ERANGE_FILL], [1], [if true, use _FillValue for NC_ERANGE data elements])\nfi\nAC_SUBST(M4FLAGS)\n\n# Check for downloading/building fortran via postinstall script.\nif test \"x$enable_remote_fortran_bootstrap\" = xyes; then\n   AC_DEFINE([BUILD_FORTRAN], 1, [If true, will attempt to download and build netcdf-fortran.])\nfi\n\n# No logging for netcdf-3.\nif test \"x$enable_netcdf_4\" = xno; then\n   enable_logging=no\nfi\nif test \"x$enable_logging\" = xyes; then\n   AC_DEFINE([LOGGING], 1, [If true, turn on logging.])\nfi\n\n# Automake conditionals need to be called, whether the answer is yes\n# or no.\nAM_CONDITIONAL(BUILD_PARALLEL, [test x$enable_parallel = xyes])\nAM_CONDITIONAL(TEST_PARALLEL4, [test \"x$enable_parallel4\" = xyes -a \"x$enable_parallel_tests\" = xyes])\nAM_CONDITIONAL(BUILD_DAP, [test \"x$enable_dap\" = xyes])\nAM_CONDITIONAL(USE_DAP, [test \"x$enable_dap\" = xyes]) # Alias\n# Provide protocol specific flags\nAM_CONDITIONAL(ENABLE_DAP, [test \"x$enable_dap\" = xyes])\nAM_CONDITIONAL(ENABLE_DAP4, [test \"x$enable_dap4\" = xyes])\nAM_CONDITIONAL(USE_STRICT_NULL_BYTE_HEADER_PADDING, [test x$enable_strict_null_byte_header_padding = xyes])\nAM_CONDITIONAL(ENABLE_CDF5, [test \"x$enable_cdf5\" = xyes])\nAM_CONDITIONAL(ENABLE_DAP_REMOTE_TESTS, [test \"x$enable_dap_remote_tests\" = xyes])\nAM_CONDITIONAL(ENABLE_DAP_AUTH_TESTS, [test \"x$enable_dap_auth_tests\" = xyes])\nAM_CONDITIONAL(ENABLE_DAP_LONG_TESTS, [test \"x$enable_dap_long_tests\" = xyes])\nAM_CONDITIONAL(USE_SZIP, [test \"x$ac_cv_func_H5Z_SZIP\" = xyes])\nAM_CONDITIONAL(USE_PNETCDF_DIR, [test ! \"x$PNETCDFDIR\" = x])\nAM_CONDITIONAL(USE_LOGGING, [test \"x$enable_logging\" = xyes])\nAM_CONDITIONAL(CROSS_COMPILING, [test \"x$cross_compiling\" = xyes])\nAM_CONDITIONAL(USE_NETCDF4, [test x$enable_netcdf_4 = xyes])\nAM_CONDITIONAL(USE_HDF5, [test x$enable_hdf5 = xyes])\nAM_CONDITIONAL(USE_HDF4, [test x$enable_hdf4 = xyes])\nAM_CONDITIONAL(USE_HDF4_FILE_TESTS, [test x$enable_hdf4_file_tests = xyes])\nAM_CONDITIONAL(USE_RENAMEV3, [test x$enable_netcdf_4 = xyes -o x$enable_dap = xyes])\nAM_CONDITIONAL(BUILD_FORTRAN, [test x$enable_remote_fortran_bootstrap = xyes])\nAM_CONDITIONAL(USE_PNETCDF, [test x$enable_pnetcdf = xyes])\nAM_CONDITIONAL(USE_DISPATCH, [test x$enable_dispatch = xyes])\nAM_CONDITIONAL(BUILD_MMAP, [test x$enable_mmap = xyes])\nAM_CONDITIONAL(BUILD_DOCS, [test x$enable_doxygen = xyes])\nAM_CONDITIONAL(SHOW_DOXYGEN_TAG_LIST, [test x$enable_doxygen_tasks = xyes])\nAM_CONDITIONAL(ENABLE_METADATA_PERF, [test x$enable_metadata_perf = xyes])\nAM_CONDITIONAL(ENABLE_BYTERANGE, [test \"x$enable_byterange\" = xyes])\nAM_CONDITIONAL(RELAX_COORD_BOUND, [test \"xyes\" = xyes])\nAM_CONDITIONAL(HAS_PAR_FILTERS, [test x$hdf5_supports_par_filters = xyes ])\nAM_CONDITIONAL(ENABLE_NCZARR, [test \"x$enable_nczarr\" = xyes])\nAM_CONDITIONAL(HAVE_AWS, [test \"x$have_aws\" = xyes])\nAM_CONDITIONAL(HAS_MULTIFILTERS, [test \"x$has_multifilters\" = xyes])\n\n# If the machine doesn't have a long long, and we want netCDF-4, then\n# we've got problems!\nif test \"x$enable_netcdf_4\" = xyes; then\n   AC_TYPE_LONG_LONG_INT\n   AC_TYPE_UNSIGNED_LONG_LONG_INT\ndnl    if test ! \"x$ac_cv_type_long_long_int\" = xyes -o ! \"x$ac_cv_type_unsigned_long_long_int\" = xyes; then\ndnl       AC_MSG_ERROR([This platform does not support long long types. These are required for netCDF-4.])\ndnl    fi\nfi\n\n# Create the file name for a \"make ftpbin\" which is used to generate a\n# binary distribution. For each release we generate binary releases on\n# the thousands of machines in Unidata's vast underground complex at\n# an undisclosed location in the Rocky Mountains. The binary\n# distributions, along with the 25-foot thick cement slabs and the\n# giant springs, will help distribute netCDF even after a catastrophic\n# meteor strike.\nAC_MSG_CHECKING([what to call the output of the ftpbin target])\nBINFILE_NAME=binary-netcdf-$PACKAGE_VERSION\ntest \"x$enable_netcdf_4\" = xno && BINFILE_NAME=${BINFILE_NAME}_nc3\nBINFILE_NAME=${BINFILE_NAME}.tar\nAC_SUBST(BINFILE_NAME)\nAC_MSG_RESULT([$BINFILE_NAME $FC $CXX])\n\n##\n# Bugfix for Cygwin.\n##\nAC_MSG_CHECKING([if libtool needs -no-undefined flag to build shared libraries])\nNOUNDEFINED=\"\"\ncase \"`uname`\" in\n     CYGWIN*|MINGW*|AIX*)\n     ## Add in the -no-undefined flag to LDFLAGS for libtool.\n     AC_MSG_RESULT([yes])\n     NOUNDEFINED=\" -no-undefined\"\n     ;;\n     *)\n     ## Don't add anything\n     AC_MSG_RESULT([no])\n     ;;\nesac\n\nAC_MSG_CHECKING([value of LIBS])\nAC_MSG_RESULT([$LIBS])\n\n# Flags for nc-config script; by design $prefix, $includir, $libdir,\n# etc.  are left as shell variables in the script so as to facilitate\n# relocation\nif test \"x$with_netcdf_c_lib\" = x ; then\n   NC_LIBS=\"-lnetcdf\"\nelse\n   NC_LIBS=\"$with_netcdf_c_lib\"\nfi\nif test \"x$enable_shared\" != xyes; then\n   NC_LIBS=\"$LDFLAGS $NC_LIBS $LIBS\"\nfi\n\ncase \"x$target_os\" in\nxsolaris*)\n  NEWNCLIBS=\"\"\n  for x in $NC_LIBS ; do\n    case \"$x\" in\n    -L*) r=`echo \"$x\" | sed -e 's|^-L|-R|'`\n\t NEWNCLIBS=\"$NEWNCLIBS $x $r\"\n\t ;;\n    *)\t NEWNCLIBS=\"$NEWNCLIBS $x\" ;;\n    esac\n  done\n  NC_LIBS=\"$NEWNCLIBS\"\n  ;;\n*);;\nesac\n\nNC_FLIBS=\"-lnetcdff $NC_LIBS\"\n\n# Control filter test/example\nAC_MSG_CHECKING([whether filter testing should be run])\nAC_ARG_ENABLE([filter-testing],\n              [AS_HELP_STRING([--disable-filter-testing],\n                              [Do not run filter test and example; requires shared libraries and netCDF-4])])\ntest \"x$enable_filter_testing\" = xno || enable_filter_testing=yes\nAC_MSG_RESULT($enable_filter_testing)\n\n# Client side filter registration is permanently disabled\nenable_clientside_filters=no\n\nif test \"x$enable_hdf5\" = xno ; then\nAC_MSG_WARN([HDF5 disabled => --disable-filter-testing && --disable-client-filters])\nenable_filter_testing=no\nfi\n\nif test \"x$enable_shared\" = xno ; then\nAC_MSG_WARN([Shared libraries are disabled => --disable-filter-testing])\nenable_filter_testing=no\nfi\n\nAM_CONDITIONAL(ENABLE_CLIENTSIDE_FILTERS, [test x$enable_clientside_filters = xyes])\nAM_CONDITIONAL(ENABLE_FILTER_TESTING, [test x$enable_filter_testing = xyes])\n\n\nAC_SUBST(NC_LIBS,[$NC_LIBS])\nAC_SUBST(HAS_DAP,[$enable_dap])\nAC_SUBST(HAS_DAP2,[$enable_dap])\nAC_SUBST(HAS_DAP4,[$enable_dap4])\nAC_SUBST(HAS_NC2,[$nc_build_v2])\nAC_SUBST(HAS_NC4,[$enable_netcdf_4])\nAC_SUBST(HAS_CDF5,[$enable_cdf5])\nAC_SUBST(HAS_HDF4,[$enable_hdf4])\nAC_SUBST(HAS_HDF5,[$enable_hdf5])\nAC_SUBST(HAS_PNETCDF,[$enable_pnetcdf])\nAC_SUBST(HAS_LOGGING, [$enable_logging])\nAC_SUBST(HAS_SZLIB,[$enable_szlib])\nAC_SUBST(HAS_SZLIB_WRITE, [$enable_szlib])\nAC_SUBST(HAS_PARALLEL,[$enable_parallel])\nAC_SUBST(HAS_PARALLEL4,[$enable_parallel4])\nAC_SUBST(HAS_DISKLESS,[yes])\nAC_SUBST(HAS_MMAP,[$enable_mmap])\nAC_SUBST(HAS_JNA,[$enable_jna])\nAC_SUBST(HAS_ERANGE_FILL,[$enable_erange_fill])\nAC_SUBST(HAS_BYTERANGE,[$enable_byterange])\nAC_SUBST(RELAX_COORD_BOUND,[yes])\nAC_SUBST([HAS_PAR_FILTERS], [$hdf5_supports_par_filters])\nAC_SUBST(HAS_NCZARR,[$enable_nczarr])\nAC_SUBST(DO_NCZARR_S3_TESTS,[$enable_nczarr_s3_tests])\nAC_SUBST(HAS_MULTIFILTERS,[$has_multifilters])\nAC_SUBST(DO_NCZARR_ZIP_TESTS,[$enable_nczarr_zip])\n\n# Include some specifics for netcdf on windows.\n#AH_VERBATIM([_WIN32_STRICMP],\nAH_BOTTOM(\n[/* Define strcasecmp, strncasecmp, snprintf on Win32 systems. */\n#ifdef _WIN32\n\t#define strcasecmp _stricmp\n\t#define strncasecmp _strnicmp\n\t#define snprintf _snprintf\n#endif])\n\n# Access netcdf specific version of config.h\nAH_BOTTOM([#include \"ncconfigure.h\"])\n\n##################################################\n# Uncomment this to keep a copy of autoconf defines at this point, for\n# debugging purposes.\n# cp confdefs.h my_config.h\n\n#####\n# Create output variables from various\n# shell variables, for use in generating\n# libnetcdf.settings.\n#####\nAC_SUBST([enable_shared])\nAC_SUBST([enable_static])\nAC_SUBST([CFLAGS])\nAC_SUBST([CPPFLAGS])\nAC_SUBST([LDFLAGS])\nAC_SUBST([AM_CFLAGS])\nAC_SUBST([AM_CPPFLAGS])\nAC_SUBST([AM_LDFLAGS])\nAC_SUBST([NOUNDEFINED])\n\n# Args:\n# 1. netcdf_meta.h variable\n# 2. conditional variable that is yes or no.\n# 3. default condition\n#\n# example: AX_SET_META([NC_HAS_NC2],[$nc_build_v2],[]) # Because it checks for no.\n#          AX_SET_META([NC_HAS_HDF4],[$enable_hdf4],[yes])\nAC_DEFUN([AX_SET_META],[\n  if [ test \"x$2\" = x$3 ]; then\n     AC_SUBST([$1]) $1=1\n  else\n     AC_SUBST([$1]) $1=0\n  fi\n])\n\n#####\n# Define values used in include/netcdf_meta.h\n#####\nAC_SUBST([NC_VERSION]) NC_VERSION=$VERSION\nAX_SET_META([NC_HAS_NC2],[$nc_build_v2],[yes])\nAX_SET_META([NC_HAS_NC4],[$enable_netcdf_4],[yes])\nAX_SET_META([NC_HAS_HDF4],[$enable_hdf4],[yes])\nAX_SET_META([NC_HAS_HDF5],[$enable_hdf5],[yes])\nAX_SET_META([NC_HAS_SZIP],[$ac_cv_func_H5Z_SZIP],[yes])\nAX_SET_META([NC_HAS_DAP2],[$enable_dap],[yes])\nAX_SET_META([NC_HAS_DAP4],[$enable_dap4],[yes])\nAX_SET_META([NC_HAS_DISKLESS],[yes],[yes])\nAX_SET_META([NC_HAS_MMAP],[$enable_mmap],[yes])\nAX_SET_META([NC_HAS_JNA],[$enable_jna],[yes])\nAX_SET_META([NC_HAS_PNETCDF],[$enable_pnetcdf],[yes])\nAX_SET_META([NC_HAS_PARALLEL],[$enable_parallel],[yes])\nAX_SET_META([NC_HAS_PARALLEL4],[$enable_parallel4],[yes])\nAX_SET_META([NC_HAS_CDF5],[$enable_cdf5],[yes])\nAX_SET_META([NC_HAS_ERANGE_FILL], [$enable_erange_fill],[yes])\nAX_SET_META([NC_HAS_PAR_FILTERS], [$hdf5_supports_par_filters],[yes])\nAX_SET_META([NC_HAS_BYTERANGE],[$enable_byterange],[yes])\nAX_SET_META([NC_HAS_NCZARR],[$enable_nczarr],[yes])\nAX_SET_META([NC_HAS_MULTIFILTERS],[$has_multifilters],[yes])\n\n# This is the version of the dispatch table. If the dispatch table is\n# changed, this should be incremented, so that user-defined format\n# applications like PIO can determine whether they have an appropriate\n# dispatch table to submit. If this is changed, make sure the value in\n# CMakeLists.txt also changes to match.\nAC_SUBST([NC_DISPATCH_VERSION], [2])\n\n#####\n# End netcdf_meta.h definitions.\n#####\n\n# This would be true for a visual studio build.\nAC_SUBST([ISMSVC], [${ISMSVC}])\n# This would be true for a cmake build.\nAC_SUBST([ISCMAKE], [])\n\n# Provide  conditional to temporarily suppress tests and such\nAM_CONDITIONAL([AX_IGNORE], [test xno = xyes])\n\nAC_MSG_NOTICE([generating header files and makefiles])\nAC_CONFIG_FILES(test_common.sh:test_common.in)\nAC_CONFIG_FILES(nczarr_test/timer_utils.h:unit_test/timer_utils.h)\nAC_CONFIG_FILES(nczarr_test/timer_utils.c:unit_test/timer_utils.c)\nAC_CONFIG_FILES(nc_test4/findplugin.sh:nc_test4/findplugin.in)\nAC_CONFIG_FILES(examples/C/findplugin.sh:nc_test4/findplugin.in)\nAC_CONFIG_FILES(ncdap_test/findtestserver.c:ncdap_test/findtestserver.c.in)\nAC_CONFIG_FILES(dap4_test/findtestserver4.c:ncdap_test/findtestserver.c.in)\nAC_CONFIG_FILES(dap4_test/pingurl4.c:ncdap_test/pingurl.c)\nAC_CONFIG_FILES([h5_test/run_par_tests.sh], [chmod ugo+x h5_test/run_par_tests.sh])\nAC_CONFIG_FILES([nc_test4/run_par_test.sh], [chmod ugo+x nc_test4/run_par_test.sh])\nAC_CONFIG_FILES([nc_perf/run_par_bm_test.sh], [chmod ugo+x nc_perf/run_par_bm_test.sh])\nAC_CONFIG_FILES([nc_perf/run_gfs_test.sh], [chmod ugo+x nc_perf/run_gfs_test.sh])\nAC_CONFIG_FILES([examples/C/run_par_test.sh], [chmod ugo+x examples/C/run_par_test.sh])\nAC_CONFIG_FILES([nc-config], [chmod 755 nc-config])\nAC_CONFIG_FILES([Makefile\n                 netcdf.pc\n                 libnetcdf.settings\n                 postinstall.sh\n                 include/netcdf_meta.h\n                 include/Makefile\n                 h5_test/Makefile\n                 hdf4_test/Makefile\n                 libsrc/Makefile\n                 libsrc4/Makefile\n                 libhdf5/Makefile\n                 libsrcp/Makefile\n                 ncdump/Makefile\n                 ncgen3/Makefile\n                 ncgen/Makefile\n                 examples/Makefile\n                 examples/C/Makefile\n                 examples/CDL/Makefile\n                 oc2/Makefile\n                 libdap2/Makefile\n                 libdap4/Makefile\n                 libhdf4/Makefile\n                 libnczarr/Makefile\n                 libdispatch/Makefile\n                 liblib/Makefile\n                 ncdump/cdl/Makefile\n                 ncdump/expected/Makefile\n                 docs/Makefile\n                 docs/images/Makefile\n                 unit_test/Makefile\n                 nctest/Makefile\n                 nc_test4/Makefile\n                 nc_perf/Makefile\n                 nc_test/Makefile\n                 ncdap_test/Makefile\n                 ncdap_test/testdata3/Makefile\n                 ncdap_test/expected3/Makefile\n                 ncdap_test/expectremote3/Makefile\n                 dap4_test/Makefile\n                 plugins/Makefile\n\t\t nczarr_test/Makefile\n                 ])\nAC_OUTPUT()\n\ncat libnetcdf.settings\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/libsrc/test_nc.sav",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/include/ncexhash.h",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nc_test/nc_test.html",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nc_test/tst_utf8_validate.c",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nc_test/f03tst_open_mem.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nc_test/bad_cdf5_begin.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/hdf4_test/ref_contiguous.hdf4",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/hdf4_test/ref_chunked.hdf4",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/.git/objects/pack/pack-237c4660d1b7f81dd878155ca86f94a265557864.idx",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/.git/objects/pack/pack-237c4660d1b7f81dd878155ca86f94a265557864.pack",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdump/ref_tst_compounds3.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdump/ref_tst_compounds2.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdump/ref_test_360_day_1900.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdump/ref_nc_test_netcdf4_4_0.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdump/ref_test_366_day_1900.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdump/ref_provenance_v1.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdump/ref_tst_irish_rover.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdump/ref_test_corrupt_magic.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdump/ref_nc_test_netcdf4.cdl",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdump/ref_no_ncproperty.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdump/ref_test_365_day_1900.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdump/ref_null_byte_padding_test.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdump/ref_tst_compounds4.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdump/ref_nccopy3_subset.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/h5_test/ref_tst_h_compounds2.h5",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/h5_test/ref_tst_compounds.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/h5_test/ref_tst_h_compounds.h5",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_struct_array.syn.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_vlen5.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_sequence_1.syn.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_atomic_array.5.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_atomic_types.syn.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_groups1.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_struct1.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_anon_dim.syn.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_one_vararray.3.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_enum_2.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_fill.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_atomic_array.9.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_vlen7.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_opaque_array.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_anon_dim.2.syn.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_struct_nested3.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_one_vararray.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_struct_array.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_enum_array.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_atomic_array.8.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_vlen6.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_enum_array.4.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_opaque_array.7.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_vlen3.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_vlen2.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_vlen4.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_struct_type.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_struct_nested.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_struct_array.6.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_vlen1.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_utf8.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_one_vararray.1.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_atomic_types.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_atomic_array.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_opaque.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_sequence_2.syn.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_one_var.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_atomic_array.syn.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_vlen8.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_unlim1.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/daptestfiles/test_enum.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/misctestfiles/fnoc1.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/misctestfiles/test_fillmismatch.nc.dap",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_unlim1.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_vlen3.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_groups1.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_enum_2.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_vlen6.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_vlen8.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_opaque.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_vlen1.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_fill.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_enum.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_opaque_array.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_struct_array.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_one_var.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_vlen4.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_vlen5.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_vlen7.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_struct_nested3.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_atomic_types.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_one_vararray.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_atomic_array.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_struct1.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_utf8.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_enum_array.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_vlen2.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_struct_type.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/dap4_test/nctestfiles/test_struct_nested.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nc_test4/ref_hdf5_compat3.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nc_test4/ref_tst_xplatform2_2.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nc_test4/ref_hdf5_compat2.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nc_test4/ref_tst_dims.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nc_test4/ref_hdf5_compat1.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nc_test4/ref_tst_interops4.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nc_test4/ref_tst_xplatform2_1.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nc_test4/ref_tst_compounds.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nc_test4/tdset.h5",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nc_test4/ref_szip.h5",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nctest/ref_nctest_64bit_offset.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/nctest/ref_nctest_classic.nc",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/nocacheremote3/test.nc.dmp",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/in1.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.sds4.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.vs2.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/ingrid.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.69.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/ber-2002-10-01.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.50.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/saco1.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.PointFile.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/synth2.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.sds7.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/in_2.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.SwathFile.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/synth5.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.gr1.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/OverideExample.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/b31.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.vs1.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/kwcase.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/NestedSeq.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/testfile.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.02.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/fillmismatch.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.sds6.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/synth7.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.23.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.05.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/synth4.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.55.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/synth8.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.sds5.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.56.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.22.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/pbug0001b.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.sds3.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/Drifters.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/data.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/synth3.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/SimpleDrdsExample.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/ceopL2AIRS2-2.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.gr5.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/123.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.31.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/123bears.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.66.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.53.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/synth1.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/fnoc1.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/in_v.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/synth6.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.04.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.06a.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/in.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.gr2.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/ceopL2AIRS2.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/EOSDB.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/D1.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/bears.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.32.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.vs4.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/text.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.03.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.gr3.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.01.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/synth10.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.sds2.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/b31a.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.gr4.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.vs3.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/1998-6-avhrr.dat.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/NestedSeq2.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/1990-S1700101.HDF.WVC_Lat.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.sds1.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.vs5.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.67.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.06.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/whoi.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/in_no_three_double_dmn.nc.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.07.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/testdata3/test.57.dods",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/ncdap_test/expectremote3/test.nc.dmp",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/unidata_logo_cmyk.png",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/netcdf-50x50.png",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/docmap.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/chunking2.png",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/pnetcdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/netcdf_architecture.png",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/groups.png",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/compression.png",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/ncatts.png",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/netcdf_architecture.odg",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/InstallTreeWindows.png",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/deptree.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/nccoords.png",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/nc4-model.png",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/compatibility3.png",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/aqua.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/nc-classic-uml.png",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/ncfile.png",
        "/tmp/vanessa/spack-stage/spack-stage-netcdf-c-master-et3spog4zv3nqcvuugxlqxy4uabzbu7j/spack-src/docs/images/terra.jpg"
    ],
    "total_files": 2326
}