{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/blt/thirdparty_builtin/googletest-master-2020-01-07/googletest/cmake/libgtest.la.in": "# libgtest.la - a libtool library file\n# Generated by libtool (GNU libtool) 2.4.6\n\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Names of this library.\nlibrary_names='libgtest.so'\n\n# Is this an already installed library?\ninstalled=yes\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=no\n\n# Files to dlopen/dlpreopen\ndlopen=''\ndlpreopen=''\n\n# Directory that this library needs to be installed in:\nlibdir='@CMAKE_INSTALL_FULL_LIBDIR@'\n",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/civetweb-0a95342/CMakeLists.txt": "###############################################################################\n# Copyright (c) Copyright (c) 2015-2018, Lawrence Livermore National Security, LLC.\n#\n# Produced at the Lawrence Livermore National Laboratory\n#\n# LLNL-CODE-666778\n#\n# All rights reserved.\n#\n# This file is part of Conduit.\n#\n# For details, see: http://software.llnl.gov/conduit/.\n#\n# Please also read conduit/LICENSE\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# * Redistributions of source code must retain the above copyright notice,\n#   this list of conditions and the disclaimer below.\n#\n# * Redistributions in binary form must reproduce the above copyright notice,\n#   this list of conditions and the disclaimer (as noted below) in the\n#   documentation and/or other materials provided with the distribution.\n#\n# * Neither the name of the LLNS/LLNL nor the names of its contributors may\n#   be used to endorse or promote products derived from this software without\n#   specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL SECURITY,\n# LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE FOR ANY\n# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n#\n###############################################################################\n\n####################################\n# Simple CMake setup for civetweb\n####################################\n\n#\n# civetweb sources\n#\n\n\nset(civetweb_headers\n    include/civetweb.h\n    include/CivetServer.h\n    )\n\nset(civetweb_sources\n    src/civetweb.c\n    src/CivetServer.cpp\n    )\n\nadd_definitions(-DUSE_WEBSOCKET)\n\n\n\n############################################\n# disable ssl support for the static case\n############################################\n# We don't want to rely on dlopen NO_SSL_DL and we don't require a\n# openssl install.\nif(NOT BUILD_SHARED_LIBS)\n    add_definitions(-DNO_SSL_DL -DNO_SSL)\nendif()\n\n\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)\n\n\nadd_compiled_library(NAME   conduit_civetweb\n                     OBJECT\n                     HEADERS ${civetweb_headers}\n                     SOURCES ${civetweb_sources})\n\n#  avoid unknown pragma warnings when compiling civetweb with clang\nif(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n    add_target_compile_flags(TARGET conduit_civetweb\n                             FLAGS -Wno-unknown-pragmas)\nendif()\n\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/civetweb-0a95342/src/civetweb.c": "/* Copyright (c) 2013-2016 the Civetweb developers\n * Copyright (c) 2004-2013 Sergey Lyubka\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n#if defined(_WIN32)\n#if !defined(_CRT_SECURE_NO_WARNINGS)\n#define _CRT_SECURE_NO_WARNINGS /* Disable deprecation warning in VS2005 */\n#endif\n#ifndef _WIN32_WINNT /* defined for tdm-gcc so we can use getnameinfo */\n#define _WIN32_WINNT 0x0501\n#endif\n#else\n#if defined(__GNUC__) && !defined(_GNU_SOURCE)\n#define _GNU_SOURCE /* for setgroups() */\n#endif\n#if defined(__linux__) && !defined(_XOPEN_SOURCE)\n#define _XOPEN_SOURCE 600 /* For flockfile() on Linux */\n#endif\n#ifndef _LARGEFILE_SOURCE\n#define _LARGEFILE_SOURCE /* For fseeko(), ftello() */\n#endif\n#ifndef _FILE_OFFSET_BITS\n#define _FILE_OFFSET_BITS 64 /* Use 64-bit file offsets by default */\n#endif\n#ifndef __STDC_FORMAT_MACROS\n#define __STDC_FORMAT_MACROS /* <inttypes.h> wants this for C++ */\n#endif\n#ifndef __STDC_LIMIT_MACROS\n#define __STDC_LIMIT_MACROS /* C++ wants that for INT64_MAX */\n#endif\n#ifdef __sun\n#define __EXTENSIONS__  /* to expose flockfile and friends in stdio.h */\n#define __inline inline /* not recognized on older compiler versions */\n#endif\n#endif\n\n#if defined(USE_LUA) && defined(USE_WEBSOCKET)\n#define USE_TIMERS\n#endif\n\n#if defined(_MSC_VER)\n/* 'type cast' : conversion from 'int' to 'HANDLE' of greater size */\n#pragma warning(disable : 4306)\n/* conditional expression is constant: introduced by FD_SET(..) */\n#pragma warning(disable : 4127)\n/* non-constant aggregate initializer: issued due to missing C99 support */\n#pragma warning(disable : 4204)\n/* padding added after data member */\n#pragma warning(disable : 4820)\n/* not defined as a preprocessor macro, replacing with '0' for '#if/#elif' */\n#pragma warning(disable : 4668)\n/* no function prototype given: converting '()' to '(void)' */\n#pragma warning(disable : 4255)\n/* function has been selected for automatic inline expansion */\n#pragma warning(disable : 4711)\n#endif\n\n\n/* This code uses static_assert to check some conditions.\n * Unfortunately some compilers still do not support it, so we have a\n * replacement function here. */\n#if defined(_MSC_VER) && (_MSC_VER >= 1600)\n#define mg_static_assert static_assert\n#elif defined(__cplusplus) && (__cplusplus >= 201103L)\n#define mg_static_assert static_assert\n#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201112L)\n#define mg_static_assert _Static_assert\n#else\nchar static_assert_replacement[1];\n#define mg_static_assert(cond, txt)                                            \\\n\textern char static_assert_replacement[(cond) ? 1 : -1]\n#endif\n\nmg_static_assert(sizeof(int) == 4 || sizeof(int) == 8,\n                 \"int data type size check\");\nmg_static_assert(sizeof(void *) == 4 || sizeof(void *) == 8,\n                 \"pointer data type size check\");\nmg_static_assert(sizeof(void *) >= sizeof(int), \"data type size check\");\n\n\n/* DTL -- including winsock2.h works better if lean and mean */\n#ifndef WIN32_LEAN_AND_MEAN\n#define WIN32_LEAN_AND_MEAN\n#endif\n\n#if defined(__SYMBIAN32__)\n#define NO_SSL /* SSL is not supported */\n#define NO_CGI /* CGI is not supported */\n#define PATH_MAX FILENAME_MAX\n#endif /* __SYMBIAN32__ */\n\n\n/* Include the header file here, so the CivetWeb interface is defined for the\n * entire implementation, including the following forward definitions. */\n#include \"civetweb.h\"\n\n\n#ifndef IGNORE_UNUSED_RESULT\n#define IGNORE_UNUSED_RESULT(a) ((void)((a) && 1))\n#endif\n\n#ifndef _WIN32_WCE /* Some ANSI #includes are not available on Windows CE */\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <signal.h>\n#include <fcntl.h>\n#endif /* !_WIN32_WCE */\n\n\n#ifdef __clang__\n/* When using -Weverything, clang does not accept it's own headers\n * in a release build configuration. Disable what is too much in\n * -Weverything. */\n#pragma clang diagnostic ignored \"-Wdisabled-macro-expansion\"\n#endif\n\n\n#ifdef __MACH__ /* Apple OSX section */\n\n#ifdef __clang__\n/* Avoid warnings for Xopen 7.00 and higher */\n#pragma clang diagnostic ignored \"-Wno-reserved-id-macro\"\n#pragma clang diagnostic ignored \"-Wno-keyword-macro\"\n#endif\n\n#define CLOCK_MONOTONIC (1)\n#define CLOCK_REALTIME (2)\n\n#include <sys/errno.h>\n#include <sys/time.h>\n#include <mach/clock.h>\n#include <mach/mach.h>\n#include <mach/mach_time.h>\n#include <assert.h>\n\n/* clock_gettime is not implemented on OSX prior to 10.12 */\nstatic int\n_civet_clock_gettime(int clk_id, struct timespec *t)\n{\n\tmemset(t, 0, sizeof(*t));\n\tif (clk_id == CLOCK_REALTIME) {\n\t\tstruct timeval now;\n\t\tint rv = gettimeofday(&now, NULL);\n\t\tif (rv) {\n\t\t\treturn rv;\n\t\t}\n\t\tt->tv_sec = now.tv_sec;\n\t\tt->tv_nsec = now.tv_usec * 1000;\n\t\treturn 0;\n\n\t} else if (clk_id == CLOCK_MONOTONIC) {\n\t\tstatic uint64_t clock_start_time = 0;\n\t\tstatic mach_timebase_info_data_t timebase_ifo = {0, 0};\n\n\t\tuint64_t now = mach_absolute_time();\n\n\t\tif (clock_start_time == 0) {\n\t\t\tkern_return_t mach_status = mach_timebase_info(&timebase_ifo);\n#if defined(DEBUG)\n\t\t\tassert(mach_status == KERN_SUCCESS);\n#else\n\t\t\t/* appease \"unused variable\" warning for release builds */\n\t\t\t(void)mach_status;\n#endif\n\t\t\tclock_start_time = now;\n\t\t}\n\n\t\tnow = (uint64_t)((double)(now - clock_start_time)\n\t\t                 * (double)timebase_ifo.numer\n\t\t                 / (double)timebase_ifo.denom);\n\n\t\tt->tv_sec = now / 1000000000;\n\t\tt->tv_nsec = now % 1000000000;\n\t\treturn 0;\n\t}\n\treturn -1; /* EINVAL - Clock ID is unknown */\n}\n\n/* if clock_gettime is declared, then __CLOCK_AVAILABILITY will be defined */\n#ifdef __CLOCK_AVAILABILITY\n/* If we compiled with Mac OSX 10.12 or later, then clock_gettime will be\n * declared but it may be NULL at runtime. So we need to check before using\n * it. */\nstatic int\n_civet_safe_clock_gettime(int clk_id, struct timespec *t)\n{\n\tif (clock_gettime) {\n\t\treturn clock_gettime(clk_id, t);\n\t}\n\treturn _civet_clock_gettime(clk_id, t);\n}\n#define clock_gettime _civet_safe_clock_gettime\n#else\n#define clock_gettime _civet_clock_gettime\n#endif\n\n#endif\n\n\n#include <time.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <limits.h>\n#include <stddef.h>\n#include <stdio.h>\n#include <stdint.h>\n\n#ifndef INT64_MAX\n#define INT64_MAX (9223372036854775807)\n#endif\n\n\n#ifndef MAX_WORKER_THREADS\n#define MAX_WORKER_THREADS (1024 * 64)\n#endif\n\n#ifndef SOCKET_TIMEOUT_QUANTUM /* in ms */\n#define SOCKET_TIMEOUT_QUANTUM (2000)\n#endif\n\n#define SHUTDOWN_RD (0)\n#define SHUTDOWN_WR (1)\n#define SHUTDOWN_BOTH (2)\n\nmg_static_assert(MAX_WORKER_THREADS >= 1,\n                 \"worker threads must be a positive number\");\n\nmg_static_assert(sizeof(size_t) == 4 || sizeof(size_t) == 8,\n                 \"size_t data type size check\");\n\n#if defined(_WIN32)                                                            \\\n    && !defined(__SYMBIAN32__) /* WINDOWS / UNIX include block */\n#include <windows.h>\n#include <winsock2.h> /* DTL add for SO_EXCLUSIVE */\n#include <ws2tcpip.h>\n\ntypedef const char *SOCK_OPT_TYPE;\n\n#if !defined(PATH_MAX)\n#define PATH_MAX (MAX_PATH)\n#endif\n\n#if !defined(PATH_MAX)\n#define PATH_MAX (4096)\n#endif\n\nmg_static_assert(PATH_MAX >= 1, \"path length must be a positive number\");\n\n#ifndef _IN_PORT_T\n#ifndef in_port_t\n#define in_port_t u_short\n#endif\n#endif\n\n#ifndef _WIN32_WCE\n#include <process.h>\n#include <direct.h>\n#include <io.h>\n#else            /* _WIN32_WCE */\n#define NO_CGI   /* WinCE has no pipes */\n#define NO_POPEN /* WinCE has no popen */\n\ntypedef long off_t;\n\n#define errno ((int)(GetLastError()))\n#define strerror(x) (_ultoa(x, (char *)_alloca(sizeof(x) * 3), 10))\n#endif /* _WIN32_WCE */\n\n#define MAKEUQUAD(lo, hi)                                                      \\\n\t((uint64_t)(((uint32_t)(lo)) | ((uint64_t)((uint32_t)(hi))) << 32))\n#define RATE_DIFF (10000000) /* 100 nsecs */\n#define EPOCH_DIFF (MAKEUQUAD(0xd53e8000, 0x019db1de))\n#define SYS2UNIX_TIME(lo, hi)                                                  \\\n\t((time_t)((MAKEUQUAD((lo), (hi)) - EPOCH_DIFF) / RATE_DIFF))\n\n/* Visual Studio 6 does not know __func__ or __FUNCTION__\n * The rest of MS compilers use __FUNCTION__, not C99 __func__\n * Also use _strtoui64 on modern M$ compilers */\n#if defined(_MSC_VER)\n#if (_MSC_VER < 1300)\n#define STRX(x) #x\n#define STR(x) STRX(x)\n#define __func__ __FILE__ \":\" STR(__LINE__)\n#define strtoull(x, y, z) ((unsigned __int64)_atoi64(x))\n#define strtoll(x, y, z) (_atoi64(x))\n#else\n#define __func__ __FUNCTION__\n#define strtoull(x, y, z) (_strtoui64(x, y, z))\n#define strtoll(x, y, z) (_strtoi64(x, y, z))\n#endif\n#endif /* _MSC_VER */\n\n#define ERRNO ((int)(GetLastError()))\n#define NO_SOCKLEN_T\n\n#if defined(_WIN64) || defined(__MINGW64__)\n#define SSL_LIB \"ssleay64.dll\"\n#define CRYPTO_LIB \"libeay64.dll\"\n#else\n#define SSL_LIB \"ssleay32.dll\"\n#define CRYPTO_LIB \"libeay32.dll\"\n#endif\n\n#define O_NONBLOCK (0)\n#ifndef W_OK\n#define W_OK (2) /* http://msdn.microsoft.com/en-us/library/1w06ktdy.aspx */\n#endif\n#if !defined(EWOULDBLOCK)\n#define EWOULDBLOCK WSAEWOULDBLOCK\n#endif /* !EWOULDBLOCK */\n#define _POSIX_\n#define INT64_FMT \"I64d\"\n#define UINT64_FMT \"I64u\"\n\n#define WINCDECL __cdecl\n#define vsnprintf_impl _vsnprintf\n#define access _access\n#define mg_sleep(x) (Sleep(x))\n\n#define pipe(x) _pipe(x, MG_BUF_LEN, _O_BINARY)\n#ifndef popen\n#define popen(x, y) (_popen(x, y))\n#endif\n#ifndef pclose\n#define pclose(x) (_pclose(x))\n#endif\n#define close(x) (_close(x))\n#define dlsym(x, y) (GetProcAddress((HINSTANCE)(x), (y)))\n#define RTLD_LAZY (0)\n#define fseeko(x, y, z) ((_lseeki64(_fileno(x), (y), (z)) == -1) ? -1 : 0)\n#define fdopen(x, y) (_fdopen((x), (y)))\n#define write(x, y, z) (_write((x), (y), (unsigned)z))\n#define read(x, y, z) (_read((x), (y), (unsigned)z))\n#define flockfile(x) (EnterCriticalSection(&global_log_file_lock))\n#define funlockfile(x) (LeaveCriticalSection(&global_log_file_lock))\n#define sleep(x) (Sleep((x)*1000))\n#define rmdir(x) (_rmdir(x))\n#define timegm(x) (_mkgmtime(x))\n\n#if !defined(fileno)\n#define fileno(x) (_fileno(x))\n#endif /* !fileno MINGW #defines fileno */\n\ntypedef HANDLE pthread_mutex_t;\ntypedef DWORD pthread_key_t;\ntypedef HANDLE pthread_t;\ntypedef struct {\n\tCRITICAL_SECTION threadIdSec;\n\tstruct mg_workerTLS *waiting_thread; /* The chain of threads */\n} pthread_cond_t;\n\n#ifndef __clockid_t_defined\ntypedef DWORD clockid_t;\n#endif\n#ifndef CLOCK_MONOTONIC\n#define CLOCK_MONOTONIC (1)\n#endif\n#ifndef CLOCK_REALTIME\n#define CLOCK_REALTIME (2)\n#endif\n\n#if defined(_MSC_VER) && (_MSC_VER >= 1900)\n#define _TIMESPEC_DEFINED\n#endif\n#ifndef _TIMESPEC_DEFINED\nstruct timespec {\n\ttime_t tv_sec; /* seconds */\n\tlong tv_nsec;  /* nanoseconds */\n};\n#endif\n\n#if !defined(WIN_PTHREADS_TIME_H)\n#define MUST_IMPLEMENT_CLOCK_GETTIME\n#endif\n\n#ifdef MUST_IMPLEMENT_CLOCK_GETTIME\n#define clock_gettime mg_clock_gettime\nstatic int\nclock_gettime(clockid_t clk_id, struct timespec *tp)\n{\n\tFILETIME ft;\n\tULARGE_INTEGER li;\n\tBOOL ok = FALSE;\n\tdouble d;\n\tstatic double perfcnt_per_sec = 0.0;\n\n\tif (tp) {\n\t\tmemset(tp, 0, sizeof(*tp));\n\t\tif (clk_id == CLOCK_REALTIME) {\n\t\t\tGetSystemTimeAsFileTime(&ft);\n\t\t\tli.LowPart = ft.dwLowDateTime;\n\t\t\tli.HighPart = ft.dwHighDateTime;\n\t\t\tli.QuadPart -= 116444736000000000; /* 1.1.1970 in filedate */\n\t\t\ttp->tv_sec = (time_t)(li.QuadPart / 10000000);\n\t\t\ttp->tv_nsec = (long)(li.QuadPart % 10000000) * 100;\n\t\t\tok = TRUE;\n\t\t} else if (clk_id == CLOCK_MONOTONIC) {\n\t\t\tif (perfcnt_per_sec == 0.0) {\n\t\t\t\tQueryPerformanceFrequency((LARGE_INTEGER *)&li);\n\t\t\t\tperfcnt_per_sec = 1.0 / li.QuadPart;\n\t\t\t}\n\t\t\tif (perfcnt_per_sec != 0.0) {\n\t\t\t\tQueryPerformanceCounter((LARGE_INTEGER *)&li);\n\t\t\t\td = li.QuadPart * perfcnt_per_sec;\n\t\t\t\ttp->tv_sec = (time_t)d;\n\t\t\t\td -= tp->tv_sec;\n\t\t\t\ttp->tv_nsec = (long)(d * 1.0E9);\n\t\t\t\tok = TRUE;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn ok ? 0 : -1;\n}\n#endif\n\n\n#define pid_t HANDLE /* MINGW typedefs pid_t to int. Using #define here. */\n\nstatic int pthread_mutex_lock(pthread_mutex_t *);\nstatic int pthread_mutex_unlock(pthread_mutex_t *);\nstatic void path_to_unicode(const struct mg_connection *conn,\n                            const char *path,\n                            wchar_t *wbuf,\n                            size_t wbuf_len);\n\n/* All file operations need to be rewritten to solve #246. */\n\n#include \"file_ops.inl\"\n\nstruct mg_file;\n\nstatic const char *\nmg_fgets(char *buf, size_t size, struct mg_file *filep, char **p);\n\n\n/* POSIX dirent interface */\nstruct dirent {\n\tchar d_name[PATH_MAX];\n};\n\ntypedef struct DIR {\n\tHANDLE handle;\n\tWIN32_FIND_DATAW info;\n\tstruct dirent result;\n} DIR;\n\n#if defined(_WIN32) && !defined(POLLIN)\n#ifndef HAVE_POLL\nstruct pollfd {\n\tSOCKET fd;\n\tshort events;\n\tshort revents;\n};\n#define POLLIN (0x0300)\n#endif\n#endif\n\n/* Mark required libraries */\n#if defined(_MSC_VER)\n#pragma comment(lib, \"Ws2_32.lib\")\n#endif\n\n#else /* defined(_WIN32) && !defined(__SYMBIAN32__) -                          \\\n         WINDOWS / UNIX include block */\n\n#include <sys/wait.h>\n#include <sys/socket.h>\n#include <sys/poll.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <sys/time.h>\n#include <sys/utsname.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <netdb.h>\n#include <netinet/tcp.h>\ntypedef const void *SOCK_OPT_TYPE;\n\n#if defined(ANDROID)\ntypedef unsigned short int in_port_t;\n#endif\n\n#include <pwd.h>\n#include <unistd.h>\n#include <grp.h>\n#include <dirent.h>\n#define vsnprintf_impl vsnprintf\n\n#if !defined(NO_SSL_DL) && !defined(NO_SSL)\n#include <dlfcn.h>\n#endif\n#include <pthread.h>\n#if defined(__MACH__)\n#define SSL_LIB \"libssl.dylib\"\n#define CRYPTO_LIB \"libcrypto.dylib\"\n#else\n#if !defined(SSL_LIB)\n#define SSL_LIB \"libssl.so\"\n#endif\n#if !defined(CRYPTO_LIB)\n#define CRYPTO_LIB \"libcrypto.so\"\n#endif\n#endif\n#ifndef O_BINARY\n#define O_BINARY (0)\n#endif /* O_BINARY */\n#define closesocket(a) (close(a))\n#define mg_mkdir(conn, path, mode) (mkdir(path, mode))\n#define mg_remove(conn, x) (remove(x))\n#define mg_sleep(x) (usleep((x)*1000))\n#define mg_opendir(conn, x) (opendir(x))\n#define mg_closedir(x) (closedir(x))\n#define mg_readdir(x) (readdir(x))\n#define ERRNO (errno)\n#define INVALID_SOCKET (-1)\n#define INT64_FMT PRId64\n#define UINT64_FMT PRIu64\ntypedef int SOCKET;\n#define WINCDECL\n\n#if defined(__hpux)\n/* HPUX 11 does not have monotonic, fall back to realtime */\n#ifndef CLOCK_MONOTONIC\n#define CLOCK_MONOTONIC CLOCK_REALTIME\n#endif\n\n/* HPUX defines socklen_t incorrectly as size_t which is 64bit on\n * Itanium.  Without defining _XOPEN_SOURCE or _XOPEN_SOURCE_EXTENDED\n * the prototypes use int* rather than socklen_t* which matches the\n * actual library expectation.  When called with the wrong size arg\n * accept() returns a zero client inet addr and check_acl() always\n * fails.  Since socklen_t is widely used below, just force replace\n * their typedef with int. - DTL\n */\n#define socklen_t int\n#endif /* hpux */\n\n#endif /* defined(_WIN32) && !defined(__SYMBIAN32__) -                         \\\n          WINDOWS / UNIX include block */\n\n/* va_copy should always be a macro, C99 and C++11 - DTL */\n#ifndef va_copy\n#define va_copy(x, y) ((x) = (y))\n#endif\n\n#ifdef _WIN32\n/* Create substitutes for POSIX functions in Win32. */\n\n#if defined(__MINGW32__)\n/* Show no warning in case system functions are not used. */\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wunused-function\"\n#endif\n\n\nstatic CRITICAL_SECTION global_log_file_lock;\nstatic DWORD\npthread_self(void)\n{\n\treturn GetCurrentThreadId();\n}\n\n\nstatic int\npthread_key_create(\n    pthread_key_t *key,\n    void (*_ignored)(void *) /* destructor not supported for Windows */\n    )\n{\n\t(void)_ignored;\n\n\tif ((key != 0)) {\n\t\t*key = TlsAlloc();\n\t\treturn (*key != TLS_OUT_OF_INDEXES) ? 0 : -1;\n\t}\n\treturn -2;\n}\n\n\nstatic int\npthread_key_delete(pthread_key_t key)\n{\n\treturn TlsFree(key) ? 0 : 1;\n}\n\n\nstatic int\npthread_setspecific(pthread_key_t key, void *value)\n{\n\treturn TlsSetValue(key, value) ? 0 : 1;\n}\n\n\nstatic void *\npthread_getspecific(pthread_key_t key)\n{\n\treturn TlsGetValue(key);\n}\n\n#if defined(__MINGW32__)\n/* Enable unused function warning again */\n#pragma GCC diagnostic pop\n#endif\n\nstatic struct pthread_mutex_undefined_struct *pthread_mutex_attr = NULL;\n#else\nstatic pthread_mutexattr_t pthread_mutex_attr;\n#endif /* _WIN32 */\n\n\n#define PASSWORDS_FILE_NAME \".htpasswd\"\n#define CGI_ENVIRONMENT_SIZE (4096)\n#define MAX_CGI_ENVIR_VARS (256)\n#define MG_BUF_LEN (8192)\n\n#ifndef MAX_REQUEST_SIZE\n#define MAX_REQUEST_SIZE (16384)\n#endif\n\nmg_static_assert(MAX_REQUEST_SIZE >= 256,\n                 \"request size length must be a positive number\");\n\n#define ARRAY_SIZE(array) (sizeof(array) / sizeof(array[0]))\n\n\n#if defined(_WIN32_WCE)\n/* Create substitutes for POSIX functions in Win32. */\n\n#if defined(__MINGW32__)\n/* Show no warning in case system functions are not used. */\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wunused-function\"\n#endif\n\n\nstatic time_t\ntime(time_t *ptime)\n{\n\ttime_t t;\n\tSYSTEMTIME st;\n\tFILETIME ft;\n\n\tGetSystemTime(&st);\n\tSystemTimeToFileTime(&st, &ft);\n\tt = SYS2UNIX_TIME(ft.dwLowDateTime, ft.dwHighDateTime);\n\n\tif (ptime != NULL) {\n\t\t*ptime = t;\n\t}\n\n\treturn t;\n}\n\n\nstatic struct tm *\nlocaltime_s(const time_t *ptime, struct tm *ptm)\n{\n\tint64_t t = ((int64_t)*ptime) * RATE_DIFF + EPOCH_DIFF;\n\tFILETIME ft, lft;\n\tSYSTEMTIME st;\n\tTIME_ZONE_INFORMATION tzinfo;\n\n\tif (ptm == NULL) {\n\t\treturn NULL;\n\t}\n\n\t*(int64_t *)&ft = t;\n\tFileTimeToLocalFileTime(&ft, &lft);\n\tFileTimeToSystemTime(&lft, &st);\n\tptm->tm_year = st.wYear - 1900;\n\tptm->tm_mon = st.wMonth - 1;\n\tptm->tm_wday = st.wDayOfWeek;\n\tptm->tm_mday = st.wDay;\n\tptm->tm_hour = st.wHour;\n\tptm->tm_min = st.wMinute;\n\tptm->tm_sec = st.wSecond;\n\tptm->tm_yday = 0; /* hope nobody uses this */\n\tptm->tm_isdst =\n\t    (GetTimeZoneInformation(&tzinfo) == TIME_ZONE_ID_DAYLIGHT) ? 1 : 0;\n\n\treturn ptm;\n}\n\n\nstatic struct tm *\ngmtime_s(const time_t *ptime, struct tm *ptm)\n{\n\t/* FIXME(lsm): fix this. */\n\treturn localtime_s(ptime, ptm);\n}\n\nstatic int mg_atomic_inc(volatile int *addr);\nstatic struct tm tm_array[MAX_WORKER_THREADS];\nstatic int tm_index = 0;\n\nstatic struct tm *\nlocaltime(const time_t *ptime)\n{\n\tint i = mg_atomic_inc(&tm_index) % (sizeof(tm_array) / sizeof(tm_array[0]));\n\treturn localtime_s(ptime, tm_array + i);\n}\n\n\nstatic struct tm *\ngmtime(const time_t *ptime)\n{\n\tint i = mg_atomic_inc(&tm_index) % ARRAY_SIZE(tm_array);\n\treturn gmtime_s(ptime, tm_array + i);\n}\n\n\nstatic size_t\nstrftime(char *dst, size_t dst_size, const char *fmt, const struct tm *tm)\n{\n\t/* TODO */ //(void)mg_snprintf(NULL, dst, dst_size, \"implement strftime()\n\t// for WinCE\");\n\treturn 0;\n}\n\n#define _beginthreadex(psec, stack, func, prm, flags, ptid)                    \\\n\t(uintptr_t) CreateThread(psec, stack, func, prm, flags, ptid)\n\n#define remove(f) mg_remove(NULL, f)\n\nstatic int\nrename(const char *a, const char *b)\n{\n\twchar_t wa[PATH_MAX];\n\twchar_t wb[PATH_MAX];\n\tpath_to_unicode(NULL, a, wa, ARRAY_SIZE(wa));\n\tpath_to_unicode(NULL, b, wb, ARRAY_SIZE(wb));\n\n\treturn MoveFileW(wa, wb) ? 0 : -1;\n}\n\nstruct stat {\n\tint64_t st_size;\n\ttime_t st_mtime;\n};\n\nstatic int\nstat(const char *name, struct stat *st)\n{\n\twchar_t wbuf[PATH_MAX];\n\tWIN32_FILE_ATTRIBUTE_DATA attr;\n\ttime_t creation_time, write_time;\n\n\tpath_to_unicode(NULL, name, wbuf, ARRAY_SIZE(wbuf));\n\tmemset(&attr, 0, sizeof(attr));\n\n\tGetFileAttributesExW(wbuf, GetFileExInfoStandard, &attr);\n\tst->st_size =\n\t    (((int64_t)attr.nFileSizeHigh) << 32) + (int64_t)attr.nFileSizeLow;\n\n\twrite_time = SYS2UNIX_TIME(attr.ftLastWriteTime.dwLowDateTime,\n\t                           attr.ftLastWriteTime.dwHighDateTime);\n\tcreation_time = SYS2UNIX_TIME(attr.ftCreationTime.dwLowDateTime,\n\t                              attr.ftCreationTime.dwHighDateTime);\n\n\tif (creation_time > write_time) {\n\t\tst->st_mtime = creation_time;\n\t} else {\n\t\tst->st_mtime = write_time;\n\t}\n\treturn 0;\n}\n\n#define access(x, a) 1 /* not required anyway */\n\n/* WinCE-TODO: define stat, remove, rename, _rmdir, _lseeki64 */\n#define EEXIST 1 /* TODO: See Windows error codes */\n#define EACCES 2 /* TODO: See Windows error codes */\n#define ENOENT 3 /* TODO: See Windows Error codes */\n\n#if defined(__MINGW32__)\n/* Enable unused function warning again */\n#pragma GCC diagnostic pop\n#endif\n\n#endif /* defined(_WIN32_WCE) */\n\n\n#if !defined(DEBUG_TRACE)\n#if defined(DEBUG)\nstatic void DEBUG_TRACE_FUNC(const char *func,\n                             unsigned line,\n                             PRINTF_FORMAT_STRING(const char *fmt),\n                             ...) PRINTF_ARGS(3, 4);\n\nstatic void\nDEBUG_TRACE_FUNC(const char *func, unsigned line, const char *fmt, ...)\n{\n\tva_list args;\n\tstruct timespec tsnow;\n\tuint64_t nsnow;\n\tstatic uint64_t nslast;\n\n\tclock_gettime(CLOCK_REALTIME, &tsnow);\n\tnsnow = (((uint64_t)tsnow.tv_sec) * 1000000000) + (uint64_t)tsnow.tv_nsec;\n\n\tflockfile(stdout);\n\tprintf(\"*** %lu.%09lu %12\" INT64_FMT \" %p %s:%u: \",\n\t       (unsigned long)tsnow.tv_sec,\n\t       (unsigned long)tsnow.tv_nsec,\n\t       nsnow - nslast,\n\t       (void *)pthread_self(),\n\t       func,\n\t       line);\n\tva_start(args, fmt);\n\tvprintf(fmt, args);\n\tva_end(args);\n\tputchar('\\n');\n\tfflush(stdout);\n\tfunlockfile(stdout);\n\tnslast = nsnow;\n}\n\n#define DEBUG_TRACE(fmt, ...)                                                  \\\n\tDEBUG_TRACE_FUNC(__func__, __LINE__, fmt, __VA_ARGS__)\n\n#else\n#define DEBUG_TRACE(fmt, ...)                                                  \\\n\tdo {                                                                       \\\n\t} while (0)\n#endif /* DEBUG */\n#endif /* DEBUG_TRACE */\n\n\n#if defined(MEMORY_DEBUGGING)\nstatic unsigned long mg_memory_debug_blockCount = 0;\nstatic unsigned long mg_memory_debug_totalMemUsed = 0;\n\n\nstatic void *\nmg_malloc_ex(size_t size, const char *file, unsigned line)\n{\n\tvoid *data = malloc(size + sizeof(size_t));\n\tvoid *memory = 0;\n\tchar mallocStr[256];\n\n\tif (data) {\n\t\t*(size_t *)data = size;\n\t\tmg_memory_debug_totalMemUsed += size;\n\t\tmg_memory_debug_blockCount++;\n\t\tmemory = (void *)(((char *)data) + sizeof(size_t));\n\t}\n\n\tsprintf(mallocStr,\n\t        \"MEM: %p %5lu alloc   %7lu %4lu --- %s:%u\\n\",\n\t        memory,\n\t        (unsigned long)size,\n\t        mg_memory_debug_totalMemUsed,\n\t        mg_memory_debug_blockCount,\n\t        file,\n\t        line);\n#if defined(_WIN32)\n\tOutputDebugStringA(mallocStr);\n#else\n\tDEBUG_TRACE(\"%s\", mallocStr);\n#endif\n\n\treturn memory;\n}\n\n\nstatic void *\nmg_calloc_ex(size_t count, size_t size, const char *file, unsigned line)\n{\n\tvoid *data = mg_malloc_ex(size * count, file, line);\n\tif (data) {\n\t\tmemset(data, 0, size * count);\n\t}\n\treturn data;\n}\n\n\nstatic void\nmg_free_ex(void *memory, const char *file, unsigned line)\n{\n\tchar mallocStr[256];\n\tvoid *data = (void *)(((char *)memory) - sizeof(size_t));\n\tsize_t size;\n\n\tif (memory) {\n\t\tsize = *(size_t *)data;\n\t\tmg_memory_debug_totalMemUsed -= size;\n\t\tmg_memory_debug_blockCount--;\n\t\tsprintf(mallocStr,\n\t\t        \"MEM: %p %5lu free    %7lu %4lu --- %s:%u\\n\",\n\t\t        memory,\n\t\t        (unsigned long)size,\n\t\t        mg_memory_debug_totalMemUsed,\n\t\t        mg_memory_debug_blockCount,\n\t\t        file,\n\t\t        line);\n#if defined(_WIN32)\n\t\tOutputDebugStringA(mallocStr);\n#else\n\t\tDEBUG_TRACE(\"%s\", mallocStr);\n#endif\n\n\t\tfree(data);\n\t}\n}\n\n\nstatic void *\nmg_realloc_ex(void *memory, size_t newsize, const char *file, unsigned line)\n{\n\tchar mallocStr[256];\n\tvoid *data;\n\tvoid *_realloc;\n\tsize_t oldsize;\n\n\tif (newsize) {\n\t\tif (memory) {\n\t\t\tdata = (void *)(((char *)memory) - sizeof(size_t));\n\t\t\toldsize = *(size_t *)data;\n\t\t\t_realloc = realloc(data, newsize + sizeof(size_t));\n\t\t\tif (_realloc) {\n\t\t\t\tdata = _realloc;\n\t\t\t\tmg_memory_debug_totalMemUsed -= oldsize;\n\t\t\t\tsprintf(mallocStr,\n\t\t\t\t        \"MEM: %p %5lu r-free  %7lu %4lu --- %s:%u\\n\",\n\t\t\t\t        memory,\n\t\t\t\t        (unsigned long)oldsize,\n\t\t\t\t        mg_memory_debug_totalMemUsed,\n\t\t\t\t        mg_memory_debug_blockCount,\n\t\t\t\t        file,\n\t\t\t\t        line);\n#if defined(_WIN32)\n\t\t\t\tOutputDebugStringA(mallocStr);\n#else\n\t\t\t\tDEBUG_TRACE(\"%s\", mallocStr);\n#endif\n\t\t\t\tmg_memory_debug_totalMemUsed += newsize;\n\t\t\t\tsprintf(mallocStr,\n\t\t\t\t        \"MEM: %p %5lu r-alloc %7lu %4lu --- %s:%u\\n\",\n\t\t\t\t        memory,\n\t\t\t\t        (unsigned long)newsize,\n\t\t\t\t        mg_memory_debug_totalMemUsed,\n\t\t\t\t        mg_memory_debug_blockCount,\n\t\t\t\t        file,\n\t\t\t\t        line);\n#if defined(_WIN32)\n\t\t\t\tOutputDebugStringA(mallocStr);\n#else\n\t\t\t\tDEBUG_TRACE(\"%s\", mallocStr);\n#endif\n\t\t\t\t*(size_t *)data = newsize;\n\t\t\t\tdata = (void *)(((char *)data) + sizeof(size_t));\n\t\t\t} else {\n#if defined(_WIN32)\n\t\t\t\tOutputDebugStringA(\"MEM: realloc failed\\n\");\n#else\n\t\t\t\tDEBUG_TRACE(\"%s\", \"MEM: realloc failed\\n\");\n#endif\n\t\t\t\treturn _realloc;\n\t\t\t}\n\t\t} else {\n\t\t\tdata = mg_malloc_ex(newsize, file, line);\n\t\t}\n\t} else {\n\t\tdata = 0;\n\t\tmg_free_ex(memory, file, line);\n\t}\n\n\treturn data;\n}\n\n#define mg_malloc(a) mg_malloc_ex(a, __FILE__, __LINE__)\n#define mg_calloc(a, b) mg_calloc_ex(a, b, __FILE__, __LINE__)\n#define mg_realloc(a, b) mg_realloc_ex(a, b, __FILE__, __LINE__)\n#define mg_free(a) mg_free_ex(a, __FILE__, __LINE__)\n\n#else\n\nstatic __inline void *\nmg_malloc(size_t a)\n{\n\treturn malloc(a);\n}\n\nstatic __inline void *\nmg_calloc(size_t a, size_t b)\n{\n\treturn calloc(a, b);\n}\n\nstatic __inline void *\nmg_realloc(void *a, size_t b)\n{\n\treturn realloc(a, b);\n}\n\nstatic __inline void\nmg_free(void *a)\n{\n\tfree(a);\n}\n\n#endif\n\n\nstatic void mg_vsnprintf(const struct mg_connection *conn,\n                         int *truncated,\n                         char *buf,\n                         size_t buflen,\n                         const char *fmt,\n                         va_list ap);\n\nstatic void mg_snprintf(const struct mg_connection *conn,\n                        int *truncated,\n                        char *buf,\n                        size_t buflen,\n                        PRINTF_FORMAT_STRING(const char *fmt),\n                        ...) PRINTF_ARGS(5, 6);\n\n/* This following lines are just meant as a reminder to use the mg-functions\n * for memory management */\n#ifdef malloc\n#undef malloc\n#endif\n#ifdef calloc\n#undef calloc\n#endif\n#ifdef realloc\n#undef realloc\n#endif\n#ifdef free\n#undef free\n#endif\n#ifdef snprintf\n#undef snprintf\n#endif\n#ifdef vsnprintf\n#undef vsnprintf\n#endif\n#define malloc DO_NOT_USE_THIS_FUNCTION__USE_mg_malloc\n#define calloc DO_NOT_USE_THIS_FUNCTION__USE_mg_calloc\n#define realloc DO_NOT_USE_THIS_FUNCTION__USE_mg_realloc\n#define free DO_NOT_USE_THIS_FUNCTION__USE_mg_free\n#define snprintf DO_NOT_USE_THIS_FUNCTION__USE_mg_snprintf\n#ifdef _WIN32 /* vsnprintf must not be used in any system, * \\ \\ \\             \\\n               * but this define only works well for Windows. */\n#define vsnprintf DO_NOT_USE_THIS_FUNCTION__USE_mg_vsnprintf\n#endif\n\n#define MD5_STATIC static\n#include \"md5.inl\"\n\n/* Darwin prior to 7.0 and Win32 do not have socklen_t */\n#ifdef NO_SOCKLEN_T\ntypedef int socklen_t;\n#endif /* NO_SOCKLEN_T */\n#define _DARWIN_UNLIMITED_SELECT\n\n#define IP_ADDR_STR_LEN (50) /* IPv6 hex string is 46 chars */\n\n#if !defined(MSG_NOSIGNAL)\n#define MSG_NOSIGNAL (0)\n#endif\n\n#if !defined(SOMAXCONN)\n#define SOMAXCONN (100)\n#endif\n\n/* Size of the accepted socket queue */\n#if !defined(MGSQLEN)\n#define MGSQLEN (20)\n#endif\n\n\n#if defined(NO_SSL)\ntypedef struct SSL SSL; /* dummy for SSL argument to push/pull */\ntypedef struct SSL_CTX SSL_CTX;\n#else\n#if defined(NO_SSL_DL)\n#include <openssl/ssl.h>\n#include <openssl/err.h>\n#include <openssl/crypto.h>\n#include <openssl/x509.h>\n#include <openssl/pem.h>\n#include <openssl/engine.h>\n#include <openssl/conf.h>\n#include <openssl/dh.h>\n#else\n/* SSL loaded dynamically from DLL.\n * I put the prototypes here to be independent from OpenSSL source\n * installation. */\n\ntypedef struct ssl_st SSL;\ntypedef struct ssl_method_st SSL_METHOD;\ntypedef struct ssl_ctx_st SSL_CTX;\ntypedef struct x509_store_ctx_st X509_STORE_CTX;\ntypedef struct x509_name X509_NAME;\ntypedef struct asn1_integer ASN1_INTEGER;\ntypedef struct evp_md EVP_MD;\ntypedef struct x509 X509;\n\n\n#define SSL_CTRL_OPTIONS (32)\n#define SSL_CTRL_CLEAR_OPTIONS (77)\n#define SSL_CTRL_SET_ECDH_AUTO (94)\n\n#define SSL_VERIFY_NONE (0)\n#define SSL_VERIFY_PEER (1)\n#define SSL_VERIFY_FAIL_IF_NO_PEER_CERT (2)\n#define SSL_VERIFY_CLIENT_ONCE (4)\n#define SSL_OP_ALL ((long)(0x80000BFFUL))\n#define SSL_OP_NO_SSLv2 (0x01000000L)\n#define SSL_OP_NO_SSLv3 (0x02000000L)\n#define SSL_OP_NO_TLSv1 (0x04000000L)\n#define SSL_OP_NO_TLSv1_2 (0x08000000L)\n#define SSL_OP_NO_TLSv1_1 (0x10000000L)\n#define SSL_OP_SINGLE_DH_USE (0x00100000L)\n#define SSL_OP_CIPHER_SERVER_PREFERENCE (0x00400000L)\n#define SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION (0x00010000L)\n\n#define SSL_ERROR_NONE (0)\n#define SSL_ERROR_SSL (1)\n#define SSL_ERROR_WANT_READ (2)\n#define SSL_ERROR_WANT_WRITE (3)\n#define SSL_ERROR_WANT_X509_LOOKUP (4)\n#define SSL_ERROR_SYSCALL (5) /* see errno */\n#define SSL_ERROR_ZERO_RETURN (6)\n#define SSL_ERROR_WANT_CONNECT (7)\n#define SSL_ERROR_WANT_ACCEPT (8)\n\n\nstruct ssl_func {\n\tconst char *name;  /* SSL function name */\n\tvoid (*ptr)(void); /* Function pointer */\n};\n\n#define SSL_free (*(void (*)(SSL *))ssl_sw[0].ptr)\n#define SSL_accept (*(int (*)(SSL *))ssl_sw[1].ptr)\n#define SSL_connect (*(int (*)(SSL *))ssl_sw[2].ptr)\n#define SSL_read (*(int (*)(SSL *, void *, int))ssl_sw[3].ptr)\n#define SSL_write (*(int (*)(SSL *, const void *, int))ssl_sw[4].ptr)\n#define SSL_get_error (*(int (*)(SSL *, int))ssl_sw[5].ptr)\n#define SSL_set_fd (*(int (*)(SSL *, SOCKET))ssl_sw[6].ptr)\n#define SSL_new (*(SSL * (*)(SSL_CTX *))ssl_sw[7].ptr)\n#define SSL_CTX_new (*(SSL_CTX * (*)(SSL_METHOD *))ssl_sw[8].ptr)\n#define SSLv23_server_method (*(SSL_METHOD * (*)(void))ssl_sw[9].ptr)\n#define SSL_library_init (*(int (*)(void))ssl_sw[10].ptr)\n#define SSL_CTX_use_PrivateKey_file                                            \\\n\t(*(int (*)(SSL_CTX *, const char *, int))ssl_sw[11].ptr)\n#define SSL_CTX_use_certificate_file                                           \\\n\t(*(int (*)(SSL_CTX *, const char *, int))ssl_sw[12].ptr)\n#define SSL_CTX_set_default_passwd_cb                                          \\\n\t(*(void (*)(SSL_CTX *, mg_callback_t))ssl_sw[13].ptr)\n#define SSL_CTX_free (*(void (*)(SSL_CTX *))ssl_sw[14].ptr)\n#define SSL_load_error_strings (*(void (*)(void))ssl_sw[15].ptr)\n#define SSL_CTX_use_certificate_chain_file                                     \\\n\t(*(int (*)(SSL_CTX *, const char *))ssl_sw[16].ptr)\n#define SSLv23_client_method (*(SSL_METHOD * (*)(void))ssl_sw[17].ptr)\n#define SSL_pending (*(int (*)(SSL *))ssl_sw[18].ptr)\n#define SSL_CTX_set_verify                                                     \\\n\t(*(void (*)(SSL_CTX *,                                                     \\\n\t            int,                                                           \\\n\t            int (*verify_callback)(int, X509_STORE_CTX *)))ssl_sw[19].ptr)\n#define SSL_shutdown (*(int (*)(SSL *))ssl_sw[20].ptr)\n#define SSL_CTX_load_verify_locations                                          \\\n\t(*(int (*)(SSL_CTX *, const char *, const char *))ssl_sw[21].ptr)\n#define SSL_CTX_set_default_verify_paths (*(int (*)(SSL_CTX *))ssl_sw[22].ptr)\n#define SSL_CTX_set_verify_depth (*(void (*)(SSL_CTX *, int))ssl_sw[23].ptr)\n#define SSL_get_peer_certificate (*(X509 * (*)(SSL *))ssl_sw[24].ptr)\n#define SSL_get_version (*(const char *(*)(SSL *))ssl_sw[25].ptr)\n#define SSL_get_current_cipher (*(SSL_CIPHER * (*)(SSL *))ssl_sw[26].ptr)\n#define SSL_CIPHER_get_name                                                    \\\n\t(*(const char *(*)(const SSL_CIPHER *))ssl_sw[27].ptr)\n#define SSL_CTX_check_private_key (*(int (*)(SSL_CTX *))ssl_sw[28].ptr)\n#define SSL_CTX_set_session_id_context                                         \\\n\t(*(int (*)(SSL_CTX *, const unsigned char *, unsigned int))ssl_sw[29].ptr)\n#define SSL_CTX_ctrl (*(long (*)(SSL_CTX *, int, long, void *))ssl_sw[30].ptr)\n\n\n#define SSL_CTX_set_cipher_list                                                \\\n\t(*(int (*)(SSL_CTX *, const char *))ssl_sw[31].ptr)\n#define SSL_CTX_set_options(ctx, op)                                           \\\n\tSSL_CTX_ctrl((ctx), SSL_CTRL_OPTIONS, (op), NULL)\n#define SSL_CTX_clear_options(ctx, op)                                         \\\n\tSSL_CTX_ctrl((ctx), SSL_CTRL_CLEAR_OPTIONS, (op), NULL)\n#define SSL_CTX_set_ecdh_auto(ctx, onoff)                                      \\\n\tSSL_CTX_ctrl(ctx, SSL_CTRL_SET_ECDH_AUTO, onoff, NULL)\n\n#define X509_get_notBefore(x) ((x)->cert_info->validity->notBefore)\n#define X509_get_notAfter(x) ((x)->cert_info->validity->notAfter)\n\n\n#define CRYPTO_num_locks (*(int (*)(void))crypto_sw[0].ptr)\n#define CRYPTO_set_locking_callback                                            \\\n\t(*(void (*)(void (*)(int, int, const char *, int)))crypto_sw[1].ptr)\n#define CRYPTO_set_id_callback                                                 \\\n\t(*(void (*)(unsigned long (*)(void)))crypto_sw[2].ptr)\n#define ERR_get_error (*(unsigned long (*)(void))crypto_sw[3].ptr)\n#define ERR_error_string (*(char *(*)(unsigned long, char *))crypto_sw[4].ptr)\n#define ERR_remove_state (*(void (*)(unsigned long))crypto_sw[5].ptr)\n#define ERR_free_strings (*(void (*)(void))crypto_sw[6].ptr)\n#define ENGINE_cleanup (*(void (*)(void))crypto_sw[7].ptr)\n#define CONF_modules_unload (*(void (*)(int))crypto_sw[8].ptr)\n#define CRYPTO_cleanup_all_ex_data (*(void (*)(void))crypto_sw[9].ptr)\n#define EVP_cleanup (*(void (*)(void))crypto_sw[10].ptr)\n#define X509_free (*(void (*)(X509 *))crypto_sw[11].ptr)\n#define X509_get_subject_name (*(X509_NAME * (*)(X509 *))crypto_sw[12].ptr)\n#define X509_get_issuer_name (*(X509_NAME * (*)(X509 *))crypto_sw[13].ptr)\n#define X509_NAME_oneline                                                      \\\n\t(*(char *(*)(X509_NAME *, char *, int))crypto_sw[14].ptr)\n#define X509_get_serialNumber (*(ASN1_INTEGER * (*)(X509 *))crypto_sw[15].ptr)\n#define i2c_ASN1_INTEGER                                                       \\\n\t(*(int (*)(ASN1_INTEGER *, unsigned char **))crypto_sw[16].ptr)\n#define EVP_get_digestbyname                                                   \\\n\t(*(const EVP_MD *(*)(const char *))crypto_sw[17].ptr)\n#define ASN1_digest                                                            \\\n\t(*(int (*)(int (*)(),                                                      \\\n\t           const EVP_MD *,                                                 \\\n\t           char *,                                                         \\\n\t           unsigned char *,                                                \\\n\t           unsigned int *))crypto_sw[18].ptr)\n#define i2d_X509 (*(int (*)(X509 *, unsigned char **))crypto_sw[19].ptr)\n\n\n/* set_ssl_option() function updates this array.\n * It loads SSL library dynamically and changes NULLs to the actual addresses\n * of respective functions. The macros above (like SSL_connect()) are really\n * just calling these functions indirectly via the pointer. */\nstatic struct ssl_func ssl_sw[] = {{\"SSL_free\", NULL},\n                                   {\"SSL_accept\", NULL},\n                                   {\"SSL_connect\", NULL},\n                                   {\"SSL_read\", NULL},\n                                   {\"SSL_write\", NULL},\n                                   {\"SSL_get_error\", NULL},\n                                   {\"SSL_set_fd\", NULL},\n                                   {\"SSL_new\", NULL},\n                                   {\"SSL_CTX_new\", NULL},\n                                   {\"SSLv23_server_method\", NULL},\n                                   {\"SSL_library_init\", NULL},\n                                   {\"SSL_CTX_use_PrivateKey_file\", NULL},\n                                   {\"SSL_CTX_use_certificate_file\", NULL},\n                                   {\"SSL_CTX_set_default_passwd_cb\", NULL},\n                                   {\"SSL_CTX_free\", NULL},\n                                   {\"SSL_load_error_strings\", NULL},\n                                   {\"SSL_CTX_use_certificate_chain_file\", NULL},\n                                   {\"SSLv23_client_method\", NULL},\n                                   {\"SSL_pending\", NULL},\n                                   {\"SSL_CTX_set_verify\", NULL},\n                                   {\"SSL_shutdown\", NULL},\n                                   {\"SSL_CTX_load_verify_locations\", NULL},\n                                   {\"SSL_CTX_set_default_verify_paths\", NULL},\n                                   {\"SSL_CTX_set_verify_depth\", NULL},\n                                   {\"SSL_get_peer_certificate\", NULL},\n                                   {\"SSL_get_version\", NULL},\n                                   {\"SSL_get_current_cipher\", NULL},\n                                   {\"SSL_CIPHER_get_name\", NULL},\n                                   {\"SSL_CTX_check_private_key\", NULL},\n                                   {\"SSL_CTX_set_session_id_context\", NULL},\n                                   {\"SSL_CTX_ctrl\", NULL},\n                                   {\"SSL_CTX_set_cipher_list\", NULL},\n                                   {NULL, NULL}};\n\n\n/* Similar array as ssl_sw. These functions could be located in different\n * lib. */\nstatic struct ssl_func crypto_sw[] = {{\"CRYPTO_num_locks\", NULL},\n                                      {\"CRYPTO_set_locking_callback\", NULL},\n                                      {\"CRYPTO_set_id_callback\", NULL},\n                                      {\"ERR_get_error\", NULL},\n                                      {\"ERR_error_string\", NULL},\n                                      {\"ERR_remove_state\", NULL},\n                                      {\"ERR_free_strings\", NULL},\n                                      {\"ENGINE_cleanup\", NULL},\n                                      {\"CONF_modules_unload\", NULL},\n                                      {\"CRYPTO_cleanup_all_ex_data\", NULL},\n                                      {\"EVP_cleanup\", NULL},\n                                      {\"X509_free\", NULL},\n                                      {\"X509_get_subject_name\", NULL},\n                                      {\"X509_get_issuer_name\", NULL},\n                                      {\"X509_NAME_oneline\", NULL},\n                                      {\"X509_get_serialNumber\", NULL},\n                                      {\"i2c_ASN1_INTEGER\", NULL},\n                                      {\"EVP_get_digestbyname\", NULL},\n                                      {\"ASN1_digest\", NULL},\n                                      {\"i2d_X509\", NULL},\n                                      {NULL, NULL}};\n#endif /* NO_SSL_DL */\n#endif /* NO_SSL */\n\n\n#if !defined(NO_CACHING)\nstatic const char *month_names[] = {\"Jan\",\n                                    \"Feb\",\n                                    \"Mar\",\n                                    \"Apr\",\n                                    \"May\",\n                                    \"Jun\",\n                                    \"Jul\",\n                                    \"Aug\",\n                                    \"Sep\",\n                                    \"Oct\",\n                                    \"Nov\",\n                                    \"Dec\"};\n#endif /* !NO_CACHING */\n\n/* Unified socket address. For IPv6 support, add IPv6 address structure in the\n * union u. */\nunion usa {\n\tstruct sockaddr sa;\n\tstruct sockaddr_in sin;\n#if defined(USE_IPV6)\n\tstruct sockaddr_in6 sin6;\n#endif\n};\n\n/* Describes a string (chunk of memory). */\nstruct vec {\n\tconst char *ptr;\n\tsize_t len;\n};\n\nstruct mg_file_stat {\n\t/* File properties filled by mg_stat: */\n\tuint64_t size;\n\ttime_t last_modified;\n\tint is_directory; /* Set to 1 if mg_stat is called for a directory */\n\tint is_gzipped;   /* Set to 1 if the content is gzipped, in which\n\t                   * case we need a \"Content-Eencoding: gzip\" header */\n\tint location;     /* 0 = nowhere, 1 = on disk, 2 = in memory */\n};\n\nstruct mg_file_in_memory {\n\tchar *p;\n\tuint32_t pos;\n\tchar mode;\n};\n\nstruct mg_file_access {\n\t/* File properties filled by mg_fopen: */\n\tFILE *fp;\n\t/* TODO: struct mg_file_in_memory *mf; */\n\tconst char *membuf; /* TODO: remove */\n};\n\nstruct mg_file {\n\tstruct mg_file_stat stat;\n\tstruct mg_file_access access;\n};\n\n#define STRUCT_FILE_INITIALIZER                                                \\\n\t{                                                                          \\\n\t\t{                                                                      \\\n\t\t\t(uint64_t)0, (time_t)0, 0, 0, 0                                    \\\n\t\t}                                                                      \\\n\t\t,                                                                      \\\n\t\t{                                                                      \\\n\t\t\t(FILE *) NULL, (const char *)NULL                                  \\\n\t\t}                                                                      \\\n\t}\n\n/* Describes listening socket, or socket which was accept()-ed by the master\n * thread and queued for future handling by the worker thread. */\nstruct socket {\n\tSOCKET sock;             /* Listening socket */\n\tunion usa lsa;           /* Local socket address */\n\tunion usa rsa;           /* Remote socket address */\n\tunsigned char is_ssl;    /* Is port SSL-ed */\n\tunsigned char ssl_redir; /* Is port supposed to redirect everything to SSL\n\t                          * port */\n\tunsigned char in_use;    /* Is valid */\n};\n\n/* NOTE(lsm): this enum shoulds be in sync with the config_options below. */\nenum {\n\tCGI_EXTENSIONS,\n\tCGI_ENVIRONMENT,\n\tPUT_DELETE_PASSWORDS_FILE,\n\tCGI_INTERPRETER,\n\tPROTECT_URI,\n\tAUTHENTICATION_DOMAIN,\n\tSSI_EXTENSIONS,\n\tTHROTTLE,\n\tACCESS_LOG_FILE,\n\tENABLE_DIRECTORY_LISTING,\n\tERROR_LOG_FILE,\n\tGLOBAL_PASSWORDS_FILE,\n\tINDEX_FILES,\n\tENABLE_KEEP_ALIVE,\n\tACCESS_CONTROL_LIST,\n\tEXTRA_MIME_TYPES,\n\tLISTENING_PORTS,\n\tDOCUMENT_ROOT,\n\tSSL_CERTIFICATE,\n\tNUM_THREADS,\n\tRUN_AS_USER,\n\tREWRITE,\n\tHIDE_FILES,\n\tREQUEST_TIMEOUT,\n\tKEEP_ALIVE_TIMEOUT,\n\tSSL_DO_VERIFY_PEER,\n\tSSL_CA_PATH,\n\tSSL_CA_FILE,\n\tSSL_VERIFY_DEPTH,\n\tSSL_DEFAULT_VERIFY_PATHS,\n\tSSL_CIPHER_LIST,\n\tSSL_PROTOCOL_VERSION,\n\tSSL_SHORT_TRUST,\n\n#if defined(USE_WEBSOCKET)\n\tWEBSOCKET_TIMEOUT,\n#endif\n\n\tDECODE_URL,\n\n#if defined(USE_LUA)\n\tLUA_PRELOAD_FILE,\n\tLUA_SCRIPT_EXTENSIONS,\n\tLUA_SERVER_PAGE_EXTENSIONS,\n#endif\n#if defined(USE_DUKTAPE)\n\tDUKTAPE_SCRIPT_EXTENSIONS,\n#endif\n\n#if defined(USE_WEBSOCKET)\n\tWEBSOCKET_ROOT,\n#endif\n#if defined(USE_LUA) && defined(USE_WEBSOCKET)\n\tLUA_WEBSOCKET_EXTENSIONS,\n#endif\n\n\tACCESS_CONTROL_ALLOW_ORIGIN,\n\tERROR_PAGES,\n\tCONFIG_TCP_NODELAY, /* Prepended CONFIG_ to avoid conflict with the\n                         * socket option typedef TCP_NODELAY. */\n#if !defined(NO_CACHING)\n\tSTATIC_FILE_MAX_AGE,\n#endif\n#if defined(__linux__)\n\tALLOW_SENDFILE_CALL,\n#endif\n#if defined(_WIN32)\n\tCASE_SENSITIVE_FILES,\n#endif\n\n\tNUM_OPTIONS\n};\n\n\n/* Config option name, config types, default value */\nstatic struct mg_option config_options[] = {\n    {\"cgi_pattern\", CONFIG_TYPE_EXT_PATTERN, \"**.cgi$|**.pl$|**.php$\"},\n    {\"cgi_environment\", CONFIG_TYPE_STRING, NULL},\n    {\"put_delete_auth_file\", CONFIG_TYPE_FILE, NULL},\n    {\"cgi_interpreter\", CONFIG_TYPE_FILE, NULL},\n    {\"protect_uri\", CONFIG_TYPE_STRING, NULL},\n    {\"authentication_domain\", CONFIG_TYPE_STRING, \"mydomain.com\"},\n    {\"ssi_pattern\", CONFIG_TYPE_EXT_PATTERN, \"**.shtml$|**.shtm$\"},\n    {\"throttle\", CONFIG_TYPE_STRING, NULL},\n    {\"access_log_file\", CONFIG_TYPE_FILE, NULL},\n    {\"enable_directory_listing\", CONFIG_TYPE_BOOLEAN, \"yes\"},\n    {\"error_log_file\", CONFIG_TYPE_FILE, NULL},\n    {\"global_auth_file\", CONFIG_TYPE_FILE, NULL},\n    {\"index_files\",\n     CONFIG_TYPE_STRING,\n#ifdef USE_LUA\n     \"index.xhtml,index.html,index.htm,index.lp,index.lsp,index.lua,index.cgi,\"\n     \"index.shtml,index.php\"},\n#else\n     \"index.xhtml,index.html,index.htm,index.cgi,index.shtml,index.php\"},\n#endif\n    {\"enable_keep_alive\", CONFIG_TYPE_BOOLEAN, \"no\"},\n    {\"access_control_list\", CONFIG_TYPE_STRING, NULL},\n    {\"extra_mime_types\", CONFIG_TYPE_STRING, NULL},\n    {\"listening_ports\", CONFIG_TYPE_STRING, \"8080\"},\n    {\"document_root\", CONFIG_TYPE_DIRECTORY, NULL},\n    {\"ssl_certificate\", CONFIG_TYPE_FILE, NULL},\n    {\"num_threads\", CONFIG_TYPE_NUMBER, \"50\"},\n    {\"run_as_user\", CONFIG_TYPE_STRING, NULL},\n    {\"url_rewrite_patterns\", CONFIG_TYPE_STRING, NULL},\n    {\"hide_files_patterns\", CONFIG_TYPE_EXT_PATTERN, NULL},\n    {\"request_timeout_ms\", CONFIG_TYPE_NUMBER, \"30000\"},\n    {\"keep_alive_timeout_ms\", CONFIG_TYPE_NUMBER, \"500\"},\n    {\"ssl_verify_peer\", CONFIG_TYPE_BOOLEAN, \"no\"},\n    {\"ssl_ca_path\", CONFIG_TYPE_DIRECTORY, NULL},\n    {\"ssl_ca_file\", CONFIG_TYPE_FILE, NULL},\n    {\"ssl_verify_depth\", CONFIG_TYPE_NUMBER, \"9\"},\n    {\"ssl_default_verify_paths\", CONFIG_TYPE_BOOLEAN, \"yes\"},\n    {\"ssl_cipher_list\", CONFIG_TYPE_STRING, NULL},\n    {\"ssl_protocol_version\", CONFIG_TYPE_NUMBER, \"0\"},\n    {\"ssl_short_trust\", CONFIG_TYPE_BOOLEAN, \"no\"},\n#if defined(USE_WEBSOCKET)\n    {\"websocket_timeout_ms\", CONFIG_TYPE_NUMBER, \"30000\"},\n#endif\n    {\"decode_url\", CONFIG_TYPE_BOOLEAN, \"yes\"},\n\n#if defined(USE_LUA)\n    {\"lua_preload_file\", CONFIG_TYPE_FILE, NULL},\n    {\"lua_script_pattern\", CONFIG_TYPE_EXT_PATTERN, \"**.lua$\"},\n    {\"lua_server_page_pattern\", CONFIG_TYPE_EXT_PATTERN, \"**.lp$|**.lsp$\"},\n#endif\n#if defined(USE_DUKTAPE)\n    /* The support for duktape is still in alpha version state.\n     * The name of this config option might change. */\n    {\"duktape_script_pattern\", CONFIG_TYPE_EXT_PATTERN, \"**.ssjs$\"},\n#endif\n\n#if defined(USE_WEBSOCKET)\n    {\"websocket_root\", CONFIG_TYPE_DIRECTORY, NULL},\n#endif\n#if defined(USE_LUA) && defined(USE_WEBSOCKET)\n    {\"lua_websocket_pattern\", CONFIG_TYPE_EXT_PATTERN, \"**.lua$\"},\n#endif\n    {\"access_control_allow_origin\", CONFIG_TYPE_STRING, \"*\"},\n    {\"error_pages\", CONFIG_TYPE_DIRECTORY, NULL},\n    {\"tcp_nodelay\", CONFIG_TYPE_NUMBER, \"0\"},\n#if !defined(NO_CACHING)\n    {\"static_file_max_age\", CONFIG_TYPE_NUMBER, \"3600\"},\n#endif\n#if defined(__linux__)\n    {\"allow_sendfile_call\", CONFIG_TYPE_BOOLEAN, \"yes\"},\n#endif\n#if defined(_WIN32)\n    {\"case_sensitive\", CONFIG_TYPE_BOOLEAN, \"no\"},\n#endif\n\n    {NULL, CONFIG_TYPE_UNKNOWN, NULL}};\n\n/* Check if the config_options and the corresponding enum have compatible\n * sizes. */\nmg_static_assert((sizeof(config_options) / sizeof(config_options[0]))\n                     == (NUM_OPTIONS + 1),\n                 \"config_options and enum not sync\");\n\nenum { REQUEST_HANDLER, WEBSOCKET_HANDLER, AUTH_HANDLER };\n\nstruct mg_handler_info {\n\t/* Name/Pattern of the URI. */\n\tchar *uri;\n\tsize_t uri_len;\n\n\t/* handler type */\n\tint handler_type;\n\n\t/* Handler for http/https or authorization requests. */\n\tmg_request_handler handler;\n\n\t/* Handler for ws/wss (websocket) requests. */\n\tmg_websocket_connect_handler connect_handler;\n\tmg_websocket_ready_handler ready_handler;\n\tmg_websocket_data_handler data_handler;\n\tmg_websocket_close_handler close_handler;\n\n\t/* accepted subprotocols for ws/wss requests. */\n\tstruct mg_websocket_subprotocols *subprotocols;\n\n\t/* Handler for authorization requests */\n\tmg_authorization_handler auth_handler;\n\n\t/* User supplied argument for the handler function. */\n\tvoid *cbdata;\n\n\t/* next handler in a linked list */\n\tstruct mg_handler_info *next;\n};\n\nstruct mg_context {\n\tvolatile int stop_flag;        /* Should we stop event loop */\n\tSSL_CTX *ssl_ctx;              /* SSL context */\n\tchar *config[NUM_OPTIONS];     /* Civetweb configuration parameters */\n\tstruct mg_callbacks callbacks; /* User-defined callback function */\n\tvoid *user_data;               /* User-defined data */\n\tint context_type;              /* 1 = server context,\n\t                                * 2 = ws/wss client context,\n\t                                */\n\n\tstruct socket *listening_sockets;\n\tstruct pollfd *listening_socket_fds;\n\tunsigned int num_listening_sockets;\n\n\tpthread_mutex_t thread_mutex; /* Protects (max|num)_threads */\n\n#ifdef ALTERNATIVE_QUEUE\n\tstruct socket *client_socks;\n\tvoid **client_wait_events;\n#else\n\tstruct socket queue[MGSQLEN]; /* Accepted sockets */\n\tvolatile int sq_head;         /* Head of the socket queue */\n\tvolatile int sq_tail;         /* Tail of the socket queue */\n\tpthread_cond_t sq_full;       /* Signaled when socket is produced */\n\tpthread_cond_t sq_empty;      /* Signaled when socket is consumed */\n#endif\n\n\tpthread_t masterthreadid; /* The master thread ID */\n\tunsigned int\n\t    cfg_worker_threads;     /* The number of configured worker threads. */\n\tpthread_t *workerthreadids; /* The worker thread IDs */\n\n\ttime_t start_time;        /* Server start time, used for authentication */\n\tuint64_t auth_nonce_mask; /* Mask for all nonce values */\n\tpthread_mutex_t nonce_mutex; /* Protects nonce_count */\n\tunsigned long nonce_count;   /* Used nonces, used for authentication */\n\n\tchar *systemName; /* What operating system is running */\n\n\t/* linked list of uri handlers */\n\tstruct mg_handler_info *handlers;\n\n#if defined(USE_LUA) && defined(USE_WEBSOCKET)\n\t/* linked list of shared lua websockets */\n\tstruct mg_shared_lua_websocket_list *shared_lua_websockets;\n#endif\n\n#ifdef USE_TIMERS\n\tstruct ttimers *timers;\n#endif\n};\n\n\nstruct mg_connection {\n\tstruct mg_request_info request_info;\n\tstruct mg_context *ctx;\n\tSSL *ssl;                 /* SSL descriptor */\n\tSSL_CTX *client_ssl_ctx;  /* SSL context for client connections */\n\tstruct socket client;     /* Connected client */\n\ttime_t conn_birth_time;   /* Time (wall clock) when connection was\n\t                           * established */\n\tstruct timespec req_time; /* Time (since system start) when the request\n\t                           * was received */\n\tint64_t num_bytes_sent;   /* Total bytes sent to client */\n\tint64_t content_len;      /* Content-Length header value */\n\tint64_t consumed_content; /* How many bytes of content have been read */\n\tint is_chunked;           /* Transfer-Encoding is chunked: 0=no, 1=yes:\n\t                           * data available, 2: all data read */\n\tsize_t chunk_remainder;   /* Unread data from the last chunk */\n\tchar *buf;                /* Buffer for received data */\n\tchar *path_info;          /* PATH_INFO part of the URL */\n\n\tint must_close;       /* 1 if connection must be closed */\n\tint in_error_handler; /* 1 if in handler for user defined error\n\t                       * pages */\n\tint handled_requests; /* Number of requests handled by this connection */\n\tint buf_size;         /* Buffer size */\n\tint request_len;      /* Size of the request + headers in a buffer */\n\tint data_len;         /* Total size of data in a buffer */\n\tint status_code;      /* HTTP reply status code, e.g. 200 */\n\tint throttle;         /* Throttling, bytes/sec. <= 0 means no\n\t                       * throttle */\n\ttime_t last_throttle_time;   /* Last time throttled data was sent */\n\tint64_t last_throttle_bytes; /* Bytes sent this second */\n\tpthread_mutex_t mutex;       /* Used by mg_(un)lock_connection to ensure\n\t                              * atomic transmissions for websockets */\n#if defined(USE_LUA) && defined(USE_WEBSOCKET)\n\tvoid *lua_websocket_state; /* Lua_State for a websocket connection */\n#endif\n\n\tint thread_index; /* Thread index within ctx */\n};\n\n\nstatic pthread_key_t sTlsKey; /* Thread local storage index */\nstatic int sTlsInit = 0;\nstatic int thread_idx_max = 0;\n\n\nstruct mg_workerTLS {\n\tint is_master;\n\tunsigned long thread_idx;\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\tHANDLE pthread_cond_helper_mutex;\n\tstruct mg_workerTLS *next_waiting_thread;\n#endif\n};\n\n/* Directory entry */\nstruct de {\n\tstruct mg_connection *conn;\n\tchar *file_name;\n\tstruct mg_file_stat file;\n};\n\n\n#if defined(USE_WEBSOCKET)\nstatic int is_websocket_protocol(const struct mg_connection *conn);\n#else\n#define is_websocket_protocol(conn) (0)\n#endif\n\n\nstatic int\nmg_atomic_inc(volatile int *addr)\n{\n\tint ret;\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\t/* Depending on the SDK, this function uses either\n\t * (volatile unsigned int *) or (volatile LONG *),\n\t * so whatever you use, the other SDK is likely to raise a warning. */\n\tret = InterlockedIncrement((volatile long *)addr);\n#elif defined(__GNUC__)                                                        \\\n    && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 0)))\n\tret = __sync_add_and_fetch(addr, 1);\n#else\n\tret = (++(*addr));\n#endif\n\treturn ret;\n}\n\n\nstatic int\nmg_atomic_dec(volatile int *addr)\n{\n\tint ret;\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\t/* Depending on the SDK, this function uses either\n\t * (volatile unsigned int *) or (volatile LONG *),\n\t * so whatever you use, the other SDK is likely to raise a warning. */\n\tret = InterlockedDecrement((volatile long *)addr);\n#elif defined(__GNUC__)                                                        \\\n    && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 0)))\n\tret = __sync_sub_and_fetch(addr, 1);\n#else\n\tret = (--(*addr));\n#endif\n\treturn ret;\n}\n\n#if !defined(NO_THREAD_NAME)\n#if defined(_WIN32) && defined(_MSC_VER)\n/* Set the thread name for debugging purposes in Visual Studio\n * http://msdn.microsoft.com/en-us/library/xcb2z8hs.aspx\n */\n#pragma pack(push, 8)\ntypedef struct tagTHREADNAME_INFO {\n\tDWORD dwType;     /* Must be 0x1000. */\n\tLPCSTR szName;    /* Pointer to name (in user addr space). */\n\tDWORD dwThreadID; /* Thread ID (-1=caller thread). */\n\tDWORD dwFlags;    /* Reserved for future use, must be zero. */\n} THREADNAME_INFO;\n#pragma pack(pop)\n\n#elif defined(__linux__)\n\n#include <sys/prctl.h>\n#include <sys/sendfile.h>\n#include <sys/eventfd.h>\n\n\n#if defined(ALTERNATIVE_QUEUE)\n\nstatic void *\nevent_create(void)\n{\n\tint ret = eventfd(0, EFD_CLOEXEC);\n\tif (ret == -1) {\n\t\t/* Linux uses -1 on error, Windows NULL. */\n\t\t/* However, Linux does not return 0 on success either. */\n\t\treturn 0;\n\t}\n\treturn (void *)ret;\n}\n\n\nstatic int\nevent_wait(void *eventhdl)\n{\n\tuint64_t u;\n\tint s = (int)read((int)eventhdl, &u, sizeof(u));\n\tif (s != sizeof(uint64_t)) {\n\t\t/* error */\n\t\treturn 0;\n\t}\n\t(void)u; /* the value is not required */\n\treturn 1;\n}\n\n\nstatic int\nevent_signal(void *eventhdl)\n{\n\tuint64_t u = 1;\n\tint s = (int)write((int)eventhdl, &u, sizeof(u));\n\tif (s != sizeof(uint64_t)) {\n\t\t/* error */\n\t\treturn 0;\n\t}\n\treturn 1;\n}\n\n\nstatic void\nevent_destroy(void *eventhdl)\n{\n\tclose((int)eventhdl);\n}\n#endif\n\n#endif\n\n\n#if !defined(__linux__) && !defined(_WIN32) && defined(ALTERNATIVE_QUEUE)\n\nstruct posix_event {\n\tpthread_mutex_t mutex;\n\tpthread_cond_t cond;\n};\n\n\nstatic void *\nevent_create(void)\n{\n\tstruct posix_event *ret = mg_malloc(sizeof(struct posix_event));\n\tif (ret == 0) {\n\t\t/* out of memory */\n\t\treturn 0;\n\t}\n\tif (0 != pthread_mutex_init(&(ret->mutex), NULL)) {\n\t\t/* pthread mutex not available */\n\t\tmg_free(ret);\n\t\treturn 0;\n\t}\n\tif (0 != pthread_cond_init(&(ret->cond), NULL)) {\n\t\t/* pthread cond not available */\n\t\tpthread_mutex_destroy(&(ret->mutex));\n\t\tmg_free(ret);\n\t\treturn 0;\n\t}\n\treturn (void *)ret;\n}\n\n\nstatic int\nevent_wait(void *eventhdl)\n{\n\tstruct posix_event *ev = (struct posix_event *)eventhdl;\n\tpthread_mutex_lock(&(ev->mutex));\n\tpthread_cond_wait(&(ev->cond), &(ev->mutex));\n\tpthread_mutex_unlock(&(ev->mutex));\n\treturn 1;\n}\n\n\nstatic int\nevent_signal(void *eventhdl)\n{\n\tstruct posix_event *ev = (struct posix_event *)eventhdl;\n\tpthread_mutex_lock(&(ev->mutex));\n\tpthread_cond_signal(&(ev->cond));\n\tpthread_mutex_unlock(&(ev->mutex));\n\treturn 1;\n}\n\n\nstatic void\nevent_destroy(void *eventhdl)\n{\n\tstruct posix_event *ev = (struct posix_event *)eventhdl;\n\tpthread_cond_destroy(&(ev->cond));\n\tpthread_mutex_destroy(&(ev->mutex));\n\tmg_free(ev);\n}\n#endif\n\n\nstatic void\nmg_set_thread_name(const char *name)\n{\n\tchar threadName[16 + 1]; /* 16 = Max. thread length in Linux/OSX/.. */\n\n\tmg_snprintf(\n\t    NULL, NULL, threadName, sizeof(threadName), \"civetweb-%s\", name);\n\n#if defined(_WIN32)\n#if defined(_MSC_VER)\n\t/* Windows and Visual Studio Compiler */\n\t__try\n\t{\n\t\tTHREADNAME_INFO info;\n\t\tinfo.dwType = 0x1000;\n\t\tinfo.szName = threadName;\n\t\tinfo.dwThreadID = ~0U;\n\t\tinfo.dwFlags = 0;\n\n\t\tRaiseException(0x406D1388,\n\t\t               0,\n\t\t               sizeof(info) / sizeof(ULONG_PTR),\n\t\t               (ULONG_PTR *)&info);\n\t}\n\t__except(EXCEPTION_EXECUTE_HANDLER)\n\t{\n\t}\n#elif defined(__MINGW32__)\n/* No option known to set thread name for MinGW */\n#endif\n#elif defined(__GLIBC__)                                                       \\\n    && ((__GLIBC__ > 2) || ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 12)))\n\t/* pthread_setname_np first appeared in glibc in version 2.12*/\n\t(void)pthread_setname_np(pthread_self(), threadName);\n#elif defined(__linux__)\n\t/* on linux we can use the old prctl function */\n\t(void)prctl(PR_SET_NAME, threadName, 0, 0, 0);\n#endif\n}\n#else /* !defined(NO_THREAD_NAME) */\nvoid\nmg_set_thread_name(const char *threadName)\n{\n}\n#endif\n\n\n#if defined(MG_LEGACY_INTERFACE)\nconst char **\nmg_get_valid_option_names(void)\n{\n\t/* This function is deprecated. Use mg_get_valid_options instead. */\n\tstatic const char *\n\t    data[2 * sizeof(config_options) / sizeof(config_options[0])] = {0};\n\tint i;\n\n\tfor (i = 0; config_options[i].name != NULL; i++) {\n\t\tdata[i * 2] = config_options[i].name;\n\t\tdata[i * 2 + 1] = config_options[i].default_value;\n\t}\n\n\treturn data;\n}\n#endif\n\n\nconst struct mg_option *\nmg_get_valid_options(void)\n{\n\treturn config_options;\n}\n\n\n/* Do not open file (used in is_file_in_memory) */\n#define MG_FOPEN_MODE_NONE (0)\n\n/* Open file for read only access */\n#define MG_FOPEN_MODE_READ (1)\n\n/* Open file for writing, create and overwrite */\n#define MG_FOPEN_MODE_WRITE (2)\n\n/* Open file for writing, create and append */\n#define MG_FOPEN_MODE_APPEND (4)\n\n\n/* If a file is in memory, set all \"stat\" members and the membuf pointer of\n * output filep and return 1, otherwise return 0 and don't modify anything. */\nstatic int\nopen_file_in_memory(const struct mg_connection *conn,\n                    const char *path,\n                    struct mg_file *filep,\n                    int mode)\n{\n\tsize_t size = 0;\n\tconst char *buf = NULL;\n\tif (!conn) {\n\t\treturn 0;\n\t}\n\n\tif ((mode != MG_FOPEN_MODE_NONE) && (mode != MG_FOPEN_MODE_READ)) {\n\t\treturn 0;\n\t}\n\n\tif (conn->ctx->callbacks.open_file) {\n\t\tbuf = conn->ctx->callbacks.open_file(conn, path, &size);\n\t\tif (buf != NULL) {\n\t\t\tif (filep == NULL) {\n\t\t\t\t/* This is a file in memory, but we cannot store the properties\n\t\t\t\t * now.\n\t\t\t\t * Called from \"is_file_in_memory\" function. */\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t/* NOTE: override filep->size only on success. Otherwise, it might\n\t\t\t * break constructs like if (!mg_stat() || !mg_fopen()) ... */\n\t\t\tfilep->access.membuf = buf;\n\t\t\tfilep->access.fp = NULL;\n\n\t\t\t/* Size was set by the callback */\n\t\t\tfilep->stat.size = size;\n\n\t\t\t/* Assume the data may change during runtime by setting\n\t\t\t * last_modified = now */\n\t\t\tfilep->stat.last_modified = time(NULL);\n\n\t\t\tfilep->stat.is_directory = 0;\n\t\t\tfilep->stat.is_gzipped = 0;\n\t\t}\n\t}\n\n\treturn (buf != NULL);\n}\n\n\nstatic int\nis_file_in_memory(const struct mg_connection *conn, const char *path)\n{\n\treturn open_file_in_memory(conn, path, NULL, MG_FOPEN_MODE_NONE);\n}\n\n\nstatic int\nis_file_opened(const struct mg_file_access *fileacc)\n{\n\tif (!fileacc) {\n\t\treturn 0;\n\t}\n\treturn (fileacc->membuf != NULL) || (fileacc->fp != NULL);\n}\n\n\nstatic int mg_stat(const struct mg_connection *conn,\n                   const char *path,\n                   struct mg_file_stat *filep);\n\n\n/* mg_fopen will open a file either in memory or on the disk.\n * The input parameter path is a string in UTF-8 encoding.\n * The input parameter mode is MG_FOPEN_MODE_*\n * On success, either fp or membuf will be set in the output\n * struct file. All status members will also be set.\n * The function returns 1 on success, 0 on error. */\nstatic int\nmg_fopen(const struct mg_connection *conn,\n         const char *path,\n         int mode,\n         struct mg_file *filep)\n{\n\tint found;\n\n\tif (!filep) {\n\t\treturn 0;\n\t}\n\tfilep->access.fp = NULL;\n\tfilep->access.membuf = NULL;\n\n\tif (!is_file_in_memory(conn, path)) {\n\n\t\t/* filep is initialized in mg_stat: all fields with memset to,\n\t\t* some fields like size and modification date with values */\n\t\tfound = mg_stat(conn, path, &(filep->stat));\n\n\t\tif ((mode == MG_FOPEN_MODE_READ) && (!found)) {\n\t\t\t/* file does not exist and will not be created */\n\t\t\treturn 0;\n\t\t}\n\n#ifdef _WIN32\n\t\t{\n\t\t\twchar_t wbuf[PATH_MAX];\n\t\t\tpath_to_unicode(conn, path, wbuf, ARRAY_SIZE(wbuf));\n\t\t\tswitch (mode) {\n\t\t\tcase MG_FOPEN_MODE_READ:\n\t\t\t\tfilep->access.fp = _wfopen(wbuf, L\"rb\");\n\t\t\t\tbreak;\n\t\t\tcase MG_FOPEN_MODE_WRITE:\n\t\t\t\tfilep->access.fp = _wfopen(wbuf, L\"wb\");\n\t\t\t\tbreak;\n\t\t\tcase MG_FOPEN_MODE_APPEND:\n\t\t\t\tfilep->access.fp = _wfopen(wbuf, L\"ab\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n#else\n\t\t/* Linux et al already use unicode. No need to convert. */\n\t\tswitch (mode) {\n\t\tcase MG_FOPEN_MODE_READ:\n\t\t\tfilep->access.fp = fopen(path, \"r\");\n\t\t\tbreak;\n\t\tcase MG_FOPEN_MODE_WRITE:\n\t\t\tfilep->access.fp = fopen(path, \"w\");\n\t\t\tbreak;\n\t\tcase MG_FOPEN_MODE_APPEND:\n\t\t\tfilep->access.fp = fopen(path, \"a\");\n\t\t\tbreak;\n\t\t}\n\n#endif\n\t\tif (!found) {\n\t\t\t/* File did not exist before fopen was called.\n\t\t\t * Maybe it has been created now. Get stat info\n\t\t\t * like creation time now. */\n\t\t\tfound = mg_stat(conn, path, &(filep->stat));\n\t\t\t(void)found;\n\t\t}\n\n\t\t/* file is on disk */\n\t\treturn (filep->access.fp != NULL);\n\n\t} else {\n\t\t/* is_file_in_memory returned true */\n\t\tif (open_file_in_memory(conn, path, filep, mode)) {\n\t\t\t/* file is in memory */\n\t\t\treturn (filep->access.membuf != NULL);\n\t\t}\n\t}\n\n\t/* Open failed */\n\treturn 0;\n}\n\n\n/* return 0 on success, just like fclose */\nstatic int\nmg_fclose(struct mg_file_access *fileacc)\n{\n\tint ret = -1;\n\tif (fileacc != NULL) {\n\t\tif (fileacc->fp != NULL) {\n\t\t\tret = fclose(fileacc->fp);\n\t\t} else if (fileacc->membuf != NULL) {\n\t\t\tret = 0;\n\t\t}\n\t\t/* reset all members of fileacc */\n\t\tmemset(fileacc, 0, sizeof(*fileacc));\n\t}\n\treturn ret;\n}\n\n\nstatic void\nmg_strlcpy(register char *dst, register const char *src, size_t n)\n{\n\tfor (; *src != '\\0' && n > 1; n--) {\n\t\t*dst++ = *src++;\n\t}\n\t*dst = '\\0';\n}\n\n\nstatic int\nlowercase(const char *s)\n{\n\treturn tolower(*(const unsigned char *)s);\n}\n\n\nint\nmg_strncasecmp(const char *s1, const char *s2, size_t len)\n{\n\tint diff = 0;\n\n\tif (len > 0) {\n\t\tdo {\n\t\t\tdiff = lowercase(s1++) - lowercase(s2++);\n\t\t} while (diff == 0 && s1[-1] != '\\0' && --len > 0);\n\t}\n\n\treturn diff;\n}\n\n\nint\nmg_strcasecmp(const char *s1, const char *s2)\n{\n\tint diff;\n\n\tdo {\n\t\tdiff = lowercase(s1++) - lowercase(s2++);\n\t} while (diff == 0 && s1[-1] != '\\0');\n\n\treturn diff;\n}\n\n\nstatic char *\nmg_strndup(const char *ptr, size_t len)\n{\n\tchar *p;\n\n\tif ((p = (char *)mg_malloc(len + 1)) != NULL) {\n\t\tmg_strlcpy(p, ptr, len + 1);\n\t}\n\n\treturn p;\n}\n\n\nstatic char *\nmg_strdup(const char *str)\n{\n\treturn mg_strndup(str, strlen(str));\n}\n\n\nstatic const char *\nmg_strcasestr(const char *big_str, const char *small_str)\n{\n\tsize_t i, big_len = strlen(big_str), small_len = strlen(small_str);\n\n\tif (big_len >= small_len) {\n\t\tfor (i = 0; i <= (big_len - small_len); i++) {\n\t\t\tif (mg_strncasecmp(big_str + i, small_str, small_len) == 0) {\n\t\t\t\treturn big_str + i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn NULL;\n}\n\n\n/* Return null terminated string of given maximum length.\n * Report errors if length is exceeded. */\nstatic void\nmg_vsnprintf(const struct mg_connection *conn,\n             int *truncated,\n             char *buf,\n             size_t buflen,\n             const char *fmt,\n             va_list ap)\n{\n\tint n, ok;\n\n\tif (buflen == 0) {\n\t\treturn;\n\t}\n\n#ifdef __clang__\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wformat-nonliteral\"\n/* Using fmt as a non-literal is intended here, since it is mostly called\n * indirectly by mg_snprintf */\n#endif\n\n\tn = (int)vsnprintf_impl(buf, buflen, fmt, ap);\n\tok = (n >= 0) && ((size_t)n < buflen);\n\n#ifdef __clang__\n#pragma clang diagnostic pop\n#endif\n\n\tif (ok) {\n\t\tif (truncated) {\n\t\t\t*truncated = 0;\n\t\t}\n\t} else {\n\t\tif (truncated) {\n\t\t\t*truncated = 1;\n\t\t}\n\t\tmg_cry(conn,\n\t\t       \"truncating vsnprintf buffer: [%.*s]\",\n\t\t       (int)((buflen > 200) ? 200 : (buflen - 1)),\n\t\t       buf);\n\t\tn = (int)buflen - 1;\n\t}\n\tbuf[n] = '\\0';\n}\n\n\nstatic void\nmg_snprintf(const struct mg_connection *conn,\n            int *truncated,\n            char *buf,\n            size_t buflen,\n            const char *fmt,\n            ...)\n{\n\tva_list ap;\n\n\tva_start(ap, fmt);\n\tmg_vsnprintf(conn, truncated, buf, buflen, fmt, ap);\n\tva_end(ap);\n}\n\n\nstatic int\nget_option_index(const char *name)\n{\n\tint i;\n\n\tfor (i = 0; config_options[i].name != NULL; i++) {\n\t\tif (strcmp(config_options[i].name, name) == 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\nconst char *\nmg_get_option(const struct mg_context *ctx, const char *name)\n{\n\tint i;\n\tif ((i = get_option_index(name)) == -1) {\n\t\treturn NULL;\n\t} else if (!ctx || ctx->config[i] == NULL) {\n\t\treturn \"\";\n\t} else {\n\t\treturn ctx->config[i];\n\t}\n}\n\n\nstruct mg_context *\nmg_get_context(const struct mg_connection *conn)\n{\n\treturn (conn == NULL) ? (struct mg_context *)NULL : (conn->ctx);\n}\n\n\nvoid *\nmg_get_user_data(const struct mg_context *ctx)\n{\n\treturn (ctx == NULL) ? NULL : ctx->user_data;\n}\n\n\nvoid\nmg_set_user_connection_data(struct mg_connection *conn, void *data)\n{\n\tif (conn != NULL) {\n\t\tconn->request_info.conn_data = data;\n\t}\n}\n\n\nvoid *\nmg_get_user_connection_data(const struct mg_connection *conn)\n{\n\tif (conn != NULL) {\n\t\treturn conn->request_info.conn_data;\n\t}\n\treturn NULL;\n}\n\n\nsize_t\nmg_get_ports(const struct mg_context *ctx, size_t size, int *ports, int *ssl)\n{\n\tsize_t i;\n\tif (!ctx) {\n\t\treturn 0;\n\t}\n\tfor (i = 0; i < size && i < ctx->num_listening_sockets; i++) {\n\t\tssl[i] = ctx->listening_sockets[i].is_ssl;\n\t\tports[i] =\n#if defined(USE_IPV6)\n\t\t    (ctx->listening_sockets[i].lsa.sa.sa_family == AF_INET6)\n\t\t        ? ntohs(ctx->listening_sockets[i].lsa.sin6.sin6_port)\n\t\t        :\n#endif\n\t\t        ntohs(ctx->listening_sockets[i].lsa.sin.sin_port);\n\t}\n\treturn i;\n}\n\n\nint\nmg_get_server_ports(const struct mg_context *ctx,\n                    int size,\n                    struct mg_server_ports *ports)\n{\n\tint i, cnt = 0;\n\n\tif (size <= 0) {\n\t\treturn -1;\n\t}\n\tmemset(ports, 0, sizeof(*ports) * (size_t)size);\n\tif (!ctx) {\n\t\treturn -1;\n\t}\n\tif (!ctx->listening_sockets) {\n\t\treturn -1;\n\t}\n\n\tfor (i = 0; (i < size) && (i < (int)ctx->num_listening_sockets); i++) {\n\n\t\tports[cnt].port =\n#if defined(USE_IPV6)\n\t\t    (ctx->listening_sockets[i].lsa.sa.sa_family == AF_INET6)\n\t\t        ? ntohs(ctx->listening_sockets[i].lsa.sin6.sin6_port)\n\t\t        :\n#endif\n\t\t        ntohs(ctx->listening_sockets[i].lsa.sin.sin_port);\n\t\tports[cnt].is_ssl = ctx->listening_sockets[i].is_ssl;\n\t\tports[cnt].is_redirect = ctx->listening_sockets[i].ssl_redir;\n\n\t\tif (ctx->listening_sockets[i].lsa.sa.sa_family == AF_INET) {\n\t\t\t/* IPv4 */\n\t\t\tports[cnt].protocol = 1;\n\t\t\tcnt++;\n\t\t} else if (ctx->listening_sockets[i].lsa.sa.sa_family == AF_INET6) {\n\t\t\t/* IPv6 */\n\t\t\tports[cnt].protocol = 3;\n\t\t\tcnt++;\n\t\t}\n\t}\n\n\treturn cnt;\n}\n\n\nstatic void\nsockaddr_to_string(char *buf, size_t len, const union usa *usa)\n{\n\tbuf[0] = '\\0';\n\n\tif (!usa) {\n\t\treturn;\n\t}\n\n\tif (usa->sa.sa_family == AF_INET) {\n\t\tgetnameinfo(&usa->sa,\n\t\t            sizeof(usa->sin),\n\t\t            buf,\n\t\t            (unsigned)len,\n\t\t            NULL,\n\t\t            0,\n\t\t            NI_NUMERICHOST);\n\t}\n#if defined(USE_IPV6)\n\telse if (usa->sa.sa_family == AF_INET6) {\n\t\tgetnameinfo(&usa->sa,\n\t\t            sizeof(usa->sin6),\n\t\t            buf,\n\t\t            (unsigned)len,\n\t\t            NULL,\n\t\t            0,\n\t\t            NI_NUMERICHOST);\n\t}\n#endif\n}\n\n\n/* Convert time_t to a string. According to RFC2616, Sec 14.18, this must be\n * included in all responses other than 100, 101, 5xx. */\nstatic void\ngmt_time_string(char *buf, size_t buf_len, time_t *t)\n{\n\tstruct tm *tm;\n\n\ttm = ((t != NULL) ? gmtime(t) : NULL);\n\tif (tm != NULL) {\n\t\tstrftime(buf, buf_len, \"%a, %d %b %Y %H:%M:%S GMT\", tm);\n\t} else {\n\t\tmg_strlcpy(buf, \"Thu, 01 Jan 1970 00:00:00 GMT\", buf_len);\n\t\tbuf[buf_len - 1] = '\\0';\n\t}\n}\n\n\n/* difftime for struct timespec. Return value is in seconds. */\nstatic double\nmg_difftimespec(const struct timespec *ts_now, const struct timespec *ts_before)\n{\n\treturn (double)(ts_now->tv_nsec - ts_before->tv_nsec) * 1.0E-9\n\t       + (double)(ts_now->tv_sec - ts_before->tv_sec);\n}\n\n\n/* Print error message to the opened error log stream. */\nvoid\nmg_cry(const struct mg_connection *conn, const char *fmt, ...)\n{\n\tchar buf[MG_BUF_LEN], src_addr[IP_ADDR_STR_LEN];\n\tva_list ap;\n\tstruct mg_file fi;\n\ttime_t timestamp;\n\n\tva_start(ap, fmt);\n\tIGNORE_UNUSED_RESULT(vsnprintf_impl(buf, sizeof(buf), fmt, ap));\n\tva_end(ap);\n\tbuf[sizeof(buf) - 1] = 0;\n\n\tif (!conn) {\n\t\tputs(buf);\n\t\treturn;\n\t}\n\n\t/* Do not lock when getting the callback value, here and below.\n\t * I suppose this is fine, since function cannot disappear in the\n\t * same way string option can. */\n\tif ((conn->ctx->callbacks.log_message == NULL)\n\t    || (conn->ctx->callbacks.log_message(conn, buf) == 0)) {\n\n\t\tif (conn->ctx->config[ERROR_LOG_FILE] != NULL) {\n\t\t\tif (mg_fopen(conn,\n\t\t\t             conn->ctx->config[ERROR_LOG_FILE],\n\t\t\t             MG_FOPEN_MODE_APPEND,\n\t\t\t             &fi) == 0) {\n\t\t\t\tfi.access.fp = NULL;\n\t\t\t}\n\t\t} else {\n\t\t\tfi.access.fp = NULL;\n\t\t}\n\n\t\tif (fi.access.fp != NULL) {\n\t\t\tflockfile(fi.access.fp);\n\t\t\ttimestamp = time(NULL);\n\n\t\t\tsockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);\n\t\t\tfprintf(fi.access.fp,\n\t\t\t        \"[%010lu] [error] [client %s] \",\n\t\t\t        (unsigned long)timestamp,\n\t\t\t        src_addr);\n\n\t\t\tif (conn->request_info.request_method != NULL) {\n\t\t\t\tfprintf(fi.access.fp,\n\t\t\t\t        \"%s %s: \",\n\t\t\t\t        conn->request_info.request_method,\n\t\t\t\t        conn->request_info.request_uri);\n\t\t\t}\n\n\t\t\tfprintf(fi.access.fp, \"%s\", buf);\n\t\t\tfputc('\\n', fi.access.fp);\n\t\t\tfflush(fi.access.fp);\n\t\t\tfunlockfile(fi.access.fp);\n\t\t\t(void)mg_fclose(&fi.access); /* Ignore errors. We can't call\n\t\t\t                              * mg_cry here anyway ;-) */\n\t\t}\n\t}\n}\n\n\n/* Return fake connection structure. Used for logging, if connection\n * is not applicable at the moment of logging. */\nstatic struct mg_connection *\nfc(struct mg_context *ctx)\n{\n\tstatic struct mg_connection fake_connection;\n\tfake_connection.ctx = ctx;\n\treturn &fake_connection;\n}\n\n\nconst char *\nmg_version(void)\n{\n\treturn CIVETWEB_VERSION;\n}\n\n\nconst struct mg_request_info *\nmg_get_request_info(const struct mg_connection *conn)\n{\n\tif (!conn) {\n\t\treturn NULL;\n\t}\n\treturn &conn->request_info;\n}\n\n\n/* Skip the characters until one of the delimiters characters found.\n * 0-terminate resulting word. Skip the delimiter and following whitespaces.\n * Advance pointer to buffer to the next word. Return found 0-terminated word.\n * Delimiters can be quoted with quotechar. */\nstatic char *\nskip_quoted(char **buf,\n            const char *delimiters,\n            const char *whitespace,\n            char quotechar)\n{\n\tchar *p, *begin_word, *end_word, *end_whitespace;\n\n\tbegin_word = *buf;\n\tend_word = begin_word + strcspn(begin_word, delimiters);\n\n\t/* Check for quotechar */\n\tif (end_word > begin_word) {\n\t\tp = end_word - 1;\n\t\twhile (*p == quotechar) {\n\t\t\t/* While the delimiter is quoted, look for the next delimiter. */\n\t\t\t/* This happens, e.g., in calls from parse_auth_header,\n\t\t\t * if the user name contains a \" character. */\n\n\t\t\t/* If there is anything beyond end_word, copy it. */\n\t\t\tif (*end_word != '\\0') {\n\t\t\t\tsize_t end_off = strcspn(end_word + 1, delimiters);\n\t\t\t\tmemmove(p, end_word, end_off + 1);\n\t\t\t\tp += end_off; /* p must correspond to end_word - 1 */\n\t\t\t\tend_word += end_off + 1;\n\t\t\t} else {\n\t\t\t\t*p = '\\0';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor (p++; p < end_word; p++) {\n\t\t\t*p = '\\0';\n\t\t}\n\t}\n\n\tif (*end_word == '\\0') {\n\t\t*buf = end_word;\n\t} else {\n\n#if defined(__MINGW32__) || defined(__GNUC__) && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5)))\n/* Disable spurious conversion warning for GCC */\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wsign-conversion\"\n#endif\n\n\t\tend_whitespace = end_word + strspn(&end_word[1], whitespace) + 1;\n\n#if defined(__MINGW32__) || defined(__GNUC__) && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5)))\n#pragma GCC diagnostic pop\n#endif\n\n\t\tfor (p = end_word; p < end_whitespace; p++) {\n\t\t\t*p = '\\0';\n\t\t}\n\n\t\t*buf = end_whitespace;\n\t}\n\n\treturn begin_word;\n}\n\n\n/* Simplified version of skip_quoted without quote char\n * and whitespace == delimiters */\nstatic char *\nskip(char **buf, const char *delimiters)\n{\n\treturn skip_quoted(buf, delimiters, delimiters, 0);\n}\n\n\n/* Return HTTP header value, or NULL if not found. */\nstatic const char *\nget_header(const struct mg_request_info *ri, const char *name)\n{\n\tint i;\n\tif (ri) {\n\t\tfor (i = 0; i < ri->num_headers; i++) {\n\t\t\tif (!mg_strcasecmp(name, ri->http_headers[i].name)) {\n\t\t\t\treturn ri->http_headers[i].value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn NULL;\n}\n\n\nconst char *\nmg_get_header(const struct mg_connection *conn, const char *name)\n{\n\tif (!conn) {\n\t\treturn NULL;\n\t}\n\n\treturn get_header(&conn->request_info, name);\n}\n\n\n/* A helper function for traversing a comma separated list of values.\n * It returns a list pointer shifted to the next value, or NULL if the end\n * of the list found.\n * Value is stored in val vector. If value has form \"x=y\", then eq_val\n * vector is initialized to point to the \"y\" part, and val vector length\n * is adjusted to point only to \"x\". */\nstatic const char *\nnext_option(const char *list, struct vec *val, struct vec *eq_val)\n{\n\tint end;\n\nreparse:\n\tif (val == NULL || list == NULL || *list == '\\0') {\n\t\t/* End of the list */\n\t\tlist = NULL;\n\t} else {\n\t\t/* Skip over leading LWS */\n\t\twhile (*list == ' ' || *list == '\\t')\n\t\t\tlist++;\n\n\t\tval->ptr = list;\n\t\tif ((list = strchr(val->ptr, ',')) != NULL) {\n\t\t\t/* Comma found. Store length and shift the list ptr */\n\t\t\tval->len = ((size_t)(list - val->ptr));\n\t\t\tlist++;\n\t\t} else {\n\t\t\t/* This value is the last one */\n\t\t\tlist = val->ptr + strlen(val->ptr);\n\t\t\tval->len = ((size_t)(list - val->ptr));\n\t\t}\n\n\t\t/* Adjust length for trailing LWS */\n\t\tend = (int)val->len - 1;\n\t\twhile (end >= 0 && (val->ptr[end] == ' ' || val->ptr[end] == '\\t'))\n\t\t\tend--;\n\t\tval->len = (size_t)(end + 1);\n\n\t\tif (val->len == 0) {\n\t\t\t/* Ignore any empty entries. */\n\t\t\tgoto reparse;\n\t\t}\n\n\t\tif (eq_val != NULL) {\n\t\t\t/* Value has form \"x=y\", adjust pointers and lengths\n\t\t\t * so that val points to \"x\", and eq_val points to \"y\". */\n\t\t\teq_val->len = 0;\n\t\t\teq_val->ptr = (const char *)memchr(val->ptr, '=', val->len);\n\t\t\tif (eq_val->ptr != NULL) {\n\t\t\t\teq_val->ptr++; /* Skip over '=' character */\n\t\t\t\teq_val->len = ((size_t)(val->ptr - eq_val->ptr)) + val->len;\n\t\t\t\tval->len = ((size_t)(eq_val->ptr - val->ptr)) - 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn list;\n}\n\n/* A helper function for checking if a comma separated list of values contains\n * the given option (case insensitvely).\n * 'header' can be NULL, in which case false is returned. */\nstatic int\nheader_has_option(const char *header, const char *option)\n{\n\tstruct vec opt_vec;\n\tstruct vec eq_vec;\n\n\tassert(option != NULL);\n\tassert(option[0] != '\\0');\n\n\twhile ((header = next_option(header, &opt_vec, &eq_vec)) != NULL) {\n\t\tif (mg_strncasecmp(option, opt_vec.ptr, opt_vec.len) == 0)\n\t\t\treturn 1;\n\t}\n\n\treturn 0;\n}\n\n/* Perform case-insensitive match of string against pattern */\nstatic int\nmatch_prefix(const char *pattern, size_t pattern_len, const char *str)\n{\n\tconst char *or_str;\n\tsize_t i;\n\tint j, len, res;\n\n\tif ((or_str = (const char *)memchr(pattern, '|', pattern_len)) != NULL) {\n\t\tres = match_prefix(pattern, (size_t)(or_str - pattern), str);\n\t\treturn (res > 0) ? res : match_prefix(or_str + 1,\n\t\t                                      (size_t)((pattern + pattern_len)\n\t\t                                               - (or_str + 1)),\n\t\t                                      str);\n\t}\n\n\tfor (i = 0, j = 0; i < pattern_len; i++, j++) {\n\t\tif (pattern[i] == '?' && str[j] != '\\0') {\n\t\t\tcontinue;\n\t\t} else if (pattern[i] == '$') {\n\t\t\treturn (str[j] == '\\0') ? j : -1;\n\t\t} else if (pattern[i] == '*') {\n\t\t\ti++;\n\t\t\tif (pattern[i] == '*') {\n\t\t\t\ti++;\n\t\t\t\tlen = (int)strlen(str + j);\n\t\t\t} else {\n\t\t\t\tlen = (int)strcspn(str + j, \"/\");\n\t\t\t}\n\t\t\tif (i == pattern_len) {\n\t\t\t\treturn j + len;\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tres = match_prefix(pattern + i, pattern_len - i, str + j + len);\n\t\t\t} while (res == -1 && len-- > 0);\n\t\t\treturn (res == -1) ? -1 : j + res + len;\n\t\t} else if (lowercase(&pattern[i]) != lowercase(&str[j])) {\n\t\t\treturn -1;\n\t\t}\n\t}\n\treturn j;\n}\n\n\n/* HTTP 1.1 assumes keep alive if \"Connection:\" header is not set\n * This function must tolerate situations when connection info is not\n * set up, for example if request parsing failed. */\nstatic int\nshould_keep_alive(const struct mg_connection *conn)\n{\n\tif (conn != NULL) {\n\t\tconst char *http_version = conn->request_info.http_version;\n\t\tconst char *header = mg_get_header(conn, \"Connection\");\n\t\tif (conn->must_close || conn->status_code == 401\n\t\t    || mg_strcasecmp(conn->ctx->config[ENABLE_KEEP_ALIVE], \"yes\") != 0\n\t\t    || (header != NULL && !header_has_option(header, \"keep-alive\"))\n\t\t    || (header == NULL && http_version\n\t\t        && 0 != strcmp(http_version, \"1.1\"))) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n\nstatic int\nshould_decode_url(const struct mg_connection *conn)\n{\n\tif (!conn || !conn->ctx) {\n\t\treturn 0;\n\t}\n\n\treturn (mg_strcasecmp(conn->ctx->config[DECODE_URL], \"yes\") == 0);\n}\n\n\nstatic const char *\nsuggest_connection_header(const struct mg_connection *conn)\n{\n\treturn should_keep_alive(conn) ? \"keep-alive\" : \"close\";\n}\n\n\nstatic int\nsend_no_cache_header(struct mg_connection *conn)\n{\n\t/* Send all current and obsolete cache opt-out directives. */\n\treturn mg_printf(conn,\n\t                 \"Cache-Control: no-cache, no-store, \"\n\t                 \"must-revalidate, private, max-age=0\\r\\n\"\n\t                 \"Pragma: no-cache\\r\\n\"\n\t                 \"Expires: 0\\r\\n\");\n}\n\n\nstatic int\nsend_static_cache_header(struct mg_connection *conn)\n{\n#if !defined(NO_CACHING)\n\t/* Read the server config to check how long a file may be cached.\n\t * The configuration is in seconds. */\n\tint max_age = atoi(conn->ctx->config[STATIC_FILE_MAX_AGE]);\n\tif (max_age <= 0) {\n\t\t/* 0 means \"do not cache\". All values <0 are reserved\n\t\t * and may be used differently in the future. */\n\t\t/* If a file should not be cached, do not only send\n\t\t * max-age=0, but also pragmas and Expires headers. */\n\t\treturn send_no_cache_header(conn);\n\t}\n\n\t/* Use \"Cache-Control: max-age\" instead of \"Expires\" header.\n\t * Reason: see https://www.mnot.net/blog/2007/05/15/expires_max-age */\n\t/* See also https://www.mnot.net/cache_docs/ */\n\t/* According to RFC 2616, Section 14.21, caching times should not exceed\n\t * one year. A year with 365 days corresponds to 31536000 seconds, a leap\n\t * year to 31622400 seconds. For the moment, we just send whatever has\n\t * been configured, still the behavior for >1 year should be considered\n\t * as undefined. */\n\treturn mg_printf(conn, \"Cache-Control: max-age=%u\\r\\n\", (unsigned)max_age);\n#else  /* NO_CACHING */\n\treturn send_no_cache_header(conn);\n#endif /* !NO_CACHING */\n}\n\n\nstatic void handle_file_based_request(struct mg_connection *conn,\n                                      const char *path,\n                                      struct mg_file *filep);\n\n\nconst char *\nmg_get_response_code_text(struct mg_connection *conn, int response_code)\n{\n\t/* See IANA HTTP status code assignment:\n\t * http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n\t */\n\n\tswitch (response_code) {\n\t/* RFC2616 Section 10.1 - Informational 1xx */\n\tcase 100:\n\t\treturn \"Continue\"; /* RFC2616 Section 10.1.1 */\n\tcase 101:\n\t\treturn \"Switching Protocols\"; /* RFC2616 Section 10.1.2 */\n\tcase 102:\n\t\treturn \"Processing\"; /* RFC2518 Section 10.1 */\n\n\t/* RFC2616 Section 10.2 - Successful 2xx */\n\tcase 200:\n\t\treturn \"OK\"; /* RFC2616 Section 10.2.1 */\n\tcase 201:\n\t\treturn \"Created\"; /* RFC2616 Section 10.2.2 */\n\tcase 202:\n\t\treturn \"Accepted\"; /* RFC2616 Section 10.2.3 */\n\tcase 203:\n\t\treturn \"Non-Authoritative Information\"; /* RFC2616 Section 10.2.4 */\n\tcase 204:\n\t\treturn \"No Content\"; /* RFC2616 Section 10.2.5 */\n\tcase 205:\n\t\treturn \"Reset Content\"; /* RFC2616 Section 10.2.6 */\n\tcase 206:\n\t\treturn \"Partial Content\"; /* RFC2616 Section 10.2.7 */\n\tcase 207:\n\t\treturn \"Multi-Status\"; /* RFC2518 Section 10.2, RFC4918 Section 11.1 */\n\tcase 208:\n\t\treturn \"Already Reported\"; /* RFC5842 Section 7.1 */\n\n\tcase 226:\n\t\treturn \"IM used\"; /* RFC3229 Section 10.4.1 */\n\n\t/* RFC2616 Section 10.3 - Redirection 3xx */\n\tcase 300:\n\t\treturn \"Multiple Choices\"; /* RFC2616 Section 10.3.1 */\n\tcase 301:\n\t\treturn \"Moved Permanently\"; /* RFC2616 Section 10.3.2 */\n\tcase 302:\n\t\treturn \"Found\"; /* RFC2616 Section 10.3.3 */\n\tcase 303:\n\t\treturn \"See Other\"; /* RFC2616 Section 10.3.4 */\n\tcase 304:\n\t\treturn \"Not Modified\"; /* RFC2616 Section 10.3.5 */\n\tcase 305:\n\t\treturn \"Use Proxy\"; /* RFC2616 Section 10.3.6 */\n\tcase 307:\n\t\treturn \"Temporary Redirect\"; /* RFC2616 Section 10.3.8 */\n\tcase 308:\n\t\treturn \"Permanent Redirect\"; /* RFC7238 Section 3 */\n\n\t/* RFC2616 Section 10.4 - Client Error 4xx */\n\tcase 400:\n\t\treturn \"Bad Request\"; /* RFC2616 Section 10.4.1 */\n\tcase 401:\n\t\treturn \"Unauthorized\"; /* RFC2616 Section 10.4.2 */\n\tcase 402:\n\t\treturn \"Payment Required\"; /* RFC2616 Section 10.4.3 */\n\tcase 403:\n\t\treturn \"Forbidden\"; /* RFC2616 Section 10.4.4 */\n\tcase 404:\n\t\treturn \"Not Found\"; /* RFC2616 Section 10.4.5 */\n\tcase 405:\n\t\treturn \"Method Not Allowed\"; /* RFC2616 Section 10.4.6 */\n\tcase 406:\n\t\treturn \"Not Acceptable\"; /* RFC2616 Section 10.4.7 */\n\tcase 407:\n\t\treturn \"Proxy Authentication Required\"; /* RFC2616 Section 10.4.8 */\n\tcase 408:\n\t\treturn \"Request Time-out\"; /* RFC2616 Section 10.4.9 */\n\tcase 409:\n\t\treturn \"Conflict\"; /* RFC2616 Section 10.4.10 */\n\tcase 410:\n\t\treturn \"Gone\"; /* RFC2616 Section 10.4.11 */\n\tcase 411:\n\t\treturn \"Length Required\"; /* RFC2616 Section 10.4.12 */\n\tcase 412:\n\t\treturn \"Precondition Failed\"; /* RFC2616 Section 10.4.13 */\n\tcase 413:\n\t\treturn \"Request Entity Too Large\"; /* RFC2616 Section 10.4.14 */\n\tcase 414:\n\t\treturn \"Request-URI Too Large\"; /* RFC2616 Section 10.4.15 */\n\tcase 415:\n\t\treturn \"Unsupported Media Type\"; /* RFC2616 Section 10.4.16 */\n\tcase 416:\n\t\treturn \"Requested range not satisfiable\"; /* RFC2616 Section 10.4.17 */\n\tcase 417:\n\t\treturn \"Expectation Failed\"; /* RFC2616 Section 10.4.18 */\n\n\tcase 421:\n\t\treturn \"Misdirected Request\"; /* RFC7540 Section 9.1.2 */\n\tcase 422:\n\t\treturn \"Unproccessable entity\"; /* RFC2518 Section 10.3, RFC4918\n\t\t                                 * Section 11.2 */\n\tcase 423:\n\t\treturn \"Locked\"; /* RFC2518 Section 10.4, RFC4918 Section 11.3 */\n\tcase 424:\n\t\treturn \"Failed Dependency\"; /* RFC2518 Section 10.5, RFC4918\n\t\t                             * Section 11.4 */\n\n\tcase 426:\n\t\treturn \"Upgrade Required\"; /* RFC 2817 Section 4 */\n\n\tcase 428:\n\t\treturn \"Precondition Required\"; /* RFC 6585, Section 3 */\n\tcase 429:\n\t\treturn \"Too Many Requests\"; /* RFC 6585, Section 4 */\n\n\tcase 431:\n\t\treturn \"Request Header Fields Too Large\"; /* RFC 6585, Section 5 */\n\n\tcase 451:\n\t\treturn \"Unavailable For Legal Reasons\"; /* draft-tbray-http-legally-restricted-status-05,\n\t\t                                         * Section 3 */\n\n\t/* RFC2616 Section 10.5 - Server Error 5xx */\n\tcase 500:\n\t\treturn \"Internal Server Error\"; /* RFC2616 Section 10.5.1 */\n\tcase 501:\n\t\treturn \"Not Implemented\"; /* RFC2616 Section 10.5.2 */\n\tcase 502:\n\t\treturn \"Bad Gateway\"; /* RFC2616 Section 10.5.3 */\n\tcase 503:\n\t\treturn \"Service Unavailable\"; /* RFC2616 Section 10.5.4 */\n\tcase 504:\n\t\treturn \"Gateway Time-out\"; /* RFC2616 Section 10.5.5 */\n\tcase 505:\n\t\treturn \"HTTP Version not supported\"; /* RFC2616 Section 10.5.6 */\n\tcase 506:\n\t\treturn \"Variant Also Negotiates\"; /* RFC 2295, Section 8.1 */\n\tcase 507:\n\t\treturn \"Insufficient Storage\"; /* RFC2518 Section 10.6, RFC4918\n\t\t                                * Section 11.5 */\n\tcase 508:\n\t\treturn \"Loop Detected\"; /* RFC5842 Section 7.1 */\n\n\tcase 510:\n\t\treturn \"Not Extended\"; /* RFC 2774, Section 7 */\n\tcase 511:\n\t\treturn \"Network Authentication Required\"; /* RFC 6585, Section 6 */\n\n\t/* Other status codes, not shown in the IANA HTTP status code assignment.\n\t * E.g., \"de facto\" standards due to common use, ... */\n\tcase 418:\n\t\treturn \"I am a teapot\"; /* RFC2324 Section 2.3.2 */\n\tcase 419:\n\t\treturn \"Authentication Timeout\"; /* common use */\n\tcase 420:\n\t\treturn \"Enhance Your Calm\"; /* common use */\n\tcase 440:\n\t\treturn \"Login Timeout\"; /* common use */\n\tcase 509:\n\t\treturn \"Bandwidth Limit Exceeded\"; /* common use */\n\n\tdefault:\n\t\t/* This error code is unknown. This should not happen. */\n\t\tif (conn) {\n\t\t\tmg_cry(conn, \"Unknown HTTP response code: %u\", response_code);\n\t\t}\n\n\t\t/* Return at least a category according to RFC 2616 Section 10. */\n\t\tif (response_code >= 100 && response_code < 200) {\n\t\t\t/* Unknown informational status code */\n\t\t\treturn \"Information\";\n\t\t}\n\t\tif (response_code >= 200 && response_code < 300) {\n\t\t\t/* Unknown success code */\n\t\t\treturn \"Success\";\n\t\t}\n\t\tif (response_code >= 300 && response_code < 400) {\n\t\t\t/* Unknown redirection code */\n\t\t\treturn \"Redirection\";\n\t\t}\n\t\tif (response_code >= 400 && response_code < 500) {\n\t\t\t/* Unknown request error code */\n\t\t\treturn \"Client Error\";\n\t\t}\n\t\tif (response_code >= 500 && response_code < 600) {\n\t\t\t/* Unknown server error code */\n\t\t\treturn \"Server Error\";\n\t\t}\n\n\t\t/* Response code not even within reasonable range */\n\t\treturn \"\";\n\t}\n}\n\n\nstatic void send_http_error(struct mg_connection *,\n                            int,\n                            PRINTF_FORMAT_STRING(const char *fmt),\n                            ...) PRINTF_ARGS(3, 4);\n\nstatic void\nsend_http_error(struct mg_connection *conn, int status, const char *fmt, ...)\n{\n\tchar buf[MG_BUF_LEN];\n\tva_list ap;\n\tint len, i, page_handler_found, scope, truncated, has_body;\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\tconst char *error_handler = NULL;\n\tstruct mg_file error_page_file = STRUCT_FILE_INITIALIZER;\n\tconst char *error_page_file_ext, *tstr;\n\n\tconst char *status_text = mg_get_response_code_text(conn, status);\n\n\tif (conn == NULL) {\n\t\treturn;\n\t}\n\n\tconn->status_code = status;\n\tif (conn->in_error_handler || conn->ctx->callbacks.http_error == NULL\n\t    || conn->ctx->callbacks.http_error(conn, status)) {\n\t\tif (!conn->in_error_handler) {\n\t\t\t/* Send user defined error pages, if defined */\n\t\t\terror_handler = conn->ctx->config[ERROR_PAGES];\n\t\t\terror_page_file_ext = conn->ctx->config[INDEX_FILES];\n\t\t\tpage_handler_found = 0;\n\t\t\tif (error_handler != NULL) {\n\t\t\t\tfor (scope = 1; (scope <= 3) && !page_handler_found; scope++) {\n\t\t\t\t\tswitch (scope) {\n\t\t\t\t\tcase 1: /* Handler for specific error, e.g. 404 error */\n\t\t\t\t\t\tmg_snprintf(conn,\n\t\t\t\t\t\t            &truncated,\n\t\t\t\t\t\t            buf,\n\t\t\t\t\t\t            sizeof(buf) - 32,\n\t\t\t\t\t\t            \"%serror%03u.\",\n\t\t\t\t\t\t            error_handler,\n\t\t\t\t\t\t            status);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2: /* Handler for error group, e.g., 5xx error handler\n\t\t\t\t\t         * for all server errors (500-599) */\n\t\t\t\t\t\tmg_snprintf(conn,\n\t\t\t\t\t\t            &truncated,\n\t\t\t\t\t\t            buf,\n\t\t\t\t\t\t            sizeof(buf) - 32,\n\t\t\t\t\t\t            \"%serror%01uxx.\",\n\t\t\t\t\t\t            error_handler,\n\t\t\t\t\t\t            status / 100);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault: /* Handler for all errors */\n\t\t\t\t\t\tmg_snprintf(conn,\n\t\t\t\t\t\t            &truncated,\n\t\t\t\t\t\t            buf,\n\t\t\t\t\t\t            sizeof(buf) - 32,\n\t\t\t\t\t\t            \"%serror.\",\n\t\t\t\t\t\t            error_handler);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* String truncation in buf may only occur if error_handler\n\t\t\t\t\t * is too long. This string is from the config, not from a\n\t\t\t\t\t * client. */\n\t\t\t\t\t(void)truncated;\n\n\t\t\t\t\tlen = (int)strlen(buf);\n\n\t\t\t\t\ttstr = strchr(error_page_file_ext, '.');\n\n\t\t\t\t\twhile (tstr) {\n\t\t\t\t\t\tfor (i = 1; i < 32 && tstr[i] != 0 && tstr[i] != ',';\n\t\t\t\t\t\t     i++)\n\t\t\t\t\t\t\tbuf[len + i - 1] = tstr[i];\n\t\t\t\t\t\tbuf[len + i - 1] = 0;\n\t\t\t\t\t\tif (mg_stat(conn, buf, &error_page_file.stat)) {\n\t\t\t\t\t\t\tpage_handler_found = 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttstr = strchr(tstr + i, '.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (page_handler_found) {\n\t\t\t\tconn->in_error_handler = 1;\n\t\t\t\thandle_file_based_request(conn, buf, &error_page_file);\n\t\t\t\tconn->in_error_handler = 0;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t/* No custom error page. Send default error page. */\n\t\tgmt_time_string(date, sizeof(date), &curtime);\n\n\t\t/* Errors 1xx, 204 and 304 MUST NOT send a body */\n\t\thas_body = (status > 199 && status != 204 && status != 304);\n\n\t\tconn->must_close = 1;\n\t\tmg_printf(conn, \"HTTP/1.1 %d %s\\r\\n\", status, status_text);\n\t\tsend_no_cache_header(conn);\n\t\tif (has_body) {\n\t\t\tmg_printf(conn,\n\t\t\t          \"%s\",\n\t\t\t          \"Content-Type: text/plain; charset=utf-8\\r\\n\");\n\t\t}\n\t\tmg_printf(conn,\n\t\t          \"Date: %s\\r\\n\"\n\t\t          \"Connection: close\\r\\n\\r\\n\",\n\t\t          date);\n\n\t\t/* Errors 1xx, 204 and 304 MUST NOT send a body */\n\t\tif (has_body) {\n\t\t\tmg_printf(conn, \"Error %d: %s\\n\", status, status_text);\n\n\t\t\tif (fmt != NULL) {\n\t\t\t\tva_start(ap, fmt);\n\t\t\t\tmg_vsnprintf(conn, NULL, buf, sizeof(buf), fmt, ap);\n\t\t\t\tva_end(ap);\n\t\t\t\tmg_write(conn, buf, strlen(buf));\n\t\t\t\tDEBUG_TRACE(\"Error %i - [%s]\", status, buf);\n\t\t\t}\n\n\t\t} else {\n\t\t\t/* No body allowed. Close the connection. */\n\t\t\tDEBUG_TRACE(\"Error %i\", status);\n\t\t}\n\t}\n}\n\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n/* Create substitutes for POSIX functions in Win32. */\n\n#if defined(__MINGW32__)\n/* Show no warning in case system functions are not used. */\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wunused-function\"\n#endif\n\n\nstatic int\npthread_mutex_init(pthread_mutex_t *mutex, void *unused)\n{\n\t(void)unused;\n\t*mutex = CreateMutex(NULL, FALSE, NULL);\n\treturn (*mutex == NULL) ? -1 : 0;\n}\n\n\nstatic int\npthread_mutex_destroy(pthread_mutex_t *mutex)\n{\n\treturn (CloseHandle(*mutex) == 0) ? -1 : 0;\n}\n\n\nstatic int\npthread_mutex_lock(pthread_mutex_t *mutex)\n{\n\treturn (WaitForSingleObject(*mutex, INFINITE) == WAIT_OBJECT_0) ? 0 : -1;\n}\n\n\n#ifdef ENABLE_UNUSED_PTHREAD_FUNCTIONS\nstatic int\npthread_mutex_trylock(pthread_mutex_t *mutex)\n{\n\tswitch (WaitForSingleObject(*mutex, 0)) {\n\tcase WAIT_OBJECT_0:\n\t\treturn 0;\n\tcase WAIT_TIMEOUT:\n\t\treturn -2; /* EBUSY */\n\t}\n\treturn -1;\n}\n#endif\n\n\nstatic int\npthread_mutex_unlock(pthread_mutex_t *mutex)\n{\n\treturn (ReleaseMutex(*mutex) == 0) ? -1 : 0;\n}\n\n\nstatic int\npthread_cond_init(pthread_cond_t *cv, const void *unused)\n{\n\t(void)unused;\n\tInitializeCriticalSection(&cv->threadIdSec);\n\tcv->waiting_thread = NULL;\n\treturn 0;\n}\n\n\nstatic int\npthread_cond_timedwait(pthread_cond_t *cv,\n                       pthread_mutex_t *mutex,\n                       const struct timespec *abstime)\n{\n\tstruct mg_workerTLS **ptls,\n\t    *tls = (struct mg_workerTLS *)pthread_getspecific(sTlsKey);\n\tint ok;\n\tstruct timespec tsnow;\n\tint64_t nsnow, nswaitabs, nswaitrel;\n\tDWORD mswaitrel;\n\n\tEnterCriticalSection(&cv->threadIdSec);\n\t/* Add this thread to cv's waiting list */\n\tptls = &cv->waiting_thread;\n\tfor (; *ptls != NULL; ptls = &(*ptls)->next_waiting_thread)\n\t\t;\n\ttls->next_waiting_thread = NULL;\n\t*ptls = tls;\n\tLeaveCriticalSection(&cv->threadIdSec);\n\n\tif (abstime) {\n\t\tclock_gettime(CLOCK_REALTIME, &tsnow);\n\t\tnsnow = (((int64_t)tsnow.tv_sec) * 1000000000) + tsnow.tv_nsec;\n\t\tnswaitabs =\n\t\t    (((int64_t)abstime->tv_sec) * 1000000000) + abstime->tv_nsec;\n\t\tnswaitrel = nswaitabs - nsnow;\n\t\tif (nswaitrel < 0) {\n\t\t\tnswaitrel = 0;\n\t\t}\n\t\tmswaitrel = (DWORD)(nswaitrel / 1000000);\n\t} else {\n\t\tmswaitrel = INFINITE;\n\t}\n\n\tpthread_mutex_unlock(mutex);\n\tok = (WAIT_OBJECT_0\n\t      == WaitForSingleObject(tls->pthread_cond_helper_mutex, mswaitrel));\n\tif (!ok) {\n\t\tok = 1;\n\t\tEnterCriticalSection(&cv->threadIdSec);\n\t\tptls = &cv->waiting_thread;\n\t\tfor (; *ptls != NULL; ptls = &(*ptls)->next_waiting_thread) {\n\t\t\tif (*ptls == tls) {\n\t\t\t\t*ptls = tls->next_waiting_thread;\n\t\t\t\tok = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tLeaveCriticalSection(&cv->threadIdSec);\n\t\tif (ok) {\n\t\t\tWaitForSingleObject(tls->pthread_cond_helper_mutex, INFINITE);\n\t\t}\n\t}\n\t/* This thread has been removed from cv's waiting list */\n\tpthread_mutex_lock(mutex);\n\n\treturn ok ? 0 : -1;\n}\n\n\nstatic int\npthread_cond_wait(pthread_cond_t *cv, pthread_mutex_t *mutex)\n{\n\treturn pthread_cond_timedwait(cv, mutex, NULL);\n}\n\n\nstatic int\npthread_cond_signal(pthread_cond_t *cv)\n{\n\tHANDLE wkup = NULL;\n\tBOOL ok = FALSE;\n\n\tEnterCriticalSection(&cv->threadIdSec);\n\tif (cv->waiting_thread) {\n\t\twkup = cv->waiting_thread->pthread_cond_helper_mutex;\n\t\tcv->waiting_thread = cv->waiting_thread->next_waiting_thread;\n\n\t\tok = SetEvent(wkup);\n\t\tassert(ok);\n\t}\n\tLeaveCriticalSection(&cv->threadIdSec);\n\n\treturn ok ? 0 : 1;\n}\n\n\nstatic int\npthread_cond_broadcast(pthread_cond_t *cv)\n{\n\tEnterCriticalSection(&cv->threadIdSec);\n\twhile (cv->waiting_thread) {\n\t\tpthread_cond_signal(cv);\n\t}\n\tLeaveCriticalSection(&cv->threadIdSec);\n\n\treturn 0;\n}\n\n\nstatic int\npthread_cond_destroy(pthread_cond_t *cv)\n{\n\tEnterCriticalSection(&cv->threadIdSec);\n\tassert(cv->waiting_thread == NULL);\n\tLeaveCriticalSection(&cv->threadIdSec);\n\tDeleteCriticalSection(&cv->threadIdSec);\n\n\treturn 0;\n}\n\n\n#ifdef ALTERNATIVE_QUEUE\nstatic void *\nevent_create(void)\n{\n\treturn (void *)CreateEvent(NULL, FALSE, FALSE, NULL);\n}\n\n\nstatic int\nevent_wait(void *eventhdl)\n{\n\tint res = WaitForSingleObject((HANDLE)eventhdl, INFINITE);\n\treturn (res == WAIT_OBJECT_0);\n}\n\n\nstatic int\nevent_signal(void *eventhdl)\n{\n\treturn (int)SetEvent((HANDLE)eventhdl);\n}\n\n\nstatic void\nevent_destroy(void *eventhdl)\n{\n\tCloseHandle((HANDLE)eventhdl);\n}\n#endif\n\n\n#if defined(__MINGW32__)\n/* Enable unused function warning again */\n#pragma GCC diagnostic pop\n#endif\n\n\n/* For Windows, change all slashes to backslashes in path names. */\nstatic void\nchange_slashes_to_backslashes(char *path)\n{\n\tint i;\n\n\tfor (i = 0; path[i] != '\\0'; i++) {\n\t\tif (path[i] == '/') {\n\t\t\tpath[i] = '\\\\';\n\t\t}\n\n\t\t/* remove double backslash (check i > 0 to preserve UNC paths,\n\t\t * like \\\\server\\file.txt) */\n\t\tif ((path[i] == '\\\\') && (i > 0)) {\n\t\t\twhile (path[i + 1] == '\\\\' || path[i + 1] == '/') {\n\t\t\t\t(void)memmove(path + i + 1, path + i + 2, strlen(path + i + 1));\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nstatic int\nmg_wcscasecmp(const wchar_t *s1, const wchar_t *s2)\n{\n\tint diff;\n\n\tdo {\n\t\tdiff = tolower(*s1) - tolower(*s2);\n\t\ts1++;\n\t\ts2++;\n\t} while (diff == 0 && s1[-1] != '\\0');\n\n\treturn diff;\n}\n\n\n/* Encode 'path' which is assumed UTF-8 string, into UNICODE string.\n * wbuf and wbuf_len is a target buffer and its length. */\nstatic void\npath_to_unicode(const struct mg_connection *conn,\n                const char *path,\n                wchar_t *wbuf,\n                size_t wbuf_len)\n{\n\tchar buf[PATH_MAX], buf2[PATH_MAX];\n\twchar_t wbuf2[MAX_PATH + 1];\n\tDWORD long_len, err;\n\tint (*fcompare)(const wchar_t *, const wchar_t *) = mg_wcscasecmp;\n\n\tmg_strlcpy(buf, path, sizeof(buf));\n\tchange_slashes_to_backslashes(buf);\n\n\t/* Convert to Unicode and back. If doubly-converted string does not\n\t * match the original, something is fishy, reject. */\n\tmemset(wbuf, 0, wbuf_len * sizeof(wchar_t));\n\tMultiByteToWideChar(CP_UTF8, 0, buf, -1, wbuf, (int)wbuf_len);\n\tWideCharToMultiByte(\n\t    CP_UTF8, 0, wbuf, (int)wbuf_len, buf2, sizeof(buf2), NULL, NULL);\n\tif (strcmp(buf, buf2) != 0) {\n\t\twbuf[0] = L'\\0';\n\t}\n\n\t/* Windows file systems are not case sensitive, but you can still use\n\t * uppercase and lowercase letters (on all modern file systems).\n\t * The server can check if the URI uses the same upper/lowercase\n\t * letters an the file system, effectively making Windows servers\n\t * case sensitive (like Linux servers are). It is still not possible\n\t * to use two files with the same name in different cases on Windows\n\t * (like /a and /A) - this would be possible in Linux.\n\t * As a default, Windows is not case sensitive, but the case sensitive\n\t * file name check can be activated by an additional configuration. */\n\tif (conn) {\n\t\tif (conn->ctx->config[CASE_SENSITIVE_FILES]\n\t\t    && !mg_strcasecmp(conn->ctx->config[CASE_SENSITIVE_FILES], \"yes\")) {\n\t\t\t/* Use case sensitive compare function */\n\t\t\tfcompare = wcscmp;\n\t\t}\n\t}\n\t(void)conn; /* conn is currently unused */\n\n#if !defined(_WIN32_WCE)\n\t/* Only accept a full file path, not a Windows short (8.3) path. */\n\tmemset(wbuf2, 0, ARRAY_SIZE(wbuf2) * sizeof(wchar_t));\n\tlong_len = GetLongPathNameW(wbuf, wbuf2, ARRAY_SIZE(wbuf2) - 1);\n\tif (long_len == 0) {\n\t\terr = GetLastError();\n\t\tif (err == ERROR_FILE_NOT_FOUND) {\n\t\t\t/* File does not exist. This is not always a problem here. */\n\t\t\treturn;\n\t\t}\n\t}\n\tif ((long_len >= ARRAY_SIZE(wbuf2)) || (fcompare(wbuf, wbuf2) != 0)) {\n\t\t/* Short name is used. */\n\t\twbuf[0] = L'\\0';\n\t}\n#else\n\t(void)long_len;\n\t(void)wbuf2;\n\t(void)err;\n\n\tif (strchr(path, '~')) {\n\t\twbuf[0] = L'\\0';\n\t}\n#endif\n}\n\n\n/* Windows happily opens files with some garbage at the end of file name.\n * For example, fopen(\"a.cgi    \", \"r\") on Windows successfully opens\n * \"a.cgi\", despite one would expect an error back.\n * This function returns non-0 if path ends with some garbage. */\nstatic int\npath_cannot_disclose_cgi(const char *path)\n{\n\tstatic const char *allowed_last_characters = \"_-\";\n\tint last = path[strlen(path) - 1];\n\treturn isalnum(last) || strchr(allowed_last_characters, last) != NULL;\n}\n\n\nstatic int\nmg_stat(const struct mg_connection *conn,\n        const char *path,\n        struct mg_file_stat *filep)\n{\n\twchar_t wbuf[PATH_MAX];\n\tWIN32_FILE_ATTRIBUTE_DATA info;\n\ttime_t creation_time;\n\n\tif (!filep) {\n\t\treturn 0;\n\t}\n\tmemset(filep, 0, sizeof(*filep));\n\n\tif (conn && is_file_in_memory(conn, path)) {\n\t\t/* filep->is_directory = 0; filep->gzipped = 0; .. already done by\n\t\t * memset */\n\t\tfilep->last_modified = time(NULL); /* xxxxxxxx */\n\t\t/* last_modified = now ... assumes the file may change during runtime,\n\t\t * so every mg_fopen call may return different data */\n\t\t/* last_modified = conn->ctx.start_time;\n\t\t * May be used it the data does not change during runtime. This allows\n\t\t * browser caching. Since we do not know, we have to assume the file\n\t\t * in memory may change. */\n\t\treturn 1;\n\t}\n\n\tpath_to_unicode(conn, path, wbuf, ARRAY_SIZE(wbuf));\n\tif (GetFileAttributesExW(wbuf, GetFileExInfoStandard, &info) != 0) {\n\t\tfilep->size = MAKEUQUAD(info.nFileSizeLow, info.nFileSizeHigh);\n\t\tfilep->last_modified =\n\t\t    SYS2UNIX_TIME(info.ftLastWriteTime.dwLowDateTime,\n\t\t                  info.ftLastWriteTime.dwHighDateTime);\n\n\t\t/* On Windows, the file creation time can be higher than the\n\t\t * modification time, e.g. when a file is copied.\n\t\t * Since the Last-Modified timestamp is used for caching\n\t\t * it should be based on the most recent timestamp. */\n\t\tcreation_time = SYS2UNIX_TIME(info.ftCreationTime.dwLowDateTime,\n\t\t                              info.ftCreationTime.dwHighDateTime);\n\t\tif (creation_time > filep->last_modified) {\n\t\t\tfilep->last_modified = creation_time;\n\t\t}\n\n\t\tfilep->is_directory = info.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY;\n\t\t/* If file name is fishy, reset the file structure and return\n\t\t * error.\n\t\t * Note it is important to reset, not just return the error, cause\n\t\t * functions like is_file_opened() check the struct. */\n\t\tif (!filep->is_directory && !path_cannot_disclose_cgi(path)) {\n\t\t\tmemset(filep, 0, sizeof(*filep));\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\treturn 0;\n}\n\n\nstatic int\nmg_remove(const struct mg_connection *conn, const char *path)\n{\n\twchar_t wbuf[PATH_MAX];\n\tpath_to_unicode(conn, path, wbuf, ARRAY_SIZE(wbuf));\n\treturn DeleteFileW(wbuf) ? 0 : -1;\n}\n\n\nstatic int\nmg_mkdir(const struct mg_connection *conn, const char *path, int mode)\n{\n\twchar_t wbuf[PATH_MAX];\n\t(void)mode;\n\tpath_to_unicode(conn, path, wbuf, ARRAY_SIZE(wbuf));\n\treturn CreateDirectoryW(wbuf, NULL) ? 0 : -1;\n}\n\n\n/* Create substitutes for POSIX functions in Win32. */\n\n#if defined(__MINGW32__)\n/* Show no warning in case system functions are not used. */\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wunused-function\"\n#endif\n\n\n/* Implementation of POSIX opendir/closedir/readdir for Windows. */\nstatic DIR *\nmg_opendir(const struct mg_connection *conn, const char *name)\n{\n\tDIR *dir = NULL;\n\twchar_t wpath[PATH_MAX];\n\tDWORD attrs;\n\n\tif (name == NULL) {\n\t\tSetLastError(ERROR_BAD_ARGUMENTS);\n\t} else if ((dir = (DIR *)mg_malloc(sizeof(*dir))) == NULL) {\n\t\tSetLastError(ERROR_NOT_ENOUGH_MEMORY);\n\t} else {\n\t\tpath_to_unicode(conn, name, wpath, ARRAY_SIZE(wpath));\n\t\tattrs = GetFileAttributesW(wpath);\n\t\tif (attrs != 0xFFFFFFFF && ((attrs & FILE_ATTRIBUTE_DIRECTORY)\n\t\t                            == FILE_ATTRIBUTE_DIRECTORY)) {\n\t\t\t(void)wcscat(wpath, L\"\\\\*\");\n\t\t\tdir->handle = FindFirstFileW(wpath, &dir->info);\n\t\t\tdir->result.d_name[0] = '\\0';\n\t\t} else {\n\t\t\tmg_free(dir);\n\t\t\tdir = NULL;\n\t\t}\n\t}\n\n\treturn dir;\n}\n\n\nstatic int\nmg_closedir(DIR *dir)\n{\n\tint result = 0;\n\n\tif (dir != NULL) {\n\t\tif (dir->handle != INVALID_HANDLE_VALUE)\n\t\t\tresult = FindClose(dir->handle) ? 0 : -1;\n\n\t\tmg_free(dir);\n\t} else {\n\t\tresult = -1;\n\t\tSetLastError(ERROR_BAD_ARGUMENTS);\n\t}\n\n\treturn result;\n}\n\n\nstatic struct dirent *\nmg_readdir(DIR *dir)\n{\n\tstruct dirent *result = 0;\n\n\tif (dir) {\n\t\tif (dir->handle != INVALID_HANDLE_VALUE) {\n\t\t\tresult = &dir->result;\n\t\t\t(void)WideCharToMultiByte(CP_UTF8,\n\t\t\t                          0,\n\t\t\t                          dir->info.cFileName,\n\t\t\t                          -1,\n\t\t\t                          result->d_name,\n\t\t\t                          sizeof(result->d_name),\n\t\t\t                          NULL,\n\t\t\t                          NULL);\n\n\t\t\tif (!FindNextFileW(dir->handle, &dir->info)) {\n\t\t\t\t(void)FindClose(dir->handle);\n\t\t\t\tdir->handle = INVALID_HANDLE_VALUE;\n\t\t\t}\n\n\t\t} else {\n\t\t\tSetLastError(ERROR_FILE_NOT_FOUND);\n\t\t}\n\t} else {\n\t\tSetLastError(ERROR_BAD_ARGUMENTS);\n\t}\n\n\treturn result;\n}\n\n\n#ifndef HAVE_POLL\nstatic int\npoll(struct pollfd *pfd, unsigned int n, int milliseconds)\n{\n\tstruct timeval tv;\n\tfd_set set;\n\tunsigned int i;\n\tint result;\n\tSOCKET maxfd = 0;\n\n\tmemset(&tv, 0, sizeof(tv));\n\ttv.tv_sec = milliseconds / 1000;\n\ttv.tv_usec = (milliseconds % 1000) * 1000;\n\tFD_ZERO(&set);\n\n\tfor (i = 0; i < n; i++) {\n\t\tFD_SET((SOCKET)pfd[i].fd, &set);\n\t\tpfd[i].revents = 0;\n\n\t\tif (pfd[i].fd > maxfd) {\n\t\t\tmaxfd = pfd[i].fd;\n\t\t}\n\t}\n\n\tif ((result = select((int)maxfd + 1, &set, NULL, NULL, &tv)) > 0) {\n\t\tfor (i = 0; i < n; i++) {\n\t\t\tif (FD_ISSET(pfd[i].fd, &set)) {\n\t\t\t\tpfd[i].revents = POLLIN;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* We should subtract the time used in select from remaining\n\t * \"milliseconds\", in particular if called from mg_poll with a\n\t * timeout quantum.\n\t * Unfortunately, the remaining time is not stored in \"tv\" in all\n\t * implementations, so the result in \"tv\" must be considered undefined.\n\t * See http://man7.org/linux/man-pages/man2/select.2.html */\n\n\treturn result;\n}\n#endif /* HAVE_POLL */\n\n\n#if defined(__MINGW32__)\n/* Enable unused function warning again */\n#pragma GCC diagnostic pop\n#endif\n\n\nstatic void\nset_close_on_exec(SOCKET sock, struct mg_connection *conn /* may be null */)\n{\n\t(void)conn; /* Unused. */\n#if defined(_WIN32_WCE)\n\t(void)sock;\n#else\n\t(void)SetHandleInformation((HANDLE)(intptr_t)sock, HANDLE_FLAG_INHERIT, 0);\n#endif\n}\n\n\nint\nmg_start_thread(mg_thread_func_t f, void *p)\n{\n#if defined(USE_STACK_SIZE) && (USE_STACK_SIZE > 1)\n\t/* Compile-time option to control stack size, e.g. -DUSE_STACK_SIZE=16384\n\t */\n\treturn ((_beginthread((void(__cdecl *)(void *))f, USE_STACK_SIZE, p)\n\t         == ((uintptr_t)(-1L)))\n\t            ? -1\n\t            : 0);\n#else\n\treturn (\n\t    (_beginthread((void(__cdecl *)(void *))f, 0, p) == ((uintptr_t)(-1L)))\n\t        ? -1\n\t        : 0);\n#endif /* defined(USE_STACK_SIZE) && (USE_STACK_SIZE > 1) */\n}\n\n\n/* Start a thread storing the thread context. */\nstatic int\nmg_start_thread_with_id(unsigned(__stdcall *f)(void *),\n                        void *p,\n                        pthread_t *threadidptr)\n{\n\tuintptr_t uip;\n\tHANDLE threadhandle;\n\tint result = -1;\n\n\tuip = _beginthreadex(NULL, 0, (unsigned(__stdcall *)(void *))f, p, 0, NULL);\n\tthreadhandle = (HANDLE)uip;\n\tif ((uip != (uintptr_t)(-1L)) && (threadidptr != NULL)) {\n\t\t*threadidptr = threadhandle;\n\t\tresult = 0;\n\t}\n\n\treturn result;\n}\n\n\n/* Wait for a thread to finish. */\nstatic int\nmg_join_thread(pthread_t threadid)\n{\n\tint result;\n\tDWORD dwevent;\n\n\tresult = -1;\n\tdwevent = WaitForSingleObject(threadid, INFINITE);\n\tif (dwevent == WAIT_FAILED) {\n\t\tDEBUG_TRACE(\"WaitForSingleObject() failed, error %d\", ERRNO);\n\t} else {\n\t\tif (dwevent == WAIT_OBJECT_0) {\n\t\t\tCloseHandle(threadid);\n\t\t\tresult = 0;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n#if !defined(NO_SSL_DL) && !defined(NO_SSL)\n/* If SSL is loaded dynamically, dlopen/dlclose is required. */\n/* Create substitutes for POSIX functions in Win32. */\n\n#if defined(__MINGW32__)\n/* Show no warning in case system functions are not used. */\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wunused-function\"\n#endif\n\n\nstatic HANDLE\ndlopen(const char *dll_name, int flags)\n{\n\twchar_t wbuf[PATH_MAX];\n\t(void)flags;\n\tpath_to_unicode(NULL, dll_name, wbuf, ARRAY_SIZE(wbuf));\n\treturn LoadLibraryW(wbuf);\n}\n\n\nstatic int\ndlclose(void *handle)\n{\n\tint result;\n\n\tif (FreeLibrary((HMODULE)handle) != 0) {\n\t\tresult = 0;\n\t} else {\n\t\tresult = -1;\n\t}\n\n\treturn result;\n}\n\n\n#if defined(__MINGW32__)\n/* Enable unused function warning again */\n#pragma GCC diagnostic pop\n#endif\n\n#endif\n\n\n#if !defined(NO_CGI)\n#define SIGKILL (0)\n\nstatic int\nkill(pid_t pid, int sig_num)\n{\n\t(void)TerminateProcess((HANDLE)pid, (UINT)sig_num);\n\t(void)CloseHandle((HANDLE)pid);\n\treturn 0;\n}\n\n\nstatic void\ntrim_trailing_whitespaces(char *s)\n{\n\tchar *e = s + strlen(s) - 1;\n\twhile (e > s && isspace(*(unsigned char *)e)) {\n\t\t*e-- = '\\0';\n\t}\n}\n\n\nstatic pid_t\nspawn_process(struct mg_connection *conn,\n              const char *prog,\n              char *envblk,\n              char *envp[],\n              int fdin[2],\n              int fdout[2],\n              int fderr[2],\n              const char *dir)\n{\n\tHANDLE me;\n\tchar *p, *interp, full_interp[PATH_MAX], full_dir[PATH_MAX],\n\t    cmdline[PATH_MAX], buf[PATH_MAX];\n\tint truncated;\n\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\tSTARTUPINFOA si;\n\tPROCESS_INFORMATION pi = {0};\n\n\t(void)envp;\n\n\tmemset(&si, 0, sizeof(si));\n\tsi.cb = sizeof(si);\n\n\tsi.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;\n\tsi.wShowWindow = SW_HIDE;\n\n\tme = GetCurrentProcess();\n\tDuplicateHandle(me,\n\t                (HANDLE)_get_osfhandle(fdin[0]),\n\t                me,\n\t                &si.hStdInput,\n\t                0,\n\t                TRUE,\n\t                DUPLICATE_SAME_ACCESS);\n\tDuplicateHandle(me,\n\t                (HANDLE)_get_osfhandle(fdout[1]),\n\t                me,\n\t                &si.hStdOutput,\n\t                0,\n\t                TRUE,\n\t                DUPLICATE_SAME_ACCESS);\n\tDuplicateHandle(me,\n\t                (HANDLE)_get_osfhandle(fderr[1]),\n\t                me,\n\t                &si.hStdError,\n\t                0,\n\t                TRUE,\n\t                DUPLICATE_SAME_ACCESS);\n\n\t/* Mark handles that should not be inherited. See\n\t * https://msdn.microsoft.com/en-us/library/windows/desktop/ms682499%28v=vs.85%29.aspx\n\t */\n\tSetHandleInformation((HANDLE)_get_osfhandle(fdin[1]),\n\t                     HANDLE_FLAG_INHERIT,\n\t                     0);\n\tSetHandleInformation((HANDLE)_get_osfhandle(fdout[0]),\n\t                     HANDLE_FLAG_INHERIT,\n\t                     0);\n\tSetHandleInformation((HANDLE)_get_osfhandle(fderr[0]),\n\t                     HANDLE_FLAG_INHERIT,\n\t                     0);\n\n\t/* If CGI file is a script, try to read the interpreter line */\n\tinterp = conn->ctx->config[CGI_INTERPRETER];\n\tif (interp == NULL) {\n\t\tbuf[0] = buf[1] = '\\0';\n\n\t\t/* Read the first line of the script into the buffer */\n\t\tmg_snprintf(\n\t\t    conn, &truncated, cmdline, sizeof(cmdline), \"%s/%s\", dir, prog);\n\n\t\tif (truncated) {\n\t\t\tpi.hProcess = (pid_t)-1;\n\t\t\tgoto spawn_cleanup;\n\t\t}\n\n\t\tif (mg_fopen(conn, cmdline, MG_FOPEN_MODE_READ, &file)) {\n\t\t\tp = (char *)file.access.membuf;\n\t\t\tmg_fgets(buf, sizeof(buf), &file, &p);\n\t\t\t(void)mg_fclose(&file.access); /* ignore error on read only file */\n\t\t\tbuf[sizeof(buf) - 1] = '\\0';\n\t\t}\n\n\t\tif (buf[0] == '#' && buf[1] == '!') {\n\t\t\ttrim_trailing_whitespaces(buf + 2);\n\t\t} else {\n\t\t\tbuf[2] = '\\0';\n\t\t}\n\t\tinterp = buf + 2;\n\t}\n\n\tif (interp[0] != '\\0') {\n\t\tGetFullPathNameA(interp, sizeof(full_interp), full_interp, NULL);\n\t\tinterp = full_interp;\n\t}\n\tGetFullPathNameA(dir, sizeof(full_dir), full_dir, NULL);\n\n\tif (interp[0] != '\\0') {\n\t\tmg_snprintf(conn,\n\t\t            &truncated,\n\t\t            cmdline,\n\t\t            sizeof(cmdline),\n\t\t            \"\\\"%s\\\" \\\"%s\\\\%s\\\"\",\n\t\t            interp,\n\t\t            full_dir,\n\t\t            prog);\n\t} else {\n\t\tmg_snprintf(conn,\n\t\t            &truncated,\n\t\t            cmdline,\n\t\t            sizeof(cmdline),\n\t\t            \"\\\"%s\\\\%s\\\"\",\n\t\t            full_dir,\n\t\t            prog);\n\t}\n\n\tif (truncated) {\n\t\tpi.hProcess = (pid_t)-1;\n\t\tgoto spawn_cleanup;\n\t}\n\n\tDEBUG_TRACE(\"Running [%s]\", cmdline);\n\tif (CreateProcessA(NULL,\n\t                   cmdline,\n\t                   NULL,\n\t                   NULL,\n\t                   TRUE,\n\t                   CREATE_NEW_PROCESS_GROUP,\n\t                   envblk,\n\t                   NULL,\n\t                   &si,\n\t                   &pi) == 0) {\n\t\tmg_cry(\n\t\t    conn, \"%s: CreateProcess(%s): %ld\", __func__, cmdline, (long)ERRNO);\n\t\tpi.hProcess = (pid_t)-1;\n\t\t/* goto spawn_cleanup; */\n\t}\n\nspawn_cleanup:\n\t(void)CloseHandle(si.hStdOutput);\n\t(void)CloseHandle(si.hStdError);\n\t(void)CloseHandle(si.hStdInput);\n\tif (pi.hThread != NULL) {\n\t\t(void)CloseHandle(pi.hThread);\n\t}\n\n\treturn (pid_t)pi.hProcess;\n}\n#endif /* !NO_CGI */\n\n\nstatic int\nset_blocking_mode(SOCKET sock, int blocking)\n{\n\tunsigned long non_blocking = !blocking;\n\treturn ioctlsocket(sock, (long)FIONBIO, &non_blocking);\n}\n\n#else\n\nstatic int\nmg_stat(const struct mg_connection *conn,\n        const char *path,\n        struct mg_file_stat *filep)\n{\n\tstruct stat st;\n\tif (!filep) {\n\t\treturn 0;\n\t}\n\tmemset(filep, 0, sizeof(*filep));\n\n\tif (conn && is_file_in_memory(conn, path)) {\n\t\treturn 1;\n\t}\n\n\tif (0 == stat(path, &st)) {\n\t\tfilep->size = (uint64_t)(st.st_size);\n\t\tfilep->last_modified = st.st_mtime;\n\t\tfilep->is_directory = S_ISDIR(st.st_mode);\n\t\treturn 1;\n\t}\n\n\treturn 0;\n}\n\n\nstatic void\nset_close_on_exec(SOCKET fd, struct mg_connection *conn /* may be null */)\n{\n\tif (fcntl(fd, F_SETFD, FD_CLOEXEC) != 0) {\n\t\tif (conn) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: fcntl(F_SETFD FD_CLOEXEC) failed: %s\",\n\t\t\t       __func__,\n\t\t\t       strerror(ERRNO));\n\t\t}\n\t}\n}\n\n\nint\nmg_start_thread(mg_thread_func_t func, void *param)\n{\n\tpthread_t thread_id;\n\tpthread_attr_t attr;\n\tint result;\n\n\t(void)pthread_attr_init(&attr);\n\t(void)pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);\n\n#if defined(USE_STACK_SIZE) && (USE_STACK_SIZE > 1)\n\t/* Compile-time option to control stack size,\n\t * e.g. -DUSE_STACK_SIZE=16384 */\n\t(void)pthread_attr_setstacksize(&attr, USE_STACK_SIZE);\n#endif /* defined(USE_STACK_SIZE) && (USE_STACK_SIZE > 1) */\n\n\tresult = pthread_create(&thread_id, &attr, func, param);\n\tpthread_attr_destroy(&attr);\n\n\treturn result;\n}\n\n\n/* Start a thread storing the thread context. */\nstatic int\nmg_start_thread_with_id(mg_thread_func_t func,\n                        void *param,\n                        pthread_t *threadidptr)\n{\n\tpthread_t thread_id;\n\tpthread_attr_t attr;\n\tint result;\n\n\t(void)pthread_attr_init(&attr);\n\n#if defined(USE_STACK_SIZE) && (USE_STACK_SIZE > 1)\n\t/* Compile-time option to control stack size,\n\t * e.g. -DUSE_STACK_SIZE=16384 */\n\t(void)pthread_attr_setstacksize(&attr, USE_STACK_SIZE);\n#endif /* defined(USE_STACK_SIZE) && USE_STACK_SIZE > 1 */\n\n\tresult = pthread_create(&thread_id, &attr, func, param);\n\tpthread_attr_destroy(&attr);\n\tif ((result == 0) && (threadidptr != NULL)) {\n\t\t*threadidptr = thread_id;\n\t}\n\treturn result;\n}\n\n\n/* Wait for a thread to finish. */\nstatic int\nmg_join_thread(pthread_t threadid)\n{\n\tint result;\n\n\tresult = pthread_join(threadid, NULL);\n\treturn result;\n}\n\n\n#ifndef NO_CGI\nstatic pid_t\nspawn_process(struct mg_connection *conn,\n              const char *prog,\n              char *envblk,\n              char *envp[],\n              int fdin[2],\n              int fdout[2],\n              int fderr[2],\n              const char *dir)\n{\n\tpid_t pid;\n\tconst char *interp;\n\n\t(void)envblk;\n\n\tif (conn == NULL) {\n\t\treturn 0;\n\t}\n\n\tif ((pid = fork()) == -1) {\n\t\t/* Parent */\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Creating CGI process\\nfork(): %s\",\n\t\t                strerror(ERRNO));\n\t} else if (pid == 0) {\n\t\t/* Child */\n\t\tif (chdir(dir) != 0) {\n\t\t\tmg_cry(conn, \"%s: chdir(%s): %s\", __func__, dir, strerror(ERRNO));\n\t\t} else if (dup2(fdin[0], 0) == -1) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: dup2(%d, 0): %s\",\n\t\t\t       __func__,\n\t\t\t       fdin[0],\n\t\t\t       strerror(ERRNO));\n\t\t} else if (dup2(fdout[1], 1) == -1) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: dup2(%d, 1): %s\",\n\t\t\t       __func__,\n\t\t\t       fdout[1],\n\t\t\t       strerror(ERRNO));\n\t\t} else if (dup2(fderr[1], 2) == -1) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: dup2(%d, 2): %s\",\n\t\t\t       __func__,\n\t\t\t       fderr[1],\n\t\t\t       strerror(ERRNO));\n\t\t} else {\n\t\t\t/* Keep stderr and stdout in two different pipes.\n\t\t\t * Stdout will be sent back to the client,\n\t\t\t * stderr should go into a server error log. */\n\t\t\t(void)close(fdin[0]);\n\t\t\t(void)close(fdout[1]);\n\t\t\t(void)close(fderr[1]);\n\n\t\t\t/* Close write end fdin and read end fdout and fderr */\n\t\t\t(void)close(fdin[1]);\n\t\t\t(void)close(fdout[0]);\n\t\t\t(void)close(fderr[0]);\n\n\t\t\t/* After exec, all signal handlers are restored to their default\n\t\t\t * values, with one exception of SIGCHLD. According to\n\t\t\t * POSIX.1-2001 and Linux's implementation, SIGCHLD's handler will\n\t\t\t * leave unchanged after exec if it was set to be ignored. Restore\n\t\t\t * it to default action. */\n\t\t\tsignal(SIGCHLD, SIG_DFL);\n\n\t\t\tinterp = conn->ctx->config[CGI_INTERPRETER];\n\t\t\tif (interp == NULL) {\n\t\t\t\t(void)execle(prog, prog, NULL, envp);\n\t\t\t\tmg_cry(conn,\n\t\t\t\t       \"%s: execle(%s): %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       prog,\n\t\t\t\t       strerror(ERRNO));\n\t\t\t} else {\n\t\t\t\t(void)execle(interp, interp, prog, NULL, envp);\n\t\t\t\tmg_cry(conn,\n\t\t\t\t       \"%s: execle(%s %s): %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       interp,\n\t\t\t\t       prog,\n\t\t\t\t       strerror(ERRNO));\n\t\t\t}\n\t\t}\n\t\texit(EXIT_FAILURE);\n\t}\n\n\treturn pid;\n}\n#endif /* !NO_CGI */\n\n\nstatic int\nset_blocking_mode(SOCKET sock, int blocking)\n{\n\tint flags;\n\n\tflags = fcntl(sock, F_GETFL, 0);\n\tif (blocking) {\n\t\t(void)fcntl(sock, F_SETFL, flags | O_NONBLOCK);\n\t} else {\n\t\t(void)fcntl(sock, F_SETFL, flags & (~(int)(O_NONBLOCK)));\n\t}\n\n\treturn 0;\n}\n#endif /* _WIN32 */\n/* End of initial operating system specific define block. */\n\n\n/* Get a random number (independent of C rand function) */\nstatic uint64_t\nget_random(void)\n{\n\tstatic uint64_t lfsr = 0; /* Linear feedback shift register */\n\tstatic uint64_t lcg = 0;  /* Linear congruential generator */\n\tstruct timespec now;\n\n\tmemset(&now, 0, sizeof(now));\n\tclock_gettime(CLOCK_MONOTONIC, &now);\n\n\tif (lfsr == 0) {\n\t\t/* lfsr will be only 0 if has not been initialized,\n\t\t * so this code is called only once. */\n\t\tlfsr = (((uint64_t)now.tv_sec) << 21) ^ ((uint64_t)now.tv_nsec)\n\t\t       ^ ((uint64_t)(ptrdiff_t)&now) ^ (((uint64_t)time(NULL)) << 33);\n\t\tlcg = (((uint64_t)now.tv_sec) << 25) + (uint64_t)now.tv_nsec\n\t\t      + (uint64_t)(ptrdiff_t)&now;\n\t} else {\n\t\t/* Get the next step of both random number generators. */\n\t\tlfsr = (lfsr >> 1)\n\t\t       | ((((lfsr >> 0) ^ (lfsr >> 1) ^ (lfsr >> 3) ^ (lfsr >> 4)) & 1)\n\t\t          << 63);\n\t\tlcg = lcg * 6364136223846793005 + 1442695040888963407;\n\t}\n\n\t/* Combining two pseudo-random number generators and a high resolution part\n\t * of the current server time will make it hard (impossible?) to guess the\n\t * next number. */\n\treturn (lfsr ^ lcg ^ (uint64_t)now.tv_nsec);\n}\n\n\nstatic int\nmg_poll(struct pollfd *pfd,\n        unsigned int n,\n        int milliseconds,\n        volatile int *stop_server)\n{\n\tint ms_now, result;\n\n\t/* Call poll, but only for a maximum time of a few seconds.\n\t * This will allow to stop the server after some seconds, instead\n\t * of having to wait for a long socket timeout. */\n\tms_now = SOCKET_TIMEOUT_QUANTUM; /* Sleep quantum in ms */\n\n\tdo {\n\t\tif (*stop_server) {\n\t\t\t/* Shut down signal */\n\t\t\treturn -2;\n\t\t}\n\n\t\tif ((milliseconds >= 0) && (milliseconds < ms_now)) {\n\t\t\tms_now = milliseconds;\n\t\t}\n\n\t\tresult = poll(pfd, n, ms_now);\n\t\tif (result != 0) {\n\t\t\t/* Poll returned either success (1) or error (-1).\n\t\t\t * Forward both to the caller. */\n\t\t\treturn result;\n\t\t}\n\n\t\t/* Poll returned timeout (0). */\n\t\tif (milliseconds > 0) {\n\t\t\tmilliseconds -= ms_now;\n\t\t}\n\n\t} while (milliseconds != 0);\n\n\treturn result;\n}\n\n\n/* Write data to the IO channel - opened file descriptor, socket or SSL\n * descriptor. Return number of bytes written. */\nstatic int\npush(struct mg_context *ctx,\n     FILE *fp,\n     SOCKET sock,\n     SSL *ssl,\n     const char *buf,\n     int len,\n     double timeout)\n{\n\tstruct timespec start, now;\n\tint n, err;\n\n#ifdef _WIN32\n\ttypedef int len_t;\n#else\n\ttypedef size_t len_t;\n#endif\n\n\tif (timeout > 0) {\n\t\tmemset(&start, 0, sizeof(start));\n\t\tmemset(&now, 0, sizeof(now));\n\t\tclock_gettime(CLOCK_MONOTONIC, &start);\n\t}\n\n\tif (ctx == NULL) {\n\t\treturn -1;\n\t}\n\n#ifdef NO_SSL\n\tif (ssl) {\n\t\treturn -1;\n\t}\n#endif\n\n\tdo {\n\n#ifndef NO_SSL\n\t\tif (ssl != NULL) {\n\t\t\tn = SSL_write(ssl, buf, len);\n\t\t\tif (n <= 0) {\n\t\t\t\terr = SSL_get_error(ssl, n);\n\t\t\t\tif ((err == SSL_ERROR_SYSCALL) && (n == -1)) {\n\t\t\t\t\terr = ERRNO;\n\t\t\t\t} else if ((err == SSL_ERROR_WANT_READ)\n\t\t\t\t           || (err == SSL_ERROR_WANT_WRITE)) {\n\t\t\t\t\tn = 0;\n\t\t\t\t} else {\n\t\t\t\t\tDEBUG_TRACE(\"SSL_write() failed, error %d\", err);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = 0;\n\t\t\t}\n\t\t} else\n#endif\n\t\t    if (fp != NULL) {\n\t\t\tn = (int)fwrite(buf, 1, (size_t)len, fp);\n\t\t\tif (ferror(fp)) {\n\t\t\t\tn = -1;\n\t\t\t\terr = ERRNO;\n\t\t\t} else {\n\t\t\t\terr = 0;\n\t\t\t}\n\t\t} else {\n\t\t\tn = (int)send(sock, buf, (len_t)len, MSG_NOSIGNAL);\n\t\t\terr = (n < 0) ? ERRNO : 0;\n\t\t\tif (n <= 0) {\n\t\t\t\t/* shutdown of the socket at client side */\n\t\t\t\treturn -1;\n\t\t\t}\n#if defined(TEMPORARY_INSTRUMENTATION)\n\t\t\t{\n\t\t\t\tFILE *f = fopen(\"r:\\\\all.txt\", \"ab\");\n\t\t\t\tfprintf(f, \"\\r\\n%010u SEND:\\r\\n\", GetTickCount());\n\t\t\t\tfwrite(buf, 1, n, f);\n\t\t\t\tfclose(f);\n\t\t\t}\n#endif\n\t\t}\n\n\t\tif (ctx->stop_flag) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tif ((n > 0) || (n == 0 && len == 0)) {\n\t\t\t/* some data has been read, or no data was requested */\n\t\t\treturn n;\n\t\t}\n\t\tif (n < 0) {\n\t\t\t/* socket error - check errno */\n\t\t\tDEBUG_TRACE(\"send() failed, error %d\", err);\n\n\t\t\t/* TODO: error handling depending on the error code.\n\t\t\t * These codes are different between Windows and Linux.\n\t\t\t */\n\t\t\treturn -1;\n\t\t}\n\n\t\t/* Only in case n=0 (timeout), repeat calling the write function */\n\n\t\tif (timeout > 0) {\n\t\t\tclock_gettime(CLOCK_MONOTONIC, &now);\n\t\t}\n\n\t} while ((timeout <= 0) || (mg_difftimespec(&now, &start) <= timeout));\n\n\t(void)err; /* Avoid unused warning if NO_SSL is set and DEBUG_TRACE is not\n\t              used */\n\n\treturn -1;\n}\n\n\nstatic int64_t\npush_all(struct mg_context *ctx,\n         FILE *fp,\n         SOCKET sock,\n         SSL *ssl,\n         const char *buf,\n         int64_t len)\n{\n\tdouble timeout = -1.0;\n\tint64_t n, nwritten = 0;\n\n\tif (ctx == NULL) {\n\t\treturn -1;\n\t}\n\n\tif (ctx->config[REQUEST_TIMEOUT]) {\n\t\ttimeout = atoi(ctx->config[REQUEST_TIMEOUT]) / 1000.0;\n\t}\n\n\twhile (len > 0 && ctx->stop_flag == 0) {\n\t\tn = push(ctx, fp, sock, ssl, buf + nwritten, (int)len, timeout);\n\t\tif (n < 0) {\n\t\t\tif (nwritten == 0) {\n\t\t\t\tnwritten = n; /* Propagate the error */\n\t\t\t}\n\t\t\tbreak;\n\t\t} else if (n == 0) {\n\t\t\tbreak; /* No more data to write */\n\t\t} else {\n\t\t\tnwritten += n;\n\t\t\tlen -= n;\n\t\t}\n\t}\n\n\treturn nwritten;\n}\n\n\n/* Read from IO channel - opened file descriptor, socket, or SSL descriptor.\n * Return negative value on error, or number of bytes read on success. */\nstatic int\npull(FILE *fp, struct mg_connection *conn, char *buf, int len, double timeout)\n{\n\tint nread, err = 0;\n\n#ifdef _WIN32\n\ttypedef int len_t;\n#else\n\ttypedef size_t len_t;\n#endif\n\n\tif (fp != NULL) {\n#if !defined(_WIN32_WCE)\n\t\t/* Use read() instead of fread(), because if we're reading from the\n\t\t * CGI pipe, fread() may block until IO buffer is filled up. We\n\t\t * cannot afford to block and must pass all read bytes immediately\n\t\t * to the client. */\n\t\tnread = (int)read(fileno(fp), buf, (size_t)len);\n#else\n\t\t/* WinCE does not support CGI pipes */\n\t\tnread = (int)fread(buf, 1, (size_t)len, fp);\n#endif\n\t\terr = (nread < 0) ? ERRNO : 0;\n\n#ifndef NO_SSL\n\t} else if (conn->ssl != NULL) {\n\n\t\tstruct pollfd pfd[1];\n\t\tint pollres;\n\n\t\tpfd[0].fd = conn->client.sock;\n\t\tpfd[0].events = POLLIN;\n\t\tpollres =\n\t\t    mg_poll(pfd, 1, (int)(timeout * 1000.0), &(conn->ctx->stop_flag));\n\t\tif (conn->ctx->stop_flag) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (pollres > 0) {\n\t\t\tnread = SSL_read(conn->ssl, buf, len);\n\t\t\tif (nread <= 0) {\n\t\t\t\terr = SSL_get_error(conn->ssl, nread);\n\t\t\t\tif ((err == SSL_ERROR_SYSCALL) && (nread == -1)) {\n\t\t\t\t\terr = ERRNO;\n\t\t\t\t} else if ((err == SSL_ERROR_WANT_READ)\n\t\t\t\t           || (err == SSL_ERROR_WANT_WRITE)) {\n\t\t\t\t\tnread = 0;\n\t\t\t\t} else {\n\t\t\t\t\tDEBUG_TRACE(\"SSL_read() failed, error %d\", err);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = 0;\n\t\t\t}\n\n\t\t} else if (pollres < 0) {\n\t\t\t/* Error */\n\t\t\treturn -1;\n\t\t} else {\n\t\t\t/* pollres = 0 means timeout */\n\t\t\tnread = 0;\n\t\t}\n\n#endif\n\n\t} else {\n\t\tstruct pollfd pfd[1];\n\t\tint pollres;\n\n\t\tpfd[0].fd = conn->client.sock;\n\t\tpfd[0].events = POLLIN;\n\t\tpollres =\n\t\t    mg_poll(pfd, 1, (int)(timeout * 1000.0), &(conn->ctx->stop_flag));\n\t\tif (conn->ctx->stop_flag) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (pollres > 0) {\n\t\t\tnread = (int)recv(conn->client.sock, buf, (len_t)len, 0);\n\t\t\terr = (nread < 0) ? ERRNO : 0;\n\t\t\tif (nread <= 0) {\n\t\t\t\t/* shutdown of the socket at client side */\n\t\t\t\treturn -1;\n\t\t\t}\n#if defined(TEMPORARY_INSTRUMENTATION)\n\t\t\t{\n\t\t\t\tFILE *f = fopen(\"r:\\\\all.txt\", \"ab\");\n\t\t\t\tfprintf(f, \"\\r\\n%010u RECV:\\r\\n\", GetTickCount());\n\t\t\t\tfwrite(buf, 1, nread, f);\n\t\t\t\tfclose(f);\n\t\t\t}\n#endif\n\t\t} else if (pollres < 0) {\n\t\t\t/* error callint poll */\n\t\t\treturn -1;\n\t\t} else {\n\t\t\t/* pollres = 0 means timeout */\n\t\t\tnread = 0;\n\t\t}\n\t}\n\n\tif (conn->ctx->stop_flag) {\n\t\treturn -1;\n\t}\n\n\tif ((nread > 0) || (nread == 0 && len == 0)) {\n\t\t/* some data has been read, or no data was requested */\n\t\treturn nread;\n\t}\n\n\tif (nread < 0) {\n/* socket error - check errno */\n#ifdef _WIN32\n\t\tif (err == WSAEWOULDBLOCK) {\n\t\t\t/* TODO: check if this is still required */\n\t\t\t/* standard case if called from close_socket_gracefully */\n\t\t\treturn -1;\n\t\t} else if (err == WSAETIMEDOUT) {\n\t\t\t/* TODO: check if this is still required */\n\t\t\t/* timeout is handled by the while loop  */\n\t\t\treturn 0;\n\t\t} else if (err == WSAECONNABORTED) {\n\t\t\t/* See https://www.chilkatsoft.com/p/p_299.asp */\n\t\t\treturn -1;\n\t\t} else {\n\t\t\tDEBUG_TRACE(\"recv() failed, error %d\", err);\n\t\t\treturn -1;\n\t\t}\n#else\n\t\t/* TODO: POSIX returns either EAGAIN or EWOULDBLOCK in both cases,\n\t\t * if the timeout is reached and if the socket was set to non-\n\t\t * blocking in close_socket_gracefully, so we can not distinguish\n\t\t * here. We have to wait for the timeout in both cases for now.\n\t\t */\n\t\tif (err == EAGAIN || err == EWOULDBLOCK || err == EINTR) {\n\t\t\t/* TODO: check if this is still required */\n\t\t\t/* EAGAIN/EWOULDBLOCK:\n\t\t\t * standard case if called from close_socket_gracefully\n\t\t\t * => should return -1 */\n\t\t\t/* or timeout occured\n\t\t\t * => the code must stay in the while loop */\n\n\t\t\t/* EINTR can be generated on a socket with a timeout set even\n\t\t\t * when SA_RESTART is effective for all relevant signals\n\t\t\t * (see signal(7)).\n\t\t\t * => stay in the while loop */\n\t\t} else {\n\t\t\tDEBUG_TRACE(\"recv() failed, error %d\", err);\n\t\t\treturn -1;\n\t\t}\n#endif\n\t}\n\n\t/* Timeout occured, but no data available. */\n\treturn -1;\n}\n\n\nstatic int\npull_all(FILE *fp, struct mg_connection *conn, char *buf, int len)\n{\n\tint n, nread = 0;\n\tdouble timeout = -1.0;\n\n\tif (conn->ctx->config[REQUEST_TIMEOUT]) {\n\t\ttimeout = atoi(conn->ctx->config[REQUEST_TIMEOUT]) / 1000.0;\n\t}\n\n\twhile (len > 0 && conn->ctx->stop_flag == 0) {\n\t\tn = pull(fp, conn, buf + nread, len, timeout);\n\t\tif (n < 0) {\n\t\t\tif (nread == 0) {\n\t\t\t\tnread = n; /* Propagate the error */\n\t\t\t}\n\t\t\tbreak;\n\t\t} else if (n == 0) {\n\t\t\tbreak; /* No more data to read */\n\t\t} else {\n\t\t\tconn->consumed_content += n;\n\t\t\tnread += n;\n\t\t\tlen -= n;\n\t\t}\n\t}\n\n\treturn nread;\n}\n\n\nstatic void\ndiscard_unread_request_data(struct mg_connection *conn)\n{\n\tchar buf[MG_BUF_LEN];\n\tsize_t to_read;\n\tint nread;\n\n\tif (conn == NULL) {\n\t\treturn;\n\t}\n\n\tto_read = sizeof(buf);\n\n\tif (conn->is_chunked) {\n\t\t/* Chunked encoding: 1=chunk not read completely, 2=chunk read\n\t\t * completely */\n\t\twhile (conn->is_chunked == 1) {\n\t\t\tnread = mg_read(conn, buf, to_read);\n\t\t\tif (nread <= 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t} else {\n\t\t/* Not chunked: content length is known */\n\t\twhile (conn->consumed_content < conn->content_len) {\n\t\t\tif (to_read\n\t\t\t    > (size_t)(conn->content_len - conn->consumed_content)) {\n\t\t\t\tto_read = (size_t)(conn->content_len - conn->consumed_content);\n\t\t\t}\n\n\t\t\tnread = mg_read(conn, buf, to_read);\n\t\t\tif (nread <= 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nstatic int\nmg_read_inner(struct mg_connection *conn, void *buf, size_t len)\n{\n\tint64_t n, buffered_len, nread;\n\tint64_t len64 =\n\t    (int64_t)((len > INT_MAX) ? INT_MAX : len); /* since the return value is\n\t                                               * int, we may not read more\n\t                                               * bytes */\n\tconst char *body;\n\n\tif (conn == NULL) {\n\t\treturn 0;\n\t}\n\n\t/* If Content-Length is not set for a PUT or POST request, read until\n\t * socket is closed */\n\tif (conn->consumed_content == 0 && conn->content_len == -1) {\n\t\tconn->content_len = INT64_MAX;\n\t\tconn->must_close = 1;\n\t}\n\n\tnread = 0;\n\tif (conn->consumed_content < conn->content_len) {\n\t\t/* Adjust number of bytes to read. */\n\t\tint64_t left_to_read = conn->content_len - conn->consumed_content;\n\t\tif (left_to_read < len64) {\n\t\t\t/* Do not read more than the total content length of the request.\n\t\t\t */\n\t\t\tlen64 = left_to_read;\n\t\t}\n\n\t\t/* Return buffered data */\n\t\tbuffered_len = (int64_t)(conn->data_len) - (int64_t)conn->request_len\n\t\t               - conn->consumed_content;\n\t\tif (buffered_len > 0) {\n\t\t\tif (len64 < buffered_len) {\n\t\t\t\tbuffered_len = len64;\n\t\t\t}\n\t\t\tbody = conn->buf + conn->request_len + conn->consumed_content;\n\t\t\tmemcpy(buf, body, (size_t)buffered_len);\n\t\t\tlen64 -= buffered_len;\n\t\t\tconn->consumed_content += buffered_len;\n\t\t\tnread += buffered_len;\n\t\t\tbuf = (char *)buf + buffered_len;\n\t\t}\n\n\t\t/* We have returned all buffered data. Read new data from the remote\n\t\t * socket.\n\t\t */\n\t\tif ((n = pull_all(NULL, conn, (char *)buf, (int)len64)) >= 0) {\n\t\t\tnread += n;\n\t\t} else {\n\t\t\tnread = ((nread > 0) ? nread : n);\n\t\t}\n\t}\n\treturn (int)nread;\n}\n\n\nstatic char\nmg_getc(struct mg_connection *conn)\n{\n\tchar c;\n\tif (conn == NULL) {\n\t\treturn 0;\n\t}\n\tconn->content_len++;\n\tif (mg_read_inner(conn, &c, 1) <= 0) {\n\t\treturn (char)0;\n\t}\n\treturn c;\n}\n\n\nint\nmg_read(struct mg_connection *conn, void *buf, size_t len)\n{\n\tif (len > INT_MAX) {\n\t\tlen = INT_MAX;\n\t}\n\n\tif (conn == NULL) {\n\t\treturn 0;\n\t}\n\n\tif (conn->is_chunked) {\n\t\tsize_t all_read = 0;\n\n\t\twhile (len > 0) {\n\n\t\t\tif (conn->is_chunked == 2) {\n\t\t\t\t/* No more data left to read */\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (conn->chunk_remainder) {\n\t\t\t\t/* copy from the remainder of the last received chunk */\n\t\t\t\tlong read_ret;\n\t\t\t\tsize_t read_now =\n\t\t\t\t    ((conn->chunk_remainder > len) ? (len)\n\t\t\t\t                                   : (conn->chunk_remainder));\n\n\t\t\t\tconn->content_len += (int)read_now;\n\t\t\t\tread_ret =\n\t\t\t\t    mg_read_inner(conn, (char *)buf + all_read, read_now);\n\n\t\t\t\tif (read_ret < 1) {\n\t\t\t\t\t/* read error */\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\n\t\t\t\tall_read += (size_t)read_ret;\n\t\t\t\tconn->chunk_remainder -= (size_t)read_ret;\n\t\t\t\tlen -= (size_t)read_ret;\n\n\t\t\t\tif (conn->chunk_remainder == 0) {\n\t\t\t\t\t/* Add data bytes in the current chunk have been read,\n\t\t\t\t\t * so we are expecting \\r\\n now. */\n\t\t\t\t\tchar x1 = mg_getc(conn);\n\t\t\t\t\tchar x2 = mg_getc(conn);\n\t\t\t\t\tif ((x1 != '\\r') || (x2 != '\\n')) {\n\t\t\t\t\t\t/* Protocol violation */\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t/* fetch a new chunk */\n\t\t\t\tint i = 0;\n\t\t\t\tchar lenbuf[64];\n\t\t\t\tchar *end = 0;\n\t\t\t\tunsigned long chunkSize = 0;\n\n\t\t\t\tfor (i = 0; i < ((int)sizeof(lenbuf) - 1); i++) {\n\t\t\t\t\tlenbuf[i] = mg_getc(conn);\n\t\t\t\t\tif (i > 0 && lenbuf[i] == '\\r' && lenbuf[i - 1] != '\\r') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (i > 1 && lenbuf[i] == '\\n' && lenbuf[i - 1] == '\\r') {\n\t\t\t\t\t\tlenbuf[i + 1] = 0;\n\t\t\t\t\t\tchunkSize = strtoul(lenbuf, &end, 16);\n\t\t\t\t\t\tif (chunkSize == 0) {\n\t\t\t\t\t\t\t/* regular end of content */\n\t\t\t\t\t\t\tconn->is_chunked = 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (!isxdigit(lenbuf[i])) {\n\t\t\t\t\t\t/* illegal character for chunk length */\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ((end == NULL) || (*end != '\\r')) {\n\t\t\t\t\t/* chunksize not set correctly */\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (chunkSize == 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconn->chunk_remainder = chunkSize;\n\t\t\t}\n\t\t}\n\n\t\treturn (int)all_read;\n\t}\n\treturn mg_read_inner(conn, buf, len);\n}\n\n\nint\nmg_write(struct mg_connection *conn, const void *buf, size_t len)\n{\n\ttime_t now;\n\tint64_t n, total, allowed;\n\n\tif (conn == NULL) {\n\t\treturn 0;\n\t}\n\n\tif (conn->throttle > 0) {\n\t\tif ((now = time(NULL)) != conn->last_throttle_time) {\n\t\t\tconn->last_throttle_time = now;\n\t\t\tconn->last_throttle_bytes = 0;\n\t\t}\n\t\tallowed = conn->throttle - conn->last_throttle_bytes;\n\t\tif (allowed > (int64_t)len) {\n\t\t\tallowed = (int64_t)len;\n\t\t}\n\t\tif ((total = push_all(conn->ctx,\n\t\t                      NULL,\n\t\t                      conn->client.sock,\n\t\t                      conn->ssl,\n\t\t                      (const char *)buf,\n\t\t                      (int64_t)allowed)) == allowed) {\n\t\t\tbuf = (const char *)buf + total;\n\t\t\tconn->last_throttle_bytes += total;\n\t\t\twhile (total < (int64_t)len && conn->ctx->stop_flag == 0) {\n\t\t\t\tallowed = (conn->throttle > ((int64_t)len - total))\n\t\t\t\t              ? (int64_t)len - total\n\t\t\t\t              : conn->throttle;\n\t\t\t\tif ((n = push_all(conn->ctx,\n\t\t\t\t                  NULL,\n\t\t\t\t                  conn->client.sock,\n\t\t\t\t                  conn->ssl,\n\t\t\t\t                  (const char *)buf,\n\t\t\t\t                  (int64_t)allowed)) != allowed) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tsleep(1);\n\t\t\t\tconn->last_throttle_bytes = allowed;\n\t\t\t\tconn->last_throttle_time = time(NULL);\n\t\t\t\tbuf = (const char *)buf + n;\n\t\t\t\ttotal += n;\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttotal = push_all(conn->ctx,\n\t\t                 NULL,\n\t\t                 conn->client.sock,\n\t\t                 conn->ssl,\n\t\t                 (const char *)buf,\n\t\t                 (int64_t)len);\n\t}\n\treturn (int)total;\n}\n\n\n/* Alternative alloc_vprintf() for non-compliant C runtimes */\nstatic int\nalloc_vprintf2(char **buf, const char *fmt, va_list ap)\n{\n\tva_list ap_copy;\n\tsize_t size = MG_BUF_LEN / 4;\n\tint len = -1;\n\n\t*buf = NULL;\n\twhile (len < 0) {\n\t\tif (*buf) {\n\t\t\tmg_free(*buf);\n\t\t}\n\n\t\tsize *= 4;\n\t\t*buf = (char *)mg_malloc(size);\n\t\tif (!*buf) {\n\t\t\tbreak;\n\t\t}\n\n\t\tva_copy(ap_copy, ap);\n\t\tlen = vsnprintf_impl(*buf, size - 1, fmt, ap_copy);\n\t\tva_end(ap_copy);\n\t\t(*buf)[size - 1] = 0;\n\t}\n\n\treturn len;\n}\n\n\n/* Print message to buffer. If buffer is large enough to hold the message,\n * return buffer. If buffer is to small, allocate large enough buffer on heap,\n * and return allocated buffer. */\nstatic int\nalloc_vprintf(char **out_buf,\n              char *prealloc_buf,\n              size_t prealloc_size,\n              const char *fmt,\n              va_list ap)\n{\n\tva_list ap_copy;\n\tint len;\n\n\t/* Windows is not standard-compliant, and vsnprintf() returns -1 if\n\t * buffer is too small. Also, older versions of msvcrt.dll do not have\n\t * _vscprintf().  However, if size is 0, vsnprintf() behaves correctly.\n\t * Therefore, we make two passes: on first pass, get required message\n\t * length.\n\t * On second pass, actually print the message. */\n\tva_copy(ap_copy, ap);\n\tlen = vsnprintf_impl(NULL, 0, fmt, ap_copy);\n\tva_end(ap_copy);\n\n\tif (len < 0) {\n\t\t/* C runtime is not standard compliant, vsnprintf() returned -1.\n\t\t * Switch to alternative code path that uses incremental allocations.\n\t\t*/\n\t\tva_copy(ap_copy, ap);\n\t\tlen = alloc_vprintf2(out_buf, fmt, ap);\n\t\tva_end(ap_copy);\n\n\t} else if ((size_t)(len) >= prealloc_size) {\n\t\t/* The pre-allocated buffer not large enough. */\n\t\t/* Allocate a new buffer. */\n\t\t*out_buf = (char *)mg_malloc((size_t)(len) + 1);\n\t\tif (!*out_buf) {\n\t\t\t/* Allocation failed. Return -1 as \"out of memory\" error. */\n\t\t\treturn -1;\n\t\t}\n\t\t/* Buffer allocation successful. Store the string there. */\n\t\tva_copy(ap_copy, ap);\n\t\tIGNORE_UNUSED_RESULT(\n\t\t    vsnprintf_impl(*out_buf, (size_t)(len) + 1, fmt, ap_copy));\n\t\tva_end(ap_copy);\n\n\t} else {\n\t\t/* The pre-allocated buffer is large enough.\n\t\t * Use it to store the string and return the address. */\n\t\tva_copy(ap_copy, ap);\n\t\tIGNORE_UNUSED_RESULT(\n\t\t    vsnprintf_impl(prealloc_buf, prealloc_size, fmt, ap_copy));\n\t\tva_end(ap_copy);\n\t\t*out_buf = prealloc_buf;\n\t}\n\n\treturn len;\n}\n\n\nstatic int\nmg_vprintf(struct mg_connection *conn, const char *fmt, va_list ap)\n{\n\tchar mem[MG_BUF_LEN];\n\tchar *buf = NULL;\n\tint len;\n\n\tif ((len = alloc_vprintf(&buf, mem, sizeof(mem), fmt, ap)) > 0) {\n\t\tlen = mg_write(conn, buf, (size_t)len);\n\t}\n\tif (buf != mem && buf != NULL) {\n\t\tmg_free(buf);\n\t}\n\n\treturn len;\n}\n\n\nint\nmg_printf(struct mg_connection *conn, const char *fmt, ...)\n{\n\tva_list ap;\n\tint result;\n\n\tva_start(ap, fmt);\n\tresult = mg_vprintf(conn, fmt, ap);\n\tva_end(ap);\n\n\treturn result;\n}\n\n\nint\nmg_url_decode(const char *src,\n              int src_len,\n              char *dst,\n              int dst_len,\n              int is_form_url_encoded)\n{\n\tint i, j, a, b;\n#define HEXTOI(x) (isdigit(x) ? (x - '0') : (x - 'W'))\n\n\tfor (i = j = 0; (i < src_len) && (j < (dst_len - 1)); i++, j++) {\n\t\tif (i < src_len - 2 && src[i] == '%'\n\t\t    && isxdigit(*(const unsigned char *)(src + i + 1))\n\t\t    && isxdigit(*(const unsigned char *)(src + i + 2))) {\n\t\t\ta = tolower(*(const unsigned char *)(src + i + 1));\n\t\t\tb = tolower(*(const unsigned char *)(src + i + 2));\n\t\t\tdst[j] = (char)((HEXTOI(a) << 4) | HEXTOI(b));\n\t\t\ti += 2;\n\t\t} else if (is_form_url_encoded && src[i] == '+') {\n\t\t\tdst[j] = ' ';\n\t\t} else {\n\t\t\tdst[j] = src[i];\n\t\t}\n\t}\n\n\tdst[j] = '\\0'; /* Null-terminate the destination */\n\n\treturn (i >= src_len) ? j : -1;\n}\n\n\nint\nmg_get_var(const char *data,\n           size_t data_len,\n           const char *name,\n           char *dst,\n           size_t dst_len)\n{\n\treturn mg_get_var2(data, data_len, name, dst, dst_len, 0);\n}\n\n\nint\nmg_get_var2(const char *data,\n            size_t data_len,\n            const char *name,\n            char *dst,\n            size_t dst_len,\n            size_t occurrence)\n{\n\tconst char *p, *e, *s;\n\tsize_t name_len;\n\tint len;\n\n\tif (dst == NULL || dst_len == 0) {\n\t\tlen = -2;\n\t} else if (data == NULL || name == NULL || data_len == 0) {\n\t\tlen = -1;\n\t\tdst[0] = '\\0';\n\t} else {\n\t\tname_len = strlen(name);\n\t\te = data + data_len;\n\t\tlen = -1;\n\t\tdst[0] = '\\0';\n\n\t\t/* data is \"var1=val1&var2=val2...\". Find variable first */\n\t\tfor (p = data; p + name_len < e; p++) {\n\t\t\tif ((p == data || p[-1] == '&') && p[name_len] == '='\n\t\t\t    && !mg_strncasecmp(name, p, name_len) && 0 == occurrence--) {\n\t\t\t\t/* Point p to variable value */\n\t\t\t\tp += name_len + 1;\n\n\t\t\t\t/* Point s to the end of the value */\n\t\t\t\ts = (const char *)memchr(p, '&', (size_t)(e - p));\n\t\t\t\tif (s == NULL) {\n\t\t\t\t\ts = e;\n\t\t\t\t}\n\t\t\t\t/* assert(s >= p); */\n\t\t\t\tif (s < p) {\n\t\t\t\t\treturn -3;\n\t\t\t\t}\n\n\t\t\t\t/* Decode variable into destination buffer */\n\t\t\t\tlen = mg_url_decode(p, (int)(s - p), dst, (int)dst_len, 1);\n\n\t\t\t\t/* Redirect error code from -1 to -2 (destination buffer too\n\t\t\t\t * small). */\n\t\t\t\tif (len == -1) {\n\t\t\t\t\tlen = -2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn len;\n}\n\n\n/* HCP24: some changes to compare hole var_name */\nint\nmg_get_cookie(const char *cookie_header,\n              const char *var_name,\n              char *dst,\n              size_t dst_size)\n{\n\tconst char *s, *p, *end;\n\tint name_len, len = -1;\n\n\tif (dst == NULL || dst_size == 0) {\n\t\treturn -2;\n\t}\n\n\tdst[0] = '\\0';\n\tif (var_name == NULL || (s = cookie_header) == NULL) {\n\t\treturn -1;\n\t}\n\n\tname_len = (int)strlen(var_name);\n\tend = s + strlen(s);\n\tfor (; (s = mg_strcasestr(s, var_name)) != NULL; s += name_len) {\n\t\tif (s[name_len] == '=') {\n\t\t\t/* HCP24: now check is it a substring or a full cookie name */\n\t\t\tif ((s == cookie_header) || (s[-1] == ' ')) {\n\t\t\t\ts += name_len + 1;\n\t\t\t\tif ((p = strchr(s, ' ')) == NULL) {\n\t\t\t\t\tp = end;\n\t\t\t\t}\n\t\t\t\tif (p[-1] == ';') {\n\t\t\t\t\tp--;\n\t\t\t\t}\n\t\t\t\tif (*s == '\"' && p[-1] == '\"' && p > s + 1) {\n\t\t\t\t\ts++;\n\t\t\t\t\tp--;\n\t\t\t\t}\n\t\t\t\tif ((size_t)(p - s) < dst_size) {\n\t\t\t\t\tlen = (int)(p - s);\n\t\t\t\t\tmg_strlcpy(dst, s, (size_t)len + 1);\n\t\t\t\t} else {\n\t\t\t\t\tlen = -3;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn len;\n}\n\n\n#if defined(USE_WEBSOCKET) || defined(USE_LUA)\nstatic void\nbase64_encode(const unsigned char *src, int src_len, char *dst)\n{\n\tstatic const char *b64 =\n\t    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\tint i, j, a, b, c;\n\n\tfor (i = j = 0; i < src_len; i += 3) {\n\t\ta = src[i];\n\t\tb = ((i + 1) >= src_len) ? 0 : src[i + 1];\n\t\tc = ((i + 2) >= src_len) ? 0 : src[i + 2];\n\n\t\tdst[j++] = b64[a >> 2];\n\t\tdst[j++] = b64[((a & 3) << 4) | (b >> 4)];\n\t\tif (i + 1 < src_len) {\n\t\t\tdst[j++] = b64[(b & 15) << 2 | (c >> 6)];\n\t\t}\n\t\tif (i + 2 < src_len) {\n\t\t\tdst[j++] = b64[c & 63];\n\t\t}\n\t}\n\twhile (j % 4 != 0) {\n\t\tdst[j++] = '=';\n\t}\n\tdst[j++] = '\\0';\n}\n#endif\n\n\n#if defined(USE_LUA)\nstatic unsigned char\nb64reverse(char letter)\n{\n\tif (letter >= 'A' && letter <= 'Z') {\n\t\treturn letter - 'A';\n\t}\n\tif (letter >= 'a' && letter <= 'z') {\n\t\treturn letter - 'a' + 26;\n\t}\n\tif (letter >= '0' && letter <= '9') {\n\t\treturn letter - '0' + 52;\n\t}\n\tif (letter == '+') {\n\t\treturn 62;\n\t}\n\tif (letter == '/') {\n\t\treturn 63;\n\t}\n\tif (letter == '=') {\n\t\treturn 255; /* normal end */\n\t}\n\treturn 254; /* error */\n}\n\n\nstatic int\nbase64_decode(const unsigned char *src, int src_len, char *dst, size_t *dst_len)\n{\n\tint i;\n\tunsigned char a, b, c, d;\n\n\t*dst_len = 0;\n\n\tfor (i = 0; i < src_len; i += 4) {\n\t\ta = b64reverse(src[i]);\n\t\tif (a >= 254) {\n\t\t\treturn i;\n\t\t}\n\n\t\tb = b64reverse(((i + 1) >= src_len) ? 0 : src[i + 1]);\n\t\tif (b >= 254) {\n\t\t\treturn i + 1;\n\t\t}\n\n\t\tc = b64reverse(((i + 2) >= src_len) ? 0 : src[i + 2]);\n\t\tif (c == 254) {\n\t\t\treturn i + 2;\n\t\t}\n\n\t\td = b64reverse(((i + 3) >= src_len) ? 0 : src[i + 3]);\n\t\tif (d == 254) {\n\t\t\treturn i + 3;\n\t\t}\n\n\t\tdst[(*dst_len)++] = (a << 2) + (b >> 4);\n\t\tif (c != 255) {\n\t\t\tdst[(*dst_len)++] = (b << 4) + (c >> 2);\n\t\t\tif (d != 255) {\n\t\t\t\tdst[(*dst_len)++] = (c << 6) + d;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n#endif\n\n\nstatic int\nis_put_or_delete_method(const struct mg_connection *conn)\n{\n\tif (conn) {\n\t\tconst char *s = conn->request_info.request_method;\n\t\treturn s != NULL && (!strcmp(s, \"PUT\") || !strcmp(s, \"DELETE\")\n\t\t                     || !strcmp(s, \"MKCOL\") || !strcmp(s, \"PATCH\"));\n\t}\n\treturn 0;\n}\n\n\nstatic void\ninterpret_uri(struct mg_connection *conn,    /* in: request (must be valid) */\n              char *filename,                /* out: filename */\n              size_t filename_buf_len,       /* in: size of filename buffer */\n              struct mg_file_stat *filestat, /* out: file structure */\n              int *is_found,                 /* out: file found (directly) */\n              int *is_script_resource,       /* out: handled by a script? */\n              int *is_websocket_request,     /* out: websocket connetion? */\n              int *is_put_or_delete_request  /* out: put/delete a file? */\n              )\n{\n/* TODO (high): Restructure this function */\n\n#if !defined(NO_FILES)\n\tconst char *uri = conn->request_info.local_uri;\n\tconst char *root = conn->ctx->config[DOCUMENT_ROOT];\n\tconst char *rewrite;\n\tstruct vec a, b;\n\tint match_len;\n\tchar gz_path[PATH_MAX];\n\tchar const *accept_encoding;\n\tint truncated;\n#if !defined(NO_CGI) || defined(USE_LUA)\n\tchar *p;\n#endif\n#else\n\t(void)filename_buf_len; /* unused if NO_FILES is defined */\n#endif\n\n\tmemset(filestat, 0, sizeof(*filestat));\n\t*filename = 0;\n\t*is_found = 0;\n\t*is_script_resource = 0;\n\t*is_put_or_delete_request = is_put_or_delete_method(conn);\n\n#if defined(USE_WEBSOCKET)\n\t*is_websocket_request = is_websocket_protocol(conn);\n#if !defined(NO_FILES)\n\tif (*is_websocket_request && conn->ctx->config[WEBSOCKET_ROOT]) {\n\t\troot = conn->ctx->config[WEBSOCKET_ROOT];\n\t}\n#endif /* !NO_FILES */\n#else  /* USE_WEBSOCKET */\n\t*is_websocket_request = 0;\n#endif /* USE_WEBSOCKET */\n\n#if !defined(NO_FILES)\n\t/* Note that root == NULL is a regular use case here. This occurs,\n\t * if all requests are handled by callbacks, so the WEBSOCKET_ROOT\n\t * config is not required. */\n\tif (root == NULL) {\n\t\t/* all file related outputs have already been set to 0, just return\n\t\t */\n\t\treturn;\n\t}\n\n\t/* Using buf_len - 1 because memmove() for PATH_INFO may shift part\n\t * of the path one byte on the right.\n\t * If document_root is NULL, leave the file empty. */\n\tmg_snprintf(\n\t    conn, &truncated, filename, filename_buf_len - 1, \"%s%s\", root, uri);\n\n\tif (truncated) {\n\t\tgoto interpret_cleanup;\n\t}\n\n\trewrite = conn->ctx->config[REWRITE];\n\twhile ((rewrite = next_option(rewrite, &a, &b)) != NULL) {\n\t\tif ((match_len = match_prefix(a.ptr, a.len, uri)) > 0) {\n\t\t\tmg_snprintf(conn,\n\t\t\t            &truncated,\n\t\t\t            filename,\n\t\t\t            filename_buf_len - 1,\n\t\t\t            \"%.*s%s\",\n\t\t\t            (int)b.len,\n\t\t\t            b.ptr,\n\t\t\t            uri + match_len);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (truncated) {\n\t\tgoto interpret_cleanup;\n\t}\n\n\t/* Local file path and name, corresponding to requested URI\n\t * is now stored in \"filename\" variable. */\n\tif (mg_stat(conn, filename, filestat)) {\n#if !defined(NO_CGI) || defined(USE_LUA) || defined(USE_DUKTAPE)\n\t\t/* File exists. Check if it is a script type. */\n\t\tif (0\n#if !defined(NO_CGI)\n\t\t    || match_prefix(conn->ctx->config[CGI_EXTENSIONS],\n\t\t                    strlen(conn->ctx->config[CGI_EXTENSIONS]),\n\t\t                    filename) > 0\n#endif\n#if defined(USE_LUA)\n\t\t    || match_prefix(conn->ctx->config[LUA_SCRIPT_EXTENSIONS],\n\t\t                    strlen(conn->ctx->config[LUA_SCRIPT_EXTENSIONS]),\n\t\t                    filename) > 0\n#endif\n#if defined(USE_DUKTAPE)\n\t\t    || match_prefix(conn->ctx->config[DUKTAPE_SCRIPT_EXTENSIONS],\n\t\t                    strlen(\n\t\t                        conn->ctx->config[DUKTAPE_SCRIPT_EXTENSIONS]),\n\t\t                    filename) > 0\n#endif\n\t\t    ) {\n\t\t\t/* The request addresses a CGI script or a Lua script. The URI\n\t\t\t * corresponds to the script itself (like /path/script.cgi),\n\t\t\t * and there is no additional resource path\n\t\t\t * (like /path/script.cgi/something).\n\t\t\t * Requests that modify (replace or delete) a resource, like\n\t\t\t * PUT and DELETE requests, should replace/delete the script\n\t\t\t * file.\n\t\t\t * Requests that read or write from/to a resource, like GET and\n\t\t\t * POST requests, should call the script and return the\n\t\t\t * generated response. */\n\t\t\t*is_script_resource = !*is_put_or_delete_request;\n\t\t}\n#endif /* !defined(NO_CGI) || defined(USE_LUA) || defined(USE_DUKTAPE) */\n\t\t*is_found = 1;\n\t\treturn;\n\t}\n\n\t/* If we can't find the actual file, look for the file\n\t * with the same name but a .gz extension. If we find it,\n\t * use that and set the gzipped flag in the file struct\n\t * to indicate that the response need to have the content-\n\t * encoding: gzip header.\n\t * We can only do this if the browser declares support. */\n\tif ((accept_encoding = mg_get_header(conn, \"Accept-Encoding\")) != NULL) {\n\t\tif (strstr(accept_encoding, \"gzip\") != NULL) {\n\t\t\tmg_snprintf(\n\t\t\t    conn, &truncated, gz_path, sizeof(gz_path), \"%s.gz\", filename);\n\n\t\t\tif (truncated) {\n\t\t\t\tgoto interpret_cleanup;\n\t\t\t}\n\n\t\t\tif (mg_stat(conn, gz_path, filestat)) {\n\t\t\t\tif (filestat) {\n\t\t\t\t\tfilestat->is_gzipped = 1;\n\t\t\t\t\t*is_found = 1;\n\t\t\t\t}\n\t\t\t\t/* Currently gz files can not be scripts. */\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n#if !defined(NO_CGI) || defined(USE_LUA) || defined(USE_DUKTAPE)\n\t/* Support PATH_INFO for CGI scripts. */\n\tfor (p = filename + strlen(filename); p > filename + 1; p--) {\n\t\tif (*p == '/') {\n\t\t\t*p = '\\0';\n\t\t\tif ((0\n#if !defined(NO_CGI)\n\t\t\t     || match_prefix(conn->ctx->config[CGI_EXTENSIONS],\n\t\t\t                     strlen(conn->ctx->config[CGI_EXTENSIONS]),\n\t\t\t                     filename) > 0\n#endif\n#if defined(USE_LUA)\n\t\t\t     || match_prefix(conn->ctx->config[LUA_SCRIPT_EXTENSIONS],\n\t\t\t                     strlen(\n\t\t\t                         conn->ctx->config[LUA_SCRIPT_EXTENSIONS]),\n\t\t\t                     filename) > 0\n#endif\n#if defined(USE_DUKTAPE)\n\t\t\t     || match_prefix(\n\t\t\t            conn->ctx->config[DUKTAPE_SCRIPT_EXTENSIONS],\n\t\t\t            strlen(conn->ctx->config[DUKTAPE_SCRIPT_EXTENSIONS]),\n\t\t\t            filename) > 0\n#endif\n\t\t\t     ) && mg_stat(conn, filename, filestat)) {\n\t\t\t\t/* Shift PATH_INFO block one character right, e.g.\n\t\t\t\t * \"/x.cgi/foo/bar\\x00\" => \"/x.cgi\\x00/foo/bar\\x00\"\n\t\t\t\t * conn->path_info is pointing to the local variable \"path\"\n\t\t\t\t * declared in handle_request(), so PATH_INFO is not valid\n\t\t\t\t * after handle_request returns. */\n\t\t\t\tconn->path_info = p + 1;\n\t\t\t\tmemmove(p + 2, p + 1, strlen(p + 1) + 1); /* +1 is for\n\t\t\t\t                                           * trailing \\0 */\n\t\t\t\tp[1] = '/';\n\t\t\t\t*is_script_resource = 1;\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t*p = '/';\n\t\t\t}\n\t\t}\n\t}\n#endif /* !defined(NO_CGI) || defined(USE_LUA) || defined(USE_DUKTAPE) */\n#endif /* !defined(NO_FILES) */\n\treturn;\n\n#if !defined(NO_FILES)\n/* Reset all outputs */\ninterpret_cleanup:\n\tmemset(filestat, 0, sizeof(*filestat));\n\t*filename = 0;\n\t*is_found = 0;\n\t*is_script_resource = 0;\n\t*is_websocket_request = 0;\n\t*is_put_or_delete_request = 0;\n#endif /* !defined(NO_FILES) */\n}\n\n\n/* Check whether full request is buffered. Return:\n * -1  if request is malformed\n *  0  if request is not yet fully buffered\n * >0  actual request length, including last \\r\\n\\r\\n */\nstatic int\nget_request_len(const char *buf, int buflen)\n{\n\tconst char *s, *e;\n\tint len = 0;\n\n\tfor (s = buf, e = s + buflen - 1; len <= 0 && s < e; s++)\n\t\t/* Control characters are not allowed but >=128 is. */\n\t\tif (!isprint(*(const unsigned char *)s) && *s != '\\r' && *s != '\\n'\n\t\t    && *(const unsigned char *)s < 128) {\n\t\t\tlen = -1;\n\t\t\tbreak; /* [i_a] abort scan as soon as one malformed character is\n\t\t\t        * found; */\n\t\t\t/* don't let subsequent \\r\\n\\r\\n win us over anyhow */\n\t\t} else if (s[0] == '\\n' && s[1] == '\\n') {\n\t\t\tlen = (int)(s - buf) + 2;\n\t\t} else if (s[0] == '\\n' && &s[1] < e && s[1] == '\\r' && s[2] == '\\n') {\n\t\t\tlen = (int)(s - buf) + 3;\n\t\t}\n\n\treturn len;\n}\n\n\n#if !defined(NO_CACHING)\n/* Convert month to the month number. Return -1 on error, or month number */\nstatic int\nget_month_index(const char *s)\n{\n\tsize_t i;\n\n\tfor (i = 0; i < ARRAY_SIZE(month_names); i++) {\n\t\tif (!strcmp(s, month_names[i])) {\n\t\t\treturn (int)i;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\n\n/* Parse UTC date-time string, and return the corresponding time_t value. */\nstatic time_t\nparse_date_string(const char *datetime)\n{\n\tchar month_str[32] = {0};\n\tint second, minute, hour, day, month, year;\n\ttime_t result = (time_t)0;\n\tstruct tm tm;\n\n\tif ((sscanf(datetime,\n\t            \"%d/%3s/%d %d:%d:%d\",\n\t            &day,\n\t            month_str,\n\t            &year,\n\t            &hour,\n\t            &minute,\n\t            &second) == 6) || (sscanf(datetime,\n\t                                      \"%d %3s %d %d:%d:%d\",\n\t                                      &day,\n\t                                      month_str,\n\t                                      &year,\n\t                                      &hour,\n\t                                      &minute,\n\t                                      &second) == 6)\n\t    || (sscanf(datetime,\n\t               \"%*3s, %d %3s %d %d:%d:%d\",\n\t               &day,\n\t               month_str,\n\t               &year,\n\t               &hour,\n\t               &minute,\n\t               &second) == 6) || (sscanf(datetime,\n\t                                         \"%d-%3s-%d %d:%d:%d\",\n\t                                         &day,\n\t                                         month_str,\n\t                                         &year,\n\t                                         &hour,\n\t                                         &minute,\n\t                                         &second) == 6)) {\n\t\tmonth = get_month_index(month_str);\n\t\tif ((month >= 0) && (year >= 1970)) {\n\t\t\tmemset(&tm, 0, sizeof(tm));\n\t\t\ttm.tm_year = year - 1900;\n\t\t\ttm.tm_mon = month;\n\t\t\ttm.tm_mday = day;\n\t\t\ttm.tm_hour = hour;\n\t\t\ttm.tm_min = minute;\n\t\t\ttm.tm_sec = second;\n\t\t\tresult = timegm(&tm);\n\t\t}\n\t}\n\n\treturn result;\n}\n#endif /* !NO_CACHING */\n\n\n/* Protect against directory disclosure attack by removing '..',\n * excessive '/' and '\\' characters */\nstatic void\nremove_double_dots_and_double_slashes(char *s)\n{\n\tchar *p = s;\n\n\twhile ((s[0] == '.') && (s[1] == '.')) {\n\t\ts++;\n\t}\n\n\twhile (*s != '\\0') {\n\t\t*p++ = *s++;\n\t\tif (s[-1] == '/' || s[-1] == '\\\\') {\n\t\t\t/* Skip all following slashes, backslashes and double-dots */\n\t\t\twhile (s[0] != '\\0') {\n\t\t\t\tif (s[0] == '/' || s[0] == '\\\\') {\n\t\t\t\t\ts++;\n\t\t\t\t} else if (s[0] == '.' && s[1] == '.') {\n\t\t\t\t\ts += 2;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t*p = '\\0';\n}\n\n\nstatic const struct {\n\tconst char *extension;\n\tsize_t ext_len;\n\tconst char *mime_type;\n} builtin_mime_types[] = {\n    /* IANA registered MIME types (http://www.iana.org/assignments/media-types)\n     * application types */\n    {\".doc\", 4, \"application/msword\"},\n    {\".eps\", 4, \"application/postscript\"},\n    {\".exe\", 4, \"application/octet-stream\"},\n    {\".js\", 3, \"application/javascript\"},\n    {\".json\", 5, \"application/json\"},\n    {\".pdf\", 4, \"application/pdf\"},\n    {\".ps\", 3, \"application/postscript\"},\n    {\".rtf\", 4, \"application/rtf\"},\n    {\".xhtml\", 6, \"application/xhtml+xml\"},\n    {\".xsl\", 4, \"application/xml\"},\n    {\".xslt\", 5, \"application/xml\"},\n\n    /* fonts */\n    {\".ttf\", 4, \"application/font-sfnt\"},\n    {\".cff\", 4, \"application/font-sfnt\"},\n    {\".otf\", 4, \"application/font-sfnt\"},\n    {\".aat\", 4, \"application/font-sfnt\"},\n    {\".sil\", 4, \"application/font-sfnt\"},\n    {\".pfr\", 4, \"application/font-tdpfr\"},\n    {\".woff\", 5, \"application/font-woff\"},\n\n    /* audio */\n    {\".mp3\", 4, \"audio/mpeg\"},\n    {\".oga\", 4, \"audio/ogg\"},\n    {\".ogg\", 4, \"audio/ogg\"},\n\n    /* image */\n    {\".gif\", 4, \"image/gif\"},\n    {\".ief\", 4, \"image/ief\"},\n    {\".jpeg\", 5, \"image/jpeg\"},\n    {\".jpg\", 4, \"image/jpeg\"},\n    {\".jpm\", 4, \"image/jpm\"},\n    {\".jpx\", 4, \"image/jpx\"},\n    {\".png\", 4, \"image/png\"},\n    {\".svg\", 4, \"image/svg+xml\"},\n    {\".tif\", 4, \"image/tiff\"},\n    {\".tiff\", 5, \"image/tiff\"},\n\n    /* model */\n    {\".wrl\", 4, \"model/vrml\"},\n\n    /* text */\n    {\".css\", 4, \"text/css\"},\n    {\".csv\", 4, \"text/csv\"},\n    {\".htm\", 4, \"text/html\"},\n    {\".html\", 5, \"text/html\"},\n    {\".sgm\", 4, \"text/sgml\"},\n    {\".shtm\", 5, \"text/html\"},\n    {\".shtml\", 6, \"text/html\"},\n    {\".txt\", 4, \"text/plain\"},\n    {\".xml\", 4, \"text/xml\"},\n\n    /* video */\n    {\".mov\", 4, \"video/quicktime\"},\n    {\".mp4\", 4, \"video/mp4\"},\n    {\".mpeg\", 5, \"video/mpeg\"},\n    {\".mpg\", 4, \"video/mpeg\"},\n    {\".ogv\", 4, \"video/ogg\"},\n    {\".qt\", 3, \"video/quicktime\"},\n\n    /* not registered types\n     * (http://reference.sitepoint.com/html/mime-types-full,\n     * http://www.hansenb.pdx.edu/DMKB/dict/tutorials/mime_typ.php, ..) */\n    {\".arj\", 4, \"application/x-arj-compressed\"},\n    {\".gz\", 3, \"application/x-gunzip\"},\n    {\".rar\", 4, \"application/x-arj-compressed\"},\n    {\".swf\", 4, \"application/x-shockwave-flash\"},\n    {\".tar\", 4, \"application/x-tar\"},\n    {\".tgz\", 4, \"application/x-tar-gz\"},\n    {\".torrent\", 8, \"application/x-bittorrent\"},\n    {\".ppt\", 4, \"application/x-mspowerpoint\"},\n    {\".xls\", 4, \"application/x-msexcel\"},\n    {\".zip\", 4, \"application/x-zip-compressed\"},\n    {\".aac\",\n     4,\n     \"audio/aac\"}, /* http://en.wikipedia.org/wiki/Advanced_Audio_Coding */\n    {\".aif\", 4, \"audio/x-aif\"},\n    {\".m3u\", 4, \"audio/x-mpegurl\"},\n    {\".mid\", 4, \"audio/x-midi\"},\n    {\".ra\", 3, \"audio/x-pn-realaudio\"},\n    {\".ram\", 4, \"audio/x-pn-realaudio\"},\n    {\".wav\", 4, \"audio/x-wav\"},\n    {\".bmp\", 4, \"image/bmp\"},\n    {\".ico\", 4, \"image/x-icon\"},\n    {\".pct\", 4, \"image/x-pct\"},\n    {\".pict\", 5, \"image/pict\"},\n    {\".rgb\", 4, \"image/x-rgb\"},\n    {\".webm\", 5, \"video/webm\"}, /* http://en.wikipedia.org/wiki/WebM */\n    {\".asf\", 4, \"video/x-ms-asf\"},\n    {\".avi\", 4, \"video/x-msvideo\"},\n    {\".m4v\", 4, \"video/x-m4v\"},\n    {NULL, 0, NULL}};\n\n\nconst char *\nmg_get_builtin_mime_type(const char *path)\n{\n\tconst char *ext;\n\tsize_t i, path_len;\n\n\tpath_len = strlen(path);\n\n\tfor (i = 0; builtin_mime_types[i].extension != NULL; i++) {\n\t\text = path + (path_len - builtin_mime_types[i].ext_len);\n\t\tif (path_len > builtin_mime_types[i].ext_len\n\t\t    && mg_strcasecmp(ext, builtin_mime_types[i].extension) == 0) {\n\t\t\treturn builtin_mime_types[i].mime_type;\n\t\t}\n\t}\n\n\treturn \"text/plain\";\n}\n\n\n/* Look at the \"path\" extension and figure what mime type it has.\n * Store mime type in the vector. */\nstatic void\nget_mime_type(struct mg_context *ctx, const char *path, struct vec *vec)\n{\n\tstruct vec ext_vec, mime_vec;\n\tconst char *list, *ext;\n\tsize_t path_len;\n\n\tpath_len = strlen(path);\n\n\tif (ctx == NULL || vec == NULL) {\n\t\treturn;\n\t}\n\n\t/* Scan user-defined mime types first, in case user wants to\n\t * override default mime types. */\n\tlist = ctx->config[EXTRA_MIME_TYPES];\n\twhile ((list = next_option(list, &ext_vec, &mime_vec)) != NULL) {\n\t\t/* ext now points to the path suffix */\n\t\text = path + path_len - ext_vec.len;\n\t\tif (mg_strncasecmp(ext, ext_vec.ptr, ext_vec.len) == 0) {\n\t\t\t*vec = mime_vec;\n\t\t\treturn;\n\t\t}\n\t}\n\n\tvec->ptr = mg_get_builtin_mime_type(path);\n\tvec->len = strlen(vec->ptr);\n}\n\n\n/* Stringify binary data. Output buffer must be twice as big as input,\n * because each byte takes 2 bytes in string representation */\nstatic void\nbin2str(char *to, const unsigned char *p, size_t len)\n{\n\tstatic const char *hex = \"0123456789abcdef\";\n\n\tfor (; len--; p++) {\n\t\t*to++ = hex[p[0] >> 4];\n\t\t*to++ = hex[p[0] & 0x0f];\n\t}\n\t*to = '\\0';\n}\n\n\n/* Return stringified MD5 hash for list of strings. Buffer must be 33 bytes. */\nchar *\nmg_md5(char buf[33], ...)\n{\n\tmd5_byte_t hash[16];\n\tconst char *p;\n\tva_list ap;\n\tmd5_state_t ctx;\n\n\tmd5_init(&ctx);\n\n\tva_start(ap, buf);\n\twhile ((p = va_arg(ap, const char *)) != NULL) {\n\t\tmd5_append(&ctx, (const md5_byte_t *)p, strlen(p));\n\t}\n\tva_end(ap);\n\n\tmd5_finish(&ctx, hash);\n\tbin2str(buf, hash, sizeof(hash));\n\treturn buf;\n}\n\n\n/* Check the user's password, return 1 if OK */\nstatic int\ncheck_password(const char *method,\n               const char *ha1,\n               const char *uri,\n               const char *nonce,\n               const char *nc,\n               const char *cnonce,\n               const char *qop,\n               const char *response)\n{\n\tchar ha2[32 + 1], expected_response[32 + 1];\n\n\t/* Some of the parameters may be NULL */\n\tif (method == NULL || nonce == NULL || nc == NULL || cnonce == NULL\n\t    || qop == NULL\n\t    || response == NULL) {\n\t\treturn 0;\n\t}\n\n\t/* NOTE(lsm): due to a bug in MSIE, we do not compare the URI */\n\tif (strlen(response) != 32) {\n\t\treturn 0;\n\t}\n\n\tmg_md5(ha2, method, \":\", uri, NULL);\n\tmg_md5(expected_response,\n\t       ha1,\n\t       \":\",\n\t       nonce,\n\t       \":\",\n\t       nc,\n\t       \":\",\n\t       cnonce,\n\t       \":\",\n\t       qop,\n\t       \":\",\n\t       ha2,\n\t       NULL);\n\n\treturn mg_strcasecmp(response, expected_response) == 0;\n}\n\n\n/* Use the global passwords file, if specified by auth_gpass option,\n * or search for .htpasswd in the requested directory. */\nstatic void\nopen_auth_file(struct mg_connection *conn,\n               const char *path,\n               struct mg_file *filep)\n{\n\tif (conn != NULL && conn->ctx != NULL) {\n\t\tchar name[PATH_MAX];\n\t\tconst char *p, *e, *gpass = conn->ctx->config[GLOBAL_PASSWORDS_FILE];\n\t\tint truncated;\n\n\t\tif (gpass != NULL) {\n\t\t\t/* Use global passwords file */\n\t\t\tif (!mg_fopen(conn, gpass, MG_FOPEN_MODE_READ, filep)) {\n#ifdef DEBUG\n\t\t\t\tmg_cry(conn, \"fopen(%s): %s\", gpass, strerror(ERRNO));\n#endif\n\t\t\t}\n\t\t\t/* Important: using local struct mg_file to test path for\n\t\t\t * is_directory\n\t\t\t * flag. If filep is used, mg_stat() makes it appear as if auth file\n\t\t\t * was opened. TODO: mg_stat must not make anything appear to be\n\t\t\t * opened */\n\t\t} else if (mg_stat(conn, path, &filep->stat)\n\t\t           && filep->stat.is_directory) {\n\t\t\tmg_snprintf(conn,\n\t\t\t            &truncated,\n\t\t\t            name,\n\t\t\t            sizeof(name),\n\t\t\t            \"%s/%s\",\n\t\t\t            path,\n\t\t\t            PASSWORDS_FILE_NAME);\n\n\t\t\tif (truncated || !mg_fopen(conn, name, MG_FOPEN_MODE_READ, filep)) {\n#ifdef DEBUG\n\t\t\t\tmg_cry(conn, \"fopen(%s): %s\", name, strerror(ERRNO));\n#endif\n\t\t\t}\n\t\t} else {\n\t\t\t/* Try to find .htpasswd in requested directory. */\n\t\t\tfor (p = path, e = p + strlen(p) - 1; e > p; e--) {\n\t\t\t\tif (e[0] == '/') {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmg_snprintf(conn,\n\t\t\t            &truncated,\n\t\t\t            name,\n\t\t\t            sizeof(name),\n\t\t\t            \"%.*s/%s\",\n\t\t\t            (int)(e - p),\n\t\t\t            p,\n\t\t\t            PASSWORDS_FILE_NAME);\n\n\t\t\tif (truncated || !mg_fopen(conn, name, MG_FOPEN_MODE_READ, filep)) {\n#ifdef DEBUG\n\t\t\t\tmg_cry(conn, \"fopen(%s): %s\", name, strerror(ERRNO));\n#endif\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/* Parsed Authorization header */\nstruct ah {\n\tchar *user, *uri, *cnonce, *response, *qop, *nc, *nonce;\n};\n\n\n/* Return 1 on success. Always initializes the ah structure. */\nstatic int\nparse_auth_header(struct mg_connection *conn,\n                  char *buf,\n                  size_t buf_size,\n                  struct ah *ah)\n{\n\tchar *name, *value, *s;\n\tconst char *auth_header;\n\tuint64_t nonce;\n\n\tif (!ah || !conn) {\n\t\treturn 0;\n\t}\n\n\t(void)memset(ah, 0, sizeof(*ah));\n\tif ((auth_header = mg_get_header(conn, \"Authorization\")) == NULL\n\t    || mg_strncasecmp(auth_header, \"Digest \", 7) != 0) {\n\t\treturn 0;\n\t}\n\n\t/* Make modifiable copy of the auth header */\n\t(void)mg_strlcpy(buf, auth_header + 7, buf_size);\n\ts = buf;\n\n\t/* Parse authorization header */\n\tfor (;;) {\n\t\t/* Gobble initial spaces */\n\t\twhile (isspace(*(unsigned char *)s)) {\n\t\t\ts++;\n\t\t}\n\t\tname = skip_quoted(&s, \"=\", \" \", 0);\n\t\t/* Value is either quote-delimited, or ends at first comma or space. */\n\t\tif (s[0] == '\\\"') {\n\t\t\ts++;\n\t\t\tvalue = skip_quoted(&s, \"\\\"\", \" \", '\\\\');\n\t\t\tif (s[0] == ',') {\n\t\t\t\ts++;\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = skip_quoted(&s, \", \", \" \", 0); /* IE uses commas, FF uses\n\t\t\t                                        * spaces */\n\t\t}\n\t\tif (*name == '\\0') {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (!strcmp(name, \"username\")) {\n\t\t\tah->user = value;\n\t\t} else if (!strcmp(name, \"cnonce\")) {\n\t\t\tah->cnonce = value;\n\t\t} else if (!strcmp(name, \"response\")) {\n\t\t\tah->response = value;\n\t\t} else if (!strcmp(name, \"uri\")) {\n\t\t\tah->uri = value;\n\t\t} else if (!strcmp(name, \"qop\")) {\n\t\t\tah->qop = value;\n\t\t} else if (!strcmp(name, \"nc\")) {\n\t\t\tah->nc = value;\n\t\t} else if (!strcmp(name, \"nonce\")) {\n\t\t\tah->nonce = value;\n\t\t}\n\t}\n\n#ifndef NO_NONCE_CHECK\n\t/* Read the nonce from the response. */\n\tif (ah->nonce == NULL) {\n\t\treturn 0;\n\t}\n\ts = NULL;\n\tnonce = strtoull(ah->nonce, &s, 10);\n\tif ((s == NULL) || (*s != 0)) {\n\t\treturn 0;\n\t}\n\n\t/* Convert the nonce from the client to a number. */\n\tnonce ^= conn->ctx->auth_nonce_mask;\n\n\t/* The converted number corresponds to the time the nounce has been\n\t * created. This should not be earlier than the server start. */\n\t/* Server side nonce check is valuable in all situations but one:\n\t * if the server restarts frequently, but the client should not see\n\t * that, so the server should accept nonces from previous starts. */\n\t/* However, the reasonable default is to not accept a nonce from a\n\t * previous start, so if anyone changed the access rights between\n\t * two restarts, a new login is required. */\n\tif (nonce < (uint64_t)conn->ctx->start_time) {\n\t\t/* nonce is from a previous start of the server and no longer valid\n\t\t * (replay attack?) */\n\t\treturn 0;\n\t}\n\t/* Check if the nonce is too high, so it has not (yet) been used by the\n\t * server. */\n\tif (nonce >= ((uint64_t)conn->ctx->start_time + conn->ctx->nonce_count)) {\n\t\treturn 0;\n\t}\n#else\n\t(void)nonce;\n#endif\n\n\t/* CGI needs it as REMOTE_USER */\n\tif (ah->user != NULL) {\n\t\tconn->request_info.remote_user = mg_strdup(ah->user);\n\t} else {\n\t\treturn 0;\n\t}\n\n\treturn 1;\n}\n\n\nstatic const char *\nmg_fgets(char *buf, size_t size, struct mg_file *filep, char **p)\n{\n\tconst char *eof;\n\tsize_t len;\n\tconst char *memend;\n\n\tif (!filep) {\n\t\treturn NULL;\n\t}\n\n\tif (filep->access.membuf != NULL && *p != NULL) {\n\t\tmemend = (const char *)&filep->access.membuf[filep->stat.size];\n\t\t/* Search for \\n from p till the end of stream */\n\t\teof = (char *)memchr(*p, '\\n', (size_t)(memend - *p));\n\t\tif (eof != NULL) {\n\t\t\teof += 1; /* Include \\n */\n\t\t} else {\n\t\t\teof = memend; /* Copy remaining data */\n\t\t}\n\t\tlen =\n\t\t    ((size_t)(eof - *p) > (size - 1)) ? (size - 1) : (size_t)(eof - *p);\n\t\tmemcpy(buf, *p, len);\n\t\tbuf[len] = '\\0';\n\t\t*p += len;\n\t\treturn len ? eof : NULL;\n\t} else if (filep->access.fp != NULL) {\n\t\treturn fgets(buf, (int)size, filep->access.fp);\n\t} else {\n\t\treturn NULL;\n\t}\n}\n\n/* Define the initial recursion depth for procesesing htpasswd files that include other htpasswd \n * (or even the same) files.  It is not difficult to provide a file or files s.t. they force civetweb\n * to infinitely recurse and then crash.\n */\n#define INITIAL_DEPTH 9\n#if INITIAL_DEPTH <= 0\n#error Bad INITIAL_DEPTH for recursion, set to at least 1\n#endif\n\nstruct read_auth_file_struct {\n\tstruct mg_connection *conn;\n\tstruct ah ah;\n\tchar *domain;\n\tchar buf[256 + 256 + 40];\n\tchar *f_user;\n\tchar *f_domain;\n\tchar *f_ha1;\n};\n\n\nstatic int\nread_auth_file(struct mg_file *filep, struct read_auth_file_struct *workdata, int depth)\n{\n\tchar *p;\n\tint is_authorized = 0;\n\tstruct mg_file fp;\n\tsize_t l;\n\n\tif (!filep || !workdata || 0 == depth) {\n\t\treturn 0;\n\t}\n\n\t/* Loop over passwords file */\n\tp = (char *)filep->access.membuf;\n\twhile (mg_fgets(workdata->buf, sizeof(workdata->buf), filep, &p) != NULL) {\n\t\tl = strlen(workdata->buf);\n\t\twhile (l > 0) {\n\t\t\tif (isspace(workdata->buf[l - 1])\n\t\t\t    || iscntrl(workdata->buf[l - 1])) {\n\t\t\t\tl--;\n\t\t\t\tworkdata->buf[l] = 0;\n\t\t\t} else\n\t\t\t\tbreak;\n\t\t}\n\t\tif (l < 1) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tworkdata->f_user = workdata->buf;\n\n\t\tif (workdata->f_user[0] == ':') {\n\t\t\t/* user names may not contain a ':' and may not be empty,\n\t\t\t * so lines starting with ':' may be used for a special purpose */\n\t\t\tif (workdata->f_user[1] == '#') {\n\t\t\t\t/* :# is a comment */\n\t\t\t\tcontinue;\n\t\t\t} else if (!strncmp(workdata->f_user + 1, \"include=\", 8)) {\n\t\t\t\tif (mg_fopen(workdata->conn,\n\t\t\t\t             workdata->f_user + 9,\n\t\t\t\t             MG_FOPEN_MODE_READ,\n\t\t\t\t             &fp)) {\n\t\t\t\t\tis_authorized = read_auth_file(&fp, workdata, depth - 1);\n\t\t\t\t\t(void)mg_fclose(\n\t\t\t\t\t    &fp.access); /* ignore error on read only file */\n\t\t\t\t\t\n\t\t\t\t\t/* No need to continue processing files once we have a match, since nothing will reset it back\n\t\t\t\t\t * to 0.\n\t\t\t\t\t */\n\t\t\t\t\tif (is_authorized) {\n\t\t\t\t\t\treturn is_authorized;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmg_cry(workdata->conn,\n\t\t\t\t\t       \"%s: cannot open authorization file: %s\",\n\t\t\t\t\t       __func__,\n\t\t\t\t\t       workdata->buf);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t/* everything is invalid for the moment (might change in the\n\t\t\t * future) */\n\t\t\tmg_cry(workdata->conn,\n\t\t\t       \"%s: syntax error in authorization file: %s\",\n\t\t\t       __func__,\n\t\t\t       workdata->buf);\n\t\t\tcontinue;\n\t\t}\n\n\t\tworkdata->f_domain = strchr(workdata->f_user, ':');\n\t\tif (workdata->f_domain == NULL) {\n\t\t\tmg_cry(workdata->conn,\n\t\t\t       \"%s: syntax error in authorization file: %s\",\n\t\t\t       __func__,\n\t\t\t       workdata->buf);\n\t\t\tcontinue;\n\t\t}\n\t\t*(workdata->f_domain) = 0;\n\t\t(workdata->f_domain)++;\n\n\t\tworkdata->f_ha1 = strchr(workdata->f_domain, ':');\n\t\tif (workdata->f_ha1 == NULL) {\n\t\t\tmg_cry(workdata->conn,\n\t\t\t       \"%s: syntax error in authorization file: %s\",\n\t\t\t       __func__,\n\t\t\t       workdata->buf);\n\t\t\tcontinue;\n\t\t}\n\t\t*(workdata->f_ha1) = 0;\n\t\t(workdata->f_ha1)++;\n\n\t\tif (!strcmp(workdata->ah.user, workdata->f_user)\n\t\t    && !strcmp(workdata->domain, workdata->f_domain)) {\n\t\t\treturn check_password(workdata->conn->request_info.request_method,\n\t\t\t                      workdata->f_ha1,\n\t\t\t                      workdata->ah.uri,\n\t\t\t                      workdata->ah.nonce,\n\t\t\t                      workdata->ah.nc,\n\t\t\t                      workdata->ah.cnonce,\n\t\t\t                      workdata->ah.qop,\n\t\t\t                      workdata->ah.response);\n\t\t}\n\t}\n\n\treturn is_authorized;\n}\n\n\n/* Authorize against the opened passwords file. Return 1 if authorized. */\nstatic int\nauthorize(struct mg_connection *conn, struct mg_file *filep)\n{\n\tstruct read_auth_file_struct workdata;\n\tchar buf[MG_BUF_LEN];\n\n\tif (!conn || !conn->ctx) {\n\t\treturn 0;\n\t}\n\n\tmemset(&workdata, 0, sizeof(workdata));\n\tworkdata.conn = conn;\n\n\tif (!parse_auth_header(conn, buf, sizeof(buf), &workdata.ah)) {\n\t\treturn 0;\n\t}\n\tworkdata.domain = conn->ctx->config[AUTHENTICATION_DOMAIN];\n\n\treturn read_auth_file(filep, &workdata, INITIAL_DEPTH);\n}\n\n\n/* Return 1 if request is authorised, 0 otherwise. */\nstatic int\ncheck_authorization(struct mg_connection *conn, const char *path)\n{\n\tchar fname[PATH_MAX];\n\tstruct vec uri_vec, filename_vec;\n\tconst char *list;\n\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\tint authorized = 1, truncated;\n\n\tif (!conn || !conn->ctx) {\n\t\treturn 0;\n\t}\n\n\tlist = conn->ctx->config[PROTECT_URI];\n\twhile ((list = next_option(list, &uri_vec, &filename_vec)) != NULL) {\n\t\tif (!memcmp(conn->request_info.local_uri, uri_vec.ptr, uri_vec.len)) {\n\t\t\tmg_snprintf(conn,\n\t\t\t            &truncated,\n\t\t\t            fname,\n\t\t\t            sizeof(fname),\n\t\t\t            \"%.*s\",\n\t\t\t            (int)filename_vec.len,\n\t\t\t            filename_vec.ptr);\n\n\t\t\tif (truncated\n\t\t\t    || !mg_fopen(conn, fname, MG_FOPEN_MODE_READ, &file)) {\n\t\t\t\tmg_cry(conn,\n\t\t\t\t       \"%s: cannot open %s: %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       fname,\n\t\t\t\t       strerror(errno));\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!is_file_opened(&file.access)) {\n\t\topen_auth_file(conn, path, &file);\n\t}\n\n\tif (is_file_opened(&file.access)) {\n\t\tauthorized = authorize(conn, &file);\n\t\t(void)mg_fclose(&file.access); /* ignore error on read only file */\n\t}\n\n\treturn authorized;\n}\n\n\nstatic void\nsend_authorization_request(struct mg_connection *conn)\n{\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\n\tif (conn && conn->ctx) {\n\t\tuint64_t nonce = (uint64_t)(conn->ctx->start_time);\n\n\t\t(void)pthread_mutex_lock(&conn->ctx->nonce_mutex);\n\t\tnonce += conn->ctx->nonce_count;\n\t\t++conn->ctx->nonce_count;\n\t\t(void)pthread_mutex_unlock(&conn->ctx->nonce_mutex);\n\n\t\tnonce ^= conn->ctx->auth_nonce_mask;\n\t\tconn->status_code = 401;\n\t\tconn->must_close = 1;\n\n\t\tgmt_time_string(date, sizeof(date), &curtime);\n\n\t\tmg_printf(conn, \"HTTP/1.1 401 Unauthorized\\r\\n\");\n\t\tsend_no_cache_header(conn);\n\t\tmg_printf(conn,\n\t\t          \"Date: %s\\r\\n\"\n\t\t          \"Connection: %s\\r\\n\"\n\t\t          \"Content-Length: 0\\r\\n\"\n\t\t          \"WWW-Authenticate: Digest qop=\\\"auth\\\", realm=\\\"%s\\\", \"\n\t\t          \"nonce=\\\"%\" UINT64_FMT \"\\\"\\r\\n\\r\\n\",\n\t\t          date,\n\t\t          suggest_connection_header(conn),\n\t\t          conn->ctx->config[AUTHENTICATION_DOMAIN],\n\t\t          nonce);\n\t}\n}\n\n\n#if !defined(NO_FILES)\nstatic int\nis_authorized_for_put(struct mg_connection *conn)\n{\n\tif (conn) {\n\t\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\t\tconst char *passfile = conn->ctx->config[PUT_DELETE_PASSWORDS_FILE];\n\t\tint ret = 0;\n\n\t\tif (passfile != NULL\n\t\t    && mg_fopen(conn, passfile, MG_FOPEN_MODE_READ, &file)) {\n\t\t\tret = authorize(conn, &file);\n\t\t\t(void)mg_fclose(&file.access); /* ignore error on read only file */\n\t\t}\n\n\t\treturn ret;\n\t}\n\treturn 0;\n}\n#endif\n\n\nint\nmg_modify_passwords_file(const char *fname,\n                         const char *domain,\n                         const char *user,\n                         const char *pass)\n{\n\tint found, i;\n\tchar line[512], u[512] = \"\", d[512] = \"\", ha1[33], tmp[PATH_MAX + 8];\n\tFILE *fp, *fp2;\n\n\tfound = 0;\n\tfp = fp2 = NULL;\n\n\t/* Regard empty password as no password - remove user record. */\n\tif (pass != NULL && pass[0] == '\\0') {\n\t\tpass = NULL;\n\t}\n\n\t/* Other arguments must not be empty */\n\tif (fname == NULL || domain == NULL || user == NULL) {\n\t\treturn 0;\n\t}\n\n\t/* Using the given file format, user name and domain must not contain ':'\n\t */\n\tif (strchr(user, ':') != NULL) {\n\t\treturn 0;\n\t}\n\tif (strchr(domain, ':') != NULL) {\n\t\treturn 0;\n\t}\n\n\t/* Do not allow control characters like newline in user name and domain.\n\t * Do not allow excessively long names either. */\n\tfor (i = 0; i < 255 && user[i] != 0; i++) {\n\t\tif (iscntrl(user[i])) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\tif (user[i]) {\n\t\treturn 0;\n\t}\n\tfor (i = 0; i < 255 && domain[i] != 0; i++) {\n\t\tif (iscntrl(domain[i])) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\tif (domain[i]) {\n\t\treturn 0;\n\t}\n\n\t/* The maximum length of the path to the password file is limited */\n\tif ((strlen(fname) + 4) >= PATH_MAX) {\n\t\treturn 0;\n\t}\n\n\t/* Create a temporary file name. Length has been checked before. */\n\tstrcpy(tmp, fname);\n\tstrcat(tmp, \".tmp\");\n\n\t/* Create the file if does not exist */\n\t/* Use of fopen here is OK, since fname is only ASCII */\n\tif ((fp = fopen(fname, \"a+\")) != NULL) {\n\t\t(void)fclose(fp);\n\t}\n\n\t/* Open the given file and temporary file */\n\tif ((fp = fopen(fname, \"r\")) == NULL) {\n\t\treturn 0;\n\t} else if ((fp2 = fopen(tmp, \"w+\")) == NULL) {\n\t\tfclose(fp);\n\t\treturn 0;\n\t}\n\n\t/* Copy the stuff to temporary file */\n\twhile (fgets(line, sizeof(line), fp) != NULL) {\n\t\tif (sscanf(line, \"%255[^:]:%255[^:]:%*s\", u, d) != 2) {\n\t\t\tcontinue;\n\t\t}\n\t\tu[255] = 0;\n\t\td[255] = 0;\n\n\t\tif (!strcmp(u, user) && !strcmp(d, domain)) {\n\t\t\tfound++;\n\t\t\tif (pass != NULL) {\n\t\t\t\tmg_md5(ha1, user, \":\", domain, \":\", pass, NULL);\n\t\t\t\tfprintf(fp2, \"%s:%s:%s\\n\", user, domain, ha1);\n\t\t\t}\n\t\t} else {\n\t\t\tfprintf(fp2, \"%s\", line);\n\t\t}\n\t}\n\n\t/* If new user, just add it */\n\tif (!found && pass != NULL) {\n\t\tmg_md5(ha1, user, \":\", domain, \":\", pass, NULL);\n\t\tfprintf(fp2, \"%s:%s:%s\\n\", user, domain, ha1);\n\t}\n\n\t/* Close files */\n\tfclose(fp);\n\tfclose(fp2);\n\n\t/* Put the temp file in place of real file */\n\tIGNORE_UNUSED_RESULT(remove(fname));\n\tIGNORE_UNUSED_RESULT(rename(tmp, fname));\n\n\treturn 1;\n}\n\n\nstatic int\nis_valid_port(unsigned long port)\n{\n\treturn port < 0xffff;\n}\n\n\nstatic int\nmg_inet_pton(int af, const char *src, void *dst, size_t dstlen)\n{\n\tstruct addrinfo hints, *res, *ressave;\n\tint func_ret = 0;\n\tint gai_ret;\n\n\tmemset(&hints, 0, sizeof(struct addrinfo));\n\thints.ai_family = af;\n\n\tgai_ret = getaddrinfo(src, NULL, &hints, &res);\n\tif (gai_ret != 0) {\n\t\t/* gai_strerror could be used to convert gai_ret to a string */\n\t\t/* POSIX return values: see\n\t\t * http://pubs.opengroup.org/onlinepubs/9699919799/functions/freeaddrinfo.html\n\t\t */\n\t\t/* Windows return values: see\n\t\t * https://msdn.microsoft.com/en-us/library/windows/desktop/ms738520%28v=vs.85%29.aspx\n\t\t */\n\t\treturn 0;\n\t}\n\n\tressave = res;\n\n\twhile (res) {\n\t\tif (dstlen >= res->ai_addrlen) {\n\t\t\tmemcpy(dst, res->ai_addr, res->ai_addrlen);\n\t\t\tfunc_ret = 1;\n\t\t}\n\t\tres = res->ai_next;\n\t}\n\n\tfreeaddrinfo(ressave);\n\treturn func_ret;\n}\n\n\nstatic int\nconnect_socket(struct mg_context *ctx /* may be NULL */,\n               const char *host,\n               int port,\n               int use_ssl,\n               char *ebuf,\n               size_t ebuf_len,\n               SOCKET *sock /* output: socket, must not be NULL */,\n               union usa *sa /* output: socket address, must not be NULL  */\n               )\n{\n\tint ip_ver = 0;\n\t*sock = INVALID_SOCKET;\n\tmemset(sa, 0, sizeof(*sa));\n\n\tif (ebuf_len > 0) {\n\t\t*ebuf = 0;\n\t}\n\n\tif (host == NULL) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"NULL host\");\n\t\treturn 0;\n\t}\n\n\tif (port < 0 || !is_valid_port((unsigned)port)) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"invalid port\");\n\t\treturn 0;\n\t}\n\n#if !defined(NO_SSL)\n\tif (use_ssl && (SSLv23_client_method == NULL)) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"SSL is not initialized\");\n\t\treturn 0;\n\t}\n#else\n\t(void)use_ssl;\n#endif\n\n\tif (mg_inet_pton(AF_INET, host, &sa->sin, sizeof(sa->sin))) {\n\t\tsa->sin.sin_port = htons((uint16_t)port);\n\t\tip_ver = 4;\n#ifdef USE_IPV6\n\t} else if (mg_inet_pton(AF_INET6, host, &sa->sin6, sizeof(sa->sin6))) {\n\t\tsa->sin6.sin6_port = htons((uint16_t)port);\n\t\tip_ver = 6;\n\t} else if (host[0] == '[') {\n\t\t/* While getaddrinfo on Windows will work with [::1],\n\t\t * getaddrinfo on Linux only works with ::1 (without []). */\n\t\tsize_t l = strlen(host + 1);\n\t\tchar *h = (l > 1) ? mg_strdup(host + 1) : NULL;\n\t\tif (h) {\n\t\t\th[l - 1] = 0;\n\t\t\tif (mg_inet_pton(AF_INET6, h, &sa->sin6, sizeof(sa->sin6))) {\n\t\t\t\tsa->sin6.sin6_port = htons((uint16_t)port);\n\t\t\t\tip_ver = 6;\n\t\t\t}\n\t\t\tmg_free(h);\n\t\t}\n#endif\n\t}\n\n\tif (ip_ver == 0) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"host not found\");\n\t\treturn 0;\n\t}\n\n\tif (ip_ver == 4) {\n\t\t*sock = socket(PF_INET, SOCK_STREAM, 0);\n\t}\n#ifdef USE_IPV6\n\telse if (ip_ver == 6) {\n\t\t*sock = socket(PF_INET6, SOCK_STREAM, 0);\n\t}\n#endif\n\n\tif (*sock == INVALID_SOCKET) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"socket(): %s\",\n\t\t            strerror(ERRNO));\n\t\treturn 0;\n\t}\n\n\tset_close_on_exec(*sock, fc(ctx));\n\n\tif ((ip_ver == 4)\n\t    && (connect(*sock, (struct sockaddr *)&sa->sin, sizeof(sa->sin))\n\t        == 0)) {\n\t\t/* connected with IPv4 */\n\t\tset_blocking_mode(*sock, 0);\n\t\treturn 1;\n\t}\n\n#ifdef USE_IPV6\n\tif ((ip_ver == 6)\n\t    && (connect(*sock, (struct sockaddr *)&sa->sin6, sizeof(sa->sin6))\n\t        == 0)) {\n\t\t/* connected with IPv6 */\n\t\tset_blocking_mode(*sock, 0);\n\t\treturn 1;\n\t}\n#endif\n\n\t/* Not connected */\n\tmg_snprintf(NULL,\n\t            NULL, /* No truncation check for ebuf */\n\t            ebuf,\n\t            ebuf_len,\n\t            \"connect(%s:%d): %s\",\n\t            host,\n\t            port,\n\t            strerror(ERRNO));\n\tclosesocket(*sock);\n\t*sock = INVALID_SOCKET;\n\n\treturn 0;\n}\n\n\nint\nmg_url_encode(const char *src, char *dst, size_t dst_len)\n{\n\tstatic const char *dont_escape = \"._-$,;~()\";\n\tstatic const char *hex = \"0123456789abcdef\";\n\tchar *pos = dst;\n\tconst char *end = dst + dst_len - 1;\n\n\tfor (; *src != '\\0' && pos < end; src++, pos++) {\n\t\tif (isalnum(*(const unsigned char *)src)\n\t\t    || strchr(dont_escape, *(const unsigned char *)src) != NULL) {\n\t\t\t*pos = *src;\n\t\t} else if (pos + 2 < end) {\n\t\t\tpos[0] = '%';\n\t\t\tpos[1] = hex[(*(const unsigned char *)src) >> 4];\n\t\t\tpos[2] = hex[(*(const unsigned char *)src) & 0xf];\n\t\t\tpos += 2;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*pos = '\\0';\n\treturn (*src == '\\0') ? (int)(pos - dst) : -1;\n}\n\n\nstatic void\nprint_dir_entry(struct de *de)\n{\n\tchar size[64], mod[64], href[PATH_MAX * 3 /* worst case */];\n\tstruct tm *tm;\n\n\tif (de->file.is_directory) {\n\t\tmg_snprintf(de->conn,\n\t\t            NULL, /* Buffer is big enough */\n\t\t            size,\n\t\t            sizeof(size),\n\t\t            \"%s\",\n\t\t            \"[DIRECTORY]\");\n\t} else {\n\t\t/* We use (signed) cast below because MSVC 6 compiler cannot\n\t\t * convert unsigned __int64 to double. Sigh. */\n\t\tif (de->file.size < 1024) {\n\t\t\tmg_snprintf(de->conn,\n\t\t\t            NULL, /* Buffer is big enough */\n\t\t\t            size,\n\t\t\t            sizeof(size),\n\t\t\t            \"%d\",\n\t\t\t            (int)de->file.size);\n\t\t} else if (de->file.size < 0x100000) {\n\t\t\tmg_snprintf(de->conn,\n\t\t\t            NULL, /* Buffer is big enough */\n\t\t\t            size,\n\t\t\t            sizeof(size),\n\t\t\t            \"%.1fk\",\n\t\t\t            (double)de->file.size / 1024.0);\n\t\t} else if (de->file.size < 0x40000000) {\n\t\t\tmg_snprintf(de->conn,\n\t\t\t            NULL, /* Buffer is big enough */\n\t\t\t            size,\n\t\t\t            sizeof(size),\n\t\t\t            \"%.1fM\",\n\t\t\t            (double)de->file.size / 1048576);\n\t\t} else {\n\t\t\tmg_snprintf(de->conn,\n\t\t\t            NULL, /* Buffer is big enough */\n\t\t\t            size,\n\t\t\t            sizeof(size),\n\t\t\t            \"%.1fG\",\n\t\t\t            (double)de->file.size / 1073741824);\n\t\t}\n\t}\n\n\t/* Note: mg_snprintf will not cause a buffer overflow above.\n\t * So, string truncation checks are not required here. */\n\n\ttm = localtime(&de->file.last_modified);\n\tif (tm != NULL) {\n\t\tstrftime(mod, sizeof(mod), \"%d-%b-%Y %H:%M\", tm);\n\t} else {\n\t\tmg_strlcpy(mod, \"01-Jan-1970 00:00\", sizeof(mod));\n\t\tmod[sizeof(mod) - 1] = '\\0';\n\t}\n\tmg_url_encode(de->file_name, href, sizeof(href));\n\tde->conn->num_bytes_sent +=\n\t    mg_printf(de->conn,\n\t              \"<tr><td><a href=\\\"%s%s%s\\\">%s%s</a></td>\"\n\t              \"<td>&nbsp;%s</td><td>&nbsp;&nbsp;%s</td></tr>\\n\",\n\t              de->conn->request_info.local_uri,\n\t              href,\n\t              de->file.is_directory ? \"/\" : \"\",\n\t              de->file_name,\n\t              de->file.is_directory ? \"/\" : \"\",\n\t              mod,\n\t              size);\n}\n\n\n/* This function is called from send_directory() and used for\n * sorting directory entries by size, or name, or modification time.\n * On windows, __cdecl specification is needed in case if project is built\n * with __stdcall convention. qsort always requires __cdels callback. */\nstatic int WINCDECL\ncompare_dir_entries(const void *p1, const void *p2)\n{\n\tif (p1 && p2) {\n\t\tconst struct de *a = (const struct de *)p1, *b = (const struct de *)p2;\n\t\tconst char *query_string = a->conn->request_info.query_string;\n\t\tint cmp_result = 0;\n\n\t\tif (query_string == NULL) {\n\t\t\tquery_string = \"na\";\n\t\t}\n\n\t\tif (a->file.is_directory && !b->file.is_directory) {\n\t\t\treturn -1; /* Always put directories on top */\n\t\t} else if (!a->file.is_directory && b->file.is_directory) {\n\t\t\treturn 1; /* Always put directories on top */\n\t\t} else if (*query_string == 'n') {\n\t\t\tcmp_result = strcmp(a->file_name, b->file_name);\n\t\t} else if (*query_string == 's') {\n\t\t\tcmp_result = (a->file.size == b->file.size)\n\t\t\t                 ? 0\n\t\t\t                 : ((a->file.size > b->file.size) ? 1 : -1);\n\t\t} else if (*query_string == 'd') {\n\t\t\tcmp_result =\n\t\t\t    (a->file.last_modified == b->file.last_modified)\n\t\t\t        ? 0\n\t\t\t        : ((a->file.last_modified > b->file.last_modified) ? 1\n\t\t\t                                                           : -1);\n\t\t}\n\n\t\treturn (query_string[1] == 'd') ? -cmp_result : cmp_result;\n\t}\n\treturn 0;\n}\n\n\nstatic int\nmust_hide_file(struct mg_connection *conn, const char *path)\n{\n\tif (conn && conn->ctx) {\n\t\tconst char *pw_pattern = \"**\" PASSWORDS_FILE_NAME \"$\";\n\t\tconst char *pattern = conn->ctx->config[HIDE_FILES];\n\t\treturn match_prefix(pw_pattern, strlen(pw_pattern), path) > 0\n\t\t       || (pattern != NULL\n\t\t           && match_prefix(pattern, strlen(pattern), path) > 0);\n\t}\n\treturn 0;\n}\n\n\nstatic int\nscan_directory(struct mg_connection *conn,\n               const char *dir,\n               void *data,\n               void (*cb)(struct de *, void *))\n{\n\tchar path[PATH_MAX];\n\tstruct dirent *dp;\n\tDIR *dirp;\n\tstruct de de;\n\tint truncated;\n\n\tif ((dirp = mg_opendir(conn, dir)) == NULL) {\n\t\treturn 0;\n\t} else {\n\t\tde.conn = conn;\n\n\t\twhile ((dp = mg_readdir(dirp)) != NULL) {\n\t\t\t/* Do not show current dir and hidden files */\n\t\t\tif (!strcmp(dp->d_name, \".\") || !strcmp(dp->d_name, \"..\")\n\t\t\t    || must_hide_file(conn, dp->d_name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmg_snprintf(\n\t\t\t    conn, &truncated, path, sizeof(path), \"%s/%s\", dir, dp->d_name);\n\n\t\t\t/* If we don't memset stat structure to zero, mtime will have\n\t\t\t * garbage and strftime() will segfault later on in\n\t\t\t * print_dir_entry(). memset is required only if mg_stat()\n\t\t\t * fails. For more details, see\n\t\t\t * http://code.google.com/p/mongoose/issues/detail?id=79 */\n\t\t\tmemset(&de.file, 0, sizeof(de.file));\n\n\t\t\tif (truncated) {\n\t\t\t\t/* If the path is not complete, skip processing. */\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!mg_stat(conn, path, &de.file)) {\n\t\t\t\tmg_cry(conn,\n\t\t\t\t       \"%s: mg_stat(%s) failed: %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       path,\n\t\t\t\t       strerror(ERRNO));\n\t\t\t}\n\t\t\tde.file_name = dp->d_name;\n\t\t\tcb(&de, data);\n\t\t}\n\t\t(void)mg_closedir(dirp);\n\t}\n\treturn 1;\n}\n\n\n#if !defined(NO_FILES)\nstatic int\nremove_directory(struct mg_connection *conn, const char *dir)\n{\n\tchar path[PATH_MAX];\n\tstruct dirent *dp;\n\tDIR *dirp;\n\tstruct de de;\n\tint truncated;\n\tint ok = 1;\n\n\tif ((dirp = mg_opendir(conn, dir)) == NULL) {\n\t\treturn 0;\n\t} else {\n\t\tde.conn = conn;\n\n\t\twhile ((dp = mg_readdir(dirp)) != NULL) {\n\t\t\t/* Do not show current dir (but show hidden files as they will\n\t\t\t * also be removed) */\n\t\t\tif (!strcmp(dp->d_name, \".\") || !strcmp(dp->d_name, \"..\")) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmg_snprintf(\n\t\t\t    conn, &truncated, path, sizeof(path), \"%s/%s\", dir, dp->d_name);\n\n\t\t\t/* If we don't memset stat structure to zero, mtime will have\n\t\t\t * garbage and strftime() will segfault later on in\n\t\t\t * print_dir_entry(). memset is required only if mg_stat()\n\t\t\t * fails. For more details, see\n\t\t\t * http://code.google.com/p/mongoose/issues/detail?id=79 */\n\t\t\tmemset(&de.file, 0, sizeof(de.file));\n\n\t\t\tif (truncated) {\n\t\t\t\t/* Do not delete anything shorter */\n\t\t\t\tok = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!mg_stat(conn, path, &de.file)) {\n\t\t\t\tmg_cry(conn,\n\t\t\t\t       \"%s: mg_stat(%s) failed: %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       path,\n\t\t\t\t       strerror(ERRNO));\n\t\t\t\tok = 0;\n\t\t\t}\n\n\t\t\tif (de.file.is_directory) {\n\t\t\t\tif (remove_directory(conn, path) == 0) {\n\t\t\t\t\tok = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/* This will fail file is the file is in memory */\n\t\t\t\tif (mg_remove(conn, path) == 0) {\n\t\t\t\t\tok = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t(void)mg_closedir(dirp);\n\n\t\tIGNORE_UNUSED_RESULT(rmdir(dir));\n\t}\n\n\treturn ok;\n}\n#endif\n\n\nstruct dir_scan_data {\n\tstruct de *entries;\n\tunsigned int num_entries;\n\tunsigned int arr_size;\n};\n\n\n/* Behaves like realloc(), but frees original pointer on failure */\nstatic void *\nrealloc2(void *ptr, size_t size)\n{\n\tvoid *new_ptr = mg_realloc(ptr, size);\n\tif (new_ptr == NULL) {\n\t\tmg_free(ptr);\n\t}\n\treturn new_ptr;\n}\n\n\nstatic void\ndir_scan_callback(struct de *de, void *data)\n{\n\tstruct dir_scan_data *dsd = (struct dir_scan_data *)data;\n\n\tif (dsd->entries == NULL || dsd->num_entries >= dsd->arr_size) {\n\t\tdsd->arr_size *= 2;\n\t\tdsd->entries =\n\t\t    (struct de *)realloc2(dsd->entries,\n\t\t                          dsd->arr_size * sizeof(dsd->entries[0]));\n\t}\n\tif (dsd->entries == NULL) {\n\t\t/* TODO(lsm, low): propagate an error to the caller */\n\t\tdsd->num_entries = 0;\n\t} else {\n\t\tdsd->entries[dsd->num_entries].file_name = mg_strdup(de->file_name);\n\t\tdsd->entries[dsd->num_entries].file = de->file;\n\t\tdsd->entries[dsd->num_entries].conn = de->conn;\n\t\tdsd->num_entries++;\n\t}\n}\n\n\nstatic void\nhandle_directory_request(struct mg_connection *conn, const char *dir)\n{\n\tunsigned int i;\n\tint sort_direction;\n\tstruct dir_scan_data data = {NULL, 0, 128};\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\n\tif (!scan_directory(conn, dir, &data, dir_scan_callback)) {\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Cannot open directory\\nopendir(%s): %s\",\n\t\t                dir,\n\t\t                strerror(ERRNO));\n\t\treturn;\n\t}\n\n\tgmt_time_string(date, sizeof(date), &curtime);\n\n\tif (!conn) {\n\t\treturn;\n\t}\n\n\tsort_direction = ((conn->request_info.query_string != NULL)\n\t                  && (conn->request_info.query_string[1] == 'd'))\n\t                     ? 'a'\n\t                     : 'd';\n\n\tconn->must_close = 1;\n\tmg_printf(conn, \"HTTP/1.1 200 OK\\r\\n\");\n\tsend_static_cache_header(conn);\n\tmg_printf(conn,\n\t          \"Date: %s\\r\\n\"\n\t          \"Connection: close\\r\\n\"\n\t          \"Content-Type: text/html; charset=utf-8\\r\\n\\r\\n\",\n\t          date);\n\n\tconn->num_bytes_sent +=\n\t    mg_printf(conn,\n\t              \"<html><head><title>Index of %s</title>\"\n\t              \"<style>th {text-align: left;}</style></head>\"\n\t              \"<body><h1>Index of %s</h1><pre><table cellpadding=\\\"0\\\">\"\n\t              \"<tr><th><a href=\\\"?n%c\\\">Name</a></th>\"\n\t              \"<th><a href=\\\"?d%c\\\">Modified</a></th>\"\n\t              \"<th><a href=\\\"?s%c\\\">Size</a></th></tr>\"\n\t              \"<tr><td colspan=\\\"3\\\"><hr></td></tr>\",\n\t              conn->request_info.local_uri,\n\t              conn->request_info.local_uri,\n\t              sort_direction,\n\t              sort_direction,\n\t              sort_direction);\n\n\t/* Print first entry - link to a parent directory */\n\tconn->num_bytes_sent +=\n\t    mg_printf(conn,\n\t              \"<tr><td><a href=\\\"%s%s\\\">%s</a></td>\"\n\t              \"<td>&nbsp;%s</td><td>&nbsp;&nbsp;%s</td></tr>\\n\",\n\t              conn->request_info.local_uri,\n\t              \"..\",\n\t              \"Parent directory\",\n\t              \"-\",\n\t              \"-\");\n\n\t/* Sort and print directory entries */\n\tif (data.entries != NULL) {\n\t\tqsort(data.entries,\n\t\t      (size_t)data.num_entries,\n\t\t      sizeof(data.entries[0]),\n\t\t      compare_dir_entries);\n\t\tfor (i = 0; i < data.num_entries; i++) {\n\t\t\tprint_dir_entry(&data.entries[i]);\n\t\t\tmg_free(data.entries[i].file_name);\n\t\t}\n\t\tmg_free(data.entries);\n\t}\n\n\tconn->num_bytes_sent += mg_printf(conn, \"%s\", \"</table></body></html>\");\n\tconn->status_code = 200;\n}\n\n\n/* Send len bytes from the opened file to the client. */\nstatic void\nsend_file_data(struct mg_connection *conn,\n               struct mg_file *filep,\n               int64_t offset,\n               int64_t len)\n{\n\tchar buf[MG_BUF_LEN];\n\tint to_read, num_read, num_written;\n\tint64_t size;\n\n\tif (!filep || !conn) {\n\t\treturn;\n\t}\n\n\t/* Sanity check the offset */\n\tsize = (filep->stat.size > INT64_MAX) ? INT64_MAX\n\t                                      : (int64_t)(filep->stat.size);\n\toffset = (offset < 0) ? 0 : ((offset > size) ? size : offset);\n\n\tif ((len > 0) && (filep->access.membuf != NULL) && (size > 0)) {\n\t\t/* file stored in memory */\n\t\tif (len > size - offset) {\n\t\t\tlen = size - offset;\n\t\t}\n\t\tmg_write(conn, filep->access.membuf + offset, (size_t)len);\n\t} else if (len > 0 && filep->access.fp != NULL) {\n/* file stored on disk */\n#if defined(__linux__)\n\t\t/* sendfile is only available for Linux */\n\t\tif ((conn->ssl == 0) && (conn->throttle == 0)\n\t\t    && (!mg_strcasecmp(conn->ctx->config[ALLOW_SENDFILE_CALL],\n\t\t                       \"yes\"))) {\n\t\t\toff_t sf_offs = (off_t)offset;\n\t\t\tssize_t sf_sent;\n\t\t\tint sf_file = fileno(filep->access.fp);\n\t\t\tint loop_cnt = 0;\n\n\t\t\tdo {\n\t\t\t\t/* 2147479552 (0x7FFFF000) is a limit found by experiment on\n\t\t\t\t * 64 bit Linux (2^31 minus one memory page of 4k?). */\n\t\t\t\tsize_t sf_tosend =\n\t\t\t\t    (size_t)((len < 0x7FFFF000) ? len : 0x7FFFF000);\n\t\t\t\tsf_sent =\n\t\t\t\t    sendfile(conn->client.sock, sf_file, &sf_offs, sf_tosend);\n\t\t\t\tif (sf_sent > 0) {\n\t\t\t\t\tconn->num_bytes_sent += sf_sent;\n\t\t\t\t\tlen -= sf_sent;\n\t\t\t\t\toffset += sf_sent;\n\t\t\t\t} else if (loop_cnt == 0) {\n\t\t\t\t\t/* This file can not be sent using sendfile.\n\t\t\t\t\t * This might be the case for pseudo-files in the\n\t\t\t\t\t * /sys/ and /proc/ file system.\n\t\t\t\t\t * Use the regular user mode copy code instead. */\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (sf_sent == 0) {\n\t\t\t\t\t/* No error, but 0 bytes sent. May be EOF? */\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tloop_cnt++;\n\n\t\t\t} while ((len > 0) && (sf_sent >= 0));\n\n\t\t\tif (sf_sent > 0) {\n\t\t\t\treturn; /* OK */\n\t\t\t}\n\n\t\t\t/* sf_sent<0 means error, thus fall back to the classic way */\n\t\t\t/* This is always the case, if sf_file is not a \"normal\" file,\n\t\t\t * e.g., for sending data from the output of a CGI process. */\n\t\t\toffset = (int64_t)sf_offs;\n\t\t}\n#endif\n\t\tif ((offset > 0) && (fseeko(filep->access.fp, offset, SEEK_SET) != 0)) {\n\t\t\tmg_cry(conn, \"%s: fseeko() failed: %s\", __func__, strerror(ERRNO));\n\t\t\tsend_http_error(\n\t\t\t    conn,\n\t\t\t    500,\n\t\t\t    \"%s\",\n\t\t\t    \"Error: Unable to access file at requested position.\");\n\t\t} else {\n\t\t\twhile (len > 0) {\n\t\t\t\t/* Calculate how much to read from the file in the buffer */\n\t\t\t\tto_read = sizeof(buf);\n\t\t\t\tif ((int64_t)to_read > len) {\n\t\t\t\t\tto_read = (int)len;\n\t\t\t\t}\n\n\t\t\t\t/* Read from file, exit the loop on error */\n\t\t\t\tif ((num_read =\n\t\t\t\t         (int)fread(buf, 1, (size_t)to_read, filep->access.fp))\n\t\t\t\t    <= 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t/* Send read bytes to the client, exit the loop on error */\n\t\t\t\tif ((num_written = mg_write(conn, buf, (size_t)num_read))\n\t\t\t\t    != num_read) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t/* Both read and were successful, adjust counters */\n\t\t\t\tconn->num_bytes_sent += num_written;\n\t\t\t\tlen -= num_written;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nstatic int\nparse_range_header(const char *header, int64_t *a, int64_t *b)\n{\n\treturn sscanf(header, \"bytes=%\" INT64_FMT \"-%\" INT64_FMT, a, b);\n}\n\n\nstatic void\nconstruct_etag(char *buf, size_t buf_len, const struct mg_file_stat *filestat)\n{\n\tif (filestat != NULL && buf != NULL) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* All calls to construct_etag use 64 byte buffer */\n\t\t            buf,\n\t\t            buf_len,\n\t\t            \"\\\"%lx.%\" INT64_FMT \"\\\"\",\n\t\t            (unsigned long)filestat->last_modified,\n\t\t            filestat->size);\n\t}\n}\n\n\nstatic void\nfclose_on_exec(struct mg_file_access *filep, struct mg_connection *conn)\n{\n\tif (filep != NULL && filep->fp != NULL) {\n#ifdef _WIN32\n\t\t(void)conn; /* Unused. */\n#else\n\t\tif (fcntl(fileno(filep->fp), F_SETFD, FD_CLOEXEC) != 0) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: fcntl(F_SETFD FD_CLOEXEC) failed: %s\",\n\t\t\t       __func__,\n\t\t\t       strerror(ERRNO));\n\t\t}\n#endif\n\t}\n}\n\n\nstatic void\nhandle_static_file_request(struct mg_connection *conn,\n                           const char *path,\n                           struct mg_file *filep,\n                           const char *mime_type,\n                           const char *additional_headers)\n{\n\tchar date[64], lm[64], etag[64];\n\tchar range[128]; /* large enough, so there will be no overflow */\n\tconst char *msg = \"OK\", *hdr;\n\ttime_t curtime = time(NULL);\n\tint64_t cl, r1, r2;\n\tstruct vec mime_vec;\n\tint n, truncated;\n\tchar gz_path[PATH_MAX];\n\tconst char *encoding = \"\";\n\tconst char *cors1, *cors2, *cors3;\n\n\tif (conn == NULL || conn->ctx == NULL || filep == NULL) {\n\t\treturn;\n\t}\n\n\tif (mime_type == NULL) {\n\t\tget_mime_type(conn->ctx, path, &mime_vec);\n\t} else {\n\t\tmime_vec.ptr = mime_type;\n\t\tmime_vec.len = strlen(mime_type);\n\t}\n\tif (filep->stat.size > INT64_MAX) {\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: File size is too large to send\\n%\" INT64_FMT,\n\t\t                filep->stat.size);\n\t}\n\tcl = (int64_t)filep->stat.size;\n\tconn->status_code = 200;\n\trange[0] = '\\0';\n\n\t/* if this file is in fact a pre-gzipped file, rewrite its filename\n\t * it's important to rewrite the filename after resolving\n\t * the mime type from it, to preserve the actual file's type */\n\tif (filep->stat.is_gzipped) {\n\t\tmg_snprintf(conn, &truncated, gz_path, sizeof(gz_path), \"%s.gz\", path);\n\n\t\tif (truncated) {\n\t\t\tsend_http_error(conn,\n\t\t\t                500,\n\t\t\t                \"Error: Path of zipped file too long (%s)\",\n\t\t\t                path);\n\t\t\treturn;\n\t\t}\n\n\t\tpath = gz_path;\n\t\tencoding = \"Content-Encoding: gzip\\r\\n\";\n\t}\n\n\tif (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, filep)) {\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Cannot open file\\nfopen(%s): %s\",\n\t\t                path,\n\t\t                strerror(ERRNO));\n\t\treturn;\n\t}\n\n\tfclose_on_exec(&filep->access, conn);\n\n\t/* If Range: header specified, act accordingly */\n\tr1 = r2 = 0;\n\thdr = mg_get_header(conn, \"Range\");\n\tif (hdr != NULL && (n = parse_range_header(hdr, &r1, &r2)) > 0 && r1 >= 0\n\t    && r2 >= 0) {\n\t\t/* actually, range requests don't play well with a pre-gzipped\n\t\t * file (since the range is specified in the uncompressed space) */\n\t\tif (filep->stat.is_gzipped) {\n\t\t\tsend_http_error(\n\t\t\t    conn,\n\t\t\t    501,\n\t\t\t    \"%s\",\n\t\t\t    \"Error: Range requests in gzipped files are not supported\");\n\t\t\t(void)mg_fclose(\n\t\t\t    &filep->access); /* ignore error on read only file */\n\t\t\treturn;\n\t\t}\n\t\tconn->status_code = 206;\n\t\tcl = (n == 2) ? (((r2 > cl) ? cl : r2) - r1 + 1) : (cl - r1);\n\t\tmg_snprintf(conn,\n\t\t            NULL, /* range buffer is big enough */\n\t\t            range,\n\t\t            sizeof(range),\n\t\t            \"Content-Range: bytes \"\n\t\t            \"%\" INT64_FMT \"-%\" INT64_FMT \"/%\" INT64_FMT \"\\r\\n\",\n\t\t            r1,\n\t\t            r1 + cl - 1,\n\t\t            filep->stat.size);\n\t\tmsg = \"Partial Content\";\n\t}\n\n\thdr = mg_get_header(conn, \"Origin\");\n\tif (hdr) {\n\t\t/* Cross-origin resource sharing (CORS), see\n\t\t * http://www.html5rocks.com/en/tutorials/cors/,\n\t\t * http://www.html5rocks.com/static/images/cors_server_flowchart.png -\n\t\t * preflight is not supported for files. */\n\t\tcors1 = \"Access-Control-Allow-Origin: \";\n\t\tcors2 = conn->ctx->config[ACCESS_CONTROL_ALLOW_ORIGIN];\n\t\tcors3 = \"\\r\\n\";\n\t} else {\n\t\tcors1 = cors2 = cors3 = \"\";\n\t}\n\n\t/* Prepare Etag, Date, Last-Modified headers. Must be in UTC, according to\n\t * http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3 */\n\tgmt_time_string(date, sizeof(date), &curtime);\n\tgmt_time_string(lm, sizeof(lm), &filep->stat.last_modified);\n\tconstruct_etag(etag, sizeof(etag), &filep->stat);\n\n\t(void)mg_printf(conn,\n\t                \"HTTP/1.1 %d %s\\r\\n\"\n\t                \"%s%s%s\"\n\t                \"Date: %s\\r\\n\",\n\t                conn->status_code,\n\t                msg,\n\t                cors1,\n\t                cors2,\n\t                cors3,\n\t                date);\n\tsend_static_cache_header(conn);\n\t(void)mg_printf(conn,\n\t                \"Last-Modified: %s\\r\\n\"\n\t                \"Etag: %s\\r\\n\"\n\t                \"Content-Type: %.*s\\r\\n\"\n\t                \"Content-Length: %\" INT64_FMT \"\\r\\n\"\n\t                \"Connection: %s\\r\\n\"\n\t                \"Accept-Ranges: bytes\\r\\n\"\n\t                \"%s%s\",\n\t                lm,\n\t                etag,\n\t                (int)mime_vec.len,\n\t                mime_vec.ptr,\n\t                cl,\n\t                suggest_connection_header(conn),\n\t                range,\n\t                encoding);\n\n\t/* The previous code must not add any header starting with X- to make\n\t * sure no one of the additional_headers is included twice */\n\n\tif (additional_headers != NULL) {\n\t\t(void)mg_printf(conn,\n\t\t                \"%.*s\\r\\n\\r\\n\",\n\t\t                (int)strlen(additional_headers),\n\t\t                additional_headers);\n\t} else {\n\t\t(void)mg_printf(conn, \"\\r\\n\");\n\t}\n\n\tif (strcmp(conn->request_info.request_method, \"HEAD\") != 0) {\n\t\tsend_file_data(conn, filep, r1, cl);\n\t}\n\t(void)mg_fclose(&filep->access); /* ignore error on read only file */\n}\n\n\n#if !defined(NO_CACHING)\nstatic void\nhandle_not_modified_static_file_request(struct mg_connection *conn,\n                                        struct mg_file *filep)\n{\n\tchar date[64], lm[64], etag[64];\n\ttime_t curtime = time(NULL);\n\n\tif (conn == NULL || filep == NULL) {\n\t\treturn;\n\t}\n\tconn->status_code = 304;\n\tgmt_time_string(date, sizeof(date), &curtime);\n\tgmt_time_string(lm, sizeof(lm), &filep->stat.last_modified);\n\tconstruct_etag(etag, sizeof(etag), &filep->stat);\n\n\t(void)mg_printf(conn,\n\t                \"HTTP/1.1 %d %s\\r\\n\"\n\t                \"Date: %s\\r\\n\",\n\t                conn->status_code,\n\t                mg_get_response_code_text(conn, conn->status_code),\n\t                date);\n\tsend_static_cache_header(conn);\n\t(void)mg_printf(conn,\n\t                \"Last-Modified: %s\\r\\n\"\n\t                \"Etag: %s\\r\\n\"\n\t                \"Connection: %s\\r\\n\"\n\t                \"\\r\\n\",\n\t                lm,\n\t                etag,\n\t                suggest_connection_header(conn));\n}\n#endif\n\n\nvoid\nmg_send_file(struct mg_connection *conn, const char *path)\n{\n\tmg_send_mime_file(conn, path, NULL);\n}\n\n\nvoid\nmg_send_mime_file(struct mg_connection *conn,\n                  const char *path,\n                  const char *mime_type)\n{\n\tmg_send_mime_file2(conn, path, mime_type, NULL);\n}\n\n\nvoid\nmg_send_mime_file2(struct mg_connection *conn,\n                   const char *path,\n                   const char *mime_type,\n                   const char *additional_headers)\n{\n\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\tif (mg_stat(conn, path, &file.stat)) {\n\t\tif (file.stat.is_directory) {\n\t\t\tif (!conn) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!mg_strcasecmp(conn->ctx->config[ENABLE_DIRECTORY_LISTING],\n\t\t\t                   \"yes\")) {\n\t\t\t\thandle_directory_request(conn, path);\n\t\t\t} else {\n\t\t\t\tsend_http_error(conn,\n\t\t\t\t                403,\n\t\t\t\t                \"%s\",\n\t\t\t\t                \"Error: Directory listing denied\");\n\t\t\t}\n\t\t} else {\n\t\t\thandle_static_file_request(\n\t\t\t    conn, path, &file, mime_type, additional_headers);\n\t\t}\n\t} else {\n\t\tsend_http_error(conn, 404, \"%s\", \"Error: File not found\");\n\t}\n}\n\n\n/* For a given PUT path, create all intermediate subdirectories.\n * Return  0  if the path itself is a directory.\n * Return  1  if the path leads to a file.\n * Return -1  for if the path is too long.\n * Return -2  if path can not be created.\n*/\nstatic int\nput_dir(struct mg_connection *conn, const char *path)\n{\n\tchar buf[PATH_MAX];\n\tconst char *s, *p;\n\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\tsize_t len;\n\tint res = 1;\n\n\tfor (s = p = path + 2; (p = strchr(s, '/')) != NULL; s = ++p) {\n\t\tlen = (size_t)(p - path);\n\t\tif (len >= sizeof(buf)) {\n\t\t\t/* path too long */\n\t\t\tres = -1;\n\t\t\tbreak;\n\t\t}\n\t\tmemcpy(buf, path, len);\n\t\tbuf[len] = '\\0';\n\n\t\t/* Try to create intermediate directory */\n\t\tDEBUG_TRACE(\"mkdir(%s)\", buf);\n\t\tif (!mg_stat(conn, buf, &file.stat) && mg_mkdir(conn, buf, 0755) != 0) {\n\t\t\t/* path does not exixt and can not be created */\n\t\t\tres = -2;\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Is path itself a directory? */\n\t\tif (p[1] == '\\0') {\n\t\t\tres = 0;\n\t\t}\n\t}\n\n\treturn res;\n}\n\n\nstatic void\nremove_bad_file(const struct mg_connection *conn, const char *path)\n{\n\tint r = mg_remove(conn, path);\n\tif (r != 0) {\n\t\tmg_cry(conn, \"%s: Cannot remove invalid file %s\", __func__, path);\n\t}\n}\n\n\nlong long\nmg_store_body(struct mg_connection *conn, const char *path)\n{\n\tchar buf[MG_BUF_LEN];\n\tlong long len = 0;\n\tint ret, n;\n\tstruct mg_file fi;\n\n\tif (conn->consumed_content != 0) {\n\t\tmg_cry(conn, \"%s: Contents already consumed\", __func__);\n\t\treturn -11;\n\t}\n\n\tret = put_dir(conn, path);\n\tif (ret < 0) {\n\t\t/* -1 for path too long,\n\t\t * -2 for path can not be created. */\n\t\treturn ret;\n\t}\n\tif (ret != 1) {\n\t\t/* Return 0 means, path itself is a directory. */\n\t\treturn 0;\n\t}\n\n\tif (mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &fi) == 0) {\n\t\treturn -12;\n\t}\n\n\tret = mg_read(conn, buf, sizeof(buf));\n\twhile (ret > 0) {\n\t\tn = (int)fwrite(buf, 1, (size_t)ret, fi.access.fp);\n\t\tif (n != ret) {\n\t\t\t(void)mg_fclose(\n\t\t\t    &fi.access); /* File is bad and will be removed anyway. */\n\t\t\tremove_bad_file(conn, path);\n\t\t\treturn -13;\n\t\t}\n\t\tret = mg_read(conn, buf, sizeof(buf));\n\t}\n\n\t/* File is open for writing. If fclose fails, there was probably an\n\t * error flushing the buffer to disk, so the file on disk might be\n\t * broken. Delete it and return an error to the caller. */\n\tif (mg_fclose(&fi.access) != 0) {\n\t\tremove_bad_file(conn, path);\n\t\treturn -14;\n\t}\n\n\treturn len;\n}\n\n\n/* Parse HTTP headers from the given buffer, advance buf pointer\n * to the point where parsing stopped.\n * All parameters must be valid pointers (not NULL).\n * Return <0 on error. */\nstatic int\nparse_http_headers(char **buf, struct mg_request_info *ri)\n{\n\tint i;\n\n\tri->num_headers = 0;\n\n\tfor (i = 0; i < (int)ARRAY_SIZE(ri->http_headers); i++) {\n\t\tchar *dp = *buf;\n\t\twhile ((*dp != ':') && (*dp >= 33) && (*dp <= 126)) {\n\t\t\tdp++;\n\t\t}\n\t\tif (dp == *buf) {\n\t\t\t/* End of headers reached. */\n\t\t\tbreak;\n\t\t}\n\t\tif (*dp != ':') {\n\t\t\t/* This is not a valid field. */\n\t\t\treturn -1;\n\t\t}\n\n\t\t/* End of header key (*dp == ':') */\n\t\t/* Truncate here and set the key name */\n\t\t*dp = 0;\n\t\tri->http_headers[i].name = *buf;\n\t\tdo {\n\t\t\tdp++;\n\t\t} while (*dp == ' ');\n\n\t\t/* The rest of the line is the value */\n\t\tri->http_headers[i].value = dp;\n\t\t*buf = dp + strcspn(dp, \"\\r\\n\");\n\t\tif (((*buf)[0] != '\\r') || ((*buf)[1] != '\\n')) {\n\t\t\t*buf = NULL;\n\t\t}\n\n\n\t\tri->num_headers = i + 1;\n\t\tif (*buf) {\n\t\t\t(*buf)[0] = 0;\n\t\t\t(*buf)[1] = 0;\n\t\t\t*buf += 2;\n\t\t} else {\n\t\t\t*buf = dp;\n\t\t\tbreak;\n\t\t}\n\n\t\tif ((*buf)[0] == '\\r') {\n\t\t\t/* This is the end of the header */\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ri->num_headers;\n}\n\n\nstatic int\nis_valid_http_method(const char *method)\n{\n\treturn !strcmp(method, \"GET\")        /* HTTP (RFC 2616) */\n\t       || !strcmp(method, \"POST\")    /* HTTP (RFC 2616) */\n\t       || !strcmp(method, \"HEAD\")    /* HTTP (RFC 2616) */\n\t       || !strcmp(method, \"PUT\")     /* HTTP (RFC 2616) */\n\t       || !strcmp(method, \"DELETE\")  /* HTTP (RFC 2616) */\n\t       || !strcmp(method, \"OPTIONS\") /* HTTP (RFC 2616) */\n\t       /* TRACE method (RFC 2616) is not supported for security reasons */\n\t       || !strcmp(method, \"CONNECT\") /* HTTP (RFC 2616) */\n\n\t       || !strcmp(method, \"PROPFIND\") /* WEBDAV (RFC 2518) */\n\t       || !strcmp(method, \"MKCOL\")    /* WEBDAV (RFC 2518) */\n\n\t       /* Unsupported WEBDAV Methods: */\n\t       /* PROPPATCH, COPY, MOVE, LOCK, UNLOCK (RFC 2518) */\n\t       /* + 11 methods from RFC 3253 */\n\t       /* ORDERPATCH (RFC 3648) */\n\t       /* ACL (RFC 3744) */\n\t       /* SEARCH (RFC 5323) */\n\t       /* + MicroSoft extensions\n\t        * https://msdn.microsoft.com/en-us/library/aa142917.aspx */\n\n\t       /* PATCH method only allowed for CGI/Lua/LSP and callbacks. */\n\t       || !strcmp(method, \"PATCH\"); /* PATCH method (RFC 5789) */\n}\n\n\n/* Parse HTTP request, fill in mg_request_info structure.\n * This function modifies the buffer by NUL-terminating\n * HTTP request components, header names and header values.\n * Parameters:\n *   buf (in/out): pointer to the HTTP header to parse and split\n *   len (in): length of HTTP header buffer\n *   re (out): parsed header as mg_request_info\n * buf and ri must be valid pointers (not NULL), len>0.\n * Returns <0 on error. */\nstatic int\nparse_http_message(char *buf, int len, struct mg_request_info *ri)\n{\n\tint is_request, request_length;\n\tchar *start_line;\n\n\trequest_length = get_request_len(buf, len);\n\n\tif (request_length > 0) {\n\t\t/* Reset attributes. DO NOT TOUCH is_ssl, remote_ip, remote_addr,\n\t\t * remote_port */\n\t\tri->remote_user = ri->request_method = ri->request_uri =\n\t\t    ri->http_version = NULL;\n\t\tri->num_headers = 0;\n\n\t\tbuf[request_length - 1] = '\\0';\n\n\t\t/* RFC says that all initial whitespaces should be ingored */\n\t\twhile (*buf != '\\0' && isspace(*(unsigned char *)buf)) {\n\t\t\tbuf++;\n\t\t}\n\t\tstart_line = skip(&buf, \"\\r\\n\");\n\t\tri->request_method = skip(&start_line, \" \");\n\t\tri->request_uri = skip(&start_line, \" \");\n\t\tri->http_version = start_line;\n\n\t\t/* HTTP message could be either HTTP request:\n\t\t * \"GET / HTTP/1.0 ...\"\n\t\t * or a HTTP response:\n\t\t *  \"HTTP/1.0 200 OK ...\"\n\t\t * otherwise it is invalid.\n\t\t */\n\t\tis_request = is_valid_http_method(ri->request_method);\n\t\tif ((is_request && memcmp(ri->http_version, \"HTTP/\", 5) != 0)\n\t\t    || (!is_request && memcmp(ri->request_method, \"HTTP/\", 5) != 0)) {\n\t\t\t/* Not a valid request or response: invalid */\n\t\t\treturn -1;\n\t\t}\n\t\tif (is_request) {\n\t\t\tri->http_version += 5;\n\t\t}\n\t\tif (parse_http_headers(&buf, ri) < 0) {\n\t\t\t/* Error while parsing headers */\n\t\t\treturn -1;\n\t\t}\n\t}\n\treturn request_length;\n}\n\n\n/* Keep reading the input (either opened file descriptor fd, or socket sock,\n * or SSL descriptor ssl) into buffer buf, until \\r\\n\\r\\n appears in the\n * buffer (which marks the end of HTTP request). Buffer buf may already\n * have some data. The length of the data is stored in nread.\n * Upon every read operation, increase nread by the number of bytes read. */\nstatic int\nread_request(FILE *fp,\n             struct mg_connection *conn,\n             char *buf,\n             int bufsiz,\n             int *nread)\n{\n\tint request_len, n = 0;\n\tstruct timespec last_action_time;\n\tdouble request_timeout;\n\n\tif (!conn) {\n\t\treturn 0;\n\t}\n\n\tmemset(&last_action_time, 0, sizeof(last_action_time));\n\n\tif (conn->ctx->config[REQUEST_TIMEOUT]) {\n\t\t/* value of request_timeout is in seconds, config in milliseconds */\n\t\trequest_timeout = atof(conn->ctx->config[REQUEST_TIMEOUT]) / 1000.0;\n\t} else {\n\t\trequest_timeout = -1.0;\n\t}\n\tif (conn->handled_requests > 0) {\n\t\tif (conn->ctx->config[KEEP_ALIVE_TIMEOUT]) {\n\t\t\trequest_timeout =\n\t\t\t    atof(conn->ctx->config[KEEP_ALIVE_TIMEOUT]) / 1000.0;\n\t\t}\n\t}\n\n\trequest_len = get_request_len(buf, *nread);\n\n\t/* first time reading from this connection */\n\tclock_gettime(CLOCK_MONOTONIC, &last_action_time);\n\n\twhile (request_len == 0) {\n\t\t/* Full request not yet received */\n\t\tif (conn->ctx->stop_flag != 0) {\n\t\t\t/* Server is to be stopped. */\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (*nread >= bufsiz) {\n\t\t\t/* Request too long */\n\t\t\treturn -2;\n\t\t}\n\n\t\tn = pull(fp, conn, buf + *nread, bufsiz - *nread, request_timeout);\n\t\tif (n < 0) {\n\t\t\t/* Receive error */\n\t\t\treturn -1;\n\t\t}\n\t\t*nread += n;\n\t\trequest_len = get_request_len(buf, *nread);\n\n\t\tif ((request_len == 0) && (request_timeout >= 0)) {\n\t\t\tif (mg_difftimespec(&last_action_time, &(conn->req_time))\n\t\t\t    > request_timeout) {\n\t\t\t\t/* Timeout */\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tclock_gettime(CLOCK_MONOTONIC, &last_action_time);\n\t\t}\n\t}\n\n\treturn request_len;\n}\n\n#if !defined(NO_FILES)\n/* For given directory path, substitute it to valid index file.\n * Return 1 if index file has been found, 0 if not found.\n * If the file is found, it's stats is returned in stp. */\nstatic int\nsubstitute_index_file(struct mg_connection *conn,\n                      char *path,\n                      size_t path_len,\n                      struct mg_file *filep)\n{\n\tif (conn && conn->ctx) {\n\t\tconst char *list = conn->ctx->config[INDEX_FILES];\n\t\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\t\tstruct vec filename_vec;\n\t\tsize_t n = strlen(path);\n\t\tint found = 0;\n\n\t\t/* The 'path' given to us points to the directory. Remove all trailing\n\t\t * directory separator characters from the end of the path, and\n\t\t * then append single directory separator character. */\n\t\twhile (n > 0 && path[n - 1] == '/') {\n\t\t\tn--;\n\t\t}\n\t\tpath[n] = '/';\n\n\t\t/* Traverse index files list. For each entry, append it to the given\n\t\t * path and see if the file exists. If it exists, break the loop */\n\t\twhile ((list = next_option(list, &filename_vec, NULL)) != NULL) {\n\t\t\t/* Ignore too long entries that may overflow path buffer */\n\t\t\tif (filename_vec.len > path_len - (n + 2)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/* Prepare full path to the index file */\n\t\t\tmg_strlcpy(path + n + 1, filename_vec.ptr, filename_vec.len + 1);\n\n\t\t\t/* Does it exist? */\n\t\t\tif (mg_stat(conn, path, &file.stat)) {\n\t\t\t\t/* Yes it does, break the loop */\n\t\t\t\t*filep = file;\n\t\t\t\tfound = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t/* If no index file exists, restore directory path */\n\t\tif (!found) {\n\t\t\tpath[n] = '\\0';\n\t\t}\n\n\t\treturn found;\n\t}\n\treturn 0;\n}\n#endif\n\n\n#if !defined(NO_CACHING)\n/* Return True if we should reply 304 Not Modified. */\nstatic int\nis_not_modified(const struct mg_connection *conn,\n                const struct mg_file_stat *filestat)\n{\n\tchar etag[64];\n\tconst char *ims = mg_get_header(conn, \"If-Modified-Since\");\n\tconst char *inm = mg_get_header(conn, \"If-None-Match\");\n\tconstruct_etag(etag, sizeof(etag), filestat);\n\n\treturn (inm != NULL && !mg_strcasecmp(etag, inm))\n\t       || ((ims != NULL)\n\t           && (filestat->last_modified <= parse_date_string(ims)));\n}\n#endif /* !NO_CACHING */\n\n\n#if !defined(NO_CGI) || !defined(NO_FILES)\nstatic int\nforward_body_data(struct mg_connection *conn, FILE *fp, SOCKET sock, SSL *ssl)\n{\n\tconst char *expect, *body;\n\tchar buf[MG_BUF_LEN];\n\tint to_read, nread, success = 0;\n\tint64_t buffered_len;\n\tdouble timeout = -1.0;\n\n\tif (!conn) {\n\t\treturn 0;\n\t}\n\tif (conn->ctx->config[REQUEST_TIMEOUT]) {\n\t\ttimeout = atoi(conn->ctx->config[REQUEST_TIMEOUT]) / 1000.0;\n\t}\n\n\texpect = mg_get_header(conn, \"Expect\");\n\t/* assert(fp != NULL); */\n\tif (!fp) {\n\t\tsend_http_error(conn, 500, \"%s\", \"Error: NULL File\");\n\t\treturn 0;\n\t}\n\n\tif (conn->content_len == -1 && !conn->is_chunked) {\n\t\t/* Content length is not specified by the client. */\n\t\tsend_http_error(conn,\n\t\t                411,\n\t\t                \"%s\",\n\t\t                \"Error: Client did not specify content length\");\n\t} else if ((expect != NULL)\n\t           && (mg_strcasecmp(expect, \"100-continue\") != 0)) {\n\t\t/* Client sent an \"Expect: xyz\" header and xyz is not 100-continue. */\n\t\tsend_http_error(conn,\n\t\t                417,\n\t\t                \"Error: Can not fulfill expectation %s\",\n\t\t                expect);\n\t} else {\n\t\tif (expect != NULL) {\n\t\t\t(void)mg_printf(conn, \"%s\", \"HTTP/1.1 100 Continue\\r\\n\\r\\n\");\n\t\t\tconn->status_code = 100;\n\t\t} else {\n\t\t\tconn->status_code = 200;\n\t\t}\n\n\t\tbuffered_len = (int64_t)(conn->data_len) - (int64_t)conn->request_len\n\t\t               - conn->consumed_content;\n\n\t\t/* assert(buffered_len >= 0); */\n\t\t/* assert(conn->consumed_content == 0); */\n\n\t\tif ((buffered_len < 0) || (conn->consumed_content != 0)) {\n\t\t\tsend_http_error(conn, 500, \"%s\", \"Error: Size mismatch\");\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (buffered_len > 0) {\n\t\t\tif ((int64_t)buffered_len > conn->content_len) {\n\t\t\t\tbuffered_len = (int)conn->content_len;\n\t\t\t}\n\t\t\tbody = conn->buf + conn->request_len + conn->consumed_content;\n\t\t\tpush_all(conn->ctx, fp, sock, ssl, body, (int64_t)buffered_len);\n\t\t\tconn->consumed_content += buffered_len;\n\t\t}\n\n\t\tnread = 0;\n\t\twhile (conn->consumed_content < conn->content_len) {\n\t\t\tto_read = sizeof(buf);\n\t\t\tif ((int64_t)to_read > conn->content_len - conn->consumed_content) {\n\t\t\t\tto_read = (int)(conn->content_len - conn->consumed_content);\n\t\t\t}\n\t\t\tnread = pull(NULL, conn, buf, to_read, timeout);\n\t\t\tif (nread <= 0\n\t\t\t    || push_all(conn->ctx, fp, sock, ssl, buf, nread) != nread) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconn->consumed_content += nread;\n\t\t}\n\n\t\tif (conn->consumed_content == conn->content_len) {\n\t\t\tsuccess = (nread >= 0);\n\t\t}\n\n\t\t/* Each error code path in this function must send an error */\n\t\tif (!success) {\n\t\t\t/* NOTE: Maybe some data has already been sent. */\n\t\t\t/* TODO (low): If some data has been sent, a correct error\n\t\t\t * reply can no longer be sent, so just close the connection */\n\t\t\tsend_http_error(conn, 500, \"%s\", \"\");\n\t\t}\n\t}\n\n\treturn success;\n}\n#endif\n\n#if !defined(NO_CGI)\n/* This structure helps to create an environment for the spawned CGI program.\n * Environment is an array of \"VARIABLE=VALUE\\0\" ASCIIZ strings,\n * last element must be NULL.\n * However, on Windows there is a requirement that all these VARIABLE=VALUE\\0\n * strings must reside in a contiguous buffer. The end of the buffer is\n * marked by two '\\0' characters.\n * We satisfy both worlds: we create an envp array (which is vars), all\n * entries are actually pointers inside buf. */\nstruct cgi_environment {\n\tstruct mg_connection *conn;\n\t/* Data block */\n\tchar *buf;      /* Environment buffer */\n\tsize_t buflen;  /* Space available in buf */\n\tsize_t bufused; /* Space taken in buf */\n\t                /* Index block */\n\tchar **var;     /* char **envp */\n\tsize_t varlen;  /* Number of variables available in var */\n\tsize_t varused; /* Number of variables stored in var */\n};\n\n\nstatic void addenv(struct cgi_environment *env,\n                   PRINTF_FORMAT_STRING(const char *fmt),\n                   ...) PRINTF_ARGS(2, 3);\n\n/* Append VARIABLE=VALUE\\0 string to the buffer, and add a respective\n * pointer into the vars array. Assumes env != NULL and fmt != NULL. */\nstatic void\naddenv(struct cgi_environment *env, const char *fmt, ...)\n{\n\tsize_t n, space;\n\tint truncated = 0;\n\tchar *added;\n\tva_list ap;\n\n\t/* Calculate how much space is left in the buffer */\n\tspace = (env->buflen - env->bufused);\n\n\t/* Calculate an estimate for the required space */\n\tn = strlen(fmt) + 2 + 128;\n\n\tdo {\n\t\tif (space <= n) {\n\t\t\t/* Allocate new buffer */\n\t\t\tn = env->buflen + CGI_ENVIRONMENT_SIZE;\n\t\t\tadded = (char *)mg_realloc(env->buf, n);\n\t\t\tif (!added) {\n\t\t\t\t/* Out of memory */\n\t\t\t\tmg_cry(env->conn,\n\t\t\t\t       \"%s: Cannot allocate memory for CGI variable [%s]\",\n\t\t\t\t       __func__,\n\t\t\t\t       fmt);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tenv->buf = added;\n\t\t\tenv->buflen = n;\n\t\t\tspace = (env->buflen - env->bufused);\n\t\t}\n\n\t\t/* Make a pointer to the free space int the buffer */\n\t\tadded = env->buf + env->bufused;\n\n\t\t/* Copy VARIABLE=VALUE\\0 string into the free space */\n\t\tva_start(ap, fmt);\n\t\tmg_vsnprintf(env->conn, &truncated, added, (size_t)space, fmt, ap);\n\t\tva_end(ap);\n\n\t\t/* Do not add truncated strings to the environment */\n\t\tif (truncated) {\n\t\t\t/* Reallocate the buffer */\n\t\t\tspace = 0;\n\t\t\tn = 1;\n\t\t}\n\t} while (truncated);\n\n\t/* Calculate number of bytes added to the environment */\n\tn = strlen(added) + 1;\n\tenv->bufused += n;\n\n\t/* Now update the variable index */\n\tspace = (env->varlen - env->varused);\n\tif (space < 2) {\n\t\tmg_cry(env->conn,\n\t\t       \"%s: Cannot register CGI variable [%s]\",\n\t\t       __func__,\n\t\t       fmt);\n\t\treturn;\n\t}\n\n\t/* Append a pointer to the added string into the envp array */\n\tenv->var[env->varused] = added;\n\tenv->varused++;\n}\n\n\nstatic void\nprepare_cgi_environment(struct mg_connection *conn,\n                        const char *prog,\n                        struct cgi_environment *env)\n{\n\tconst char *s;\n\tstruct vec var_vec;\n\tchar *p, src_addr[IP_ADDR_STR_LEN], http_var_name[128];\n\tint i, truncated, uri_len;\n\n\tif (conn == NULL || prog == NULL || env == NULL) {\n\t\treturn;\n\t}\n\n\tenv->conn = conn;\n\tenv->buflen = CGI_ENVIRONMENT_SIZE;\n\tenv->bufused = 0;\n\tenv->buf = (char *)mg_malloc(env->buflen);\n\tenv->varlen = MAX_CGI_ENVIR_VARS;\n\tenv->varused = 0;\n\tenv->var = (char **)mg_malloc(env->buflen * sizeof(char *));\n\n\taddenv(env, \"SERVER_NAME=%s\", conn->ctx->config[AUTHENTICATION_DOMAIN]);\n\taddenv(env, \"SERVER_ROOT=%s\", conn->ctx->config[DOCUMENT_ROOT]);\n\taddenv(env, \"DOCUMENT_ROOT=%s\", conn->ctx->config[DOCUMENT_ROOT]);\n\taddenv(env, \"SERVER_SOFTWARE=%s/%s\", \"Civetweb\", mg_version());\n\n\t/* Prepare the environment block */\n\taddenv(env, \"%s\", \"GATEWAY_INTERFACE=CGI/1.1\");\n\taddenv(env, \"%s\", \"SERVER_PROTOCOL=HTTP/1.1\");\n\taddenv(env, \"%s\", \"REDIRECT_STATUS=200\"); /* For PHP */\n\n#if defined(USE_IPV6)\n\tif (conn->client.lsa.sa.sa_family == AF_INET6) {\n\t\taddenv(env, \"SERVER_PORT=%d\", ntohs(conn->client.lsa.sin6.sin6_port));\n\t} else\n#endif\n\t{\n\t\taddenv(env, \"SERVER_PORT=%d\", ntohs(conn->client.lsa.sin.sin_port));\n\t}\n\n\tsockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);\n\taddenv(env, \"REMOTE_ADDR=%s\", src_addr);\n\n\taddenv(env, \"REQUEST_METHOD=%s\", conn->request_info.request_method);\n\taddenv(env, \"REMOTE_PORT=%d\", conn->request_info.remote_port);\n\n\taddenv(env, \"REQUEST_URI=%s\", conn->request_info.request_uri);\n\taddenv(env, \"LOCAL_URI=%s\", conn->request_info.local_uri);\n\n\t/* SCRIPT_NAME */\n\turi_len = (int)strlen(conn->request_info.local_uri);\n\tif (conn->path_info == NULL) {\n\t\tif (conn->request_info.local_uri[uri_len - 1] != '/') {\n\t\t\t/* URI: /path_to_script/script.cgi */\n\t\t\taddenv(env, \"SCRIPT_NAME=%s\", conn->request_info.local_uri);\n\t\t} else {\n\t\t\t/* URI: /path_to_script/ ... using index.cgi */\n\t\t\tchar *index_file = strrchr(prog, '/');\n\t\t\tif (index_file) {\n\t\t\t\taddenv(env,\n\t\t\t\t       \"SCRIPT_NAME=%s%s\",\n\t\t\t\t       conn->request_info.local_uri,\n\t\t\t\t       index_file + 1);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t/* URI: /path_to_script/script.cgi/path_info */\n\t\taddenv(env,\n\t\t       \"SCRIPT_NAME=%.*s\",\n\t\t       uri_len - (int)strlen(conn->path_info),\n\t\t       conn->request_info.local_uri);\n\t}\n\n\taddenv(env, \"SCRIPT_FILENAME=%s\", prog);\n\tif (conn->path_info == NULL) {\n\t\taddenv(env, \"PATH_TRANSLATED=%s\", conn->ctx->config[DOCUMENT_ROOT]);\n\t} else {\n\t\taddenv(env,\n\t\t       \"PATH_TRANSLATED=%s%s\",\n\t\t       conn->ctx->config[DOCUMENT_ROOT],\n\t\t       conn->path_info);\n\t}\n\n\taddenv(env, \"HTTPS=%s\", (conn->ssl == NULL) ? \"off\" : \"on\");\n\n\tif ((s = mg_get_header(conn, \"Content-Type\")) != NULL) {\n\t\taddenv(env, \"CONTENT_TYPE=%s\", s);\n\t}\n\tif (conn->request_info.query_string != NULL) {\n\t\taddenv(env, \"QUERY_STRING=%s\", conn->request_info.query_string);\n\t}\n\tif ((s = mg_get_header(conn, \"Content-Length\")) != NULL) {\n\t\taddenv(env, \"CONTENT_LENGTH=%s\", s);\n\t}\n\tif ((s = getenv(\"PATH\")) != NULL) {\n\t\taddenv(env, \"PATH=%s\", s);\n\t}\n\tif (conn->path_info != NULL) {\n\t\taddenv(env, \"PATH_INFO=%s\", conn->path_info);\n\t}\n\n\tif (conn->status_code > 0) {\n\t\t/* CGI error handler should show the status code */\n\t\taddenv(env, \"STATUS=%d\", conn->status_code);\n\t}\n\n#if defined(_WIN32)\n\tif ((s = getenv(\"COMSPEC\")) != NULL) {\n\t\taddenv(env, \"COMSPEC=%s\", s);\n\t}\n\tif ((s = getenv(\"SYSTEMROOT\")) != NULL) {\n\t\taddenv(env, \"SYSTEMROOT=%s\", s);\n\t}\n\tif ((s = getenv(\"SystemDrive\")) != NULL) {\n\t\taddenv(env, \"SystemDrive=%s\", s);\n\t}\n\tif ((s = getenv(\"ProgramFiles\")) != NULL) {\n\t\taddenv(env, \"ProgramFiles=%s\", s);\n\t}\n\tif ((s = getenv(\"ProgramFiles(x86)\")) != NULL) {\n\t\taddenv(env, \"ProgramFiles(x86)=%s\", s);\n\t}\n#else\n\tif ((s = getenv(\"LD_LIBRARY_PATH\")) != NULL) {\n\t\taddenv(env, \"LD_LIBRARY_PATH=%s\", s);\n\t}\n#endif /* _WIN32 */\n\n\tif ((s = getenv(\"PERLLIB\")) != NULL) {\n\t\taddenv(env, \"PERLLIB=%s\", s);\n\t}\n\n\tif (conn->request_info.remote_user != NULL) {\n\t\taddenv(env, \"REMOTE_USER=%s\", conn->request_info.remote_user);\n\t\taddenv(env, \"%s\", \"AUTH_TYPE=Digest\");\n\t}\n\n\t/* Add all headers as HTTP_* variables */\n\tfor (i = 0; i < conn->request_info.num_headers; i++) {\n\n\t\t(void)mg_snprintf(conn,\n\t\t                  &truncated,\n\t\t                  http_var_name,\n\t\t                  sizeof(http_var_name),\n\t\t                  \"HTTP_%s\",\n\t\t                  conn->request_info.http_headers[i].name);\n\n\t\tif (truncated) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: HTTP header variable too long [%s]\",\n\t\t\t       __func__,\n\t\t\t       conn->request_info.http_headers[i].name);\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Convert variable name into uppercase, and change - to _ */\n\t\tfor (p = http_var_name; *p != '\\0'; p++) {\n\t\t\tif (*p == '-') {\n\t\t\t\t*p = '_';\n\t\t\t}\n\t\t\t*p = (char)toupper(*(unsigned char *)p);\n\t\t}\n\n\t\taddenv(env,\n\t\t       \"%s=%s\",\n\t\t       http_var_name,\n\t\t       conn->request_info.http_headers[i].value);\n\t}\n\n\t/* Add user-specified variables */\n\ts = conn->ctx->config[CGI_ENVIRONMENT];\n\twhile ((s = next_option(s, &var_vec, NULL)) != NULL) {\n\t\taddenv(env, \"%.*s\", (int)var_vec.len, var_vec.ptr);\n\t}\n\n\tenv->var[env->varused] = NULL;\n\tenv->buf[env->bufused] = '\\0';\n}\n\n\nstatic void\nhandle_cgi_request(struct mg_connection *conn, const char *prog)\n{\n\tchar *buf;\n\tsize_t buflen;\n\tint headers_len, data_len, i, truncated;\n\tint fdin[2] = {-1, -1}, fdout[2] = {-1, -1}, fderr[2] = {-1, -1};\n\tconst char *status, *status_text, *connection_state;\n\tchar *pbuf, dir[PATH_MAX], *p;\n\tstruct mg_request_info ri;\n\tstruct cgi_environment blk;\n\tFILE *in = NULL, *out = NULL, *err = NULL;\n\tstruct mg_file fout = STRUCT_FILE_INITIALIZER;\n\tpid_t pid = (pid_t)-1;\n\n\tif (conn == NULL) {\n\t\treturn;\n\t}\n\n\tbuf = NULL;\n\tbuflen = 16384;\n\tprepare_cgi_environment(conn, prog, &blk);\n\n\t/* CGI must be executed in its own directory. 'dir' must point to the\n\t * directory containing executable program, 'p' must point to the\n\t * executable program name relative to 'dir'. */\n\t(void)mg_snprintf(conn, &truncated, dir, sizeof(dir), \"%s\", prog);\n\n\tif (truncated) {\n\t\tmg_cry(conn, \"Error: CGI program \\\"%s\\\": Path too long\", prog);\n\t\tsend_http_error(conn, 500, \"Error: %s\", \"CGI path too long\");\n\t\tgoto done;\n\t}\n\n\tif ((p = strrchr(dir, '/')) != NULL) {\n\t\t*p++ = '\\0';\n\t} else {\n\t\tdir[0] = '.', dir[1] = '\\0';\n\t\tp = (char *)prog;\n\t}\n\n\tif (pipe(fdin) != 0 || pipe(fdout) != 0 || pipe(fderr) != 0) {\n\t\tstatus = strerror(ERRNO);\n\t\tmg_cry(conn,\n\t\t       \"Error: CGI program \\\"%s\\\": Can not create CGI pipes: %s\",\n\t\t       prog,\n\t\t       status);\n\t\tsend_http_error(conn, 500, \"Error: Cannot create CGI pipe: %s\", status);\n\t\tgoto done;\n\t}\n\n\tpid = spawn_process(conn, p, blk.buf, blk.var, fdin, fdout, fderr, dir);\n\n\tif (pid == (pid_t)-1) {\n\t\tstatus = strerror(ERRNO);\n\t\tmg_cry(conn,\n\t\t       \"Error: CGI program \\\"%s\\\": Can not spawn CGI process: %s\",\n\t\t       prog,\n\t\t       status);\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Cannot spawn CGI process [%s]: %s\",\n\t\t                prog,\n\t\t                status);\n\t\tgoto done;\n\t}\n\n\t/* Make sure child closes all pipe descriptors. It must dup them to 0,1 */\n\tset_close_on_exec((SOCKET)fdin[0], conn);  /* stdin read */\n\tset_close_on_exec((SOCKET)fdout[1], conn); /* stdout write */\n\tset_close_on_exec((SOCKET)fderr[1], conn); /* stderr write */\n\tset_close_on_exec((SOCKET)fdin[1], conn);  /* stdin write */\n\tset_close_on_exec((SOCKET)fdout[0], conn); /* stdout read */\n\tset_close_on_exec((SOCKET)fderr[0], conn); /* stderr read */\n\n\t/* Parent closes only one side of the pipes.\n\t * If we don't mark them as closed, close() attempt before\n\t * return from this function throws an exception on Windows.\n\t * Windows does not like when closed descriptor is closed again. */\n\t(void)close(fdin[0]);\n\t(void)close(fdout[1]);\n\t(void)close(fderr[1]);\n\tfdin[0] = fdout[1] = fderr[1] = -1;\n\n\tif ((in = fdopen(fdin[1], \"wb\")) == NULL) {\n\t\tstatus = strerror(ERRNO);\n\t\tmg_cry(conn,\n\t\t       \"Error: CGI program \\\"%s\\\": Can not open stdin: %s\",\n\t\t       prog,\n\t\t       status);\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: CGI can not open fdin\\nfopen: %s\",\n\t\t                status);\n\t\tgoto done;\n\t}\n\n\tif ((out = fdopen(fdout[0], \"rb\")) == NULL) {\n\t\tstatus = strerror(ERRNO);\n\t\tmg_cry(conn,\n\t\t       \"Error: CGI program \\\"%s\\\": Can not open stdout: %s\",\n\t\t       prog,\n\t\t       status);\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: CGI can not open fdout\\nfopen: %s\",\n\t\t                status);\n\t\tgoto done;\n\t}\n\n\tif ((err = fdopen(fderr[0], \"rb\")) == NULL) {\n\t\tstatus = strerror(ERRNO);\n\t\tmg_cry(conn,\n\t\t       \"Error: CGI program \\\"%s\\\": Can not open stderr: %s\",\n\t\t       prog,\n\t\t       status);\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: CGI can not open fdout\\nfopen: %s\",\n\t\t                status);\n\t\tgoto done;\n\t}\n\n\tsetbuf(in, NULL);\n\tsetbuf(out, NULL);\n\tsetbuf(err, NULL);\n\tfout.access.fp = out;\n\n\tif ((conn->request_info.content_length > 0) || conn->is_chunked) {\n\t\t/* This is a POST/PUT request, or another request with body data. */\n\t\tif (!forward_body_data(conn, in, INVALID_SOCKET, NULL)) {\n\t\t\t/* Error sending the body data */\n\t\t\tmg_cry(conn,\n\t\t\t       \"Error: CGI program \\\"%s\\\": Forward body data failed\",\n\t\t\t       prog);\n\t\t\tgoto done;\n\t\t}\n\t}\n\n\t/* Close so child gets an EOF. */\n\tfclose(in);\n\tin = NULL;\n\tfdin[1] = -1;\n\n\t/* Now read CGI reply into a buffer. We need to set correct\n\t * status code, thus we need to see all HTTP headers first.\n\t * Do not send anything back to client, until we buffer in all\n\t * HTTP headers. */\n\tdata_len = 0;\n\tbuf = (char *)mg_malloc(buflen);\n\tif (buf == NULL) {\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Not enough memory for CGI buffer (%u bytes)\",\n\t\t                (unsigned int)buflen);\n\t\tmg_cry(conn,\n\t\t       \"Error: CGI program \\\"%s\\\": Not enough memory for buffer (%u \"\n\t\t       \"bytes)\",\n\t\t       prog,\n\t\t       (unsigned int)buflen);\n\t\tgoto done;\n\t}\n\theaders_len = read_request(out, conn, buf, (int)buflen, &data_len);\n\tif (headers_len <= 0) {\n\n\t\t/* Could not parse the CGI response. Check if some error message on\n\t\t * stderr. */\n\t\ti = pull_all(err, conn, buf, (int)buflen);\n\t\tif (i > 0) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"Error: CGI program \\\"%s\\\" sent error \"\n\t\t\t       \"message: [%.*s]\",\n\t\t\t       prog,\n\t\t\t       i,\n\t\t\t       buf);\n\t\t\tsend_http_error(conn,\n\t\t\t                500,\n\t\t\t                \"Error: CGI program \\\"%s\\\" sent error \"\n\t\t\t                \"message: [%.*s]\",\n\t\t\t                prog,\n\t\t\t                i,\n\t\t\t                buf);\n\t\t} else {\n\t\t\tmg_cry(conn,\n\t\t\t       \"Error: CGI program sent malformed or too big \"\n\t\t\t       \"(>%u bytes) HTTP headers: [%.*s]\",\n\t\t\t       (unsigned)buflen,\n\t\t\t       data_len,\n\t\t\t       buf);\n\n\t\t\tsend_http_error(conn,\n\t\t\t                500,\n\t\t\t                \"Error: CGI program sent malformed or too big \"\n\t\t\t                \"(>%u bytes) HTTP headers: [%.*s]\",\n\t\t\t                (unsigned)buflen,\n\t\t\t                data_len,\n\t\t\t                buf);\n\t\t}\n\n\t\tgoto done;\n\t}\n\tpbuf = buf;\n\tbuf[headers_len - 1] = '\\0';\n\tparse_http_headers(&pbuf, &ri);\n\n\t/* Make up and send the status line */\n\tstatus_text = \"OK\";\n\tif ((status = get_header(&ri, \"Status\")) != NULL) {\n\t\tconn->status_code = atoi(status);\n\t\tstatus_text = status;\n\t\twhile (isdigit(*(const unsigned char *)status_text)\n\t\t       || *status_text == ' ') {\n\t\t\tstatus_text++;\n\t\t}\n\t} else if (get_header(&ri, \"Location\") != NULL) {\n\t\tconn->status_code = 302;\n\t} else {\n\t\tconn->status_code = 200;\n\t}\n\tconnection_state = get_header(&ri, \"Connection\");\n\tif (!header_has_option(connection_state, \"keep-alive\")) {\n\t\tconn->must_close = 1;\n\t}\n\t(void)mg_printf(conn, \"HTTP/1.1 %d %s\\r\\n\", conn->status_code, status_text);\n\n\t/* Send headers */\n\tfor (i = 0; i < ri.num_headers; i++) {\n\t\tmg_printf(conn,\n\t\t          \"%s: %s\\r\\n\",\n\t\t          ri.http_headers[i].name,\n\t\t          ri.http_headers[i].value);\n\t}\n\tmg_write(conn, \"\\r\\n\", 2);\n\n\t/* Send chunk of data that may have been read after the headers */\n\tconn->num_bytes_sent +=\n\t    mg_write(conn, buf + headers_len, (size_t)(data_len - headers_len));\n\n\t/* Read the rest of CGI output and send to the client */\n\tsend_file_data(conn, &fout, 0, INT64_MAX);\n\ndone:\n\tmg_free(blk.var);\n\tmg_free(blk.buf);\n\n\tif (pid != (pid_t)-1) {\n\t\tkill(pid, SIGKILL);\n#if !defined(_WIN32)\n\t\t{\n\t\t\tint st;\n\t\t\twhile (waitpid(pid, &st, 0) != -1)\n\t\t\t\t; /* clean zombies */\n\t\t}\n#endif\n\t}\n\tif (fdin[0] != -1) {\n\t\tclose(fdin[0]);\n\t}\n\tif (fdout[1] != -1) {\n\t\tclose(fdout[1]);\n\t}\n\n\tif (in != NULL) {\n\t\tfclose(in);\n\t} else if (fdin[1] != -1) {\n\t\tclose(fdin[1]);\n\t}\n\n\tif (out != NULL) {\n\t\tfclose(out);\n\t} else if (fdout[0] != -1) {\n\t\tclose(fdout[0]);\n\t}\n\n\tif (err != NULL) {\n\t\tfclose(err);\n\t} else if (fderr[0] != -1) {\n\t\tclose(fderr[0]);\n\t}\n\n\tif (buf != NULL) {\n\t\tmg_free(buf);\n\t}\n}\n#endif /* !NO_CGI */\n\n\n#if !defined(NO_FILES)\nstatic void\nmkcol(struct mg_connection *conn, const char *path)\n{\n\tint rc, body_len;\n\tstruct de de;\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\n\tif (conn == NULL) {\n\t\treturn;\n\t}\n\n\t/* TODO (mid): Check the send_http_error situations in this function */\n\n\tmemset(&de.file, 0, sizeof(de.file));\n\tif (!mg_stat(conn, path, &de.file)) {\n\t\tmg_cry(conn,\n\t\t       \"%s: mg_stat(%s) failed: %s\",\n\t\t       __func__,\n\t\t       path,\n\t\t       strerror(ERRNO));\n\t}\n\n\tif (de.file.last_modified) {\n\t\t/* TODO (high): This check does not seem to make any sense ! */\n\t\tsend_http_error(\n\t\t    conn, 405, \"Error: mkcol(%s): %s\", path, strerror(ERRNO));\n\t\treturn;\n\t}\n\n\tbody_len = conn->data_len - conn->request_len;\n\tif (body_len > 0) {\n\t\tsend_http_error(\n\t\t    conn, 415, \"Error: mkcol(%s): %s\", path, strerror(ERRNO));\n\t\treturn;\n\t}\n\n\trc = mg_mkdir(conn, path, 0755);\n\n\tif (rc == 0) {\n\t\tconn->status_code = 201;\n\t\tgmt_time_string(date, sizeof(date), &curtime);\n\t\tmg_printf(conn,\n\t\t          \"HTTP/1.1 %d Created\\r\\n\"\n\t\t          \"Date: %s\\r\\n\",\n\t\t          conn->status_code,\n\t\t          date);\n\t\tsend_static_cache_header(conn);\n\t\tmg_printf(conn,\n\t\t          \"Content-Length: 0\\r\\n\"\n\t\t          \"Connection: %s\\r\\n\\r\\n\",\n\t\t          suggest_connection_header(conn));\n\t} else if (rc == -1) {\n\t\tif (errno == EEXIST) {\n\t\t\tsend_http_error(\n\t\t\t    conn, 405, \"Error: mkcol(%s): %s\", path, strerror(ERRNO));\n\t\t} else if (errno == EACCES) {\n\t\t\tsend_http_error(\n\t\t\t    conn, 403, \"Error: mkcol(%s): %s\", path, strerror(ERRNO));\n\t\t} else if (errno == ENOENT) {\n\t\t\tsend_http_error(\n\t\t\t    conn, 409, \"Error: mkcol(%s): %s\", path, strerror(ERRNO));\n\t\t} else {\n\t\t\tsend_http_error(conn, 500, \"fopen(%s): %s\", path, strerror(ERRNO));\n\t\t}\n\t}\n}\n\n\nstatic void\nput_file(struct mg_connection *conn, const char *path)\n{\n\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\tconst char *range;\n\tint64_t r1, r2;\n\tint rc;\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\n\tif (conn == NULL) {\n\t\treturn;\n\t}\n\n\tif (mg_stat(conn, path, &file.stat)) {\n\t\t/* File already exists */\n\t\tconn->status_code = 200;\n\n\t\tif (file.stat.is_directory) {\n\t\t\t/* This is an already existing directory,\n\t\t\t * so there is nothing to do for the server. */\n\t\t\trc = 0;\n\n\t\t} else {\n\t\t\t/* File exists and is not a directory. */\n\t\t\t/* Can it be replaced? */\n\n\t\t\tif (file.access.membuf != NULL) {\n\t\t\t\t/* This is an \"in-memory\" file, that can not be replaced */\n\t\t\t\tsend_http_error(\n\t\t\t\t    conn,\n\t\t\t\t    405,\n\t\t\t\t    \"Error: Put not possible\\nReplacing %s is not supported\",\n\t\t\t\t    path);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/* Check if the server may write this file */\n\t\t\tif (access(path, W_OK) == 0) {\n\t\t\t\t/* Access granted */\n\t\t\t\tconn->status_code = 200;\n\t\t\t\trc = 1;\n\t\t\t} else {\n\t\t\t\tsend_http_error(\n\t\t\t\t    conn,\n\t\t\t\t    403,\n\t\t\t\t    \"Error: Put not possible\\nReplacing %s is not allowed\",\n\t\t\t\t    path);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t/* File should be created */\n\t\tconn->status_code = 201;\n\t\trc = put_dir(conn, path);\n\t}\n\n\tif (rc == 0) {\n\t\t/* put_dir returns 0 if path is a directory */\n\t\tgmt_time_string(date, sizeof(date), &curtime);\n\t\tmg_printf(conn,\n\t\t          \"HTTP/1.1 %d %s\\r\\n\",\n\t\t          conn->status_code,\n\t\t          mg_get_response_code_text(NULL, conn->status_code));\n\t\tsend_no_cache_header(conn);\n\t\tmg_printf(conn,\n\t\t          \"Date: %s\\r\\n\"\n\t\t          \"Content-Length: 0\\r\\n\"\n\t\t          \"Connection: %s\\r\\n\\r\\n\",\n\t\t          date,\n\t\t          suggest_connection_header(conn));\n\n\t\t/* Request to create a directory has been fulfilled successfully.\n\t\t * No need to put a file. */\n\t\treturn;\n\t}\n\n\tif (rc == -1) {\n\t\t/* put_dir returns -1 if the path is too long */\n\t\tsend_http_error(conn,\n\t\t                414,\n\t\t                \"Error: Path too long\\nput_dir(%s): %s\",\n\t\t                path,\n\t\t                strerror(ERRNO));\n\t\treturn;\n\t}\n\n\tif (rc == -2) {\n\t\t/* put_dir returns -2 if the directory can not be created */\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Can not create directory\\nput_dir(%s): %s\",\n\t\t                path,\n\t\t                strerror(ERRNO));\n\t\treturn;\n\t}\n\n\t/* A file should be created or overwritten. */\n\t/* TODO: Test if write or write+read is required. */\n\tif (!mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &file)\n\t    || file.access.fp == NULL) {\n\t\t(void)mg_fclose(&file.access);\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Can not create file\\nfopen(%s): %s\",\n\t\t                path,\n\t\t                strerror(ERRNO));\n\t\treturn;\n\t}\n\n\tfclose_on_exec(&file.access, conn);\n\trange = mg_get_header(conn, \"Content-Range\");\n\tr1 = r2 = 0;\n\tif (range != NULL && parse_range_header(range, &r1, &r2) > 0) {\n\t\tconn->status_code = 206; /* Partial content */\n\t\tfseeko(file.access.fp, r1, SEEK_SET);\n\t}\n\n\tif (!forward_body_data(conn, file.access.fp, INVALID_SOCKET, NULL)) {\n\t\t/* forward_body_data failed.\n\t\t * The error code has already been sent to the client,\n\t\t * and conn->status_code is already set. */\n\t\t(void)mg_fclose(&file.access);\n\t\treturn;\n\t}\n\n\tif (mg_fclose(&file.access) != 0) {\n\t\t/* fclose failed. This might have different reasons, but a likely\n\t\t * one is \"no space on disk\", http 507. */\n\t\tconn->status_code = 507;\n\t}\n\n\tgmt_time_string(date, sizeof(date), &curtime);\n\tmg_printf(conn,\n\t          \"HTTP/1.1 %d %s\\r\\n\",\n\t          conn->status_code,\n\t          mg_get_response_code_text(NULL, conn->status_code));\n\tsend_no_cache_header(conn);\n\tmg_printf(conn,\n\t          \"Date: %s\\r\\n\"\n\t          \"Content-Length: 0\\r\\n\"\n\t          \"Connection: %s\\r\\n\\r\\n\",\n\t          date,\n\t          suggest_connection_header(conn));\n}\n\n\nstatic void\ndelete_file(struct mg_connection *conn, const char *path)\n{\n\tstruct de de;\n\tmemset(&de.file, 0, sizeof(de.file));\n\tif (!mg_stat(conn, path, &de.file)) {\n\t\t/* mg_stat returns 0 if the file does not exist */\n\t\tsend_http_error(conn,\n\t\t                404,\n\t\t                \"Error: Cannot delete file\\nFile %s not found\",\n\t\t                path);\n\t\treturn;\n\t}\n\n#if 0 /* Ignore if a file in memory is inside a folder */\n\tif (de.access.membuf != NULL) {\n\t\t/* the file is cached in memory */\n\t\tsend_http_error(\n\t\t    conn,\n\t\t    405,\n\t\t    \"Error: Delete not possible\\nDeleting %s is not supported\",\n\t\t    path);\n\t\treturn;\n\t}\n#endif\n\n\tif (de.file.is_directory) {\n\t\tif (remove_directory(conn, path)) {\n\t\t\t/* Delete is successful: Return 204 without content. */\n\t\t\tsend_http_error(conn, 204, \"%s\", \"\");\n\t\t} else {\n\t\t\t/* Delete is not successful: Return 500 (Server error). */\n\t\t\tsend_http_error(conn, 500, \"Error: Could not delete %s\", path);\n\t\t}\n\t\treturn;\n\t}\n\n\t/* This is an existing file (not a directory).\n\t * Check if write permission is granted. */\n\tif (access(path, W_OK) != 0) {\n\t\t/* File is read only */\n\t\tsend_http_error(\n\t\t    conn,\n\t\t    403,\n\t\t    \"Error: Delete not possible\\nDeleting %s is not allowed\",\n\t\t    path);\n\t\treturn;\n\t}\n\n\t/* Try to delete it. */\n\tif (mg_remove(conn, path) == 0) {\n\t\t/* Delete was successful: Return 204 without content. */\n\t\tsend_http_error(conn, 204, \"%s\", \"\");\n\t} else {\n\t\t/* Delete not successful (file locked). */\n\t\tsend_http_error(conn,\n\t\t                423,\n\t\t                \"Error: Cannot delete file\\nremove(%s): %s\",\n\t\t                path,\n\t\t                strerror(ERRNO));\n\t}\n}\n#endif /* !NO_FILES */\n\n\nstatic void\nsend_ssi_file(struct mg_connection *, const char *, struct mg_file *, int);\n\n\nstatic void\ndo_ssi_include(struct mg_connection *conn,\n               const char *ssi,\n               char *tag,\n               int include_level)\n{\n\tchar file_name[MG_BUF_LEN], path[512], *p;\n\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\tsize_t len;\n\tint truncated = 0;\n\n\tif (conn == NULL) {\n\t\treturn;\n\t}\n\n\t/* sscanf() is safe here, since send_ssi_file() also uses buffer\n\t * of size MG_BUF_LEN to get the tag. So strlen(tag) is\n\t * always < MG_BUF_LEN. */\n\tif (sscanf(tag, \" virtual=\\\"%511[^\\\"]\\\"\", file_name) == 1) {\n\t\t/* File name is relative to the webserver root */\n\t\tfile_name[511] = 0;\n\t\t(void)mg_snprintf(conn,\n\t\t                  &truncated,\n\t\t                  path,\n\t\t                  sizeof(path),\n\t\t                  \"%s/%s\",\n\t\t                  conn->ctx->config[DOCUMENT_ROOT],\n\t\t                  file_name);\n\n\t} else if (sscanf(tag, \" abspath=\\\"%511[^\\\"]\\\"\", file_name) == 1) {\n\t\t/* File name is relative to the webserver working directory\n\t\t * or it is absolute system path */\n\t\tfile_name[511] = 0;\n\t\t(void)\n\t\t    mg_snprintf(conn, &truncated, path, sizeof(path), \"%s\", file_name);\n\n\t} else if (sscanf(tag, \" file=\\\"%511[^\\\"]\\\"\", file_name) == 1\n\t           || sscanf(tag, \" \\\"%511[^\\\"]\\\"\", file_name) == 1) {\n\t\t/* File name is relative to the currect document */\n\t\tfile_name[511] = 0;\n\t\t(void)mg_snprintf(conn, &truncated, path, sizeof(path), \"%s\", ssi);\n\n\t\tif (!truncated) {\n\t\t\tif ((p = strrchr(path, '/')) != NULL) {\n\t\t\t\tp[1] = '\\0';\n\t\t\t}\n\t\t\tlen = strlen(path);\n\t\t\t(void)mg_snprintf(conn,\n\t\t\t                  &truncated,\n\t\t\t                  path + len,\n\t\t\t                  sizeof(path) - len,\n\t\t\t                  \"%s\",\n\t\t\t                  file_name);\n\t\t}\n\n\t} else {\n\t\tmg_cry(conn, \"Bad SSI #include: [%s]\", tag);\n\t\treturn;\n\t}\n\n\tif (truncated) {\n\t\tmg_cry(conn, \"SSI #include path length overflow: [%s]\", tag);\n\t\treturn;\n\t}\n\n\tif (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, &file)) {\n\t\tmg_cry(conn,\n\t\t       \"Cannot open SSI #include: [%s]: fopen(%s): %s\",\n\t\t       tag,\n\t\t       path,\n\t\t       strerror(ERRNO));\n\t} else {\n\t\tfclose_on_exec(&file.access, conn);\n\t\tif (match_prefix(conn->ctx->config[SSI_EXTENSIONS],\n\t\t                 strlen(conn->ctx->config[SSI_EXTENSIONS]),\n\t\t                 path) > 0) {\n\t\t\tsend_ssi_file(conn, path, &file, include_level + 1);\n\t\t} else {\n\t\t\tsend_file_data(conn, &file, 0, INT64_MAX);\n\t\t}\n\t\t(void)mg_fclose(&file.access); /* Ignore errors for readonly files */\n\t}\n}\n\n\n#if !defined(NO_POPEN)\nstatic void\ndo_ssi_exec(struct mg_connection *conn, char *tag)\n{\n\tchar cmd[1024] = \"\";\n\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\n\tif (sscanf(tag, \" \\\"%1023[^\\\"]\\\"\", cmd) != 1) {\n\t\tmg_cry(conn, \"Bad SSI #exec: [%s]\", tag);\n\t} else {\n\t\tcmd[1023] = 0;\n\t\tif ((file.access.fp = popen(cmd, \"r\")) == NULL) {\n\t\t\tmg_cry(conn, \"Cannot SSI #exec: [%s]: %s\", cmd, strerror(ERRNO));\n\t\t} else {\n\t\t\tsend_file_data(conn, &file, 0, INT64_MAX);\n\t\t\tpclose(file.access.fp);\n\t\t}\n\t}\n}\n#endif /* !NO_POPEN */\n\n\nstatic int\nmg_fgetc(struct mg_file *filep, int offset)\n{\n\tif (filep == NULL) {\n\t\treturn EOF;\n\t}\n\tif (filep->access.membuf != NULL && offset >= 0\n\t    && ((unsigned int)(offset)) < filep->stat.size) {\n\t\treturn ((const unsigned char *)filep->access.membuf)[offset];\n\t} else if (filep->access.fp != NULL) {\n\t\treturn fgetc(filep->access.fp);\n\t} else {\n\t\treturn EOF;\n\t}\n}\n\n\nstatic void\nsend_ssi_file(struct mg_connection *conn,\n              const char *path,\n              struct mg_file *filep,\n              int include_level)\n{\n\tchar buf[MG_BUF_LEN];\n\tint ch, offset, len, in_ssi_tag;\n\n\tif (include_level > 10) {\n\t\tmg_cry(conn, \"SSI #include level is too deep (%s)\", path);\n\t\treturn;\n\t}\n\n\tin_ssi_tag = len = offset = 0;\n\twhile ((ch = mg_fgetc(filep, offset)) != EOF) {\n\t\tif (in_ssi_tag && ch == '>') {\n\t\t\tin_ssi_tag = 0;\n\t\t\tbuf[len++] = (char)ch;\n\t\t\tbuf[len] = '\\0';\n\t\t\t/* assert(len <= (int) sizeof(buf)); */\n\t\t\tif (len > (int)sizeof(buf)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (len < 6 || memcmp(buf, \"<!--#\", 5) != 0) {\n\t\t\t\t/* Not an SSI tag, pass it */\n\t\t\t\t(void)mg_write(conn, buf, (size_t)len);\n\t\t\t} else {\n\t\t\t\tif (!memcmp(buf + 5, \"include\", 7)) {\n\t\t\t\t\tdo_ssi_include(conn, path, buf + 12, include_level);\n#if !defined(NO_POPEN)\n\t\t\t\t} else if (!memcmp(buf + 5, \"exec\", 4)) {\n\t\t\t\t\tdo_ssi_exec(conn, buf + 9);\n#endif /* !NO_POPEN */\n\t\t\t\t} else {\n\t\t\t\t\tmg_cry(conn,\n\t\t\t\t\t       \"%s: unknown SSI \"\n\t\t\t\t\t       \"command: \\\"%s\\\"\",\n\t\t\t\t\t       path,\n\t\t\t\t\t       buf);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlen = 0;\n\t\t} else if (in_ssi_tag) {\n\t\t\tif (len == 5 && memcmp(buf, \"<!--#\", 5) != 0) {\n\t\t\t\t/* Not an SSI tag */\n\t\t\t\tin_ssi_tag = 0;\n\t\t\t} else if (len == (int)sizeof(buf) - 2) {\n\t\t\t\tmg_cry(conn, \"%s: SSI tag is too large\", path);\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t\tbuf[len++] = (char)(ch & 0xff);\n\t\t} else if (ch == '<') {\n\t\t\tin_ssi_tag = 1;\n\t\t\tif (len > 0) {\n\t\t\t\tmg_write(conn, buf, (size_t)len);\n\t\t\t}\n\t\t\tlen = 0;\n\t\t\tbuf[len++] = (char)(ch & 0xff);\n\t\t} else {\n\t\t\tbuf[len++] = (char)(ch & 0xff);\n\t\t\tif (len == (int)sizeof(buf)) {\n\t\t\t\tmg_write(conn, buf, (size_t)len);\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Send the rest of buffered data */\n\tif (len > 0) {\n\t\tmg_write(conn, buf, (size_t)len);\n\t}\n}\n\n\nstatic void\nhandle_ssi_file_request(struct mg_connection *conn,\n                        const char *path,\n                        struct mg_file *filep)\n{\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\tconst char *cors1, *cors2, *cors3;\n\n\tif (conn == NULL || path == NULL || filep == NULL) {\n\t\treturn;\n\t}\n\n\tif (mg_get_header(conn, \"Origin\")) {\n\t\t/* Cross-origin resource sharing (CORS). */\n\t\tcors1 = \"Access-Control-Allow-Origin: \";\n\t\tcors2 = conn->ctx->config[ACCESS_CONTROL_ALLOW_ORIGIN];\n\t\tcors3 = \"\\r\\n\";\n\t} else {\n\t\tcors1 = cors2 = cors3 = \"\";\n\t}\n\n\tif (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, filep)) {\n\t\t/* File exists (precondition for calling this function),\n\t\t * but can not be opened by the server. */\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Cannot read file\\nfopen(%s): %s\",\n\t\t                path,\n\t\t                strerror(ERRNO));\n\t} else {\n\t\tconn->must_close = 1;\n\t\tgmt_time_string(date, sizeof(date), &curtime);\n\t\tfclose_on_exec(&filep->access, conn);\n\t\tmg_printf(conn, \"HTTP/1.1 200 OK\\r\\n\");\n\t\tsend_no_cache_header(conn);\n\t\tmg_printf(conn,\n\t\t          \"%s%s%s\"\n\t\t          \"Date: %s\\r\\n\"\n\t\t          \"Content-Type: text/html\\r\\n\"\n\t\t          \"Connection: %s\\r\\n\\r\\n\",\n\t\t          cors1,\n\t\t          cors2,\n\t\t          cors3,\n\t\t          date,\n\t\t          suggest_connection_header(conn));\n\t\tsend_ssi_file(conn, path, filep, 0);\n\t\t(void)mg_fclose(&filep->access); /* Ignore errors for readonly files */\n\t}\n}\n\n\n#if !defined(NO_FILES)\nstatic void\nsend_options(struct mg_connection *conn)\n{\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\n\tif (!conn) {\n\t\treturn;\n\t}\n\n\tconn->status_code = 200;\n\tconn->must_close = 1;\n\tgmt_time_string(date, sizeof(date), &curtime);\n\n\tmg_printf(conn,\n\t          \"HTTP/1.1 200 OK\\r\\n\"\n\t          \"Date: %s\\r\\n\"\n\t          /* TODO: \"Cache-Control\" (?) */\n\t          \"Connection: %s\\r\\n\"\n\t          \"Allow: GET, POST, HEAD, CONNECT, PUT, DELETE, OPTIONS, \"\n\t          \"PROPFIND, MKCOL\\r\\n\"\n\t          \"DAV: 1\\r\\n\\r\\n\",\n\t          date,\n\t          suggest_connection_header(conn));\n}\n\n\n/* Writes PROPFIND properties for a collection element */\nstatic void\nprint_props(struct mg_connection *conn,\n            const char *uri,\n            struct mg_file_stat *filep)\n{\n\tchar mtime[64];\n\n\tif (conn == NULL || uri == NULL || filep == NULL) {\n\t\treturn;\n\t}\n\n\tgmt_time_string(mtime, sizeof(mtime), &filep->last_modified);\n\tconn->num_bytes_sent +=\n\t    mg_printf(conn,\n\t              \"<d:response>\"\n\t              \"<d:href>%s</d:href>\"\n\t              \"<d:propstat>\"\n\t              \"<d:prop>\"\n\t              \"<d:resourcetype>%s</d:resourcetype>\"\n\t              \"<d:getcontentlength>%\" INT64_FMT \"</d:getcontentlength>\"\n\t              \"<d:getlastmodified>%s</d:getlastmodified>\"\n\t              \"</d:prop>\"\n\t              \"<d:status>HTTP/1.1 200 OK</d:status>\"\n\t              \"</d:propstat>\"\n\t              \"</d:response>\\n\",\n\t              uri,\n\t              filep->is_directory ? \"<d:collection/>\" : \"\",\n\t              filep->size,\n\t              mtime);\n}\n\n\nstatic void\nprint_dav_dir_entry(struct de *de, void *data)\n{\n\tchar href[PATH_MAX];\n\tchar href_encoded[PATH_MAX * 3 /* worst case */];\n\tint truncated;\n\n\tstruct mg_connection *conn = (struct mg_connection *)data;\n\tif (!de || !conn) {\n\t\treturn;\n\t}\n\tmg_snprintf(conn,\n\t            &truncated,\n\t            href,\n\t            sizeof(href),\n\t            \"%s%s\",\n\t            conn->request_info.local_uri,\n\t            de->file_name);\n\n\tif (!truncated) {\n\t\tmg_url_encode(href, href_encoded, PATH_MAX * 3);\n\t\tprint_props(conn, href_encoded, &de->file);\n\t}\n}\n\n\nstatic void\nhandle_propfind(struct mg_connection *conn,\n                const char *path,\n                struct mg_file_stat *filep)\n{\n\tconst char *depth = mg_get_header(conn, \"Depth\");\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\n\tgmt_time_string(date, sizeof(date), &curtime);\n\n\tif (!conn || !path || !filep || !conn->ctx) {\n\t\treturn;\n\t}\n\n\tconn->must_close = 1;\n\tconn->status_code = 207;\n\tmg_printf(conn,\n\t          \"HTTP/1.1 207 Multi-Status\\r\\n\"\n\t          \"Date: %s\\r\\n\",\n\t          date);\n\tsend_static_cache_header(conn);\n\tmg_printf(conn,\n\t          \"Connection: %s\\r\\n\"\n\t          \"Content-Type: text/xml; charset=utf-8\\r\\n\\r\\n\",\n\t          suggest_connection_header(conn));\n\n\tconn->num_bytes_sent +=\n\t    mg_printf(conn,\n\t              \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\"\n\t              \"<d:multistatus xmlns:d='DAV:'>\\n\");\n\n\t/* Print properties for the requested resource itself */\n\tprint_props(conn, conn->request_info.local_uri, filep);\n\n\t/* If it is a directory, print directory entries too if Depth is not 0 */\n\tif (filep && filep->is_directory\n\t    && !mg_strcasecmp(conn->ctx->config[ENABLE_DIRECTORY_LISTING], \"yes\")\n\t    && (depth == NULL || strcmp(depth, \"0\") != 0)) {\n\t\tscan_directory(conn, path, conn, &print_dav_dir_entry);\n\t}\n\n\tconn->num_bytes_sent += mg_printf(conn, \"%s\\n\", \"</d:multistatus>\");\n}\n#endif\n\nvoid\nmg_lock_connection(struct mg_connection *conn)\n{\n\tif (conn) {\n\t\t(void)pthread_mutex_lock(&conn->mutex);\n\t}\n}\n\nvoid\nmg_unlock_connection(struct mg_connection *conn)\n{\n\tif (conn) {\n\t\t(void)pthread_mutex_unlock(&conn->mutex);\n\t}\n}\n\nvoid\nmg_lock_context(struct mg_context *ctx)\n{\n\tif (ctx) {\n\t\t(void)pthread_mutex_lock(&ctx->nonce_mutex);\n\t}\n}\n\nvoid\nmg_unlock_context(struct mg_context *ctx)\n{\n\tif (ctx) {\n\t\t(void)pthread_mutex_unlock(&ctx->nonce_mutex);\n\t}\n}\n\n#if defined(USE_TIMERS)\n#include \"timer.inl\"\n#endif /* USE_TIMERS */\n\n#ifdef USE_LUA\n#include \"mod_lua.inl\"\n#endif /* USE_LUA */\n\n#ifdef USE_DUKTAPE\n#include \"mod_duktape.inl\"\n#endif /* USE_DUKTAPE */\n\n#if defined(USE_WEBSOCKET)\n\n#define SHA_API static\n#include \"sha1.inl\"\n\nstatic int\nsend_websocket_handshake(struct mg_connection *conn, const char *websock_key)\n{\n\tstatic const char *magic = \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";\n\tchar buf[100], sha[20], b64_sha[sizeof(sha) * 2];\n\tSHA1_CTX sha_ctx;\n\tint truncated;\n\n\t/* Calculate Sec-WebSocket-Accept reply from Sec-WebSocket-Key. */\n\tmg_snprintf(conn, &truncated, buf, sizeof(buf), \"%s%s\", websock_key, magic);\n\tif (truncated) {\n\t\tconn->must_close = 1;\n\t\treturn 0;\n\t}\n\n\tSHA1_Init(&sha_ctx);\n\tSHA1_Update(&sha_ctx, (unsigned char *)buf, (uint32_t)strlen(buf));\n\tSHA1_Final(&sha_ctx, (unsigned char *)sha);\n\tbase64_encode((unsigned char *)sha, sizeof(sha), b64_sha);\n\tmg_printf(conn,\n\t          \"HTTP/1.1 101 Switching Protocols\\r\\n\"\n\t          \"Upgrade: websocket\\r\\n\"\n\t          \"Connection: Upgrade\\r\\n\"\n\t          \"Sec-WebSocket-Accept: %s\\r\\n\",\n\t          b64_sha);\n\tif (conn->request_info.acceptedWebSocketSubprotocol) {\n\t\tmg_printf(conn,\n\t\t          \"Sec-WebSocket-Protocol: %s\\r\\n\\r\\n\",\n\t\t          conn->request_info.acceptedWebSocketSubprotocol);\n\t} else {\n\t\tmg_printf(conn, \"%s\", \"\\r\\n\");\n\t}\n\n\treturn 1;\n}\n\n\nstatic void\nread_websocket(struct mg_connection *conn,\n               mg_websocket_data_handler ws_data_handler,\n               void *callback_data)\n{\n\t/* Pointer to the beginning of the portion of the incoming websocket\n\t * message queue.\n\t * The original websocket upgrade request is never removed, so the queue\n\t * begins after it. */\n\tunsigned char *buf = (unsigned char *)conn->buf + conn->request_len;\n\tint n, error, exit_by_callback;\n\n\t/* body_len is the length of the entire queue in bytes\n\t * len is the length of the current message\n\t * data_len is the length of the current message's data payload\n\t * header_len is the length of the current message's header */\n\tsize_t i, len, mask_len = 0, data_len = 0, header_len, body_len;\n\n\t/* \"The masking key is a 32-bit value chosen at random by the client.\"\n\t * http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17#section-5\n\t*/\n\tunsigned char mask[4];\n\n\t/* data points to the place where the message is stored when passed to\n\t * the\n\t * websocket_data callback.  This is either mem on the stack, or a\n\t * dynamically allocated buffer if it is too large. */\n\tunsigned char mem[4096];\n\tunsigned char *data = mem;\n\tunsigned char mop; /* mask flag and opcode */\n\tdouble timeout = -1.0;\n\n\tif (conn->ctx->config[WEBSOCKET_TIMEOUT]) {\n\t\ttimeout = atoi(conn->ctx->config[WEBSOCKET_TIMEOUT]) / 1000.0;\n\t}\n\tif ((timeout <= 0.0) && (conn->ctx->config[REQUEST_TIMEOUT])) {\n\t\ttimeout = atoi(conn->ctx->config[REQUEST_TIMEOUT]) / 1000.0;\n\t}\n\n\tmg_set_thread_name(\"wsock\");\n\n\t/* Loop continuously, reading messages from the socket, invoking the\n\t * callback, and waiting repeatedly until an error occurs. */\n\twhile (!conn->ctx->stop_flag) {\n\t\theader_len = 0;\n\t\tassert(conn->data_len >= conn->request_len);\n\t\tif ((body_len = (size_t)(conn->data_len - conn->request_len)) >= 2) {\n\t\t\tlen = buf[1] & 127;\n\t\t\tmask_len = (buf[1] & 128) ? 4 : 0;\n\t\t\tif ((len < 126) && (body_len >= mask_len)) {\n\t\t\t\tdata_len = len;\n\t\t\t\theader_len = 2 + mask_len;\n\t\t\t} else if ((len == 126) && (body_len >= (4 + mask_len))) {\n\t\t\t\theader_len = 4 + mask_len;\n\t\t\t\tdata_len = ((((size_t)buf[2]) << 8) + buf[3]);\n\t\t\t} else if (body_len >= (10 + mask_len)) {\n\t\t\t\theader_len = 10 + mask_len;\n\t\t\t\tdata_len = (((uint64_t)ntohl(*(uint32_t *)(void *)&buf[2]))\n\t\t\t\t            << 32) + ntohl(*(uint32_t *)(void *)&buf[6]);\n\t\t\t}\n\t\t}\n\n\t\tif (header_len > 0 && body_len >= header_len) {\n\t\t\t/* Allocate space to hold websocket payload */\n\t\t\tdata = mem;\n\t\t\tif (data_len > sizeof(mem)) {\n\t\t\t\tdata = (unsigned char *)mg_malloc(data_len);\n\t\t\t\tif (data == NULL) {\n\t\t\t\t\t/* Allocation failed, exit the loop and then close the\n\t\t\t\t\t * connection */\n\t\t\t\t\tmg_cry(conn, \"websocket out of memory; closing connection\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Copy the mask before we shift the queue and destroy it */\n\t\t\tif (mask_len > 0) {\n\t\t\t\tmemcpy(mask, buf + header_len - mask_len, sizeof(mask));\n\t\t\t} else {\n\t\t\t\tmemset(mask, 0, sizeof(mask));\n\t\t\t}\n\n\t\t\t/* Read frame payload from the first message in the queue into\n\t\t\t * data and advance the queue by moving the memory in place. */\n\t\t\tassert(body_len >= header_len);\n\t\t\tif (data_len + header_len > body_len) {\n\t\t\t\tmop = buf[0]; /* current mask and opcode */\n\t\t\t\t/* Overflow case */\n\t\t\t\tlen = body_len - header_len;\n\t\t\t\tmemcpy(data, buf + header_len, len);\n\t\t\t\terror = 0;\n\t\t\t\twhile (len < data_len) {\n\t\t\t\t\tn = pull(NULL,\n\t\t\t\t\t         conn,\n\t\t\t\t\t         (char *)(data + len),\n\t\t\t\t\t         (int)(data_len - len),\n\t\t\t\t\t         timeout);\n\t\t\t\t\tif (n <= 0) {\n\t\t\t\t\t\terror = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tlen += (size_t)n;\n\t\t\t\t}\n\t\t\t\tif (error) {\n\t\t\t\t\tmg_cry(conn, \"Websocket pull failed; closing connection\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tconn->data_len = conn->request_len;\n\t\t\t} else {\n\t\t\t\tmop = buf[0]; /* current mask and opcode, overwritten by\n\t\t\t\t               * memmove() */\n\t\t\t\t/* Length of the message being read at the front of the\n\t\t\t\t * queue */\n\t\t\t\tlen = data_len + header_len;\n\n\t\t\t\t/* Copy the data payload into the data pointer for the\n\t\t\t\t * callback */\n\t\t\t\tmemcpy(data, buf + header_len, data_len);\n\n\t\t\t\t/* Move the queue forward len bytes */\n\t\t\t\tmemmove(buf, buf + len, body_len - len);\n\n\t\t\t\t/* Mark the queue as advanced */\n\t\t\t\tconn->data_len -= (int)len;\n\t\t\t}\n\n\t\t\t/* Apply mask if necessary */\n\t\t\tif (mask_len > 0) {\n\t\t\t\tfor (i = 0; i < data_len; ++i) {\n\t\t\t\t\tdata[i] ^= mask[i & 3];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Exit the loop if callback signals to exit (server side),\n\t\t\t * or \"connection close\" opcode received (client side). */\n\t\t\texit_by_callback = 0;\n\t\t\tif ((ws_data_handler != NULL)\n\t\t\t    && !ws_data_handler(\n\t\t\t           conn, mop, (char *)data, data_len, callback_data)) {\n\t\t\t\texit_by_callback = 1;\n\t\t\t}\n\n\t\t\tif (data != mem) {\n\t\t\t\tmg_free(data);\n\t\t\t}\n\n\t\t\tif (exit_by_callback\n\t\t\t    || ((mop & 0xf) == WEBSOCKET_OPCODE_CONNECTION_CLOSE)) {\n\t\t\t\t/* Opcode == 8, connection close */\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t/* Not breaking the loop, process next websocket frame. */\n\t\t} else {\n\t\t\t/* Read from the socket into the next available location in the\n\t\t\t * message queue. */\n\t\t\tif ((n = pull(NULL,\n\t\t\t              conn,\n\t\t\t              conn->buf + conn->data_len,\n\t\t\t              conn->buf_size - conn->data_len,\n\t\t\t              timeout)) <= 0) {\n\t\t\t\t/* Error, no bytes read */\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconn->data_len += n;\n\t\t}\n\t}\n\n\tmg_set_thread_name(\"worker\");\n}\n\n\nstatic int\nmg_websocket_write_exec(struct mg_connection *conn,\n                        int opcode,\n                        const char *data,\n                        size_t dataLen,\n                        uint32_t masking_key)\n{\n\tunsigned char header[14];\n\tsize_t headerLen = 1;\n\n\tint retval = -1;\n\n#if defined(__MINGW32__) || defined(__GNUC__) && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5)))\n/* Disable spurious conversion warning for GCC */\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wconversion\"\n#endif\n\n\theader[0] = 0x80u | (unsigned char)((unsigned)opcode & 0xf);\n\n#if defined(__MINGW32__) || defined(__GNUC__) && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5)))\n#pragma GCC diagnostic pop\n#endif\n\n\t/* Frame format: http://tools.ietf.org/html/rfc6455#section-5.2 */\n\tif (dataLen < 126) {\n\t\t/* inline 7-bit length field */\n\t\theader[1] = (unsigned char)dataLen;\n\t\theaderLen = 2;\n\t} else if (dataLen <= 0xFFFF) {\n\t\t/* 16-bit length field */\n\t\tuint16_t len = htons((uint16_t)dataLen);\n\t\theader[1] = 126;\n\t\tmemcpy(header + 2, &len, 2);\n\t\theaderLen = 4;\n\t} else {\n\t\t/* 64-bit length field */\n\t\tuint32_t len1 = htonl((uint32_t)((uint64_t)dataLen >> 32));\n\t\tuint32_t len2 = htonl((uint32_t)(dataLen & 0xFFFFFFFFu));\n\t\theader[1] = 127;\n\t\tmemcpy(header + 2, &len1, 4);\n\t\tmemcpy(header + 6, &len2, 4);\n\t\theaderLen = 10;\n\t}\n\n\tif (masking_key) {\n\t\t/* add mask */\n\t\theader[1] |= 0x80;\n\t\tmemcpy(header + headerLen, &masking_key, 4);\n\t\theaderLen += 4;\n\t}\n\n\n\t/* Note that POSIX/Winsock's send() is threadsafe\n\t * http://stackoverflow.com/questions/1981372/are-parallel-calls-to-send-recv-on-the-same-socket-valid\n\t * but mongoose's mg_printf/mg_write is not (because of the loop in\n\t * push(), although that is only a problem if the packet is large or\n\t * outgoing buffer is full). */\n\t(void)mg_lock_connection(conn);\n\tretval = mg_write(conn, header, headerLen);\n\tif (dataLen > 0) {\n\t\tretval = mg_write(conn, data, dataLen);\n\t}\n\tmg_unlock_connection(conn);\n\n\treturn retval;\n}\n\nint\nmg_websocket_write(struct mg_connection *conn,\n                   int opcode,\n                   const char *data,\n                   size_t dataLen)\n{\n\treturn mg_websocket_write_exec(conn, opcode, data, dataLen, 0);\n}\n\n\nstatic void\nmask_data(const char *in, size_t in_len, uint32_t masking_key, char *out)\n{\n\tsize_t i = 0;\n\n\ti = 0;\n\tif ((in_len > 3) && ((ptrdiff_t)in % 4) == 0) {\n\t\t/* Convert in 32 bit words, if data is 4 byte aligned */\n\t\twhile (i < (in_len - 3)) {\n\t\t\t*(uint32_t *)(void *)(out + i) =\n\t\t\t    *(uint32_t *)(void *)(in + i) ^ masking_key;\n\t\t\ti += 4;\n\t\t}\n\t}\n\tif (i != in_len) {\n\t\t/* convert 1-3 remaining bytes if ((dataLen % 4) != 0)*/\n\t\twhile (i < in_len) {\n\t\t\t*(uint8_t *)(void *)(out + i) =\n\t\t\t    *(uint8_t *)(void *)(in + i)\n\t\t\t    ^ *(((uint8_t *)&masking_key) + (i % 4));\n\t\t\ti++;\n\t\t}\n\t}\n}\n\n\nint\nmg_websocket_client_write(struct mg_connection *conn,\n                          int opcode,\n                          const char *data,\n                          size_t dataLen)\n{\n\tint retval = -1;\n\tchar *masked_data = (char *)mg_malloc(((dataLen + 7) / 4) * 4);\n\tuint32_t masking_key = (uint32_t)get_random();\n\n\tif (masked_data == NULL) {\n\t\t/* Return -1 in an error case */\n\t\tmg_cry(conn,\n\t\t       \"Cannot allocate buffer for masked websocket response: \"\n\t\t       \"Out of memory\");\n\t\treturn -1;\n\t}\n\n\tmask_data(data, dataLen, masking_key, masked_data);\n\n\tretval = mg_websocket_write_exec(\n\t    conn, opcode, masked_data, dataLen, masking_key);\n\tmg_free(masked_data);\n\n\treturn retval;\n}\n\n\nstatic void\nhandle_websocket_request(struct mg_connection *conn,\n                         const char *path,\n                         int is_callback_resource,\n                         struct mg_websocket_subprotocols *subprotocols,\n                         mg_websocket_connect_handler ws_connect_handler,\n                         mg_websocket_ready_handler ws_ready_handler,\n                         mg_websocket_data_handler ws_data_handler,\n                         mg_websocket_close_handler ws_close_handler,\n                         void *cbData)\n{\n\tconst char *websock_key = mg_get_header(conn, \"Sec-WebSocket-Key\");\n\tconst char *version = mg_get_header(conn, \"Sec-WebSocket-Version\");\n\tint lua_websock = 0;\n\n#if !defined(USE_LUA)\n\t(void)path;\n#endif\n\n\t/* Step 1: Check websocket protocol version. */\n\t/* Step 1.1: Check Sec-WebSocket-Key. */\n\tif (!websock_key) {\n\t\t/* The RFC standard version (https://tools.ietf.org/html/rfc6455)\n\t\t * requires a Sec-WebSocket-Key header.\n\t\t */\n\t\t/* It could be the hixie draft version\n\t\t * (http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76).\n\t\t */\n\t\tconst char *key1 = mg_get_header(conn, \"Sec-WebSocket-Key1\");\n\t\tconst char *key2 = mg_get_header(conn, \"Sec-WebSocket-Key2\");\n\t\tchar key3[8];\n\n\t\tif ((key1 != NULL) && (key2 != NULL)) {\n\t\t\t/* This version uses 8 byte body data in a GET request */\n\t\t\tconn->content_len = 8;\n\t\t\tif (8 == mg_read(conn, key3, 8)) {\n\t\t\t\t/* This is the hixie version */\n\t\t\t\tsend_http_error(conn,\n\t\t\t\t                426,\n\t\t\t\t                \"%s\",\n\t\t\t\t                \"Protocol upgrade to RFC 6455 required\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t/* This is an unknown version */\n\t\tsend_http_error(conn, 400, \"%s\", \"Malformed websocket request\");\n\t\treturn;\n\t}\n\n\t/* Step 1.2: Check websocket protocol version. */\n\t/* The RFC version (https://tools.ietf.org/html/rfc6455) is 13. */\n\tif (version == NULL || strcmp(version, \"13\") != 0) {\n\t\t/* Reject wrong versions */\n\t\tsend_http_error(conn, 426, \"%s\", \"Protocol upgrade required\");\n\t\treturn;\n\t}\n\n\t/* Step 1.3: Could check for \"Host\", but we do not really nead this\n\t * value for anything, so just ignore it. */\n\n\t/* Step 2: If a callback is responsible, call it. */\n\tif (is_callback_resource) {\n\t\t/* Step 2.1 check and select subprotocol */\n\t\tconst char *protocol = mg_get_header(conn, \"Sec-WebSocket-Protocol\");\n\t\tif (protocol && subprotocols) {\n\t\t\tint idx;\n\t\t\tunsigned long len;\n\t\t\tconst char *sep, *curSubProtocol,\n\t\t\t    *acceptedWebSocketSubprotocol = NULL;\n\n\n\t\t\t/* look for matching subprotocol */\n\t\t\tdo {\n\t\t\t\tsep = strchr(protocol, ',');\n\t\t\t\tcurSubProtocol = protocol;\n\t\t\t\tlen = sep ? (unsigned long)(sep - protocol) : strlen(protocol);\n\t\t\t\twhile (sep && isspace(*++sep))\n\t\t\t\t\t; // ignore leading whitespaces\n\t\t\t\tprotocol = sep;\n\n\n\t\t\t\tfor (idx = 0; idx < subprotocols->nb_subprotocols; idx++) {\n\t\t\t\t\tif ((strlen(subprotocols->subprotocols[idx]) == len)\n\t\t\t\t\t    && (strncmp(curSubProtocol,\n\t\t\t\t\t                subprotocols->subprotocols[idx],\n\t\t\t\t\t                len) == 0)) {\n\t\t\t\t\t\tacceptedWebSocketSubprotocol =\n\t\t\t\t\t\t    subprotocols->subprotocols[idx];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (sep && !acceptedWebSocketSubprotocol);\n\n\t\t\tconn->request_info.acceptedWebSocketSubprotocol =\n\t\t\t    acceptedWebSocketSubprotocol;\n\t\t} else if (protocol) {\n\t\t\t/* keep legacy behavior */\n\n\t\t\t/* The protocol is a comma seperated list of names. */\n\t\t\t/* The server must only return one value from this list. */\n\t\t\t/* First check if it is a list or just a single value. */\n\t\t\tconst char *sep = strrchr(protocol, ',');\n\t\t\tif (sep == NULL) {\n\t\t\t\t/* Just a single protocol -> accept it. */\n\t\t\t\tconn->request_info.acceptedWebSocketSubprotocol = protocol;\n\t\t\t} else {\n\t\t\t\t/* Multiple protocols -> accept the last one. */\n\t\t\t\t/* This is just a quick fix if the client offers multiple\n\t\t\t\t * protocols. The handler should have a list of accepted\n\t\t\t\t * protocols on his own\n\t\t\t\t * and use it to select one protocol among those the client has\n\t\t\t\t * offered.\n\t\t\t\t */\n\t\t\t\twhile (isspace(*++sep))\n\t\t\t\t\t; // ignore leading whitespaces\n\t\t\t\tconn->request_info.acceptedWebSocketSubprotocol = sep;\n\t\t\t}\n\t\t}\n\n\t\tif (ws_connect_handler != NULL\n\t\t    && ws_connect_handler(conn, cbData) != 0) {\n\t\t\t/* C callback has returned non-zero, do not proceed with\n\t\t\t * handshake.\n\t\t\t */\n\t\t\t/* Note that C callbacks are no longer called when Lua is\n\t\t\t * responsible, so C can no longer filter callbacks for Lua. */\n\t\t\treturn;\n\t\t}\n\t}\n#if defined(USE_LUA)\n\t/* Step 3: No callback. Check if Lua is responsible. */\n\telse {\n\t\t/* Step 3.1: Check if Lua is responsible. */\n\t\tif (conn->ctx->config[LUA_WEBSOCKET_EXTENSIONS]) {\n\t\t\tlua_websock =\n\t\t\t    match_prefix(conn->ctx->config[LUA_WEBSOCKET_EXTENSIONS],\n\t\t\t                 strlen(\n\t\t\t                     conn->ctx->config[LUA_WEBSOCKET_EXTENSIONS]),\n\t\t\t                 path);\n\t\t}\n\n\t\tif (lua_websock) {\n\t\t\t/* Step 3.2: Lua is responsible: call it. */\n\t\t\tconn->lua_websocket_state = lua_websocket_new(path, conn);\n\t\t\tif (!conn->lua_websocket_state) {\n\t\t\t\t/* Lua rejected the new client */\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n#endif\n\n\t/* Step 4: Check if there is a responsible websocket handler. */\n\tif (!is_callback_resource && !lua_websock) {\n\t\t/* There is no callback, and Lua is not responsible either. */\n\t\t/* Reply with a 404 Not Found or with nothing at all?\n\t\t * TODO (mid): check the websocket standards, how to reply to\n\t\t * requests to invalid websocket addresses. */\n\t\tsend_http_error(conn, 404, \"%s\", \"Not found\");\n\t\treturn;\n\t}\n\n\t/* Step 5: The websocket connection has been accepted */\n\tif (!send_websocket_handshake(conn, websock_key)) {\n\t\tsend_http_error(conn, 500, \"%s\", \"Websocket handshake failed\");\n\t\treturn;\n\t}\n\n\t/* Step 6: Call the ready handler */\n\tif (is_callback_resource) {\n\t\tif (ws_ready_handler != NULL) {\n\t\t\tws_ready_handler(conn, cbData);\n\t\t}\n#if defined(USE_LUA)\n\t} else if (lua_websock) {\n\t\tif (!lua_websocket_ready(conn, conn->lua_websocket_state)) {\n\t\t\t/* the ready handler returned false */\n\t\t\treturn;\n\t\t}\n#endif\n\t}\n\n\t/* Step 7: Enter the read loop */\n\tif (is_callback_resource) {\n\t\tread_websocket(conn, ws_data_handler, cbData);\n#if defined(USE_LUA)\n\t} else if (lua_websock) {\n\t\tread_websocket(conn, lua_websocket_data, conn->lua_websocket_state);\n#endif\n\t}\n\n\t/* Step 8: Call the close handler */\n\tif (ws_close_handler) {\n\t\tws_close_handler(conn, cbData);\n\t}\n}\n\n\nstatic int\nis_websocket_protocol(const struct mg_connection *conn)\n{\n\tconst char *upgrade, *connection;\n\n\t/* A websocket protocoll has the following HTTP headers:\n\t *\n\t * Connection: Upgrade\n\t * Upgrade: Websocket\n\t */\n\n\tupgrade = mg_get_header(conn, \"Upgrade\");\n\tif (upgrade == NULL) {\n\t\treturn 0; /* fail early, don't waste time checking other header\n\t\t           * fields\n\t\t             */\n\t}\n\tif (!mg_strcasestr(upgrade, \"websocket\")) {\n\t\treturn 0;\n\t}\n\n\tconnection = mg_get_header(conn, \"Connection\");\n\tif (connection == NULL) {\n\t\treturn 0;\n\t}\n\tif (!mg_strcasestr(connection, \"upgrade\")) {\n\t\treturn 0;\n\t}\n\n\t/* The headers \"Host\", \"Sec-WebSocket-Key\", \"Sec-WebSocket-Protocol\" and\n\t * \"Sec-WebSocket-Version\" are also required.\n\t * Don't check them here, since even an unsupported websocket protocol\n\t * request still IS a websocket request (in contrast to a standard HTTP\n\t * request). It will fail later in handle_websocket_request.\n\t */\n\n\treturn 1;\n}\n#endif /* !USE_WEBSOCKET */\n\n\nstatic int\nisbyte(int n)\n{\n\treturn n >= 0 && n <= 255;\n}\n\n\nstatic int\nparse_net(const char *spec, uint32_t *net, uint32_t *mask)\n{\n\tint n, a, b, c, d, slash = 32, len = 0;\n\n\tif ((sscanf(spec, \"%d.%d.%d.%d/%d%n\", &a, &b, &c, &d, &slash, &n) == 5\n\t     || sscanf(spec, \"%d.%d.%d.%d%n\", &a, &b, &c, &d, &n) == 4) && isbyte(a)\n\t    && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0\n\t    && slash < 33) {\n\t\tlen = n;\n\t\t*net = ((uint32_t)a << 24) | ((uint32_t)b << 16) | ((uint32_t)c << 8)\n\t\t       | (uint32_t)d;\n\t\t*mask = slash ? (0xffffffffU << (32 - slash)) : 0;\n\t}\n\n\treturn len;\n}\n\n\nstatic int\nset_throttle(const char *spec, uint32_t remote_ip, const char *uri)\n{\n\tint throttle = 0;\n\tstruct vec vec, val;\n\tuint32_t net, mask;\n\tchar mult;\n\tdouble v;\n\n\twhile ((spec = next_option(spec, &vec, &val)) != NULL) {\n\t\tmult = ',';\n\t\tif ((val.ptr == NULL) || (sscanf(val.ptr, \"%lf%c\", &v, &mult) < 1)\n\t\t    || (v < 0) || ((lowercase(&mult) != 'k')\n\t\t                   && (lowercase(&mult) != 'm') && (mult != ','))) {\n\t\t\tcontinue;\n\t\t}\n\t\tv *= (lowercase(&mult) == 'k')\n\t\t         ? 1024\n\t\t         : ((lowercase(&mult) == 'm') ? 1048576 : 1);\n\t\tif (vec.len == 1 && vec.ptr[0] == '*') {\n\t\t\tthrottle = (int)v;\n\t\t} else if (parse_net(vec.ptr, &net, &mask) > 0) {\n\t\t\tif ((remote_ip & mask) == net) {\n\t\t\t\tthrottle = (int)v;\n\t\t\t}\n\t\t} else if (match_prefix(vec.ptr, vec.len, uri) > 0) {\n\t\t\tthrottle = (int)v;\n\t\t}\n\t}\n\n\treturn throttle;\n}\n\n\nstatic uint32_t\nget_remote_ip(const struct mg_connection *conn)\n{\n\tif (!conn) {\n\t\treturn 0;\n\t}\n\treturn ntohl(*(const uint32_t *)&conn->client.rsa.sin.sin_addr);\n}\n\n\n/* The mg_upload function is superseeded by mg_handle_form_request. */\n#include \"handle_form.inl\"\n\n\n#if defined(MG_LEGACY_INTERFACE)\n/* Implement the deprecated mg_upload function by calling the new\n * mg_handle_form_request function. While mg_upload could only handle\n * HTML forms sent as POST request in multipart/form-data format\n * containing only file input elements, mg_handle_form_request can\n * handle all form input elements and all standard request methods. */\nstruct mg_upload_user_data {\n\tstruct mg_connection *conn;\n\tconst char *destination_dir;\n\tint num_uploaded_files;\n};\n\n\n/* Helper function for deprecated mg_upload. */\nstatic int\nmg_upload_field_found(const char *key,\n                      const char *filename,\n                      char *path,\n                      size_t pathlen,\n                      void *user_data)\n{\n\tint truncated = 0;\n\tstruct mg_upload_user_data *fud = (struct mg_upload_user_data *)user_data;\n\t(void)key;\n\n\tif (!filename) {\n\t\tmg_cry(fud->conn, \"%s: No filename set\", __func__);\n\t\treturn FORM_FIELD_STORAGE_ABORT;\n\t}\n\tmg_snprintf(fud->conn,\n\t            &truncated,\n\t            path,\n\t            pathlen - 1,\n\t            \"%s/%s\",\n\t            fud->destination_dir,\n\t            filename);\n\tif (!truncated) {\n\t\tmg_cry(fud->conn, \"%s: File path too long\", __func__);\n\t\treturn FORM_FIELD_STORAGE_ABORT;\n\t}\n\treturn FORM_FIELD_STORAGE_STORE;\n}\n\n\n/* Helper function for deprecated mg_upload. */\nstatic int\nmg_upload_field_get(const char *key,\n                    const char *value,\n                    size_t value_size,\n                    void *user_data)\n{\n\t/* Function should never be called */\n\t(void)key;\n\t(void)value;\n\t(void)value_size;\n\t(void)user_data;\n\n\treturn 0;\n}\n\n\n/* Helper function for deprecated mg_upload. */\nstatic int\nmg_upload_field_stored(const char *path, long long file_size, void *user_data)\n{\n\tstruct mg_upload_user_data *fud = (struct mg_upload_user_data *)user_data;\n\t(void)file_size;\n\n\tfud->num_uploaded_files++;\n\tfud->conn->ctx->callbacks.upload(fud->conn, path);\n\n\treturn 0;\n}\n\n\n/* Deprecated function mg_upload - use mg_handle_form_request instead. */\nint\nmg_upload(struct mg_connection *conn, const char *destination_dir)\n{\n\tstruct mg_upload_user_data fud = {conn, destination_dir, 0};\n\tstruct mg_form_data_handler fdh = {mg_upload_field_found,\n\t                                   mg_upload_field_get,\n\t                                   mg_upload_field_stored,\n\t                                   0};\n\tint ret;\n\n\tfdh.user_data = (void *)&fud;\n\tret = mg_handle_form_request(conn, &fdh);\n\n\tif (ret < 0) {\n\t\tmg_cry(conn, \"%s: Error while parsing the request\", __func__);\n\t}\n\n\treturn fud.num_uploaded_files;\n}\n#endif\n\n\nstatic int\nget_first_ssl_listener_index(const struct mg_context *ctx)\n{\n\tunsigned int i;\n\tint idx = -1;\n\tif (ctx) {\n\t\tfor (i = 0; idx == -1 && i < ctx->num_listening_sockets; i++) {\n\t\t\tidx = ctx->listening_sockets[i].is_ssl ? ((int)(i)) : -1;\n\t\t}\n\t}\n\treturn idx;\n}\n\n\nstatic void\nredirect_to_https_port(struct mg_connection *conn, int ssl_index)\n{\n\tchar host[1025];\n\tconst char *host_header;\n\tsize_t hostlen;\n\n\thost_header = mg_get_header(conn, \"Host\");\n\thostlen = sizeof(host);\n\tif (host_header != NULL) {\n\t\tchar *pos;\n\n\t\tmg_strlcpy(host, host_header, hostlen);\n\t\thost[hostlen - 1] = '\\0';\n\t\tpos = strchr(host, ':');\n\t\tif (pos != NULL) {\n\t\t\t*pos = '\\0';\n\t\t}\n\t} else {\n\t\t/* Cannot get host from the Host: header.\n\t\t * Fallback to our IP address. */\n\t\tif (conn) {\n\t\t\tsockaddr_to_string(host, hostlen, &conn->client.lsa);\n\t\t}\n\t}\n\n\t/* Send host, port, uri and (if it exists) ?query_string */\n\tif (conn) {\n\t\tmg_printf(conn,\n\t\t          \"HTTP/1.1 302 Found\\r\\nLocation: https://%s:%d%s%s%s\\r\\n\\r\\n\",\n\t\t          host,\n#if defined(USE_IPV6)\n\t\t          (conn->ctx->listening_sockets[ssl_index].lsa.sa.sa_family\n\t\t           == AF_INET6)\n\t\t              ? (int)ntohs(conn->ctx->listening_sockets[ssl_index]\n\t\t                               .lsa.sin6.sin6_port)\n\t\t              :\n#endif\n\t\t              (int)ntohs(conn->ctx->listening_sockets[ssl_index]\n\t\t                             .lsa.sin.sin_port),\n\t\t          conn->request_info.local_uri,\n\t\t          (conn->request_info.query_string == NULL) ? \"\" : \"?\",\n\t\t          (conn->request_info.query_string == NULL)\n\t\t              ? \"\"\n\t\t              : conn->request_info.query_string);\n\t}\n}\n\n\nstatic void\nmg_set_handler_type(struct mg_context *ctx,\n                    const char *uri,\n                    int handler_type,\n                    int is_delete_request,\n                    mg_request_handler handler,\n                    struct mg_websocket_subprotocols *subprotocols,\n                    mg_websocket_connect_handler connect_handler,\n                    mg_websocket_ready_handler ready_handler,\n                    mg_websocket_data_handler data_handler,\n                    mg_websocket_close_handler close_handler,\n                    mg_authorization_handler auth_handler,\n                    void *cbdata)\n{\n\tstruct mg_handler_info *tmp_rh, **lastref;\n\tsize_t urilen = strlen(uri);\n\n\tif (handler_type == WEBSOCKET_HANDLER) {\n\t\t/* assert(handler == NULL); */\n\t\t/* assert(is_delete_request || connect_handler!=NULL ||\n\t\t *        ready_handler!=NULL || data_handler!=NULL ||\n\t\t *        close_handler!=NULL);\n\t\t */\n\t\t/* assert(auth_handler == NULL); */\n\t\tif (handler != NULL) {\n\t\t\treturn;\n\t\t}\n\t\tif (!is_delete_request && connect_handler == NULL\n\t\t    && ready_handler == NULL\n\t\t    && data_handler == NULL\n\t\t    && close_handler == NULL) {\n\t\t\treturn;\n\t\t}\n\t\tif (auth_handler != NULL) {\n\t\t\treturn;\n\t\t}\n\t} else if (handler_type == REQUEST_HANDLER) {\n\t\t/* assert(connect_handler==NULL && ready_handler==NULL &&\n\t\t *        data_handler==NULL && close_handler==NULL); */\n\t\t/* assert(is_delete_request || (handler!=NULL));\n\t\t */\n\t\t/* assert(auth_handler == NULL); */\n\t\tif (connect_handler != NULL || ready_handler != NULL\n\t\t    || data_handler != NULL\n\t\t    || close_handler != NULL) {\n\t\t\treturn;\n\t\t}\n\t\tif (!is_delete_request && (handler == NULL)) {\n\t\t\treturn;\n\t\t}\n\t\tif (auth_handler != NULL) {\n\t\t\treturn;\n\t\t}\n\t} else { /* AUTH_HANDLER */\n\t\t     /* assert(handler == NULL); */\n\t\t     /* assert(connect_handler==NULL && ready_handler==NULL &&\n\t\t      *        data_handler==NULL && close_handler==NULL); */\n\t\t/* assert(auth_handler != NULL); */\n\t\tif (handler != NULL) {\n\t\t\treturn;\n\t\t}\n\t\tif (connect_handler != NULL || ready_handler != NULL\n\t\t    || data_handler != NULL\n\t\t    || close_handler != NULL) {\n\t\t\treturn;\n\t\t}\n\t\tif (!is_delete_request && (auth_handler == NULL)) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (!ctx) {\n\t\treturn;\n\t}\n\n\tmg_lock_context(ctx);\n\n\t/* first try to find an existing handler */\n\tlastref = &(ctx->handlers);\n\tfor (tmp_rh = ctx->handlers; tmp_rh != NULL; tmp_rh = tmp_rh->next) {\n\t\tif (tmp_rh->handler_type == handler_type) {\n\t\t\tif (urilen == tmp_rh->uri_len && !strcmp(tmp_rh->uri, uri)) {\n\t\t\t\tif (!is_delete_request) {\n\t\t\t\t\t/* update existing handler */\n\t\t\t\t\tif (handler_type == REQUEST_HANDLER) {\n\t\t\t\t\t\ttmp_rh->handler = handler;\n\t\t\t\t\t} else if (handler_type == WEBSOCKET_HANDLER) {\n\t\t\t\t\t\ttmp_rh->subprotocols = subprotocols;\n\t\t\t\t\t\ttmp_rh->connect_handler = connect_handler;\n\t\t\t\t\t\ttmp_rh->ready_handler = ready_handler;\n\t\t\t\t\t\ttmp_rh->data_handler = data_handler;\n\t\t\t\t\t\ttmp_rh->close_handler = close_handler;\n\t\t\t\t\t} else { /* AUTH_HANDLER */\n\t\t\t\t\t\ttmp_rh->auth_handler = auth_handler;\n\t\t\t\t\t}\n\t\t\t\t\ttmp_rh->cbdata = cbdata;\n\t\t\t\t} else {\n\t\t\t\t\t/* remove existing handler */\n\t\t\t\t\t*lastref = tmp_rh->next;\n\t\t\t\t\tmg_free(tmp_rh->uri);\n\t\t\t\t\tmg_free(tmp_rh);\n\t\t\t\t}\n\t\t\t\tmg_unlock_context(ctx);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tlastref = &(tmp_rh->next);\n\t}\n\n\tif (is_delete_request) {\n\t\t/* no handler to set, this was a remove request to a non-existing\n\t\t * handler */\n\t\tmg_unlock_context(ctx);\n\t\treturn;\n\t}\n\n\ttmp_rh =\n\t    (struct mg_handler_info *)mg_calloc(sizeof(struct mg_handler_info), 1);\n\tif (tmp_rh == NULL) {\n\t\tmg_unlock_context(ctx);\n\t\tmg_cry(fc(ctx), \"%s\", \"Cannot create new request handler struct, OOM\");\n\t\treturn;\n\t}\n\ttmp_rh->uri = mg_strdup(uri);\n\tif (!tmp_rh->uri) {\n\t\tmg_unlock_context(ctx);\n\t\tmg_free(tmp_rh);\n\t\tmg_cry(fc(ctx), \"%s\", \"Cannot create new request handler struct, OOM\");\n\t\treturn;\n\t}\n\ttmp_rh->uri_len = urilen;\n\tif (handler_type == REQUEST_HANDLER) {\n\t\ttmp_rh->handler = handler;\n\t} else if (handler_type == WEBSOCKET_HANDLER) {\n\t\ttmp_rh->subprotocols = subprotocols;\n\t\ttmp_rh->connect_handler = connect_handler;\n\t\ttmp_rh->ready_handler = ready_handler;\n\t\ttmp_rh->data_handler = data_handler;\n\t\ttmp_rh->close_handler = close_handler;\n\t} else { /* AUTH_HANDLER */\n\t\ttmp_rh->auth_handler = auth_handler;\n\t}\n\ttmp_rh->cbdata = cbdata;\n\ttmp_rh->handler_type = handler_type;\n\ttmp_rh->next = NULL;\n\n\t*lastref = tmp_rh;\n\tmg_unlock_context(ctx);\n}\n\n\nvoid\nmg_set_request_handler(struct mg_context *ctx,\n                       const char *uri,\n                       mg_request_handler handler,\n                       void *cbdata)\n{\n\tmg_set_handler_type(ctx,\n\t                    uri,\n\t                    REQUEST_HANDLER,\n\t                    handler == NULL,\n\t                    handler,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    cbdata);\n}\n\n\nvoid\nmg_set_websocket_handler(struct mg_context *ctx,\n                         const char *uri,\n                         mg_websocket_connect_handler connect_handler,\n                         mg_websocket_ready_handler ready_handler,\n                         mg_websocket_data_handler data_handler,\n                         mg_websocket_close_handler close_handler,\n                         void *cbdata)\n{\n\tmg_set_websocket_handler_with_subprotocols(ctx,\n\t                                           uri,\n\t                                           NULL,\n\t                                           connect_handler,\n\t                                           ready_handler,\n\t                                           data_handler,\n\t                                           close_handler,\n\t                                           cbdata);\n}\n\n\nvoid\nmg_set_websocket_handler_with_subprotocols(\n    struct mg_context *ctx,\n    const char *uri,\n    struct mg_websocket_subprotocols *subprotocols,\n    mg_websocket_connect_handler connect_handler,\n    mg_websocket_ready_handler ready_handler,\n    mg_websocket_data_handler data_handler,\n    mg_websocket_close_handler close_handler,\n    void *cbdata)\n{\n\tint is_delete_request = (connect_handler == NULL) && (ready_handler == NULL)\n\t                        && (data_handler == NULL)\n\t                        && (close_handler == NULL);\n\tmg_set_handler_type(ctx,\n\t                    uri,\n\t                    WEBSOCKET_HANDLER,\n\t                    is_delete_request,\n\t                    NULL,\n\t                    subprotocols,\n\t                    connect_handler,\n\t                    ready_handler,\n\t                    data_handler,\n\t                    close_handler,\n\t                    NULL,\n\t                    cbdata);\n}\n\n\nvoid\nmg_set_auth_handler(struct mg_context *ctx,\n                    const char *uri,\n                    mg_request_handler handler,\n                    void *cbdata)\n{\n\tmg_set_handler_type(ctx,\n\t                    uri,\n\t                    AUTH_HANDLER,\n\t                    handler == NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    handler,\n\t                    cbdata);\n}\n\n\nstatic int\nget_request_handler(struct mg_connection *conn,\n                    int handler_type,\n                    mg_request_handler *handler,\n                    struct mg_websocket_subprotocols **subprotocols,\n                    mg_websocket_connect_handler *connect_handler,\n                    mg_websocket_ready_handler *ready_handler,\n                    mg_websocket_data_handler *data_handler,\n                    mg_websocket_close_handler *close_handler,\n                    mg_authorization_handler *auth_handler,\n                    void **cbdata)\n{\n\tconst struct mg_request_info *request_info = mg_get_request_info(conn);\n\tif (request_info) {\n\t\tconst char *uri = request_info->local_uri;\n\t\tsize_t urilen = strlen(uri);\n\t\tstruct mg_handler_info *tmp_rh;\n\n\t\tif (!conn || !conn->ctx) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tmg_lock_context(conn->ctx);\n\n\t\t/* first try for an exact match */\n\t\tfor (tmp_rh = conn->ctx->handlers; tmp_rh != NULL;\n\t\t     tmp_rh = tmp_rh->next) {\n\t\t\tif (tmp_rh->handler_type == handler_type) {\n\t\t\t\tif (urilen == tmp_rh->uri_len && !strcmp(tmp_rh->uri, uri)) {\n\t\t\t\t\tif (handler_type == WEBSOCKET_HANDLER) {\n\t\t\t\t\t\t*subprotocols = tmp_rh->subprotocols;\n\t\t\t\t\t\t*connect_handler = tmp_rh->connect_handler;\n\t\t\t\t\t\t*ready_handler = tmp_rh->ready_handler;\n\t\t\t\t\t\t*data_handler = tmp_rh->data_handler;\n\t\t\t\t\t\t*close_handler = tmp_rh->close_handler;\n\t\t\t\t\t} else if (handler_type == REQUEST_HANDLER) {\n\t\t\t\t\t\t*handler = tmp_rh->handler;\n\t\t\t\t\t} else { /* AUTH_HANDLER */\n\t\t\t\t\t\t*auth_handler = tmp_rh->auth_handler;\n\t\t\t\t\t}\n\t\t\t\t\t*cbdata = tmp_rh->cbdata;\n\t\t\t\t\tmg_unlock_context(conn->ctx);\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* next try for a partial match, we will accept uri/something */\n\t\tfor (tmp_rh = conn->ctx->handlers; tmp_rh != NULL;\n\t\t     tmp_rh = tmp_rh->next) {\n\t\t\tif (tmp_rh->handler_type == handler_type) {\n\t\t\t\tif (tmp_rh->uri_len < urilen && uri[tmp_rh->uri_len] == '/'\n\t\t\t\t    && memcmp(tmp_rh->uri, uri, tmp_rh->uri_len) == 0) {\n\t\t\t\t\tif (handler_type == WEBSOCKET_HANDLER) {\n\t\t\t\t\t\t*subprotocols = tmp_rh->subprotocols;\n\t\t\t\t\t\t*connect_handler = tmp_rh->connect_handler;\n\t\t\t\t\t\t*ready_handler = tmp_rh->ready_handler;\n\t\t\t\t\t\t*data_handler = tmp_rh->data_handler;\n\t\t\t\t\t\t*close_handler = tmp_rh->close_handler;\n\t\t\t\t\t} else if (handler_type == REQUEST_HANDLER) {\n\t\t\t\t\t\t*handler = tmp_rh->handler;\n\t\t\t\t\t} else { /* AUTH_HANDLER */\n\t\t\t\t\t\t*auth_handler = tmp_rh->auth_handler;\n\t\t\t\t\t}\n\t\t\t\t\t*cbdata = tmp_rh->cbdata;\n\t\t\t\t\tmg_unlock_context(conn->ctx);\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* finally try for pattern match */\n\t\tfor (tmp_rh = conn->ctx->handlers; tmp_rh != NULL;\n\t\t     tmp_rh = tmp_rh->next) {\n\t\t\tif (tmp_rh->handler_type == handler_type) {\n\t\t\t\tif (match_prefix(tmp_rh->uri, tmp_rh->uri_len, uri) > 0) {\n\t\t\t\t\tif (handler_type == WEBSOCKET_HANDLER) {\n\t\t\t\t\t\t*subprotocols = tmp_rh->subprotocols;\n\t\t\t\t\t\t*connect_handler = tmp_rh->connect_handler;\n\t\t\t\t\t\t*ready_handler = tmp_rh->ready_handler;\n\t\t\t\t\t\t*data_handler = tmp_rh->data_handler;\n\t\t\t\t\t\t*close_handler = tmp_rh->close_handler;\n\t\t\t\t\t} else if (handler_type == REQUEST_HANDLER) {\n\t\t\t\t\t\t*handler = tmp_rh->handler;\n\t\t\t\t\t} else { /* AUTH_HANDLER */\n\t\t\t\t\t\t*auth_handler = tmp_rh->auth_handler;\n\t\t\t\t\t}\n\t\t\t\t\t*cbdata = tmp_rh->cbdata;\n\t\t\t\t\tmg_unlock_context(conn->ctx);\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmg_unlock_context(conn->ctx);\n\t}\n\treturn 0; /* none found */\n}\n\n\n#if defined(USE_WEBSOCKET) && defined(MG_LEGACY_INTERFACE)\nstatic int\ndeprecated_websocket_connect_wrapper(const struct mg_connection *conn,\n                                     void *cbdata)\n{\n\tstruct mg_callbacks *pcallbacks = (struct mg_callbacks *)cbdata;\n\tif (pcallbacks->websocket_connect) {\n\t\treturn pcallbacks->websocket_connect(conn);\n\t}\n\t/* No handler set - assume \"OK\" */\n\treturn 0;\n}\n\n\nstatic void\ndeprecated_websocket_ready_wrapper(struct mg_connection *conn, void *cbdata)\n{\n\tstruct mg_callbacks *pcallbacks = (struct mg_callbacks *)cbdata;\n\tif (pcallbacks->websocket_ready) {\n\t\tpcallbacks->websocket_ready(conn);\n\t}\n}\n\n\nstatic int\ndeprecated_websocket_data_wrapper(struct mg_connection *conn,\n                                  int bits,\n                                  char *data,\n                                  size_t len,\n                                  void *cbdata)\n{\n\tstruct mg_callbacks *pcallbacks = (struct mg_callbacks *)cbdata;\n\tif (pcallbacks->websocket_data) {\n\t\treturn pcallbacks->websocket_data(conn, bits, data, len);\n\t}\n\t/* No handler set - assume \"OK\" */\n\treturn 1;\n}\n#endif\n\n\n/* This is the heart of the Civetweb's logic.\n * This function is called when the request is read, parsed and validated,\n * and Civetweb must decide what action to take: serve a file, or\n * a directory, or call embedded function, etcetera. */\nstatic void\nhandle_request(struct mg_connection *conn)\n{\n\tif (conn) {\n\t\tstruct mg_request_info *ri = &conn->request_info;\n\t\tchar path[PATH_MAX];\n\t\tint uri_len, ssl_index;\n\t\tint is_found = 0, is_script_resource = 0, is_websocket_request = 0,\n\t\t    is_put_or_delete_request = 0, is_callback_resource = 0;\n\t\tint i;\n\t\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\t\tmg_request_handler callback_handler = NULL;\n\t\tstruct mg_websocket_subprotocols *subprotocols;\n\t\tmg_websocket_connect_handler ws_connect_handler = NULL;\n\t\tmg_websocket_ready_handler ws_ready_handler = NULL;\n\t\tmg_websocket_data_handler ws_data_handler = NULL;\n\t\tmg_websocket_close_handler ws_close_handler = NULL;\n\t\tvoid *callback_data = NULL;\n\t\tmg_authorization_handler auth_handler = NULL;\n\t\tvoid *auth_callback_data = NULL;\n#if !defined(NO_FILES)\n\t\ttime_t curtime = time(NULL);\n\t\tchar date[64];\n#endif\n\n\t\tpath[0] = 0;\n\n\t\tif (!ri) {\n\t\t\treturn;\n\t\t}\n\n\t\t/* 1. get the request url */\n\t\t/* 1.1. split into url and query string */\n\t\tif ((conn->request_info.query_string = strchr(ri->request_uri, '?'))\n\t\t    != NULL) {\n\t\t\t*((char *)conn->request_info.query_string++) = '\\0';\n\t\t}\n\n\t\t/* 1.2. do a https redirect, if required. Do not decode URIs yet. */\n\t\tif (!conn->client.is_ssl && conn->client.ssl_redir) {\n\t\t\tssl_index = get_first_ssl_listener_index(conn->ctx);\n\t\t\tif (ssl_index >= 0) {\n\t\t\t\tredirect_to_https_port(conn, ssl_index);\n\t\t\t} else {\n\t\t\t\t/* A http to https forward port has been specified,\n\t\t\t\t * but no https port to forward to. */\n\t\t\t\tsend_http_error(conn,\n\t\t\t\t                503,\n\t\t\t\t                \"%s\",\n\t\t\t\t                \"Error: SSL forward not configured properly\");\n\t\t\t\tmg_cry(conn, \"Can not redirect to SSL, no SSL port available\");\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\turi_len = (int)strlen(ri->local_uri);\n\n\t\t/* 1.3. decode url (if config says so) */\n\t\tif (should_decode_url(conn)) {\n\t\t\tmg_url_decode(\n\t\t\t    ri->local_uri, uri_len, (char *)ri->local_uri, uri_len + 1, 0);\n\t\t}\n\n\t\t/* 1.4. clean URIs, so a path like allowed_dir/../forbidden_file is\n\t\t * not possible */\n\t\tremove_double_dots_and_double_slashes((char *)ri->local_uri);\n\n\t\t/* step 1. completed, the url is known now */\n\t\turi_len = (int)strlen(ri->local_uri);\n\t\tDEBUG_TRACE(\"URL: %s\", ri->local_uri);\n\n\t\t/* 3. if this ip has limited speed, set it for this connection */\n\t\tconn->throttle = set_throttle(conn->ctx->config[THROTTLE],\n\t\t                              get_remote_ip(conn),\n\t\t                              ri->local_uri);\n\n\t\t/* 4. call a \"handle everything\" callback, if registered */\n\t\tif (conn->ctx->callbacks.begin_request != NULL) {\n\t\t\t/* Note that since V1.7 the \"begin_request\" function is called\n\t\t\t * before an authorization check. If an authorization check is\n\t\t\t * required, use a request_handler instead. */\n\t\t\ti = conn->ctx->callbacks.begin_request(conn);\n\t\t\tif (i > 0) {\n\t\t\t\t/* callback already processed the request. Store the\n\t\t\t\t   return value as a status code for the access log. */\n\t\t\t\tconn->status_code = i;\n\t\t\t\tdiscard_unread_request_data(conn);\n\t\t\t\treturn;\n\t\t\t} else if (i == 0) {\n\t\t\t\t/* civetweb should process the request */\n\t\t\t} else {\n\t\t\t\t/* unspecified - may change with the next version */\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t/* request not yet handled by a handler or redirect, so the request\n\t\t * is processed here */\n\n\t\t/* 5. interpret the url to find out how the request must be handled\n\t\t */\n\t\t/* 5.1. first test, if the request targets the regular http(s)://\n\t\t * protocol namespace or the websocket ws(s):// protocol namespace.\n\t\t */\n\t\tis_websocket_request = is_websocket_protocol(conn);\n\n\t\t/* 5.2. check if the request will be handled by a callback */\n\t\tif (get_request_handler(conn,\n\t\t                        is_websocket_request ? WEBSOCKET_HANDLER\n\t\t                                             : REQUEST_HANDLER,\n\t\t                        &callback_handler,\n\t\t                        &subprotocols,\n\t\t                        &ws_connect_handler,\n\t\t                        &ws_ready_handler,\n\t\t                        &ws_data_handler,\n\t\t                        &ws_close_handler,\n\t\t                        NULL,\n\t\t                        &callback_data)) {\n\t\t\t/* 5.2.1. A callback will handle this request. All requests\n\t\t\t * handled\n\t\t\t * by a callback have to be considered as requests to a script\n\t\t\t * resource. */\n\t\t\tis_callback_resource = 1;\n\t\t\tis_script_resource = 1;\n\t\t\tis_put_or_delete_request = is_put_or_delete_method(conn);\n\t\t} else {\n\t\tno_callback_resource:\n\t\t\t/* 5.2.2. No callback is responsible for this request. The URI\n\t\t\t * addresses a file based resource (static content or Lua/cgi\n\t\t\t * scripts in the file system). */\n\t\t\tis_callback_resource = 0;\n\t\t\tinterpret_uri(conn,\n\t\t\t              path,\n\t\t\t              sizeof(path),\n\t\t\t              &file.stat,\n\t\t\t              &is_found,\n\t\t\t              &is_script_resource,\n\t\t\t              &is_websocket_request,\n\t\t\t              &is_put_or_delete_request);\n\t\t}\n\n\t\t/* 6. authorization check */\n\t\t/* 6.1. a custom authorization handler is installed */\n\t\tif (get_request_handler(conn,\n\t\t                        AUTH_HANDLER,\n\t\t                        NULL,\n\t\t                        NULL,\n\t\t                        NULL,\n\t\t                        NULL,\n\t\t                        NULL,\n\t\t                        NULL,\n\t\t                        &auth_handler,\n\t\t                        &auth_callback_data)) {\n\t\t\tif (!auth_handler(conn, auth_callback_data)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (is_put_or_delete_request && !is_script_resource\n\t\t           && !is_callback_resource) {\n/* 6.2. this request is a PUT/DELETE to a real file */\n/* 6.2.1. thus, the server must have real files */\n#if defined(NO_FILES)\n\t\t\tif (1) {\n#else\n\t\t\tif (conn->ctx->config[DOCUMENT_ROOT] == NULL) {\n#endif\n\t\t\t\t/* This server does not have any real files, thus the\n\t\t\t\t * PUT/DELETE methods are not valid. */\n\t\t\t\tsend_http_error(conn,\n\t\t\t\t                405,\n\t\t\t\t                \"%s method not allowed\",\n\t\t\t\t                conn->request_info.request_method);\n\t\t\t\treturn;\n\t\t\t}\n\n#if !defined(NO_FILES)\n\t\t\t/* 6.2.2. Check if put authorization for static files is\n\t\t\t * available.\n\t\t\t */\n\t\t\tif (!is_authorized_for_put(conn)) {\n\t\t\t\tsend_authorization_request(conn);\n\t\t\t\treturn;\n\t\t\t}\n#endif\n\n\t\t} else {\n\t\t\t/* 6.3. This is either a OPTIONS, GET, HEAD or POST request,\n\t\t\t * or it is a PUT or DELETE request to a resource that does not\n\t\t\t * correspond to a file. Check authorization. */\n\t\t\tif (!check_authorization(conn, path)) {\n\t\t\t\tsend_authorization_request(conn);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t/* request is authorized or does not need authorization */\n\n\t\t/* 7. check if there are request handlers for this uri */\n\t\tif (is_callback_resource) {\n\t\t\tif (!is_websocket_request) {\n\t\t\t\ti = callback_handler(conn, callback_data);\n\t\t\t\tif (i > 0) {\n\t\t\t\t\t/* Do nothing, callback has served the request. Store\n\t\t\t\t\t * the\n\t\t\t\t\t * return value as status code for the log and discard\n\t\t\t\t\t * all\n\t\t\t\t\t * data from the client not used by the callback. */\n\t\t\t\t\tconn->status_code = i;\n\t\t\t\t\tdiscard_unread_request_data(conn);\n\t\t\t\t} else {\n\t\t\t\t\t/* TODO (high): what if the handler did NOT handle the\n\t\t\t\t\t * request */\n\t\t\t\t\t/* The last version did handle this as a file request,\n\t\t\t\t\t * but\n\t\t\t\t\t * since a file request is not always a script resource,\n\t\t\t\t\t * the authorization check might be different */\n\t\t\t\t\tinterpret_uri(conn,\n\t\t\t\t\t              path,\n\t\t\t\t\t              sizeof(path),\n\t\t\t\t\t              &file.stat,\n\t\t\t\t\t              &is_found,\n\t\t\t\t\t              &is_script_resource,\n\t\t\t\t\t              &is_websocket_request,\n\t\t\t\t\t              &is_put_or_delete_request);\n\t\t\t\t\tcallback_handler = NULL;\n\n\t\t\t\t\t/* TODO (very low): goto is deprecated but for the\n\t\t\t\t\t * moment,\n\t\t\t\t\t * a goto is simpler than some curious loop. */\n\t\t\t\t\t/* The situation \"callback does not handle the request\"\n\t\t\t\t\t * needs to be reconsidered anyway. */\n\t\t\t\t\tgoto no_callback_resource;\n\t\t\t\t}\n\t\t\t} else {\n#if defined(USE_WEBSOCKET)\n\t\t\t\thandle_websocket_request(conn,\n\t\t\t\t                         path,\n\t\t\t\t                         is_callback_resource,\n\t\t\t\t                         subprotocols,\n\t\t\t\t                         ws_connect_handler,\n\t\t\t\t                         ws_ready_handler,\n\t\t\t\t                         ws_data_handler,\n\t\t\t\t                         ws_close_handler,\n\t\t\t\t                         callback_data);\n#endif\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n/* 8. handle websocket requests */\n#if defined(USE_WEBSOCKET)\n\t\tif (is_websocket_request) {\n\t\t\tif (is_script_resource) {\n\t\t\t\t/* Websocket Lua script */\n\t\t\t\thandle_websocket_request(conn,\n\t\t\t\t                         path,\n\t\t\t\t                         0 /* Lua Script */,\n\t\t\t\t                         NULL,\n\t\t\t\t                         NULL,\n\t\t\t\t                         NULL,\n\t\t\t\t                         NULL,\n\t\t\t\t                         NULL,\n\t\t\t\t                         &conn->ctx->callbacks);\n\t\t\t} else {\n#if defined(MG_LEGACY_INTERFACE)\n\t\t\t\thandle_websocket_request(\n\t\t\t\t    conn,\n\t\t\t\t    path,\n\t\t\t\t    !is_script_resource /* could be deprecated global callback */,\n\t\t\t\t    NULL,\n\t\t\t\t    deprecated_websocket_connect_wrapper,\n\t\t\t\t    deprecated_websocket_ready_wrapper,\n\t\t\t\t    deprecated_websocket_data_wrapper,\n\t\t\t\t    NULL,\n\t\t\t\t    &conn->ctx->callbacks);\n#else\n\t\t\t\tsend_http_error(conn, 404, \"%s\", \"Not found\");\n#endif\n\t\t\t}\n\t\t\treturn;\n\t\t} else\n#endif\n\n#if defined(NO_FILES)\n\t\t\t/* 9a. In case the server uses only callbacks, this uri is\n\t\t\t * unknown.\n\t\t\t * Then, all request handling ends here. */\n\t\t\tsend_http_error(conn, 404, \"%s\", \"Not Found\");\n\n#else\n\t\t/* 9b. This request is either for a static file or resource handled\n\t\t * by a script file. Thus, a DOCUMENT_ROOT must exist. */\n\t\tif (conn->ctx->config[DOCUMENT_ROOT] == NULL) {\n\t\t\tsend_http_error(conn, 404, \"%s\", \"Not Found\");\n\t\t\treturn;\n\t\t}\n\n\t\t/* 10. File is handled by a script. */\n\t\tif (is_script_resource) {\n\t\t\thandle_file_based_request(conn, path, &file);\n\t\t\treturn;\n\t\t}\n\n\t\t/* 11. Handle put/delete/mkcol requests */\n\t\tif (is_put_or_delete_request) {\n\t\t\t/* 11.1. PUT method */\n\t\t\tif (!strcmp(ri->request_method, \"PUT\")) {\n\t\t\t\tput_file(conn, path);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t/* 11.2. DELETE method */\n\t\t\tif (!strcmp(ri->request_method, \"DELETE\")) {\n\t\t\t\tdelete_file(conn, path);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t/* 11.3. MKCOL method */\n\t\t\tif (!strcmp(ri->request_method, \"MKCOL\")) {\n\t\t\t\tmkcol(conn, path);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t/* 11.4. PATCH method\n\t\t\t * This method is not supported for static resources,\n\t\t\t * only for scripts (Lua, CGI) and callbacks. */\n\t\t\tsend_http_error(conn,\n\t\t\t                405,\n\t\t\t                \"%s method not allowed\",\n\t\t\t                conn->request_info.request_method);\n\t\t\treturn;\n\t\t}\n\n\t\t/* 11. File does not exist, or it was configured that it should be\n\t\t * hidden */\n\t\tif (!is_found || (must_hide_file(conn, path))) {\n\t\t\tsend_http_error(conn, 404, \"%s\", \"Not found\");\n\t\t\treturn;\n\t\t}\n\n\t\t/* 12. Directory uris should end with a slash */\n\t\tif (file.stat.is_directory && (uri_len > 0)\n\t\t    && (ri->local_uri[uri_len - 1] != '/')) {\n\t\t\tgmt_time_string(date, sizeof(date), &curtime);\n\t\t\tmg_printf(conn,\n\t\t\t          \"HTTP/1.1 301 Moved Permanently\\r\\n\"\n\t\t\t          \"Location: %s/\\r\\n\"\n\t\t\t          \"Date: %s\\r\\n\"\n\t\t\t          /* \"Cache-Control: private\\r\\n\" (= default) */\n\t\t\t          \"Content-Length: 0\\r\\n\"\n\t\t\t          \"Connection: %s\\r\\n\\r\\n\",\n\t\t\t          ri->request_uri,\n\t\t\t          date,\n\t\t\t          suggest_connection_header(conn));\n\t\t\treturn;\n\t\t}\n\n\t\t/* 13. Handle other methods than GET/HEAD */\n\t\t/* 13.1. Handle PROPFIND */\n\t\tif (!strcmp(ri->request_method, \"PROPFIND\")) {\n\t\t\thandle_propfind(conn, path, &file.stat);\n\t\t\treturn;\n\t\t}\n\t\t/* 13.2. Handle OPTIONS for files */\n\t\tif (!strcmp(ri->request_method, \"OPTIONS\")) {\n\t\t\t/* This standard handler is only used for real files.\n\t\t\t * Scripts should support the OPTIONS method themselves, to allow a\n\t\t\t * maximum flexibility.\n\t\t\t * Lua and CGI scripts may fully support CORS this way (including\n\t\t\t * preflights). */\n\t\t\tsend_options(conn);\n\t\t\treturn;\n\t\t}\n\t\t/* 13.3. everything but GET and HEAD (e.g. POST) */\n\t\tif (0 != strcmp(ri->request_method, \"GET\")\n\t\t    && 0 != strcmp(ri->request_method, \"HEAD\")) {\n\t\t\tsend_http_error(conn,\n\t\t\t                405,\n\t\t\t                \"%s method not allowed\",\n\t\t\t                conn->request_info.request_method);\n\t\t\treturn;\n\t\t}\n\n\t\t/* 14. directories */\n\t\tif (file.stat.is_directory) {\n\t\t\tif (substitute_index_file(conn, path, sizeof(path), &file)) {\n\t\t\t\t/* 14.1. use a substitute file */\n\t\t\t\t/* TODO (high): substitute index may be a script resource.\n\t\t\t\t * define what should be possible in this case. */\n\t\t\t} else {\n\t\t\t\t/* 14.2. no substitute file */\n\t\t\t\tif (!mg_strcasecmp(conn->ctx->config[ENABLE_DIRECTORY_LISTING],\n\t\t\t\t                   \"yes\")) {\n\t\t\t\t\thandle_directory_request(conn, path);\n\t\t\t\t} else {\n\t\t\t\t\tsend_http_error(conn,\n\t\t\t\t\t                403,\n\t\t\t\t\t                \"%s\",\n\t\t\t\t\t                \"Error: Directory listing denied\");\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\thandle_file_based_request(conn, path, &file);\n#endif /* !defined(NO_FILES) */\n\n#if 0\n            /* Perform redirect and auth checks before calling begin_request()\n             * handler.\n             * Otherwise, begin_request() would need to perform auth checks and\n             * redirects. */\n#endif\n\t}\n\treturn;\n}\n\n\nstatic void\nhandle_file_based_request(struct mg_connection *conn,\n                          const char *path,\n                          struct mg_file *file)\n{\n\tif (!conn || !conn->ctx) {\n\t\treturn;\n\t}\n\n\tif (0) {\n#ifdef USE_LUA\n\t} else if (match_prefix(conn->ctx->config[LUA_SERVER_PAGE_EXTENSIONS],\n\t                        strlen(\n\t                            conn->ctx->config[LUA_SERVER_PAGE_EXTENSIONS]),\n\t                        path) > 0) {\n\t\t/* Lua server page: an SSI like page containing mostly plain html\n\t\t * code\n\t\t * plus some tags with server generated contents. */\n\t\thandle_lsp_request(conn, path, file, NULL);\n\t} else if (match_prefix(conn->ctx->config[LUA_SCRIPT_EXTENSIONS],\n\t                        strlen(conn->ctx->config[LUA_SCRIPT_EXTENSIONS]),\n\t                        path) > 0) {\n\t\t/* Lua in-server module script: a CGI like script used to generate\n\t\t * the\n\t\t * entire reply. */\n\t\tmg_exec_lua_script(conn, path, NULL);\n#endif\n#if defined(USE_DUKTAPE)\n\t} else if (match_prefix(conn->ctx->config[DUKTAPE_SCRIPT_EXTENSIONS],\n\t                        strlen(\n\t                            conn->ctx->config[DUKTAPE_SCRIPT_EXTENSIONS]),\n\t                        path) > 0) {\n\t\t/* Call duktape to generate the page */\n\t\tmg_exec_duktape_script(conn, path);\n#endif\n#if !defined(NO_CGI)\n\t} else if (match_prefix(conn->ctx->config[CGI_EXTENSIONS],\n\t                        strlen(conn->ctx->config[CGI_EXTENSIONS]),\n\t                        path) > 0) {\n\t\t/* CGI scripts may support all HTTP methods */\n\t\thandle_cgi_request(conn, path);\n#endif /* !NO_CGI */\n\t} else if (match_prefix(conn->ctx->config[SSI_EXTENSIONS],\n\t                        strlen(conn->ctx->config[SSI_EXTENSIONS]),\n\t                        path) > 0) {\n\t\thandle_ssi_file_request(conn, path, file);\n#if !defined(NO_CACHING)\n\t} else if ((!conn->in_error_handler)\n\t           && is_not_modified(conn, &file->stat)) {\n\t\t/* Send 304 \"Not Modified\" - this must not send any body data */\n\t\thandle_not_modified_static_file_request(conn, file);\n#endif /* !NO_CACHING */\n\t} else {\n\t\thandle_static_file_request(conn, path, file, NULL, NULL);\n\t}\n}\n\n\nstatic void\nclose_all_listening_sockets(struct mg_context *ctx)\n{\n\tunsigned int i;\n\tif (!ctx) {\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < ctx->num_listening_sockets; i++) {\n\t\tclosesocket(ctx->listening_sockets[i].sock);\n\t\tctx->listening_sockets[i].sock = INVALID_SOCKET;\n\t}\n\tmg_free(ctx->listening_sockets);\n\tctx->listening_sockets = NULL;\n\tmg_free(ctx->listening_socket_fds);\n\tctx->listening_socket_fds = NULL;\n}\n\n\n/* Valid listening port specification is: [ip_address:]port[s]\n * Examples for IPv4: 80, 443s, 127.0.0.1:3128, 192.0.2.3:8080s\n * Examples for IPv6: [::]:80, [::1]:80,\n *   [2001:0db8:7654:3210:FEDC:BA98:7654:3210]:443s\n *   see https://tools.ietf.org/html/rfc3513#section-2.2\n * In order to bind to both, IPv4 and IPv6, you can either add\n * both ports using 8080,[::]:8080, or the short form +8080.\n * Both forms differ in detail: 8080,[::]:8080 create two sockets,\n * one only accepting IPv4 the other only IPv6. +8080 creates\n * one socket accepting IPv4 and IPv6. Depending on the IPv6\n * environment, they might work differently, or might not work\n * at all - it must be tested what options work best in the\n * relevant network environment.\n */\nstatic int\nparse_port_string(const struct vec *vec, struct socket *so, int *ip_version)\n{\n\tunsigned int a, b, c, d, port;\n\tint ch, len;\n#if defined(USE_IPV6)\n\tchar buf[100] = {0};\n#endif\n\n\t/* MacOS needs that. If we do not zero it, subsequent bind() will fail.\n\t * Also, all-zeroes in the socket address means binding to all addresses\n\t * for both IPv4 and IPv6 (INADDR_ANY and IN6ADDR_ANY_INIT). */\n\tmemset(so, 0, sizeof(*so));\n\tso->lsa.sin.sin_family = AF_INET;\n\t*ip_version = 0;\n\n\tif (sscanf(vec->ptr, \"%u.%u.%u.%u:%u%n\", &a, &b, &c, &d, &port, &len)\n\t    == 5) {\n\t\t/* Bind to a specific IPv4 address, e.g. 192.168.1.5:8080 */\n\t\tso->lsa.sin.sin_addr.s_addr =\n\t\t    htonl((a << 24) | (b << 16) | (c << 8) | d);\n\t\tso->lsa.sin.sin_port = htons((uint16_t)port);\n\t\t*ip_version = 4;\n\n#if defined(USE_IPV6)\n\t} else if (sscanf(vec->ptr, \"[%49[^]]]:%u%n\", buf, &port, &len) == 2\n\t           && mg_inet_pton(\n\t                  AF_INET6, buf, &so->lsa.sin6, sizeof(so->lsa.sin6))) {\n\t\t/* IPv6 address, examples: see above */\n\t\t/* so->lsa.sin6.sin6_family = AF_INET6; already set by mg_inet_pton\n\t\t */\n\t\tso->lsa.sin6.sin6_port = htons((uint16_t)port);\n\t\t*ip_version = 6;\n#endif\n\n\t} else if ((vec->ptr[0] == '+')\n\t           && (sscanf(vec->ptr + 1, \"%u%n\", &port, &len) == 1)) {\n\n\t\t/* Port is specified with a +, bind to IPv6 and IPv4, INADDR_ANY */\n\t\t/* Add 1 to len for the + character we skipped before */\n\t\tlen++;\n\n#if defined(USE_IPV6)\n\t\t/* Set socket family to IPv6, do not use IPV6_V6ONLY */\n\t\tso->lsa.sin6.sin6_family = AF_INET6;\n\t\tso->lsa.sin6.sin6_port = htons((uint16_t)port);\n\t\t*ip_version = 4 + 6;\n#else\n\t\t/* Bind to IPv4 only, since IPv6 is not built in. */\n\t\tso->lsa.sin.sin_port = htons((uint16_t)port);\n\t\t*ip_version = 4;\n#endif\n\n\t} else if (sscanf(vec->ptr, \"%u%n\", &port, &len) == 1) {\n\t\t/* If only port is specified, bind to IPv4, INADDR_ANY */\n\t\tso->lsa.sin.sin_port = htons((uint16_t)port);\n\t\t*ip_version = 4;\n\n\t} else {\n\t\t/* Parsing failure. Make port invalid. */\n\t\tport = 0;\n\t\tlen = 0;\n\t}\n\n\t/* sscanf and the option splitting code ensure the following condition\n\t */\n\tif ((len < 0) && ((unsigned)len > (unsigned)vec->len)) {\n\t\t*ip_version = 0;\n\t\treturn 0;\n\t}\n\tch = vec->ptr[len]; /* Next character after the port number */\n\tso->is_ssl = (ch == 's');\n\tso->ssl_redir = (ch == 'r');\n\n\t/* Make sure the port is valid and vector ends with 's', 'r' or ',' */\n\tif (is_valid_port(port)\n\t    && (ch == '\\0' || ch == 's' || ch == 'r' || ch == ',')) {\n\t\treturn 1;\n\t}\n\n\t/* Reset ip_version to 0 of there is an error */\n\t*ip_version = 0;\n\treturn 0;\n}\n\n\nstatic int\nset_ports_option(struct mg_context *ctx)\n{\n\tconst char *list;\n\tint on = 1;\n#if defined(USE_IPV6)\n\tint off = 0;\n#endif\n\tstruct vec vec;\n\tstruct socket so, *ptr;\n\n\tstruct pollfd *pfd;\n\tunion usa usa;\n\tsocklen_t len;\n\tint ip_version;\n\n\tint portsTotal = 0;\n\tint portsOk = 0;\n\n\tif (!ctx) {\n\t\treturn 0;\n\t}\n\n\tmemset(&so, 0, sizeof(so));\n\tmemset(&usa, 0, sizeof(usa));\n\tlen = sizeof(usa);\n\tlist = ctx->config[LISTENING_PORTS];\n\n\twhile ((list = next_option(list, &vec, NULL)) != NULL) {\n\n\t\tportsTotal++;\n\n\t\tif (!parse_port_string(&vec, &so, &ip_version)) {\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"%.*s: invalid port spec (entry %i). Expecting list of: %s\",\n\t\t\t       (int)vec.len,\n\t\t\t       vec.ptr,\n\t\t\t       portsTotal,\n\t\t\t       \"[IP_ADDRESS:]PORT[s|r]\");\n\t\t\tcontinue;\n\t\t}\n\n#if !defined(NO_SSL)\n\t\tif (so.is_ssl && ctx->ssl_ctx == NULL) {\n\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"Cannot add SSL socket (entry %i). Is -ssl_certificate \"\n\t\t\t       \"option set?\",\n\t\t\t       portsTotal);\n\t\t\tcontinue;\n\t\t}\n#endif\n\n\t\tif ((so.sock = socket(so.lsa.sa.sa_family, SOCK_STREAM, 6))\n\t\t    == INVALID_SOCKET) {\n\n\t\t\tmg_cry(fc(ctx), \"cannot create socket (entry %i)\", portsTotal);\n\t\t\tcontinue;\n\t\t}\n\n#ifdef _WIN32\n\t\t/* Windows SO_REUSEADDR lets many procs binds to a\n\t\t * socket, SO_EXCLUSIVEADDRUSE makes the bind fail\n\t\t * if someone already has the socket -- DTL */\n\t\t/* NOTE: If SO_EXCLUSIVEADDRUSE is used,\n\t\t * Windows might need a few seconds before\n\t\t * the same port can be used again in the\n\t\t * same process, so a short Sleep may be\n\t\t * required between mg_stop and mg_start.\n\t\t */\n\t\tif (setsockopt(so.sock,\n\t\t               SOL_SOCKET,\n\t\t               SO_EXCLUSIVEADDRUSE,\n\t\t               (SOCK_OPT_TYPE)&on,\n\t\t               sizeof(on)) != 0) {\n\n\t\t\t/* Set reuse option, but don't abort on errors. */\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"cannot set socket option SO_EXCLUSIVEADDRUSE (entry %i)\",\n\t\t\t       portsTotal);\n\t\t}\n#else\n\t\tif (setsockopt(so.sock,\n\t\t               SOL_SOCKET,\n\t\t               SO_REUSEADDR,\n\t\t               (SOCK_OPT_TYPE)&on,\n\t\t               sizeof(on)) != 0) {\n\n\t\t\t/* Set reuse option, but don't abort on errors. */\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"cannot set socket option SO_REUSEADDR (entry %i)\",\n\t\t\t       portsTotal);\n\t\t}\n#endif\n\n\t\tif (ip_version > 4) {\n#if defined(USE_IPV6)\n\t\t\tif (ip_version == 6) {\n\t\t\t\tif (so.lsa.sa.sa_family == AF_INET6\n\t\t\t\t    && setsockopt(so.sock,\n\t\t\t\t                  IPPROTO_IPV6,\n\t\t\t\t                  IPV6_V6ONLY,\n\t\t\t\t                  (void *)&off,\n\t\t\t\t                  sizeof(off)) != 0) {\n\n\t\t\t\t\t/* Set IPv6 only option, but don't abort on errors. */\n\t\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t\t       \"cannot set socket option IPV6_V6ONLY (entry %i)\",\n\t\t\t\t\t       portsTotal);\n\t\t\t\t}\n\t\t\t}\n#else\n\t\t\tmg_cry(fc(ctx), \"IPv6 not available\");\n\t\t\tclosesocket(so.sock);\n\t\t\tso.sock = INVALID_SOCKET;\n\t\t\tcontinue;\n#endif\n\t\t}\n\n\t\tif (so.lsa.sa.sa_family == AF_INET) {\n\n\t\t\tlen = sizeof(so.lsa.sin);\n\t\t\tif (bind(so.sock, &so.lsa.sa, len) != 0) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"cannot bind to %.*s: %d (%s)\",\n\t\t\t\t       (int)vec.len,\n\t\t\t\t       vec.ptr,\n\t\t\t\t       (int)ERRNO,\n\t\t\t\t       strerror(errno));\n\t\t\t\tclosesocket(so.sock);\n\t\t\t\tso.sock = INVALID_SOCKET;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n#if defined(USE_IPV6)\n\t\telse if (so.lsa.sa.sa_family == AF_INET6) {\n\n\t\t\tlen = sizeof(so.lsa.sin6);\n\t\t\tif (bind(so.sock, &so.lsa.sa, len) != 0) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"cannot bind to IPv6 %.*s: %d (%s)\",\n\t\t\t\t       (int)vec.len,\n\t\t\t\t       vec.ptr,\n\t\t\t\t       (int)ERRNO,\n\t\t\t\t       strerror(errno));\n\t\t\t\tclosesocket(so.sock);\n\t\t\t\tso.sock = INVALID_SOCKET;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n#endif\n\t\telse {\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"cannot bind: address family not supported (entry %i)\",\n\t\t\t       portsTotal);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (listen(so.sock, SOMAXCONN) != 0) {\n\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"cannot listen to %.*s: %d (%s)\",\n\t\t\t       (int)vec.len,\n\t\t\t       vec.ptr,\n\t\t\t       (int)ERRNO,\n\t\t\t       strerror(errno));\n\t\t\tclosesocket(so.sock);\n\t\t\tso.sock = INVALID_SOCKET;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (getsockname(so.sock, &(usa.sa), &len) != 0\n\t\t    || usa.sa.sa_family != so.lsa.sa.sa_family) {\n\n\t\t\tint err = (int)ERRNO;\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"call to getsockname failed %.*s: %d (%s)\",\n\t\t\t       (int)vec.len,\n\t\t\t       vec.ptr,\n\t\t\t       err,\n\t\t\t       strerror(errno));\n\t\t\tclosesocket(so.sock);\n\t\t\tso.sock = INVALID_SOCKET;\n\t\t\tcontinue;\n\t\t}\n\n/* Update lsa port in case of random free ports */\n#if defined(USE_IPV6)\n\t\tif (so.lsa.sa.sa_family == AF_INET6) {\n\t\t\tso.lsa.sin6.sin6_port = usa.sin6.sin6_port;\n\t\t} else\n#endif\n\t\t{\n\t\t\tso.lsa.sin.sin_port = usa.sin.sin_port;\n\t\t}\n\n\t\tif ((ptr = (struct socket *)\n\t\t         mg_realloc(ctx->listening_sockets,\n\t\t                    (ctx->num_listening_sockets + 1)\n\t\t                        * sizeof(ctx->listening_sockets[0]))) == NULL) {\n\n\t\t\tmg_cry(fc(ctx), \"%s\", \"Out of memory\");\n\t\t\tclosesocket(so.sock);\n\t\t\tso.sock = INVALID_SOCKET;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ((pfd = (struct pollfd *)mg_realloc(\n\t\t         ctx->listening_socket_fds,\n\t\t         (ctx->num_listening_sockets + 1)\n\t\t             * sizeof(ctx->listening_socket_fds[0]))) == NULL) {\n\n\t\t\tmg_cry(fc(ctx), \"%s\", \"Out of memory\");\n\t\t\tclosesocket(so.sock);\n\t\t\tso.sock = INVALID_SOCKET;\n\t\t\tmg_free(ptr);\n\t\t\tcontinue;\n\t\t}\n\n\t\tset_close_on_exec(so.sock, fc(ctx));\n\t\tctx->listening_sockets = ptr;\n\t\tctx->listening_sockets[ctx->num_listening_sockets] = so;\n\t\tctx->listening_socket_fds = pfd;\n\t\tctx->num_listening_sockets++;\n\t\tportsOk++;\n\t}\n\n\tif (portsOk != portsTotal) {\n\t\tclose_all_listening_sockets(ctx);\n\t\tportsOk = 0;\n\t}\n\n\treturn portsOk;\n}\n\n\nstatic const char *\nheader_val(const struct mg_connection *conn, const char *header)\n{\n\tconst char *header_value;\n\n\tif ((header_value = mg_get_header(conn, header)) == NULL) {\n\t\treturn \"-\";\n\t} else {\n\t\treturn header_value;\n\t}\n}\n\n\nstatic void\nlog_access(const struct mg_connection *conn)\n{\n\tconst struct mg_request_info *ri;\n\tstruct mg_file fi;\n\tchar date[64], src_addr[IP_ADDR_STR_LEN];\n\tstruct tm *tm;\n\n\tconst char *referer;\n\tconst char *user_agent;\n\n\tchar buf[4096];\n\n\tif (!conn || !conn->ctx) {\n\t\treturn;\n\t}\n\n\tif (conn->ctx->config[ACCESS_LOG_FILE] != NULL) {\n\t\tif (mg_fopen(conn,\n\t\t             conn->ctx->config[ACCESS_LOG_FILE],\n\t\t             MG_FOPEN_MODE_APPEND,\n\t\t             &fi) == 0) {\n\t\t\tfi.access.fp = NULL;\n\t\t}\n\t} else {\n\t\tfi.access.fp = NULL;\n\t}\n\n\t/* Log is written to a file and/or a callback. If both are not set,\n\t * executing the rest of the function is pointless. */\n\tif ((fi.access.fp == NULL) && (conn->ctx->callbacks.log_access == NULL)) {\n\t\treturn;\n\t}\n\n\ttm = localtime(&conn->conn_birth_time);\n\tif (tm != NULL) {\n\t\tstrftime(date, sizeof(date), \"%d/%b/%Y:%H:%M:%S %z\", tm);\n\t} else {\n\t\tmg_strlcpy(date, \"01/Jan/1970:00:00:00 +0000\", sizeof(date));\n\t\tdate[sizeof(date) - 1] = '\\0';\n\t}\n\n\tri = &conn->request_info;\n\n\tsockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);\n\treferer = header_val(conn, \"Referer\");\n\tuser_agent = header_val(conn, \"User-Agent\");\n\n\tmg_snprintf(conn,\n\t            NULL, /* Ignore truncation in access log */\n\t            buf,\n\t            sizeof(buf),\n\t            \"%s - %s [%s] \\\"%s %s%s%s HTTP/%s\\\" %d %\" INT64_FMT \" %s %s\",\n\t            src_addr,\n\t            (ri->remote_user == NULL) ? \"-\" : ri->remote_user,\n\t            date,\n\t            ri->request_method ? ri->request_method : \"-\",\n\t            ri->request_uri ? ri->request_uri : \"-\",\n\t            ri->query_string ? \"?\" : \"\",\n\t            ri->query_string ? ri->query_string : \"\",\n\t            ri->http_version,\n\t            conn->status_code,\n\t            conn->num_bytes_sent,\n\t            referer,\n\t            user_agent);\n\n\tif (conn->ctx->callbacks.log_access) {\n\t\tconn->ctx->callbacks.log_access(conn, buf);\n\t}\n\n\tif (fi.access.fp) {\n\t\tint ok = 1;\n\t\tflockfile(fi.access.fp);\n\t\tif (fprintf(fi.access.fp, \"%s\\n\", buf) < 1) {\n\t\t\tok = 0;\n\t\t}\n\t\tif (fflush(fi.access.fp) != 0) {\n\t\t\tok = 0;\n\t\t}\n\t\tfunlockfile(fi.access.fp);\n\t\tif (mg_fclose(&fi.access) != 0) {\n\t\t\tok = 0;\n\t\t}\n\t\tif (!ok) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"Error writing log file %s\",\n\t\t\t       conn->ctx->config[ACCESS_LOG_FILE]);\n\t\t}\n\t}\n}\n\n\n/* Verify given socket address against the ACL.\n * Return -1 if ACL is malformed, 0 if address is disallowed, 1 if allowed.\n */\nstatic int\ncheck_acl(struct mg_context *ctx, uint32_t remote_ip)\n{\n\tint allowed, flag;\n\tuint32_t net, mask;\n\tstruct vec vec;\n\n\tif (ctx) {\n\t\tconst char *list = ctx->config[ACCESS_CONTROL_LIST];\n\n\t\t/* If any ACL is set, deny by default */\n\t\tallowed = (list == NULL) ? '+' : '-';\n\n\t\twhile ((list = next_option(list, &vec, NULL)) != NULL) {\n\t\t\tflag = vec.ptr[0];\n\t\t\tif ((flag != '+' && flag != '-')\n\t\t\t    || parse_net(&vec.ptr[1], &net, &mask) == 0) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"%s: subnet must be [+|-]x.x.x.x[/x]\",\n\t\t\t\t       __func__);\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tif (net == (remote_ip & mask)) {\n\t\t\t\tallowed = flag;\n\t\t\t}\n\t\t}\n\n\t\treturn allowed == '+';\n\t}\n\treturn -1;\n}\n\n\n#if !defined(_WIN32)\nstatic int\nset_uid_option(struct mg_context *ctx)\n{\n\tstruct passwd *pw;\n\tif (ctx) {\n\t\tconst char *uid = ctx->config[RUN_AS_USER];\n\t\tint success = 0;\n\n\t\tif (uid == NULL) {\n\t\t\tsuccess = 1;\n\t\t} else {\n\t\t\tif ((pw = getpwnam(uid)) == NULL) {\n\t\t\t\tmg_cry(fc(ctx), \"%s: unknown user [%s]\", __func__, uid);\n\t\t\t} else if (setgid(pw->pw_gid) == -1) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"%s: setgid(%s): %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       uid,\n\t\t\t\t       strerror(errno));\n\t\t\t} else if (setgroups(0, NULL)) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"%s: setgroups(): %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       strerror(errno));\n\t\t\t} else if (setuid(pw->pw_uid) == -1) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"%s: setuid(%s): %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       uid,\n\t\t\t\t       strerror(errno));\n\t\t\t} else {\n\t\t\t\tsuccess = 1;\n\t\t\t}\n\t\t}\n\n\t\treturn success;\n\t}\n\treturn 0;\n}\n#endif /* !_WIN32 */\n\n\nstatic void\ntls_dtor(void *key)\n{\n\tstruct mg_workerTLS *tls = (struct mg_workerTLS *)key;\n\t/* key == pthread_getspecific(sTlsKey); */\n\n\tif (tls) {\n\t\tif (tls->is_master == 2) {\n\t\t\ttls->is_master = -3; /* Mark memory as dead */\n\t\t\tmg_free(tls);\n\t\t}\n\t}\n\tpthread_setspecific(sTlsKey, NULL);\n}\n\n\n#if !defined(NO_SSL)\n\n/* Must be set if sizeof(pthread_t) > sizeof(unsigned long) */\nstatic unsigned long\nssl_id_callback(void)\n{\n#ifdef _WIN32\n\treturn GetCurrentThreadId();\n#else\n\n#ifdef __clang__\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wunreachable-code\"\n/* For every compiler, either \"sizeof(pthread_t) > sizeof(unsigned long)\"\n * or not, so one of the two conditions will be unreachable by construction.\n * Unfortunately the C standard does not define a way to check this at\n * compile time, since the #if preprocessor conditions can not use the sizeof\n * operator as an argument. */\n#endif\n\n\tif (sizeof(pthread_t) > sizeof(unsigned long)) {\n\t\t/* This is the problematic case for CRYPTO_set_id_callback:\n\t\t * The OS pthread_t can not be cast to unsigned long. */\n\t\tstruct mg_workerTLS *tls =\n\t\t    (struct mg_workerTLS *)pthread_getspecific(sTlsKey);\n\t\tif (tls == NULL) {\n\t\t\t/* SSL called from an unknown thread: Create some thread index.\n\t\t\t */\n\t\t\ttls = (struct mg_workerTLS *)mg_malloc(sizeof(struct mg_workerTLS));\n\t\t\ttls->is_master = -2; /* -2 means \"3rd party thread\" */\n\t\t\ttls->thread_idx = (unsigned)mg_atomic_inc(&thread_idx_max);\n\t\t\tpthread_setspecific(sTlsKey, tls);\n\t\t}\n\t\treturn tls->thread_idx;\n\t} else {\n\t\t/* pthread_t may be any data type, so a simple cast to unsigned long\n\t\t * can rise a warning/error, depending on the platform.\n\t\t * Here memcpy is used as an anything-to-anything cast. */\n\t\tunsigned long ret = 0;\n\t\tpthread_t t = pthread_self();\n\t\tmemcpy(&ret, &t, sizeof(pthread_t));\n\t\treturn ret;\n\t}\n\n#ifdef __clang__\n#pragma clang diagnostic pop\n#endif\n\n#endif\n}\n\n\nstatic int ssl_use_pem_file(struct mg_context *ctx, const char *pem);\nstatic const char *ssl_error(void);\n\n\nstatic int\nrefresh_trust(struct mg_connection *conn)\n{\n\tstatic int reload_lock = 0;\n\tstatic long int data_check = 0;\n\tvolatile int *p_reload_lock = (volatile int *)&reload_lock;\n\n\tstruct stat cert_buf;\n\tlong int t;\n\tchar *pem;\n\tint should_verify_peer;\n\n\tif ((pem = conn->ctx->config[SSL_CERTIFICATE]) == NULL) {\n\t\t/* If peem is NULL and conn->ctx->callbacks.init_ssl is not,\n\t\t * refresh_trust still can not work. */\n\t\treturn 0;\n\t}\n\n\tt = data_check;\n\tif (stat(pem, &cert_buf) != -1) {\n\t\tt = (long int)cert_buf.st_mtime;\n\t}\n\n\tif (data_check != t) {\n\t\tdata_check = t;\n\n\t\tshould_verify_peer =\n\t\t    (conn->ctx->config[SSL_DO_VERIFY_PEER] != NULL)\n\t\t    && (mg_strcasecmp(conn->ctx->config[SSL_DO_VERIFY_PEER], \"yes\")\n\t\t        == 0);\n\n\t\tif (should_verify_peer) {\n\t\t\tchar *ca_path = conn->ctx->config[SSL_CA_PATH];\n\t\t\tchar *ca_file = conn->ctx->config[SSL_CA_FILE];\n\t\t\tif (SSL_CTX_load_verify_locations(conn->ctx->ssl_ctx,\n\t\t\t                                  ca_file,\n\t\t\t                                  ca_path) != 1) {\n\t\t\t\tmg_cry(fc(conn->ctx),\n\t\t\t\t       \"SSL_CTX_load_verify_locations error: %s \"\n\t\t\t\t       \"ssl_verify_peer requires setting \"\n\t\t\t\t       \"either ssl_ca_path or ssl_ca_file. Is any of them \"\n\t\t\t\t       \"present in \"\n\t\t\t\t       \"the .conf file?\",\n\t\t\t\t       ssl_error());\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (1 == mg_atomic_inc(p_reload_lock)) {\n\t\t\tif (ssl_use_pem_file(conn->ctx, pem) == 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t*p_reload_lock = 0;\n\t\t}\n\t}\n\t/* lock while cert is reloading */\n\twhile (*p_reload_lock) {\n\t\tsleep(1);\n\t}\n\n\treturn 1;\n}\n\n\nstatic pthread_mutex_t *ssl_mutexes;\n\n\nstatic int\nsslize(struct mg_connection *conn,\n       SSL_CTX *s,\n       int (*func)(SSL *),\n       volatile int *stop_server)\n{\n\tint ret, err;\n\tint short_trust;\n\tunsigned i;\n\n\tif (!conn) {\n\t\treturn 0;\n\t}\n\n\tshort_trust =\n\t    (conn->ctx->config[SSL_SHORT_TRUST] != NULL)\n\t    && (mg_strcasecmp(conn->ctx->config[SSL_SHORT_TRUST], \"yes\") == 0);\n\n\tif (short_trust) {\n\t\tint trust_ret = refresh_trust(conn);\n\t\tif (!trust_ret) {\n\t\t\treturn trust_ret;\n\t\t}\n\t}\n\n\tconn->ssl = SSL_new(s);\n\tif (conn->ssl == NULL) {\n\t\treturn 0;\n\t}\n\n\tret = SSL_set_fd(conn->ssl, conn->client.sock);\n\tif (ret != 1) {\n\t\terr = SSL_get_error(conn->ssl, ret);\n\t\t(void)err; /* TODO: set some error message */\n\t\tSSL_free(conn->ssl);\n\t\tconn->ssl = NULL;\n\t\t/* Avoid CRYPTO_cleanup_all_ex_data(); See discussion:\n\t\t * https://wiki.openssl.org/index.php/Talk:Library_Initialization */\n\t\tERR_remove_state(0);\n\t\treturn 0;\n\t}\n\n\t/* SSL functions may fail and require to be called again:\n\t * see https://www.openssl.org/docs/manmaster/ssl/SSL_get_error.html\n\t * Here \"func\" could be SSL_connect or SSL_accept. */\n\tfor (i = 16; i <= 1024; i *= 2) {\n\t\tret = func(conn->ssl);\n\t\tif (ret != 1) {\n\t\t\terr = SSL_get_error(conn->ssl, ret);\n\t\t\tif ((err == SSL_ERROR_WANT_CONNECT)\n\t\t\t    || (err == SSL_ERROR_WANT_ACCEPT)\n\t\t\t    || (err == SSL_ERROR_WANT_READ)\n\t\t\t    || (err == SSL_ERROR_WANT_WRITE)) {\n\t\t\t\t/* Need to retry the function call \"later\".\n\t\t\t\t * See https://linux.die.net/man/3/ssl_get_error\n\t\t\t\t * This is typical for non-blocking sockets. */\n\t\t\t\tif (*stop_server) {\n\t\t\t\t\t/* Don't wait if the server is going to be stopped. */\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tmg_sleep(i);\n\n\t\t\t} else if (err == SSL_ERROR_SYSCALL) {\n\t\t\t\t/* This is an IO error. Look at errno. */\n\t\t\t\terr = errno;\n\t\t\t\t/* TODO: set some error message */\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t/* This is an SSL specific error */\n\t\t\t\t/* TODO: set some error message */\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t} else {\n\t\t\t/* success */\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (ret != 1) {\n\t\tSSL_free(conn->ssl);\n\t\tconn->ssl = NULL;\n\t\t/* Avoid CRYPTO_cleanup_all_ex_data(); See discussion:\n\t\t * https://wiki.openssl.org/index.php/Talk:Library_Initialization */\n\t\tERR_remove_state(0);\n\t\treturn 0;\n\t}\n\n\treturn 1;\n}\n\n\n/* Return OpenSSL error message (from CRYPTO lib) */\nstatic const char *\nssl_error(void)\n{\n\tunsigned long err;\n\terr = ERR_get_error();\n\treturn ((err == 0) ? \"\" : ERR_error_string(err, NULL));\n}\n\n\nstatic int\nhexdump2string(void *mem, int memlen, char *buf, int buflen)\n{\n\tint i;\n\tconst char hexdigit[] = \"0123456789abcdef\";\n\n\tif (memlen <= 0 || buflen <= 0) {\n\t\treturn 0;\n\t}\n\tif (buflen < (3 * memlen)) {\n\t\treturn 0;\n\t}\n\n\tfor (i = 0; i < memlen; i++) {\n\t\tif (i > 0) {\n\t\t\tbuf[3 * i - 1] = ' ';\n\t\t}\n\t\tbuf[3 * i] = hexdigit[(((uint8_t *)mem)[i] >> 4) & 0xF];\n\t\tbuf[3 * i + 1] = hexdigit[((uint8_t *)mem)[i] & 0xF];\n\t}\n\tbuf[3 * memlen - 1] = 0;\n\n\treturn 1;\n}\n\n\nstatic void\nssl_get_client_cert_info(struct mg_connection *conn)\n{\n\tX509 *cert = SSL_get_peer_certificate(conn->ssl);\n\tif (cert) {\n\t\tchar str_subject[1024];\n\t\tchar str_issuer[1024];\n\t\tchar str_serial[1024];\n\t\tchar str_finger[1024];\n\t\tunsigned char buf[256];\n\t\tint len;\n\t\tunsigned int ulen;\n\n\t\t/* Handle to algorithm used for fingerprint */\n\t\tconst EVP_MD *digest = EVP_get_digestbyname(\"sha1\");\n\n\t\t/* Get Subject and issuer */\n\t\tX509_NAME *subj = X509_get_subject_name(cert);\n\t\tX509_NAME *iss = X509_get_issuer_name(cert);\n\n\t\t/* Get serial number */\n\t\tASN1_INTEGER *serial = X509_get_serialNumber(cert);\n\n\t\t/* Translate subject and issuer to a string */\n\t\t(void)X509_NAME_oneline(subj, str_subject, (int)sizeof(str_subject));\n\t\t(void)X509_NAME_oneline(iss, str_issuer, (int)sizeof(str_issuer));\n\n\t\t/* Translate serial number to a hex string */\n\t\tlen = i2c_ASN1_INTEGER(serial, NULL);\n\t\tif ((len > 0) && ((unsigned)len < (unsigned)sizeof(buf))) {\n\t\t\tunsigned char *pbuf = buf;\n\t\t\tint len2 = i2c_ASN1_INTEGER(serial, &pbuf);\n\t\t\tif (!hexdump2string(\n\t\t\t        buf, len2, str_serial, (int)sizeof(str_serial))) {\n\t\t\t\t*str_serial = 0;\n\t\t\t}\n\t\t} else {\n\t\t\t*str_serial = 0;\n\t\t}\n\n\t\t/* Calculate SHA1 fingerprint and store as a hex string */\n\t\tulen = 0;\n\t\tASN1_digest((int (*)())i2d_X509, digest, (char *)cert, buf, &ulen);\n\t\tif (!hexdump2string(\n\t\t        buf, (int)ulen, str_finger, (int)sizeof(str_finger))) {\n\t\t\t*str_finger = 0;\n\t\t}\n\n\t\tconn->request_info.client_cert =\n\t\t    (struct client_cert *)mg_malloc(sizeof(struct client_cert));\n\t\tif (conn->request_info.client_cert) {\n\t\t\tconn->request_info.client_cert->subject = mg_strdup(str_subject);\n\t\t\tconn->request_info.client_cert->issuer = mg_strdup(str_issuer);\n\t\t\tconn->request_info.client_cert->serial = mg_strdup(str_serial);\n\t\t\tconn->request_info.client_cert->finger = mg_strdup(str_finger);\n\t\t} else {\n\t\t\t/* TODO: write some OOM message */\n\t\t}\n\n\t\tX509_free(cert);\n\t}\n}\n\n\nstatic void\nssl_locking_callback(int mode, int mutex_num, const char *file, int line)\n{\n\t(void)line;\n\t(void)file;\n\n\tif (mode & 1) {\n\t\t/* 1 is CRYPTO_LOCK */\n\t\t(void)pthread_mutex_lock(&ssl_mutexes[mutex_num]);\n\t} else {\n\t\t(void)pthread_mutex_unlock(&ssl_mutexes[mutex_num]);\n\t}\n}\n\n\n#if !defined(NO_SSL_DL)\nstatic void *\nload_dll(struct mg_context *ctx, const char *dll_name, struct ssl_func *sw)\n{\n\tunion {\n\t\tvoid *p;\n\t\tvoid (*fp)(void);\n\t} u;\n\tvoid *dll_handle;\n\tstruct ssl_func *fp;\n\n\tif ((dll_handle = dlopen(dll_name, RTLD_LAZY)) == NULL) {\n\t\tmg_cry(fc(ctx), \"%s: cannot load %s\", __func__, dll_name);\n\t\treturn NULL;\n\t}\n\n\tfor (fp = sw; fp->name != NULL; fp++) {\n#ifdef _WIN32\n\t\t/* GetProcAddress() returns pointer to function */\n\t\tu.fp = (void (*)(void))dlsym(dll_handle, fp->name);\n#else\n\t\t/* dlsym() on UNIX returns void *. ISO C forbids casts of data\n\t\t * pointers to function pointers. We need to use a union to make a\n\t\t * cast. */\n\t\tu.p = dlsym(dll_handle, fp->name);\n#endif /* _WIN32 */\n\t\tif (u.fp == NULL) {\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"%s: %s: cannot find %s\",\n\t\t\t       __func__,\n\t\t\t       dll_name,\n\t\t\t       fp->name);\n\t\t\tdlclose(dll_handle);\n\t\t\treturn NULL;\n\t\t} else {\n\t\t\tfp->ptr = u.fp;\n\t\t}\n\t}\n\n\treturn dll_handle;\n}\n\n\nstatic void *ssllib_dll_handle;    /* Store the ssl library handle. */\nstatic void *cryptolib_dll_handle; /* Store the crypto library handle. */\n\n#endif /* NO_SSL_DL */\n\n\n#if defined(SSL_ALREADY_INITIALIZED)\nstatic int cryptolib_users = 1; /* Reference counter for crypto library. */\n#else\nstatic int cryptolib_users = 0; /* Reference counter for crypto library. */\n#endif\n\n\nstatic int\ninitialize_ssl(struct mg_context *ctx)\n{\n\tint i;\n\tsize_t size;\n\n#if !defined(NO_SSL_DL)\n\tif (!cryptolib_dll_handle) {\n\t\tcryptolib_dll_handle = load_dll(ctx, CRYPTO_LIB, crypto_sw);\n\t\tif (!cryptolib_dll_handle) {\n\t\t\treturn 0;\n\t\t}\n\t}\n#endif /* NO_SSL_DL */\n\n\tif (mg_atomic_inc(&cryptolib_users) > 1) {\n\t\treturn 1;\n\t}\n\n\t/* Initialize locking callbacks, needed for thread safety.\n\t * http://www.openssl.org/support/faq.html#PROG1\n\t */\n\ti = CRYPTO_num_locks();\n\tif (i < 0) {\n\t\ti = 0;\n\t}\n\tsize = sizeof(pthread_mutex_t) * ((size_t)(i));\n\tif ((ssl_mutexes = (pthread_mutex_t *)mg_malloc(size)) == NULL) {\n\t\tmg_cry(fc(ctx),\n\t\t       \"%s: cannot allocate mutexes: %s\",\n\t\t       __func__,\n\t\t       ssl_error());\n\t\treturn 0;\n\t}\n\n\tfor (i = 0; i < CRYPTO_num_locks(); i++) {\n\t\tpthread_mutex_init(&ssl_mutexes[i], &pthread_mutex_attr);\n\t}\n\n\tCRYPTO_set_locking_callback(&ssl_locking_callback);\n\tCRYPTO_set_id_callback(&ssl_id_callback);\n\n\treturn 1;\n}\n\n\nstatic int\nssl_use_pem_file(struct mg_context *ctx, const char *pem)\n{\n\tif (SSL_CTX_use_certificate_file(ctx->ssl_ctx, pem, 1) == 0) {\n\t\tmg_cry(fc(ctx),\n\t\t       \"%s: cannot open certificate file %s: %s\",\n\t\t       __func__,\n\t\t       pem,\n\t\t       ssl_error());\n\t\treturn 0;\n\t}\n\n\t/* could use SSL_CTX_set_default_passwd_cb_userdata */\n\tif (SSL_CTX_use_PrivateKey_file(ctx->ssl_ctx, pem, 1) == 0) {\n\t\tmg_cry(fc(ctx),\n\t\t       \"%s: cannot open private key file %s: %s\",\n\t\t       __func__,\n\t\t       pem,\n\t\t       ssl_error());\n\t\treturn 0;\n\t}\n\n\tif (SSL_CTX_check_private_key(ctx->ssl_ctx) == 0) {\n\t\tmg_cry(fc(ctx),\n\t\t       \"%s: certificate and private key do not match: %s\",\n\t\t       __func__,\n\t\t       pem);\n\t\treturn 0;\n\t}\n\n\tif (SSL_CTX_use_certificate_chain_file(ctx->ssl_ctx, pem) == 0) {\n\t\tmg_cry(fc(ctx),\n\t\t       \"%s: cannot use certificate chain file %s: %s\",\n\t\t       __func__,\n\t\t       pem,\n\t\t       ssl_error());\n\t\treturn 0;\n\t}\n\treturn 1;\n}\n\n\nstatic long\nssl_get_protocol(int version_id)\n{\n\tlong ret = SSL_OP_ALL;\n\tif (version_id > 0)\n\t\tret |= SSL_OP_NO_SSLv2;\n\tif (version_id > 1)\n\t\tret |= SSL_OP_NO_SSLv3;\n\tif (version_id > 2)\n\t\tret |= SSL_OP_NO_TLSv1;\n\tif (version_id > 3)\n\t\tret |= SSL_OP_NO_TLSv1_1;\n\treturn ret;\n}\n\n\n/* Dynamically load SSL library. Set up ctx->ssl_ctx pointer. */\nstatic int\nset_ssl_option(struct mg_context *ctx)\n{\n\tconst char *pem;\n\tint callback_ret;\n\tint should_verify_peer;\n\tconst char *ca_path;\n\tconst char *ca_file;\n\tint use_default_verify_paths;\n\tint verify_depth;\n\ttime_t now_rt = time(NULL);\n\tstruct timespec now_mt;\n\tmd5_byte_t ssl_context_id[16];\n\tmd5_state_t md5state;\n\tint protocol_ver;\n\n\t/* If PEM file is not specified and the init_ssl callback\n\t * is not specified, skip SSL initialization. */\n\tif (!ctx) {\n\t\treturn 0;\n\t}\n\tif ((pem = ctx->config[SSL_CERTIFICATE]) == NULL\n\t    && ctx->callbacks.init_ssl == NULL) {\n\t\treturn 1;\n\t}\n\n\tif (!initialize_ssl(ctx)) {\n\t\treturn 0;\n\t}\n\n#if !defined(NO_SSL_DL)\n\tif (!ssllib_dll_handle) {\n\t\tssllib_dll_handle = load_dll(ctx, SSL_LIB, ssl_sw);\n\t\tif (!ssllib_dll_handle) {\n\t\t\treturn 0;\n\t\t}\n\t}\n#endif /* NO_SSL_DL */\n\n\t/* Initialize SSL library */\n\tSSL_library_init();\n\tSSL_load_error_strings();\n\n\tif ((ctx->ssl_ctx = SSL_CTX_new(SSLv23_server_method())) == NULL) {\n\t\tmg_cry(fc(ctx), \"SSL_CTX_new (server) error: %s\", ssl_error());\n\t\treturn 0;\n\t}\n\n\tSSL_CTX_clear_options(ctx->ssl_ctx,\n\t                      SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1\n\t                          | SSL_OP_NO_TLSv1_1);\n\tprotocol_ver = atoi(ctx->config[SSL_PROTOCOL_VERSION]);\n\tSSL_CTX_set_options(ctx->ssl_ctx, ssl_get_protocol(protocol_ver));\n\tSSL_CTX_set_options(ctx->ssl_ctx, SSL_OP_SINGLE_DH_USE);\n\tSSL_CTX_set_options(ctx->ssl_ctx, SSL_OP_CIPHER_SERVER_PREFERENCE);\n\tSSL_CTX_set_ecdh_auto(ctx->ssl_ctx, 1);\n\n\t/* If a callback has been specified, call it. */\n\tcallback_ret =\n\t    (ctx->callbacks.init_ssl == NULL)\n\t        ? 0\n\t        : (ctx->callbacks.init_ssl(ctx->ssl_ctx, ctx->user_data));\n\n\t/* If callback returns 0, civetweb sets up the SSL certificate.\n\t * If it returns 1, civetweb assumes the calback already did this.\n\t * If it returns -1, initializing ssl fails. */\n\tif (callback_ret < 0) {\n\t\tmg_cry(fc(ctx), \"SSL callback returned error: %i\", callback_ret);\n\t\treturn 0;\n\t}\n\tif (callback_ret > 0) {\n\t\tif (pem != NULL) {\n\t\t\t(void)SSL_CTX_use_certificate_chain_file(ctx->ssl_ctx, pem);\n\t\t}\n\t\treturn 1;\n\t}\n\n\t/* Use some UID as session context ID. */\n\tmd5_init(&md5state);\n\tmd5_append(&md5state, (const md5_byte_t *)&now_rt, sizeof(now_rt));\n\tclock_gettime(CLOCK_MONOTONIC, &now_mt);\n\tmd5_append(&md5state, (const md5_byte_t *)&now_mt, sizeof(now_mt));\n\tmd5_append(&md5state,\n\t           (const md5_byte_t *)ctx->config[LISTENING_PORTS],\n\t           strlen(ctx->config[LISTENING_PORTS]));\n\tmd5_append(&md5state, (const md5_byte_t *)ctx, sizeof(*ctx));\n\tmd5_finish(&md5state, ssl_context_id);\n\n\tSSL_CTX_set_session_id_context(ctx->ssl_ctx,\n\t                               (const unsigned char *)&ssl_context_id,\n\t                               sizeof(ssl_context_id));\n\n\tif (pem != NULL) {\n\t\tif (!ssl_use_pem_file(ctx, pem)) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tshould_verify_peer =\n\t    (ctx->config[SSL_DO_VERIFY_PEER] != NULL)\n\t    && (mg_strcasecmp(ctx->config[SSL_DO_VERIFY_PEER], \"yes\") == 0);\n\n\tuse_default_verify_paths =\n\t    (ctx->config[SSL_DEFAULT_VERIFY_PATHS] != NULL)\n\t    && (mg_strcasecmp(ctx->config[SSL_DEFAULT_VERIFY_PATHS], \"yes\") == 0);\n\n\tif (should_verify_peer) {\n\t\tca_path = ctx->config[SSL_CA_PATH];\n\t\tca_file = ctx->config[SSL_CA_FILE];\n\t\tif (SSL_CTX_load_verify_locations(ctx->ssl_ctx, ca_file, ca_path)\n\t\t    != 1) {\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"SSL_CTX_load_verify_locations error: %s \"\n\t\t\t       \"ssl_verify_peer requires setting \"\n\t\t\t       \"either ssl_ca_path or ssl_ca_file. Is any of them \"\n\t\t\t       \"present in \"\n\t\t\t       \"the .conf file?\",\n\t\t\t       ssl_error());\n\t\t\treturn 0;\n\t\t}\n\n\t\tSSL_CTX_set_verify(ctx->ssl_ctx,\n\t\t                   SSL_VERIFY_PEER | SSL_VERIFY_FAIL_IF_NO_PEER_CERT,\n\t\t                   NULL);\n\n\t\tif (use_default_verify_paths\n\t\t    && SSL_CTX_set_default_verify_paths(ctx->ssl_ctx) != 1) {\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"SSL_CTX_set_default_verify_paths error: %s\",\n\t\t\t       ssl_error());\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (ctx->config[SSL_VERIFY_DEPTH]) {\n\t\t\tverify_depth = atoi(ctx->config[SSL_VERIFY_DEPTH]);\n\t\t\tSSL_CTX_set_verify_depth(ctx->ssl_ctx, verify_depth);\n\t\t}\n\t}\n\n\tif (ctx->config[SSL_CIPHER_LIST] != NULL) {\n\t\tif (SSL_CTX_set_cipher_list(ctx->ssl_ctx, ctx->config[SSL_CIPHER_LIST])\n\t\t    != 1) {\n\t\t\tmg_cry(fc(ctx), \"SSL_CTX_set_cipher_list error: %s\", ssl_error());\n\t\t}\n\t}\n\n\treturn 1;\n}\n\n\nstatic void\nuninitialize_ssl(struct mg_context *ctx)\n{\n\tint i;\n\t(void)ctx;\n\n\tif (mg_atomic_dec(&cryptolib_users) == 0) {\n\n\t\t/* Shutdown according to\n\t\t * https://wiki.openssl.org/index.php/Library_Initialization#Cleanup\n\t\t * http://stackoverflow.com/questions/29845527/how-to-properly-uninitialize-openssl\n\t\t */\n\t\tCRYPTO_set_locking_callback(NULL);\n\t\tCRYPTO_set_id_callback(NULL);\n\t\tENGINE_cleanup();\n\t\tCONF_modules_unload(1);\n\t\tERR_free_strings();\n\t\tEVP_cleanup();\n\t\tCRYPTO_cleanup_all_ex_data();\n\t\tERR_remove_state(0);\n\n\t\tfor (i = 0; i < CRYPTO_num_locks(); i++) {\n\t\t\tpthread_mutex_destroy(&ssl_mutexes[i]);\n\t\t}\n\t\tmg_free(ssl_mutexes);\n\t\tssl_mutexes = NULL;\n\t}\n}\n#endif /* !NO_SSL */\n\n\nstatic int\nset_gpass_option(struct mg_context *ctx)\n{\n\tif (ctx) {\n\t\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\t\tconst char *path = ctx->config[GLOBAL_PASSWORDS_FILE];\n\t\tif (path != NULL && !mg_stat(fc(ctx), path, &file.stat)) {\n\t\t\tmg_cry(fc(ctx), \"Cannot open %s: %s\", path, strerror(ERRNO));\n\t\t\treturn 0;\n\t\t}\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n\nstatic int\nset_acl_option(struct mg_context *ctx)\n{\n\treturn check_acl(ctx, (uint32_t)0x7f000001UL) != -1;\n}\n\n\nstatic void\nreset_per_request_attributes(struct mg_connection *conn)\n{\n\tif (!conn) {\n\t\treturn;\n\t}\n\tconn->path_info = NULL;\n\tconn->num_bytes_sent = conn->consumed_content = 0;\n\tconn->status_code = -1;\n\tconn->is_chunked = 0;\n\tconn->must_close = conn->request_len = conn->throttle = 0;\n\tconn->request_info.content_length = -1;\n\tconn->request_info.remote_user = NULL;\n\tconn->request_info.request_method = NULL;\n\tconn->request_info.request_uri = NULL;\n\tconn->request_info.local_uri = NULL;\n\tconn->request_info.uri = NULL; /* TODO: cleanup uri,\n\t                                * local_uri and request_uri */\n\tconn->request_info.http_version = NULL;\n\tconn->request_info.num_headers = 0;\n\tconn->data_len = 0;\n\tconn->chunk_remainder = 0;\n}\n\n\n#if 0\n/* Note: set_sock_timeout is not required for non-blocking sockets.\n * Leave this function here (commented out) for reference until\n * CivetWeb 1.9 is tested, and the tests confirme this function is\n * no longer required.\n*/\nstatic int\nset_sock_timeout(SOCKET sock, int milliseconds)\n{\n\tint r0 = 0, r1, r2;\n\n#ifdef _WIN32\n\t/* Windows specific */\n\n\tDWORD tv = (DWORD)milliseconds;\n\n#else\n\t/* Linux, ... (not Windows) */\n\n\tstruct timeval tv;\n\n/* TCP_USER_TIMEOUT/RFC5482 (http://tools.ietf.org/html/rfc5482):\n * max. time waiting for the acknowledged of TCP data before the connection\n * will be forcefully closed and ETIMEDOUT is returned to the application.\n * If this option is not set, the default timeout of 20-30 minutes is used.\n*/\n/* #define TCP_USER_TIMEOUT (18) */\n\n#if defined(TCP_USER_TIMEOUT)\n\tunsigned int uto = (unsigned int)milliseconds;\n\tr0 = setsockopt(sock, 6, TCP_USER_TIMEOUT, (const void *)&uto, sizeof(uto));\n#endif\n\n\tmemset(&tv, 0, sizeof(tv));\n\ttv.tv_sec = milliseconds / 1000;\n\ttv.tv_usec = (milliseconds * 1000) % 1000000;\n\n#endif /* _WIN32 */\n\n\tr1 = setsockopt(\n\t    sock, SOL_SOCKET, SO_RCVTIMEO, (SOCK_OPT_TYPE)&tv, sizeof(tv));\n\tr2 = setsockopt(\n\t    sock, SOL_SOCKET, SO_SNDTIMEO, (SOCK_OPT_TYPE)&tv, sizeof(tv));\n\n\treturn r0 || r1 || r2;\n}\n#endif\n\n\nstatic int\nset_tcp_nodelay(SOCKET sock, int nodelay_on)\n{\n\tif (setsockopt(sock,\n\t               IPPROTO_TCP,\n\t               TCP_NODELAY,\n\t               (SOCK_OPT_TYPE)&nodelay_on,\n\t               sizeof(nodelay_on)) != 0) {\n\t\t/* Error */\n\t\treturn 1;\n\t}\n\t/* OK */\n\treturn 0;\n}\n\n\nstatic void\nclose_socket_gracefully(struct mg_connection *conn)\n{\n#if defined(_WIN32)\n\tchar buf[MG_BUF_LEN];\n\tint n;\n#endif\n\tstruct linger linger;\n\tint error_code = 0;\n\tsocklen_t opt_len = sizeof(error_code);\n\n\tif (!conn) {\n\t\treturn;\n\t}\n\n\t/* http://msdn.microsoft.com/en-us/library/ms739165(v=vs.85).aspx:\n\t * \"Note that enabling a nonzero timeout on a nonblocking socket\n\t * is not recommended.\", so set it to blocking now */\n\tset_blocking_mode(conn->client.sock, 1);\n\n\t/* Send FIN to the client */\n\tshutdown(conn->client.sock, SHUTDOWN_WR);\n\n\n#if defined(_WIN32)\n\t/* Read and discard pending incoming data. If we do not do that and\n\t * close\n\t * the socket, the data in the send buffer may be discarded. This\n\t * behaviour is seen on Windows, when client keeps sending data\n\t * when server decides to close the connection; then when client\n\t * does recv() it gets no data back. */\n\tdo {\n\t\tn = pull(NULL, conn, buf, sizeof(buf), /* Timeout in s: */ 1.0);\n\t} while (n > 0);\n#endif\n\n\t/* Set linger option to avoid socket hanging out after close. This\n\t * prevent ephemeral port exhaust problem under high QPS. */\n\tlinger.l_onoff = 1;\n\tlinger.l_linger = 1;\n\n\tif (getsockopt(conn->client.sock,\n\t               SOL_SOCKET,\n\t               SO_ERROR,\n\t               (char *)&error_code,\n\t               &opt_len) != 0) {\n\t\t/* Cannot determine if socket is already closed. This should\n\t\t * not occur and never did in a test. Log an error message\n\t\t * and continue. */\n\t\tmg_cry(conn,\n\t\t       \"%s: getsockopt(SOL_SOCKET SO_ERROR) failed: %s\",\n\t\t       __func__,\n\t\t       strerror(ERRNO));\n\t} else if (error_code == ECONNRESET) {\n\t\t/* Socket already closed by client/peer, close socket without linger */\n\t} else {\n\n\n\t\t/* Set linger timeout */\n\t\tif (setsockopt(conn->client.sock,\n\t\t               SOL_SOCKET,\n\t\t               SO_LINGER,\n\t\t               (char *)&linger,\n\t\t               sizeof(linger)) != 0) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: setsockopt(SOL_SOCKET SO_LINGER) failed: %s\",\n\t\t\t       __func__,\n\t\t\t       strerror(ERRNO));\n\t\t}\n\t}\n\n\t/* Now we know that our FIN is ACK-ed, safe to close */\n\tclosesocket(conn->client.sock);\n\tconn->client.sock = INVALID_SOCKET;\n}\n\n\nstatic void\nclose_connection(struct mg_connection *conn)\n{\n\tif (!conn || !conn->ctx) {\n\t\treturn;\n\t}\n\n#if defined(USE_LUA) && defined(USE_WEBSOCKET)\n\tif (conn->lua_websocket_state) {\n\t\tlua_websocket_close(conn, conn->lua_websocket_state);\n\t\tconn->lua_websocket_state = NULL;\n\t}\n#endif\n\n\t/* call the connection_close callback if assigned */\n\tif ((conn->ctx->callbacks.connection_close != NULL)\n\t    && (conn->ctx->context_type == 1)) {\n\t\tconn->ctx->callbacks.connection_close(conn);\n\t}\n\n\tmg_lock_connection(conn);\n\n\tconn->must_close = 1;\n\n#ifndef NO_SSL\n\tif (conn->ssl != NULL) {\n\t\t/* Run SSL_shutdown twice to ensure completly close SSL connection\n\t\t */\n\t\tSSL_shutdown(conn->ssl);\n\t\tSSL_free(conn->ssl);\n\t\t/* Avoid CRYPTO_cleanup_all_ex_data(); See discussion:\n\t\t * https://wiki.openssl.org/index.php/Talk:Library_Initialization */\n\t\tERR_remove_state(0);\n\t\tconn->ssl = NULL;\n\t}\n#endif\n\tif (conn->client.sock != INVALID_SOCKET) {\n\t\tclose_socket_gracefully(conn);\n\t\tconn->client.sock = INVALID_SOCKET;\n\t}\n\n\tmg_unlock_connection(conn);\n}\n\n\nvoid\nmg_close_connection(struct mg_connection *conn)\n{\n\tstruct mg_context *client_ctx = NULL;\n\n\tif (conn == NULL) {\n\t\treturn;\n\t}\n\n#if defined(USE_WEBSOCKET)\n\tif (conn->ctx->context_type == 2) {\n\t\tunsigned int i;\n\n\t\t/* ws/wss client */\n\t\tclient_ctx = conn->ctx;\n\n\t\t/* client context: loops must end */\n\t\tconn->ctx->stop_flag = 1;\n\n\t\t/* We need to get the client thread out of the select/recv call here. */\n\t\t/* Since we use a sleep quantum of some seconds to check for recv\n\t\t * timeouts, we will just wait a few seconds in mg_join_thread. */\n\n\t\t/* join worker thread */\n\t\tfor (i = 0; i < client_ctx->cfg_worker_threads; i++) {\n\t\t\tif (client_ctx->workerthreadids[i] != 0) {\n\t\t\t\tmg_join_thread(client_ctx->workerthreadids[i]);\n\t\t\t}\n\t\t}\n\t}\n#else\n\t(void)client_ctx;\n#endif\n\n\tclose_connection(conn);\n\n#ifndef NO_SSL\n\tif (conn->client_ssl_ctx != NULL) {\n\t\tSSL_CTX_free((SSL_CTX *)conn->client_ssl_ctx);\n\t}\n#endif\n\n\tif (client_ctx != NULL) {\n\t\t/* free context */\n\t\tmg_free(client_ctx->workerthreadids);\n\t\tmg_free(client_ctx);\n\t\t(void)pthread_mutex_destroy(&conn->mutex);\n\t\tmg_free(conn);\n\t}\n}\n\n\nstatic struct mg_connection *\nmg_connect_client_impl(const struct mg_client_options *client_options,\n                       int use_ssl,\n                       char *ebuf,\n                       size_t ebuf_len)\n{\n\tstatic struct mg_context fake_ctx;\n\tstruct mg_connection *conn = NULL;\n\tSOCKET sock;\n\tunion usa sa;\n\n\tif (!connect_socket(&fake_ctx,\n\t                    client_options->host,\n\t                    client_options->port,\n\t                    use_ssl,\n\t                    ebuf,\n\t                    ebuf_len,\n\t                    &sock,\n\t                    &sa)) {\n\t\t;\n\t} else if ((conn = (struct mg_connection *)\n\t                mg_calloc(1, sizeof(*conn) + MAX_REQUEST_SIZE)) == NULL) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"calloc(): %s\",\n\t\t            strerror(ERRNO));\n\t\tclosesocket(sock);\n#ifndef NO_SSL\n\t} else if (use_ssl\n\t           && (conn->client_ssl_ctx = SSL_CTX_new(SSLv23_client_method()))\n\t                  == NULL) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"SSL_CTX_new error\");\n\t\tclosesocket(sock);\n\t\tmg_free(conn);\n\t\tconn = NULL;\n#endif /* NO_SSL */\n\n\t} else {\n\n#ifdef USE_IPV6\n\t\tsocklen_t len = (sa.sa.sa_family == AF_INET)\n\t\t                    ? sizeof(conn->client.rsa.sin)\n\t\t                    : sizeof(conn->client.rsa.sin6);\n\t\tstruct sockaddr *psa =\n\t\t    (sa.sa.sa_family == AF_INET)\n\t\t        ? (struct sockaddr *)&(conn->client.rsa.sin)\n\t\t        : (struct sockaddr *)&(conn->client.rsa.sin6);\n#else\n\t\tsocklen_t len = sizeof(conn->client.rsa.sin);\n\t\tstruct sockaddr *psa = (struct sockaddr *)&(conn->client.rsa.sin);\n#endif\n\n\t\tconn->buf_size = MAX_REQUEST_SIZE;\n\t\tconn->buf = (char *)(conn + 1);\n\t\tconn->ctx = &fake_ctx;\n\t\tconn->client.sock = sock;\n\t\tconn->client.lsa = sa;\n\n\t\tif (getsockname(sock, psa, &len) != 0) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: getsockname() failed: %s\",\n\t\t\t       __func__,\n\t\t\t       strerror(ERRNO));\n\t\t}\n\n\t\tconn->client.is_ssl = use_ssl ? 1 : 0;\n\t\t(void)pthread_mutex_init(&conn->mutex, &pthread_mutex_attr);\n\n#ifndef NO_SSL\n\t\tif (use_ssl) {\n\t\t\tfake_ctx.ssl_ctx = conn->client_ssl_ctx;\n\n\t\t\t/* TODO: Check ssl_verify_peer and ssl_ca_path here.\n\t\t\t * SSL_CTX_set_verify call is needed to switch off server\n\t\t\t * certificate checking, which is off by default in OpenSSL and\n\t\t\t * on in yaSSL. */\n\t\t\t/* TODO: SSL_CTX_set_verify(conn->client_ssl_ctx,\n\t\t\t * SSL_VERIFY_PEER, verify_ssl_server); */\n\n\t\t\tif (client_options->client_cert) {\n\t\t\t\tif (!ssl_use_pem_file(&fake_ctx, client_options->client_cert)) {\n\t\t\t\t\tmg_snprintf(NULL,\n\t\t\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t\t\t            ebuf,\n\t\t\t\t\t            ebuf_len,\n\t\t\t\t\t            \"Can not use SSL client certificate\");\n\t\t\t\t\tSSL_CTX_free(conn->client_ssl_ctx);\n\t\t\t\t\tclosesocket(sock);\n\t\t\t\t\tmg_free(conn);\n\t\t\t\t\tconn = NULL;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (client_options->server_cert) {\n\t\t\t\tSSL_CTX_load_verify_locations(conn->client_ssl_ctx,\n\t\t\t\t                              client_options->server_cert,\n\t\t\t\t                              NULL);\n\t\t\t\tSSL_CTX_set_verify(conn->client_ssl_ctx, SSL_VERIFY_PEER, NULL);\n\t\t\t} else {\n\t\t\t\tSSL_CTX_set_verify(conn->client_ssl_ctx, SSL_VERIFY_NONE, NULL);\n\t\t\t}\n\n\t\t\tif (!sslize(conn,\n\t\t\t            conn->client_ssl_ctx,\n\t\t\t            SSL_connect,\n\t\t\t            &(conn->ctx->stop_flag))) {\n\t\t\t\tmg_snprintf(NULL,\n\t\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t\t            ebuf,\n\t\t\t\t            ebuf_len,\n\t\t\t\t            \"SSL connection error\");\n\t\t\t\tSSL_CTX_free(conn->client_ssl_ctx);\n\t\t\t\tclosesocket(sock);\n\t\t\t\tmg_free(conn);\n\t\t\t\tconn = NULL;\n\t\t\t}\n\t\t}\n#endif\n\t}\n\n\tif (conn) {\n\t\tset_blocking_mode(sock, 0);\n\t}\n\n\treturn conn;\n}\n\n\nCIVETWEB_API struct mg_connection *\nmg_connect_client_secure(const struct mg_client_options *client_options,\n                         char *error_buffer,\n                         size_t error_buffer_size)\n{\n\treturn mg_connect_client_impl(client_options,\n\t                              1,\n\t                              error_buffer,\n\t                              error_buffer_size);\n}\n\n\nstruct mg_connection *\nmg_connect_client(const char *host,\n                  int port,\n                  int use_ssl,\n                  char *error_buffer,\n                  size_t error_buffer_size)\n{\n\tstruct mg_client_options opts;\n\tmemset(&opts, 0, sizeof(opts));\n\topts.host = host;\n\topts.port = port;\n\treturn mg_connect_client_impl(&opts,\n\t                              use_ssl,\n\t                              error_buffer,\n\t                              error_buffer_size);\n}\n\n\nstatic const struct {\n\tconst char *proto;\n\tsize_t proto_len;\n\tunsigned default_port;\n} abs_uri_protocols[] = {{\"http://\", 7, 80},\n                         {\"https://\", 8, 443},\n                         {\"ws://\", 5, 80},\n                         {\"wss://\", 6, 443},\n                         {NULL, 0, 0}};\n\n\n/* Check if the uri is valid.\n * return 0 for invalid uri,\n * return 1 for *,\n * return 2 for relative uri,\n * return 3 for absolute uri without port,\n * return 4 for absolute uri with port */\nstatic int\nget_uri_type(const char *uri)\n{\n\tint i;\n\tchar *hostend, *portbegin, *portend;\n\tunsigned long port;\n\n\t/* According to the HTTP standard\n\t * http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2\n\t * URI can be an asterisk (*) or should start with slash (relative uri),\n\t * or it should start with the protocol (absolute uri). */\n\tif (uri[0] == '*' && uri[1] == '\\0') {\n\t\t/* asterisk */\n\t\treturn 1;\n\t}\n\n\t/* Valid URIs according to RFC 3986\n\t * (https://www.ietf.org/rfc/rfc3986.txt)\n\t * must only contain reserved characters :/?#[]@!$&'()*+,;=\n\t * and unreserved characters A-Z a-z 0-9 and -._~\n\t * and % encoded symbols.\n\t */\n\tfor (i = 0; uri[i] != 0; i++) {\n\t\tif (uri[i] < 33) {\n\t\t\t/* control characters and spaces are invalid */\n\t\t\treturn 0;\n\t\t}\n\t\tif (uri[i] > 126) {\n\t\t\t/* non-ascii characters must be % encoded */\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tswitch (uri[i]) {\n\t\t\tcase '\"':  /* 34 */\n\t\t\tcase '<':  /* 60 */\n\t\t\tcase '>':  /* 62 */\n\t\t\tcase '\\\\': /* 92 */\n\t\t\tcase '^':  /* 94 */\n\t\t\tcase '`':  /* 96 */\n\t\t\tcase '{':  /* 123 */\n\t\t\tcase '|':  /* 124 */\n\t\t\tcase '}':  /* 125 */\n\t\t\t\treturn 0;\n\t\t\tdefault:\n\t\t\t\t/* character is ok */\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* A relative uri starts with a / character */\n\tif (uri[0] == '/') {\n\t\t/* relative uri */\n\t\treturn 2;\n\t}\n\n\t/* It could be an absolute uri: */\n\t/* This function only checks if the uri is valid, not if it is\n\t * addressing the current server. So civetweb can also be used\n\t * as a proxy server. */\n\tfor (i = 0; abs_uri_protocols[i].proto != NULL; i++) {\n\t\tif (mg_strncasecmp(uri,\n\t\t                   abs_uri_protocols[i].proto,\n\t\t                   abs_uri_protocols[i].proto_len) == 0) {\n\n\t\t\thostend = strchr(uri + abs_uri_protocols[i].proto_len, '/');\n\t\t\tif (!hostend) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tportbegin = strchr(uri + abs_uri_protocols[i].proto_len, ':');\n\t\t\tif (!portbegin) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tport = strtoul(portbegin + 1, &portend, 10);\n\t\t\tif ((portend != hostend) || !port || !is_valid_port(port)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\treturn 4;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n\n/* Return NULL or the relative uri at the current server */\nstatic const char *\nget_rel_url_at_current_server(const char *uri, const struct mg_connection *conn)\n{\n\tconst char *server_domain;\n\tsize_t server_domain_len;\n\tsize_t request_domain_len = 0;\n\tunsigned long port = 0;\n\tint i;\n\tconst char *hostbegin = NULL;\n\tconst char *hostend = NULL;\n\tconst char *portbegin;\n\tchar *portend;\n\n\t/* DNS is case insensitive, so use case insensitive string compare here\n\t */\n\tserver_domain = conn->ctx->config[AUTHENTICATION_DOMAIN];\n\tif (!server_domain) {\n\t\treturn 0;\n\t}\n\tserver_domain_len = strlen(server_domain);\n\tif (!server_domain_len) {\n\t\treturn 0;\n\t}\n\n\tfor (i = 0; abs_uri_protocols[i].proto != NULL; i++) {\n\t\tif (mg_strncasecmp(uri,\n\t\t                   abs_uri_protocols[i].proto,\n\t\t                   abs_uri_protocols[i].proto_len) == 0) {\n\n\t\t\thostbegin = uri + abs_uri_protocols[i].proto_len;\n\t\t\thostend = strchr(hostbegin, '/');\n\t\t\tif (!hostend) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tportbegin = strchr(hostbegin, ':');\n\t\t\tif ((!portbegin) || (portbegin > hostend)) {\n\t\t\t\tport = abs_uri_protocols[i].default_port;\n\t\t\t\trequest_domain_len = (size_t)(hostend - hostbegin);\n\t\t\t} else {\n\t\t\t\tport = strtoul(portbegin + 1, &portend, 10);\n\t\t\t\tif ((portend != hostend) || !port || !is_valid_port(port)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\trequest_domain_len = (size_t)(portbegin - hostbegin);\n\t\t\t}\n\t\t\t/* protocol found, port set */\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!port) {\n\t\t/* port remains 0 if the protocol is not found */\n\t\treturn 0;\n\t}\n\n/* Check if the request is directed to a different server. */\n/* First check if the port is the same (IPv4 and IPv6). */\n#if defined(USE_IPV6)\n\tif (conn->client.lsa.sa.sa_family == AF_INET6) {\n\t\tif (ntohs(conn->client.lsa.sin6.sin6_port) != port) {\n\t\t\t/* Request is directed to a different port */\n\t\t\treturn 0;\n\t\t}\n\t} else\n#endif\n\t{\n\t\tif (ntohs(conn->client.lsa.sin.sin_port) != port) {\n\t\t\t/* Request is directed to a different port */\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/* Finally check if the server corresponds to the authentication\n\t * domain of the server (the server domain).\n\t * Allow full matches (like http://mydomain.com/path/file.ext), and\n\t * allow subdomain matches (like http://www.mydomain.com/path/file.ext),\n\t * but do not allow substrings (like http://notmydomain.com/path/file.ext\n\t * or http://mydomain.com.fake/path/file.ext).\n\t */\n\tif ((request_domain_len == server_domain_len)\n\t    && (!memcmp(server_domain, hostbegin, server_domain_len))) {\n\t\t/* Request is directed to this server - full name match. */\n\t} else {\n\t\tif (request_domain_len < (server_domain_len + 2)) {\n\t\t\t/* Request is directed to another server: The server name is longer\n\t\t\t * than\n\t\t\t * the request name. Drop this case here to avoid overflows in the\n\t\t\t * following checks. */\n\t\t\treturn 0;\n\t\t}\n\t\tif (hostbegin[request_domain_len - server_domain_len - 1] != '.') {\n\t\t\t/* Request is directed to another server: It could be a substring\n\t\t\t * like notmyserver.com */\n\t\t\treturn 0;\n\t\t}\n\t\tif (0 != memcmp(server_domain,\n\t\t                hostbegin + request_domain_len - server_domain_len,\n\t\t                server_domain_len)) {\n\t\t\t/* Request is directed to another server:\n\t\t\t * The server name is different. */\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn hostend;\n}\n\n\nstatic int\ngetreq(struct mg_connection *conn, char *ebuf, size_t ebuf_len, int *err)\n{\n\tconst char *cl;\n\n\tif (ebuf_len > 0) {\n\t\tebuf[0] = '\\0';\n\t}\n\t*err = 0;\n\n\treset_per_request_attributes(conn);\n\n\tif (!conn) {\n\t\tmg_snprintf(conn,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"Internal error\");\n\t\t*err = 500;\n\t\treturn 0;\n\t}\n\t/* Set the time the request was received. This value should be used for\n\t * timeouts. */\n\tclock_gettime(CLOCK_MONOTONIC, &(conn->req_time));\n\n\tconn->request_len =\n\t    read_request(NULL, conn, conn->buf, conn->buf_size, &conn->data_len);\n\t/* assert(conn->request_len < 0 || conn->data_len >= conn->request_len);\n\t */\n\tif (conn->request_len >= 0 && conn->data_len < conn->request_len) {\n\t\tmg_snprintf(conn,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"Invalid request size\");\n\t\t*err = 500;\n\t\treturn 0;\n\t}\n\n\tif (conn->request_len == 0 && conn->data_len == conn->buf_size) {\n\t\tmg_snprintf(conn,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"Request Too Large\");\n\t\t*err = 413;\n\t\treturn 0;\n\t} else if (conn->request_len <= 0) {\n\t\tif (conn->data_len > 0) {\n\t\t\tmg_snprintf(conn,\n\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t            ebuf,\n\t\t\t            ebuf_len,\n\t\t\t            \"%s\",\n\t\t\t            \"Client sent malformed request\");\n\t\t\t*err = 400;\n\t\t} else {\n\t\t\t/* Server did not recv anything -> just close the connection */\n\t\t\tconn->must_close = 1;\n\t\t\tmg_snprintf(conn,\n\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t            ebuf,\n\t\t\t            ebuf_len,\n\t\t\t            \"%s\",\n\t\t\t            \"Client did not send a request\");\n\t\t\t*err = 0;\n\t\t}\n\t\treturn 0;\n\t} else if (parse_http_message(conn->buf,\n\t                              conn->buf_size,\n\t                              &conn->request_info) <= 0) {\n\t\tmg_snprintf(conn,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"Bad Request\");\n\t\t*err = 400;\n\t\treturn 0;\n\t} else {\n\t\t/* Message is a valid request or response */\n\t\tif ((cl = get_header(&conn->request_info, \"Content-Length\")) != NULL) {\n\t\t\t/* Request/response has content length set */\n\t\t\tchar *endptr = NULL;\n\t\t\tconn->content_len = strtoll(cl, &endptr, 10);\n\t\t\tif (endptr == cl) {\n\t\t\t\tmg_snprintf(conn,\n\t\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t\t            ebuf,\n\t\t\t\t            ebuf_len,\n\t\t\t\t            \"%s\",\n\t\t\t\t            \"Bad Request\");\n\t\t\t\t*err = 411;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t/* Publish the content length back to the request info. */\n\t\t\tconn->request_info.content_length = conn->content_len;\n\t\t} else if ((cl = get_header(&conn->request_info, \"Transfer-Encoding\"))\n\t\t               != NULL\n\t\t           && !mg_strcasecmp(cl, \"chunked\")) {\n\t\t\tconn->is_chunked = 1;\n\t\t} else if (!mg_strcasecmp(conn->request_info.request_method, \"POST\")\n\t\t           || !mg_strcasecmp(conn->request_info.request_method,\n\t\t                             \"PUT\")) {\n\t\t\t/* POST or PUT request without content length set */\n\t\t\tconn->content_len = -1;\n\t\t} else if (!mg_strncasecmp(conn->request_info.request_method,\n\t\t                           \"HTTP/\",\n\t\t                           5)) {\n\t\t\t/* Response without content length set */\n\t\t\tconn->content_len = -1;\n\t\t} else {\n\t\t\t/* Other request */\n\t\t\tconn->content_len = 0;\n\t\t}\n\t}\n\treturn 1;\n}\n\n\nint\nmg_get_response(struct mg_connection *conn,\n                char *ebuf,\n                size_t ebuf_len,\n                int timeout)\n{\n\tif (conn) {\n\t\t/* Implementation of API function for HTTP clients */\n\t\tint err, ret;\n\t\tstruct mg_context *octx = conn->ctx;\n\t\tstruct mg_context rctx = *(conn->ctx);\n\t\tchar txt[32]; /* will not overflow */\n\n\t\tif (timeout >= 0) {\n\t\t\tmg_snprintf(conn, NULL, txt, sizeof(txt), \"%i\", timeout);\n\t\t\trctx.config[REQUEST_TIMEOUT] = txt;\n\t\t\t/* Not required for non-blocking sockets.\n\t\t\tset_sock_timeout(conn->client.sock, timeout);\n\t\t\t*/\n\t\t} else {\n\t\t\trctx.config[REQUEST_TIMEOUT] = NULL;\n\t\t}\n\n\t\tconn->ctx = &rctx;\n\t\tret = getreq(conn, ebuf, ebuf_len, &err);\n\t\tconn->ctx = octx;\n\n\t\t/* TODO: 1) uri is deprecated;\n\t\t *       2) here, ri.uri is the http response code */\n\t\tconn->request_info.uri = conn->request_info.request_uri;\n\n\t\t/* TODO (mid): Define proper return values - maybe return length?\n\t\t * For the first test use <0 for error and >0 for OK */\n\t\treturn (ret == 0) ? -1 : +1;\n\t}\n\treturn -1;\n}\n\n\nstruct mg_connection *\nmg_download(const char *host,\n            int port,\n            int use_ssl,\n            char *ebuf,\n            size_t ebuf_len,\n            const char *fmt,\n            ...)\n{\n\tstruct mg_connection *conn;\n\tva_list ap;\n\tint i;\n\tint reqerr;\n\n\tva_start(ap, fmt);\n\tebuf[0] = '\\0';\n\n\t/* open a connection */\n\tconn = mg_connect_client(host, port, use_ssl, ebuf, ebuf_len);\n\n\tif (conn != NULL) {\n\t\ti = mg_vprintf(conn, fmt, ap);\n\t\tif (i <= 0) {\n\t\t\tmg_snprintf(conn,\n\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t            ebuf,\n\t\t\t            ebuf_len,\n\t\t\t            \"%s\",\n\t\t\t            \"Error sending request\");\n\t\t} else {\n\t\t\tgetreq(conn, ebuf, ebuf_len, &reqerr);\n\n\t\t\t/* TODO: 1) uri is deprecated;\n\t\t\t *       2) here, ri.uri is the http response code */\n\t\t\tconn->request_info.uri = conn->request_info.request_uri;\n\t\t}\n\t}\n\n\t/* if an error occured, close the connection */\n\tif (ebuf[0] != '\\0' && conn != NULL) {\n\t\tmg_close_connection(conn);\n\t\tconn = NULL;\n\t}\n\n\tva_end(ap);\n\treturn conn;\n}\n\n\nstruct websocket_client_thread_data {\n\tstruct mg_connection *conn;\n\tmg_websocket_data_handler data_handler;\n\tmg_websocket_close_handler close_handler;\n\tvoid *callback_data;\n};\n\n\n#if defined(USE_WEBSOCKET)\n#ifdef _WIN32\nstatic unsigned __stdcall websocket_client_thread(void *data)\n#else\nstatic void *\nwebsocket_client_thread(void *data)\n#endif\n{\n\tstruct websocket_client_thread_data *cdata =\n\t    (struct websocket_client_thread_data *)data;\n\n\tmg_set_thread_name(\"ws-clnt\");\n\n\tif (cdata->conn->ctx) {\n\t\tif (cdata->conn->ctx->callbacks.init_thread) {\n\t\t\t/* 3 indicates a websocket client thread */\n\t\t\t/* TODO: check if conn->ctx can be set */\n\t\t\tcdata->conn->ctx->callbacks.init_thread(cdata->conn->ctx, 3);\n\t\t}\n\t}\n\n\tread_websocket(cdata->conn, cdata->data_handler, cdata->callback_data);\n\n\tDEBUG_TRACE(\"%s\", \"Websocket client thread exited\\n\");\n\n\tif (cdata->close_handler != NULL) {\n\t\tcdata->close_handler(cdata->conn, cdata->callback_data);\n\t}\n\n\t/* The websocket_client context has only this thread. If it runs out,\n\t   set the stop_flag to 2 (= \"stopped\"). */\n\tcdata->conn->ctx->stop_flag = 2;\n\n\tmg_free((void *)cdata);\n\n#ifdef _WIN32\n\treturn 0;\n#else\n\treturn NULL;\n#endif\n}\n#endif\n\n\nstruct mg_connection *\nmg_connect_websocket_client(const char *host,\n                            int port,\n                            int use_ssl,\n                            char *error_buffer,\n                            size_t error_buffer_size,\n                            const char *path,\n                            const char *origin,\n                            mg_websocket_data_handler data_func,\n                            mg_websocket_close_handler close_func,\n                            void *user_data)\n{\n\tstruct mg_connection *conn = NULL;\n\n#if defined(USE_WEBSOCKET)\n\tstruct mg_context *newctx = NULL;\n\tstruct websocket_client_thread_data *thread_data;\n\tstatic const char *magic = \"x3JJHMbDL1EzLkh9GBhXDw==\";\n\tstatic const char *handshake_req;\n\n\tif (origin != NULL) {\n\t\thandshake_req = \"GET %s HTTP/1.1\\r\\n\"\n\t\t                \"Host: %s\\r\\n\"\n\t\t                \"Upgrade: websocket\\r\\n\"\n\t\t                \"Connection: Upgrade\\r\\n\"\n\t\t                \"Sec-WebSocket-Key: %s\\r\\n\"\n\t\t                \"Sec-WebSocket-Version: 13\\r\\n\"\n\t\t                \"Origin: %s\\r\\n\"\n\t\t                \"\\r\\n\";\n\t} else {\n\t\thandshake_req = \"GET %s HTTP/1.1\\r\\n\"\n\t\t                \"Host: %s\\r\\n\"\n\t\t                \"Upgrade: websocket\\r\\n\"\n\t\t                \"Connection: Upgrade\\r\\n\"\n\t\t                \"Sec-WebSocket-Key: %s\\r\\n\"\n\t\t                \"Sec-WebSocket-Version: 13\\r\\n\"\n\t\t                \"\\r\\n\";\n\t}\n\n\t/* Establish the client connection and request upgrade */\n\tconn = mg_download(host,\n\t                   port,\n\t                   use_ssl,\n\t                   error_buffer,\n\t                   error_buffer_size,\n\t                   handshake_req,\n\t                   path,\n\t                   host,\n\t                   magic,\n\t                   origin);\n\n\t/* Connection object will be null if something goes wrong */\n\tif (conn == NULL || (strcmp(conn->request_info.request_uri, \"101\") != 0)) {\n\t\tif (!*error_buffer) {\n\t\t\t/* if there is a connection, but it did not return 101,\n\t\t\t * error_buffer is not yet set */\n\t\t\tmg_snprintf(conn,\n\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t            error_buffer,\n\t\t\t            error_buffer_size,\n\t\t\t            \"Unexpected server reply\");\n\t\t}\n\t\tDEBUG_TRACE(\"Websocket client connect error: %s\\r\\n\", error_buffer);\n\t\tif (conn != NULL) {\n\t\t\tmg_free(conn);\n\t\t\tconn = NULL;\n\t\t}\n\t\treturn conn;\n\t}\n\n\t/* For client connections, mg_context is fake. Since we need to set a\n\t * callback function, we need to create a copy and modify it. */\n\tnewctx = (struct mg_context *)mg_malloc(sizeof(struct mg_context));\n\tmemcpy(newctx, conn->ctx, sizeof(struct mg_context));\n\tnewctx->user_data = user_data;\n\tnewctx->context_type = 2;       /* ws/wss client context type */\n\tnewctx->cfg_worker_threads = 1; /* one worker thread will be created */\n\tnewctx->workerthreadids =\n\t    (pthread_t *)mg_calloc(newctx->cfg_worker_threads, sizeof(pthread_t));\n\tconn->ctx = newctx;\n\tthread_data = (struct websocket_client_thread_data *)\n\t    mg_calloc(sizeof(struct websocket_client_thread_data), 1);\n\tthread_data->conn = conn;\n\tthread_data->data_handler = data_func;\n\tthread_data->close_handler = close_func;\n\tthread_data->callback_data = NULL;\n\n\t/* Start a thread to read the websocket client connection\n\t * This thread will automatically stop when mg_disconnect is\n\t * called on the client connection */\n\tif (mg_start_thread_with_id(websocket_client_thread,\n\t                            (void *)thread_data,\n\t                            newctx->workerthreadids) != 0) {\n\t\tmg_free((void *)thread_data);\n\t\tmg_free((void *)newctx->workerthreadids);\n\t\tmg_free((void *)newctx);\n\t\tmg_free((void *)conn);\n\t\tconn = NULL;\n\t\tDEBUG_TRACE(\"%s\",\n\t\t            \"Websocket client connect thread could not be started\\r\\n\");\n\t}\n\n#else\n\t/* Appease \"unused parameter\" warnings */\n\t(void)host;\n\t(void)port;\n\t(void)use_ssl;\n\t(void)error_buffer;\n\t(void)error_buffer_size;\n\t(void)path;\n\t(void)origin;\n\t(void)user_data;\n\t(void)data_func;\n\t(void)close_func;\n#endif\n\n\treturn conn;\n}\n\n\nstatic void\nprocess_new_connection(struct mg_connection *conn)\n{\n\tif (conn && conn->ctx) {\n\t\tstruct mg_request_info *ri = &conn->request_info;\n\t\tint keep_alive_enabled, keep_alive, discard_len;\n\t\tchar ebuf[100];\n\t\tconst char *hostend;\n\t\tint reqerr, uri_type;\n\n\t\tkeep_alive_enabled =\n\t\t    !strcmp(conn->ctx->config[ENABLE_KEEP_ALIVE], \"yes\");\n\n\t\t/* Important: on new connection, reset the receiving buffer. Credit\n\t\t * goes to crule42. */\n\t\tconn->data_len = 0;\n\t\tconn->handled_requests = 0;\n\t\tdo {\n\n\t\t\tDEBUG_TRACE(\"calling getreq (%i times for this connection)\",\n\t\t\t            conn->handled_requests + 1);\n\n\t\t\tif (!getreq(conn, ebuf, sizeof(ebuf), &reqerr)) {\n\t\t\t\t/* The request sent by the client could not be understood by\n\t\t\t\t * the server, or it was incomplete or a timeout. Send an\n\t\t\t\t * error message and close the connection. */\n\t\t\t\tif (reqerr > 0) {\n\t\t\t\t\t/*assert(ebuf[0] != '\\0');*/\n\t\t\t\t\tsend_http_error(conn, reqerr, \"%s\", ebuf);\n\t\t\t\t}\n\t\t\t} else if (strcmp(ri->http_version, \"1.0\")\n\t\t\t           && strcmp(ri->http_version, \"1.1\")) {\n\t\t\t\tmg_snprintf(conn,\n\t\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t\t            ebuf,\n\t\t\t\t            sizeof(ebuf),\n\t\t\t\t            \"Bad HTTP version: [%s]\",\n\t\t\t\t            ri->http_version);\n\t\t\t\tsend_http_error(conn, 505, \"%s\", ebuf);\n\t\t\t}\n\n\t\t\tif (ebuf[0] == '\\0') {\n\t\t\t\turi_type = get_uri_type(conn->request_info.request_uri);\n\t\t\t\tswitch (uri_type) {\n\t\t\t\tcase 1:\n\t\t\t\t\t/* Asterisk */\n\t\t\t\t\tconn->request_info.local_uri = NULL;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t/* relative uri */\n\t\t\t\t\tconn->request_info.local_uri =\n\t\t\t\t\t    conn->request_info.request_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\tcase 4:\n\t\t\t\t\t/* absolute uri (with/without port) */\n\t\t\t\t\thostend = get_rel_url_at_current_server(\n\t\t\t\t\t    conn->request_info.request_uri, conn);\n\t\t\t\t\tif (hostend) {\n\t\t\t\t\t\tconn->request_info.local_uri = hostend;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconn->request_info.local_uri = NULL;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tmg_snprintf(conn,\n\t\t\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t\t\t            ebuf,\n\t\t\t\t\t            sizeof(ebuf),\n\t\t\t\t\t            \"Invalid URI\");\n\t\t\t\t\tsend_http_error(conn, 400, \"%s\", ebuf);\n\t\t\t\t\tconn->request_info.local_uri = NULL;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t/* TODO: cleanup uri, local_uri and request_uri */\n\t\t\t\tconn->request_info.uri = conn->request_info.local_uri;\n\t\t\t}\n\n\t\t\tDEBUG_TRACE(\"http: %s, error: %s\",\n\t\t\t            (ri->http_version ? ri->http_version : \"none\"),\n\t\t\t            (ebuf[0] ? ebuf : \"none\"));\n\n\t\t\tif (ebuf[0] == '\\0') {\n\t\t\t\tif (conn->request_info.local_uri) {\n\t\t\t\t\t/* handle request to local server */\n\t\t\t\t\thandle_request(conn);\n\t\t\t\t\tDEBUG_TRACE(\"%s\", \"handle_request done\");\n\t\t\t\t\tif (conn->ctx->callbacks.end_request != NULL) {\n\t\t\t\t\t\tconn->ctx->callbacks.end_request(conn,\n\t\t\t\t\t\t                                 conn->status_code);\n\t\t\t\t\t\tDEBUG_TRACE(\"%s\", \"end_request callback done\");\n\t\t\t\t\t}\n\t\t\t\t\tlog_access(conn);\n\t\t\t\t} else {\n\t\t\t\t\t/* TODO: handle non-local request (PROXY) */\n\t\t\t\t\tconn->must_close = 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconn->must_close = 1;\n\t\t\t}\n\n\t\t\tif (ri->remote_user != NULL) {\n\t\t\t\tmg_free((void *)ri->remote_user);\n\t\t\t\t/* Important! When having connections with and without auth\n\t\t\t\t * would cause double free and then crash */\n\t\t\t\tri->remote_user = NULL;\n\t\t\t}\n\n\t\t\t/* NOTE(lsm): order is important here. should_keep_alive() call\n\t\t\t * is\n\t\t\t * using parsed request, which will be invalid after memmove's\n\t\t\t * below.\n\t\t\t * Therefore, memorize should_keep_alive() result now for later\n\t\t\t * use\n\t\t\t * in loop exit condition. */\n\t\t\tkeep_alive = (conn->ctx->stop_flag == 0) && keep_alive_enabled\n\t\t\t             && (conn->content_len >= 0) && should_keep_alive(conn);\n\n\n\t\t\t/* Discard all buffered data for this request */\n\t\t\tdiscard_len = ((conn->content_len >= 0) && (conn->request_len > 0)\n\t\t\t               && ((conn->request_len + conn->content_len)\n\t\t\t                   < (int64_t)conn->data_len))\n\t\t\t                  ? (int)(conn->request_len + conn->content_len)\n\t\t\t                  : conn->data_len;\n\t\t\t/*assert(discard_len >= 0);*/\n\t\t\tif (discard_len < 0) {\n\t\t\t\tDEBUG_TRACE(\"internal error: discard_len = %li\",\n\t\t\t\t            (long int)discard_len);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconn->data_len -= discard_len;\n\t\t\tif (conn->data_len > 0) {\n\t\t\t\tDEBUG_TRACE(\"discard_len = %lu\", (long unsigned)discard_len);\n\t\t\t\tmemmove(conn->buf,\n\t\t\t\t        conn->buf + discard_len,\n\t\t\t\t        (size_t)conn->data_len);\n\t\t\t}\n\n\t\t\t/* assert(conn->data_len >= 0); */\n\t\t\t/* assert(conn->data_len <= conn->buf_size); */\n\n\t\t\tif ((conn->data_len < 0) || (conn->data_len > conn->buf_size)) {\n\t\t\t\tDEBUG_TRACE(\"internal error: data_len = %li, buf_size = %li\",\n\t\t\t\t            (long int)conn->data_len,\n\t\t\t\t            (long int)conn->buf_size);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconn->handled_requests++;\n\n\t\t} while (keep_alive);\n\t}\n}\n\n\n#if defined(ALTERNATIVE_QUEUE)\n\nstatic void\nproduce_socket(struct mg_context *ctx, const struct socket *sp)\n{\n\tunsigned int i;\n\n\tfor (;;) {\n\t\tfor (i = 0; i < ctx->cfg_worker_threads; i++) {\n\t\t\t/* find a free worker slot and signal it */\n\t\t\tif (ctx->client_socks[i].in_use == 0) {\n\t\t\t\tctx->client_socks[i] = *sp;\n\t\t\t\tctx->client_socks[i].in_use = 1;\n\t\t\t\tevent_signal(ctx->client_wait_events[i]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t/* queue is full */\n\t\tmg_sleep(1);\n\t}\n}\n\n\nstatic int\nconsume_socket(struct mg_context *ctx, struct socket *sp, int thread_index)\n{\n\tDEBUG_TRACE(\"%s\", \"going idle\");\n\tctx->client_socks[thread_index].in_use = 0;\n\tevent_wait(ctx->client_wait_events[thread_index]);\n\t*sp = ctx->client_socks[thread_index];\n\tDEBUG_TRACE(\"grabbed socket %d, going busy\", sp ? sp->sock : -1);\n\n\treturn !ctx->stop_flag;\n}\n\n#else /* ALTERNATIVE_QUEUE */\n\n/* Worker threads take accepted socket from the queue */\nstatic int\nconsume_socket(struct mg_context *ctx, struct socket *sp, int thread_index)\n{\n#define QUEUE_SIZE(ctx) ((int)(ARRAY_SIZE(ctx->queue)))\n\n\t(void)thread_index;\n\n\t(void)pthread_mutex_lock(&ctx->thread_mutex);\n\tDEBUG_TRACE(\"%s\", \"going idle\");\n\n\t/* If the queue is empty, wait. We're idle at this point. */\n\twhile (ctx->sq_head == ctx->sq_tail && ctx->stop_flag == 0) {\n\t\tpthread_cond_wait(&ctx->sq_full, &ctx->thread_mutex);\n\t}\n\n\t/* If we're stopping, sq_head may be equal to sq_tail. */\n\tif (ctx->sq_head > ctx->sq_tail) {\n\t\t/* Copy socket from the queue and increment tail */\n\t\t*sp = ctx->queue[ctx->sq_tail % QUEUE_SIZE(ctx)];\n\t\tctx->sq_tail++;\n\n\t\tDEBUG_TRACE(\"grabbed socket %d, going busy\", sp ? sp->sock : -1);\n\n\t\t/* Wrap pointers if needed */\n\t\twhile (ctx->sq_tail > QUEUE_SIZE(ctx)) {\n\t\t\tctx->sq_tail -= QUEUE_SIZE(ctx);\n\t\t\tctx->sq_head -= QUEUE_SIZE(ctx);\n\t\t}\n\t}\n\n\t(void)pthread_cond_signal(&ctx->sq_empty);\n\t(void)pthread_mutex_unlock(&ctx->thread_mutex);\n\n\treturn !ctx->stop_flag;\n#undef QUEUE_SIZE\n}\n\n\n/* Master thread adds accepted socket to a queue */\nstatic void\nproduce_socket(struct mg_context *ctx, const struct socket *sp)\n{\n#define QUEUE_SIZE(ctx) ((int)(ARRAY_SIZE(ctx->queue)))\n\tif (!ctx) {\n\t\treturn;\n\t}\n\t(void)pthread_mutex_lock(&ctx->thread_mutex);\n\n\t/* If the queue is full, wait */\n\twhile (ctx->stop_flag == 0\n\t       && ctx->sq_head - ctx->sq_tail >= QUEUE_SIZE(ctx)) {\n\t\t(void)pthread_cond_wait(&ctx->sq_empty, &ctx->thread_mutex);\n\t}\n\n\tif (ctx->sq_head - ctx->sq_tail < QUEUE_SIZE(ctx)) {\n\t\t/* Copy socket to the queue and increment head */\n\t\tctx->queue[ctx->sq_head % QUEUE_SIZE(ctx)] = *sp;\n\t\tctx->sq_head++;\n\t\tDEBUG_TRACE(\"queued socket %d\", sp ? sp->sock : -1);\n\t}\n\n\t(void)pthread_cond_signal(&ctx->sq_full);\n\t(void)pthread_mutex_unlock(&ctx->thread_mutex);\n#undef QUEUE_SIZE\n}\n#endif /* ALTERNATIVE_QUEUE */\n\n\nstruct worker_thread_args {\n\tstruct mg_context *ctx;\n\tint index;\n};\n\n\nstatic void *\nworker_thread_run(struct worker_thread_args *thread_args)\n{\n\tstruct mg_context *ctx = thread_args->ctx;\n\tstruct mg_connection *conn;\n\tstruct mg_workerTLS tls;\n#if defined(MG_LEGACY_INTERFACE)\n\tuint32_t addr;\n#endif\n\n\tmg_set_thread_name(\"worker\");\n\n\ttls.is_master = 0;\n\ttls.thread_idx = (unsigned)mg_atomic_inc(&thread_idx_max);\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\ttls.pthread_cond_helper_mutex = CreateEvent(NULL, FALSE, FALSE, NULL);\n#endif\n\n\tif (ctx->callbacks.init_thread) {\n\t\t/* call init_thread for a worker thread (type 1) */\n\t\tctx->callbacks.init_thread(ctx, 1);\n\t}\n\n\tconn =\n\t    (struct mg_connection *)mg_calloc(1, sizeof(*conn) + MAX_REQUEST_SIZE);\n\tif (conn == NULL) {\n\t\tmg_cry(fc(ctx), \"%s\", \"Cannot create new connection struct, OOM\");\n\t} else {\n\t\tpthread_setspecific(sTlsKey, &tls);\n\t\tconn->buf_size = MAX_REQUEST_SIZE;\n\t\tconn->buf = (char *)(conn + 1);\n\t\tconn->ctx = ctx;\n\t\tconn->thread_index = thread_args->index;\n\t\tconn->request_info.user_data = ctx->user_data;\n\t\t/* Allocate a mutex for this connection to allow communication both\n\t\t * within the request handler and from elsewhere in the application\n\t\t */\n\t\t(void)pthread_mutex_init(&conn->mutex, &pthread_mutex_attr);\n\n\t\t/* Call consume_socket() even when ctx->stop_flag > 0, to let it\n\t\t * signal sq_empty condvar to wake up the master waiting in\n\t\t * produce_socket() */\n\t\twhile (consume_socket(ctx, &conn->client, conn->thread_index)) {\n\t\t\tconn->conn_birth_time = time(NULL);\n\n/* Fill in IP, port info early so even if SSL setup below fails,\n * error handler would have the corresponding info.\n * Thanks to Johannes Winkelmann for the patch.\n */\n#if defined(USE_IPV6)\n\t\t\tif (conn->client.rsa.sa.sa_family == AF_INET6) {\n\t\t\t\tconn->request_info.remote_port =\n\t\t\t\t    ntohs(conn->client.rsa.sin6.sin6_port);\n\t\t\t} else\n#endif\n\t\t\t{\n\t\t\t\tconn->request_info.remote_port =\n\t\t\t\t    ntohs(conn->client.rsa.sin.sin_port);\n\t\t\t}\n\n\t\t\tsockaddr_to_string(conn->request_info.remote_addr,\n\t\t\t                   sizeof(conn->request_info.remote_addr),\n\t\t\t                   &conn->client.rsa);\n\n\t\t\tDEBUG_TRACE(\"Start processing connection from %s\",\n\t\t\t            conn->request_info.remote_addr);\n\n#if defined(MG_LEGACY_INTERFACE)\n\t\t\t/* This legacy interface only works for the IPv4 case */\n\t\t\taddr = ntohl(conn->client.rsa.sin.sin_addr.s_addr);\n\t\t\tmemcpy(&conn->request_info.remote_ip, &addr, 4);\n#endif\n\n\t\t\tconn->request_info.is_ssl = conn->client.is_ssl;\n\n\t\t\tif (conn->client.is_ssl) {\n#ifndef NO_SSL\n\t\t\t\t/* HTTPS connection */\n\t\t\t\tif (sslize(conn,\n\t\t\t\t           conn->ctx->ssl_ctx,\n\t\t\t\t           SSL_accept,\n\t\t\t\t           &(conn->ctx->stop_flag))) {\n\t\t\t\t\t/* Get SSL client certificate information (if set) */\n\t\t\t\t\tssl_get_client_cert_info(conn);\n\n\t\t\t\t\t/* process HTTPS connection */\n\t\t\t\t\tprocess_new_connection(conn);\n\n\t\t\t\t\t/* Free client certificate info */\n\t\t\t\t\tif (conn->request_info.client_cert) {\n\t\t\t\t\t\tmg_free(\n\t\t\t\t\t\t    (void *)(conn->request_info.client_cert->subject));\n\t\t\t\t\t\tmg_free(\n\t\t\t\t\t\t    (void *)(conn->request_info.client_cert->issuer));\n\t\t\t\t\t\tmg_free(\n\t\t\t\t\t\t    (void *)(conn->request_info.client_cert->serial));\n\t\t\t\t\t\tmg_free(\n\t\t\t\t\t\t    (void *)(conn->request_info.client_cert->finger));\n\t\t\t\t\t\tconn->request_info.client_cert->subject = 0;\n\t\t\t\t\t\tconn->request_info.client_cert->issuer = 0;\n\t\t\t\t\t\tconn->request_info.client_cert->serial = 0;\n\t\t\t\t\t\tconn->request_info.client_cert->finger = 0;\n\t\t\t\t\t\tmg_free(conn->request_info.client_cert);\n\t\t\t\t\t\tconn->request_info.client_cert = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n#endif\n\t\t\t} else {\n\t\t\t\t/* process HTTP connection */\n\t\t\t\tprocess_new_connection(conn);\n\t\t\t}\n\n\t\t\tDEBUG_TRACE(\"Done processing connection from %s (%f sec)\",\n\t\t\t            conn->request_info.remote_addr,\n\t\t\t            difftime(time(NULL), conn->conn_birth_time));\n\n\t\t\tclose_connection(conn);\n\n\t\t\tDEBUG_TRACE(\"%s\", \"Connection closed\");\n\t\t}\n\t}\n\n\tpthread_setspecific(sTlsKey, NULL);\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\tCloseHandle(tls.pthread_cond_helper_mutex);\n#endif\n\tpthread_mutex_destroy(&conn->mutex);\n\tmg_free(conn);\n\n\tDEBUG_TRACE(\"%s\", \"exiting\");\n\treturn NULL;\n}\n\n\n/* Threads have different return types on Windows and Unix. */\n#ifdef _WIN32\nstatic unsigned __stdcall worker_thread(void *thread_func_param)\n{\n\tstruct worker_thread_args *pwta =\n\t    (struct worker_thread_args *)thread_func_param;\n\tworker_thread_run(pwta);\n\tmg_free(thread_func_param);\n\treturn 0;\n}\n#else\nstatic void *\nworker_thread(void *thread_func_param)\n{\n\tstruct worker_thread_args *pwta =\n\t    (struct worker_thread_args *)thread_func_param;\n\tworker_thread_run(pwta);\n\tmg_free(thread_func_param);\n\treturn NULL;\n}\n#endif /* _WIN32 */\n\n\nstatic void\naccept_new_connection(const struct socket *listener, struct mg_context *ctx)\n{\n\tstruct socket so;\n\tchar src_addr[IP_ADDR_STR_LEN];\n\tsocklen_t len = sizeof(so.rsa);\n\tint on = 1;\n\tint timeout;\n\n\tif (!listener) {\n\t\treturn;\n\t}\n\n\tif ((so.sock = accept(listener->sock, &so.rsa.sa, &len))\n\t    == INVALID_SOCKET) {\n\t} else if (!check_acl(ctx, ntohl(*(uint32_t *)&so.rsa.sin.sin_addr))) {\n\t\tsockaddr_to_string(src_addr, sizeof(src_addr), &so.rsa);\n\t\tmg_cry(fc(ctx), \"%s: %s is not allowed to connect\", __func__, src_addr);\n\t\tclosesocket(so.sock);\n\t\tso.sock = INVALID_SOCKET;\n\t} else {\n\t\t/* Put so socket structure into the queue */\n\t\tDEBUG_TRACE(\"Accepted socket %d\", (int)so.sock);\n\t\tset_close_on_exec(so.sock, fc(ctx));\n\t\tso.is_ssl = listener->is_ssl;\n\t\tso.ssl_redir = listener->ssl_redir;\n\t\tif (getsockname(so.sock, &so.lsa.sa, &len) != 0) {\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"%s: getsockname() failed: %s\",\n\t\t\t       __func__,\n\t\t\t       strerror(ERRNO));\n\t\t}\n\n\t\t/* Set TCP keep-alive. This is needed because if HTTP-level\n\t\t * keep-alive\n\t\t * is enabled, and client resets the connection, server won't get\n\t\t * TCP FIN or RST and will keep the connection open forever. With\n\t\t * TCP keep-alive, next keep-alive handshake will figure out that\n\t\t * the client is down and will close the server end.\n\t\t * Thanks to Igor Klopov who suggested the patch. */\n\t\tif (setsockopt(so.sock,\n\t\t               SOL_SOCKET,\n\t\t               SO_KEEPALIVE,\n\t\t               (SOCK_OPT_TYPE)&on,\n\t\t               sizeof(on)) != 0) {\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"%s: setsockopt(SOL_SOCKET SO_KEEPALIVE) failed: %s\",\n\t\t\t       __func__,\n\t\t\t       strerror(ERRNO));\n\t\t}\n\n\t\t/* Disable TCP Nagle's algorithm. Normally TCP packets are coalesced\n\t\t * to effectively fill up the underlying IP packet payload and\n\t\t * reduce the overhead of sending lots of small buffers. However\n\t\t * this hurts the server's throughput (ie. operations per second)\n\t\t * when HTTP 1.1 persistent connections are used and the responses\n\t\t * are relatively small (eg. less than 1400 bytes).\n\t\t */\n\t\tif ((ctx != NULL) && (ctx->config[CONFIG_TCP_NODELAY] != NULL)\n\t\t    && (!strcmp(ctx->config[CONFIG_TCP_NODELAY], \"1\"))) {\n\t\t\tif (set_tcp_nodelay(so.sock, 1) != 0) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"%s: setsockopt(IPPROTO_TCP TCP_NODELAY) failed: %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       strerror(ERRNO));\n\t\t\t}\n\t\t}\n\n\t\tif (ctx && ctx->config[REQUEST_TIMEOUT]) {\n\t\t\ttimeout = atoi(ctx->config[REQUEST_TIMEOUT]);\n\t\t} else {\n\t\t\ttimeout = -1;\n\t\t}\n\n\n\t\t/* TODO: if non blocking sockets are used, timeouts are implemented\n\t\t * differently */\n\t\t// if (timeout > 0) {\n\t\t//\tset_sock_timeout(so.sock, timeout);\n\t\t//}\n\t\t(void)timeout;\n\t\tset_blocking_mode(so.sock, 0);\n\n\t\tproduce_socket(ctx, &so);\n\t}\n}\n\n\nstatic void\nmaster_thread_run(void *thread_func_param)\n{\n\tstruct mg_context *ctx = (struct mg_context *)thread_func_param;\n\tstruct mg_workerTLS tls;\n\tstruct pollfd *pfd;\n\tunsigned int i;\n\tunsigned int workerthreadcount;\n\n\tif (!ctx) {\n\t\treturn;\n\t}\n\n\tmg_set_thread_name(\"master\");\n\n/* Increase priority of the master thread */\n#if defined(_WIN32)\n\tSetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_ABOVE_NORMAL);\n#elif defined(USE_MASTER_THREAD_PRIORITY)\n\tint min_prio = sched_get_priority_min(SCHED_RR);\n\tint max_prio = sched_get_priority_max(SCHED_RR);\n\tif ((min_prio >= 0) && (max_prio >= 0)\n\t    && ((USE_MASTER_THREAD_PRIORITY) <= max_prio)\n\t    && ((USE_MASTER_THREAD_PRIORITY) >= min_prio)) {\n\t\tstruct sched_param sched_param = {0};\n\t\tsched_param.sched_priority = (USE_MASTER_THREAD_PRIORITY);\n\t\tpthread_setschedparam(pthread_self(), SCHED_RR, &sched_param);\n\t}\n#endif\n\n/* Initialize thread local storage */\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\ttls.pthread_cond_helper_mutex = CreateEvent(NULL, FALSE, FALSE, NULL);\n#endif\n\ttls.is_master = 1;\n\tpthread_setspecific(sTlsKey, &tls);\n\n\tif (ctx->callbacks.init_thread) {\n\t\t/* Callback for the master thread (type 0) */\n\t\tctx->callbacks.init_thread(ctx, 0);\n\t}\n\n\t/* Server starts *now* */\n\tctx->start_time = time(NULL);\n\n\t/* Start the server */\n\tpfd = ctx->listening_socket_fds;\n\twhile (ctx->stop_flag == 0) {\n\t\tfor (i = 0; i < ctx->num_listening_sockets; i++) {\n\t\t\tpfd[i].fd = ctx->listening_sockets[i].sock;\n\t\t\tpfd[i].events = POLLIN;\n\t\t}\n\n\t\tif (poll(pfd, ctx->num_listening_sockets, 200) > 0) {\n\t\t\tfor (i = 0; i < ctx->num_listening_sockets; i++) {\n\t\t\t\t/* NOTE(lsm): on QNX, poll() returns POLLRDNORM after the\n\t\t\t\t * successful poll, and POLLIN is defined as\n\t\t\t\t * (POLLRDNORM | POLLRDBAND)\n\t\t\t\t * Therefore, we're checking pfd[i].revents & POLLIN, not\n\t\t\t\t * pfd[i].revents == POLLIN. */\n\t\t\t\tif (ctx->stop_flag == 0 && (pfd[i].revents & POLLIN)) {\n\t\t\t\t\taccept_new_connection(&ctx->listening_sockets[i], ctx);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Here stop_flag is 1 - Initiate shutdown. */\n\tDEBUG_TRACE(\"%s\", \"stopping workers\");\n\n\t/* Stop signal received: somebody called mg_stop. Quit. */\n\tclose_all_listening_sockets(ctx);\n\n\t/* Wakeup workers that are waiting for connections to handle. */\n\t(void)pthread_mutex_lock(&ctx->thread_mutex);\n#if defined(ALTERNATIVE_QUEUE)\n\tfor (i = 0; i < ctx->cfg_worker_threads; i++) {\n\t\tevent_signal(ctx->client_wait_events[i]);\n\n\t\t/* Since we know all sockets, we can shutdown the connections. */\n\t\tif (ctx->client_socks[i].in_use) {\n\t\t\tshutdown(ctx->client_socks[i].sock, SHUTDOWN_BOTH);\n\t\t}\n\t}\n#else\n\tpthread_cond_broadcast(&ctx->sq_full);\n#endif\n\t(void)pthread_mutex_unlock(&ctx->thread_mutex);\n\n\t/* Join all worker threads to avoid leaking threads. */\n\tworkerthreadcount = ctx->cfg_worker_threads;\n\tfor (i = 0; i < workerthreadcount; i++) {\n\t\tif (ctx->workerthreadids[i] != 0) {\n\t\t\tmg_join_thread(ctx->workerthreadids[i]);\n\t\t}\n\t}\n\n#if !defined(NO_SSL)\n\tif (ctx->ssl_ctx != NULL) {\n\t\tuninitialize_ssl(ctx);\n\t}\n#endif\n\tDEBUG_TRACE(\"%s\", \"exiting\");\n\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\tCloseHandle(tls.pthread_cond_helper_mutex);\n#endif\n\tpthread_setspecific(sTlsKey, NULL);\n\n\t/* Signal mg_stop() that we're done.\n\t * WARNING: This must be the very last thing this\n\t * thread does, as ctx becomes invalid after this line. */\n\tctx->stop_flag = 2;\n}\n\n\n/* Threads have different return types on Windows and Unix. */\n#ifdef _WIN32\nstatic unsigned __stdcall master_thread(void *thread_func_param)\n{\n\tmaster_thread_run(thread_func_param);\n\treturn 0;\n}\n#else\nstatic void *\nmaster_thread(void *thread_func_param)\n{\n\tmaster_thread_run(thread_func_param);\n\treturn NULL;\n}\n#endif /* _WIN32 */\n\n\nstatic void\nfree_context(struct mg_context *ctx)\n{\n\tint i;\n\tstruct mg_handler_info *tmp_rh;\n\n\tif (ctx == NULL) {\n\t\treturn;\n\t}\n\n\tif (ctx->callbacks.exit_context) {\n\t\tctx->callbacks.exit_context(ctx);\n\t}\n\n\t/* All threads exited, no sync is needed. Destroy thread mutex and\n\t * condvars\n\t */\n\t(void)pthread_mutex_destroy(&ctx->thread_mutex);\n#if defined(ALTERNATIVE_QUEUE)\n\tmg_free(ctx->client_socks);\n\tfor (i = 0; (unsigned)i < ctx->cfg_worker_threads; i++) {\n\t\tevent_destroy(ctx->client_wait_events[i]);\n\t}\n\tmg_free(ctx->client_wait_events);\n#else\n\t(void)pthread_cond_destroy(&ctx->sq_empty);\n\t(void)pthread_cond_destroy(&ctx->sq_full);\n#endif\n\n\t/* Destroy other context global data structures mutex */\n\t(void)pthread_mutex_destroy(&ctx->nonce_mutex);\n\n#if defined(USE_TIMERS)\n\ttimers_exit(ctx);\n#endif\n\n\t/* Deallocate config parameters */\n\tfor (i = 0; i < NUM_OPTIONS; i++) {\n\t\tif (ctx->config[i] != NULL) {\n#if defined(_MSC_VER)\n#pragma warning(suppress : 6001)\n#endif\n\t\t\tmg_free(ctx->config[i]);\n\t\t}\n\t}\n\n\t/* Deallocate request handlers */\n\twhile (ctx->handlers) {\n\t\ttmp_rh = ctx->handlers;\n\t\tctx->handlers = tmp_rh->next;\n\t\tmg_free(tmp_rh->uri);\n\t\tmg_free(tmp_rh);\n\t}\n\n#ifndef NO_SSL\n\t/* Deallocate SSL context */\n\tif (ctx->ssl_ctx != NULL) {\n\t\tSSL_CTX_free(ctx->ssl_ctx);\n\t}\n#endif /* !NO_SSL */\n\n\t/* Deallocate worker thread ID array */\n\tif (ctx->workerthreadids != NULL) {\n\t\tmg_free(ctx->workerthreadids);\n\t}\n\n\t/* Deallocate the tls variable */\n\tif (mg_atomic_dec(&sTlsInit) == 0) {\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\t\tDeleteCriticalSection(&global_log_file_lock);\n#endif /* _WIN32 && !__SYMBIAN32__ */\n#if !defined(_WIN32)\n\t\tpthread_mutexattr_destroy(&pthread_mutex_attr);\n#endif\n\n\t\tpthread_key_delete(sTlsKey);\n\n#if defined(USE_LUA)\n\t\tlua_exit_optional_libraries();\n#endif\n\t}\n\n\t/* deallocate system name string */\n\tmg_free(ctx->systemName);\n\n\t/* Deallocate context itself */\n\tmg_free(ctx);\n}\n\n\nvoid\nmg_stop(struct mg_context *ctx)\n{\n\tpthread_t mt;\n\tif (!ctx) {\n\t\treturn;\n\t}\n\n\t/* We don't use a lock here. Calling mg_stop with the same ctx from\n\t * two threads is not allowed. */\n\tmt = ctx->masterthreadid;\n\tif (mt == 0) {\n\t\treturn;\n\t}\n\n\tctx->masterthreadid = 0;\n\n\t/* Set stop flag, so all threads know they have to exit. */\n\tctx->stop_flag = 1;\n\n\t/* Wait until everything has stopped. */\n\twhile (ctx->stop_flag != 2) {\n\t\t(void)mg_sleep(10);\n\t}\n\n\tmg_join_thread(mt);\n\tfree_context(ctx);\n\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\t(void)WSACleanup();\n#endif /* _WIN32 && !__SYMBIAN32__ */\n}\n\n\nstatic void\nget_system_name(char **sysName)\n{\n#if defined(_WIN32)\n#if !defined(__SYMBIAN32__)\n#if defined(_WIN32_WCE)\n\t*sysName = mg_strdup(\"WinCE\");\n#else\n\tchar name[128];\n\tDWORD dwVersion = 0;\n\tDWORD dwMajorVersion = 0;\n\tDWORD dwMinorVersion = 0;\n\tDWORD dwBuild = 0;\n\n#ifdef _MSC_VER\n#pragma warning(push)\n/* GetVersion was declared deprecated */\n#pragma warning(disable : 4996)\n#endif\n\tdwVersion = GetVersion();\n#ifdef _MSC_VER\n#pragma warning(pop)\n#endif\n\n\tdwMajorVersion = (DWORD)(LOBYTE(LOWORD(dwVersion)));\n\tdwMinorVersion = (DWORD)(HIBYTE(LOWORD(dwVersion)));\n\tdwBuild = ((dwVersion < 0x80000000) ? (DWORD)(HIWORD(dwVersion)) : 0);\n\t(void)dwBuild;\n\n\tsprintf(name,\n\t        \"Windows %u.%u\",\n\t        (unsigned)dwMajorVersion,\n\t        (unsigned)dwMinorVersion);\n\t*sysName = mg_strdup(name);\n#endif\n#else\n\t*sysName = mg_strdup(\"Symbian\");\n#endif\n#else\n\tstruct utsname name;\n\tmemset(&name, 0, sizeof(name));\n\tuname(&name);\n\t*sysName = mg_strdup(name.sysname);\n#endif\n}\n\n\nstruct mg_context *\nmg_start(const struct mg_callbacks *callbacks,\n         void *user_data,\n         const char **options)\n{\n\tstruct mg_context *ctx;\n\tconst char *name, *value, *default_value;\n\tint idx, ok, workerthreadcount;\n\tunsigned int i;\n\tvoid (*exit_callback)(const struct mg_context *ctx) = 0;\n\n\tstruct mg_workerTLS tls;\n\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\tWSADATA data;\n\tWSAStartup(MAKEWORD(2, 2), &data);\n#endif /* _WIN32 && !__SYMBIAN32__ */\n\n\t/* Allocate context and initialize reasonable general case defaults. */\n\tif ((ctx = (struct mg_context *)mg_calloc(1, sizeof(*ctx))) == NULL) {\n\t\treturn NULL;\n\t}\n\n\t/* Random number generator will initialize at the first call */\n\tctx->auth_nonce_mask =\n\t    (uint64_t)get_random() ^ (uint64_t)(ptrdiff_t)(options);\n\n\tif (mg_atomic_inc(&sTlsInit) == 1) {\n\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\t\tInitializeCriticalSection(&global_log_file_lock);\n#endif /* _WIN32 && !__SYMBIAN32__ */\n#if !defined(_WIN32)\n\t\tpthread_mutexattr_init(&pthread_mutex_attr);\n\t\tpthread_mutexattr_settype(&pthread_mutex_attr, PTHREAD_MUTEX_RECURSIVE);\n#endif\n\n\t\tif (0 != pthread_key_create(&sTlsKey, tls_dtor)) {\n\t\t\t/* Fatal error - abort start. However, this situation should\n\t\t\t * never\n\t\t\t * occur in practice. */\n\t\t\tmg_atomic_dec(&sTlsInit);\n\t\t\tmg_cry(fc(ctx), \"Cannot initialize thread local storage\");\n\t\t\tmg_free(ctx);\n\t\t\treturn NULL;\n\t\t}\n\n#if defined(USE_LUA)\n\t\tlua_init_optional_libraries();\n#endif\n\n\t} else {\n\t\t/* TODO (low): istead of sleeping, check if sTlsKey is already\n\t\t * initialized. */\n\t\tmg_sleep(1);\n\t}\n\n\ttls.is_master = -1;\n\ttls.thread_idx = (unsigned)mg_atomic_inc(&thread_idx_max);\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\ttls.pthread_cond_helper_mutex = NULL;\n#endif\n\tpthread_setspecific(sTlsKey, &tls);\n\n\tok = 0 == pthread_mutex_init(&ctx->thread_mutex, &pthread_mutex_attr);\n#if !defined(ALTERNATIVE_QUEUE)\n\tok &= 0 == pthread_cond_init(&ctx->sq_empty, NULL);\n\tok &= 0 == pthread_cond_init(&ctx->sq_full, NULL);\n#endif\n\tok &= 0 == pthread_mutex_init(&ctx->nonce_mutex, &pthread_mutex_attr);\n\tif (!ok) {\n\t\t/* Fatal error - abort start. However, this situation should never\n\t\t * occur in practice. */\n\t\tmg_cry(fc(ctx), \"Cannot initialize thread synchronization objects\");\n\t\tmg_free(ctx);\n\t\tpthread_setspecific(sTlsKey, NULL);\n\t\treturn NULL;\n\t}\n\n\tif (callbacks) {\n\t\tctx->callbacks = *callbacks;\n\t\texit_callback = callbacks->exit_context;\n\t\tctx->callbacks.exit_context = 0;\n\t}\n\tctx->user_data = user_data;\n\tctx->handlers = NULL;\n\n#if defined(USE_LUA) && defined(USE_WEBSOCKET)\n\tctx->shared_lua_websockets = 0;\n#endif\n\n\twhile (options && (name = *options++) != NULL) {\n\t\tif ((idx = get_option_index(name)) == -1) {\n\t\t\tmg_cry(fc(ctx), \"Invalid option: %s\", name);\n\t\t\tfree_context(ctx);\n\t\t\tpthread_setspecific(sTlsKey, NULL);\n\t\t\treturn NULL;\n\t\t} else if ((value = *options++) == NULL) {\n\t\t\tmg_cry(fc(ctx), \"%s: option value cannot be NULL\", name);\n\t\t\tfree_context(ctx);\n\t\t\tpthread_setspecific(sTlsKey, NULL);\n\t\t\treturn NULL;\n\t\t}\n\t\tif (ctx->config[idx] != NULL) {\n\t\t\tmg_cry(fc(ctx), \"warning: %s: duplicate option\", name);\n\t\t\tmg_free(ctx->config[idx]);\n\t\t}\n\t\tctx->config[idx] = mg_strdup(value);\n\t\tDEBUG_TRACE(\"[%s] -> [%s]\", name, value);\n\t}\n\n\t/* Set default value if needed */\n\tfor (i = 0; config_options[i].name != NULL; i++) {\n\t\tdefault_value = config_options[i].default_value;\n\t\tif (ctx->config[i] == NULL && default_value != NULL) {\n\t\t\tctx->config[i] = mg_strdup(default_value);\n\t\t}\n\t}\n\n#if defined(NO_FILES)\n\tif (ctx->config[DOCUMENT_ROOT] != NULL) {\n\t\tmg_cry(fc(ctx), \"%s\", \"Document root must not be set\");\n\t\tfree_context(ctx);\n\t\tpthread_setspecific(sTlsKey, NULL);\n\t\treturn NULL;\n\t}\n#endif\n\n\tget_system_name(&ctx->systemName);\n\n\t/* NOTE(lsm): order is important here. SSL certificates must\n\t * be initialized before listening ports. UID must be set last. */\n\tif (!set_gpass_option(ctx) ||\n#if !defined(NO_SSL)\n\t    !set_ssl_option(ctx) ||\n#endif\n\t    !set_ports_option(ctx) ||\n#if !defined(_WIN32)\n\t    !set_uid_option(ctx) ||\n#endif\n\t    !set_acl_option(ctx)) {\n\t\tfree_context(ctx);\n\t\tpthread_setspecific(sTlsKey, NULL);\n\t\treturn NULL;\n\t}\n\n#if !defined(_WIN32) && !defined(__SYMBIAN32__)\n\t/* Ignore SIGPIPE signal, so if browser cancels the request, it\n\t * won't kill the whole process. */\n\t(void)signal(SIGPIPE, SIG_IGN);\n#endif /* !_WIN32 && !__SYMBIAN32__ */\n\n\tworkerthreadcount = atoi(ctx->config[NUM_THREADS]);\n\n\tif (workerthreadcount > MAX_WORKER_THREADS) {\n\t\tmg_cry(fc(ctx), \"Too many worker threads\");\n\t\tfree_context(ctx);\n\t\tpthread_setspecific(sTlsKey, NULL);\n\t\treturn NULL;\n\t}\n\n\tif (workerthreadcount > 0) {\n\t\tctx->cfg_worker_threads = ((unsigned int)(workerthreadcount));\n\t\tctx->workerthreadids =\n\t\t    (pthread_t *)mg_calloc(ctx->cfg_worker_threads, sizeof(pthread_t));\n\t\tif (ctx->workerthreadids == NULL) {\n\t\t\tmg_cry(fc(ctx), \"Not enough memory for worker thread ID array\");\n\t\t\tfree_context(ctx);\n\t\t\tpthread_setspecific(sTlsKey, NULL);\n\t\t\treturn NULL;\n\t\t}\n\n#if defined(ALTERNATIVE_QUEUE)\n\t\tctx->client_wait_events = mg_calloc(sizeof(ctx->client_wait_events[0]),\n\t\t                                    ctx->cfg_worker_threads);\n\t\tif (ctx->client_wait_events == NULL) {\n\t\t\tmg_cry(fc(ctx), \"Not enough memory for worker event array\");\n\t\t\tmg_free(ctx->workerthreadids);\n\t\t\tfree_context(ctx);\n\t\t\tpthread_setspecific(sTlsKey, NULL);\n\t\t\treturn NULL;\n\t\t}\n\n\t\tctx->client_socks =\n\t\t    mg_calloc(sizeof(ctx->client_socks[0]), ctx->cfg_worker_threads);\n\t\tif (ctx->client_wait_events == NULL) {\n\t\t\tmg_cry(fc(ctx), \"Not enough memory for worker socket array\");\n\t\t\tmg_free(ctx->client_socks);\n\t\t\tmg_free(ctx->workerthreadids);\n\t\t\tfree_context(ctx);\n\t\t\tpthread_setspecific(sTlsKey, NULL);\n\t\t\treturn NULL;\n\t\t}\n\n\t\tfor (i = 0; (unsigned)i < ctx->cfg_worker_threads; i++) {\n\t\t\tctx->client_wait_events[i] = event_create();\n\t\t\tif (ctx->client_wait_events[i] == 0) {\n\t\t\t\tmg_cry(fc(ctx), \"Error creating worker event %i\", i);\n\t\t\t\t/* TODO: clean all and exit */\n\t\t\t}\n\t\t}\n#endif\n\t}\n\n#if defined(USE_TIMERS)\n\tif (timers_init(ctx) != 0) {\n\t\tmg_cry(fc(ctx), \"Error creating timers\");\n\t\tfree_context(ctx);\n\t\tpthread_setspecific(sTlsKey, NULL);\n\t\treturn NULL;\n\t}\n#endif\n\n\t/* Context has been created - init user libraries */\n\tif (ctx->callbacks.init_context) {\n\t\tctx->callbacks.init_context(ctx);\n\t}\n\tctx->callbacks.exit_context = exit_callback;\n\tctx->context_type = 1; /* server context */\n\n\t/* Start master (listening) thread */\n\tmg_start_thread_with_id(master_thread, ctx, &ctx->masterthreadid);\n\n\t/* Start worker threads */\n\tfor (i = 0; i < ctx->cfg_worker_threads; i++) {\n\t\tstruct worker_thread_args *wta =\n\t\t    mg_malloc(sizeof(struct worker_thread_args));\n\t\tif (wta) {\n\t\t\twta->ctx = ctx;\n\t\t\twta->index = (int)i;\n\t\t}\n\n\t\tif ((wta == NULL)\n\t\t    || (mg_start_thread_with_id(worker_thread,\n\t\t                                wta,\n\t\t                                &ctx->workerthreadids[i]) != 0)) {\n\n\t\t\t/* thread was not created */\n\t\t\tif (wta != NULL) {\n\t\t\t\tmg_free(wta);\n\t\t\t}\n\n\t\t\tif (i > 0) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"Cannot start worker thread %i: error %ld\",\n\t\t\t\t       i + 1,\n\t\t\t\t       (long)ERRNO);\n\t\t\t} else {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"Cannot create threads: error %ld\",\n\t\t\t\t       (long)ERRNO);\n\t\t\t\tfree_context(ctx);\n\t\t\t\tpthread_setspecific(sTlsKey, NULL);\n\t\t\t\treturn NULL;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tpthread_setspecific(sTlsKey, NULL);\n\treturn ctx;\n}\n\n\n/* Feature check API function */\nunsigned\nmg_check_feature(unsigned feature)\n{\n\tstatic const unsigned feature_set = 0\n/* Set bits for available features according to API documentation.\n * This bit mask is created at compile time, according to the active\n * preprocessor defines. It is a single const value at runtime. */\n#if !defined(NO_FILES)\n\t                                    | 0x0001u\n#endif\n#if !defined(NO_SSL)\n\t                                    | 0x0002u\n#endif\n#if !defined(NO_CGI)\n\t                                    | 0x0004u\n#endif\n#if defined(USE_IPV6)\n\t                                    | 0x0008u\n#endif\n#if defined(USE_WEBSOCKET)\n\t                                    | 0x0010u\n#endif\n#if defined(USE_LUA)\n\t                                    | 0x0020u\n#endif\n#if defined(USE_DUKTAPE)\n\t                                    | 0x0040u\n#endif\n#if !defined(NO_CACHING)\n\t                                    | 0x0080u\n#endif\n\n/* Set some extra bits not defined in the API documentation.\n * These bits may change without further notice. */\n#if defined(MG_LEGACY_INTERFACE)\n\t                                    | 0x8000u\n#endif\n#if defined(MEMORY_DEBUGGING)\n\t                                    | 0x0100u\n#endif\n#if defined(USE_TIMERS)\n\t                                    | 0x0200u\n#endif\n#if !defined(NO_NONCE_CHECK)\n\t                                    | 0x0400u\n#endif\n#if !defined(NO_POPEN)\n\t                                    | 0x0800u\n#endif\n\t    ;\n\treturn (feature & feature_set);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/docs/sphinx/releases.rst": ".. ############################################################################\n.. # Copyright (c) Copyright (c) 2015-2018, Lawrence Livermore National Security, LLC.\n.. #\n.. # Produced at the Lawrence Livermore National Laboratory\n.. #\n.. # LLNL-CODE-666778\n.. #\n.. # All rights reserved.\n.. #\n.. # This file is part of Conduit.\n.. #\n.. # For details, see: http://software.llnl.gov/conduit/.\n.. #\n.. # Please also read conduit/LICENSE\n.. #\n.. # Redistribution and use in source and binary forms, with or without\n.. # modification, are permitted provided that the following conditions are met:\n.. #\n.. # * Redistributions of source code must retain the above copyright notice,\n.. #   this list of conditions and the disclaimer below.\n.. #\n.. # * Redistributions in binary form must reproduce the above copyright notice,\n.. #   this list of conditions and the disclaimer (as noted below) in the\n.. #   documentation and/or other materials provided with the distribution.\n.. #\n.. # * Neither the name of the LLNS/LLNL nor the names of its contributors may\n.. #   be used to endorse or promote products derived from this software without\n.. #   specific prior written permission.\n.. #\n.. # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n.. # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n.. # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n.. # ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL SECURITY,\n.. # LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE FOR ANY\n.. # DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n.. # DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n.. # OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n.. # HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n.. # STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n.. # IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n.. # POSSIBILITY OF SUCH DAMAGE.\n.. #\n.. ############################################################################\n\n================================\nReleases\n================================\n\nSource distributions for Conduit releases are hosted on github:\n\nhttps://github.com/LLNL/conduit/releases\n\n.. note:: As of v0.3.0, Conduit uses `BLT <https://github.com/LLNL/blt>`__ as its core CMake build system. We leverage BLT as a git submodule, however github does not include submodule contents in its automatically created source tarballs. To avoid confusion, starting with v0.3.0 we will provide our own source tarballs that include BLT. \n\nv0.3.1\n-----------------\n\n* `Source Tarball <https://github.com/LLNL/conduit/releases/download/v0.3.1/conduit-v0.3.1-src-with-blt.tar.gz>`__\n\n\nHighlights\n+++++++++++++\n\n* **General**\n \n * Added new ``Node::diff`` and ``Node::diff_compatible`` methods\n * Updated uberenv to use a newer spack and removed several custom packages\n * C++ ``Node::set`` methods now take const pointers for data\n * Added Python version of basic tutorial\n * Expanded the Node Python Capsule API\n * Added Python API bug fixes\n * Fixed API exports for static libs on Windows\n\n* **Blueprint**\n \n * Mesh Protocol\n \n   * Removed unnecessary state member in the braid example\n \n * Added Multi-level Array Protocol (conduit::blueprint::mlarray)\n\n* **Relay**\n \n * Added bug fixes for Relay HDF5 support on Windows\n \n\nv0.3.0\n-----------------\n\n* `Source Tarball <https://github.com/LLNL/conduit/releases/download/v0.3.0/conduit-v0.3.0-src-with-blt.tar.gz>`__\n\nHighlights\n+++++++++++++\n\n* **General**\n\n * Moved to use BLT (https://github.com/llnl/blt) as our core CMake-based build system\n * Bug fixes to support building on Visual Studio 2013\n * Bug fixes for ``conduit::Node`` in the List Role\n * Expose more of the Conduit API in Python\n * Use ints instead of bools in the Conduit C-APIs for wider compiler compatibility   \n * Fixed memory leaks in *conduit* and *conduit_relay*\n \n\n* **Blueprint**\n\n * Mesh Protocol\n \n   * Added support for multi-material fields via *matsets* (volume fractions and per-material values)\n   * Added initial support for domain boundary info via *adjsets* for distributed-memory unstructured meshes  \n  \n\n* **Relay**\n\n * Major improvements *conduit_relay* I/O HDF5 support \n \n   * Add heuristics with knobs for controlling use of HDF5 compact datasets and compression support\n   * Improved error checking and error messages \n   \n * Major improvements to *conduit_relay_mpi* support \n \n   * Add support for reductions and broadcast\n   * Add support zero-copy pass to MPI for a wide set of calls\n   * Harden notion of `known schema` vs `generic` MPI support\n \n\nv0.2.1\n-----------------\n\n* `Source Tarball <https://github.com/LLNL/conduit/archive/v0.2.1.tar.gz>`__\n\n\nHighlights\n+++++++++++++\n\n* **General**\n\n * Added fixes to support static builds on BGQ using xlc and gcc\n * Fixed missing install of fortran module files\n * Eliminated separate fortran libs by moving fortran symbols into their associated main libs\n * Changed ``Node::set_external`` to support const Node references\n * Refactored path and file systems utils functions for clarity.\n\n* **Blueprint**\n\n * Fixed bug with verify of mesh/coords for rectilinear case\n * Added support to the blueprint python module for the mesh and mcarray protocol methods \n * Added stand alone blueprint verify executable\n\n* **Relay**\n\n * Updated the version of civetweb used to avoid dlopen issues with SSL for static builds\n\n\nv0.2.0\n-----------------\n\n* `Source Tarball <https://github.com/LLNL/conduit/archive/v0.2.0.tar.gz>`__\n    \nHighlights \n+++++++++++++\n* **General**\n\n * Changes to clarify concepts in the ``conduit::Node`` API\n * Added const access to ``conduit::Node`` children and a new ``NodeConstIterator``\n * Added support for building on Windows\n * Added more Python, C, and Fortran API support\n * Resolved several bugs across libraries\n * Resolved compiler warnings and memory leaks\n * Improved unit test coverage\n * Renamed source and header files for clarity and to avoid potential conflicts with other projects\n\n* **Blueprint**\n    \n * Added verify support for the mcarray and mesh protocols\n * Added functions that create examples instances of mcarrays and meshes\n * Added memory layout transform helpers for mcarrays\n * Added a helper that creates a mesh blueprint index from a valid mesh\n\n* **Relay**\n\n * Added extensive HDF5 I/O support for reading and writing between HDF5 files and conduit Node trees\n * Changed I/O protocol string names for clarity\n * Refactored the ``relay::WebServer`` and the Conduit Node Viewer application\n * Added entangle, a python script ssh tunneling solution\n\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/docs/sphinx/building.rst": ".. ############################################################################\n.. # Copyright (c) 2014-2018, Lawrence Livermore National Security, LLC.\n.. # \n.. # Produced at the Lawrence Livermore National Laboratory\n.. # \n.. # LLNL-CODE-666778\n.. # \n.. # All rights reserved.\n.. # \n.. # This file is part of Conduit. \n.. # \n.. # For details, see: http://software.llnl.gov/conduit/.\n.. # \n.. # Please also read conduit/LICENSE\n.. # \n.. # Redistribution and use in source and binary forms, with or without \n.. # modification, are permitted provided that the following conditions are met:\n.. # \n.. # * Redistributions of source code must retain the above copyright notice, \n.. #   this list of conditions and the disclaimer below.\n.. # \n.. # * Redistributions in binary form must reproduce the above copyright notice,\n.. #   this list of conditions and the disclaimer (as noted below) in the\n.. #   documentation and/or other materials provided with the distribution.\n.. # \n.. # * Neither the name of the LLNS/LLNL nor the names of its contributors may\n.. #   be used to endorse or promote products derived from this software without\n.. #   specific prior written permission.\n.. # \n.. # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n.. # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n.. # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n.. # ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL SECURITY,\n.. # LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE FOR ANY\n.. # DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \n.. # DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n.. # OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n.. # HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, \n.. # STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n.. # IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n.. # POSSIBILITY OF SUCH DAMAGE.\n.. # \n.. ############################################################################\n\n.. _building:\n\n=================\nBuilding\n=================\n\n\nThis page provides details on several ways to build Conduit.\n\nIf you are building features that depend on third party libraries we recommend using :ref:`Spack <building_with_spack>`,\nor :ref:`uberenv <building_with_uberenv>`, which leverages Spack. We also provide a \n:ref:`Docker example <building_with_docker>` that leverages Spack.\n\n\n\n\n\nGetting Started\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nClone the Conduit repo:\n\n* From Github\n\n.. code:: bash\n    \n    git clone --recursive https://github.com/llnl/conduit.git\n\n\n``--recursive`` is necessary because we are using a git submodule to pull in BLT (https://github.com/llnl/blt). \nIf you cloned without ``--recursive``, you can checkout this submodule using:\n\n.. code:: bash\n    \n    cd conduit\n    git submodule init\n    git submodule update\n\n\nConfigure a build:\n\n``config-build.sh`` is a simple wrapper for the cmake call to configure conduit. \nThis creates a new out-of-source build directory ``build-debug`` and a directory for the install ``install-debug``.\nIt optionally includes a ``host-config.cmake`` file with detailed configuration options. \n\n\n.. code:: bash\n    \n    cd conduit\n    ./config-build.sh\n\n\nBuild, test, and install Conduit:\n\n.. code:: bash\n    \n    cd build-debug\n    make -j 8\n    make test\n    make install\n\n\n\nBuild Options\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe core Conduit library has no dependencies outside of the repo, however Conduit provides optional support for I/O and Communication (MPI) features that require externally built third party libraries.  \n\nConduit's build system supports the following CMake options:\n\n* **BUILD_SHARED_LIBS** - Controls if shared (ON) or static (OFF) libraries are built. *(default = ON)* \n* **ENABLE_TESTS** - Controls if unit tests are built. *(default = ON)* \n* **ENABLE_DOCS** - Controls if the Conduit documentation is built (when sphinx and doxygen are found ). *(default = ON)*\n* **ENABLE_COVERAGE** - Controls if code coverage compiler flags are used to build Conduit. *(default = OFF)*\n* **ENABLE_PYTHON** - Controls if the Conduit Python module is built. *(default = OFF)*\n\n\nThe Conduit Python module will build for both Python 2 and Python 3. To select a specific Python, set the CMake variable **PYTHON_EXECUTABLE** to path of the desired python binary. The Conduit Python module requires Numpy. The selected Python instance must provide Numpy, or PYTHONPATH must be set to include a Numpy install compatible with the selected Python install. \n\n* **ENABLE_MPI** - Controls if the conduit_relay_mpi library is built. *(default = OFF)*\n\n We are using CMake's standard FindMPI logic. To select a specific MPI set the CMake variables **MPI_C_COMPILER** and **MPI_CXX_COMPILER**, or the other FindMPI options for MPI include paths and MPI libraries.\n\n To run the mpi unit tests on LLNL's LC platforms, you may also need change the CMake variables **MPIEXEC** and **MPIEXEC_NUMPROC_FLAG**, so you can use srun and select a partition. (for an example see: src/host-configs/chaos_5_x86_64.cmake)\n\n.. warning::\n  Starting in CMake 3.10, the FindMPI **MPIEXEC** variable was changed to **MPIEXEC_EXECUTABLE**. FindMPI will still set **MPIEXEC**, but any attempt to change it before calling FindMPI with your own cached value of **MPIEXEC** will not survive, so you need to set **MPIEXEC_EXECUTABLE** `[reference] <https://cmake.org/cmake/help/v3.10/module/FindMPI.html>`_. \n\n* **HDF5_DIR** - Path to a HDF5 install *(optional)*. \n\n Controls if HDF5 I/O support is built into *conduit_relay*.\n\n* **SILO_DIR** - Path to a Silo install *(optional)*. \n\n Controls if Silo I/O support is built into *conduit_relay*. When used, the following CMake variables must also be set:\n \n * **HDF5_DIR** - Path to a HDF5 install. (Silo support depends on HDF5) \n\n\n* **BLT_SOURCE_DIR** - Path to BLT.  *(default = \"blt\")*\n\n Defaults to \"blt\", where we expect the blt submodule. The most compelling reason to override is to share a single instance of BLT across multiple projects.\n  \n\nInstallation Path Options\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nConduit's build system provides an **install** target that installs the Conduit libraires, headers, python modules, and documentation. These CMake options allow you to control install destination paths:\n\n* **CMAKE_INSTALL_PREFIX** - Standard CMake install path option *(optional)*.\n\n* **PYTHON_MODULE_INSTALL_PREFIX** - Path to install Python modules into *(optional)*.\n\n When present and **ENABLE_PYTHON** is ON, Conduit's Python modules will be installed to ``${PYTHON_MODULE_INSTALL_PREFIX}`` directory instead of ``${CMAKE_INSTALL_PREFIX}/python-modules``.\n\n\nHost Config Files\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo handle build options, third party library paths, etc we rely on CMake's initial-cache file mechanism. \n\n\n.. code:: bash\n    \n    cmake -C config_file.cmake\n\n\nWe call these initial-cache files *host-config* files, since we typically create a file for each platform or specific hosts if necessary. \n\nThe ``config-build.sh`` script uses your machine's hostname, the SYS_TYPE environment variable, and your platform name (via *uname*) to look for an existing host config file in the ``host-configs`` directory at the root of the conduit repo. If found, it passes the host config file to CMake via the `-C` command line option.\n\n.. code:: bash\n    \n    cmake {other options} -C host-configs/{config_file}.cmake ../\n\n\nYou can find example files in the ``host-configs`` directory. \n\nThese files use standard CMake commands. To properly seed the cache, CMake *set* commands need to specify ``CACHE`` as follows:\n\n.. code:: cmake\n\n    set(CMAKE_VARIABLE_NAME {VALUE} CACHE PATH \"\")\n\n\n\n.. _building_with_uberenv:\n\nBootstrapping Third Party Dependencies\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe use **Spack** (http://software.llnl.gov/spack) to automate builds of third party dependencies on OSX and Linux. Conduit builds on Windows as well, but there is no automated process to build dependencies necessary to support Conduit's optional features.\n\n.. note::\n  Conduit developers use ``bootstrap-env.sh`` and ``scripts/uberenv/uberenv.py`` to setup third party libraries for Conduit development.\n  This path uses the Conduit Spack package and extra settings, including Spack compiler and external third party package details for some platforms.  For info on how to use the Conduit Spack package see :ref:`building_with_spack`.\n  \n\nOn OSX and Linux, you can use ``bootstrap-env.sh`` (located at the root of the conduit repo) to help setup your development environment. This script uses ``scripts/uberenv/uberenv.py``, which leverages **Spack** to build all of the external third party libraries and tools used by Conduit. Fortran support is optional and all dependencies should build without a fortran compiler. After building these libraries and tools, it writes an initial *host-config* file and adds the Spack built CMake binary to your PATH so can immediately call the ``config-build.sh`` helper script to configure a conduit build.\n\n.. code:: bash\n    \n    #build third party libs using spack\n    source bootstrap-env.sh\n    \n    #copy the generated host-config file into the standard location\n    cp uberenv_libs/`hostname`*.cmake to host-configs/\n    \n    # run the configure helper script\n    ./config-build.sh\n\n    # or you can run the configure helper script and give it the \n    # path to a host-config file \n    ./config-build.sh uberenv_libs/`hostname`*.cmake\n\n\nWhen ``bootstrap-env.sh`` runs ``uberenv.py``, all command line arguments are forwarded:\n\n.. code:: bash\n\n    python scripts/uberenv/uberenv.py $@\n\nSo any options to ``bootstrap-env.sh`` are effectively ``uberenv.py`` options.\n\nUberenv Options for Building Third Party Dependencies\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n``uberenv.py`` has a few options that allow you to control how dependencies are built:\n\n ================== ==================================== ======================================\n  Option             Description                          Default\n ================== ==================================== ======================================\n  --prefix           Destination directory                ``uberenv_libs``\n  --spec             Spack spec                           linux: **%gcc**\n                                                          osx: **%clang**\n  --compilers-yaml   Spack compilers settings file        ``scripts/uberenv/compilers.yaml``\n  -k                 Ignore SSL Errors                    **False**\n ================== ==================================== ======================================\n\nThe ``-k`` option exists for sites where SSL certificate interception undermines fetching\nfrom github and https hosted source tarballs. When enabled, ``uberenv.py`` clones spack using:\n\n.. code:: bash\n\n    git -c http.sslVerify=false clone https://github.com/llnl/spack.git\n\nAnd passes ``-k`` to any spack commands that may fetch via https.\n\n\nDefault invocation on Linux:\n\n.. code:: bash\n\n    python scripts/uberenv/uberenv.py --prefix uberenv_libs \\\n                                      --spec %gcc \\\n                                      --compilers-yaml scripts/uberenv/compilers.yaml\n\nDefault invocation on OSX:\n\n.. code:: bash\n\n    python scripts/uberenv/uberenv.py --prefix uberenv_libs \\\n                                      --spec %clang \\\n                                      --compilers-yaml scripts/uberenv/compilers.yaml\n\nFor details on Spack's spec syntax, see the `Spack Specs & dependencies <http://spack.readthedocs.io/en/latest/basic_usage.html#specs-dependencies>`_ documentation.\n\n \nYou can edit ``scripts/uberenv/compilers.yaml`` or use the **--compilers-yaml** option to change the compiler settings\nused by Spack. See the `Spack Compiler Configuration <http://spack.readthedocs.io/en/latest/getting_started.html#manual-compiler-configuration>`_\ndocumentation for details.\n\nFor OSX, the defaults in ``compilers.yaml`` are X-Code's clang and gfortran from https://gcc.gnu.org/wiki/GFortranBinaries#MacOS. \n\n.. note::\n    The bootstrapping process ignores ``~/.spack/compilers.yaml`` to avoid conflicts\n    and surprises from a user's specific Spack settings on HPC platforms.\n\nWhen run, ``uberenv.py`` checkouts a specific version of Spack from github as ``spack`` in the \ndestination directory. It then uses Spack to build and install Conduit's dependencies into \n``spack/opt/spack/``. Finally, it generates a host-config file ``{hostname}.cmake`` in the \ndestination directory that specifies the compiler settings and paths to all of the dependencies.\n\n\n.. _building_with_spack:\n\nBuilding Conduit and its Dependencies with Spack\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \nAs of 1/4/2017, Spack's develop branch includes a `recipe <https://github.com/LLNL/spack/blob/develop/var/spack/repos/builtin/packages/conduit/package.py>`_ to build and install Conduit.\n\nTo install the latest released version of Conduit with all options (and also build all of its dependencies as necessary) run:\n\n.. code:: bash\n  \n  spack install conduit\n\nTo build and install Conduit's github master branch run:\n  \n.. code:: bash\n  \n  spack install conduit@master\n\n\nThe Conduit Spack package provides several `variants <http://spack.readthedocs.io/en/latest/basic_usage.html#specs-dependencies>`_ that customize the options and dependencies used to build Conduit:\n\n ================== ==================================== ======================================\n  Variant             Description                          Default\n ================== ==================================== ======================================\n  **shared**          Build Conduit as shared libraries    ON (+shared)\n  **cmake**           Build CMake with Spack               ON (+cmake)\n  **python**          Enable Conduit Python support        ON (+python)\n  **mpi**             Enable Conduit MPI support           ON (+mpi)\n  **hdf5**            Enable Conduit HDF5 support          ON (+hdf5)\n  **silo**            Enable Conduit Silo support          ON (+silo)\n  **doc**             Build Conduit's Documentation        OFF (+docs)\n ================== ==================================== ======================================\n\n\nVariants are enabled using ``+`` and disabled using ``~``. For example, to build Conduit with the minimum set of options (and dependencies) run:\n\n.. code:: bash\n\n  spack install conduit~python~mpi~hdf5~silo~docs\n\n\nYou can specify specific versions of a dependency using ``^``. For Example, to build Conduit with Python 3:\n\n\n.. code:: bash\n\n  spack install conduit+python ^python@3\n\n\n\nSupported CMake Versions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWe recommend CMake 3.9. We test building Conduit with CMake 3.3.1, 3.8.1 and 3.9.4. Other versions of CMake may work, however CMake 3.4.x to 3.7.x have specific issues with finding and using HDF5 and Python.\n\n\n\nUsing Conduit in Another Project\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUnder ``src/examples`` there are examples demonstrating how to use Conduit in a CMake-based build system (``using-with-cmake``) and via a Makefile (``using-with-make``).\n\n\n.. _building_with_docker:\n\nBuilding Conduit in a Docker Container\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUnder ``src/examples/docker/ubuntu`` there is an example ``Dockerfile`` which can be used to create an ubuntu-based docker image with a build of the Conduit. There is also a script that demonstrates how to build a Docker image from the Dockerfile (``example_build.sh``) and a script that runs this image in a Docker container (``example_run.sh``). The Conduit repo is cloned into the image's file system at ``/conduit``, the build directory is ``/conduit/build-debug``, and the install directory is ``/conduit/install-debug``.\n\n\nNotes for Cray systems\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nHDF5 and gtest use runtime features such as ``dlopen``. Because of this, building static on Cray systems commonly yields the following flavor of compiler warning:\n\n.. code:: \n\n   Using 'zzz' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking\n\nYou can avoid related linking warnings by adding the ``-dynamic`` compiler flag, or by setting the CRAYPE_LINK_TYPE environment variable:\n\n.. code:: bash\n\n  export CRAYPE_LINK_TYPE=dynamic\n\n`Shared Memory Maps are read only <https://pubs.cray.com/content/S-0005/CLE%206.0.UP02/xctm-series-dvs-administration-guide-cle-60up02-s-0005/dvs-caveats>`_\non Cray systems, so updates to data using ``Node::mmap`` will not be seen between processes.\n\n\n\n\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/blt/thirdparty_builtin/googletest-master-2020-01-07/googletest/cmake/libgtest.la.in": "# libgtest.la - a libtool library file\n# Generated by libtool (GNU libtool) 2.4.6\n\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Names of this library.\nlibrary_names='libgtest.so'\n\n# Is this an already installed library?\ninstalled=yes\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=no\n\n# Files to dlopen/dlpreopen\ndlopen=''\ndlpreopen=''\n\n# Directory that this library needs to be installed in:\nlibdir='@CMAKE_INSTALL_FULL_LIBDIR@'\n",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/blt/thirdparty_builtin/googletest-master-2020-01-07/googletest/cmake/libgtest.la.in": "# libgtest.la - a libtool library file\n# Generated by libtool (GNU libtool) 2.4.6\n\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Names of this library.\nlibrary_names='libgtest.so'\n\n# Is this an already installed library?\ninstalled=yes\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=no\n\n# Files to dlopen/dlpreopen\ndlopen=''\ndlpreopen=''\n\n# Directory that this library needs to be installed in:\nlibdir='@CMAKE_INSTALL_FULL_LIBDIR@'\n",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/civetweb-0a95342/CMakeLists.txt": "###############################################################################\n# Copyright (c) Copyright (c) 2015-2018, Lawrence Livermore National Security, LLC.\n#\n# Produced at the Lawrence Livermore National Laboratory\n#\n# LLNL-CODE-666778\n#\n# All rights reserved.\n#\n# This file is part of Conduit.\n#\n# For details, see: http://software.llnl.gov/conduit/.\n#\n# Please also read conduit/LICENSE\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# * Redistributions of source code must retain the above copyright notice,\n#   this list of conditions and the disclaimer below.\n#\n# * Redistributions in binary form must reproduce the above copyright notice,\n#   this list of conditions and the disclaimer (as noted below) in the\n#   documentation and/or other materials provided with the distribution.\n#\n# * Neither the name of the LLNS/LLNL nor the names of its contributors may\n#   be used to endorse or promote products derived from this software without\n#   specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL SECURITY,\n# LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE FOR ANY\n# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n#\n###############################################################################\n\n####################################\n# Simple CMake setup for civetweb\n####################################\n\n#\n# civetweb sources\n#\n\n\nset(civetweb_headers\n    include/civetweb.h\n    include/CivetServer.h\n    )\n\nset(civetweb_sources\n    src/civetweb.c\n    src/CivetServer.cpp\n    )\n\nadd_definitions(-DUSE_WEBSOCKET)\n\n\n\n############################################\n# disable ssl support for the static case\n############################################\n# We don't want to rely on dlopen NO_SSL_DL and we don't require a\n# openssl install.\nif(NOT BUILD_SHARED_LIBS)\n    add_definitions(-DNO_SSL_DL -DNO_SSL)\nendif()\n\n\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)\n\n\nadd_compiled_library(NAME   conduit_civetweb\n                     OBJECT\n                     HEADERS ${civetweb_headers}\n                     SOURCES ${civetweb_sources})\n\n#  avoid unknown pragma warnings when compiling civetweb with clang\nif(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n    add_target_compile_flags(TARGET conduit_civetweb\n                             FLAGS -Wno-unknown-pragmas)\nendif()\n\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/civetweb-0a95342/src/civetweb.c": "/* Copyright (c) 2013-2016 the Civetweb developers\n * Copyright (c) 2004-2013 Sergey Lyubka\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n#if defined(_WIN32)\n#if !defined(_CRT_SECURE_NO_WARNINGS)\n#define _CRT_SECURE_NO_WARNINGS /* Disable deprecation warning in VS2005 */\n#endif\n#ifndef _WIN32_WINNT /* defined for tdm-gcc so we can use getnameinfo */\n#define _WIN32_WINNT 0x0501\n#endif\n#else\n#if defined(__GNUC__) && !defined(_GNU_SOURCE)\n#define _GNU_SOURCE /* for setgroups() */\n#endif\n#if defined(__linux__) && !defined(_XOPEN_SOURCE)\n#define _XOPEN_SOURCE 600 /* For flockfile() on Linux */\n#endif\n#ifndef _LARGEFILE_SOURCE\n#define _LARGEFILE_SOURCE /* For fseeko(), ftello() */\n#endif\n#ifndef _FILE_OFFSET_BITS\n#define _FILE_OFFSET_BITS 64 /* Use 64-bit file offsets by default */\n#endif\n#ifndef __STDC_FORMAT_MACROS\n#define __STDC_FORMAT_MACROS /* <inttypes.h> wants this for C++ */\n#endif\n#ifndef __STDC_LIMIT_MACROS\n#define __STDC_LIMIT_MACROS /* C++ wants that for INT64_MAX */\n#endif\n#ifdef __sun\n#define __EXTENSIONS__  /* to expose flockfile and friends in stdio.h */\n#define __inline inline /* not recognized on older compiler versions */\n#endif\n#endif\n\n#if defined(USE_LUA) && defined(USE_WEBSOCKET)\n#define USE_TIMERS\n#endif\n\n#if defined(_MSC_VER)\n/* 'type cast' : conversion from 'int' to 'HANDLE' of greater size */\n#pragma warning(disable : 4306)\n/* conditional expression is constant: introduced by FD_SET(..) */\n#pragma warning(disable : 4127)\n/* non-constant aggregate initializer: issued due to missing C99 support */\n#pragma warning(disable : 4204)\n/* padding added after data member */\n#pragma warning(disable : 4820)\n/* not defined as a preprocessor macro, replacing with '0' for '#if/#elif' */\n#pragma warning(disable : 4668)\n/* no function prototype given: converting '()' to '(void)' */\n#pragma warning(disable : 4255)\n/* function has been selected for automatic inline expansion */\n#pragma warning(disable : 4711)\n#endif\n\n\n/* This code uses static_assert to check some conditions.\n * Unfortunately some compilers still do not support it, so we have a\n * replacement function here. */\n#if defined(_MSC_VER) && (_MSC_VER >= 1600)\n#define mg_static_assert static_assert\n#elif defined(__cplusplus) && (__cplusplus >= 201103L)\n#define mg_static_assert static_assert\n#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201112L)\n#define mg_static_assert _Static_assert\n#else\nchar static_assert_replacement[1];\n#define mg_static_assert(cond, txt)                                            \\\n\textern char static_assert_replacement[(cond) ? 1 : -1]\n#endif\n\nmg_static_assert(sizeof(int) == 4 || sizeof(int) == 8,\n                 \"int data type size check\");\nmg_static_assert(sizeof(void *) == 4 || sizeof(void *) == 8,\n                 \"pointer data type size check\");\nmg_static_assert(sizeof(void *) >= sizeof(int), \"data type size check\");\n\n\n/* DTL -- including winsock2.h works better if lean and mean */\n#ifndef WIN32_LEAN_AND_MEAN\n#define WIN32_LEAN_AND_MEAN\n#endif\n\n#if defined(__SYMBIAN32__)\n#define NO_SSL /* SSL is not supported */\n#define NO_CGI /* CGI is not supported */\n#define PATH_MAX FILENAME_MAX\n#endif /* __SYMBIAN32__ */\n\n\n/* Include the header file here, so the CivetWeb interface is defined for the\n * entire implementation, including the following forward definitions. */\n#include \"civetweb.h\"\n\n\n#ifndef IGNORE_UNUSED_RESULT\n#define IGNORE_UNUSED_RESULT(a) ((void)((a) && 1))\n#endif\n\n#ifndef _WIN32_WCE /* Some ANSI #includes are not available on Windows CE */\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <signal.h>\n#include <fcntl.h>\n#endif /* !_WIN32_WCE */\n\n\n#ifdef __clang__\n/* When using -Weverything, clang does not accept it's own headers\n * in a release build configuration. Disable what is too much in\n * -Weverything. */\n#pragma clang diagnostic ignored \"-Wdisabled-macro-expansion\"\n#endif\n\n\n#ifdef __MACH__ /* Apple OSX section */\n\n#ifdef __clang__\n/* Avoid warnings for Xopen 7.00 and higher */\n#pragma clang diagnostic ignored \"-Wno-reserved-id-macro\"\n#pragma clang diagnostic ignored \"-Wno-keyword-macro\"\n#endif\n\n#define CLOCK_MONOTONIC (1)\n#define CLOCK_REALTIME (2)\n\n#include <sys/errno.h>\n#include <sys/time.h>\n#include <mach/clock.h>\n#include <mach/mach.h>\n#include <mach/mach_time.h>\n#include <assert.h>\n\n/* clock_gettime is not implemented on OSX prior to 10.12 */\nstatic int\n_civet_clock_gettime(int clk_id, struct timespec *t)\n{\n\tmemset(t, 0, sizeof(*t));\n\tif (clk_id == CLOCK_REALTIME) {\n\t\tstruct timeval now;\n\t\tint rv = gettimeofday(&now, NULL);\n\t\tif (rv) {\n\t\t\treturn rv;\n\t\t}\n\t\tt->tv_sec = now.tv_sec;\n\t\tt->tv_nsec = now.tv_usec * 1000;\n\t\treturn 0;\n\n\t} else if (clk_id == CLOCK_MONOTONIC) {\n\t\tstatic uint64_t clock_start_time = 0;\n\t\tstatic mach_timebase_info_data_t timebase_ifo = {0, 0};\n\n\t\tuint64_t now = mach_absolute_time();\n\n\t\tif (clock_start_time == 0) {\n\t\t\tkern_return_t mach_status = mach_timebase_info(&timebase_ifo);\n#if defined(DEBUG)\n\t\t\tassert(mach_status == KERN_SUCCESS);\n#else\n\t\t\t/* appease \"unused variable\" warning for release builds */\n\t\t\t(void)mach_status;\n#endif\n\t\t\tclock_start_time = now;\n\t\t}\n\n\t\tnow = (uint64_t)((double)(now - clock_start_time)\n\t\t                 * (double)timebase_ifo.numer\n\t\t                 / (double)timebase_ifo.denom);\n\n\t\tt->tv_sec = now / 1000000000;\n\t\tt->tv_nsec = now % 1000000000;\n\t\treturn 0;\n\t}\n\treturn -1; /* EINVAL - Clock ID is unknown */\n}\n\n/* if clock_gettime is declared, then __CLOCK_AVAILABILITY will be defined */\n#ifdef __CLOCK_AVAILABILITY\n/* If we compiled with Mac OSX 10.12 or later, then clock_gettime will be\n * declared but it may be NULL at runtime. So we need to check before using\n * it. */\nstatic int\n_civet_safe_clock_gettime(int clk_id, struct timespec *t)\n{\n\tif (clock_gettime) {\n\t\treturn clock_gettime(clk_id, t);\n\t}\n\treturn _civet_clock_gettime(clk_id, t);\n}\n#define clock_gettime _civet_safe_clock_gettime\n#else\n#define clock_gettime _civet_clock_gettime\n#endif\n\n#endif\n\n\n#include <time.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <limits.h>\n#include <stddef.h>\n#include <stdio.h>\n#include <stdint.h>\n\n#ifndef INT64_MAX\n#define INT64_MAX (9223372036854775807)\n#endif\n\n\n#ifndef MAX_WORKER_THREADS\n#define MAX_WORKER_THREADS (1024 * 64)\n#endif\n\n#ifndef SOCKET_TIMEOUT_QUANTUM /* in ms */\n#define SOCKET_TIMEOUT_QUANTUM (2000)\n#endif\n\n#define SHUTDOWN_RD (0)\n#define SHUTDOWN_WR (1)\n#define SHUTDOWN_BOTH (2)\n\nmg_static_assert(MAX_WORKER_THREADS >= 1,\n                 \"worker threads must be a positive number\");\n\nmg_static_assert(sizeof(size_t) == 4 || sizeof(size_t) == 8,\n                 \"size_t data type size check\");\n\n#if defined(_WIN32)                                                            \\\n    && !defined(__SYMBIAN32__) /* WINDOWS / UNIX include block */\n#include <windows.h>\n#include <winsock2.h> /* DTL add for SO_EXCLUSIVE */\n#include <ws2tcpip.h>\n\ntypedef const char *SOCK_OPT_TYPE;\n\n#if !defined(PATH_MAX)\n#define PATH_MAX (MAX_PATH)\n#endif\n\n#if !defined(PATH_MAX)\n#define PATH_MAX (4096)\n#endif\n\nmg_static_assert(PATH_MAX >= 1, \"path length must be a positive number\");\n\n#ifndef _IN_PORT_T\n#ifndef in_port_t\n#define in_port_t u_short\n#endif\n#endif\n\n#ifndef _WIN32_WCE\n#include <process.h>\n#include <direct.h>\n#include <io.h>\n#else            /* _WIN32_WCE */\n#define NO_CGI   /* WinCE has no pipes */\n#define NO_POPEN /* WinCE has no popen */\n\ntypedef long off_t;\n\n#define errno ((int)(GetLastError()))\n#define strerror(x) (_ultoa(x, (char *)_alloca(sizeof(x) * 3), 10))\n#endif /* _WIN32_WCE */\n\n#define MAKEUQUAD(lo, hi)                                                      \\\n\t((uint64_t)(((uint32_t)(lo)) | ((uint64_t)((uint32_t)(hi))) << 32))\n#define RATE_DIFF (10000000) /* 100 nsecs */\n#define EPOCH_DIFF (MAKEUQUAD(0xd53e8000, 0x019db1de))\n#define SYS2UNIX_TIME(lo, hi)                                                  \\\n\t((time_t)((MAKEUQUAD((lo), (hi)) - EPOCH_DIFF) / RATE_DIFF))\n\n/* Visual Studio 6 does not know __func__ or __FUNCTION__\n * The rest of MS compilers use __FUNCTION__, not C99 __func__\n * Also use _strtoui64 on modern M$ compilers */\n#if defined(_MSC_VER)\n#if (_MSC_VER < 1300)\n#define STRX(x) #x\n#define STR(x) STRX(x)\n#define __func__ __FILE__ \":\" STR(__LINE__)\n#define strtoull(x, y, z) ((unsigned __int64)_atoi64(x))\n#define strtoll(x, y, z) (_atoi64(x))\n#else\n#define __func__ __FUNCTION__\n#define strtoull(x, y, z) (_strtoui64(x, y, z))\n#define strtoll(x, y, z) (_strtoi64(x, y, z))\n#endif\n#endif /* _MSC_VER */\n\n#define ERRNO ((int)(GetLastError()))\n#define NO_SOCKLEN_T\n\n#if defined(_WIN64) || defined(__MINGW64__)\n#define SSL_LIB \"ssleay64.dll\"\n#define CRYPTO_LIB \"libeay64.dll\"\n#else\n#define SSL_LIB \"ssleay32.dll\"\n#define CRYPTO_LIB \"libeay32.dll\"\n#endif\n\n#define O_NONBLOCK (0)\n#ifndef W_OK\n#define W_OK (2) /* http://msdn.microsoft.com/en-us/library/1w06ktdy.aspx */\n#endif\n#if !defined(EWOULDBLOCK)\n#define EWOULDBLOCK WSAEWOULDBLOCK\n#endif /* !EWOULDBLOCK */\n#define _POSIX_\n#define INT64_FMT \"I64d\"\n#define UINT64_FMT \"I64u\"\n\n#define WINCDECL __cdecl\n#define vsnprintf_impl _vsnprintf\n#define access _access\n#define mg_sleep(x) (Sleep(x))\n\n#define pipe(x) _pipe(x, MG_BUF_LEN, _O_BINARY)\n#ifndef popen\n#define popen(x, y) (_popen(x, y))\n#endif\n#ifndef pclose\n#define pclose(x) (_pclose(x))\n#endif\n#define close(x) (_close(x))\n#define dlsym(x, y) (GetProcAddress((HINSTANCE)(x), (y)))\n#define RTLD_LAZY (0)\n#define fseeko(x, y, z) ((_lseeki64(_fileno(x), (y), (z)) == -1) ? -1 : 0)\n#define fdopen(x, y) (_fdopen((x), (y)))\n#define write(x, y, z) (_write((x), (y), (unsigned)z))\n#define read(x, y, z) (_read((x), (y), (unsigned)z))\n#define flockfile(x) (EnterCriticalSection(&global_log_file_lock))\n#define funlockfile(x) (LeaveCriticalSection(&global_log_file_lock))\n#define sleep(x) (Sleep((x)*1000))\n#define rmdir(x) (_rmdir(x))\n#define timegm(x) (_mkgmtime(x))\n\n#if !defined(fileno)\n#define fileno(x) (_fileno(x))\n#endif /* !fileno MINGW #defines fileno */\n\ntypedef HANDLE pthread_mutex_t;\ntypedef DWORD pthread_key_t;\ntypedef HANDLE pthread_t;\ntypedef struct {\n\tCRITICAL_SECTION threadIdSec;\n\tstruct mg_workerTLS *waiting_thread; /* The chain of threads */\n} pthread_cond_t;\n\n#ifndef __clockid_t_defined\ntypedef DWORD clockid_t;\n#endif\n#ifndef CLOCK_MONOTONIC\n#define CLOCK_MONOTONIC (1)\n#endif\n#ifndef CLOCK_REALTIME\n#define CLOCK_REALTIME (2)\n#endif\n\n#if defined(_MSC_VER) && (_MSC_VER >= 1900)\n#define _TIMESPEC_DEFINED\n#endif\n#ifndef _TIMESPEC_DEFINED\nstruct timespec {\n\ttime_t tv_sec; /* seconds */\n\tlong tv_nsec;  /* nanoseconds */\n};\n#endif\n\n#if !defined(WIN_PTHREADS_TIME_H)\n#define MUST_IMPLEMENT_CLOCK_GETTIME\n#endif\n\n#ifdef MUST_IMPLEMENT_CLOCK_GETTIME\n#define clock_gettime mg_clock_gettime\nstatic int\nclock_gettime(clockid_t clk_id, struct timespec *tp)\n{\n\tFILETIME ft;\n\tULARGE_INTEGER li;\n\tBOOL ok = FALSE;\n\tdouble d;\n\tstatic double perfcnt_per_sec = 0.0;\n\n\tif (tp) {\n\t\tmemset(tp, 0, sizeof(*tp));\n\t\tif (clk_id == CLOCK_REALTIME) {\n\t\t\tGetSystemTimeAsFileTime(&ft);\n\t\t\tli.LowPart = ft.dwLowDateTime;\n\t\t\tli.HighPart = ft.dwHighDateTime;\n\t\t\tli.QuadPart -= 116444736000000000; /* 1.1.1970 in filedate */\n\t\t\ttp->tv_sec = (time_t)(li.QuadPart / 10000000);\n\t\t\ttp->tv_nsec = (long)(li.QuadPart % 10000000) * 100;\n\t\t\tok = TRUE;\n\t\t} else if (clk_id == CLOCK_MONOTONIC) {\n\t\t\tif (perfcnt_per_sec == 0.0) {\n\t\t\t\tQueryPerformanceFrequency((LARGE_INTEGER *)&li);\n\t\t\t\tperfcnt_per_sec = 1.0 / li.QuadPart;\n\t\t\t}\n\t\t\tif (perfcnt_per_sec != 0.0) {\n\t\t\t\tQueryPerformanceCounter((LARGE_INTEGER *)&li);\n\t\t\t\td = li.QuadPart * perfcnt_per_sec;\n\t\t\t\ttp->tv_sec = (time_t)d;\n\t\t\t\td -= tp->tv_sec;\n\t\t\t\ttp->tv_nsec = (long)(d * 1.0E9);\n\t\t\t\tok = TRUE;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn ok ? 0 : -1;\n}\n#endif\n\n\n#define pid_t HANDLE /* MINGW typedefs pid_t to int. Using #define here. */\n\nstatic int pthread_mutex_lock(pthread_mutex_t *);\nstatic int pthread_mutex_unlock(pthread_mutex_t *);\nstatic void path_to_unicode(const struct mg_connection *conn,\n                            const char *path,\n                            wchar_t *wbuf,\n                            size_t wbuf_len);\n\n/* All file operations need to be rewritten to solve #246. */\n\n#include \"file_ops.inl\"\n\nstruct mg_file;\n\nstatic const char *\nmg_fgets(char *buf, size_t size, struct mg_file *filep, char **p);\n\n\n/* POSIX dirent interface */\nstruct dirent {\n\tchar d_name[PATH_MAX];\n};\n\ntypedef struct DIR {\n\tHANDLE handle;\n\tWIN32_FIND_DATAW info;\n\tstruct dirent result;\n} DIR;\n\n#if defined(_WIN32) && !defined(POLLIN)\n#ifndef HAVE_POLL\nstruct pollfd {\n\tSOCKET fd;\n\tshort events;\n\tshort revents;\n};\n#define POLLIN (0x0300)\n#endif\n#endif\n\n/* Mark required libraries */\n#if defined(_MSC_VER)\n#pragma comment(lib, \"Ws2_32.lib\")\n#endif\n\n#else /* defined(_WIN32) && !defined(__SYMBIAN32__) -                          \\\n         WINDOWS / UNIX include block */\n\n#include <sys/wait.h>\n#include <sys/socket.h>\n#include <sys/poll.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <sys/time.h>\n#include <sys/utsname.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <netdb.h>\n#include <netinet/tcp.h>\ntypedef const void *SOCK_OPT_TYPE;\n\n#if defined(ANDROID)\ntypedef unsigned short int in_port_t;\n#endif\n\n#include <pwd.h>\n#include <unistd.h>\n#include <grp.h>\n#include <dirent.h>\n#define vsnprintf_impl vsnprintf\n\n#if !defined(NO_SSL_DL) && !defined(NO_SSL)\n#include <dlfcn.h>\n#endif\n#include <pthread.h>\n#if defined(__MACH__)\n#define SSL_LIB \"libssl.dylib\"\n#define CRYPTO_LIB \"libcrypto.dylib\"\n#else\n#if !defined(SSL_LIB)\n#define SSL_LIB \"libssl.so\"\n#endif\n#if !defined(CRYPTO_LIB)\n#define CRYPTO_LIB \"libcrypto.so\"\n#endif\n#endif\n#ifndef O_BINARY\n#define O_BINARY (0)\n#endif /* O_BINARY */\n#define closesocket(a) (close(a))\n#define mg_mkdir(conn, path, mode) (mkdir(path, mode))\n#define mg_remove(conn, x) (remove(x))\n#define mg_sleep(x) (usleep((x)*1000))\n#define mg_opendir(conn, x) (opendir(x))\n#define mg_closedir(x) (closedir(x))\n#define mg_readdir(x) (readdir(x))\n#define ERRNO (errno)\n#define INVALID_SOCKET (-1)\n#define INT64_FMT PRId64\n#define UINT64_FMT PRIu64\ntypedef int SOCKET;\n#define WINCDECL\n\n#if defined(__hpux)\n/* HPUX 11 does not have monotonic, fall back to realtime */\n#ifndef CLOCK_MONOTONIC\n#define CLOCK_MONOTONIC CLOCK_REALTIME\n#endif\n\n/* HPUX defines socklen_t incorrectly as size_t which is 64bit on\n * Itanium.  Without defining _XOPEN_SOURCE or _XOPEN_SOURCE_EXTENDED\n * the prototypes use int* rather than socklen_t* which matches the\n * actual library expectation.  When called with the wrong size arg\n * accept() returns a zero client inet addr and check_acl() always\n * fails.  Since socklen_t is widely used below, just force replace\n * their typedef with int. - DTL\n */\n#define socklen_t int\n#endif /* hpux */\n\n#endif /* defined(_WIN32) && !defined(__SYMBIAN32__) -                         \\\n          WINDOWS / UNIX include block */\n\n/* va_copy should always be a macro, C99 and C++11 - DTL */\n#ifndef va_copy\n#define va_copy(x, y) ((x) = (y))\n#endif\n\n#ifdef _WIN32\n/* Create substitutes for POSIX functions in Win32. */\n\n#if defined(__MINGW32__)\n/* Show no warning in case system functions are not used. */\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wunused-function\"\n#endif\n\n\nstatic CRITICAL_SECTION global_log_file_lock;\nstatic DWORD\npthread_self(void)\n{\n\treturn GetCurrentThreadId();\n}\n\n\nstatic int\npthread_key_create(\n    pthread_key_t *key,\n    void (*_ignored)(void *) /* destructor not supported for Windows */\n    )\n{\n\t(void)_ignored;\n\n\tif ((key != 0)) {\n\t\t*key = TlsAlloc();\n\t\treturn (*key != TLS_OUT_OF_INDEXES) ? 0 : -1;\n\t}\n\treturn -2;\n}\n\n\nstatic int\npthread_key_delete(pthread_key_t key)\n{\n\treturn TlsFree(key) ? 0 : 1;\n}\n\n\nstatic int\npthread_setspecific(pthread_key_t key, void *value)\n{\n\treturn TlsSetValue(key, value) ? 0 : 1;\n}\n\n\nstatic void *\npthread_getspecific(pthread_key_t key)\n{\n\treturn TlsGetValue(key);\n}\n\n#if defined(__MINGW32__)\n/* Enable unused function warning again */\n#pragma GCC diagnostic pop\n#endif\n\nstatic struct pthread_mutex_undefined_struct *pthread_mutex_attr = NULL;\n#else\nstatic pthread_mutexattr_t pthread_mutex_attr;\n#endif /* _WIN32 */\n\n\n#define PASSWORDS_FILE_NAME \".htpasswd\"\n#define CGI_ENVIRONMENT_SIZE (4096)\n#define MAX_CGI_ENVIR_VARS (256)\n#define MG_BUF_LEN (8192)\n\n#ifndef MAX_REQUEST_SIZE\n#define MAX_REQUEST_SIZE (16384)\n#endif\n\nmg_static_assert(MAX_REQUEST_SIZE >= 256,\n                 \"request size length must be a positive number\");\n\n#define ARRAY_SIZE(array) (sizeof(array) / sizeof(array[0]))\n\n\n#if defined(_WIN32_WCE)\n/* Create substitutes for POSIX functions in Win32. */\n\n#if defined(__MINGW32__)\n/* Show no warning in case system functions are not used. */\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wunused-function\"\n#endif\n\n\nstatic time_t\ntime(time_t *ptime)\n{\n\ttime_t t;\n\tSYSTEMTIME st;\n\tFILETIME ft;\n\n\tGetSystemTime(&st);\n\tSystemTimeToFileTime(&st, &ft);\n\tt = SYS2UNIX_TIME(ft.dwLowDateTime, ft.dwHighDateTime);\n\n\tif (ptime != NULL) {\n\t\t*ptime = t;\n\t}\n\n\treturn t;\n}\n\n\nstatic struct tm *\nlocaltime_s(const time_t *ptime, struct tm *ptm)\n{\n\tint64_t t = ((int64_t)*ptime) * RATE_DIFF + EPOCH_DIFF;\n\tFILETIME ft, lft;\n\tSYSTEMTIME st;\n\tTIME_ZONE_INFORMATION tzinfo;\n\n\tif (ptm == NULL) {\n\t\treturn NULL;\n\t}\n\n\t*(int64_t *)&ft = t;\n\tFileTimeToLocalFileTime(&ft, &lft);\n\tFileTimeToSystemTime(&lft, &st);\n\tptm->tm_year = st.wYear - 1900;\n\tptm->tm_mon = st.wMonth - 1;\n\tptm->tm_wday = st.wDayOfWeek;\n\tptm->tm_mday = st.wDay;\n\tptm->tm_hour = st.wHour;\n\tptm->tm_min = st.wMinute;\n\tptm->tm_sec = st.wSecond;\n\tptm->tm_yday = 0; /* hope nobody uses this */\n\tptm->tm_isdst =\n\t    (GetTimeZoneInformation(&tzinfo) == TIME_ZONE_ID_DAYLIGHT) ? 1 : 0;\n\n\treturn ptm;\n}\n\n\nstatic struct tm *\ngmtime_s(const time_t *ptime, struct tm *ptm)\n{\n\t/* FIXME(lsm): fix this. */\n\treturn localtime_s(ptime, ptm);\n}\n\nstatic int mg_atomic_inc(volatile int *addr);\nstatic struct tm tm_array[MAX_WORKER_THREADS];\nstatic int tm_index = 0;\n\nstatic struct tm *\nlocaltime(const time_t *ptime)\n{\n\tint i = mg_atomic_inc(&tm_index) % (sizeof(tm_array) / sizeof(tm_array[0]));\n\treturn localtime_s(ptime, tm_array + i);\n}\n\n\nstatic struct tm *\ngmtime(const time_t *ptime)\n{\n\tint i = mg_atomic_inc(&tm_index) % ARRAY_SIZE(tm_array);\n\treturn gmtime_s(ptime, tm_array + i);\n}\n\n\nstatic size_t\nstrftime(char *dst, size_t dst_size, const char *fmt, const struct tm *tm)\n{\n\t/* TODO */ //(void)mg_snprintf(NULL, dst, dst_size, \"implement strftime()\n\t// for WinCE\");\n\treturn 0;\n}\n\n#define _beginthreadex(psec, stack, func, prm, flags, ptid)                    \\\n\t(uintptr_t) CreateThread(psec, stack, func, prm, flags, ptid)\n\n#define remove(f) mg_remove(NULL, f)\n\nstatic int\nrename(const char *a, const char *b)\n{\n\twchar_t wa[PATH_MAX];\n\twchar_t wb[PATH_MAX];\n\tpath_to_unicode(NULL, a, wa, ARRAY_SIZE(wa));\n\tpath_to_unicode(NULL, b, wb, ARRAY_SIZE(wb));\n\n\treturn MoveFileW(wa, wb) ? 0 : -1;\n}\n\nstruct stat {\n\tint64_t st_size;\n\ttime_t st_mtime;\n};\n\nstatic int\nstat(const char *name, struct stat *st)\n{\n\twchar_t wbuf[PATH_MAX];\n\tWIN32_FILE_ATTRIBUTE_DATA attr;\n\ttime_t creation_time, write_time;\n\n\tpath_to_unicode(NULL, name, wbuf, ARRAY_SIZE(wbuf));\n\tmemset(&attr, 0, sizeof(attr));\n\n\tGetFileAttributesExW(wbuf, GetFileExInfoStandard, &attr);\n\tst->st_size =\n\t    (((int64_t)attr.nFileSizeHigh) << 32) + (int64_t)attr.nFileSizeLow;\n\n\twrite_time = SYS2UNIX_TIME(attr.ftLastWriteTime.dwLowDateTime,\n\t                           attr.ftLastWriteTime.dwHighDateTime);\n\tcreation_time = SYS2UNIX_TIME(attr.ftCreationTime.dwLowDateTime,\n\t                              attr.ftCreationTime.dwHighDateTime);\n\n\tif (creation_time > write_time) {\n\t\tst->st_mtime = creation_time;\n\t} else {\n\t\tst->st_mtime = write_time;\n\t}\n\treturn 0;\n}\n\n#define access(x, a) 1 /* not required anyway */\n\n/* WinCE-TODO: define stat, remove, rename, _rmdir, _lseeki64 */\n#define EEXIST 1 /* TODO: See Windows error codes */\n#define EACCES 2 /* TODO: See Windows error codes */\n#define ENOENT 3 /* TODO: See Windows Error codes */\n\n#if defined(__MINGW32__)\n/* Enable unused function warning again */\n#pragma GCC diagnostic pop\n#endif\n\n#endif /* defined(_WIN32_WCE) */\n\n\n#if !defined(DEBUG_TRACE)\n#if defined(DEBUG)\nstatic void DEBUG_TRACE_FUNC(const char *func,\n                             unsigned line,\n                             PRINTF_FORMAT_STRING(const char *fmt),\n                             ...) PRINTF_ARGS(3, 4);\n\nstatic void\nDEBUG_TRACE_FUNC(const char *func, unsigned line, const char *fmt, ...)\n{\n\tva_list args;\n\tstruct timespec tsnow;\n\tuint64_t nsnow;\n\tstatic uint64_t nslast;\n\n\tclock_gettime(CLOCK_REALTIME, &tsnow);\n\tnsnow = (((uint64_t)tsnow.tv_sec) * 1000000000) + (uint64_t)tsnow.tv_nsec;\n\n\tflockfile(stdout);\n\tprintf(\"*** %lu.%09lu %12\" INT64_FMT \" %p %s:%u: \",\n\t       (unsigned long)tsnow.tv_sec,\n\t       (unsigned long)tsnow.tv_nsec,\n\t       nsnow - nslast,\n\t       (void *)pthread_self(),\n\t       func,\n\t       line);\n\tva_start(args, fmt);\n\tvprintf(fmt, args);\n\tva_end(args);\n\tputchar('\\n');\n\tfflush(stdout);\n\tfunlockfile(stdout);\n\tnslast = nsnow;\n}\n\n#define DEBUG_TRACE(fmt, ...)                                                  \\\n\tDEBUG_TRACE_FUNC(__func__, __LINE__, fmt, __VA_ARGS__)\n\n#else\n#define DEBUG_TRACE(fmt, ...)                                                  \\\n\tdo {                                                                       \\\n\t} while (0)\n#endif /* DEBUG */\n#endif /* DEBUG_TRACE */\n\n\n#if defined(MEMORY_DEBUGGING)\nstatic unsigned long mg_memory_debug_blockCount = 0;\nstatic unsigned long mg_memory_debug_totalMemUsed = 0;\n\n\nstatic void *\nmg_malloc_ex(size_t size, const char *file, unsigned line)\n{\n\tvoid *data = malloc(size + sizeof(size_t));\n\tvoid *memory = 0;\n\tchar mallocStr[256];\n\n\tif (data) {\n\t\t*(size_t *)data = size;\n\t\tmg_memory_debug_totalMemUsed += size;\n\t\tmg_memory_debug_blockCount++;\n\t\tmemory = (void *)(((char *)data) + sizeof(size_t));\n\t}\n\n\tsprintf(mallocStr,\n\t        \"MEM: %p %5lu alloc   %7lu %4lu --- %s:%u\\n\",\n\t        memory,\n\t        (unsigned long)size,\n\t        mg_memory_debug_totalMemUsed,\n\t        mg_memory_debug_blockCount,\n\t        file,\n\t        line);\n#if defined(_WIN32)\n\tOutputDebugStringA(mallocStr);\n#else\n\tDEBUG_TRACE(\"%s\", mallocStr);\n#endif\n\n\treturn memory;\n}\n\n\nstatic void *\nmg_calloc_ex(size_t count, size_t size, const char *file, unsigned line)\n{\n\tvoid *data = mg_malloc_ex(size * count, file, line);\n\tif (data) {\n\t\tmemset(data, 0, size * count);\n\t}\n\treturn data;\n}\n\n\nstatic void\nmg_free_ex(void *memory, const char *file, unsigned line)\n{\n\tchar mallocStr[256];\n\tvoid *data = (void *)(((char *)memory) - sizeof(size_t));\n\tsize_t size;\n\n\tif (memory) {\n\t\tsize = *(size_t *)data;\n\t\tmg_memory_debug_totalMemUsed -= size;\n\t\tmg_memory_debug_blockCount--;\n\t\tsprintf(mallocStr,\n\t\t        \"MEM: %p %5lu free    %7lu %4lu --- %s:%u\\n\",\n\t\t        memory,\n\t\t        (unsigned long)size,\n\t\t        mg_memory_debug_totalMemUsed,\n\t\t        mg_memory_debug_blockCount,\n\t\t        file,\n\t\t        line);\n#if defined(_WIN32)\n\t\tOutputDebugStringA(mallocStr);\n#else\n\t\tDEBUG_TRACE(\"%s\", mallocStr);\n#endif\n\n\t\tfree(data);\n\t}\n}\n\n\nstatic void *\nmg_realloc_ex(void *memory, size_t newsize, const char *file, unsigned line)\n{\n\tchar mallocStr[256];\n\tvoid *data;\n\tvoid *_realloc;\n\tsize_t oldsize;\n\n\tif (newsize) {\n\t\tif (memory) {\n\t\t\tdata = (void *)(((char *)memory) - sizeof(size_t));\n\t\t\toldsize = *(size_t *)data;\n\t\t\t_realloc = realloc(data, newsize + sizeof(size_t));\n\t\t\tif (_realloc) {\n\t\t\t\tdata = _realloc;\n\t\t\t\tmg_memory_debug_totalMemUsed -= oldsize;\n\t\t\t\tsprintf(mallocStr,\n\t\t\t\t        \"MEM: %p %5lu r-free  %7lu %4lu --- %s:%u\\n\",\n\t\t\t\t        memory,\n\t\t\t\t        (unsigned long)oldsize,\n\t\t\t\t        mg_memory_debug_totalMemUsed,\n\t\t\t\t        mg_memory_debug_blockCount,\n\t\t\t\t        file,\n\t\t\t\t        line);\n#if defined(_WIN32)\n\t\t\t\tOutputDebugStringA(mallocStr);\n#else\n\t\t\t\tDEBUG_TRACE(\"%s\", mallocStr);\n#endif\n\t\t\t\tmg_memory_debug_totalMemUsed += newsize;\n\t\t\t\tsprintf(mallocStr,\n\t\t\t\t        \"MEM: %p %5lu r-alloc %7lu %4lu --- %s:%u\\n\",\n\t\t\t\t        memory,\n\t\t\t\t        (unsigned long)newsize,\n\t\t\t\t        mg_memory_debug_totalMemUsed,\n\t\t\t\t        mg_memory_debug_blockCount,\n\t\t\t\t        file,\n\t\t\t\t        line);\n#if defined(_WIN32)\n\t\t\t\tOutputDebugStringA(mallocStr);\n#else\n\t\t\t\tDEBUG_TRACE(\"%s\", mallocStr);\n#endif\n\t\t\t\t*(size_t *)data = newsize;\n\t\t\t\tdata = (void *)(((char *)data) + sizeof(size_t));\n\t\t\t} else {\n#if defined(_WIN32)\n\t\t\t\tOutputDebugStringA(\"MEM: realloc failed\\n\");\n#else\n\t\t\t\tDEBUG_TRACE(\"%s\", \"MEM: realloc failed\\n\");\n#endif\n\t\t\t\treturn _realloc;\n\t\t\t}\n\t\t} else {\n\t\t\tdata = mg_malloc_ex(newsize, file, line);\n\t\t}\n\t} else {\n\t\tdata = 0;\n\t\tmg_free_ex(memory, file, line);\n\t}\n\n\treturn data;\n}\n\n#define mg_malloc(a) mg_malloc_ex(a, __FILE__, __LINE__)\n#define mg_calloc(a, b) mg_calloc_ex(a, b, __FILE__, __LINE__)\n#define mg_realloc(a, b) mg_realloc_ex(a, b, __FILE__, __LINE__)\n#define mg_free(a) mg_free_ex(a, __FILE__, __LINE__)\n\n#else\n\nstatic __inline void *\nmg_malloc(size_t a)\n{\n\treturn malloc(a);\n}\n\nstatic __inline void *\nmg_calloc(size_t a, size_t b)\n{\n\treturn calloc(a, b);\n}\n\nstatic __inline void *\nmg_realloc(void *a, size_t b)\n{\n\treturn realloc(a, b);\n}\n\nstatic __inline void\nmg_free(void *a)\n{\n\tfree(a);\n}\n\n#endif\n\n\nstatic void mg_vsnprintf(const struct mg_connection *conn,\n                         int *truncated,\n                         char *buf,\n                         size_t buflen,\n                         const char *fmt,\n                         va_list ap);\n\nstatic void mg_snprintf(const struct mg_connection *conn,\n                        int *truncated,\n                        char *buf,\n                        size_t buflen,\n                        PRINTF_FORMAT_STRING(const char *fmt),\n                        ...) PRINTF_ARGS(5, 6);\n\n/* This following lines are just meant as a reminder to use the mg-functions\n * for memory management */\n#ifdef malloc\n#undef malloc\n#endif\n#ifdef calloc\n#undef calloc\n#endif\n#ifdef realloc\n#undef realloc\n#endif\n#ifdef free\n#undef free\n#endif\n#ifdef snprintf\n#undef snprintf\n#endif\n#ifdef vsnprintf\n#undef vsnprintf\n#endif\n#define malloc DO_NOT_USE_THIS_FUNCTION__USE_mg_malloc\n#define calloc DO_NOT_USE_THIS_FUNCTION__USE_mg_calloc\n#define realloc DO_NOT_USE_THIS_FUNCTION__USE_mg_realloc\n#define free DO_NOT_USE_THIS_FUNCTION__USE_mg_free\n#define snprintf DO_NOT_USE_THIS_FUNCTION__USE_mg_snprintf\n#ifdef _WIN32 /* vsnprintf must not be used in any system, * \\ \\ \\             \\\n               * but this define only works well for Windows. */\n#define vsnprintf DO_NOT_USE_THIS_FUNCTION__USE_mg_vsnprintf\n#endif\n\n#define MD5_STATIC static\n#include \"md5.inl\"\n\n/* Darwin prior to 7.0 and Win32 do not have socklen_t */\n#ifdef NO_SOCKLEN_T\ntypedef int socklen_t;\n#endif /* NO_SOCKLEN_T */\n#define _DARWIN_UNLIMITED_SELECT\n\n#define IP_ADDR_STR_LEN (50) /* IPv6 hex string is 46 chars */\n\n#if !defined(MSG_NOSIGNAL)\n#define MSG_NOSIGNAL (0)\n#endif\n\n#if !defined(SOMAXCONN)\n#define SOMAXCONN (100)\n#endif\n\n/* Size of the accepted socket queue */\n#if !defined(MGSQLEN)\n#define MGSQLEN (20)\n#endif\n\n\n#if defined(NO_SSL)\ntypedef struct SSL SSL; /* dummy for SSL argument to push/pull */\ntypedef struct SSL_CTX SSL_CTX;\n#else\n#if defined(NO_SSL_DL)\n#include <openssl/ssl.h>\n#include <openssl/err.h>\n#include <openssl/crypto.h>\n#include <openssl/x509.h>\n#include <openssl/pem.h>\n#include <openssl/engine.h>\n#include <openssl/conf.h>\n#include <openssl/dh.h>\n#else\n/* SSL loaded dynamically from DLL.\n * I put the prototypes here to be independent from OpenSSL source\n * installation. */\n\ntypedef struct ssl_st SSL;\ntypedef struct ssl_method_st SSL_METHOD;\ntypedef struct ssl_ctx_st SSL_CTX;\ntypedef struct x509_store_ctx_st X509_STORE_CTX;\ntypedef struct x509_name X509_NAME;\ntypedef struct asn1_integer ASN1_INTEGER;\ntypedef struct evp_md EVP_MD;\ntypedef struct x509 X509;\n\n\n#define SSL_CTRL_OPTIONS (32)\n#define SSL_CTRL_CLEAR_OPTIONS (77)\n#define SSL_CTRL_SET_ECDH_AUTO (94)\n\n#define SSL_VERIFY_NONE (0)\n#define SSL_VERIFY_PEER (1)\n#define SSL_VERIFY_FAIL_IF_NO_PEER_CERT (2)\n#define SSL_VERIFY_CLIENT_ONCE (4)\n#define SSL_OP_ALL ((long)(0x80000BFFUL))\n#define SSL_OP_NO_SSLv2 (0x01000000L)\n#define SSL_OP_NO_SSLv3 (0x02000000L)\n#define SSL_OP_NO_TLSv1 (0x04000000L)\n#define SSL_OP_NO_TLSv1_2 (0x08000000L)\n#define SSL_OP_NO_TLSv1_1 (0x10000000L)\n#define SSL_OP_SINGLE_DH_USE (0x00100000L)\n#define SSL_OP_CIPHER_SERVER_PREFERENCE (0x00400000L)\n#define SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION (0x00010000L)\n\n#define SSL_ERROR_NONE (0)\n#define SSL_ERROR_SSL (1)\n#define SSL_ERROR_WANT_READ (2)\n#define SSL_ERROR_WANT_WRITE (3)\n#define SSL_ERROR_WANT_X509_LOOKUP (4)\n#define SSL_ERROR_SYSCALL (5) /* see errno */\n#define SSL_ERROR_ZERO_RETURN (6)\n#define SSL_ERROR_WANT_CONNECT (7)\n#define SSL_ERROR_WANT_ACCEPT (8)\n\n\nstruct ssl_func {\n\tconst char *name;  /* SSL function name */\n\tvoid (*ptr)(void); /* Function pointer */\n};\n\n#define SSL_free (*(void (*)(SSL *))ssl_sw[0].ptr)\n#define SSL_accept (*(int (*)(SSL *))ssl_sw[1].ptr)\n#define SSL_connect (*(int (*)(SSL *))ssl_sw[2].ptr)\n#define SSL_read (*(int (*)(SSL *, void *, int))ssl_sw[3].ptr)\n#define SSL_write (*(int (*)(SSL *, const void *, int))ssl_sw[4].ptr)\n#define SSL_get_error (*(int (*)(SSL *, int))ssl_sw[5].ptr)\n#define SSL_set_fd (*(int (*)(SSL *, SOCKET))ssl_sw[6].ptr)\n#define SSL_new (*(SSL * (*)(SSL_CTX *))ssl_sw[7].ptr)\n#define SSL_CTX_new (*(SSL_CTX * (*)(SSL_METHOD *))ssl_sw[8].ptr)\n#define SSLv23_server_method (*(SSL_METHOD * (*)(void))ssl_sw[9].ptr)\n#define SSL_library_init (*(int (*)(void))ssl_sw[10].ptr)\n#define SSL_CTX_use_PrivateKey_file                                            \\\n\t(*(int (*)(SSL_CTX *, const char *, int))ssl_sw[11].ptr)\n#define SSL_CTX_use_certificate_file                                           \\\n\t(*(int (*)(SSL_CTX *, const char *, int))ssl_sw[12].ptr)\n#define SSL_CTX_set_default_passwd_cb                                          \\\n\t(*(void (*)(SSL_CTX *, mg_callback_t))ssl_sw[13].ptr)\n#define SSL_CTX_free (*(void (*)(SSL_CTX *))ssl_sw[14].ptr)\n#define SSL_load_error_strings (*(void (*)(void))ssl_sw[15].ptr)\n#define SSL_CTX_use_certificate_chain_file                                     \\\n\t(*(int (*)(SSL_CTX *, const char *))ssl_sw[16].ptr)\n#define SSLv23_client_method (*(SSL_METHOD * (*)(void))ssl_sw[17].ptr)\n#define SSL_pending (*(int (*)(SSL *))ssl_sw[18].ptr)\n#define SSL_CTX_set_verify                                                     \\\n\t(*(void (*)(SSL_CTX *,                                                     \\\n\t            int,                                                           \\\n\t            int (*verify_callback)(int, X509_STORE_CTX *)))ssl_sw[19].ptr)\n#define SSL_shutdown (*(int (*)(SSL *))ssl_sw[20].ptr)\n#define SSL_CTX_load_verify_locations                                          \\\n\t(*(int (*)(SSL_CTX *, const char *, const char *))ssl_sw[21].ptr)\n#define SSL_CTX_set_default_verify_paths (*(int (*)(SSL_CTX *))ssl_sw[22].ptr)\n#define SSL_CTX_set_verify_depth (*(void (*)(SSL_CTX *, int))ssl_sw[23].ptr)\n#define SSL_get_peer_certificate (*(X509 * (*)(SSL *))ssl_sw[24].ptr)\n#define SSL_get_version (*(const char *(*)(SSL *))ssl_sw[25].ptr)\n#define SSL_get_current_cipher (*(SSL_CIPHER * (*)(SSL *))ssl_sw[26].ptr)\n#define SSL_CIPHER_get_name                                                    \\\n\t(*(const char *(*)(const SSL_CIPHER *))ssl_sw[27].ptr)\n#define SSL_CTX_check_private_key (*(int (*)(SSL_CTX *))ssl_sw[28].ptr)\n#define SSL_CTX_set_session_id_context                                         \\\n\t(*(int (*)(SSL_CTX *, const unsigned char *, unsigned int))ssl_sw[29].ptr)\n#define SSL_CTX_ctrl (*(long (*)(SSL_CTX *, int, long, void *))ssl_sw[30].ptr)\n\n\n#define SSL_CTX_set_cipher_list                                                \\\n\t(*(int (*)(SSL_CTX *, const char *))ssl_sw[31].ptr)\n#define SSL_CTX_set_options(ctx, op)                                           \\\n\tSSL_CTX_ctrl((ctx), SSL_CTRL_OPTIONS, (op), NULL)\n#define SSL_CTX_clear_options(ctx, op)                                         \\\n\tSSL_CTX_ctrl((ctx), SSL_CTRL_CLEAR_OPTIONS, (op), NULL)\n#define SSL_CTX_set_ecdh_auto(ctx, onoff)                                      \\\n\tSSL_CTX_ctrl(ctx, SSL_CTRL_SET_ECDH_AUTO, onoff, NULL)\n\n#define X509_get_notBefore(x) ((x)->cert_info->validity->notBefore)\n#define X509_get_notAfter(x) ((x)->cert_info->validity->notAfter)\n\n\n#define CRYPTO_num_locks (*(int (*)(void))crypto_sw[0].ptr)\n#define CRYPTO_set_locking_callback                                            \\\n\t(*(void (*)(void (*)(int, int, const char *, int)))crypto_sw[1].ptr)\n#define CRYPTO_set_id_callback                                                 \\\n\t(*(void (*)(unsigned long (*)(void)))crypto_sw[2].ptr)\n#define ERR_get_error (*(unsigned long (*)(void))crypto_sw[3].ptr)\n#define ERR_error_string (*(char *(*)(unsigned long, char *))crypto_sw[4].ptr)\n#define ERR_remove_state (*(void (*)(unsigned long))crypto_sw[5].ptr)\n#define ERR_free_strings (*(void (*)(void))crypto_sw[6].ptr)\n#define ENGINE_cleanup (*(void (*)(void))crypto_sw[7].ptr)\n#define CONF_modules_unload (*(void (*)(int))crypto_sw[8].ptr)\n#define CRYPTO_cleanup_all_ex_data (*(void (*)(void))crypto_sw[9].ptr)\n#define EVP_cleanup (*(void (*)(void))crypto_sw[10].ptr)\n#define X509_free (*(void (*)(X509 *))crypto_sw[11].ptr)\n#define X509_get_subject_name (*(X509_NAME * (*)(X509 *))crypto_sw[12].ptr)\n#define X509_get_issuer_name (*(X509_NAME * (*)(X509 *))crypto_sw[13].ptr)\n#define X509_NAME_oneline                                                      \\\n\t(*(char *(*)(X509_NAME *, char *, int))crypto_sw[14].ptr)\n#define X509_get_serialNumber (*(ASN1_INTEGER * (*)(X509 *))crypto_sw[15].ptr)\n#define i2c_ASN1_INTEGER                                                       \\\n\t(*(int (*)(ASN1_INTEGER *, unsigned char **))crypto_sw[16].ptr)\n#define EVP_get_digestbyname                                                   \\\n\t(*(const EVP_MD *(*)(const char *))crypto_sw[17].ptr)\n#define ASN1_digest                                                            \\\n\t(*(int (*)(int (*)(),                                                      \\\n\t           const EVP_MD *,                                                 \\\n\t           char *,                                                         \\\n\t           unsigned char *,                                                \\\n\t           unsigned int *))crypto_sw[18].ptr)\n#define i2d_X509 (*(int (*)(X509 *, unsigned char **))crypto_sw[19].ptr)\n\n\n/* set_ssl_option() function updates this array.\n * It loads SSL library dynamically and changes NULLs to the actual addresses\n * of respective functions. The macros above (like SSL_connect()) are really\n * just calling these functions indirectly via the pointer. */\nstatic struct ssl_func ssl_sw[] = {{\"SSL_free\", NULL},\n                                   {\"SSL_accept\", NULL},\n                                   {\"SSL_connect\", NULL},\n                                   {\"SSL_read\", NULL},\n                                   {\"SSL_write\", NULL},\n                                   {\"SSL_get_error\", NULL},\n                                   {\"SSL_set_fd\", NULL},\n                                   {\"SSL_new\", NULL},\n                                   {\"SSL_CTX_new\", NULL},\n                                   {\"SSLv23_server_method\", NULL},\n                                   {\"SSL_library_init\", NULL},\n                                   {\"SSL_CTX_use_PrivateKey_file\", NULL},\n                                   {\"SSL_CTX_use_certificate_file\", NULL},\n                                   {\"SSL_CTX_set_default_passwd_cb\", NULL},\n                                   {\"SSL_CTX_free\", NULL},\n                                   {\"SSL_load_error_strings\", NULL},\n                                   {\"SSL_CTX_use_certificate_chain_file\", NULL},\n                                   {\"SSLv23_client_method\", NULL},\n                                   {\"SSL_pending\", NULL},\n                                   {\"SSL_CTX_set_verify\", NULL},\n                                   {\"SSL_shutdown\", NULL},\n                                   {\"SSL_CTX_load_verify_locations\", NULL},\n                                   {\"SSL_CTX_set_default_verify_paths\", NULL},\n                                   {\"SSL_CTX_set_verify_depth\", NULL},\n                                   {\"SSL_get_peer_certificate\", NULL},\n                                   {\"SSL_get_version\", NULL},\n                                   {\"SSL_get_current_cipher\", NULL},\n                                   {\"SSL_CIPHER_get_name\", NULL},\n                                   {\"SSL_CTX_check_private_key\", NULL},\n                                   {\"SSL_CTX_set_session_id_context\", NULL},\n                                   {\"SSL_CTX_ctrl\", NULL},\n                                   {\"SSL_CTX_set_cipher_list\", NULL},\n                                   {NULL, NULL}};\n\n\n/* Similar array as ssl_sw. These functions could be located in different\n * lib. */\nstatic struct ssl_func crypto_sw[] = {{\"CRYPTO_num_locks\", NULL},\n                                      {\"CRYPTO_set_locking_callback\", NULL},\n                                      {\"CRYPTO_set_id_callback\", NULL},\n                                      {\"ERR_get_error\", NULL},\n                                      {\"ERR_error_string\", NULL},\n                                      {\"ERR_remove_state\", NULL},\n                                      {\"ERR_free_strings\", NULL},\n                                      {\"ENGINE_cleanup\", NULL},\n                                      {\"CONF_modules_unload\", NULL},\n                                      {\"CRYPTO_cleanup_all_ex_data\", NULL},\n                                      {\"EVP_cleanup\", NULL},\n                                      {\"X509_free\", NULL},\n                                      {\"X509_get_subject_name\", NULL},\n                                      {\"X509_get_issuer_name\", NULL},\n                                      {\"X509_NAME_oneline\", NULL},\n                                      {\"X509_get_serialNumber\", NULL},\n                                      {\"i2c_ASN1_INTEGER\", NULL},\n                                      {\"EVP_get_digestbyname\", NULL},\n                                      {\"ASN1_digest\", NULL},\n                                      {\"i2d_X509\", NULL},\n                                      {NULL, NULL}};\n#endif /* NO_SSL_DL */\n#endif /* NO_SSL */\n\n\n#if !defined(NO_CACHING)\nstatic const char *month_names[] = {\"Jan\",\n                                    \"Feb\",\n                                    \"Mar\",\n                                    \"Apr\",\n                                    \"May\",\n                                    \"Jun\",\n                                    \"Jul\",\n                                    \"Aug\",\n                                    \"Sep\",\n                                    \"Oct\",\n                                    \"Nov\",\n                                    \"Dec\"};\n#endif /* !NO_CACHING */\n\n/* Unified socket address. For IPv6 support, add IPv6 address structure in the\n * union u. */\nunion usa {\n\tstruct sockaddr sa;\n\tstruct sockaddr_in sin;\n#if defined(USE_IPV6)\n\tstruct sockaddr_in6 sin6;\n#endif\n};\n\n/* Describes a string (chunk of memory). */\nstruct vec {\n\tconst char *ptr;\n\tsize_t len;\n};\n\nstruct mg_file_stat {\n\t/* File properties filled by mg_stat: */\n\tuint64_t size;\n\ttime_t last_modified;\n\tint is_directory; /* Set to 1 if mg_stat is called for a directory */\n\tint is_gzipped;   /* Set to 1 if the content is gzipped, in which\n\t                   * case we need a \"Content-Eencoding: gzip\" header */\n\tint location;     /* 0 = nowhere, 1 = on disk, 2 = in memory */\n};\n\nstruct mg_file_in_memory {\n\tchar *p;\n\tuint32_t pos;\n\tchar mode;\n};\n\nstruct mg_file_access {\n\t/* File properties filled by mg_fopen: */\n\tFILE *fp;\n\t/* TODO: struct mg_file_in_memory *mf; */\n\tconst char *membuf; /* TODO: remove */\n};\n\nstruct mg_file {\n\tstruct mg_file_stat stat;\n\tstruct mg_file_access access;\n};\n\n#define STRUCT_FILE_INITIALIZER                                                \\\n\t{                                                                          \\\n\t\t{                                                                      \\\n\t\t\t(uint64_t)0, (time_t)0, 0, 0, 0                                    \\\n\t\t}                                                                      \\\n\t\t,                                                                      \\\n\t\t{                                                                      \\\n\t\t\t(FILE *) NULL, (const char *)NULL                                  \\\n\t\t}                                                                      \\\n\t}\n\n/* Describes listening socket, or socket which was accept()-ed by the master\n * thread and queued for future handling by the worker thread. */\nstruct socket {\n\tSOCKET sock;             /* Listening socket */\n\tunion usa lsa;           /* Local socket address */\n\tunion usa rsa;           /* Remote socket address */\n\tunsigned char is_ssl;    /* Is port SSL-ed */\n\tunsigned char ssl_redir; /* Is port supposed to redirect everything to SSL\n\t                          * port */\n\tunsigned char in_use;    /* Is valid */\n};\n\n/* NOTE(lsm): this enum shoulds be in sync with the config_options below. */\nenum {\n\tCGI_EXTENSIONS,\n\tCGI_ENVIRONMENT,\n\tPUT_DELETE_PASSWORDS_FILE,\n\tCGI_INTERPRETER,\n\tPROTECT_URI,\n\tAUTHENTICATION_DOMAIN,\n\tSSI_EXTENSIONS,\n\tTHROTTLE,\n\tACCESS_LOG_FILE,\n\tENABLE_DIRECTORY_LISTING,\n\tERROR_LOG_FILE,\n\tGLOBAL_PASSWORDS_FILE,\n\tINDEX_FILES,\n\tENABLE_KEEP_ALIVE,\n\tACCESS_CONTROL_LIST,\n\tEXTRA_MIME_TYPES,\n\tLISTENING_PORTS,\n\tDOCUMENT_ROOT,\n\tSSL_CERTIFICATE,\n\tNUM_THREADS,\n\tRUN_AS_USER,\n\tREWRITE,\n\tHIDE_FILES,\n\tREQUEST_TIMEOUT,\n\tKEEP_ALIVE_TIMEOUT,\n\tSSL_DO_VERIFY_PEER,\n\tSSL_CA_PATH,\n\tSSL_CA_FILE,\n\tSSL_VERIFY_DEPTH,\n\tSSL_DEFAULT_VERIFY_PATHS,\n\tSSL_CIPHER_LIST,\n\tSSL_PROTOCOL_VERSION,\n\tSSL_SHORT_TRUST,\n\n#if defined(USE_WEBSOCKET)\n\tWEBSOCKET_TIMEOUT,\n#endif\n\n\tDECODE_URL,\n\n#if defined(USE_LUA)\n\tLUA_PRELOAD_FILE,\n\tLUA_SCRIPT_EXTENSIONS,\n\tLUA_SERVER_PAGE_EXTENSIONS,\n#endif\n#if defined(USE_DUKTAPE)\n\tDUKTAPE_SCRIPT_EXTENSIONS,\n#endif\n\n#if defined(USE_WEBSOCKET)\n\tWEBSOCKET_ROOT,\n#endif\n#if defined(USE_LUA) && defined(USE_WEBSOCKET)\n\tLUA_WEBSOCKET_EXTENSIONS,\n#endif\n\n\tACCESS_CONTROL_ALLOW_ORIGIN,\n\tERROR_PAGES,\n\tCONFIG_TCP_NODELAY, /* Prepended CONFIG_ to avoid conflict with the\n                         * socket option typedef TCP_NODELAY. */\n#if !defined(NO_CACHING)\n\tSTATIC_FILE_MAX_AGE,\n#endif\n#if defined(__linux__)\n\tALLOW_SENDFILE_CALL,\n#endif\n#if defined(_WIN32)\n\tCASE_SENSITIVE_FILES,\n#endif\n\n\tNUM_OPTIONS\n};\n\n\n/* Config option name, config types, default value */\nstatic struct mg_option config_options[] = {\n    {\"cgi_pattern\", CONFIG_TYPE_EXT_PATTERN, \"**.cgi$|**.pl$|**.php$\"},\n    {\"cgi_environment\", CONFIG_TYPE_STRING, NULL},\n    {\"put_delete_auth_file\", CONFIG_TYPE_FILE, NULL},\n    {\"cgi_interpreter\", CONFIG_TYPE_FILE, NULL},\n    {\"protect_uri\", CONFIG_TYPE_STRING, NULL},\n    {\"authentication_domain\", CONFIG_TYPE_STRING, \"mydomain.com\"},\n    {\"ssi_pattern\", CONFIG_TYPE_EXT_PATTERN, \"**.shtml$|**.shtm$\"},\n    {\"throttle\", CONFIG_TYPE_STRING, NULL},\n    {\"access_log_file\", CONFIG_TYPE_FILE, NULL},\n    {\"enable_directory_listing\", CONFIG_TYPE_BOOLEAN, \"yes\"},\n    {\"error_log_file\", CONFIG_TYPE_FILE, NULL},\n    {\"global_auth_file\", CONFIG_TYPE_FILE, NULL},\n    {\"index_files\",\n     CONFIG_TYPE_STRING,\n#ifdef USE_LUA\n     \"index.xhtml,index.html,index.htm,index.lp,index.lsp,index.lua,index.cgi,\"\n     \"index.shtml,index.php\"},\n#else\n     \"index.xhtml,index.html,index.htm,index.cgi,index.shtml,index.php\"},\n#endif\n    {\"enable_keep_alive\", CONFIG_TYPE_BOOLEAN, \"no\"},\n    {\"access_control_list\", CONFIG_TYPE_STRING, NULL},\n    {\"extra_mime_types\", CONFIG_TYPE_STRING, NULL},\n    {\"listening_ports\", CONFIG_TYPE_STRING, \"8080\"},\n    {\"document_root\", CONFIG_TYPE_DIRECTORY, NULL},\n    {\"ssl_certificate\", CONFIG_TYPE_FILE, NULL},\n    {\"num_threads\", CONFIG_TYPE_NUMBER, \"50\"},\n    {\"run_as_user\", CONFIG_TYPE_STRING, NULL},\n    {\"url_rewrite_patterns\", CONFIG_TYPE_STRING, NULL},\n    {\"hide_files_patterns\", CONFIG_TYPE_EXT_PATTERN, NULL},\n    {\"request_timeout_ms\", CONFIG_TYPE_NUMBER, \"30000\"},\n    {\"keep_alive_timeout_ms\", CONFIG_TYPE_NUMBER, \"500\"},\n    {\"ssl_verify_peer\", CONFIG_TYPE_BOOLEAN, \"no\"},\n    {\"ssl_ca_path\", CONFIG_TYPE_DIRECTORY, NULL},\n    {\"ssl_ca_file\", CONFIG_TYPE_FILE, NULL},\n    {\"ssl_verify_depth\", CONFIG_TYPE_NUMBER, \"9\"},\n    {\"ssl_default_verify_paths\", CONFIG_TYPE_BOOLEAN, \"yes\"},\n    {\"ssl_cipher_list\", CONFIG_TYPE_STRING, NULL},\n    {\"ssl_protocol_version\", CONFIG_TYPE_NUMBER, \"0\"},\n    {\"ssl_short_trust\", CONFIG_TYPE_BOOLEAN, \"no\"},\n#if defined(USE_WEBSOCKET)\n    {\"websocket_timeout_ms\", CONFIG_TYPE_NUMBER, \"30000\"},\n#endif\n    {\"decode_url\", CONFIG_TYPE_BOOLEAN, \"yes\"},\n\n#if defined(USE_LUA)\n    {\"lua_preload_file\", CONFIG_TYPE_FILE, NULL},\n    {\"lua_script_pattern\", CONFIG_TYPE_EXT_PATTERN, \"**.lua$\"},\n    {\"lua_server_page_pattern\", CONFIG_TYPE_EXT_PATTERN, \"**.lp$|**.lsp$\"},\n#endif\n#if defined(USE_DUKTAPE)\n    /* The support for duktape is still in alpha version state.\n     * The name of this config option might change. */\n    {\"duktape_script_pattern\", CONFIG_TYPE_EXT_PATTERN, \"**.ssjs$\"},\n#endif\n\n#if defined(USE_WEBSOCKET)\n    {\"websocket_root\", CONFIG_TYPE_DIRECTORY, NULL},\n#endif\n#if defined(USE_LUA) && defined(USE_WEBSOCKET)\n    {\"lua_websocket_pattern\", CONFIG_TYPE_EXT_PATTERN, \"**.lua$\"},\n#endif\n    {\"access_control_allow_origin\", CONFIG_TYPE_STRING, \"*\"},\n    {\"error_pages\", CONFIG_TYPE_DIRECTORY, NULL},\n    {\"tcp_nodelay\", CONFIG_TYPE_NUMBER, \"0\"},\n#if !defined(NO_CACHING)\n    {\"static_file_max_age\", CONFIG_TYPE_NUMBER, \"3600\"},\n#endif\n#if defined(__linux__)\n    {\"allow_sendfile_call\", CONFIG_TYPE_BOOLEAN, \"yes\"},\n#endif\n#if defined(_WIN32)\n    {\"case_sensitive\", CONFIG_TYPE_BOOLEAN, \"no\"},\n#endif\n\n    {NULL, CONFIG_TYPE_UNKNOWN, NULL}};\n\n/* Check if the config_options and the corresponding enum have compatible\n * sizes. */\nmg_static_assert((sizeof(config_options) / sizeof(config_options[0]))\n                     == (NUM_OPTIONS + 1),\n                 \"config_options and enum not sync\");\n\nenum { REQUEST_HANDLER, WEBSOCKET_HANDLER, AUTH_HANDLER };\n\nstruct mg_handler_info {\n\t/* Name/Pattern of the URI. */\n\tchar *uri;\n\tsize_t uri_len;\n\n\t/* handler type */\n\tint handler_type;\n\n\t/* Handler for http/https or authorization requests. */\n\tmg_request_handler handler;\n\n\t/* Handler for ws/wss (websocket) requests. */\n\tmg_websocket_connect_handler connect_handler;\n\tmg_websocket_ready_handler ready_handler;\n\tmg_websocket_data_handler data_handler;\n\tmg_websocket_close_handler close_handler;\n\n\t/* accepted subprotocols for ws/wss requests. */\n\tstruct mg_websocket_subprotocols *subprotocols;\n\n\t/* Handler for authorization requests */\n\tmg_authorization_handler auth_handler;\n\n\t/* User supplied argument for the handler function. */\n\tvoid *cbdata;\n\n\t/* next handler in a linked list */\n\tstruct mg_handler_info *next;\n};\n\nstruct mg_context {\n\tvolatile int stop_flag;        /* Should we stop event loop */\n\tSSL_CTX *ssl_ctx;              /* SSL context */\n\tchar *config[NUM_OPTIONS];     /* Civetweb configuration parameters */\n\tstruct mg_callbacks callbacks; /* User-defined callback function */\n\tvoid *user_data;               /* User-defined data */\n\tint context_type;              /* 1 = server context,\n\t                                * 2 = ws/wss client context,\n\t                                */\n\n\tstruct socket *listening_sockets;\n\tstruct pollfd *listening_socket_fds;\n\tunsigned int num_listening_sockets;\n\n\tpthread_mutex_t thread_mutex; /* Protects (max|num)_threads */\n\n#ifdef ALTERNATIVE_QUEUE\n\tstruct socket *client_socks;\n\tvoid **client_wait_events;\n#else\n\tstruct socket queue[MGSQLEN]; /* Accepted sockets */\n\tvolatile int sq_head;         /* Head of the socket queue */\n\tvolatile int sq_tail;         /* Tail of the socket queue */\n\tpthread_cond_t sq_full;       /* Signaled when socket is produced */\n\tpthread_cond_t sq_empty;      /* Signaled when socket is consumed */\n#endif\n\n\tpthread_t masterthreadid; /* The master thread ID */\n\tunsigned int\n\t    cfg_worker_threads;     /* The number of configured worker threads. */\n\tpthread_t *workerthreadids; /* The worker thread IDs */\n\n\ttime_t start_time;        /* Server start time, used for authentication */\n\tuint64_t auth_nonce_mask; /* Mask for all nonce values */\n\tpthread_mutex_t nonce_mutex; /* Protects nonce_count */\n\tunsigned long nonce_count;   /* Used nonces, used for authentication */\n\n\tchar *systemName; /* What operating system is running */\n\n\t/* linked list of uri handlers */\n\tstruct mg_handler_info *handlers;\n\n#if defined(USE_LUA) && defined(USE_WEBSOCKET)\n\t/* linked list of shared lua websockets */\n\tstruct mg_shared_lua_websocket_list *shared_lua_websockets;\n#endif\n\n#ifdef USE_TIMERS\n\tstruct ttimers *timers;\n#endif\n};\n\n\nstruct mg_connection {\n\tstruct mg_request_info request_info;\n\tstruct mg_context *ctx;\n\tSSL *ssl;                 /* SSL descriptor */\n\tSSL_CTX *client_ssl_ctx;  /* SSL context for client connections */\n\tstruct socket client;     /* Connected client */\n\ttime_t conn_birth_time;   /* Time (wall clock) when connection was\n\t                           * established */\n\tstruct timespec req_time; /* Time (since system start) when the request\n\t                           * was received */\n\tint64_t num_bytes_sent;   /* Total bytes sent to client */\n\tint64_t content_len;      /* Content-Length header value */\n\tint64_t consumed_content; /* How many bytes of content have been read */\n\tint is_chunked;           /* Transfer-Encoding is chunked: 0=no, 1=yes:\n\t                           * data available, 2: all data read */\n\tsize_t chunk_remainder;   /* Unread data from the last chunk */\n\tchar *buf;                /* Buffer for received data */\n\tchar *path_info;          /* PATH_INFO part of the URL */\n\n\tint must_close;       /* 1 if connection must be closed */\n\tint in_error_handler; /* 1 if in handler for user defined error\n\t                       * pages */\n\tint handled_requests; /* Number of requests handled by this connection */\n\tint buf_size;         /* Buffer size */\n\tint request_len;      /* Size of the request + headers in a buffer */\n\tint data_len;         /* Total size of data in a buffer */\n\tint status_code;      /* HTTP reply status code, e.g. 200 */\n\tint throttle;         /* Throttling, bytes/sec. <= 0 means no\n\t                       * throttle */\n\ttime_t last_throttle_time;   /* Last time throttled data was sent */\n\tint64_t last_throttle_bytes; /* Bytes sent this second */\n\tpthread_mutex_t mutex;       /* Used by mg_(un)lock_connection to ensure\n\t                              * atomic transmissions for websockets */\n#if defined(USE_LUA) && defined(USE_WEBSOCKET)\n\tvoid *lua_websocket_state; /* Lua_State for a websocket connection */\n#endif\n\n\tint thread_index; /* Thread index within ctx */\n};\n\n\nstatic pthread_key_t sTlsKey; /* Thread local storage index */\nstatic int sTlsInit = 0;\nstatic int thread_idx_max = 0;\n\n\nstruct mg_workerTLS {\n\tint is_master;\n\tunsigned long thread_idx;\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\tHANDLE pthread_cond_helper_mutex;\n\tstruct mg_workerTLS *next_waiting_thread;\n#endif\n};\n\n/* Directory entry */\nstruct de {\n\tstruct mg_connection *conn;\n\tchar *file_name;\n\tstruct mg_file_stat file;\n};\n\n\n#if defined(USE_WEBSOCKET)\nstatic int is_websocket_protocol(const struct mg_connection *conn);\n#else\n#define is_websocket_protocol(conn) (0)\n#endif\n\n\nstatic int\nmg_atomic_inc(volatile int *addr)\n{\n\tint ret;\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\t/* Depending on the SDK, this function uses either\n\t * (volatile unsigned int *) or (volatile LONG *),\n\t * so whatever you use, the other SDK is likely to raise a warning. */\n\tret = InterlockedIncrement((volatile long *)addr);\n#elif defined(__GNUC__)                                                        \\\n    && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 0)))\n\tret = __sync_add_and_fetch(addr, 1);\n#else\n\tret = (++(*addr));\n#endif\n\treturn ret;\n}\n\n\nstatic int\nmg_atomic_dec(volatile int *addr)\n{\n\tint ret;\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\t/* Depending on the SDK, this function uses either\n\t * (volatile unsigned int *) or (volatile LONG *),\n\t * so whatever you use, the other SDK is likely to raise a warning. */\n\tret = InterlockedDecrement((volatile long *)addr);\n#elif defined(__GNUC__)                                                        \\\n    && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 0)))\n\tret = __sync_sub_and_fetch(addr, 1);\n#else\n\tret = (--(*addr));\n#endif\n\treturn ret;\n}\n\n#if !defined(NO_THREAD_NAME)\n#if defined(_WIN32) && defined(_MSC_VER)\n/* Set the thread name for debugging purposes in Visual Studio\n * http://msdn.microsoft.com/en-us/library/xcb2z8hs.aspx\n */\n#pragma pack(push, 8)\ntypedef struct tagTHREADNAME_INFO {\n\tDWORD dwType;     /* Must be 0x1000. */\n\tLPCSTR szName;    /* Pointer to name (in user addr space). */\n\tDWORD dwThreadID; /* Thread ID (-1=caller thread). */\n\tDWORD dwFlags;    /* Reserved for future use, must be zero. */\n} THREADNAME_INFO;\n#pragma pack(pop)\n\n#elif defined(__linux__)\n\n#include <sys/prctl.h>\n#include <sys/sendfile.h>\n#include <sys/eventfd.h>\n\n\n#if defined(ALTERNATIVE_QUEUE)\n\nstatic void *\nevent_create(void)\n{\n\tint ret = eventfd(0, EFD_CLOEXEC);\n\tif (ret == -1) {\n\t\t/* Linux uses -1 on error, Windows NULL. */\n\t\t/* However, Linux does not return 0 on success either. */\n\t\treturn 0;\n\t}\n\treturn (void *)ret;\n}\n\n\nstatic int\nevent_wait(void *eventhdl)\n{\n\tuint64_t u;\n\tint s = (int)read((int)eventhdl, &u, sizeof(u));\n\tif (s != sizeof(uint64_t)) {\n\t\t/* error */\n\t\treturn 0;\n\t}\n\t(void)u; /* the value is not required */\n\treturn 1;\n}\n\n\nstatic int\nevent_signal(void *eventhdl)\n{\n\tuint64_t u = 1;\n\tint s = (int)write((int)eventhdl, &u, sizeof(u));\n\tif (s != sizeof(uint64_t)) {\n\t\t/* error */\n\t\treturn 0;\n\t}\n\treturn 1;\n}\n\n\nstatic void\nevent_destroy(void *eventhdl)\n{\n\tclose((int)eventhdl);\n}\n#endif\n\n#endif\n\n\n#if !defined(__linux__) && !defined(_WIN32) && defined(ALTERNATIVE_QUEUE)\n\nstruct posix_event {\n\tpthread_mutex_t mutex;\n\tpthread_cond_t cond;\n};\n\n\nstatic void *\nevent_create(void)\n{\n\tstruct posix_event *ret = mg_malloc(sizeof(struct posix_event));\n\tif (ret == 0) {\n\t\t/* out of memory */\n\t\treturn 0;\n\t}\n\tif (0 != pthread_mutex_init(&(ret->mutex), NULL)) {\n\t\t/* pthread mutex not available */\n\t\tmg_free(ret);\n\t\treturn 0;\n\t}\n\tif (0 != pthread_cond_init(&(ret->cond), NULL)) {\n\t\t/* pthread cond not available */\n\t\tpthread_mutex_destroy(&(ret->mutex));\n\t\tmg_free(ret);\n\t\treturn 0;\n\t}\n\treturn (void *)ret;\n}\n\n\nstatic int\nevent_wait(void *eventhdl)\n{\n\tstruct posix_event *ev = (struct posix_event *)eventhdl;\n\tpthread_mutex_lock(&(ev->mutex));\n\tpthread_cond_wait(&(ev->cond), &(ev->mutex));\n\tpthread_mutex_unlock(&(ev->mutex));\n\treturn 1;\n}\n\n\nstatic int\nevent_signal(void *eventhdl)\n{\n\tstruct posix_event *ev = (struct posix_event *)eventhdl;\n\tpthread_mutex_lock(&(ev->mutex));\n\tpthread_cond_signal(&(ev->cond));\n\tpthread_mutex_unlock(&(ev->mutex));\n\treturn 1;\n}\n\n\nstatic void\nevent_destroy(void *eventhdl)\n{\n\tstruct posix_event *ev = (struct posix_event *)eventhdl;\n\tpthread_cond_destroy(&(ev->cond));\n\tpthread_mutex_destroy(&(ev->mutex));\n\tmg_free(ev);\n}\n#endif\n\n\nstatic void\nmg_set_thread_name(const char *name)\n{\n\tchar threadName[16 + 1]; /* 16 = Max. thread length in Linux/OSX/.. */\n\n\tmg_snprintf(\n\t    NULL, NULL, threadName, sizeof(threadName), \"civetweb-%s\", name);\n\n#if defined(_WIN32)\n#if defined(_MSC_VER)\n\t/* Windows and Visual Studio Compiler */\n\t__try\n\t{\n\t\tTHREADNAME_INFO info;\n\t\tinfo.dwType = 0x1000;\n\t\tinfo.szName = threadName;\n\t\tinfo.dwThreadID = ~0U;\n\t\tinfo.dwFlags = 0;\n\n\t\tRaiseException(0x406D1388,\n\t\t               0,\n\t\t               sizeof(info) / sizeof(ULONG_PTR),\n\t\t               (ULONG_PTR *)&info);\n\t}\n\t__except(EXCEPTION_EXECUTE_HANDLER)\n\t{\n\t}\n#elif defined(__MINGW32__)\n/* No option known to set thread name for MinGW */\n#endif\n#elif defined(__GLIBC__)                                                       \\\n    && ((__GLIBC__ > 2) || ((__GLIBC__ == 2) && (__GLIBC_MINOR__ >= 12)))\n\t/* pthread_setname_np first appeared in glibc in version 2.12*/\n\t(void)pthread_setname_np(pthread_self(), threadName);\n#elif defined(__linux__)\n\t/* on linux we can use the old prctl function */\n\t(void)prctl(PR_SET_NAME, threadName, 0, 0, 0);\n#endif\n}\n#else /* !defined(NO_THREAD_NAME) */\nvoid\nmg_set_thread_name(const char *threadName)\n{\n}\n#endif\n\n\n#if defined(MG_LEGACY_INTERFACE)\nconst char **\nmg_get_valid_option_names(void)\n{\n\t/* This function is deprecated. Use mg_get_valid_options instead. */\n\tstatic const char *\n\t    data[2 * sizeof(config_options) / sizeof(config_options[0])] = {0};\n\tint i;\n\n\tfor (i = 0; config_options[i].name != NULL; i++) {\n\t\tdata[i * 2] = config_options[i].name;\n\t\tdata[i * 2 + 1] = config_options[i].default_value;\n\t}\n\n\treturn data;\n}\n#endif\n\n\nconst struct mg_option *\nmg_get_valid_options(void)\n{\n\treturn config_options;\n}\n\n\n/* Do not open file (used in is_file_in_memory) */\n#define MG_FOPEN_MODE_NONE (0)\n\n/* Open file for read only access */\n#define MG_FOPEN_MODE_READ (1)\n\n/* Open file for writing, create and overwrite */\n#define MG_FOPEN_MODE_WRITE (2)\n\n/* Open file for writing, create and append */\n#define MG_FOPEN_MODE_APPEND (4)\n\n\n/* If a file is in memory, set all \"stat\" members and the membuf pointer of\n * output filep and return 1, otherwise return 0 and don't modify anything. */\nstatic int\nopen_file_in_memory(const struct mg_connection *conn,\n                    const char *path,\n                    struct mg_file *filep,\n                    int mode)\n{\n\tsize_t size = 0;\n\tconst char *buf = NULL;\n\tif (!conn) {\n\t\treturn 0;\n\t}\n\n\tif ((mode != MG_FOPEN_MODE_NONE) && (mode != MG_FOPEN_MODE_READ)) {\n\t\treturn 0;\n\t}\n\n\tif (conn->ctx->callbacks.open_file) {\n\t\tbuf = conn->ctx->callbacks.open_file(conn, path, &size);\n\t\tif (buf != NULL) {\n\t\t\tif (filep == NULL) {\n\t\t\t\t/* This is a file in memory, but we cannot store the properties\n\t\t\t\t * now.\n\t\t\t\t * Called from \"is_file_in_memory\" function. */\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t/* NOTE: override filep->size only on success. Otherwise, it might\n\t\t\t * break constructs like if (!mg_stat() || !mg_fopen()) ... */\n\t\t\tfilep->access.membuf = buf;\n\t\t\tfilep->access.fp = NULL;\n\n\t\t\t/* Size was set by the callback */\n\t\t\tfilep->stat.size = size;\n\n\t\t\t/* Assume the data may change during runtime by setting\n\t\t\t * last_modified = now */\n\t\t\tfilep->stat.last_modified = time(NULL);\n\n\t\t\tfilep->stat.is_directory = 0;\n\t\t\tfilep->stat.is_gzipped = 0;\n\t\t}\n\t}\n\n\treturn (buf != NULL);\n}\n\n\nstatic int\nis_file_in_memory(const struct mg_connection *conn, const char *path)\n{\n\treturn open_file_in_memory(conn, path, NULL, MG_FOPEN_MODE_NONE);\n}\n\n\nstatic int\nis_file_opened(const struct mg_file_access *fileacc)\n{\n\tif (!fileacc) {\n\t\treturn 0;\n\t}\n\treturn (fileacc->membuf != NULL) || (fileacc->fp != NULL);\n}\n\n\nstatic int mg_stat(const struct mg_connection *conn,\n                   const char *path,\n                   struct mg_file_stat *filep);\n\n\n/* mg_fopen will open a file either in memory or on the disk.\n * The input parameter path is a string in UTF-8 encoding.\n * The input parameter mode is MG_FOPEN_MODE_*\n * On success, either fp or membuf will be set in the output\n * struct file. All status members will also be set.\n * The function returns 1 on success, 0 on error. */\nstatic int\nmg_fopen(const struct mg_connection *conn,\n         const char *path,\n         int mode,\n         struct mg_file *filep)\n{\n\tint found;\n\n\tif (!filep) {\n\t\treturn 0;\n\t}\n\tfilep->access.fp = NULL;\n\tfilep->access.membuf = NULL;\n\n\tif (!is_file_in_memory(conn, path)) {\n\n\t\t/* filep is initialized in mg_stat: all fields with memset to,\n\t\t* some fields like size and modification date with values */\n\t\tfound = mg_stat(conn, path, &(filep->stat));\n\n\t\tif ((mode == MG_FOPEN_MODE_READ) && (!found)) {\n\t\t\t/* file does not exist and will not be created */\n\t\t\treturn 0;\n\t\t}\n\n#ifdef _WIN32\n\t\t{\n\t\t\twchar_t wbuf[PATH_MAX];\n\t\t\tpath_to_unicode(conn, path, wbuf, ARRAY_SIZE(wbuf));\n\t\t\tswitch (mode) {\n\t\t\tcase MG_FOPEN_MODE_READ:\n\t\t\t\tfilep->access.fp = _wfopen(wbuf, L\"rb\");\n\t\t\t\tbreak;\n\t\t\tcase MG_FOPEN_MODE_WRITE:\n\t\t\t\tfilep->access.fp = _wfopen(wbuf, L\"wb\");\n\t\t\t\tbreak;\n\t\t\tcase MG_FOPEN_MODE_APPEND:\n\t\t\t\tfilep->access.fp = _wfopen(wbuf, L\"ab\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n#else\n\t\t/* Linux et al already use unicode. No need to convert. */\n\t\tswitch (mode) {\n\t\tcase MG_FOPEN_MODE_READ:\n\t\t\tfilep->access.fp = fopen(path, \"r\");\n\t\t\tbreak;\n\t\tcase MG_FOPEN_MODE_WRITE:\n\t\t\tfilep->access.fp = fopen(path, \"w\");\n\t\t\tbreak;\n\t\tcase MG_FOPEN_MODE_APPEND:\n\t\t\tfilep->access.fp = fopen(path, \"a\");\n\t\t\tbreak;\n\t\t}\n\n#endif\n\t\tif (!found) {\n\t\t\t/* File did not exist before fopen was called.\n\t\t\t * Maybe it has been created now. Get stat info\n\t\t\t * like creation time now. */\n\t\t\tfound = mg_stat(conn, path, &(filep->stat));\n\t\t\t(void)found;\n\t\t}\n\n\t\t/* file is on disk */\n\t\treturn (filep->access.fp != NULL);\n\n\t} else {\n\t\t/* is_file_in_memory returned true */\n\t\tif (open_file_in_memory(conn, path, filep, mode)) {\n\t\t\t/* file is in memory */\n\t\t\treturn (filep->access.membuf != NULL);\n\t\t}\n\t}\n\n\t/* Open failed */\n\treturn 0;\n}\n\n\n/* return 0 on success, just like fclose */\nstatic int\nmg_fclose(struct mg_file_access *fileacc)\n{\n\tint ret = -1;\n\tif (fileacc != NULL) {\n\t\tif (fileacc->fp != NULL) {\n\t\t\tret = fclose(fileacc->fp);\n\t\t} else if (fileacc->membuf != NULL) {\n\t\t\tret = 0;\n\t\t}\n\t\t/* reset all members of fileacc */\n\t\tmemset(fileacc, 0, sizeof(*fileacc));\n\t}\n\treturn ret;\n}\n\n\nstatic void\nmg_strlcpy(register char *dst, register const char *src, size_t n)\n{\n\tfor (; *src != '\\0' && n > 1; n--) {\n\t\t*dst++ = *src++;\n\t}\n\t*dst = '\\0';\n}\n\n\nstatic int\nlowercase(const char *s)\n{\n\treturn tolower(*(const unsigned char *)s);\n}\n\n\nint\nmg_strncasecmp(const char *s1, const char *s2, size_t len)\n{\n\tint diff = 0;\n\n\tif (len > 0) {\n\t\tdo {\n\t\t\tdiff = lowercase(s1++) - lowercase(s2++);\n\t\t} while (diff == 0 && s1[-1] != '\\0' && --len > 0);\n\t}\n\n\treturn diff;\n}\n\n\nint\nmg_strcasecmp(const char *s1, const char *s2)\n{\n\tint diff;\n\n\tdo {\n\t\tdiff = lowercase(s1++) - lowercase(s2++);\n\t} while (diff == 0 && s1[-1] != '\\0');\n\n\treturn diff;\n}\n\n\nstatic char *\nmg_strndup(const char *ptr, size_t len)\n{\n\tchar *p;\n\n\tif ((p = (char *)mg_malloc(len + 1)) != NULL) {\n\t\tmg_strlcpy(p, ptr, len + 1);\n\t}\n\n\treturn p;\n}\n\n\nstatic char *\nmg_strdup(const char *str)\n{\n\treturn mg_strndup(str, strlen(str));\n}\n\n\nstatic const char *\nmg_strcasestr(const char *big_str, const char *small_str)\n{\n\tsize_t i, big_len = strlen(big_str), small_len = strlen(small_str);\n\n\tif (big_len >= small_len) {\n\t\tfor (i = 0; i <= (big_len - small_len); i++) {\n\t\t\tif (mg_strncasecmp(big_str + i, small_str, small_len) == 0) {\n\t\t\t\treturn big_str + i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn NULL;\n}\n\n\n/* Return null terminated string of given maximum length.\n * Report errors if length is exceeded. */\nstatic void\nmg_vsnprintf(const struct mg_connection *conn,\n             int *truncated,\n             char *buf,\n             size_t buflen,\n             const char *fmt,\n             va_list ap)\n{\n\tint n, ok;\n\n\tif (buflen == 0) {\n\t\treturn;\n\t}\n\n#ifdef __clang__\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wformat-nonliteral\"\n/* Using fmt as a non-literal is intended here, since it is mostly called\n * indirectly by mg_snprintf */\n#endif\n\n\tn = (int)vsnprintf_impl(buf, buflen, fmt, ap);\n\tok = (n >= 0) && ((size_t)n < buflen);\n\n#ifdef __clang__\n#pragma clang diagnostic pop\n#endif\n\n\tif (ok) {\n\t\tif (truncated) {\n\t\t\t*truncated = 0;\n\t\t}\n\t} else {\n\t\tif (truncated) {\n\t\t\t*truncated = 1;\n\t\t}\n\t\tmg_cry(conn,\n\t\t       \"truncating vsnprintf buffer: [%.*s]\",\n\t\t       (int)((buflen > 200) ? 200 : (buflen - 1)),\n\t\t       buf);\n\t\tn = (int)buflen - 1;\n\t}\n\tbuf[n] = '\\0';\n}\n\n\nstatic void\nmg_snprintf(const struct mg_connection *conn,\n            int *truncated,\n            char *buf,\n            size_t buflen,\n            const char *fmt,\n            ...)\n{\n\tva_list ap;\n\n\tva_start(ap, fmt);\n\tmg_vsnprintf(conn, truncated, buf, buflen, fmt, ap);\n\tva_end(ap);\n}\n\n\nstatic int\nget_option_index(const char *name)\n{\n\tint i;\n\n\tfor (i = 0; config_options[i].name != NULL; i++) {\n\t\tif (strcmp(config_options[i].name, name) == 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\nconst char *\nmg_get_option(const struct mg_context *ctx, const char *name)\n{\n\tint i;\n\tif ((i = get_option_index(name)) == -1) {\n\t\treturn NULL;\n\t} else if (!ctx || ctx->config[i] == NULL) {\n\t\treturn \"\";\n\t} else {\n\t\treturn ctx->config[i];\n\t}\n}\n\n\nstruct mg_context *\nmg_get_context(const struct mg_connection *conn)\n{\n\treturn (conn == NULL) ? (struct mg_context *)NULL : (conn->ctx);\n}\n\n\nvoid *\nmg_get_user_data(const struct mg_context *ctx)\n{\n\treturn (ctx == NULL) ? NULL : ctx->user_data;\n}\n\n\nvoid\nmg_set_user_connection_data(struct mg_connection *conn, void *data)\n{\n\tif (conn != NULL) {\n\t\tconn->request_info.conn_data = data;\n\t}\n}\n\n\nvoid *\nmg_get_user_connection_data(const struct mg_connection *conn)\n{\n\tif (conn != NULL) {\n\t\treturn conn->request_info.conn_data;\n\t}\n\treturn NULL;\n}\n\n\nsize_t\nmg_get_ports(const struct mg_context *ctx, size_t size, int *ports, int *ssl)\n{\n\tsize_t i;\n\tif (!ctx) {\n\t\treturn 0;\n\t}\n\tfor (i = 0; i < size && i < ctx->num_listening_sockets; i++) {\n\t\tssl[i] = ctx->listening_sockets[i].is_ssl;\n\t\tports[i] =\n#if defined(USE_IPV6)\n\t\t    (ctx->listening_sockets[i].lsa.sa.sa_family == AF_INET6)\n\t\t        ? ntohs(ctx->listening_sockets[i].lsa.sin6.sin6_port)\n\t\t        :\n#endif\n\t\t        ntohs(ctx->listening_sockets[i].lsa.sin.sin_port);\n\t}\n\treturn i;\n}\n\n\nint\nmg_get_server_ports(const struct mg_context *ctx,\n                    int size,\n                    struct mg_server_ports *ports)\n{\n\tint i, cnt = 0;\n\n\tif (size <= 0) {\n\t\treturn -1;\n\t}\n\tmemset(ports, 0, sizeof(*ports) * (size_t)size);\n\tif (!ctx) {\n\t\treturn -1;\n\t}\n\tif (!ctx->listening_sockets) {\n\t\treturn -1;\n\t}\n\n\tfor (i = 0; (i < size) && (i < (int)ctx->num_listening_sockets); i++) {\n\n\t\tports[cnt].port =\n#if defined(USE_IPV6)\n\t\t    (ctx->listening_sockets[i].lsa.sa.sa_family == AF_INET6)\n\t\t        ? ntohs(ctx->listening_sockets[i].lsa.sin6.sin6_port)\n\t\t        :\n#endif\n\t\t        ntohs(ctx->listening_sockets[i].lsa.sin.sin_port);\n\t\tports[cnt].is_ssl = ctx->listening_sockets[i].is_ssl;\n\t\tports[cnt].is_redirect = ctx->listening_sockets[i].ssl_redir;\n\n\t\tif (ctx->listening_sockets[i].lsa.sa.sa_family == AF_INET) {\n\t\t\t/* IPv4 */\n\t\t\tports[cnt].protocol = 1;\n\t\t\tcnt++;\n\t\t} else if (ctx->listening_sockets[i].lsa.sa.sa_family == AF_INET6) {\n\t\t\t/* IPv6 */\n\t\t\tports[cnt].protocol = 3;\n\t\t\tcnt++;\n\t\t}\n\t}\n\n\treturn cnt;\n}\n\n\nstatic void\nsockaddr_to_string(char *buf, size_t len, const union usa *usa)\n{\n\tbuf[0] = '\\0';\n\n\tif (!usa) {\n\t\treturn;\n\t}\n\n\tif (usa->sa.sa_family == AF_INET) {\n\t\tgetnameinfo(&usa->sa,\n\t\t            sizeof(usa->sin),\n\t\t            buf,\n\t\t            (unsigned)len,\n\t\t            NULL,\n\t\t            0,\n\t\t            NI_NUMERICHOST);\n\t}\n#if defined(USE_IPV6)\n\telse if (usa->sa.sa_family == AF_INET6) {\n\t\tgetnameinfo(&usa->sa,\n\t\t            sizeof(usa->sin6),\n\t\t            buf,\n\t\t            (unsigned)len,\n\t\t            NULL,\n\t\t            0,\n\t\t            NI_NUMERICHOST);\n\t}\n#endif\n}\n\n\n/* Convert time_t to a string. According to RFC2616, Sec 14.18, this must be\n * included in all responses other than 100, 101, 5xx. */\nstatic void\ngmt_time_string(char *buf, size_t buf_len, time_t *t)\n{\n\tstruct tm *tm;\n\n\ttm = ((t != NULL) ? gmtime(t) : NULL);\n\tif (tm != NULL) {\n\t\tstrftime(buf, buf_len, \"%a, %d %b %Y %H:%M:%S GMT\", tm);\n\t} else {\n\t\tmg_strlcpy(buf, \"Thu, 01 Jan 1970 00:00:00 GMT\", buf_len);\n\t\tbuf[buf_len - 1] = '\\0';\n\t}\n}\n\n\n/* difftime for struct timespec. Return value is in seconds. */\nstatic double\nmg_difftimespec(const struct timespec *ts_now, const struct timespec *ts_before)\n{\n\treturn (double)(ts_now->tv_nsec - ts_before->tv_nsec) * 1.0E-9\n\t       + (double)(ts_now->tv_sec - ts_before->tv_sec);\n}\n\n\n/* Print error message to the opened error log stream. */\nvoid\nmg_cry(const struct mg_connection *conn, const char *fmt, ...)\n{\n\tchar buf[MG_BUF_LEN], src_addr[IP_ADDR_STR_LEN];\n\tva_list ap;\n\tstruct mg_file fi;\n\ttime_t timestamp;\n\n\tva_start(ap, fmt);\n\tIGNORE_UNUSED_RESULT(vsnprintf_impl(buf, sizeof(buf), fmt, ap));\n\tva_end(ap);\n\tbuf[sizeof(buf) - 1] = 0;\n\n\tif (!conn) {\n\t\tputs(buf);\n\t\treturn;\n\t}\n\n\t/* Do not lock when getting the callback value, here and below.\n\t * I suppose this is fine, since function cannot disappear in the\n\t * same way string option can. */\n\tif ((conn->ctx->callbacks.log_message == NULL)\n\t    || (conn->ctx->callbacks.log_message(conn, buf) == 0)) {\n\n\t\tif (conn->ctx->config[ERROR_LOG_FILE] != NULL) {\n\t\t\tif (mg_fopen(conn,\n\t\t\t             conn->ctx->config[ERROR_LOG_FILE],\n\t\t\t             MG_FOPEN_MODE_APPEND,\n\t\t\t             &fi) == 0) {\n\t\t\t\tfi.access.fp = NULL;\n\t\t\t}\n\t\t} else {\n\t\t\tfi.access.fp = NULL;\n\t\t}\n\n\t\tif (fi.access.fp != NULL) {\n\t\t\tflockfile(fi.access.fp);\n\t\t\ttimestamp = time(NULL);\n\n\t\t\tsockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);\n\t\t\tfprintf(fi.access.fp,\n\t\t\t        \"[%010lu] [error] [client %s] \",\n\t\t\t        (unsigned long)timestamp,\n\t\t\t        src_addr);\n\n\t\t\tif (conn->request_info.request_method != NULL) {\n\t\t\t\tfprintf(fi.access.fp,\n\t\t\t\t        \"%s %s: \",\n\t\t\t\t        conn->request_info.request_method,\n\t\t\t\t        conn->request_info.request_uri);\n\t\t\t}\n\n\t\t\tfprintf(fi.access.fp, \"%s\", buf);\n\t\t\tfputc('\\n', fi.access.fp);\n\t\t\tfflush(fi.access.fp);\n\t\t\tfunlockfile(fi.access.fp);\n\t\t\t(void)mg_fclose(&fi.access); /* Ignore errors. We can't call\n\t\t\t                              * mg_cry here anyway ;-) */\n\t\t}\n\t}\n}\n\n\n/* Return fake connection structure. Used for logging, if connection\n * is not applicable at the moment of logging. */\nstatic struct mg_connection *\nfc(struct mg_context *ctx)\n{\n\tstatic struct mg_connection fake_connection;\n\tfake_connection.ctx = ctx;\n\treturn &fake_connection;\n}\n\n\nconst char *\nmg_version(void)\n{\n\treturn CIVETWEB_VERSION;\n}\n\n\nconst struct mg_request_info *\nmg_get_request_info(const struct mg_connection *conn)\n{\n\tif (!conn) {\n\t\treturn NULL;\n\t}\n\treturn &conn->request_info;\n}\n\n\n/* Skip the characters until one of the delimiters characters found.\n * 0-terminate resulting word. Skip the delimiter and following whitespaces.\n * Advance pointer to buffer to the next word. Return found 0-terminated word.\n * Delimiters can be quoted with quotechar. */\nstatic char *\nskip_quoted(char **buf,\n            const char *delimiters,\n            const char *whitespace,\n            char quotechar)\n{\n\tchar *p, *begin_word, *end_word, *end_whitespace;\n\n\tbegin_word = *buf;\n\tend_word = begin_word + strcspn(begin_word, delimiters);\n\n\t/* Check for quotechar */\n\tif (end_word > begin_word) {\n\t\tp = end_word - 1;\n\t\twhile (*p == quotechar) {\n\t\t\t/* While the delimiter is quoted, look for the next delimiter. */\n\t\t\t/* This happens, e.g., in calls from parse_auth_header,\n\t\t\t * if the user name contains a \" character. */\n\n\t\t\t/* If there is anything beyond end_word, copy it. */\n\t\t\tif (*end_word != '\\0') {\n\t\t\t\tsize_t end_off = strcspn(end_word + 1, delimiters);\n\t\t\t\tmemmove(p, end_word, end_off + 1);\n\t\t\t\tp += end_off; /* p must correspond to end_word - 1 */\n\t\t\t\tend_word += end_off + 1;\n\t\t\t} else {\n\t\t\t\t*p = '\\0';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor (p++; p < end_word; p++) {\n\t\t\t*p = '\\0';\n\t\t}\n\t}\n\n\tif (*end_word == '\\0') {\n\t\t*buf = end_word;\n\t} else {\n\n#if defined(__MINGW32__) || defined(__GNUC__) && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5)))\n/* Disable spurious conversion warning for GCC */\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wsign-conversion\"\n#endif\n\n\t\tend_whitespace = end_word + strspn(&end_word[1], whitespace) + 1;\n\n#if defined(__MINGW32__) || defined(__GNUC__) && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5)))\n#pragma GCC diagnostic pop\n#endif\n\n\t\tfor (p = end_word; p < end_whitespace; p++) {\n\t\t\t*p = '\\0';\n\t\t}\n\n\t\t*buf = end_whitespace;\n\t}\n\n\treturn begin_word;\n}\n\n\n/* Simplified version of skip_quoted without quote char\n * and whitespace == delimiters */\nstatic char *\nskip(char **buf, const char *delimiters)\n{\n\treturn skip_quoted(buf, delimiters, delimiters, 0);\n}\n\n\n/* Return HTTP header value, or NULL if not found. */\nstatic const char *\nget_header(const struct mg_request_info *ri, const char *name)\n{\n\tint i;\n\tif (ri) {\n\t\tfor (i = 0; i < ri->num_headers; i++) {\n\t\t\tif (!mg_strcasecmp(name, ri->http_headers[i].name)) {\n\t\t\t\treturn ri->http_headers[i].value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn NULL;\n}\n\n\nconst char *\nmg_get_header(const struct mg_connection *conn, const char *name)\n{\n\tif (!conn) {\n\t\treturn NULL;\n\t}\n\n\treturn get_header(&conn->request_info, name);\n}\n\n\n/* A helper function for traversing a comma separated list of values.\n * It returns a list pointer shifted to the next value, or NULL if the end\n * of the list found.\n * Value is stored in val vector. If value has form \"x=y\", then eq_val\n * vector is initialized to point to the \"y\" part, and val vector length\n * is adjusted to point only to \"x\". */\nstatic const char *\nnext_option(const char *list, struct vec *val, struct vec *eq_val)\n{\n\tint end;\n\nreparse:\n\tif (val == NULL || list == NULL || *list == '\\0') {\n\t\t/* End of the list */\n\t\tlist = NULL;\n\t} else {\n\t\t/* Skip over leading LWS */\n\t\twhile (*list == ' ' || *list == '\\t')\n\t\t\tlist++;\n\n\t\tval->ptr = list;\n\t\tif ((list = strchr(val->ptr, ',')) != NULL) {\n\t\t\t/* Comma found. Store length and shift the list ptr */\n\t\t\tval->len = ((size_t)(list - val->ptr));\n\t\t\tlist++;\n\t\t} else {\n\t\t\t/* This value is the last one */\n\t\t\tlist = val->ptr + strlen(val->ptr);\n\t\t\tval->len = ((size_t)(list - val->ptr));\n\t\t}\n\n\t\t/* Adjust length for trailing LWS */\n\t\tend = (int)val->len - 1;\n\t\twhile (end >= 0 && (val->ptr[end] == ' ' || val->ptr[end] == '\\t'))\n\t\t\tend--;\n\t\tval->len = (size_t)(end + 1);\n\n\t\tif (val->len == 0) {\n\t\t\t/* Ignore any empty entries. */\n\t\t\tgoto reparse;\n\t\t}\n\n\t\tif (eq_val != NULL) {\n\t\t\t/* Value has form \"x=y\", adjust pointers and lengths\n\t\t\t * so that val points to \"x\", and eq_val points to \"y\". */\n\t\t\teq_val->len = 0;\n\t\t\teq_val->ptr = (const char *)memchr(val->ptr, '=', val->len);\n\t\t\tif (eq_val->ptr != NULL) {\n\t\t\t\teq_val->ptr++; /* Skip over '=' character */\n\t\t\t\teq_val->len = ((size_t)(val->ptr - eq_val->ptr)) + val->len;\n\t\t\t\tval->len = ((size_t)(eq_val->ptr - val->ptr)) - 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn list;\n}\n\n/* A helper function for checking if a comma separated list of values contains\n * the given option (case insensitvely).\n * 'header' can be NULL, in which case false is returned. */\nstatic int\nheader_has_option(const char *header, const char *option)\n{\n\tstruct vec opt_vec;\n\tstruct vec eq_vec;\n\n\tassert(option != NULL);\n\tassert(option[0] != '\\0');\n\n\twhile ((header = next_option(header, &opt_vec, &eq_vec)) != NULL) {\n\t\tif (mg_strncasecmp(option, opt_vec.ptr, opt_vec.len) == 0)\n\t\t\treturn 1;\n\t}\n\n\treturn 0;\n}\n\n/* Perform case-insensitive match of string against pattern */\nstatic int\nmatch_prefix(const char *pattern, size_t pattern_len, const char *str)\n{\n\tconst char *or_str;\n\tsize_t i;\n\tint j, len, res;\n\n\tif ((or_str = (const char *)memchr(pattern, '|', pattern_len)) != NULL) {\n\t\tres = match_prefix(pattern, (size_t)(or_str - pattern), str);\n\t\treturn (res > 0) ? res : match_prefix(or_str + 1,\n\t\t                                      (size_t)((pattern + pattern_len)\n\t\t                                               - (or_str + 1)),\n\t\t                                      str);\n\t}\n\n\tfor (i = 0, j = 0; i < pattern_len; i++, j++) {\n\t\tif (pattern[i] == '?' && str[j] != '\\0') {\n\t\t\tcontinue;\n\t\t} else if (pattern[i] == '$') {\n\t\t\treturn (str[j] == '\\0') ? j : -1;\n\t\t} else if (pattern[i] == '*') {\n\t\t\ti++;\n\t\t\tif (pattern[i] == '*') {\n\t\t\t\ti++;\n\t\t\t\tlen = (int)strlen(str + j);\n\t\t\t} else {\n\t\t\t\tlen = (int)strcspn(str + j, \"/\");\n\t\t\t}\n\t\t\tif (i == pattern_len) {\n\t\t\t\treturn j + len;\n\t\t\t}\n\t\t\tdo {\n\t\t\t\tres = match_prefix(pattern + i, pattern_len - i, str + j + len);\n\t\t\t} while (res == -1 && len-- > 0);\n\t\t\treturn (res == -1) ? -1 : j + res + len;\n\t\t} else if (lowercase(&pattern[i]) != lowercase(&str[j])) {\n\t\t\treturn -1;\n\t\t}\n\t}\n\treturn j;\n}\n\n\n/* HTTP 1.1 assumes keep alive if \"Connection:\" header is not set\n * This function must tolerate situations when connection info is not\n * set up, for example if request parsing failed. */\nstatic int\nshould_keep_alive(const struct mg_connection *conn)\n{\n\tif (conn != NULL) {\n\t\tconst char *http_version = conn->request_info.http_version;\n\t\tconst char *header = mg_get_header(conn, \"Connection\");\n\t\tif (conn->must_close || conn->status_code == 401\n\t\t    || mg_strcasecmp(conn->ctx->config[ENABLE_KEEP_ALIVE], \"yes\") != 0\n\t\t    || (header != NULL && !header_has_option(header, \"keep-alive\"))\n\t\t    || (header == NULL && http_version\n\t\t        && 0 != strcmp(http_version, \"1.1\"))) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n\nstatic int\nshould_decode_url(const struct mg_connection *conn)\n{\n\tif (!conn || !conn->ctx) {\n\t\treturn 0;\n\t}\n\n\treturn (mg_strcasecmp(conn->ctx->config[DECODE_URL], \"yes\") == 0);\n}\n\n\nstatic const char *\nsuggest_connection_header(const struct mg_connection *conn)\n{\n\treturn should_keep_alive(conn) ? \"keep-alive\" : \"close\";\n}\n\n\nstatic int\nsend_no_cache_header(struct mg_connection *conn)\n{\n\t/* Send all current and obsolete cache opt-out directives. */\n\treturn mg_printf(conn,\n\t                 \"Cache-Control: no-cache, no-store, \"\n\t                 \"must-revalidate, private, max-age=0\\r\\n\"\n\t                 \"Pragma: no-cache\\r\\n\"\n\t                 \"Expires: 0\\r\\n\");\n}\n\n\nstatic int\nsend_static_cache_header(struct mg_connection *conn)\n{\n#if !defined(NO_CACHING)\n\t/* Read the server config to check how long a file may be cached.\n\t * The configuration is in seconds. */\n\tint max_age = atoi(conn->ctx->config[STATIC_FILE_MAX_AGE]);\n\tif (max_age <= 0) {\n\t\t/* 0 means \"do not cache\". All values <0 are reserved\n\t\t * and may be used differently in the future. */\n\t\t/* If a file should not be cached, do not only send\n\t\t * max-age=0, but also pragmas and Expires headers. */\n\t\treturn send_no_cache_header(conn);\n\t}\n\n\t/* Use \"Cache-Control: max-age\" instead of \"Expires\" header.\n\t * Reason: see https://www.mnot.net/blog/2007/05/15/expires_max-age */\n\t/* See also https://www.mnot.net/cache_docs/ */\n\t/* According to RFC 2616, Section 14.21, caching times should not exceed\n\t * one year. A year with 365 days corresponds to 31536000 seconds, a leap\n\t * year to 31622400 seconds. For the moment, we just send whatever has\n\t * been configured, still the behavior for >1 year should be considered\n\t * as undefined. */\n\treturn mg_printf(conn, \"Cache-Control: max-age=%u\\r\\n\", (unsigned)max_age);\n#else  /* NO_CACHING */\n\treturn send_no_cache_header(conn);\n#endif /* !NO_CACHING */\n}\n\n\nstatic void handle_file_based_request(struct mg_connection *conn,\n                                      const char *path,\n                                      struct mg_file *filep);\n\n\nconst char *\nmg_get_response_code_text(struct mg_connection *conn, int response_code)\n{\n\t/* See IANA HTTP status code assignment:\n\t * http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n\t */\n\n\tswitch (response_code) {\n\t/* RFC2616 Section 10.1 - Informational 1xx */\n\tcase 100:\n\t\treturn \"Continue\"; /* RFC2616 Section 10.1.1 */\n\tcase 101:\n\t\treturn \"Switching Protocols\"; /* RFC2616 Section 10.1.2 */\n\tcase 102:\n\t\treturn \"Processing\"; /* RFC2518 Section 10.1 */\n\n\t/* RFC2616 Section 10.2 - Successful 2xx */\n\tcase 200:\n\t\treturn \"OK\"; /* RFC2616 Section 10.2.1 */\n\tcase 201:\n\t\treturn \"Created\"; /* RFC2616 Section 10.2.2 */\n\tcase 202:\n\t\treturn \"Accepted\"; /* RFC2616 Section 10.2.3 */\n\tcase 203:\n\t\treturn \"Non-Authoritative Information\"; /* RFC2616 Section 10.2.4 */\n\tcase 204:\n\t\treturn \"No Content\"; /* RFC2616 Section 10.2.5 */\n\tcase 205:\n\t\treturn \"Reset Content\"; /* RFC2616 Section 10.2.6 */\n\tcase 206:\n\t\treturn \"Partial Content\"; /* RFC2616 Section 10.2.7 */\n\tcase 207:\n\t\treturn \"Multi-Status\"; /* RFC2518 Section 10.2, RFC4918 Section 11.1 */\n\tcase 208:\n\t\treturn \"Already Reported\"; /* RFC5842 Section 7.1 */\n\n\tcase 226:\n\t\treturn \"IM used\"; /* RFC3229 Section 10.4.1 */\n\n\t/* RFC2616 Section 10.3 - Redirection 3xx */\n\tcase 300:\n\t\treturn \"Multiple Choices\"; /* RFC2616 Section 10.3.1 */\n\tcase 301:\n\t\treturn \"Moved Permanently\"; /* RFC2616 Section 10.3.2 */\n\tcase 302:\n\t\treturn \"Found\"; /* RFC2616 Section 10.3.3 */\n\tcase 303:\n\t\treturn \"See Other\"; /* RFC2616 Section 10.3.4 */\n\tcase 304:\n\t\treturn \"Not Modified\"; /* RFC2616 Section 10.3.5 */\n\tcase 305:\n\t\treturn \"Use Proxy\"; /* RFC2616 Section 10.3.6 */\n\tcase 307:\n\t\treturn \"Temporary Redirect\"; /* RFC2616 Section 10.3.8 */\n\tcase 308:\n\t\treturn \"Permanent Redirect\"; /* RFC7238 Section 3 */\n\n\t/* RFC2616 Section 10.4 - Client Error 4xx */\n\tcase 400:\n\t\treturn \"Bad Request\"; /* RFC2616 Section 10.4.1 */\n\tcase 401:\n\t\treturn \"Unauthorized\"; /* RFC2616 Section 10.4.2 */\n\tcase 402:\n\t\treturn \"Payment Required\"; /* RFC2616 Section 10.4.3 */\n\tcase 403:\n\t\treturn \"Forbidden\"; /* RFC2616 Section 10.4.4 */\n\tcase 404:\n\t\treturn \"Not Found\"; /* RFC2616 Section 10.4.5 */\n\tcase 405:\n\t\treturn \"Method Not Allowed\"; /* RFC2616 Section 10.4.6 */\n\tcase 406:\n\t\treturn \"Not Acceptable\"; /* RFC2616 Section 10.4.7 */\n\tcase 407:\n\t\treturn \"Proxy Authentication Required\"; /* RFC2616 Section 10.4.8 */\n\tcase 408:\n\t\treturn \"Request Time-out\"; /* RFC2616 Section 10.4.9 */\n\tcase 409:\n\t\treturn \"Conflict\"; /* RFC2616 Section 10.4.10 */\n\tcase 410:\n\t\treturn \"Gone\"; /* RFC2616 Section 10.4.11 */\n\tcase 411:\n\t\treturn \"Length Required\"; /* RFC2616 Section 10.4.12 */\n\tcase 412:\n\t\treturn \"Precondition Failed\"; /* RFC2616 Section 10.4.13 */\n\tcase 413:\n\t\treturn \"Request Entity Too Large\"; /* RFC2616 Section 10.4.14 */\n\tcase 414:\n\t\treturn \"Request-URI Too Large\"; /* RFC2616 Section 10.4.15 */\n\tcase 415:\n\t\treturn \"Unsupported Media Type\"; /* RFC2616 Section 10.4.16 */\n\tcase 416:\n\t\treturn \"Requested range not satisfiable\"; /* RFC2616 Section 10.4.17 */\n\tcase 417:\n\t\treturn \"Expectation Failed\"; /* RFC2616 Section 10.4.18 */\n\n\tcase 421:\n\t\treturn \"Misdirected Request\"; /* RFC7540 Section 9.1.2 */\n\tcase 422:\n\t\treturn \"Unproccessable entity\"; /* RFC2518 Section 10.3, RFC4918\n\t\t                                 * Section 11.2 */\n\tcase 423:\n\t\treturn \"Locked\"; /* RFC2518 Section 10.4, RFC4918 Section 11.3 */\n\tcase 424:\n\t\treturn \"Failed Dependency\"; /* RFC2518 Section 10.5, RFC4918\n\t\t                             * Section 11.4 */\n\n\tcase 426:\n\t\treturn \"Upgrade Required\"; /* RFC 2817 Section 4 */\n\n\tcase 428:\n\t\treturn \"Precondition Required\"; /* RFC 6585, Section 3 */\n\tcase 429:\n\t\treturn \"Too Many Requests\"; /* RFC 6585, Section 4 */\n\n\tcase 431:\n\t\treturn \"Request Header Fields Too Large\"; /* RFC 6585, Section 5 */\n\n\tcase 451:\n\t\treturn \"Unavailable For Legal Reasons\"; /* draft-tbray-http-legally-restricted-status-05,\n\t\t                                         * Section 3 */\n\n\t/* RFC2616 Section 10.5 - Server Error 5xx */\n\tcase 500:\n\t\treturn \"Internal Server Error\"; /* RFC2616 Section 10.5.1 */\n\tcase 501:\n\t\treturn \"Not Implemented\"; /* RFC2616 Section 10.5.2 */\n\tcase 502:\n\t\treturn \"Bad Gateway\"; /* RFC2616 Section 10.5.3 */\n\tcase 503:\n\t\treturn \"Service Unavailable\"; /* RFC2616 Section 10.5.4 */\n\tcase 504:\n\t\treturn \"Gateway Time-out\"; /* RFC2616 Section 10.5.5 */\n\tcase 505:\n\t\treturn \"HTTP Version not supported\"; /* RFC2616 Section 10.5.6 */\n\tcase 506:\n\t\treturn \"Variant Also Negotiates\"; /* RFC 2295, Section 8.1 */\n\tcase 507:\n\t\treturn \"Insufficient Storage\"; /* RFC2518 Section 10.6, RFC4918\n\t\t                                * Section 11.5 */\n\tcase 508:\n\t\treturn \"Loop Detected\"; /* RFC5842 Section 7.1 */\n\n\tcase 510:\n\t\treturn \"Not Extended\"; /* RFC 2774, Section 7 */\n\tcase 511:\n\t\treturn \"Network Authentication Required\"; /* RFC 6585, Section 6 */\n\n\t/* Other status codes, not shown in the IANA HTTP status code assignment.\n\t * E.g., \"de facto\" standards due to common use, ... */\n\tcase 418:\n\t\treturn \"I am a teapot\"; /* RFC2324 Section 2.3.2 */\n\tcase 419:\n\t\treturn \"Authentication Timeout\"; /* common use */\n\tcase 420:\n\t\treturn \"Enhance Your Calm\"; /* common use */\n\tcase 440:\n\t\treturn \"Login Timeout\"; /* common use */\n\tcase 509:\n\t\treturn \"Bandwidth Limit Exceeded\"; /* common use */\n\n\tdefault:\n\t\t/* This error code is unknown. This should not happen. */\n\t\tif (conn) {\n\t\t\tmg_cry(conn, \"Unknown HTTP response code: %u\", response_code);\n\t\t}\n\n\t\t/* Return at least a category according to RFC 2616 Section 10. */\n\t\tif (response_code >= 100 && response_code < 200) {\n\t\t\t/* Unknown informational status code */\n\t\t\treturn \"Information\";\n\t\t}\n\t\tif (response_code >= 200 && response_code < 300) {\n\t\t\t/* Unknown success code */\n\t\t\treturn \"Success\";\n\t\t}\n\t\tif (response_code >= 300 && response_code < 400) {\n\t\t\t/* Unknown redirection code */\n\t\t\treturn \"Redirection\";\n\t\t}\n\t\tif (response_code >= 400 && response_code < 500) {\n\t\t\t/* Unknown request error code */\n\t\t\treturn \"Client Error\";\n\t\t}\n\t\tif (response_code >= 500 && response_code < 600) {\n\t\t\t/* Unknown server error code */\n\t\t\treturn \"Server Error\";\n\t\t}\n\n\t\t/* Response code not even within reasonable range */\n\t\treturn \"\";\n\t}\n}\n\n\nstatic void send_http_error(struct mg_connection *,\n                            int,\n                            PRINTF_FORMAT_STRING(const char *fmt),\n                            ...) PRINTF_ARGS(3, 4);\n\nstatic void\nsend_http_error(struct mg_connection *conn, int status, const char *fmt, ...)\n{\n\tchar buf[MG_BUF_LEN];\n\tva_list ap;\n\tint len, i, page_handler_found, scope, truncated, has_body;\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\tconst char *error_handler = NULL;\n\tstruct mg_file error_page_file = STRUCT_FILE_INITIALIZER;\n\tconst char *error_page_file_ext, *tstr;\n\n\tconst char *status_text = mg_get_response_code_text(conn, status);\n\n\tif (conn == NULL) {\n\t\treturn;\n\t}\n\n\tconn->status_code = status;\n\tif (conn->in_error_handler || conn->ctx->callbacks.http_error == NULL\n\t    || conn->ctx->callbacks.http_error(conn, status)) {\n\t\tif (!conn->in_error_handler) {\n\t\t\t/* Send user defined error pages, if defined */\n\t\t\terror_handler = conn->ctx->config[ERROR_PAGES];\n\t\t\terror_page_file_ext = conn->ctx->config[INDEX_FILES];\n\t\t\tpage_handler_found = 0;\n\t\t\tif (error_handler != NULL) {\n\t\t\t\tfor (scope = 1; (scope <= 3) && !page_handler_found; scope++) {\n\t\t\t\t\tswitch (scope) {\n\t\t\t\t\tcase 1: /* Handler for specific error, e.g. 404 error */\n\t\t\t\t\t\tmg_snprintf(conn,\n\t\t\t\t\t\t            &truncated,\n\t\t\t\t\t\t            buf,\n\t\t\t\t\t\t            sizeof(buf) - 32,\n\t\t\t\t\t\t            \"%serror%03u.\",\n\t\t\t\t\t\t            error_handler,\n\t\t\t\t\t\t            status);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2: /* Handler for error group, e.g., 5xx error handler\n\t\t\t\t\t         * for all server errors (500-599) */\n\t\t\t\t\t\tmg_snprintf(conn,\n\t\t\t\t\t\t            &truncated,\n\t\t\t\t\t\t            buf,\n\t\t\t\t\t\t            sizeof(buf) - 32,\n\t\t\t\t\t\t            \"%serror%01uxx.\",\n\t\t\t\t\t\t            error_handler,\n\t\t\t\t\t\t            status / 100);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault: /* Handler for all errors */\n\t\t\t\t\t\tmg_snprintf(conn,\n\t\t\t\t\t\t            &truncated,\n\t\t\t\t\t\t            buf,\n\t\t\t\t\t\t            sizeof(buf) - 32,\n\t\t\t\t\t\t            \"%serror.\",\n\t\t\t\t\t\t            error_handler);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* String truncation in buf may only occur if error_handler\n\t\t\t\t\t * is too long. This string is from the config, not from a\n\t\t\t\t\t * client. */\n\t\t\t\t\t(void)truncated;\n\n\t\t\t\t\tlen = (int)strlen(buf);\n\n\t\t\t\t\ttstr = strchr(error_page_file_ext, '.');\n\n\t\t\t\t\twhile (tstr) {\n\t\t\t\t\t\tfor (i = 1; i < 32 && tstr[i] != 0 && tstr[i] != ',';\n\t\t\t\t\t\t     i++)\n\t\t\t\t\t\t\tbuf[len + i - 1] = tstr[i];\n\t\t\t\t\t\tbuf[len + i - 1] = 0;\n\t\t\t\t\t\tif (mg_stat(conn, buf, &error_page_file.stat)) {\n\t\t\t\t\t\t\tpage_handler_found = 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttstr = strchr(tstr + i, '.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (page_handler_found) {\n\t\t\t\tconn->in_error_handler = 1;\n\t\t\t\thandle_file_based_request(conn, buf, &error_page_file);\n\t\t\t\tconn->in_error_handler = 0;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t/* No custom error page. Send default error page. */\n\t\tgmt_time_string(date, sizeof(date), &curtime);\n\n\t\t/* Errors 1xx, 204 and 304 MUST NOT send a body */\n\t\thas_body = (status > 199 && status != 204 && status != 304);\n\n\t\tconn->must_close = 1;\n\t\tmg_printf(conn, \"HTTP/1.1 %d %s\\r\\n\", status, status_text);\n\t\tsend_no_cache_header(conn);\n\t\tif (has_body) {\n\t\t\tmg_printf(conn,\n\t\t\t          \"%s\",\n\t\t\t          \"Content-Type: text/plain; charset=utf-8\\r\\n\");\n\t\t}\n\t\tmg_printf(conn,\n\t\t          \"Date: %s\\r\\n\"\n\t\t          \"Connection: close\\r\\n\\r\\n\",\n\t\t          date);\n\n\t\t/* Errors 1xx, 204 and 304 MUST NOT send a body */\n\t\tif (has_body) {\n\t\t\tmg_printf(conn, \"Error %d: %s\\n\", status, status_text);\n\n\t\t\tif (fmt != NULL) {\n\t\t\t\tva_start(ap, fmt);\n\t\t\t\tmg_vsnprintf(conn, NULL, buf, sizeof(buf), fmt, ap);\n\t\t\t\tva_end(ap);\n\t\t\t\tmg_write(conn, buf, strlen(buf));\n\t\t\t\tDEBUG_TRACE(\"Error %i - [%s]\", status, buf);\n\t\t\t}\n\n\t\t} else {\n\t\t\t/* No body allowed. Close the connection. */\n\t\t\tDEBUG_TRACE(\"Error %i\", status);\n\t\t}\n\t}\n}\n\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n/* Create substitutes for POSIX functions in Win32. */\n\n#if defined(__MINGW32__)\n/* Show no warning in case system functions are not used. */\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wunused-function\"\n#endif\n\n\nstatic int\npthread_mutex_init(pthread_mutex_t *mutex, void *unused)\n{\n\t(void)unused;\n\t*mutex = CreateMutex(NULL, FALSE, NULL);\n\treturn (*mutex == NULL) ? -1 : 0;\n}\n\n\nstatic int\npthread_mutex_destroy(pthread_mutex_t *mutex)\n{\n\treturn (CloseHandle(*mutex) == 0) ? -1 : 0;\n}\n\n\nstatic int\npthread_mutex_lock(pthread_mutex_t *mutex)\n{\n\treturn (WaitForSingleObject(*mutex, INFINITE) == WAIT_OBJECT_0) ? 0 : -1;\n}\n\n\n#ifdef ENABLE_UNUSED_PTHREAD_FUNCTIONS\nstatic int\npthread_mutex_trylock(pthread_mutex_t *mutex)\n{\n\tswitch (WaitForSingleObject(*mutex, 0)) {\n\tcase WAIT_OBJECT_0:\n\t\treturn 0;\n\tcase WAIT_TIMEOUT:\n\t\treturn -2; /* EBUSY */\n\t}\n\treturn -1;\n}\n#endif\n\n\nstatic int\npthread_mutex_unlock(pthread_mutex_t *mutex)\n{\n\treturn (ReleaseMutex(*mutex) == 0) ? -1 : 0;\n}\n\n\nstatic int\npthread_cond_init(pthread_cond_t *cv, const void *unused)\n{\n\t(void)unused;\n\tInitializeCriticalSection(&cv->threadIdSec);\n\tcv->waiting_thread = NULL;\n\treturn 0;\n}\n\n\nstatic int\npthread_cond_timedwait(pthread_cond_t *cv,\n                       pthread_mutex_t *mutex,\n                       const struct timespec *abstime)\n{\n\tstruct mg_workerTLS **ptls,\n\t    *tls = (struct mg_workerTLS *)pthread_getspecific(sTlsKey);\n\tint ok;\n\tstruct timespec tsnow;\n\tint64_t nsnow, nswaitabs, nswaitrel;\n\tDWORD mswaitrel;\n\n\tEnterCriticalSection(&cv->threadIdSec);\n\t/* Add this thread to cv's waiting list */\n\tptls = &cv->waiting_thread;\n\tfor (; *ptls != NULL; ptls = &(*ptls)->next_waiting_thread)\n\t\t;\n\ttls->next_waiting_thread = NULL;\n\t*ptls = tls;\n\tLeaveCriticalSection(&cv->threadIdSec);\n\n\tif (abstime) {\n\t\tclock_gettime(CLOCK_REALTIME, &tsnow);\n\t\tnsnow = (((int64_t)tsnow.tv_sec) * 1000000000) + tsnow.tv_nsec;\n\t\tnswaitabs =\n\t\t    (((int64_t)abstime->tv_sec) * 1000000000) + abstime->tv_nsec;\n\t\tnswaitrel = nswaitabs - nsnow;\n\t\tif (nswaitrel < 0) {\n\t\t\tnswaitrel = 0;\n\t\t}\n\t\tmswaitrel = (DWORD)(nswaitrel / 1000000);\n\t} else {\n\t\tmswaitrel = INFINITE;\n\t}\n\n\tpthread_mutex_unlock(mutex);\n\tok = (WAIT_OBJECT_0\n\t      == WaitForSingleObject(tls->pthread_cond_helper_mutex, mswaitrel));\n\tif (!ok) {\n\t\tok = 1;\n\t\tEnterCriticalSection(&cv->threadIdSec);\n\t\tptls = &cv->waiting_thread;\n\t\tfor (; *ptls != NULL; ptls = &(*ptls)->next_waiting_thread) {\n\t\t\tif (*ptls == tls) {\n\t\t\t\t*ptls = tls->next_waiting_thread;\n\t\t\t\tok = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tLeaveCriticalSection(&cv->threadIdSec);\n\t\tif (ok) {\n\t\t\tWaitForSingleObject(tls->pthread_cond_helper_mutex, INFINITE);\n\t\t}\n\t}\n\t/* This thread has been removed from cv's waiting list */\n\tpthread_mutex_lock(mutex);\n\n\treturn ok ? 0 : -1;\n}\n\n\nstatic int\npthread_cond_wait(pthread_cond_t *cv, pthread_mutex_t *mutex)\n{\n\treturn pthread_cond_timedwait(cv, mutex, NULL);\n}\n\n\nstatic int\npthread_cond_signal(pthread_cond_t *cv)\n{\n\tHANDLE wkup = NULL;\n\tBOOL ok = FALSE;\n\n\tEnterCriticalSection(&cv->threadIdSec);\n\tif (cv->waiting_thread) {\n\t\twkup = cv->waiting_thread->pthread_cond_helper_mutex;\n\t\tcv->waiting_thread = cv->waiting_thread->next_waiting_thread;\n\n\t\tok = SetEvent(wkup);\n\t\tassert(ok);\n\t}\n\tLeaveCriticalSection(&cv->threadIdSec);\n\n\treturn ok ? 0 : 1;\n}\n\n\nstatic int\npthread_cond_broadcast(pthread_cond_t *cv)\n{\n\tEnterCriticalSection(&cv->threadIdSec);\n\twhile (cv->waiting_thread) {\n\t\tpthread_cond_signal(cv);\n\t}\n\tLeaveCriticalSection(&cv->threadIdSec);\n\n\treturn 0;\n}\n\n\nstatic int\npthread_cond_destroy(pthread_cond_t *cv)\n{\n\tEnterCriticalSection(&cv->threadIdSec);\n\tassert(cv->waiting_thread == NULL);\n\tLeaveCriticalSection(&cv->threadIdSec);\n\tDeleteCriticalSection(&cv->threadIdSec);\n\n\treturn 0;\n}\n\n\n#ifdef ALTERNATIVE_QUEUE\nstatic void *\nevent_create(void)\n{\n\treturn (void *)CreateEvent(NULL, FALSE, FALSE, NULL);\n}\n\n\nstatic int\nevent_wait(void *eventhdl)\n{\n\tint res = WaitForSingleObject((HANDLE)eventhdl, INFINITE);\n\treturn (res == WAIT_OBJECT_0);\n}\n\n\nstatic int\nevent_signal(void *eventhdl)\n{\n\treturn (int)SetEvent((HANDLE)eventhdl);\n}\n\n\nstatic void\nevent_destroy(void *eventhdl)\n{\n\tCloseHandle((HANDLE)eventhdl);\n}\n#endif\n\n\n#if defined(__MINGW32__)\n/* Enable unused function warning again */\n#pragma GCC diagnostic pop\n#endif\n\n\n/* For Windows, change all slashes to backslashes in path names. */\nstatic void\nchange_slashes_to_backslashes(char *path)\n{\n\tint i;\n\n\tfor (i = 0; path[i] != '\\0'; i++) {\n\t\tif (path[i] == '/') {\n\t\t\tpath[i] = '\\\\';\n\t\t}\n\n\t\t/* remove double backslash (check i > 0 to preserve UNC paths,\n\t\t * like \\\\server\\file.txt) */\n\t\tif ((path[i] == '\\\\') && (i > 0)) {\n\t\t\twhile (path[i + 1] == '\\\\' || path[i + 1] == '/') {\n\t\t\t\t(void)memmove(path + i + 1, path + i + 2, strlen(path + i + 1));\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nstatic int\nmg_wcscasecmp(const wchar_t *s1, const wchar_t *s2)\n{\n\tint diff;\n\n\tdo {\n\t\tdiff = tolower(*s1) - tolower(*s2);\n\t\ts1++;\n\t\ts2++;\n\t} while (diff == 0 && s1[-1] != '\\0');\n\n\treturn diff;\n}\n\n\n/* Encode 'path' which is assumed UTF-8 string, into UNICODE string.\n * wbuf and wbuf_len is a target buffer and its length. */\nstatic void\npath_to_unicode(const struct mg_connection *conn,\n                const char *path,\n                wchar_t *wbuf,\n                size_t wbuf_len)\n{\n\tchar buf[PATH_MAX], buf2[PATH_MAX];\n\twchar_t wbuf2[MAX_PATH + 1];\n\tDWORD long_len, err;\n\tint (*fcompare)(const wchar_t *, const wchar_t *) = mg_wcscasecmp;\n\n\tmg_strlcpy(buf, path, sizeof(buf));\n\tchange_slashes_to_backslashes(buf);\n\n\t/* Convert to Unicode and back. If doubly-converted string does not\n\t * match the original, something is fishy, reject. */\n\tmemset(wbuf, 0, wbuf_len * sizeof(wchar_t));\n\tMultiByteToWideChar(CP_UTF8, 0, buf, -1, wbuf, (int)wbuf_len);\n\tWideCharToMultiByte(\n\t    CP_UTF8, 0, wbuf, (int)wbuf_len, buf2, sizeof(buf2), NULL, NULL);\n\tif (strcmp(buf, buf2) != 0) {\n\t\twbuf[0] = L'\\0';\n\t}\n\n\t/* Windows file systems are not case sensitive, but you can still use\n\t * uppercase and lowercase letters (on all modern file systems).\n\t * The server can check if the URI uses the same upper/lowercase\n\t * letters an the file system, effectively making Windows servers\n\t * case sensitive (like Linux servers are). It is still not possible\n\t * to use two files with the same name in different cases on Windows\n\t * (like /a and /A) - this would be possible in Linux.\n\t * As a default, Windows is not case sensitive, but the case sensitive\n\t * file name check can be activated by an additional configuration. */\n\tif (conn) {\n\t\tif (conn->ctx->config[CASE_SENSITIVE_FILES]\n\t\t    && !mg_strcasecmp(conn->ctx->config[CASE_SENSITIVE_FILES], \"yes\")) {\n\t\t\t/* Use case sensitive compare function */\n\t\t\tfcompare = wcscmp;\n\t\t}\n\t}\n\t(void)conn; /* conn is currently unused */\n\n#if !defined(_WIN32_WCE)\n\t/* Only accept a full file path, not a Windows short (8.3) path. */\n\tmemset(wbuf2, 0, ARRAY_SIZE(wbuf2) * sizeof(wchar_t));\n\tlong_len = GetLongPathNameW(wbuf, wbuf2, ARRAY_SIZE(wbuf2) - 1);\n\tif (long_len == 0) {\n\t\terr = GetLastError();\n\t\tif (err == ERROR_FILE_NOT_FOUND) {\n\t\t\t/* File does not exist. This is not always a problem here. */\n\t\t\treturn;\n\t\t}\n\t}\n\tif ((long_len >= ARRAY_SIZE(wbuf2)) || (fcompare(wbuf, wbuf2) != 0)) {\n\t\t/* Short name is used. */\n\t\twbuf[0] = L'\\0';\n\t}\n#else\n\t(void)long_len;\n\t(void)wbuf2;\n\t(void)err;\n\n\tif (strchr(path, '~')) {\n\t\twbuf[0] = L'\\0';\n\t}\n#endif\n}\n\n\n/* Windows happily opens files with some garbage at the end of file name.\n * For example, fopen(\"a.cgi    \", \"r\") on Windows successfully opens\n * \"a.cgi\", despite one would expect an error back.\n * This function returns non-0 if path ends with some garbage. */\nstatic int\npath_cannot_disclose_cgi(const char *path)\n{\n\tstatic const char *allowed_last_characters = \"_-\";\n\tint last = path[strlen(path) - 1];\n\treturn isalnum(last) || strchr(allowed_last_characters, last) != NULL;\n}\n\n\nstatic int\nmg_stat(const struct mg_connection *conn,\n        const char *path,\n        struct mg_file_stat *filep)\n{\n\twchar_t wbuf[PATH_MAX];\n\tWIN32_FILE_ATTRIBUTE_DATA info;\n\ttime_t creation_time;\n\n\tif (!filep) {\n\t\treturn 0;\n\t}\n\tmemset(filep, 0, sizeof(*filep));\n\n\tif (conn && is_file_in_memory(conn, path)) {\n\t\t/* filep->is_directory = 0; filep->gzipped = 0; .. already done by\n\t\t * memset */\n\t\tfilep->last_modified = time(NULL); /* xxxxxxxx */\n\t\t/* last_modified = now ... assumes the file may change during runtime,\n\t\t * so every mg_fopen call may return different data */\n\t\t/* last_modified = conn->ctx.start_time;\n\t\t * May be used it the data does not change during runtime. This allows\n\t\t * browser caching. Since we do not know, we have to assume the file\n\t\t * in memory may change. */\n\t\treturn 1;\n\t}\n\n\tpath_to_unicode(conn, path, wbuf, ARRAY_SIZE(wbuf));\n\tif (GetFileAttributesExW(wbuf, GetFileExInfoStandard, &info) != 0) {\n\t\tfilep->size = MAKEUQUAD(info.nFileSizeLow, info.nFileSizeHigh);\n\t\tfilep->last_modified =\n\t\t    SYS2UNIX_TIME(info.ftLastWriteTime.dwLowDateTime,\n\t\t                  info.ftLastWriteTime.dwHighDateTime);\n\n\t\t/* On Windows, the file creation time can be higher than the\n\t\t * modification time, e.g. when a file is copied.\n\t\t * Since the Last-Modified timestamp is used for caching\n\t\t * it should be based on the most recent timestamp. */\n\t\tcreation_time = SYS2UNIX_TIME(info.ftCreationTime.dwLowDateTime,\n\t\t                              info.ftCreationTime.dwHighDateTime);\n\t\tif (creation_time > filep->last_modified) {\n\t\t\tfilep->last_modified = creation_time;\n\t\t}\n\n\t\tfilep->is_directory = info.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY;\n\t\t/* If file name is fishy, reset the file structure and return\n\t\t * error.\n\t\t * Note it is important to reset, not just return the error, cause\n\t\t * functions like is_file_opened() check the struct. */\n\t\tif (!filep->is_directory && !path_cannot_disclose_cgi(path)) {\n\t\t\tmemset(filep, 0, sizeof(*filep));\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\treturn 0;\n}\n\n\nstatic int\nmg_remove(const struct mg_connection *conn, const char *path)\n{\n\twchar_t wbuf[PATH_MAX];\n\tpath_to_unicode(conn, path, wbuf, ARRAY_SIZE(wbuf));\n\treturn DeleteFileW(wbuf) ? 0 : -1;\n}\n\n\nstatic int\nmg_mkdir(const struct mg_connection *conn, const char *path, int mode)\n{\n\twchar_t wbuf[PATH_MAX];\n\t(void)mode;\n\tpath_to_unicode(conn, path, wbuf, ARRAY_SIZE(wbuf));\n\treturn CreateDirectoryW(wbuf, NULL) ? 0 : -1;\n}\n\n\n/* Create substitutes for POSIX functions in Win32. */\n\n#if defined(__MINGW32__)\n/* Show no warning in case system functions are not used. */\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wunused-function\"\n#endif\n\n\n/* Implementation of POSIX opendir/closedir/readdir for Windows. */\nstatic DIR *\nmg_opendir(const struct mg_connection *conn, const char *name)\n{\n\tDIR *dir = NULL;\n\twchar_t wpath[PATH_MAX];\n\tDWORD attrs;\n\n\tif (name == NULL) {\n\t\tSetLastError(ERROR_BAD_ARGUMENTS);\n\t} else if ((dir = (DIR *)mg_malloc(sizeof(*dir))) == NULL) {\n\t\tSetLastError(ERROR_NOT_ENOUGH_MEMORY);\n\t} else {\n\t\tpath_to_unicode(conn, name, wpath, ARRAY_SIZE(wpath));\n\t\tattrs = GetFileAttributesW(wpath);\n\t\tif (attrs != 0xFFFFFFFF && ((attrs & FILE_ATTRIBUTE_DIRECTORY)\n\t\t                            == FILE_ATTRIBUTE_DIRECTORY)) {\n\t\t\t(void)wcscat(wpath, L\"\\\\*\");\n\t\t\tdir->handle = FindFirstFileW(wpath, &dir->info);\n\t\t\tdir->result.d_name[0] = '\\0';\n\t\t} else {\n\t\t\tmg_free(dir);\n\t\t\tdir = NULL;\n\t\t}\n\t}\n\n\treturn dir;\n}\n\n\nstatic int\nmg_closedir(DIR *dir)\n{\n\tint result = 0;\n\n\tif (dir != NULL) {\n\t\tif (dir->handle != INVALID_HANDLE_VALUE)\n\t\t\tresult = FindClose(dir->handle) ? 0 : -1;\n\n\t\tmg_free(dir);\n\t} else {\n\t\tresult = -1;\n\t\tSetLastError(ERROR_BAD_ARGUMENTS);\n\t}\n\n\treturn result;\n}\n\n\nstatic struct dirent *\nmg_readdir(DIR *dir)\n{\n\tstruct dirent *result = 0;\n\n\tif (dir) {\n\t\tif (dir->handle != INVALID_HANDLE_VALUE) {\n\t\t\tresult = &dir->result;\n\t\t\t(void)WideCharToMultiByte(CP_UTF8,\n\t\t\t                          0,\n\t\t\t                          dir->info.cFileName,\n\t\t\t                          -1,\n\t\t\t                          result->d_name,\n\t\t\t                          sizeof(result->d_name),\n\t\t\t                          NULL,\n\t\t\t                          NULL);\n\n\t\t\tif (!FindNextFileW(dir->handle, &dir->info)) {\n\t\t\t\t(void)FindClose(dir->handle);\n\t\t\t\tdir->handle = INVALID_HANDLE_VALUE;\n\t\t\t}\n\n\t\t} else {\n\t\t\tSetLastError(ERROR_FILE_NOT_FOUND);\n\t\t}\n\t} else {\n\t\tSetLastError(ERROR_BAD_ARGUMENTS);\n\t}\n\n\treturn result;\n}\n\n\n#ifndef HAVE_POLL\nstatic int\npoll(struct pollfd *pfd, unsigned int n, int milliseconds)\n{\n\tstruct timeval tv;\n\tfd_set set;\n\tunsigned int i;\n\tint result;\n\tSOCKET maxfd = 0;\n\n\tmemset(&tv, 0, sizeof(tv));\n\ttv.tv_sec = milliseconds / 1000;\n\ttv.tv_usec = (milliseconds % 1000) * 1000;\n\tFD_ZERO(&set);\n\n\tfor (i = 0; i < n; i++) {\n\t\tFD_SET((SOCKET)pfd[i].fd, &set);\n\t\tpfd[i].revents = 0;\n\n\t\tif (pfd[i].fd > maxfd) {\n\t\t\tmaxfd = pfd[i].fd;\n\t\t}\n\t}\n\n\tif ((result = select((int)maxfd + 1, &set, NULL, NULL, &tv)) > 0) {\n\t\tfor (i = 0; i < n; i++) {\n\t\t\tif (FD_ISSET(pfd[i].fd, &set)) {\n\t\t\t\tpfd[i].revents = POLLIN;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* We should subtract the time used in select from remaining\n\t * \"milliseconds\", in particular if called from mg_poll with a\n\t * timeout quantum.\n\t * Unfortunately, the remaining time is not stored in \"tv\" in all\n\t * implementations, so the result in \"tv\" must be considered undefined.\n\t * See http://man7.org/linux/man-pages/man2/select.2.html */\n\n\treturn result;\n}\n#endif /* HAVE_POLL */\n\n\n#if defined(__MINGW32__)\n/* Enable unused function warning again */\n#pragma GCC diagnostic pop\n#endif\n\n\nstatic void\nset_close_on_exec(SOCKET sock, struct mg_connection *conn /* may be null */)\n{\n\t(void)conn; /* Unused. */\n#if defined(_WIN32_WCE)\n\t(void)sock;\n#else\n\t(void)SetHandleInformation((HANDLE)(intptr_t)sock, HANDLE_FLAG_INHERIT, 0);\n#endif\n}\n\n\nint\nmg_start_thread(mg_thread_func_t f, void *p)\n{\n#if defined(USE_STACK_SIZE) && (USE_STACK_SIZE > 1)\n\t/* Compile-time option to control stack size, e.g. -DUSE_STACK_SIZE=16384\n\t */\n\treturn ((_beginthread((void(__cdecl *)(void *))f, USE_STACK_SIZE, p)\n\t         == ((uintptr_t)(-1L)))\n\t            ? -1\n\t            : 0);\n#else\n\treturn (\n\t    (_beginthread((void(__cdecl *)(void *))f, 0, p) == ((uintptr_t)(-1L)))\n\t        ? -1\n\t        : 0);\n#endif /* defined(USE_STACK_SIZE) && (USE_STACK_SIZE > 1) */\n}\n\n\n/* Start a thread storing the thread context. */\nstatic int\nmg_start_thread_with_id(unsigned(__stdcall *f)(void *),\n                        void *p,\n                        pthread_t *threadidptr)\n{\n\tuintptr_t uip;\n\tHANDLE threadhandle;\n\tint result = -1;\n\n\tuip = _beginthreadex(NULL, 0, (unsigned(__stdcall *)(void *))f, p, 0, NULL);\n\tthreadhandle = (HANDLE)uip;\n\tif ((uip != (uintptr_t)(-1L)) && (threadidptr != NULL)) {\n\t\t*threadidptr = threadhandle;\n\t\tresult = 0;\n\t}\n\n\treturn result;\n}\n\n\n/* Wait for a thread to finish. */\nstatic int\nmg_join_thread(pthread_t threadid)\n{\n\tint result;\n\tDWORD dwevent;\n\n\tresult = -1;\n\tdwevent = WaitForSingleObject(threadid, INFINITE);\n\tif (dwevent == WAIT_FAILED) {\n\t\tDEBUG_TRACE(\"WaitForSingleObject() failed, error %d\", ERRNO);\n\t} else {\n\t\tif (dwevent == WAIT_OBJECT_0) {\n\t\t\tCloseHandle(threadid);\n\t\t\tresult = 0;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n#if !defined(NO_SSL_DL) && !defined(NO_SSL)\n/* If SSL is loaded dynamically, dlopen/dlclose is required. */\n/* Create substitutes for POSIX functions in Win32. */\n\n#if defined(__MINGW32__)\n/* Show no warning in case system functions are not used. */\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wunused-function\"\n#endif\n\n\nstatic HANDLE\ndlopen(const char *dll_name, int flags)\n{\n\twchar_t wbuf[PATH_MAX];\n\t(void)flags;\n\tpath_to_unicode(NULL, dll_name, wbuf, ARRAY_SIZE(wbuf));\n\treturn LoadLibraryW(wbuf);\n}\n\n\nstatic int\ndlclose(void *handle)\n{\n\tint result;\n\n\tif (FreeLibrary((HMODULE)handle) != 0) {\n\t\tresult = 0;\n\t} else {\n\t\tresult = -1;\n\t}\n\n\treturn result;\n}\n\n\n#if defined(__MINGW32__)\n/* Enable unused function warning again */\n#pragma GCC diagnostic pop\n#endif\n\n#endif\n\n\n#if !defined(NO_CGI)\n#define SIGKILL (0)\n\nstatic int\nkill(pid_t pid, int sig_num)\n{\n\t(void)TerminateProcess((HANDLE)pid, (UINT)sig_num);\n\t(void)CloseHandle((HANDLE)pid);\n\treturn 0;\n}\n\n\nstatic void\ntrim_trailing_whitespaces(char *s)\n{\n\tchar *e = s + strlen(s) - 1;\n\twhile (e > s && isspace(*(unsigned char *)e)) {\n\t\t*e-- = '\\0';\n\t}\n}\n\n\nstatic pid_t\nspawn_process(struct mg_connection *conn,\n              const char *prog,\n              char *envblk,\n              char *envp[],\n              int fdin[2],\n              int fdout[2],\n              int fderr[2],\n              const char *dir)\n{\n\tHANDLE me;\n\tchar *p, *interp, full_interp[PATH_MAX], full_dir[PATH_MAX],\n\t    cmdline[PATH_MAX], buf[PATH_MAX];\n\tint truncated;\n\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\tSTARTUPINFOA si;\n\tPROCESS_INFORMATION pi = {0};\n\n\t(void)envp;\n\n\tmemset(&si, 0, sizeof(si));\n\tsi.cb = sizeof(si);\n\n\tsi.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;\n\tsi.wShowWindow = SW_HIDE;\n\n\tme = GetCurrentProcess();\n\tDuplicateHandle(me,\n\t                (HANDLE)_get_osfhandle(fdin[0]),\n\t                me,\n\t                &si.hStdInput,\n\t                0,\n\t                TRUE,\n\t                DUPLICATE_SAME_ACCESS);\n\tDuplicateHandle(me,\n\t                (HANDLE)_get_osfhandle(fdout[1]),\n\t                me,\n\t                &si.hStdOutput,\n\t                0,\n\t                TRUE,\n\t                DUPLICATE_SAME_ACCESS);\n\tDuplicateHandle(me,\n\t                (HANDLE)_get_osfhandle(fderr[1]),\n\t                me,\n\t                &si.hStdError,\n\t                0,\n\t                TRUE,\n\t                DUPLICATE_SAME_ACCESS);\n\n\t/* Mark handles that should not be inherited. See\n\t * https://msdn.microsoft.com/en-us/library/windows/desktop/ms682499%28v=vs.85%29.aspx\n\t */\n\tSetHandleInformation((HANDLE)_get_osfhandle(fdin[1]),\n\t                     HANDLE_FLAG_INHERIT,\n\t                     0);\n\tSetHandleInformation((HANDLE)_get_osfhandle(fdout[0]),\n\t                     HANDLE_FLAG_INHERIT,\n\t                     0);\n\tSetHandleInformation((HANDLE)_get_osfhandle(fderr[0]),\n\t                     HANDLE_FLAG_INHERIT,\n\t                     0);\n\n\t/* If CGI file is a script, try to read the interpreter line */\n\tinterp = conn->ctx->config[CGI_INTERPRETER];\n\tif (interp == NULL) {\n\t\tbuf[0] = buf[1] = '\\0';\n\n\t\t/* Read the first line of the script into the buffer */\n\t\tmg_snprintf(\n\t\t    conn, &truncated, cmdline, sizeof(cmdline), \"%s/%s\", dir, prog);\n\n\t\tif (truncated) {\n\t\t\tpi.hProcess = (pid_t)-1;\n\t\t\tgoto spawn_cleanup;\n\t\t}\n\n\t\tif (mg_fopen(conn, cmdline, MG_FOPEN_MODE_READ, &file)) {\n\t\t\tp = (char *)file.access.membuf;\n\t\t\tmg_fgets(buf, sizeof(buf), &file, &p);\n\t\t\t(void)mg_fclose(&file.access); /* ignore error on read only file */\n\t\t\tbuf[sizeof(buf) - 1] = '\\0';\n\t\t}\n\n\t\tif (buf[0] == '#' && buf[1] == '!') {\n\t\t\ttrim_trailing_whitespaces(buf + 2);\n\t\t} else {\n\t\t\tbuf[2] = '\\0';\n\t\t}\n\t\tinterp = buf + 2;\n\t}\n\n\tif (interp[0] != '\\0') {\n\t\tGetFullPathNameA(interp, sizeof(full_interp), full_interp, NULL);\n\t\tinterp = full_interp;\n\t}\n\tGetFullPathNameA(dir, sizeof(full_dir), full_dir, NULL);\n\n\tif (interp[0] != '\\0') {\n\t\tmg_snprintf(conn,\n\t\t            &truncated,\n\t\t            cmdline,\n\t\t            sizeof(cmdline),\n\t\t            \"\\\"%s\\\" \\\"%s\\\\%s\\\"\",\n\t\t            interp,\n\t\t            full_dir,\n\t\t            prog);\n\t} else {\n\t\tmg_snprintf(conn,\n\t\t            &truncated,\n\t\t            cmdline,\n\t\t            sizeof(cmdline),\n\t\t            \"\\\"%s\\\\%s\\\"\",\n\t\t            full_dir,\n\t\t            prog);\n\t}\n\n\tif (truncated) {\n\t\tpi.hProcess = (pid_t)-1;\n\t\tgoto spawn_cleanup;\n\t}\n\n\tDEBUG_TRACE(\"Running [%s]\", cmdline);\n\tif (CreateProcessA(NULL,\n\t                   cmdline,\n\t                   NULL,\n\t                   NULL,\n\t                   TRUE,\n\t                   CREATE_NEW_PROCESS_GROUP,\n\t                   envblk,\n\t                   NULL,\n\t                   &si,\n\t                   &pi) == 0) {\n\t\tmg_cry(\n\t\t    conn, \"%s: CreateProcess(%s): %ld\", __func__, cmdline, (long)ERRNO);\n\t\tpi.hProcess = (pid_t)-1;\n\t\t/* goto spawn_cleanup; */\n\t}\n\nspawn_cleanup:\n\t(void)CloseHandle(si.hStdOutput);\n\t(void)CloseHandle(si.hStdError);\n\t(void)CloseHandle(si.hStdInput);\n\tif (pi.hThread != NULL) {\n\t\t(void)CloseHandle(pi.hThread);\n\t}\n\n\treturn (pid_t)pi.hProcess;\n}\n#endif /* !NO_CGI */\n\n\nstatic int\nset_blocking_mode(SOCKET sock, int blocking)\n{\n\tunsigned long non_blocking = !blocking;\n\treturn ioctlsocket(sock, (long)FIONBIO, &non_blocking);\n}\n\n#else\n\nstatic int\nmg_stat(const struct mg_connection *conn,\n        const char *path,\n        struct mg_file_stat *filep)\n{\n\tstruct stat st;\n\tif (!filep) {\n\t\treturn 0;\n\t}\n\tmemset(filep, 0, sizeof(*filep));\n\n\tif (conn && is_file_in_memory(conn, path)) {\n\t\treturn 1;\n\t}\n\n\tif (0 == stat(path, &st)) {\n\t\tfilep->size = (uint64_t)(st.st_size);\n\t\tfilep->last_modified = st.st_mtime;\n\t\tfilep->is_directory = S_ISDIR(st.st_mode);\n\t\treturn 1;\n\t}\n\n\treturn 0;\n}\n\n\nstatic void\nset_close_on_exec(SOCKET fd, struct mg_connection *conn /* may be null */)\n{\n\tif (fcntl(fd, F_SETFD, FD_CLOEXEC) != 0) {\n\t\tif (conn) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: fcntl(F_SETFD FD_CLOEXEC) failed: %s\",\n\t\t\t       __func__,\n\t\t\t       strerror(ERRNO));\n\t\t}\n\t}\n}\n\n\nint\nmg_start_thread(mg_thread_func_t func, void *param)\n{\n\tpthread_t thread_id;\n\tpthread_attr_t attr;\n\tint result;\n\n\t(void)pthread_attr_init(&attr);\n\t(void)pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);\n\n#if defined(USE_STACK_SIZE) && (USE_STACK_SIZE > 1)\n\t/* Compile-time option to control stack size,\n\t * e.g. -DUSE_STACK_SIZE=16384 */\n\t(void)pthread_attr_setstacksize(&attr, USE_STACK_SIZE);\n#endif /* defined(USE_STACK_SIZE) && (USE_STACK_SIZE > 1) */\n\n\tresult = pthread_create(&thread_id, &attr, func, param);\n\tpthread_attr_destroy(&attr);\n\n\treturn result;\n}\n\n\n/* Start a thread storing the thread context. */\nstatic int\nmg_start_thread_with_id(mg_thread_func_t func,\n                        void *param,\n                        pthread_t *threadidptr)\n{\n\tpthread_t thread_id;\n\tpthread_attr_t attr;\n\tint result;\n\n\t(void)pthread_attr_init(&attr);\n\n#if defined(USE_STACK_SIZE) && (USE_STACK_SIZE > 1)\n\t/* Compile-time option to control stack size,\n\t * e.g. -DUSE_STACK_SIZE=16384 */\n\t(void)pthread_attr_setstacksize(&attr, USE_STACK_SIZE);\n#endif /* defined(USE_STACK_SIZE) && USE_STACK_SIZE > 1 */\n\n\tresult = pthread_create(&thread_id, &attr, func, param);\n\tpthread_attr_destroy(&attr);\n\tif ((result == 0) && (threadidptr != NULL)) {\n\t\t*threadidptr = thread_id;\n\t}\n\treturn result;\n}\n\n\n/* Wait for a thread to finish. */\nstatic int\nmg_join_thread(pthread_t threadid)\n{\n\tint result;\n\n\tresult = pthread_join(threadid, NULL);\n\treturn result;\n}\n\n\n#ifndef NO_CGI\nstatic pid_t\nspawn_process(struct mg_connection *conn,\n              const char *prog,\n              char *envblk,\n              char *envp[],\n              int fdin[2],\n              int fdout[2],\n              int fderr[2],\n              const char *dir)\n{\n\tpid_t pid;\n\tconst char *interp;\n\n\t(void)envblk;\n\n\tif (conn == NULL) {\n\t\treturn 0;\n\t}\n\n\tif ((pid = fork()) == -1) {\n\t\t/* Parent */\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Creating CGI process\\nfork(): %s\",\n\t\t                strerror(ERRNO));\n\t} else if (pid == 0) {\n\t\t/* Child */\n\t\tif (chdir(dir) != 0) {\n\t\t\tmg_cry(conn, \"%s: chdir(%s): %s\", __func__, dir, strerror(ERRNO));\n\t\t} else if (dup2(fdin[0], 0) == -1) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: dup2(%d, 0): %s\",\n\t\t\t       __func__,\n\t\t\t       fdin[0],\n\t\t\t       strerror(ERRNO));\n\t\t} else if (dup2(fdout[1], 1) == -1) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: dup2(%d, 1): %s\",\n\t\t\t       __func__,\n\t\t\t       fdout[1],\n\t\t\t       strerror(ERRNO));\n\t\t} else if (dup2(fderr[1], 2) == -1) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: dup2(%d, 2): %s\",\n\t\t\t       __func__,\n\t\t\t       fderr[1],\n\t\t\t       strerror(ERRNO));\n\t\t} else {\n\t\t\t/* Keep stderr and stdout in two different pipes.\n\t\t\t * Stdout will be sent back to the client,\n\t\t\t * stderr should go into a server error log. */\n\t\t\t(void)close(fdin[0]);\n\t\t\t(void)close(fdout[1]);\n\t\t\t(void)close(fderr[1]);\n\n\t\t\t/* Close write end fdin and read end fdout and fderr */\n\t\t\t(void)close(fdin[1]);\n\t\t\t(void)close(fdout[0]);\n\t\t\t(void)close(fderr[0]);\n\n\t\t\t/* After exec, all signal handlers are restored to their default\n\t\t\t * values, with one exception of SIGCHLD. According to\n\t\t\t * POSIX.1-2001 and Linux's implementation, SIGCHLD's handler will\n\t\t\t * leave unchanged after exec if it was set to be ignored. Restore\n\t\t\t * it to default action. */\n\t\t\tsignal(SIGCHLD, SIG_DFL);\n\n\t\t\tinterp = conn->ctx->config[CGI_INTERPRETER];\n\t\t\tif (interp == NULL) {\n\t\t\t\t(void)execle(prog, prog, NULL, envp);\n\t\t\t\tmg_cry(conn,\n\t\t\t\t       \"%s: execle(%s): %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       prog,\n\t\t\t\t       strerror(ERRNO));\n\t\t\t} else {\n\t\t\t\t(void)execle(interp, interp, prog, NULL, envp);\n\t\t\t\tmg_cry(conn,\n\t\t\t\t       \"%s: execle(%s %s): %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       interp,\n\t\t\t\t       prog,\n\t\t\t\t       strerror(ERRNO));\n\t\t\t}\n\t\t}\n\t\texit(EXIT_FAILURE);\n\t}\n\n\treturn pid;\n}\n#endif /* !NO_CGI */\n\n\nstatic int\nset_blocking_mode(SOCKET sock, int blocking)\n{\n\tint flags;\n\n\tflags = fcntl(sock, F_GETFL, 0);\n\tif (blocking) {\n\t\t(void)fcntl(sock, F_SETFL, flags | O_NONBLOCK);\n\t} else {\n\t\t(void)fcntl(sock, F_SETFL, flags & (~(int)(O_NONBLOCK)));\n\t}\n\n\treturn 0;\n}\n#endif /* _WIN32 */\n/* End of initial operating system specific define block. */\n\n\n/* Get a random number (independent of C rand function) */\nstatic uint64_t\nget_random(void)\n{\n\tstatic uint64_t lfsr = 0; /* Linear feedback shift register */\n\tstatic uint64_t lcg = 0;  /* Linear congruential generator */\n\tstruct timespec now;\n\n\tmemset(&now, 0, sizeof(now));\n\tclock_gettime(CLOCK_MONOTONIC, &now);\n\n\tif (lfsr == 0) {\n\t\t/* lfsr will be only 0 if has not been initialized,\n\t\t * so this code is called only once. */\n\t\tlfsr = (((uint64_t)now.tv_sec) << 21) ^ ((uint64_t)now.tv_nsec)\n\t\t       ^ ((uint64_t)(ptrdiff_t)&now) ^ (((uint64_t)time(NULL)) << 33);\n\t\tlcg = (((uint64_t)now.tv_sec) << 25) + (uint64_t)now.tv_nsec\n\t\t      + (uint64_t)(ptrdiff_t)&now;\n\t} else {\n\t\t/* Get the next step of both random number generators. */\n\t\tlfsr = (lfsr >> 1)\n\t\t       | ((((lfsr >> 0) ^ (lfsr >> 1) ^ (lfsr >> 3) ^ (lfsr >> 4)) & 1)\n\t\t          << 63);\n\t\tlcg = lcg * 6364136223846793005 + 1442695040888963407;\n\t}\n\n\t/* Combining two pseudo-random number generators and a high resolution part\n\t * of the current server time will make it hard (impossible?) to guess the\n\t * next number. */\n\treturn (lfsr ^ lcg ^ (uint64_t)now.tv_nsec);\n}\n\n\nstatic int\nmg_poll(struct pollfd *pfd,\n        unsigned int n,\n        int milliseconds,\n        volatile int *stop_server)\n{\n\tint ms_now, result;\n\n\t/* Call poll, but only for a maximum time of a few seconds.\n\t * This will allow to stop the server after some seconds, instead\n\t * of having to wait for a long socket timeout. */\n\tms_now = SOCKET_TIMEOUT_QUANTUM; /* Sleep quantum in ms */\n\n\tdo {\n\t\tif (*stop_server) {\n\t\t\t/* Shut down signal */\n\t\t\treturn -2;\n\t\t}\n\n\t\tif ((milliseconds >= 0) && (milliseconds < ms_now)) {\n\t\t\tms_now = milliseconds;\n\t\t}\n\n\t\tresult = poll(pfd, n, ms_now);\n\t\tif (result != 0) {\n\t\t\t/* Poll returned either success (1) or error (-1).\n\t\t\t * Forward both to the caller. */\n\t\t\treturn result;\n\t\t}\n\n\t\t/* Poll returned timeout (0). */\n\t\tif (milliseconds > 0) {\n\t\t\tmilliseconds -= ms_now;\n\t\t}\n\n\t} while (milliseconds != 0);\n\n\treturn result;\n}\n\n\n/* Write data to the IO channel - opened file descriptor, socket or SSL\n * descriptor. Return number of bytes written. */\nstatic int\npush(struct mg_context *ctx,\n     FILE *fp,\n     SOCKET sock,\n     SSL *ssl,\n     const char *buf,\n     int len,\n     double timeout)\n{\n\tstruct timespec start, now;\n\tint n, err;\n\n#ifdef _WIN32\n\ttypedef int len_t;\n#else\n\ttypedef size_t len_t;\n#endif\n\n\tif (timeout > 0) {\n\t\tmemset(&start, 0, sizeof(start));\n\t\tmemset(&now, 0, sizeof(now));\n\t\tclock_gettime(CLOCK_MONOTONIC, &start);\n\t}\n\n\tif (ctx == NULL) {\n\t\treturn -1;\n\t}\n\n#ifdef NO_SSL\n\tif (ssl) {\n\t\treturn -1;\n\t}\n#endif\n\n\tdo {\n\n#ifndef NO_SSL\n\t\tif (ssl != NULL) {\n\t\t\tn = SSL_write(ssl, buf, len);\n\t\t\tif (n <= 0) {\n\t\t\t\terr = SSL_get_error(ssl, n);\n\t\t\t\tif ((err == SSL_ERROR_SYSCALL) && (n == -1)) {\n\t\t\t\t\terr = ERRNO;\n\t\t\t\t} else if ((err == SSL_ERROR_WANT_READ)\n\t\t\t\t           || (err == SSL_ERROR_WANT_WRITE)) {\n\t\t\t\t\tn = 0;\n\t\t\t\t} else {\n\t\t\t\t\tDEBUG_TRACE(\"SSL_write() failed, error %d\", err);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = 0;\n\t\t\t}\n\t\t} else\n#endif\n\t\t    if (fp != NULL) {\n\t\t\tn = (int)fwrite(buf, 1, (size_t)len, fp);\n\t\t\tif (ferror(fp)) {\n\t\t\t\tn = -1;\n\t\t\t\terr = ERRNO;\n\t\t\t} else {\n\t\t\t\terr = 0;\n\t\t\t}\n\t\t} else {\n\t\t\tn = (int)send(sock, buf, (len_t)len, MSG_NOSIGNAL);\n\t\t\terr = (n < 0) ? ERRNO : 0;\n\t\t\tif (n <= 0) {\n\t\t\t\t/* shutdown of the socket at client side */\n\t\t\t\treturn -1;\n\t\t\t}\n#if defined(TEMPORARY_INSTRUMENTATION)\n\t\t\t{\n\t\t\t\tFILE *f = fopen(\"r:\\\\all.txt\", \"ab\");\n\t\t\t\tfprintf(f, \"\\r\\n%010u SEND:\\r\\n\", GetTickCount());\n\t\t\t\tfwrite(buf, 1, n, f);\n\t\t\t\tfclose(f);\n\t\t\t}\n#endif\n\t\t}\n\n\t\tif (ctx->stop_flag) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tif ((n > 0) || (n == 0 && len == 0)) {\n\t\t\t/* some data has been read, or no data was requested */\n\t\t\treturn n;\n\t\t}\n\t\tif (n < 0) {\n\t\t\t/* socket error - check errno */\n\t\t\tDEBUG_TRACE(\"send() failed, error %d\", err);\n\n\t\t\t/* TODO: error handling depending on the error code.\n\t\t\t * These codes are different between Windows and Linux.\n\t\t\t */\n\t\t\treturn -1;\n\t\t}\n\n\t\t/* Only in case n=0 (timeout), repeat calling the write function */\n\n\t\tif (timeout > 0) {\n\t\t\tclock_gettime(CLOCK_MONOTONIC, &now);\n\t\t}\n\n\t} while ((timeout <= 0) || (mg_difftimespec(&now, &start) <= timeout));\n\n\t(void)err; /* Avoid unused warning if NO_SSL is set and DEBUG_TRACE is not\n\t              used */\n\n\treturn -1;\n}\n\n\nstatic int64_t\npush_all(struct mg_context *ctx,\n         FILE *fp,\n         SOCKET sock,\n         SSL *ssl,\n         const char *buf,\n         int64_t len)\n{\n\tdouble timeout = -1.0;\n\tint64_t n, nwritten = 0;\n\n\tif (ctx == NULL) {\n\t\treturn -1;\n\t}\n\n\tif (ctx->config[REQUEST_TIMEOUT]) {\n\t\ttimeout = atoi(ctx->config[REQUEST_TIMEOUT]) / 1000.0;\n\t}\n\n\twhile (len > 0 && ctx->stop_flag == 0) {\n\t\tn = push(ctx, fp, sock, ssl, buf + nwritten, (int)len, timeout);\n\t\tif (n < 0) {\n\t\t\tif (nwritten == 0) {\n\t\t\t\tnwritten = n; /* Propagate the error */\n\t\t\t}\n\t\t\tbreak;\n\t\t} else if (n == 0) {\n\t\t\tbreak; /* No more data to write */\n\t\t} else {\n\t\t\tnwritten += n;\n\t\t\tlen -= n;\n\t\t}\n\t}\n\n\treturn nwritten;\n}\n\n\n/* Read from IO channel - opened file descriptor, socket, or SSL descriptor.\n * Return negative value on error, or number of bytes read on success. */\nstatic int\npull(FILE *fp, struct mg_connection *conn, char *buf, int len, double timeout)\n{\n\tint nread, err = 0;\n\n#ifdef _WIN32\n\ttypedef int len_t;\n#else\n\ttypedef size_t len_t;\n#endif\n\n\tif (fp != NULL) {\n#if !defined(_WIN32_WCE)\n\t\t/* Use read() instead of fread(), because if we're reading from the\n\t\t * CGI pipe, fread() may block until IO buffer is filled up. We\n\t\t * cannot afford to block and must pass all read bytes immediately\n\t\t * to the client. */\n\t\tnread = (int)read(fileno(fp), buf, (size_t)len);\n#else\n\t\t/* WinCE does not support CGI pipes */\n\t\tnread = (int)fread(buf, 1, (size_t)len, fp);\n#endif\n\t\terr = (nread < 0) ? ERRNO : 0;\n\n#ifndef NO_SSL\n\t} else if (conn->ssl != NULL) {\n\n\t\tstruct pollfd pfd[1];\n\t\tint pollres;\n\n\t\tpfd[0].fd = conn->client.sock;\n\t\tpfd[0].events = POLLIN;\n\t\tpollres =\n\t\t    mg_poll(pfd, 1, (int)(timeout * 1000.0), &(conn->ctx->stop_flag));\n\t\tif (conn->ctx->stop_flag) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (pollres > 0) {\n\t\t\tnread = SSL_read(conn->ssl, buf, len);\n\t\t\tif (nread <= 0) {\n\t\t\t\terr = SSL_get_error(conn->ssl, nread);\n\t\t\t\tif ((err == SSL_ERROR_SYSCALL) && (nread == -1)) {\n\t\t\t\t\terr = ERRNO;\n\t\t\t\t} else if ((err == SSL_ERROR_WANT_READ)\n\t\t\t\t           || (err == SSL_ERROR_WANT_WRITE)) {\n\t\t\t\t\tnread = 0;\n\t\t\t\t} else {\n\t\t\t\t\tDEBUG_TRACE(\"SSL_read() failed, error %d\", err);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = 0;\n\t\t\t}\n\n\t\t} else if (pollres < 0) {\n\t\t\t/* Error */\n\t\t\treturn -1;\n\t\t} else {\n\t\t\t/* pollres = 0 means timeout */\n\t\t\tnread = 0;\n\t\t}\n\n#endif\n\n\t} else {\n\t\tstruct pollfd pfd[1];\n\t\tint pollres;\n\n\t\tpfd[0].fd = conn->client.sock;\n\t\tpfd[0].events = POLLIN;\n\t\tpollres =\n\t\t    mg_poll(pfd, 1, (int)(timeout * 1000.0), &(conn->ctx->stop_flag));\n\t\tif (conn->ctx->stop_flag) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (pollres > 0) {\n\t\t\tnread = (int)recv(conn->client.sock, buf, (len_t)len, 0);\n\t\t\terr = (nread < 0) ? ERRNO : 0;\n\t\t\tif (nread <= 0) {\n\t\t\t\t/* shutdown of the socket at client side */\n\t\t\t\treturn -1;\n\t\t\t}\n#if defined(TEMPORARY_INSTRUMENTATION)\n\t\t\t{\n\t\t\t\tFILE *f = fopen(\"r:\\\\all.txt\", \"ab\");\n\t\t\t\tfprintf(f, \"\\r\\n%010u RECV:\\r\\n\", GetTickCount());\n\t\t\t\tfwrite(buf, 1, nread, f);\n\t\t\t\tfclose(f);\n\t\t\t}\n#endif\n\t\t} else if (pollres < 0) {\n\t\t\t/* error callint poll */\n\t\t\treturn -1;\n\t\t} else {\n\t\t\t/* pollres = 0 means timeout */\n\t\t\tnread = 0;\n\t\t}\n\t}\n\n\tif (conn->ctx->stop_flag) {\n\t\treturn -1;\n\t}\n\n\tif ((nread > 0) || (nread == 0 && len == 0)) {\n\t\t/* some data has been read, or no data was requested */\n\t\treturn nread;\n\t}\n\n\tif (nread < 0) {\n/* socket error - check errno */\n#ifdef _WIN32\n\t\tif (err == WSAEWOULDBLOCK) {\n\t\t\t/* TODO: check if this is still required */\n\t\t\t/* standard case if called from close_socket_gracefully */\n\t\t\treturn -1;\n\t\t} else if (err == WSAETIMEDOUT) {\n\t\t\t/* TODO: check if this is still required */\n\t\t\t/* timeout is handled by the while loop  */\n\t\t\treturn 0;\n\t\t} else if (err == WSAECONNABORTED) {\n\t\t\t/* See https://www.chilkatsoft.com/p/p_299.asp */\n\t\t\treturn -1;\n\t\t} else {\n\t\t\tDEBUG_TRACE(\"recv() failed, error %d\", err);\n\t\t\treturn -1;\n\t\t}\n#else\n\t\t/* TODO: POSIX returns either EAGAIN or EWOULDBLOCK in both cases,\n\t\t * if the timeout is reached and if the socket was set to non-\n\t\t * blocking in close_socket_gracefully, so we can not distinguish\n\t\t * here. We have to wait for the timeout in both cases for now.\n\t\t */\n\t\tif (err == EAGAIN || err == EWOULDBLOCK || err == EINTR) {\n\t\t\t/* TODO: check if this is still required */\n\t\t\t/* EAGAIN/EWOULDBLOCK:\n\t\t\t * standard case if called from close_socket_gracefully\n\t\t\t * => should return -1 */\n\t\t\t/* or timeout occured\n\t\t\t * => the code must stay in the while loop */\n\n\t\t\t/* EINTR can be generated on a socket with a timeout set even\n\t\t\t * when SA_RESTART is effective for all relevant signals\n\t\t\t * (see signal(7)).\n\t\t\t * => stay in the while loop */\n\t\t} else {\n\t\t\tDEBUG_TRACE(\"recv() failed, error %d\", err);\n\t\t\treturn -1;\n\t\t}\n#endif\n\t}\n\n\t/* Timeout occured, but no data available. */\n\treturn -1;\n}\n\n\nstatic int\npull_all(FILE *fp, struct mg_connection *conn, char *buf, int len)\n{\n\tint n, nread = 0;\n\tdouble timeout = -1.0;\n\n\tif (conn->ctx->config[REQUEST_TIMEOUT]) {\n\t\ttimeout = atoi(conn->ctx->config[REQUEST_TIMEOUT]) / 1000.0;\n\t}\n\n\twhile (len > 0 && conn->ctx->stop_flag == 0) {\n\t\tn = pull(fp, conn, buf + nread, len, timeout);\n\t\tif (n < 0) {\n\t\t\tif (nread == 0) {\n\t\t\t\tnread = n; /* Propagate the error */\n\t\t\t}\n\t\t\tbreak;\n\t\t} else if (n == 0) {\n\t\t\tbreak; /* No more data to read */\n\t\t} else {\n\t\t\tconn->consumed_content += n;\n\t\t\tnread += n;\n\t\t\tlen -= n;\n\t\t}\n\t}\n\n\treturn nread;\n}\n\n\nstatic void\ndiscard_unread_request_data(struct mg_connection *conn)\n{\n\tchar buf[MG_BUF_LEN];\n\tsize_t to_read;\n\tint nread;\n\n\tif (conn == NULL) {\n\t\treturn;\n\t}\n\n\tto_read = sizeof(buf);\n\n\tif (conn->is_chunked) {\n\t\t/* Chunked encoding: 1=chunk not read completely, 2=chunk read\n\t\t * completely */\n\t\twhile (conn->is_chunked == 1) {\n\t\t\tnread = mg_read(conn, buf, to_read);\n\t\t\tif (nread <= 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t} else {\n\t\t/* Not chunked: content length is known */\n\t\twhile (conn->consumed_content < conn->content_len) {\n\t\t\tif (to_read\n\t\t\t    > (size_t)(conn->content_len - conn->consumed_content)) {\n\t\t\t\tto_read = (size_t)(conn->content_len - conn->consumed_content);\n\t\t\t}\n\n\t\t\tnread = mg_read(conn, buf, to_read);\n\t\t\tif (nread <= 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nstatic int\nmg_read_inner(struct mg_connection *conn, void *buf, size_t len)\n{\n\tint64_t n, buffered_len, nread;\n\tint64_t len64 =\n\t    (int64_t)((len > INT_MAX) ? INT_MAX : len); /* since the return value is\n\t                                               * int, we may not read more\n\t                                               * bytes */\n\tconst char *body;\n\n\tif (conn == NULL) {\n\t\treturn 0;\n\t}\n\n\t/* If Content-Length is not set for a PUT or POST request, read until\n\t * socket is closed */\n\tif (conn->consumed_content == 0 && conn->content_len == -1) {\n\t\tconn->content_len = INT64_MAX;\n\t\tconn->must_close = 1;\n\t}\n\n\tnread = 0;\n\tif (conn->consumed_content < conn->content_len) {\n\t\t/* Adjust number of bytes to read. */\n\t\tint64_t left_to_read = conn->content_len - conn->consumed_content;\n\t\tif (left_to_read < len64) {\n\t\t\t/* Do not read more than the total content length of the request.\n\t\t\t */\n\t\t\tlen64 = left_to_read;\n\t\t}\n\n\t\t/* Return buffered data */\n\t\tbuffered_len = (int64_t)(conn->data_len) - (int64_t)conn->request_len\n\t\t               - conn->consumed_content;\n\t\tif (buffered_len > 0) {\n\t\t\tif (len64 < buffered_len) {\n\t\t\t\tbuffered_len = len64;\n\t\t\t}\n\t\t\tbody = conn->buf + conn->request_len + conn->consumed_content;\n\t\t\tmemcpy(buf, body, (size_t)buffered_len);\n\t\t\tlen64 -= buffered_len;\n\t\t\tconn->consumed_content += buffered_len;\n\t\t\tnread += buffered_len;\n\t\t\tbuf = (char *)buf + buffered_len;\n\t\t}\n\n\t\t/* We have returned all buffered data. Read new data from the remote\n\t\t * socket.\n\t\t */\n\t\tif ((n = pull_all(NULL, conn, (char *)buf, (int)len64)) >= 0) {\n\t\t\tnread += n;\n\t\t} else {\n\t\t\tnread = ((nread > 0) ? nread : n);\n\t\t}\n\t}\n\treturn (int)nread;\n}\n\n\nstatic char\nmg_getc(struct mg_connection *conn)\n{\n\tchar c;\n\tif (conn == NULL) {\n\t\treturn 0;\n\t}\n\tconn->content_len++;\n\tif (mg_read_inner(conn, &c, 1) <= 0) {\n\t\treturn (char)0;\n\t}\n\treturn c;\n}\n\n\nint\nmg_read(struct mg_connection *conn, void *buf, size_t len)\n{\n\tif (len > INT_MAX) {\n\t\tlen = INT_MAX;\n\t}\n\n\tif (conn == NULL) {\n\t\treturn 0;\n\t}\n\n\tif (conn->is_chunked) {\n\t\tsize_t all_read = 0;\n\n\t\twhile (len > 0) {\n\n\t\t\tif (conn->is_chunked == 2) {\n\t\t\t\t/* No more data left to read */\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (conn->chunk_remainder) {\n\t\t\t\t/* copy from the remainder of the last received chunk */\n\t\t\t\tlong read_ret;\n\t\t\t\tsize_t read_now =\n\t\t\t\t    ((conn->chunk_remainder > len) ? (len)\n\t\t\t\t                                   : (conn->chunk_remainder));\n\n\t\t\t\tconn->content_len += (int)read_now;\n\t\t\t\tread_ret =\n\t\t\t\t    mg_read_inner(conn, (char *)buf + all_read, read_now);\n\n\t\t\t\tif (read_ret < 1) {\n\t\t\t\t\t/* read error */\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\n\t\t\t\tall_read += (size_t)read_ret;\n\t\t\t\tconn->chunk_remainder -= (size_t)read_ret;\n\t\t\t\tlen -= (size_t)read_ret;\n\n\t\t\t\tif (conn->chunk_remainder == 0) {\n\t\t\t\t\t/* Add data bytes in the current chunk have been read,\n\t\t\t\t\t * so we are expecting \\r\\n now. */\n\t\t\t\t\tchar x1 = mg_getc(conn);\n\t\t\t\t\tchar x2 = mg_getc(conn);\n\t\t\t\t\tif ((x1 != '\\r') || (x2 != '\\n')) {\n\t\t\t\t\t\t/* Protocol violation */\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t/* fetch a new chunk */\n\t\t\t\tint i = 0;\n\t\t\t\tchar lenbuf[64];\n\t\t\t\tchar *end = 0;\n\t\t\t\tunsigned long chunkSize = 0;\n\n\t\t\t\tfor (i = 0; i < ((int)sizeof(lenbuf) - 1); i++) {\n\t\t\t\t\tlenbuf[i] = mg_getc(conn);\n\t\t\t\t\tif (i > 0 && lenbuf[i] == '\\r' && lenbuf[i - 1] != '\\r') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (i > 1 && lenbuf[i] == '\\n' && lenbuf[i - 1] == '\\r') {\n\t\t\t\t\t\tlenbuf[i + 1] = 0;\n\t\t\t\t\t\tchunkSize = strtoul(lenbuf, &end, 16);\n\t\t\t\t\t\tif (chunkSize == 0) {\n\t\t\t\t\t\t\t/* regular end of content */\n\t\t\t\t\t\t\tconn->is_chunked = 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (!isxdigit(lenbuf[i])) {\n\t\t\t\t\t\t/* illegal character for chunk length */\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ((end == NULL) || (*end != '\\r')) {\n\t\t\t\t\t/* chunksize not set correctly */\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (chunkSize == 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconn->chunk_remainder = chunkSize;\n\t\t\t}\n\t\t}\n\n\t\treturn (int)all_read;\n\t}\n\treturn mg_read_inner(conn, buf, len);\n}\n\n\nint\nmg_write(struct mg_connection *conn, const void *buf, size_t len)\n{\n\ttime_t now;\n\tint64_t n, total, allowed;\n\n\tif (conn == NULL) {\n\t\treturn 0;\n\t}\n\n\tif (conn->throttle > 0) {\n\t\tif ((now = time(NULL)) != conn->last_throttle_time) {\n\t\t\tconn->last_throttle_time = now;\n\t\t\tconn->last_throttle_bytes = 0;\n\t\t}\n\t\tallowed = conn->throttle - conn->last_throttle_bytes;\n\t\tif (allowed > (int64_t)len) {\n\t\t\tallowed = (int64_t)len;\n\t\t}\n\t\tif ((total = push_all(conn->ctx,\n\t\t                      NULL,\n\t\t                      conn->client.sock,\n\t\t                      conn->ssl,\n\t\t                      (const char *)buf,\n\t\t                      (int64_t)allowed)) == allowed) {\n\t\t\tbuf = (const char *)buf + total;\n\t\t\tconn->last_throttle_bytes += total;\n\t\t\twhile (total < (int64_t)len && conn->ctx->stop_flag == 0) {\n\t\t\t\tallowed = (conn->throttle > ((int64_t)len - total))\n\t\t\t\t              ? (int64_t)len - total\n\t\t\t\t              : conn->throttle;\n\t\t\t\tif ((n = push_all(conn->ctx,\n\t\t\t\t                  NULL,\n\t\t\t\t                  conn->client.sock,\n\t\t\t\t                  conn->ssl,\n\t\t\t\t                  (const char *)buf,\n\t\t\t\t                  (int64_t)allowed)) != allowed) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tsleep(1);\n\t\t\t\tconn->last_throttle_bytes = allowed;\n\t\t\t\tconn->last_throttle_time = time(NULL);\n\t\t\t\tbuf = (const char *)buf + n;\n\t\t\t\ttotal += n;\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttotal = push_all(conn->ctx,\n\t\t                 NULL,\n\t\t                 conn->client.sock,\n\t\t                 conn->ssl,\n\t\t                 (const char *)buf,\n\t\t                 (int64_t)len);\n\t}\n\treturn (int)total;\n}\n\n\n/* Alternative alloc_vprintf() for non-compliant C runtimes */\nstatic int\nalloc_vprintf2(char **buf, const char *fmt, va_list ap)\n{\n\tva_list ap_copy;\n\tsize_t size = MG_BUF_LEN / 4;\n\tint len = -1;\n\n\t*buf = NULL;\n\twhile (len < 0) {\n\t\tif (*buf) {\n\t\t\tmg_free(*buf);\n\t\t}\n\n\t\tsize *= 4;\n\t\t*buf = (char *)mg_malloc(size);\n\t\tif (!*buf) {\n\t\t\tbreak;\n\t\t}\n\n\t\tva_copy(ap_copy, ap);\n\t\tlen = vsnprintf_impl(*buf, size - 1, fmt, ap_copy);\n\t\tva_end(ap_copy);\n\t\t(*buf)[size - 1] = 0;\n\t}\n\n\treturn len;\n}\n\n\n/* Print message to buffer. If buffer is large enough to hold the message,\n * return buffer. If buffer is to small, allocate large enough buffer on heap,\n * and return allocated buffer. */\nstatic int\nalloc_vprintf(char **out_buf,\n              char *prealloc_buf,\n              size_t prealloc_size,\n              const char *fmt,\n              va_list ap)\n{\n\tva_list ap_copy;\n\tint len;\n\n\t/* Windows is not standard-compliant, and vsnprintf() returns -1 if\n\t * buffer is too small. Also, older versions of msvcrt.dll do not have\n\t * _vscprintf().  However, if size is 0, vsnprintf() behaves correctly.\n\t * Therefore, we make two passes: on first pass, get required message\n\t * length.\n\t * On second pass, actually print the message. */\n\tva_copy(ap_copy, ap);\n\tlen = vsnprintf_impl(NULL, 0, fmt, ap_copy);\n\tva_end(ap_copy);\n\n\tif (len < 0) {\n\t\t/* C runtime is not standard compliant, vsnprintf() returned -1.\n\t\t * Switch to alternative code path that uses incremental allocations.\n\t\t*/\n\t\tva_copy(ap_copy, ap);\n\t\tlen = alloc_vprintf2(out_buf, fmt, ap);\n\t\tva_end(ap_copy);\n\n\t} else if ((size_t)(len) >= prealloc_size) {\n\t\t/* The pre-allocated buffer not large enough. */\n\t\t/* Allocate a new buffer. */\n\t\t*out_buf = (char *)mg_malloc((size_t)(len) + 1);\n\t\tif (!*out_buf) {\n\t\t\t/* Allocation failed. Return -1 as \"out of memory\" error. */\n\t\t\treturn -1;\n\t\t}\n\t\t/* Buffer allocation successful. Store the string there. */\n\t\tva_copy(ap_copy, ap);\n\t\tIGNORE_UNUSED_RESULT(\n\t\t    vsnprintf_impl(*out_buf, (size_t)(len) + 1, fmt, ap_copy));\n\t\tva_end(ap_copy);\n\n\t} else {\n\t\t/* The pre-allocated buffer is large enough.\n\t\t * Use it to store the string and return the address. */\n\t\tva_copy(ap_copy, ap);\n\t\tIGNORE_UNUSED_RESULT(\n\t\t    vsnprintf_impl(prealloc_buf, prealloc_size, fmt, ap_copy));\n\t\tva_end(ap_copy);\n\t\t*out_buf = prealloc_buf;\n\t}\n\n\treturn len;\n}\n\n\nstatic int\nmg_vprintf(struct mg_connection *conn, const char *fmt, va_list ap)\n{\n\tchar mem[MG_BUF_LEN];\n\tchar *buf = NULL;\n\tint len;\n\n\tif ((len = alloc_vprintf(&buf, mem, sizeof(mem), fmt, ap)) > 0) {\n\t\tlen = mg_write(conn, buf, (size_t)len);\n\t}\n\tif (buf != mem && buf != NULL) {\n\t\tmg_free(buf);\n\t}\n\n\treturn len;\n}\n\n\nint\nmg_printf(struct mg_connection *conn, const char *fmt, ...)\n{\n\tva_list ap;\n\tint result;\n\n\tva_start(ap, fmt);\n\tresult = mg_vprintf(conn, fmt, ap);\n\tva_end(ap);\n\n\treturn result;\n}\n\n\nint\nmg_url_decode(const char *src,\n              int src_len,\n              char *dst,\n              int dst_len,\n              int is_form_url_encoded)\n{\n\tint i, j, a, b;\n#define HEXTOI(x) (isdigit(x) ? (x - '0') : (x - 'W'))\n\n\tfor (i = j = 0; (i < src_len) && (j < (dst_len - 1)); i++, j++) {\n\t\tif (i < src_len - 2 && src[i] == '%'\n\t\t    && isxdigit(*(const unsigned char *)(src + i + 1))\n\t\t    && isxdigit(*(const unsigned char *)(src + i + 2))) {\n\t\t\ta = tolower(*(const unsigned char *)(src + i + 1));\n\t\t\tb = tolower(*(const unsigned char *)(src + i + 2));\n\t\t\tdst[j] = (char)((HEXTOI(a) << 4) | HEXTOI(b));\n\t\t\ti += 2;\n\t\t} else if (is_form_url_encoded && src[i] == '+') {\n\t\t\tdst[j] = ' ';\n\t\t} else {\n\t\t\tdst[j] = src[i];\n\t\t}\n\t}\n\n\tdst[j] = '\\0'; /* Null-terminate the destination */\n\n\treturn (i >= src_len) ? j : -1;\n}\n\n\nint\nmg_get_var(const char *data,\n           size_t data_len,\n           const char *name,\n           char *dst,\n           size_t dst_len)\n{\n\treturn mg_get_var2(data, data_len, name, dst, dst_len, 0);\n}\n\n\nint\nmg_get_var2(const char *data,\n            size_t data_len,\n            const char *name,\n            char *dst,\n            size_t dst_len,\n            size_t occurrence)\n{\n\tconst char *p, *e, *s;\n\tsize_t name_len;\n\tint len;\n\n\tif (dst == NULL || dst_len == 0) {\n\t\tlen = -2;\n\t} else if (data == NULL || name == NULL || data_len == 0) {\n\t\tlen = -1;\n\t\tdst[0] = '\\0';\n\t} else {\n\t\tname_len = strlen(name);\n\t\te = data + data_len;\n\t\tlen = -1;\n\t\tdst[0] = '\\0';\n\n\t\t/* data is \"var1=val1&var2=val2...\". Find variable first */\n\t\tfor (p = data; p + name_len < e; p++) {\n\t\t\tif ((p == data || p[-1] == '&') && p[name_len] == '='\n\t\t\t    && !mg_strncasecmp(name, p, name_len) && 0 == occurrence--) {\n\t\t\t\t/* Point p to variable value */\n\t\t\t\tp += name_len + 1;\n\n\t\t\t\t/* Point s to the end of the value */\n\t\t\t\ts = (const char *)memchr(p, '&', (size_t)(e - p));\n\t\t\t\tif (s == NULL) {\n\t\t\t\t\ts = e;\n\t\t\t\t}\n\t\t\t\t/* assert(s >= p); */\n\t\t\t\tif (s < p) {\n\t\t\t\t\treturn -3;\n\t\t\t\t}\n\n\t\t\t\t/* Decode variable into destination buffer */\n\t\t\t\tlen = mg_url_decode(p, (int)(s - p), dst, (int)dst_len, 1);\n\n\t\t\t\t/* Redirect error code from -1 to -2 (destination buffer too\n\t\t\t\t * small). */\n\t\t\t\tif (len == -1) {\n\t\t\t\t\tlen = -2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn len;\n}\n\n\n/* HCP24: some changes to compare hole var_name */\nint\nmg_get_cookie(const char *cookie_header,\n              const char *var_name,\n              char *dst,\n              size_t dst_size)\n{\n\tconst char *s, *p, *end;\n\tint name_len, len = -1;\n\n\tif (dst == NULL || dst_size == 0) {\n\t\treturn -2;\n\t}\n\n\tdst[0] = '\\0';\n\tif (var_name == NULL || (s = cookie_header) == NULL) {\n\t\treturn -1;\n\t}\n\n\tname_len = (int)strlen(var_name);\n\tend = s + strlen(s);\n\tfor (; (s = mg_strcasestr(s, var_name)) != NULL; s += name_len) {\n\t\tif (s[name_len] == '=') {\n\t\t\t/* HCP24: now check is it a substring or a full cookie name */\n\t\t\tif ((s == cookie_header) || (s[-1] == ' ')) {\n\t\t\t\ts += name_len + 1;\n\t\t\t\tif ((p = strchr(s, ' ')) == NULL) {\n\t\t\t\t\tp = end;\n\t\t\t\t}\n\t\t\t\tif (p[-1] == ';') {\n\t\t\t\t\tp--;\n\t\t\t\t}\n\t\t\t\tif (*s == '\"' && p[-1] == '\"' && p > s + 1) {\n\t\t\t\t\ts++;\n\t\t\t\t\tp--;\n\t\t\t\t}\n\t\t\t\tif ((size_t)(p - s) < dst_size) {\n\t\t\t\t\tlen = (int)(p - s);\n\t\t\t\t\tmg_strlcpy(dst, s, (size_t)len + 1);\n\t\t\t\t} else {\n\t\t\t\t\tlen = -3;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn len;\n}\n\n\n#if defined(USE_WEBSOCKET) || defined(USE_LUA)\nstatic void\nbase64_encode(const unsigned char *src, int src_len, char *dst)\n{\n\tstatic const char *b64 =\n\t    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\tint i, j, a, b, c;\n\n\tfor (i = j = 0; i < src_len; i += 3) {\n\t\ta = src[i];\n\t\tb = ((i + 1) >= src_len) ? 0 : src[i + 1];\n\t\tc = ((i + 2) >= src_len) ? 0 : src[i + 2];\n\n\t\tdst[j++] = b64[a >> 2];\n\t\tdst[j++] = b64[((a & 3) << 4) | (b >> 4)];\n\t\tif (i + 1 < src_len) {\n\t\t\tdst[j++] = b64[(b & 15) << 2 | (c >> 6)];\n\t\t}\n\t\tif (i + 2 < src_len) {\n\t\t\tdst[j++] = b64[c & 63];\n\t\t}\n\t}\n\twhile (j % 4 != 0) {\n\t\tdst[j++] = '=';\n\t}\n\tdst[j++] = '\\0';\n}\n#endif\n\n\n#if defined(USE_LUA)\nstatic unsigned char\nb64reverse(char letter)\n{\n\tif (letter >= 'A' && letter <= 'Z') {\n\t\treturn letter - 'A';\n\t}\n\tif (letter >= 'a' && letter <= 'z') {\n\t\treturn letter - 'a' + 26;\n\t}\n\tif (letter >= '0' && letter <= '9') {\n\t\treturn letter - '0' + 52;\n\t}\n\tif (letter == '+') {\n\t\treturn 62;\n\t}\n\tif (letter == '/') {\n\t\treturn 63;\n\t}\n\tif (letter == '=') {\n\t\treturn 255; /* normal end */\n\t}\n\treturn 254; /* error */\n}\n\n\nstatic int\nbase64_decode(const unsigned char *src, int src_len, char *dst, size_t *dst_len)\n{\n\tint i;\n\tunsigned char a, b, c, d;\n\n\t*dst_len = 0;\n\n\tfor (i = 0; i < src_len; i += 4) {\n\t\ta = b64reverse(src[i]);\n\t\tif (a >= 254) {\n\t\t\treturn i;\n\t\t}\n\n\t\tb = b64reverse(((i + 1) >= src_len) ? 0 : src[i + 1]);\n\t\tif (b >= 254) {\n\t\t\treturn i + 1;\n\t\t}\n\n\t\tc = b64reverse(((i + 2) >= src_len) ? 0 : src[i + 2]);\n\t\tif (c == 254) {\n\t\t\treturn i + 2;\n\t\t}\n\n\t\td = b64reverse(((i + 3) >= src_len) ? 0 : src[i + 3]);\n\t\tif (d == 254) {\n\t\t\treturn i + 3;\n\t\t}\n\n\t\tdst[(*dst_len)++] = (a << 2) + (b >> 4);\n\t\tif (c != 255) {\n\t\t\tdst[(*dst_len)++] = (b << 4) + (c >> 2);\n\t\t\tif (d != 255) {\n\t\t\t\tdst[(*dst_len)++] = (c << 6) + d;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\n#endif\n\n\nstatic int\nis_put_or_delete_method(const struct mg_connection *conn)\n{\n\tif (conn) {\n\t\tconst char *s = conn->request_info.request_method;\n\t\treturn s != NULL && (!strcmp(s, \"PUT\") || !strcmp(s, \"DELETE\")\n\t\t                     || !strcmp(s, \"MKCOL\") || !strcmp(s, \"PATCH\"));\n\t}\n\treturn 0;\n}\n\n\nstatic void\ninterpret_uri(struct mg_connection *conn,    /* in: request (must be valid) */\n              char *filename,                /* out: filename */\n              size_t filename_buf_len,       /* in: size of filename buffer */\n              struct mg_file_stat *filestat, /* out: file structure */\n              int *is_found,                 /* out: file found (directly) */\n              int *is_script_resource,       /* out: handled by a script? */\n              int *is_websocket_request,     /* out: websocket connetion? */\n              int *is_put_or_delete_request  /* out: put/delete a file? */\n              )\n{\n/* TODO (high): Restructure this function */\n\n#if !defined(NO_FILES)\n\tconst char *uri = conn->request_info.local_uri;\n\tconst char *root = conn->ctx->config[DOCUMENT_ROOT];\n\tconst char *rewrite;\n\tstruct vec a, b;\n\tint match_len;\n\tchar gz_path[PATH_MAX];\n\tchar const *accept_encoding;\n\tint truncated;\n#if !defined(NO_CGI) || defined(USE_LUA)\n\tchar *p;\n#endif\n#else\n\t(void)filename_buf_len; /* unused if NO_FILES is defined */\n#endif\n\n\tmemset(filestat, 0, sizeof(*filestat));\n\t*filename = 0;\n\t*is_found = 0;\n\t*is_script_resource = 0;\n\t*is_put_or_delete_request = is_put_or_delete_method(conn);\n\n#if defined(USE_WEBSOCKET)\n\t*is_websocket_request = is_websocket_protocol(conn);\n#if !defined(NO_FILES)\n\tif (*is_websocket_request && conn->ctx->config[WEBSOCKET_ROOT]) {\n\t\troot = conn->ctx->config[WEBSOCKET_ROOT];\n\t}\n#endif /* !NO_FILES */\n#else  /* USE_WEBSOCKET */\n\t*is_websocket_request = 0;\n#endif /* USE_WEBSOCKET */\n\n#if !defined(NO_FILES)\n\t/* Note that root == NULL is a regular use case here. This occurs,\n\t * if all requests are handled by callbacks, so the WEBSOCKET_ROOT\n\t * config is not required. */\n\tif (root == NULL) {\n\t\t/* all file related outputs have already been set to 0, just return\n\t\t */\n\t\treturn;\n\t}\n\n\t/* Using buf_len - 1 because memmove() for PATH_INFO may shift part\n\t * of the path one byte on the right.\n\t * If document_root is NULL, leave the file empty. */\n\tmg_snprintf(\n\t    conn, &truncated, filename, filename_buf_len - 1, \"%s%s\", root, uri);\n\n\tif (truncated) {\n\t\tgoto interpret_cleanup;\n\t}\n\n\trewrite = conn->ctx->config[REWRITE];\n\twhile ((rewrite = next_option(rewrite, &a, &b)) != NULL) {\n\t\tif ((match_len = match_prefix(a.ptr, a.len, uri)) > 0) {\n\t\t\tmg_snprintf(conn,\n\t\t\t            &truncated,\n\t\t\t            filename,\n\t\t\t            filename_buf_len - 1,\n\t\t\t            \"%.*s%s\",\n\t\t\t            (int)b.len,\n\t\t\t            b.ptr,\n\t\t\t            uri + match_len);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (truncated) {\n\t\tgoto interpret_cleanup;\n\t}\n\n\t/* Local file path and name, corresponding to requested URI\n\t * is now stored in \"filename\" variable. */\n\tif (mg_stat(conn, filename, filestat)) {\n#if !defined(NO_CGI) || defined(USE_LUA) || defined(USE_DUKTAPE)\n\t\t/* File exists. Check if it is a script type. */\n\t\tif (0\n#if !defined(NO_CGI)\n\t\t    || match_prefix(conn->ctx->config[CGI_EXTENSIONS],\n\t\t                    strlen(conn->ctx->config[CGI_EXTENSIONS]),\n\t\t                    filename) > 0\n#endif\n#if defined(USE_LUA)\n\t\t    || match_prefix(conn->ctx->config[LUA_SCRIPT_EXTENSIONS],\n\t\t                    strlen(conn->ctx->config[LUA_SCRIPT_EXTENSIONS]),\n\t\t                    filename) > 0\n#endif\n#if defined(USE_DUKTAPE)\n\t\t    || match_prefix(conn->ctx->config[DUKTAPE_SCRIPT_EXTENSIONS],\n\t\t                    strlen(\n\t\t                        conn->ctx->config[DUKTAPE_SCRIPT_EXTENSIONS]),\n\t\t                    filename) > 0\n#endif\n\t\t    ) {\n\t\t\t/* The request addresses a CGI script or a Lua script. The URI\n\t\t\t * corresponds to the script itself (like /path/script.cgi),\n\t\t\t * and there is no additional resource path\n\t\t\t * (like /path/script.cgi/something).\n\t\t\t * Requests that modify (replace or delete) a resource, like\n\t\t\t * PUT and DELETE requests, should replace/delete the script\n\t\t\t * file.\n\t\t\t * Requests that read or write from/to a resource, like GET and\n\t\t\t * POST requests, should call the script and return the\n\t\t\t * generated response. */\n\t\t\t*is_script_resource = !*is_put_or_delete_request;\n\t\t}\n#endif /* !defined(NO_CGI) || defined(USE_LUA) || defined(USE_DUKTAPE) */\n\t\t*is_found = 1;\n\t\treturn;\n\t}\n\n\t/* If we can't find the actual file, look for the file\n\t * with the same name but a .gz extension. If we find it,\n\t * use that and set the gzipped flag in the file struct\n\t * to indicate that the response need to have the content-\n\t * encoding: gzip header.\n\t * We can only do this if the browser declares support. */\n\tif ((accept_encoding = mg_get_header(conn, \"Accept-Encoding\")) != NULL) {\n\t\tif (strstr(accept_encoding, \"gzip\") != NULL) {\n\t\t\tmg_snprintf(\n\t\t\t    conn, &truncated, gz_path, sizeof(gz_path), \"%s.gz\", filename);\n\n\t\t\tif (truncated) {\n\t\t\t\tgoto interpret_cleanup;\n\t\t\t}\n\n\t\t\tif (mg_stat(conn, gz_path, filestat)) {\n\t\t\t\tif (filestat) {\n\t\t\t\t\tfilestat->is_gzipped = 1;\n\t\t\t\t\t*is_found = 1;\n\t\t\t\t}\n\t\t\t\t/* Currently gz files can not be scripts. */\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n#if !defined(NO_CGI) || defined(USE_LUA) || defined(USE_DUKTAPE)\n\t/* Support PATH_INFO for CGI scripts. */\n\tfor (p = filename + strlen(filename); p > filename + 1; p--) {\n\t\tif (*p == '/') {\n\t\t\t*p = '\\0';\n\t\t\tif ((0\n#if !defined(NO_CGI)\n\t\t\t     || match_prefix(conn->ctx->config[CGI_EXTENSIONS],\n\t\t\t                     strlen(conn->ctx->config[CGI_EXTENSIONS]),\n\t\t\t                     filename) > 0\n#endif\n#if defined(USE_LUA)\n\t\t\t     || match_prefix(conn->ctx->config[LUA_SCRIPT_EXTENSIONS],\n\t\t\t                     strlen(\n\t\t\t                         conn->ctx->config[LUA_SCRIPT_EXTENSIONS]),\n\t\t\t                     filename) > 0\n#endif\n#if defined(USE_DUKTAPE)\n\t\t\t     || match_prefix(\n\t\t\t            conn->ctx->config[DUKTAPE_SCRIPT_EXTENSIONS],\n\t\t\t            strlen(conn->ctx->config[DUKTAPE_SCRIPT_EXTENSIONS]),\n\t\t\t            filename) > 0\n#endif\n\t\t\t     ) && mg_stat(conn, filename, filestat)) {\n\t\t\t\t/* Shift PATH_INFO block one character right, e.g.\n\t\t\t\t * \"/x.cgi/foo/bar\\x00\" => \"/x.cgi\\x00/foo/bar\\x00\"\n\t\t\t\t * conn->path_info is pointing to the local variable \"path\"\n\t\t\t\t * declared in handle_request(), so PATH_INFO is not valid\n\t\t\t\t * after handle_request returns. */\n\t\t\t\tconn->path_info = p + 1;\n\t\t\t\tmemmove(p + 2, p + 1, strlen(p + 1) + 1); /* +1 is for\n\t\t\t\t                                           * trailing \\0 */\n\t\t\t\tp[1] = '/';\n\t\t\t\t*is_script_resource = 1;\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t*p = '/';\n\t\t\t}\n\t\t}\n\t}\n#endif /* !defined(NO_CGI) || defined(USE_LUA) || defined(USE_DUKTAPE) */\n#endif /* !defined(NO_FILES) */\n\treturn;\n\n#if !defined(NO_FILES)\n/* Reset all outputs */\ninterpret_cleanup:\n\tmemset(filestat, 0, sizeof(*filestat));\n\t*filename = 0;\n\t*is_found = 0;\n\t*is_script_resource = 0;\n\t*is_websocket_request = 0;\n\t*is_put_or_delete_request = 0;\n#endif /* !defined(NO_FILES) */\n}\n\n\n/* Check whether full request is buffered. Return:\n * -1  if request is malformed\n *  0  if request is not yet fully buffered\n * >0  actual request length, including last \\r\\n\\r\\n */\nstatic int\nget_request_len(const char *buf, int buflen)\n{\n\tconst char *s, *e;\n\tint len = 0;\n\n\tfor (s = buf, e = s + buflen - 1; len <= 0 && s < e; s++)\n\t\t/* Control characters are not allowed but >=128 is. */\n\t\tif (!isprint(*(const unsigned char *)s) && *s != '\\r' && *s != '\\n'\n\t\t    && *(const unsigned char *)s < 128) {\n\t\t\tlen = -1;\n\t\t\tbreak; /* [i_a] abort scan as soon as one malformed character is\n\t\t\t        * found; */\n\t\t\t/* don't let subsequent \\r\\n\\r\\n win us over anyhow */\n\t\t} else if (s[0] == '\\n' && s[1] == '\\n') {\n\t\t\tlen = (int)(s - buf) + 2;\n\t\t} else if (s[0] == '\\n' && &s[1] < e && s[1] == '\\r' && s[2] == '\\n') {\n\t\t\tlen = (int)(s - buf) + 3;\n\t\t}\n\n\treturn len;\n}\n\n\n#if !defined(NO_CACHING)\n/* Convert month to the month number. Return -1 on error, or month number */\nstatic int\nget_month_index(const char *s)\n{\n\tsize_t i;\n\n\tfor (i = 0; i < ARRAY_SIZE(month_names); i++) {\n\t\tif (!strcmp(s, month_names[i])) {\n\t\t\treturn (int)i;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\n\n/* Parse UTC date-time string, and return the corresponding time_t value. */\nstatic time_t\nparse_date_string(const char *datetime)\n{\n\tchar month_str[32] = {0};\n\tint second, minute, hour, day, month, year;\n\ttime_t result = (time_t)0;\n\tstruct tm tm;\n\n\tif ((sscanf(datetime,\n\t            \"%d/%3s/%d %d:%d:%d\",\n\t            &day,\n\t            month_str,\n\t            &year,\n\t            &hour,\n\t            &minute,\n\t            &second) == 6) || (sscanf(datetime,\n\t                                      \"%d %3s %d %d:%d:%d\",\n\t                                      &day,\n\t                                      month_str,\n\t                                      &year,\n\t                                      &hour,\n\t                                      &minute,\n\t                                      &second) == 6)\n\t    || (sscanf(datetime,\n\t               \"%*3s, %d %3s %d %d:%d:%d\",\n\t               &day,\n\t               month_str,\n\t               &year,\n\t               &hour,\n\t               &minute,\n\t               &second) == 6) || (sscanf(datetime,\n\t                                         \"%d-%3s-%d %d:%d:%d\",\n\t                                         &day,\n\t                                         month_str,\n\t                                         &year,\n\t                                         &hour,\n\t                                         &minute,\n\t                                         &second) == 6)) {\n\t\tmonth = get_month_index(month_str);\n\t\tif ((month >= 0) && (year >= 1970)) {\n\t\t\tmemset(&tm, 0, sizeof(tm));\n\t\t\ttm.tm_year = year - 1900;\n\t\t\ttm.tm_mon = month;\n\t\t\ttm.tm_mday = day;\n\t\t\ttm.tm_hour = hour;\n\t\t\ttm.tm_min = minute;\n\t\t\ttm.tm_sec = second;\n\t\t\tresult = timegm(&tm);\n\t\t}\n\t}\n\n\treturn result;\n}\n#endif /* !NO_CACHING */\n\n\n/* Protect against directory disclosure attack by removing '..',\n * excessive '/' and '\\' characters */\nstatic void\nremove_double_dots_and_double_slashes(char *s)\n{\n\tchar *p = s;\n\n\twhile ((s[0] == '.') && (s[1] == '.')) {\n\t\ts++;\n\t}\n\n\twhile (*s != '\\0') {\n\t\t*p++ = *s++;\n\t\tif (s[-1] == '/' || s[-1] == '\\\\') {\n\t\t\t/* Skip all following slashes, backslashes and double-dots */\n\t\t\twhile (s[0] != '\\0') {\n\t\t\t\tif (s[0] == '/' || s[0] == '\\\\') {\n\t\t\t\t\ts++;\n\t\t\t\t} else if (s[0] == '.' && s[1] == '.') {\n\t\t\t\t\ts += 2;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t*p = '\\0';\n}\n\n\nstatic const struct {\n\tconst char *extension;\n\tsize_t ext_len;\n\tconst char *mime_type;\n} builtin_mime_types[] = {\n    /* IANA registered MIME types (http://www.iana.org/assignments/media-types)\n     * application types */\n    {\".doc\", 4, \"application/msword\"},\n    {\".eps\", 4, \"application/postscript\"},\n    {\".exe\", 4, \"application/octet-stream\"},\n    {\".js\", 3, \"application/javascript\"},\n    {\".json\", 5, \"application/json\"},\n    {\".pdf\", 4, \"application/pdf\"},\n    {\".ps\", 3, \"application/postscript\"},\n    {\".rtf\", 4, \"application/rtf\"},\n    {\".xhtml\", 6, \"application/xhtml+xml\"},\n    {\".xsl\", 4, \"application/xml\"},\n    {\".xslt\", 5, \"application/xml\"},\n\n    /* fonts */\n    {\".ttf\", 4, \"application/font-sfnt\"},\n    {\".cff\", 4, \"application/font-sfnt\"},\n    {\".otf\", 4, \"application/font-sfnt\"},\n    {\".aat\", 4, \"application/font-sfnt\"},\n    {\".sil\", 4, \"application/font-sfnt\"},\n    {\".pfr\", 4, \"application/font-tdpfr\"},\n    {\".woff\", 5, \"application/font-woff\"},\n\n    /* audio */\n    {\".mp3\", 4, \"audio/mpeg\"},\n    {\".oga\", 4, \"audio/ogg\"},\n    {\".ogg\", 4, \"audio/ogg\"},\n\n    /* image */\n    {\".gif\", 4, \"image/gif\"},\n    {\".ief\", 4, \"image/ief\"},\n    {\".jpeg\", 5, \"image/jpeg\"},\n    {\".jpg\", 4, \"image/jpeg\"},\n    {\".jpm\", 4, \"image/jpm\"},\n    {\".jpx\", 4, \"image/jpx\"},\n    {\".png\", 4, \"image/png\"},\n    {\".svg\", 4, \"image/svg+xml\"},\n    {\".tif\", 4, \"image/tiff\"},\n    {\".tiff\", 5, \"image/tiff\"},\n\n    /* model */\n    {\".wrl\", 4, \"model/vrml\"},\n\n    /* text */\n    {\".css\", 4, \"text/css\"},\n    {\".csv\", 4, \"text/csv\"},\n    {\".htm\", 4, \"text/html\"},\n    {\".html\", 5, \"text/html\"},\n    {\".sgm\", 4, \"text/sgml\"},\n    {\".shtm\", 5, \"text/html\"},\n    {\".shtml\", 6, \"text/html\"},\n    {\".txt\", 4, \"text/plain\"},\n    {\".xml\", 4, \"text/xml\"},\n\n    /* video */\n    {\".mov\", 4, \"video/quicktime\"},\n    {\".mp4\", 4, \"video/mp4\"},\n    {\".mpeg\", 5, \"video/mpeg\"},\n    {\".mpg\", 4, \"video/mpeg\"},\n    {\".ogv\", 4, \"video/ogg\"},\n    {\".qt\", 3, \"video/quicktime\"},\n\n    /* not registered types\n     * (http://reference.sitepoint.com/html/mime-types-full,\n     * http://www.hansenb.pdx.edu/DMKB/dict/tutorials/mime_typ.php, ..) */\n    {\".arj\", 4, \"application/x-arj-compressed\"},\n    {\".gz\", 3, \"application/x-gunzip\"},\n    {\".rar\", 4, \"application/x-arj-compressed\"},\n    {\".swf\", 4, \"application/x-shockwave-flash\"},\n    {\".tar\", 4, \"application/x-tar\"},\n    {\".tgz\", 4, \"application/x-tar-gz\"},\n    {\".torrent\", 8, \"application/x-bittorrent\"},\n    {\".ppt\", 4, \"application/x-mspowerpoint\"},\n    {\".xls\", 4, \"application/x-msexcel\"},\n    {\".zip\", 4, \"application/x-zip-compressed\"},\n    {\".aac\",\n     4,\n     \"audio/aac\"}, /* http://en.wikipedia.org/wiki/Advanced_Audio_Coding */\n    {\".aif\", 4, \"audio/x-aif\"},\n    {\".m3u\", 4, \"audio/x-mpegurl\"},\n    {\".mid\", 4, \"audio/x-midi\"},\n    {\".ra\", 3, \"audio/x-pn-realaudio\"},\n    {\".ram\", 4, \"audio/x-pn-realaudio\"},\n    {\".wav\", 4, \"audio/x-wav\"},\n    {\".bmp\", 4, \"image/bmp\"},\n    {\".ico\", 4, \"image/x-icon\"},\n    {\".pct\", 4, \"image/x-pct\"},\n    {\".pict\", 5, \"image/pict\"},\n    {\".rgb\", 4, \"image/x-rgb\"},\n    {\".webm\", 5, \"video/webm\"}, /* http://en.wikipedia.org/wiki/WebM */\n    {\".asf\", 4, \"video/x-ms-asf\"},\n    {\".avi\", 4, \"video/x-msvideo\"},\n    {\".m4v\", 4, \"video/x-m4v\"},\n    {NULL, 0, NULL}};\n\n\nconst char *\nmg_get_builtin_mime_type(const char *path)\n{\n\tconst char *ext;\n\tsize_t i, path_len;\n\n\tpath_len = strlen(path);\n\n\tfor (i = 0; builtin_mime_types[i].extension != NULL; i++) {\n\t\text = path + (path_len - builtin_mime_types[i].ext_len);\n\t\tif (path_len > builtin_mime_types[i].ext_len\n\t\t    && mg_strcasecmp(ext, builtin_mime_types[i].extension) == 0) {\n\t\t\treturn builtin_mime_types[i].mime_type;\n\t\t}\n\t}\n\n\treturn \"text/plain\";\n}\n\n\n/* Look at the \"path\" extension and figure what mime type it has.\n * Store mime type in the vector. */\nstatic void\nget_mime_type(struct mg_context *ctx, const char *path, struct vec *vec)\n{\n\tstruct vec ext_vec, mime_vec;\n\tconst char *list, *ext;\n\tsize_t path_len;\n\n\tpath_len = strlen(path);\n\n\tif (ctx == NULL || vec == NULL) {\n\t\treturn;\n\t}\n\n\t/* Scan user-defined mime types first, in case user wants to\n\t * override default mime types. */\n\tlist = ctx->config[EXTRA_MIME_TYPES];\n\twhile ((list = next_option(list, &ext_vec, &mime_vec)) != NULL) {\n\t\t/* ext now points to the path suffix */\n\t\text = path + path_len - ext_vec.len;\n\t\tif (mg_strncasecmp(ext, ext_vec.ptr, ext_vec.len) == 0) {\n\t\t\t*vec = mime_vec;\n\t\t\treturn;\n\t\t}\n\t}\n\n\tvec->ptr = mg_get_builtin_mime_type(path);\n\tvec->len = strlen(vec->ptr);\n}\n\n\n/* Stringify binary data. Output buffer must be twice as big as input,\n * because each byte takes 2 bytes in string representation */\nstatic void\nbin2str(char *to, const unsigned char *p, size_t len)\n{\n\tstatic const char *hex = \"0123456789abcdef\";\n\n\tfor (; len--; p++) {\n\t\t*to++ = hex[p[0] >> 4];\n\t\t*to++ = hex[p[0] & 0x0f];\n\t}\n\t*to = '\\0';\n}\n\n\n/* Return stringified MD5 hash for list of strings. Buffer must be 33 bytes. */\nchar *\nmg_md5(char buf[33], ...)\n{\n\tmd5_byte_t hash[16];\n\tconst char *p;\n\tva_list ap;\n\tmd5_state_t ctx;\n\n\tmd5_init(&ctx);\n\n\tva_start(ap, buf);\n\twhile ((p = va_arg(ap, const char *)) != NULL) {\n\t\tmd5_append(&ctx, (const md5_byte_t *)p, strlen(p));\n\t}\n\tva_end(ap);\n\n\tmd5_finish(&ctx, hash);\n\tbin2str(buf, hash, sizeof(hash));\n\treturn buf;\n}\n\n\n/* Check the user's password, return 1 if OK */\nstatic int\ncheck_password(const char *method,\n               const char *ha1,\n               const char *uri,\n               const char *nonce,\n               const char *nc,\n               const char *cnonce,\n               const char *qop,\n               const char *response)\n{\n\tchar ha2[32 + 1], expected_response[32 + 1];\n\n\t/* Some of the parameters may be NULL */\n\tif (method == NULL || nonce == NULL || nc == NULL || cnonce == NULL\n\t    || qop == NULL\n\t    || response == NULL) {\n\t\treturn 0;\n\t}\n\n\t/* NOTE(lsm): due to a bug in MSIE, we do not compare the URI */\n\tif (strlen(response) != 32) {\n\t\treturn 0;\n\t}\n\n\tmg_md5(ha2, method, \":\", uri, NULL);\n\tmg_md5(expected_response,\n\t       ha1,\n\t       \":\",\n\t       nonce,\n\t       \":\",\n\t       nc,\n\t       \":\",\n\t       cnonce,\n\t       \":\",\n\t       qop,\n\t       \":\",\n\t       ha2,\n\t       NULL);\n\n\treturn mg_strcasecmp(response, expected_response) == 0;\n}\n\n\n/* Use the global passwords file, if specified by auth_gpass option,\n * or search for .htpasswd in the requested directory. */\nstatic void\nopen_auth_file(struct mg_connection *conn,\n               const char *path,\n               struct mg_file *filep)\n{\n\tif (conn != NULL && conn->ctx != NULL) {\n\t\tchar name[PATH_MAX];\n\t\tconst char *p, *e, *gpass = conn->ctx->config[GLOBAL_PASSWORDS_FILE];\n\t\tint truncated;\n\n\t\tif (gpass != NULL) {\n\t\t\t/* Use global passwords file */\n\t\t\tif (!mg_fopen(conn, gpass, MG_FOPEN_MODE_READ, filep)) {\n#ifdef DEBUG\n\t\t\t\tmg_cry(conn, \"fopen(%s): %s\", gpass, strerror(ERRNO));\n#endif\n\t\t\t}\n\t\t\t/* Important: using local struct mg_file to test path for\n\t\t\t * is_directory\n\t\t\t * flag. If filep is used, mg_stat() makes it appear as if auth file\n\t\t\t * was opened. TODO: mg_stat must not make anything appear to be\n\t\t\t * opened */\n\t\t} else if (mg_stat(conn, path, &filep->stat)\n\t\t           && filep->stat.is_directory) {\n\t\t\tmg_snprintf(conn,\n\t\t\t            &truncated,\n\t\t\t            name,\n\t\t\t            sizeof(name),\n\t\t\t            \"%s/%s\",\n\t\t\t            path,\n\t\t\t            PASSWORDS_FILE_NAME);\n\n\t\t\tif (truncated || !mg_fopen(conn, name, MG_FOPEN_MODE_READ, filep)) {\n#ifdef DEBUG\n\t\t\t\tmg_cry(conn, \"fopen(%s): %s\", name, strerror(ERRNO));\n#endif\n\t\t\t}\n\t\t} else {\n\t\t\t/* Try to find .htpasswd in requested directory. */\n\t\t\tfor (p = path, e = p + strlen(p) - 1; e > p; e--) {\n\t\t\t\tif (e[0] == '/') {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmg_snprintf(conn,\n\t\t\t            &truncated,\n\t\t\t            name,\n\t\t\t            sizeof(name),\n\t\t\t            \"%.*s/%s\",\n\t\t\t            (int)(e - p),\n\t\t\t            p,\n\t\t\t            PASSWORDS_FILE_NAME);\n\n\t\t\tif (truncated || !mg_fopen(conn, name, MG_FOPEN_MODE_READ, filep)) {\n#ifdef DEBUG\n\t\t\t\tmg_cry(conn, \"fopen(%s): %s\", name, strerror(ERRNO));\n#endif\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/* Parsed Authorization header */\nstruct ah {\n\tchar *user, *uri, *cnonce, *response, *qop, *nc, *nonce;\n};\n\n\n/* Return 1 on success. Always initializes the ah structure. */\nstatic int\nparse_auth_header(struct mg_connection *conn,\n                  char *buf,\n                  size_t buf_size,\n                  struct ah *ah)\n{\n\tchar *name, *value, *s;\n\tconst char *auth_header;\n\tuint64_t nonce;\n\n\tif (!ah || !conn) {\n\t\treturn 0;\n\t}\n\n\t(void)memset(ah, 0, sizeof(*ah));\n\tif ((auth_header = mg_get_header(conn, \"Authorization\")) == NULL\n\t    || mg_strncasecmp(auth_header, \"Digest \", 7) != 0) {\n\t\treturn 0;\n\t}\n\n\t/* Make modifiable copy of the auth header */\n\t(void)mg_strlcpy(buf, auth_header + 7, buf_size);\n\ts = buf;\n\n\t/* Parse authorization header */\n\tfor (;;) {\n\t\t/* Gobble initial spaces */\n\t\twhile (isspace(*(unsigned char *)s)) {\n\t\t\ts++;\n\t\t}\n\t\tname = skip_quoted(&s, \"=\", \" \", 0);\n\t\t/* Value is either quote-delimited, or ends at first comma or space. */\n\t\tif (s[0] == '\\\"') {\n\t\t\ts++;\n\t\t\tvalue = skip_quoted(&s, \"\\\"\", \" \", '\\\\');\n\t\t\tif (s[0] == ',') {\n\t\t\t\ts++;\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = skip_quoted(&s, \", \", \" \", 0); /* IE uses commas, FF uses\n\t\t\t                                        * spaces */\n\t\t}\n\t\tif (*name == '\\0') {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (!strcmp(name, \"username\")) {\n\t\t\tah->user = value;\n\t\t} else if (!strcmp(name, \"cnonce\")) {\n\t\t\tah->cnonce = value;\n\t\t} else if (!strcmp(name, \"response\")) {\n\t\t\tah->response = value;\n\t\t} else if (!strcmp(name, \"uri\")) {\n\t\t\tah->uri = value;\n\t\t} else if (!strcmp(name, \"qop\")) {\n\t\t\tah->qop = value;\n\t\t} else if (!strcmp(name, \"nc\")) {\n\t\t\tah->nc = value;\n\t\t} else if (!strcmp(name, \"nonce\")) {\n\t\t\tah->nonce = value;\n\t\t}\n\t}\n\n#ifndef NO_NONCE_CHECK\n\t/* Read the nonce from the response. */\n\tif (ah->nonce == NULL) {\n\t\treturn 0;\n\t}\n\ts = NULL;\n\tnonce = strtoull(ah->nonce, &s, 10);\n\tif ((s == NULL) || (*s != 0)) {\n\t\treturn 0;\n\t}\n\n\t/* Convert the nonce from the client to a number. */\n\tnonce ^= conn->ctx->auth_nonce_mask;\n\n\t/* The converted number corresponds to the time the nounce has been\n\t * created. This should not be earlier than the server start. */\n\t/* Server side nonce check is valuable in all situations but one:\n\t * if the server restarts frequently, but the client should not see\n\t * that, so the server should accept nonces from previous starts. */\n\t/* However, the reasonable default is to not accept a nonce from a\n\t * previous start, so if anyone changed the access rights between\n\t * two restarts, a new login is required. */\n\tif (nonce < (uint64_t)conn->ctx->start_time) {\n\t\t/* nonce is from a previous start of the server and no longer valid\n\t\t * (replay attack?) */\n\t\treturn 0;\n\t}\n\t/* Check if the nonce is too high, so it has not (yet) been used by the\n\t * server. */\n\tif (nonce >= ((uint64_t)conn->ctx->start_time + conn->ctx->nonce_count)) {\n\t\treturn 0;\n\t}\n#else\n\t(void)nonce;\n#endif\n\n\t/* CGI needs it as REMOTE_USER */\n\tif (ah->user != NULL) {\n\t\tconn->request_info.remote_user = mg_strdup(ah->user);\n\t} else {\n\t\treturn 0;\n\t}\n\n\treturn 1;\n}\n\n\nstatic const char *\nmg_fgets(char *buf, size_t size, struct mg_file *filep, char **p)\n{\n\tconst char *eof;\n\tsize_t len;\n\tconst char *memend;\n\n\tif (!filep) {\n\t\treturn NULL;\n\t}\n\n\tif (filep->access.membuf != NULL && *p != NULL) {\n\t\tmemend = (const char *)&filep->access.membuf[filep->stat.size];\n\t\t/* Search for \\n from p till the end of stream */\n\t\teof = (char *)memchr(*p, '\\n', (size_t)(memend - *p));\n\t\tif (eof != NULL) {\n\t\t\teof += 1; /* Include \\n */\n\t\t} else {\n\t\t\teof = memend; /* Copy remaining data */\n\t\t}\n\t\tlen =\n\t\t    ((size_t)(eof - *p) > (size - 1)) ? (size - 1) : (size_t)(eof - *p);\n\t\tmemcpy(buf, *p, len);\n\t\tbuf[len] = '\\0';\n\t\t*p += len;\n\t\treturn len ? eof : NULL;\n\t} else if (filep->access.fp != NULL) {\n\t\treturn fgets(buf, (int)size, filep->access.fp);\n\t} else {\n\t\treturn NULL;\n\t}\n}\n\n/* Define the initial recursion depth for procesesing htpasswd files that include other htpasswd \n * (or even the same) files.  It is not difficult to provide a file or files s.t. they force civetweb\n * to infinitely recurse and then crash.\n */\n#define INITIAL_DEPTH 9\n#if INITIAL_DEPTH <= 0\n#error Bad INITIAL_DEPTH for recursion, set to at least 1\n#endif\n\nstruct read_auth_file_struct {\n\tstruct mg_connection *conn;\n\tstruct ah ah;\n\tchar *domain;\n\tchar buf[256 + 256 + 40];\n\tchar *f_user;\n\tchar *f_domain;\n\tchar *f_ha1;\n};\n\n\nstatic int\nread_auth_file(struct mg_file *filep, struct read_auth_file_struct *workdata, int depth)\n{\n\tchar *p;\n\tint is_authorized = 0;\n\tstruct mg_file fp;\n\tsize_t l;\n\n\tif (!filep || !workdata || 0 == depth) {\n\t\treturn 0;\n\t}\n\n\t/* Loop over passwords file */\n\tp = (char *)filep->access.membuf;\n\twhile (mg_fgets(workdata->buf, sizeof(workdata->buf), filep, &p) != NULL) {\n\t\tl = strlen(workdata->buf);\n\t\twhile (l > 0) {\n\t\t\tif (isspace(workdata->buf[l - 1])\n\t\t\t    || iscntrl(workdata->buf[l - 1])) {\n\t\t\t\tl--;\n\t\t\t\tworkdata->buf[l] = 0;\n\t\t\t} else\n\t\t\t\tbreak;\n\t\t}\n\t\tif (l < 1) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tworkdata->f_user = workdata->buf;\n\n\t\tif (workdata->f_user[0] == ':') {\n\t\t\t/* user names may not contain a ':' and may not be empty,\n\t\t\t * so lines starting with ':' may be used for a special purpose */\n\t\t\tif (workdata->f_user[1] == '#') {\n\t\t\t\t/* :# is a comment */\n\t\t\t\tcontinue;\n\t\t\t} else if (!strncmp(workdata->f_user + 1, \"include=\", 8)) {\n\t\t\t\tif (mg_fopen(workdata->conn,\n\t\t\t\t             workdata->f_user + 9,\n\t\t\t\t             MG_FOPEN_MODE_READ,\n\t\t\t\t             &fp)) {\n\t\t\t\t\tis_authorized = read_auth_file(&fp, workdata, depth - 1);\n\t\t\t\t\t(void)mg_fclose(\n\t\t\t\t\t    &fp.access); /* ignore error on read only file */\n\t\t\t\t\t\n\t\t\t\t\t/* No need to continue processing files once we have a match, since nothing will reset it back\n\t\t\t\t\t * to 0.\n\t\t\t\t\t */\n\t\t\t\t\tif (is_authorized) {\n\t\t\t\t\t\treturn is_authorized;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmg_cry(workdata->conn,\n\t\t\t\t\t       \"%s: cannot open authorization file: %s\",\n\t\t\t\t\t       __func__,\n\t\t\t\t\t       workdata->buf);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t/* everything is invalid for the moment (might change in the\n\t\t\t * future) */\n\t\t\tmg_cry(workdata->conn,\n\t\t\t       \"%s: syntax error in authorization file: %s\",\n\t\t\t       __func__,\n\t\t\t       workdata->buf);\n\t\t\tcontinue;\n\t\t}\n\n\t\tworkdata->f_domain = strchr(workdata->f_user, ':');\n\t\tif (workdata->f_domain == NULL) {\n\t\t\tmg_cry(workdata->conn,\n\t\t\t       \"%s: syntax error in authorization file: %s\",\n\t\t\t       __func__,\n\t\t\t       workdata->buf);\n\t\t\tcontinue;\n\t\t}\n\t\t*(workdata->f_domain) = 0;\n\t\t(workdata->f_domain)++;\n\n\t\tworkdata->f_ha1 = strchr(workdata->f_domain, ':');\n\t\tif (workdata->f_ha1 == NULL) {\n\t\t\tmg_cry(workdata->conn,\n\t\t\t       \"%s: syntax error in authorization file: %s\",\n\t\t\t       __func__,\n\t\t\t       workdata->buf);\n\t\t\tcontinue;\n\t\t}\n\t\t*(workdata->f_ha1) = 0;\n\t\t(workdata->f_ha1)++;\n\n\t\tif (!strcmp(workdata->ah.user, workdata->f_user)\n\t\t    && !strcmp(workdata->domain, workdata->f_domain)) {\n\t\t\treturn check_password(workdata->conn->request_info.request_method,\n\t\t\t                      workdata->f_ha1,\n\t\t\t                      workdata->ah.uri,\n\t\t\t                      workdata->ah.nonce,\n\t\t\t                      workdata->ah.nc,\n\t\t\t                      workdata->ah.cnonce,\n\t\t\t                      workdata->ah.qop,\n\t\t\t                      workdata->ah.response);\n\t\t}\n\t}\n\n\treturn is_authorized;\n}\n\n\n/* Authorize against the opened passwords file. Return 1 if authorized. */\nstatic int\nauthorize(struct mg_connection *conn, struct mg_file *filep)\n{\n\tstruct read_auth_file_struct workdata;\n\tchar buf[MG_BUF_LEN];\n\n\tif (!conn || !conn->ctx) {\n\t\treturn 0;\n\t}\n\n\tmemset(&workdata, 0, sizeof(workdata));\n\tworkdata.conn = conn;\n\n\tif (!parse_auth_header(conn, buf, sizeof(buf), &workdata.ah)) {\n\t\treturn 0;\n\t}\n\tworkdata.domain = conn->ctx->config[AUTHENTICATION_DOMAIN];\n\n\treturn read_auth_file(filep, &workdata, INITIAL_DEPTH);\n}\n\n\n/* Return 1 if request is authorised, 0 otherwise. */\nstatic int\ncheck_authorization(struct mg_connection *conn, const char *path)\n{\n\tchar fname[PATH_MAX];\n\tstruct vec uri_vec, filename_vec;\n\tconst char *list;\n\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\tint authorized = 1, truncated;\n\n\tif (!conn || !conn->ctx) {\n\t\treturn 0;\n\t}\n\n\tlist = conn->ctx->config[PROTECT_URI];\n\twhile ((list = next_option(list, &uri_vec, &filename_vec)) != NULL) {\n\t\tif (!memcmp(conn->request_info.local_uri, uri_vec.ptr, uri_vec.len)) {\n\t\t\tmg_snprintf(conn,\n\t\t\t            &truncated,\n\t\t\t            fname,\n\t\t\t            sizeof(fname),\n\t\t\t            \"%.*s\",\n\t\t\t            (int)filename_vec.len,\n\t\t\t            filename_vec.ptr);\n\n\t\t\tif (truncated\n\t\t\t    || !mg_fopen(conn, fname, MG_FOPEN_MODE_READ, &file)) {\n\t\t\t\tmg_cry(conn,\n\t\t\t\t       \"%s: cannot open %s: %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       fname,\n\t\t\t\t       strerror(errno));\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!is_file_opened(&file.access)) {\n\t\topen_auth_file(conn, path, &file);\n\t}\n\n\tif (is_file_opened(&file.access)) {\n\t\tauthorized = authorize(conn, &file);\n\t\t(void)mg_fclose(&file.access); /* ignore error on read only file */\n\t}\n\n\treturn authorized;\n}\n\n\nstatic void\nsend_authorization_request(struct mg_connection *conn)\n{\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\n\tif (conn && conn->ctx) {\n\t\tuint64_t nonce = (uint64_t)(conn->ctx->start_time);\n\n\t\t(void)pthread_mutex_lock(&conn->ctx->nonce_mutex);\n\t\tnonce += conn->ctx->nonce_count;\n\t\t++conn->ctx->nonce_count;\n\t\t(void)pthread_mutex_unlock(&conn->ctx->nonce_mutex);\n\n\t\tnonce ^= conn->ctx->auth_nonce_mask;\n\t\tconn->status_code = 401;\n\t\tconn->must_close = 1;\n\n\t\tgmt_time_string(date, sizeof(date), &curtime);\n\n\t\tmg_printf(conn, \"HTTP/1.1 401 Unauthorized\\r\\n\");\n\t\tsend_no_cache_header(conn);\n\t\tmg_printf(conn,\n\t\t          \"Date: %s\\r\\n\"\n\t\t          \"Connection: %s\\r\\n\"\n\t\t          \"Content-Length: 0\\r\\n\"\n\t\t          \"WWW-Authenticate: Digest qop=\\\"auth\\\", realm=\\\"%s\\\", \"\n\t\t          \"nonce=\\\"%\" UINT64_FMT \"\\\"\\r\\n\\r\\n\",\n\t\t          date,\n\t\t          suggest_connection_header(conn),\n\t\t          conn->ctx->config[AUTHENTICATION_DOMAIN],\n\t\t          nonce);\n\t}\n}\n\n\n#if !defined(NO_FILES)\nstatic int\nis_authorized_for_put(struct mg_connection *conn)\n{\n\tif (conn) {\n\t\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\t\tconst char *passfile = conn->ctx->config[PUT_DELETE_PASSWORDS_FILE];\n\t\tint ret = 0;\n\n\t\tif (passfile != NULL\n\t\t    && mg_fopen(conn, passfile, MG_FOPEN_MODE_READ, &file)) {\n\t\t\tret = authorize(conn, &file);\n\t\t\t(void)mg_fclose(&file.access); /* ignore error on read only file */\n\t\t}\n\n\t\treturn ret;\n\t}\n\treturn 0;\n}\n#endif\n\n\nint\nmg_modify_passwords_file(const char *fname,\n                         const char *domain,\n                         const char *user,\n                         const char *pass)\n{\n\tint found, i;\n\tchar line[512], u[512] = \"\", d[512] = \"\", ha1[33], tmp[PATH_MAX + 8];\n\tFILE *fp, *fp2;\n\n\tfound = 0;\n\tfp = fp2 = NULL;\n\n\t/* Regard empty password as no password - remove user record. */\n\tif (pass != NULL && pass[0] == '\\0') {\n\t\tpass = NULL;\n\t}\n\n\t/* Other arguments must not be empty */\n\tif (fname == NULL || domain == NULL || user == NULL) {\n\t\treturn 0;\n\t}\n\n\t/* Using the given file format, user name and domain must not contain ':'\n\t */\n\tif (strchr(user, ':') != NULL) {\n\t\treturn 0;\n\t}\n\tif (strchr(domain, ':') != NULL) {\n\t\treturn 0;\n\t}\n\n\t/* Do not allow control characters like newline in user name and domain.\n\t * Do not allow excessively long names either. */\n\tfor (i = 0; i < 255 && user[i] != 0; i++) {\n\t\tif (iscntrl(user[i])) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\tif (user[i]) {\n\t\treturn 0;\n\t}\n\tfor (i = 0; i < 255 && domain[i] != 0; i++) {\n\t\tif (iscntrl(domain[i])) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\tif (domain[i]) {\n\t\treturn 0;\n\t}\n\n\t/* The maximum length of the path to the password file is limited */\n\tif ((strlen(fname) + 4) >= PATH_MAX) {\n\t\treturn 0;\n\t}\n\n\t/* Create a temporary file name. Length has been checked before. */\n\tstrcpy(tmp, fname);\n\tstrcat(tmp, \".tmp\");\n\n\t/* Create the file if does not exist */\n\t/* Use of fopen here is OK, since fname is only ASCII */\n\tif ((fp = fopen(fname, \"a+\")) != NULL) {\n\t\t(void)fclose(fp);\n\t}\n\n\t/* Open the given file and temporary file */\n\tif ((fp = fopen(fname, \"r\")) == NULL) {\n\t\treturn 0;\n\t} else if ((fp2 = fopen(tmp, \"w+\")) == NULL) {\n\t\tfclose(fp);\n\t\treturn 0;\n\t}\n\n\t/* Copy the stuff to temporary file */\n\twhile (fgets(line, sizeof(line), fp) != NULL) {\n\t\tif (sscanf(line, \"%255[^:]:%255[^:]:%*s\", u, d) != 2) {\n\t\t\tcontinue;\n\t\t}\n\t\tu[255] = 0;\n\t\td[255] = 0;\n\n\t\tif (!strcmp(u, user) && !strcmp(d, domain)) {\n\t\t\tfound++;\n\t\t\tif (pass != NULL) {\n\t\t\t\tmg_md5(ha1, user, \":\", domain, \":\", pass, NULL);\n\t\t\t\tfprintf(fp2, \"%s:%s:%s\\n\", user, domain, ha1);\n\t\t\t}\n\t\t} else {\n\t\t\tfprintf(fp2, \"%s\", line);\n\t\t}\n\t}\n\n\t/* If new user, just add it */\n\tif (!found && pass != NULL) {\n\t\tmg_md5(ha1, user, \":\", domain, \":\", pass, NULL);\n\t\tfprintf(fp2, \"%s:%s:%s\\n\", user, domain, ha1);\n\t}\n\n\t/* Close files */\n\tfclose(fp);\n\tfclose(fp2);\n\n\t/* Put the temp file in place of real file */\n\tIGNORE_UNUSED_RESULT(remove(fname));\n\tIGNORE_UNUSED_RESULT(rename(tmp, fname));\n\n\treturn 1;\n}\n\n\nstatic int\nis_valid_port(unsigned long port)\n{\n\treturn port < 0xffff;\n}\n\n\nstatic int\nmg_inet_pton(int af, const char *src, void *dst, size_t dstlen)\n{\n\tstruct addrinfo hints, *res, *ressave;\n\tint func_ret = 0;\n\tint gai_ret;\n\n\tmemset(&hints, 0, sizeof(struct addrinfo));\n\thints.ai_family = af;\n\n\tgai_ret = getaddrinfo(src, NULL, &hints, &res);\n\tif (gai_ret != 0) {\n\t\t/* gai_strerror could be used to convert gai_ret to a string */\n\t\t/* POSIX return values: see\n\t\t * http://pubs.opengroup.org/onlinepubs/9699919799/functions/freeaddrinfo.html\n\t\t */\n\t\t/* Windows return values: see\n\t\t * https://msdn.microsoft.com/en-us/library/windows/desktop/ms738520%28v=vs.85%29.aspx\n\t\t */\n\t\treturn 0;\n\t}\n\n\tressave = res;\n\n\twhile (res) {\n\t\tif (dstlen >= res->ai_addrlen) {\n\t\t\tmemcpy(dst, res->ai_addr, res->ai_addrlen);\n\t\t\tfunc_ret = 1;\n\t\t}\n\t\tres = res->ai_next;\n\t}\n\n\tfreeaddrinfo(ressave);\n\treturn func_ret;\n}\n\n\nstatic int\nconnect_socket(struct mg_context *ctx /* may be NULL */,\n               const char *host,\n               int port,\n               int use_ssl,\n               char *ebuf,\n               size_t ebuf_len,\n               SOCKET *sock /* output: socket, must not be NULL */,\n               union usa *sa /* output: socket address, must not be NULL  */\n               )\n{\n\tint ip_ver = 0;\n\t*sock = INVALID_SOCKET;\n\tmemset(sa, 0, sizeof(*sa));\n\n\tif (ebuf_len > 0) {\n\t\t*ebuf = 0;\n\t}\n\n\tif (host == NULL) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"NULL host\");\n\t\treturn 0;\n\t}\n\n\tif (port < 0 || !is_valid_port((unsigned)port)) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"invalid port\");\n\t\treturn 0;\n\t}\n\n#if !defined(NO_SSL)\n\tif (use_ssl && (SSLv23_client_method == NULL)) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"SSL is not initialized\");\n\t\treturn 0;\n\t}\n#else\n\t(void)use_ssl;\n#endif\n\n\tif (mg_inet_pton(AF_INET, host, &sa->sin, sizeof(sa->sin))) {\n\t\tsa->sin.sin_port = htons((uint16_t)port);\n\t\tip_ver = 4;\n#ifdef USE_IPV6\n\t} else if (mg_inet_pton(AF_INET6, host, &sa->sin6, sizeof(sa->sin6))) {\n\t\tsa->sin6.sin6_port = htons((uint16_t)port);\n\t\tip_ver = 6;\n\t} else if (host[0] == '[') {\n\t\t/* While getaddrinfo on Windows will work with [::1],\n\t\t * getaddrinfo on Linux only works with ::1 (without []). */\n\t\tsize_t l = strlen(host + 1);\n\t\tchar *h = (l > 1) ? mg_strdup(host + 1) : NULL;\n\t\tif (h) {\n\t\t\th[l - 1] = 0;\n\t\t\tif (mg_inet_pton(AF_INET6, h, &sa->sin6, sizeof(sa->sin6))) {\n\t\t\t\tsa->sin6.sin6_port = htons((uint16_t)port);\n\t\t\t\tip_ver = 6;\n\t\t\t}\n\t\t\tmg_free(h);\n\t\t}\n#endif\n\t}\n\n\tif (ip_ver == 0) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"host not found\");\n\t\treturn 0;\n\t}\n\n\tif (ip_ver == 4) {\n\t\t*sock = socket(PF_INET, SOCK_STREAM, 0);\n\t}\n#ifdef USE_IPV6\n\telse if (ip_ver == 6) {\n\t\t*sock = socket(PF_INET6, SOCK_STREAM, 0);\n\t}\n#endif\n\n\tif (*sock == INVALID_SOCKET) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"socket(): %s\",\n\t\t            strerror(ERRNO));\n\t\treturn 0;\n\t}\n\n\tset_close_on_exec(*sock, fc(ctx));\n\n\tif ((ip_ver == 4)\n\t    && (connect(*sock, (struct sockaddr *)&sa->sin, sizeof(sa->sin))\n\t        == 0)) {\n\t\t/* connected with IPv4 */\n\t\tset_blocking_mode(*sock, 0);\n\t\treturn 1;\n\t}\n\n#ifdef USE_IPV6\n\tif ((ip_ver == 6)\n\t    && (connect(*sock, (struct sockaddr *)&sa->sin6, sizeof(sa->sin6))\n\t        == 0)) {\n\t\t/* connected with IPv6 */\n\t\tset_blocking_mode(*sock, 0);\n\t\treturn 1;\n\t}\n#endif\n\n\t/* Not connected */\n\tmg_snprintf(NULL,\n\t            NULL, /* No truncation check for ebuf */\n\t            ebuf,\n\t            ebuf_len,\n\t            \"connect(%s:%d): %s\",\n\t            host,\n\t            port,\n\t            strerror(ERRNO));\n\tclosesocket(*sock);\n\t*sock = INVALID_SOCKET;\n\n\treturn 0;\n}\n\n\nint\nmg_url_encode(const char *src, char *dst, size_t dst_len)\n{\n\tstatic const char *dont_escape = \"._-$,;~()\";\n\tstatic const char *hex = \"0123456789abcdef\";\n\tchar *pos = dst;\n\tconst char *end = dst + dst_len - 1;\n\n\tfor (; *src != '\\0' && pos < end; src++, pos++) {\n\t\tif (isalnum(*(const unsigned char *)src)\n\t\t    || strchr(dont_escape, *(const unsigned char *)src) != NULL) {\n\t\t\t*pos = *src;\n\t\t} else if (pos + 2 < end) {\n\t\t\tpos[0] = '%';\n\t\t\tpos[1] = hex[(*(const unsigned char *)src) >> 4];\n\t\t\tpos[2] = hex[(*(const unsigned char *)src) & 0xf];\n\t\t\tpos += 2;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*pos = '\\0';\n\treturn (*src == '\\0') ? (int)(pos - dst) : -1;\n}\n\n\nstatic void\nprint_dir_entry(struct de *de)\n{\n\tchar size[64], mod[64], href[PATH_MAX * 3 /* worst case */];\n\tstruct tm *tm;\n\n\tif (de->file.is_directory) {\n\t\tmg_snprintf(de->conn,\n\t\t            NULL, /* Buffer is big enough */\n\t\t            size,\n\t\t            sizeof(size),\n\t\t            \"%s\",\n\t\t            \"[DIRECTORY]\");\n\t} else {\n\t\t/* We use (signed) cast below because MSVC 6 compiler cannot\n\t\t * convert unsigned __int64 to double. Sigh. */\n\t\tif (de->file.size < 1024) {\n\t\t\tmg_snprintf(de->conn,\n\t\t\t            NULL, /* Buffer is big enough */\n\t\t\t            size,\n\t\t\t            sizeof(size),\n\t\t\t            \"%d\",\n\t\t\t            (int)de->file.size);\n\t\t} else if (de->file.size < 0x100000) {\n\t\t\tmg_snprintf(de->conn,\n\t\t\t            NULL, /* Buffer is big enough */\n\t\t\t            size,\n\t\t\t            sizeof(size),\n\t\t\t            \"%.1fk\",\n\t\t\t            (double)de->file.size / 1024.0);\n\t\t} else if (de->file.size < 0x40000000) {\n\t\t\tmg_snprintf(de->conn,\n\t\t\t            NULL, /* Buffer is big enough */\n\t\t\t            size,\n\t\t\t            sizeof(size),\n\t\t\t            \"%.1fM\",\n\t\t\t            (double)de->file.size / 1048576);\n\t\t} else {\n\t\t\tmg_snprintf(de->conn,\n\t\t\t            NULL, /* Buffer is big enough */\n\t\t\t            size,\n\t\t\t            sizeof(size),\n\t\t\t            \"%.1fG\",\n\t\t\t            (double)de->file.size / 1073741824);\n\t\t}\n\t}\n\n\t/* Note: mg_snprintf will not cause a buffer overflow above.\n\t * So, string truncation checks are not required here. */\n\n\ttm = localtime(&de->file.last_modified);\n\tif (tm != NULL) {\n\t\tstrftime(mod, sizeof(mod), \"%d-%b-%Y %H:%M\", tm);\n\t} else {\n\t\tmg_strlcpy(mod, \"01-Jan-1970 00:00\", sizeof(mod));\n\t\tmod[sizeof(mod) - 1] = '\\0';\n\t}\n\tmg_url_encode(de->file_name, href, sizeof(href));\n\tde->conn->num_bytes_sent +=\n\t    mg_printf(de->conn,\n\t              \"<tr><td><a href=\\\"%s%s%s\\\">%s%s</a></td>\"\n\t              \"<td>&nbsp;%s</td><td>&nbsp;&nbsp;%s</td></tr>\\n\",\n\t              de->conn->request_info.local_uri,\n\t              href,\n\t              de->file.is_directory ? \"/\" : \"\",\n\t              de->file_name,\n\t              de->file.is_directory ? \"/\" : \"\",\n\t              mod,\n\t              size);\n}\n\n\n/* This function is called from send_directory() and used for\n * sorting directory entries by size, or name, or modification time.\n * On windows, __cdecl specification is needed in case if project is built\n * with __stdcall convention. qsort always requires __cdels callback. */\nstatic int WINCDECL\ncompare_dir_entries(const void *p1, const void *p2)\n{\n\tif (p1 && p2) {\n\t\tconst struct de *a = (const struct de *)p1, *b = (const struct de *)p2;\n\t\tconst char *query_string = a->conn->request_info.query_string;\n\t\tint cmp_result = 0;\n\n\t\tif (query_string == NULL) {\n\t\t\tquery_string = \"na\";\n\t\t}\n\n\t\tif (a->file.is_directory && !b->file.is_directory) {\n\t\t\treturn -1; /* Always put directories on top */\n\t\t} else if (!a->file.is_directory && b->file.is_directory) {\n\t\t\treturn 1; /* Always put directories on top */\n\t\t} else if (*query_string == 'n') {\n\t\t\tcmp_result = strcmp(a->file_name, b->file_name);\n\t\t} else if (*query_string == 's') {\n\t\t\tcmp_result = (a->file.size == b->file.size)\n\t\t\t                 ? 0\n\t\t\t                 : ((a->file.size > b->file.size) ? 1 : -1);\n\t\t} else if (*query_string == 'd') {\n\t\t\tcmp_result =\n\t\t\t    (a->file.last_modified == b->file.last_modified)\n\t\t\t        ? 0\n\t\t\t        : ((a->file.last_modified > b->file.last_modified) ? 1\n\t\t\t                                                           : -1);\n\t\t}\n\n\t\treturn (query_string[1] == 'd') ? -cmp_result : cmp_result;\n\t}\n\treturn 0;\n}\n\n\nstatic int\nmust_hide_file(struct mg_connection *conn, const char *path)\n{\n\tif (conn && conn->ctx) {\n\t\tconst char *pw_pattern = \"**\" PASSWORDS_FILE_NAME \"$\";\n\t\tconst char *pattern = conn->ctx->config[HIDE_FILES];\n\t\treturn match_prefix(pw_pattern, strlen(pw_pattern), path) > 0\n\t\t       || (pattern != NULL\n\t\t           && match_prefix(pattern, strlen(pattern), path) > 0);\n\t}\n\treturn 0;\n}\n\n\nstatic int\nscan_directory(struct mg_connection *conn,\n               const char *dir,\n               void *data,\n               void (*cb)(struct de *, void *))\n{\n\tchar path[PATH_MAX];\n\tstruct dirent *dp;\n\tDIR *dirp;\n\tstruct de de;\n\tint truncated;\n\n\tif ((dirp = mg_opendir(conn, dir)) == NULL) {\n\t\treturn 0;\n\t} else {\n\t\tde.conn = conn;\n\n\t\twhile ((dp = mg_readdir(dirp)) != NULL) {\n\t\t\t/* Do not show current dir and hidden files */\n\t\t\tif (!strcmp(dp->d_name, \".\") || !strcmp(dp->d_name, \"..\")\n\t\t\t    || must_hide_file(conn, dp->d_name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmg_snprintf(\n\t\t\t    conn, &truncated, path, sizeof(path), \"%s/%s\", dir, dp->d_name);\n\n\t\t\t/* If we don't memset stat structure to zero, mtime will have\n\t\t\t * garbage and strftime() will segfault later on in\n\t\t\t * print_dir_entry(). memset is required only if mg_stat()\n\t\t\t * fails. For more details, see\n\t\t\t * http://code.google.com/p/mongoose/issues/detail?id=79 */\n\t\t\tmemset(&de.file, 0, sizeof(de.file));\n\n\t\t\tif (truncated) {\n\t\t\t\t/* If the path is not complete, skip processing. */\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!mg_stat(conn, path, &de.file)) {\n\t\t\t\tmg_cry(conn,\n\t\t\t\t       \"%s: mg_stat(%s) failed: %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       path,\n\t\t\t\t       strerror(ERRNO));\n\t\t\t}\n\t\t\tde.file_name = dp->d_name;\n\t\t\tcb(&de, data);\n\t\t}\n\t\t(void)mg_closedir(dirp);\n\t}\n\treturn 1;\n}\n\n\n#if !defined(NO_FILES)\nstatic int\nremove_directory(struct mg_connection *conn, const char *dir)\n{\n\tchar path[PATH_MAX];\n\tstruct dirent *dp;\n\tDIR *dirp;\n\tstruct de de;\n\tint truncated;\n\tint ok = 1;\n\n\tif ((dirp = mg_opendir(conn, dir)) == NULL) {\n\t\treturn 0;\n\t} else {\n\t\tde.conn = conn;\n\n\t\twhile ((dp = mg_readdir(dirp)) != NULL) {\n\t\t\t/* Do not show current dir (but show hidden files as they will\n\t\t\t * also be removed) */\n\t\t\tif (!strcmp(dp->d_name, \".\") || !strcmp(dp->d_name, \"..\")) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmg_snprintf(\n\t\t\t    conn, &truncated, path, sizeof(path), \"%s/%s\", dir, dp->d_name);\n\n\t\t\t/* If we don't memset stat structure to zero, mtime will have\n\t\t\t * garbage and strftime() will segfault later on in\n\t\t\t * print_dir_entry(). memset is required only if mg_stat()\n\t\t\t * fails. For more details, see\n\t\t\t * http://code.google.com/p/mongoose/issues/detail?id=79 */\n\t\t\tmemset(&de.file, 0, sizeof(de.file));\n\n\t\t\tif (truncated) {\n\t\t\t\t/* Do not delete anything shorter */\n\t\t\t\tok = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!mg_stat(conn, path, &de.file)) {\n\t\t\t\tmg_cry(conn,\n\t\t\t\t       \"%s: mg_stat(%s) failed: %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       path,\n\t\t\t\t       strerror(ERRNO));\n\t\t\t\tok = 0;\n\t\t\t}\n\n\t\t\tif (de.file.is_directory) {\n\t\t\t\tif (remove_directory(conn, path) == 0) {\n\t\t\t\t\tok = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/* This will fail file is the file is in memory */\n\t\t\t\tif (mg_remove(conn, path) == 0) {\n\t\t\t\t\tok = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t(void)mg_closedir(dirp);\n\n\t\tIGNORE_UNUSED_RESULT(rmdir(dir));\n\t}\n\n\treturn ok;\n}\n#endif\n\n\nstruct dir_scan_data {\n\tstruct de *entries;\n\tunsigned int num_entries;\n\tunsigned int arr_size;\n};\n\n\n/* Behaves like realloc(), but frees original pointer on failure */\nstatic void *\nrealloc2(void *ptr, size_t size)\n{\n\tvoid *new_ptr = mg_realloc(ptr, size);\n\tif (new_ptr == NULL) {\n\t\tmg_free(ptr);\n\t}\n\treturn new_ptr;\n}\n\n\nstatic void\ndir_scan_callback(struct de *de, void *data)\n{\n\tstruct dir_scan_data *dsd = (struct dir_scan_data *)data;\n\n\tif (dsd->entries == NULL || dsd->num_entries >= dsd->arr_size) {\n\t\tdsd->arr_size *= 2;\n\t\tdsd->entries =\n\t\t    (struct de *)realloc2(dsd->entries,\n\t\t                          dsd->arr_size * sizeof(dsd->entries[0]));\n\t}\n\tif (dsd->entries == NULL) {\n\t\t/* TODO(lsm, low): propagate an error to the caller */\n\t\tdsd->num_entries = 0;\n\t} else {\n\t\tdsd->entries[dsd->num_entries].file_name = mg_strdup(de->file_name);\n\t\tdsd->entries[dsd->num_entries].file = de->file;\n\t\tdsd->entries[dsd->num_entries].conn = de->conn;\n\t\tdsd->num_entries++;\n\t}\n}\n\n\nstatic void\nhandle_directory_request(struct mg_connection *conn, const char *dir)\n{\n\tunsigned int i;\n\tint sort_direction;\n\tstruct dir_scan_data data = {NULL, 0, 128};\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\n\tif (!scan_directory(conn, dir, &data, dir_scan_callback)) {\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Cannot open directory\\nopendir(%s): %s\",\n\t\t                dir,\n\t\t                strerror(ERRNO));\n\t\treturn;\n\t}\n\n\tgmt_time_string(date, sizeof(date), &curtime);\n\n\tif (!conn) {\n\t\treturn;\n\t}\n\n\tsort_direction = ((conn->request_info.query_string != NULL)\n\t                  && (conn->request_info.query_string[1] == 'd'))\n\t                     ? 'a'\n\t                     : 'd';\n\n\tconn->must_close = 1;\n\tmg_printf(conn, \"HTTP/1.1 200 OK\\r\\n\");\n\tsend_static_cache_header(conn);\n\tmg_printf(conn,\n\t          \"Date: %s\\r\\n\"\n\t          \"Connection: close\\r\\n\"\n\t          \"Content-Type: text/html; charset=utf-8\\r\\n\\r\\n\",\n\t          date);\n\n\tconn->num_bytes_sent +=\n\t    mg_printf(conn,\n\t              \"<html><head><title>Index of %s</title>\"\n\t              \"<style>th {text-align: left;}</style></head>\"\n\t              \"<body><h1>Index of %s</h1><pre><table cellpadding=\\\"0\\\">\"\n\t              \"<tr><th><a href=\\\"?n%c\\\">Name</a></th>\"\n\t              \"<th><a href=\\\"?d%c\\\">Modified</a></th>\"\n\t              \"<th><a href=\\\"?s%c\\\">Size</a></th></tr>\"\n\t              \"<tr><td colspan=\\\"3\\\"><hr></td></tr>\",\n\t              conn->request_info.local_uri,\n\t              conn->request_info.local_uri,\n\t              sort_direction,\n\t              sort_direction,\n\t              sort_direction);\n\n\t/* Print first entry - link to a parent directory */\n\tconn->num_bytes_sent +=\n\t    mg_printf(conn,\n\t              \"<tr><td><a href=\\\"%s%s\\\">%s</a></td>\"\n\t              \"<td>&nbsp;%s</td><td>&nbsp;&nbsp;%s</td></tr>\\n\",\n\t              conn->request_info.local_uri,\n\t              \"..\",\n\t              \"Parent directory\",\n\t              \"-\",\n\t              \"-\");\n\n\t/* Sort and print directory entries */\n\tif (data.entries != NULL) {\n\t\tqsort(data.entries,\n\t\t      (size_t)data.num_entries,\n\t\t      sizeof(data.entries[0]),\n\t\t      compare_dir_entries);\n\t\tfor (i = 0; i < data.num_entries; i++) {\n\t\t\tprint_dir_entry(&data.entries[i]);\n\t\t\tmg_free(data.entries[i].file_name);\n\t\t}\n\t\tmg_free(data.entries);\n\t}\n\n\tconn->num_bytes_sent += mg_printf(conn, \"%s\", \"</table></body></html>\");\n\tconn->status_code = 200;\n}\n\n\n/* Send len bytes from the opened file to the client. */\nstatic void\nsend_file_data(struct mg_connection *conn,\n               struct mg_file *filep,\n               int64_t offset,\n               int64_t len)\n{\n\tchar buf[MG_BUF_LEN];\n\tint to_read, num_read, num_written;\n\tint64_t size;\n\n\tif (!filep || !conn) {\n\t\treturn;\n\t}\n\n\t/* Sanity check the offset */\n\tsize = (filep->stat.size > INT64_MAX) ? INT64_MAX\n\t                                      : (int64_t)(filep->stat.size);\n\toffset = (offset < 0) ? 0 : ((offset > size) ? size : offset);\n\n\tif ((len > 0) && (filep->access.membuf != NULL) && (size > 0)) {\n\t\t/* file stored in memory */\n\t\tif (len > size - offset) {\n\t\t\tlen = size - offset;\n\t\t}\n\t\tmg_write(conn, filep->access.membuf + offset, (size_t)len);\n\t} else if (len > 0 && filep->access.fp != NULL) {\n/* file stored on disk */\n#if defined(__linux__)\n\t\t/* sendfile is only available for Linux */\n\t\tif ((conn->ssl == 0) && (conn->throttle == 0)\n\t\t    && (!mg_strcasecmp(conn->ctx->config[ALLOW_SENDFILE_CALL],\n\t\t                       \"yes\"))) {\n\t\t\toff_t sf_offs = (off_t)offset;\n\t\t\tssize_t sf_sent;\n\t\t\tint sf_file = fileno(filep->access.fp);\n\t\t\tint loop_cnt = 0;\n\n\t\t\tdo {\n\t\t\t\t/* 2147479552 (0x7FFFF000) is a limit found by experiment on\n\t\t\t\t * 64 bit Linux (2^31 minus one memory page of 4k?). */\n\t\t\t\tsize_t sf_tosend =\n\t\t\t\t    (size_t)((len < 0x7FFFF000) ? len : 0x7FFFF000);\n\t\t\t\tsf_sent =\n\t\t\t\t    sendfile(conn->client.sock, sf_file, &sf_offs, sf_tosend);\n\t\t\t\tif (sf_sent > 0) {\n\t\t\t\t\tconn->num_bytes_sent += sf_sent;\n\t\t\t\t\tlen -= sf_sent;\n\t\t\t\t\toffset += sf_sent;\n\t\t\t\t} else if (loop_cnt == 0) {\n\t\t\t\t\t/* This file can not be sent using sendfile.\n\t\t\t\t\t * This might be the case for pseudo-files in the\n\t\t\t\t\t * /sys/ and /proc/ file system.\n\t\t\t\t\t * Use the regular user mode copy code instead. */\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (sf_sent == 0) {\n\t\t\t\t\t/* No error, but 0 bytes sent. May be EOF? */\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tloop_cnt++;\n\n\t\t\t} while ((len > 0) && (sf_sent >= 0));\n\n\t\t\tif (sf_sent > 0) {\n\t\t\t\treturn; /* OK */\n\t\t\t}\n\n\t\t\t/* sf_sent<0 means error, thus fall back to the classic way */\n\t\t\t/* This is always the case, if sf_file is not a \"normal\" file,\n\t\t\t * e.g., for sending data from the output of a CGI process. */\n\t\t\toffset = (int64_t)sf_offs;\n\t\t}\n#endif\n\t\tif ((offset > 0) && (fseeko(filep->access.fp, offset, SEEK_SET) != 0)) {\n\t\t\tmg_cry(conn, \"%s: fseeko() failed: %s\", __func__, strerror(ERRNO));\n\t\t\tsend_http_error(\n\t\t\t    conn,\n\t\t\t    500,\n\t\t\t    \"%s\",\n\t\t\t    \"Error: Unable to access file at requested position.\");\n\t\t} else {\n\t\t\twhile (len > 0) {\n\t\t\t\t/* Calculate how much to read from the file in the buffer */\n\t\t\t\tto_read = sizeof(buf);\n\t\t\t\tif ((int64_t)to_read > len) {\n\t\t\t\t\tto_read = (int)len;\n\t\t\t\t}\n\n\t\t\t\t/* Read from file, exit the loop on error */\n\t\t\t\tif ((num_read =\n\t\t\t\t         (int)fread(buf, 1, (size_t)to_read, filep->access.fp))\n\t\t\t\t    <= 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t/* Send read bytes to the client, exit the loop on error */\n\t\t\t\tif ((num_written = mg_write(conn, buf, (size_t)num_read))\n\t\t\t\t    != num_read) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t/* Both read and were successful, adjust counters */\n\t\t\t\tconn->num_bytes_sent += num_written;\n\t\t\t\tlen -= num_written;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nstatic int\nparse_range_header(const char *header, int64_t *a, int64_t *b)\n{\n\treturn sscanf(header, \"bytes=%\" INT64_FMT \"-%\" INT64_FMT, a, b);\n}\n\n\nstatic void\nconstruct_etag(char *buf, size_t buf_len, const struct mg_file_stat *filestat)\n{\n\tif (filestat != NULL && buf != NULL) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* All calls to construct_etag use 64 byte buffer */\n\t\t            buf,\n\t\t            buf_len,\n\t\t            \"\\\"%lx.%\" INT64_FMT \"\\\"\",\n\t\t            (unsigned long)filestat->last_modified,\n\t\t            filestat->size);\n\t}\n}\n\n\nstatic void\nfclose_on_exec(struct mg_file_access *filep, struct mg_connection *conn)\n{\n\tif (filep != NULL && filep->fp != NULL) {\n#ifdef _WIN32\n\t\t(void)conn; /* Unused. */\n#else\n\t\tif (fcntl(fileno(filep->fp), F_SETFD, FD_CLOEXEC) != 0) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: fcntl(F_SETFD FD_CLOEXEC) failed: %s\",\n\t\t\t       __func__,\n\t\t\t       strerror(ERRNO));\n\t\t}\n#endif\n\t}\n}\n\n\nstatic void\nhandle_static_file_request(struct mg_connection *conn,\n                           const char *path,\n                           struct mg_file *filep,\n                           const char *mime_type,\n                           const char *additional_headers)\n{\n\tchar date[64], lm[64], etag[64];\n\tchar range[128]; /* large enough, so there will be no overflow */\n\tconst char *msg = \"OK\", *hdr;\n\ttime_t curtime = time(NULL);\n\tint64_t cl, r1, r2;\n\tstruct vec mime_vec;\n\tint n, truncated;\n\tchar gz_path[PATH_MAX];\n\tconst char *encoding = \"\";\n\tconst char *cors1, *cors2, *cors3;\n\n\tif (conn == NULL || conn->ctx == NULL || filep == NULL) {\n\t\treturn;\n\t}\n\n\tif (mime_type == NULL) {\n\t\tget_mime_type(conn->ctx, path, &mime_vec);\n\t} else {\n\t\tmime_vec.ptr = mime_type;\n\t\tmime_vec.len = strlen(mime_type);\n\t}\n\tif (filep->stat.size > INT64_MAX) {\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: File size is too large to send\\n%\" INT64_FMT,\n\t\t                filep->stat.size);\n\t}\n\tcl = (int64_t)filep->stat.size;\n\tconn->status_code = 200;\n\trange[0] = '\\0';\n\n\t/* if this file is in fact a pre-gzipped file, rewrite its filename\n\t * it's important to rewrite the filename after resolving\n\t * the mime type from it, to preserve the actual file's type */\n\tif (filep->stat.is_gzipped) {\n\t\tmg_snprintf(conn, &truncated, gz_path, sizeof(gz_path), \"%s.gz\", path);\n\n\t\tif (truncated) {\n\t\t\tsend_http_error(conn,\n\t\t\t                500,\n\t\t\t                \"Error: Path of zipped file too long (%s)\",\n\t\t\t                path);\n\t\t\treturn;\n\t\t}\n\n\t\tpath = gz_path;\n\t\tencoding = \"Content-Encoding: gzip\\r\\n\";\n\t}\n\n\tif (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, filep)) {\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Cannot open file\\nfopen(%s): %s\",\n\t\t                path,\n\t\t                strerror(ERRNO));\n\t\treturn;\n\t}\n\n\tfclose_on_exec(&filep->access, conn);\n\n\t/* If Range: header specified, act accordingly */\n\tr1 = r2 = 0;\n\thdr = mg_get_header(conn, \"Range\");\n\tif (hdr != NULL && (n = parse_range_header(hdr, &r1, &r2)) > 0 && r1 >= 0\n\t    && r2 >= 0) {\n\t\t/* actually, range requests don't play well with a pre-gzipped\n\t\t * file (since the range is specified in the uncompressed space) */\n\t\tif (filep->stat.is_gzipped) {\n\t\t\tsend_http_error(\n\t\t\t    conn,\n\t\t\t    501,\n\t\t\t    \"%s\",\n\t\t\t    \"Error: Range requests in gzipped files are not supported\");\n\t\t\t(void)mg_fclose(\n\t\t\t    &filep->access); /* ignore error on read only file */\n\t\t\treturn;\n\t\t}\n\t\tconn->status_code = 206;\n\t\tcl = (n == 2) ? (((r2 > cl) ? cl : r2) - r1 + 1) : (cl - r1);\n\t\tmg_snprintf(conn,\n\t\t            NULL, /* range buffer is big enough */\n\t\t            range,\n\t\t            sizeof(range),\n\t\t            \"Content-Range: bytes \"\n\t\t            \"%\" INT64_FMT \"-%\" INT64_FMT \"/%\" INT64_FMT \"\\r\\n\",\n\t\t            r1,\n\t\t            r1 + cl - 1,\n\t\t            filep->stat.size);\n\t\tmsg = \"Partial Content\";\n\t}\n\n\thdr = mg_get_header(conn, \"Origin\");\n\tif (hdr) {\n\t\t/* Cross-origin resource sharing (CORS), see\n\t\t * http://www.html5rocks.com/en/tutorials/cors/,\n\t\t * http://www.html5rocks.com/static/images/cors_server_flowchart.png -\n\t\t * preflight is not supported for files. */\n\t\tcors1 = \"Access-Control-Allow-Origin: \";\n\t\tcors2 = conn->ctx->config[ACCESS_CONTROL_ALLOW_ORIGIN];\n\t\tcors3 = \"\\r\\n\";\n\t} else {\n\t\tcors1 = cors2 = cors3 = \"\";\n\t}\n\n\t/* Prepare Etag, Date, Last-Modified headers. Must be in UTC, according to\n\t * http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3 */\n\tgmt_time_string(date, sizeof(date), &curtime);\n\tgmt_time_string(lm, sizeof(lm), &filep->stat.last_modified);\n\tconstruct_etag(etag, sizeof(etag), &filep->stat);\n\n\t(void)mg_printf(conn,\n\t                \"HTTP/1.1 %d %s\\r\\n\"\n\t                \"%s%s%s\"\n\t                \"Date: %s\\r\\n\",\n\t                conn->status_code,\n\t                msg,\n\t                cors1,\n\t                cors2,\n\t                cors3,\n\t                date);\n\tsend_static_cache_header(conn);\n\t(void)mg_printf(conn,\n\t                \"Last-Modified: %s\\r\\n\"\n\t                \"Etag: %s\\r\\n\"\n\t                \"Content-Type: %.*s\\r\\n\"\n\t                \"Content-Length: %\" INT64_FMT \"\\r\\n\"\n\t                \"Connection: %s\\r\\n\"\n\t                \"Accept-Ranges: bytes\\r\\n\"\n\t                \"%s%s\",\n\t                lm,\n\t                etag,\n\t                (int)mime_vec.len,\n\t                mime_vec.ptr,\n\t                cl,\n\t                suggest_connection_header(conn),\n\t                range,\n\t                encoding);\n\n\t/* The previous code must not add any header starting with X- to make\n\t * sure no one of the additional_headers is included twice */\n\n\tif (additional_headers != NULL) {\n\t\t(void)mg_printf(conn,\n\t\t                \"%.*s\\r\\n\\r\\n\",\n\t\t                (int)strlen(additional_headers),\n\t\t                additional_headers);\n\t} else {\n\t\t(void)mg_printf(conn, \"\\r\\n\");\n\t}\n\n\tif (strcmp(conn->request_info.request_method, \"HEAD\") != 0) {\n\t\tsend_file_data(conn, filep, r1, cl);\n\t}\n\t(void)mg_fclose(&filep->access); /* ignore error on read only file */\n}\n\n\n#if !defined(NO_CACHING)\nstatic void\nhandle_not_modified_static_file_request(struct mg_connection *conn,\n                                        struct mg_file *filep)\n{\n\tchar date[64], lm[64], etag[64];\n\ttime_t curtime = time(NULL);\n\n\tif (conn == NULL || filep == NULL) {\n\t\treturn;\n\t}\n\tconn->status_code = 304;\n\tgmt_time_string(date, sizeof(date), &curtime);\n\tgmt_time_string(lm, sizeof(lm), &filep->stat.last_modified);\n\tconstruct_etag(etag, sizeof(etag), &filep->stat);\n\n\t(void)mg_printf(conn,\n\t                \"HTTP/1.1 %d %s\\r\\n\"\n\t                \"Date: %s\\r\\n\",\n\t                conn->status_code,\n\t                mg_get_response_code_text(conn, conn->status_code),\n\t                date);\n\tsend_static_cache_header(conn);\n\t(void)mg_printf(conn,\n\t                \"Last-Modified: %s\\r\\n\"\n\t                \"Etag: %s\\r\\n\"\n\t                \"Connection: %s\\r\\n\"\n\t                \"\\r\\n\",\n\t                lm,\n\t                etag,\n\t                suggest_connection_header(conn));\n}\n#endif\n\n\nvoid\nmg_send_file(struct mg_connection *conn, const char *path)\n{\n\tmg_send_mime_file(conn, path, NULL);\n}\n\n\nvoid\nmg_send_mime_file(struct mg_connection *conn,\n                  const char *path,\n                  const char *mime_type)\n{\n\tmg_send_mime_file2(conn, path, mime_type, NULL);\n}\n\n\nvoid\nmg_send_mime_file2(struct mg_connection *conn,\n                   const char *path,\n                   const char *mime_type,\n                   const char *additional_headers)\n{\n\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\tif (mg_stat(conn, path, &file.stat)) {\n\t\tif (file.stat.is_directory) {\n\t\t\tif (!conn) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!mg_strcasecmp(conn->ctx->config[ENABLE_DIRECTORY_LISTING],\n\t\t\t                   \"yes\")) {\n\t\t\t\thandle_directory_request(conn, path);\n\t\t\t} else {\n\t\t\t\tsend_http_error(conn,\n\t\t\t\t                403,\n\t\t\t\t                \"%s\",\n\t\t\t\t                \"Error: Directory listing denied\");\n\t\t\t}\n\t\t} else {\n\t\t\thandle_static_file_request(\n\t\t\t    conn, path, &file, mime_type, additional_headers);\n\t\t}\n\t} else {\n\t\tsend_http_error(conn, 404, \"%s\", \"Error: File not found\");\n\t}\n}\n\n\n/* For a given PUT path, create all intermediate subdirectories.\n * Return  0  if the path itself is a directory.\n * Return  1  if the path leads to a file.\n * Return -1  for if the path is too long.\n * Return -2  if path can not be created.\n*/\nstatic int\nput_dir(struct mg_connection *conn, const char *path)\n{\n\tchar buf[PATH_MAX];\n\tconst char *s, *p;\n\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\tsize_t len;\n\tint res = 1;\n\n\tfor (s = p = path + 2; (p = strchr(s, '/')) != NULL; s = ++p) {\n\t\tlen = (size_t)(p - path);\n\t\tif (len >= sizeof(buf)) {\n\t\t\t/* path too long */\n\t\t\tres = -1;\n\t\t\tbreak;\n\t\t}\n\t\tmemcpy(buf, path, len);\n\t\tbuf[len] = '\\0';\n\n\t\t/* Try to create intermediate directory */\n\t\tDEBUG_TRACE(\"mkdir(%s)\", buf);\n\t\tif (!mg_stat(conn, buf, &file.stat) && mg_mkdir(conn, buf, 0755) != 0) {\n\t\t\t/* path does not exixt and can not be created */\n\t\t\tres = -2;\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Is path itself a directory? */\n\t\tif (p[1] == '\\0') {\n\t\t\tres = 0;\n\t\t}\n\t}\n\n\treturn res;\n}\n\n\nstatic void\nremove_bad_file(const struct mg_connection *conn, const char *path)\n{\n\tint r = mg_remove(conn, path);\n\tif (r != 0) {\n\t\tmg_cry(conn, \"%s: Cannot remove invalid file %s\", __func__, path);\n\t}\n}\n\n\nlong long\nmg_store_body(struct mg_connection *conn, const char *path)\n{\n\tchar buf[MG_BUF_LEN];\n\tlong long len = 0;\n\tint ret, n;\n\tstruct mg_file fi;\n\n\tif (conn->consumed_content != 0) {\n\t\tmg_cry(conn, \"%s: Contents already consumed\", __func__);\n\t\treturn -11;\n\t}\n\n\tret = put_dir(conn, path);\n\tif (ret < 0) {\n\t\t/* -1 for path too long,\n\t\t * -2 for path can not be created. */\n\t\treturn ret;\n\t}\n\tif (ret != 1) {\n\t\t/* Return 0 means, path itself is a directory. */\n\t\treturn 0;\n\t}\n\n\tif (mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &fi) == 0) {\n\t\treturn -12;\n\t}\n\n\tret = mg_read(conn, buf, sizeof(buf));\n\twhile (ret > 0) {\n\t\tn = (int)fwrite(buf, 1, (size_t)ret, fi.access.fp);\n\t\tif (n != ret) {\n\t\t\t(void)mg_fclose(\n\t\t\t    &fi.access); /* File is bad and will be removed anyway. */\n\t\t\tremove_bad_file(conn, path);\n\t\t\treturn -13;\n\t\t}\n\t\tret = mg_read(conn, buf, sizeof(buf));\n\t}\n\n\t/* File is open for writing. If fclose fails, there was probably an\n\t * error flushing the buffer to disk, so the file on disk might be\n\t * broken. Delete it and return an error to the caller. */\n\tif (mg_fclose(&fi.access) != 0) {\n\t\tremove_bad_file(conn, path);\n\t\treturn -14;\n\t}\n\n\treturn len;\n}\n\n\n/* Parse HTTP headers from the given buffer, advance buf pointer\n * to the point where parsing stopped.\n * All parameters must be valid pointers (not NULL).\n * Return <0 on error. */\nstatic int\nparse_http_headers(char **buf, struct mg_request_info *ri)\n{\n\tint i;\n\n\tri->num_headers = 0;\n\n\tfor (i = 0; i < (int)ARRAY_SIZE(ri->http_headers); i++) {\n\t\tchar *dp = *buf;\n\t\twhile ((*dp != ':') && (*dp >= 33) && (*dp <= 126)) {\n\t\t\tdp++;\n\t\t}\n\t\tif (dp == *buf) {\n\t\t\t/* End of headers reached. */\n\t\t\tbreak;\n\t\t}\n\t\tif (*dp != ':') {\n\t\t\t/* This is not a valid field. */\n\t\t\treturn -1;\n\t\t}\n\n\t\t/* End of header key (*dp == ':') */\n\t\t/* Truncate here and set the key name */\n\t\t*dp = 0;\n\t\tri->http_headers[i].name = *buf;\n\t\tdo {\n\t\t\tdp++;\n\t\t} while (*dp == ' ');\n\n\t\t/* The rest of the line is the value */\n\t\tri->http_headers[i].value = dp;\n\t\t*buf = dp + strcspn(dp, \"\\r\\n\");\n\t\tif (((*buf)[0] != '\\r') || ((*buf)[1] != '\\n')) {\n\t\t\t*buf = NULL;\n\t\t}\n\n\n\t\tri->num_headers = i + 1;\n\t\tif (*buf) {\n\t\t\t(*buf)[0] = 0;\n\t\t\t(*buf)[1] = 0;\n\t\t\t*buf += 2;\n\t\t} else {\n\t\t\t*buf = dp;\n\t\t\tbreak;\n\t\t}\n\n\t\tif ((*buf)[0] == '\\r') {\n\t\t\t/* This is the end of the header */\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ri->num_headers;\n}\n\n\nstatic int\nis_valid_http_method(const char *method)\n{\n\treturn !strcmp(method, \"GET\")        /* HTTP (RFC 2616) */\n\t       || !strcmp(method, \"POST\")    /* HTTP (RFC 2616) */\n\t       || !strcmp(method, \"HEAD\")    /* HTTP (RFC 2616) */\n\t       || !strcmp(method, \"PUT\")     /* HTTP (RFC 2616) */\n\t       || !strcmp(method, \"DELETE\")  /* HTTP (RFC 2616) */\n\t       || !strcmp(method, \"OPTIONS\") /* HTTP (RFC 2616) */\n\t       /* TRACE method (RFC 2616) is not supported for security reasons */\n\t       || !strcmp(method, \"CONNECT\") /* HTTP (RFC 2616) */\n\n\t       || !strcmp(method, \"PROPFIND\") /* WEBDAV (RFC 2518) */\n\t       || !strcmp(method, \"MKCOL\")    /* WEBDAV (RFC 2518) */\n\n\t       /* Unsupported WEBDAV Methods: */\n\t       /* PROPPATCH, COPY, MOVE, LOCK, UNLOCK (RFC 2518) */\n\t       /* + 11 methods from RFC 3253 */\n\t       /* ORDERPATCH (RFC 3648) */\n\t       /* ACL (RFC 3744) */\n\t       /* SEARCH (RFC 5323) */\n\t       /* + MicroSoft extensions\n\t        * https://msdn.microsoft.com/en-us/library/aa142917.aspx */\n\n\t       /* PATCH method only allowed for CGI/Lua/LSP and callbacks. */\n\t       || !strcmp(method, \"PATCH\"); /* PATCH method (RFC 5789) */\n}\n\n\n/* Parse HTTP request, fill in mg_request_info structure.\n * This function modifies the buffer by NUL-terminating\n * HTTP request components, header names and header values.\n * Parameters:\n *   buf (in/out): pointer to the HTTP header to parse and split\n *   len (in): length of HTTP header buffer\n *   re (out): parsed header as mg_request_info\n * buf and ri must be valid pointers (not NULL), len>0.\n * Returns <0 on error. */\nstatic int\nparse_http_message(char *buf, int len, struct mg_request_info *ri)\n{\n\tint is_request, request_length;\n\tchar *start_line;\n\n\trequest_length = get_request_len(buf, len);\n\n\tif (request_length > 0) {\n\t\t/* Reset attributes. DO NOT TOUCH is_ssl, remote_ip, remote_addr,\n\t\t * remote_port */\n\t\tri->remote_user = ri->request_method = ri->request_uri =\n\t\t    ri->http_version = NULL;\n\t\tri->num_headers = 0;\n\n\t\tbuf[request_length - 1] = '\\0';\n\n\t\t/* RFC says that all initial whitespaces should be ingored */\n\t\twhile (*buf != '\\0' && isspace(*(unsigned char *)buf)) {\n\t\t\tbuf++;\n\t\t}\n\t\tstart_line = skip(&buf, \"\\r\\n\");\n\t\tri->request_method = skip(&start_line, \" \");\n\t\tri->request_uri = skip(&start_line, \" \");\n\t\tri->http_version = start_line;\n\n\t\t/* HTTP message could be either HTTP request:\n\t\t * \"GET / HTTP/1.0 ...\"\n\t\t * or a HTTP response:\n\t\t *  \"HTTP/1.0 200 OK ...\"\n\t\t * otherwise it is invalid.\n\t\t */\n\t\tis_request = is_valid_http_method(ri->request_method);\n\t\tif ((is_request && memcmp(ri->http_version, \"HTTP/\", 5) != 0)\n\t\t    || (!is_request && memcmp(ri->request_method, \"HTTP/\", 5) != 0)) {\n\t\t\t/* Not a valid request or response: invalid */\n\t\t\treturn -1;\n\t\t}\n\t\tif (is_request) {\n\t\t\tri->http_version += 5;\n\t\t}\n\t\tif (parse_http_headers(&buf, ri) < 0) {\n\t\t\t/* Error while parsing headers */\n\t\t\treturn -1;\n\t\t}\n\t}\n\treturn request_length;\n}\n\n\n/* Keep reading the input (either opened file descriptor fd, or socket sock,\n * or SSL descriptor ssl) into buffer buf, until \\r\\n\\r\\n appears in the\n * buffer (which marks the end of HTTP request). Buffer buf may already\n * have some data. The length of the data is stored in nread.\n * Upon every read operation, increase nread by the number of bytes read. */\nstatic int\nread_request(FILE *fp,\n             struct mg_connection *conn,\n             char *buf,\n             int bufsiz,\n             int *nread)\n{\n\tint request_len, n = 0;\n\tstruct timespec last_action_time;\n\tdouble request_timeout;\n\n\tif (!conn) {\n\t\treturn 0;\n\t}\n\n\tmemset(&last_action_time, 0, sizeof(last_action_time));\n\n\tif (conn->ctx->config[REQUEST_TIMEOUT]) {\n\t\t/* value of request_timeout is in seconds, config in milliseconds */\n\t\trequest_timeout = atof(conn->ctx->config[REQUEST_TIMEOUT]) / 1000.0;\n\t} else {\n\t\trequest_timeout = -1.0;\n\t}\n\tif (conn->handled_requests > 0) {\n\t\tif (conn->ctx->config[KEEP_ALIVE_TIMEOUT]) {\n\t\t\trequest_timeout =\n\t\t\t    atof(conn->ctx->config[KEEP_ALIVE_TIMEOUT]) / 1000.0;\n\t\t}\n\t}\n\n\trequest_len = get_request_len(buf, *nread);\n\n\t/* first time reading from this connection */\n\tclock_gettime(CLOCK_MONOTONIC, &last_action_time);\n\n\twhile (request_len == 0) {\n\t\t/* Full request not yet received */\n\t\tif (conn->ctx->stop_flag != 0) {\n\t\t\t/* Server is to be stopped. */\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (*nread >= bufsiz) {\n\t\t\t/* Request too long */\n\t\t\treturn -2;\n\t\t}\n\n\t\tn = pull(fp, conn, buf + *nread, bufsiz - *nread, request_timeout);\n\t\tif (n < 0) {\n\t\t\t/* Receive error */\n\t\t\treturn -1;\n\t\t}\n\t\t*nread += n;\n\t\trequest_len = get_request_len(buf, *nread);\n\n\t\tif ((request_len == 0) && (request_timeout >= 0)) {\n\t\t\tif (mg_difftimespec(&last_action_time, &(conn->req_time))\n\t\t\t    > request_timeout) {\n\t\t\t\t/* Timeout */\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tclock_gettime(CLOCK_MONOTONIC, &last_action_time);\n\t\t}\n\t}\n\n\treturn request_len;\n}\n\n#if !defined(NO_FILES)\n/* For given directory path, substitute it to valid index file.\n * Return 1 if index file has been found, 0 if not found.\n * If the file is found, it's stats is returned in stp. */\nstatic int\nsubstitute_index_file(struct mg_connection *conn,\n                      char *path,\n                      size_t path_len,\n                      struct mg_file *filep)\n{\n\tif (conn && conn->ctx) {\n\t\tconst char *list = conn->ctx->config[INDEX_FILES];\n\t\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\t\tstruct vec filename_vec;\n\t\tsize_t n = strlen(path);\n\t\tint found = 0;\n\n\t\t/* The 'path' given to us points to the directory. Remove all trailing\n\t\t * directory separator characters from the end of the path, and\n\t\t * then append single directory separator character. */\n\t\twhile (n > 0 && path[n - 1] == '/') {\n\t\t\tn--;\n\t\t}\n\t\tpath[n] = '/';\n\n\t\t/* Traverse index files list. For each entry, append it to the given\n\t\t * path and see if the file exists. If it exists, break the loop */\n\t\twhile ((list = next_option(list, &filename_vec, NULL)) != NULL) {\n\t\t\t/* Ignore too long entries that may overflow path buffer */\n\t\t\tif (filename_vec.len > path_len - (n + 2)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/* Prepare full path to the index file */\n\t\t\tmg_strlcpy(path + n + 1, filename_vec.ptr, filename_vec.len + 1);\n\n\t\t\t/* Does it exist? */\n\t\t\tif (mg_stat(conn, path, &file.stat)) {\n\t\t\t\t/* Yes it does, break the loop */\n\t\t\t\t*filep = file;\n\t\t\t\tfound = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t/* If no index file exists, restore directory path */\n\t\tif (!found) {\n\t\t\tpath[n] = '\\0';\n\t\t}\n\n\t\treturn found;\n\t}\n\treturn 0;\n}\n#endif\n\n\n#if !defined(NO_CACHING)\n/* Return True if we should reply 304 Not Modified. */\nstatic int\nis_not_modified(const struct mg_connection *conn,\n                const struct mg_file_stat *filestat)\n{\n\tchar etag[64];\n\tconst char *ims = mg_get_header(conn, \"If-Modified-Since\");\n\tconst char *inm = mg_get_header(conn, \"If-None-Match\");\n\tconstruct_etag(etag, sizeof(etag), filestat);\n\n\treturn (inm != NULL && !mg_strcasecmp(etag, inm))\n\t       || ((ims != NULL)\n\t           && (filestat->last_modified <= parse_date_string(ims)));\n}\n#endif /* !NO_CACHING */\n\n\n#if !defined(NO_CGI) || !defined(NO_FILES)\nstatic int\nforward_body_data(struct mg_connection *conn, FILE *fp, SOCKET sock, SSL *ssl)\n{\n\tconst char *expect, *body;\n\tchar buf[MG_BUF_LEN];\n\tint to_read, nread, success = 0;\n\tint64_t buffered_len;\n\tdouble timeout = -1.0;\n\n\tif (!conn) {\n\t\treturn 0;\n\t}\n\tif (conn->ctx->config[REQUEST_TIMEOUT]) {\n\t\ttimeout = atoi(conn->ctx->config[REQUEST_TIMEOUT]) / 1000.0;\n\t}\n\n\texpect = mg_get_header(conn, \"Expect\");\n\t/* assert(fp != NULL); */\n\tif (!fp) {\n\t\tsend_http_error(conn, 500, \"%s\", \"Error: NULL File\");\n\t\treturn 0;\n\t}\n\n\tif (conn->content_len == -1 && !conn->is_chunked) {\n\t\t/* Content length is not specified by the client. */\n\t\tsend_http_error(conn,\n\t\t                411,\n\t\t                \"%s\",\n\t\t                \"Error: Client did not specify content length\");\n\t} else if ((expect != NULL)\n\t           && (mg_strcasecmp(expect, \"100-continue\") != 0)) {\n\t\t/* Client sent an \"Expect: xyz\" header and xyz is not 100-continue. */\n\t\tsend_http_error(conn,\n\t\t                417,\n\t\t                \"Error: Can not fulfill expectation %s\",\n\t\t                expect);\n\t} else {\n\t\tif (expect != NULL) {\n\t\t\t(void)mg_printf(conn, \"%s\", \"HTTP/1.1 100 Continue\\r\\n\\r\\n\");\n\t\t\tconn->status_code = 100;\n\t\t} else {\n\t\t\tconn->status_code = 200;\n\t\t}\n\n\t\tbuffered_len = (int64_t)(conn->data_len) - (int64_t)conn->request_len\n\t\t               - conn->consumed_content;\n\n\t\t/* assert(buffered_len >= 0); */\n\t\t/* assert(conn->consumed_content == 0); */\n\n\t\tif ((buffered_len < 0) || (conn->consumed_content != 0)) {\n\t\t\tsend_http_error(conn, 500, \"%s\", \"Error: Size mismatch\");\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (buffered_len > 0) {\n\t\t\tif ((int64_t)buffered_len > conn->content_len) {\n\t\t\t\tbuffered_len = (int)conn->content_len;\n\t\t\t}\n\t\t\tbody = conn->buf + conn->request_len + conn->consumed_content;\n\t\t\tpush_all(conn->ctx, fp, sock, ssl, body, (int64_t)buffered_len);\n\t\t\tconn->consumed_content += buffered_len;\n\t\t}\n\n\t\tnread = 0;\n\t\twhile (conn->consumed_content < conn->content_len) {\n\t\t\tto_read = sizeof(buf);\n\t\t\tif ((int64_t)to_read > conn->content_len - conn->consumed_content) {\n\t\t\t\tto_read = (int)(conn->content_len - conn->consumed_content);\n\t\t\t}\n\t\t\tnread = pull(NULL, conn, buf, to_read, timeout);\n\t\t\tif (nread <= 0\n\t\t\t    || push_all(conn->ctx, fp, sock, ssl, buf, nread) != nread) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconn->consumed_content += nread;\n\t\t}\n\n\t\tif (conn->consumed_content == conn->content_len) {\n\t\t\tsuccess = (nread >= 0);\n\t\t}\n\n\t\t/* Each error code path in this function must send an error */\n\t\tif (!success) {\n\t\t\t/* NOTE: Maybe some data has already been sent. */\n\t\t\t/* TODO (low): If some data has been sent, a correct error\n\t\t\t * reply can no longer be sent, so just close the connection */\n\t\t\tsend_http_error(conn, 500, \"%s\", \"\");\n\t\t}\n\t}\n\n\treturn success;\n}\n#endif\n\n#if !defined(NO_CGI)\n/* This structure helps to create an environment for the spawned CGI program.\n * Environment is an array of \"VARIABLE=VALUE\\0\" ASCIIZ strings,\n * last element must be NULL.\n * However, on Windows there is a requirement that all these VARIABLE=VALUE\\0\n * strings must reside in a contiguous buffer. The end of the buffer is\n * marked by two '\\0' characters.\n * We satisfy both worlds: we create an envp array (which is vars), all\n * entries are actually pointers inside buf. */\nstruct cgi_environment {\n\tstruct mg_connection *conn;\n\t/* Data block */\n\tchar *buf;      /* Environment buffer */\n\tsize_t buflen;  /* Space available in buf */\n\tsize_t bufused; /* Space taken in buf */\n\t                /* Index block */\n\tchar **var;     /* char **envp */\n\tsize_t varlen;  /* Number of variables available in var */\n\tsize_t varused; /* Number of variables stored in var */\n};\n\n\nstatic void addenv(struct cgi_environment *env,\n                   PRINTF_FORMAT_STRING(const char *fmt),\n                   ...) PRINTF_ARGS(2, 3);\n\n/* Append VARIABLE=VALUE\\0 string to the buffer, and add a respective\n * pointer into the vars array. Assumes env != NULL and fmt != NULL. */\nstatic void\naddenv(struct cgi_environment *env, const char *fmt, ...)\n{\n\tsize_t n, space;\n\tint truncated = 0;\n\tchar *added;\n\tva_list ap;\n\n\t/* Calculate how much space is left in the buffer */\n\tspace = (env->buflen - env->bufused);\n\n\t/* Calculate an estimate for the required space */\n\tn = strlen(fmt) + 2 + 128;\n\n\tdo {\n\t\tif (space <= n) {\n\t\t\t/* Allocate new buffer */\n\t\t\tn = env->buflen + CGI_ENVIRONMENT_SIZE;\n\t\t\tadded = (char *)mg_realloc(env->buf, n);\n\t\t\tif (!added) {\n\t\t\t\t/* Out of memory */\n\t\t\t\tmg_cry(env->conn,\n\t\t\t\t       \"%s: Cannot allocate memory for CGI variable [%s]\",\n\t\t\t\t       __func__,\n\t\t\t\t       fmt);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tenv->buf = added;\n\t\t\tenv->buflen = n;\n\t\t\tspace = (env->buflen - env->bufused);\n\t\t}\n\n\t\t/* Make a pointer to the free space int the buffer */\n\t\tadded = env->buf + env->bufused;\n\n\t\t/* Copy VARIABLE=VALUE\\0 string into the free space */\n\t\tva_start(ap, fmt);\n\t\tmg_vsnprintf(env->conn, &truncated, added, (size_t)space, fmt, ap);\n\t\tva_end(ap);\n\n\t\t/* Do not add truncated strings to the environment */\n\t\tif (truncated) {\n\t\t\t/* Reallocate the buffer */\n\t\t\tspace = 0;\n\t\t\tn = 1;\n\t\t}\n\t} while (truncated);\n\n\t/* Calculate number of bytes added to the environment */\n\tn = strlen(added) + 1;\n\tenv->bufused += n;\n\n\t/* Now update the variable index */\n\tspace = (env->varlen - env->varused);\n\tif (space < 2) {\n\t\tmg_cry(env->conn,\n\t\t       \"%s: Cannot register CGI variable [%s]\",\n\t\t       __func__,\n\t\t       fmt);\n\t\treturn;\n\t}\n\n\t/* Append a pointer to the added string into the envp array */\n\tenv->var[env->varused] = added;\n\tenv->varused++;\n}\n\n\nstatic void\nprepare_cgi_environment(struct mg_connection *conn,\n                        const char *prog,\n                        struct cgi_environment *env)\n{\n\tconst char *s;\n\tstruct vec var_vec;\n\tchar *p, src_addr[IP_ADDR_STR_LEN], http_var_name[128];\n\tint i, truncated, uri_len;\n\n\tif (conn == NULL || prog == NULL || env == NULL) {\n\t\treturn;\n\t}\n\n\tenv->conn = conn;\n\tenv->buflen = CGI_ENVIRONMENT_SIZE;\n\tenv->bufused = 0;\n\tenv->buf = (char *)mg_malloc(env->buflen);\n\tenv->varlen = MAX_CGI_ENVIR_VARS;\n\tenv->varused = 0;\n\tenv->var = (char **)mg_malloc(env->buflen * sizeof(char *));\n\n\taddenv(env, \"SERVER_NAME=%s\", conn->ctx->config[AUTHENTICATION_DOMAIN]);\n\taddenv(env, \"SERVER_ROOT=%s\", conn->ctx->config[DOCUMENT_ROOT]);\n\taddenv(env, \"DOCUMENT_ROOT=%s\", conn->ctx->config[DOCUMENT_ROOT]);\n\taddenv(env, \"SERVER_SOFTWARE=%s/%s\", \"Civetweb\", mg_version());\n\n\t/* Prepare the environment block */\n\taddenv(env, \"%s\", \"GATEWAY_INTERFACE=CGI/1.1\");\n\taddenv(env, \"%s\", \"SERVER_PROTOCOL=HTTP/1.1\");\n\taddenv(env, \"%s\", \"REDIRECT_STATUS=200\"); /* For PHP */\n\n#if defined(USE_IPV6)\n\tif (conn->client.lsa.sa.sa_family == AF_INET6) {\n\t\taddenv(env, \"SERVER_PORT=%d\", ntohs(conn->client.lsa.sin6.sin6_port));\n\t} else\n#endif\n\t{\n\t\taddenv(env, \"SERVER_PORT=%d\", ntohs(conn->client.lsa.sin.sin_port));\n\t}\n\n\tsockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);\n\taddenv(env, \"REMOTE_ADDR=%s\", src_addr);\n\n\taddenv(env, \"REQUEST_METHOD=%s\", conn->request_info.request_method);\n\taddenv(env, \"REMOTE_PORT=%d\", conn->request_info.remote_port);\n\n\taddenv(env, \"REQUEST_URI=%s\", conn->request_info.request_uri);\n\taddenv(env, \"LOCAL_URI=%s\", conn->request_info.local_uri);\n\n\t/* SCRIPT_NAME */\n\turi_len = (int)strlen(conn->request_info.local_uri);\n\tif (conn->path_info == NULL) {\n\t\tif (conn->request_info.local_uri[uri_len - 1] != '/') {\n\t\t\t/* URI: /path_to_script/script.cgi */\n\t\t\taddenv(env, \"SCRIPT_NAME=%s\", conn->request_info.local_uri);\n\t\t} else {\n\t\t\t/* URI: /path_to_script/ ... using index.cgi */\n\t\t\tchar *index_file = strrchr(prog, '/');\n\t\t\tif (index_file) {\n\t\t\t\taddenv(env,\n\t\t\t\t       \"SCRIPT_NAME=%s%s\",\n\t\t\t\t       conn->request_info.local_uri,\n\t\t\t\t       index_file + 1);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t/* URI: /path_to_script/script.cgi/path_info */\n\t\taddenv(env,\n\t\t       \"SCRIPT_NAME=%.*s\",\n\t\t       uri_len - (int)strlen(conn->path_info),\n\t\t       conn->request_info.local_uri);\n\t}\n\n\taddenv(env, \"SCRIPT_FILENAME=%s\", prog);\n\tif (conn->path_info == NULL) {\n\t\taddenv(env, \"PATH_TRANSLATED=%s\", conn->ctx->config[DOCUMENT_ROOT]);\n\t} else {\n\t\taddenv(env,\n\t\t       \"PATH_TRANSLATED=%s%s\",\n\t\t       conn->ctx->config[DOCUMENT_ROOT],\n\t\t       conn->path_info);\n\t}\n\n\taddenv(env, \"HTTPS=%s\", (conn->ssl == NULL) ? \"off\" : \"on\");\n\n\tif ((s = mg_get_header(conn, \"Content-Type\")) != NULL) {\n\t\taddenv(env, \"CONTENT_TYPE=%s\", s);\n\t}\n\tif (conn->request_info.query_string != NULL) {\n\t\taddenv(env, \"QUERY_STRING=%s\", conn->request_info.query_string);\n\t}\n\tif ((s = mg_get_header(conn, \"Content-Length\")) != NULL) {\n\t\taddenv(env, \"CONTENT_LENGTH=%s\", s);\n\t}\n\tif ((s = getenv(\"PATH\")) != NULL) {\n\t\taddenv(env, \"PATH=%s\", s);\n\t}\n\tif (conn->path_info != NULL) {\n\t\taddenv(env, \"PATH_INFO=%s\", conn->path_info);\n\t}\n\n\tif (conn->status_code > 0) {\n\t\t/* CGI error handler should show the status code */\n\t\taddenv(env, \"STATUS=%d\", conn->status_code);\n\t}\n\n#if defined(_WIN32)\n\tif ((s = getenv(\"COMSPEC\")) != NULL) {\n\t\taddenv(env, \"COMSPEC=%s\", s);\n\t}\n\tif ((s = getenv(\"SYSTEMROOT\")) != NULL) {\n\t\taddenv(env, \"SYSTEMROOT=%s\", s);\n\t}\n\tif ((s = getenv(\"SystemDrive\")) != NULL) {\n\t\taddenv(env, \"SystemDrive=%s\", s);\n\t}\n\tif ((s = getenv(\"ProgramFiles\")) != NULL) {\n\t\taddenv(env, \"ProgramFiles=%s\", s);\n\t}\n\tif ((s = getenv(\"ProgramFiles(x86)\")) != NULL) {\n\t\taddenv(env, \"ProgramFiles(x86)=%s\", s);\n\t}\n#else\n\tif ((s = getenv(\"LD_LIBRARY_PATH\")) != NULL) {\n\t\taddenv(env, \"LD_LIBRARY_PATH=%s\", s);\n\t}\n#endif /* _WIN32 */\n\n\tif ((s = getenv(\"PERLLIB\")) != NULL) {\n\t\taddenv(env, \"PERLLIB=%s\", s);\n\t}\n\n\tif (conn->request_info.remote_user != NULL) {\n\t\taddenv(env, \"REMOTE_USER=%s\", conn->request_info.remote_user);\n\t\taddenv(env, \"%s\", \"AUTH_TYPE=Digest\");\n\t}\n\n\t/* Add all headers as HTTP_* variables */\n\tfor (i = 0; i < conn->request_info.num_headers; i++) {\n\n\t\t(void)mg_snprintf(conn,\n\t\t                  &truncated,\n\t\t                  http_var_name,\n\t\t                  sizeof(http_var_name),\n\t\t                  \"HTTP_%s\",\n\t\t                  conn->request_info.http_headers[i].name);\n\n\t\tif (truncated) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: HTTP header variable too long [%s]\",\n\t\t\t       __func__,\n\t\t\t       conn->request_info.http_headers[i].name);\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Convert variable name into uppercase, and change - to _ */\n\t\tfor (p = http_var_name; *p != '\\0'; p++) {\n\t\t\tif (*p == '-') {\n\t\t\t\t*p = '_';\n\t\t\t}\n\t\t\t*p = (char)toupper(*(unsigned char *)p);\n\t\t}\n\n\t\taddenv(env,\n\t\t       \"%s=%s\",\n\t\t       http_var_name,\n\t\t       conn->request_info.http_headers[i].value);\n\t}\n\n\t/* Add user-specified variables */\n\ts = conn->ctx->config[CGI_ENVIRONMENT];\n\twhile ((s = next_option(s, &var_vec, NULL)) != NULL) {\n\t\taddenv(env, \"%.*s\", (int)var_vec.len, var_vec.ptr);\n\t}\n\n\tenv->var[env->varused] = NULL;\n\tenv->buf[env->bufused] = '\\0';\n}\n\n\nstatic void\nhandle_cgi_request(struct mg_connection *conn, const char *prog)\n{\n\tchar *buf;\n\tsize_t buflen;\n\tint headers_len, data_len, i, truncated;\n\tint fdin[2] = {-1, -1}, fdout[2] = {-1, -1}, fderr[2] = {-1, -1};\n\tconst char *status, *status_text, *connection_state;\n\tchar *pbuf, dir[PATH_MAX], *p;\n\tstruct mg_request_info ri;\n\tstruct cgi_environment blk;\n\tFILE *in = NULL, *out = NULL, *err = NULL;\n\tstruct mg_file fout = STRUCT_FILE_INITIALIZER;\n\tpid_t pid = (pid_t)-1;\n\n\tif (conn == NULL) {\n\t\treturn;\n\t}\n\n\tbuf = NULL;\n\tbuflen = 16384;\n\tprepare_cgi_environment(conn, prog, &blk);\n\n\t/* CGI must be executed in its own directory. 'dir' must point to the\n\t * directory containing executable program, 'p' must point to the\n\t * executable program name relative to 'dir'. */\n\t(void)mg_snprintf(conn, &truncated, dir, sizeof(dir), \"%s\", prog);\n\n\tif (truncated) {\n\t\tmg_cry(conn, \"Error: CGI program \\\"%s\\\": Path too long\", prog);\n\t\tsend_http_error(conn, 500, \"Error: %s\", \"CGI path too long\");\n\t\tgoto done;\n\t}\n\n\tif ((p = strrchr(dir, '/')) != NULL) {\n\t\t*p++ = '\\0';\n\t} else {\n\t\tdir[0] = '.', dir[1] = '\\0';\n\t\tp = (char *)prog;\n\t}\n\n\tif (pipe(fdin) != 0 || pipe(fdout) != 0 || pipe(fderr) != 0) {\n\t\tstatus = strerror(ERRNO);\n\t\tmg_cry(conn,\n\t\t       \"Error: CGI program \\\"%s\\\": Can not create CGI pipes: %s\",\n\t\t       prog,\n\t\t       status);\n\t\tsend_http_error(conn, 500, \"Error: Cannot create CGI pipe: %s\", status);\n\t\tgoto done;\n\t}\n\n\tpid = spawn_process(conn, p, blk.buf, blk.var, fdin, fdout, fderr, dir);\n\n\tif (pid == (pid_t)-1) {\n\t\tstatus = strerror(ERRNO);\n\t\tmg_cry(conn,\n\t\t       \"Error: CGI program \\\"%s\\\": Can not spawn CGI process: %s\",\n\t\t       prog,\n\t\t       status);\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Cannot spawn CGI process [%s]: %s\",\n\t\t                prog,\n\t\t                status);\n\t\tgoto done;\n\t}\n\n\t/* Make sure child closes all pipe descriptors. It must dup them to 0,1 */\n\tset_close_on_exec((SOCKET)fdin[0], conn);  /* stdin read */\n\tset_close_on_exec((SOCKET)fdout[1], conn); /* stdout write */\n\tset_close_on_exec((SOCKET)fderr[1], conn); /* stderr write */\n\tset_close_on_exec((SOCKET)fdin[1], conn);  /* stdin write */\n\tset_close_on_exec((SOCKET)fdout[0], conn); /* stdout read */\n\tset_close_on_exec((SOCKET)fderr[0], conn); /* stderr read */\n\n\t/* Parent closes only one side of the pipes.\n\t * If we don't mark them as closed, close() attempt before\n\t * return from this function throws an exception on Windows.\n\t * Windows does not like when closed descriptor is closed again. */\n\t(void)close(fdin[0]);\n\t(void)close(fdout[1]);\n\t(void)close(fderr[1]);\n\tfdin[0] = fdout[1] = fderr[1] = -1;\n\n\tif ((in = fdopen(fdin[1], \"wb\")) == NULL) {\n\t\tstatus = strerror(ERRNO);\n\t\tmg_cry(conn,\n\t\t       \"Error: CGI program \\\"%s\\\": Can not open stdin: %s\",\n\t\t       prog,\n\t\t       status);\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: CGI can not open fdin\\nfopen: %s\",\n\t\t                status);\n\t\tgoto done;\n\t}\n\n\tif ((out = fdopen(fdout[0], \"rb\")) == NULL) {\n\t\tstatus = strerror(ERRNO);\n\t\tmg_cry(conn,\n\t\t       \"Error: CGI program \\\"%s\\\": Can not open stdout: %s\",\n\t\t       prog,\n\t\t       status);\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: CGI can not open fdout\\nfopen: %s\",\n\t\t                status);\n\t\tgoto done;\n\t}\n\n\tif ((err = fdopen(fderr[0], \"rb\")) == NULL) {\n\t\tstatus = strerror(ERRNO);\n\t\tmg_cry(conn,\n\t\t       \"Error: CGI program \\\"%s\\\": Can not open stderr: %s\",\n\t\t       prog,\n\t\t       status);\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: CGI can not open fdout\\nfopen: %s\",\n\t\t                status);\n\t\tgoto done;\n\t}\n\n\tsetbuf(in, NULL);\n\tsetbuf(out, NULL);\n\tsetbuf(err, NULL);\n\tfout.access.fp = out;\n\n\tif ((conn->request_info.content_length > 0) || conn->is_chunked) {\n\t\t/* This is a POST/PUT request, or another request with body data. */\n\t\tif (!forward_body_data(conn, in, INVALID_SOCKET, NULL)) {\n\t\t\t/* Error sending the body data */\n\t\t\tmg_cry(conn,\n\t\t\t       \"Error: CGI program \\\"%s\\\": Forward body data failed\",\n\t\t\t       prog);\n\t\t\tgoto done;\n\t\t}\n\t}\n\n\t/* Close so child gets an EOF. */\n\tfclose(in);\n\tin = NULL;\n\tfdin[1] = -1;\n\n\t/* Now read CGI reply into a buffer. We need to set correct\n\t * status code, thus we need to see all HTTP headers first.\n\t * Do not send anything back to client, until we buffer in all\n\t * HTTP headers. */\n\tdata_len = 0;\n\tbuf = (char *)mg_malloc(buflen);\n\tif (buf == NULL) {\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Not enough memory for CGI buffer (%u bytes)\",\n\t\t                (unsigned int)buflen);\n\t\tmg_cry(conn,\n\t\t       \"Error: CGI program \\\"%s\\\": Not enough memory for buffer (%u \"\n\t\t       \"bytes)\",\n\t\t       prog,\n\t\t       (unsigned int)buflen);\n\t\tgoto done;\n\t}\n\theaders_len = read_request(out, conn, buf, (int)buflen, &data_len);\n\tif (headers_len <= 0) {\n\n\t\t/* Could not parse the CGI response. Check if some error message on\n\t\t * stderr. */\n\t\ti = pull_all(err, conn, buf, (int)buflen);\n\t\tif (i > 0) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"Error: CGI program \\\"%s\\\" sent error \"\n\t\t\t       \"message: [%.*s]\",\n\t\t\t       prog,\n\t\t\t       i,\n\t\t\t       buf);\n\t\t\tsend_http_error(conn,\n\t\t\t                500,\n\t\t\t                \"Error: CGI program \\\"%s\\\" sent error \"\n\t\t\t                \"message: [%.*s]\",\n\t\t\t                prog,\n\t\t\t                i,\n\t\t\t                buf);\n\t\t} else {\n\t\t\tmg_cry(conn,\n\t\t\t       \"Error: CGI program sent malformed or too big \"\n\t\t\t       \"(>%u bytes) HTTP headers: [%.*s]\",\n\t\t\t       (unsigned)buflen,\n\t\t\t       data_len,\n\t\t\t       buf);\n\n\t\t\tsend_http_error(conn,\n\t\t\t                500,\n\t\t\t                \"Error: CGI program sent malformed or too big \"\n\t\t\t                \"(>%u bytes) HTTP headers: [%.*s]\",\n\t\t\t                (unsigned)buflen,\n\t\t\t                data_len,\n\t\t\t                buf);\n\t\t}\n\n\t\tgoto done;\n\t}\n\tpbuf = buf;\n\tbuf[headers_len - 1] = '\\0';\n\tparse_http_headers(&pbuf, &ri);\n\n\t/* Make up and send the status line */\n\tstatus_text = \"OK\";\n\tif ((status = get_header(&ri, \"Status\")) != NULL) {\n\t\tconn->status_code = atoi(status);\n\t\tstatus_text = status;\n\t\twhile (isdigit(*(const unsigned char *)status_text)\n\t\t       || *status_text == ' ') {\n\t\t\tstatus_text++;\n\t\t}\n\t} else if (get_header(&ri, \"Location\") != NULL) {\n\t\tconn->status_code = 302;\n\t} else {\n\t\tconn->status_code = 200;\n\t}\n\tconnection_state = get_header(&ri, \"Connection\");\n\tif (!header_has_option(connection_state, \"keep-alive\")) {\n\t\tconn->must_close = 1;\n\t}\n\t(void)mg_printf(conn, \"HTTP/1.1 %d %s\\r\\n\", conn->status_code, status_text);\n\n\t/* Send headers */\n\tfor (i = 0; i < ri.num_headers; i++) {\n\t\tmg_printf(conn,\n\t\t          \"%s: %s\\r\\n\",\n\t\t          ri.http_headers[i].name,\n\t\t          ri.http_headers[i].value);\n\t}\n\tmg_write(conn, \"\\r\\n\", 2);\n\n\t/* Send chunk of data that may have been read after the headers */\n\tconn->num_bytes_sent +=\n\t    mg_write(conn, buf + headers_len, (size_t)(data_len - headers_len));\n\n\t/* Read the rest of CGI output and send to the client */\n\tsend_file_data(conn, &fout, 0, INT64_MAX);\n\ndone:\n\tmg_free(blk.var);\n\tmg_free(blk.buf);\n\n\tif (pid != (pid_t)-1) {\n\t\tkill(pid, SIGKILL);\n#if !defined(_WIN32)\n\t\t{\n\t\t\tint st;\n\t\t\twhile (waitpid(pid, &st, 0) != -1)\n\t\t\t\t; /* clean zombies */\n\t\t}\n#endif\n\t}\n\tif (fdin[0] != -1) {\n\t\tclose(fdin[0]);\n\t}\n\tif (fdout[1] != -1) {\n\t\tclose(fdout[1]);\n\t}\n\n\tif (in != NULL) {\n\t\tfclose(in);\n\t} else if (fdin[1] != -1) {\n\t\tclose(fdin[1]);\n\t}\n\n\tif (out != NULL) {\n\t\tfclose(out);\n\t} else if (fdout[0] != -1) {\n\t\tclose(fdout[0]);\n\t}\n\n\tif (err != NULL) {\n\t\tfclose(err);\n\t} else if (fderr[0] != -1) {\n\t\tclose(fderr[0]);\n\t}\n\n\tif (buf != NULL) {\n\t\tmg_free(buf);\n\t}\n}\n#endif /* !NO_CGI */\n\n\n#if !defined(NO_FILES)\nstatic void\nmkcol(struct mg_connection *conn, const char *path)\n{\n\tint rc, body_len;\n\tstruct de de;\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\n\tif (conn == NULL) {\n\t\treturn;\n\t}\n\n\t/* TODO (mid): Check the send_http_error situations in this function */\n\n\tmemset(&de.file, 0, sizeof(de.file));\n\tif (!mg_stat(conn, path, &de.file)) {\n\t\tmg_cry(conn,\n\t\t       \"%s: mg_stat(%s) failed: %s\",\n\t\t       __func__,\n\t\t       path,\n\t\t       strerror(ERRNO));\n\t}\n\n\tif (de.file.last_modified) {\n\t\t/* TODO (high): This check does not seem to make any sense ! */\n\t\tsend_http_error(\n\t\t    conn, 405, \"Error: mkcol(%s): %s\", path, strerror(ERRNO));\n\t\treturn;\n\t}\n\n\tbody_len = conn->data_len - conn->request_len;\n\tif (body_len > 0) {\n\t\tsend_http_error(\n\t\t    conn, 415, \"Error: mkcol(%s): %s\", path, strerror(ERRNO));\n\t\treturn;\n\t}\n\n\trc = mg_mkdir(conn, path, 0755);\n\n\tif (rc == 0) {\n\t\tconn->status_code = 201;\n\t\tgmt_time_string(date, sizeof(date), &curtime);\n\t\tmg_printf(conn,\n\t\t          \"HTTP/1.1 %d Created\\r\\n\"\n\t\t          \"Date: %s\\r\\n\",\n\t\t          conn->status_code,\n\t\t          date);\n\t\tsend_static_cache_header(conn);\n\t\tmg_printf(conn,\n\t\t          \"Content-Length: 0\\r\\n\"\n\t\t          \"Connection: %s\\r\\n\\r\\n\",\n\t\t          suggest_connection_header(conn));\n\t} else if (rc == -1) {\n\t\tif (errno == EEXIST) {\n\t\t\tsend_http_error(\n\t\t\t    conn, 405, \"Error: mkcol(%s): %s\", path, strerror(ERRNO));\n\t\t} else if (errno == EACCES) {\n\t\t\tsend_http_error(\n\t\t\t    conn, 403, \"Error: mkcol(%s): %s\", path, strerror(ERRNO));\n\t\t} else if (errno == ENOENT) {\n\t\t\tsend_http_error(\n\t\t\t    conn, 409, \"Error: mkcol(%s): %s\", path, strerror(ERRNO));\n\t\t} else {\n\t\t\tsend_http_error(conn, 500, \"fopen(%s): %s\", path, strerror(ERRNO));\n\t\t}\n\t}\n}\n\n\nstatic void\nput_file(struct mg_connection *conn, const char *path)\n{\n\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\tconst char *range;\n\tint64_t r1, r2;\n\tint rc;\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\n\tif (conn == NULL) {\n\t\treturn;\n\t}\n\n\tif (mg_stat(conn, path, &file.stat)) {\n\t\t/* File already exists */\n\t\tconn->status_code = 200;\n\n\t\tif (file.stat.is_directory) {\n\t\t\t/* This is an already existing directory,\n\t\t\t * so there is nothing to do for the server. */\n\t\t\trc = 0;\n\n\t\t} else {\n\t\t\t/* File exists and is not a directory. */\n\t\t\t/* Can it be replaced? */\n\n\t\t\tif (file.access.membuf != NULL) {\n\t\t\t\t/* This is an \"in-memory\" file, that can not be replaced */\n\t\t\t\tsend_http_error(\n\t\t\t\t    conn,\n\t\t\t\t    405,\n\t\t\t\t    \"Error: Put not possible\\nReplacing %s is not supported\",\n\t\t\t\t    path);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/* Check if the server may write this file */\n\t\t\tif (access(path, W_OK) == 0) {\n\t\t\t\t/* Access granted */\n\t\t\t\tconn->status_code = 200;\n\t\t\t\trc = 1;\n\t\t\t} else {\n\t\t\t\tsend_http_error(\n\t\t\t\t    conn,\n\t\t\t\t    403,\n\t\t\t\t    \"Error: Put not possible\\nReplacing %s is not allowed\",\n\t\t\t\t    path);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t/* File should be created */\n\t\tconn->status_code = 201;\n\t\trc = put_dir(conn, path);\n\t}\n\n\tif (rc == 0) {\n\t\t/* put_dir returns 0 if path is a directory */\n\t\tgmt_time_string(date, sizeof(date), &curtime);\n\t\tmg_printf(conn,\n\t\t          \"HTTP/1.1 %d %s\\r\\n\",\n\t\t          conn->status_code,\n\t\t          mg_get_response_code_text(NULL, conn->status_code));\n\t\tsend_no_cache_header(conn);\n\t\tmg_printf(conn,\n\t\t          \"Date: %s\\r\\n\"\n\t\t          \"Content-Length: 0\\r\\n\"\n\t\t          \"Connection: %s\\r\\n\\r\\n\",\n\t\t          date,\n\t\t          suggest_connection_header(conn));\n\n\t\t/* Request to create a directory has been fulfilled successfully.\n\t\t * No need to put a file. */\n\t\treturn;\n\t}\n\n\tif (rc == -1) {\n\t\t/* put_dir returns -1 if the path is too long */\n\t\tsend_http_error(conn,\n\t\t                414,\n\t\t                \"Error: Path too long\\nput_dir(%s): %s\",\n\t\t                path,\n\t\t                strerror(ERRNO));\n\t\treturn;\n\t}\n\n\tif (rc == -2) {\n\t\t/* put_dir returns -2 if the directory can not be created */\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Can not create directory\\nput_dir(%s): %s\",\n\t\t                path,\n\t\t                strerror(ERRNO));\n\t\treturn;\n\t}\n\n\t/* A file should be created or overwritten. */\n\t/* TODO: Test if write or write+read is required. */\n\tif (!mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &file)\n\t    || file.access.fp == NULL) {\n\t\t(void)mg_fclose(&file.access);\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Can not create file\\nfopen(%s): %s\",\n\t\t                path,\n\t\t                strerror(ERRNO));\n\t\treturn;\n\t}\n\n\tfclose_on_exec(&file.access, conn);\n\trange = mg_get_header(conn, \"Content-Range\");\n\tr1 = r2 = 0;\n\tif (range != NULL && parse_range_header(range, &r1, &r2) > 0) {\n\t\tconn->status_code = 206; /* Partial content */\n\t\tfseeko(file.access.fp, r1, SEEK_SET);\n\t}\n\n\tif (!forward_body_data(conn, file.access.fp, INVALID_SOCKET, NULL)) {\n\t\t/* forward_body_data failed.\n\t\t * The error code has already been sent to the client,\n\t\t * and conn->status_code is already set. */\n\t\t(void)mg_fclose(&file.access);\n\t\treturn;\n\t}\n\n\tif (mg_fclose(&file.access) != 0) {\n\t\t/* fclose failed. This might have different reasons, but a likely\n\t\t * one is \"no space on disk\", http 507. */\n\t\tconn->status_code = 507;\n\t}\n\n\tgmt_time_string(date, sizeof(date), &curtime);\n\tmg_printf(conn,\n\t          \"HTTP/1.1 %d %s\\r\\n\",\n\t          conn->status_code,\n\t          mg_get_response_code_text(NULL, conn->status_code));\n\tsend_no_cache_header(conn);\n\tmg_printf(conn,\n\t          \"Date: %s\\r\\n\"\n\t          \"Content-Length: 0\\r\\n\"\n\t          \"Connection: %s\\r\\n\\r\\n\",\n\t          date,\n\t          suggest_connection_header(conn));\n}\n\n\nstatic void\ndelete_file(struct mg_connection *conn, const char *path)\n{\n\tstruct de de;\n\tmemset(&de.file, 0, sizeof(de.file));\n\tif (!mg_stat(conn, path, &de.file)) {\n\t\t/* mg_stat returns 0 if the file does not exist */\n\t\tsend_http_error(conn,\n\t\t                404,\n\t\t                \"Error: Cannot delete file\\nFile %s not found\",\n\t\t                path);\n\t\treturn;\n\t}\n\n#if 0 /* Ignore if a file in memory is inside a folder */\n\tif (de.access.membuf != NULL) {\n\t\t/* the file is cached in memory */\n\t\tsend_http_error(\n\t\t    conn,\n\t\t    405,\n\t\t    \"Error: Delete not possible\\nDeleting %s is not supported\",\n\t\t    path);\n\t\treturn;\n\t}\n#endif\n\n\tif (de.file.is_directory) {\n\t\tif (remove_directory(conn, path)) {\n\t\t\t/* Delete is successful: Return 204 without content. */\n\t\t\tsend_http_error(conn, 204, \"%s\", \"\");\n\t\t} else {\n\t\t\t/* Delete is not successful: Return 500 (Server error). */\n\t\t\tsend_http_error(conn, 500, \"Error: Could not delete %s\", path);\n\t\t}\n\t\treturn;\n\t}\n\n\t/* This is an existing file (not a directory).\n\t * Check if write permission is granted. */\n\tif (access(path, W_OK) != 0) {\n\t\t/* File is read only */\n\t\tsend_http_error(\n\t\t    conn,\n\t\t    403,\n\t\t    \"Error: Delete not possible\\nDeleting %s is not allowed\",\n\t\t    path);\n\t\treturn;\n\t}\n\n\t/* Try to delete it. */\n\tif (mg_remove(conn, path) == 0) {\n\t\t/* Delete was successful: Return 204 without content. */\n\t\tsend_http_error(conn, 204, \"%s\", \"\");\n\t} else {\n\t\t/* Delete not successful (file locked). */\n\t\tsend_http_error(conn,\n\t\t                423,\n\t\t                \"Error: Cannot delete file\\nremove(%s): %s\",\n\t\t                path,\n\t\t                strerror(ERRNO));\n\t}\n}\n#endif /* !NO_FILES */\n\n\nstatic void\nsend_ssi_file(struct mg_connection *, const char *, struct mg_file *, int);\n\n\nstatic void\ndo_ssi_include(struct mg_connection *conn,\n               const char *ssi,\n               char *tag,\n               int include_level)\n{\n\tchar file_name[MG_BUF_LEN], path[512], *p;\n\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\tsize_t len;\n\tint truncated = 0;\n\n\tif (conn == NULL) {\n\t\treturn;\n\t}\n\n\t/* sscanf() is safe here, since send_ssi_file() also uses buffer\n\t * of size MG_BUF_LEN to get the tag. So strlen(tag) is\n\t * always < MG_BUF_LEN. */\n\tif (sscanf(tag, \" virtual=\\\"%511[^\\\"]\\\"\", file_name) == 1) {\n\t\t/* File name is relative to the webserver root */\n\t\tfile_name[511] = 0;\n\t\t(void)mg_snprintf(conn,\n\t\t                  &truncated,\n\t\t                  path,\n\t\t                  sizeof(path),\n\t\t                  \"%s/%s\",\n\t\t                  conn->ctx->config[DOCUMENT_ROOT],\n\t\t                  file_name);\n\n\t} else if (sscanf(tag, \" abspath=\\\"%511[^\\\"]\\\"\", file_name) == 1) {\n\t\t/* File name is relative to the webserver working directory\n\t\t * or it is absolute system path */\n\t\tfile_name[511] = 0;\n\t\t(void)\n\t\t    mg_snprintf(conn, &truncated, path, sizeof(path), \"%s\", file_name);\n\n\t} else if (sscanf(tag, \" file=\\\"%511[^\\\"]\\\"\", file_name) == 1\n\t           || sscanf(tag, \" \\\"%511[^\\\"]\\\"\", file_name) == 1) {\n\t\t/* File name is relative to the currect document */\n\t\tfile_name[511] = 0;\n\t\t(void)mg_snprintf(conn, &truncated, path, sizeof(path), \"%s\", ssi);\n\n\t\tif (!truncated) {\n\t\t\tif ((p = strrchr(path, '/')) != NULL) {\n\t\t\t\tp[1] = '\\0';\n\t\t\t}\n\t\t\tlen = strlen(path);\n\t\t\t(void)mg_snprintf(conn,\n\t\t\t                  &truncated,\n\t\t\t                  path + len,\n\t\t\t                  sizeof(path) - len,\n\t\t\t                  \"%s\",\n\t\t\t                  file_name);\n\t\t}\n\n\t} else {\n\t\tmg_cry(conn, \"Bad SSI #include: [%s]\", tag);\n\t\treturn;\n\t}\n\n\tif (truncated) {\n\t\tmg_cry(conn, \"SSI #include path length overflow: [%s]\", tag);\n\t\treturn;\n\t}\n\n\tif (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, &file)) {\n\t\tmg_cry(conn,\n\t\t       \"Cannot open SSI #include: [%s]: fopen(%s): %s\",\n\t\t       tag,\n\t\t       path,\n\t\t       strerror(ERRNO));\n\t} else {\n\t\tfclose_on_exec(&file.access, conn);\n\t\tif (match_prefix(conn->ctx->config[SSI_EXTENSIONS],\n\t\t                 strlen(conn->ctx->config[SSI_EXTENSIONS]),\n\t\t                 path) > 0) {\n\t\t\tsend_ssi_file(conn, path, &file, include_level + 1);\n\t\t} else {\n\t\t\tsend_file_data(conn, &file, 0, INT64_MAX);\n\t\t}\n\t\t(void)mg_fclose(&file.access); /* Ignore errors for readonly files */\n\t}\n}\n\n\n#if !defined(NO_POPEN)\nstatic void\ndo_ssi_exec(struct mg_connection *conn, char *tag)\n{\n\tchar cmd[1024] = \"\";\n\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\n\tif (sscanf(tag, \" \\\"%1023[^\\\"]\\\"\", cmd) != 1) {\n\t\tmg_cry(conn, \"Bad SSI #exec: [%s]\", tag);\n\t} else {\n\t\tcmd[1023] = 0;\n\t\tif ((file.access.fp = popen(cmd, \"r\")) == NULL) {\n\t\t\tmg_cry(conn, \"Cannot SSI #exec: [%s]: %s\", cmd, strerror(ERRNO));\n\t\t} else {\n\t\t\tsend_file_data(conn, &file, 0, INT64_MAX);\n\t\t\tpclose(file.access.fp);\n\t\t}\n\t}\n}\n#endif /* !NO_POPEN */\n\n\nstatic int\nmg_fgetc(struct mg_file *filep, int offset)\n{\n\tif (filep == NULL) {\n\t\treturn EOF;\n\t}\n\tif (filep->access.membuf != NULL && offset >= 0\n\t    && ((unsigned int)(offset)) < filep->stat.size) {\n\t\treturn ((const unsigned char *)filep->access.membuf)[offset];\n\t} else if (filep->access.fp != NULL) {\n\t\treturn fgetc(filep->access.fp);\n\t} else {\n\t\treturn EOF;\n\t}\n}\n\n\nstatic void\nsend_ssi_file(struct mg_connection *conn,\n              const char *path,\n              struct mg_file *filep,\n              int include_level)\n{\n\tchar buf[MG_BUF_LEN];\n\tint ch, offset, len, in_ssi_tag;\n\n\tif (include_level > 10) {\n\t\tmg_cry(conn, \"SSI #include level is too deep (%s)\", path);\n\t\treturn;\n\t}\n\n\tin_ssi_tag = len = offset = 0;\n\twhile ((ch = mg_fgetc(filep, offset)) != EOF) {\n\t\tif (in_ssi_tag && ch == '>') {\n\t\t\tin_ssi_tag = 0;\n\t\t\tbuf[len++] = (char)ch;\n\t\t\tbuf[len] = '\\0';\n\t\t\t/* assert(len <= (int) sizeof(buf)); */\n\t\t\tif (len > (int)sizeof(buf)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (len < 6 || memcmp(buf, \"<!--#\", 5) != 0) {\n\t\t\t\t/* Not an SSI tag, pass it */\n\t\t\t\t(void)mg_write(conn, buf, (size_t)len);\n\t\t\t} else {\n\t\t\t\tif (!memcmp(buf + 5, \"include\", 7)) {\n\t\t\t\t\tdo_ssi_include(conn, path, buf + 12, include_level);\n#if !defined(NO_POPEN)\n\t\t\t\t} else if (!memcmp(buf + 5, \"exec\", 4)) {\n\t\t\t\t\tdo_ssi_exec(conn, buf + 9);\n#endif /* !NO_POPEN */\n\t\t\t\t} else {\n\t\t\t\t\tmg_cry(conn,\n\t\t\t\t\t       \"%s: unknown SSI \"\n\t\t\t\t\t       \"command: \\\"%s\\\"\",\n\t\t\t\t\t       path,\n\t\t\t\t\t       buf);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlen = 0;\n\t\t} else if (in_ssi_tag) {\n\t\t\tif (len == 5 && memcmp(buf, \"<!--#\", 5) != 0) {\n\t\t\t\t/* Not an SSI tag */\n\t\t\t\tin_ssi_tag = 0;\n\t\t\t} else if (len == (int)sizeof(buf) - 2) {\n\t\t\t\tmg_cry(conn, \"%s: SSI tag is too large\", path);\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t\tbuf[len++] = (char)(ch & 0xff);\n\t\t} else if (ch == '<') {\n\t\t\tin_ssi_tag = 1;\n\t\t\tif (len > 0) {\n\t\t\t\tmg_write(conn, buf, (size_t)len);\n\t\t\t}\n\t\t\tlen = 0;\n\t\t\tbuf[len++] = (char)(ch & 0xff);\n\t\t} else {\n\t\t\tbuf[len++] = (char)(ch & 0xff);\n\t\t\tif (len == (int)sizeof(buf)) {\n\t\t\t\tmg_write(conn, buf, (size_t)len);\n\t\t\t\tlen = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Send the rest of buffered data */\n\tif (len > 0) {\n\t\tmg_write(conn, buf, (size_t)len);\n\t}\n}\n\n\nstatic void\nhandle_ssi_file_request(struct mg_connection *conn,\n                        const char *path,\n                        struct mg_file *filep)\n{\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\tconst char *cors1, *cors2, *cors3;\n\n\tif (conn == NULL || path == NULL || filep == NULL) {\n\t\treturn;\n\t}\n\n\tif (mg_get_header(conn, \"Origin\")) {\n\t\t/* Cross-origin resource sharing (CORS). */\n\t\tcors1 = \"Access-Control-Allow-Origin: \";\n\t\tcors2 = conn->ctx->config[ACCESS_CONTROL_ALLOW_ORIGIN];\n\t\tcors3 = \"\\r\\n\";\n\t} else {\n\t\tcors1 = cors2 = cors3 = \"\";\n\t}\n\n\tif (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, filep)) {\n\t\t/* File exists (precondition for calling this function),\n\t\t * but can not be opened by the server. */\n\t\tsend_http_error(conn,\n\t\t                500,\n\t\t                \"Error: Cannot read file\\nfopen(%s): %s\",\n\t\t                path,\n\t\t                strerror(ERRNO));\n\t} else {\n\t\tconn->must_close = 1;\n\t\tgmt_time_string(date, sizeof(date), &curtime);\n\t\tfclose_on_exec(&filep->access, conn);\n\t\tmg_printf(conn, \"HTTP/1.1 200 OK\\r\\n\");\n\t\tsend_no_cache_header(conn);\n\t\tmg_printf(conn,\n\t\t          \"%s%s%s\"\n\t\t          \"Date: %s\\r\\n\"\n\t\t          \"Content-Type: text/html\\r\\n\"\n\t\t          \"Connection: %s\\r\\n\\r\\n\",\n\t\t          cors1,\n\t\t          cors2,\n\t\t          cors3,\n\t\t          date,\n\t\t          suggest_connection_header(conn));\n\t\tsend_ssi_file(conn, path, filep, 0);\n\t\t(void)mg_fclose(&filep->access); /* Ignore errors for readonly files */\n\t}\n}\n\n\n#if !defined(NO_FILES)\nstatic void\nsend_options(struct mg_connection *conn)\n{\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\n\tif (!conn) {\n\t\treturn;\n\t}\n\n\tconn->status_code = 200;\n\tconn->must_close = 1;\n\tgmt_time_string(date, sizeof(date), &curtime);\n\n\tmg_printf(conn,\n\t          \"HTTP/1.1 200 OK\\r\\n\"\n\t          \"Date: %s\\r\\n\"\n\t          /* TODO: \"Cache-Control\" (?) */\n\t          \"Connection: %s\\r\\n\"\n\t          \"Allow: GET, POST, HEAD, CONNECT, PUT, DELETE, OPTIONS, \"\n\t          \"PROPFIND, MKCOL\\r\\n\"\n\t          \"DAV: 1\\r\\n\\r\\n\",\n\t          date,\n\t          suggest_connection_header(conn));\n}\n\n\n/* Writes PROPFIND properties for a collection element */\nstatic void\nprint_props(struct mg_connection *conn,\n            const char *uri,\n            struct mg_file_stat *filep)\n{\n\tchar mtime[64];\n\n\tif (conn == NULL || uri == NULL || filep == NULL) {\n\t\treturn;\n\t}\n\n\tgmt_time_string(mtime, sizeof(mtime), &filep->last_modified);\n\tconn->num_bytes_sent +=\n\t    mg_printf(conn,\n\t              \"<d:response>\"\n\t              \"<d:href>%s</d:href>\"\n\t              \"<d:propstat>\"\n\t              \"<d:prop>\"\n\t              \"<d:resourcetype>%s</d:resourcetype>\"\n\t              \"<d:getcontentlength>%\" INT64_FMT \"</d:getcontentlength>\"\n\t              \"<d:getlastmodified>%s</d:getlastmodified>\"\n\t              \"</d:prop>\"\n\t              \"<d:status>HTTP/1.1 200 OK</d:status>\"\n\t              \"</d:propstat>\"\n\t              \"</d:response>\\n\",\n\t              uri,\n\t              filep->is_directory ? \"<d:collection/>\" : \"\",\n\t              filep->size,\n\t              mtime);\n}\n\n\nstatic void\nprint_dav_dir_entry(struct de *de, void *data)\n{\n\tchar href[PATH_MAX];\n\tchar href_encoded[PATH_MAX * 3 /* worst case */];\n\tint truncated;\n\n\tstruct mg_connection *conn = (struct mg_connection *)data;\n\tif (!de || !conn) {\n\t\treturn;\n\t}\n\tmg_snprintf(conn,\n\t            &truncated,\n\t            href,\n\t            sizeof(href),\n\t            \"%s%s\",\n\t            conn->request_info.local_uri,\n\t            de->file_name);\n\n\tif (!truncated) {\n\t\tmg_url_encode(href, href_encoded, PATH_MAX * 3);\n\t\tprint_props(conn, href_encoded, &de->file);\n\t}\n}\n\n\nstatic void\nhandle_propfind(struct mg_connection *conn,\n                const char *path,\n                struct mg_file_stat *filep)\n{\n\tconst char *depth = mg_get_header(conn, \"Depth\");\n\tchar date[64];\n\ttime_t curtime = time(NULL);\n\n\tgmt_time_string(date, sizeof(date), &curtime);\n\n\tif (!conn || !path || !filep || !conn->ctx) {\n\t\treturn;\n\t}\n\n\tconn->must_close = 1;\n\tconn->status_code = 207;\n\tmg_printf(conn,\n\t          \"HTTP/1.1 207 Multi-Status\\r\\n\"\n\t          \"Date: %s\\r\\n\",\n\t          date);\n\tsend_static_cache_header(conn);\n\tmg_printf(conn,\n\t          \"Connection: %s\\r\\n\"\n\t          \"Content-Type: text/xml; charset=utf-8\\r\\n\\r\\n\",\n\t          suggest_connection_header(conn));\n\n\tconn->num_bytes_sent +=\n\t    mg_printf(conn,\n\t              \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\"\n\t              \"<d:multistatus xmlns:d='DAV:'>\\n\");\n\n\t/* Print properties for the requested resource itself */\n\tprint_props(conn, conn->request_info.local_uri, filep);\n\n\t/* If it is a directory, print directory entries too if Depth is not 0 */\n\tif (filep && filep->is_directory\n\t    && !mg_strcasecmp(conn->ctx->config[ENABLE_DIRECTORY_LISTING], \"yes\")\n\t    && (depth == NULL || strcmp(depth, \"0\") != 0)) {\n\t\tscan_directory(conn, path, conn, &print_dav_dir_entry);\n\t}\n\n\tconn->num_bytes_sent += mg_printf(conn, \"%s\\n\", \"</d:multistatus>\");\n}\n#endif\n\nvoid\nmg_lock_connection(struct mg_connection *conn)\n{\n\tif (conn) {\n\t\t(void)pthread_mutex_lock(&conn->mutex);\n\t}\n}\n\nvoid\nmg_unlock_connection(struct mg_connection *conn)\n{\n\tif (conn) {\n\t\t(void)pthread_mutex_unlock(&conn->mutex);\n\t}\n}\n\nvoid\nmg_lock_context(struct mg_context *ctx)\n{\n\tif (ctx) {\n\t\t(void)pthread_mutex_lock(&ctx->nonce_mutex);\n\t}\n}\n\nvoid\nmg_unlock_context(struct mg_context *ctx)\n{\n\tif (ctx) {\n\t\t(void)pthread_mutex_unlock(&ctx->nonce_mutex);\n\t}\n}\n\n#if defined(USE_TIMERS)\n#include \"timer.inl\"\n#endif /* USE_TIMERS */\n\n#ifdef USE_LUA\n#include \"mod_lua.inl\"\n#endif /* USE_LUA */\n\n#ifdef USE_DUKTAPE\n#include \"mod_duktape.inl\"\n#endif /* USE_DUKTAPE */\n\n#if defined(USE_WEBSOCKET)\n\n#define SHA_API static\n#include \"sha1.inl\"\n\nstatic int\nsend_websocket_handshake(struct mg_connection *conn, const char *websock_key)\n{\n\tstatic const char *magic = \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";\n\tchar buf[100], sha[20], b64_sha[sizeof(sha) * 2];\n\tSHA1_CTX sha_ctx;\n\tint truncated;\n\n\t/* Calculate Sec-WebSocket-Accept reply from Sec-WebSocket-Key. */\n\tmg_snprintf(conn, &truncated, buf, sizeof(buf), \"%s%s\", websock_key, magic);\n\tif (truncated) {\n\t\tconn->must_close = 1;\n\t\treturn 0;\n\t}\n\n\tSHA1_Init(&sha_ctx);\n\tSHA1_Update(&sha_ctx, (unsigned char *)buf, (uint32_t)strlen(buf));\n\tSHA1_Final(&sha_ctx, (unsigned char *)sha);\n\tbase64_encode((unsigned char *)sha, sizeof(sha), b64_sha);\n\tmg_printf(conn,\n\t          \"HTTP/1.1 101 Switching Protocols\\r\\n\"\n\t          \"Upgrade: websocket\\r\\n\"\n\t          \"Connection: Upgrade\\r\\n\"\n\t          \"Sec-WebSocket-Accept: %s\\r\\n\",\n\t          b64_sha);\n\tif (conn->request_info.acceptedWebSocketSubprotocol) {\n\t\tmg_printf(conn,\n\t\t          \"Sec-WebSocket-Protocol: %s\\r\\n\\r\\n\",\n\t\t          conn->request_info.acceptedWebSocketSubprotocol);\n\t} else {\n\t\tmg_printf(conn, \"%s\", \"\\r\\n\");\n\t}\n\n\treturn 1;\n}\n\n\nstatic void\nread_websocket(struct mg_connection *conn,\n               mg_websocket_data_handler ws_data_handler,\n               void *callback_data)\n{\n\t/* Pointer to the beginning of the portion of the incoming websocket\n\t * message queue.\n\t * The original websocket upgrade request is never removed, so the queue\n\t * begins after it. */\n\tunsigned char *buf = (unsigned char *)conn->buf + conn->request_len;\n\tint n, error, exit_by_callback;\n\n\t/* body_len is the length of the entire queue in bytes\n\t * len is the length of the current message\n\t * data_len is the length of the current message's data payload\n\t * header_len is the length of the current message's header */\n\tsize_t i, len, mask_len = 0, data_len = 0, header_len, body_len;\n\n\t/* \"The masking key is a 32-bit value chosen at random by the client.\"\n\t * http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17#section-5\n\t*/\n\tunsigned char mask[4];\n\n\t/* data points to the place where the message is stored when passed to\n\t * the\n\t * websocket_data callback.  This is either mem on the stack, or a\n\t * dynamically allocated buffer if it is too large. */\n\tunsigned char mem[4096];\n\tunsigned char *data = mem;\n\tunsigned char mop; /* mask flag and opcode */\n\tdouble timeout = -1.0;\n\n\tif (conn->ctx->config[WEBSOCKET_TIMEOUT]) {\n\t\ttimeout = atoi(conn->ctx->config[WEBSOCKET_TIMEOUT]) / 1000.0;\n\t}\n\tif ((timeout <= 0.0) && (conn->ctx->config[REQUEST_TIMEOUT])) {\n\t\ttimeout = atoi(conn->ctx->config[REQUEST_TIMEOUT]) / 1000.0;\n\t}\n\n\tmg_set_thread_name(\"wsock\");\n\n\t/* Loop continuously, reading messages from the socket, invoking the\n\t * callback, and waiting repeatedly until an error occurs. */\n\twhile (!conn->ctx->stop_flag) {\n\t\theader_len = 0;\n\t\tassert(conn->data_len >= conn->request_len);\n\t\tif ((body_len = (size_t)(conn->data_len - conn->request_len)) >= 2) {\n\t\t\tlen = buf[1] & 127;\n\t\t\tmask_len = (buf[1] & 128) ? 4 : 0;\n\t\t\tif ((len < 126) && (body_len >= mask_len)) {\n\t\t\t\tdata_len = len;\n\t\t\t\theader_len = 2 + mask_len;\n\t\t\t} else if ((len == 126) && (body_len >= (4 + mask_len))) {\n\t\t\t\theader_len = 4 + mask_len;\n\t\t\t\tdata_len = ((((size_t)buf[2]) << 8) + buf[3]);\n\t\t\t} else if (body_len >= (10 + mask_len)) {\n\t\t\t\theader_len = 10 + mask_len;\n\t\t\t\tdata_len = (((uint64_t)ntohl(*(uint32_t *)(void *)&buf[2]))\n\t\t\t\t            << 32) + ntohl(*(uint32_t *)(void *)&buf[6]);\n\t\t\t}\n\t\t}\n\n\t\tif (header_len > 0 && body_len >= header_len) {\n\t\t\t/* Allocate space to hold websocket payload */\n\t\t\tdata = mem;\n\t\t\tif (data_len > sizeof(mem)) {\n\t\t\t\tdata = (unsigned char *)mg_malloc(data_len);\n\t\t\t\tif (data == NULL) {\n\t\t\t\t\t/* Allocation failed, exit the loop and then close the\n\t\t\t\t\t * connection */\n\t\t\t\t\tmg_cry(conn, \"websocket out of memory; closing connection\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Copy the mask before we shift the queue and destroy it */\n\t\t\tif (mask_len > 0) {\n\t\t\t\tmemcpy(mask, buf + header_len - mask_len, sizeof(mask));\n\t\t\t} else {\n\t\t\t\tmemset(mask, 0, sizeof(mask));\n\t\t\t}\n\n\t\t\t/* Read frame payload from the first message in the queue into\n\t\t\t * data and advance the queue by moving the memory in place. */\n\t\t\tassert(body_len >= header_len);\n\t\t\tif (data_len + header_len > body_len) {\n\t\t\t\tmop = buf[0]; /* current mask and opcode */\n\t\t\t\t/* Overflow case */\n\t\t\t\tlen = body_len - header_len;\n\t\t\t\tmemcpy(data, buf + header_len, len);\n\t\t\t\terror = 0;\n\t\t\t\twhile (len < data_len) {\n\t\t\t\t\tn = pull(NULL,\n\t\t\t\t\t         conn,\n\t\t\t\t\t         (char *)(data + len),\n\t\t\t\t\t         (int)(data_len - len),\n\t\t\t\t\t         timeout);\n\t\t\t\t\tif (n <= 0) {\n\t\t\t\t\t\terror = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tlen += (size_t)n;\n\t\t\t\t}\n\t\t\t\tif (error) {\n\t\t\t\t\tmg_cry(conn, \"Websocket pull failed; closing connection\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tconn->data_len = conn->request_len;\n\t\t\t} else {\n\t\t\t\tmop = buf[0]; /* current mask and opcode, overwritten by\n\t\t\t\t               * memmove() */\n\t\t\t\t/* Length of the message being read at the front of the\n\t\t\t\t * queue */\n\t\t\t\tlen = data_len + header_len;\n\n\t\t\t\t/* Copy the data payload into the data pointer for the\n\t\t\t\t * callback */\n\t\t\t\tmemcpy(data, buf + header_len, data_len);\n\n\t\t\t\t/* Move the queue forward len bytes */\n\t\t\t\tmemmove(buf, buf + len, body_len - len);\n\n\t\t\t\t/* Mark the queue as advanced */\n\t\t\t\tconn->data_len -= (int)len;\n\t\t\t}\n\n\t\t\t/* Apply mask if necessary */\n\t\t\tif (mask_len > 0) {\n\t\t\t\tfor (i = 0; i < data_len; ++i) {\n\t\t\t\t\tdata[i] ^= mask[i & 3];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Exit the loop if callback signals to exit (server side),\n\t\t\t * or \"connection close\" opcode received (client side). */\n\t\t\texit_by_callback = 0;\n\t\t\tif ((ws_data_handler != NULL)\n\t\t\t    && !ws_data_handler(\n\t\t\t           conn, mop, (char *)data, data_len, callback_data)) {\n\t\t\t\texit_by_callback = 1;\n\t\t\t}\n\n\t\t\tif (data != mem) {\n\t\t\t\tmg_free(data);\n\t\t\t}\n\n\t\t\tif (exit_by_callback\n\t\t\t    || ((mop & 0xf) == WEBSOCKET_OPCODE_CONNECTION_CLOSE)) {\n\t\t\t\t/* Opcode == 8, connection close */\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t/* Not breaking the loop, process next websocket frame. */\n\t\t} else {\n\t\t\t/* Read from the socket into the next available location in the\n\t\t\t * message queue. */\n\t\t\tif ((n = pull(NULL,\n\t\t\t              conn,\n\t\t\t              conn->buf + conn->data_len,\n\t\t\t              conn->buf_size - conn->data_len,\n\t\t\t              timeout)) <= 0) {\n\t\t\t\t/* Error, no bytes read */\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconn->data_len += n;\n\t\t}\n\t}\n\n\tmg_set_thread_name(\"worker\");\n}\n\n\nstatic int\nmg_websocket_write_exec(struct mg_connection *conn,\n                        int opcode,\n                        const char *data,\n                        size_t dataLen,\n                        uint32_t masking_key)\n{\n\tunsigned char header[14];\n\tsize_t headerLen = 1;\n\n\tint retval = -1;\n\n#if defined(__MINGW32__) || defined(__GNUC__) && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5)))\n/* Disable spurious conversion warning for GCC */\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wconversion\"\n#endif\n\n\theader[0] = 0x80u | (unsigned char)((unsigned)opcode & 0xf);\n\n#if defined(__MINGW32__) || defined(__GNUC__) && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5)))\n#pragma GCC diagnostic pop\n#endif\n\n\t/* Frame format: http://tools.ietf.org/html/rfc6455#section-5.2 */\n\tif (dataLen < 126) {\n\t\t/* inline 7-bit length field */\n\t\theader[1] = (unsigned char)dataLen;\n\t\theaderLen = 2;\n\t} else if (dataLen <= 0xFFFF) {\n\t\t/* 16-bit length field */\n\t\tuint16_t len = htons((uint16_t)dataLen);\n\t\theader[1] = 126;\n\t\tmemcpy(header + 2, &len, 2);\n\t\theaderLen = 4;\n\t} else {\n\t\t/* 64-bit length field */\n\t\tuint32_t len1 = htonl((uint32_t)((uint64_t)dataLen >> 32));\n\t\tuint32_t len2 = htonl((uint32_t)(dataLen & 0xFFFFFFFFu));\n\t\theader[1] = 127;\n\t\tmemcpy(header + 2, &len1, 4);\n\t\tmemcpy(header + 6, &len2, 4);\n\t\theaderLen = 10;\n\t}\n\n\tif (masking_key) {\n\t\t/* add mask */\n\t\theader[1] |= 0x80;\n\t\tmemcpy(header + headerLen, &masking_key, 4);\n\t\theaderLen += 4;\n\t}\n\n\n\t/* Note that POSIX/Winsock's send() is threadsafe\n\t * http://stackoverflow.com/questions/1981372/are-parallel-calls-to-send-recv-on-the-same-socket-valid\n\t * but mongoose's mg_printf/mg_write is not (because of the loop in\n\t * push(), although that is only a problem if the packet is large or\n\t * outgoing buffer is full). */\n\t(void)mg_lock_connection(conn);\n\tretval = mg_write(conn, header, headerLen);\n\tif (dataLen > 0) {\n\t\tretval = mg_write(conn, data, dataLen);\n\t}\n\tmg_unlock_connection(conn);\n\n\treturn retval;\n}\n\nint\nmg_websocket_write(struct mg_connection *conn,\n                   int opcode,\n                   const char *data,\n                   size_t dataLen)\n{\n\treturn mg_websocket_write_exec(conn, opcode, data, dataLen, 0);\n}\n\n\nstatic void\nmask_data(const char *in, size_t in_len, uint32_t masking_key, char *out)\n{\n\tsize_t i = 0;\n\n\ti = 0;\n\tif ((in_len > 3) && ((ptrdiff_t)in % 4) == 0) {\n\t\t/* Convert in 32 bit words, if data is 4 byte aligned */\n\t\twhile (i < (in_len - 3)) {\n\t\t\t*(uint32_t *)(void *)(out + i) =\n\t\t\t    *(uint32_t *)(void *)(in + i) ^ masking_key;\n\t\t\ti += 4;\n\t\t}\n\t}\n\tif (i != in_len) {\n\t\t/* convert 1-3 remaining bytes if ((dataLen % 4) != 0)*/\n\t\twhile (i < in_len) {\n\t\t\t*(uint8_t *)(void *)(out + i) =\n\t\t\t    *(uint8_t *)(void *)(in + i)\n\t\t\t    ^ *(((uint8_t *)&masking_key) + (i % 4));\n\t\t\ti++;\n\t\t}\n\t}\n}\n\n\nint\nmg_websocket_client_write(struct mg_connection *conn,\n                          int opcode,\n                          const char *data,\n                          size_t dataLen)\n{\n\tint retval = -1;\n\tchar *masked_data = (char *)mg_malloc(((dataLen + 7) / 4) * 4);\n\tuint32_t masking_key = (uint32_t)get_random();\n\n\tif (masked_data == NULL) {\n\t\t/* Return -1 in an error case */\n\t\tmg_cry(conn,\n\t\t       \"Cannot allocate buffer for masked websocket response: \"\n\t\t       \"Out of memory\");\n\t\treturn -1;\n\t}\n\n\tmask_data(data, dataLen, masking_key, masked_data);\n\n\tretval = mg_websocket_write_exec(\n\t    conn, opcode, masked_data, dataLen, masking_key);\n\tmg_free(masked_data);\n\n\treturn retval;\n}\n\n\nstatic void\nhandle_websocket_request(struct mg_connection *conn,\n                         const char *path,\n                         int is_callback_resource,\n                         struct mg_websocket_subprotocols *subprotocols,\n                         mg_websocket_connect_handler ws_connect_handler,\n                         mg_websocket_ready_handler ws_ready_handler,\n                         mg_websocket_data_handler ws_data_handler,\n                         mg_websocket_close_handler ws_close_handler,\n                         void *cbData)\n{\n\tconst char *websock_key = mg_get_header(conn, \"Sec-WebSocket-Key\");\n\tconst char *version = mg_get_header(conn, \"Sec-WebSocket-Version\");\n\tint lua_websock = 0;\n\n#if !defined(USE_LUA)\n\t(void)path;\n#endif\n\n\t/* Step 1: Check websocket protocol version. */\n\t/* Step 1.1: Check Sec-WebSocket-Key. */\n\tif (!websock_key) {\n\t\t/* The RFC standard version (https://tools.ietf.org/html/rfc6455)\n\t\t * requires a Sec-WebSocket-Key header.\n\t\t */\n\t\t/* It could be the hixie draft version\n\t\t * (http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76).\n\t\t */\n\t\tconst char *key1 = mg_get_header(conn, \"Sec-WebSocket-Key1\");\n\t\tconst char *key2 = mg_get_header(conn, \"Sec-WebSocket-Key2\");\n\t\tchar key3[8];\n\n\t\tif ((key1 != NULL) && (key2 != NULL)) {\n\t\t\t/* This version uses 8 byte body data in a GET request */\n\t\t\tconn->content_len = 8;\n\t\t\tif (8 == mg_read(conn, key3, 8)) {\n\t\t\t\t/* This is the hixie version */\n\t\t\t\tsend_http_error(conn,\n\t\t\t\t                426,\n\t\t\t\t                \"%s\",\n\t\t\t\t                \"Protocol upgrade to RFC 6455 required\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t/* This is an unknown version */\n\t\tsend_http_error(conn, 400, \"%s\", \"Malformed websocket request\");\n\t\treturn;\n\t}\n\n\t/* Step 1.2: Check websocket protocol version. */\n\t/* The RFC version (https://tools.ietf.org/html/rfc6455) is 13. */\n\tif (version == NULL || strcmp(version, \"13\") != 0) {\n\t\t/* Reject wrong versions */\n\t\tsend_http_error(conn, 426, \"%s\", \"Protocol upgrade required\");\n\t\treturn;\n\t}\n\n\t/* Step 1.3: Could check for \"Host\", but we do not really nead this\n\t * value for anything, so just ignore it. */\n\n\t/* Step 2: If a callback is responsible, call it. */\n\tif (is_callback_resource) {\n\t\t/* Step 2.1 check and select subprotocol */\n\t\tconst char *protocol = mg_get_header(conn, \"Sec-WebSocket-Protocol\");\n\t\tif (protocol && subprotocols) {\n\t\t\tint idx;\n\t\t\tunsigned long len;\n\t\t\tconst char *sep, *curSubProtocol,\n\t\t\t    *acceptedWebSocketSubprotocol = NULL;\n\n\n\t\t\t/* look for matching subprotocol */\n\t\t\tdo {\n\t\t\t\tsep = strchr(protocol, ',');\n\t\t\t\tcurSubProtocol = protocol;\n\t\t\t\tlen = sep ? (unsigned long)(sep - protocol) : strlen(protocol);\n\t\t\t\twhile (sep && isspace(*++sep))\n\t\t\t\t\t; // ignore leading whitespaces\n\t\t\t\tprotocol = sep;\n\n\n\t\t\t\tfor (idx = 0; idx < subprotocols->nb_subprotocols; idx++) {\n\t\t\t\t\tif ((strlen(subprotocols->subprotocols[idx]) == len)\n\t\t\t\t\t    && (strncmp(curSubProtocol,\n\t\t\t\t\t                subprotocols->subprotocols[idx],\n\t\t\t\t\t                len) == 0)) {\n\t\t\t\t\t\tacceptedWebSocketSubprotocol =\n\t\t\t\t\t\t    subprotocols->subprotocols[idx];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (sep && !acceptedWebSocketSubprotocol);\n\n\t\t\tconn->request_info.acceptedWebSocketSubprotocol =\n\t\t\t    acceptedWebSocketSubprotocol;\n\t\t} else if (protocol) {\n\t\t\t/* keep legacy behavior */\n\n\t\t\t/* The protocol is a comma seperated list of names. */\n\t\t\t/* The server must only return one value from this list. */\n\t\t\t/* First check if it is a list or just a single value. */\n\t\t\tconst char *sep = strrchr(protocol, ',');\n\t\t\tif (sep == NULL) {\n\t\t\t\t/* Just a single protocol -> accept it. */\n\t\t\t\tconn->request_info.acceptedWebSocketSubprotocol = protocol;\n\t\t\t} else {\n\t\t\t\t/* Multiple protocols -> accept the last one. */\n\t\t\t\t/* This is just a quick fix if the client offers multiple\n\t\t\t\t * protocols. The handler should have a list of accepted\n\t\t\t\t * protocols on his own\n\t\t\t\t * and use it to select one protocol among those the client has\n\t\t\t\t * offered.\n\t\t\t\t */\n\t\t\t\twhile (isspace(*++sep))\n\t\t\t\t\t; // ignore leading whitespaces\n\t\t\t\tconn->request_info.acceptedWebSocketSubprotocol = sep;\n\t\t\t}\n\t\t}\n\n\t\tif (ws_connect_handler != NULL\n\t\t    && ws_connect_handler(conn, cbData) != 0) {\n\t\t\t/* C callback has returned non-zero, do not proceed with\n\t\t\t * handshake.\n\t\t\t */\n\t\t\t/* Note that C callbacks are no longer called when Lua is\n\t\t\t * responsible, so C can no longer filter callbacks for Lua. */\n\t\t\treturn;\n\t\t}\n\t}\n#if defined(USE_LUA)\n\t/* Step 3: No callback. Check if Lua is responsible. */\n\telse {\n\t\t/* Step 3.1: Check if Lua is responsible. */\n\t\tif (conn->ctx->config[LUA_WEBSOCKET_EXTENSIONS]) {\n\t\t\tlua_websock =\n\t\t\t    match_prefix(conn->ctx->config[LUA_WEBSOCKET_EXTENSIONS],\n\t\t\t                 strlen(\n\t\t\t                     conn->ctx->config[LUA_WEBSOCKET_EXTENSIONS]),\n\t\t\t                 path);\n\t\t}\n\n\t\tif (lua_websock) {\n\t\t\t/* Step 3.2: Lua is responsible: call it. */\n\t\t\tconn->lua_websocket_state = lua_websocket_new(path, conn);\n\t\t\tif (!conn->lua_websocket_state) {\n\t\t\t\t/* Lua rejected the new client */\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n#endif\n\n\t/* Step 4: Check if there is a responsible websocket handler. */\n\tif (!is_callback_resource && !lua_websock) {\n\t\t/* There is no callback, and Lua is not responsible either. */\n\t\t/* Reply with a 404 Not Found or with nothing at all?\n\t\t * TODO (mid): check the websocket standards, how to reply to\n\t\t * requests to invalid websocket addresses. */\n\t\tsend_http_error(conn, 404, \"%s\", \"Not found\");\n\t\treturn;\n\t}\n\n\t/* Step 5: The websocket connection has been accepted */\n\tif (!send_websocket_handshake(conn, websock_key)) {\n\t\tsend_http_error(conn, 500, \"%s\", \"Websocket handshake failed\");\n\t\treturn;\n\t}\n\n\t/* Step 6: Call the ready handler */\n\tif (is_callback_resource) {\n\t\tif (ws_ready_handler != NULL) {\n\t\t\tws_ready_handler(conn, cbData);\n\t\t}\n#if defined(USE_LUA)\n\t} else if (lua_websock) {\n\t\tif (!lua_websocket_ready(conn, conn->lua_websocket_state)) {\n\t\t\t/* the ready handler returned false */\n\t\t\treturn;\n\t\t}\n#endif\n\t}\n\n\t/* Step 7: Enter the read loop */\n\tif (is_callback_resource) {\n\t\tread_websocket(conn, ws_data_handler, cbData);\n#if defined(USE_LUA)\n\t} else if (lua_websock) {\n\t\tread_websocket(conn, lua_websocket_data, conn->lua_websocket_state);\n#endif\n\t}\n\n\t/* Step 8: Call the close handler */\n\tif (ws_close_handler) {\n\t\tws_close_handler(conn, cbData);\n\t}\n}\n\n\nstatic int\nis_websocket_protocol(const struct mg_connection *conn)\n{\n\tconst char *upgrade, *connection;\n\n\t/* A websocket protocoll has the following HTTP headers:\n\t *\n\t * Connection: Upgrade\n\t * Upgrade: Websocket\n\t */\n\n\tupgrade = mg_get_header(conn, \"Upgrade\");\n\tif (upgrade == NULL) {\n\t\treturn 0; /* fail early, don't waste time checking other header\n\t\t           * fields\n\t\t             */\n\t}\n\tif (!mg_strcasestr(upgrade, \"websocket\")) {\n\t\treturn 0;\n\t}\n\n\tconnection = mg_get_header(conn, \"Connection\");\n\tif (connection == NULL) {\n\t\treturn 0;\n\t}\n\tif (!mg_strcasestr(connection, \"upgrade\")) {\n\t\treturn 0;\n\t}\n\n\t/* The headers \"Host\", \"Sec-WebSocket-Key\", \"Sec-WebSocket-Protocol\" and\n\t * \"Sec-WebSocket-Version\" are also required.\n\t * Don't check them here, since even an unsupported websocket protocol\n\t * request still IS a websocket request (in contrast to a standard HTTP\n\t * request). It will fail later in handle_websocket_request.\n\t */\n\n\treturn 1;\n}\n#endif /* !USE_WEBSOCKET */\n\n\nstatic int\nisbyte(int n)\n{\n\treturn n >= 0 && n <= 255;\n}\n\n\nstatic int\nparse_net(const char *spec, uint32_t *net, uint32_t *mask)\n{\n\tint n, a, b, c, d, slash = 32, len = 0;\n\n\tif ((sscanf(spec, \"%d.%d.%d.%d/%d%n\", &a, &b, &c, &d, &slash, &n) == 5\n\t     || sscanf(spec, \"%d.%d.%d.%d%n\", &a, &b, &c, &d, &n) == 4) && isbyte(a)\n\t    && isbyte(b) && isbyte(c) && isbyte(d) && slash >= 0\n\t    && slash < 33) {\n\t\tlen = n;\n\t\t*net = ((uint32_t)a << 24) | ((uint32_t)b << 16) | ((uint32_t)c << 8)\n\t\t       | (uint32_t)d;\n\t\t*mask = slash ? (0xffffffffU << (32 - slash)) : 0;\n\t}\n\n\treturn len;\n}\n\n\nstatic int\nset_throttle(const char *spec, uint32_t remote_ip, const char *uri)\n{\n\tint throttle = 0;\n\tstruct vec vec, val;\n\tuint32_t net, mask;\n\tchar mult;\n\tdouble v;\n\n\twhile ((spec = next_option(spec, &vec, &val)) != NULL) {\n\t\tmult = ',';\n\t\tif ((val.ptr == NULL) || (sscanf(val.ptr, \"%lf%c\", &v, &mult) < 1)\n\t\t    || (v < 0) || ((lowercase(&mult) != 'k')\n\t\t                   && (lowercase(&mult) != 'm') && (mult != ','))) {\n\t\t\tcontinue;\n\t\t}\n\t\tv *= (lowercase(&mult) == 'k')\n\t\t         ? 1024\n\t\t         : ((lowercase(&mult) == 'm') ? 1048576 : 1);\n\t\tif (vec.len == 1 && vec.ptr[0] == '*') {\n\t\t\tthrottle = (int)v;\n\t\t} else if (parse_net(vec.ptr, &net, &mask) > 0) {\n\t\t\tif ((remote_ip & mask) == net) {\n\t\t\t\tthrottle = (int)v;\n\t\t\t}\n\t\t} else if (match_prefix(vec.ptr, vec.len, uri) > 0) {\n\t\t\tthrottle = (int)v;\n\t\t}\n\t}\n\n\treturn throttle;\n}\n\n\nstatic uint32_t\nget_remote_ip(const struct mg_connection *conn)\n{\n\tif (!conn) {\n\t\treturn 0;\n\t}\n\treturn ntohl(*(const uint32_t *)&conn->client.rsa.sin.sin_addr);\n}\n\n\n/* The mg_upload function is superseeded by mg_handle_form_request. */\n#include \"handle_form.inl\"\n\n\n#if defined(MG_LEGACY_INTERFACE)\n/* Implement the deprecated mg_upload function by calling the new\n * mg_handle_form_request function. While mg_upload could only handle\n * HTML forms sent as POST request in multipart/form-data format\n * containing only file input elements, mg_handle_form_request can\n * handle all form input elements and all standard request methods. */\nstruct mg_upload_user_data {\n\tstruct mg_connection *conn;\n\tconst char *destination_dir;\n\tint num_uploaded_files;\n};\n\n\n/* Helper function for deprecated mg_upload. */\nstatic int\nmg_upload_field_found(const char *key,\n                      const char *filename,\n                      char *path,\n                      size_t pathlen,\n                      void *user_data)\n{\n\tint truncated = 0;\n\tstruct mg_upload_user_data *fud = (struct mg_upload_user_data *)user_data;\n\t(void)key;\n\n\tif (!filename) {\n\t\tmg_cry(fud->conn, \"%s: No filename set\", __func__);\n\t\treturn FORM_FIELD_STORAGE_ABORT;\n\t}\n\tmg_snprintf(fud->conn,\n\t            &truncated,\n\t            path,\n\t            pathlen - 1,\n\t            \"%s/%s\",\n\t            fud->destination_dir,\n\t            filename);\n\tif (!truncated) {\n\t\tmg_cry(fud->conn, \"%s: File path too long\", __func__);\n\t\treturn FORM_FIELD_STORAGE_ABORT;\n\t}\n\treturn FORM_FIELD_STORAGE_STORE;\n}\n\n\n/* Helper function for deprecated mg_upload. */\nstatic int\nmg_upload_field_get(const char *key,\n                    const char *value,\n                    size_t value_size,\n                    void *user_data)\n{\n\t/* Function should never be called */\n\t(void)key;\n\t(void)value;\n\t(void)value_size;\n\t(void)user_data;\n\n\treturn 0;\n}\n\n\n/* Helper function for deprecated mg_upload. */\nstatic int\nmg_upload_field_stored(const char *path, long long file_size, void *user_data)\n{\n\tstruct mg_upload_user_data *fud = (struct mg_upload_user_data *)user_data;\n\t(void)file_size;\n\n\tfud->num_uploaded_files++;\n\tfud->conn->ctx->callbacks.upload(fud->conn, path);\n\n\treturn 0;\n}\n\n\n/* Deprecated function mg_upload - use mg_handle_form_request instead. */\nint\nmg_upload(struct mg_connection *conn, const char *destination_dir)\n{\n\tstruct mg_upload_user_data fud = {conn, destination_dir, 0};\n\tstruct mg_form_data_handler fdh = {mg_upload_field_found,\n\t                                   mg_upload_field_get,\n\t                                   mg_upload_field_stored,\n\t                                   0};\n\tint ret;\n\n\tfdh.user_data = (void *)&fud;\n\tret = mg_handle_form_request(conn, &fdh);\n\n\tif (ret < 0) {\n\t\tmg_cry(conn, \"%s: Error while parsing the request\", __func__);\n\t}\n\n\treturn fud.num_uploaded_files;\n}\n#endif\n\n\nstatic int\nget_first_ssl_listener_index(const struct mg_context *ctx)\n{\n\tunsigned int i;\n\tint idx = -1;\n\tif (ctx) {\n\t\tfor (i = 0; idx == -1 && i < ctx->num_listening_sockets; i++) {\n\t\t\tidx = ctx->listening_sockets[i].is_ssl ? ((int)(i)) : -1;\n\t\t}\n\t}\n\treturn idx;\n}\n\n\nstatic void\nredirect_to_https_port(struct mg_connection *conn, int ssl_index)\n{\n\tchar host[1025];\n\tconst char *host_header;\n\tsize_t hostlen;\n\n\thost_header = mg_get_header(conn, \"Host\");\n\thostlen = sizeof(host);\n\tif (host_header != NULL) {\n\t\tchar *pos;\n\n\t\tmg_strlcpy(host, host_header, hostlen);\n\t\thost[hostlen - 1] = '\\0';\n\t\tpos = strchr(host, ':');\n\t\tif (pos != NULL) {\n\t\t\t*pos = '\\0';\n\t\t}\n\t} else {\n\t\t/* Cannot get host from the Host: header.\n\t\t * Fallback to our IP address. */\n\t\tif (conn) {\n\t\t\tsockaddr_to_string(host, hostlen, &conn->client.lsa);\n\t\t}\n\t}\n\n\t/* Send host, port, uri and (if it exists) ?query_string */\n\tif (conn) {\n\t\tmg_printf(conn,\n\t\t          \"HTTP/1.1 302 Found\\r\\nLocation: https://%s:%d%s%s%s\\r\\n\\r\\n\",\n\t\t          host,\n#if defined(USE_IPV6)\n\t\t          (conn->ctx->listening_sockets[ssl_index].lsa.sa.sa_family\n\t\t           == AF_INET6)\n\t\t              ? (int)ntohs(conn->ctx->listening_sockets[ssl_index]\n\t\t                               .lsa.sin6.sin6_port)\n\t\t              :\n#endif\n\t\t              (int)ntohs(conn->ctx->listening_sockets[ssl_index]\n\t\t                             .lsa.sin.sin_port),\n\t\t          conn->request_info.local_uri,\n\t\t          (conn->request_info.query_string == NULL) ? \"\" : \"?\",\n\t\t          (conn->request_info.query_string == NULL)\n\t\t              ? \"\"\n\t\t              : conn->request_info.query_string);\n\t}\n}\n\n\nstatic void\nmg_set_handler_type(struct mg_context *ctx,\n                    const char *uri,\n                    int handler_type,\n                    int is_delete_request,\n                    mg_request_handler handler,\n                    struct mg_websocket_subprotocols *subprotocols,\n                    mg_websocket_connect_handler connect_handler,\n                    mg_websocket_ready_handler ready_handler,\n                    mg_websocket_data_handler data_handler,\n                    mg_websocket_close_handler close_handler,\n                    mg_authorization_handler auth_handler,\n                    void *cbdata)\n{\n\tstruct mg_handler_info *tmp_rh, **lastref;\n\tsize_t urilen = strlen(uri);\n\n\tif (handler_type == WEBSOCKET_HANDLER) {\n\t\t/* assert(handler == NULL); */\n\t\t/* assert(is_delete_request || connect_handler!=NULL ||\n\t\t *        ready_handler!=NULL || data_handler!=NULL ||\n\t\t *        close_handler!=NULL);\n\t\t */\n\t\t/* assert(auth_handler == NULL); */\n\t\tif (handler != NULL) {\n\t\t\treturn;\n\t\t}\n\t\tif (!is_delete_request && connect_handler == NULL\n\t\t    && ready_handler == NULL\n\t\t    && data_handler == NULL\n\t\t    && close_handler == NULL) {\n\t\t\treturn;\n\t\t}\n\t\tif (auth_handler != NULL) {\n\t\t\treturn;\n\t\t}\n\t} else if (handler_type == REQUEST_HANDLER) {\n\t\t/* assert(connect_handler==NULL && ready_handler==NULL &&\n\t\t *        data_handler==NULL && close_handler==NULL); */\n\t\t/* assert(is_delete_request || (handler!=NULL));\n\t\t */\n\t\t/* assert(auth_handler == NULL); */\n\t\tif (connect_handler != NULL || ready_handler != NULL\n\t\t    || data_handler != NULL\n\t\t    || close_handler != NULL) {\n\t\t\treturn;\n\t\t}\n\t\tif (!is_delete_request && (handler == NULL)) {\n\t\t\treturn;\n\t\t}\n\t\tif (auth_handler != NULL) {\n\t\t\treturn;\n\t\t}\n\t} else { /* AUTH_HANDLER */\n\t\t     /* assert(handler == NULL); */\n\t\t     /* assert(connect_handler==NULL && ready_handler==NULL &&\n\t\t      *        data_handler==NULL && close_handler==NULL); */\n\t\t/* assert(auth_handler != NULL); */\n\t\tif (handler != NULL) {\n\t\t\treturn;\n\t\t}\n\t\tif (connect_handler != NULL || ready_handler != NULL\n\t\t    || data_handler != NULL\n\t\t    || close_handler != NULL) {\n\t\t\treturn;\n\t\t}\n\t\tif (!is_delete_request && (auth_handler == NULL)) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (!ctx) {\n\t\treturn;\n\t}\n\n\tmg_lock_context(ctx);\n\n\t/* first try to find an existing handler */\n\tlastref = &(ctx->handlers);\n\tfor (tmp_rh = ctx->handlers; tmp_rh != NULL; tmp_rh = tmp_rh->next) {\n\t\tif (tmp_rh->handler_type == handler_type) {\n\t\t\tif (urilen == tmp_rh->uri_len && !strcmp(tmp_rh->uri, uri)) {\n\t\t\t\tif (!is_delete_request) {\n\t\t\t\t\t/* update existing handler */\n\t\t\t\t\tif (handler_type == REQUEST_HANDLER) {\n\t\t\t\t\t\ttmp_rh->handler = handler;\n\t\t\t\t\t} else if (handler_type == WEBSOCKET_HANDLER) {\n\t\t\t\t\t\ttmp_rh->subprotocols = subprotocols;\n\t\t\t\t\t\ttmp_rh->connect_handler = connect_handler;\n\t\t\t\t\t\ttmp_rh->ready_handler = ready_handler;\n\t\t\t\t\t\ttmp_rh->data_handler = data_handler;\n\t\t\t\t\t\ttmp_rh->close_handler = close_handler;\n\t\t\t\t\t} else { /* AUTH_HANDLER */\n\t\t\t\t\t\ttmp_rh->auth_handler = auth_handler;\n\t\t\t\t\t}\n\t\t\t\t\ttmp_rh->cbdata = cbdata;\n\t\t\t\t} else {\n\t\t\t\t\t/* remove existing handler */\n\t\t\t\t\t*lastref = tmp_rh->next;\n\t\t\t\t\tmg_free(tmp_rh->uri);\n\t\t\t\t\tmg_free(tmp_rh);\n\t\t\t\t}\n\t\t\t\tmg_unlock_context(ctx);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tlastref = &(tmp_rh->next);\n\t}\n\n\tif (is_delete_request) {\n\t\t/* no handler to set, this was a remove request to a non-existing\n\t\t * handler */\n\t\tmg_unlock_context(ctx);\n\t\treturn;\n\t}\n\n\ttmp_rh =\n\t    (struct mg_handler_info *)mg_calloc(sizeof(struct mg_handler_info), 1);\n\tif (tmp_rh == NULL) {\n\t\tmg_unlock_context(ctx);\n\t\tmg_cry(fc(ctx), \"%s\", \"Cannot create new request handler struct, OOM\");\n\t\treturn;\n\t}\n\ttmp_rh->uri = mg_strdup(uri);\n\tif (!tmp_rh->uri) {\n\t\tmg_unlock_context(ctx);\n\t\tmg_free(tmp_rh);\n\t\tmg_cry(fc(ctx), \"%s\", \"Cannot create new request handler struct, OOM\");\n\t\treturn;\n\t}\n\ttmp_rh->uri_len = urilen;\n\tif (handler_type == REQUEST_HANDLER) {\n\t\ttmp_rh->handler = handler;\n\t} else if (handler_type == WEBSOCKET_HANDLER) {\n\t\ttmp_rh->subprotocols = subprotocols;\n\t\ttmp_rh->connect_handler = connect_handler;\n\t\ttmp_rh->ready_handler = ready_handler;\n\t\ttmp_rh->data_handler = data_handler;\n\t\ttmp_rh->close_handler = close_handler;\n\t} else { /* AUTH_HANDLER */\n\t\ttmp_rh->auth_handler = auth_handler;\n\t}\n\ttmp_rh->cbdata = cbdata;\n\ttmp_rh->handler_type = handler_type;\n\ttmp_rh->next = NULL;\n\n\t*lastref = tmp_rh;\n\tmg_unlock_context(ctx);\n}\n\n\nvoid\nmg_set_request_handler(struct mg_context *ctx,\n                       const char *uri,\n                       mg_request_handler handler,\n                       void *cbdata)\n{\n\tmg_set_handler_type(ctx,\n\t                    uri,\n\t                    REQUEST_HANDLER,\n\t                    handler == NULL,\n\t                    handler,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    cbdata);\n}\n\n\nvoid\nmg_set_websocket_handler(struct mg_context *ctx,\n                         const char *uri,\n                         mg_websocket_connect_handler connect_handler,\n                         mg_websocket_ready_handler ready_handler,\n                         mg_websocket_data_handler data_handler,\n                         mg_websocket_close_handler close_handler,\n                         void *cbdata)\n{\n\tmg_set_websocket_handler_with_subprotocols(ctx,\n\t                                           uri,\n\t                                           NULL,\n\t                                           connect_handler,\n\t                                           ready_handler,\n\t                                           data_handler,\n\t                                           close_handler,\n\t                                           cbdata);\n}\n\n\nvoid\nmg_set_websocket_handler_with_subprotocols(\n    struct mg_context *ctx,\n    const char *uri,\n    struct mg_websocket_subprotocols *subprotocols,\n    mg_websocket_connect_handler connect_handler,\n    mg_websocket_ready_handler ready_handler,\n    mg_websocket_data_handler data_handler,\n    mg_websocket_close_handler close_handler,\n    void *cbdata)\n{\n\tint is_delete_request = (connect_handler == NULL) && (ready_handler == NULL)\n\t                        && (data_handler == NULL)\n\t                        && (close_handler == NULL);\n\tmg_set_handler_type(ctx,\n\t                    uri,\n\t                    WEBSOCKET_HANDLER,\n\t                    is_delete_request,\n\t                    NULL,\n\t                    subprotocols,\n\t                    connect_handler,\n\t                    ready_handler,\n\t                    data_handler,\n\t                    close_handler,\n\t                    NULL,\n\t                    cbdata);\n}\n\n\nvoid\nmg_set_auth_handler(struct mg_context *ctx,\n                    const char *uri,\n                    mg_request_handler handler,\n                    void *cbdata)\n{\n\tmg_set_handler_type(ctx,\n\t                    uri,\n\t                    AUTH_HANDLER,\n\t                    handler == NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    NULL,\n\t                    handler,\n\t                    cbdata);\n}\n\n\nstatic int\nget_request_handler(struct mg_connection *conn,\n                    int handler_type,\n                    mg_request_handler *handler,\n                    struct mg_websocket_subprotocols **subprotocols,\n                    mg_websocket_connect_handler *connect_handler,\n                    mg_websocket_ready_handler *ready_handler,\n                    mg_websocket_data_handler *data_handler,\n                    mg_websocket_close_handler *close_handler,\n                    mg_authorization_handler *auth_handler,\n                    void **cbdata)\n{\n\tconst struct mg_request_info *request_info = mg_get_request_info(conn);\n\tif (request_info) {\n\t\tconst char *uri = request_info->local_uri;\n\t\tsize_t urilen = strlen(uri);\n\t\tstruct mg_handler_info *tmp_rh;\n\n\t\tif (!conn || !conn->ctx) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tmg_lock_context(conn->ctx);\n\n\t\t/* first try for an exact match */\n\t\tfor (tmp_rh = conn->ctx->handlers; tmp_rh != NULL;\n\t\t     tmp_rh = tmp_rh->next) {\n\t\t\tif (tmp_rh->handler_type == handler_type) {\n\t\t\t\tif (urilen == tmp_rh->uri_len && !strcmp(tmp_rh->uri, uri)) {\n\t\t\t\t\tif (handler_type == WEBSOCKET_HANDLER) {\n\t\t\t\t\t\t*subprotocols = tmp_rh->subprotocols;\n\t\t\t\t\t\t*connect_handler = tmp_rh->connect_handler;\n\t\t\t\t\t\t*ready_handler = tmp_rh->ready_handler;\n\t\t\t\t\t\t*data_handler = tmp_rh->data_handler;\n\t\t\t\t\t\t*close_handler = tmp_rh->close_handler;\n\t\t\t\t\t} else if (handler_type == REQUEST_HANDLER) {\n\t\t\t\t\t\t*handler = tmp_rh->handler;\n\t\t\t\t\t} else { /* AUTH_HANDLER */\n\t\t\t\t\t\t*auth_handler = tmp_rh->auth_handler;\n\t\t\t\t\t}\n\t\t\t\t\t*cbdata = tmp_rh->cbdata;\n\t\t\t\t\tmg_unlock_context(conn->ctx);\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* next try for a partial match, we will accept uri/something */\n\t\tfor (tmp_rh = conn->ctx->handlers; tmp_rh != NULL;\n\t\t     tmp_rh = tmp_rh->next) {\n\t\t\tif (tmp_rh->handler_type == handler_type) {\n\t\t\t\tif (tmp_rh->uri_len < urilen && uri[tmp_rh->uri_len] == '/'\n\t\t\t\t    && memcmp(tmp_rh->uri, uri, tmp_rh->uri_len) == 0) {\n\t\t\t\t\tif (handler_type == WEBSOCKET_HANDLER) {\n\t\t\t\t\t\t*subprotocols = tmp_rh->subprotocols;\n\t\t\t\t\t\t*connect_handler = tmp_rh->connect_handler;\n\t\t\t\t\t\t*ready_handler = tmp_rh->ready_handler;\n\t\t\t\t\t\t*data_handler = tmp_rh->data_handler;\n\t\t\t\t\t\t*close_handler = tmp_rh->close_handler;\n\t\t\t\t\t} else if (handler_type == REQUEST_HANDLER) {\n\t\t\t\t\t\t*handler = tmp_rh->handler;\n\t\t\t\t\t} else { /* AUTH_HANDLER */\n\t\t\t\t\t\t*auth_handler = tmp_rh->auth_handler;\n\t\t\t\t\t}\n\t\t\t\t\t*cbdata = tmp_rh->cbdata;\n\t\t\t\t\tmg_unlock_context(conn->ctx);\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* finally try for pattern match */\n\t\tfor (tmp_rh = conn->ctx->handlers; tmp_rh != NULL;\n\t\t     tmp_rh = tmp_rh->next) {\n\t\t\tif (tmp_rh->handler_type == handler_type) {\n\t\t\t\tif (match_prefix(tmp_rh->uri, tmp_rh->uri_len, uri) > 0) {\n\t\t\t\t\tif (handler_type == WEBSOCKET_HANDLER) {\n\t\t\t\t\t\t*subprotocols = tmp_rh->subprotocols;\n\t\t\t\t\t\t*connect_handler = tmp_rh->connect_handler;\n\t\t\t\t\t\t*ready_handler = tmp_rh->ready_handler;\n\t\t\t\t\t\t*data_handler = tmp_rh->data_handler;\n\t\t\t\t\t\t*close_handler = tmp_rh->close_handler;\n\t\t\t\t\t} else if (handler_type == REQUEST_HANDLER) {\n\t\t\t\t\t\t*handler = tmp_rh->handler;\n\t\t\t\t\t} else { /* AUTH_HANDLER */\n\t\t\t\t\t\t*auth_handler = tmp_rh->auth_handler;\n\t\t\t\t\t}\n\t\t\t\t\t*cbdata = tmp_rh->cbdata;\n\t\t\t\t\tmg_unlock_context(conn->ctx);\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmg_unlock_context(conn->ctx);\n\t}\n\treturn 0; /* none found */\n}\n\n\n#if defined(USE_WEBSOCKET) && defined(MG_LEGACY_INTERFACE)\nstatic int\ndeprecated_websocket_connect_wrapper(const struct mg_connection *conn,\n                                     void *cbdata)\n{\n\tstruct mg_callbacks *pcallbacks = (struct mg_callbacks *)cbdata;\n\tif (pcallbacks->websocket_connect) {\n\t\treturn pcallbacks->websocket_connect(conn);\n\t}\n\t/* No handler set - assume \"OK\" */\n\treturn 0;\n}\n\n\nstatic void\ndeprecated_websocket_ready_wrapper(struct mg_connection *conn, void *cbdata)\n{\n\tstruct mg_callbacks *pcallbacks = (struct mg_callbacks *)cbdata;\n\tif (pcallbacks->websocket_ready) {\n\t\tpcallbacks->websocket_ready(conn);\n\t}\n}\n\n\nstatic int\ndeprecated_websocket_data_wrapper(struct mg_connection *conn,\n                                  int bits,\n                                  char *data,\n                                  size_t len,\n                                  void *cbdata)\n{\n\tstruct mg_callbacks *pcallbacks = (struct mg_callbacks *)cbdata;\n\tif (pcallbacks->websocket_data) {\n\t\treturn pcallbacks->websocket_data(conn, bits, data, len);\n\t}\n\t/* No handler set - assume \"OK\" */\n\treturn 1;\n}\n#endif\n\n\n/* This is the heart of the Civetweb's logic.\n * This function is called when the request is read, parsed and validated,\n * and Civetweb must decide what action to take: serve a file, or\n * a directory, or call embedded function, etcetera. */\nstatic void\nhandle_request(struct mg_connection *conn)\n{\n\tif (conn) {\n\t\tstruct mg_request_info *ri = &conn->request_info;\n\t\tchar path[PATH_MAX];\n\t\tint uri_len, ssl_index;\n\t\tint is_found = 0, is_script_resource = 0, is_websocket_request = 0,\n\t\t    is_put_or_delete_request = 0, is_callback_resource = 0;\n\t\tint i;\n\t\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\t\tmg_request_handler callback_handler = NULL;\n\t\tstruct mg_websocket_subprotocols *subprotocols;\n\t\tmg_websocket_connect_handler ws_connect_handler = NULL;\n\t\tmg_websocket_ready_handler ws_ready_handler = NULL;\n\t\tmg_websocket_data_handler ws_data_handler = NULL;\n\t\tmg_websocket_close_handler ws_close_handler = NULL;\n\t\tvoid *callback_data = NULL;\n\t\tmg_authorization_handler auth_handler = NULL;\n\t\tvoid *auth_callback_data = NULL;\n#if !defined(NO_FILES)\n\t\ttime_t curtime = time(NULL);\n\t\tchar date[64];\n#endif\n\n\t\tpath[0] = 0;\n\n\t\tif (!ri) {\n\t\t\treturn;\n\t\t}\n\n\t\t/* 1. get the request url */\n\t\t/* 1.1. split into url and query string */\n\t\tif ((conn->request_info.query_string = strchr(ri->request_uri, '?'))\n\t\t    != NULL) {\n\t\t\t*((char *)conn->request_info.query_string++) = '\\0';\n\t\t}\n\n\t\t/* 1.2. do a https redirect, if required. Do not decode URIs yet. */\n\t\tif (!conn->client.is_ssl && conn->client.ssl_redir) {\n\t\t\tssl_index = get_first_ssl_listener_index(conn->ctx);\n\t\t\tif (ssl_index >= 0) {\n\t\t\t\tredirect_to_https_port(conn, ssl_index);\n\t\t\t} else {\n\t\t\t\t/* A http to https forward port has been specified,\n\t\t\t\t * but no https port to forward to. */\n\t\t\t\tsend_http_error(conn,\n\t\t\t\t                503,\n\t\t\t\t                \"%s\",\n\t\t\t\t                \"Error: SSL forward not configured properly\");\n\t\t\t\tmg_cry(conn, \"Can not redirect to SSL, no SSL port available\");\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\turi_len = (int)strlen(ri->local_uri);\n\n\t\t/* 1.3. decode url (if config says so) */\n\t\tif (should_decode_url(conn)) {\n\t\t\tmg_url_decode(\n\t\t\t    ri->local_uri, uri_len, (char *)ri->local_uri, uri_len + 1, 0);\n\t\t}\n\n\t\t/* 1.4. clean URIs, so a path like allowed_dir/../forbidden_file is\n\t\t * not possible */\n\t\tremove_double_dots_and_double_slashes((char *)ri->local_uri);\n\n\t\t/* step 1. completed, the url is known now */\n\t\turi_len = (int)strlen(ri->local_uri);\n\t\tDEBUG_TRACE(\"URL: %s\", ri->local_uri);\n\n\t\t/* 3. if this ip has limited speed, set it for this connection */\n\t\tconn->throttle = set_throttle(conn->ctx->config[THROTTLE],\n\t\t                              get_remote_ip(conn),\n\t\t                              ri->local_uri);\n\n\t\t/* 4. call a \"handle everything\" callback, if registered */\n\t\tif (conn->ctx->callbacks.begin_request != NULL) {\n\t\t\t/* Note that since V1.7 the \"begin_request\" function is called\n\t\t\t * before an authorization check. If an authorization check is\n\t\t\t * required, use a request_handler instead. */\n\t\t\ti = conn->ctx->callbacks.begin_request(conn);\n\t\t\tif (i > 0) {\n\t\t\t\t/* callback already processed the request. Store the\n\t\t\t\t   return value as a status code for the access log. */\n\t\t\t\tconn->status_code = i;\n\t\t\t\tdiscard_unread_request_data(conn);\n\t\t\t\treturn;\n\t\t\t} else if (i == 0) {\n\t\t\t\t/* civetweb should process the request */\n\t\t\t} else {\n\t\t\t\t/* unspecified - may change with the next version */\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t/* request not yet handled by a handler or redirect, so the request\n\t\t * is processed here */\n\n\t\t/* 5. interpret the url to find out how the request must be handled\n\t\t */\n\t\t/* 5.1. first test, if the request targets the regular http(s)://\n\t\t * protocol namespace or the websocket ws(s):// protocol namespace.\n\t\t */\n\t\tis_websocket_request = is_websocket_protocol(conn);\n\n\t\t/* 5.2. check if the request will be handled by a callback */\n\t\tif (get_request_handler(conn,\n\t\t                        is_websocket_request ? WEBSOCKET_HANDLER\n\t\t                                             : REQUEST_HANDLER,\n\t\t                        &callback_handler,\n\t\t                        &subprotocols,\n\t\t                        &ws_connect_handler,\n\t\t                        &ws_ready_handler,\n\t\t                        &ws_data_handler,\n\t\t                        &ws_close_handler,\n\t\t                        NULL,\n\t\t                        &callback_data)) {\n\t\t\t/* 5.2.1. A callback will handle this request. All requests\n\t\t\t * handled\n\t\t\t * by a callback have to be considered as requests to a script\n\t\t\t * resource. */\n\t\t\tis_callback_resource = 1;\n\t\t\tis_script_resource = 1;\n\t\t\tis_put_or_delete_request = is_put_or_delete_method(conn);\n\t\t} else {\n\t\tno_callback_resource:\n\t\t\t/* 5.2.2. No callback is responsible for this request. The URI\n\t\t\t * addresses a file based resource (static content or Lua/cgi\n\t\t\t * scripts in the file system). */\n\t\t\tis_callback_resource = 0;\n\t\t\tinterpret_uri(conn,\n\t\t\t              path,\n\t\t\t              sizeof(path),\n\t\t\t              &file.stat,\n\t\t\t              &is_found,\n\t\t\t              &is_script_resource,\n\t\t\t              &is_websocket_request,\n\t\t\t              &is_put_or_delete_request);\n\t\t}\n\n\t\t/* 6. authorization check */\n\t\t/* 6.1. a custom authorization handler is installed */\n\t\tif (get_request_handler(conn,\n\t\t                        AUTH_HANDLER,\n\t\t                        NULL,\n\t\t                        NULL,\n\t\t                        NULL,\n\t\t                        NULL,\n\t\t                        NULL,\n\t\t                        NULL,\n\t\t                        &auth_handler,\n\t\t                        &auth_callback_data)) {\n\t\t\tif (!auth_handler(conn, auth_callback_data)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (is_put_or_delete_request && !is_script_resource\n\t\t           && !is_callback_resource) {\n/* 6.2. this request is a PUT/DELETE to a real file */\n/* 6.2.1. thus, the server must have real files */\n#if defined(NO_FILES)\n\t\t\tif (1) {\n#else\n\t\t\tif (conn->ctx->config[DOCUMENT_ROOT] == NULL) {\n#endif\n\t\t\t\t/* This server does not have any real files, thus the\n\t\t\t\t * PUT/DELETE methods are not valid. */\n\t\t\t\tsend_http_error(conn,\n\t\t\t\t                405,\n\t\t\t\t                \"%s method not allowed\",\n\t\t\t\t                conn->request_info.request_method);\n\t\t\t\treturn;\n\t\t\t}\n\n#if !defined(NO_FILES)\n\t\t\t/* 6.2.2. Check if put authorization for static files is\n\t\t\t * available.\n\t\t\t */\n\t\t\tif (!is_authorized_for_put(conn)) {\n\t\t\t\tsend_authorization_request(conn);\n\t\t\t\treturn;\n\t\t\t}\n#endif\n\n\t\t} else {\n\t\t\t/* 6.3. This is either a OPTIONS, GET, HEAD or POST request,\n\t\t\t * or it is a PUT or DELETE request to a resource that does not\n\t\t\t * correspond to a file. Check authorization. */\n\t\t\tif (!check_authorization(conn, path)) {\n\t\t\t\tsend_authorization_request(conn);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t/* request is authorized or does not need authorization */\n\n\t\t/* 7. check if there are request handlers for this uri */\n\t\tif (is_callback_resource) {\n\t\t\tif (!is_websocket_request) {\n\t\t\t\ti = callback_handler(conn, callback_data);\n\t\t\t\tif (i > 0) {\n\t\t\t\t\t/* Do nothing, callback has served the request. Store\n\t\t\t\t\t * the\n\t\t\t\t\t * return value as status code for the log and discard\n\t\t\t\t\t * all\n\t\t\t\t\t * data from the client not used by the callback. */\n\t\t\t\t\tconn->status_code = i;\n\t\t\t\t\tdiscard_unread_request_data(conn);\n\t\t\t\t} else {\n\t\t\t\t\t/* TODO (high): what if the handler did NOT handle the\n\t\t\t\t\t * request */\n\t\t\t\t\t/* The last version did handle this as a file request,\n\t\t\t\t\t * but\n\t\t\t\t\t * since a file request is not always a script resource,\n\t\t\t\t\t * the authorization check might be different */\n\t\t\t\t\tinterpret_uri(conn,\n\t\t\t\t\t              path,\n\t\t\t\t\t              sizeof(path),\n\t\t\t\t\t              &file.stat,\n\t\t\t\t\t              &is_found,\n\t\t\t\t\t              &is_script_resource,\n\t\t\t\t\t              &is_websocket_request,\n\t\t\t\t\t              &is_put_or_delete_request);\n\t\t\t\t\tcallback_handler = NULL;\n\n\t\t\t\t\t/* TODO (very low): goto is deprecated but for the\n\t\t\t\t\t * moment,\n\t\t\t\t\t * a goto is simpler than some curious loop. */\n\t\t\t\t\t/* The situation \"callback does not handle the request\"\n\t\t\t\t\t * needs to be reconsidered anyway. */\n\t\t\t\t\tgoto no_callback_resource;\n\t\t\t\t}\n\t\t\t} else {\n#if defined(USE_WEBSOCKET)\n\t\t\t\thandle_websocket_request(conn,\n\t\t\t\t                         path,\n\t\t\t\t                         is_callback_resource,\n\t\t\t\t                         subprotocols,\n\t\t\t\t                         ws_connect_handler,\n\t\t\t\t                         ws_ready_handler,\n\t\t\t\t                         ws_data_handler,\n\t\t\t\t                         ws_close_handler,\n\t\t\t\t                         callback_data);\n#endif\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n/* 8. handle websocket requests */\n#if defined(USE_WEBSOCKET)\n\t\tif (is_websocket_request) {\n\t\t\tif (is_script_resource) {\n\t\t\t\t/* Websocket Lua script */\n\t\t\t\thandle_websocket_request(conn,\n\t\t\t\t                         path,\n\t\t\t\t                         0 /* Lua Script */,\n\t\t\t\t                         NULL,\n\t\t\t\t                         NULL,\n\t\t\t\t                         NULL,\n\t\t\t\t                         NULL,\n\t\t\t\t                         NULL,\n\t\t\t\t                         &conn->ctx->callbacks);\n\t\t\t} else {\n#if defined(MG_LEGACY_INTERFACE)\n\t\t\t\thandle_websocket_request(\n\t\t\t\t    conn,\n\t\t\t\t    path,\n\t\t\t\t    !is_script_resource /* could be deprecated global callback */,\n\t\t\t\t    NULL,\n\t\t\t\t    deprecated_websocket_connect_wrapper,\n\t\t\t\t    deprecated_websocket_ready_wrapper,\n\t\t\t\t    deprecated_websocket_data_wrapper,\n\t\t\t\t    NULL,\n\t\t\t\t    &conn->ctx->callbacks);\n#else\n\t\t\t\tsend_http_error(conn, 404, \"%s\", \"Not found\");\n#endif\n\t\t\t}\n\t\t\treturn;\n\t\t} else\n#endif\n\n#if defined(NO_FILES)\n\t\t\t/* 9a. In case the server uses only callbacks, this uri is\n\t\t\t * unknown.\n\t\t\t * Then, all request handling ends here. */\n\t\t\tsend_http_error(conn, 404, \"%s\", \"Not Found\");\n\n#else\n\t\t/* 9b. This request is either for a static file or resource handled\n\t\t * by a script file. Thus, a DOCUMENT_ROOT must exist. */\n\t\tif (conn->ctx->config[DOCUMENT_ROOT] == NULL) {\n\t\t\tsend_http_error(conn, 404, \"%s\", \"Not Found\");\n\t\t\treturn;\n\t\t}\n\n\t\t/* 10. File is handled by a script. */\n\t\tif (is_script_resource) {\n\t\t\thandle_file_based_request(conn, path, &file);\n\t\t\treturn;\n\t\t}\n\n\t\t/* 11. Handle put/delete/mkcol requests */\n\t\tif (is_put_or_delete_request) {\n\t\t\t/* 11.1. PUT method */\n\t\t\tif (!strcmp(ri->request_method, \"PUT\")) {\n\t\t\t\tput_file(conn, path);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t/* 11.2. DELETE method */\n\t\t\tif (!strcmp(ri->request_method, \"DELETE\")) {\n\t\t\t\tdelete_file(conn, path);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t/* 11.3. MKCOL method */\n\t\t\tif (!strcmp(ri->request_method, \"MKCOL\")) {\n\t\t\t\tmkcol(conn, path);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t/* 11.4. PATCH method\n\t\t\t * This method is not supported for static resources,\n\t\t\t * only for scripts (Lua, CGI) and callbacks. */\n\t\t\tsend_http_error(conn,\n\t\t\t                405,\n\t\t\t                \"%s method not allowed\",\n\t\t\t                conn->request_info.request_method);\n\t\t\treturn;\n\t\t}\n\n\t\t/* 11. File does not exist, or it was configured that it should be\n\t\t * hidden */\n\t\tif (!is_found || (must_hide_file(conn, path))) {\n\t\t\tsend_http_error(conn, 404, \"%s\", \"Not found\");\n\t\t\treturn;\n\t\t}\n\n\t\t/* 12. Directory uris should end with a slash */\n\t\tif (file.stat.is_directory && (uri_len > 0)\n\t\t    && (ri->local_uri[uri_len - 1] != '/')) {\n\t\t\tgmt_time_string(date, sizeof(date), &curtime);\n\t\t\tmg_printf(conn,\n\t\t\t          \"HTTP/1.1 301 Moved Permanently\\r\\n\"\n\t\t\t          \"Location: %s/\\r\\n\"\n\t\t\t          \"Date: %s\\r\\n\"\n\t\t\t          /* \"Cache-Control: private\\r\\n\" (= default) */\n\t\t\t          \"Content-Length: 0\\r\\n\"\n\t\t\t          \"Connection: %s\\r\\n\\r\\n\",\n\t\t\t          ri->request_uri,\n\t\t\t          date,\n\t\t\t          suggest_connection_header(conn));\n\t\t\treturn;\n\t\t}\n\n\t\t/* 13. Handle other methods than GET/HEAD */\n\t\t/* 13.1. Handle PROPFIND */\n\t\tif (!strcmp(ri->request_method, \"PROPFIND\")) {\n\t\t\thandle_propfind(conn, path, &file.stat);\n\t\t\treturn;\n\t\t}\n\t\t/* 13.2. Handle OPTIONS for files */\n\t\tif (!strcmp(ri->request_method, \"OPTIONS\")) {\n\t\t\t/* This standard handler is only used for real files.\n\t\t\t * Scripts should support the OPTIONS method themselves, to allow a\n\t\t\t * maximum flexibility.\n\t\t\t * Lua and CGI scripts may fully support CORS this way (including\n\t\t\t * preflights). */\n\t\t\tsend_options(conn);\n\t\t\treturn;\n\t\t}\n\t\t/* 13.3. everything but GET and HEAD (e.g. POST) */\n\t\tif (0 != strcmp(ri->request_method, \"GET\")\n\t\t    && 0 != strcmp(ri->request_method, \"HEAD\")) {\n\t\t\tsend_http_error(conn,\n\t\t\t                405,\n\t\t\t                \"%s method not allowed\",\n\t\t\t                conn->request_info.request_method);\n\t\t\treturn;\n\t\t}\n\n\t\t/* 14. directories */\n\t\tif (file.stat.is_directory) {\n\t\t\tif (substitute_index_file(conn, path, sizeof(path), &file)) {\n\t\t\t\t/* 14.1. use a substitute file */\n\t\t\t\t/* TODO (high): substitute index may be a script resource.\n\t\t\t\t * define what should be possible in this case. */\n\t\t\t} else {\n\t\t\t\t/* 14.2. no substitute file */\n\t\t\t\tif (!mg_strcasecmp(conn->ctx->config[ENABLE_DIRECTORY_LISTING],\n\t\t\t\t                   \"yes\")) {\n\t\t\t\t\thandle_directory_request(conn, path);\n\t\t\t\t} else {\n\t\t\t\t\tsend_http_error(conn,\n\t\t\t\t\t                403,\n\t\t\t\t\t                \"%s\",\n\t\t\t\t\t                \"Error: Directory listing denied\");\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\thandle_file_based_request(conn, path, &file);\n#endif /* !defined(NO_FILES) */\n\n#if 0\n            /* Perform redirect and auth checks before calling begin_request()\n             * handler.\n             * Otherwise, begin_request() would need to perform auth checks and\n             * redirects. */\n#endif\n\t}\n\treturn;\n}\n\n\nstatic void\nhandle_file_based_request(struct mg_connection *conn,\n                          const char *path,\n                          struct mg_file *file)\n{\n\tif (!conn || !conn->ctx) {\n\t\treturn;\n\t}\n\n\tif (0) {\n#ifdef USE_LUA\n\t} else if (match_prefix(conn->ctx->config[LUA_SERVER_PAGE_EXTENSIONS],\n\t                        strlen(\n\t                            conn->ctx->config[LUA_SERVER_PAGE_EXTENSIONS]),\n\t                        path) > 0) {\n\t\t/* Lua server page: an SSI like page containing mostly plain html\n\t\t * code\n\t\t * plus some tags with server generated contents. */\n\t\thandle_lsp_request(conn, path, file, NULL);\n\t} else if (match_prefix(conn->ctx->config[LUA_SCRIPT_EXTENSIONS],\n\t                        strlen(conn->ctx->config[LUA_SCRIPT_EXTENSIONS]),\n\t                        path) > 0) {\n\t\t/* Lua in-server module script: a CGI like script used to generate\n\t\t * the\n\t\t * entire reply. */\n\t\tmg_exec_lua_script(conn, path, NULL);\n#endif\n#if defined(USE_DUKTAPE)\n\t} else if (match_prefix(conn->ctx->config[DUKTAPE_SCRIPT_EXTENSIONS],\n\t                        strlen(\n\t                            conn->ctx->config[DUKTAPE_SCRIPT_EXTENSIONS]),\n\t                        path) > 0) {\n\t\t/* Call duktape to generate the page */\n\t\tmg_exec_duktape_script(conn, path);\n#endif\n#if !defined(NO_CGI)\n\t} else if (match_prefix(conn->ctx->config[CGI_EXTENSIONS],\n\t                        strlen(conn->ctx->config[CGI_EXTENSIONS]),\n\t                        path) > 0) {\n\t\t/* CGI scripts may support all HTTP methods */\n\t\thandle_cgi_request(conn, path);\n#endif /* !NO_CGI */\n\t} else if (match_prefix(conn->ctx->config[SSI_EXTENSIONS],\n\t                        strlen(conn->ctx->config[SSI_EXTENSIONS]),\n\t                        path) > 0) {\n\t\thandle_ssi_file_request(conn, path, file);\n#if !defined(NO_CACHING)\n\t} else if ((!conn->in_error_handler)\n\t           && is_not_modified(conn, &file->stat)) {\n\t\t/* Send 304 \"Not Modified\" - this must not send any body data */\n\t\thandle_not_modified_static_file_request(conn, file);\n#endif /* !NO_CACHING */\n\t} else {\n\t\thandle_static_file_request(conn, path, file, NULL, NULL);\n\t}\n}\n\n\nstatic void\nclose_all_listening_sockets(struct mg_context *ctx)\n{\n\tunsigned int i;\n\tif (!ctx) {\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < ctx->num_listening_sockets; i++) {\n\t\tclosesocket(ctx->listening_sockets[i].sock);\n\t\tctx->listening_sockets[i].sock = INVALID_SOCKET;\n\t}\n\tmg_free(ctx->listening_sockets);\n\tctx->listening_sockets = NULL;\n\tmg_free(ctx->listening_socket_fds);\n\tctx->listening_socket_fds = NULL;\n}\n\n\n/* Valid listening port specification is: [ip_address:]port[s]\n * Examples for IPv4: 80, 443s, 127.0.0.1:3128, 192.0.2.3:8080s\n * Examples for IPv6: [::]:80, [::1]:80,\n *   [2001:0db8:7654:3210:FEDC:BA98:7654:3210]:443s\n *   see https://tools.ietf.org/html/rfc3513#section-2.2\n * In order to bind to both, IPv4 and IPv6, you can either add\n * both ports using 8080,[::]:8080, or the short form +8080.\n * Both forms differ in detail: 8080,[::]:8080 create two sockets,\n * one only accepting IPv4 the other only IPv6. +8080 creates\n * one socket accepting IPv4 and IPv6. Depending on the IPv6\n * environment, they might work differently, or might not work\n * at all - it must be tested what options work best in the\n * relevant network environment.\n */\nstatic int\nparse_port_string(const struct vec *vec, struct socket *so, int *ip_version)\n{\n\tunsigned int a, b, c, d, port;\n\tint ch, len;\n#if defined(USE_IPV6)\n\tchar buf[100] = {0};\n#endif\n\n\t/* MacOS needs that. If we do not zero it, subsequent bind() will fail.\n\t * Also, all-zeroes in the socket address means binding to all addresses\n\t * for both IPv4 and IPv6 (INADDR_ANY and IN6ADDR_ANY_INIT). */\n\tmemset(so, 0, sizeof(*so));\n\tso->lsa.sin.sin_family = AF_INET;\n\t*ip_version = 0;\n\n\tif (sscanf(vec->ptr, \"%u.%u.%u.%u:%u%n\", &a, &b, &c, &d, &port, &len)\n\t    == 5) {\n\t\t/* Bind to a specific IPv4 address, e.g. 192.168.1.5:8080 */\n\t\tso->lsa.sin.sin_addr.s_addr =\n\t\t    htonl((a << 24) | (b << 16) | (c << 8) | d);\n\t\tso->lsa.sin.sin_port = htons((uint16_t)port);\n\t\t*ip_version = 4;\n\n#if defined(USE_IPV6)\n\t} else if (sscanf(vec->ptr, \"[%49[^]]]:%u%n\", buf, &port, &len) == 2\n\t           && mg_inet_pton(\n\t                  AF_INET6, buf, &so->lsa.sin6, sizeof(so->lsa.sin6))) {\n\t\t/* IPv6 address, examples: see above */\n\t\t/* so->lsa.sin6.sin6_family = AF_INET6; already set by mg_inet_pton\n\t\t */\n\t\tso->lsa.sin6.sin6_port = htons((uint16_t)port);\n\t\t*ip_version = 6;\n#endif\n\n\t} else if ((vec->ptr[0] == '+')\n\t           && (sscanf(vec->ptr + 1, \"%u%n\", &port, &len) == 1)) {\n\n\t\t/* Port is specified with a +, bind to IPv6 and IPv4, INADDR_ANY */\n\t\t/* Add 1 to len for the + character we skipped before */\n\t\tlen++;\n\n#if defined(USE_IPV6)\n\t\t/* Set socket family to IPv6, do not use IPV6_V6ONLY */\n\t\tso->lsa.sin6.sin6_family = AF_INET6;\n\t\tso->lsa.sin6.sin6_port = htons((uint16_t)port);\n\t\t*ip_version = 4 + 6;\n#else\n\t\t/* Bind to IPv4 only, since IPv6 is not built in. */\n\t\tso->lsa.sin.sin_port = htons((uint16_t)port);\n\t\t*ip_version = 4;\n#endif\n\n\t} else if (sscanf(vec->ptr, \"%u%n\", &port, &len) == 1) {\n\t\t/* If only port is specified, bind to IPv4, INADDR_ANY */\n\t\tso->lsa.sin.sin_port = htons((uint16_t)port);\n\t\t*ip_version = 4;\n\n\t} else {\n\t\t/* Parsing failure. Make port invalid. */\n\t\tport = 0;\n\t\tlen = 0;\n\t}\n\n\t/* sscanf and the option splitting code ensure the following condition\n\t */\n\tif ((len < 0) && ((unsigned)len > (unsigned)vec->len)) {\n\t\t*ip_version = 0;\n\t\treturn 0;\n\t}\n\tch = vec->ptr[len]; /* Next character after the port number */\n\tso->is_ssl = (ch == 's');\n\tso->ssl_redir = (ch == 'r');\n\n\t/* Make sure the port is valid and vector ends with 's', 'r' or ',' */\n\tif (is_valid_port(port)\n\t    && (ch == '\\0' || ch == 's' || ch == 'r' || ch == ',')) {\n\t\treturn 1;\n\t}\n\n\t/* Reset ip_version to 0 of there is an error */\n\t*ip_version = 0;\n\treturn 0;\n}\n\n\nstatic int\nset_ports_option(struct mg_context *ctx)\n{\n\tconst char *list;\n\tint on = 1;\n#if defined(USE_IPV6)\n\tint off = 0;\n#endif\n\tstruct vec vec;\n\tstruct socket so, *ptr;\n\n\tstruct pollfd *pfd;\n\tunion usa usa;\n\tsocklen_t len;\n\tint ip_version;\n\n\tint portsTotal = 0;\n\tint portsOk = 0;\n\n\tif (!ctx) {\n\t\treturn 0;\n\t}\n\n\tmemset(&so, 0, sizeof(so));\n\tmemset(&usa, 0, sizeof(usa));\n\tlen = sizeof(usa);\n\tlist = ctx->config[LISTENING_PORTS];\n\n\twhile ((list = next_option(list, &vec, NULL)) != NULL) {\n\n\t\tportsTotal++;\n\n\t\tif (!parse_port_string(&vec, &so, &ip_version)) {\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"%.*s: invalid port spec (entry %i). Expecting list of: %s\",\n\t\t\t       (int)vec.len,\n\t\t\t       vec.ptr,\n\t\t\t       portsTotal,\n\t\t\t       \"[IP_ADDRESS:]PORT[s|r]\");\n\t\t\tcontinue;\n\t\t}\n\n#if !defined(NO_SSL)\n\t\tif (so.is_ssl && ctx->ssl_ctx == NULL) {\n\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"Cannot add SSL socket (entry %i). Is -ssl_certificate \"\n\t\t\t       \"option set?\",\n\t\t\t       portsTotal);\n\t\t\tcontinue;\n\t\t}\n#endif\n\n\t\tif ((so.sock = socket(so.lsa.sa.sa_family, SOCK_STREAM, 6))\n\t\t    == INVALID_SOCKET) {\n\n\t\t\tmg_cry(fc(ctx), \"cannot create socket (entry %i)\", portsTotal);\n\t\t\tcontinue;\n\t\t}\n\n#ifdef _WIN32\n\t\t/* Windows SO_REUSEADDR lets many procs binds to a\n\t\t * socket, SO_EXCLUSIVEADDRUSE makes the bind fail\n\t\t * if someone already has the socket -- DTL */\n\t\t/* NOTE: If SO_EXCLUSIVEADDRUSE is used,\n\t\t * Windows might need a few seconds before\n\t\t * the same port can be used again in the\n\t\t * same process, so a short Sleep may be\n\t\t * required between mg_stop and mg_start.\n\t\t */\n\t\tif (setsockopt(so.sock,\n\t\t               SOL_SOCKET,\n\t\t               SO_EXCLUSIVEADDRUSE,\n\t\t               (SOCK_OPT_TYPE)&on,\n\t\t               sizeof(on)) != 0) {\n\n\t\t\t/* Set reuse option, but don't abort on errors. */\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"cannot set socket option SO_EXCLUSIVEADDRUSE (entry %i)\",\n\t\t\t       portsTotal);\n\t\t}\n#else\n\t\tif (setsockopt(so.sock,\n\t\t               SOL_SOCKET,\n\t\t               SO_REUSEADDR,\n\t\t               (SOCK_OPT_TYPE)&on,\n\t\t               sizeof(on)) != 0) {\n\n\t\t\t/* Set reuse option, but don't abort on errors. */\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"cannot set socket option SO_REUSEADDR (entry %i)\",\n\t\t\t       portsTotal);\n\t\t}\n#endif\n\n\t\tif (ip_version > 4) {\n#if defined(USE_IPV6)\n\t\t\tif (ip_version == 6) {\n\t\t\t\tif (so.lsa.sa.sa_family == AF_INET6\n\t\t\t\t    && setsockopt(so.sock,\n\t\t\t\t                  IPPROTO_IPV6,\n\t\t\t\t                  IPV6_V6ONLY,\n\t\t\t\t                  (void *)&off,\n\t\t\t\t                  sizeof(off)) != 0) {\n\n\t\t\t\t\t/* Set IPv6 only option, but don't abort on errors. */\n\t\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t\t       \"cannot set socket option IPV6_V6ONLY (entry %i)\",\n\t\t\t\t\t       portsTotal);\n\t\t\t\t}\n\t\t\t}\n#else\n\t\t\tmg_cry(fc(ctx), \"IPv6 not available\");\n\t\t\tclosesocket(so.sock);\n\t\t\tso.sock = INVALID_SOCKET;\n\t\t\tcontinue;\n#endif\n\t\t}\n\n\t\tif (so.lsa.sa.sa_family == AF_INET) {\n\n\t\t\tlen = sizeof(so.lsa.sin);\n\t\t\tif (bind(so.sock, &so.lsa.sa, len) != 0) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"cannot bind to %.*s: %d (%s)\",\n\t\t\t\t       (int)vec.len,\n\t\t\t\t       vec.ptr,\n\t\t\t\t       (int)ERRNO,\n\t\t\t\t       strerror(errno));\n\t\t\t\tclosesocket(so.sock);\n\t\t\t\tso.sock = INVALID_SOCKET;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n#if defined(USE_IPV6)\n\t\telse if (so.lsa.sa.sa_family == AF_INET6) {\n\n\t\t\tlen = sizeof(so.lsa.sin6);\n\t\t\tif (bind(so.sock, &so.lsa.sa, len) != 0) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"cannot bind to IPv6 %.*s: %d (%s)\",\n\t\t\t\t       (int)vec.len,\n\t\t\t\t       vec.ptr,\n\t\t\t\t       (int)ERRNO,\n\t\t\t\t       strerror(errno));\n\t\t\t\tclosesocket(so.sock);\n\t\t\t\tso.sock = INVALID_SOCKET;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n#endif\n\t\telse {\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"cannot bind: address family not supported (entry %i)\",\n\t\t\t       portsTotal);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (listen(so.sock, SOMAXCONN) != 0) {\n\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"cannot listen to %.*s: %d (%s)\",\n\t\t\t       (int)vec.len,\n\t\t\t       vec.ptr,\n\t\t\t       (int)ERRNO,\n\t\t\t       strerror(errno));\n\t\t\tclosesocket(so.sock);\n\t\t\tso.sock = INVALID_SOCKET;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (getsockname(so.sock, &(usa.sa), &len) != 0\n\t\t    || usa.sa.sa_family != so.lsa.sa.sa_family) {\n\n\t\t\tint err = (int)ERRNO;\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"call to getsockname failed %.*s: %d (%s)\",\n\t\t\t       (int)vec.len,\n\t\t\t       vec.ptr,\n\t\t\t       err,\n\t\t\t       strerror(errno));\n\t\t\tclosesocket(so.sock);\n\t\t\tso.sock = INVALID_SOCKET;\n\t\t\tcontinue;\n\t\t}\n\n/* Update lsa port in case of random free ports */\n#if defined(USE_IPV6)\n\t\tif (so.lsa.sa.sa_family == AF_INET6) {\n\t\t\tso.lsa.sin6.sin6_port = usa.sin6.sin6_port;\n\t\t} else\n#endif\n\t\t{\n\t\t\tso.lsa.sin.sin_port = usa.sin.sin_port;\n\t\t}\n\n\t\tif ((ptr = (struct socket *)\n\t\t         mg_realloc(ctx->listening_sockets,\n\t\t                    (ctx->num_listening_sockets + 1)\n\t\t                        * sizeof(ctx->listening_sockets[0]))) == NULL) {\n\n\t\t\tmg_cry(fc(ctx), \"%s\", \"Out of memory\");\n\t\t\tclosesocket(so.sock);\n\t\t\tso.sock = INVALID_SOCKET;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ((pfd = (struct pollfd *)mg_realloc(\n\t\t         ctx->listening_socket_fds,\n\t\t         (ctx->num_listening_sockets + 1)\n\t\t             * sizeof(ctx->listening_socket_fds[0]))) == NULL) {\n\n\t\t\tmg_cry(fc(ctx), \"%s\", \"Out of memory\");\n\t\t\tclosesocket(so.sock);\n\t\t\tso.sock = INVALID_SOCKET;\n\t\t\tmg_free(ptr);\n\t\t\tcontinue;\n\t\t}\n\n\t\tset_close_on_exec(so.sock, fc(ctx));\n\t\tctx->listening_sockets = ptr;\n\t\tctx->listening_sockets[ctx->num_listening_sockets] = so;\n\t\tctx->listening_socket_fds = pfd;\n\t\tctx->num_listening_sockets++;\n\t\tportsOk++;\n\t}\n\n\tif (portsOk != portsTotal) {\n\t\tclose_all_listening_sockets(ctx);\n\t\tportsOk = 0;\n\t}\n\n\treturn portsOk;\n}\n\n\nstatic const char *\nheader_val(const struct mg_connection *conn, const char *header)\n{\n\tconst char *header_value;\n\n\tif ((header_value = mg_get_header(conn, header)) == NULL) {\n\t\treturn \"-\";\n\t} else {\n\t\treturn header_value;\n\t}\n}\n\n\nstatic void\nlog_access(const struct mg_connection *conn)\n{\n\tconst struct mg_request_info *ri;\n\tstruct mg_file fi;\n\tchar date[64], src_addr[IP_ADDR_STR_LEN];\n\tstruct tm *tm;\n\n\tconst char *referer;\n\tconst char *user_agent;\n\n\tchar buf[4096];\n\n\tif (!conn || !conn->ctx) {\n\t\treturn;\n\t}\n\n\tif (conn->ctx->config[ACCESS_LOG_FILE] != NULL) {\n\t\tif (mg_fopen(conn,\n\t\t             conn->ctx->config[ACCESS_LOG_FILE],\n\t\t             MG_FOPEN_MODE_APPEND,\n\t\t             &fi) == 0) {\n\t\t\tfi.access.fp = NULL;\n\t\t}\n\t} else {\n\t\tfi.access.fp = NULL;\n\t}\n\n\t/* Log is written to a file and/or a callback. If both are not set,\n\t * executing the rest of the function is pointless. */\n\tif ((fi.access.fp == NULL) && (conn->ctx->callbacks.log_access == NULL)) {\n\t\treturn;\n\t}\n\n\ttm = localtime(&conn->conn_birth_time);\n\tif (tm != NULL) {\n\t\tstrftime(date, sizeof(date), \"%d/%b/%Y:%H:%M:%S %z\", tm);\n\t} else {\n\t\tmg_strlcpy(date, \"01/Jan/1970:00:00:00 +0000\", sizeof(date));\n\t\tdate[sizeof(date) - 1] = '\\0';\n\t}\n\n\tri = &conn->request_info;\n\n\tsockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);\n\treferer = header_val(conn, \"Referer\");\n\tuser_agent = header_val(conn, \"User-Agent\");\n\n\tmg_snprintf(conn,\n\t            NULL, /* Ignore truncation in access log */\n\t            buf,\n\t            sizeof(buf),\n\t            \"%s - %s [%s] \\\"%s %s%s%s HTTP/%s\\\" %d %\" INT64_FMT \" %s %s\",\n\t            src_addr,\n\t            (ri->remote_user == NULL) ? \"-\" : ri->remote_user,\n\t            date,\n\t            ri->request_method ? ri->request_method : \"-\",\n\t            ri->request_uri ? ri->request_uri : \"-\",\n\t            ri->query_string ? \"?\" : \"\",\n\t            ri->query_string ? ri->query_string : \"\",\n\t            ri->http_version,\n\t            conn->status_code,\n\t            conn->num_bytes_sent,\n\t            referer,\n\t            user_agent);\n\n\tif (conn->ctx->callbacks.log_access) {\n\t\tconn->ctx->callbacks.log_access(conn, buf);\n\t}\n\n\tif (fi.access.fp) {\n\t\tint ok = 1;\n\t\tflockfile(fi.access.fp);\n\t\tif (fprintf(fi.access.fp, \"%s\\n\", buf) < 1) {\n\t\t\tok = 0;\n\t\t}\n\t\tif (fflush(fi.access.fp) != 0) {\n\t\t\tok = 0;\n\t\t}\n\t\tfunlockfile(fi.access.fp);\n\t\tif (mg_fclose(&fi.access) != 0) {\n\t\t\tok = 0;\n\t\t}\n\t\tif (!ok) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"Error writing log file %s\",\n\t\t\t       conn->ctx->config[ACCESS_LOG_FILE]);\n\t\t}\n\t}\n}\n\n\n/* Verify given socket address against the ACL.\n * Return -1 if ACL is malformed, 0 if address is disallowed, 1 if allowed.\n */\nstatic int\ncheck_acl(struct mg_context *ctx, uint32_t remote_ip)\n{\n\tint allowed, flag;\n\tuint32_t net, mask;\n\tstruct vec vec;\n\n\tif (ctx) {\n\t\tconst char *list = ctx->config[ACCESS_CONTROL_LIST];\n\n\t\t/* If any ACL is set, deny by default */\n\t\tallowed = (list == NULL) ? '+' : '-';\n\n\t\twhile ((list = next_option(list, &vec, NULL)) != NULL) {\n\t\t\tflag = vec.ptr[0];\n\t\t\tif ((flag != '+' && flag != '-')\n\t\t\t    || parse_net(&vec.ptr[1], &net, &mask) == 0) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"%s: subnet must be [+|-]x.x.x.x[/x]\",\n\t\t\t\t       __func__);\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tif (net == (remote_ip & mask)) {\n\t\t\t\tallowed = flag;\n\t\t\t}\n\t\t}\n\n\t\treturn allowed == '+';\n\t}\n\treturn -1;\n}\n\n\n#if !defined(_WIN32)\nstatic int\nset_uid_option(struct mg_context *ctx)\n{\n\tstruct passwd *pw;\n\tif (ctx) {\n\t\tconst char *uid = ctx->config[RUN_AS_USER];\n\t\tint success = 0;\n\n\t\tif (uid == NULL) {\n\t\t\tsuccess = 1;\n\t\t} else {\n\t\t\tif ((pw = getpwnam(uid)) == NULL) {\n\t\t\t\tmg_cry(fc(ctx), \"%s: unknown user [%s]\", __func__, uid);\n\t\t\t} else if (setgid(pw->pw_gid) == -1) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"%s: setgid(%s): %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       uid,\n\t\t\t\t       strerror(errno));\n\t\t\t} else if (setgroups(0, NULL)) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"%s: setgroups(): %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       strerror(errno));\n\t\t\t} else if (setuid(pw->pw_uid) == -1) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"%s: setuid(%s): %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       uid,\n\t\t\t\t       strerror(errno));\n\t\t\t} else {\n\t\t\t\tsuccess = 1;\n\t\t\t}\n\t\t}\n\n\t\treturn success;\n\t}\n\treturn 0;\n}\n#endif /* !_WIN32 */\n\n\nstatic void\ntls_dtor(void *key)\n{\n\tstruct mg_workerTLS *tls = (struct mg_workerTLS *)key;\n\t/* key == pthread_getspecific(sTlsKey); */\n\n\tif (tls) {\n\t\tif (tls->is_master == 2) {\n\t\t\ttls->is_master = -3; /* Mark memory as dead */\n\t\t\tmg_free(tls);\n\t\t}\n\t}\n\tpthread_setspecific(sTlsKey, NULL);\n}\n\n\n#if !defined(NO_SSL)\n\n/* Must be set if sizeof(pthread_t) > sizeof(unsigned long) */\nstatic unsigned long\nssl_id_callback(void)\n{\n#ifdef _WIN32\n\treturn GetCurrentThreadId();\n#else\n\n#ifdef __clang__\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wunreachable-code\"\n/* For every compiler, either \"sizeof(pthread_t) > sizeof(unsigned long)\"\n * or not, so one of the two conditions will be unreachable by construction.\n * Unfortunately the C standard does not define a way to check this at\n * compile time, since the #if preprocessor conditions can not use the sizeof\n * operator as an argument. */\n#endif\n\n\tif (sizeof(pthread_t) > sizeof(unsigned long)) {\n\t\t/* This is the problematic case for CRYPTO_set_id_callback:\n\t\t * The OS pthread_t can not be cast to unsigned long. */\n\t\tstruct mg_workerTLS *tls =\n\t\t    (struct mg_workerTLS *)pthread_getspecific(sTlsKey);\n\t\tif (tls == NULL) {\n\t\t\t/* SSL called from an unknown thread: Create some thread index.\n\t\t\t */\n\t\t\ttls = (struct mg_workerTLS *)mg_malloc(sizeof(struct mg_workerTLS));\n\t\t\ttls->is_master = -2; /* -2 means \"3rd party thread\" */\n\t\t\ttls->thread_idx = (unsigned)mg_atomic_inc(&thread_idx_max);\n\t\t\tpthread_setspecific(sTlsKey, tls);\n\t\t}\n\t\treturn tls->thread_idx;\n\t} else {\n\t\t/* pthread_t may be any data type, so a simple cast to unsigned long\n\t\t * can rise a warning/error, depending on the platform.\n\t\t * Here memcpy is used as an anything-to-anything cast. */\n\t\tunsigned long ret = 0;\n\t\tpthread_t t = pthread_self();\n\t\tmemcpy(&ret, &t, sizeof(pthread_t));\n\t\treturn ret;\n\t}\n\n#ifdef __clang__\n#pragma clang diagnostic pop\n#endif\n\n#endif\n}\n\n\nstatic int ssl_use_pem_file(struct mg_context *ctx, const char *pem);\nstatic const char *ssl_error(void);\n\n\nstatic int\nrefresh_trust(struct mg_connection *conn)\n{\n\tstatic int reload_lock = 0;\n\tstatic long int data_check = 0;\n\tvolatile int *p_reload_lock = (volatile int *)&reload_lock;\n\n\tstruct stat cert_buf;\n\tlong int t;\n\tchar *pem;\n\tint should_verify_peer;\n\n\tif ((pem = conn->ctx->config[SSL_CERTIFICATE]) == NULL) {\n\t\t/* If peem is NULL and conn->ctx->callbacks.init_ssl is not,\n\t\t * refresh_trust still can not work. */\n\t\treturn 0;\n\t}\n\n\tt = data_check;\n\tif (stat(pem, &cert_buf) != -1) {\n\t\tt = (long int)cert_buf.st_mtime;\n\t}\n\n\tif (data_check != t) {\n\t\tdata_check = t;\n\n\t\tshould_verify_peer =\n\t\t    (conn->ctx->config[SSL_DO_VERIFY_PEER] != NULL)\n\t\t    && (mg_strcasecmp(conn->ctx->config[SSL_DO_VERIFY_PEER], \"yes\")\n\t\t        == 0);\n\n\t\tif (should_verify_peer) {\n\t\t\tchar *ca_path = conn->ctx->config[SSL_CA_PATH];\n\t\t\tchar *ca_file = conn->ctx->config[SSL_CA_FILE];\n\t\t\tif (SSL_CTX_load_verify_locations(conn->ctx->ssl_ctx,\n\t\t\t                                  ca_file,\n\t\t\t                                  ca_path) != 1) {\n\t\t\t\tmg_cry(fc(conn->ctx),\n\t\t\t\t       \"SSL_CTX_load_verify_locations error: %s \"\n\t\t\t\t       \"ssl_verify_peer requires setting \"\n\t\t\t\t       \"either ssl_ca_path or ssl_ca_file. Is any of them \"\n\t\t\t\t       \"present in \"\n\t\t\t\t       \"the .conf file?\",\n\t\t\t\t       ssl_error());\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\n\t\tif (1 == mg_atomic_inc(p_reload_lock)) {\n\t\t\tif (ssl_use_pem_file(conn->ctx, pem) == 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t*p_reload_lock = 0;\n\t\t}\n\t}\n\t/* lock while cert is reloading */\n\twhile (*p_reload_lock) {\n\t\tsleep(1);\n\t}\n\n\treturn 1;\n}\n\n\nstatic pthread_mutex_t *ssl_mutexes;\n\n\nstatic int\nsslize(struct mg_connection *conn,\n       SSL_CTX *s,\n       int (*func)(SSL *),\n       volatile int *stop_server)\n{\n\tint ret, err;\n\tint short_trust;\n\tunsigned i;\n\n\tif (!conn) {\n\t\treturn 0;\n\t}\n\n\tshort_trust =\n\t    (conn->ctx->config[SSL_SHORT_TRUST] != NULL)\n\t    && (mg_strcasecmp(conn->ctx->config[SSL_SHORT_TRUST], \"yes\") == 0);\n\n\tif (short_trust) {\n\t\tint trust_ret = refresh_trust(conn);\n\t\tif (!trust_ret) {\n\t\t\treturn trust_ret;\n\t\t}\n\t}\n\n\tconn->ssl = SSL_new(s);\n\tif (conn->ssl == NULL) {\n\t\treturn 0;\n\t}\n\n\tret = SSL_set_fd(conn->ssl, conn->client.sock);\n\tif (ret != 1) {\n\t\terr = SSL_get_error(conn->ssl, ret);\n\t\t(void)err; /* TODO: set some error message */\n\t\tSSL_free(conn->ssl);\n\t\tconn->ssl = NULL;\n\t\t/* Avoid CRYPTO_cleanup_all_ex_data(); See discussion:\n\t\t * https://wiki.openssl.org/index.php/Talk:Library_Initialization */\n\t\tERR_remove_state(0);\n\t\treturn 0;\n\t}\n\n\t/* SSL functions may fail and require to be called again:\n\t * see https://www.openssl.org/docs/manmaster/ssl/SSL_get_error.html\n\t * Here \"func\" could be SSL_connect or SSL_accept. */\n\tfor (i = 16; i <= 1024; i *= 2) {\n\t\tret = func(conn->ssl);\n\t\tif (ret != 1) {\n\t\t\terr = SSL_get_error(conn->ssl, ret);\n\t\t\tif ((err == SSL_ERROR_WANT_CONNECT)\n\t\t\t    || (err == SSL_ERROR_WANT_ACCEPT)\n\t\t\t    || (err == SSL_ERROR_WANT_READ)\n\t\t\t    || (err == SSL_ERROR_WANT_WRITE)) {\n\t\t\t\t/* Need to retry the function call \"later\".\n\t\t\t\t * See https://linux.die.net/man/3/ssl_get_error\n\t\t\t\t * This is typical for non-blocking sockets. */\n\t\t\t\tif (*stop_server) {\n\t\t\t\t\t/* Don't wait if the server is going to be stopped. */\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tmg_sleep(i);\n\n\t\t\t} else if (err == SSL_ERROR_SYSCALL) {\n\t\t\t\t/* This is an IO error. Look at errno. */\n\t\t\t\terr = errno;\n\t\t\t\t/* TODO: set some error message */\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t/* This is an SSL specific error */\n\t\t\t\t/* TODO: set some error message */\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t} else {\n\t\t\t/* success */\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (ret != 1) {\n\t\tSSL_free(conn->ssl);\n\t\tconn->ssl = NULL;\n\t\t/* Avoid CRYPTO_cleanup_all_ex_data(); See discussion:\n\t\t * https://wiki.openssl.org/index.php/Talk:Library_Initialization */\n\t\tERR_remove_state(0);\n\t\treturn 0;\n\t}\n\n\treturn 1;\n}\n\n\n/* Return OpenSSL error message (from CRYPTO lib) */\nstatic const char *\nssl_error(void)\n{\n\tunsigned long err;\n\terr = ERR_get_error();\n\treturn ((err == 0) ? \"\" : ERR_error_string(err, NULL));\n}\n\n\nstatic int\nhexdump2string(void *mem, int memlen, char *buf, int buflen)\n{\n\tint i;\n\tconst char hexdigit[] = \"0123456789abcdef\";\n\n\tif (memlen <= 0 || buflen <= 0) {\n\t\treturn 0;\n\t}\n\tif (buflen < (3 * memlen)) {\n\t\treturn 0;\n\t}\n\n\tfor (i = 0; i < memlen; i++) {\n\t\tif (i > 0) {\n\t\t\tbuf[3 * i - 1] = ' ';\n\t\t}\n\t\tbuf[3 * i] = hexdigit[(((uint8_t *)mem)[i] >> 4) & 0xF];\n\t\tbuf[3 * i + 1] = hexdigit[((uint8_t *)mem)[i] & 0xF];\n\t}\n\tbuf[3 * memlen - 1] = 0;\n\n\treturn 1;\n}\n\n\nstatic void\nssl_get_client_cert_info(struct mg_connection *conn)\n{\n\tX509 *cert = SSL_get_peer_certificate(conn->ssl);\n\tif (cert) {\n\t\tchar str_subject[1024];\n\t\tchar str_issuer[1024];\n\t\tchar str_serial[1024];\n\t\tchar str_finger[1024];\n\t\tunsigned char buf[256];\n\t\tint len;\n\t\tunsigned int ulen;\n\n\t\t/* Handle to algorithm used for fingerprint */\n\t\tconst EVP_MD *digest = EVP_get_digestbyname(\"sha1\");\n\n\t\t/* Get Subject and issuer */\n\t\tX509_NAME *subj = X509_get_subject_name(cert);\n\t\tX509_NAME *iss = X509_get_issuer_name(cert);\n\n\t\t/* Get serial number */\n\t\tASN1_INTEGER *serial = X509_get_serialNumber(cert);\n\n\t\t/* Translate subject and issuer to a string */\n\t\t(void)X509_NAME_oneline(subj, str_subject, (int)sizeof(str_subject));\n\t\t(void)X509_NAME_oneline(iss, str_issuer, (int)sizeof(str_issuer));\n\n\t\t/* Translate serial number to a hex string */\n\t\tlen = i2c_ASN1_INTEGER(serial, NULL);\n\t\tif ((len > 0) && ((unsigned)len < (unsigned)sizeof(buf))) {\n\t\t\tunsigned char *pbuf = buf;\n\t\t\tint len2 = i2c_ASN1_INTEGER(serial, &pbuf);\n\t\t\tif (!hexdump2string(\n\t\t\t        buf, len2, str_serial, (int)sizeof(str_serial))) {\n\t\t\t\t*str_serial = 0;\n\t\t\t}\n\t\t} else {\n\t\t\t*str_serial = 0;\n\t\t}\n\n\t\t/* Calculate SHA1 fingerprint and store as a hex string */\n\t\tulen = 0;\n\t\tASN1_digest((int (*)())i2d_X509, digest, (char *)cert, buf, &ulen);\n\t\tif (!hexdump2string(\n\t\t        buf, (int)ulen, str_finger, (int)sizeof(str_finger))) {\n\t\t\t*str_finger = 0;\n\t\t}\n\n\t\tconn->request_info.client_cert =\n\t\t    (struct client_cert *)mg_malloc(sizeof(struct client_cert));\n\t\tif (conn->request_info.client_cert) {\n\t\t\tconn->request_info.client_cert->subject = mg_strdup(str_subject);\n\t\t\tconn->request_info.client_cert->issuer = mg_strdup(str_issuer);\n\t\t\tconn->request_info.client_cert->serial = mg_strdup(str_serial);\n\t\t\tconn->request_info.client_cert->finger = mg_strdup(str_finger);\n\t\t} else {\n\t\t\t/* TODO: write some OOM message */\n\t\t}\n\n\t\tX509_free(cert);\n\t}\n}\n\n\nstatic void\nssl_locking_callback(int mode, int mutex_num, const char *file, int line)\n{\n\t(void)line;\n\t(void)file;\n\n\tif (mode & 1) {\n\t\t/* 1 is CRYPTO_LOCK */\n\t\t(void)pthread_mutex_lock(&ssl_mutexes[mutex_num]);\n\t} else {\n\t\t(void)pthread_mutex_unlock(&ssl_mutexes[mutex_num]);\n\t}\n}\n\n\n#if !defined(NO_SSL_DL)\nstatic void *\nload_dll(struct mg_context *ctx, const char *dll_name, struct ssl_func *sw)\n{\n\tunion {\n\t\tvoid *p;\n\t\tvoid (*fp)(void);\n\t} u;\n\tvoid *dll_handle;\n\tstruct ssl_func *fp;\n\n\tif ((dll_handle = dlopen(dll_name, RTLD_LAZY)) == NULL) {\n\t\tmg_cry(fc(ctx), \"%s: cannot load %s\", __func__, dll_name);\n\t\treturn NULL;\n\t}\n\n\tfor (fp = sw; fp->name != NULL; fp++) {\n#ifdef _WIN32\n\t\t/* GetProcAddress() returns pointer to function */\n\t\tu.fp = (void (*)(void))dlsym(dll_handle, fp->name);\n#else\n\t\t/* dlsym() on UNIX returns void *. ISO C forbids casts of data\n\t\t * pointers to function pointers. We need to use a union to make a\n\t\t * cast. */\n\t\tu.p = dlsym(dll_handle, fp->name);\n#endif /* _WIN32 */\n\t\tif (u.fp == NULL) {\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"%s: %s: cannot find %s\",\n\t\t\t       __func__,\n\t\t\t       dll_name,\n\t\t\t       fp->name);\n\t\t\tdlclose(dll_handle);\n\t\t\treturn NULL;\n\t\t} else {\n\t\t\tfp->ptr = u.fp;\n\t\t}\n\t}\n\n\treturn dll_handle;\n}\n\n\nstatic void *ssllib_dll_handle;    /* Store the ssl library handle. */\nstatic void *cryptolib_dll_handle; /* Store the crypto library handle. */\n\n#endif /* NO_SSL_DL */\n\n\n#if defined(SSL_ALREADY_INITIALIZED)\nstatic int cryptolib_users = 1; /* Reference counter for crypto library. */\n#else\nstatic int cryptolib_users = 0; /* Reference counter for crypto library. */\n#endif\n\n\nstatic int\ninitialize_ssl(struct mg_context *ctx)\n{\n\tint i;\n\tsize_t size;\n\n#if !defined(NO_SSL_DL)\n\tif (!cryptolib_dll_handle) {\n\t\tcryptolib_dll_handle = load_dll(ctx, CRYPTO_LIB, crypto_sw);\n\t\tif (!cryptolib_dll_handle) {\n\t\t\treturn 0;\n\t\t}\n\t}\n#endif /* NO_SSL_DL */\n\n\tif (mg_atomic_inc(&cryptolib_users) > 1) {\n\t\treturn 1;\n\t}\n\n\t/* Initialize locking callbacks, needed for thread safety.\n\t * http://www.openssl.org/support/faq.html#PROG1\n\t */\n\ti = CRYPTO_num_locks();\n\tif (i < 0) {\n\t\ti = 0;\n\t}\n\tsize = sizeof(pthread_mutex_t) * ((size_t)(i));\n\tif ((ssl_mutexes = (pthread_mutex_t *)mg_malloc(size)) == NULL) {\n\t\tmg_cry(fc(ctx),\n\t\t       \"%s: cannot allocate mutexes: %s\",\n\t\t       __func__,\n\t\t       ssl_error());\n\t\treturn 0;\n\t}\n\n\tfor (i = 0; i < CRYPTO_num_locks(); i++) {\n\t\tpthread_mutex_init(&ssl_mutexes[i], &pthread_mutex_attr);\n\t}\n\n\tCRYPTO_set_locking_callback(&ssl_locking_callback);\n\tCRYPTO_set_id_callback(&ssl_id_callback);\n\n\treturn 1;\n}\n\n\nstatic int\nssl_use_pem_file(struct mg_context *ctx, const char *pem)\n{\n\tif (SSL_CTX_use_certificate_file(ctx->ssl_ctx, pem, 1) == 0) {\n\t\tmg_cry(fc(ctx),\n\t\t       \"%s: cannot open certificate file %s: %s\",\n\t\t       __func__,\n\t\t       pem,\n\t\t       ssl_error());\n\t\treturn 0;\n\t}\n\n\t/* could use SSL_CTX_set_default_passwd_cb_userdata */\n\tif (SSL_CTX_use_PrivateKey_file(ctx->ssl_ctx, pem, 1) == 0) {\n\t\tmg_cry(fc(ctx),\n\t\t       \"%s: cannot open private key file %s: %s\",\n\t\t       __func__,\n\t\t       pem,\n\t\t       ssl_error());\n\t\treturn 0;\n\t}\n\n\tif (SSL_CTX_check_private_key(ctx->ssl_ctx) == 0) {\n\t\tmg_cry(fc(ctx),\n\t\t       \"%s: certificate and private key do not match: %s\",\n\t\t       __func__,\n\t\t       pem);\n\t\treturn 0;\n\t}\n\n\tif (SSL_CTX_use_certificate_chain_file(ctx->ssl_ctx, pem) == 0) {\n\t\tmg_cry(fc(ctx),\n\t\t       \"%s: cannot use certificate chain file %s: %s\",\n\t\t       __func__,\n\t\t       pem,\n\t\t       ssl_error());\n\t\treturn 0;\n\t}\n\treturn 1;\n}\n\n\nstatic long\nssl_get_protocol(int version_id)\n{\n\tlong ret = SSL_OP_ALL;\n\tif (version_id > 0)\n\t\tret |= SSL_OP_NO_SSLv2;\n\tif (version_id > 1)\n\t\tret |= SSL_OP_NO_SSLv3;\n\tif (version_id > 2)\n\t\tret |= SSL_OP_NO_TLSv1;\n\tif (version_id > 3)\n\t\tret |= SSL_OP_NO_TLSv1_1;\n\treturn ret;\n}\n\n\n/* Dynamically load SSL library. Set up ctx->ssl_ctx pointer. */\nstatic int\nset_ssl_option(struct mg_context *ctx)\n{\n\tconst char *pem;\n\tint callback_ret;\n\tint should_verify_peer;\n\tconst char *ca_path;\n\tconst char *ca_file;\n\tint use_default_verify_paths;\n\tint verify_depth;\n\ttime_t now_rt = time(NULL);\n\tstruct timespec now_mt;\n\tmd5_byte_t ssl_context_id[16];\n\tmd5_state_t md5state;\n\tint protocol_ver;\n\n\t/* If PEM file is not specified and the init_ssl callback\n\t * is not specified, skip SSL initialization. */\n\tif (!ctx) {\n\t\treturn 0;\n\t}\n\tif ((pem = ctx->config[SSL_CERTIFICATE]) == NULL\n\t    && ctx->callbacks.init_ssl == NULL) {\n\t\treturn 1;\n\t}\n\n\tif (!initialize_ssl(ctx)) {\n\t\treturn 0;\n\t}\n\n#if !defined(NO_SSL_DL)\n\tif (!ssllib_dll_handle) {\n\t\tssllib_dll_handle = load_dll(ctx, SSL_LIB, ssl_sw);\n\t\tif (!ssllib_dll_handle) {\n\t\t\treturn 0;\n\t\t}\n\t}\n#endif /* NO_SSL_DL */\n\n\t/* Initialize SSL library */\n\tSSL_library_init();\n\tSSL_load_error_strings();\n\n\tif ((ctx->ssl_ctx = SSL_CTX_new(SSLv23_server_method())) == NULL) {\n\t\tmg_cry(fc(ctx), \"SSL_CTX_new (server) error: %s\", ssl_error());\n\t\treturn 0;\n\t}\n\n\tSSL_CTX_clear_options(ctx->ssl_ctx,\n\t                      SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1\n\t                          | SSL_OP_NO_TLSv1_1);\n\tprotocol_ver = atoi(ctx->config[SSL_PROTOCOL_VERSION]);\n\tSSL_CTX_set_options(ctx->ssl_ctx, ssl_get_protocol(protocol_ver));\n\tSSL_CTX_set_options(ctx->ssl_ctx, SSL_OP_SINGLE_DH_USE);\n\tSSL_CTX_set_options(ctx->ssl_ctx, SSL_OP_CIPHER_SERVER_PREFERENCE);\n\tSSL_CTX_set_ecdh_auto(ctx->ssl_ctx, 1);\n\n\t/* If a callback has been specified, call it. */\n\tcallback_ret =\n\t    (ctx->callbacks.init_ssl == NULL)\n\t        ? 0\n\t        : (ctx->callbacks.init_ssl(ctx->ssl_ctx, ctx->user_data));\n\n\t/* If callback returns 0, civetweb sets up the SSL certificate.\n\t * If it returns 1, civetweb assumes the calback already did this.\n\t * If it returns -1, initializing ssl fails. */\n\tif (callback_ret < 0) {\n\t\tmg_cry(fc(ctx), \"SSL callback returned error: %i\", callback_ret);\n\t\treturn 0;\n\t}\n\tif (callback_ret > 0) {\n\t\tif (pem != NULL) {\n\t\t\t(void)SSL_CTX_use_certificate_chain_file(ctx->ssl_ctx, pem);\n\t\t}\n\t\treturn 1;\n\t}\n\n\t/* Use some UID as session context ID. */\n\tmd5_init(&md5state);\n\tmd5_append(&md5state, (const md5_byte_t *)&now_rt, sizeof(now_rt));\n\tclock_gettime(CLOCK_MONOTONIC, &now_mt);\n\tmd5_append(&md5state, (const md5_byte_t *)&now_mt, sizeof(now_mt));\n\tmd5_append(&md5state,\n\t           (const md5_byte_t *)ctx->config[LISTENING_PORTS],\n\t           strlen(ctx->config[LISTENING_PORTS]));\n\tmd5_append(&md5state, (const md5_byte_t *)ctx, sizeof(*ctx));\n\tmd5_finish(&md5state, ssl_context_id);\n\n\tSSL_CTX_set_session_id_context(ctx->ssl_ctx,\n\t                               (const unsigned char *)&ssl_context_id,\n\t                               sizeof(ssl_context_id));\n\n\tif (pem != NULL) {\n\t\tif (!ssl_use_pem_file(ctx, pem)) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tshould_verify_peer =\n\t    (ctx->config[SSL_DO_VERIFY_PEER] != NULL)\n\t    && (mg_strcasecmp(ctx->config[SSL_DO_VERIFY_PEER], \"yes\") == 0);\n\n\tuse_default_verify_paths =\n\t    (ctx->config[SSL_DEFAULT_VERIFY_PATHS] != NULL)\n\t    && (mg_strcasecmp(ctx->config[SSL_DEFAULT_VERIFY_PATHS], \"yes\") == 0);\n\n\tif (should_verify_peer) {\n\t\tca_path = ctx->config[SSL_CA_PATH];\n\t\tca_file = ctx->config[SSL_CA_FILE];\n\t\tif (SSL_CTX_load_verify_locations(ctx->ssl_ctx, ca_file, ca_path)\n\t\t    != 1) {\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"SSL_CTX_load_verify_locations error: %s \"\n\t\t\t       \"ssl_verify_peer requires setting \"\n\t\t\t       \"either ssl_ca_path or ssl_ca_file. Is any of them \"\n\t\t\t       \"present in \"\n\t\t\t       \"the .conf file?\",\n\t\t\t       ssl_error());\n\t\t\treturn 0;\n\t\t}\n\n\t\tSSL_CTX_set_verify(ctx->ssl_ctx,\n\t\t                   SSL_VERIFY_PEER | SSL_VERIFY_FAIL_IF_NO_PEER_CERT,\n\t\t                   NULL);\n\n\t\tif (use_default_verify_paths\n\t\t    && SSL_CTX_set_default_verify_paths(ctx->ssl_ctx) != 1) {\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"SSL_CTX_set_default_verify_paths error: %s\",\n\t\t\t       ssl_error());\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (ctx->config[SSL_VERIFY_DEPTH]) {\n\t\t\tverify_depth = atoi(ctx->config[SSL_VERIFY_DEPTH]);\n\t\t\tSSL_CTX_set_verify_depth(ctx->ssl_ctx, verify_depth);\n\t\t}\n\t}\n\n\tif (ctx->config[SSL_CIPHER_LIST] != NULL) {\n\t\tif (SSL_CTX_set_cipher_list(ctx->ssl_ctx, ctx->config[SSL_CIPHER_LIST])\n\t\t    != 1) {\n\t\t\tmg_cry(fc(ctx), \"SSL_CTX_set_cipher_list error: %s\", ssl_error());\n\t\t}\n\t}\n\n\treturn 1;\n}\n\n\nstatic void\nuninitialize_ssl(struct mg_context *ctx)\n{\n\tint i;\n\t(void)ctx;\n\n\tif (mg_atomic_dec(&cryptolib_users) == 0) {\n\n\t\t/* Shutdown according to\n\t\t * https://wiki.openssl.org/index.php/Library_Initialization#Cleanup\n\t\t * http://stackoverflow.com/questions/29845527/how-to-properly-uninitialize-openssl\n\t\t */\n\t\tCRYPTO_set_locking_callback(NULL);\n\t\tCRYPTO_set_id_callback(NULL);\n\t\tENGINE_cleanup();\n\t\tCONF_modules_unload(1);\n\t\tERR_free_strings();\n\t\tEVP_cleanup();\n\t\tCRYPTO_cleanup_all_ex_data();\n\t\tERR_remove_state(0);\n\n\t\tfor (i = 0; i < CRYPTO_num_locks(); i++) {\n\t\t\tpthread_mutex_destroy(&ssl_mutexes[i]);\n\t\t}\n\t\tmg_free(ssl_mutexes);\n\t\tssl_mutexes = NULL;\n\t}\n}\n#endif /* !NO_SSL */\n\n\nstatic int\nset_gpass_option(struct mg_context *ctx)\n{\n\tif (ctx) {\n\t\tstruct mg_file file = STRUCT_FILE_INITIALIZER;\n\t\tconst char *path = ctx->config[GLOBAL_PASSWORDS_FILE];\n\t\tif (path != NULL && !mg_stat(fc(ctx), path, &file.stat)) {\n\t\t\tmg_cry(fc(ctx), \"Cannot open %s: %s\", path, strerror(ERRNO));\n\t\t\treturn 0;\n\t\t}\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n\nstatic int\nset_acl_option(struct mg_context *ctx)\n{\n\treturn check_acl(ctx, (uint32_t)0x7f000001UL) != -1;\n}\n\n\nstatic void\nreset_per_request_attributes(struct mg_connection *conn)\n{\n\tif (!conn) {\n\t\treturn;\n\t}\n\tconn->path_info = NULL;\n\tconn->num_bytes_sent = conn->consumed_content = 0;\n\tconn->status_code = -1;\n\tconn->is_chunked = 0;\n\tconn->must_close = conn->request_len = conn->throttle = 0;\n\tconn->request_info.content_length = -1;\n\tconn->request_info.remote_user = NULL;\n\tconn->request_info.request_method = NULL;\n\tconn->request_info.request_uri = NULL;\n\tconn->request_info.local_uri = NULL;\n\tconn->request_info.uri = NULL; /* TODO: cleanup uri,\n\t                                * local_uri and request_uri */\n\tconn->request_info.http_version = NULL;\n\tconn->request_info.num_headers = 0;\n\tconn->data_len = 0;\n\tconn->chunk_remainder = 0;\n}\n\n\n#if 0\n/* Note: set_sock_timeout is not required for non-blocking sockets.\n * Leave this function here (commented out) for reference until\n * CivetWeb 1.9 is tested, and the tests confirme this function is\n * no longer required.\n*/\nstatic int\nset_sock_timeout(SOCKET sock, int milliseconds)\n{\n\tint r0 = 0, r1, r2;\n\n#ifdef _WIN32\n\t/* Windows specific */\n\n\tDWORD tv = (DWORD)milliseconds;\n\n#else\n\t/* Linux, ... (not Windows) */\n\n\tstruct timeval tv;\n\n/* TCP_USER_TIMEOUT/RFC5482 (http://tools.ietf.org/html/rfc5482):\n * max. time waiting for the acknowledged of TCP data before the connection\n * will be forcefully closed and ETIMEDOUT is returned to the application.\n * If this option is not set, the default timeout of 20-30 minutes is used.\n*/\n/* #define TCP_USER_TIMEOUT (18) */\n\n#if defined(TCP_USER_TIMEOUT)\n\tunsigned int uto = (unsigned int)milliseconds;\n\tr0 = setsockopt(sock, 6, TCP_USER_TIMEOUT, (const void *)&uto, sizeof(uto));\n#endif\n\n\tmemset(&tv, 0, sizeof(tv));\n\ttv.tv_sec = milliseconds / 1000;\n\ttv.tv_usec = (milliseconds * 1000) % 1000000;\n\n#endif /* _WIN32 */\n\n\tr1 = setsockopt(\n\t    sock, SOL_SOCKET, SO_RCVTIMEO, (SOCK_OPT_TYPE)&tv, sizeof(tv));\n\tr2 = setsockopt(\n\t    sock, SOL_SOCKET, SO_SNDTIMEO, (SOCK_OPT_TYPE)&tv, sizeof(tv));\n\n\treturn r0 || r1 || r2;\n}\n#endif\n\n\nstatic int\nset_tcp_nodelay(SOCKET sock, int nodelay_on)\n{\n\tif (setsockopt(sock,\n\t               IPPROTO_TCP,\n\t               TCP_NODELAY,\n\t               (SOCK_OPT_TYPE)&nodelay_on,\n\t               sizeof(nodelay_on)) != 0) {\n\t\t/* Error */\n\t\treturn 1;\n\t}\n\t/* OK */\n\treturn 0;\n}\n\n\nstatic void\nclose_socket_gracefully(struct mg_connection *conn)\n{\n#if defined(_WIN32)\n\tchar buf[MG_BUF_LEN];\n\tint n;\n#endif\n\tstruct linger linger;\n\tint error_code = 0;\n\tsocklen_t opt_len = sizeof(error_code);\n\n\tif (!conn) {\n\t\treturn;\n\t}\n\n\t/* http://msdn.microsoft.com/en-us/library/ms739165(v=vs.85).aspx:\n\t * \"Note that enabling a nonzero timeout on a nonblocking socket\n\t * is not recommended.\", so set it to blocking now */\n\tset_blocking_mode(conn->client.sock, 1);\n\n\t/* Send FIN to the client */\n\tshutdown(conn->client.sock, SHUTDOWN_WR);\n\n\n#if defined(_WIN32)\n\t/* Read and discard pending incoming data. If we do not do that and\n\t * close\n\t * the socket, the data in the send buffer may be discarded. This\n\t * behaviour is seen on Windows, when client keeps sending data\n\t * when server decides to close the connection; then when client\n\t * does recv() it gets no data back. */\n\tdo {\n\t\tn = pull(NULL, conn, buf, sizeof(buf), /* Timeout in s: */ 1.0);\n\t} while (n > 0);\n#endif\n\n\t/* Set linger option to avoid socket hanging out after close. This\n\t * prevent ephemeral port exhaust problem under high QPS. */\n\tlinger.l_onoff = 1;\n\tlinger.l_linger = 1;\n\n\tif (getsockopt(conn->client.sock,\n\t               SOL_SOCKET,\n\t               SO_ERROR,\n\t               (char *)&error_code,\n\t               &opt_len) != 0) {\n\t\t/* Cannot determine if socket is already closed. This should\n\t\t * not occur and never did in a test. Log an error message\n\t\t * and continue. */\n\t\tmg_cry(conn,\n\t\t       \"%s: getsockopt(SOL_SOCKET SO_ERROR) failed: %s\",\n\t\t       __func__,\n\t\t       strerror(ERRNO));\n\t} else if (error_code == ECONNRESET) {\n\t\t/* Socket already closed by client/peer, close socket without linger */\n\t} else {\n\n\n\t\t/* Set linger timeout */\n\t\tif (setsockopt(conn->client.sock,\n\t\t               SOL_SOCKET,\n\t\t               SO_LINGER,\n\t\t               (char *)&linger,\n\t\t               sizeof(linger)) != 0) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: setsockopt(SOL_SOCKET SO_LINGER) failed: %s\",\n\t\t\t       __func__,\n\t\t\t       strerror(ERRNO));\n\t\t}\n\t}\n\n\t/* Now we know that our FIN is ACK-ed, safe to close */\n\tclosesocket(conn->client.sock);\n\tconn->client.sock = INVALID_SOCKET;\n}\n\n\nstatic void\nclose_connection(struct mg_connection *conn)\n{\n\tif (!conn || !conn->ctx) {\n\t\treturn;\n\t}\n\n#if defined(USE_LUA) && defined(USE_WEBSOCKET)\n\tif (conn->lua_websocket_state) {\n\t\tlua_websocket_close(conn, conn->lua_websocket_state);\n\t\tconn->lua_websocket_state = NULL;\n\t}\n#endif\n\n\t/* call the connection_close callback if assigned */\n\tif ((conn->ctx->callbacks.connection_close != NULL)\n\t    && (conn->ctx->context_type == 1)) {\n\t\tconn->ctx->callbacks.connection_close(conn);\n\t}\n\n\tmg_lock_connection(conn);\n\n\tconn->must_close = 1;\n\n#ifndef NO_SSL\n\tif (conn->ssl != NULL) {\n\t\t/* Run SSL_shutdown twice to ensure completly close SSL connection\n\t\t */\n\t\tSSL_shutdown(conn->ssl);\n\t\tSSL_free(conn->ssl);\n\t\t/* Avoid CRYPTO_cleanup_all_ex_data(); See discussion:\n\t\t * https://wiki.openssl.org/index.php/Talk:Library_Initialization */\n\t\tERR_remove_state(0);\n\t\tconn->ssl = NULL;\n\t}\n#endif\n\tif (conn->client.sock != INVALID_SOCKET) {\n\t\tclose_socket_gracefully(conn);\n\t\tconn->client.sock = INVALID_SOCKET;\n\t}\n\n\tmg_unlock_connection(conn);\n}\n\n\nvoid\nmg_close_connection(struct mg_connection *conn)\n{\n\tstruct mg_context *client_ctx = NULL;\n\n\tif (conn == NULL) {\n\t\treturn;\n\t}\n\n#if defined(USE_WEBSOCKET)\n\tif (conn->ctx->context_type == 2) {\n\t\tunsigned int i;\n\n\t\t/* ws/wss client */\n\t\tclient_ctx = conn->ctx;\n\n\t\t/* client context: loops must end */\n\t\tconn->ctx->stop_flag = 1;\n\n\t\t/* We need to get the client thread out of the select/recv call here. */\n\t\t/* Since we use a sleep quantum of some seconds to check for recv\n\t\t * timeouts, we will just wait a few seconds in mg_join_thread. */\n\n\t\t/* join worker thread */\n\t\tfor (i = 0; i < client_ctx->cfg_worker_threads; i++) {\n\t\t\tif (client_ctx->workerthreadids[i] != 0) {\n\t\t\t\tmg_join_thread(client_ctx->workerthreadids[i]);\n\t\t\t}\n\t\t}\n\t}\n#else\n\t(void)client_ctx;\n#endif\n\n\tclose_connection(conn);\n\n#ifndef NO_SSL\n\tif (conn->client_ssl_ctx != NULL) {\n\t\tSSL_CTX_free((SSL_CTX *)conn->client_ssl_ctx);\n\t}\n#endif\n\n\tif (client_ctx != NULL) {\n\t\t/* free context */\n\t\tmg_free(client_ctx->workerthreadids);\n\t\tmg_free(client_ctx);\n\t\t(void)pthread_mutex_destroy(&conn->mutex);\n\t\tmg_free(conn);\n\t}\n}\n\n\nstatic struct mg_connection *\nmg_connect_client_impl(const struct mg_client_options *client_options,\n                       int use_ssl,\n                       char *ebuf,\n                       size_t ebuf_len)\n{\n\tstatic struct mg_context fake_ctx;\n\tstruct mg_connection *conn = NULL;\n\tSOCKET sock;\n\tunion usa sa;\n\n\tif (!connect_socket(&fake_ctx,\n\t                    client_options->host,\n\t                    client_options->port,\n\t                    use_ssl,\n\t                    ebuf,\n\t                    ebuf_len,\n\t                    &sock,\n\t                    &sa)) {\n\t\t;\n\t} else if ((conn = (struct mg_connection *)\n\t                mg_calloc(1, sizeof(*conn) + MAX_REQUEST_SIZE)) == NULL) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"calloc(): %s\",\n\t\t            strerror(ERRNO));\n\t\tclosesocket(sock);\n#ifndef NO_SSL\n\t} else if (use_ssl\n\t           && (conn->client_ssl_ctx = SSL_CTX_new(SSLv23_client_method()))\n\t                  == NULL) {\n\t\tmg_snprintf(NULL,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"SSL_CTX_new error\");\n\t\tclosesocket(sock);\n\t\tmg_free(conn);\n\t\tconn = NULL;\n#endif /* NO_SSL */\n\n\t} else {\n\n#ifdef USE_IPV6\n\t\tsocklen_t len = (sa.sa.sa_family == AF_INET)\n\t\t                    ? sizeof(conn->client.rsa.sin)\n\t\t                    : sizeof(conn->client.rsa.sin6);\n\t\tstruct sockaddr *psa =\n\t\t    (sa.sa.sa_family == AF_INET)\n\t\t        ? (struct sockaddr *)&(conn->client.rsa.sin)\n\t\t        : (struct sockaddr *)&(conn->client.rsa.sin6);\n#else\n\t\tsocklen_t len = sizeof(conn->client.rsa.sin);\n\t\tstruct sockaddr *psa = (struct sockaddr *)&(conn->client.rsa.sin);\n#endif\n\n\t\tconn->buf_size = MAX_REQUEST_SIZE;\n\t\tconn->buf = (char *)(conn + 1);\n\t\tconn->ctx = &fake_ctx;\n\t\tconn->client.sock = sock;\n\t\tconn->client.lsa = sa;\n\n\t\tif (getsockname(sock, psa, &len) != 0) {\n\t\t\tmg_cry(conn,\n\t\t\t       \"%s: getsockname() failed: %s\",\n\t\t\t       __func__,\n\t\t\t       strerror(ERRNO));\n\t\t}\n\n\t\tconn->client.is_ssl = use_ssl ? 1 : 0;\n\t\t(void)pthread_mutex_init(&conn->mutex, &pthread_mutex_attr);\n\n#ifndef NO_SSL\n\t\tif (use_ssl) {\n\t\t\tfake_ctx.ssl_ctx = conn->client_ssl_ctx;\n\n\t\t\t/* TODO: Check ssl_verify_peer and ssl_ca_path here.\n\t\t\t * SSL_CTX_set_verify call is needed to switch off server\n\t\t\t * certificate checking, which is off by default in OpenSSL and\n\t\t\t * on in yaSSL. */\n\t\t\t/* TODO: SSL_CTX_set_verify(conn->client_ssl_ctx,\n\t\t\t * SSL_VERIFY_PEER, verify_ssl_server); */\n\n\t\t\tif (client_options->client_cert) {\n\t\t\t\tif (!ssl_use_pem_file(&fake_ctx, client_options->client_cert)) {\n\t\t\t\t\tmg_snprintf(NULL,\n\t\t\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t\t\t            ebuf,\n\t\t\t\t\t            ebuf_len,\n\t\t\t\t\t            \"Can not use SSL client certificate\");\n\t\t\t\t\tSSL_CTX_free(conn->client_ssl_ctx);\n\t\t\t\t\tclosesocket(sock);\n\t\t\t\t\tmg_free(conn);\n\t\t\t\t\tconn = NULL;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (client_options->server_cert) {\n\t\t\t\tSSL_CTX_load_verify_locations(conn->client_ssl_ctx,\n\t\t\t\t                              client_options->server_cert,\n\t\t\t\t                              NULL);\n\t\t\t\tSSL_CTX_set_verify(conn->client_ssl_ctx, SSL_VERIFY_PEER, NULL);\n\t\t\t} else {\n\t\t\t\tSSL_CTX_set_verify(conn->client_ssl_ctx, SSL_VERIFY_NONE, NULL);\n\t\t\t}\n\n\t\t\tif (!sslize(conn,\n\t\t\t            conn->client_ssl_ctx,\n\t\t\t            SSL_connect,\n\t\t\t            &(conn->ctx->stop_flag))) {\n\t\t\t\tmg_snprintf(NULL,\n\t\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t\t            ebuf,\n\t\t\t\t            ebuf_len,\n\t\t\t\t            \"SSL connection error\");\n\t\t\t\tSSL_CTX_free(conn->client_ssl_ctx);\n\t\t\t\tclosesocket(sock);\n\t\t\t\tmg_free(conn);\n\t\t\t\tconn = NULL;\n\t\t\t}\n\t\t}\n#endif\n\t}\n\n\tif (conn) {\n\t\tset_blocking_mode(sock, 0);\n\t}\n\n\treturn conn;\n}\n\n\nCIVETWEB_API struct mg_connection *\nmg_connect_client_secure(const struct mg_client_options *client_options,\n                         char *error_buffer,\n                         size_t error_buffer_size)\n{\n\treturn mg_connect_client_impl(client_options,\n\t                              1,\n\t                              error_buffer,\n\t                              error_buffer_size);\n}\n\n\nstruct mg_connection *\nmg_connect_client(const char *host,\n                  int port,\n                  int use_ssl,\n                  char *error_buffer,\n                  size_t error_buffer_size)\n{\n\tstruct mg_client_options opts;\n\tmemset(&opts, 0, sizeof(opts));\n\topts.host = host;\n\topts.port = port;\n\treturn mg_connect_client_impl(&opts,\n\t                              use_ssl,\n\t                              error_buffer,\n\t                              error_buffer_size);\n}\n\n\nstatic const struct {\n\tconst char *proto;\n\tsize_t proto_len;\n\tunsigned default_port;\n} abs_uri_protocols[] = {{\"http://\", 7, 80},\n                         {\"https://\", 8, 443},\n                         {\"ws://\", 5, 80},\n                         {\"wss://\", 6, 443},\n                         {NULL, 0, 0}};\n\n\n/* Check if the uri is valid.\n * return 0 for invalid uri,\n * return 1 for *,\n * return 2 for relative uri,\n * return 3 for absolute uri without port,\n * return 4 for absolute uri with port */\nstatic int\nget_uri_type(const char *uri)\n{\n\tint i;\n\tchar *hostend, *portbegin, *portend;\n\tunsigned long port;\n\n\t/* According to the HTTP standard\n\t * http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2\n\t * URI can be an asterisk (*) or should start with slash (relative uri),\n\t * or it should start with the protocol (absolute uri). */\n\tif (uri[0] == '*' && uri[1] == '\\0') {\n\t\t/* asterisk */\n\t\treturn 1;\n\t}\n\n\t/* Valid URIs according to RFC 3986\n\t * (https://www.ietf.org/rfc/rfc3986.txt)\n\t * must only contain reserved characters :/?#[]@!$&'()*+,;=\n\t * and unreserved characters A-Z a-z 0-9 and -._~\n\t * and % encoded symbols.\n\t */\n\tfor (i = 0; uri[i] != 0; i++) {\n\t\tif (uri[i] < 33) {\n\t\t\t/* control characters and spaces are invalid */\n\t\t\treturn 0;\n\t\t}\n\t\tif (uri[i] > 126) {\n\t\t\t/* non-ascii characters must be % encoded */\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tswitch (uri[i]) {\n\t\t\tcase '\"':  /* 34 */\n\t\t\tcase '<':  /* 60 */\n\t\t\tcase '>':  /* 62 */\n\t\t\tcase '\\\\': /* 92 */\n\t\t\tcase '^':  /* 94 */\n\t\t\tcase '`':  /* 96 */\n\t\t\tcase '{':  /* 123 */\n\t\t\tcase '|':  /* 124 */\n\t\t\tcase '}':  /* 125 */\n\t\t\t\treturn 0;\n\t\t\tdefault:\n\t\t\t\t/* character is ok */\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/* A relative uri starts with a / character */\n\tif (uri[0] == '/') {\n\t\t/* relative uri */\n\t\treturn 2;\n\t}\n\n\t/* It could be an absolute uri: */\n\t/* This function only checks if the uri is valid, not if it is\n\t * addressing the current server. So civetweb can also be used\n\t * as a proxy server. */\n\tfor (i = 0; abs_uri_protocols[i].proto != NULL; i++) {\n\t\tif (mg_strncasecmp(uri,\n\t\t                   abs_uri_protocols[i].proto,\n\t\t                   abs_uri_protocols[i].proto_len) == 0) {\n\n\t\t\thostend = strchr(uri + abs_uri_protocols[i].proto_len, '/');\n\t\t\tif (!hostend) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tportbegin = strchr(uri + abs_uri_protocols[i].proto_len, ':');\n\t\t\tif (!portbegin) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tport = strtoul(portbegin + 1, &portend, 10);\n\t\t\tif ((portend != hostend) || !port || !is_valid_port(port)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\treturn 4;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n\n/* Return NULL or the relative uri at the current server */\nstatic const char *\nget_rel_url_at_current_server(const char *uri, const struct mg_connection *conn)\n{\n\tconst char *server_domain;\n\tsize_t server_domain_len;\n\tsize_t request_domain_len = 0;\n\tunsigned long port = 0;\n\tint i;\n\tconst char *hostbegin = NULL;\n\tconst char *hostend = NULL;\n\tconst char *portbegin;\n\tchar *portend;\n\n\t/* DNS is case insensitive, so use case insensitive string compare here\n\t */\n\tserver_domain = conn->ctx->config[AUTHENTICATION_DOMAIN];\n\tif (!server_domain) {\n\t\treturn 0;\n\t}\n\tserver_domain_len = strlen(server_domain);\n\tif (!server_domain_len) {\n\t\treturn 0;\n\t}\n\n\tfor (i = 0; abs_uri_protocols[i].proto != NULL; i++) {\n\t\tif (mg_strncasecmp(uri,\n\t\t                   abs_uri_protocols[i].proto,\n\t\t                   abs_uri_protocols[i].proto_len) == 0) {\n\n\t\t\thostbegin = uri + abs_uri_protocols[i].proto_len;\n\t\t\thostend = strchr(hostbegin, '/');\n\t\t\tif (!hostend) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tportbegin = strchr(hostbegin, ':');\n\t\t\tif ((!portbegin) || (portbegin > hostend)) {\n\t\t\t\tport = abs_uri_protocols[i].default_port;\n\t\t\t\trequest_domain_len = (size_t)(hostend - hostbegin);\n\t\t\t} else {\n\t\t\t\tport = strtoul(portbegin + 1, &portend, 10);\n\t\t\t\tif ((portend != hostend) || !port || !is_valid_port(port)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\trequest_domain_len = (size_t)(portbegin - hostbegin);\n\t\t\t}\n\t\t\t/* protocol found, port set */\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!port) {\n\t\t/* port remains 0 if the protocol is not found */\n\t\treturn 0;\n\t}\n\n/* Check if the request is directed to a different server. */\n/* First check if the port is the same (IPv4 and IPv6). */\n#if defined(USE_IPV6)\n\tif (conn->client.lsa.sa.sa_family == AF_INET6) {\n\t\tif (ntohs(conn->client.lsa.sin6.sin6_port) != port) {\n\t\t\t/* Request is directed to a different port */\n\t\t\treturn 0;\n\t\t}\n\t} else\n#endif\n\t{\n\t\tif (ntohs(conn->client.lsa.sin.sin_port) != port) {\n\t\t\t/* Request is directed to a different port */\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/* Finally check if the server corresponds to the authentication\n\t * domain of the server (the server domain).\n\t * Allow full matches (like http://mydomain.com/path/file.ext), and\n\t * allow subdomain matches (like http://www.mydomain.com/path/file.ext),\n\t * but do not allow substrings (like http://notmydomain.com/path/file.ext\n\t * or http://mydomain.com.fake/path/file.ext).\n\t */\n\tif ((request_domain_len == server_domain_len)\n\t    && (!memcmp(server_domain, hostbegin, server_domain_len))) {\n\t\t/* Request is directed to this server - full name match. */\n\t} else {\n\t\tif (request_domain_len < (server_domain_len + 2)) {\n\t\t\t/* Request is directed to another server: The server name is longer\n\t\t\t * than\n\t\t\t * the request name. Drop this case here to avoid overflows in the\n\t\t\t * following checks. */\n\t\t\treturn 0;\n\t\t}\n\t\tif (hostbegin[request_domain_len - server_domain_len - 1] != '.') {\n\t\t\t/* Request is directed to another server: It could be a substring\n\t\t\t * like notmyserver.com */\n\t\t\treturn 0;\n\t\t}\n\t\tif (0 != memcmp(server_domain,\n\t\t                hostbegin + request_domain_len - server_domain_len,\n\t\t                server_domain_len)) {\n\t\t\t/* Request is directed to another server:\n\t\t\t * The server name is different. */\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn hostend;\n}\n\n\nstatic int\ngetreq(struct mg_connection *conn, char *ebuf, size_t ebuf_len, int *err)\n{\n\tconst char *cl;\n\n\tif (ebuf_len > 0) {\n\t\tebuf[0] = '\\0';\n\t}\n\t*err = 0;\n\n\treset_per_request_attributes(conn);\n\n\tif (!conn) {\n\t\tmg_snprintf(conn,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"Internal error\");\n\t\t*err = 500;\n\t\treturn 0;\n\t}\n\t/* Set the time the request was received. This value should be used for\n\t * timeouts. */\n\tclock_gettime(CLOCK_MONOTONIC, &(conn->req_time));\n\n\tconn->request_len =\n\t    read_request(NULL, conn, conn->buf, conn->buf_size, &conn->data_len);\n\t/* assert(conn->request_len < 0 || conn->data_len >= conn->request_len);\n\t */\n\tif (conn->request_len >= 0 && conn->data_len < conn->request_len) {\n\t\tmg_snprintf(conn,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"Invalid request size\");\n\t\t*err = 500;\n\t\treturn 0;\n\t}\n\n\tif (conn->request_len == 0 && conn->data_len == conn->buf_size) {\n\t\tmg_snprintf(conn,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"Request Too Large\");\n\t\t*err = 413;\n\t\treturn 0;\n\t} else if (conn->request_len <= 0) {\n\t\tif (conn->data_len > 0) {\n\t\t\tmg_snprintf(conn,\n\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t            ebuf,\n\t\t\t            ebuf_len,\n\t\t\t            \"%s\",\n\t\t\t            \"Client sent malformed request\");\n\t\t\t*err = 400;\n\t\t} else {\n\t\t\t/* Server did not recv anything -> just close the connection */\n\t\t\tconn->must_close = 1;\n\t\t\tmg_snprintf(conn,\n\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t            ebuf,\n\t\t\t            ebuf_len,\n\t\t\t            \"%s\",\n\t\t\t            \"Client did not send a request\");\n\t\t\t*err = 0;\n\t\t}\n\t\treturn 0;\n\t} else if (parse_http_message(conn->buf,\n\t                              conn->buf_size,\n\t                              &conn->request_info) <= 0) {\n\t\tmg_snprintf(conn,\n\t\t            NULL, /* No truncation check for ebuf */\n\t\t            ebuf,\n\t\t            ebuf_len,\n\t\t            \"%s\",\n\t\t            \"Bad Request\");\n\t\t*err = 400;\n\t\treturn 0;\n\t} else {\n\t\t/* Message is a valid request or response */\n\t\tif ((cl = get_header(&conn->request_info, \"Content-Length\")) != NULL) {\n\t\t\t/* Request/response has content length set */\n\t\t\tchar *endptr = NULL;\n\t\t\tconn->content_len = strtoll(cl, &endptr, 10);\n\t\t\tif (endptr == cl) {\n\t\t\t\tmg_snprintf(conn,\n\t\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t\t            ebuf,\n\t\t\t\t            ebuf_len,\n\t\t\t\t            \"%s\",\n\t\t\t\t            \"Bad Request\");\n\t\t\t\t*err = 411;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t/* Publish the content length back to the request info. */\n\t\t\tconn->request_info.content_length = conn->content_len;\n\t\t} else if ((cl = get_header(&conn->request_info, \"Transfer-Encoding\"))\n\t\t               != NULL\n\t\t           && !mg_strcasecmp(cl, \"chunked\")) {\n\t\t\tconn->is_chunked = 1;\n\t\t} else if (!mg_strcasecmp(conn->request_info.request_method, \"POST\")\n\t\t           || !mg_strcasecmp(conn->request_info.request_method,\n\t\t                             \"PUT\")) {\n\t\t\t/* POST or PUT request without content length set */\n\t\t\tconn->content_len = -1;\n\t\t} else if (!mg_strncasecmp(conn->request_info.request_method,\n\t\t                           \"HTTP/\",\n\t\t                           5)) {\n\t\t\t/* Response without content length set */\n\t\t\tconn->content_len = -1;\n\t\t} else {\n\t\t\t/* Other request */\n\t\t\tconn->content_len = 0;\n\t\t}\n\t}\n\treturn 1;\n}\n\n\nint\nmg_get_response(struct mg_connection *conn,\n                char *ebuf,\n                size_t ebuf_len,\n                int timeout)\n{\n\tif (conn) {\n\t\t/* Implementation of API function for HTTP clients */\n\t\tint err, ret;\n\t\tstruct mg_context *octx = conn->ctx;\n\t\tstruct mg_context rctx = *(conn->ctx);\n\t\tchar txt[32]; /* will not overflow */\n\n\t\tif (timeout >= 0) {\n\t\t\tmg_snprintf(conn, NULL, txt, sizeof(txt), \"%i\", timeout);\n\t\t\trctx.config[REQUEST_TIMEOUT] = txt;\n\t\t\t/* Not required for non-blocking sockets.\n\t\t\tset_sock_timeout(conn->client.sock, timeout);\n\t\t\t*/\n\t\t} else {\n\t\t\trctx.config[REQUEST_TIMEOUT] = NULL;\n\t\t}\n\n\t\tconn->ctx = &rctx;\n\t\tret = getreq(conn, ebuf, ebuf_len, &err);\n\t\tconn->ctx = octx;\n\n\t\t/* TODO: 1) uri is deprecated;\n\t\t *       2) here, ri.uri is the http response code */\n\t\tconn->request_info.uri = conn->request_info.request_uri;\n\n\t\t/* TODO (mid): Define proper return values - maybe return length?\n\t\t * For the first test use <0 for error and >0 for OK */\n\t\treturn (ret == 0) ? -1 : +1;\n\t}\n\treturn -1;\n}\n\n\nstruct mg_connection *\nmg_download(const char *host,\n            int port,\n            int use_ssl,\n            char *ebuf,\n            size_t ebuf_len,\n            const char *fmt,\n            ...)\n{\n\tstruct mg_connection *conn;\n\tva_list ap;\n\tint i;\n\tint reqerr;\n\n\tva_start(ap, fmt);\n\tebuf[0] = '\\0';\n\n\t/* open a connection */\n\tconn = mg_connect_client(host, port, use_ssl, ebuf, ebuf_len);\n\n\tif (conn != NULL) {\n\t\ti = mg_vprintf(conn, fmt, ap);\n\t\tif (i <= 0) {\n\t\t\tmg_snprintf(conn,\n\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t            ebuf,\n\t\t\t            ebuf_len,\n\t\t\t            \"%s\",\n\t\t\t            \"Error sending request\");\n\t\t} else {\n\t\t\tgetreq(conn, ebuf, ebuf_len, &reqerr);\n\n\t\t\t/* TODO: 1) uri is deprecated;\n\t\t\t *       2) here, ri.uri is the http response code */\n\t\t\tconn->request_info.uri = conn->request_info.request_uri;\n\t\t}\n\t}\n\n\t/* if an error occured, close the connection */\n\tif (ebuf[0] != '\\0' && conn != NULL) {\n\t\tmg_close_connection(conn);\n\t\tconn = NULL;\n\t}\n\n\tva_end(ap);\n\treturn conn;\n}\n\n\nstruct websocket_client_thread_data {\n\tstruct mg_connection *conn;\n\tmg_websocket_data_handler data_handler;\n\tmg_websocket_close_handler close_handler;\n\tvoid *callback_data;\n};\n\n\n#if defined(USE_WEBSOCKET)\n#ifdef _WIN32\nstatic unsigned __stdcall websocket_client_thread(void *data)\n#else\nstatic void *\nwebsocket_client_thread(void *data)\n#endif\n{\n\tstruct websocket_client_thread_data *cdata =\n\t    (struct websocket_client_thread_data *)data;\n\n\tmg_set_thread_name(\"ws-clnt\");\n\n\tif (cdata->conn->ctx) {\n\t\tif (cdata->conn->ctx->callbacks.init_thread) {\n\t\t\t/* 3 indicates a websocket client thread */\n\t\t\t/* TODO: check if conn->ctx can be set */\n\t\t\tcdata->conn->ctx->callbacks.init_thread(cdata->conn->ctx, 3);\n\t\t}\n\t}\n\n\tread_websocket(cdata->conn, cdata->data_handler, cdata->callback_data);\n\n\tDEBUG_TRACE(\"%s\", \"Websocket client thread exited\\n\");\n\n\tif (cdata->close_handler != NULL) {\n\t\tcdata->close_handler(cdata->conn, cdata->callback_data);\n\t}\n\n\t/* The websocket_client context has only this thread. If it runs out,\n\t   set the stop_flag to 2 (= \"stopped\"). */\n\tcdata->conn->ctx->stop_flag = 2;\n\n\tmg_free((void *)cdata);\n\n#ifdef _WIN32\n\treturn 0;\n#else\n\treturn NULL;\n#endif\n}\n#endif\n\n\nstruct mg_connection *\nmg_connect_websocket_client(const char *host,\n                            int port,\n                            int use_ssl,\n                            char *error_buffer,\n                            size_t error_buffer_size,\n                            const char *path,\n                            const char *origin,\n                            mg_websocket_data_handler data_func,\n                            mg_websocket_close_handler close_func,\n                            void *user_data)\n{\n\tstruct mg_connection *conn = NULL;\n\n#if defined(USE_WEBSOCKET)\n\tstruct mg_context *newctx = NULL;\n\tstruct websocket_client_thread_data *thread_data;\n\tstatic const char *magic = \"x3JJHMbDL1EzLkh9GBhXDw==\";\n\tstatic const char *handshake_req;\n\n\tif (origin != NULL) {\n\t\thandshake_req = \"GET %s HTTP/1.1\\r\\n\"\n\t\t                \"Host: %s\\r\\n\"\n\t\t                \"Upgrade: websocket\\r\\n\"\n\t\t                \"Connection: Upgrade\\r\\n\"\n\t\t                \"Sec-WebSocket-Key: %s\\r\\n\"\n\t\t                \"Sec-WebSocket-Version: 13\\r\\n\"\n\t\t                \"Origin: %s\\r\\n\"\n\t\t                \"\\r\\n\";\n\t} else {\n\t\thandshake_req = \"GET %s HTTP/1.1\\r\\n\"\n\t\t                \"Host: %s\\r\\n\"\n\t\t                \"Upgrade: websocket\\r\\n\"\n\t\t                \"Connection: Upgrade\\r\\n\"\n\t\t                \"Sec-WebSocket-Key: %s\\r\\n\"\n\t\t                \"Sec-WebSocket-Version: 13\\r\\n\"\n\t\t                \"\\r\\n\";\n\t}\n\n\t/* Establish the client connection and request upgrade */\n\tconn = mg_download(host,\n\t                   port,\n\t                   use_ssl,\n\t                   error_buffer,\n\t                   error_buffer_size,\n\t                   handshake_req,\n\t                   path,\n\t                   host,\n\t                   magic,\n\t                   origin);\n\n\t/* Connection object will be null if something goes wrong */\n\tif (conn == NULL || (strcmp(conn->request_info.request_uri, \"101\") != 0)) {\n\t\tif (!*error_buffer) {\n\t\t\t/* if there is a connection, but it did not return 101,\n\t\t\t * error_buffer is not yet set */\n\t\t\tmg_snprintf(conn,\n\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t            error_buffer,\n\t\t\t            error_buffer_size,\n\t\t\t            \"Unexpected server reply\");\n\t\t}\n\t\tDEBUG_TRACE(\"Websocket client connect error: %s\\r\\n\", error_buffer);\n\t\tif (conn != NULL) {\n\t\t\tmg_free(conn);\n\t\t\tconn = NULL;\n\t\t}\n\t\treturn conn;\n\t}\n\n\t/* For client connections, mg_context is fake. Since we need to set a\n\t * callback function, we need to create a copy and modify it. */\n\tnewctx = (struct mg_context *)mg_malloc(sizeof(struct mg_context));\n\tmemcpy(newctx, conn->ctx, sizeof(struct mg_context));\n\tnewctx->user_data = user_data;\n\tnewctx->context_type = 2;       /* ws/wss client context type */\n\tnewctx->cfg_worker_threads = 1; /* one worker thread will be created */\n\tnewctx->workerthreadids =\n\t    (pthread_t *)mg_calloc(newctx->cfg_worker_threads, sizeof(pthread_t));\n\tconn->ctx = newctx;\n\tthread_data = (struct websocket_client_thread_data *)\n\t    mg_calloc(sizeof(struct websocket_client_thread_data), 1);\n\tthread_data->conn = conn;\n\tthread_data->data_handler = data_func;\n\tthread_data->close_handler = close_func;\n\tthread_data->callback_data = NULL;\n\n\t/* Start a thread to read the websocket client connection\n\t * This thread will automatically stop when mg_disconnect is\n\t * called on the client connection */\n\tif (mg_start_thread_with_id(websocket_client_thread,\n\t                            (void *)thread_data,\n\t                            newctx->workerthreadids) != 0) {\n\t\tmg_free((void *)thread_data);\n\t\tmg_free((void *)newctx->workerthreadids);\n\t\tmg_free((void *)newctx);\n\t\tmg_free((void *)conn);\n\t\tconn = NULL;\n\t\tDEBUG_TRACE(\"%s\",\n\t\t            \"Websocket client connect thread could not be started\\r\\n\");\n\t}\n\n#else\n\t/* Appease \"unused parameter\" warnings */\n\t(void)host;\n\t(void)port;\n\t(void)use_ssl;\n\t(void)error_buffer;\n\t(void)error_buffer_size;\n\t(void)path;\n\t(void)origin;\n\t(void)user_data;\n\t(void)data_func;\n\t(void)close_func;\n#endif\n\n\treturn conn;\n}\n\n\nstatic void\nprocess_new_connection(struct mg_connection *conn)\n{\n\tif (conn && conn->ctx) {\n\t\tstruct mg_request_info *ri = &conn->request_info;\n\t\tint keep_alive_enabled, keep_alive, discard_len;\n\t\tchar ebuf[100];\n\t\tconst char *hostend;\n\t\tint reqerr, uri_type;\n\n\t\tkeep_alive_enabled =\n\t\t    !strcmp(conn->ctx->config[ENABLE_KEEP_ALIVE], \"yes\");\n\n\t\t/* Important: on new connection, reset the receiving buffer. Credit\n\t\t * goes to crule42. */\n\t\tconn->data_len = 0;\n\t\tconn->handled_requests = 0;\n\t\tdo {\n\n\t\t\tDEBUG_TRACE(\"calling getreq (%i times for this connection)\",\n\t\t\t            conn->handled_requests + 1);\n\n\t\t\tif (!getreq(conn, ebuf, sizeof(ebuf), &reqerr)) {\n\t\t\t\t/* The request sent by the client could not be understood by\n\t\t\t\t * the server, or it was incomplete or a timeout. Send an\n\t\t\t\t * error message and close the connection. */\n\t\t\t\tif (reqerr > 0) {\n\t\t\t\t\t/*assert(ebuf[0] != '\\0');*/\n\t\t\t\t\tsend_http_error(conn, reqerr, \"%s\", ebuf);\n\t\t\t\t}\n\t\t\t} else if (strcmp(ri->http_version, \"1.0\")\n\t\t\t           && strcmp(ri->http_version, \"1.1\")) {\n\t\t\t\tmg_snprintf(conn,\n\t\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t\t            ebuf,\n\t\t\t\t            sizeof(ebuf),\n\t\t\t\t            \"Bad HTTP version: [%s]\",\n\t\t\t\t            ri->http_version);\n\t\t\t\tsend_http_error(conn, 505, \"%s\", ebuf);\n\t\t\t}\n\n\t\t\tif (ebuf[0] == '\\0') {\n\t\t\t\turi_type = get_uri_type(conn->request_info.request_uri);\n\t\t\t\tswitch (uri_type) {\n\t\t\t\tcase 1:\n\t\t\t\t\t/* Asterisk */\n\t\t\t\t\tconn->request_info.local_uri = NULL;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t/* relative uri */\n\t\t\t\t\tconn->request_info.local_uri =\n\t\t\t\t\t    conn->request_info.request_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\tcase 4:\n\t\t\t\t\t/* absolute uri (with/without port) */\n\t\t\t\t\thostend = get_rel_url_at_current_server(\n\t\t\t\t\t    conn->request_info.request_uri, conn);\n\t\t\t\t\tif (hostend) {\n\t\t\t\t\t\tconn->request_info.local_uri = hostend;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconn->request_info.local_uri = NULL;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tmg_snprintf(conn,\n\t\t\t\t\t            NULL, /* No truncation check for ebuf */\n\t\t\t\t\t            ebuf,\n\t\t\t\t\t            sizeof(ebuf),\n\t\t\t\t\t            \"Invalid URI\");\n\t\t\t\t\tsend_http_error(conn, 400, \"%s\", ebuf);\n\t\t\t\t\tconn->request_info.local_uri = NULL;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t/* TODO: cleanup uri, local_uri and request_uri */\n\t\t\t\tconn->request_info.uri = conn->request_info.local_uri;\n\t\t\t}\n\n\t\t\tDEBUG_TRACE(\"http: %s, error: %s\",\n\t\t\t            (ri->http_version ? ri->http_version : \"none\"),\n\t\t\t            (ebuf[0] ? ebuf : \"none\"));\n\n\t\t\tif (ebuf[0] == '\\0') {\n\t\t\t\tif (conn->request_info.local_uri) {\n\t\t\t\t\t/* handle request to local server */\n\t\t\t\t\thandle_request(conn);\n\t\t\t\t\tDEBUG_TRACE(\"%s\", \"handle_request done\");\n\t\t\t\t\tif (conn->ctx->callbacks.end_request != NULL) {\n\t\t\t\t\t\tconn->ctx->callbacks.end_request(conn,\n\t\t\t\t\t\t                                 conn->status_code);\n\t\t\t\t\t\tDEBUG_TRACE(\"%s\", \"end_request callback done\");\n\t\t\t\t\t}\n\t\t\t\t\tlog_access(conn);\n\t\t\t\t} else {\n\t\t\t\t\t/* TODO: handle non-local request (PROXY) */\n\t\t\t\t\tconn->must_close = 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconn->must_close = 1;\n\t\t\t}\n\n\t\t\tif (ri->remote_user != NULL) {\n\t\t\t\tmg_free((void *)ri->remote_user);\n\t\t\t\t/* Important! When having connections with and without auth\n\t\t\t\t * would cause double free and then crash */\n\t\t\t\tri->remote_user = NULL;\n\t\t\t}\n\n\t\t\t/* NOTE(lsm): order is important here. should_keep_alive() call\n\t\t\t * is\n\t\t\t * using parsed request, which will be invalid after memmove's\n\t\t\t * below.\n\t\t\t * Therefore, memorize should_keep_alive() result now for later\n\t\t\t * use\n\t\t\t * in loop exit condition. */\n\t\t\tkeep_alive = (conn->ctx->stop_flag == 0) && keep_alive_enabled\n\t\t\t             && (conn->content_len >= 0) && should_keep_alive(conn);\n\n\n\t\t\t/* Discard all buffered data for this request */\n\t\t\tdiscard_len = ((conn->content_len >= 0) && (conn->request_len > 0)\n\t\t\t               && ((conn->request_len + conn->content_len)\n\t\t\t                   < (int64_t)conn->data_len))\n\t\t\t                  ? (int)(conn->request_len + conn->content_len)\n\t\t\t                  : conn->data_len;\n\t\t\t/*assert(discard_len >= 0);*/\n\t\t\tif (discard_len < 0) {\n\t\t\t\tDEBUG_TRACE(\"internal error: discard_len = %li\",\n\t\t\t\t            (long int)discard_len);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconn->data_len -= discard_len;\n\t\t\tif (conn->data_len > 0) {\n\t\t\t\tDEBUG_TRACE(\"discard_len = %lu\", (long unsigned)discard_len);\n\t\t\t\tmemmove(conn->buf,\n\t\t\t\t        conn->buf + discard_len,\n\t\t\t\t        (size_t)conn->data_len);\n\t\t\t}\n\n\t\t\t/* assert(conn->data_len >= 0); */\n\t\t\t/* assert(conn->data_len <= conn->buf_size); */\n\n\t\t\tif ((conn->data_len < 0) || (conn->data_len > conn->buf_size)) {\n\t\t\t\tDEBUG_TRACE(\"internal error: data_len = %li, buf_size = %li\",\n\t\t\t\t            (long int)conn->data_len,\n\t\t\t\t            (long int)conn->buf_size);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconn->handled_requests++;\n\n\t\t} while (keep_alive);\n\t}\n}\n\n\n#if defined(ALTERNATIVE_QUEUE)\n\nstatic void\nproduce_socket(struct mg_context *ctx, const struct socket *sp)\n{\n\tunsigned int i;\n\n\tfor (;;) {\n\t\tfor (i = 0; i < ctx->cfg_worker_threads; i++) {\n\t\t\t/* find a free worker slot and signal it */\n\t\t\tif (ctx->client_socks[i].in_use == 0) {\n\t\t\t\tctx->client_socks[i] = *sp;\n\t\t\t\tctx->client_socks[i].in_use = 1;\n\t\t\t\tevent_signal(ctx->client_wait_events[i]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t/* queue is full */\n\t\tmg_sleep(1);\n\t}\n}\n\n\nstatic int\nconsume_socket(struct mg_context *ctx, struct socket *sp, int thread_index)\n{\n\tDEBUG_TRACE(\"%s\", \"going idle\");\n\tctx->client_socks[thread_index].in_use = 0;\n\tevent_wait(ctx->client_wait_events[thread_index]);\n\t*sp = ctx->client_socks[thread_index];\n\tDEBUG_TRACE(\"grabbed socket %d, going busy\", sp ? sp->sock : -1);\n\n\treturn !ctx->stop_flag;\n}\n\n#else /* ALTERNATIVE_QUEUE */\n\n/* Worker threads take accepted socket from the queue */\nstatic int\nconsume_socket(struct mg_context *ctx, struct socket *sp, int thread_index)\n{\n#define QUEUE_SIZE(ctx) ((int)(ARRAY_SIZE(ctx->queue)))\n\n\t(void)thread_index;\n\n\t(void)pthread_mutex_lock(&ctx->thread_mutex);\n\tDEBUG_TRACE(\"%s\", \"going idle\");\n\n\t/* If the queue is empty, wait. We're idle at this point. */\n\twhile (ctx->sq_head == ctx->sq_tail && ctx->stop_flag == 0) {\n\t\tpthread_cond_wait(&ctx->sq_full, &ctx->thread_mutex);\n\t}\n\n\t/* If we're stopping, sq_head may be equal to sq_tail. */\n\tif (ctx->sq_head > ctx->sq_tail) {\n\t\t/* Copy socket from the queue and increment tail */\n\t\t*sp = ctx->queue[ctx->sq_tail % QUEUE_SIZE(ctx)];\n\t\tctx->sq_tail++;\n\n\t\tDEBUG_TRACE(\"grabbed socket %d, going busy\", sp ? sp->sock : -1);\n\n\t\t/* Wrap pointers if needed */\n\t\twhile (ctx->sq_tail > QUEUE_SIZE(ctx)) {\n\t\t\tctx->sq_tail -= QUEUE_SIZE(ctx);\n\t\t\tctx->sq_head -= QUEUE_SIZE(ctx);\n\t\t}\n\t}\n\n\t(void)pthread_cond_signal(&ctx->sq_empty);\n\t(void)pthread_mutex_unlock(&ctx->thread_mutex);\n\n\treturn !ctx->stop_flag;\n#undef QUEUE_SIZE\n}\n\n\n/* Master thread adds accepted socket to a queue */\nstatic void\nproduce_socket(struct mg_context *ctx, const struct socket *sp)\n{\n#define QUEUE_SIZE(ctx) ((int)(ARRAY_SIZE(ctx->queue)))\n\tif (!ctx) {\n\t\treturn;\n\t}\n\t(void)pthread_mutex_lock(&ctx->thread_mutex);\n\n\t/* If the queue is full, wait */\n\twhile (ctx->stop_flag == 0\n\t       && ctx->sq_head - ctx->sq_tail >= QUEUE_SIZE(ctx)) {\n\t\t(void)pthread_cond_wait(&ctx->sq_empty, &ctx->thread_mutex);\n\t}\n\n\tif (ctx->sq_head - ctx->sq_tail < QUEUE_SIZE(ctx)) {\n\t\t/* Copy socket to the queue and increment head */\n\t\tctx->queue[ctx->sq_head % QUEUE_SIZE(ctx)] = *sp;\n\t\tctx->sq_head++;\n\t\tDEBUG_TRACE(\"queued socket %d\", sp ? sp->sock : -1);\n\t}\n\n\t(void)pthread_cond_signal(&ctx->sq_full);\n\t(void)pthread_mutex_unlock(&ctx->thread_mutex);\n#undef QUEUE_SIZE\n}\n#endif /* ALTERNATIVE_QUEUE */\n\n\nstruct worker_thread_args {\n\tstruct mg_context *ctx;\n\tint index;\n};\n\n\nstatic void *\nworker_thread_run(struct worker_thread_args *thread_args)\n{\n\tstruct mg_context *ctx = thread_args->ctx;\n\tstruct mg_connection *conn;\n\tstruct mg_workerTLS tls;\n#if defined(MG_LEGACY_INTERFACE)\n\tuint32_t addr;\n#endif\n\n\tmg_set_thread_name(\"worker\");\n\n\ttls.is_master = 0;\n\ttls.thread_idx = (unsigned)mg_atomic_inc(&thread_idx_max);\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\ttls.pthread_cond_helper_mutex = CreateEvent(NULL, FALSE, FALSE, NULL);\n#endif\n\n\tif (ctx->callbacks.init_thread) {\n\t\t/* call init_thread for a worker thread (type 1) */\n\t\tctx->callbacks.init_thread(ctx, 1);\n\t}\n\n\tconn =\n\t    (struct mg_connection *)mg_calloc(1, sizeof(*conn) + MAX_REQUEST_SIZE);\n\tif (conn == NULL) {\n\t\tmg_cry(fc(ctx), \"%s\", \"Cannot create new connection struct, OOM\");\n\t} else {\n\t\tpthread_setspecific(sTlsKey, &tls);\n\t\tconn->buf_size = MAX_REQUEST_SIZE;\n\t\tconn->buf = (char *)(conn + 1);\n\t\tconn->ctx = ctx;\n\t\tconn->thread_index = thread_args->index;\n\t\tconn->request_info.user_data = ctx->user_data;\n\t\t/* Allocate a mutex for this connection to allow communication both\n\t\t * within the request handler and from elsewhere in the application\n\t\t */\n\t\t(void)pthread_mutex_init(&conn->mutex, &pthread_mutex_attr);\n\n\t\t/* Call consume_socket() even when ctx->stop_flag > 0, to let it\n\t\t * signal sq_empty condvar to wake up the master waiting in\n\t\t * produce_socket() */\n\t\twhile (consume_socket(ctx, &conn->client, conn->thread_index)) {\n\t\t\tconn->conn_birth_time = time(NULL);\n\n/* Fill in IP, port info early so even if SSL setup below fails,\n * error handler would have the corresponding info.\n * Thanks to Johannes Winkelmann for the patch.\n */\n#if defined(USE_IPV6)\n\t\t\tif (conn->client.rsa.sa.sa_family == AF_INET6) {\n\t\t\t\tconn->request_info.remote_port =\n\t\t\t\t    ntohs(conn->client.rsa.sin6.sin6_port);\n\t\t\t} else\n#endif\n\t\t\t{\n\t\t\t\tconn->request_info.remote_port =\n\t\t\t\t    ntohs(conn->client.rsa.sin.sin_port);\n\t\t\t}\n\n\t\t\tsockaddr_to_string(conn->request_info.remote_addr,\n\t\t\t                   sizeof(conn->request_info.remote_addr),\n\t\t\t                   &conn->client.rsa);\n\n\t\t\tDEBUG_TRACE(\"Start processing connection from %s\",\n\t\t\t            conn->request_info.remote_addr);\n\n#if defined(MG_LEGACY_INTERFACE)\n\t\t\t/* This legacy interface only works for the IPv4 case */\n\t\t\taddr = ntohl(conn->client.rsa.sin.sin_addr.s_addr);\n\t\t\tmemcpy(&conn->request_info.remote_ip, &addr, 4);\n#endif\n\n\t\t\tconn->request_info.is_ssl = conn->client.is_ssl;\n\n\t\t\tif (conn->client.is_ssl) {\n#ifndef NO_SSL\n\t\t\t\t/* HTTPS connection */\n\t\t\t\tif (sslize(conn,\n\t\t\t\t           conn->ctx->ssl_ctx,\n\t\t\t\t           SSL_accept,\n\t\t\t\t           &(conn->ctx->stop_flag))) {\n\t\t\t\t\t/* Get SSL client certificate information (if set) */\n\t\t\t\t\tssl_get_client_cert_info(conn);\n\n\t\t\t\t\t/* process HTTPS connection */\n\t\t\t\t\tprocess_new_connection(conn);\n\n\t\t\t\t\t/* Free client certificate info */\n\t\t\t\t\tif (conn->request_info.client_cert) {\n\t\t\t\t\t\tmg_free(\n\t\t\t\t\t\t    (void *)(conn->request_info.client_cert->subject));\n\t\t\t\t\t\tmg_free(\n\t\t\t\t\t\t    (void *)(conn->request_info.client_cert->issuer));\n\t\t\t\t\t\tmg_free(\n\t\t\t\t\t\t    (void *)(conn->request_info.client_cert->serial));\n\t\t\t\t\t\tmg_free(\n\t\t\t\t\t\t    (void *)(conn->request_info.client_cert->finger));\n\t\t\t\t\t\tconn->request_info.client_cert->subject = 0;\n\t\t\t\t\t\tconn->request_info.client_cert->issuer = 0;\n\t\t\t\t\t\tconn->request_info.client_cert->serial = 0;\n\t\t\t\t\t\tconn->request_info.client_cert->finger = 0;\n\t\t\t\t\t\tmg_free(conn->request_info.client_cert);\n\t\t\t\t\t\tconn->request_info.client_cert = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n#endif\n\t\t\t} else {\n\t\t\t\t/* process HTTP connection */\n\t\t\t\tprocess_new_connection(conn);\n\t\t\t}\n\n\t\t\tDEBUG_TRACE(\"Done processing connection from %s (%f sec)\",\n\t\t\t            conn->request_info.remote_addr,\n\t\t\t            difftime(time(NULL), conn->conn_birth_time));\n\n\t\t\tclose_connection(conn);\n\n\t\t\tDEBUG_TRACE(\"%s\", \"Connection closed\");\n\t\t}\n\t}\n\n\tpthread_setspecific(sTlsKey, NULL);\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\tCloseHandle(tls.pthread_cond_helper_mutex);\n#endif\n\tpthread_mutex_destroy(&conn->mutex);\n\tmg_free(conn);\n\n\tDEBUG_TRACE(\"%s\", \"exiting\");\n\treturn NULL;\n}\n\n\n/* Threads have different return types on Windows and Unix. */\n#ifdef _WIN32\nstatic unsigned __stdcall worker_thread(void *thread_func_param)\n{\n\tstruct worker_thread_args *pwta =\n\t    (struct worker_thread_args *)thread_func_param;\n\tworker_thread_run(pwta);\n\tmg_free(thread_func_param);\n\treturn 0;\n}\n#else\nstatic void *\nworker_thread(void *thread_func_param)\n{\n\tstruct worker_thread_args *pwta =\n\t    (struct worker_thread_args *)thread_func_param;\n\tworker_thread_run(pwta);\n\tmg_free(thread_func_param);\n\treturn NULL;\n}\n#endif /* _WIN32 */\n\n\nstatic void\naccept_new_connection(const struct socket *listener, struct mg_context *ctx)\n{\n\tstruct socket so;\n\tchar src_addr[IP_ADDR_STR_LEN];\n\tsocklen_t len = sizeof(so.rsa);\n\tint on = 1;\n\tint timeout;\n\n\tif (!listener) {\n\t\treturn;\n\t}\n\n\tif ((so.sock = accept(listener->sock, &so.rsa.sa, &len))\n\t    == INVALID_SOCKET) {\n\t} else if (!check_acl(ctx, ntohl(*(uint32_t *)&so.rsa.sin.sin_addr))) {\n\t\tsockaddr_to_string(src_addr, sizeof(src_addr), &so.rsa);\n\t\tmg_cry(fc(ctx), \"%s: %s is not allowed to connect\", __func__, src_addr);\n\t\tclosesocket(so.sock);\n\t\tso.sock = INVALID_SOCKET;\n\t} else {\n\t\t/* Put so socket structure into the queue */\n\t\tDEBUG_TRACE(\"Accepted socket %d\", (int)so.sock);\n\t\tset_close_on_exec(so.sock, fc(ctx));\n\t\tso.is_ssl = listener->is_ssl;\n\t\tso.ssl_redir = listener->ssl_redir;\n\t\tif (getsockname(so.sock, &so.lsa.sa, &len) != 0) {\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"%s: getsockname() failed: %s\",\n\t\t\t       __func__,\n\t\t\t       strerror(ERRNO));\n\t\t}\n\n\t\t/* Set TCP keep-alive. This is needed because if HTTP-level\n\t\t * keep-alive\n\t\t * is enabled, and client resets the connection, server won't get\n\t\t * TCP FIN or RST and will keep the connection open forever. With\n\t\t * TCP keep-alive, next keep-alive handshake will figure out that\n\t\t * the client is down and will close the server end.\n\t\t * Thanks to Igor Klopov who suggested the patch. */\n\t\tif (setsockopt(so.sock,\n\t\t               SOL_SOCKET,\n\t\t               SO_KEEPALIVE,\n\t\t               (SOCK_OPT_TYPE)&on,\n\t\t               sizeof(on)) != 0) {\n\t\t\tmg_cry(fc(ctx),\n\t\t\t       \"%s: setsockopt(SOL_SOCKET SO_KEEPALIVE) failed: %s\",\n\t\t\t       __func__,\n\t\t\t       strerror(ERRNO));\n\t\t}\n\n\t\t/* Disable TCP Nagle's algorithm. Normally TCP packets are coalesced\n\t\t * to effectively fill up the underlying IP packet payload and\n\t\t * reduce the overhead of sending lots of small buffers. However\n\t\t * this hurts the server's throughput (ie. operations per second)\n\t\t * when HTTP 1.1 persistent connections are used and the responses\n\t\t * are relatively small (eg. less than 1400 bytes).\n\t\t */\n\t\tif ((ctx != NULL) && (ctx->config[CONFIG_TCP_NODELAY] != NULL)\n\t\t    && (!strcmp(ctx->config[CONFIG_TCP_NODELAY], \"1\"))) {\n\t\t\tif (set_tcp_nodelay(so.sock, 1) != 0) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"%s: setsockopt(IPPROTO_TCP TCP_NODELAY) failed: %s\",\n\t\t\t\t       __func__,\n\t\t\t\t       strerror(ERRNO));\n\t\t\t}\n\t\t}\n\n\t\tif (ctx && ctx->config[REQUEST_TIMEOUT]) {\n\t\t\ttimeout = atoi(ctx->config[REQUEST_TIMEOUT]);\n\t\t} else {\n\t\t\ttimeout = -1;\n\t\t}\n\n\n\t\t/* TODO: if non blocking sockets are used, timeouts are implemented\n\t\t * differently */\n\t\t// if (timeout > 0) {\n\t\t//\tset_sock_timeout(so.sock, timeout);\n\t\t//}\n\t\t(void)timeout;\n\t\tset_blocking_mode(so.sock, 0);\n\n\t\tproduce_socket(ctx, &so);\n\t}\n}\n\n\nstatic void\nmaster_thread_run(void *thread_func_param)\n{\n\tstruct mg_context *ctx = (struct mg_context *)thread_func_param;\n\tstruct mg_workerTLS tls;\n\tstruct pollfd *pfd;\n\tunsigned int i;\n\tunsigned int workerthreadcount;\n\n\tif (!ctx) {\n\t\treturn;\n\t}\n\n\tmg_set_thread_name(\"master\");\n\n/* Increase priority of the master thread */\n#if defined(_WIN32)\n\tSetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_ABOVE_NORMAL);\n#elif defined(USE_MASTER_THREAD_PRIORITY)\n\tint min_prio = sched_get_priority_min(SCHED_RR);\n\tint max_prio = sched_get_priority_max(SCHED_RR);\n\tif ((min_prio >= 0) && (max_prio >= 0)\n\t    && ((USE_MASTER_THREAD_PRIORITY) <= max_prio)\n\t    && ((USE_MASTER_THREAD_PRIORITY) >= min_prio)) {\n\t\tstruct sched_param sched_param = {0};\n\t\tsched_param.sched_priority = (USE_MASTER_THREAD_PRIORITY);\n\t\tpthread_setschedparam(pthread_self(), SCHED_RR, &sched_param);\n\t}\n#endif\n\n/* Initialize thread local storage */\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\ttls.pthread_cond_helper_mutex = CreateEvent(NULL, FALSE, FALSE, NULL);\n#endif\n\ttls.is_master = 1;\n\tpthread_setspecific(sTlsKey, &tls);\n\n\tif (ctx->callbacks.init_thread) {\n\t\t/* Callback for the master thread (type 0) */\n\t\tctx->callbacks.init_thread(ctx, 0);\n\t}\n\n\t/* Server starts *now* */\n\tctx->start_time = time(NULL);\n\n\t/* Start the server */\n\tpfd = ctx->listening_socket_fds;\n\twhile (ctx->stop_flag == 0) {\n\t\tfor (i = 0; i < ctx->num_listening_sockets; i++) {\n\t\t\tpfd[i].fd = ctx->listening_sockets[i].sock;\n\t\t\tpfd[i].events = POLLIN;\n\t\t}\n\n\t\tif (poll(pfd, ctx->num_listening_sockets, 200) > 0) {\n\t\t\tfor (i = 0; i < ctx->num_listening_sockets; i++) {\n\t\t\t\t/* NOTE(lsm): on QNX, poll() returns POLLRDNORM after the\n\t\t\t\t * successful poll, and POLLIN is defined as\n\t\t\t\t * (POLLRDNORM | POLLRDBAND)\n\t\t\t\t * Therefore, we're checking pfd[i].revents & POLLIN, not\n\t\t\t\t * pfd[i].revents == POLLIN. */\n\t\t\t\tif (ctx->stop_flag == 0 && (pfd[i].revents & POLLIN)) {\n\t\t\t\t\taccept_new_connection(&ctx->listening_sockets[i], ctx);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Here stop_flag is 1 - Initiate shutdown. */\n\tDEBUG_TRACE(\"%s\", \"stopping workers\");\n\n\t/* Stop signal received: somebody called mg_stop. Quit. */\n\tclose_all_listening_sockets(ctx);\n\n\t/* Wakeup workers that are waiting for connections to handle. */\n\t(void)pthread_mutex_lock(&ctx->thread_mutex);\n#if defined(ALTERNATIVE_QUEUE)\n\tfor (i = 0; i < ctx->cfg_worker_threads; i++) {\n\t\tevent_signal(ctx->client_wait_events[i]);\n\n\t\t/* Since we know all sockets, we can shutdown the connections. */\n\t\tif (ctx->client_socks[i].in_use) {\n\t\t\tshutdown(ctx->client_socks[i].sock, SHUTDOWN_BOTH);\n\t\t}\n\t}\n#else\n\tpthread_cond_broadcast(&ctx->sq_full);\n#endif\n\t(void)pthread_mutex_unlock(&ctx->thread_mutex);\n\n\t/* Join all worker threads to avoid leaking threads. */\n\tworkerthreadcount = ctx->cfg_worker_threads;\n\tfor (i = 0; i < workerthreadcount; i++) {\n\t\tif (ctx->workerthreadids[i] != 0) {\n\t\t\tmg_join_thread(ctx->workerthreadids[i]);\n\t\t}\n\t}\n\n#if !defined(NO_SSL)\n\tif (ctx->ssl_ctx != NULL) {\n\t\tuninitialize_ssl(ctx);\n\t}\n#endif\n\tDEBUG_TRACE(\"%s\", \"exiting\");\n\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\tCloseHandle(tls.pthread_cond_helper_mutex);\n#endif\n\tpthread_setspecific(sTlsKey, NULL);\n\n\t/* Signal mg_stop() that we're done.\n\t * WARNING: This must be the very last thing this\n\t * thread does, as ctx becomes invalid after this line. */\n\tctx->stop_flag = 2;\n}\n\n\n/* Threads have different return types on Windows and Unix. */\n#ifdef _WIN32\nstatic unsigned __stdcall master_thread(void *thread_func_param)\n{\n\tmaster_thread_run(thread_func_param);\n\treturn 0;\n}\n#else\nstatic void *\nmaster_thread(void *thread_func_param)\n{\n\tmaster_thread_run(thread_func_param);\n\treturn NULL;\n}\n#endif /* _WIN32 */\n\n\nstatic void\nfree_context(struct mg_context *ctx)\n{\n\tint i;\n\tstruct mg_handler_info *tmp_rh;\n\n\tif (ctx == NULL) {\n\t\treturn;\n\t}\n\n\tif (ctx->callbacks.exit_context) {\n\t\tctx->callbacks.exit_context(ctx);\n\t}\n\n\t/* All threads exited, no sync is needed. Destroy thread mutex and\n\t * condvars\n\t */\n\t(void)pthread_mutex_destroy(&ctx->thread_mutex);\n#if defined(ALTERNATIVE_QUEUE)\n\tmg_free(ctx->client_socks);\n\tfor (i = 0; (unsigned)i < ctx->cfg_worker_threads; i++) {\n\t\tevent_destroy(ctx->client_wait_events[i]);\n\t}\n\tmg_free(ctx->client_wait_events);\n#else\n\t(void)pthread_cond_destroy(&ctx->sq_empty);\n\t(void)pthread_cond_destroy(&ctx->sq_full);\n#endif\n\n\t/* Destroy other context global data structures mutex */\n\t(void)pthread_mutex_destroy(&ctx->nonce_mutex);\n\n#if defined(USE_TIMERS)\n\ttimers_exit(ctx);\n#endif\n\n\t/* Deallocate config parameters */\n\tfor (i = 0; i < NUM_OPTIONS; i++) {\n\t\tif (ctx->config[i] != NULL) {\n#if defined(_MSC_VER)\n#pragma warning(suppress : 6001)\n#endif\n\t\t\tmg_free(ctx->config[i]);\n\t\t}\n\t}\n\n\t/* Deallocate request handlers */\n\twhile (ctx->handlers) {\n\t\ttmp_rh = ctx->handlers;\n\t\tctx->handlers = tmp_rh->next;\n\t\tmg_free(tmp_rh->uri);\n\t\tmg_free(tmp_rh);\n\t}\n\n#ifndef NO_SSL\n\t/* Deallocate SSL context */\n\tif (ctx->ssl_ctx != NULL) {\n\t\tSSL_CTX_free(ctx->ssl_ctx);\n\t}\n#endif /* !NO_SSL */\n\n\t/* Deallocate worker thread ID array */\n\tif (ctx->workerthreadids != NULL) {\n\t\tmg_free(ctx->workerthreadids);\n\t}\n\n\t/* Deallocate the tls variable */\n\tif (mg_atomic_dec(&sTlsInit) == 0) {\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\t\tDeleteCriticalSection(&global_log_file_lock);\n#endif /* _WIN32 && !__SYMBIAN32__ */\n#if !defined(_WIN32)\n\t\tpthread_mutexattr_destroy(&pthread_mutex_attr);\n#endif\n\n\t\tpthread_key_delete(sTlsKey);\n\n#if defined(USE_LUA)\n\t\tlua_exit_optional_libraries();\n#endif\n\t}\n\n\t/* deallocate system name string */\n\tmg_free(ctx->systemName);\n\n\t/* Deallocate context itself */\n\tmg_free(ctx);\n}\n\n\nvoid\nmg_stop(struct mg_context *ctx)\n{\n\tpthread_t mt;\n\tif (!ctx) {\n\t\treturn;\n\t}\n\n\t/* We don't use a lock here. Calling mg_stop with the same ctx from\n\t * two threads is not allowed. */\n\tmt = ctx->masterthreadid;\n\tif (mt == 0) {\n\t\treturn;\n\t}\n\n\tctx->masterthreadid = 0;\n\n\t/* Set stop flag, so all threads know they have to exit. */\n\tctx->stop_flag = 1;\n\n\t/* Wait until everything has stopped. */\n\twhile (ctx->stop_flag != 2) {\n\t\t(void)mg_sleep(10);\n\t}\n\n\tmg_join_thread(mt);\n\tfree_context(ctx);\n\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\t(void)WSACleanup();\n#endif /* _WIN32 && !__SYMBIAN32__ */\n}\n\n\nstatic void\nget_system_name(char **sysName)\n{\n#if defined(_WIN32)\n#if !defined(__SYMBIAN32__)\n#if defined(_WIN32_WCE)\n\t*sysName = mg_strdup(\"WinCE\");\n#else\n\tchar name[128];\n\tDWORD dwVersion = 0;\n\tDWORD dwMajorVersion = 0;\n\tDWORD dwMinorVersion = 0;\n\tDWORD dwBuild = 0;\n\n#ifdef _MSC_VER\n#pragma warning(push)\n/* GetVersion was declared deprecated */\n#pragma warning(disable : 4996)\n#endif\n\tdwVersion = GetVersion();\n#ifdef _MSC_VER\n#pragma warning(pop)\n#endif\n\n\tdwMajorVersion = (DWORD)(LOBYTE(LOWORD(dwVersion)));\n\tdwMinorVersion = (DWORD)(HIBYTE(LOWORD(dwVersion)));\n\tdwBuild = ((dwVersion < 0x80000000) ? (DWORD)(HIWORD(dwVersion)) : 0);\n\t(void)dwBuild;\n\n\tsprintf(name,\n\t        \"Windows %u.%u\",\n\t        (unsigned)dwMajorVersion,\n\t        (unsigned)dwMinorVersion);\n\t*sysName = mg_strdup(name);\n#endif\n#else\n\t*sysName = mg_strdup(\"Symbian\");\n#endif\n#else\n\tstruct utsname name;\n\tmemset(&name, 0, sizeof(name));\n\tuname(&name);\n\t*sysName = mg_strdup(name.sysname);\n#endif\n}\n\n\nstruct mg_context *\nmg_start(const struct mg_callbacks *callbacks,\n         void *user_data,\n         const char **options)\n{\n\tstruct mg_context *ctx;\n\tconst char *name, *value, *default_value;\n\tint idx, ok, workerthreadcount;\n\tunsigned int i;\n\tvoid (*exit_callback)(const struct mg_context *ctx) = 0;\n\n\tstruct mg_workerTLS tls;\n\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\tWSADATA data;\n\tWSAStartup(MAKEWORD(2, 2), &data);\n#endif /* _WIN32 && !__SYMBIAN32__ */\n\n\t/* Allocate context and initialize reasonable general case defaults. */\n\tif ((ctx = (struct mg_context *)mg_calloc(1, sizeof(*ctx))) == NULL) {\n\t\treturn NULL;\n\t}\n\n\t/* Random number generator will initialize at the first call */\n\tctx->auth_nonce_mask =\n\t    (uint64_t)get_random() ^ (uint64_t)(ptrdiff_t)(options);\n\n\tif (mg_atomic_inc(&sTlsInit) == 1) {\n\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\t\tInitializeCriticalSection(&global_log_file_lock);\n#endif /* _WIN32 && !__SYMBIAN32__ */\n#if !defined(_WIN32)\n\t\tpthread_mutexattr_init(&pthread_mutex_attr);\n\t\tpthread_mutexattr_settype(&pthread_mutex_attr, PTHREAD_MUTEX_RECURSIVE);\n#endif\n\n\t\tif (0 != pthread_key_create(&sTlsKey, tls_dtor)) {\n\t\t\t/* Fatal error - abort start. However, this situation should\n\t\t\t * never\n\t\t\t * occur in practice. */\n\t\t\tmg_atomic_dec(&sTlsInit);\n\t\t\tmg_cry(fc(ctx), \"Cannot initialize thread local storage\");\n\t\t\tmg_free(ctx);\n\t\t\treturn NULL;\n\t\t}\n\n#if defined(USE_LUA)\n\t\tlua_init_optional_libraries();\n#endif\n\n\t} else {\n\t\t/* TODO (low): istead of sleeping, check if sTlsKey is already\n\t\t * initialized. */\n\t\tmg_sleep(1);\n\t}\n\n\ttls.is_master = -1;\n\ttls.thread_idx = (unsigned)mg_atomic_inc(&thread_idx_max);\n#if defined(_WIN32) && !defined(__SYMBIAN32__)\n\ttls.pthread_cond_helper_mutex = NULL;\n#endif\n\tpthread_setspecific(sTlsKey, &tls);\n\n\tok = 0 == pthread_mutex_init(&ctx->thread_mutex, &pthread_mutex_attr);\n#if !defined(ALTERNATIVE_QUEUE)\n\tok &= 0 == pthread_cond_init(&ctx->sq_empty, NULL);\n\tok &= 0 == pthread_cond_init(&ctx->sq_full, NULL);\n#endif\n\tok &= 0 == pthread_mutex_init(&ctx->nonce_mutex, &pthread_mutex_attr);\n\tif (!ok) {\n\t\t/* Fatal error - abort start. However, this situation should never\n\t\t * occur in practice. */\n\t\tmg_cry(fc(ctx), \"Cannot initialize thread synchronization objects\");\n\t\tmg_free(ctx);\n\t\tpthread_setspecific(sTlsKey, NULL);\n\t\treturn NULL;\n\t}\n\n\tif (callbacks) {\n\t\tctx->callbacks = *callbacks;\n\t\texit_callback = callbacks->exit_context;\n\t\tctx->callbacks.exit_context = 0;\n\t}\n\tctx->user_data = user_data;\n\tctx->handlers = NULL;\n\n#if defined(USE_LUA) && defined(USE_WEBSOCKET)\n\tctx->shared_lua_websockets = 0;\n#endif\n\n\twhile (options && (name = *options++) != NULL) {\n\t\tif ((idx = get_option_index(name)) == -1) {\n\t\t\tmg_cry(fc(ctx), \"Invalid option: %s\", name);\n\t\t\tfree_context(ctx);\n\t\t\tpthread_setspecific(sTlsKey, NULL);\n\t\t\treturn NULL;\n\t\t} else if ((value = *options++) == NULL) {\n\t\t\tmg_cry(fc(ctx), \"%s: option value cannot be NULL\", name);\n\t\t\tfree_context(ctx);\n\t\t\tpthread_setspecific(sTlsKey, NULL);\n\t\t\treturn NULL;\n\t\t}\n\t\tif (ctx->config[idx] != NULL) {\n\t\t\tmg_cry(fc(ctx), \"warning: %s: duplicate option\", name);\n\t\t\tmg_free(ctx->config[idx]);\n\t\t}\n\t\tctx->config[idx] = mg_strdup(value);\n\t\tDEBUG_TRACE(\"[%s] -> [%s]\", name, value);\n\t}\n\n\t/* Set default value if needed */\n\tfor (i = 0; config_options[i].name != NULL; i++) {\n\t\tdefault_value = config_options[i].default_value;\n\t\tif (ctx->config[i] == NULL && default_value != NULL) {\n\t\t\tctx->config[i] = mg_strdup(default_value);\n\t\t}\n\t}\n\n#if defined(NO_FILES)\n\tif (ctx->config[DOCUMENT_ROOT] != NULL) {\n\t\tmg_cry(fc(ctx), \"%s\", \"Document root must not be set\");\n\t\tfree_context(ctx);\n\t\tpthread_setspecific(sTlsKey, NULL);\n\t\treturn NULL;\n\t}\n#endif\n\n\tget_system_name(&ctx->systemName);\n\n\t/* NOTE(lsm): order is important here. SSL certificates must\n\t * be initialized before listening ports. UID must be set last. */\n\tif (!set_gpass_option(ctx) ||\n#if !defined(NO_SSL)\n\t    !set_ssl_option(ctx) ||\n#endif\n\t    !set_ports_option(ctx) ||\n#if !defined(_WIN32)\n\t    !set_uid_option(ctx) ||\n#endif\n\t    !set_acl_option(ctx)) {\n\t\tfree_context(ctx);\n\t\tpthread_setspecific(sTlsKey, NULL);\n\t\treturn NULL;\n\t}\n\n#if !defined(_WIN32) && !defined(__SYMBIAN32__)\n\t/* Ignore SIGPIPE signal, so if browser cancels the request, it\n\t * won't kill the whole process. */\n\t(void)signal(SIGPIPE, SIG_IGN);\n#endif /* !_WIN32 && !__SYMBIAN32__ */\n\n\tworkerthreadcount = atoi(ctx->config[NUM_THREADS]);\n\n\tif (workerthreadcount > MAX_WORKER_THREADS) {\n\t\tmg_cry(fc(ctx), \"Too many worker threads\");\n\t\tfree_context(ctx);\n\t\tpthread_setspecific(sTlsKey, NULL);\n\t\treturn NULL;\n\t}\n\n\tif (workerthreadcount > 0) {\n\t\tctx->cfg_worker_threads = ((unsigned int)(workerthreadcount));\n\t\tctx->workerthreadids =\n\t\t    (pthread_t *)mg_calloc(ctx->cfg_worker_threads, sizeof(pthread_t));\n\t\tif (ctx->workerthreadids == NULL) {\n\t\t\tmg_cry(fc(ctx), \"Not enough memory for worker thread ID array\");\n\t\t\tfree_context(ctx);\n\t\t\tpthread_setspecific(sTlsKey, NULL);\n\t\t\treturn NULL;\n\t\t}\n\n#if defined(ALTERNATIVE_QUEUE)\n\t\tctx->client_wait_events = mg_calloc(sizeof(ctx->client_wait_events[0]),\n\t\t                                    ctx->cfg_worker_threads);\n\t\tif (ctx->client_wait_events == NULL) {\n\t\t\tmg_cry(fc(ctx), \"Not enough memory for worker event array\");\n\t\t\tmg_free(ctx->workerthreadids);\n\t\t\tfree_context(ctx);\n\t\t\tpthread_setspecific(sTlsKey, NULL);\n\t\t\treturn NULL;\n\t\t}\n\n\t\tctx->client_socks =\n\t\t    mg_calloc(sizeof(ctx->client_socks[0]), ctx->cfg_worker_threads);\n\t\tif (ctx->client_wait_events == NULL) {\n\t\t\tmg_cry(fc(ctx), \"Not enough memory for worker socket array\");\n\t\t\tmg_free(ctx->client_socks);\n\t\t\tmg_free(ctx->workerthreadids);\n\t\t\tfree_context(ctx);\n\t\t\tpthread_setspecific(sTlsKey, NULL);\n\t\t\treturn NULL;\n\t\t}\n\n\t\tfor (i = 0; (unsigned)i < ctx->cfg_worker_threads; i++) {\n\t\t\tctx->client_wait_events[i] = event_create();\n\t\t\tif (ctx->client_wait_events[i] == 0) {\n\t\t\t\tmg_cry(fc(ctx), \"Error creating worker event %i\", i);\n\t\t\t\t/* TODO: clean all and exit */\n\t\t\t}\n\t\t}\n#endif\n\t}\n\n#if defined(USE_TIMERS)\n\tif (timers_init(ctx) != 0) {\n\t\tmg_cry(fc(ctx), \"Error creating timers\");\n\t\tfree_context(ctx);\n\t\tpthread_setspecific(sTlsKey, NULL);\n\t\treturn NULL;\n\t}\n#endif\n\n\t/* Context has been created - init user libraries */\n\tif (ctx->callbacks.init_context) {\n\t\tctx->callbacks.init_context(ctx);\n\t}\n\tctx->callbacks.exit_context = exit_callback;\n\tctx->context_type = 1; /* server context */\n\n\t/* Start master (listening) thread */\n\tmg_start_thread_with_id(master_thread, ctx, &ctx->masterthreadid);\n\n\t/* Start worker threads */\n\tfor (i = 0; i < ctx->cfg_worker_threads; i++) {\n\t\tstruct worker_thread_args *wta =\n\t\t    mg_malloc(sizeof(struct worker_thread_args));\n\t\tif (wta) {\n\t\t\twta->ctx = ctx;\n\t\t\twta->index = (int)i;\n\t\t}\n\n\t\tif ((wta == NULL)\n\t\t    || (mg_start_thread_with_id(worker_thread,\n\t\t                                wta,\n\t\t                                &ctx->workerthreadids[i]) != 0)) {\n\n\t\t\t/* thread was not created */\n\t\t\tif (wta != NULL) {\n\t\t\t\tmg_free(wta);\n\t\t\t}\n\n\t\t\tif (i > 0) {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"Cannot start worker thread %i: error %ld\",\n\t\t\t\t       i + 1,\n\t\t\t\t       (long)ERRNO);\n\t\t\t} else {\n\t\t\t\tmg_cry(fc(ctx),\n\t\t\t\t       \"Cannot create threads: error %ld\",\n\t\t\t\t       (long)ERRNO);\n\t\t\t\tfree_context(ctx);\n\t\t\t\tpthread_setspecific(sTlsKey, NULL);\n\t\t\t\treturn NULL;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tpthread_setspecific(sTlsKey, NULL);\n\treturn ctx;\n}\n\n\n/* Feature check API function */\nunsigned\nmg_check_feature(unsigned feature)\n{\n\tstatic const unsigned feature_set = 0\n/* Set bits for available features according to API documentation.\n * This bit mask is created at compile time, according to the active\n * preprocessor defines. It is a single const value at runtime. */\n#if !defined(NO_FILES)\n\t                                    | 0x0001u\n#endif\n#if !defined(NO_SSL)\n\t                                    | 0x0002u\n#endif\n#if !defined(NO_CGI)\n\t                                    | 0x0004u\n#endif\n#if defined(USE_IPV6)\n\t                                    | 0x0008u\n#endif\n#if defined(USE_WEBSOCKET)\n\t                                    | 0x0010u\n#endif\n#if defined(USE_LUA)\n\t                                    | 0x0020u\n#endif\n#if defined(USE_DUKTAPE)\n\t                                    | 0x0040u\n#endif\n#if !defined(NO_CACHING)\n\t                                    | 0x0080u\n#endif\n\n/* Set some extra bits not defined in the API documentation.\n * These bits may change without further notice. */\n#if defined(MG_LEGACY_INTERFACE)\n\t                                    | 0x8000u\n#endif\n#if defined(MEMORY_DEBUGGING)\n\t                                    | 0x0100u\n#endif\n#if defined(USE_TIMERS)\n\t                                    | 0x0200u\n#endif\n#if !defined(NO_NONCE_CHECK)\n\t                                    | 0x0400u\n#endif\n#if !defined(NO_POPEN)\n\t                                    | 0x0800u\n#endif\n\t    ;\n\treturn (feature & feature_set);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/docs/sphinx/releases.rst": ".. ############################################################################\n.. # Copyright (c) Copyright (c) 2015-2018, Lawrence Livermore National Security, LLC.\n.. #\n.. # Produced at the Lawrence Livermore National Laboratory\n.. #\n.. # LLNL-CODE-666778\n.. #\n.. # All rights reserved.\n.. #\n.. # This file is part of Conduit.\n.. #\n.. # For details, see: http://software.llnl.gov/conduit/.\n.. #\n.. # Please also read conduit/LICENSE\n.. #\n.. # Redistribution and use in source and binary forms, with or without\n.. # modification, are permitted provided that the following conditions are met:\n.. #\n.. # * Redistributions of source code must retain the above copyright notice,\n.. #   this list of conditions and the disclaimer below.\n.. #\n.. # * Redistributions in binary form must reproduce the above copyright notice,\n.. #   this list of conditions and the disclaimer (as noted below) in the\n.. #   documentation and/or other materials provided with the distribution.\n.. #\n.. # * Neither the name of the LLNS/LLNL nor the names of its contributors may\n.. #   be used to endorse or promote products derived from this software without\n.. #   specific prior written permission.\n.. #\n.. # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n.. # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n.. # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n.. # ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL SECURITY,\n.. # LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE FOR ANY\n.. # DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n.. # DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n.. # OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n.. # HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n.. # STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n.. # IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n.. # POSSIBILITY OF SUCH DAMAGE.\n.. #\n.. ############################################################################\n\n================================\nReleases\n================================\n\nSource distributions for Conduit releases are hosted on github:\n\nhttps://github.com/LLNL/conduit/releases\n\n.. note:: As of v0.3.0, Conduit uses `BLT <https://github.com/LLNL/blt>`__ as its core CMake build system. We leverage BLT as a git submodule, however github does not include submodule contents in its automatically created source tarballs. To avoid confusion, starting with v0.3.0 we will provide our own source tarballs that include BLT. \n\nv0.3.1\n-----------------\n\n* `Source Tarball <https://github.com/LLNL/conduit/releases/download/v0.3.1/conduit-v0.3.1-src-with-blt.tar.gz>`__\n\n\nHighlights\n+++++++++++++\n\n* **General**\n \n * Added new ``Node::diff`` and ``Node::diff_compatible`` methods\n * Updated uberenv to use a newer spack and removed several custom packages\n * C++ ``Node::set`` methods now take const pointers for data\n * Added Python version of basic tutorial\n * Expanded the Node Python Capsule API\n * Added Python API bug fixes\n * Fixed API exports for static libs on Windows\n\n* **Blueprint**\n \n * Mesh Protocol\n \n   * Removed unnecessary state member in the braid example\n \n * Added Multi-level Array Protocol (conduit::blueprint::mlarray)\n\n* **Relay**\n \n * Added bug fixes for Relay HDF5 support on Windows\n \n\nv0.3.0\n-----------------\n\n* `Source Tarball <https://github.com/LLNL/conduit/releases/download/v0.3.0/conduit-v0.3.0-src-with-blt.tar.gz>`__\n\nHighlights\n+++++++++++++\n\n* **General**\n\n * Moved to use BLT (https://github.com/llnl/blt) as our core CMake-based build system\n * Bug fixes to support building on Visual Studio 2013\n * Bug fixes for ``conduit::Node`` in the List Role\n * Expose more of the Conduit API in Python\n * Use ints instead of bools in the Conduit C-APIs for wider compiler compatibility   \n * Fixed memory leaks in *conduit* and *conduit_relay*\n \n\n* **Blueprint**\n\n * Mesh Protocol\n \n   * Added support for multi-material fields via *matsets* (volume fractions and per-material values)\n   * Added initial support for domain boundary info via *adjsets* for distributed-memory unstructured meshes  \n  \n\n* **Relay**\n\n * Major improvements *conduit_relay* I/O HDF5 support \n \n   * Add heuristics with knobs for controlling use of HDF5 compact datasets and compression support\n   * Improved error checking and error messages \n   \n * Major improvements to *conduit_relay_mpi* support \n \n   * Add support for reductions and broadcast\n   * Add support zero-copy pass to MPI for a wide set of calls\n   * Harden notion of `known schema` vs `generic` MPI support\n \n\nv0.2.1\n-----------------\n\n* `Source Tarball <https://github.com/LLNL/conduit/archive/v0.2.1.tar.gz>`__\n\n\nHighlights\n+++++++++++++\n\n* **General**\n\n * Added fixes to support static builds on BGQ using xlc and gcc\n * Fixed missing install of fortran module files\n * Eliminated separate fortran libs by moving fortran symbols into their associated main libs\n * Changed ``Node::set_external`` to support const Node references\n * Refactored path and file systems utils functions for clarity.\n\n* **Blueprint**\n\n * Fixed bug with verify of mesh/coords for rectilinear case\n * Added support to the blueprint python module for the mesh and mcarray protocol methods \n * Added stand alone blueprint verify executable\n\n* **Relay**\n\n * Updated the version of civetweb used to avoid dlopen issues with SSL for static builds\n\n\nv0.2.0\n-----------------\n\n* `Source Tarball <https://github.com/LLNL/conduit/archive/v0.2.0.tar.gz>`__\n    \nHighlights \n+++++++++++++\n* **General**\n\n * Changes to clarify concepts in the ``conduit::Node`` API\n * Added const access to ``conduit::Node`` children and a new ``NodeConstIterator``\n * Added support for building on Windows\n * Added more Python, C, and Fortran API support\n * Resolved several bugs across libraries\n * Resolved compiler warnings and memory leaks\n * Improved unit test coverage\n * Renamed source and header files for clarity and to avoid potential conflicts with other projects\n\n* **Blueprint**\n    \n * Added verify support for the mcarray and mesh protocols\n * Added functions that create examples instances of mcarrays and meshes\n * Added memory layout transform helpers for mcarrays\n * Added a helper that creates a mesh blueprint index from a valid mesh\n\n* **Relay**\n\n * Added extensive HDF5 I/O support for reading and writing between HDF5 files and conduit Node trees\n * Changed I/O protocol string names for clarity\n * Refactored the ``relay::WebServer`` and the Conduit Node Viewer application\n * Added entangle, a python script ssh tunneling solution\n\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/docs/sphinx/building.rst": ".. ############################################################################\n.. # Copyright (c) 2014-2018, Lawrence Livermore National Security, LLC.\n.. # \n.. # Produced at the Lawrence Livermore National Laboratory\n.. # \n.. # LLNL-CODE-666778\n.. # \n.. # All rights reserved.\n.. # \n.. # This file is part of Conduit. \n.. # \n.. # For details, see: http://software.llnl.gov/conduit/.\n.. # \n.. # Please also read conduit/LICENSE\n.. # \n.. # Redistribution and use in source and binary forms, with or without \n.. # modification, are permitted provided that the following conditions are met:\n.. # \n.. # * Redistributions of source code must retain the above copyright notice, \n.. #   this list of conditions and the disclaimer below.\n.. # \n.. # * Redistributions in binary form must reproduce the above copyright notice,\n.. #   this list of conditions and the disclaimer (as noted below) in the\n.. #   documentation and/or other materials provided with the distribution.\n.. # \n.. # * Neither the name of the LLNS/LLNL nor the names of its contributors may\n.. #   be used to endorse or promote products derived from this software without\n.. #   specific prior written permission.\n.. # \n.. # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n.. # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n.. # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n.. # ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL SECURITY,\n.. # LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE FOR ANY\n.. # DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \n.. # DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n.. # OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n.. # HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, \n.. # STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n.. # IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n.. # POSSIBILITY OF SUCH DAMAGE.\n.. # \n.. ############################################################################\n\n.. _building:\n\n=================\nBuilding\n=================\n\n\nThis page provides details on several ways to build Conduit.\n\nIf you are building features that depend on third party libraries we recommend using :ref:`Spack <building_with_spack>`,\nor :ref:`uberenv <building_with_uberenv>`, which leverages Spack. We also provide a \n:ref:`Docker example <building_with_docker>` that leverages Spack.\n\n\n\n\n\nGetting Started\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nClone the Conduit repo:\n\n* From Github\n\n.. code:: bash\n    \n    git clone --recursive https://github.com/llnl/conduit.git\n\n\n``--recursive`` is necessary because we are using a git submodule to pull in BLT (https://github.com/llnl/blt). \nIf you cloned without ``--recursive``, you can checkout this submodule using:\n\n.. code:: bash\n    \n    cd conduit\n    git submodule init\n    git submodule update\n\n\nConfigure a build:\n\n``config-build.sh`` is a simple wrapper for the cmake call to configure conduit. \nThis creates a new out-of-source build directory ``build-debug`` and a directory for the install ``install-debug``.\nIt optionally includes a ``host-config.cmake`` file with detailed configuration options. \n\n\n.. code:: bash\n    \n    cd conduit\n    ./config-build.sh\n\n\nBuild, test, and install Conduit:\n\n.. code:: bash\n    \n    cd build-debug\n    make -j 8\n    make test\n    make install\n\n\n\nBuild Options\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe core Conduit library has no dependencies outside of the repo, however Conduit provides optional support for I/O and Communication (MPI) features that require externally built third party libraries.  \n\nConduit's build system supports the following CMake options:\n\n* **BUILD_SHARED_LIBS** - Controls if shared (ON) or static (OFF) libraries are built. *(default = ON)* \n* **ENABLE_TESTS** - Controls if unit tests are built. *(default = ON)* \n* **ENABLE_DOCS** - Controls if the Conduit documentation is built (when sphinx and doxygen are found ). *(default = ON)*\n* **ENABLE_COVERAGE** - Controls if code coverage compiler flags are used to build Conduit. *(default = OFF)*\n* **ENABLE_PYTHON** - Controls if the Conduit Python module is built. *(default = OFF)*\n\n\nThe Conduit Python module will build for both Python 2 and Python 3. To select a specific Python, set the CMake variable **PYTHON_EXECUTABLE** to path of the desired python binary. The Conduit Python module requires Numpy. The selected Python instance must provide Numpy, or PYTHONPATH must be set to include a Numpy install compatible with the selected Python install. \n\n* **ENABLE_MPI** - Controls if the conduit_relay_mpi library is built. *(default = OFF)*\n\n We are using CMake's standard FindMPI logic. To select a specific MPI set the CMake variables **MPI_C_COMPILER** and **MPI_CXX_COMPILER**, or the other FindMPI options for MPI include paths and MPI libraries.\n\n To run the mpi unit tests on LLNL's LC platforms, you may also need change the CMake variables **MPIEXEC** and **MPIEXEC_NUMPROC_FLAG**, so you can use srun and select a partition. (for an example see: src/host-configs/chaos_5_x86_64.cmake)\n\n.. warning::\n  Starting in CMake 3.10, the FindMPI **MPIEXEC** variable was changed to **MPIEXEC_EXECUTABLE**. FindMPI will still set **MPIEXEC**, but any attempt to change it before calling FindMPI with your own cached value of **MPIEXEC** will not survive, so you need to set **MPIEXEC_EXECUTABLE** `[reference] <https://cmake.org/cmake/help/v3.10/module/FindMPI.html>`_. \n\n* **HDF5_DIR** - Path to a HDF5 install *(optional)*. \n\n Controls if HDF5 I/O support is built into *conduit_relay*.\n\n* **SILO_DIR** - Path to a Silo install *(optional)*. \n\n Controls if Silo I/O support is built into *conduit_relay*. When used, the following CMake variables must also be set:\n \n * **HDF5_DIR** - Path to a HDF5 install. (Silo support depends on HDF5) \n\n\n* **BLT_SOURCE_DIR** - Path to BLT.  *(default = \"blt\")*\n\n Defaults to \"blt\", where we expect the blt submodule. The most compelling reason to override is to share a single instance of BLT across multiple projects.\n  \n\nInstallation Path Options\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nConduit's build system provides an **install** target that installs the Conduit libraires, headers, python modules, and documentation. These CMake options allow you to control install destination paths:\n\n* **CMAKE_INSTALL_PREFIX** - Standard CMake install path option *(optional)*.\n\n* **PYTHON_MODULE_INSTALL_PREFIX** - Path to install Python modules into *(optional)*.\n\n When present and **ENABLE_PYTHON** is ON, Conduit's Python modules will be installed to ``${PYTHON_MODULE_INSTALL_PREFIX}`` directory instead of ``${CMAKE_INSTALL_PREFIX}/python-modules``.\n\n\nHost Config Files\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo handle build options, third party library paths, etc we rely on CMake's initial-cache file mechanism. \n\n\n.. code:: bash\n    \n    cmake -C config_file.cmake\n\n\nWe call these initial-cache files *host-config* files, since we typically create a file for each platform or specific hosts if necessary. \n\nThe ``config-build.sh`` script uses your machine's hostname, the SYS_TYPE environment variable, and your platform name (via *uname*) to look for an existing host config file in the ``host-configs`` directory at the root of the conduit repo. If found, it passes the host config file to CMake via the `-C` command line option.\n\n.. code:: bash\n    \n    cmake {other options} -C host-configs/{config_file}.cmake ../\n\n\nYou can find example files in the ``host-configs`` directory. \n\nThese files use standard CMake commands. To properly seed the cache, CMake *set* commands need to specify ``CACHE`` as follows:\n\n.. code:: cmake\n\n    set(CMAKE_VARIABLE_NAME {VALUE} CACHE PATH \"\")\n\n\n\n.. _building_with_uberenv:\n\nBootstrapping Third Party Dependencies\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe use **Spack** (http://software.llnl.gov/spack) to automate builds of third party dependencies on OSX and Linux. Conduit builds on Windows as well, but there is no automated process to build dependencies necessary to support Conduit's optional features.\n\n.. note::\n  Conduit developers use ``bootstrap-env.sh`` and ``scripts/uberenv/uberenv.py`` to setup third party libraries for Conduit development.\n  This path uses the Conduit Spack package and extra settings, including Spack compiler and external third party package details for some platforms.  For info on how to use the Conduit Spack package see :ref:`building_with_spack`.\n  \n\nOn OSX and Linux, you can use ``bootstrap-env.sh`` (located at the root of the conduit repo) to help setup your development environment. This script uses ``scripts/uberenv/uberenv.py``, which leverages **Spack** to build all of the external third party libraries and tools used by Conduit. Fortran support is optional and all dependencies should build without a fortran compiler. After building these libraries and tools, it writes an initial *host-config* file and adds the Spack built CMake binary to your PATH so can immediately call the ``config-build.sh`` helper script to configure a conduit build.\n\n.. code:: bash\n    \n    #build third party libs using spack\n    source bootstrap-env.sh\n    \n    #copy the generated host-config file into the standard location\n    cp uberenv_libs/`hostname`*.cmake to host-configs/\n    \n    # run the configure helper script\n    ./config-build.sh\n\n    # or you can run the configure helper script and give it the \n    # path to a host-config file \n    ./config-build.sh uberenv_libs/`hostname`*.cmake\n\n\nWhen ``bootstrap-env.sh`` runs ``uberenv.py``, all command line arguments are forwarded:\n\n.. code:: bash\n\n    python scripts/uberenv/uberenv.py $@\n\nSo any options to ``bootstrap-env.sh`` are effectively ``uberenv.py`` options.\n\nUberenv Options for Building Third Party Dependencies\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n``uberenv.py`` has a few options that allow you to control how dependencies are built:\n\n ================== ==================================== ======================================\n  Option             Description                          Default\n ================== ==================================== ======================================\n  --prefix           Destination directory                ``uberenv_libs``\n  --spec             Spack spec                           linux: **%gcc**\n                                                          osx: **%clang**\n  --compilers-yaml   Spack compilers settings file        ``scripts/uberenv/compilers.yaml``\n  -k                 Ignore SSL Errors                    **False**\n ================== ==================================== ======================================\n\nThe ``-k`` option exists for sites where SSL certificate interception undermines fetching\nfrom github and https hosted source tarballs. When enabled, ``uberenv.py`` clones spack using:\n\n.. code:: bash\n\n    git -c http.sslVerify=false clone https://github.com/llnl/spack.git\n\nAnd passes ``-k`` to any spack commands that may fetch via https.\n\n\nDefault invocation on Linux:\n\n.. code:: bash\n\n    python scripts/uberenv/uberenv.py --prefix uberenv_libs \\\n                                      --spec %gcc \\\n                                      --compilers-yaml scripts/uberenv/compilers.yaml\n\nDefault invocation on OSX:\n\n.. code:: bash\n\n    python scripts/uberenv/uberenv.py --prefix uberenv_libs \\\n                                      --spec %clang \\\n                                      --compilers-yaml scripts/uberenv/compilers.yaml\n\nFor details on Spack's spec syntax, see the `Spack Specs & dependencies <http://spack.readthedocs.io/en/latest/basic_usage.html#specs-dependencies>`_ documentation.\n\n \nYou can edit ``scripts/uberenv/compilers.yaml`` or use the **--compilers-yaml** option to change the compiler settings\nused by Spack. See the `Spack Compiler Configuration <http://spack.readthedocs.io/en/latest/getting_started.html#manual-compiler-configuration>`_\ndocumentation for details.\n\nFor OSX, the defaults in ``compilers.yaml`` are X-Code's clang and gfortran from https://gcc.gnu.org/wiki/GFortranBinaries#MacOS. \n\n.. note::\n    The bootstrapping process ignores ``~/.spack/compilers.yaml`` to avoid conflicts\n    and surprises from a user's specific Spack settings on HPC platforms.\n\nWhen run, ``uberenv.py`` checkouts a specific version of Spack from github as ``spack`` in the \ndestination directory. It then uses Spack to build and install Conduit's dependencies into \n``spack/opt/spack/``. Finally, it generates a host-config file ``{hostname}.cmake`` in the \ndestination directory that specifies the compiler settings and paths to all of the dependencies.\n\n\n.. _building_with_spack:\n\nBuilding Conduit and its Dependencies with Spack\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \nAs of 1/4/2017, Spack's develop branch includes a `recipe <https://github.com/LLNL/spack/blob/develop/var/spack/repos/builtin/packages/conduit/package.py>`_ to build and install Conduit.\n\nTo install the latest released version of Conduit with all options (and also build all of its dependencies as necessary) run:\n\n.. code:: bash\n  \n  spack install conduit\n\nTo build and install Conduit's github master branch run:\n  \n.. code:: bash\n  \n  spack install conduit@master\n\n\nThe Conduit Spack package provides several `variants <http://spack.readthedocs.io/en/latest/basic_usage.html#specs-dependencies>`_ that customize the options and dependencies used to build Conduit:\n\n ================== ==================================== ======================================\n  Variant             Description                          Default\n ================== ==================================== ======================================\n  **shared**          Build Conduit as shared libraries    ON (+shared)\n  **cmake**           Build CMake with Spack               ON (+cmake)\n  **python**          Enable Conduit Python support        ON (+python)\n  **mpi**             Enable Conduit MPI support           ON (+mpi)\n  **hdf5**            Enable Conduit HDF5 support          ON (+hdf5)\n  **silo**            Enable Conduit Silo support          ON (+silo)\n  **doc**             Build Conduit's Documentation        OFF (+docs)\n ================== ==================================== ======================================\n\n\nVariants are enabled using ``+`` and disabled using ``~``. For example, to build Conduit with the minimum set of options (and dependencies) run:\n\n.. code:: bash\n\n  spack install conduit~python~mpi~hdf5~silo~docs\n\n\nYou can specify specific versions of a dependency using ``^``. For Example, to build Conduit with Python 3:\n\n\n.. code:: bash\n\n  spack install conduit+python ^python@3\n\n\n\nSupported CMake Versions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWe recommend CMake 3.9. We test building Conduit with CMake 3.3.1, 3.8.1 and 3.9.4. Other versions of CMake may work, however CMake 3.4.x to 3.7.x have specific issues with finding and using HDF5 and Python.\n\n\n\nUsing Conduit in Another Project\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUnder ``src/examples`` there are examples demonstrating how to use Conduit in a CMake-based build system (``using-with-cmake``) and via a Makefile (``using-with-make``).\n\n\n.. _building_with_docker:\n\nBuilding Conduit in a Docker Container\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUnder ``src/examples/docker/ubuntu`` there is an example ``Dockerfile`` which can be used to create an ubuntu-based docker image with a build of the Conduit. There is also a script that demonstrates how to build a Docker image from the Dockerfile (``example_build.sh``) and a script that runs this image in a Docker container (``example_run.sh``). The Conduit repo is cloned into the image's file system at ``/conduit``, the build directory is ``/conduit/build-debug``, and the install directory is ``/conduit/install-debug``.\n\n\nNotes for Cray systems\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nHDF5 and gtest use runtime features such as ``dlopen``. Because of this, building static on Cray systems commonly yields the following flavor of compiler warning:\n\n.. code:: \n\n   Using 'zzz' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking\n\nYou can avoid related linking warnings by adding the ``-dynamic`` compiler flag, or by setting the CRAYPE_LINK_TYPE environment variable:\n\n.. code:: bash\n\n  export CRAYPE_LINK_TYPE=dynamic\n\n`Shared Memory Maps are read only <https://pubs.cray.com/content/S-0005/CLE%206.0.UP02/xctm-series-dvs-administration-guide-cle-60up02-s-0005/dvs-caveats>`_\non Cray systems, so updates to data using ``Node::mmap`` will not be seen between processes.\n\n\n\n\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/blt/thirdparty_builtin/googletest-master-2020-01-07/googletest/cmake/libgtest.la.in": "# libgtest.la - a libtool library file\n# Generated by libtool (GNU libtool) 2.4.6\n\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Names of this library.\nlibrary_names='libgtest.so'\n\n# Is this an already installed library?\ninstalled=yes\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=no\n\n# Files to dlopen/dlpreopen\ndlopen=''\ndlpreopen=''\n\n# Directory that this library needs to be installed in:\nlibdir='@CMAKE_INSTALL_FULL_LIBDIR@'\n",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/raja/blt/thirdparty_builtin/googletest-master-2020-01-07/googletest/cmake/libgtest.la.in": "# libgtest.la - a libtool library file\n# Generated by libtool (GNU libtool) 2.4.6\n\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Names of this library.\nlibrary_names='libgtest.so'\n\n# Is this an already installed library?\ninstalled=yes\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=no\n\n# Files to dlopen/dlpreopen\ndlopen=''\ndlpreopen=''\n\n# Directory that this library needs to be installed in:\nlibdir='@CMAKE_INSTALL_FULL_LIBDIR@'\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/Win32/care.rc",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/objects/pack/pack-c9cef8fa4b6ce235293ce74a1173f73106aaddb4.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/objects/pack/pack-c9cef8fa4b6ce235293ce74a1173f73106aaddb4.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/cub/objects/pack/pack-0a4a8033e1414e649c5f7e993ba2a6d7ac91969d.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/cub/objects/pack/pack-0a4a8033e1414e649c5f7e993ba2a6d7ac91969d.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/objects/pack/pack-8359e59c6d4a23260e0f47c70923d96f5535c4ce.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/objects/pack/pack-8359e59c6d4a23260e0f47c70923d96f5535c4ce.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/umpire/objects/pack/pack-8bcf5a818df3da1e2ff7f063962990ea8dca5df5.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/umpire/objects/pack/pack-8bcf5a818df3da1e2ff7f063962990ea8dca5df5.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/umpire/modules/src/umpire/tpl/conduit/objects/pack/pack-2c39f14f92e122535161cecba72a75242f405b35.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/umpire/modules/src/umpire/tpl/conduit/objects/pack/pack-2c39f14f92e122535161cecba72a75242f405b35.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/umpire/modules/src/umpire/tpl/conduit/modules/src/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/umpire/modules/src/umpire/tpl/conduit/modules/src/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/umpire/modules/src/umpire/tpl/camp/objects/pack/pack-6d6548339e72842ddaaa411a175ca8156eac6bed.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/umpire/modules/src/umpire/tpl/camp/objects/pack/pack-6d6548339e72842ddaaa411a175ca8156eac6bed.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/umpire/modules/src/umpire/tpl/camp/modules/extern/googletest/objects/pack/pack-1844b8907b3176ca44023f3ecd8ac0039c67b2d5.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/umpire/modules/src/umpire/tpl/camp/modules/extern/googletest/objects/pack/pack-1844b8907b3176ca44023f3ecd8ac0039c67b2d5.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/umpire/modules/.radiuss-ci/objects/pack/pack-e6ed3d31e4c5366312fe49425fee2b7e4ef6ee8a.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/umpire/modules/.radiuss-ci/objects/pack/pack-e6ed3d31e4c5366312fe49425fee2b7e4ef6ee8a.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/umpire/modules/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/umpire/modules/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/raja/objects/pack/pack-40fb377cdddffaa04adf04ab356fbe5c89bbb63a.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/raja/objects/pack/pack-40fb377cdddffaa04adf04ab356fbe5c89bbb63a.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/raja/modules/include/cub/objects/pack/pack-0a4a8033e1414e649c5f7e993ba2a6d7ac91969d.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/raja/modules/include/cub/objects/pack/pack-0a4a8033e1414e649c5f7e993ba2a6d7ac91969d.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/raja/modules/include/camp/objects/pack/pack-6d6548339e72842ddaaa411a175ca8156eac6bed.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/raja/modules/include/camp/objects/pack/pack-6d6548339e72842ddaaa411a175ca8156eac6bed.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/raja/modules/include/camp/modules/extern/googletest/objects/pack/pack-3454c027b2259102d773c5396a18d51457b1c2d7.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/raja/modules/include/camp/modules/extern/googletest/objects/pack/pack-3454c027b2259102d773c5396a18d51457b1c2d7.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/raja/modules/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/src/tpl/raja/modules/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/chai/modules/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/umpire/objects/pack/pack-8bcf5a818df3da1e2ff7f063962990ea8dca5df5.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/umpire/objects/pack/pack-8bcf5a818df3da1e2ff7f063962990ea8dca5df5.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/umpire/modules/src/umpire/tpl/conduit/objects/pack/pack-2c39f14f92e122535161cecba72a75242f405b35.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/umpire/modules/src/umpire/tpl/conduit/objects/pack/pack-2c39f14f92e122535161cecba72a75242f405b35.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/umpire/modules/src/umpire/tpl/conduit/modules/src/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/umpire/modules/src/umpire/tpl/conduit/modules/src/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/umpire/modules/src/umpire/tpl/camp/objects/pack/pack-6d6548339e72842ddaaa411a175ca8156eac6bed.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/umpire/modules/src/umpire/tpl/camp/objects/pack/pack-6d6548339e72842ddaaa411a175ca8156eac6bed.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/umpire/modules/src/umpire/tpl/camp/modules/extern/googletest/objects/pack/pack-1844b8907b3176ca44023f3ecd8ac0039c67b2d5.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/umpire/modules/src/umpire/tpl/camp/modules/extern/googletest/objects/pack/pack-1844b8907b3176ca44023f3ecd8ac0039c67b2d5.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/umpire/modules/.radiuss-ci/objects/pack/pack-e6ed3d31e4c5366312fe49425fee2b7e4ef6ee8a.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/umpire/modules/.radiuss-ci/objects/pack/pack-e6ed3d31e4c5366312fe49425fee2b7e4ef6ee8a.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/umpire/modules/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/umpire/modules/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/camp/objects/pack/pack-6d6548339e72842ddaaa411a175ca8156eac6bed.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/camp/objects/pack/pack-6d6548339e72842ddaaa411a175ca8156eac6bed.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/camp/modules/extern/googletest/objects/pack/pack-3454c027b2259102d773c5396a18d51457b1c2d7.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/camp/modules/extern/googletest/objects/pack/pack-3454c027b2259102d773c5396a18d51457b1c2d7.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/raja/objects/pack/pack-40fb377cdddffaa04adf04ab356fbe5c89bbb63a.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/raja/objects/pack/pack-40fb377cdddffaa04adf04ab356fbe5c89bbb63a.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/raja/modules/include/cub/objects/pack/pack-0a4a8033e1414e649c5f7e993ba2a6d7ac91969d.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/raja/modules/include/cub/objects/pack/pack-0a4a8033e1414e649c5f7e993ba2a6d7ac91969d.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/raja/modules/include/camp/objects/pack/pack-6d6548339e72842ddaaa411a175ca8156eac6bed.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/raja/modules/include/camp/objects/pack/pack-6d6548339e72842ddaaa411a175ca8156eac6bed.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/raja/modules/include/camp/modules/extern/googletest/objects/pack/pack-1844b8907b3176ca44023f3ecd8ac0039c67b2d5.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/raja/modules/include/camp/modules/extern/googletest/objects/pack/pack-1844b8907b3176ca44023f3ecd8ac0039c67b2d5.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/raja/modules/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/raja/modules/blt/objects/pack/pack-675ccd8dcdba8cd11c1b5f5e8e3e50d47f06ab8f.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/raja/modules/tpl/rocPRIM/objects/pack/pack-a4a42d765bc03fb2794b8d806bc1acd7fe60fa07.idx",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/.git/modules/tpl/raja/modules/tpl/rocPRIM/objects/pack/pack-a4a42d765bc03fb2794b8d806bc1acd7fe60fa07.pack",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/blt/share/blt/logo/blt_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/libs/relay/web_clients/wsock_test/example.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/libs/relay/web_clients/wsock_test/example_small.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf16bebom.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf32bebom.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf16le.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf32be.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf16lebom.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf16be.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf32le.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf32lebom.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/test/unittest/readertest.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/normalparsing.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/move3.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/architecture.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/insituparsing.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/move2.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/iterative-parser-states-diagram.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/utilityclass.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/move1.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/simpledom.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/tutorial.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/logo/rapidjson.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/docs/logos/conduit_logo_blue_bold.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/docs/sphinx/julia_render.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/docs/sphinx/2016_07_13_scipy2016_conduit_slides.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/docs/sphinx/2015_conduit_intro.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/docs/sphinx/spiral_render.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/src/docs/sphinx/braid_render.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/src/umpire/tpl/conduit/scripts/uberenv/packages/uberenv-conduit/uberenv-conduit.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/share/umpire/logo/umpire-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/blt/share/blt/logo/blt_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/umpire/docs/sphinx/cookbook/plot_allocations_example.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/raja/travis-data/intel2016.lic.enc",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/raja/blt/share/blt/logo/blt_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/raja/docs/sphinx/user_guide/figures/RangeSegment.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/raja/docs/sphinx/user_guide/figures/RangeStrideSegment.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/raja/docs/sphinx/user_guide/figures/IndexSet.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/raja/docs/sphinx/user_guide/figures/gsboard.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/raja/docs/sphinx/user_guide/figures/vertexsum.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/raja/docs/sphinx/user_guide/figures/jacobi.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/raja/docs/sphinx/user_guide/figures/ListSegment.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/raja/docs/sphinx/user_guide/figures/redblackGS.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/src/tpl/raja/docs/sphinx/user_guide/figures/index_set_fig.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/chai/blt/share/blt/logo/blt_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/libs/relay/web_clients/wsock_test/example.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/libs/relay/web_clients/wsock_test/example_small.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf16bebom.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf32bebom.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf16le.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf32be.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf16lebom.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf16be.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf32le.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/bin/encodings/utf32lebom.json",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/test/unittest/readertest.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/normalparsing.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/move3.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/architecture.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/insituparsing.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/move2.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/iterative-parser-states-diagram.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/utilityclass.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/move1.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/simpledom.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/diagram/tutorial.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/thirdparty_builtin/rapidjson/doc/logo/rapidjson.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/docs/logos/conduit_logo_blue_bold.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/docs/sphinx/julia_render.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/docs/sphinx/2016_07_13_scipy2016_conduit_slides.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/docs/sphinx/2015_conduit_intro.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/docs/sphinx/spiral_render.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/src/docs/sphinx/braid_render.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/src/umpire/tpl/conduit/scripts/uberenv/packages/uberenv-conduit/uberenv-conduit.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/share/umpire/logo/umpire-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/blt/share/blt/logo/blt_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/umpire/docs/sphinx/cookbook/plot_allocations_example.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/raja/travis-data/intel2016.lic.enc",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/raja/share/raja/logo/RAJA_LOGO_Color.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/raja/blt/share/blt/logo/blt_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/raja/docs/sphinx/user_guide/figures/RangeSegment.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/raja/docs/sphinx/user_guide/figures/RangeStrideSegment.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/raja/docs/sphinx/user_guide/figures/IndexSet.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/raja/docs/sphinx/user_guide/figures/gsboard.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/raja/docs/sphinx/user_guide/figures/vertexsum.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/raja/docs/sphinx/user_guide/figures/jacobi.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/raja/docs/sphinx/user_guide/figures/ListSegment.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/raja/docs/sphinx/user_guide/figures/redblackGS.png",
        "/tmp/vanessa/spack-stage/spack-stage-care-0.2.0-y527k2vk2qexk5irry2ymat2oikoqrhe/spack-src/tpl/raja/docs/sphinx/user_guide/figures/index_set_fig.png"
    ],
    "total_files": 10601
}