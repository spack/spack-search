{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-ermod-0.3.5-pmyoavjyypefnmbf63qwspnpv5gnjnsh/spack-src/vmdfio.c": "/* ERmod - Eneregy Representation Module\n   Copyright (C) 2000-2016 Nobuyuki Matubayasi\n   Copyright (C) 2010-2016 Shun Sakuraba\n\n   This program is free software; you can redistribute it and/or\n   modify it under the terms of the GNU General Public License\n   as published by the Free Software Foundation; either version 2\n   of the License, or (at your option) any later version.\n   As a special exception, you may use this file as part of a free software\n   without restriction.  Specifically, if other files instantiate\n   templates or use macros or inline functions from this file, or you compile\n   this file and link it with other files to produce an executable, this\n   file does not by itself cause the resulting executable to be covered by\n   the GNU General Public License.  \n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. */\n\n/*\n  Generic trajectory access via VMD plugin.\n */\n\n/* FIXME: add F77_FUNC(small,CAPITAL) issues */\n#include \"config.h\"\n\n#include <unistd.h>\n#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <dirent.h>\n#include <math.h>\n\n#include <dlfcn.h>\n\n#include \"vmdplugins/molfile_plugin.h\"\n\n/*\n  Declaration of plugin access points.\n*/\n\n#ifndef INSTALL_PLUGIN_PATH\n#warning INSTALL_PLUGIN_PATH is not defined\n#define INSTALL_PLUGIN_PATH \"\"\n#endif\n\n#define ADHOC_RESOLVER \"adhocresolve.list\"\n\n#define ERMOD_FORCE_PLUGIN \"ERMOD_FORCE_PLUGIN_TYPE\"\n\n/* lazy */\n#define MAXTYPES 1000\nstatic int typecounts = 0;\nstatic molfile_plugin_t* vmdpluginentries[MAXTYPES];\n\n/* lazy too */\n#define MAXPLUGINS 100\nstatic int plugincounts = 0;\nstatic void* ldhandles[MAXPLUGINS];\n\n/*\n  Callback function. Must be compatible with vmdplugin_register_cb. \n */\nstatic int register_callback(void* __vp, vmdplugin_t * entity)\n{\n  if(entity == NULL || entity -> type == NULL) return 0;\n  vmdpluginentries[typecounts++] = (molfile_plugin_t*)entity;\n  return 0;\n}\n\nstatic int check_directory_available(char *path)\n{\n  struct stat st;\n  int r = stat(path, &st);\n\n  if(r == 0 && S_ISDIR(st.st_mode))\n    return 1;\n  return 0;\n}\n\nstatic int is_executable(char* path)\n{\n  struct stat st;\n  int r;\n  r = stat(path, &st);\n  if(r != 0) return 0;\n  if(!(S_ISREG(st.st_mode) || S_ISLNK(st.st_mode))) {\n    return 0;\n  }\n  \n  if(access(path, X_OK) == 0) return 1;\n  return 0;\n}\n\nstatic char* strdupcat(char* str1, char* str2)\n{\n  char* buf = malloc(strlen(str1) + strlen(str2) + 1);\n  strcpy(buf, str1);\n  strcat(buf, str2);\n  return buf;\n}\n\nstatic char* find_plugin_paths()\n{\n  char *pluginpath;\n  /* contract: return malloc'ed string, or return NULL if error */\n\n  /* is ERMOD_PLUGINS present and directory? */\n  if((pluginpath = getenv(\"ERMOD_PLUGINS\")) && \n     check_directory_available(pluginpath)) {\n    return strdup(pluginpath);\n  }\n\n  /* is INSTALL_PLUGIN_PATH available? */\n  if(strlen(INSTALL_PLUGIN_PATH) > 0 &&\n     check_directory_available(INSTALL_PLUGIN_PATH)) {\n    return strdup(INSTALL_PLUGIN_PATH);\n  }\n\n  return NULL;\n}\n\n\nvoid vmdfio_init_traj_(void)\n{\n  char* plugindir;\n  char* buf;\n  \n  if((plugindir = find_plugin_paths()) == NULL){\n    fprintf(stderr, \"Error: cannot find plugin paths, please set ERMOD_PLUGINS environment variable\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  /* traverse directory */\n  do{\n    DIR* dirp;\n    struct dirent *ent;\n    dirp = opendir(plugindir);\n    \n    while((ent = readdir(dirp)) != NULL){\n      /* concat paths */\n      char* d1 = strdupcat(plugindir, \"/\");\n      char* pluginpath = strdupcat(d1, ent -> d_name);\n      free(d1);\n      \n      if(is_executable(pluginpath) && pluginpath[strlen(pluginpath)-1] != '.'){\n\tvoid* handle;\n\thandle = dlopen(pluginpath, RTLD_NOW | RTLD_GLOBAL);\n\tif(!handle){\n\t  fprintf(stderr, \"Warning: failed to load plugin \\\"%s\\\", reason: \\\"%s\\\"\\n\", pluginpath, dlerror());\n\t  continue;\n\t}\n\tvoid* initptr;\n\tvoid* entptr;\n\tinitptr = dlsym(handle, \"vmdplugin_init\");\n\tentptr = dlsym(handle, \"vmdplugin_register\");\n\tif(initptr != NULL && entptr != NULL){\n\t  int r;\n\t  r = ((int (*)(void))initptr)();\n\t  if(r != 0)\n\t    fprintf(stderr, \"Warning: error while initializing %s\\n\", pluginpath);\n\t  ldhandles[plugincounts++] = handle;\n\t  r = ((int (*)(void*, vmdplugin_register_cb))entptr)(NULL, register_callback);\n\t  if(r != 0)\n\t    fprintf(stderr, \"Warning: error while registering %s\\n\", pluginpath);\n\t}else{\n\t  fprintf(stderr, \"Warning: failed to load entry point (plugin: %s)\\n\", pluginpath);\n\t}\n      }\n    }\n  }while(0);\n}\n\nvoid vmdfio_fini_traj_(void)\n{\n  int i;\n  for(i = 0; i < plugincounts; ++i){\n    void* entptr = dlsym(ldhandles[i], \"vmdplugin_fini\");\n    if(entptr){\n      ((int (*)(void))entptr)();\n    }\n    dlclose(ldhandles[i]);\n  }\n}\n\ntypedef struct vmdpluginio_t {\n  molfile_plugin_t * plugin;\n  void* filehandle;\n  int natoms;\n} vmdpluginio;\n\nvoid vmdfio_open_traj_(void **handle, char *fname, int *fnamelen, int *status)\n{\n  char* buf;\n  size_t buflen = 8192;\n  ssize_t r;\n  int fp;\n  char* ext;\n  int i;\n\n  buf = malloc(sizeof(char) * buflen + 1);\n  strncpy(buf, fname, *fnamelen);\n  buf[*fnamelen] = '\\0';\n\n  while(1){\n    r = readlink(buf, buf, buflen);\n    if(r == -1) break;\n    buf[r] = '\\0';\n  }\n\n  if(*fnamelen == strlen(buf) && strncmp(fname, buf, *fnamelen) == 0){\n    /* not a symbolic link? */\n    fprintf(stderr, \"Error: vmdfio.c: failed to open with vmdfio_open_traj_. (filename = \\\"%s\\\".) Perhaps it's not a symbolic link?\\n\", buf);\n    *status = -1;\n    goto cleanup;\n  }\n  \n  /* \n     select plugin to use.\n     use filename_extension to select\n  */\n  *status = -1;\n  *handle = NULL;\n  {\n    /* get filename extension */\n    char* lastdot = strrchr(buf, '.');\n\n    if(lastdot == NULL) goto cleanup;\n    ext = lastdot + 1;\n  }\n  fprintf(stderr, \"Opening: \\\"%s\\\"...\\n\", buf);\n\n  if(getenv(ERMOD_FORCE_PLUGIN) != NULL && \n     strlen(getenv(ERMOD_FORCE_PLUGIN)) > 0) {\n    ext = getenv(ERMOD_FORCE_PLUGIN);\n  }\n\n  for(i = 0; i < typecounts; ++i){\n    int extlen = strlen(ext);\n    molfile_plugin_t *p = vmdpluginentries[i];\n    char* plugin_supportext;\n    char* tokptr;\n    char* ptr;\n\n    if(strcmp(p -> type, MOLFILE_PLUGIN_TYPE) != 0) continue; \n    plugin_supportext = strdup(p -> filename_extension);\n\n    while(1){\n      ptr = strtok_r(plugin_supportext, \",\", &tokptr);\n      if(ptr == NULL) break;\n      plugin_supportext = NULL; /* in the next subsequent call NULL is passed */\n\n      if(strncmp(ptr, ext, extlen) == 0 && \n\t (ptr[extlen] == '\\0' || ptr[extlen] == ',')){\n\tvoid* fh;\n\tvmdpluginio* pp;\n\n\tfprintf(stderr, \"  Trying plugin \\\"%s\\\"...\", p -> prettyname);\n\n\tif(p -> abiversion <= 10) {\n\t  fprintf(stderr, \"Error: \\\"%s\\\" supports trajectory format, but it is too old (requires ABI version > 10)\\n\", p -> prettyname);\n\t  fprintf(stderr, \"Please update plugin files to those of the latest VMD's\\n\");\n\t  continue;\n\t}\n\n\tpp = malloc(sizeof(vmdpluginio));\n\tpp -> plugin = p;\n\n\t/* Found, open with this plugin */\n\tpp -> natoms = MOLFILE_NUMATOMS_UNKNOWN;\n\tfh = (p -> open_file_read)(buf, ext, &(pp->natoms));\n\tif(fh == NULL){\n\t  fprintf(stderr,\n\t\t  \"Error!\\n\"\n\t\t  \"Plugin supports file format \\\"%s\\\", estimated from the extension \\\"%s\\\".\\n\"\n\t\t  \"But the file format of \\\"%s\\\" does not match to the estimated format.\\n\"\n\t\t  \"This is possibly that the file has an incorrect extension, the file is a nested symbolic link (which is unsupported), or the trajectory file header is corrupt.\\n\",\n\t\t  p -> prettyname, ext, buf);\n\t  /* Special error message for AMBER */\n\t  if(strcmp(ext, \"nc\") == 0) {\n\t    fprintf(stderr,\n\t\t    \"Perhaps you forgot to specify \\\"ioutfm = 1\\\" in AMBER?\\n\");\n\t  }\n\t  exit(1);\n\t}\n\tpp -> filehandle = fh;\n\tfprintf(stderr, \"OK\\n\");\n\n\t*handle = pp;\n\tbreak;\n      }\n    }\n    free(plugin_supportext);\n    if(*handle){\n      *status = 0;\n      break;\n    }\n  }\n\n  if(*status == -1){\n    fprintf(stderr, \"Error: could not find appropriate plugins\\n\");\n  }\n\n\n cleanup:\n  free(buf);\n  return;\n}\n\nvoid vmdfio_read_traj_step_(void **handle, double* xout, double* box, int *natoms_aux, int *status)\n{\n  vmdpluginio *p = *handle;\n  molfile_plugin_t *plugin = p -> plugin;\n  molfile_timestep_t snapshot;\n  int natoms = p -> natoms;\n  float* buf;\n  int r;\n\n  if(natoms == MOLFILE_NUMATOMS_UNKNOWN){\n    /* not determined from the trajectory */\n    natoms = *natoms_aux;\n  }else{\n    /* check integrity */\n    if(natoms != *natoms_aux){\n      fprintf(stderr, \"Error: # of atoms in trajectory does not match with # of atoms in configurations. Perhaps you mistook the trajectory?\\n\");\n      *status = -1;\n      return;\n    }\n  }\n\n  buf = malloc(sizeof(float) * 3 * natoms);\n  snapshot.coords = buf;\n\n  r = (plugin -> read_next_timestep)(p -> filehandle, natoms, &snapshot);\n\n  do{\n    int i;\n    double x, y, u, v, w;\n\n    if(r == MOLFILE_EOF){\n      *status = -1;\n      break;\n    }\n\n    /* both are the same format */\n    for(i = 0; i < natoms * 3; ++i)\n      xout[i] = buf[i];\n\n    /*\n      ~a = (1, 0, 0)\n      ~b = (x, y, 0)\n      ~c = (u, v, w)\n      ~a.~b = x = cos gamma\n      |~a*~b| = y = sin gamma\n      ~a.~c = u = cos beta\n      ~b.~c = xu + yv = cos alpha\n    */\n\n    x = cos(snapshot.gamma * M_PI / 180.0);\n    y = sin(snapshot.gamma * M_PI / 180.0);\n    u = cos(snapshot.beta * M_PI / 180.0);\n    v = (cos(snapshot.alpha * M_PI / 180.0) - x * u) / y; /* FIXME: potential underflow risk */\n    w = sqrt(1 - u * u - v * v);  /* FIXME: same above */\n\n    box[0] = snapshot.A;\n    box[3] = snapshot.B * x; \n    box[4] = snapshot.B * y;\n    box[6] = snapshot.C * u; \n    box[7] = snapshot.C * v;\n    box[8] = snapshot.C * w;\n    \n    box[1] = 0.; box[2] = 0.; box[5] = 0;\n\n    *status = 0;\n  }while(0);\n\n  free(buf);\n  return;\n}\n\nvoid vmdfio_close_traj_(void **handle)\n{\n  vmdpluginio *p = *handle;\n  molfile_plugin_t *plugin = p -> plugin;\n  (plugin -> close_file_read)(p -> filehandle);\n  free(*handle);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-ermod-0.3.5-pmyoavjyypefnmbf63qwspnpv5gnjnsh/spack-src/vmdplugins/vmdplugin.h": "/***************************************************************************\n *cr\n *cr            (C) Copyright 1995-2006 The Board of Trustees of the\n *cr                        University of Illinois\n *cr                         All Rights Reserved\n *cr\n ***************************************************************************/\n\n/***************************************************************************\n * RCS INFORMATION:\n *\n *      $RCSfile: vmdplugin.h,v $\n *      $Author: johns $       $Locker:  $             $State: Exp $\n *      $Revision: 1.32 $       $Date: 2009/02/24 05:12:35 $\n *\n ***************************************************************************/\n\n/** @file\n * This header must be included by every VMD plugin library.  It defines the\n * API for every plugin so that VMD can organize the plugins it finds.  \n */\n\n#ifndef VMD_PLUGIN_H\n#define VMD_PLUGIN_H\n\n\n/* \n * Preprocessor tricks to make it easier for us to redefine the names of\n * functions when building static plugins.\n */\n#if !defined(VMDPLUGIN)\n/** \n  * macro defining VMDPLUGIN if it hasn't already been set to the name of \n  * a static plugin that is being compiled.  This is the catch-all case.\n  */\n#define VMDPLUGIN vmdplugin\n#endif\n/** concatenation macro, joins args x and y together as a single string */\n#define xcat(x, y) cat(x, y)\n/** concatenation macro, joins args x and y together as a single string */\n#define cat(x, y) x ## y \n\n/*\n *  macros to correctly define plugin function names depending on whether \n *  the plugin is being compiled for static linkage or dynamic loading. \n *  When compiled for static linkage, each plugin needs to have unique\n *  function names for all of its entry points.  When compiled for dynamic\n *  loading, the plugins must name their entry points consistently so that\n *  the plugin loading mechanism can find the register, register_tcl, init,\n *  and fini routines via dlopen() or similar operating system interfaces.\n */\n/*@{*/\n/** Macro names entry points correctly for static linkage or dynamic loading */\n#define VMDPLUGIN_register     xcat(VMDPLUGIN, _register)\n#define VMDPLUGIN_register_tcl xcat(VMDPLUGIN, _register_tcl)\n#define VMDPLUGIN_init         xcat(VMDPLUGIN, _init)\n#define VMDPLUGIN_fini         xcat(VMDPLUGIN, _fini)\n/*@}*/\n\n\n/** \"WIN32\" is defined on both WIN32 and WIN64 platforms... */\n#if (defined(WIN32)) \n#define WIN32_LEAN_AND_MEAN\n#include <windows.h>\n\n#if !defined(STATIC_PLUGIN)\n#if defined(VMDPLUGIN_EXPORTS)\n/** \n *  Only define DllMain for plugins, not in VMD or in statically linked plugins\n *  VMDPLUGIN_EXPORTS is only defined when compiling dynamically loaded plugins\n */\nBOOL APIENTRY DllMain( HANDLE hModule,\n                       DWORD ul_reason_for_call,\n                       LPVOID lpReserved\n                     )\n{\n  return TRUE;\n}\n\n#define VMDPLUGIN_API __declspec(dllexport)\n#else\n#define VMDPLUGIN_API __declspec(dllimport)\n#endif /* VMDPLUGIN_EXPORTS */\n#else  /* ! STATIC_PLUGIN */\n#define VMDPLUGIN_API\n#endif /* ! STATIC_PLUGIN */\n#else\n/** If we're not compiling on Windows, then this macro is defined empty */\n#define VMDPLUGIN_API \n#endif\n\n/** define plugin linkage correctly for both C and C++ based plugins */\n#ifdef __cplusplus\n#define VMDPLUGIN_EXTERN extern \"C\" VMDPLUGIN_API\n#else\n#define VMDPLUGIN_EXTERN extern VMDPLUGIN_API\n#endif  /* __cplusplus */\n\n/* \n * Plugin API functions start here \n */\n\n\n/** \n * Init routine: called the first time the library is loaded by the \n * application and before any other API functions are referenced.\n * Return 0 on success.\n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_init(void);\n\n/**\n * Macro for creating a struct header used in all plugin structures.\n * \n * This header should be placed at the top of every plugin API definition \n * so that it can be treated as a subtype of the base plugin type.\n *\n * abiversion: Defines the ABI for the base plugin type (not for other plugins)\n * type: A string descriptor of the plugin type.\n * name: A name for the plugin.\n * author: A string identifier, possibly including newlines.\n * Major and minor version.  \n * is_reentrant: Whether this library can be run concurrently with itself.\n */\n#define vmdplugin_HEAD \\\n  int abiversion; \\\n  const char *type; \\\n  const char *name; \\\n  const char *prettyname; \\\n  const char *author; \\\n  int majorv; \\\n  int minorv; \\\n  int is_reentrant; \n\n/** \n  * Typedef for generic plugin header, individual plugins can\n  * make their own structures as long as the header info remains \n  * the same as the generic plugin header, most easily done by \n  * using the vmdplugin_HEAD macro.\n  */\ntypedef struct {\n  vmdplugin_HEAD\n} vmdplugin_t;\n\n/**\n * Use this macro to initialize the abiversion member of each plugin\n */\n#define vmdplugin_ABIVERSION  16\n\n/*@{*/\n/** Use this macro to indicate a plugin's thread-safety at registration time */\n#define VMDPLUGIN_THREADUNSAFE 0\n#define VMDPLUGIN_THREADSAFE   1\n/*@}*/\n\n/*@{*/\n/** Error return code for use in the plugin registration and init functions */\n#define VMDPLUGIN_SUCCESS      0\n#define VMDPLUGIN_ERROR       -1\n/*@}*/\n\n/** \n * Function pointer typedef for register callback functions\n */\ntypedef int (*vmdplugin_register_cb)(void *, vmdplugin_t *);\n\n/**\n * Allow the library to register plugins with the application.\n * The callback should be called using the passed-in void pointer, which\n * should not be interpreted in any way by the library.  Each vmdplugin_t\n * pointer passed to the application should point to statically-allocated\n * or heap-allocated memory and should never be later modified by the plugin.\n * Applications must be permitted to retain only a copy of the the plugin\n * pointer, without making any deep copy of the items in the struct.\n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_register(void *, vmdplugin_register_cb);\n\n/**\n * Allow the library to register Tcl extensions.  \n * This API is optional; if found by dlopen, it will be called after first\n * calling init and register.  \n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_register_tcl(void *, void *tcl_interp, \n    vmdplugin_register_cb);\n\n/**\n * The Fini method is called when the application will no longer use \n * any plugins in the library.  \n */\nVMDPLUGIN_EXTERN int VMDPLUGIN_fini(void);\n\n#endif   /* VMD_PLUGIN_H */\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-ermod-0.3.5-pmyoavjyypefnmbf63qwspnpv5gnjnsh/spack-src/vmdplugins/periodic_table.h",
        "/tmp/vanessa/spack-stage/spack-stage-ermod-0.3.5-pmyoavjyypefnmbf63qwspnpv5gnjnsh/spack-src/vmdplugins/phiplugin.C",
        "/tmp/vanessa/spack-stage/spack-stage-ermod-0.3.5-pmyoavjyypefnmbf63qwspnpv5gnjnsh/spack-src/vmdplugins/libexec/netcdfplugin.so",
        "/tmp/vanessa/spack-stage/spack-stage-ermod-0.3.5-pmyoavjyypefnmbf63qwspnpv5gnjnsh/spack-src/vmdplugins/libexec/gromacsplugin.so",
        "/tmp/vanessa/spack-stage/spack-stage-ermod-0.3.5-pmyoavjyypefnmbf63qwspnpv5gnjnsh/spack-src/vmdplugins/libexec/dcdplugin.so"
    ],
    "total_files": 136
}