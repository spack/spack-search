{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/src/libs/conv-libs/openmp_llvm/runtime/src/z_Linux_util.c": "/*\n * z_Linux_util.c -- platform specific routines.\n */\n\n\n//===----------------------------------------------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.txt for details.\n//\n//===----------------------------------------------------------------------===//\n\n\n#include \"kmp.h\"\n#include \"kmp_wrapper_getpid.h\"\n#include \"kmp_itt.h\"\n#include \"kmp_str.h\"\n#include \"kmp_i18n.h\"\n#include \"kmp_lock.h\"\n#include \"kmp_io.h\"\n#include \"kmp_stats.h\"\n#include \"kmp_wait_release.h\"\n\n#if !KMP_OS_FREEBSD && !KMP_OS_NETBSD\n# include <alloca.h>\n#endif\n#include <unistd.h>\n#include <math.h>               // HUGE_VAL.\n#include <sys/time.h>\n#include <sys/times.h>\n#include <sys/resource.h>\n#include <sys/syscall.h>\n\n#if KMP_OS_LINUX && !KMP_OS_CNK\n# include <sys/sysinfo.h>\n# if KMP_USE_FUTEX\n// We should really include <futex.h>, but that causes compatibility problems on different\n// Linux* OS distributions that either require that you include (or break when you try to include)\n// <pci/types.h>.\n// Since all we need is the two macros below (which are part of the kernel ABI, so can't change)\n// we just define the constants here and don't include <futex.h>\n#  ifndef FUTEX_WAIT\n#   define FUTEX_WAIT    0\n#  endif\n#  ifndef FUTEX_WAKE\n#   define FUTEX_WAKE    1\n#  endif\n# endif\n#elif KMP_OS_DARWIN\n# include <sys/sysctl.h>\n# include <mach/mach.h>\n#elif KMP_OS_FREEBSD\n# include <pthread_np.h>\n#endif\n\n#include <dirent.h>\n#include <ctype.h>\n#include <fcntl.h>\n\n#if CHARM_OMP\n#include \"ompcharm.h\"\n#endif\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\nstruct kmp_sys_timer {\n    struct timespec     start;\n};\n\n// Convert timespec to nanoseconds.\n#define TS2NS(timespec) (((timespec).tv_sec * 1e9) + (timespec).tv_nsec)\n\nstatic struct kmp_sys_timer __kmp_sys_timer_data;\n\n#if KMP_HANDLE_SIGNALS\n    typedef void                            (* sig_func_t )( int );\n    STATIC_EFI2_WORKAROUND struct sigaction    __kmp_sighldrs[ NSIG ];\n    static sigset_t                            __kmp_sigset;\n#endif\n\nstatic int __kmp_init_runtime   = FALSE;\n\nstatic int __kmp_fork_count = 0;\n\nstatic pthread_condattr_t  __kmp_suspend_cond_attr;\nstatic pthread_mutexattr_t __kmp_suspend_mutex_attr;\n\nstatic kmp_cond_align_t    __kmp_wait_cv;\nstatic kmp_mutex_align_t   __kmp_wait_mx;\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\n#ifdef DEBUG_SUSPEND\nstatic void\n__kmp_print_cond( char *buffer, kmp_cond_align_t *cond )\n{\n    KMP_SNPRINTF( buffer, 128, \"(cond (lock (%ld, %d)), (descr (%p)))\",\n                      cond->c_cond.__c_lock.__status, cond->c_cond.__c_lock.__spinlock,\n                      cond->c_cond.__c_waiting );\n}\n#endif\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\n#if ( KMP_OS_LINUX && KMP_AFFINITY_SUPPORTED)\n\n/*\n * Affinity support\n */\n\n/*\n * On some of the older OS's that we build on, these constants aren't present\n * in <asm/unistd.h> #included from <sys.syscall.h>.  They must be the same on\n * all systems of the same arch where they are defined, and they cannot change.\n * stone forever.\n */\n\n#  if KMP_ARCH_X86 || KMP_ARCH_ARM\n#   ifndef __NR_sched_setaffinity\n#    define __NR_sched_setaffinity  241\n#   elif __NR_sched_setaffinity != 241\n#    error Wrong code for setaffinity system call.\n#   endif /* __NR_sched_setaffinity */\n#   ifndef __NR_sched_getaffinity\n#    define __NR_sched_getaffinity  242\n#   elif __NR_sched_getaffinity != 242\n#    error Wrong code for getaffinity system call.\n#   endif /* __NR_sched_getaffinity */\n\n#  elif KMP_ARCH_AARCH64\n#   ifndef __NR_sched_setaffinity\n#    define __NR_sched_setaffinity  122\n#   elif __NR_sched_setaffinity != 122\n#    error Wrong code for setaffinity system call.\n#   endif /* __NR_sched_setaffinity */\n#   ifndef __NR_sched_getaffinity\n#    define __NR_sched_getaffinity  123\n#   elif __NR_sched_getaffinity != 123\n#    error Wrong code for getaffinity system call.\n#   endif /* __NR_sched_getaffinity */\n\n#  elif KMP_ARCH_X86_64\n#   ifndef __NR_sched_setaffinity\n#    define __NR_sched_setaffinity  203\n#   elif __NR_sched_setaffinity != 203\n#    error Wrong code for setaffinity system call.\n#   endif /* __NR_sched_setaffinity */\n#   ifndef __NR_sched_getaffinity\n#    define __NR_sched_getaffinity  204\n#   elif __NR_sched_getaffinity != 204\n#    error Wrong code for getaffinity system call.\n#   endif /* __NR_sched_getaffinity */\n\n#  elif KMP_ARCH_PPC64\n#   ifndef __NR_sched_setaffinity\n#    define __NR_sched_setaffinity  222\n#   elif __NR_sched_setaffinity != 222\n#    error Wrong code for setaffinity system call.\n#   endif /* __NR_sched_setaffinity */\n#   ifndef __NR_sched_getaffinity\n#    define __NR_sched_getaffinity  223\n#   elif __NR_sched_getaffinity != 223\n#    error Wrong code for getaffinity system call.\n#   endif /* __NR_sched_getaffinity */\n\n\n#  else\n#   error Unknown or unsupported architecture\n\n#  endif /* KMP_ARCH_* */\n\nint\n__kmp_set_system_affinity( kmp_affin_mask_t const *mask, int abort_on_error )\n{\n    KMP_ASSERT2(KMP_AFFINITY_CAPABLE(),\n      \"Illegal set affinity operation when not capable\");\n#if KMP_USE_HWLOC\n    int retval = hwloc_set_cpubind(__kmp_hwloc_topology, (hwloc_cpuset_t)mask, HWLOC_CPUBIND_THREAD);\n#else\n    int retval = syscall( __NR_sched_setaffinity, 0, __kmp_affin_mask_size, mask );\n#endif\n    if (retval >= 0) {\n        return 0;\n    }\n    int error = errno;\n    if (abort_on_error) {\n        __kmp_msg(\n            kmp_ms_fatal,\n            KMP_MSG( FatalSysError ),\n            KMP_ERR( error ),\n            __kmp_msg_null\n        );\n    }\n    return error;\n}\n\nint\n__kmp_get_system_affinity( kmp_affin_mask_t *mask, int abort_on_error )\n{\n    KMP_ASSERT2(KMP_AFFINITY_CAPABLE(),\n      \"Illegal get affinity operation when not capable\");\n\n#if KMP_USE_HWLOC\n    int retval = hwloc_get_cpubind(__kmp_hwloc_topology, (hwloc_cpuset_t)mask, HWLOC_CPUBIND_THREAD);\n#else\n    int retval = syscall( __NR_sched_getaffinity, 0, __kmp_affin_mask_size, mask );\n#endif\n    if (retval >= 0) {\n        return 0;\n    }\n    int error = errno;\n    if (abort_on_error) {\n        __kmp_msg(\n            kmp_ms_fatal,\n            KMP_MSG( FatalSysError ),\n            KMP_ERR( error ),\n            __kmp_msg_null\n        );\n    }\n    return error;\n}\n\nvoid\n__kmp_affinity_bind_thread( int which )\n{\n    KMP_ASSERT2(KMP_AFFINITY_CAPABLE(),\n      \"Illegal set affinity operation when not capable\");\n\n    kmp_affin_mask_t *mask;\n    KMP_CPU_ALLOC_ON_STACK(mask);\n    KMP_CPU_ZERO(mask);\n    KMP_CPU_SET(which, mask);\n    __kmp_set_system_affinity(mask, TRUE);\n    KMP_CPU_FREE_FROM_STACK(mask);\n}\n\n/*\n * Determine if we can access affinity functionality on this version of\n * Linux* OS by checking __NR_sched_{get,set}affinity system calls, and set\n * __kmp_affin_mask_size to the appropriate value (0 means not capable).\n */\nvoid\n__kmp_affinity_determine_capable(const char *env_var)\n{\n    //\n    // Check and see if the OS supports thread affinity.\n    //\n\n# define KMP_CPU_SET_SIZE_LIMIT          (1024*1024)\n\n    int gCode;\n    int sCode;\n    kmp_affin_mask_t *buf;\n    buf = ( kmp_affin_mask_t * ) KMP_INTERNAL_MALLOC( KMP_CPU_SET_SIZE_LIMIT );\n\n    // If Linux* OS:\n    // If the syscall fails or returns a suggestion for the size,\n    // then we don't have to search for an appropriate size.\n    gCode = syscall( __NR_sched_getaffinity, 0, KMP_CPU_SET_SIZE_LIMIT, buf );\n    KA_TRACE(30, ( \"__kmp_affinity_determine_capable: \"\n       \"initial getaffinity call returned %d errno = %d\\n\",\n       gCode, errno));\n\n    //if ((gCode < 0) && (errno == ENOSYS))\n    if (gCode < 0) {\n        //\n        // System call not supported\n        //\n        if (__kmp_affinity_verbose || (__kmp_affinity_warnings\n          && (__kmp_affinity_type != affinity_none)\n          && (__kmp_affinity_type != affinity_default)\n          && (__kmp_affinity_type != affinity_disabled))) {\n            int error = errno;\n            __kmp_msg(\n                kmp_ms_warning,\n                KMP_MSG( GetAffSysCallNotSupported, env_var ),\n                KMP_ERR( error ),\n                __kmp_msg_null\n            );\n        }\n        KMP_AFFINITY_DISABLE();\n        KMP_INTERNAL_FREE(buf);\n        return;\n    }\n    if (gCode > 0) { // Linux* OS only\n        // The optimal situation: the OS returns the size of the buffer\n        // it expects.\n        //\n        // A verification of correct behavior is that Isetaffinity on a NULL\n        // buffer with the same size fails with errno set to EFAULT.\n        sCode = syscall( __NR_sched_setaffinity, 0, gCode, NULL );\n        KA_TRACE(30, ( \"__kmp_affinity_determine_capable: \"\n           \"setaffinity for mask size %d returned %d errno = %d\\n\",\n           gCode, sCode, errno));\n        if (sCode < 0) {\n            if (errno == ENOSYS) {\n                if (__kmp_affinity_verbose || (__kmp_affinity_warnings\n                  && (__kmp_affinity_type != affinity_none)\n                  && (__kmp_affinity_type != affinity_default)\n                  && (__kmp_affinity_type != affinity_disabled))) {\n                    int error = errno;\n                    __kmp_msg(\n                        kmp_ms_warning,\n                        KMP_MSG( SetAffSysCallNotSupported, env_var ),\n                        KMP_ERR( error ),\n                        __kmp_msg_null\n                    );\n                }\n                KMP_AFFINITY_DISABLE();\n                KMP_INTERNAL_FREE(buf);\n            }\n            if (errno == EFAULT) {\n                KMP_AFFINITY_ENABLE(gCode);\n                KA_TRACE(10, ( \"__kmp_affinity_determine_capable: \"\n                  \"affinity supported (mask size %d)\\n\",\n                  (int)__kmp_affin_mask_size));\n                KMP_INTERNAL_FREE(buf);\n                return;\n            }\n        }\n    }\n\n    //\n    // Call the getaffinity system call repeatedly with increasing set sizes\n    // until we succeed, or reach an upper bound on the search.\n    //\n    KA_TRACE(30, ( \"__kmp_affinity_determine_capable: \"\n      \"searching for proper set size\\n\"));\n    int size;\n    for (size = 1; size <= KMP_CPU_SET_SIZE_LIMIT; size *= 2) {\n        gCode = syscall( __NR_sched_getaffinity, 0,  size, buf );\n        KA_TRACE(30, ( \"__kmp_affinity_determine_capable: \"\n          \"getaffinity for mask size %d returned %d errno = %d\\n\", size,\n            gCode, errno));\n\n        if (gCode < 0) {\n            if ( errno == ENOSYS )\n            {\n                //\n                // We shouldn't get here\n                //\n                KA_TRACE(30, ( \"__kmp_affinity_determine_capable: \"\n                  \"inconsistent OS call behavior: errno == ENOSYS for mask size %d\\n\",\n                   size));\n                if (__kmp_affinity_verbose || (__kmp_affinity_warnings\n                  && (__kmp_affinity_type != affinity_none)\n                  && (__kmp_affinity_type != affinity_default)\n                  && (__kmp_affinity_type != affinity_disabled))) {\n                    int error = errno;\n                    __kmp_msg(\n                        kmp_ms_warning,\n                        KMP_MSG( GetAffSysCallNotSupported, env_var ),\n                        KMP_ERR( error ),\n                        __kmp_msg_null\n                    );\n                }\n                KMP_AFFINITY_DISABLE();\n                KMP_INTERNAL_FREE(buf);\n                return;\n            }\n            continue;\n        }\n\n        sCode = syscall( __NR_sched_setaffinity, 0, gCode, NULL );\n        KA_TRACE(30, ( \"__kmp_affinity_determine_capable: \"\n           \"setaffinity for mask size %d returned %d errno = %d\\n\",\n           gCode, sCode, errno));\n        if (sCode < 0) {\n            if (errno == ENOSYS) { // Linux* OS only\n                //\n                // We shouldn't get here\n                //\n                KA_TRACE(30, ( \"__kmp_affinity_determine_capable: \"\n                  \"inconsistent OS call behavior: errno == ENOSYS for mask size %d\\n\",\n                   size));\n                if (__kmp_affinity_verbose || (__kmp_affinity_warnings\n                  && (__kmp_affinity_type != affinity_none)\n                  && (__kmp_affinity_type != affinity_default)\n                  && (__kmp_affinity_type != affinity_disabled))) {\n                    int error = errno;\n                    __kmp_msg(\n                        kmp_ms_warning,\n                        KMP_MSG( SetAffSysCallNotSupported, env_var ),\n                        KMP_ERR( error ),\n                        __kmp_msg_null\n                    );\n                }\n                KMP_AFFINITY_DISABLE();\n                KMP_INTERNAL_FREE(buf);\n                return;\n            }\n            if (errno == EFAULT) {\n                KMP_AFFINITY_ENABLE(gCode);\n                KA_TRACE(10, ( \"__kmp_affinity_determine_capable: \"\n                  \"affinity supported (mask size %d)\\n\",\n                   (int)__kmp_affin_mask_size));\n                KMP_INTERNAL_FREE(buf);\n                return;\n            }\n        }\n    }\n    //int error = errno;  // save uncaught error code\n    KMP_INTERNAL_FREE(buf);\n    // errno = error;  // restore uncaught error code, will be printed at the next KMP_WARNING below\n\n    //\n    // Affinity is not supported\n    //\n    KMP_AFFINITY_DISABLE();\n    KA_TRACE(10, ( \"__kmp_affinity_determine_capable: \"\n      \"cannot determine mask size - affinity not supported\\n\"));\n    if (__kmp_affinity_verbose || (__kmp_affinity_warnings\n      && (__kmp_affinity_type != affinity_none)\n      && (__kmp_affinity_type != affinity_default)\n      && (__kmp_affinity_type != affinity_disabled))) {\n        KMP_WARNING( AffCantGetMaskSize, env_var );\n    }\n}\n\n#endif // KMP_OS_LINUX && KMP_AFFINITY_SUPPORTED\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\n#if KMP_USE_FUTEX\n\nint\n__kmp_futex_determine_capable()\n{\n    int loc = 0;\n    int rc = syscall( __NR_futex, &loc, FUTEX_WAKE, 1, NULL, NULL, 0 );\n    int retval = ( rc == 0 ) || ( errno != ENOSYS );\n\n    KA_TRACE(10, ( \"__kmp_futex_determine_capable: rc = %d errno = %d\\n\", rc,\n      errno ) );\n    KA_TRACE(10, ( \"__kmp_futex_determine_capable: futex syscall%s supported\\n\",\n        retval ? \"\" : \" not\" ) );\n\n    return retval;\n}\n\n#endif // KMP_USE_FUTEX\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\n#if (KMP_ARCH_X86 || KMP_ARCH_X86_64) && (! KMP_ASM_INTRINS)\n/*\n * Only 32-bit \"add-exchange\" instruction on IA-32 architecture causes us to\n * use compare_and_store for these routines\n */\n\nkmp_int8\n__kmp_test_then_or8( volatile kmp_int8 *p, kmp_int8 d )\n{\n    kmp_int8 old_value, new_value;\n\n    old_value = TCR_1( *p );\n    new_value = old_value | d;\n\n    while ( ! KMP_COMPARE_AND_STORE_REL8 ( p, old_value, new_value ) )\n    {\n        KMP_CPU_PAUSE();\n        old_value = TCR_1( *p );\n        new_value = old_value | d;\n    }\n    return old_value;\n}\n\nkmp_int8\n__kmp_test_then_and8( volatile kmp_int8 *p, kmp_int8 d )\n{\n    kmp_int8 old_value, new_value;\n\n    old_value = TCR_1( *p );\n    new_value = old_value & d;\n\n    while ( ! KMP_COMPARE_AND_STORE_REL8 ( p, old_value, new_value ) )\n    {\n        KMP_CPU_PAUSE();\n        old_value = TCR_1( *p );\n        new_value = old_value & d;\n    }\n    return old_value;\n}\n\nkmp_int32\n__kmp_test_then_or32( volatile kmp_int32 *p, kmp_int32 d )\n{\n    kmp_int32 old_value, new_value;\n\n    old_value = TCR_4( *p );\n    new_value = old_value | d;\n\n    while ( ! KMP_COMPARE_AND_STORE_REL32 ( p, old_value, new_value ) )\n    {\n        KMP_CPU_PAUSE();\n        old_value = TCR_4( *p );\n        new_value = old_value | d;\n    }\n    return old_value;\n}\n\nkmp_int32\n__kmp_test_then_and32( volatile kmp_int32 *p, kmp_int32 d )\n{\n    kmp_int32 old_value, new_value;\n\n    old_value = TCR_4( *p );\n    new_value = old_value & d;\n\n    while ( ! KMP_COMPARE_AND_STORE_REL32 ( p, old_value, new_value ) )\n    {\n        KMP_CPU_PAUSE();\n        old_value = TCR_4( *p );\n        new_value = old_value & d;\n    }\n    return old_value;\n}\n\n# if KMP_ARCH_X86 || KMP_ARCH_PPC64 || (KMP_OS_LINUX && KMP_ARCH_AARCH64)\nkmp_int8\n__kmp_test_then_add8( volatile kmp_int8 *p, kmp_int8 d )\n{\n    kmp_int8 old_value, new_value;\n\n    old_value = TCR_1( *p );\n    new_value = old_value + d;\n\n    while ( ! KMP_COMPARE_AND_STORE_REL8 ( p, old_value, new_value ) )\n    {\n        KMP_CPU_PAUSE();\n        old_value = TCR_1( *p );\n        new_value = old_value + d;\n    }\n    return old_value;\n}\n\nkmp_int64\n__kmp_test_then_add64( volatile kmp_int64 *p, kmp_int64 d )\n{\n    kmp_int64 old_value, new_value;\n\n    old_value = TCR_8( *p );\n    new_value = old_value + d;\n\n    while ( ! KMP_COMPARE_AND_STORE_REL64 ( p, old_value, new_value ) )\n    {\n        KMP_CPU_PAUSE();\n        old_value = TCR_8( *p );\n        new_value = old_value + d;\n    }\n    return old_value;\n}\n# endif /* KMP_ARCH_X86 || KMP_ARCH_PPC64 || (KMP_OS_LINUX && KMP_ARCH_AARCH64) */\n\nkmp_int64\n__kmp_test_then_or64( volatile kmp_int64 *p, kmp_int64 d )\n{\n    kmp_int64 old_value, new_value;\n\n    old_value = TCR_8( *p );\n    new_value = old_value | d;\n    while ( ! KMP_COMPARE_AND_STORE_REL64 ( p, old_value, new_value ) )\n    {\n        KMP_CPU_PAUSE();\n        old_value = TCR_8( *p );\n        new_value = old_value | d;\n    }\n    return old_value;\n}\n\nkmp_int64\n__kmp_test_then_and64( volatile kmp_int64 *p, kmp_int64 d )\n{\n    kmp_int64 old_value, new_value;\n\n    old_value = TCR_8( *p );\n    new_value = old_value & d;\n    while ( ! KMP_COMPARE_AND_STORE_REL64 ( p, old_value, new_value ) )\n    {\n        KMP_CPU_PAUSE();\n        old_value = TCR_8( *p );\n        new_value = old_value & d;\n    }\n    return old_value;\n}\n\n#endif /* (KMP_ARCH_X86 || KMP_ARCH_X86_64) && (! KMP_ASM_INTRINS) */\n\nvoid\n__kmp_terminate_thread( int gtid )\n{\n    int status;\n    kmp_info_t  *th = __kmp_threads[ gtid ];\n\n    if ( !th ) return;\n\n    #ifdef KMP_CANCEL_THREADS\n        KA_TRACE( 10, (\"__kmp_terminate_thread: kill (%d)\\n\", gtid ) );\n        status = pthread_cancel( th->th.th_info.ds.ds_thread );\n        if ( status != 0 && status != ESRCH ) {\n            __kmp_msg(\n                kmp_ms_fatal,\n                KMP_MSG( CantTerminateWorkerThread ),\n                KMP_ERR( status ),\n                __kmp_msg_null\n            );\n        }; // if\n    #endif\n    __kmp_yield( TRUE );\n} //\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\n/*\n * Set thread stack info according to values returned by\n * pthread_getattr_np().\n * If values are unreasonable, assume call failed and use\n * incremental stack refinement method instead.\n * Returns TRUE if the stack parameters could be determined exactly,\n * FALSE if incremental refinement is necessary.\n */\nstatic kmp_int32\n__kmp_set_stack_info( int gtid, kmp_info_t *th )\n{\n    int            stack_data;\n#if KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD\n    /* Linux* OS only -- no pthread_getattr_np support on OS X* */\n    pthread_attr_t attr;\n    int            status;\n    size_t         size = 0;\n    void *         addr = 0;\n\n    /* Always do incremental stack refinement for ubermaster threads since the initial\n       thread stack range can be reduced by sibling thread creation so pthread_attr_getstack\n       may cause thread gtid aliasing */\n    if ( ! KMP_UBER_GTID(gtid) ) {\n\n        /* Fetch the real thread attributes */\n        status = pthread_attr_init( &attr );\n        KMP_CHECK_SYSFAIL( \"pthread_attr_init\", status );\n#if KMP_OS_FREEBSD || KMP_OS_NETBSD\n        status = pthread_attr_get_np( pthread_self(), &attr );\n        KMP_CHECK_SYSFAIL( \"pthread_attr_get_np\", status );\n#else\n        status = pthread_getattr_np( pthread_self(), &attr );\n        KMP_CHECK_SYSFAIL( \"pthread_getattr_np\", status );\n#endif\n        status = pthread_attr_getstack( &attr, &addr, &size );\n        KMP_CHECK_SYSFAIL( \"pthread_attr_getstack\", status );\n        KA_TRACE( 60, ( \"__kmp_set_stack_info: T#%d pthread_attr_getstack returned size: %lu, \"\n                        \"low addr: %p\\n\",\n                        gtid, size, addr ));\n\n        status = pthread_attr_destroy( &attr );\n        KMP_CHECK_SYSFAIL( \"pthread_attr_destroy\", status );\n    }\n\n    if ( size != 0 && addr != 0 ) {     /* was stack parameter determination successful? */\n        /* Store the correct base and size */\n        TCW_PTR(th->th.th_info.ds.ds_stackbase, (((char *)addr) + size));\n        TCW_PTR(th->th.th_info.ds.ds_stacksize, size);\n        TCW_4(th->th.th_info.ds.ds_stackgrow, FALSE);\n        return TRUE;\n    }\n#endif /* KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD */\n    /* Use incremental refinement starting from initial conservative estimate */\n    TCW_PTR(th->th.th_info.ds.ds_stacksize, 0);\n    TCW_PTR(th -> th.th_info.ds.ds_stackbase, &stack_data);\n    TCW_4(th->th.th_info.ds.ds_stackgrow, TRUE);\n    return FALSE;\n}\n#if CHARM_OMP\nvoid*\n__kmp_launch_worker( void *data )\n#else\nstatic void*\n__kmp_launch_worker( void *thr )\n#endif\n{\n#if CHARM_OMP\n    void *thr = ((OmpConverseMsg*)(data))->convMsg.data;\n#endif\n    int status, old_type, old_state;\n#if KMP_BLOCK_SIGNALS && !CHARM_OMP\n    sigset_t    new_set, old_set;\n#endif /* KMP_BLOCK_SIGNALS && !CHARM_OMP */\n    void *exit_val;\n#if KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD\n    void * volatile padding = 0;\n#endif\n    int gtid;\n\n    gtid = ((kmp_info_t*)thr) -> th.th_info.ds.ds_gtid;\n#if CHARM_OMP\n    int prev_gtid;\n    prev_gtid=__kmp_gtid_get_specific();\n#ifdef KMP_TDATA_GTID\n    prev_gtid=__kmp_gtid;\n#endif\n#endif\n    __kmp_gtid_set_specific( gtid );\n#ifdef KMP_TDATA_GTID\n    __kmp_gtid = gtid;\n#endif\n#if KMP_STATS_ENABLED\n    // set __thread local index to point to thread-specific stats\n    __kmp_stats_thread_ptr = ((kmp_info_t*)thr)->th.th_stats;\n    KMP_START_EXPLICIT_TIMER(OMP_worker_thread_life);\n    KMP_SET_THREAD_STATE(IDLE);\n    KMP_INIT_PARTITIONED_TIMERS(OMP_idle);\n#endif\n\n#if USE_ITT_BUILD\n    __kmp_itt_thread_name( gtid );\n#endif /* USE_ITT_BUILD */\n\n#if KMP_AFFINITY_SUPPORTED\n    __kmp_affinity_set_init_mask( gtid, FALSE );\n#endif\n#if !CHARM_OMP\n#ifdef KMP_CANCEL_THREADS\n    status = pthread_setcanceltype( PTHREAD_CANCEL_ASYNCHRONOUS, & old_type );\n    KMP_CHECK_SYSFAIL( \"pthread_setcanceltype\", status );\n    /* josh todo: isn't PTHREAD_CANCEL_ENABLE default for newly-created threads? */\n    status = pthread_setcancelstate( PTHREAD_CANCEL_ENABLE, & old_state );\n    KMP_CHECK_SYSFAIL( \"pthread_setcancelstate\", status );\n#endif\n#endif\n#if KMP_ARCH_X86 || KMP_ARCH_X86_64\n    //\n    // Set the FP control regs to be a copy of\n    // the parallel initialization thread's.\n    //\n    __kmp_clear_x87_fpu_status_word();\n    __kmp_load_x87_fpu_control_word( &__kmp_init_x87_fpu_control_word );\n    __kmp_load_mxcsr( &__kmp_init_mxcsr );\n#endif /* KMP_ARCH_X86 || KMP_ARCH_X86_64 */\n\n#if KMP_BLOCK_SIGNALS && !CHARM_OMP\n    status = sigfillset( & new_set );\n    KMP_CHECK_SYSFAIL_ERRNO( \"sigfillset\", status );\n    status = pthread_sigmask( SIG_BLOCK, & new_set, & old_set );\n    KMP_CHECK_SYSFAIL( \"pthread_sigmask\", status );\n#endif /* KMP_BLOCK_SIGNALS && !CHARM_OMP */\n\n#if KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD\n    if ( __kmp_stkoffset > 0 && gtid > 0 ) {\n        padding = KMP_ALLOCA( gtid * __kmp_stkoffset );\n    }\n#endif\n\n    KMP_MB();\n#if !CHARM_OMP\n    __kmp_set_stack_info( gtid, (kmp_info_t*)thr );\n\n    __kmp_check_stack_overlap( (kmp_info_t*)thr );\n#endif\n    exit_val = __kmp_launch_thread( (kmp_info_t *) thr );\n#if KMP_BLOCK_SIGNALS && !CHARM_OMP\n    status = pthread_sigmask( SIG_SETMASK, & old_set, NULL );\n    KMP_CHECK_SYSFAIL( \"pthread_sigmask\", status );\n#endif /* KMP_BLOCK_SIGNALS && !CHARM_OMP */\n\n#if CHARM_OMP\n    __kmp_gtid_set_specific(prev_gtid);\n#ifdef KMP_TDATA_GTID\n    __kmp_gtid = prev_gtid;\n#endif\n#endif\n    return exit_val;\n}\n\n/* The monitor thread controls all of the threads in the complex */\n\nstatic void*\n__kmp_launch_monitor( void *thr )\n{\n    int         status, old_type, old_state;\n#if KMP_BLOCK_SIGNALS && !CHARM_OMP\n    sigset_t    new_set;\n#endif /* KMP_BLOCK_SIGNALS && !CHARM_OMP */\n    struct timespec  interval;\n    int yield_count;\n    int yield_cycles = 0;\n\n    KMP_MB();       /* Flush all pending memory write invalidates.  */\n\n    KA_TRACE( 10, (\"__kmp_launch_monitor: #1 launched\\n\" ) );\n\n    /* register us as the monitor thread */\n    __kmp_gtid_set_specific( KMP_GTID_MONITOR );\n#ifdef KMP_TDATA_GTID\n    __kmp_gtid = KMP_GTID_MONITOR;\n#endif\n\n    KMP_MB();\n\n#if USE_ITT_BUILD\n    __kmp_itt_thread_ignore();    // Instruct Intel(R) Threading Tools to ignore monitor thread.\n#endif /* USE_ITT_BUILD */\n\n    __kmp_set_stack_info( ((kmp_info_t*)thr)->th.th_info.ds.ds_gtid, (kmp_info_t*)thr );\n\n    __kmp_check_stack_overlap( (kmp_info_t*)thr );\n\n#ifdef KMP_CANCEL_THREADS\n    status = pthread_setcanceltype( PTHREAD_CANCEL_ASYNCHRONOUS, & old_type );\n    KMP_CHECK_SYSFAIL( \"pthread_setcanceltype\", status );\n    /* josh todo: isn't PTHREAD_CANCEL_ENABLE default for newly-created threads? */\n    status = pthread_setcancelstate( PTHREAD_CANCEL_ENABLE, & old_state );\n    KMP_CHECK_SYSFAIL( \"pthread_setcancelstate\", status );\n#endif\n\n    #if KMP_REAL_TIME_FIX\n    // This is a potential fix which allows application with real-time scheduling policy work.\n    // However, decision about the fix is not made yet, so it is disabled by default.\n    { // Are program started with real-time scheduling policy?\n        int sched = sched_getscheduler( 0 );\n        if ( sched == SCHED_FIFO || sched == SCHED_RR ) {\n            // Yes, we are a part of real-time application. Try to increase the priority of the\n            // monitor.\n            struct sched_param param;\n            int    max_priority = sched_get_priority_max( sched );\n            int    rc;\n            KMP_WARNING( RealTimeSchedNotSupported );\n            sched_getparam( 0, & param );\n            if ( param.sched_priority < max_priority ) {\n                param.sched_priority += 1;\n                rc = sched_setscheduler( 0, sched, & param );\n                if ( rc != 0 ) {\n                    int error = errno;\n                  __kmp_msg(\n                      kmp_ms_warning,\n                      KMP_MSG( CantChangeMonitorPriority ),\n                      KMP_ERR( error ),\n                      KMP_MSG( MonitorWillStarve ),\n                      __kmp_msg_null\n                  );\n                }; // if\n            } else {\n                // We cannot abort here, because number of CPUs may be enough for all the threads,\n                // including the monitor thread, so application could potentially work...\n                __kmp_msg(\n                    kmp_ms_warning,\n                    KMP_MSG( RunningAtMaxPriority ),\n                    KMP_MSG( MonitorWillStarve ),\n                    KMP_HNT( RunningAtMaxPriority ),\n                    __kmp_msg_null\n                );\n            }; // if\n        }; // if\n        TCW_4( __kmp_global.g.g_time.dt.t_value, 0 );  // AC: free thread that waits for monitor started\n    }\n    #endif // KMP_REAL_TIME_FIX\n\n    KMP_MB();       /* Flush all pending memory write invalidates.  */\n\n    if ( __kmp_monitor_wakeups == 1 ) {\n        interval.tv_sec  = 1;\n        interval.tv_nsec = 0;\n    } else {\n        interval.tv_sec  = 0;\n        interval.tv_nsec = (KMP_NSEC_PER_SEC / __kmp_monitor_wakeups);\n    }\n\n    KA_TRACE( 10, (\"__kmp_launch_monitor: #2 monitor\\n\" ) );\n\n    if (__kmp_yield_cycle) {\n        __kmp_yielding_on = 0;  /* Start out with yielding shut off */\n        yield_count = __kmp_yield_off_count;\n    } else {\n        __kmp_yielding_on = 1;  /* Yielding is on permanently */\n    }\n\n    while( ! TCR_4( __kmp_global.g.g_done ) ) {\n        struct timespec  now;\n        struct timeval   tval;\n\n        /*  This thread monitors the state of the system */\n\n        KA_TRACE( 15, ( \"__kmp_launch_monitor: update\\n\" ) );\n\n        status = gettimeofday( &tval, NULL );\n        KMP_CHECK_SYSFAIL_ERRNO( \"gettimeofday\", status );\n        TIMEVAL_TO_TIMESPEC( &tval, &now );\n\n        now.tv_sec  += interval.tv_sec;\n        now.tv_nsec += interval.tv_nsec;\n\n        if (now.tv_nsec >= KMP_NSEC_PER_SEC) {\n            now.tv_sec  += 1;\n            now.tv_nsec -= KMP_NSEC_PER_SEC;\n        }\n\n        status = pthread_mutex_lock( & __kmp_wait_mx.m_mutex );\n        KMP_CHECK_SYSFAIL( \"pthread_mutex_lock\", status );\n        // AC: the monitor should not fall asleep if g_done has been set\n        if ( !TCR_4(__kmp_global.g.g_done) ) {  // check once more under mutex\n            status = pthread_cond_timedwait( &__kmp_wait_cv.c_cond, &__kmp_wait_mx.m_mutex, &now );\n            if ( status != 0 ) {\n                if ( status != ETIMEDOUT && status != EINTR ) {\n                    KMP_SYSFAIL( \"pthread_cond_timedwait\", status );\n                };\n            };\n        };\n        status = pthread_mutex_unlock( & __kmp_wait_mx.m_mutex );\n        KMP_CHECK_SYSFAIL( \"pthread_mutex_unlock\", status );\n\n        if (__kmp_yield_cycle) {\n            yield_cycles++;\n            if ( (yield_cycles % yield_count) == 0 ) {\n                if (__kmp_yielding_on) {\n                    __kmp_yielding_on = 0;   /* Turn it off now */\n                    yield_count = __kmp_yield_off_count;\n                } else {\n                    __kmp_yielding_on = 1;   /* Turn it on now */\n                    yield_count = __kmp_yield_on_count;\n                }\n                yield_cycles = 0;\n            }\n        } else {\n            __kmp_yielding_on = 1;\n        }\n\n        TCW_4( __kmp_global.g.g_time.dt.t_value,\n          TCR_4( __kmp_global.g.g_time.dt.t_value ) + 1 );\n\n        KMP_MB();       /* Flush all pending memory write invalidates.  */\n    }\n\n    KA_TRACE( 10, (\"__kmp_launch_monitor: #3 cleanup\\n\" ) );\n\n#if KMP_BLOCK_SIGNALS && !CHARM_OMP\n    status = sigfillset( & new_set );\n    KMP_CHECK_SYSFAIL_ERRNO( \"sigfillset\", status );\n    status = pthread_sigmask( SIG_UNBLOCK, & new_set, NULL );\n    KMP_CHECK_SYSFAIL( \"pthread_sigmask\", status );\n#endif /* KMP_BLOCK_SIGNALS && !CHARM_OMP */\n\n    KA_TRACE( 10, (\"__kmp_launch_monitor: #4 finished\\n\" ) );\n\n    if( __kmp_global.g.g_abort != 0 ) {\n        /* now we need to terminate the worker threads  */\n        /* the value of t_abort is the signal we caught */\n\n        int gtid;\n\n        KA_TRACE( 10, (\"__kmp_launch_monitor: #5 terminate sig=%d\\n\", __kmp_global.g.g_abort ) );\n\n        /* terminate the OpenMP worker threads */\n        /* TODO this is not valid for sibling threads!!\n         * the uber master might not be 0 anymore.. */\n        for (gtid = 1; gtid < __kmp_threads_capacity; ++gtid)\n            __kmp_terminate_thread( gtid );\n\n        __kmp_cleanup();\n\n        KA_TRACE( 10, (\"__kmp_launch_monitor: #6 raise sig=%d\\n\", __kmp_global.g.g_abort ) );\n\n        if (__kmp_global.g.g_abort > 0)\n            raise( __kmp_global.g.g_abort );\n\n    }\n\n    KA_TRACE( 10, (\"__kmp_launch_monitor: #7 exit\\n\" ) );\n\n    return thr;\n}\n\nvoid\n__kmp_create_worker( int gtid, kmp_info_t *th, size_t stack_size )\n{\n#if !CHARM_OMP\n    pthread_t      handle;\n    pthread_attr_t thread_attr;\n#endif\n    int            status;\n\n\n    th->th.th_info.ds.ds_gtid = gtid;\n#if !CHARM_OMP\n#if KMP_STATS_ENABLED\n    // sets up worker thread stats\n    __kmp_acquire_tas_lock(&__kmp_stats_lock, gtid);\n\n    // th->th.th_stats is used to transfer thread specific stats-pointer to __kmp_launch_worker\n    // So when thread is created (goes into __kmp_launch_worker) it will\n    // set it's __thread local pointer to th->th.th_stats\n    th->th.th_stats = __kmp_stats_list.push_back(gtid);\n    if(KMP_UBER_GTID(gtid)) {\n        __kmp_stats_start_time = tsc_tick_count::now();\n        __kmp_stats_thread_ptr = th->th.th_stats;\n        __kmp_stats_init();\n        KMP_START_EXPLICIT_TIMER(OMP_worker_thread_life);\n        KMP_SET_THREAD_STATE(SERIAL_REGION);\n        KMP_INIT_PARTITIONED_TIMERS(OMP_serial);\n    }\n    __kmp_release_tas_lock(&__kmp_stats_lock, gtid);\n\n#endif // KMP_STATS_ENABLED\n\n    if ( KMP_UBER_GTID(gtid) ) {\n        KA_TRACE( 10, (\"__kmp_create_worker: uber thread (%d)\\n\", gtid ) );\n        th -> th.th_info.ds.ds_thread = pthread_self();\n        __kmp_set_stack_info( gtid, th );\n        __kmp_check_stack_overlap( th );\n        return;\n    }; // if\n\n    KA_TRACE( 10, (\"__kmp_create_worker: try to create thread (%d)\\n\", gtid ) );\n\n    KMP_MB();       /* Flush all pending memory write invalidates.  */\n\n#ifdef KMP_THREAD_ATTR\n    status = pthread_attr_init( &thread_attr );\n    if ( status != 0 ) {\n        __kmp_msg(kmp_ms_fatal, KMP_MSG( CantInitThreadAttrs ), KMP_ERR( status ), __kmp_msg_null);\n    }; // if\n    status = pthread_attr_setdetachstate( & thread_attr, PTHREAD_CREATE_JOINABLE );\n    if ( status != 0 ) {\n        __kmp_msg(kmp_ms_fatal, KMP_MSG( CantSetWorkerState ), KMP_ERR( status ), __kmp_msg_null);\n    }; // if\n\n    /* Set stack size for this thread now.\n     * The multiple of 2 is there because on some machines, requesting an unusual stacksize\n     * causes the thread to have an offset before the dummy alloca() takes place to create the\n     * offset.  Since we want the user to have a sufficient stacksize AND support a stack offset, we\n     * alloca() twice the offset so that the upcoming alloca() does not eliminate any premade\n     * offset, and also gives the user the stack space they requested for all threads */\n    stack_size += gtid * __kmp_stkoffset * 2;\n\n    KA_TRACE( 10, ( \"__kmp_create_worker: T#%d, default stacksize = %lu bytes, \"\n                    \"__kmp_stksize = %lu bytes, final stacksize = %lu bytes\\n\",\n                    gtid, KMP_DEFAULT_STKSIZE, __kmp_stksize, stack_size ) );\n\n# ifdef _POSIX_THREAD_ATTR_STACKSIZE\n    status = pthread_attr_setstacksize( & thread_attr, stack_size );\n#  ifdef KMP_BACKUP_STKSIZE\n    if ( status != 0 ) {\n        if ( ! __kmp_env_stksize ) {\n            stack_size = KMP_BACKUP_STKSIZE + gtid * __kmp_stkoffset;\n            __kmp_stksize = KMP_BACKUP_STKSIZE;\n            KA_TRACE( 10, (\"__kmp_create_worker: T#%d, default stacksize = %lu bytes, \"\n                           \"__kmp_stksize = %lu bytes, (backup) final stacksize = %lu \"\n                           \"bytes\\n\",\n                           gtid, KMP_DEFAULT_STKSIZE, __kmp_stksize, stack_size )\n                      );\n            status = pthread_attr_setstacksize( &thread_attr, stack_size );\n        }; // if\n    }; // if\n#  endif /* KMP_BACKUP_STKSIZE */\n    if ( status != 0 ) {\n        __kmp_msg(kmp_ms_fatal, KMP_MSG( CantSetWorkerStackSize, stack_size ), KMP_ERR( status ),\n                  KMP_HNT( ChangeWorkerStackSize  ), __kmp_msg_null);\n    }; // if\n# endif /* _POSIX_THREAD_ATTR_STACKSIZE */\n\n#endif /* KMP_THREAD_ATTR */\n    status = pthread_create( & handle, & thread_attr, __kmp_launch_worker, (void *) th );\n    if ( status != 0 || ! handle ) { // ??? Why do we check handle??\n#ifdef _POSIX_THREAD_ATTR_STACKSIZE\n        if ( status == EINVAL ) {\n            __kmp_msg(kmp_ms_fatal, KMP_MSG( CantSetWorkerStackSize, stack_size ), KMP_ERR( status ),\n                      KMP_HNT( IncreaseWorkerStackSize ), __kmp_msg_null);\n        };\n        if ( status == ENOMEM ) {\n            __kmp_msg(kmp_ms_fatal, KMP_MSG( CantSetWorkerStackSize, stack_size ), KMP_ERR( status ),\n                      KMP_HNT( DecreaseWorkerStackSize ), __kmp_msg_null);\n        };\n#endif /* _POSIX_THREAD_ATTR_STACKSIZE */\n        if ( status == EAGAIN ) {\n            __kmp_msg(kmp_ms_fatal, KMP_MSG( NoResourcesForWorkerThread ), KMP_ERR( status ),\n                      KMP_HNT( Decrease_NUM_THREADS ), __kmp_msg_null);\n        }; // if\n        KMP_SYSFAIL( \"pthread_create\", status );\n    }; // if\n\n    th->th.th_info.ds.ds_thread = handle;\n\n#ifdef KMP_THREAD_ATTR\n    status = pthread_attr_destroy( & thread_attr );\n    if ( status ) {\n        __kmp_msg(kmp_ms_warning, KMP_MSG( CantDestroyThreadAttrs ), KMP_ERR( status ), __kmp_msg_null);\n    }; // if\n#endif /* KMP_THREAD_ATTR */\n#endif /* CHARM_OMP*/\n    KMP_MB();       /* Flush all pending memory write invalidates.  */\n\n    KA_TRACE( 10, (\"__kmp_create_worker: done creating thread (%d)\\n\", gtid ) );\n\n} // __kmp_create_worker\n\n\nvoid\n__kmp_create_monitor( kmp_info_t *th )\n{\n    pthread_t           handle;\n    pthread_attr_t      thread_attr;\n    size_t              size;\n    int                 status;\n    int                 auto_adj_size = FALSE;\n\n    if( __kmp_dflt_blocktime == KMP_MAX_BLOCKTIME ) {\n        // We don't need monitor thread in case of MAX_BLOCKTIME\n        KA_TRACE( 10, (\"__kmp_create_monitor: skipping monitor thread because of MAX blocktime\\n\" ) );\n        th->th.th_info.ds.ds_tid  = 0; // this makes reap_monitor no-op\n        th->th.th_info.ds.ds_gtid = 0;\n        return;\n    }\n    KA_TRACE( 10, (\"__kmp_create_monitor: try to create monitor\\n\" ) );\n\n    KMP_MB();       /* Flush all pending memory write invalidates.  */\n\n    th->th.th_info.ds.ds_tid  = KMP_GTID_MONITOR;\n    th->th.th_info.ds.ds_gtid = KMP_GTID_MONITOR;\n    #if KMP_REAL_TIME_FIX\n        TCW_4( __kmp_global.g.g_time.dt.t_value, -1 ); // Will use it for synchronization a bit later.\n    #else\n        TCW_4( __kmp_global.g.g_time.dt.t_value, 0 );\n    #endif // KMP_REAL_TIME_FIX\n\n    #ifdef KMP_THREAD_ATTR\n        if ( __kmp_monitor_stksize == 0 ) {\n            __kmp_monitor_stksize = KMP_DEFAULT_MONITOR_STKSIZE;\n            auto_adj_size = TRUE;\n        }\n        status = pthread_attr_init( &thread_attr );\n        if ( status != 0 ) {\n            __kmp_msg(\n                kmp_ms_fatal,\n                KMP_MSG( CantInitThreadAttrs ),\n                KMP_ERR( status ),\n                __kmp_msg_null\n            );\n        }; // if\n        status = pthread_attr_setdetachstate( & thread_attr, PTHREAD_CREATE_JOINABLE );\n        if ( status != 0 ) {\n            __kmp_msg(\n                kmp_ms_fatal,\n                KMP_MSG( CantSetMonitorState ),\n                KMP_ERR( status ),\n                __kmp_msg_null\n            );\n        }; // if\n\n        #ifdef _POSIX_THREAD_ATTR_STACKSIZE\n            status = pthread_attr_getstacksize( & thread_attr, & size );\n            KMP_CHECK_SYSFAIL( \"pthread_attr_getstacksize\", status );\n        #else\n            size = __kmp_sys_min_stksize;\n        #endif /* _POSIX_THREAD_ATTR_STACKSIZE */\n    #endif /* KMP_THREAD_ATTR */\n\n    if ( __kmp_monitor_stksize == 0 ) {\n        __kmp_monitor_stksize = KMP_DEFAULT_MONITOR_STKSIZE;\n    }\n    if ( __kmp_monitor_stksize < __kmp_sys_min_stksize ) {\n        __kmp_monitor_stksize = __kmp_sys_min_stksize;\n    }\n\n    KA_TRACE( 10, ( \"__kmp_create_monitor: default stacksize = %lu bytes,\"\n                    \"requested stacksize = %lu bytes\\n\",\n                    size, __kmp_monitor_stksize ) );\n\n    retry:\n\n    /* Set stack size for this thread now. */\n\n    #ifdef _POSIX_THREAD_ATTR_STACKSIZE\n        KA_TRACE( 10, ( \"__kmp_create_monitor: setting stacksize = %lu bytes,\",\n                        __kmp_monitor_stksize ) );\n        status = pthread_attr_setstacksize( & thread_attr, __kmp_monitor_stksize );\n        if ( status != 0 ) {\n            if ( auto_adj_size ) {\n                __kmp_monitor_stksize *= 2;\n                goto retry;\n            }\n            __kmp_msg(\n                kmp_ms_warning,  // should this be fatal?  BB\n                KMP_MSG( CantSetMonitorStackSize, (long int) __kmp_monitor_stksize ),\n                KMP_ERR( status ),\n                KMP_HNT( ChangeMonitorStackSize ),\n                __kmp_msg_null\n            );\n        }; // if\n    #endif /* _POSIX_THREAD_ATTR_STACKSIZE */\n\n    status = pthread_create( &handle, & thread_attr, __kmp_launch_monitor, (void *) th );\n\n    if ( status != 0 ) {\n        #ifdef _POSIX_THREAD_ATTR_STACKSIZE\n            if ( status == EINVAL ) {\n                if ( auto_adj_size  && ( __kmp_monitor_stksize < (size_t)0x40000000 ) ) {\n                    __kmp_monitor_stksize *= 2;\n                    goto retry;\n                }\n                __kmp_msg(\n                    kmp_ms_fatal,\n                    KMP_MSG( CantSetMonitorStackSize, __kmp_monitor_stksize ),\n                    KMP_ERR( status ),\n                    KMP_HNT( IncreaseMonitorStackSize ),\n                    __kmp_msg_null\n                );\n            }; // if\n            if ( status == ENOMEM ) {\n                __kmp_msg(\n                    kmp_ms_fatal,\n                    KMP_MSG( CantSetMonitorStackSize, __kmp_monitor_stksize ),\n                    KMP_ERR( status ),\n                    KMP_HNT( DecreaseMonitorStackSize ),\n                    __kmp_msg_null\n                );\n            }; // if\n        #endif /* _POSIX_THREAD_ATTR_STACKSIZE */\n        if ( status == EAGAIN ) {\n            __kmp_msg(\n                kmp_ms_fatal,\n                KMP_MSG( NoResourcesForMonitorThread ),\n                KMP_ERR( status ),\n                KMP_HNT( DecreaseNumberOfThreadsInUse ),\n                __kmp_msg_null\n            );\n        }; // if\n        KMP_SYSFAIL( \"pthread_create\", status );\n    }; // if\n\n    th->th.th_info.ds.ds_thread = handle;\n\n    #if KMP_REAL_TIME_FIX\n        // Wait for the monitor thread is really started and set its *priority*.\n        KMP_DEBUG_ASSERT( sizeof( kmp_uint32 ) == sizeof( __kmp_global.g.g_time.dt.t_value ) );\n        __kmp_wait_yield_4(\n            (kmp_uint32 volatile *) & __kmp_global.g.g_time.dt.t_value, -1, & __kmp_neq_4, NULL\n        );\n    #endif // KMP_REAL_TIME_FIX\n\n    #ifdef KMP_THREAD_ATTR\n        status = pthread_attr_destroy( & thread_attr );\n        if ( status != 0 ) {\n            __kmp_msg(    //\n                kmp_ms_warning,\n                KMP_MSG( CantDestroyThreadAttrs ),\n                KMP_ERR( status ),\n                __kmp_msg_null\n            );\n        }; // if\n    #endif\n\n    KMP_MB();       /* Flush all pending memory write invalidates.  */\n\n    KA_TRACE( 10, ( \"__kmp_create_monitor: monitor created %#.8lx\\n\", th->th.th_info.ds.ds_thread ) );\n\n} // __kmp_create_monitor\n\nvoid\n__kmp_exit_thread(\n    int exit_status\n) {\n    pthread_exit( (void *)(intptr_t) exit_status );\n} // __kmp_exit_thread\n\nvoid __kmp_resume_monitor();\n\nvoid\n__kmp_reap_monitor( kmp_info_t *th )\n{\n    int          status;\n    void        *exit_val;\n\n    KA_TRACE( 10, (\"__kmp_reap_monitor: try to reap monitor thread with handle %#.8lx\\n\",\n                   th->th.th_info.ds.ds_thread ) );\n\n    // If monitor has been created, its tid and gtid should be KMP_GTID_MONITOR.\n    // If both tid and gtid are 0, it means the monitor did not ever start.\n    // If both tid and gtid are KMP_GTID_DNE, the monitor has been shut down.\n    KMP_DEBUG_ASSERT( th->th.th_info.ds.ds_tid == th->th.th_info.ds.ds_gtid );\n    if ( th->th.th_info.ds.ds_gtid != KMP_GTID_MONITOR ) {\n        KA_TRACE( 10, (\"__kmp_reap_monitor: monitor did not start, returning\\n\") );\n        return;\n    }; // if\n\n    KMP_MB();       /* Flush all pending memory write invalidates.  */\n\n\n    /* First, check to see whether the monitor thread exists to wake it up. This is\n       to avoid performance problem when the monitor sleeps during blocktime-size\n       interval */\n\n    status = pthread_kill( th->th.th_info.ds.ds_thread, 0 );\n    if (status != ESRCH) {\n        __kmp_resume_monitor();   // Wake up the monitor thread\n    }\n    KA_TRACE( 10, (\"__kmp_reap_monitor: try to join with monitor\\n\") );\n    status = pthread_join( th->th.th_info.ds.ds_thread, & exit_val);\n    if (exit_val != th) {\n        __kmp_msg(\n            kmp_ms_fatal,\n            KMP_MSG( ReapMonitorError ),\n            KMP_ERR( status ),\n            __kmp_msg_null\n        );\n    }\n\n    th->th.th_info.ds.ds_tid  = KMP_GTID_DNE;\n    th->th.th_info.ds.ds_gtid = KMP_GTID_DNE;\n\n    KA_TRACE( 10, (\"__kmp_reap_monitor: done reaping monitor thread with handle %#.8lx\\n\",\n                   th->th.th_info.ds.ds_thread ) );\n\n    KMP_MB();       /* Flush all pending memory write invalidates.  */\n\n}\n\nvoid\n__kmp_reap_worker( kmp_info_t *th )\n{\n    int          status;\n    void        *exit_val;\n\n    KMP_MB();       /* Flush all pending memory write invalidates.  */\n\n    KA_TRACE( 10, (\"__kmp_reap_worker: try to reap T#%d\\n\", th->th.th_info.ds.ds_gtid ) );\n\n    status = pthread_join( th->th.th_info.ds.ds_thread, & exit_val);\n#ifdef KMP_DEBUG\n    /* Don't expose these to the user until we understand when they trigger */\n    if ( status != 0 ) {\n        __kmp_msg(kmp_ms_fatal, KMP_MSG( ReapWorkerError ), KMP_ERR( status ), __kmp_msg_null);\n    }\n    if ( exit_val != th ) {\n        KA_TRACE( 10, ( \"__kmp_reap_worker: worker T#%d did not reap properly, exit_val = %p\\n\",\n                        th->th.th_info.ds.ds_gtid, exit_val ) );\n    }\n#endif /* KMP_DEBUG */\n\n    KA_TRACE( 10, (\"__kmp_reap_worker: done reaping T#%d\\n\", th->th.th_info.ds.ds_gtid ) );\n\n    KMP_MB();       /* Flush all pending memory write invalidates.  */\n}\n\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\n#if KMP_HANDLE_SIGNALS\n\n\nstatic void\n__kmp_null_handler( int signo )\n{\n    //  Do nothing, for doing SIG_IGN-type actions.\n} // __kmp_null_handler\n\n\nstatic void\n__kmp_team_handler( int signo )\n{\n    if ( __kmp_global.g.g_abort == 0 ) {\n        /* Stage 1 signal handler, let's shut down all of the threads */\n        #ifdef KMP_DEBUG\n            __kmp_debug_printf( \"__kmp_team_handler: caught signal = %d\\n\", signo );\n        #endif\n        switch ( signo ) {\n            case SIGHUP  :\n            case SIGINT  :\n            case SIGQUIT :\n            case SIGILL  :\n            case SIGABRT :\n            case SIGFPE  :\n            case SIGBUS  :\n            case SIGSEGV :\n            #ifdef SIGSYS\n                case SIGSYS :\n            #endif\n            case SIGTERM :\n                if ( __kmp_debug_buf ) {\n                    __kmp_dump_debug_buffer( );\n                }; // if\n                KMP_MB();       // Flush all pending memory write invalidates.\n                TCW_4( __kmp_global.g.g_abort, signo );\n                KMP_MB();       // Flush all pending memory write invalidates.\n                TCW_4( __kmp_global.g.g_done, TRUE );\n                KMP_MB();       // Flush all pending memory write invalidates.\n                break;\n            default:\n                #ifdef KMP_DEBUG\n                    __kmp_debug_printf( \"__kmp_team_handler: unknown signal type\" );\n                #endif\n                break;\n        }; // switch\n    }; // if\n} // __kmp_team_handler\n\n\nstatic\nvoid __kmp_sigaction( int signum, const struct sigaction * act, struct sigaction * oldact ) {\n    int rc = sigaction( signum, act, oldact );\n    KMP_CHECK_SYSFAIL_ERRNO( \"sigaction\", rc );\n}\n\n\nstatic void\n__kmp_install_one_handler( int sig, sig_func_t handler_func, int parallel_init )\n{\n    KMP_MB();       // Flush all pending memory write invalidates.\n    KB_TRACE( 60, ( \"__kmp_install_one_handler( %d, ..., %d )\\n\", sig, parallel_init ) );\n    if ( parallel_init ) {\n        struct sigaction new_action;\n        struct sigaction old_action;\n        new_action.sa_handler = handler_func;\n        new_action.sa_flags   = 0;\n        sigfillset( & new_action.sa_mask );\n        __kmp_sigaction( sig, & new_action, & old_action );\n        if ( old_action.sa_handler == __kmp_sighldrs[ sig ].sa_handler ) {\n            sigaddset( & __kmp_sigset, sig );\n        } else {\n            // Restore/keep user's handler if one previously installed.\n            __kmp_sigaction( sig, & old_action, NULL );\n        }; // if\n    } else {\n        // Save initial/system signal handlers to see if user handlers installed.\n        __kmp_sigaction( sig, NULL, & __kmp_sighldrs[ sig ] );\n    }; // if\n    KMP_MB();       // Flush all pending memory write invalidates.\n} // __kmp_install_one_handler\n\n\nstatic void\n__kmp_remove_one_handler( int sig )\n{\n    KB_TRACE( 60, ( \"__kmp_remove_one_handler( %d )\\n\", sig ) );\n    if ( sigismember( & __kmp_sigset, sig ) ) {\n        struct sigaction old;\n        KMP_MB();       // Flush all pending memory write invalidates.\n        __kmp_sigaction( sig, & __kmp_sighldrs[ sig ], & old );\n        if ( ( old.sa_handler != __kmp_team_handler ) && ( old.sa_handler != __kmp_null_handler ) ) {\n            // Restore the users signal handler.\n            KB_TRACE( 10, ( \"__kmp_remove_one_handler: oops, not our handler, restoring: sig=%d\\n\", sig ) );\n            __kmp_sigaction( sig, & old, NULL );\n        }; // if\n        sigdelset( & __kmp_sigset, sig );\n        KMP_MB();       // Flush all pending memory write invalidates.\n    }; // if\n} // __kmp_remove_one_handler\n\n\nvoid\n__kmp_install_signals( int parallel_init )\n{\n    KB_TRACE( 10, ( \"__kmp_install_signals( %d )\\n\", parallel_init ) );\n    if ( __kmp_handle_signals || ! parallel_init ) {\n        // If ! parallel_init, we do not install handlers, just save original handlers.\n        // Let us do it even __handle_signals is 0.\n        sigemptyset( & __kmp_sigset );\n        __kmp_install_one_handler( SIGHUP,  __kmp_team_handler, parallel_init );\n        __kmp_install_one_handler( SIGINT,  __kmp_team_handler, parallel_init );\n        __kmp_install_one_handler( SIGQUIT, __kmp_team_handler, parallel_init );\n        __kmp_install_one_handler( SIGILL,  __kmp_team_handler, parallel_init );\n        __kmp_install_one_handler( SIGABRT, __kmp_team_handler, parallel_init );\n        __kmp_install_one_handler( SIGFPE,  __kmp_team_handler, parallel_init );\n        __kmp_install_one_handler( SIGBUS,  __kmp_team_handler, parallel_init );\n        __kmp_install_one_handler( SIGSEGV, __kmp_team_handler, parallel_init );\n        #ifdef SIGSYS\n            __kmp_install_one_handler( SIGSYS,  __kmp_team_handler, parallel_init );\n        #endif // SIGSYS\n        __kmp_install_one_handler( SIGTERM, __kmp_team_handler, parallel_init );\n        #ifdef SIGPIPE\n            __kmp_install_one_handler( SIGPIPE, __kmp_team_handler, parallel_init );\n        #endif // SIGPIPE\n    }; // if\n} // __kmp_install_signals\n\n\nvoid\n__kmp_remove_signals( void )\n{\n    int    sig;\n    KB_TRACE( 10, ( \"__kmp_remove_signals()\\n\" ) );\n    for ( sig = 1; sig < NSIG; ++ sig ) {\n        __kmp_remove_one_handler( sig );\n    }; // for sig\n} // __kmp_remove_signals\n\n\n#endif // KMP_HANDLE_SIGNALS\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\nvoid\n__kmp_enable( int new_state )\n{\n    #ifdef KMP_CANCEL_THREADS\n        int status, old_state;\n        status = pthread_setcancelstate( new_state, & old_state );\n        KMP_CHECK_SYSFAIL( \"pthread_setcancelstate\", status );\n        KMP_DEBUG_ASSERT( old_state == PTHREAD_CANCEL_DISABLE );\n    #endif\n}\n\nvoid\n__kmp_disable( int * old_state )\n{\n    #ifdef KMP_CANCEL_THREADS\n        int status;\n        status = pthread_setcancelstate( PTHREAD_CANCEL_DISABLE, old_state );\n        KMP_CHECK_SYSFAIL( \"pthread_setcancelstate\", status );\n    #endif\n}\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\nstatic void\n__kmp_atfork_prepare (void)\n{\n    /*  nothing to do  */\n}\n\nstatic void\n__kmp_atfork_parent (void)\n{\n    /*  nothing to do  */\n}\n\n/*\n    Reset the library so execution in the child starts \"all over again\" with\n    clean data structures in initial states.  Don't worry about freeing memory\n    allocated by parent, just abandon it to be safe.\n*/\nstatic void\n__kmp_atfork_child (void)\n{\n    /* TODO make sure this is done right for nested/sibling */\n    // ATT:  Memory leaks are here? TODO: Check it and fix.\n    /* KMP_ASSERT( 0 ); */\n\n    ++__kmp_fork_count;\n\n    __kmp_init_runtime = FALSE;\n    __kmp_init_monitor = 0;\n    __kmp_init_parallel = FALSE;\n    __kmp_init_middle = FALSE;\n    __kmp_init_serial = FALSE;\n    TCW_4(__kmp_init_gtid, FALSE);\n    __kmp_init_common = FALSE;\n\n    TCW_4(__kmp_init_user_locks, FALSE);\n#if ! KMP_USE_DYNAMIC_LOCK\n    __kmp_user_lock_table.used = 1;\n    __kmp_user_lock_table.allocated = 0;\n    __kmp_user_lock_table.table = NULL;\n    __kmp_lock_blocks = NULL;\n#endif\n\n    __kmp_all_nth = 0;\n    TCW_4(__kmp_nth, 0);\n\n    /* Must actually zero all the *cache arguments passed to __kmpc_threadprivate here\n       so threadprivate doesn't use stale data */\n    KA_TRACE( 10, ( \"__kmp_atfork_child: checking cache address list %p\\n\",\n                 __kmp_threadpriv_cache_list ) );\n\n    while ( __kmp_threadpriv_cache_list != NULL ) {\n\n        if ( *__kmp_threadpriv_cache_list -> addr != NULL ) {\n            KC_TRACE( 50, ( \"__kmp_atfork_child: zeroing cache at address %p\\n\",\n                        &(*__kmp_threadpriv_cache_list -> addr) ) );\n\n            *__kmp_threadpriv_cache_list -> addr = NULL;\n        }\n        __kmp_threadpriv_cache_list = __kmp_threadpriv_cache_list -> next;\n    }\n\n    __kmp_init_runtime = FALSE;\n\n    /* reset statically initialized locks */\n    __kmp_init_bootstrap_lock( &__kmp_initz_lock );\n    __kmp_init_bootstrap_lock( &__kmp_stdio_lock );\n    __kmp_init_bootstrap_lock( &__kmp_console_lock );\n\n    /* This is necessary to make sure no stale data is left around */\n    /* AC: customers complain that we use unsafe routines in the atfork\n       handler. Mathworks: dlsym() is unsafe. We call dlsym and dlopen\n       in dynamic_link when check the presence of shared tbbmalloc library.\n       Suggestion is to make the library initialization lazier, similar\n       to what done for __kmpc_begin(). */\n    // TODO: synchronize all static initializations with regular library\n    //       startup; look at kmp_global.c and etc.\n    //__kmp_internal_begin ();\n\n}\n\nvoid\n__kmp_register_atfork(void) {\n    if ( __kmp_need_register_atfork ) {\n        int status = pthread_atfork( __kmp_atfork_prepare, __kmp_atfork_parent, __kmp_atfork_child );\n        KMP_CHECK_SYSFAIL( \"pthread_atfork\", status );\n        __kmp_need_register_atfork = FALSE;\n    }\n}\n\nvoid\n__kmp_suspend_initialize( void )\n{\n    int status;\n    status = pthread_mutexattr_init( &__kmp_suspend_mutex_attr );\n    KMP_CHECK_SYSFAIL( \"pthread_mutexattr_init\", status );\n    status = pthread_condattr_init( &__kmp_suspend_cond_attr );\n    KMP_CHECK_SYSFAIL( \"pthread_condattr_init\", status );\n}\n\nstatic void\n__kmp_suspend_initialize_thread( kmp_info_t *th )\n{\n    if ( th->th.th_suspend_init_count <= __kmp_fork_count ) {\n        /* this means we haven't initialized the suspension pthread objects for this thread\n           in this instance of the process */\n        int     status;\n        status = pthread_cond_init( &th->th.th_suspend_cv.c_cond, &__kmp_suspend_cond_attr );\n        KMP_CHECK_SYSFAIL( \"pthread_cond_init\", status );\n        status = pthread_mutex_init( &th->th.th_suspend_mx.m_mutex, & __kmp_suspend_mutex_attr );\n        KMP_CHECK_SYSFAIL( \"pthread_mutex_init\", status );\n        *(volatile int*)&th->th.th_suspend_init_count = __kmp_fork_count + 1;\n    };\n}\n\nvoid\n__kmp_suspend_uninitialize_thread( kmp_info_t *th )\n{\n    if(th->th.th_suspend_init_count > __kmp_fork_count) {\n        /* this means we have initialize the suspension pthread objects for this thread\n           in this instance of the process */\n        int status;\n\n        status = pthread_cond_destroy( &th->th.th_suspend_cv.c_cond );\n        if ( status != 0 && status != EBUSY ) {\n            KMP_SYSFAIL( \"pthread_cond_destroy\", status );\n        };\n        status = pthread_mutex_destroy( &th->th.th_suspend_mx.m_mutex );\n        if ( status != 0 && status != EBUSY ) {\n            KMP_SYSFAIL( \"pthread_mutex_destroy\", status );\n        };\n        --th->th.th_suspend_init_count;\n        KMP_DEBUG_ASSERT(th->th.th_suspend_init_count == __kmp_fork_count);\n    }\n}\n\n/* This routine puts the calling thread to sleep after setting the\n * sleep bit for the indicated flag variable to true.\n */\ntemplate <class C>\nstatic inline void __kmp_suspend_template( int th_gtid, C *flag )\n{\n    KMP_TIME_DEVELOPER_BLOCK(USER_suspend);\n    kmp_info_t *th = __kmp_threads[th_gtid];\n    int status;\n    typename C::flag_t old_spin;\n\n    KF_TRACE( 30, (\"__kmp_suspend_template: T#%d enter for flag = %p\\n\", th_gtid, flag->get() ) );\n\n    __kmp_suspend_initialize_thread( th );\n\n    status = pthread_mutex_lock( &th->th.th_suspend_mx.m_mutex );\n    KMP_CHECK_SYSFAIL( \"pthread_mutex_lock\", status );\n\n    KF_TRACE( 10, ( \"__kmp_suspend_template: T#%d setting sleep bit for spin(%p)\\n\",\n                    th_gtid, flag->get() ) );\n\n    /* TODO: shouldn't this use release semantics to ensure that __kmp_suspend_initialize_thread\n       gets called first?\n    */\n    old_spin = flag->set_sleeping();\n\n    KF_TRACE( 5, ( \"__kmp_suspend_template: T#%d set sleep bit for spin(%p)==%x, was %x\\n\",\n                   th_gtid, flag->get(), *(flag->get()), old_spin ) );\n\n    if ( flag->done_check_val(old_spin) ) {\n        old_spin = flag->unset_sleeping();\n        KF_TRACE( 5, ( \"__kmp_suspend_template: T#%d false alarm, reset sleep bit for spin(%p)\\n\",\n                       th_gtid, flag->get()) );\n    } else {\n        /* Encapsulate in a loop as the documentation states that this may\n         * \"with low probability\" return when the condition variable has\n         * not been signaled or broadcast\n         */\n        int deactivated = FALSE;\n        TCW_PTR(th->th.th_sleep_loc, (void *)flag);\n        while ( flag->is_sleeping() ) {\n#ifdef DEBUG_SUSPEND\n            char buffer[128];\n            __kmp_suspend_count++;\n            __kmp_print_cond( buffer, &th->th.th_suspend_cv );\n            __kmp_printf( \"__kmp_suspend_template: suspending T#%d: %s\\n\", th_gtid, buffer );\n#endif\n            // Mark the thread as no longer active (only in the first iteration of the loop).\n            if ( ! deactivated ) {\n                th->th.th_active = FALSE;\n                if ( th->th.th_active_in_pool ) {\n                    th->th.th_active_in_pool = FALSE;\n                    KMP_TEST_THEN_DEC32(\n                      (kmp_int32 *) &__kmp_thread_pool_active_nth );\n                    KMP_DEBUG_ASSERT( TCR_4(__kmp_thread_pool_active_nth) >= 0 );\n                }\n                deactivated = TRUE;\n            }\n\n#if USE_SUSPEND_TIMEOUT\n            struct timespec  now;\n            struct timeval   tval;\n            int msecs;\n\n            status = gettimeofday( &tval, NULL );\n            KMP_CHECK_SYSFAIL_ERRNO( \"gettimeofday\", status );\n            TIMEVAL_TO_TIMESPEC( &tval, &now );\n\n            msecs = (4*__kmp_dflt_blocktime) + 200;\n            now.tv_sec  += msecs / 1000;\n            now.tv_nsec += (msecs % 1000)*1000;\n\n            KF_TRACE( 15, ( \"__kmp_suspend_template: T#%d about to perform pthread_cond_timedwait\\n\",\n                            th_gtid ) );\n            status = pthread_cond_timedwait( &th->th.th_suspend_cv.c_cond, &th->th.th_suspend_mx.m_mutex, & now );\n#else\n            KF_TRACE( 15, ( \"__kmp_suspend_template: T#%d about to perform pthread_cond_wait\\n\",\n                            th_gtid ) );\n            status = pthread_cond_wait( &th->th.th_suspend_cv.c_cond, &th->th.th_suspend_mx.m_mutex );\n#endif\n\n            if ( (status != 0) && (status != EINTR) && (status != ETIMEDOUT) ) {\n                KMP_SYSFAIL( \"pthread_cond_wait\", status );\n            }\n#ifdef KMP_DEBUG\n            if (status == ETIMEDOUT) {\n                if ( flag->is_sleeping() ) {\n                    KF_TRACE( 100, ( \"__kmp_suspend_template: T#%d timeout wakeup\\n\", th_gtid ) );\n                } else {\n                    KF_TRACE( 2, ( \"__kmp_suspend_template: T#%d timeout wakeup, sleep bit not set!\\n\",\n                                   th_gtid ) );\n                }\n            } else if ( flag->is_sleeping() ) {\n                KF_TRACE( 100, ( \"__kmp_suspend_template: T#%d spurious wakeup\\n\", th_gtid ) );\n            }\n#endif\n        } // while\n\n        // Mark the thread as active again (if it was previous marked as inactive)\n        if ( deactivated ) {\n            th->th.th_active = TRUE;\n            if ( TCR_4(th->th.th_in_pool) ) {\n                KMP_TEST_THEN_INC32( (kmp_int32 *) &__kmp_thread_pool_active_nth );\n                th->th.th_active_in_pool = TRUE;\n            }\n        }\n    }\n\n#ifdef DEBUG_SUSPEND\n    {\n        char buffer[128];\n        __kmp_print_cond( buffer, &th->th.th_suspend_cv);\n        __kmp_printf( \"__kmp_suspend_template: T#%d has awakened: %s\\n\", th_gtid, buffer );\n    }\n#endif\n\n    status = pthread_mutex_unlock( &th->th.th_suspend_mx.m_mutex );\n    KMP_CHECK_SYSFAIL( \"pthread_mutex_unlock\", status );\n\n    KF_TRACE( 30, (\"__kmp_suspend_template: T#%d exit\\n\", th_gtid ) );\n}\n\nvoid __kmp_suspend_32(int th_gtid, kmp_flag_32 *flag) {\n    __kmp_suspend_template(th_gtid, flag);\n}\nvoid __kmp_suspend_64(int th_gtid, kmp_flag_64 *flag) {\n    __kmp_suspend_template(th_gtid, flag);\n}\nvoid __kmp_suspend_oncore(int th_gtid, kmp_flag_oncore *flag) {\n    __kmp_suspend_template(th_gtid, flag);\n}\n\n\n/* This routine signals the thread specified by target_gtid to wake up\n * after setting the sleep bit indicated by the flag argument to FALSE.\n * The target thread must already have called __kmp_suspend_template()\n */\ntemplate <class C>\nstatic inline void __kmp_resume_template( int target_gtid, C *flag )\n{\n    KMP_TIME_DEVELOPER_BLOCK(USER_resume);\n    kmp_info_t *th = __kmp_threads[target_gtid];\n    int status;\n\n#ifdef KMP_DEBUG\n    int gtid = TCR_4(__kmp_init_gtid) ? __kmp_get_gtid() : -1;\n#endif\n\n    KF_TRACE( 30, ( \"__kmp_resume_template: T#%d wants to wakeup T#%d enter\\n\", gtid, target_gtid ) );\n    KMP_DEBUG_ASSERT( gtid != target_gtid );\n\n    __kmp_suspend_initialize_thread( th );\n\n    status = pthread_mutex_lock( &th->th.th_suspend_mx.m_mutex );\n    KMP_CHECK_SYSFAIL( \"pthread_mutex_lock\", status );\n\n    if (!flag) { // coming from __kmp_null_resume_wrapper\n        flag = (C *)th->th.th_sleep_loc;\n    }\n\n    // First, check if the flag is null or its type has changed. If so, someone else woke it up.\n    if (!flag || flag->get_type() != flag->get_ptr_type()) { // get_ptr_type simply shows what flag was cast to\n        KF_TRACE( 5, ( \"__kmp_resume_template: T#%d exiting, thread T#%d already awake: flag(%p)\\n\",\n                       gtid, target_gtid, NULL ) );\n        status = pthread_mutex_unlock( &th->th.th_suspend_mx.m_mutex );\n        KMP_CHECK_SYSFAIL( \"pthread_mutex_unlock\", status );\n        return;\n    }\n    else { // if multiple threads are sleeping, flag should be internally referring to a specific thread here\n        typename C::flag_t old_spin = flag->unset_sleeping();\n        if ( ! flag->is_sleeping_val(old_spin) ) {\n            KF_TRACE( 5, ( \"__kmp_resume_template: T#%d exiting, thread T#%d already awake: flag(%p): \"\n                           \"%u => %u\\n\",\n                           gtid, target_gtid, flag->get(), old_spin, *flag->get() ) );\n            status = pthread_mutex_unlock( &th->th.th_suspend_mx.m_mutex );\n            KMP_CHECK_SYSFAIL( \"pthread_mutex_unlock\", status );\n            return;\n        }\n        KF_TRACE( 5, ( \"__kmp_resume_template: T#%d about to wakeup T#%d, reset sleep bit for flag's loc(%p): \"\n                       \"%u => %u\\n\",\n                       gtid, target_gtid, flag->get(), old_spin, *flag->get() ) );\n    }\n    TCW_PTR(th->th.th_sleep_loc, NULL);\n\n\n#ifdef DEBUG_SUSPEND\n    {\n        char buffer[128];\n        __kmp_print_cond( buffer, &th->th.th_suspend_cv );\n        __kmp_printf( \"__kmp_resume_template: T#%d resuming T#%d: %s\\n\", gtid, target_gtid, buffer );\n    }\n#endif\n\n    status = pthread_cond_signal( &th->th.th_suspend_cv.c_cond );\n    KMP_CHECK_SYSFAIL( \"pthread_cond_signal\", status );\n    status = pthread_mutex_unlock( &th->th.th_suspend_mx.m_mutex );\n    KMP_CHECK_SYSFAIL( \"pthread_mutex_unlock\", status );\n    KF_TRACE( 30, ( \"__kmp_resume_template: T#%d exiting after signaling wake up for T#%d\\n\",\n                    gtid, target_gtid ) );\n}\n\nvoid __kmp_resume_32(int target_gtid, kmp_flag_32 *flag) {\n    __kmp_resume_template(target_gtid, flag);\n}\nvoid __kmp_resume_64(int target_gtid, kmp_flag_64 *flag) {\n    __kmp_resume_template(target_gtid, flag);\n}\nvoid __kmp_resume_oncore(int target_gtid, kmp_flag_oncore *flag) {\n    __kmp_resume_template(target_gtid, flag);\n}\n\nvoid\n__kmp_resume_monitor()\n{\n    KMP_TIME_DEVELOPER_BLOCK(USER_resume);\n    int status;\n#ifdef KMP_DEBUG\n    int gtid = TCR_4(__kmp_init_gtid) ? __kmp_get_gtid() : -1;\n    KF_TRACE( 30, ( \"__kmp_resume_monitor: T#%d wants to wakeup T#%d enter\\n\",\n                    gtid, KMP_GTID_MONITOR ) );\n    KMP_DEBUG_ASSERT( gtid != KMP_GTID_MONITOR );\n#endif\n    status = pthread_mutex_lock( &__kmp_wait_mx.m_mutex );\n    KMP_CHECK_SYSFAIL( \"pthread_mutex_lock\", status );\n#ifdef DEBUG_SUSPEND\n    {\n        char buffer[128];\n        __kmp_print_cond( buffer, &__kmp_wait_cv.c_cond );\n        __kmp_printf( \"__kmp_resume_monitor: T#%d resuming T#%d: %s\\n\", gtid, KMP_GTID_MONITOR, buffer );\n    }\n#endif\n    status = pthread_cond_signal( &__kmp_wait_cv.c_cond );\n    KMP_CHECK_SYSFAIL( \"pthread_cond_signal\", status );\n    status = pthread_mutex_unlock( &__kmp_wait_mx.m_mutex );\n    KMP_CHECK_SYSFAIL( \"pthread_mutex_unlock\", status );\n    KF_TRACE( 30, ( \"__kmp_resume_monitor: T#%d exiting after signaling wake up for T#%d\\n\",\n                    gtid, KMP_GTID_MONITOR ) );\n}\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\nvoid\n__kmp_yield( int cond )\n{\n    if (cond && __kmp_yielding_on) {\n        sched_yield();\n    }\n}\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\nvoid\n__kmp_gtid_set_specific( int gtid )\n{\n    if( __kmp_init_gtid ) {\n        int status;\n        status = pthread_setspecific( __kmp_gtid_threadprivate_key, (void*)(intptr_t)(gtid+1) );\n        KMP_CHECK_SYSFAIL( \"pthread_setspecific\", status );\n    } else {\n        KA_TRACE( 50, (\"__kmp_gtid_set_specific: runtime shutdown, returning\\n\" ) );\n    }\n}\n\nint\n__kmp_gtid_get_specific()\n{\n    int gtid;\n    if ( !__kmp_init_gtid ) {\n        KA_TRACE( 50, (\"__kmp_gtid_get_specific: runtime shutdown, returning KMP_GTID_SHUTDOWN\\n\" ) );\n        return KMP_GTID_SHUTDOWN;\n    }\n    gtid = (int)(size_t)pthread_getspecific( __kmp_gtid_threadprivate_key );\n    if ( gtid == 0 ) {\n        gtid = KMP_GTID_DNE;\n    }\n    else {\n        gtid--;\n    }\n    KA_TRACE( 50, (\"__kmp_gtid_get_specific: key:%d gtid:%d\\n\",\n               __kmp_gtid_threadprivate_key, gtid ));\n    return gtid;\n}\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\ndouble\n__kmp_read_cpu_time( void )\n{\n    /*clock_t   t;*/\n    struct tms  buffer;\n\n    /*t =*/  times( & buffer );\n\n    return (buffer.tms_utime + buffer.tms_cutime) / (double) CLOCKS_PER_SEC;\n}\n\nint\n__kmp_read_system_info( struct kmp_sys_info *info )\n{\n    int status;\n    struct rusage r_usage;\n\n    memset( info, 0, sizeof( *info ) );\n\n    status = getrusage( RUSAGE_SELF, &r_usage);\n    KMP_CHECK_SYSFAIL_ERRNO( \"getrusage\", status );\n\n    info->maxrss  = r_usage.ru_maxrss;  /* the maximum resident set size utilized (in kilobytes)     */\n    info->minflt  = r_usage.ru_minflt;  /* the number of page faults serviced without any I/O        */\n    info->majflt  = r_usage.ru_majflt;  /* the number of page faults serviced that required I/O      */\n    info->nswap   = r_usage.ru_nswap;   /* the number of times a process was \"swapped\" out of memory */\n    info->inblock = r_usage.ru_inblock; /* the number of times the file system had to perform input  */\n    info->oublock = r_usage.ru_oublock; /* the number of times the file system had to perform output */\n    info->nvcsw   = r_usage.ru_nvcsw;   /* the number of times a context switch was voluntarily      */\n    info->nivcsw  = r_usage.ru_nivcsw;  /* the number of times a context switch was forced           */\n\n    return (status != 0);\n}\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\nvoid\n__kmp_read_system_time( double *delta )\n{\n    double              t_ns;\n    struct timeval      tval;\n    struct timespec     stop;\n    int status;\n\n    status = gettimeofday( &tval, NULL );\n    KMP_CHECK_SYSFAIL_ERRNO( \"gettimeofday\", status );\n    TIMEVAL_TO_TIMESPEC( &tval, &stop );\n    t_ns = TS2NS(stop) - TS2NS(__kmp_sys_timer_data.start);\n    *delta = (t_ns * 1e-9);\n}\n\nvoid\n__kmp_clear_system_time( void )\n{\n    struct timeval tval;\n    int status;\n    status = gettimeofday( &tval, NULL );\n    KMP_CHECK_SYSFAIL_ERRNO( \"gettimeofday\", status );\n    TIMEVAL_TO_TIMESPEC( &tval, &__kmp_sys_timer_data.start );\n}\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\n#ifdef BUILD_TV\n\nvoid\n__kmp_tv_threadprivate_store( kmp_info_t *th, void *global_addr, void *thread_addr )\n{\n    struct tv_data *p;\n\n    p = (struct tv_data *) __kmp_allocate( sizeof( *p ) );\n\n    p->u.tp.global_addr = global_addr;\n    p->u.tp.thread_addr = thread_addr;\n\n    p->type = (void *) 1;\n\n    p->next =  th->th.th_local.tv_data;\n    th->th.th_local.tv_data = p;\n\n    if ( p->next == 0 ) {\n        int rc = pthread_setspecific( __kmp_tv_key, p );\n        KMP_CHECK_SYSFAIL( \"pthread_setspecific\", rc );\n    }\n}\n\n#endif /* BUILD_TV */\n\n/* ------------------------------------------------------------------------ */\n/* ------------------------------------------------------------------------ */\n\nstatic int\n__kmp_get_xproc( void ) {\n\n    int r = 0;\n#if CHARM_OMP\n    r = CmiMyNodeSize();\n#else\n    #if KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD\n\n        r = sysconf( _SC_NPROCESSORS_ONLN );\n\n    #elif KMP_OS_DARWIN\n\n        // Bug C77011 High \"OpenMP Threads and number of active cores\".\n\n        // Find the number of available CPUs.\n        kern_return_t          rc;\n        host_basic_info_data_t info;\n        mach_msg_type_number_t num = HOST_BASIC_INFO_COUNT;\n        rc = host_info( mach_host_self(), HOST_BASIC_INFO, (host_info_t) & info, & num );\n        if ( rc == 0 && num == HOST_BASIC_INFO_COUNT ) {\n            // Cannot use KA_TRACE() here because this code works before trace support is\n            // initialized.\n            r = info.avail_cpus;\n        } else {\n            KMP_WARNING( CantGetNumAvailCPU );\n            KMP_INFORM( AssumedNumCPU );\n        }; // if\n\n    #else\n\n        #error \"Unknown or unsupported OS.\"\n\n    #endif\n#endif\n    return r > 0 ? r : 2; /* guess value of 2 if OS told us 0 */\n\n} // __kmp_get_xproc\n\nint\n__kmp_read_from_file( char const *path, char const *format, ... )\n{\n    int result;\n    va_list args;\n\n    va_start(args, format);\n    FILE *f = fopen(path, \"rb\");\n    if ( f == NULL )\n        return 0;\n    result = vfscanf(f, format, args);\n    fclose(f);\n\n    return result;\n}\n\nvoid\n__kmp_runtime_initialize( void )\n{\n    int status;\n    pthread_mutexattr_t mutex_attr;\n    pthread_condattr_t  cond_attr;\n\n    if ( __kmp_init_runtime ) {\n        return;\n    }; // if\n\n    #if ( KMP_ARCH_X86 || KMP_ARCH_X86_64 )\n        if ( ! __kmp_cpuinfo.initialized ) {\n            __kmp_query_cpuid( &__kmp_cpuinfo );\n        }; // if\n    #endif /* KMP_ARCH_X86 || KMP_ARCH_X86_64 */\n\n    __kmp_xproc = __kmp_get_xproc();\n\n    if ( sysconf( _SC_THREADS ) ) {\n\n        /* Query the maximum number of threads */\n        __kmp_sys_max_nth = sysconf( _SC_THREAD_THREADS_MAX );\n        if ( __kmp_sys_max_nth == -1 ) {\n            /* Unlimited threads for NPTL */\n            __kmp_sys_max_nth = INT_MAX;\n        }\n        else if ( __kmp_sys_max_nth <= 1 ) {\n            /* Can't tell, just use PTHREAD_THREADS_MAX */\n            __kmp_sys_max_nth = KMP_MAX_NTH;\n        }\n\n        /* Query the minimum stack size */\n        __kmp_sys_min_stksize = sysconf( _SC_THREAD_STACK_MIN );\n        if ( __kmp_sys_min_stksize <= 1 ) {\n            __kmp_sys_min_stksize = KMP_MIN_STKSIZE;\n        }\n    }\n\n    /* Set up minimum number of threads to switch to TLS gtid */\n    __kmp_tls_gtid_min = KMP_TLS_GTID_MIN;\n\n    #ifdef BUILD_TV\n        {\n            int rc = pthread_key_create( & __kmp_tv_key, 0 );\n            KMP_CHECK_SYSFAIL( \"pthread_key_create\", rc );\n        }\n    #endif\n\n    status = pthread_key_create( &__kmp_gtid_threadprivate_key, __kmp_internal_end_dest );\n    KMP_CHECK_SYSFAIL( \"pthread_key_create\", status );\n    status = pthread_mutexattr_init( & mutex_attr );\n    KMP_CHECK_SYSFAIL( \"pthread_mutexattr_init\", status );\n    status = pthread_mutex_init( & __kmp_wait_mx.m_mutex, & mutex_attr );\n    KMP_CHECK_SYSFAIL( \"pthread_mutex_init\", status );\n    status = pthread_condattr_init( & cond_attr );\n    KMP_CHECK_SYSFAIL( \"pthread_condattr_init\", status );\n    status = pthread_cond_init( & __kmp_wait_cv.c_cond, & cond_attr );\n    KMP_CHECK_SYSFAIL( \"pthread_cond_init\", status );\n#if USE_ITT_BUILD\n    __kmp_itt_initialize();\n#endif /* USE_ITT_BUILD */\n\n    __kmp_init_runtime = TRUE;\n}\n\nvoid\n__kmp_runtime_destroy( void )\n{\n    int status;\n\n    if ( ! __kmp_init_runtime ) {\n        return; // Nothing to do.\n    };\n\n#if USE_ITT_BUILD\n    __kmp_itt_destroy();\n#endif /* USE_ITT_BUILD */\n\n    status = pthread_key_delete( __kmp_gtid_threadprivate_key );\n    KMP_CHECK_SYSFAIL( \"pthread_key_delete\", status );\n    #ifdef BUILD_TV\n        status = pthread_key_delete( __kmp_tv_key );\n        KMP_CHECK_SYSFAIL( \"pthread_key_delete\", status );\n    #endif\n\n    status = pthread_mutex_destroy( & __kmp_wait_mx.m_mutex );\n    if ( status != 0 && status != EBUSY ) {\n        KMP_SYSFAIL( \"pthread_mutex_destroy\", status );\n    }\n    status = pthread_cond_destroy( & __kmp_wait_cv.c_cond );\n    if ( status != 0 && status != EBUSY ) {\n        KMP_SYSFAIL( \"pthread_cond_destroy\", status );\n    }\n    #if KMP_AFFINITY_SUPPORTED\n        __kmp_affinity_uninitialize();\n    #endif\n\n    __kmp_init_runtime = FALSE;\n}\n\n\n/* Put the thread to sleep for a time period */\n/* NOTE: not currently used anywhere */\nvoid\n__kmp_thread_sleep( int millis )\n{\n    sleep(  ( millis + 500 ) / 1000 );\n}\n\n/* Calculate the elapsed wall clock time for the user */\nvoid\n__kmp_elapsed( double *t )\n{\n    int status;\n# ifdef FIX_SGI_CLOCK\n    struct timespec ts;\n\n    status = clock_gettime( CLOCK_PROCESS_CPUTIME_ID, &ts );\n    KMP_CHECK_SYSFAIL_ERRNO( \"clock_gettime\", status );\n    *t = (double) ts.tv_nsec * (1.0 / (double) KMP_NSEC_PER_SEC) +\n        (double) ts.tv_sec;\n# else\n    struct timeval tv;\n\n    status = gettimeofday( & tv, NULL );\n    KMP_CHECK_SYSFAIL_ERRNO( \"gettimeofday\", status );\n    *t = (double) tv.tv_usec * (1.0 / (double) KMP_USEC_PER_SEC) +\n        (double) tv.tv_sec;\n# endif\n}\n\n/* Calculate the elapsed wall clock tick for the user */\nvoid\n__kmp_elapsed_tick( double *t )\n{\n    *t = 1 / (double) CLOCKS_PER_SEC;\n}\n\n/* Return the current time stamp in nsec */\nkmp_uint64\n__kmp_now_nsec()\n{\n    struct timeval t;\n    gettimeofday(&t, NULL);\n    return KMP_NSEC_PER_SEC*t.tv_sec + 1000*t.tv_usec;\n}\n\n/*\n    Determine whether the given address is mapped into the current address space.\n*/\n\nint\n__kmp_is_address_mapped( void * addr ) {\n\n    int found = 0;\n    int rc;\n\n    #if KMP_OS_LINUX || KMP_OS_FREEBSD\n\n        /*\n            On Linux* OS, read the /proc/<pid>/maps pseudo-file to get all the address ranges mapped\n            into the address space.\n        */\n\n        char * name = __kmp_str_format( \"/proc/%d/maps\", getpid() );\n        FILE * file  = NULL;\n\n        file = fopen( name, \"r\" );\n        KMP_ASSERT( file != NULL );\n\n        for ( ; ; ) {\n\n            void * beginning = NULL;\n            void * ending    = NULL;\n            char   perms[ 5 ];\n\n            rc = fscanf( file, \"%p-%p %4s %*[^\\n]\\n\", & beginning, & ending, perms );\n            if ( rc == EOF ) {\n                break;\n            }; // if\n            KMP_ASSERT( rc == 3 && KMP_STRLEN( perms ) == 4 ); // Make sure all fields are read.\n\n            // Ending address is not included in the region, but beginning is.\n            if ( ( addr >= beginning ) && ( addr < ending ) ) {\n                perms[ 2 ] = 0;    // 3th and 4th character does not matter.\n                if ( strcmp( perms, \"rw\" ) == 0 ) {\n                    // Memory we are looking for should be readable and writable.\n                    found = 1;\n                }; // if\n                break;\n            }; // if\n\n        }; // forever\n\n        // Free resources.\n        fclose( file );\n        KMP_INTERNAL_FREE( name );\n\n    #elif KMP_OS_DARWIN\n\n        /*\n            On OS X*, /proc pseudo filesystem is not available. Try to read memory using vm\n            interface.\n        */\n\n        int       buffer;\n        vm_size_t count;\n        rc =\n            vm_read_overwrite(\n                mach_task_self(),           // Task to read memory of.\n                (vm_address_t)( addr ),     // Address to read from.\n                1,                          // Number of bytes to be read.\n                (vm_address_t)( & buffer ), // Address of buffer to save read bytes in.\n                & count                     // Address of var to save number of read bytes in.\n            );\n        if ( rc == 0 ) {\n            // Memory successfully read.\n            found = 1;\n        }; // if\n\n    #elif KMP_OS_FREEBSD || KMP_OS_NETBSD\n\n        // FIXME(FreeBSD, NetBSD): Implement this\n        found = 1;\n\n    #else\n\n        #error \"Unknown or unsupported OS\"\n\n    #endif\n\n    return found;\n\n} // __kmp_is_address_mapped\n\n#ifdef USE_LOAD_BALANCE\n\n\n# if KMP_OS_DARWIN\n\n// The function returns the rounded value of the system load average\n// during given time interval which depends on the value of\n// __kmp_load_balance_interval variable (default is 60 sec, other values\n// may be 300 sec or 900 sec).\n// It returns -1 in case of error.\nint\n__kmp_get_load_balance( int max )\n{\n    double averages[3];\n    int ret_avg = 0;\n\n    int res = getloadavg( averages, 3 );\n\n    //Check __kmp_load_balance_interval to determine which of averages to use.\n    // getloadavg() may return the number of samples less than requested that is\n    // less than 3.\n    if ( __kmp_load_balance_interval < 180 && ( res >= 1 ) ) {\n        ret_avg = averages[0];// 1 min\n    } else if ( ( __kmp_load_balance_interval >= 180\n                  && __kmp_load_balance_interval < 600 ) && ( res >= 2 ) ) {\n        ret_avg = averages[1];// 5 min\n    } else if ( ( __kmp_load_balance_interval >= 600 ) && ( res == 3 ) ) {\n        ret_avg = averages[2];// 15 min\n    } else {// Error occurred\n        return -1;\n    }\n\n    return ret_avg;\n}\n\n# else // Linux* OS\n\n// The fuction returns number of running (not sleeping) threads, or -1 in case of error.\n// Error could be reported if Linux* OS kernel too old (without \"/proc\" support).\n// Counting running threads stops if max running threads encountered.\nint\n__kmp_get_load_balance( int max )\n{\n    static int permanent_error = 0;\n\n    static int     glb_running_threads          = 0;  /* Saved count of the running threads for the thread balance algortihm */\n    static double  glb_call_time = 0;  /* Thread balance algorithm call time */\n\n    int running_threads = 0;              // Number of running threads in the system.\n\n    DIR  *          proc_dir   = NULL;    // Handle of \"/proc/\" directory.\n    struct dirent * proc_entry = NULL;\n\n    kmp_str_buf_t   task_path;            // \"/proc/<pid>/task/<tid>/\" path.\n    DIR  *          task_dir   = NULL;    // Handle of \"/proc/<pid>/task/<tid>/\" directory.\n    struct dirent * task_entry = NULL;\n    int             task_path_fixed_len;\n\n    kmp_str_buf_t   stat_path;            // \"/proc/<pid>/task/<tid>/stat\" path.\n    int             stat_file = -1;\n    int             stat_path_fixed_len;\n\n    int total_processes = 0;              // Total number of processes in system.\n    int total_threads   = 0;              // Total number of threads in system.\n\n    double call_time = 0.0;\n\n    __kmp_str_buf_init( & task_path );\n    __kmp_str_buf_init( & stat_path );\n\n     __kmp_elapsed( & call_time );\n\n    if ( glb_call_time &&\n            ( call_time - glb_call_time < __kmp_load_balance_interval ) ) {\n        running_threads = glb_running_threads;\n        goto finish;\n    }\n\n    glb_call_time = call_time;\n\n    // Do not spend time on scanning \"/proc/\" if we have a permanent error.\n    if ( permanent_error ) {\n        running_threads = -1;\n        goto finish;\n    }; // if\n\n    if ( max <= 0 ) {\n        max = INT_MAX;\n    }; // if\n\n    // Open \"/proc/\" directory.\n    proc_dir = opendir( \"/proc\" );\n    if ( proc_dir == NULL ) {\n        // Cannot open \"/prroc/\". Probably the kernel does not support it. Return an error now and\n        // in subsequent calls.\n        running_threads = -1;\n        permanent_error = 1;\n        goto finish;\n    }; // if\n\n    // Initialize fixed part of task_path. This part will not change.\n    __kmp_str_buf_cat( & task_path, \"/proc/\", 6 );\n    task_path_fixed_len = task_path.used;    // Remember number of used characters.\n\n    proc_entry = readdir( proc_dir );\n    while ( proc_entry != NULL ) {\n        // Proc entry is a directory and name starts with a digit. Assume it is a process'\n        // directory.\n        if ( proc_entry->d_type == DT_DIR && isdigit( proc_entry->d_name[ 0 ] ) ) {\n\n            ++ total_processes;\n            // Make sure init process is the very first in \"/proc\", so we can replace\n            // strcmp( proc_entry->d_name, \"1\" ) == 0 with simpler total_processes == 1.\n            // We are going to check that total_processes == 1 => d_name == \"1\" is true (where\n            // \"=>\" is implication). Since C++ does not have => operator, let us replace it with its\n            // equivalent: a => b == ! a || b.\n            KMP_DEBUG_ASSERT( total_processes != 1 || strcmp( proc_entry->d_name, \"1\" ) == 0 );\n\n            // Construct task_path.\n            task_path.used = task_path_fixed_len;    // Reset task_path to \"/proc/\".\n            __kmp_str_buf_cat( & task_path, proc_entry->d_name, KMP_STRLEN( proc_entry->d_name ) );\n            __kmp_str_buf_cat( & task_path, \"/task\", 5 );\n\n            task_dir = opendir( task_path.str );\n            if ( task_dir == NULL ) {\n                // Process can finish between reading \"/proc/\" directory entry and opening process'\n                // \"task/\" directory. So, in general case we should not complain, but have to skip\n                // this process and read the next one.\n                // But on systems with no \"task/\" support we will spend lot of time to scan \"/proc/\"\n                // tree again and again without any benefit. \"init\" process (its pid is 1) should\n                // exist always, so, if we cannot open \"/proc/1/task/\" directory, it means \"task/\"\n                // is not supported by kernel. Report an error now and in the future.\n                if ( strcmp( proc_entry->d_name, \"1\" ) == 0 ) {\n                    running_threads = -1;\n                    permanent_error = 1;\n                    goto finish;\n                }; // if\n            } else {\n                 // Construct fixed part of stat file path.\n                __kmp_str_buf_clear( & stat_path );\n                __kmp_str_buf_cat( & stat_path, task_path.str, task_path.used );\n                __kmp_str_buf_cat( & stat_path, \"/\", 1 );\n                stat_path_fixed_len = stat_path.used;\n\n                task_entry = readdir( task_dir );\n                while ( task_entry != NULL ) {\n                    // It is a directory and name starts with a digit.\n                    if ( proc_entry->d_type == DT_DIR && isdigit( task_entry->d_name[ 0 ] ) ) {\n\n                        ++ total_threads;\n\n                        // Consruct complete stat file path. Easiest way would be:\n                        //  __kmp_str_buf_print( & stat_path, \"%s/%s/stat\", task_path.str, task_entry->d_name );\n                        // but seriae of __kmp_str_buf_cat works a bit faster.\n                        stat_path.used = stat_path_fixed_len;    // Reset stat path to its fixed part.\n                        __kmp_str_buf_cat( & stat_path, task_entry->d_name, KMP_STRLEN( task_entry->d_name ) );\n                        __kmp_str_buf_cat( & stat_path, \"/stat\", 5 );\n\n                        // Note: Low-level API (open/read/close) is used. High-level API\n                        // (fopen/fclose)  works ~ 30 % slower.\n                        stat_file = open( stat_path.str, O_RDONLY );\n                        if ( stat_file == -1 ) {\n                            // We cannot report an error because task (thread) can terminate just\n                            // before reading this file.\n                        } else {\n                            /*\n                                Content of \"stat\" file looks like:\n\n                                    24285 (program) S ...\n\n                                It is a single line (if program name does not include fanny\n                                symbols). First number is a thread id, then name of executable file\n                                name in paretheses, then state of the thread. We need just thread\n                                state.\n\n                                Good news: Length of program name is 15 characters max. Longer\n                                names are truncated.\n\n                                Thus, we need rather short buffer: 15 chars for program name +\n                                2 parenthesis, + 3 spaces + ~7 digits of pid = 37.\n\n                                Bad news: Program name may contain special symbols like space,\n                                closing parenthesis, or even new line. This makes parsing \"stat\"\n                                file not 100 % reliable. In case of fanny program names parsing\n                                may fail (report incorrect thread state).\n\n                                Parsing \"status\" file looks more promissing (due to different\n                                file structure and escaping special symbols) but reading and\n                                parsing of \"status\" file works slower.\n\n                                -- ln\n                            */\n                            char buffer[ 65 ];\n                            int len;\n                            len = read( stat_file, buffer, sizeof( buffer ) - 1 );\n                            if ( len >= 0 ) {\n                                buffer[ len ] = 0;\n                                // Using scanf:\n                                //     sscanf( buffer, \"%*d (%*s) %c \", & state );\n                                // looks very nice, but searching for a closing parenthesis works a\n                                // bit faster.\n                                char * close_parent = strstr( buffer, \") \" );\n                                if ( close_parent != NULL ) {\n                                    char state = * ( close_parent + 2 );\n                                    if ( state == 'R' ) {\n                                        ++ running_threads;\n                                        if ( running_threads >= max ) {\n                                            goto finish;\n                                        }; // if\n                                    }; // if\n                                }; // if\n                            }; // if\n                            close( stat_file );\n                            stat_file = -1;\n                        }; // if\n                    }; // if\n                    task_entry = readdir( task_dir );\n                }; // while\n                closedir( task_dir );\n                task_dir = NULL;\n            }; // if\n        }; // if\n        proc_entry = readdir( proc_dir );\n    }; // while\n\n    //\n    // There _might_ be a timing hole where the thread executing this\n    // code get skipped in the load balance, and running_threads is 0.\n    // Assert in the debug builds only!!!\n    //\n    KMP_DEBUG_ASSERT( running_threads > 0 );\n    if ( running_threads <= 0 ) {\n        running_threads = 1;\n    }\n\n    finish: // Clean up and exit.\n        if ( proc_dir != NULL ) {\n            closedir( proc_dir );\n        }; // if\n        __kmp_str_buf_free( & task_path );\n        if ( task_dir != NULL ) {\n            closedir( task_dir );\n        }; // if\n        __kmp_str_buf_free( & stat_path );\n        if ( stat_file != -1 ) {\n            close( stat_file );\n        }; // if\n\n    glb_running_threads = running_threads;\n\n    return running_threads;\n\n} // __kmp_get_load_balance\n\n# endif // KMP_OS_DARWIN\n\n#endif // USE_LOAD_BALANCE\n\n#if !(KMP_ARCH_X86 || KMP_ARCH_X86_64 || KMP_MIC || (KMP_OS_LINUX && KMP_ARCH_AARCH64) || KMP_ARCH_PPC64)\n\n// we really only need the case with 1 argument, because CLANG always build\n// a struct of pointers to shared variables referenced in the outlined function\nint\n__kmp_invoke_microtask( microtask_t pkfn,\n                        int gtid, int tid,\n                        int argc, void *p_argv[]\n#if OMPT_SUPPORT\n                        , void **exit_frame_ptr\n#endif\n)\n{\n#if OMPT_SUPPORT\n  *exit_frame_ptr = __builtin_frame_address(0);\n#endif\n\n  switch (argc) {\n  default:\n    fprintf(stderr, \"Too many args to microtask: %d!\\n\", argc);\n    fflush(stderr);\n    exit(-1);\n  case 0:\n    (*pkfn)(&gtid, &tid);\n    break;\n  case 1:\n    (*pkfn)(&gtid, &tid, p_argv[0]);\n    break;\n  case 2:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1]);\n    break;\n  case 3:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2]);\n    break;\n  case 4:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3]);\n    break;\n  case 5:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4]);\n    break;\n  case 6:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5]);\n    break;\n  case 7:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6]);\n    break;\n  case 8:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7]);\n    break;\n  case 9:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7], p_argv[8]);\n    break;\n  case 10:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7], p_argv[8], p_argv[9]);\n    break;\n  case 11:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7], p_argv[8], p_argv[9], p_argv[10]);\n    break;\n  case 12:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7], p_argv[8], p_argv[9], p_argv[10],\n            p_argv[11]);\n    break;\n  case 13:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7], p_argv[8], p_argv[9], p_argv[10],\n            p_argv[11], p_argv[12]);\n    break;\n  case 14:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7], p_argv[8], p_argv[9], p_argv[10],\n            p_argv[11], p_argv[12], p_argv[13]);\n    break;\n  case 15:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7], p_argv[8], p_argv[9], p_argv[10],\n            p_argv[11], p_argv[12], p_argv[13], p_argv[14]);\n    break;\n  }\n\n#if OMPT_SUPPORT\n  *exit_frame_ptr = 0;\n#endif\n\n  return 1;\n}\n\n#endif\n\n// end of file //\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/src/libs/conv-libs/openmp_llvm/runtime/src/thirdparty/ittnotify/ittnotify_config.h": "\n//===----------------------------------------------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.txt for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _ITTNOTIFY_CONFIG_H_\n#define _ITTNOTIFY_CONFIG_H_\n\n/** @cond exclude_from_documentation */\n#ifndef ITT_OS_WIN\n#  define ITT_OS_WIN   1\n#endif /* ITT_OS_WIN */\n\n#ifndef ITT_OS_LINUX\n#  define ITT_OS_LINUX 2\n#endif /* ITT_OS_LINUX */\n\n#ifndef ITT_OS_MAC\n#  define ITT_OS_MAC   3\n#endif /* ITT_OS_MAC */\n\n#ifndef ITT_OS\n#  if defined WIN32 || defined _WIN32\n#    define ITT_OS ITT_OS_WIN\n#  elif defined( __APPLE__ ) && defined( __MACH__ )\n#    define ITT_OS ITT_OS_MAC\n#  else\n#    define ITT_OS ITT_OS_LINUX\n#  endif\n#endif /* ITT_OS */\n\n#ifndef ITT_PLATFORM_WIN\n#  define ITT_PLATFORM_WIN 1\n#endif /* ITT_PLATFORM_WIN */\n\n#ifndef ITT_PLATFORM_POSIX\n#  define ITT_PLATFORM_POSIX 2\n#endif /* ITT_PLATFORM_POSIX */\n\n#ifndef ITT_PLATFORM_MAC\n#  define ITT_PLATFORM_MAC 3\n#endif /* ITT_PLATFORM_MAC */\n\n#ifndef ITT_PLATFORM\n#  if ITT_OS==ITT_OS_WIN\n#    define ITT_PLATFORM ITT_PLATFORM_WIN\n#  elif ITT_OS==ITT_OS_MAC\n#    define ITT_PLATFORM ITT_PLATFORM_MAC\n#  else\n#    define ITT_PLATFORM ITT_PLATFORM_POSIX\n#  endif\n#endif /* ITT_PLATFORM */\n\n#if defined(_UNICODE) && !defined(UNICODE)\n#define UNICODE\n#endif\n\n#include <stddef.h>\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#include <tchar.h>\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#include <stdint.h>\n#if defined(UNICODE) || defined(_UNICODE)\n#include <wchar.h>\n#endif /* UNICODE || _UNICODE */\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n#ifndef CDECL\n#  if ITT_PLATFORM==ITT_PLATFORM_WIN\n#    define CDECL __cdecl\n#  else /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#    if defined _M_IX86 || defined __i386__\n#      define CDECL __attribute__ ((cdecl))\n#    else  /* _M_IX86 || __i386__ */\n#      define CDECL /* actual only on x86 platform */\n#    endif /* _M_IX86 || __i386__ */\n#  endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#endif /* CDECL */\n\n#ifndef STDCALL\n#  if ITT_PLATFORM==ITT_PLATFORM_WIN\n#    define STDCALL __stdcall\n#  else /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#    if defined _M_IX86 || defined __i386__\n#      define STDCALL __attribute__ ((stdcall))\n#    else  /* _M_IX86 || __i386__ */\n#      define STDCALL /* supported only on x86 platform */\n#    endif /* _M_IX86 || __i386__ */\n#  endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#endif /* STDCALL */\n\n#define ITTAPI    CDECL\n#define LIBITTAPI CDECL\n\n/* TODO: Temporary for compatibility! */\n#define ITTAPI_CALL    CDECL\n#define LIBITTAPI_CALL CDECL\n\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n/* use __forceinline (VC++ specific) */\n#define ITT_INLINE           __forceinline\n#define ITT_INLINE_ATTRIBUTE /* nothing */\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n/*\n * Generally, functions are not inlined unless optimization is specified.\n * For functions declared inline, this attribute inlines the function even\n * if no optimization level was specified.\n */\n#ifdef __STRICT_ANSI__\n#define ITT_INLINE           static\n#define ITT_INLINE_ATTRIBUTE __attribute__((unused))\n#else  /* __STRICT_ANSI__ */\n#define ITT_INLINE           static inline\n#define ITT_INLINE_ATTRIBUTE __attribute__((always_inline, unused))\n#endif /* __STRICT_ANSI__ */\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n/** @endcond */\n\n#ifndef ITT_ARCH_IA32\n#  define ITT_ARCH_IA32  1\n#endif /* ITT_ARCH_IA32 */\n\n#ifndef ITT_ARCH_IA32E\n#  define ITT_ARCH_IA32E 2\n#endif /* ITT_ARCH_IA32E */\n\n/* Was there a magical reason we didn't have 3 here before? */\n#ifndef ITT_ARCH_AARCH64\n#  define ITT_ARCH_AARCH64  3\n#endif /* ITT_ARCH_AARCH64 */\n\n#ifndef ITT_ARCH_ARM\n#  define ITT_ARCH_ARM  4\n#endif /* ITT_ARCH_ARM */\n\n#ifndef ITT_ARCH_PPC64\n#  define ITT_ARCH_PPC64  5\n#endif /* ITT_ARCH_PPC64 */\n\n\n#ifndef ITT_ARCH\n#  if defined _M_IX86 || defined __i386__\n#    define ITT_ARCH ITT_ARCH_IA32\n#  elif defined _M_X64 || defined _M_AMD64 || defined __x86_64__\n#    define ITT_ARCH ITT_ARCH_IA32E\n#  elif defined _M_IA64 || defined __ia64__\n#    define ITT_ARCH ITT_ARCH_IA64\n#  elif defined _M_ARM || __arm__\n#    define ITT_ARCH ITT_ARCH_ARM\n#  elif defined __powerpc64__\n#    define ITT_ARCH ITT_ARCH_PPC64\n#  elif defined __aarch64__\n#    define ITT_ARCH ITT_ARCH_AARCH64\n#  endif\n#endif\n\n#ifdef __cplusplus\n#  define ITT_EXTERN_C extern \"C\"\n#  define ITT_EXTERN_C_BEGIN extern \"C\" {\n#  define ITT_EXTERN_C_END }\n#else\n#  define ITT_EXTERN_C /* nothing */\n#  define ITT_EXTERN_C_BEGIN /* nothing */\n#  define ITT_EXTERN_C_END /* nothing */\n#endif /* __cplusplus */\n\n#define ITT_TO_STR_AUX(x) #x\n#define ITT_TO_STR(x)     ITT_TO_STR_AUX(x)\n\n#define __ITT_BUILD_ASSERT(expr, suffix) do { \\\n    static char __itt_build_check_##suffix[(expr) ? 1 : -1]; \\\n    __itt_build_check_##suffix[0] = 0; \\\n} while(0)\n#define _ITT_BUILD_ASSERT(expr, suffix)  __ITT_BUILD_ASSERT((expr), suffix)\n#define ITT_BUILD_ASSERT(expr)           _ITT_BUILD_ASSERT((expr), __LINE__)\n\n#define ITT_MAGIC { 0xED, 0xAB, 0xAB, 0xEC, 0x0D, 0xEE, 0xDA, 0x30 }\n\n/* Replace with snapshot date YYYYMMDD for promotion build. */\n#define API_VERSION_BUILD    20111111\n\n#ifndef API_VERSION_NUM\n#define API_VERSION_NUM 0.0.0\n#endif /* API_VERSION_NUM */\n\n#define API_VERSION \"ITT-API-Version \" ITT_TO_STR(API_VERSION_NUM) \\\n                                \" (\" ITT_TO_STR(API_VERSION_BUILD) \")\"\n\n/* OS communication functions */\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#include <windows.h>\ntypedef HMODULE           lib_t;\ntypedef DWORD             TIDT;\ntypedef CRITICAL_SECTION  mutex_t;\n#define MUTEX_INITIALIZER { 0 }\n#define strong_alias(name, aliasname) /* empty for Windows */\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#include <dlfcn.h>\n#if defined(UNICODE) || defined(_UNICODE)\n#include <wchar.h>\n#endif /* UNICODE */\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE 1 /* need for PTHREAD_MUTEX_RECURSIVE */\n#endif /* _GNU_SOURCE */\n#ifndef __USE_UNIX98\n#define __USE_UNIX98 1 /* need for PTHREAD_MUTEX_RECURSIVE, on SLES11.1 with gcc 4.3.4 wherein pthread.h missing dependency on __USE_XOPEN2K8 */\n#endif /*__USE_UNIX98*/\n#include <pthread.h>\ntypedef void*             lib_t;\ntypedef pthread_t         TIDT;\ntypedef pthread_mutex_t   mutex_t;\n#define MUTEX_INITIALIZER PTHREAD_MUTEX_INITIALIZER\n#define _strong_alias(name, aliasname) \\\n            extern __typeof (name) aliasname __attribute__ ((alias (#name)));\n#define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#define __itt_get_proc(lib, name) GetProcAddress(lib, name)\n#define __itt_mutex_init(mutex)   InitializeCriticalSection(mutex)\n#define __itt_mutex_lock(mutex)   EnterCriticalSection(mutex)\n#define __itt_mutex_unlock(mutex) LeaveCriticalSection(mutex)\n#define __itt_load_lib(name)      LoadLibraryA(name)\n#define __itt_unload_lib(handle)  FreeLibrary(handle)\n#define __itt_system_error()      (int)GetLastError()\n#define __itt_fstrcmp(s1, s2)     lstrcmpA(s1, s2)\n#define __itt_fstrlen(s)          lstrlenA(s)\n#define __itt_fstrcpyn(s1, s2, l) lstrcpynA(s1, s2, l)\n#define __itt_fstrdup(s)          _strdup(s)\n#define __itt_thread_id()         GetCurrentThreadId()\n#define __itt_thread_yield()      SwitchToThread()\n#ifndef ITT_SIMPLE_INIT\nITT_INLINE long\n__itt_interlocked_increment(volatile long* ptr) ITT_INLINE_ATTRIBUTE;\nITT_INLINE long __itt_interlocked_increment(volatile long* ptr)\n{\n    return InterlockedIncrement(ptr);\n}\n#endif /* ITT_SIMPLE_INIT */\n#else /* ITT_PLATFORM!=ITT_PLATFORM_WIN */\n#define __itt_get_proc(lib, name) dlsym(lib, name)\n#define __itt_mutex_init(mutex)   {\\\n    pthread_mutexattr_t mutex_attr;                                         \\\n    int error_code = pthread_mutexattr_init(&mutex_attr);                   \\\n    if (error_code)                                                         \\\n        __itt_report_error(__itt_error_system, \"pthread_mutexattr_init\",    \\\n                           error_code);                                     \\\n    error_code = pthread_mutexattr_settype(&mutex_attr,                     \\\n                                           PTHREAD_MUTEX_RECURSIVE);        \\\n    if (error_code)                                                         \\\n        __itt_report_error(__itt_error_system, \"pthread_mutexattr_settype\", \\\n                           error_code);                                     \\\n    error_code = pthread_mutex_init(mutex, &mutex_attr);                    \\\n    if (error_code)                                                         \\\n        __itt_report_error(__itt_error_system, \"pthread_mutex_init\",        \\\n                           error_code);                                     \\\n    error_code = pthread_mutexattr_destroy(&mutex_attr);                    \\\n    if (error_code)                                                         \\\n        __itt_report_error(__itt_error_system, \"pthread_mutexattr_destroy\", \\\n                           error_code);                                     \\\n}\n#define __itt_mutex_lock(mutex)   pthread_mutex_lock(mutex)\n#define __itt_mutex_unlock(mutex) pthread_mutex_unlock(mutex)\n#define __itt_load_lib(name)      dlopen(name, RTLD_LAZY)\n#define __itt_unload_lib(handle)  dlclose(handle)\n#define __itt_system_error()      errno\n#define __itt_fstrcmp(s1, s2)     strcmp(s1, s2)\n#define __itt_fstrlen(s)          strlen(s)\n#define __itt_fstrcpyn(s1, s2, l) strncpy(s1, s2, l)\n#define __itt_fstrdup(s)          strdup(s)\n#define __itt_thread_id()         pthread_self()\n#define __itt_thread_yield()      sched_yield()\n#if ITT_ARCH==ITT_ARCH_IA64\n#ifdef __INTEL_COMPILER\n#define __TBB_machine_fetchadd4(addr, val) __fetchadd4_acq((void *)addr, val)\n#else  /* __INTEL_COMPILER */\n/* TODO: Add Support for not Intel compilers for IA-64 architecture */\n#endif /* __INTEL_COMPILER */\n#elif ITT_ARCH==ITT_ARCH_IA32 || ITT_ARCH==ITT_ARCH_IA32E /* ITT_ARCH!=ITT_ARCH_IA64 */\nITT_INLINE long\n__TBB_machine_fetchadd4(volatile void* ptr, long addend) ITT_INLINE_ATTRIBUTE;\nITT_INLINE long __TBB_machine_fetchadd4(volatile void* ptr, long addend)\n{\n    long result;\n    __asm__ __volatile__(\"lock\\nxadd %0,%1\"\n                          : \"=r\"(result),\"=m\"(*(int*)ptr)\n                          : \"0\"(addend), \"m\"(*(int*)ptr)\n                          : \"memory\");\n    return result;\n}\n#elif ITT_ARCH==ITT_ARCH_ARM || ITT_ARCH==ITT_ARCH_PPC64 || ITT_ARCH==ITT_ARCH_AARCH64\n#define __TBB_machine_fetchadd4(addr, val) __sync_fetch_and_add(addr, val)\n#endif /* ITT_ARCH==ITT_ARCH_IA64 */\n#ifndef ITT_SIMPLE_INIT\nITT_INLINE long\n__itt_interlocked_increment(volatile long* ptr) ITT_INLINE_ATTRIBUTE;\nITT_INLINE long __itt_interlocked_increment(volatile long* ptr)\n{\n    return __TBB_machine_fetchadd4(ptr, 1) + 1L;\n}\n#endif /* ITT_SIMPLE_INIT */\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\ntypedef enum {\n    __itt_collection_normal = 0,\n    __itt_collection_paused = 1\n} __itt_collection_state;\n\ntypedef enum {\n    __itt_thread_normal  = 0,\n    __itt_thread_ignored = 1\n} __itt_thread_state;\n\n#pragma pack(push, 8)\n\ntypedef struct ___itt_thread_info\n{\n    const char* nameA; /*!< Copy of original name in ASCII. */\n#if defined(UNICODE) || defined(_UNICODE)\n    const wchar_t* nameW; /*!< Copy of original name in UNICODE. */\n#else  /* UNICODE || _UNICODE */\n    void* nameW;\n#endif /* UNICODE || _UNICODE */\n    TIDT               tid;\n    __itt_thread_state state;   /*!< Thread state (paused or normal) */\n    int                extra1;  /*!< Reserved to the runtime */\n    void*              extra2;  /*!< Reserved to the runtime */\n    struct ___itt_thread_info* next;\n} __itt_thread_info;\n\n#include \"ittnotify_types.h\" /* For __itt_group_id definition */\n\ntypedef struct ___itt_api_info_20101001\n{\n    const char*    name;\n    void**         func_ptr;\n    void*          init_func;\n    __itt_group_id group;\n}  __itt_api_info_20101001;\n\ntypedef struct ___itt_api_info\n{\n    const char*    name;\n    void**         func_ptr;\n    void*          init_func;\n    void*          null_func;\n    __itt_group_id group;\n}  __itt_api_info;\n\nstruct ___itt_domain;\nstruct ___itt_string_handle;\n\ntypedef struct ___itt_global\n{\n    unsigned char          magic[8];\n    unsigned long          version_major;\n    unsigned long          version_minor;\n    unsigned long          version_build;\n    volatile long          api_initialized;\n    volatile long          mutex_initialized;\n    volatile long          atomic_counter;\n    mutex_t                mutex;\n    lib_t                  lib;\n    void*                  error_handler;\n    const char**           dll_path_ptr;\n    __itt_api_info*        api_list_ptr;\n    struct ___itt_global*  next;\n    /* Joinable structures below */\n    __itt_thread_info*     thread_list;\n    struct ___itt_domain*  domain_list;\n    struct ___itt_string_handle* string_list;\n    __itt_collection_state state;\n} __itt_global;\n\n#pragma pack(pop)\n\n#define NEW_THREAD_INFO_W(gptr,h,h_tail,t,s,n) { \\\n    h = (__itt_thread_info*)malloc(sizeof(__itt_thread_info)); \\\n    if (h != NULL) { \\\n        h->tid    = t; \\\n        h->nameA  = NULL; \\\n        h->nameW  = n ? _wcsdup(n) : NULL; \\\n        h->state  = s; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->thread_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_THREAD_INFO_A(gptr,h,h_tail,t,s,n) { \\\n    h = (__itt_thread_info*)malloc(sizeof(__itt_thread_info)); \\\n    if (h != NULL) { \\\n        h->tid    = t; \\\n        h->nameA  = n ? __itt_fstrdup(n) : NULL; \\\n        h->nameW  = NULL; \\\n        h->state  = s; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->thread_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_DOMAIN_W(gptr,h,h_tail,name) { \\\n    h = (__itt_domain*)malloc(sizeof(__itt_domain)); \\\n    if (h != NULL) { \\\n        h->flags  = 0;    /* domain is disabled by default */ \\\n        h->nameA  = NULL; \\\n        h->nameW  = name ? _wcsdup(name) : NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->domain_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_DOMAIN_A(gptr,h,h_tail,name) { \\\n    h = (__itt_domain*)malloc(sizeof(__itt_domain)); \\\n    if (h != NULL) { \\\n        h->flags  = 0;    /* domain is disabled by default */ \\\n        h->nameA  = name ? __itt_fstrdup(name) : NULL; \\\n        h->nameW  = NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->domain_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_STRING_HANDLE_W(gptr,h,h_tail,name) { \\\n    h = (__itt_string_handle*)malloc(sizeof(__itt_string_handle)); \\\n    if (h != NULL) { \\\n        h->strA   = NULL; \\\n        h->strW   = name ? _wcsdup(name) : NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->string_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_STRING_HANDLE_A(gptr,h,h_tail,name) { \\\n    h = (__itt_string_handle*)malloc(sizeof(__itt_string_handle)); \\\n    if (h != NULL) { \\\n        h->strA   = name ? __itt_fstrdup(name) : NULL; \\\n        h->strW   = NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->string_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#endif /* _ITTNOTIFY_CONFIG_H_ */\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/src/util/ckdll_dlopen.C": "/*\n dlopen version of CkDll class.  \n This file can be #included whole by the configure script or ckdll.C.\n\n Orion Sky Lawlor, olawlor@acm.org, 9/10/2002\n*/\n#include \"ckdll.h\"\n#include <unistd.h> //For unlink\n#include <dlfcn.h> //for dlopen, etc.\n\nCkDll::CkDll(const char *name) {\n\thandle=dlopen(name,RTLD_NOW);\n}\nvoid *CkDll::lookup(const char *name) {\n\treturn dlsym(handle,name);\n}\nCkDll::~CkDll() {\n\tdlclose(handle);\n}\n\nconst char *CkDll::extension=\".so\";\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/src/util/ckdll.C": "/*\nPortable Dynamically Linked Libraries (DLL) interface\n\nOrion Sky Lawlor, olawlor@acm.org, 7/26/2002\n*/\n#include \"converse.h\" //For CMK_ symbols\n#include \"ckdll.h\"\n#include <stdio.h> //For fopen\n#include <stdlib.h> //For system\n#include <string.h>\n\n\n/*#include the appropriate CkDll implementation: */\n\n#if CMK_DLL_USE_DLOPEN  /*********** UNIX .so/dlopen Version ******/\n#include \"ckdll_dlopen.C\"\n\nstatic void deleteFile(const char *fileName) {\n\tunlink(fileName);\n}\n#define CMK_SCRATCH_PATH \"/tmp\"\n\n#elif CMK_DLL_USE_WIN32 /*********** Win32 .dll/GetProcAddress Version ******/\n#include \"ckdll_win32.C\"\n\nstatic void deleteFile(const char *fileName) {\n\tDeleteFile(fileName);\n}\n#define CMK_SCRATCH_PATH \"\"\n\n#else \n/********* It ain't UNIX, it ain't win32-- what *is* it? */\nCkDll::CkDll(const char *name) {\n\thandle=0; /*DLL's not supported here.*/\n}\nvoid *CkDll::lookup(const char *name) {\n\treturn 0;\n}\nCkDll::~CkDll() {\n\t;\n}\n\nconst char *CkDll::extension=0;\nstatic void deleteFile(const char *fileName) { }\n\n#define CMK_SCRATCH_PATH \"\"\n#endif\n\n/****************************************************************\nCkCppInterpreter interface:\n\tCall the C++ compiler on a string, then use CkDll to link the\nresulting dll into the running program.\n\n\tThis depends on conv-mach.h or conv-mach-opt.h setting the symbol\nCMK_DLL_CC to the correct invokation of the C++ compiler to generate a shared\nlibrary.  CMK_DLL_CC will immediately be followed by the output library name,\nso it should end with, e.g., \"-o \" on UNIX platforms.\n\n\tCMK_DLL_LINK is an optional extra link step (required on HP machines);\nand CMK_DLL_INC is the compiler flag to change the #include path.\n*/\n\n/* \nCommand-line compilers for various platforms (now in conv-mach.h files)\n#if CMK_DLL_VIA_SUN_CC\n#  define CMK_DLL_CC  \"CC -G -O3 -o \"\n#elif CMK_DLL_VIA_SGI_CC\n#  define CMK_DLL_CC  \"CC -shared -64 -LANG:std -O3 -o \"\n#elif CMK_DLL_VIA_CXX\n#  define CMK_DLL_CC  \"cxx -shared -O3 -o \"\n#elif CMK_DLL_VIA_HP_CC\n#  define CMK_DLL_CC  \"CC +z -O -c -o \"\n#  define CMK_DLL_LINK \"CC -b -o \"\n#else\n//Default: try g++\n#  define CMK_DLL_CC  \"g++ -shared -O3 -o \"\n#endif\n*/\n\n\n#ifdef CMK_DLL_CC //We have a command-line dynamic-link library compiler:\n\n#ifndef CMK_DLL_INC\n#  define CMK_DLL_INC \"-I\" /*Assume unix-style command-line flags*/\n#endif\n\n/*Return 1 if this file exists*/\nstatic int fileExists(const char *fileName) {\n\tFILE *f=fopen(fileName,\"r\");\n\tif (f==NULL) return 0;\n\telse {\n\t\tfclose(f);\n\t\treturn 1;\n\t}\n}\n\n\n#ifdef CMK_SIGSAFE_SYSTEM\n#  include \"ckdll_system.C\"\n#else\n/*No need for a signal-safe system call*/\nstatic int CkSystem (const char *command) {\n\tsystem(command);\n}\n#endif\n\n//Compile \"cppCode\", making available the includes at inclPath\nCkCppInterpreter::CkCppInterpreter(const char *cppCode,const char *inclPath)\n\t:library(NULL)\n{\n\tint verbose=0;\n\tint randA=CrnRand();\n\tint randB=CmiMyPe();\n\n/*Write the c++ code to a temporary file:*/\n\tchar sourceFile[256];\n\tsprintf(sourceFile,\"%s/ckSharedLib_%d_%d_%p.%s\",\n\t\tCMK_SCRATCH_PATH,randA,randB,this,\"cpp\");\n\tFILE *f=fopen(sourceFile,\"w\"); if (f==NULL) return;\n\tfputs(cppCode,f);\n\tfclose(f);\n\n/*Allocate a spot for the library file:*/\n\tsprintf(libraryFile,\"%s/ckSharedLib_%d_%d_%p%s\",\n\t\tCMK_SCRATCH_PATH,randA,randB,this,CkDll::extension);\n\t\n//Compile the .cpp file into a .dll:\n\tchar compilerCmd[1024];\n\tsprintf(compilerCmd,\"%s%s %s %s%s\",\n\t\tCMK_DLL_CC, libraryFile, sourceFile,\n\t\tinclPath!=NULL?CMK_DLL_INC:\"\",inclPath!=NULL?inclPath:\"\");\n\t\n\tif (verbose) CmiPrintf(\"Executing: '%s'\\n\",compilerCmd);\n\tint compilerRet=CkSystem(compilerCmd);\n\tdeleteFile(sourceFile);\n\tif (compilerRet!=0) { //!fileExists(libraryFile)) {\n\t\tCmiPrintf(\"Compilation error! Cmd='%s', err=%d, src='%s'\\n\",\n\t\t\tcompilerCmd,compilerRet,cppCode);\n\t\treturn; /*with library set to NULL*/\n\t}\n\t\n#ifdef CMK_DLL_LINK\n//Link the .so into a \".sop\"\n\t// HIDEOUS HACK: playing silly games with filename:\n\t//    CC source -o foo.so\n\t//    CC foo.so -o foo.sop\n\tsprintf(compilerCmd,\"%s%sp %s\",\n\t\tCMK_DLL_LINK, libraryFile, libraryFile);\n\tcompilerRet=CkSystem(compilerCmd);\n\tunlink(libraryFile);\n\tstrcat(libraryFile,\"p\");\n\tif (compilerRet!=0) { //!fileExists(libraryFile)) {\n\t\tCmiPrintf(\"Link error! Cmd='%s', err=%d, src='%s'\\n\",\n\t\t\tcompilerCmd,compilerRet,cppCode);\n\t\treturn; \n\t}\n#endif\n\t\n/*Link the library into the program: */\t\n\tlibrary=new CkDll(libraryFile);\n}\n\n//Remove \"cppCode\" from the program.\n//  This invalidates any function pointers created with lookup\nCkCppInterpreter::~CkCppInterpreter()\n{\n\tif (library) {\n\t\tdelete library;\n\t\tdeleteFile(libraryFile);\n\t}\n}\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/src/scripts/conv-autoconfig.h.in": "/* conv-autoconfig.h.in.  Generated from configure.in by autoheader.  */\n\n/* enable ampi error checking */\n#undef AMPI_ERROR_CHECKING\n\n/* Charm++ Release/API version number */\n#undef CHARM_VERSION\n\n/* whether Cray gni_pub has GNI_GetBIConfig */\n#undef CMK_BALANCED_INJECTION_API\n\n/* bproc version */\n#undef CMK_BPROC_VERSION\n\n/* build MPI. */\n#undef CMK_BUILD_ON_MPI\n\n/* enable ccs */\n#undef CMK_CCS_AVAILABLE\n\n/* enable charmdebug */\n#undef CMK_CHARMDEBUG\n\n/* whether c compiler knows of the c11 standard */\n#undef CMK_COMPILER_KNOWS_C11\n\n/* whether c++ compiler knows of the cpp11 standard */\n#undef CMK_COMPILER_KNOWS_CPP11\n\n/* whether ucontext has pointer */\n#undef CMK_CONTEXT_FPU_POINTER\n\n/* whether ucontext uses uc_regs union */\n#undef CMK_CONTEXT_FPU_POINTER_UCREGS\n\n/* whether ucontext has pointer (v_regs) of vector type */\n#undef CMK_CONTEXT_V_REGS\n\n/* Cray MAXNID */\n#undef CMK_CRAY_MAXNID\n\n/* Disables conflicting macros. */\n#undef CMK_CXX_MPI_BINDINGS\n\n/* whether C inline works in C */\n#undef CMK_C_INLINE\n\n/* whether sync_add_and_fetch primitive works in C */\n#undef CMK_C_SYNC_ADD_AND_FETCH_PRIMITIVE\n\n/* whether sync_synchronize primitives works in C */\n#undef CMK_C_SYNC_SYNCHRONIZE_PRIMITIVE\n\n/* whether C++ allows declaration of variable sized array */\n#undef CMK_DECLARE_VARSIZE_ARRAY\n\n/* dlopen */\n#undef CMK_DLL_USE_DLOPEN\n\n/* whether getProcAddress works */\n#undef CMK_DLL_USE_WIN32\n\n/* enable error checking */\n#undef CMK_ERROR_CHECKING\n\n/* ALLCAPS */\n#undef CMK_FORTRAN_USES_ALLCAPS\n\n/* NOSCORE */\n#undef CMK_FORTRAN_USES_NOSCORE\n\n/* ONESCORE */\n#undef CMK_FORTRAN_USES_ONESCORE\n\n/* TWOSCORE */\n#undef CMK_FORTRAN_USES_TWOSCORE\n\n/* Allows gcc x86 assembly. */\n#undef CMK_GCC_X86_ASM\n\n/* Allows gcc x86 assembly for atomic increment. */\n#undef CMK_GCC_X86_ASM_ATOMICINCREMENT\n\n/* whether personality() and ADDR_NO_RANDOMIZE exist */\n#undef CMK_HAS_ADDR_NO_RANDOMIZE\n\n/* whether compiler supports std::alignment_of */\n#undef CMK_HAS_ALIGNMENT_OF\n\n/* whether has alloca.h */\n#undef CMK_HAS_ALLOCA_H\n\n/* whether anon structs are permitted */\n#undef CMK_HAS_ANON_STRUCTS\n\n/* whether has asctime */\n#undef CMK_HAS_ASCTIME\n\n/* whether the bindprocessor() exists */\n#undef CMK_HAS_BINDPROCESSOR\n\n/* whether PAPI exists */\n#undef CMK_HAS_COUNTER_PAPI\n\n/* whether C++ library has <cstdatomic> */\n#undef CMK_HAS_CXX0X_CSTDATOMIC\n\n/* whether C++ library has <atomic> */\n#undef CMK_HAS_CXX11_ATOMIC\n\n/* whether has elf.h */\n#undef CMK_HAS_ELF_H\n\n/* whether has fabsf */\n#undef CMK_HAS_FABSF\n\n/* whether has fdatasync */\n#undef CMK_HAS_FDATASYNC_FUNC\n\n/* whether has fsync */\n#undef CMK_HAS_FSYNC_FUNC\n\n/* whether gethostname() exists */\n#undef CMK_HAS_GETHOSTNAME\n\n/* whether getifaddrs() exists */\n#undef CMK_HAS_GETIFADDRS\n\n/* whether getpagesize exists */\n#undef CMK_HAS_GETPAGESIZE\n\n/* whether getpid exists */\n#undef CMK_HAS_GETPID\n\n/* whether has get_myaddress */\n#undef CMK_HAS_GET_MYADDRESS\n\n/* whether compiler supports std::is_constructible */\n#undef CMK_HAS_IS_CONSTRUCTIBLE\n\n/* whether iterator_traits works */\n#undef CMK_HAS_ITERATOR_TRAITS\n\n/* whether kill exists */\n#undef CMK_HAS_KILL\n\n/* whether has log2 */\n#undef CMK_HAS_LOG2\n\n/* whether has mallinfo */\n#undef CMK_HAS_MALLINFO\n\n/* whether has malloc.h */\n#undef CMK_HAS_MALLOC_H\n\n/* whether the mmap() syscall exists */\n#undef CMK_HAS_MMAP\n\n/* whether mmap() accepts MAP_ANON */\n#undef CMK_HAS_MMAP_ANON\n\n/* whether mmap() accepts MAP_NORESERVE */\n#undef CMK_HAS_MMAP_NORESERVE\n\n/* whether has mprotect */\n#undef CMK_HAS_MPROTECT\n\n/* whether has mstats */\n#undef CMK_HAS_MSTATS\n\n/* whether has Multiprocessing.h */\n#undef CMK_HAS_MULTIPROCESSING_H\n\n/* whether ntohl is available */\n#undef CMK_HAS_NTOHL\n\n/* whether NUMA control related functions exist */\n#undef CMK_HAS_NUMACTRL\n\n/* whether offsetof exists */\n#undef CMK_HAS_OFFSETOF\n\n/* whether PMI_Get_nid exists */\n#undef CMK_HAS_PMI_GET_NID\n\n/* whether has popen */\n#undef CMK_HAS_POPEN\n\n/* whether the pthread_setaffinity_np() exists */\n#undef CMK_HAS_PTHREAD_SETAFFINITY\n\n/* whether Python is installed */\n#undef CMK_HAS_PYTHON\n\n/* whether Cray rca library is available */\n#undef CMK_HAS_RCALIB\n\n/* whether Cray rca has rca_get_max_dimension */\n#undef CMK_HAS_RCA_MAX_DIMENSION\n\n/* whether has regex.h */\n#undef CMK_HAS_REGEX_H\n\n/* whether getrusage accepts RUSAGE_THREAD */\n#undef CMK_HAS_RUSAGE_THREAD\n\n/* whether has sbrk */\n#undef CMK_HAS_SBRK\n\n/* whether the sched_setaffinity() exists */\n#undef CMK_HAS_SETAFFINITY\n\n/* whether the setpriority exists */\n#undef CMK_HAS_SETPRIORITY\n\n/* whether has sleep */\n#undef CMK_HAS_SLEEP\n\n/* whether has socklen_t */\n#undef CMK_HAS_SOCKLEN\n\n/* whether the pthread_spin_lock exists */\n#undef CMK_HAS_SPINLOCK\n\n/* whether has sqrtf */\n#undef CMK_HAS_SQRTF\n\n/* whether has stdint.h */\n#undef CMK_HAS_STDINT_H\n\n/* whether std::distance works */\n#undef CMK_HAS_STD_DISTANCE\n\n/* whether std::inserter works */\n#undef CMK_HAS_STD_INSERTER\n\n/* whether std::unordered_map works */\n#undef CMK_HAS_STD_UNORDERED_MAP\n\n/* sync program */\n#undef CMK_HAS_SYNC\n\n/* whether has sync */\n#undef CMK_HAS_SYNC_FUNC\n\n/* whether has system */\n#undef CMK_HAS_SYSTEM\n\n/* Allows __thread. */\n#undef CMK_HAS_TLS_VARIABLES\n\n/* whether typeinfo/typeid works */\n#undef CMK_HAS_TYPEINFO\n\n/* whether has _setjmp/_longjmp */\n#undef CMK_HAS_UNDERSCORE_SETJMP\n\n/* whether has usleep */\n#undef CMK_HAS_USLEEP\n\n/* whether has values.h */\n#undef CMK_HAS_VALUES_H\n\n/* whether ibv_port_attr has link_layer field */\n#undef CMK_IBV_PORT_ATTR_HAS_LINK_LAYER\n\n/* Setting load balancing timer type */\n#undef CMK_LBTIME_TYPE\n\n/* disable lb user data */\n#undef CMK_LB_USER_DATA\n\n/* whether long double works */\n#undef CMK_LONG_DOUBLE_DEFINED\n\n/* whether long long works */\n#undef CMK_LONG_LONG_DEFINED\n\n/* machine name */\n#undef CMK_MACHINE_NAME\n\n/* Allows MPI_Init_thread. */\n#undef CMK_MPI_INIT_THREAD\n\n/* expected message priorities are arbitrarily sized */\n#undef CMK_MSG_PRIO_TYPE\n\n/* whether operator delete can be overloaded in same class */\n#undef CMK_MULTIPLE_DELETE\n\n/* OS is Linux */\n#undef CMK_OS_IS_LINUX\n\n/* whether is power7 */\n#undef CMK_POWER7\n\n/* Allows asm eieio assembly. */\n#undef CMK_PPC_ASM\n\n/* whether has zlib */\n#undef CMK_PROJECTIONS_USE_ZLIB\n\n/* Python version */\n#undef CMK_PYTHON_VERSION\n\n/* disable the randomized msgq in the scheduler */\n#undef CMK_RANDOMIZED_MSGQ\n\n/* envelope refnum field set to UInt */\n#undef CMK_REFNUM_TYPE\n\n/* disable replay */\n#undef CMK_REPLAYSYSTEM\n\n/* disable shrinkexpand */\n#undef CMK_SHRINK_EXPAND\n\n/* whether C++ signed char and char differ */\n#undef CMK_SIGNEDCHAR_DIFF_CHAR\n\n/* whether to use signal-safe system() */\n#undef CMK_SIGSAFE_SYSTEM\n\n/* whether size_t 64bit */\n#undef CMK_SIZET_64BIT\n\n/* disable tracing comm thread */\n#undef CMK_SMP_TRACE_COMMTHREAD\n\n/* Allows switching TLS in 32-bit. */\n#undef CMK_TLS_SWITCHING32\n\n/* Allows switching TLS 64-bit. */\n#undef CMK_TLS_SWITCHING64\n\n/* enable tracing */\n#undef CMK_TRACE_ENABLED\n\n/* whether glibc backtrace works */\n#undef CMK_USE_BACKTRACE\n\n/* whether has libjpeg */\n#undef CMK_USE_LIBJPEG\n\n/* whether has mkstemp */\n#undef CMK_USE_MKSTEMP\n\n/* whether the poll syscall exists */\n#undef CMK_USE_POLL\n\n/* whether charm scheduler should use an STL-based msg q */\n#undef CMK_USE_STL_MSGQ\n\n/* disable controlpoint */\n#undef CMK_WITH_CONTROLPOINT\n\n/* enable statistics collection */\n#undef CMK_WITH_STATS\n\n/* whether __int128 works */\n#undef CMK___int128_DEFINED\n\n/* whether __int128_t works */\n#undef CMK___int128_t_DEFINED\n\n/* whether __int64 works */\n#undef CMK___int64_DEFINED\n\n/* Define to the address where bug reports for this package should be sent. */\n#undef PACKAGE_BUGREPORT\n\n/* Define to the full name of this package. */\n#undef PACKAGE_NAME\n\n/* Define to the full name and version of this package. */\n#undef PACKAGE_STRING\n\n/* Define to the one symbol short name of this package. */\n#undef PACKAGE_TARNAME\n\n/* Define to the home page for this package. */\n#undef PACKAGE_URL\n\n/* Define to the version of this package. */\n#undef PACKAGE_VERSION\n\n/* enable qlogic */\n#undef QLOGIC\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/src/scripts/Make.depends": "#generated by make depends\nAdaptiveLB.o: AdaptiveLB.C AdaptiveLB.h CentralLB.h BaseLB.h LBDatabase.h \\\n lbdb.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h AdaptiveLB.decl.h \\\n ckgraph.h AdaptiveLB.def.h\n\nBaseLB.o: BaseLB.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h BaseLB.h LBSimulation.h charm++.h \\\n CentralLB.h CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h \\\n BaseLB.def.h\n\nBlockLB.o: BlockLB.C BlockLB.decl.h charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n BlockLB.h CentralLB.h BaseLB.h pup_stl.h manager.h BlockLB.def.h\n\nBlueGene.o: BlueGene.C BlueGene.h BlueGene.decl.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h BlueGene.def.h\n\nCentralLB.o: CentralLB.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h charm++.h envelope.h charm.h \\\n middle.h cklists.h objid.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h ck.h \\\n charm++.h envelope.h qd.h register.h stats.h ckfutures.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h CentralLB.h BaseLB.h LBDatabase.h CentralLB.decl.h \\\n sdag.h BaseLB.decl.h LBDatabase.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h LBDBManager.h LBSimulation.h CentralLB.def.h\n\nCentralPredictor.o: CentralPredictor.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.h BaseLB.h LBDatabase.h \\\n CentralLB.decl.h charm++.h envelope.h sdag.h BaseLB.decl.h \\\n LBDatabase.decl.h CentralLBMsg.h pup_stl.h manager.h\n\nComboCentLB.o: ComboCentLB.C ComboCentLB.h CentralLB.h BaseLB.h \\\n LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h ComboCentLB.decl.h \\\n ComboCentLB.def.h\n\nCommAwareRefineLB.o: CommAwareRefineLB.C CommAwareRefineLB.h CentralLB.h \\\n BaseLB.h LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h \\\n CommAwareRefineLB.decl.h ckgraph.h CommAwareRefineLB.def.h\n\nCommLB.o: CommLB.C CommLB.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h CommLB.decl.h charm++.h envelope.h sdag.h CentralLB.decl.h \\\n CommLBHeap.h GreedyCommLB.h CentralLB.h GreedyCommLB.decl.h CommLB.def.h\n\nCommLBHeap.o: CommLBHeap.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CommLBHeap.h\n\nCommonLBs.o: CommonLBs.C LBDatabase.h lbdb.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h charm.h pup.h middle.h middle-conv.h LBDBManager.h \\\n cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h MetaBalancer.h MetaBalancer.decl.h \\\n CkLocation.decl.h ckarrayoptions.h ckmulticast.h CkMulticast.decl.h \\\n cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h \\\n waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CommonLBs.decl.h charm++.h envelope.h sdag.h \\\n DummyLB.decl.h CentralLB.decl.h BaseLB.decl.h LBDatabase.decl.h \\\n CentralLBMsg.h GreedyLB.decl.h GreedyRefineLB.decl.h CommLB.decl.h \\\n RandCentLB.decl.h RefineLB.decl.h RefineCommLB.decl.h RotateLB.decl.h \\\n DistributedLB.decl.h DistBaseLB.decl.h HybridLB.decl.h \\\n HybridBaseLB.decl.h NeighborLBMsg.h HybridLBMsg.h ComboCentLB.decl.h \\\n RefineSwapLB.decl.h NeighborLB.decl.h NborBaseLB.decl.h OrbLB.decl.h \\\n BlockLB.decl.h GreedyCommLB.decl.h NodeLevelLB.decl.h CommonLBs.def.h\n\nDistBaseLB.o: DistBaseLB.C BaseLB.h LBDatabase.h lbdb.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n DistBaseLB.h DistBaseLB.decl.h DistBaseLB.def.h\n\nDistributedLB.o: DistributedLB.C DistributedLB.h DistBaseLB.h BaseLB.h \\\n LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n DistBaseLB.decl.h DistributedLB.decl.h ckheap.h elements.h ckset.h \\\n DistributedLB.def.h\n\nDummyLB.o: DummyLB.C DummyLB.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h DummyLB.decl.h \\\n DummyLB.def.h\n\nEveryLB.o: EveryLB.C LBDatabase.h lbdb.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h charm.h pup.h middle.h middle-conv.h LBDBManager.h \\\n cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h MetaBalancer.h MetaBalancer.decl.h \\\n CkLocation.decl.h ckarrayoptions.h ckmulticast.h CkMulticast.decl.h \\\n cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h \\\n waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h EveryLB.decl.h charm++.h envelope.h sdag.h \\\n DummyLB.decl.h CentralLB.decl.h BaseLB.decl.h LBDatabase.decl.h \\\n CentralLBMsg.h GreedyLB.decl.h GreedyRefineLB.decl.h CommLB.decl.h \\\n RandCentLB.decl.h RefineLB.decl.h RefineCommLB.decl.h RotateLB.decl.h \\\n DistributedLB.decl.h DistBaseLB.decl.h HybridLB.decl.h \\\n HybridBaseLB.decl.h NeighborLBMsg.h HybridLBMsg.h ComboCentLB.decl.h \\\n RefineSwapLB.decl.h NeighborLB.decl.h NborBaseLB.decl.h OrbLB.decl.h \\\n BlockLB.decl.h GreedyCommLB.decl.h NodeLevelLB.decl.h GraphPartLB.decl.h \\\n GraphBFTLB.decl.h GridCommLB.decl.h GridCommRefineLB.decl.h HbmLB.decl.h \\\n RefineKLB.decl.h TempAwareCommLB.decl.h TreeMatchLB.decl.h \\\n GreedyAgentLB.decl.h NeighborCommLB.decl.h PhasebyArrayLB.decl.h \\\n RecBipartLB.decl.h CommAwareRefineLB.decl.h AdaptiveLB.decl.h \\\n MetisLB.decl.h GridMetisLB.decl.h EveryLB.def.h\n\nGraphBFTLB.o: GraphBFTLB.C GraphBFTLB.h CentralLB.h BaseLB.h LBDatabase.h \\\n lbdb.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h GraphBFTLB.decl.h \\\n ckgraph.h GraphBFTLB.def.h\n\nGraphPartLB.o: GraphPartLB.C GraphPartLB.h CentralLB.h BaseLB.h \\\n LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h GraphPartLB.decl.h \\\n ckgraph.h GraphPartLB.def.h\n\nGreedyAgentLB.o: GreedyAgentLB.C LBSimulation.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.h BaseLB.h CentralLB.decl.h \\\n CentralLBMsg.h pup_stl.h manager.h GreedyAgentLB.h CentralLB.h \\\n GreedyAgentLB.decl.h charm++.h envelope.h sdag.h CentralLB.decl.h \\\n LBAgent.h topology.h GreedyAgentLB.def.h\n\nGreedyCommLB.o: GreedyCommLB.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h lbdb.h charm.h pup.h middle.h middle-conv.h ckset.h \\\n cklists.h ckheap.h GreedyCommLB.h CentralLB.h BaseLB.h LBDatabase.h \\\n LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h GreedyCommLB.decl.h CommLBHeap.h GreedyCommLB.def.h\n\nGreedyLB.o: GreedyLB.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ckgraph.h BaseLB.h GreedyLB.h \\\n CentralLB.h CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h \\\n GreedyLB.decl.h GreedyLB.def.h\n\nGreedyRefineLB.o: GreedyRefineLB.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ckgraph.h BaseLB.h GreedyRefineLB.h \\\n CentralLB.h CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h \\\n GreedyRefineLB.decl.h GreedyRefineLB.def.h\n\nGridCommLB.o: GridCommLB.C GridCommLB.decl.h charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n GridCommLB.h CentralLB.h BaseLB.h pup_stl.h manager.h GridCommLB.def.h\n\nGridCommRefineLB.o: GridCommRefineLB.C GridCommRefineLB.decl.h charm++.h \\\n charm.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n GridCommRefineLB.h CentralLB.h BaseLB.h pup_stl.h manager.h \\\n GridCommRefineLB.def.h\n\nGridHybridLB.o: GridHybridLB.C GridHybridLB.decl.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n GridHybridLB.h CentralLB.h BaseLB.h pup_stl.h manager.h \\\n GridHybridLB.def.h\n\nGridHybridSeedLB.o: GridHybridSeedLB.C GridHybridSeedLB.decl.h charm++.h \\\n charm.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n GridHybridSeedLB.h CentralLB.h BaseLB.h pup_stl.h manager.h \\\n GridHybridSeedLB.def.h\n\nGridMetisLB.o: GridMetisLB.C GridMetisLB.decl.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n GridMetisLB.h CentralLB.h BaseLB.h pup_stl.h manager.h GridMetisLB.def.h\n\nHbmLB.o: HbmLB.C HbmLB.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h HbmLB.decl.h \\\n NeighborLBMsg.h HybridLBMsg.h topology.h GreedyLB.h GreedyLB.decl.h \\\n GreedyCommLB.h GreedyCommLB.decl.h CommLBHeap.h RefineCommLB.h \\\n RefinerComm.h Refiner.h elements.h ckset.h ckheap.h RefineLB.h \\\n RefineLB.decl.h RefineCommLB.decl.h HbmLB.def.h\n\nHybridBaseLB.o: HybridBaseLB.C HybridBaseLB.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h BaseLB.h CentralLB.h CentralLB.decl.h \\\n CentralLBMsg.h pup_stl.h manager.h HybridBaseLB.decl.h NeighborLBMsg.h \\\n HybridLBMsg.h topology.h GreedyLB.h GreedyLB.decl.h GreedyCommLB.h \\\n GreedyCommLB.decl.h CommLBHeap.h RefineCommLB.h RefinerComm.h Refiner.h \\\n elements.h ckset.h ckheap.h RefineLB.h RefineLB.decl.h \\\n RefineCommLB.decl.h HybridBaseLB.def.h\n\nHybridLB.o: HybridLB.C HybridLB.h CentralLB.h BaseLB.h LBDatabase.h \\\n lbdb.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h HybridBaseLB.h \\\n HybridBaseLB.decl.h NeighborLBMsg.h HybridLBMsg.h topology.h \\\n HybridLB.decl.h GreedyLB.h GreedyLB.decl.h GreedyCommLB.h \\\n GreedyCommLB.decl.h CommLBHeap.h RefineCommLB.h RefinerComm.h Refiner.h \\\n elements.h ckset.h ckheap.h RefineLB.h RefineLB.decl.h \\\n RefineCommLB.decl.h MetisLB.h MetisLB.decl.h HybridLB.def.h\n\nLBAgent.o: LBAgent.C LBAgent.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h topology.h\n\nLBComm.o: LBComm.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h converse.h conv-cpath.h conv-qd.h conv-random.h \\\n conv-lists.h conv-trace.h persistent.h conv-rdma.h debug-conv.h LBComm.h \\\n converse.h lbdb.h charm.h pup.h middle.h conv-config.h middle-conv.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h\n\nLBDBManager.o: LBDBManager.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h charm++.h envelope.h charm.h \\\n middle.h cklists.h objid.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n LBDBManager.h\n\nLBDatabase.o: LBDatabase.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h LBDatabase.h lbdb.h \\\n charm.h pup.h middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h \\\n LBOM.h LBComm.h LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h \\\n ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n LBSimulation.h charm++.h CentralLB.h BaseLB.h CentralLB.decl.h \\\n CentralLBMsg.h pup_stl.h manager.h topology.h NullLB.h BaseLB.h \\\n LBDatabase.def.h\n\nLBMachineUtil.o: LBMachineUtil.C LBDatabase.h lbdb.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h\n\nLBObj.o: LBObj.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h charm++.h envelope.h charm.h \\\n middle.h cklists.h objid.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n LBObj.h LBOM.h LBDBManager.h\n\nLBProfit.o: LBProfit.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h LBProfit.h BaseLB.h \\\n LBDatabase.h lbdb.h charm.h pup.h middle.h middle-conv.h LBDBManager.h \\\n cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h\n\nLBSimulation.o: LBSimulation.C LBSimulation.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.h BaseLB.h LBDatabase.h \\\n CentralLB.decl.h charm++.h envelope.h sdag.h BaseLB.decl.h \\\n LBDatabase.decl.h CentralLBMsg.h pup_stl.h manager.h\n\nLButil.o: LButil.C elements.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h lbdb.h charm.h pup.h \\\n middle.h middle-conv.h ckset.h cklists.h ckheap.h BaseLB.h LBDatabase.h \\\n LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h\n\nMetaBalancer.o: MetaBalancer.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h MetaBalancer.h \\\n LBDatabase.h lbdb.h charm.h pup.h middle.h middle-conv.h LBDBManager.h \\\n cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h \\\n CkLocation.decl.h ckarrayoptions.h ckmulticast.h CkMulticast.decl.h \\\n cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h \\\n waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h MetaBalancer.decl.h topology.h \\\n MetaBalancer.def.h\n\nMetisLB.o: MetisLB.C MetisLB.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h MetisLB.decl.h \\\n ckgraph.h MetisLB.def.h\n\nNborBaseLB.o: NborBaseLB.C BaseLB.h LBDatabase.h lbdb.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n NborBaseLB.h NborBaseLB.decl.h NeighborLBMsg.h topology.h \\\n NborBaseLB.def.h\n\nNeighborCommLB.o: NeighborCommLB.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h lbdb.h charm.h pup.h middle.h middle-conv.h ckset.h \\\n cklists.h ckheap.h NeighborCommLB.h NborBaseLB.h BaseLB.h LBDatabase.h \\\n LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h NborBaseLB.decl.h NeighborLBMsg.h topology.h \\\n NeighborCommLB.decl.h NeighborCommLB.def.h\n\nNeighborLB.o: NeighborLB.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h lbdb.h charm.h pup.h middle.h middle-conv.h ckset.h \\\n cklists.h ckheap.h NeighborLB.h NborBaseLB.h BaseLB.h LBDatabase.h \\\n LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h NborBaseLB.decl.h NeighborLBMsg.h topology.h \\\n NeighborLB.decl.h NeighborLB.def.h\n\nNodeLevelLB.o: NodeLevelLB.C NodeLevelLB.h CentralLB.h BaseLB.h \\\n LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h HybridBaseLB.h \\\n HybridBaseLB.decl.h NeighborLBMsg.h HybridLBMsg.h topology.h \\\n NodeLevelLB.decl.h NodeLevelLB.def.h\n\nNullLB.o: NullLB.C NullLB.h BaseLB.h LBDatabase.h lbdb.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h NullLB.decl.h ck.h charm++.h envelope.h qd.h \\\n register.h stats.h ckfutures.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h NullLB.def.h\n\nOrbLB.o: OrbLB.C OrbLB.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h OrbLB.decl.h \\\n OrbLB.def.h\n\nPhasebyArrayLB.o: PhasebyArrayLB.C PhasebyArrayLB.h CentralLB.h BaseLB.h \\\n LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h \\\n PhasebyArrayLB.decl.h PhasebyArrayLB.def.h\n\nRandCentLB.o: RandCentLB.C RandCentLB.h CentralLB.h BaseLB.h LBDatabase.h \\\n lbdb.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h RandCentLB.decl.h \\\n RandCentLB.def.h\n\nRecBipartLB.o: RecBipartLB.C RecBipartLB.h CentralLB.h BaseLB.h \\\n LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h RecBipartLB.decl.h \\\n ckgraph.h RecBipartLB.def.h\n\nRefineCommLB.o: RefineCommLB.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h lbdb.h charm.h pup.h middle.h middle-conv.h ckset.h \\\n cklists.h ckheap.h RefineCommLB.h CentralLB.h BaseLB.h LBDatabase.h \\\n LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h RefinerComm.h Refiner.h RefineLB.h RefineLB.decl.h \\\n RefineCommLB.decl.h RefineCommLB.def.h\n\nRefineKLB.o: RefineKLB.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h lbdb.h charm.h pup.h middle.h middle-conv.h ckset.h \\\n cklists.h ckheap.h RefineKLB.h CentralLB.h BaseLB.h LBDatabase.h \\\n LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h RefinerApprox.h Refiner.h RefineKLB.decl.h RefineKLB.def.h\n\nRefineLB.o: RefineLB.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h lbdb.h charm.h pup.h middle.h middle-conv.h ckset.h \\\n cklists.h ckheap.h RefineLB.h CentralLB.h BaseLB.h LBDatabase.h \\\n LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h Refiner.h RefineLB.decl.h RefineLB.def.h\n\nRefineSwapLB.o: RefineSwapLB.C RefineSwapLB.h CentralLB.h BaseLB.h \\\n LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h RefineSwapLB.decl.h \\\n ckgraph.h RefineSwapLB.def.h\n\nRefineTopoLB.o: RefineTopoLB.C RefineTopoLB.decl.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h TopoLB.decl.h CentralLB.decl.h \\\n CentralLBMsg.h RefineTopoLB.h CentralLB.h BaseLB.h pup_stl.h manager.h \\\n TopoLB.h topology.h RefineTopoLB.def.h\n\nRefiner.o: Refiner.C Refiner.h elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h lbdb.h charm.h pup.h middle.h middle-conv.h ckset.h \\\n cklists.h ckheap.h CentralLB.h BaseLB.h LBDatabase.h LBDBManager.h \\\n LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h LBDatabase.decl.h \\\n charm++.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h\n\nRefinerApprox.o: RefinerApprox.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h lbdb.h charm.h pup.h middle.h middle-conv.h ckset.h \\\n cklists.h ckheap.h RefinerApprox.h CentralLB.h BaseLB.h LBDatabase.h \\\n LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h Refiner.h\n\nRefinerComm.o: RefinerComm.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h lbdb.h charm.h pup.h middle.h middle-conv.h ckset.h \\\n cklists.h ckheap.h RefinerComm.h CentralLB.h BaseLB.h LBDatabase.h \\\n LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h Refiner.h\n\nRefinerTemp.o: RefinerTemp.C RefinerTemp.h elements.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h lbdb.h charm.h pup.h middle.h \\\n middle-conv.h ckset.h cklists.h ckheap.h CentralLB.h BaseLB.h \\\n LBDatabase.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h \\\n lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h\n\nRotateLB.o: RotateLB.C RotateLB.decl.h charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n RotateLB.h CentralLB.h BaseLB.h pup_stl.h manager.h RotateLB.def.h\n\nScotchLB.o: ScotchLB.C ScotchLB.h CentralLB.h BaseLB.h LBDatabase.h \\\n lbdb.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h ScotchLB.decl.h \\\n ckgraph.h ScotchLB.def.h\n\nTeamLB.o: TeamLB.C TeamLB.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h TeamLB.decl.h \\\n ckgraph.h TeamLB.def.h\n\nTempAwareCommLB.o: TempAwareCommLB.C TempAwareCommLB.h CentralLB.h \\\n BaseLB.h LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h \\\n TempAwareCommLB.decl.h ckgraphTemp.h ckgraph.h TempAwareCommLB.def.h\n\nTempAwareGreedyLB.o: TempAwareGreedyLB.C TempAwareGreedyLB.h CentralLB.h \\\n BaseLB.h LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h \\\n TempAwareGreedyLB.decl.h ckgraph.h TempAwareGreedyLB.def.h\n\nTempAwareRefineLB.o: TempAwareRefineLB.C TempAwareRefineLB.h CentralLB.h \\\n BaseLB.h LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h RefinerTemp.h \\\n elements.h ckset.h ckheap.h TempAwareRefineLB.decl.h ckgraph.h \\\n TempAwareRefineLB.def.h\n\nTopoCentLB.o: TopoCentLB.C TopoCentLB.decl.h charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n TopoCentLB.h CentralLB.h BaseLB.h pup_stl.h manager.h topology.h \\\n TopoCentLB.def.h\n\nTopoLB.o: TopoLB.C TopoLB.decl.h charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n TopoLB.h CentralLB.h BaseLB.h pup_stl.h manager.h topology.h \\\n TopoLB.def.h\n\nTreeMatchLB.o: TreeMatchLB.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h charm++.h envelope.h charm.h \\\n middle.h cklists.h objid.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n tm_tree.h tm_mapping.h TreeMatchLB.h CentralLB.h BaseLB.h LBDatabase.h \\\n CentralLB.decl.h charm++.h envelope.h sdag.h BaseLB.decl.h \\\n LBDatabase.decl.h CentralLBMsg.h pup_stl.h manager.h TreeMatchLB.decl.h \\\n ckgraph.h TreeMatchLB.def.h\n\nWSLB.o: WSLB.C elements.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h lbdb.h charm.h pup.h \\\n middle.h middle-conv.h ckset.h cklists.h ckheap.h WSLB.h BaseLB.h \\\n LBDatabase.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h \\\n lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h WSLB.decl.h topology.h WSLB.def.h\n\narrayRedistributor.o: arrayRedistributor.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-controlPoints.h trace.h \\\n envelope.h register.h trace-common.h LBDatabase.h controlPoints.h \\\n conv-config.h ControlPoints.decl.h charm++.h sdag.h charm-api.h \\\n arrayRedistributor.h pathHistory.h cp_effects.h ck.h qd.h register.h \\\n stats.h ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h ckarray.h\n\nbigsim_api.o: bigsim_api.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h blue-conv.h blue_impl.h ckliststring.h blue_types.h \\\n bigsim_timing.h cklists.h pup.h bigsim_logs.h blue_defs.h \\\n bigsim_network.h\n\nbigsim_init.o: bigsim_init.C bigsim_debug.h queueing.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h blue.h \\\n converse.h cmiqueue.h pup_c.h lrtslock.h conv-cpm.h conv-cpath.h \\\n conv-qd.h conv-random.h conv-lists.h conv-trace.h persistent.h \\\n conv-rdma.h debug-conv.h blue-conv.h blue_impl.h ckliststring.h \\\n blue_types.h bigsim_timing.h cklists.h pup.h bigsim_logs.h blue_defs.h \\\n bigsim_network.h bigsim_ooc.h\n\nbigsim_logs.o: bigsim_logs.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h blue-conv.h blue_impl.h ckliststring.h blue_types.h \\\n bigsim_timing.h cklists.h pup.h bigsim_logs.h blue_defs.h \\\n bigsim_network.h\n\nbigsim_node.o: bigsim_node.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h blue-conv.h blue_impl.h ckliststring.h blue_types.h \\\n bigsim_timing.h cklists.h pup.h bigsim_logs.h blue_defs.h \\\n bigsim_network.h bigsim_debug.h bigsim_ooc.h\n\nbigsim_ooc.o: bigsim_ooc.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h blue-conv.h blue_types.h bigsim_ooc.h blue_impl.h \\\n ckliststring.h bigsim_timing.h cklists.h pup.h bigsim_logs.h blue_defs.h \\\n bigsim_network.h bigsim_debug.h\n\nbigsim_proc.o: bigsim_proc.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h blue-conv.h blue_impl.h ckliststring.h blue_types.h \\\n bigsim_timing.h cklists.h pup.h bigsim_logs.h blue_defs.h \\\n bigsim_network.h bigsim_record.h ckcheckpoint.h pup.h ckcallback.h \\\n cksection.h charm.h converse.h pup.h ckarrayindex.h ckhashtable.h \\\n objid.h conv-ccs.h sockRoutines.h conv-config.h ccs-server.h ckmessage.h \\\n CkCheckpointStatus.decl.h charm++.h charm.h middle.h middle-conv.h \\\n ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckarrayindex.h cksection.h ckcallback.h ckrdmawrapper.h \\\n ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckevacuation.h trace.h \\\n trace-bluegene.h pathHistory.h PathHistory.decl.h ckcallback-ccs.h \\\n conv-ccs.h CkCallback.decl.h bigsim_ooc.h bigsim_debug.h\n\nbigsim_read.o: bigsim_read.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h blue-conv.h blue_impl.h ckliststring.h blue_types.h \\\n bigsim_timing.h cklists.h pup.h bigsim_logs.h blue_defs.h \\\n bigsim_network.h\n\nbigsim_record.o: bigsim_record.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h blue-conv.h bigsim_record.h blue_impl.h ckliststring.h \\\n blue_types.h bigsim_timing.h cklists.h pup.h bigsim_logs.h blue_defs.h \\\n bigsim_network.h\n\nbigsim_timing.o: bigsim_timing.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h blue-conv.h blue_impl.h ckliststring.h blue_types.h \\\n bigsim_timing.h cklists.h pup.h bigsim_logs.h blue_defs.h \\\n bigsim_network.h bigsim_ooc.h\n\nbitvecset.o: bitvecset.c bitvecset.h\n\nblue.o: blue.C cklists.h pup.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h blue.h blue-conv.h \\\n blue_impl.h ckliststring.h blue_types.h bigsim_timing.h bigsim_logs.h \\\n blue_defs.h bigsim_network.h bigsim_record.h bigsim_ooc.h bigsim_debug.h\n\nblue_standalone.o: blue_standalone.C\n\nblue_stub.o: blue_stub.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h\n\nccs-builtins.o: ccs-builtins.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h ckhashtable.h pup.h \\\n pup_toNetwork.h debug-conv++.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ccs-builtins.h\n\ncharmProjections.o: charmProjections.C converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h charmProjections.h traceCoreCommon.h charmEvents.h \\\n traceCoreAPI.h ck.h charm++.h charm.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h trace-common.h\n\nck.o: ck.C ck.h charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h crc32.h trace-common.h BaseLB.h ckliststring.h \\\n CkMarshall.def.h\n\nckIgetControl.o: ckIgetControl.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ckIgetControl.h\n\nckarray.o: ckarray.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h register.h ck.h qd.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h CkArray.def.h\n\nckarrayoptions.o: ckarrayoptions.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ck.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h\n\nckbitvector.o: ckbitvector.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h\n\nckcallback.o: ckcallback.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CkCallback.def.h\n\nckcausalmlog.o: ckcausalmlog.C charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h ck.h charm++.h middle.h middle-conv.h cklists.h \\\n ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h ckcausalmlog.h ckobjid.h CentralLB.h BaseLB.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h\n\nckcheckpoint.o: ckcheckpoint.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ck.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h CkCheckpoint.decl.h CkCheckpoint.def.h \\\n CkCheckpointStatus.def.h\n\nckdll.o: ckdll.C converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h ckdll.h \\\n ckdll_dlopen.C ckdll_system.C\n\nckevacuation.o: ckevacuation.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ck.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h\n\nckfutures.o: ckfutures.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ck.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h CkFutures.def.h\n\nckgraph.o: ckgraph.C ckgraph.h BaseLB.h LBDatabase.h lbdb.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h\n\nckgraphTemp.o: ckgraphTemp.C ckgraphTemp.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h ckgraph.h\n\nckhashtable.o: ckhashtable.C ckhashtable.h pup.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h\n\nckheap.o: ckheap.C elements.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h lbdb.h charm.h pup.h \\\n middle.h middle-conv.h ckset.h cklists.h ckheap.h\n\nckimage.o: ckimage.C ckimage.h pup.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h\n\ncklocation.o: cklocation.C hilbert.h partitioning_strategies.h charm++.h \\\n charm.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h register.h ck.h qd.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h pup_stl.h CkLocation.def.h\n\nckmemcheckpoint.o: ckmemcheckpoint.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ck.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h CkMemCheckpoint.def.h\n\nckmessagelogging.o: ckmessagelogging.C charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h ck.h charm++.h middle.h middle-conv.h cklists.h \\\n ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h ckmessagelogging.h ckobjid.h CentralLB.h BaseLB.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h\n\nckmulticast.o: ckmulticast.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h register.h spanningTree.h \\\n XArraySectionReducer.h CkMulticast.def.h\n\nckobjQ.o: ckobjQ.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h\n\nckobjid.o: ckobjid.C charm.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h ck.h charm++.h \\\n middle.h middle-conv.h cklists.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h qd.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h ckobjid.h\n\nckrdma.o: ckrdma.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h\n\nckreduction.o: ckreduction.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ck.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h CkReduction.def.h\n\nckset.o: ckset.C elements.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h lbdb.h charm.h pup.h \\\n middle.h middle-conv.h ckset.h cklists.h\n\ncktaskQ.o: cktaskQ.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h\n\ncktiming.o: cktiming.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h cktiming.h\n\ncldb.o: cldb.c queueing.h conv-config.h conv-autoconfig.h conv-common.h \\\n conv-mach.h conv-mach-opt.h cldb.h converse.h cmiqueue.h pup_c.h \\\n lrtslock.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h\n\ncmipool.o: cmipool.c cmipool.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h\n\ncmitls.o: cmitls.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h cmitls.h\n\ncommitid.o: commitid.c\n\ncontrolPoints.o: controlPoints.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h controlPoints.h conv-config.h \\\n ControlPoints.decl.h charm++.h envelope.h sdag.h charm-api.h \\\n LBDatabase.h arrayRedistributor.h pathHistory.h cp_effects.h ck.h qd.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h ckarray.h \\\n trace-controlPoints.h trace.h register.h trace-common.h \\\n trace-projections.h ckhashtable.h pup.h pathHistory.h cp_effects.h \\\n ControlPoints.def.h\n\nconv-ccs.o: conv-ccs.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckhashtable.h pup.h\n\nconv-conds.o: conv-conds.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h\n\nconv-counter.o: conv-counter.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h\n\nconv-interoperate.o: conv-interoperate.C converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h\n\nconv-lists.o: conv-lists.C conv-lists.h cklists.h pup.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-trace.h persistent.h \\\n conv-rdma.h debug-conv.h\n\nconvcore.o: convcore.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h sockRoutines.h \\\n conv-ccs.h ccs-server.h ckhashtable.h pup.h memory-isomalloc.h \\\n quiescence.h cmibacktrace.c\n\nconverseProjections.o: converseProjections.C converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h converseEvents.h traceCoreAPI.h converseProjections.h \\\n traceCoreCommon.h\n\ncp_effects.o: cp_effects.C cp_effects.h charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ck.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h ckarray.h\n\ncpm.o: cpm.c queueing.h conv-config.h conv-autoconfig.h conv-common.h \\\n conv-mach.h conv-mach-opt.h converse.h conv-config.h cmiqueue.h pup_c.h \\\n lrtslock.h queueing.h conv-cpm.h converse.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h\n\ncpthreads.o: cpthreads.c cpthreads.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h converse.h conv-cpath.h \\\n conv-qd.h conv-random.h conv-lists.h conv-trace.h persistent.h \\\n conv-rdma.h debug-conv.h\n\ncpuaffinity.o: cpuaffinity.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h sockRoutines.h\n\ncputopology.o: cputopology.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h sockRoutines.h \\\n cklists.h pup.h\n\ncrc32.o: crc32.c crc32.h\n\ncustom_partitioner.o: custom_partitioner.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h\n\ndebug-charm.o: debug-charm.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h ckhashtable.h pup.h \\\n conv-ccs.h sockRoutines.h ccs-server.h debug-charm.h debug-conv++.h \\\n cklists.h charm.h middle.h middle-conv.h register.h ck.h charm++.h \\\n ckbitvector.h ckstream.h init.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h ckrdmawrapper.h ckrdma.h \\\n ckobjQ.h ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h qd.h \\\n stats.h ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h\n\ndebug-conv++.o: debug-conv++.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h debug-conv++.h pup.h \\\n cklists.h\n\ndebug-conv.o: debug-conv.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckhashtable.h pup.h\n\ndebug-message.o: debug-message.C ck.h charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h sdag.h pup_stl.h conv-config.h \\\n envelope.h debug-charm.h ckarrayindex.h objid.h cksection.h ckcallback.h \\\n conv-ccs.h sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h qd.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h envelope.h \\\n queueing.h\n\nedgelist.o: edgelist.c graphdefs.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h\n\nfutures.o: futures.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h\n\ngenerate.o: generate.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h graphdefs.h\n\nglobal-nop.o: global-nop.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h\n\ngraph.o: graph.c converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h graph.h\n\nhilbert.o: hilbert.C hilbert.h\n\ninit.o: init.C ckcheckpoint.h pup.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h ckcallback.h cksection.h charm.h pup.h ckarrayindex.h \\\n ckhashtable.h objid.h conv-ccs.h sockRoutines.h ccs-server.h ckmessage.h \\\n CkCheckpointStatus.decl.h charm++.h charm.h middle.h conv-config.h \\\n middle-conv.h converse.h pup.h cklists.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h cksection.h \\\n ckcallback.h ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h \\\n CkReduction.decl.h ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h \\\n ckarray.h cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h \\\n LBComm.h LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h \\\n BaseLB.decl.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckevacuation.h trace.h conv-trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h conv-ccs.h \\\n CkCallback.decl.h ck.h qd.h register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h \\\n CkCheckpoint.decl.h\n\nisomalloc.o: isomalloc.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h memory-isomalloc.h \\\n mempool.h\n\nlbdb.o: lbdb.C converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h converse.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h lbdb.h converse.h \\\n charm.h pup.h middle.h conv-config.h middle-conv.h LBObj.h LBOM.h \\\n LBDatabase.h LBDBManager.h cklists.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h conv-trace.h \\\n trace-bluegene.h pathHistory.h PathHistory.decl.h ckcallback-ccs.h \\\n CkCallback.decl.h NullLB.decl.h BaseLB.decl.h\n\nlbdbf.o: lbdbf.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h charm-api.h\n\nlz4.o: lz4.c lz4.h\n\nmachineProjections.o: machineProjections.C converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h machineEvents.h machineProjections.h traceCoreAPI.h \\\n traceCoreCommon.h\n\nmain.o: main.C ck.h charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h\n\nmanager.o: manager.C manager.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h\n\nmem-arena.o: mem-arena.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h mem-arena.h\n\nmemory-darwin-clang.o: memory-darwin-clang.C\n\nmemoryaffinity.o: memoryaffinity.c converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h sockRoutines.h\n\nmempool.o: mempool.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h mempool.h\n\nmiddle-ccs.o: middle-ccs.C middle.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h middle-conv.h converse.h \\\n cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h \\\n conv-qd.h conv-random.h conv-lists.h conv-trace.h persistent.h \\\n conv-rdma.h debug-conv.h ccs-server.h sockRoutines.h conv-ccs.h \\\n ckhashtable.h pup.h\n\nmodifyScheduler.o: modifyScheduler.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h\n\nmpi-interoperate.o: mpi-interoperate.C mpi-interoperate.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h ck.h charm++.h charm.h pup.h \\\n middle.h middle-conv.h cklists.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h qd.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h\n\nmpi-mainmodule.o: mpi-mainmodule.C mpi_main.decl.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h mpi-interoperate.h ck.h qd.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h mpi_main.def.h\n\nmsgalloc.o: msgalloc.C ck.h charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h\n\nmsgmgr.o: msgmgr.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h converse.h conv-cpath.h conv-qd.h conv-random.h \\\n conv-lists.h conv-trace.h persistent.h conv-rdma.h debug-conv.h\n\npartitioning_strategies.o: partitioning_strategies.C \\\n partitioning_strategies.h hilbert.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h \\\n ../include/conv-config.h ../include/conv-autoconfig.h \\\n ../include/conv-common.h ../include/conv-mach.h \\\n ../include/conv-mach-opt.h ../include/cmiqueue.h ../include/pup_c.h \\\n ../include/lrtslock.h ../include/queueing.h ../include/conv-cpm.h \\\n ../include/conv-cpath.h ../include/conv-qd.h ../include/conv-random.h \\\n ../include/conv-lists.h ../include/conv-trace.h ../include/persistent.h \\\n ../include/conv-rdma.h ../include/debug-conv.h converse.h\n\npathHistory.o: pathHistory.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h charm++.h envelope.h charm.h \\\n middle.h cklists.h objid.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n PathHistory.decl.h LBDatabase.h pathHistory.h register.h \\\n trace-projections.h trace.h trace-common.h ckhashtable.h pup.h \\\n PathHistory.def.h\n\npersist-comm.o: persist-comm.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h\n\npicsautoperf.o: picsautoperf.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h picsdefs.h \\\n picsdefscpp.h TraceAutoPerf.decl.h picsautoperf.h picstreenode.h \\\n picsdecisiontree.h picsautoperfAPI.h register.h trace-common.h \\\n trace-projections.h trace-perf.h TraceAutoPerf.def.h\n\npicsautoperfAPI.o: picsautoperfAPI.C picsdefs.h picsdefscpp.h \\\n picsautoperf.h picstreenode.h charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h picsdecisiontree.h picsautoperfAPI.h \\\n register.h trace-common.h TraceAutoPerf.decl.h trace-projections.h \\\n picsautoperfAPIC.h\n\npicsdecisiontree.o: picsdecisiontree.C picsdefs.h picsdecisiontree.h \\\n picstreenode.h charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h picsdefscpp.h\n\npicstreenode.o: picstreenode.C picstreenode.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h picsdefs.h picsdefscpp.h register.h\n\npup_c.o: pup_c.C pup.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup_toNetwork.h \\\n charm-api.h ccs-builtins.h\n\npup_cmialloc.o: pup_cmialloc.C pup_cmialloc.h pup.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h\n\npup_paged.o: pup_paged.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup_paged.h pup.h\n\npup_toNetwork.o: pup_toNetwork.C converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h pup_toNetwork.h\n\npup_toNetwork4.o: pup_toNetwork4.C converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h pup_toNetwork4.h\n\npup_util.o: pup_util.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h ckhashtable.h\n\npup_xlater.o: pup_xlater.C pup.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h\n\nqd.o: qd.C ck.h charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h\n\nqueueing.o: queueing.C queueing.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h converse.h conv-config.h \\\n cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h converse.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h\n\nquiescence.o: quiescence.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h quiescence.h\n\nrandom.o: random.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h\n\nregister.o: register.C ck.h charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h\n\nsdag.o: sdag.C sdag.h pup.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup_stl.h \\\n conv-config.h pup.h envelope.h pup.h charm.h converse.h middle.h \\\n conv-config.h middle-conv.h cklists.h objid.h charm.h debug-charm.h \\\n debug-conv++.h cklists.h\n\nset_partition_params.o: set_partition_params.c\n\nshared_alloc.o: shared_alloc.C shared-alloc.h\n\nsockRoutines.o: sockRoutines.c sockRoutines.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h converse.h \\\n cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h \\\n conv-qd.h conv-random.h conv-lists.h conv-trace.h persistent.h \\\n conv-rdma.h debug-conv.h\n\nspanningTree.o: spanningTree.C spanningTree.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h\n\ntm_bucket.o: tm_bucket.c tm_tree.h tm_bucket.h tm_timings.h\n\ntm_mapping.o: tm_mapping.c tm_mapping.h tm_tree.h tm_timings.h\n\ntm_timings.o: tm_timings.c tm_timings.h\n\ntm_tree.o: tm_tree.c tm_tree.h tm_timings.h tm_bucket.h\n\ntopology.o: topology.C cklists.h pup.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h topology.h\n\ntrace-all.o: trace-all.C\n\ntrace-bluegene.o: trace-bluegene.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-common.h blue.h blue-conv.h \\\n blue_impl.h ckliststring.h blue_types.h bigsim_timing.h bigsim_logs.h \\\n blue_defs.h bigsim_network.h\n\ntrace-common.o: trace-common.C charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckliststring.h \\\n trace.h trace-bluegene.h trace-common.h allEvents.h charmEvents.h \\\n charmProjections.h traceCoreAPI.h converseEvents.h converseProjections.h \\\n machineEvents.h machineProjections.h traceCore.h threadEvents.h \\\n traceCoreCommon.h register.h\n\ntrace-controlPoints.o: trace-controlPoints.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-controlPoints.h register.h \\\n trace-common.h trace-controlPointsBOC.h TraceControlPoints.decl.h \\\n TraceControlPoints.def.h\n\ntrace-converse.o: trace-converse.c conv-trace.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h persistent.h conv-rdma.h debug-conv.h\n\ntrace-counter.o: trace-counter.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h\n\ntrace-memory.o: trace-memory.C trace-memory.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-common.h\n\ntrace-perf.o: trace-perf.C trace-perf.h charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h trace-common.h \\\n picsdefs.h picsdefscpp.h picsautoperf.h picstreenode.h \\\n picsdecisiontree.h picsautoperfAPI.h register.h TraceAutoPerf.decl.h \\\n trace-projections.h\n\ntrace-projections.o: trace-projections.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-projections.h trace-common.h \\\n trace-projectionsBOC.h register.h TraceProjections.decl.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h TraceProjections.def.h\n\ntrace-projector.o: trace-projector.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-projector.h ck.h qd.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h allEvents.h \\\n charmEvents.h charmProjections.h traceCoreAPI.h converseEvents.h \\\n converseProjections.h machineEvents.h machineProjections.h traceCore.h \\\n threadEvents.h traceCoreCommon.h trace-common.h trace-projections.h\n\ntrace-simple.o: trace-simple.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-simple.h register.h \\\n trace-common.h trace-simpleBOC.h TraceSimple.decl.h TraceSimple.def.h\n\ntrace-summary.o: trace-summary.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-summary.h register.h \\\n trace-common.h trace-summaryBOC.h TraceSummary.decl.h TraceSummary.def.h\n\ntrace-utilization.o: trace-utilization.C trace-utilization.h charm++.h \\\n charm.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h register.h trace-common.h \\\n TraceUtilization.decl.h TraceUtilization.def.h\n\ntraceCore.o: traceCore.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h traceCore.h \\\n traceCoreCommon.h converseEvents.h traceCoreAPI.h converseProjections.h \\\n charmEvents.h charmProjections.h machineEvents.h machineProjections.h\n\ntraceCoreCommon.o: traceCoreCommon.C traceCore.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h traceCoreAPI.h traceCoreCommon.h charmProjections.h\n\ntracec.o: tracec.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-common.h tracec.h\n\ntracef.o: tracef.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h charm++.h envelope.h charm.h \\\n middle.h cklists.h objid.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n charm-api.h\n\nwaitqd.o: waitqd.C waitqd.h charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h middle.h middle-conv.h cklists.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n waitqd.decl.h waitqd.def.h\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/src/scripts/configure.in": "\nAC_INIT(./Makefile)\n\nAC_CONFIG_HEADER(conv-autoconfig.h)\n\nAC_CONFIG_COMMANDS([config-cleanup],\n                   [sed -i -e 's:^#define\\s\\+PACKAGE://&:' conv-autoconfig.h])\n\n#clean up conv-mach-opt.sh\nsed -e '/Option added by configure/d' ../include/conv-mach-opt.sh  | sed -e '/^$/d' > conv-mach-opt.sh.clean\ncp -f conv-mach-opt.sh.clean   ../include/conv-mach-opt.sh\nrm -f conv-mach-opt.sh.clean\n\nCHARMINC=\".\"\nCHARMBIN=\"../bin\"\ntest -r ./conv-config.sh && . ./conv-config.sh\n\n# Decimal representation of Charm++ release line and API revision\n# Increment the last 2 digits when making an API change\n# Increase the first three after branching for a release\nVERSION=60800\necho $VERSION > ../include/VERSION\nAC_DEFINE_UNQUOTED([CHARM_VERSION], $VERSION, [Charm++ Release/API version number])\n\ncharmout=\"charmconfig.out\"\n/bin/rm -rf $charmout\nMAKEFILE_EXT=Make.extlib\n\nEcho() {\n\techo $* \n\techo $* >> $charmout\n}\n\n# add into conv-mach-opt.sh\n# add_flag $1 $2\n# $2 is description\nadd_flag() {\n        key=`echo $1 | cut -d'=' -f1`\n        last=`grep \"$key=\" ../include/conv-mach-opt.sh 2>/dev/null | tail -1 | sed -e 's/ *#.*$//'`\n        skip=0\n\tif test -n \"$last\" -a  \"$last\" = \"$1\" \n\tthen\n\t  skip=1\n        fi\n\tif test $skip = 0\n        then\n\t  cat >> ../include/conv-mach-opt.sh << EOT\n\n$1   # Option added by configure script's $2 section\nEOT\n\tfi\n}\n\n# remove_flag $1\nremove_flag() {\n     sed -e '/^'\"$1\"'=/d' ../include/conv-mach-opt.sh > tmp.$$\n     cp tmp.$$ ../include/conv-mach-opt.sh\n     /bin/rm -f tmp.$$\n}\n\nadd_flag \"OPTS_CC='$OPTS_CC'\"   'Pass through user-provided C compiler options'\nadd_flag \"OPTS_CXX='$OPTS_CXX'\" 'Pass through user-provided C++ compiler options'\n\n# enable/disable error checking\nAC_ARG_ENABLE([error-checking],\n            [AS_HELP_STRING([--enable-error-checking],\n              [enable error checking])], ,\n            [enable_error_checking=yes])\n\nif test \"$enable_error_checking\" = \"no\"\nthen\n  Echo \"Error checking is disabled\" \n  AC_DEFINE_UNQUOTED(CMK_ERROR_CHECKING, 0, [disable error checking])\n  add_flag 'OPTS_CC=\"$OPTS_CC -U_FORTIFY_SOURCE\"' 'error checking'\n  add_flag 'OPTS_CXX=\"$OPTS_CXX -U_FORTIFY_SOURCE\"' 'error checking'\nelse\n  Echo \"Error checking is enabled\" \n  AC_DEFINE_UNQUOTED(CMK_ERROR_CHECKING, 1, [enable error checking])\nfi\n\n# enable/disable AMPI error checking\nAC_ARG_ENABLE([ampi-error-checking],\n            [AS_HELP_STRING([--enable-ampi-error-checking],\n              [enable AMPI error checking])], ,\n            [enable_ampi_error_checking=yes])\n\nif test \"$enable_ampi_error_checking\" = \"no\"\nthen\n  Echo \"AMPI error checking is disabled\"\n  AC_DEFINE_UNQUOTED(AMPI_ERROR_CHECKING, 0, [disable ampi error checking])\nelse\n  Echo \"AMPI error checking is enabled\"\n  AC_DEFINE_UNQUOTED(AMPI_ERROR_CHECKING, 1, [enable ampi error checking])\nfi\n\n# enable/disable statistics collection\nAC_ARG_ENABLE([stats],\n            [AS_HELP_STRING([--enable-stats],\n              [enable statistics collection])], ,\n            [enable_stats=yes])\n\nif test \"$enable_stats\" = \"no\"\nthen\n  Echo \"Statistics collection is disabled\" \n  AC_DEFINE_UNQUOTED(CMK_WITH_STATS, 0, [disable statistics collection])\nelse\n  Echo \"Statistics collection is enabled\" \n  AC_DEFINE_UNQUOTED(CMK_WITH_STATS, 1, [enable statistics collection])\nfi\n\n# check enable/disable\nAC_ARG_ENABLE([tracing],\n            [AS_HELP_STRING([--enable-tracing],\n              [enable tracing modules])], ,\n            [enable_tracing=yes])\n\nif test \"$enable_tracing\" = \"no\"\nthen\n  Echo \"Charm tracing is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_TRACE_ENABLED, 0, [disable tracing])\n  add_flag CMK_TRACE_ENABLED=0\nelse\n  Echo \"Charm tracing is enabled\"\n  AC_DEFINE_UNQUOTED(CMK_TRACE_ENABLED, 1, [enable tracing])\n  add_flag CMK_TRACE_ENABLED=1\nfi\n\nAC_ARG_ENABLE([tracing-commthread],\n            [AS_HELP_STRING([--enable-tracing-commthread],\n              [enable tracing communication thread])], ,\n            [enable_tracing_commthread=no])\n\nif test \"$enable_tracing_commthread\" = \"yes\"\nthen\n  Echo \"Charm tracing communication thread is enabled\"\n  AC_DEFINE_UNQUOTED(CMK_SMP_TRACE_COMMTHREAD, 1, [enable tracing comm thread])\nelse\n  Echo \"Charm tracing communication thread is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_SMP_TRACE_COMMTHREAD, 0, [disable tracing comm thread])\nfi\n\n\nAC_ARG_ENABLE([charmdebug],\n            [AS_HELP_STRING([--enable-charmdebug],\n              [enable charmDebug])], ,\n            [enable_charmdebug=yes])\n\nif test \"$enable_charmdebug\" = \"no\"\nthen\n  Echo \"CharmDebug is disabled\" \n  AC_DEFINE_UNQUOTED(CMK_CHARMDEBUG, 0, [disable charmdebug])\n  add_flag CMK_CHARMDEBUG=0\nelse\n  Echo \"CharmDebug is enabled\" \n  AC_DEFINE_UNQUOTED(CMK_CHARMDEBUG, 1, [enable charmdebug])\n  add_flag CMK_CHARMDEBUG=1\nfi\n\nAC_ARG_ENABLE([replay],\n            [AS_HELP_STRING([--enable-replay],\n              [enable record/replay])],\n            [enable_replay=$enableval],\n            [enable_replay=yes])\n\nif test \"$enable_replay\" = \"no\"\nthen\n  Echo \"Charm record/replay is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_REPLAYSYSTEM, 0, [disable replay])\nelse\n  Echo \"Charm record/replay is enabled\"\nfi\n\nAC_ARG_ENABLE([ccs],\n            [AS_HELP_STRING([--enable-ccs],\n              [enable CCS])], ,\n            [enable_ccs=yes])\n\nif test \"$enable_ccs\" = \"no\"\nthen\n  Echo \"CCS is disabled\" \n  AC_DEFINE_UNQUOTED(CMK_CCS_AVAILABLE, 0, [disable ccs])\nelse\n  Echo \"CCS is enabled\" \n  AC_DEFINE_UNQUOTED(CMK_CCS_AVAILABLE, 1, [enable ccs])\nfi\n\nAC_ARG_ENABLE([controlpoint],\n            [AS_HELP_STRING([--enable-controlpoint],\n              [enable control point])],\n            [enable_controlpoint=$enableval],\n            [enable_controlpoint=yes])\n\nif test \"$enable_controlpoint\" = \"yes\"\nthen\n  Echo \"Charm control point is enabled\"\n  AC_DEFINE_UNQUOTED(CMK_WITH_CONTROLPOINT, 1, [enable controlpoint])\nelse\n  Echo \"Charm control point is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_WITH_CONTROLPOINT, 0, [disable controlpoint])\nfi\n\nAC_ARG_ENABLE([lbuserdata],\n            [AS_HELP_STRING([--enable-lbuserdata],\n              [enable LB user data])],\n            [enable_lbuserdata=$enableval],\n            [enable_lbuserdata=no])\n\nif test \"$enable_lbuserdata\" = \"yes\"\nthen\n  Echo \"Charm LB user data is enabled\"\n  AC_DEFINE_UNQUOTED(CMK_LB_USER_DATA, 1, [enable lb user data])\nelse\n  Echo \"Charm LB user data  is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_LB_USER_DATA, 0, [disable lb user data])\nfi\n\nAC_ARG_ENABLE([shrinkexpand],\n            [AS_HELP_STRING([--enable-shrinkexpand],\n              [enable malleable jobs / shrink expand])],\n            [enable_shrinkexpand=$enableval],\n            [enable_shrinkexpand=no])\n\nif test \"$enable_shrinkexpand\" = \"yes\"\nthen\n  if test \"$enable_ccs\" = \"no\"\n  then\n    Echo \"CCS cannot be disabled when enabling shrink-expand\"\n    test_finish 1\n  else\n    Echo \"Charm shrink expand is enabled - Controlpoint is disabled.\"\n    AC_DEFINE_UNQUOTED(CMK_SHRINK_EXPAND, 1, [enable shrinkexpand])\n    AC_DEFINE_UNQUOTED(CMK_WITH_CONTROLPOINT, 0, [disable controlpoint])\n  fi\nelse\n  Echo \"Charm shrink expand is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_SHRINK_EXPAND, 0, [disable shrinkexpand])\nfi\n\nAC_ARG_WITH([numa],\n            [AS_HELP_STRING([--with-numa],\n              [support memory affinity with NUMA])],\n            [],\n            [with_numa=no])\n\nWITH_NUMA=no\nif test \"$with_numa\" = \"yes\"\nthen\n  Echo \"Charm NUMA support is builtin\"\n  WITH_NUMA=yes\nfi\n\nAC_ARG_WITH([lbtime-type],\n            [AS_HELP_STRING([--with-lbtime-type=type],\n                            [load balancing timer type])],\n            [], [with_lbtime_type=double])\n\nif test \"$with_lbtime_type\" = \"float\" -o \"$with_lbtime_type\" = \"double\"\nthen\n  Echo \"Setting load balancing timer type as '$with_lbtime_type'\"\n  AC_DEFINE_UNQUOTED(CMK_LBTIME_TYPE, $with_lbtime_type, [Setting load balancing timer type])\nelse\n  Echo \"Invalid type specified for load balancing timer type\"\n  test_finish 1\nfi\n\nAC_ARG_WITH([qlogic],\n            [AS_HELP_STRING([--with-qlogic],\n              [QLogic based Infiniband])],[with_qlogic=yes],\n            [with_qlogic=no])\n\nif test \"$with_qlogic\" = \"no\"\nthen\n  AC_DEFINE_UNQUOTED(QLOGIC, 0, [disable qlogic])\nelse\n  Echo \"QLogic based Infiniband\"\n  AC_DEFINE_UNQUOTED(QLOGIC, 1, [enable qlogic])\nfi\n\n#\nAC_MSG_CHECKING(machine name)\nversion=`pwd | awk -F/ '{print $(NF-1)}'`\nbase_version=`cat .vdir`\nAC_DEFINE_UNQUOTED(CMK_MACHINE_NAME, \"$version\",[machine name])\nAC_MSG_RESULT($version)\nAC_SUBST(base_version)\n\nt=\"test.cpp\"\ntc=\"test.c\"\n\n# test result passed in $1\n# If the test suceeded, print $3 and set \"pass\"/clear \"fail\"\n# If the test failed, print $2 and clear \"pass\"/set \"fail\"\ntest_result() {\n\tif test $1 -eq 0\n\tthen\n                AC_MSG_RESULT(\"$3\")\n\t\tpass=\"1\"\n\t\tfail=\"0\"\n\telse\n                AC_MSG_RESULT(\"$4\")\n\t\tpass=\"0\"\n\t\tfail=\"1\"\n# For debugging the configure script, just \"export autoconf_debug=1\"\n#  to get this verbose data on any failed tests:\n\t\tif test ! -z \"$autoconf_debug\"\n\t\tthen\n\t\t\techo \"------- test script for $2 failed:\"\n\t\t\tcat out\n\t\t\techo \"------- the test program was:\"\n\t\t\tcat $t\n\t\t\techo \"-------\"\n\t\tfi\n\tfi\n}\n\n# Test: tries to compile C file $t (described by $1).\n#  If successful, prints $2 and sets $pass/clears $fail\n#  If failure, prints $3 and sets $pass/clears $fail\n#  additional arguments to c++ compiler are passed as $4\ntest_cc() {\n        AC_MSG_CHECKING(\"$1\")\n\techo \"### $1\" >> $charmout\n\tcat $tc >> $charmout\n\techo $CMK_CC -I../include -I. $CMK_LIBDIR $CMK_INCDIR $CMK_SYSINC $OPTS_CC $OPTS_LD -c $tc -o test.o $4 >> $charmout\n\t$CMK_CC -I../include -I. $CMK_LIBDIR $CMK_INCDIR $CMK_SYSINC $OPTS_CC $OPTS_LD -c $tc -o test.o $4 > out 2>&1\n\ttest_result $? \"$1\" \"$2\" \"$3\"\n \tstrictpass=$pass\n\tstrictfail=$fail\n        if test $pass -eq 1\n\tthen \n          if grep -i \"warn\" out > /dev/null 2>&1 || grep -i \"(W)\" out > /dev/null 2>&1\n\t  then \n\t    strictpass=\"0\" && strictfail=\"1\"\n          fi\n        fi\n\tcat out >> $charmout\n\t/bin/rm -f out\n}\n\n# Test: tries to compile C++ file $t (described by $1).\n#  If successful, prints $2 and sets $pass/clears $fail\n#  If failure, prints $3 and sets $pass/clears $fail\n#  additional arguments to c++ compiler are passed as $4\ntest_cxx() {\n        AC_MSG_CHECKING(\"$1\")\n\techo \"### $1\" >> $charmout\n\tcat $t >> $charmout\n\techo $CMK_CXX -I../include -I. $CMK_LIBDIR $CMK_INCDIR $CMK_SYSINC $OPTS_CXX $OPTS_LD -c $t -o test.o $4 >> $charmout\n\t$CMK_CXX -I../include -I. $CMK_LIBDIR $CMK_INCDIR $CMK_SYSINC $OPTS_CXX $OPTS_LD -c $t -o test.o $4 > out 2>&1\n\ttest_result $? \"$1\" \"$2\" \"$3\"\n \tstrictpass=$pass\n\tstrictfail=$fail\n        if test $pass -eq 1\n\tthen \n          if grep -i \"warn\" out > /dev/null 2>&1 || grep -i \"(W)\" out > /dev/null 2>&1\n\t  then \n\t    strictpass=\"0\" && strictfail=\"1\"\n          fi\n        fi\n\tcat out >> $charmout\n\t/bin/rm -f out\n}\n\n# Testlink: tries to compile and link a C++ file $t (described by $1).\n#  If successful, prints $2 and sets $pass/clears $fail\n#  If failure, prints $3 and sets $pass/clears $fail\n#  additional arguments to c++ compiler are passed as $4\ntest_link() {\n        AC_MSG_CHECKING(\"$1\")\n\techo \"### $1\" >> $charmout\n\tcat $t >> $charmout\n\techo $CMK_CXX -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CXX -c $t -o test.o $4 >> $charmout\n\t$CMK_CXX -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CXX -c $t -o test.o $4 > out 2>&1\n        if test $? -ne 0\n        then\n          test_result 1 \"$1\" \"$2\" \"$3\"\n        else\n          echo $CMK_LDXX -o testlink test.o $CMK_LIBDIR $OPTS_LD $CMK_SYSLIBS $4 >> $charmout\n          $CMK_LDXX -o testlink test.o $CMK_LIBDIR $OPTS_LD $CMK_SYSLIBS $4 >> out 2>&1\n          ret=$?\n\t  test ! -x testlink && ret=1\n          test_result $ret \"$1\" \"$2\" \"$3\"\n        fi\n \tstrictpass=$pass\n\tstrictfail=$fail\n        if test $pass -eq 1\n\tthen \n \t  if cat out | grep -i \"warn\" > /dev/null 2>&1\n\t  then \n\t    strictpass=\"0\" && strictfail=\"1\"\n          fi\n        fi\n\tcat out >> $charmout\n\t/bin/rm -f out\n}\n\n# Testlinkc: tries to compile and link a C file $t (described by $1).\n#  If successful, prints $2 and sets $pass/clears $fail\n#  If failure, prints $3 and sets $pass/clears $fail\n#  additional arguments to c++ compiler are passed as $4\ntest_linkc() {\n        AC_MSG_CHECKING(\"$1\")\n\techo \"### $1\" >> $charmout\n\tcat $tc >> $charmout\n\techo $CMK_CC -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CC -c $tc -o test.o $4 >> $charmout\n\t$CMK_CC -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CC -c $tc -o test.o $4 > out 2>&1\n        if test $? -ne 0\n        then\n          test_result 1 \"$1\" \"$2\" \"$3\"\n        else\n          echo $CMK_LD -o testlink test.o $CMK_LIBDIR $OPTS_LD $CMK_SYSLIBS $4 >> $charmout\n          $CMK_LD -o testlink test.o $CMK_LIBDIR $OPTS_LD $CMK_SYSLIBS $4 >> out 2>&1\n          test_result $? \"$1\" \"$2\" \"$3\"\n        fi\n \tstrictpass=$pass\n\tstrictfail=$fail\n        if test $pass -eq 1\n\tthen \n \t  if cat out | grep -i \"warn\" > /dev/null 2>&1\n\t  then \n\t    strictpass=\"0\" && strictfail=\"1\"\n          fi\n        fi\n\tcat out >> $charmout\n\t/bin/rm -f out\n}\n\n# test_linkso $1 $2 $3 $4, where\n# $1: debug msg\n# $2: yes msg\n# $3: no msg\n# $4: extra link option\ntest_linkso() {\n        AC_MSG_CHECKING(\"$1\")\n\techo $1 >> $charmout\n\tcat $t >> $charmout\n\techo $CMK_CXX -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CXX $CMK_PIC -c $t -o test.o $4 >> $charmout\n\t$CMK_CXX -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CXX -c $CMK_PIC $t -o test.o $4 > out 2>&1\n        if test $? = 1\n        then\n          test_result 1 \"$1\" \"$2\" \"$3\"\n        else\n\t  echo $CMK_LD -I../include -I. $CMK_LIBDIR $OPTS_LD $CMK_LD_SHARED $CMK_SYSLIBS test.o -o testlink.$CMK_SHARED_SUF $4 >> $charmout\n\t  $CMK_LD -I../include -I. $CMK_LIBDIR $OPTS_LD $CMK_LD_SHARED $CMK_SYSLIBS test.o -o testlink.$CMK_SHARED_SUF $4 > out 2>&1\n\t  test_result $? \"$1\" \"$2\" \"$3\"\n\tfi\n\tcat out >> $charmout\n\t/bin/rm -f out testlink.$CMK_SHARED_SUF\n}\n\ntest_finish() {\n\trm -f $t $tc testlink test.o\t> /dev/null 2>&1\n\t/bin/rm -f out\n\ttest $1 -eq 1 && echo \"*** Please find detailed output in charmconfig.out ***\"\n\texit $1\n}\n\n# detect certain architectures\nif cat /proc/cpuinfo 2>/dev/null | grep 'POWER7'  > /dev/null\nthen\n  AC_DEFINE_UNQUOTED(CMK_POWER7, 1, [whether is power7])\nfi\n\n# detect OS\nOSNAME=`uname -s`\nif test $OSNAME = \"Linux\"\nthen\n  AC_DEFINE_UNQUOTED(CMK_OS_IS_LINUX, 1, [OS is Linux])\nelse\n  AC_DEFINE_UNQUOTED(CMK_OS_IS_LINUX, 0, [OS is Linux])\nfi\n\n# test cp -p\nAC_MSG_CHECKING(\"cp command as\")\nCP=\"cp -p\"\ntouch test_file\nif ! $CP test_file test_file.cp 2>err\nthen\n  CP=\"cp\"\nfi\nrm -f test_file test_file.cp\nAC_MSG_RESULT($CP)\nadd_flag CP=\\\"\"$CP\"\\\" \"cp command\"\n \n\ncat > $t <<EOT\n#include <stdio.h>\nvoid foo(void) {\n\tprintf(\"Hello, world!\\n\");\n}\nEOT\n\nif test \"$CMK_BUILD_CRAY\" = \"1\"\nthen\n#echo \"Test for known incompatible compiler versions\"\n\n if test \"$CRAY_CC_VERSION\" = \"8.1.4\"\n then\n\techo \"CCE 8.1.4 produces incorrect Charm++ code\"\n\techo \"Please use a newer version of the CCE compiler\"\n\techo \"e.g. module load cce/8.1.7\"\n\ttest_finish 1\n fi\nfi\n\n#echo \"set C++ compiler as: $CMK_CXX $OPTS_CXX $OPTS\"\nAC_MSG_CHECKING(\"C++ compiler as\")\nAC_MSG_RESULT(\"$CMK_CXX $OPTS_CXX\")\ntest_cxx \"whether C++ compiler works\" \"ok\" \"no\" \"\"\nif test $fail -eq 1\nthen\n\techo \"Cannot compile C++ programs with $CMK_CXX\"\n\techo \" (check your charm++ version)\"\n\ttest_finish 1\nfi\n\ncat > $t <<EOT\n#include <stdio.h>\nint main() {\n\tprintf(\"Hello, world!\\n\");\n\treturn 0;\n}\nEOT\n#echo \"set C++ linker as: $CMK_LDXX $OPTS_LDXX\"\nAC_MSG_CHECKING(\"C++ linker as\")\nAC_MSG_RESULT(\"$CMK_LDXX $OPTS_LDXX\")\ntest_link \"whether linker works\" \"ok\" \"no\" \"\"\nif test $fail -eq 1\nthen\n\techo \"Cannot link C++ programs with $CMK_LDXX\"\n\techo \" (check your charm++ version)\"\n\ttest_finish 1\nfi\n\nAC_MSG_CHECKING(\"Native C++ compiler as\")\nAC_MSG_RESULT(\"$CMK_NATIVE_CXX\")\nAC_MSG_CHECKING(\"Sequential C++ compiler as\")\nAC_MSG_RESULT(\"$CMK_SEQ_CXX\")\n\nif test \"$base_version\" = \"net-linux\" \nthen\n  test_link \"whether linker accept --allow-multiple-definition\" \"ok\" \"no\" \"-Wl,--allow-multiple-definition\"\n  if test $pass -eq 1\n  then\n        remove_flag CMK_LDXX\n\tadd_flag CMK_LDXX='\"$CMK_LDXX -Wl,--allow-multiple-definition\"' \"net-linux linker\"\n  fi\nfi\n\nif echo \"$CMK_CC\" | grep -E \"gcc|clang|icc\" > /dev/null 2> /dev/null\nthen\n  test_link \"whether compiler accept -fno-stack-protector\" \"ok\" \"no\" \"-fno-stack-protector\"\n  if test $strictpass -eq 1\n  then\n\tadd_flag OPTS_CC='\"$OPTS_CC -fno-stack-protector\"' \"stack-protection disabling\"\n\tadd_flag OPTS_CXX='\"$OPTS_CXX -fno-stack-protector\"' \"stack-protection disabling\"\n  fi\nfi\n\n#### check if C++ compiler will accept C++11 features without warning ####\n# C++11 features in use:\n# early variadic templates\n# R-value and move semantics\n# auto\ncat > $t <<EOT\n// Check for Intel compiler incompatibility with the active g++/libstdc++ by\n// including an arbitrary standard library header (cf bug #1560)\n#include <map>\n\n// Check for an excessively old g++/libstdc++ that can't handle features we use\n#if !CMK_USING_XLC\n#include <memory>\nstd::unique_ptr<int> i;\n#endif\n\nclass CkMigrateMessage;\n\nstruct base {\n  base(void) { }\n  base(CkMigrateMessage *) { }\n};\n\ntemplate <class Parent>\nstruct CBaseT1 : Parent {\n\n  CBaseT1(void) :Parent()  { }\n  CBaseT1(CkMigrateMessage *m) :Parent(m) { }\n  CBaseT1(CBaseT1&& rhs) :Parent() { }\n\n  template <typename... Args>\n    CBaseT1(Args... args) : Parent(args...) { }\n};\n\ntemplate struct CBaseT1<base>;\nEOT\ngot_cpp11=\"\"\ntest_cxx \"whether C++ compiler supports C++11 without flags\" \"yes\" \"no\" \"\"\nif test $strictpass -eq 1\nthen\n  got_cpp11=\"true\"\nelse\n# Flags for g++/clang++/icc(icpc), xlC++, pgCC, and CrayCC respectively\nfor i in \"-std=c++0x\" \"-qlanglvl=extended0x\" \"--c++11\" \"-h std=c++11\"; do\n    test_cxx \"whether C++ compiler supports C++11 with '$i'\" \"yes\" \"no\" \"$i\"\n    if test $strictpass -eq 1\n    then\n      add_flag \"$(echo OPTS_CXX=\\\"\\$OPTS_CXX $i\\\")\" \"Enable C++11 support\"\n      OPTS_CXX=\"$OPTS_CXX $i\"\n      got_cpp11=\"true\"\n      break\n    fi\ndone\nfi\n\nif test -z $got_cpp11\nthen\n  echo \"Charm++ requires some C++11 support, but doesn't know the flag to enable it\"\n  echo\n  echo \"For Intel's compiler please see\"\n  echo \"https://charm.cs.illinois.edu/redmine/issues/1560\"\n  echo \"about making a suitable version of gcc/g++/libstdc++ available\"\n  test_finish 1\nfi\n\n# Workaround for bug #1045 appearing in GCC >6.x\ntest_cxx \"whether C++ compiler accepts -fno-lifetime-dse\" \"yes\" \"no\" \"-fno-lifetime-dse\"\nif test $strictpass -eq 1\nthen\n    add_flag \"$(echo OPTS_CXX=\\\"\\$OPTS_CXX -fno-lifetime-dse\\\")\" \"Disable 'Lifetime DSE' optimization to work around bug #1045 in GCC >6.x\"\n    OPTS_CXX=\"$OPTS_CXX -fno-lifetime-dse\"\nfi\n\n# Figure out if the user has asked to enable the latest language standards\nUSER_ASKED_FOR_NEW_STD=`echo \"$BUILDOPTS\" | grep \"-use-new-std\" | wc -l`\n\n# If the user has asked for the newer standards, check if the compilers know about them\nif test $USER_ASKED_FOR_NEW_STD -ge 1\nthen\n\n#### check if c compiler supports c11 compilation flags ####\ncat > $tc <<EOT\n#include <stdio.h>\n\nint foo()\n{\n  return 0;\n}\nEOT\ntest_cc \"whether c compiler knows of the c11 standard\" \"ok\" \"no\" \"$CMK_ENABLE_C11\"\nAC_DEFINE_UNQUOTED(CMK_COMPILER_KNOWS_C11, $pass, [whether c compiler knows of the c11 standard] )\nif test $pass -eq 1\nthen\n        # Record results for charmc's future use\n        add_flag 'CMK_COMPILER_KNOWS_C11=\"1\"' \"c11\"\n        # For the rest of configure, append this to compilation flags\n        OPTS_CC=\"$CMK_ENABLE_C11 $OPTS_CC\"\nfi\n\n#### check if C++ compiler supports cpp11 compilation flags ####\ncat > $t <<EOT\n#include <iostream>\n\nint foo()\n{\n  return 0;\n}\nEOT\ntest_cxx \"whether c++ compiler knows of the cpp11 standard\" \"ok\" \"no\" \"$CMK_ENABLE_CPP11\"\nAC_DEFINE_UNQUOTED(CMK_COMPILER_KNOWS_CPP11, $pass, [whether c++ compiler knows of the cpp11 standard] )\nif test $pass -eq 1\nthen\n        # Record results for charmc's future use\n        add_flag 'CMK_COMPILER_KNOWS_CPP11=\"1\"' \"cpp11\"\n        # For the rest of configure, append this to compilation flags\n        OPTS_CXX=\"$CMK_ENABLE_CPP11 $OPTS_CXX\"\nfi\n\nfi # endif USER_ASKED_FOR_NEW_STD\n\n\n# Perform the tests\n\nAC_ARG_WITH([refnum-type],\n            [AS_HELP_STRING([--with-refnum-type=type],\n                            [size of the envelope refnum field])],\n            [], [with_refnum_type=no])\n\nif test \"$with_refnum_type\" = \"no\" -o \"$with_refnum_type\" = \"short\"\nthen\n  Echo \"Setting charm++ envelope refnum field to unsigned short\"\n  AC_DEFINE_UNQUOTED(CMK_REFNUM_TYPE, unsigned short, [envelope refnum field set to UShort])\nelif test \"$with_refnum_type\" = \"int\"\nthen\n  Echo \"Setting charm++ envelope refnum field to unsigned int\"\n  AC_DEFINE_UNQUOTED(CMK_REFNUM_TYPE, unsigned int, [envelope refnum field set to UInt])\nelse\n  Echo \"Invalid size specified for refnum field\"\n  test_finish 1\nfi\n\n\nAC_ARG_WITH([prio-type],\n            [AS_HELP_STRING([--with-prio-type=type],\n                            [size of expected message priorities])],\n            [], [with_prio_type=bitvec])\n\nif test \"$with_prio_type\" = \"char\" -o \"$with_prio_type\" = \"short\" -o \"$with_prio_type\" = \"int\" -o \"$with_prio_type\" = \"long\" -o \"$with_prio_type\" = \"float\" -o \"$with_prio_type\" = \"double\"\nthen\n  Echo \"Configuring support for message priorities of sizeof type $with_prio_type\"\n  AC_DEFINE_UNQUOTED(CMK_USE_STL_MSGQ, 1, [whether charm scheduler should use an STL-based msg q])\n  AC_DEFINE_UNQUOTED(CMK_MSG_PRIO_TYPE, $with_prio_type, [expected message priorities are sizeof $with_prio_type])\nelif test \"$with_prio_type\" = \"bitvec\"\nthen\n  Echo \"Configuring support for message priorities of arbitrary size (bitvectors)\"\n  AC_DEFINE_UNQUOTED(CMK_USE_STL_MSGQ, 0, [whether charm scheduler should use an STL-based msg q])\n  AC_DEFINE_UNQUOTED(CMK_MSG_PRIO_TYPE, $with_prio_type, [expected message priorities are arbitrarily sized])\nelse\n  Echo \"Invalid size ($with_prio_type) specified for message priorities. Can only accept char, short, int, long, float, double and bitvec\"\n  test_finish 1\nfi\n\n# enable/disable randomized scheduler queue\nAC_ARG_ENABLE([randomized-msgq],\n            [AS_HELP_STRING([--enable-randomized-msgq],\n              [enable a randomized msg queue (for debugging etc)])], ,\n            [enable_randomized_msgq=no])\n\nif test \"$enable_randomized_msgq\" = \"yes\" -a \"$with_prio_type\" != \"bitvec\"\nthen\n  Echo \"The charm message queue will be randomized (and will not respect priorities)\"\n  AC_DEFINE_UNQUOTED(CMK_RANDOMIZED_MSGQ, 1, [enable the randomized msgq in the scheduler])\nelse\n  AC_DEFINE_UNQUOTED(CMK_RANDOMIZED_MSGQ, 0, [disable the randomized msgq in the scheduler])\n  if test \"$enable_randomized_msgq\" = \"yes\"\n  then\n    Echo 'A randomized message queue is only available when --with-prio-type != bitvec.'\n    Echo \"Specify prio-type to be a data type long enough to hold the message priorities in your application\"\n    Echo \"for example: --with-prio-type=int (or short / long etc).\"\n    test_finish 1\n  fi\nfi\n\n#### Check if compiler if 64 bit ####\ncat > $t <<EOT\n#include <stdio.h>\n\nint foo()\n{\nint x[[(int)(sizeof(void *) - 7)]]={0};\nreturn x[[0]];\n}\nEOT\ntest_cxx \"whether compiler generates code for 64-bit\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_SIZET_64BIT, $strictpass, [whether size_t 64bit])\nin64bit=$strictpass\n\n### Check if compiler supports std::is_constructible<> ###\ncat > $t <<EOT\n#include <type_traits>\n\nstruct s {\n       s(int a) { }\n};\n\nbool foo()\n{\n  return std::is_constructible<s, int>::value;\n}\nEOT\ntest_cxx \"whether compiler supports std::is_constructible\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_IS_CONSTRUCTIBLE, $strictpass, [whether compiler supports std::is_constructible])\n\n### Check if compiler supports std::alignment_of<> ###\ncat > $t <<EOT\n#include <type_traits>\n\nint foo()\n{\n  return std::alignment_of<int>::value;\n}\nEOT\ntest_cxx \"whether compiler supports std::alignment_of\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_ALIGNMENT_OF, $strictpass, [whether compiler supports std::alignment_of])\n\n\n#### test if has values.h ####\ncat > $t <<EOT\n#include <values.h>\nint main() { \n  double d = MAXDOUBLE;\n  return 0;\n}\nEOT\ntest_cxx \"whether has values.h \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_VALUES_H, $pass, [whether has values.h])\n\n#### test if has stdint.h ####\ncat > $t <<EOT\n#include <stdint.h>\nint main() { \n  return 0;\n}\nEOT\ntest_cxx \"whether has stdint.h \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_STDINT_H, $pass, [whether has stdint.h])\n\n#### test if has malloc.h ####\ncat > $t <<EOT\n#include <malloc.h>\nint main() { \n  return 0;\n}\nEOT\ntest_cxx \"whether has malloc.h \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_MALLOC_H, $pass, [whether has malloc.h])\n\n#### test if has alloca.h ####\ncat > $t <<EOT\n#include <alloca.h>\nint main() {\n  double *s=(double *)alloca(sizeof(double));\n  *s=1.0;\n  return 0;\n}\nEOT\ntest_cxx \"whether has alloca.h \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_ALLOCA_H, $pass, [whether has alloca.h])\n\n#### test if has regex.h ####\ncat > $t <<EOT\n#include <regex.h>\nint main() {\n  regex_t re;\n  regcomp(&re, \".*MOD.*\", REG_EXTENDED|REG_NOSUB);\n  return 0;\n}\nEOT\ntest_cxx \"whether has regex.h \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_REGEX_H, $pass, [whether has regex.h])\n\n#### Check long long ####\ncat > $t <<EOT\n#include <stdlib.h>\nlong long foo(void) { return 17; }\nEOT\ntest_cxx \"whether long long works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_LONG_LONG_DEFINED, $pass, [whether long long works])\n\n#### Check __int64 ####\ncat > $t <<EOT\n#include <stdlib.h>\n__int64 foo(void) { return 17; }\nEOT\ntest_cxx \"whether __int64 works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED([CMK___int64_DEFINED], $pass, [whether __int64 works])\n\n#### Check __int128 ####\ncat > $t <<EOT\n#include <stdlib.h>\nint foo(void) {\n  __int128   a;\n  int x[[(int)(sizeof(__int128) - 15)]]={0};\n  return x[[0]];\n}\nEOT\ntest_cxx \"whether __int128 (128-bit integer) works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED([CMK___int128_DEFINED], $pass, [whether __int128 works])\nif test $pass -eq 1\nthen\n  add_flag CMK_HAS_INT16=1\nfi\n\n#### Check __int128_t ####\ncat > $t <<EOT\n#include <stdlib.h>\nint foo(void) {\n  __int128_t   a;\n  __uint128_t   b;\n  a = a + a;\n  int x[[(int)(sizeof(__int128_t) - 15)]]={0};\n  return x[[0]];\n}\nEOT\ntest_cxx \"whether __int128_t (128-bit integer) works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED([CMK___int128_t_DEFINED], $pass, [whether __int128_t works])\nif test $pass -eq 1\nthen\n  add_flag CMK_HAS_INT16=1\nfi\n\n### Check if we have C++11 <atomic> ###\ncat > $t <<EOT\n#include <atomic>\nint main(int argc, char** argv) { \n  return 0;\n}\nEOT\ntest_cxx \"whether C++ library has <atomic> \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_CXX11_ATOMIC, $pass, [whether C++ library has <atomic>])\n\nif test $pass -ne 1\nthen\n### Check if we have pre-C++11 <cstdatomic> ###\ncat > $t <<EOT\n#include <cstdatomic>\nint main(int argc, char** argv) { \n  return 0;\n}\nEOT\ntest_cxx \"whether C++ library has <cstdatomic> \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_CXX0X_CSTDATOMIC, $pass, [whether C++ library has <cstdatomic>])\nfi\n\nif test $pass -ne 1 -a -z \"$CMK_USING_BGXLC\"\nthen\n\techo \"Charm++ requires C++11 atomic support\"\n\ttest_finish 1\nfi\n\n#### Check long double ####\ncat > $t <<EOT\n#include <stdlib.h>\nlong double foo(void) { return 17.0; }\nEOT\ntest_cxx \"whether long double works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_LONG_DOUBLE_DEFINED, $strictpass, [whether long double works])\n\n#### Check ucontext and FPU pointer ####\ncat > $t <<EOT\n#include <ucontext.h>\nstruct _libc_fpstate   fpstate;\nfpregset_t *fp;\nEOT\ntest_cxx \"whether ucontext has FPU pointer\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_CONTEXT_FPU_POINTER, $pass, [whether ucontext has pointer])\n\nif test $pass -eq 1\nthen\ncat > $t <<EOT\n#include <ucontext.h>\n\nint main()\n{\n  ucontext_t context;\n  context.uc_mcontext.uc_regs = 0;\n}\nEOT\ntest_cxx \"whether ucontext uses uc_regs\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_CONTEXT_FPU_POINTER_UCREGS, $pass, [whether ucontext uses uc_regs union])\nfi\n\ncat > $t <<EOT\n#include <ucontext.h>\nvrregset_t *v_regs;\nucontext_t  uc;\n\nvoid foo()\n{\n  vrregset_t *ptr = uc.uc_mcontext.v_regs;\n}\nEOT\ntest_cxx \"whether ucontext has pointer (v_regs) of vector type\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_CONTEXT_V_REGS, $pass, [whether ucontext has pointer (v_regs) of vector type])\n\n#### Check ucontext and FPU pointer ####\ncat > $t <<EOT\n#include <infiniband/verbs.h>\nvoid test()\n{\n    struct ibv_context    *context;\n    int ibPort;\n    struct ibv_port_attr attr;\n    if (ibv_query_port(context, ibPort, &attr) != 0) return;\n    if (attr.link_layer == IBV_LINK_LAYER_INFINIBAND)  return;\n}\nEOT\ntest_cxx \"whether ibverbs ibv_port_attr has link_layer field\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_IBV_PORT_ATTR_HAS_LINK_LAYER, $pass, [whether ibv_port_attr has link_layer field])\n\n\n###################### C++ Compiler Features #####################\n\n#### check C inline ####\ncat > $tc <<EOT\ninline static int foo()\n{\n  return 1;\n}\nEOT\ntest_cc \"whether inline works in C\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_C_INLINE, $strictpass, [whether C inline works in C])\n\n#### check if signed char is same as char ####\ncat > $t <<EOT\n#include <stdlib.h>\nclass er {\n protected:\n   void operator()(char &v,const char *desc=NULL) {};\n   void operator()(signed char &v,const char *desc=NULL) {};\n};\nEOT\ntest_cxx \"whether C++ signed char and char differ\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_SIGNEDCHAR_DIFF_CHAR, $pass, [whether C++ signed char and char differ])\n\n### check if varsize array on stack ####\ncat > $t <<EOT\n#include <stdio.h>\nvoid foo()\n{\n  int size=10;\n  char arr[size];\n}\n\nEOT\ntest_cxx \"whether C++ allows declaration of varsize array\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_DECLARE_VARSIZE_ARRAY, $pass, [whether C++ allows declaration of variable sized array])\n\n#### check if typeinfo exists and works #####\ncat > $t <<EOT\n#include <typeinfo>\nconst char *foo(void) {\n\tint x;\n\treturn typeid(x).name();\n}\nEOT\ntest_cxx \"whether typeinfo/typeid works\" \"ok\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_TYPEINFO, $pass, [whether typeinfo/typeid works])\n\n#### check if iterator_traits is defined #####\ncat > $t <<EOT\n#include <iterator>\n\ntemplate <typename T> // T models Input Iterator\ntypename std::iterator_traits<T>::value_type accumulate(T first, T last)\n{\n      typename std::iterator_traits<T>::value_type result = 0;\n      while(first != last)\n            result += *first++;\n      return result;\n}\nEOT\ntest_cxx \"whether std::iterator_traits is defined\" \"ok\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_ITERATOR_TRAITS, $pass, [whether iterator_traits works])\n\n#### check if std::distance is defined #####\ncat > $t <<EOT\n#include <vector>\n#include <iterator>\n\nint foo()\n{\n  std::vector<int> tree;\n  return std::distance(tree.begin(), tree.end());\n}\nEOT\ntest_cxx \"whether std::distance is defined\" \"ok\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_STD_DISTANCE, $pass, [whether std::distance works])\n\n#### check if std::inserter is defined #####\ncat > $t <<EOT\n#include <list>\n#include <iterator>\n\nvoid foo()\n{\n  using namespace std;\n  list<int> L;\n  inserter ( L, L.end ( ) ) = 500;\n}\nEOT\ntest_cxx \"whether std::inserter is defined\" \"ok\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_STD_INSERTER, $pass, [whether std::inserter works])\n\n\n####### Check support for features added by the new C11 and CPP11 standards ########\n\n#### check if std::unordered_map is defined #####\ncat > $t <<EOT\n#include <unordered_map>\n\nint foo()\n{\n  std::unordered_map<int,int> myhashtbl;\n  myhashtbl[[0]] = 42;\n  myhashtbl[[1234]] = 0;\n  return myhashtbl[[1234]];\n}\nEOT\ntest_cxx \"whether std::unordered_map is defined\" \"ok\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_STD_UNORDERED_MAP, $pass, [whether std::unordered_map works])\n\n\n#### check if anon structs are permitted #####\ncat > $t <<EOT\n#include <iostream>\nusing std::cout;\n\nstruct idx\n{\n    const static int dims = 3;\n    union\n    {\n        int data[[dims]];\n        struct { int x, y, z; };\n    };\n\n    idx(const int i=0, const int j=0, const int k=0): x(i), y(j), z(k) {}\n};\n\nint main()\n{\n    cout<<\"Hello World!\\n\";\n    idx myidx(1, 2, 3);\n    cout<< \"idx = (\"\n        << myidx.data[[0]] << \",\"\n        << myidx.data[[1]] << \",\"\n        << myidx.z << \")\\n\";\n    return (myidx.data[[0]] == 1 && myidx.y == 2 && myidx.data[[2]] == 3);\n}\nEOT\ntest_cxx \"whether anon structs are permitted\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_ANON_STRUCTS, $pass, [whether anon structs are permitted])\n\n\n#### test if we can have multiple delete like this ####\ncat > $t <<EOT\nclass foo {\npublic:\n  void operator delete(void*p){};\n  void operator delete(void*p,int*){};\n};\nEOT\ntest_cxx \"whether operator delete can be overloaded in same class\" \"ok\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_MULTIPLE_DELETE, $strictpass, [whether operator delete can be overloaded in same class])\n\n#### test if offsetof exists ####\ncat > $t <<EOT\n#include <stddef.h>\n\nstruct FooType {\n        int f1;\n        int f2;\n        double f3;\n};\n\nvoid foo()\n{\n  int off = offsetof(FooType, f2);\n}\nEOT\ntest_cxx \"whether offsetof is defined\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_OFFSETOF, $pass, [whether offsetof exists])\n\n#### test if we can use gcc x86 assembly like this ####\ncat > $t <<EOT\ndouble foo(void)\n{\n  unsigned long long int v=0;\n  int *lo=0+(int *)&v;\n  int *hi=1+(int *)&v;\n  __asm__ __volatile__(\n      \"rdtsc; movl %%edx,%0; movl %%eax,%1\"\n      : /* output  */ \"=m\" (*hi), \"=m\" (*lo)\n      : /* input */\n      : /* trashes */ \"%edx\", \"%eax\"\n  );\n  return v;\n}\nEOT\ntest_cxx \"whether GCC x86 assembly works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_GCC_X86_ASM, $strictpass, [Allows gcc x86 assembly.])\n\n#### test if we can use gcc x86 assembly like this ####\nif test $strictpass = 1\nthen\ncat > $t <<EOT\nint foo(void)\n{\n  int x;\n  asm(\"lock incl %0\" :: \"m\" (x));\n  asm(\"lock decl %0\" :: \"m\" (x));\n  return x;\n}\nEOT\ntest_cxx \"whether GCC x86 assembly for atomic increment works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_GCC_X86_ASM_ATOMICINCREMENT, $strictpass, [Allows gcc x86 assembly for atomic increment.])\nfi\n\n#### test if we can use asm eieio assembly like this ####\ncat > $t <<EOT\ndouble foo(void)\n{\n        unsigned long long int x;\n\tasm volatile(\"eieio\" ::: \"memory\");\n        return x;\n}\nEOT\ntest_cxx \"whether asm eieio assembly works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_PPC_ASM, $strictpass, [Allows asm eieio assembly.])\n\n\n\n#### test if we can use __thread ####\ncat > $t <<EOT\n__thread unsigned long long int x;\nstatic __thread  int y;\nvoid foo(void)\n{\n\tx = 1;\n\ty = 1;\n}\nEOT\ntest_cxx \"whether __thread (Thread Local Storage) is supported\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_TLS_VARIABLES, $strictpass, [Allows __thread.])\n\n#### check __sync_add_and_fetch ####\ncat > $tc <<EOT\n#include <stdio.h>\nint main()\n{\n  int t=1;\n  __sync_add_and_fetch(&t, 1);\n  return 1;\n}\nEOT\ntest_linkc \"whether synchronization primitives (__sync_add_and_fetch) works in C\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_C_SYNC_ADD_AND_FETCH_PRIMITIVE, $pass, [whether sync_add_and_fetch primitive works in C])\n\n#### check __sync_synchronize ####\ncat > $tc <<EOT\n#include <stdio.h>\nint main()\n{\n  __sync_synchronize();\n}\nEOT\n\ntest_linkc \"whether synchronization primitives (__sync_synchronize) works in C\" \"yes\" \"no\" \"\"\n\nAC_DEFINE_UNQUOTED(CMK_C_SYNC_SYNCHRONIZE_PRIMITIVE, $pass, [whether sync_synchronize primitives works in C])\n\n\n### test if switching TLS register ###\nif test $in64bit = 1\nthen\ncat > $t <<EOT\n#include <elf.h>\n#include <stdlib.h>\n#include <malloc.h>\n\nvoid switchTLS() {\n  Elf64_Addr m1, m2;\n  asm volatile (\"movq %%fs:0x0, %0\\n\\t\"\n                \"movq %1, %%fs:0x0\\n\\t\"\n                : \"=r\"(m1)\n                : \"r\"(m2));\n}\nEOT\ntest_cxx \"whether switching TLS register (64-bit) is supported\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_TLS_SWITCHING64, $strictpass, [Allows switching TLS 64-bit.])\nelse\ncat > $t <<EOT\n#include <elf.h>\n#include <stdlib.h>\n#include <malloc.h>\n\nvoid switchTLS() {\n  Elf32_Addr m1, m2;\n  asm volatile (\"movl %%gs:0x0, %0\\n\\t\"\n                \"movl %1, %%gs:0x0\\n\\t\"\n                : \"=r\"(m1)\n                : \"r\"(m2));\n}\nEOT\ntest_cxx \"whether switching TLS register (32-bit) is supported\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_TLS_SWITCHING32, $strictpass, [Allows switching TLS in 32-bit.])\nfi\n\n#### test if we can build MPI ####\nif test \"$CMK_BUILD_MPI\" = 1\nthen\n\ncat > $tc <<EOT\n#include \"mpi.h\"\nint main(int argc, char **argv)\n{\n  MPI_Init(&argc, &argv);\n  return 0;\n}\nEOT\nmv -f ../include/mpi.h ../include/mpi.h.bak 2>/dev/null\ntest_cc \"whether build on MPI\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_BUILD_ON_MPI, $strictpass, [build MPI.])\nBUILD_MPI=$strictpass\n\nif test $BUILD_MPI -eq 0\nthen\n  echo \"Error: Can not compile a MPI program\"\n  test_finish 1\nfi\n\nif test $BUILD_MPI -eq 1 -a -z \"$BGP_FLOOR\"\nthen\n  test_linkc \"whether need to specify MPI library\" \"no\" \"yes\" \"\"\n  if test $pass -ne 1\n  then\n    if test -z \"$CMK_MPI_LIB\"\n    then\n      test_linkc \"whether -lmpich\" \"ok\" \"no\" \"-lmpich\"\n      if test $pass -eq 1\n      then\n        add_flag CMK_SYSLIBS='\"$CMK_SYSLIBS -lmpich\"' \"mpi lib\"\n      else\n        test_linkc \"whether -lmpi\" \"ok\" \"no\" \"-lmpi\"\n        if test $pass -eq 1\n        then\n                add_flag CMK_SYSLIBS='\"$CMK_SYSLIBS -lmpi\"' \"mpi lib\"\n        else\n                echo \"Error: can not find mpi library\"\n                test_finish 1\n        fi\n      fi\n    else\n      add_flag CMK_SYSLIBS='\"$CMK_SYSLIBS $CMK_MPI_LIB\"' \"mpi lib\"\n    fi\n  fi\nfi\n\nif test \"$BUILD_MPI\" = \"1\"\nthen\ncat > $t <<EOT\n#include \"mpi.h\"\nint main(int argc, char **argv)\n{\n  int thread_level, provided;\n  thread_level = MPI_THREAD_FUNNELED;\n  MPI_Init_thread(&argc, &argv, thread_level, &provided);\n}\nEOT\ntest_cxx \"whether MPI_Init_thread is supported\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_MPI_INIT_THREAD, $strictpass, [Allows MPI_Init_thread.])\nfi\nmv -f ../include/mpi.h.bak ../include/mpi.h 2>/dev/null\n\nfi\n\nif test \"$BUILD_MPI\" = \"1\"\nthen\n\ncat > $t <<EOT\n#include <stdio.h>\n#include <mpi.h>\n\nint main (int argc, char** argv) {\n  return 0;\n}\nEOT\ntest_cxx \"whether macro conflicts occurs due to C++ MPI bindings\" \"no\" \"yes\" \"\"\nAC_DEFINE_UNQUOTED(CMK_CXX_MPI_BINDINGS, $strictpass, [Disables conflicting macros.])\nfi\n\n\n################### Syscalls and Libraries ###################\n\n#### test for getrusage with RUSAGE_THREAD ###\ncat > $tc <<EOT\n#include <sys/time.h>\n#define __USE_GNU   1\n#include <sys/resource.h>\nint main() {\n  struct rusage usage;\n  getrusage(RUSAGE_THREAD, &usage);\n  return 0;\n}\nEOT\ntest_linkc \"whether getrusage accepts RUSAGE_THREAD\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_RUSAGE_THREAD, $pass, [whether getrusage accepts RUSAGE_THREAD])\n\n#### test for asctime ###\n\ncat > $tc <<EOT\n#include <time.h>\nint main() {\n  struct tm *local;\n  time_t t;\n  t = time(NULL);\n  local = localtime(&t);\n  asctime(local);\n  return 0;\n}\nEOT\ntest_linkc \"whether has asctime\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_ASCTIME, $pass, [whether has asctime])\n\n#### test for log2 ###\ncat > $t <<EOT\n#include <math.h>\nint main() {\n  int i = log2(10);\n  return 0;\n}\nEOT\ntest_link \"whether has log2\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_LOG2, $pass, [whether has log2])\n\n#### test for sqrtf ###\ncat > $t <<EOT\n#include <math.h>\nint main() {\n  float i = sqrtf((float)10.0);\n  return 0;\n}\nEOT\ntest_link \"whether has sqrtf\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SQRTF, $pass, [whether has sqrtf])\n\n#### test for fabsf ###\ncat > $t <<EOT\n#include <math.h>\nint main() {\n  float i = fabsf((float)10.0);\n  return 0;\n}\nEOT\ntest_link \"whether has fabsf\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_FABSF, $pass, [whether has fabsf])\n\n#### test for mkstemp ###\ncat > $t <<EOT\n#include <stdlib.h>\n#include <string.h>\nint main() {\n  char fname[[128]];\n  strcpy(fname, \"/tmp/fdXXX.XXX\");\n  mkstemp(fname);\n  return 0;\n}\nEOT\ntest_link \"whether has mkstemp\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_USE_MKSTEMP, $pass, [whether has mkstemp])\n\n#### test for system ###\ncat > $t <<EOT\n#include <stdlib.h>\nint main() {\n  system(\"/bin/ls\");\n  return 0;\n}\nEOT\ntest_link \"whether has system\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SYSTEM, $pass, [whether has system])\n\n#### test for sync() ###\ncat > $t <<EOT\n#include <unistd.h>\nint main() {\n  sync();\n  return 0;\n}\nEOT\ntest_link \"whether has sync()\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SYNC_FUNC, $pass, [whether has sync])\n\n#### test for fsync() ###\ncat > $t <<EOT\n#include <unistd.h>\nint main() {\n  fsync(0);\n  return 0;\n}\nEOT\ntest_link \"whether has fsync()\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_FSYNC_FUNC, $pass, [whether has fsync])\n\n#### test for fdatasync() ###\ncat > $t <<EOT\n#include <unistd.h>\nint main() {\n  fdatasync(0);\n  return 0;\n}\nEOT\ntest_link \"whether has fdatasync()\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_FDATASYNC_FUNC, $pass, [whether has fdatasync])\n\n#### test for sbrk ###\ncat > $t <<EOT\n#include <unistd.h>\nint main() {\n  void *ptr  = sbrk(0); \n}\nEOT\ntest_link \"whether has sbrk\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SBRK, $pass, [whether has sbrk])\n\n#### test for _setjmp/_longjmp ###\ncat > $t <<EOT\n#include <setjmp.h>\nint main() {\n  jmp_buf buf;\n  _setjmp(buf);\n  _longjmp(buf, 0);\n}\nEOT\ntest_link \"whether has _setjmp/_longjmp\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_UNDERSCORE_SETJMP, $pass, [whether has _setjmp/_longjmp])\n\n#### test for mstats ###\ncat > $t <<EOT\n#include <malloc.h>\nint main() {\n  struct mstats ms = mstats();\n}\nEOT\ntest_link \"whether has mstats\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_MSTATS, $pass, [whether has mstats])\n\n#### test for mallinfo ###\ncat > $t <<EOT\n#include <malloc.h>\nint main() {\n  struct mallinfo mi = mallinfo();\n}\nEOT\ntest_link \"whether has mallinfo\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_MALLINFO, $pass, [whether has mallinfo])\n\n#### test for popen ###\ncat > $t <<EOT\n#include <stdio.h>\nint main() {\n  FILE *p = popen(\"/bin/ps\", \"r\");\n  pclose(p);\n}\nEOT\ntest_link \"whether has popen\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_POPEN, $pass, [whether has popen])\n\n#### test for poll ###\ncat > $t <<EOT\n#include <poll.h>\nvoid foo(void) { \n  struct pollfd pos[[3]];\n  poll(pos, 1, 1);\n}\nEOT\ntest_cxx \"whether has poll\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_USE_POLL, $pass, [whether the poll syscall exists])\n\n#### check if getpagesize exists ####\ncat > $tc <<EOT\n#include <unistd.h>\n\nint main(int argc, char **argv) {\n    int s = getpagesize();\n}\nEOT\ntest_linkc \"whether has getpagesize\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_GETPAGESIZE, $pass, [whether getpagesize exists])\n\n#### check if getpid exists ####\ncat > $tc <<EOT\n#include <sys/types.h>\n#include <unistd.h>\n\nint main(int argc, char **argv) {\n    pid_t pid = getpid();\n}\nEOT\ntest_linkc \"whether has getpid\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_GETPID, $pass, [whether getpid exists])\n\n#### check if kill exists ####\ncat > $tc <<EOT\n#include <sys/types.h>\n#include <unistd.h>\n#include <signal.h>\n\nint main(int argc, char**argv) \n{\n    pid_t pid = getpid();\n    kill(pid, 9);\n}\nEOT\ntest_linkc \"whether has kill\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_KILL, $pass, [whether kill exists])\n\n#### test for setpriority ###\ncat > $t <<EOT\n#include <sys/time.h>\n#include <sys/resource.h>\nvoid foo(void) { \n  setpriority(PRIO_PROCESS, 0, 0);\n}\nEOT\ntest_cxx \"whether has setpriority\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SETPRIORITY, $pass, [whether the setpriority exists])\n\n#### test for system ###\ncat > $t <<EOT\n#include \"ckdll_system.C\"\nEOT\ntest_cxx \"whether to use signal-safe system() \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_SIGSAFE_SYSTEM, $pass, [whether to use signal-safe system()])\n\n### test sched_setaffinity ####\ncat > $tc <<EOT\n#define _GNU_SOURCE\n#include <sched.h>\n\nint main()\n{\n  cpu_set_t cpuset;\n  CPU_ZERO(&cpuset);\n  CPU_SET(0, &cpuset);\n  if (sched_setaffinity(0, sizeof(cpuset), &cpuset) < 0) {\n    return -1;\n  }\n  return 0;\n}\nEOT\ntest_linkc \"whether sched_setaffinity call exists\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SETAFFINITY, $pass, [whether the sched_setaffinity() exists])\n\n### test pthread_setaffinity_np ####\ncat > $tc <<EOT\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <pthread.h>\n\nint main()\n{\n  unsigned long mask = 0xffffffff;\n  unsigned int len = sizeof(mask);\n\n  if (pthread_setaffinity_np(pthread_self(), len, &mask) < 0) {\n    return -1;\n  }\n  return 0;\n}\nEOT\ntest_linkc \"whether pthread_setaffinity_np call exists\" \"yes\" \"no\" \"-lpthread\"\nAC_DEFINE_UNQUOTED(CMK_HAS_PTHREAD_SETAFFINITY, $pass, [whether the pthread_setaffinity_np() exists])\n\n### test pthread_spin_lock ####\ncat > $tc <<EOT\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <pthread.h>\n\nint main()\n{\n  pthread_spinlock_t  lock;\n\n  pthread_spin_init(&lock, 0);\n\n  pthread_spin_lock(&lock);\n\n  return 0;\n}\nEOT\ntest_linkc \"whether pthread_spin_lock exists\" \"yes\" \"no\" \"-lpthread\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SPINLOCK, $pass, [whether the pthread_spin_lock exists])\n\n### check libnuma on Linux ####\nif test \"$WITH_NUMA\" = \"yes\"\nthen\ncat > $tc <<EOT\n#include <stdlib.h>\n#include <stdio.h>\n#include <linux/mempolicy.h>\n#include <numaif.h>\n#include <numa.h>\n\nint main()\n{\n  if (get_mempolicy(NULL, NULL, 0, 0, 0) == 0) return 0;\n  return -1;\n}\nEOT\ntest_linkc \"whether libnuma exists\" \"yes\" \"no\" \"-lnuma\"\nAC_DEFINE_UNQUOTED(CMK_HAS_NUMACTRL, $pass, [whether NUMA control related functions exist])\nif test $pass -eq 1\nthen\n        add_flag 'CMK_SYSLIBS=\"$CMK_SYSLIBS -lnuma\"' \"libnuma\"\nfi\nfi\n\n#### check bindprocessors on AIX ####\ncat > $tc <<EOT\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n\n#include <sys/processor.h>\n\nint main()\n{\n  int retValue = 0;\n  int pid;\n  pid = getpid();\n  if (bindprocessor(BINDPROCESS, pid, 0) == -1) return -1;\n  return 0;\n}\nEOT\ntest_linkc \"whether bindprocessor call exists\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_BINDPROCESSOR, $pass, [whether the bindprocessor()\nexists])\n\n\n#### check if dlopen works ####\nskip_dl=0\n# for bproc, ignore -ldl\ntest -n \"$CMK_BPROC\" && skip_dl=1\ntest -n \"$CMK_NO_DL\" && skip_dl=1\ndl_opt='-ldl'\n#workaround for pgcc 4.0, -ldl crash linking, so use -Wl,-ldl to skip the prelinker.\ncase \"$CMK_CXX\" in\npgCC*) dl_opt='-Wl,-ldl' ;;\nesac\n\nif test $skip_dl -eq 0 \nthen\n\ncat > $t <<EOT\n#include \"ckdll_dlopen.C\"\nint main() {\n\tCkDll dll(\"foo.so\");\n\treturn 0;\n}\nEOT\ntest_link \"whether dlopen links without $dl_opt\" \"yes\" \"no\" \"\"\nnoldl=$pass\ntest_link \"whether dlopen links with $dl_opt\" \"yes\" \"no\" \"$dl_opt\"\nif test $pass -eq 1\nthen \n#dlopen requires -ldl: add it to our link line\n\tadd_flag CMK_LIBS='\"$CMK_LIBS '$dl_opt'\"' \"dlopen\"\nfi\n\nif test $pass -eq 1 -o $noldl -eq 1\nthen\n# One version or another of dlopen worked: compile it in\n\tAC_DEFINE_UNQUOTED(CMK_DLL_USE_DLOPEN, 1, [dlopen])\nfi\n\n### test gethostname ####\ncat > $tc <<EOT\n#ifdef WIN32\n#include <Winsock2.h>\n#else\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#endif\n\nint main()\n{\n  char hostname[[1000]];\n  gethostname(hostname, 999);\n  return 0;\n}\nEOT\ntest_linkc \"whether gethostname call exists\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_GETHOSTNAME, $pass, [whether gethostname() exists])\n\n#### check if getProcAddress works ####\ncat > $t <<EOT\n#include \"ckdll_win32.C\"\nEOT\ntest_cxx \"whether getProcAddress works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_DLL_USE_WIN32, $pass, [whether getProcAddress works])\n\nfi    # end of skip_dl\n\n#### check if socklen_t exists ####\ncat > $t <<EOT\n#include <sys/types.h>\n#include <sys/socket.h>\n\nvoid foo(void) {\n\tint i;\n\tsocklen_t s=sizeof(i);\n}\nEOT\ntest_cxx \"whether has socklen_t\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SOCKLEN, $pass, [whether has socklen_t])\n\n### test getifaddrs ####\ncat > $tc <<EOT\n#include <netinet/in.h> /* for sockaddr_in */\n#include <ifaddrs.h> /* for getifaddrs */\n#include <net/if.h> /* for IFF_RUNNING */\n\nint main()\n{\n  struct ifaddrs *interfaces=0;\n  if( getifaddrs(&interfaces) == 0 ) {\n        struct ifaddrs *interface;\n        for( interface=interfaces; interface; interface=interface->ifa_next ) {\n            if( (interface->ifa_flags & IFF_UP) && ! (interface->ifa_flags & IFF_LOOPBACK) ) {\n                const struct sockaddr_in *addr = (const struct sockaddr_in*)interface->ifa_addr;\n                if( addr && addr->sin_family==AF_INET ) {\n                    break;\n                }\n            }\n        }\n        freeifaddrs(interfaces);\n  }\n}\nEOT\ntest_linkc \"whether getifaddrs call exists\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_GETIFADDRS, $pass, [whether getifaddrs() exists])\n\n#### check if mmap exists ####\ncat > $t <<EOT\n#include <sys/types.h>\n#include <sys/mman.h>\n\nvoid *foo(void *a,int l,int fd) {\n\treturn mmap((caddr_t)a,l,PROT_READ+PROT_WRITE,\n                 MAP_FIXED+MAP_PRIVATE,fd,0);\n}\nEOT\ntest_cxx \"whether the mmap() syscall exists\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_MMAP, $pass, [whether the mmap() syscall exists])\n\n#### check if mmap accepts MAP_ANON ####\ncat > $t <<EOT\n#include <sys/types.h>\n#include <sys/mman.h>\n\nvoid *foo(void *a,int l) {\n\treturn mmap((caddr_t)a,l,PROT_READ+PROT_WRITE,\n                MAP_FIXED+MAP_PRIVATE+MAP_ANON,-1,0);\n}\nEOT\ntest_cxx \"whether mmap() accepts MAP_ANON\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_MMAP_ANON, $pass, [whether mmap() accepts MAP_ANON])\n\n#### check if mmap accepts MAP_NORESERVE ####\ncat > $t <<EOT\n#include <sys/types.h>\n#include <sys/mman.h>\n\nvoid *foo(void *a,int l) {\n\treturn mmap((caddr_t)a,l,PROT_READ+PROT_WRITE,\n                MAP_FIXED+MAP_PRIVATE+MAP_NORESERVE,-1,0);\n}\nEOT\ntest_cxx \"whether mmap() accepts MAP_NORESERVE\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_MMAP_NORESERVE, $pass, [whether mmap() accepts MAP_NORESERVE])\n\n#### check if get_myaddress exists ####\ncat > $t <<EOT\n#include <rpc/rpc.h>\n\nvoid foo(void *a) {\n    get_myaddress((struct sockaddr_in*)a);\n}\nEOT\ntest_cxx \"whether has get_myaddress\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_GET_MYADDRESS, $pass, [whether has get_myaddress])\n\n#### check if mprotect exists ####\ncat > $t <<EOT\n#include <stdio.h>\n#include <sys/mman.h>\n\nvoid foo(void *a,int l,int fd) {\n     void *pg = NULL;\n     size_t pagesize = 4096;\n     mprotect(pg, pagesize, PROT_READ | PROT_WRITE);\n}\nEOT\ntest_cxx \"whether has mprotect\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_MPROTECT, $pass, [whether has mprotect])\n\n#### check if glibc backtrace exists ####\ncat > $t <<EOT\n#include \"cmibacktrace.c\"\n\nint main() {\n\tint nLevels=1;\n\tvoid *stack;\n\tCmiBacktraceRecord(&stack,0,&nLevels);\n\treturn 0;\n}\nEOT\nTRACE_LINK_FLAG=\"-rdynamic\"\ntest_link \"whether glibc backtrace works\" \"yes\" \"no\" \"-DCMK_USE_BACKTRACE=1 $TRACE_LINK_FLAG\"\nAC_DEFINE_UNQUOTED(CMK_USE_BACKTRACE, $pass, [whether glibc backtrace works])\n\nif test $strictpass -eq 1\nthen \n\tadd_flag 'CMK_LD=\"$CMK_LD '$TRACE_LINK_FLAG'\"' \"backtrace\"\n\tadd_flag 'CMK_LDXX=\"$CMK_LDXX '$TRACE_LINK_FLAG'\"' \"backtrace\"\nfi\n\n#### test sleep ####\ncat > $t <<EOT\n#include <unistd.h>\nint main() {\n  sleep(1);\n  return 0;\n}\nEOT\ntest_cxx \"whether has sleep \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SLEEP, $pass, [whether has sleep])\n\n#### test usleep ####\ncat > $t <<EOT\n#include <unistd.h>\nint main() {\n  usleep(100);\n  return 0;\n}\nEOT\ntest_cxx \"whether has usleep \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_USLEEP, $pass, [whether has usleep])\n\n#### test personality() and ADDR_NO_RANDOMIZE ####\n# Only works on modern Linux systems\ncat > $t <<EOT\n#include <sys/personality.h>\nint main() {\n    int orig_persona = personality(0xffffffff);\n    personality(orig_persona | ADDR_NO_RANDOMIZE);\n    return 0;\n}\nEOT\ntest_cxx \"whether personality() and ADDR_NO_RANDOMIZE exist\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_ADDR_NO_RANDOMIZE, $pass, [whether personality() and ADDR_NO_RANDOMIZE exist])\n\n\n#### test if has zlib ####\n# bproc doesnot like -lz in any case\nif test -z \"$CMK_BPROC\"\nthen\n\ncat > $t <<EOT\n#include <zlib.h>\nint main() { \n  gzFile f = gzopen(\"/tmp/x\",\"r\");\n  gzprintf(f, \"test...\\n\");\n  gzclose(f);\n  return 0;\n}\nEOT\ntest_link \"whether has zlib\" \"yes\" \"no\" \"-lz\"\nAC_DEFINE_UNQUOTED(CMK_PROJECTIONS_USE_ZLIB, $pass, [whether has zlib])\nif test $pass -eq 1\nthen \n\tadd_flag 'CMK_LIBZ=\"-lz\"' \"zlib\"\nfi\n\nfi\n\n#### test if has elf.h ####\ncat > $t <<EOT\n#include <elf.h>\ntypedef Elf32_Addr ELF_TYPE_Addr;\nint main() { \n}\nEOT\ntest_cxx \"whether has elf.h \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED([CMK_HAS_ELF_H], $pass, [whether has elf.h])\n\n#### test if has Multiprocessing.h for apple ####\ncat > $t <<EOT\n#include <Carbon/Carbon.h>\n#include <Multiprocessing.h>\nint main() {\n  int a = MPProcessorsScheduled();\n}\nEOT\ntest_cxx \"whether has Multiprocessing.h for Apple \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED([CMK_HAS_MULTIPROCESSING_H], $pass, [whether has Multiprocessing.h])\n\n#### test if \"ntohl\" is available ####\ncat > $t <<EOT\n#if defined(_WIN32) || defined(__MINGW_H)\n#include <winsock.h>\n#else\n#include <stdint.h>\n#include <arpa/inet.h>\n#include <netinet/in.h>\n#endif\n\nint main() {\n  int i = 100;\n  i = ntohl(i);\n  return 0;\n}\nEOT\ntest_link \"whether ntohl is available\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_NTOHL, $pass, [whether ntohl is available])\n\n### test for libjpeg ####\ncat > $t <<EOT\n#include <stdio.h>\n#include <stdlib.h>\n#include \"jpeglib.h\"\n\nint main()\n{\n  struct jpeg_compress_struct cinfo;\n  jpeg_create_compress(&cinfo);\n  return 0;\n}\nEOT\ntest_link \"whether has libjpeg\" \"yes\" \"no\" \"-ljpeg\"\nAC_DEFINE_UNQUOTED(CMK_USE_LIBJPEG, $pass, [whether has libjpeg])\nif test $pass -eq 1\nthen\n        add_flag 'CMK_LIBJPEG=\"-ljpeg\"' \"libjpeg\"\nfi\n\n#### check if PAPI exists ####\nif test -n \"$CMK_USE_PAPI\"\nthen\ncat > $t <<EOT\n#include <stdio.h>\n#include <papi.h>\n                                                                                \nint main() {\n    if (PAPI_library_init(PAPI_VER_CURRENT) != PAPI_VER_CURRENT) return 1;\n    return 0;\n}\nEOT\ntest_link \"whether PAPI exists\" \"yes\" \"no\" \"-lpapi\"\nAC_DEFINE_UNQUOTED(CMK_HAS_COUNTER_PAPI, $pass, [whether PAPI exists])\nif test $pass -eq 1\nthen \n\tadd_flag 'CMK_LIBS=\"$CMK_LIBS -lpapi\"' \"papi\"\nfi\nfi\n\n#### test if Python headers are installed ####\nPYTHON_VERSION=`python -V 2>&1 | awk {'print $2'} | awk -F. {'print $1\".\"$2'}`\ncat > $t <<EOT\n#include \"python${PYTHON_VERSION}/Python.h\"\n#include \"python${PYTHON_VERSION}/compile.h\"\n#include \"python${PYTHON_VERSION}/eval.h\"\n#include \"python${PYTHON_VERSION}/node.h\"\n\nint main() {\n    Py_Initialize();\n    PyEval_InitThreads();\n    struct _node* programNode = PyParser_SimpleParseString(\"return 1\\n\",Py_file_input);\n    PyCodeObject *program = PyNode_Compile(programNode, \"\");\n}\nEOT\ntest_link \"whether Python is installed\" \"yes\" \"no\" \"-lpython$PYTHON_VERSION -lpthread -lutil -ldl\"\nAC_DEFINE_UNQUOTED(CMK_HAS_PYTHON, $pass, [whether Python is installed])\nAC_DEFINE_UNQUOTED(CMK_PYTHON_VERSION, ${PYTHON_VERSION}, [Python version])\nif test $pass -eq 1\nthen\n\tadd_flag \"CMK_BUILD_PYTHON=$PYTHON_VERSION\" \"python\"\nfi\n\n## Cray specific test\nif test \"$CMK_BUILD_CRAY\" = \"1\"\nthen\n#echo \"Test for known incompatible compiler versions\"\n\n if test \"$CRAY_CC_VERSION\" = \"8.1.4\"\n then\n\techo \"CCE 8.1.4 produces incorrect Charm++ code\"\n\techo \"Please use a newer version of the CCE compiler\"\n\techo \"e.g. module load cce/8.1.7\"\n\ttest_finish 1\n fi\n\n#### test if Cray node topology will work ####\ncat > $tc <<EOT\n#include <pmi.h>\n\nint main() {\n    int nid;\n    PMI_Get_nid(0, &nid);\n\n    return 0;\n}\nEOT\ntest_linkc \"whether PMI_Get_nid exists\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_PMI_GET_NID, $pass, [whether PMI_Get_nid exists])\n\n#### test if Cray mesh topology will work ####\ncat > $tc <<EOT\n#include <rca_lib.h>\n\nint main() {\n    rca_mesh_coord_t xyz;\n    rca_get_meshcoord(0, &xyz);\n\n    return 0;\n}\nEOT\ntest_linkc \"whether Cray rca library is available\" \"yes\" \"no\" \"$CRAY_RCA_POST_LINK_OPTS -lrca\"\nAC_DEFINE_UNQUOTED(CMK_HAS_RCALIB, $pass, [whether Cray rca library is available])\n\n#### test if Cray mesh dimension query function will work ####\ncat > $tc <<EOT\n#include <rca_lib.h>\n\nint main() {\n    rca_mesh_coord_t xyz;\n    rca_get_max_dimension(&xyz);\n\n    return 0;\n}\nEOT\ntest_linkc \"whether Cray rca_has get_max_dimension\" \"yes\" \"no\" \"$CRAY_RCA_POST_LINK_OPTS -lrca\"\nAC_DEFINE_UNQUOTED(CMK_HAS_RCA_MAX_DIMENSION, $pass, [whether Cray rca has rca_get_max_dimension])\n\n#### query Cray machine max NID if get_max_dimension not exist ####\n\nif test $pass -eq 0\nthen\ncmd=`which xtprocadmin 2>/dev/null`\nif test -n \"$cmd\"\nthen\n    #maxnid=`xtprocadmin  | tail -1  | awk '{print $1}'`\n    # workaround for hopper\n    (export SHELL=/bin/csh; xtprocadmin >& t.$$)\n    maxnid=`cat t.$$  | tail -1  | awk '{print $1}'`\n    /bin/rm -f t.$$\n    AC_MSG_CHECKING(Cray machine maxnid)\n    AC_MSG_RESULT(\"$maxnid\")\n    if test -n \"$maxnid\"\n    then\n    AC_DEFINE_UNQUOTED(CMK_CRAY_MAXNID, $maxnid, [Cray MAXNID])\n    fi\nfi\nfi\n\n\n\n\n#### query Cray machine supports BANDWIDTH_INJECTION controls####\n\nif test \"$CMK_BUILD_MPI\" = \"1\"\nthen\necho \"BALANCED_INJECTION test disabled on MPI\"\nelif test \"$GNI_CRAYXC\" = \"1\"\nthen\necho \"BALANCED_INJECTION test disabled on Aries network\"\nelse\ncat > $tc <<EOT\n#include <stdint.h>\n#include <gni_pub.h>\n\nint main() {\n    gni_bi_desc_t gni_bi_desc;\n    uint32_t gni_device_id = 0;\n    gni_return_t gni_rc = GNI_GetBIConfig(gni_device_id, &gni_bi_desc);\n    if (gni_rc == GNI_RC_SUCCESS) {\n    }\n    return 0;\n}\nEOT\ntest_linkc \"whether GNI_GetBIConfig exists\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_BALANCED_INJECTION_API, $pass, [whether Cray gni_pub has GNI_GetBIConfig])\nfi # end of BIConfig test\n\n\nfi  # end of Cray specific test\n\n#### test if it can build shared library ####\ncat > $t <<EOT\n#include \"stdlib.h\"\nextern int foo();\nint foo1() { \n  void * t= malloc(2);\n  foo();\n  return 0;\n}\nEOT\ntest_linkso \"whether can build shared library\" \"yes\" \"no\" \"\"\nif test $pass -eq 0\nthen \n\tadd_flag 'CMK_NO_BUILD_SHARED=\"true\"' \"build-shared\"\nelse\n\tBUILD_SHARED=1\n        if test \"$BUILD_MPI\" = \"1\"\n\tthen\ncat > $t <<EOT\n#include \"stdlib.h\"\n#include \"mpi.h\"\nextern int foo();\nint foo(int argc, char ** argv) {\n  void * t= malloc(2);\n  foo();\n  MPI_Init(&argc, &argv);\n  return 0;\n}\nEOT\n\t\ttest_linkso \"whether can build shared library with MPI\" \"yes\" \"no\" \"\"\n\t\tBUILD_SHARED=$pass\n\tfi\n\tif test $BUILD_SHARED -eq 0\n\tthen\n\t\tadd_flag 'CMK_NO_BUILD_SHARED=\"true\"' \"build-shared\"\n\tfi\nfi\n\n#### test the version number of bproc ####\nif test -n \"$CMK_BPROC\"\nthen\ncat > $t <<EOT\n#include <stdio.h>\n#include <sys/bproc.h>\nint main()\n{\n  struct bproc_version_t vers;\n  bproc_version(&vers);\n  printf(\"%s\\n\", vers.version_string);\n}\nEOT\ntest_link \"whether bproc compiles\" \"yes\" \"no\" \"-lbproc\"\nif test $pass -eq 1\nthen \nAC_MSG_CHECKING(\"bproc version\")\nbproc_ver=`./testlink`\nif test x$bproc_ver = x\nthen\ntest_result 0 \"bproc version\" \"ERROR\" \"\"\ntest_finish 1\nelse\ntest_result 0 \"bproc version\" \"$bproc_ver\" \"\"\nfi\nbproc_ver=`echo $bproc_ver | cut -d'.' -f1`\nAC_DEFINE_UNQUOTED(CMK_BPROC_VERSION, $bproc_ver, [bproc version])\nfi\nfi\n\n#### test the if command sync exists ####\nAC_CHECK_PROG(SYNC, sync, sync )\nif test -n \"$SYNC\"\nthen\nAC_DEFINE_UNQUOTED(CMK_HAS_SYNC, 1, [sync program])\nfi\n\n################## Fortran #########################\n\n#echo \"set F77 compiler as: $CMK_CF77\"\nAC_MSG_CHECKING(\"F77 compiler as\")\nAC_MSG_RESULT(\"$CMK_CF77\")\n\nAC_MSG_CHECKING(\"whether Fortran 77 compiler works\")\n### test fortran 77 compiler ###\ncat > conftest.f <<EOF\n      SUBROUTINE FOO_foo\n      END\nEOF\n$CMK_CF77 -c conftest.f > /dev/null 2> /dev/null\nif test ! -r conftest.o\nthen\n  AC_MSG_RESULT(\"no\")\nelse\n  AC_MSG_RESULT(\"yes\")\nfi\n\n### test fortran 90 compiler ###\n#echo \"set F90 compiler as: $CMK_CF90\"\nAC_MSG_CHECKING(\"F90 compiler as\")\nAC_MSG_RESULT(\"$CMK_CF90\")\n\nAC_MSG_CHECKING(\"whether Fortran 90 compiler works\")\ncat > conftest2.f90 <<EOF\n      SUBROUTINE FOO_foo\n      END\nEOF\n$CMK_CF90 -c conftest2.f90 > /dev/null 2> /dev/null\nif test ! -r conftest2.o\nthen\n  AC_MSG_RESULT(\"no\")\nelse\n  AC_MSG_RESULT(\"yes\")\n  mv -f conftest2.o conftest.o\n  USE_FORTRAN90=1\nfi\n\n### check fortran name mangling\nAC_MSG_CHECKING(subroutine name used by Fortran 90 compiler)\n\nif test -r conftest.o\nthen\n  AC_CACHE_VAL(_cv_fortran_postfix,\n\n  NAME=`$CMK_NM conftest.o | grep \"foo_foo__\"`\n  if test \"$NAME\" != \"\"\n  then\n    _cv_fortran_postfix=TWOSCORE\n    AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_TWOSCORE, 1, [TWOSCORE])\n  else\n    NAME=`$CMK_NM conftest.o | grep \"foo_foo_\"`\n    if test \"$NAME\" != \"\"\n    then\n      _cv_fortran_postfix=ONESCORE\n      AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_ONESCORE, 1, [ONESCORE])\n    else\n      NAME=`$CMK_NM conftest.o | grep \"foo_foo\"`\n      if test \"$NAME\" != \"\"\n      then\n        _cv_fortran_postfix=NOSCORE\n        AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_NOSCORE, 1, [NOSCORE])\n      else\n        NAME=`$CMK_NM conftest.o | grep \"FOO_FOO\"`\n        if test \"$NAME\" != \"\"\n        then\n          _cv_fortran_postfix=ALLCAPS\n          AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_ALLCAPS, 1, [ALLCAPS])\n        else\n          echo \"#################################################\"\n          echo \"FORTRAN compiler generated name not supported yet\"\n          echo \"#################################################\"\n        fi\n      fi\n    fi\n  fi\n  rm -f conftest.f conftest.o\n  )\n  AC_MSG_RESULT($_cv_fortran_postfix)\nelse\n  AC_MSG_RESULT(\"Fortran compiler not working\")\nfi\n\n### check module name ###\n\nif test \"$USE_FORTRAN90\" = 1\nthen\n  cat > conftest.f90 <<EOF\n      MODULE testmod\n        interface \n          function fpup_issizing(p)\n          INTEGER :: p\n          logical fpup_issizing\n          end function\n        end interface\n      END MODULE\nEOF\n  AC_MSG_CHECKING(Fortran 90 mod name is capital)\n  $CMK_CF90 -c conftest.f90 > /dev/null 2> /dev/null\n  name=`ls TESTMOD.* 2>/dev/null`\n  if test -n \"$name\"\n  then\n        AC_MSG_RESULT(\"yes\")\n\tadd_flag 'CMK_MOD_NAME_ALLCAPS=1' \"mod name capital\"\n  else\n        AC_MSG_RESULT(\"no\")\n\tname=`ls testmod.* 2>/dev/null`\n  fi\n  if test -n \"$name\"\n  then\n  \tAC_MSG_CHECKING(Fortran 90 mod name extension)\n    \text=`echo $name | sed -e 's/^[[^.]]*\\.//'`\n\tadd_flag 'CMK_MOD_EXT=\"'$ext'\"' \"mod name extension\"\n        AC_MSG_RESULT(\"$ext\")\n        /bin/rm -f $name\n  fi\n  /bin/rm -f conftest.f90\nfi\n\nAC_OUTPUT(\nlibs/ck-libs/ampi/ampiCC,\n\nchmod +x libs/ck-libs/ampi/ampiCC\n)\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/src/libs/ck-libs/metis/manual/manual.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/src/ck-cp/NelderMeadStateDiagram.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/src/langs/charj/lib/JSAP-2.1.jar",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/src/langs/charj/lib/antlr-3.2.jar",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/src/langs/charj/lib/ant-antlr3.jar",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/src/ck-ldb/GridCommRefineLB.C",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/tests/charm++/simplearrayhello/msvc_6/hello.opt",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/examples/charm++/wave2d/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/examples/charm++/satisfiability/TNM/TNM.C",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/examples/charm++/satisfiability/TNM/TNM.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/examples/bigsim/tools/text2log/examples.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/examples/pose/LBSim/sample-graph.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/charisma/libmodule.tex",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/netfem/fig/example.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/fem/fig/create_field.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/fem/fig/ghost_edge.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/fem/fig/simple_mesh.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/fem/fig/ghost_node.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/fem/fig/conn_indexing_old.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/fem/fig/partitioned_mesh.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/fem/fig/forcedecomp.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/fem/fig/sym_ghost.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/fem/fig/ghost_pre.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/fem/fig/layout.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/fem/fig/conn_indexing.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/fem/fig/indexlists.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/charj/fig/fig0.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/charj/fig/fig1.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/ampi/figs/cache.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/ampi/figs/prac.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/ampi/figs/migrate.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/ampi/figs/ratio.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/ampi/figs/virtualization.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/ampi/figs/global.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/timeline.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/apoa1_512_CommTimeProfile.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/apoa1_128_userEventsView.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/front-with-summary.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/graph.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/apoa1_512_overviewEPColored.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/histogram.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/apoa1_512_overview.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/piechart.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/performancecounters.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/mainwindow.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/outlier_dialog.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/apoa1_512_CommProcessorProfile.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/animation.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/viewlog.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/usageprofile.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/NoiseMiner1.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/NoiseMiner2.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/commhistogram.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/userevent.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/apoa1_512_outlierWithClusters.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/timeprofile.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/standard_dialog.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/projections/fig/overview.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/bignetsim/figures/detailedsim_newer.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/mblock/fig/ghostwidth.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/mblock/fig/indexing.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/mblock/fig/nodeloc.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/mblock/fig/terminology.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/mblock/fig/decompose.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/charm++/fig/pup.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/charm++/fig/ckgraph.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/debugger/figs/snapshot4-crop.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/debugger/figs/snapshot4.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/debugger/figs/memoryLeaking.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/debugger/figs/snapshot1.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/debugger/figs/memoryView.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/debugger/figs/menu.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/debugger/figs/snapshot2.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/debugger/figs/arrayelement.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/debugger/figs/snapshot3.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/debugger/figs/memoryStatistics.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/debugger/figs/memoryInspector.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/bigsim/figures/event_diagram2.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/bigsim/figures/event_diagram2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/bigsim/figures/InterpolationFlow.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/bigsim/figures/event_diagram.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/bigsim/figures/detailedsim_newer.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/bigsim/figures/InterpolationFlow.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/bigsim/figures/event_diagram.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/bigsim/figures/event_diagram.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/bigsim/figures/event_diagram2.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/bigsim/figures/InterpolationFlow.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/parfum/fig/parfum_structure.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.8.0-kc2qczm7mq34t4vjzl3u5yw7iuqlroov/spack-src/doc/assets/hatchbkgd.png"
    ],
    "total_files": 4290
}