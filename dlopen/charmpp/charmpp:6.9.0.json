{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/src/libs/conv-libs/openmp_llvm/runtime/src/z_Linux_util.cpp": "/*\n * z_Linux_util.cpp -- platform specific routines.\n */\n\n//===----------------------------------------------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.txt for details.\n//\n//===----------------------------------------------------------------------===//\n\n#include \"kmp.h\"\n#include \"kmp_affinity.h\"\n#include \"kmp_i18n.h\"\n#include \"kmp_io.h\"\n#include \"kmp_itt.h\"\n#include \"kmp_lock.h\"\n#include \"kmp_stats.h\"\n#include \"kmp_str.h\"\n#include \"kmp_wait_release.h\"\n#include \"kmp_wrapper_getpid.h\"\n\n#if !KMP_OS_FREEBSD && !KMP_OS_NETBSD\n#include <alloca.h>\n#endif\n#include <math.h> // HUGE_VAL.\n#include <sys/resource.h>\n#include <sys/syscall.h>\n#include <sys/time.h>\n#include <sys/times.h>\n#include <unistd.h>\n\n#if KMP_OS_LINUX && !KMP_OS_CNK\n#include <sys/sysinfo.h>\n#if KMP_USE_FUTEX\n// We should really include <futex.h>, but that causes compatibility problems on\n// different Linux* OS distributions that either require that you include (or\n// break when you try to include) <pci/types.h>. Since all we need is the two\n// macros below (which are part of the kernel ABI, so can't change) we just\n// define the constants here and don't include <futex.h>\n#ifndef FUTEX_WAIT\n#define FUTEX_WAIT 0\n#endif\n#ifndef FUTEX_WAKE\n#define FUTEX_WAKE 1\n#endif\n#endif\n#elif KMP_OS_DARWIN\n#include <mach/mach.h>\n#include <sys/sysctl.h>\n#elif KMP_OS_FREEBSD\n#include <pthread_np.h>\n#endif\n\n#include <ctype.h>\n#include <dirent.h>\n#include <fcntl.h>\n\n#if CHARM_OMP\n#include \"ompcharm.h\"\nCpvExtern(int, prevGtid);\n#endif\n\n#include \"tsan_annotations.h\"\n\nstruct kmp_sys_timer {\n  struct timespec start;\n};\n\n// Convert timespec to nanoseconds.\n#define TS2NS(timespec) (((timespec).tv_sec * 1e9) + (timespec).tv_nsec)\n\nstatic struct kmp_sys_timer __kmp_sys_timer_data;\n\n#if KMP_HANDLE_SIGNALS\ntypedef void (*sig_func_t)(int);\nSTATIC_EFI2_WORKAROUND struct sigaction __kmp_sighldrs[NSIG];\nstatic sigset_t __kmp_sigset;\n#endif\n\nstatic int __kmp_init_runtime = FALSE;\n\nstatic int __kmp_fork_count = 0;\n\nstatic pthread_condattr_t __kmp_suspend_cond_attr;\nstatic pthread_mutexattr_t __kmp_suspend_mutex_attr;\n\nstatic kmp_cond_align_t __kmp_wait_cv;\nstatic kmp_mutex_align_t __kmp_wait_mx;\n\nkmp_uint64 __kmp_ticks_per_msec = 1000000;\n\n#ifdef DEBUG_SUSPEND\nstatic void __kmp_print_cond(char *buffer, kmp_cond_align_t *cond) {\n  KMP_SNPRINTF(buffer, 128, \"(cond (lock (%ld, %d)), (descr (%p)))\",\n               cond->c_cond.__c_lock.__status, cond->c_cond.__c_lock.__spinlock,\n               cond->c_cond.__c_waiting);\n}\n#endif\n\n#if (KMP_OS_LINUX && KMP_AFFINITY_SUPPORTED)\n\n/* Affinity support */\n\nvoid __kmp_affinity_bind_thread(int which) {\n  KMP_ASSERT2(KMP_AFFINITY_CAPABLE(),\n              \"Illegal set affinity operation when not capable\");\n\n  kmp_affin_mask_t *mask;\n  KMP_CPU_ALLOC_ON_STACK(mask);\n  KMP_CPU_ZERO(mask);\n  KMP_CPU_SET(which, mask);\n  __kmp_set_system_affinity(mask, TRUE);\n  KMP_CPU_FREE_FROM_STACK(mask);\n}\n\n/* Determine if we can access affinity functionality on this version of\n * Linux* OS by checking __NR_sched_{get,set}affinity system calls, and set\n * __kmp_affin_mask_size to the appropriate value (0 means not capable). */\nvoid __kmp_affinity_determine_capable(const char *env_var) {\n// Check and see if the OS supports thread affinity.\n\n#define KMP_CPU_SET_SIZE_LIMIT (1024 * 1024)\n\n  int gCode;\n  int sCode;\n  unsigned char *buf;\n  buf = (unsigned char *)KMP_INTERNAL_MALLOC(KMP_CPU_SET_SIZE_LIMIT);\n\n  // If Linux* OS:\n  // If the syscall fails or returns a suggestion for the size,\n  // then we don't have to search for an appropriate size.\n  gCode = syscall(__NR_sched_getaffinity, 0, KMP_CPU_SET_SIZE_LIMIT, buf);\n  KA_TRACE(30, (\"__kmp_affinity_determine_capable: \"\n                \"initial getaffinity call returned %d errno = %d\\n\",\n                gCode, errno));\n\n  // if ((gCode < 0) && (errno == ENOSYS))\n  if (gCode < 0) {\n    // System call not supported\n    if (__kmp_affinity_verbose ||\n        (__kmp_affinity_warnings && (__kmp_affinity_type != affinity_none) &&\n         (__kmp_affinity_type != affinity_default) &&\n         (__kmp_affinity_type != affinity_disabled))) {\n      int error = errno;\n      kmp_msg_t err_code = KMP_ERR(error);\n      __kmp_msg(kmp_ms_warning, KMP_MSG(GetAffSysCallNotSupported, env_var),\n                err_code, __kmp_msg_null);\n      if (__kmp_generate_warnings == kmp_warnings_off) {\n        __kmp_str_free(&err_code.str);\n      }\n    }\n    KMP_AFFINITY_DISABLE();\n    KMP_INTERNAL_FREE(buf);\n    return;\n  }\n  if (gCode > 0) { // Linux* OS only\n    // The optimal situation: the OS returns the size of the buffer it expects.\n    //\n    // A verification of correct behavior is that Isetaffinity on a NULL\n    // buffer with the same size fails with errno set to EFAULT.\n    sCode = syscall(__NR_sched_setaffinity, 0, gCode, NULL);\n    KA_TRACE(30, (\"__kmp_affinity_determine_capable: \"\n                  \"setaffinity for mask size %d returned %d errno = %d\\n\",\n                  gCode, sCode, errno));\n    if (sCode < 0) {\n      if (errno == ENOSYS) {\n        if (__kmp_affinity_verbose ||\n            (__kmp_affinity_warnings &&\n             (__kmp_affinity_type != affinity_none) &&\n             (__kmp_affinity_type != affinity_default) &&\n             (__kmp_affinity_type != affinity_disabled))) {\n          int error = errno;\n          kmp_msg_t err_code = KMP_ERR(error);\n          __kmp_msg(kmp_ms_warning, KMP_MSG(SetAffSysCallNotSupported, env_var),\n                    err_code, __kmp_msg_null);\n          if (__kmp_generate_warnings == kmp_warnings_off) {\n            __kmp_str_free(&err_code.str);\n          }\n        }\n        KMP_AFFINITY_DISABLE();\n        KMP_INTERNAL_FREE(buf);\n      }\n      if (errno == EFAULT) {\n        KMP_AFFINITY_ENABLE(gCode);\n        KA_TRACE(10, (\"__kmp_affinity_determine_capable: \"\n                      \"affinity supported (mask size %d)\\n\",\n                      (int)__kmp_affin_mask_size));\n        KMP_INTERNAL_FREE(buf);\n        return;\n      }\n    }\n  }\n\n  // Call the getaffinity system call repeatedly with increasing set sizes\n  // until we succeed, or reach an upper bound on the search.\n  KA_TRACE(30, (\"__kmp_affinity_determine_capable: \"\n                \"searching for proper set size\\n\"));\n  int size;\n  for (size = 1; size <= KMP_CPU_SET_SIZE_LIMIT; size *= 2) {\n    gCode = syscall(__NR_sched_getaffinity, 0, size, buf);\n    KA_TRACE(30, (\"__kmp_affinity_determine_capable: \"\n                  \"getaffinity for mask size %d returned %d errno = %d\\n\",\n                  size, gCode, errno));\n\n    if (gCode < 0) {\n      if (errno == ENOSYS) {\n        // We shouldn't get here\n        KA_TRACE(30, (\"__kmp_affinity_determine_capable: \"\n                      \"inconsistent OS call behavior: errno == ENOSYS for mask \"\n                      \"size %d\\n\",\n                      size));\n        if (__kmp_affinity_verbose ||\n            (__kmp_affinity_warnings &&\n             (__kmp_affinity_type != affinity_none) &&\n             (__kmp_affinity_type != affinity_default) &&\n             (__kmp_affinity_type != affinity_disabled))) {\n          int error = errno;\n          kmp_msg_t err_code = KMP_ERR(error);\n          __kmp_msg(kmp_ms_warning, KMP_MSG(GetAffSysCallNotSupported, env_var),\n                    err_code, __kmp_msg_null);\n          if (__kmp_generate_warnings == kmp_warnings_off) {\n            __kmp_str_free(&err_code.str);\n          }\n        }\n        KMP_AFFINITY_DISABLE();\n        KMP_INTERNAL_FREE(buf);\n        return;\n      }\n      continue;\n    }\n\n    sCode = syscall(__NR_sched_setaffinity, 0, gCode, NULL);\n    KA_TRACE(30, (\"__kmp_affinity_determine_capable: \"\n                  \"setaffinity for mask size %d returned %d errno = %d\\n\",\n                  gCode, sCode, errno));\n    if (sCode < 0) {\n      if (errno == ENOSYS) { // Linux* OS only\n        // We shouldn't get here\n        KA_TRACE(30, (\"__kmp_affinity_determine_capable: \"\n                      \"inconsistent OS call behavior: errno == ENOSYS for mask \"\n                      \"size %d\\n\",\n                      size));\n        if (__kmp_affinity_verbose ||\n            (__kmp_affinity_warnings &&\n             (__kmp_affinity_type != affinity_none) &&\n             (__kmp_affinity_type != affinity_default) &&\n             (__kmp_affinity_type != affinity_disabled))) {\n          int error = errno;\n          kmp_msg_t err_code = KMP_ERR(error);\n          __kmp_msg(kmp_ms_warning, KMP_MSG(SetAffSysCallNotSupported, env_var),\n                    err_code, __kmp_msg_null);\n          if (__kmp_generate_warnings == kmp_warnings_off) {\n            __kmp_str_free(&err_code.str);\n          }\n        }\n        KMP_AFFINITY_DISABLE();\n        KMP_INTERNAL_FREE(buf);\n        return;\n      }\n      if (errno == EFAULT) {\n        KMP_AFFINITY_ENABLE(gCode);\n        KA_TRACE(10, (\"__kmp_affinity_determine_capable: \"\n                      \"affinity supported (mask size %d)\\n\",\n                      (int)__kmp_affin_mask_size));\n        KMP_INTERNAL_FREE(buf);\n        return;\n      }\n    }\n  }\n  // save uncaught error code\n  // int error = errno;\n  KMP_INTERNAL_FREE(buf);\n  // restore uncaught error code, will be printed at the next KMP_WARNING below\n  // errno = error;\n\n  // Affinity is not supported\n  KMP_AFFINITY_DISABLE();\n  KA_TRACE(10, (\"__kmp_affinity_determine_capable: \"\n                \"cannot determine mask size - affinity not supported\\n\"));\n  if (__kmp_affinity_verbose ||\n      (__kmp_affinity_warnings && (__kmp_affinity_type != affinity_none) &&\n       (__kmp_affinity_type != affinity_default) &&\n       (__kmp_affinity_type != affinity_disabled))) {\n    KMP_WARNING(AffCantGetMaskSize, env_var);\n  }\n}\n\n#endif // KMP_OS_LINUX && KMP_AFFINITY_SUPPORTED\n\n#if KMP_USE_FUTEX\n\nint __kmp_futex_determine_capable() {\n  int loc = 0;\n  int rc = syscall(__NR_futex, &loc, FUTEX_WAKE, 1, NULL, NULL, 0);\n  int retval = (rc == 0) || (errno != ENOSYS);\n\n  KA_TRACE(10,\n           (\"__kmp_futex_determine_capable: rc = %d errno = %d\\n\", rc, errno));\n  KA_TRACE(10, (\"__kmp_futex_determine_capable: futex syscall%s supported\\n\",\n                retval ? \"\" : \" not\"));\n\n  return retval;\n}\n\n#endif // KMP_USE_FUTEX\n\n#if (KMP_ARCH_X86 || KMP_ARCH_X86_64) && (!KMP_ASM_INTRINS)\n/* Only 32-bit \"add-exchange\" instruction on IA-32 architecture causes us to\n   use compare_and_store for these routines */\n\nkmp_int8 __kmp_test_then_or8(volatile kmp_int8 *p, kmp_int8 d) {\n  kmp_int8 old_value, new_value;\n\n  old_value = TCR_1(*p);\n  new_value = old_value | d;\n\n  while (!KMP_COMPARE_AND_STORE_REL8(p, old_value, new_value)) {\n    KMP_CPU_PAUSE();\n    old_value = TCR_1(*p);\n    new_value = old_value | d;\n  }\n  return old_value;\n}\n\nkmp_int8 __kmp_test_then_and8(volatile kmp_int8 *p, kmp_int8 d) {\n  kmp_int8 old_value, new_value;\n\n  old_value = TCR_1(*p);\n  new_value = old_value & d;\n\n  while (!KMP_COMPARE_AND_STORE_REL8(p, old_value, new_value)) {\n    KMP_CPU_PAUSE();\n    old_value = TCR_1(*p);\n    new_value = old_value & d;\n  }\n  return old_value;\n}\n\nkmp_uint32 __kmp_test_then_or32(volatile kmp_uint32 *p, kmp_uint32 d) {\n  kmp_uint32 old_value, new_value;\n\n  old_value = TCR_4(*p);\n  new_value = old_value | d;\n\n  while (!KMP_COMPARE_AND_STORE_REL32(p, old_value, new_value)) {\n    KMP_CPU_PAUSE();\n    old_value = TCR_4(*p);\n    new_value = old_value | d;\n  }\n  return old_value;\n}\n\nkmp_uint32 __kmp_test_then_and32(volatile kmp_uint32 *p, kmp_uint32 d) {\n  kmp_uint32 old_value, new_value;\n\n  old_value = TCR_4(*p);\n  new_value = old_value & d;\n\n  while (!KMP_COMPARE_AND_STORE_REL32(p, old_value, new_value)) {\n    KMP_CPU_PAUSE();\n    old_value = TCR_4(*p);\n    new_value = old_value & d;\n  }\n  return old_value;\n}\n\n#if KMP_ARCH_X86\nkmp_int8 __kmp_test_then_add8(volatile kmp_int8 *p, kmp_int8 d) {\n  kmp_int8 old_value, new_value;\n\n  old_value = TCR_1(*p);\n  new_value = old_value + d;\n\n  while (!KMP_COMPARE_AND_STORE_REL8(p, old_value, new_value)) {\n    KMP_CPU_PAUSE();\n    old_value = TCR_1(*p);\n    new_value = old_value + d;\n  }\n  return old_value;\n}\n\nkmp_int64 __kmp_test_then_add64(volatile kmp_int64 *p, kmp_int64 d) {\n  kmp_int64 old_value, new_value;\n\n  old_value = TCR_8(*p);\n  new_value = old_value + d;\n\n  while (!KMP_COMPARE_AND_STORE_REL64(p, old_value, new_value)) {\n    KMP_CPU_PAUSE();\n    old_value = TCR_8(*p);\n    new_value = old_value + d;\n  }\n  return old_value;\n}\n#endif /* KMP_ARCH_X86 */\n\nkmp_uint64 __kmp_test_then_or64(volatile kmp_uint64 *p, kmp_uint64 d) {\n  kmp_uint64 old_value, new_value;\n\n  old_value = TCR_8(*p);\n  new_value = old_value | d;\n  while (!KMP_COMPARE_AND_STORE_REL64(p, old_value, new_value)) {\n    KMP_CPU_PAUSE();\n    old_value = TCR_8(*p);\n    new_value = old_value | d;\n  }\n  return old_value;\n}\n\nkmp_uint64 __kmp_test_then_and64(volatile kmp_uint64 *p, kmp_uint64 d) {\n  kmp_uint64 old_value, new_value;\n\n  old_value = TCR_8(*p);\n  new_value = old_value & d;\n  while (!KMP_COMPARE_AND_STORE_REL64(p, old_value, new_value)) {\n    KMP_CPU_PAUSE();\n    old_value = TCR_8(*p);\n    new_value = old_value & d;\n  }\n  return old_value;\n}\n\n#endif /* (KMP_ARCH_X86 || KMP_ARCH_X86_64) && (! KMP_ASM_INTRINS) */\n\nvoid __kmp_terminate_thread(int gtid) {\n#if! CHARM_OMP\n  int status;\n  kmp_info_t *th = __kmp_threads[gtid];\n\n  if (!th)\n    return;\n\n#ifdef KMP_CANCEL_THREADS\n  KA_TRACE(10, (\"__kmp_terminate_thread: kill (%d)\\n\", gtid));\n  status = pthread_cancel(th->th.th_info.ds.ds_thread);\n  if (status != 0 && status != ESRCH) {\n    __kmp_fatal(KMP_MSG(CantTerminateWorkerThread), KMP_ERR(status),\n                __kmp_msg_null);\n  }\n#endif\n  __kmp_yield(TRUE);\n#endif // CHARM_OMP\n} //\n\n/* Set thread stack info according to values returned by pthread_getattr_np().\n   If values are unreasonable, assume call failed and use incremental stack\n   refinement method instead. Returns TRUE if the stack parameters could be\n   determined exactly, FALSE if incremental refinement is necessary. */\nstatic kmp_int32 __kmp_set_stack_info(int gtid, kmp_info_t *th) {\n  int stack_data;\n#if KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD\n  /* Linux* OS only -- no pthread_getattr_np support on OS X* */\n  pthread_attr_t attr;\n  int status;\n  size_t size = 0;\n  void *addr = 0;\n\n  /* Always do incremental stack refinement for ubermaster threads since the\n     initial thread stack range can be reduced by sibling thread creation so\n     pthread_attr_getstack may cause thread gtid aliasing */\n  if (!KMP_UBER_GTID(gtid)) {\n#if !CHARM_OMP\n    /* Fetch the real thread attributes */\n    status = pthread_attr_init(&attr);\n    KMP_CHECK_SYSFAIL(\"pthread_attr_init\", status);\n#if KMP_OS_FREEBSD || KMP_OS_NETBSD\n    status = pthread_attr_get_np(pthread_self(), &attr);\n    KMP_CHECK_SYSFAIL(\"pthread_attr_get_np\", status);\n#else\n    status = pthread_getattr_np(pthread_self(), &attr);\n    KMP_CHECK_SYSFAIL(\"pthread_getattr_np\", status);\n#endif\n    status = pthread_attr_getstack(&attr, &addr, &size);\n    KMP_CHECK_SYSFAIL(\"pthread_attr_getstack\", status);\n    KA_TRACE(60,\n             (\"__kmp_set_stack_info: T#%d pthread_attr_getstack returned size:\"\n              \" %lu, low addr: %p\\n\",\n              gtid, size, addr));\n    status = pthread_attr_destroy(&attr);\n    KMP_CHECK_SYSFAIL(\"pthread_attr_destroy\", status);\n#endif\n  }\n\n  if (size != 0 && addr != 0) { // was stack parameter determination successful?\n    /* Store the correct base and size */\n    TCW_PTR(th->th.th_info.ds.ds_stackbase, (((char *)addr) + size));\n    TCW_PTR(th->th.th_info.ds.ds_stacksize, size);\n    TCW_4(th->th.th_info.ds.ds_stackgrow, FALSE);\n    return TRUE;\n  }\n#endif /* KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD */\n  /* Use incremental refinement starting from initial conservative estimate */\n  TCW_PTR(th->th.th_info.ds.ds_stacksize, 0);\n  TCW_PTR(th->th.th_info.ds.ds_stackbase, &stack_data);\n  TCW_4(th->th.th_info.ds.ds_stackgrow, TRUE);\n  return FALSE;\n}\n\nstatic void *__kmp_launch_worker(void *thr) {\n  int status, old_type, old_state;\n#if !CHARM_OMP\n#ifdef KMP_BLOCK_SIGNALS\n  sigset_t new_set, old_set;\n#endif /* KMP_BLOCK_SIGNALS */\n#endif\n  void *exit_val;\n#if KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD\n  void *volatile padding = 0;\n#endif\n  int gtid;\n\n  gtid = ((kmp_info_t *)thr)->th.th_info.ds.ds_gtid;\n#if !CHARM_OMP\n  __kmp_gtid_set_specific(gtid);\n#ifdef KMP_TDATA_GTID\n  __kmp_gtid = gtid;\n#endif\n#endif\n\n#if KMP_STATS_ENABLED\n  // set __thread local index to point to thread-specific stats\n  __kmp_stats_thread_ptr = ((kmp_info_t *)thr)->th.th_stats;\n  KMP_START_EXPLICIT_TIMER(OMP_worker_thread_life);\n  KMP_SET_THREAD_STATE(IDLE);\n  KMP_INIT_PARTITIONED_TIMERS(OMP_idle);\n#endif\n\n#if USE_ITT_BUILD\n  __kmp_itt_thread_name(gtid);\n#endif /* USE_ITT_BUILD */\n\n#if KMP_AFFINITY_SUPPORTED\n  __kmp_affinity_set_init_mask(gtid, FALSE);\n#endif\n\n#if !CHARM_OMP\n#ifdef KMP_CANCEL_THREADS\n  status = pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, &old_type);\n  KMP_CHECK_SYSFAIL(\"pthread_setcanceltype\", status);\n  // josh todo: isn't PTHREAD_CANCEL_ENABLE default for newly-created threads?\n  status = pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n  KMP_CHECK_SYSFAIL(\"pthread_setcancelstate\", status);\n#endif\n#endif\n\n#if KMP_ARCH_X86 || KMP_ARCH_X86_64\n  // Set FP control regs to be a copy of the parallel initialization thread's.\n  __kmp_clear_x87_fpu_status_word();\n  __kmp_load_x87_fpu_control_word(&__kmp_init_x87_fpu_control_word);\n  __kmp_load_mxcsr(&__kmp_init_mxcsr);\n#endif /* KMP_ARCH_X86 || KMP_ARCH_X86_64 */\n\n#if !CHARM_OMP\n#ifdef KMP_BLOCK_SIGNALS\n  status = sigfillset(&new_set);\n  KMP_CHECK_SYSFAIL_ERRNO(\"sigfillset\", status);\n  status = pthread_sigmask(SIG_BLOCK, &new_set, &old_set);\n  KMP_CHECK_SYSFAIL(\"pthread_sigmask\", status);\n#endif /* KMP_BLOCK_SIGNALS */\n#endif\n\n#if !CHARM_OMP && (KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD)\n  if (__kmp_stkoffset > 0 && gtid > 0) {\n    padding = KMP_ALLOCA(gtid * __kmp_stkoffset);\n  }\n#endif\n\n  KMP_MB();\n#if !CHARM_OMP\n  __kmp_set_stack_info(gtid, (kmp_info_t *)thr);\n\n  __kmp_check_stack_overlap((kmp_info_t *)thr);\n#endif\n  exit_val = __kmp_launch_thread((kmp_info_t *)thr);\n\n#if !CHARM_OMP\n#ifdef KMP_BLOCK_SIGNALS\n  status = pthread_sigmask(SIG_SETMASK, &old_set, NULL);\n  KMP_CHECK_SYSFAIL(\"pthread_sigmask\", status);\n#endif /* KMP_BLOCK_SIGNALS */\n#endif\n\n  return exit_val;\n}\n\n#if KMP_USE_MONITOR\n/* The monitor thread controls all of the threads in the complex */\n\nstatic void *__kmp_launch_monitor(void *thr) {\n  int status, old_type, old_state;\n#if !CHARM_OMP\n#ifdef KMP_BLOCK_SIGNALS\n  sigset_t new_set;\n#endif /* KMP_BLOCK_SIGNALS */\n#endif\n  struct timespec interval;\n  int yield_count;\n  int yield_cycles = 0;\n\n  KMP_MB(); /* Flush all pending memory write invalidates.  */\n\n  KA_TRACE(10, (\"__kmp_launch_monitor: #1 launched\\n\"));\n\n  /* register us as the monitor thread */\n  __kmp_gtid_set_specific(KMP_GTID_MONITOR);\n#ifdef KMP_TDATA_GTID\n  __kmp_gtid = KMP_GTID_MONITOR;\n#endif\n\n  KMP_MB();\n\n#if USE_ITT_BUILD\n  // Instruct Intel(R) Threading Tools to ignore monitor thread.\n  __kmp_itt_thread_ignore();\n#endif /* USE_ITT_BUILD */\n\n  __kmp_set_stack_info(((kmp_info_t *)thr)->th.th_info.ds.ds_gtid,\n                       (kmp_info_t *)thr);\n\n  __kmp_check_stack_overlap((kmp_info_t *)thr);\n\n#ifdef KMP_CANCEL_THREADS\n  status = pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, &old_type);\n  KMP_CHECK_SYSFAIL(\"pthread_setcanceltype\", status);\n  // josh todo: isn't PTHREAD_CANCEL_ENABLE default for newly-created threads?\n  status = pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n  KMP_CHECK_SYSFAIL(\"pthread_setcancelstate\", status);\n#endif\n\n#if KMP_REAL_TIME_FIX\n  // This is a potential fix which allows application with real-time scheduling\n  // policy work. However, decision about the fix is not made yet, so it is\n  // disabled by default.\n  { // Are program started with real-time scheduling policy?\n    int sched = sched_getscheduler(0);\n    if (sched == SCHED_FIFO || sched == SCHED_RR) {\n      // Yes, we are a part of real-time application. Try to increase the\n      // priority of the monitor.\n      struct sched_param param;\n      int max_priority = sched_get_priority_max(sched);\n      int rc;\n      KMP_WARNING(RealTimeSchedNotSupported);\n      sched_getparam(0, &param);\n      if (param.sched_priority < max_priority) {\n        param.sched_priority += 1;\n        rc = sched_setscheduler(0, sched, &param);\n        if (rc != 0) {\n          int error = errno;\n          kmp_msg_t err_code = KMP_ERR(error);\n          __kmp_msg(kmp_ms_warning, KMP_MSG(CantChangeMonitorPriority),\n                    err_code, KMP_MSG(MonitorWillStarve), __kmp_msg_null);\n          if (__kmp_generate_warnings == kmp_warnings_off) {\n            __kmp_str_free(&err_code.str);\n          }\n        }\n      } else {\n        // We cannot abort here, because number of CPUs may be enough for all\n        // the threads, including the monitor thread, so application could\n        // potentially work...\n        __kmp_msg(kmp_ms_warning, KMP_MSG(RunningAtMaxPriority),\n                  KMP_MSG(MonitorWillStarve), KMP_HNT(RunningAtMaxPriority),\n                  __kmp_msg_null);\n      }\n    }\n    // AC: free thread that waits for monitor started\n    TCW_4(__kmp_global.g.g_time.dt.t_value, 0);\n  }\n#endif // KMP_REAL_TIME_FIX\n\n  KMP_MB(); /* Flush all pending memory write invalidates.  */\n\n  if (__kmp_monitor_wakeups == 1) {\n    interval.tv_sec = 1;\n    interval.tv_nsec = 0;\n  } else {\n    interval.tv_sec = 0;\n    interval.tv_nsec = (KMP_NSEC_PER_SEC / __kmp_monitor_wakeups);\n  }\n\n  KA_TRACE(10, (\"__kmp_launch_monitor: #2 monitor\\n\"));\n\n  if (__kmp_yield_cycle) {\n    __kmp_yielding_on = 0; /* Start out with yielding shut off */\n    yield_count = __kmp_yield_off_count;\n  } else {\n    __kmp_yielding_on = 1; /* Yielding is on permanently */\n  }\n\n  while (!TCR_4(__kmp_global.g.g_done)) {\n    struct timespec now;\n    struct timeval tval;\n\n    /*  This thread monitors the state of the system */\n\n    KA_TRACE(15, (\"__kmp_launch_monitor: update\\n\"));\n\n    status = gettimeofday(&tval, NULL);\n    KMP_CHECK_SYSFAIL_ERRNO(\"gettimeofday\", status);\n    TIMEVAL_TO_TIMESPEC(&tval, &now);\n\n    now.tv_sec += interval.tv_sec;\n    now.tv_nsec += interval.tv_nsec;\n\n    if (now.tv_nsec >= KMP_NSEC_PER_SEC) {\n      now.tv_sec += 1;\n      now.tv_nsec -= KMP_NSEC_PER_SEC;\n    }\n\n    status = pthread_mutex_lock(&__kmp_wait_mx.m_mutex);\n    KMP_CHECK_SYSFAIL(\"pthread_mutex_lock\", status);\n    // AC: the monitor should not fall asleep if g_done has been set\n    if (!TCR_4(__kmp_global.g.g_done)) { // check once more under mutex\n      status = pthread_cond_timedwait(&__kmp_wait_cv.c_cond,\n                                      &__kmp_wait_mx.m_mutex, &now);\n      if (status != 0) {\n        if (status != ETIMEDOUT && status != EINTR) {\n          KMP_SYSFAIL(\"pthread_cond_timedwait\", status);\n        }\n      }\n    }\n    status = pthread_mutex_unlock(&__kmp_wait_mx.m_mutex);\n    KMP_CHECK_SYSFAIL(\"pthread_mutex_unlock\", status);\n\n    if (__kmp_yield_cycle) {\n      yield_cycles++;\n      if ((yield_cycles % yield_count) == 0) {\n        if (__kmp_yielding_on) {\n          __kmp_yielding_on = 0; /* Turn it off now */\n          yield_count = __kmp_yield_off_count;\n        } else {\n          __kmp_yielding_on = 1; /* Turn it on now */\n          yield_count = __kmp_yield_on_count;\n        }\n        yield_cycles = 0;\n      }\n    } else {\n      __kmp_yielding_on = 1;\n    }\n\n    TCW_4(__kmp_global.g.g_time.dt.t_value,\n          TCR_4(__kmp_global.g.g_time.dt.t_value) + 1);\n\n    KMP_MB(); /* Flush all pending memory write invalidates.  */\n  }\n\n  KA_TRACE(10, (\"__kmp_launch_monitor: #3 cleanup\\n\"));\n#if !CHARM_OMP\n#ifdef KMP_BLOCK_SIGNALS\n  status = sigfillset(&new_set);\n  KMP_CHECK_SYSFAIL_ERRNO(\"sigfillset\", status);\n  status = pthread_sigmask(SIG_UNBLOCK, &new_set, NULL);\n  KMP_CHECK_SYSFAIL(\"pthread_sigmask\", status);\n#endif /* KMP_BLOCK_SIGNALS */\n#endif\n  KA_TRACE(10, (\"__kmp_launch_monitor: #4 finished\\n\"));\n\n  if (__kmp_global.g.g_abort != 0) {\n    /* now we need to terminate the worker threads  */\n    /* the value of t_abort is the signal we caught */\n\n    int gtid;\n\n    KA_TRACE(10, (\"__kmp_launch_monitor: #5 terminate sig=%d\\n\",\n                  __kmp_global.g.g_abort));\n\n    /* terminate the OpenMP worker threads */\n    /* TODO this is not valid for sibling threads!!\n     * the uber master might not be 0 anymore.. */\n    for (gtid = 1; gtid < __kmp_threads_capacity; ++gtid)\n      __kmp_terminate_thread(gtid);\n\n    __kmp_cleanup();\n\n    KA_TRACE(10, (\"__kmp_launch_monitor: #6 raise sig=%d\\n\",\n                  __kmp_global.g.g_abort));\n\n    if (__kmp_global.g.g_abort > 0)\n      raise(__kmp_global.g.g_abort);\n  }\n\n  KA_TRACE(10, (\"__kmp_launch_monitor: #7 exit\\n\"));\n\n  return thr;\n}\n#endif // KMP_USE_MONITOR\n\nvoid __kmp_create_worker(int gtid, kmp_info_t *th, size_t stack_size) {\n#if !CHARM_OMP\n  pthread_t handle;\n  pthread_attr_t thread_attr;\n  int status;\n#endif\n  th->th.th_info.ds.ds_gtid = gtid;\n#if CHARM_OMP\n    th->th.th_info.ds.ds_thread = CthCreate((CthVoidFn)__kmp_launch_worker, (void *)th, stack_size);\n    \n    if (th->th.th_info.ds.ds_tid == 0)\n      CthSetSuspendable(th->th.th_info.ds.ds_thread,0);\n\n    CthSetStrategyWorkStealing(th->th.th_info.ds.ds_thread);\n    KA_TRACE(10, (\"Thread created: %p\\n\", th->th.th_info.ds.ds_thread));\n#else // !CHARM_OMP\n#if KMP_STATS_ENABLED\n  // sets up worker thread stats\n  __kmp_acquire_tas_lock(&__kmp_stats_lock, gtid);\n\n  // th->th.th_stats is used to transfer thread-specific stats-pointer to\n  // __kmp_launch_worker. So when thread is created (goes into\n  // __kmp_launch_worker) it will set its __thread local pointer to\n  // th->th.th_stats\n  if (!KMP_UBER_GTID(gtid)) {\n    th->th.th_stats = __kmp_stats_list->push_back(gtid);\n  } else {\n    // For root threads, __kmp_stats_thread_ptr is set in __kmp_register_root(),\n    // so set the th->th.th_stats field to it.\n    th->th.th_stats = __kmp_stats_thread_ptr;\n  }\n  __kmp_release_tas_lock(&__kmp_stats_lock, gtid);\n\n#endif // KMP_STATS_ENABLED\n\n  if (KMP_UBER_GTID(gtid)) {\n    KA_TRACE(10, (\"__kmp_create_worker: uber thread (%d)\\n\", gtid));\n    th->th.th_info.ds.ds_thread = pthread_self();\n    __kmp_set_stack_info(gtid, th);\n    __kmp_check_stack_overlap(th);\n    return;\n  }\n\n  KA_TRACE(10, (\"__kmp_create_worker: try to create thread (%d)\\n\", gtid));\n\n  KMP_MB(); /* Flush all pending memory write invalidates.  */\n\n#ifdef KMP_THREAD_ATTR\n  status = pthread_attr_init(&thread_attr);\n  if (status != 0) {\n    __kmp_fatal(KMP_MSG(CantInitThreadAttrs), KMP_ERR(status), __kmp_msg_null);\n  }\n  status = pthread_attr_setdetachstate(&thread_attr, PTHREAD_CREATE_JOINABLE);\n  if (status != 0) {\n    __kmp_fatal(KMP_MSG(CantSetWorkerState), KMP_ERR(status), __kmp_msg_null);\n  }\n\n  /* Set stack size for this thread now.\n     The multiple of 2 is there because on some machines, requesting an unusual\n     stacksize causes the thread to have an offset before the dummy alloca()\n     takes place to create the offset.  Since we want the user to have a\n     sufficient stacksize AND support a stack offset, we alloca() twice the\n     offset so that the upcoming alloca() does not eliminate any premade offset,\n     and also gives the user the stack space they requested for all threads */\n  stack_size += gtid * __kmp_stkoffset * 2;\n\n  KA_TRACE(10, (\"__kmp_create_worker: T#%d, default stacksize = %lu bytes, \"\n                \"__kmp_stksize = %lu bytes, final stacksize = %lu bytes\\n\",\n                gtid, KMP_DEFAULT_STKSIZE, __kmp_stksize, stack_size));\n\n#ifdef _POSIX_THREAD_ATTR_STACKSIZE\n  status = pthread_attr_setstacksize(&thread_attr, stack_size);\n#ifdef KMP_BACKUP_STKSIZE\n  if (status != 0) {\n    if (!__kmp_env_stksize) {\n      stack_size = KMP_BACKUP_STKSIZE + gtid * __kmp_stkoffset;\n      __kmp_stksize = KMP_BACKUP_STKSIZE;\n      KA_TRACE(10, (\"__kmp_create_worker: T#%d, default stacksize = %lu bytes, \"\n                    \"__kmp_stksize = %lu bytes, (backup) final stacksize = %lu \"\n                    \"bytes\\n\",\n                    gtid, KMP_DEFAULT_STKSIZE, __kmp_stksize, stack_size));\n      status = pthread_attr_setstacksize(&thread_attr, stack_size);\n    }\n  }\n#endif /* KMP_BACKUP_STKSIZE */\n  if (status != 0) {\n    __kmp_fatal(KMP_MSG(CantSetWorkerStackSize, stack_size), KMP_ERR(status),\n                KMP_HNT(ChangeWorkerStackSize), __kmp_msg_null);\n  }\n#endif /* _POSIX_THREAD_ATTR_STACKSIZE */\n\n#endif /* KMP_THREAD_ATTR */\n\n  status =\n      pthread_create(&handle, &thread_attr, __kmp_launch_worker, (void *)th);\n  if (status != 0 || !handle) { // ??? Why do we check handle??\n#ifdef _POSIX_THREAD_ATTR_STACKSIZE\n    if (status == EINVAL) {\n      __kmp_fatal(KMP_MSG(CantSetWorkerStackSize, stack_size), KMP_ERR(status),\n                  KMP_HNT(IncreaseWorkerStackSize), __kmp_msg_null);\n    }\n    if (status == ENOMEM) {\n      __kmp_fatal(KMP_MSG(CantSetWorkerStackSize, stack_size), KMP_ERR(status),\n                  KMP_HNT(DecreaseWorkerStackSize), __kmp_msg_null);\n    }\n#endif /* _POSIX_THREAD_ATTR_STACKSIZE */\n    if (status == EAGAIN) {\n      __kmp_fatal(KMP_MSG(NoResourcesForWorkerThread), KMP_ERR(status),\n                  KMP_HNT(Decrease_NUM_THREADS), __kmp_msg_null);\n    }\n    KMP_SYSFAIL(\"pthread_create\", status);\n  }\n\n  th->th.th_info.ds.ds_thread = handle;\n\n#ifdef KMP_THREAD_ATTR\n  status = pthread_attr_destroy(&thread_attr);\n  if (status) {\n    kmp_msg_t err_code = KMP_ERR(status);\n    __kmp_msg(kmp_ms_warning, KMP_MSG(CantDestroyThreadAttrs), err_code,\n              __kmp_msg_null);\n    if (__kmp_generate_warnings == kmp_warnings_off) {\n      __kmp_str_free(&err_code.str);\n    }\n  }\n#endif /* KMP_THREAD_ATTR */\n#endif /* CHARM_OMP*/\n  KMP_MB(); /* Flush all pending memory write invalidates.  */\n\n  KA_TRACE(10, (\"__kmp_create_worker: done creating thread (%d)\\n\", gtid));\n\n} // __kmp_create_worker\n\n#if KMP_USE_MONITOR\nvoid __kmp_create_monitor(kmp_info_t *th) {\n#if !CHARM_OMP\n  pthread_t handle;\n  pthread_attr_t thread_attr;\n  size_t size;\n  int status;\n  int auto_adj_size = FALSE;\n\n  if (__kmp_dflt_blocktime == KMP_MAX_BLOCKTIME) {\n    // We don't need monitor thread in case of MAX_BLOCKTIME\n    KA_TRACE(10, (\"__kmp_create_monitor: skipping monitor thread because of \"\n                  \"MAX blocktime\\n\"));\n    th->th.th_info.ds.ds_tid = 0; // this makes reap_monitor no-op\n    th->th.th_info.ds.ds_gtid = 0;\n    return;\n  }\n  KA_TRACE(10, (\"__kmp_create_monitor: try to create monitor\\n\"));\n\n  KMP_MB(); /* Flush all pending memory write invalidates.  */\n\n  th->th.th_info.ds.ds_tid = KMP_GTID_MONITOR;\n  th->th.th_info.ds.ds_gtid = KMP_GTID_MONITOR;\n#if KMP_REAL_TIME_FIX\n  TCW_4(__kmp_global.g.g_time.dt.t_value,\n        -1); // Will use it for synchronization a bit later.\n#else\n  TCW_4(__kmp_global.g.g_time.dt.t_value, 0);\n#endif // KMP_REAL_TIME_FIX\n\n#ifdef KMP_THREAD_ATTR\n  if (__kmp_monitor_stksize == 0) {\n    __kmp_monitor_stksize = KMP_DEFAULT_MONITOR_STKSIZE;\n    auto_adj_size = TRUE;\n  }\n  status = pthread_attr_init(&thread_attr);\n  if (status != 0) {\n    __kmp_fatal(KMP_MSG(CantInitThreadAttrs), KMP_ERR(status), __kmp_msg_null);\n  }\n  status = pthread_attr_setdetachstate(&thread_attr, PTHREAD_CREATE_JOINABLE);\n  if (status != 0) {\n    __kmp_fatal(KMP_MSG(CantSetMonitorState), KMP_ERR(status), __kmp_msg_null);\n  }\n\n#ifdef _POSIX_THREAD_ATTR_STACKSIZE\n  status = pthread_attr_getstacksize(&thread_attr, &size);\n  KMP_CHECK_SYSFAIL(\"pthread_attr_getstacksize\", status);\n#else\n  size = __kmp_sys_min_stksize;\n#endif /* _POSIX_THREAD_ATTR_STACKSIZE */\n#endif /* KMP_THREAD_ATTR */\n\n  if (__kmp_monitor_stksize == 0) {\n    __kmp_monitor_stksize = KMP_DEFAULT_MONITOR_STKSIZE;\n  }\n  if (__kmp_monitor_stksize < __kmp_sys_min_stksize) {\n    __kmp_monitor_stksize = __kmp_sys_min_stksize;\n  }\n\n  KA_TRACE(10, (\"__kmp_create_monitor: default stacksize = %lu bytes,\"\n                \"requested stacksize = %lu bytes\\n\",\n                size, __kmp_monitor_stksize));\n\nretry:\n\n/* Set stack size for this thread now. */\n#ifdef _POSIX_THREAD_ATTR_STACKSIZE\n  KA_TRACE(10, (\"__kmp_create_monitor: setting stacksize = %lu bytes,\",\n                __kmp_monitor_stksize));\n  status = pthread_attr_setstacksize(&thread_attr, __kmp_monitor_stksize);\n  if (status != 0) {\n    if (auto_adj_size) {\n      __kmp_monitor_stksize *= 2;\n      goto retry;\n    }\n    kmp_msg_t err_code = KMP_ERR(status);\n    __kmp_msg(kmp_ms_warning, // should this be fatal?  BB\n              KMP_MSG(CantSetMonitorStackSize, (long int)__kmp_monitor_stksize),\n              err_code, KMP_HNT(ChangeMonitorStackSize), __kmp_msg_null);\n    if (__kmp_generate_warnings == kmp_warnings_off) {\n      __kmp_str_free(&err_code.str);\n    }\n  }\n#endif /* _POSIX_THREAD_ATTR_STACKSIZE */\n\n  status =\n      pthread_create(&handle, &thread_attr, __kmp_launch_monitor, (void *)th);\n\n  if (status != 0) {\n#ifdef _POSIX_THREAD_ATTR_STACKSIZE\n    if (status == EINVAL) {\n      if (auto_adj_size && (__kmp_monitor_stksize < (size_t)0x40000000)) {\n        __kmp_monitor_stksize *= 2;\n        goto retry;\n      }\n      __kmp_fatal(KMP_MSG(CantSetMonitorStackSize, __kmp_monitor_stksize),\n                  KMP_ERR(status), KMP_HNT(IncreaseMonitorStackSize),\n                  __kmp_msg_null);\n    }\n    if (status == ENOMEM) {\n      __kmp_fatal(KMP_MSG(CantSetMonitorStackSize, __kmp_monitor_stksize),\n                  KMP_ERR(status), KMP_HNT(DecreaseMonitorStackSize),\n                  __kmp_msg_null);\n    }\n#endif /* _POSIX_THREAD_ATTR_STACKSIZE */\n    if (status == EAGAIN) {\n      __kmp_fatal(KMP_MSG(NoResourcesForMonitorThread), KMP_ERR(status),\n                  KMP_HNT(DecreaseNumberOfThreadsInUse), __kmp_msg_null);\n    }\n    KMP_SYSFAIL(\"pthread_create\", status);\n  }\n\n  th->th.th_info.ds.ds_thread = handle;\n\n#if KMP_REAL_TIME_FIX\n  // Wait for the monitor thread is really started and set its *priority*.\n  KMP_DEBUG_ASSERT(sizeof(kmp_uint32) ==\n                   sizeof(__kmp_global.g.g_time.dt.t_value));\n  __kmp_wait_yield_4((kmp_uint32 volatile *)&__kmp_global.g.g_time.dt.t_value,\n                     -1, &__kmp_neq_4, NULL);\n#endif // KMP_REAL_TIME_FIX\n\n#ifdef KMP_THREAD_ATTR\n  status = pthread_attr_destroy(&thread_attr);\n  if (status != 0) {\n    kmp_msg_t err_code = KMP_ERR(status);\n    __kmp_msg(kmp_ms_warning, KMP_MSG(CantDestroyThreadAttrs), err_code,\n              __kmp_msg_null);\n    if (__kmp_generate_warnings == kmp_warnings_off) {\n      __kmp_str_free(&err_code.str);\n    }\n  }\n#endif\n\n  KMP_MB(); /* Flush all pending memory write invalidates.  */\n\n  KA_TRACE(10, (\"__kmp_create_monitor: monitor created %#.8lx\\n\",\n                th->th.th_info.ds.ds_thread));\n#endif // CHARM_OMP\n} // __kmp_create_monitor\n#endif // KMP_USE_MONITOR\n\nvoid __kmp_exit_thread(int exit_status) {\n  pthread_exit((void *)(intptr_t)exit_status);\n} // __kmp_exit_thread\n\n#if KMP_USE_MONITOR\nvoid __kmp_resume_monitor();\n\nvoid __kmp_reap_monitor(kmp_info_t *th) {\n#if !CHARM_OMP\n  int status;\n  void *exit_val;\n\n  KA_TRACE(10, (\"__kmp_reap_monitor: try to reap monitor thread with handle\"\n                \" %#.8lx\\n\",\n                th->th.th_info.ds.ds_thread));\n\n  // If monitor has been created, its tid and gtid should be KMP_GTID_MONITOR.\n  // If both tid and gtid are 0, it means the monitor did not ever start.\n  // If both tid and gtid are KMP_GTID_DNE, the monitor has been shut down.\n  KMP_DEBUG_ASSERT(th->th.th_info.ds.ds_tid == th->th.th_info.ds.ds_gtid);\n  if (th->th.th_info.ds.ds_gtid != KMP_GTID_MONITOR) {\n    KA_TRACE(10, (\"__kmp_reap_monitor: monitor did not start, returning\\n\"));\n    return;\n  }\n\n  KMP_MB(); /* Flush all pending memory write invalidates.  */\n\n  /* First, check to see whether the monitor thread exists to wake it up. This\n     is to avoid performance problem when the monitor sleeps during\n     blocktime-size interval */\n\n  status = pthread_kill(th->th.th_info.ds.ds_thread, 0);\n  if (status != ESRCH) {\n    __kmp_resume_monitor(); // Wake up the monitor thread\n  }\n  KA_TRACE(10, (\"__kmp_reap_monitor: try to join with monitor\\n\"));\n  status = pthread_join(th->th.th_info.ds.ds_thread, &exit_val);\n  if (exit_val != th) {\n    __kmp_fatal(KMP_MSG(ReapMonitorError), KMP_ERR(status), __kmp_msg_null);\n  }\n\n  th->th.th_info.ds.ds_tid = KMP_GTID_DNE;\n  th->th.th_info.ds.ds_gtid = KMP_GTID_DNE;\n\n  KA_TRACE(10, (\"__kmp_reap_monitor: done reaping monitor thread with handle\"\n                \" %#.8lx\\n\",\n                th->th.th_info.ds.ds_thread));\n\n  KMP_MB(); /* Flush all pending memory write invalidates.  */\n#endif // CHARM_OMP\n}\n#endif // KMP_USE_MONITOR\n\nvoid __kmp_reap_worker(kmp_info_t *th) {\n#if CHARM_OMP\n    CthFree(th->th.th_info.ds.ds_thread);\n#else\n  int status;\n  void *exit_val;\n\n  KMP_MB(); /* Flush all pending memory write invalidates.  */\n\n  KA_TRACE(\n      10, (\"__kmp_reap_worker: try to reap T#%d\\n\", th->th.th_info.ds.ds_gtid));\n\n  status = pthread_join(th->th.th_info.ds.ds_thread, &exit_val);\n#ifdef KMP_DEBUG\n  /* Don't expose these to the user until we understand when they trigger */\n  if (status != 0) {\n    __kmp_fatal(KMP_MSG(ReapWorkerError), KMP_ERR(status), __kmp_msg_null);\n  }\n  if (exit_val != th) {\n    KA_TRACE(10, (\"__kmp_reap_worker: worker T#%d did not reap properly, \"\n                  \"exit_val = %p\\n\",\n                  th->th.th_info.ds.ds_gtid, exit_val));\n  }\n#endif /* KMP_DEBUG */\n\n  KA_TRACE(10, (\"__kmp_reap_worker: done reaping T#%d\\n\",\n                th->th.th_info.ds.ds_gtid));\n\n  KMP_MB(); /* Flush all pending memory write invalidates.  */\n#endif //CHARM_OMP\n}\n\n#if KMP_HANDLE_SIGNALS\n\nstatic void __kmp_null_handler(int signo) {\n  //  Do nothing, for doing SIG_IGN-type actions.\n} // __kmp_null_handler\n\nstatic void __kmp_team_handler(int signo) {\n  if (__kmp_global.g.g_abort == 0) {\n/* Stage 1 signal handler, let's shut down all of the threads */\n#ifdef KMP_DEBUG\n    __kmp_debug_printf(\"__kmp_team_handler: caught signal = %d\\n\", signo);\n#endif\n    switch (signo) {\n    case SIGHUP:\n    case SIGINT:\n    case SIGQUIT:\n    case SIGILL:\n    case SIGABRT:\n    case SIGFPE:\n    case SIGBUS:\n    case SIGSEGV:\n#ifdef SIGSYS\n    case SIGSYS:\n#endif\n    case SIGTERM:\n      if (__kmp_debug_buf) {\n        __kmp_dump_debug_buffer();\n      }\n      KMP_MB(); // Flush all pending memory write invalidates.\n      TCW_4(__kmp_global.g.g_abort, signo);\n      KMP_MB(); // Flush all pending memory write invalidates.\n      TCW_4(__kmp_global.g.g_done, TRUE);\n      KMP_MB(); // Flush all pending memory write invalidates.\n      break;\n    default:\n#ifdef KMP_DEBUG\n      __kmp_debug_printf(\"__kmp_team_handler: unknown signal type\");\n#endif\n      break;\n    }\n  }\n} // __kmp_team_handler\n\nstatic void __kmp_sigaction(int signum, const struct sigaction *act,\n                            struct sigaction *oldact) {\n  int rc = sigaction(signum, act, oldact);\n  KMP_CHECK_SYSFAIL_ERRNO(\"sigaction\", rc);\n}\n\nstatic void __kmp_install_one_handler(int sig, sig_func_t handler_func,\n                                      int parallel_init) {\n  KMP_MB(); // Flush all pending memory write invalidates.\n  KB_TRACE(60,\n           (\"__kmp_install_one_handler( %d, ..., %d )\\n\", sig, parallel_init));\n  if (parallel_init) {\n    struct sigaction new_action;\n    struct sigaction old_action;\n    new_action.sa_handler = handler_func;\n    new_action.sa_flags = 0;\n    sigfillset(&new_action.sa_mask);\n    __kmp_sigaction(sig, &new_action, &old_action);\n    if (old_action.sa_handler == __kmp_sighldrs[sig].sa_handler) {\n      sigaddset(&__kmp_sigset, sig);\n    } else {\n      // Restore/keep user's handler if one previously installed.\n      __kmp_sigaction(sig, &old_action, NULL);\n    }\n  } else {\n    // Save initial/system signal handlers to see if user handlers installed.\n    __kmp_sigaction(sig, NULL, &__kmp_sighldrs[sig]);\n  }\n  KMP_MB(); // Flush all pending memory write invalidates.\n} // __kmp_install_one_handler\n\nstatic void __kmp_remove_one_handler(int sig) {\n  KB_TRACE(60, (\"__kmp_remove_one_handler( %d )\\n\", sig));\n  if (sigismember(&__kmp_sigset, sig)) {\n    struct sigaction old;\n    KMP_MB(); // Flush all pending memory write invalidates.\n    __kmp_sigaction(sig, &__kmp_sighldrs[sig], &old);\n    if ((old.sa_handler != __kmp_team_handler) &&\n        (old.sa_handler != __kmp_null_handler)) {\n      // Restore the users signal handler.\n      KB_TRACE(10, (\"__kmp_remove_one_handler: oops, not our handler, \"\n                    \"restoring: sig=%d\\n\",\n                    sig));\n      __kmp_sigaction(sig, &old, NULL);\n    }\n    sigdelset(&__kmp_sigset, sig);\n    KMP_MB(); // Flush all pending memory write invalidates.\n  }\n} // __kmp_remove_one_handler\n\nvoid __kmp_install_signals(int parallel_init) {\n  KB_TRACE(10, (\"__kmp_install_signals( %d )\\n\", parallel_init));\n  if (__kmp_handle_signals || !parallel_init) {\n    // If ! parallel_init, we do not install handlers, just save original\n    // handlers. Let us do it even __handle_signals is 0.\n    sigemptyset(&__kmp_sigset);\n    __kmp_install_one_handler(SIGHUP, __kmp_team_handler, parallel_init);\n    __kmp_install_one_handler(SIGINT, __kmp_team_handler, parallel_init);\n    __kmp_install_one_handler(SIGQUIT, __kmp_team_handler, parallel_init);\n    __kmp_install_one_handler(SIGILL, __kmp_team_handler, parallel_init);\n    __kmp_install_one_handler(SIGABRT, __kmp_team_handler, parallel_init);\n    __kmp_install_one_handler(SIGFPE, __kmp_team_handler, parallel_init);\n    __kmp_install_one_handler(SIGBUS, __kmp_team_handler, parallel_init);\n    __kmp_install_one_handler(SIGSEGV, __kmp_team_handler, parallel_init);\n#ifdef SIGSYS\n    __kmp_install_one_handler(SIGSYS, __kmp_team_handler, parallel_init);\n#endif // SIGSYS\n    __kmp_install_one_handler(SIGTERM, __kmp_team_handler, parallel_init);\n#ifdef SIGPIPE\n    __kmp_install_one_handler(SIGPIPE, __kmp_team_handler, parallel_init);\n#endif // SIGPIPE\n  }\n} // __kmp_install_signals\n\nvoid __kmp_remove_signals(void) {\n  int sig;\n  KB_TRACE(10, (\"__kmp_remove_signals()\\n\"));\n  for (sig = 1; sig < NSIG; ++sig) {\n    __kmp_remove_one_handler(sig);\n  }\n} // __kmp_remove_signals\n\n#endif // KMP_HANDLE_SIGNALS\n\nvoid __kmp_enable(int new_state) {\n#ifdef KMP_CANCEL_THREADS\n  int status, old_state;\n  status = pthread_setcancelstate(new_state, &old_state);\n  KMP_CHECK_SYSFAIL(\"pthread_setcancelstate\", status);\n  KMP_DEBUG_ASSERT(old_state == PTHREAD_CANCEL_DISABLE);\n#endif\n}\n\nvoid __kmp_disable(int *old_state) {\n#ifdef KMP_CANCEL_THREADS\n  int status;\n  status = pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, old_state);\n  KMP_CHECK_SYSFAIL(\"pthread_setcancelstate\", status);\n#endif\n}\n\nstatic void __kmp_atfork_prepare(void) { /*  nothing to do  */\n}\n\nstatic void __kmp_atfork_parent(void) { /*  nothing to do  */\n}\n\n/* Reset the library so execution in the child starts \"all over again\" with\n   clean data structures in initial states.  Don't worry about freeing memory\n   allocated by parent, just abandon it to be safe. */\nstatic void __kmp_atfork_child(void) {\n  /* TODO make sure this is done right for nested/sibling */\n  // ATT:  Memory leaks are here? TODO: Check it and fix.\n  /* KMP_ASSERT( 0 ); */\n\n  ++__kmp_fork_count;\n\n#if KMP_AFFINITY_SUPPORTED\n#if KMP_OS_LINUX\n  // reset the affinity in the child to the initial thread\n  // affinity in the parent\n  kmp_set_thread_affinity_mask_initial();\n#endif\n  // Set default not to bind threads tightly in the child (we\u2019re expecting\n  // over-subscription after the fork and this can improve things for\n  // scripting languages that use OpenMP inside process-parallel code).\n  __kmp_affinity_type = affinity_none;\n#if OMP_40_ENABLED\n  if (__kmp_nested_proc_bind.bind_types != NULL) {\n    __kmp_nested_proc_bind.bind_types[0] = proc_bind_false;\n  }\n#endif // OMP_40_ENABLED\n#endif // KMP_AFFINITY_SUPPORTED\n\n  __kmp_init_runtime = FALSE;\n#if KMP_USE_MONITOR\n  __kmp_init_monitor = 0;\n#endif\n  __kmp_init_parallel = FALSE;\n  __kmp_init_middle = FALSE;\n  __kmp_init_serial = FALSE;\n  TCW_4(__kmp_init_gtid, FALSE);\n  __kmp_init_common = FALSE;\n\n  TCW_4(__kmp_init_user_locks, FALSE);\n#if !KMP_USE_DYNAMIC_LOCK\n  __kmp_user_lock_table.used = 1;\n  __kmp_user_lock_table.allocated = 0;\n  __kmp_user_lock_table.table = NULL;\n  __kmp_lock_blocks = NULL;\n#endif\n\n  __kmp_all_nth = 0;\n  TCW_4(__kmp_nth, 0);\n\n  /* Must actually zero all the *cache arguments passed to __kmpc_threadprivate\n     here so threadprivate doesn't use stale data */\n  KA_TRACE(10, (\"__kmp_atfork_child: checking cache address list %p\\n\",\n                __kmp_threadpriv_cache_list));\n\n  while (__kmp_threadpriv_cache_list != NULL) {\n\n    if (*__kmp_threadpriv_cache_list->addr != NULL) {\n      KC_TRACE(50, (\"__kmp_atfork_child: zeroing cache at address %p\\n\",\n                    &(*__kmp_threadpriv_cache_list->addr)));\n\n      *__kmp_threadpriv_cache_list->addr = NULL;\n    }\n    __kmp_threadpriv_cache_list = __kmp_threadpriv_cache_list->next;\n  }\n\n  __kmp_init_runtime = FALSE;\n\n  /* reset statically initialized locks */\n  __kmp_init_bootstrap_lock(&__kmp_initz_lock);\n  __kmp_init_bootstrap_lock(&__kmp_stdio_lock);\n  __kmp_init_bootstrap_lock(&__kmp_console_lock);\n\n  /* This is necessary to make sure no stale data is left around */\n  /* AC: customers complain that we use unsafe routines in the atfork\n     handler. Mathworks: dlsym() is unsafe. We call dlsym and dlopen\n     in dynamic_link when check the presence of shared tbbmalloc library.\n     Suggestion is to make the library initialization lazier, similar\n     to what done for __kmpc_begin(). */\n  // TODO: synchronize all static initializations with regular library\n  //       startup; look at kmp_global.cpp and etc.\n  //__kmp_internal_begin ();\n}\n\nvoid __kmp_register_atfork(void) {\n  if (__kmp_need_register_atfork) {\n    int status = pthread_atfork(__kmp_atfork_prepare, __kmp_atfork_parent,\n                                __kmp_atfork_child);\n    KMP_CHECK_SYSFAIL(\"pthread_atfork\", status);\n    __kmp_need_register_atfork = FALSE;\n  }\n}\n\nvoid __kmp_suspend_initialize(void) {\n  int status;\n  status = pthread_mutexattr_init(&__kmp_suspend_mutex_attr);\n  KMP_CHECK_SYSFAIL(\"pthread_mutexattr_init\", status);\n  status = pthread_condattr_init(&__kmp_suspend_cond_attr);\n  KMP_CHECK_SYSFAIL(\"pthread_condattr_init\", status);\n}\n\nstatic void __kmp_suspend_initialize_thread(kmp_info_t *th) {\n  ANNOTATE_HAPPENS_AFTER(&th->th.th_suspend_init_count);\n  if (th->th.th_suspend_init_count <= __kmp_fork_count) {\n    /* this means we haven't initialized the suspension pthread objects for this\n       thread in this instance of the process */\n    int status;\n    status = pthread_cond_init(&th->th.th_suspend_cv.c_cond,\n                               &__kmp_suspend_cond_attr);\n    KMP_CHECK_SYSFAIL(\"pthread_cond_init\", status);\n    status = pthread_mutex_init(&th->th.th_suspend_mx.m_mutex,\n                                &__kmp_suspend_mutex_attr);\n    KMP_CHECK_SYSFAIL(\"pthread_mutex_init\", status);\n    *(volatile int *)&th->th.th_suspend_init_count = __kmp_fork_count + 1;\n    ANNOTATE_HAPPENS_BEFORE(&th->th.th_suspend_init_count);\n  }\n}\n\nvoid __kmp_suspend_uninitialize_thread(kmp_info_t *th) {\n  if (th->th.th_suspend_init_count > __kmp_fork_count) {\n    /* this means we have initialize the suspension pthread objects for this\n       thread in this instance of the process */\n    int status;\n\n    status = pthread_cond_destroy(&th->th.th_suspend_cv.c_cond);\n    if (status != 0 && status != EBUSY) {\n      KMP_SYSFAIL(\"pthread_cond_destroy\", status);\n    }\n    status = pthread_mutex_destroy(&th->th.th_suspend_mx.m_mutex);\n    if (status != 0 && status != EBUSY) {\n      KMP_SYSFAIL(\"pthread_mutex_destroy\", status);\n    }\n    --th->th.th_suspend_init_count;\n    KMP_DEBUG_ASSERT(th->th.th_suspend_init_count == __kmp_fork_count);\n  }\n}\n\n/* This routine puts the calling thread to sleep after setting the\n   sleep bit for the indicated flag variable to true. */\ntemplate <class C>\nstatic inline void __kmp_suspend_template(int th_gtid, C *flag) {\n  KMP_TIME_DEVELOPER_PARTITIONED_BLOCK(USER_suspend);\n  kmp_info_t *th = __kmp_threads[th_gtid];\n  int status;\n  typename C::flag_t old_spin;\n\n  KF_TRACE(30, (\"__kmp_suspend_template: T#%d enter for flag = %p\\n\", th_gtid,\n                flag->get()));\n#if !CHARM_OMP\n  __kmp_suspend_initialize_thread(th);\n\n  status = pthread_mutex_lock(&th->th.th_suspend_mx.m_mutex);\n  KMP_CHECK_SYSFAIL(\"pthread_mutex_lock\", status);\n#endif\n  KF_TRACE(10, (\"__kmp_suspend_template: T#%d setting sleep bit for spin(%p)\\n\",\n                th_gtid, flag->get()));\n\n  /* TODO: shouldn't this use release semantics to ensure that\n     __kmp_suspend_initialize_thread gets called first? */\n  old_spin = flag->set_sleeping();\n\n  KF_TRACE(5, (\"__kmp_suspend_template: T#%d set sleep bit for spin(%p)==%x,\"\n               \" was %x\\n\",\n               th_gtid, flag->get(), *(flag->get()), old_spin));\n#if CHARM_OMP\n  CthSetStrategySuspendedWorkStealing(th->th.th_info.ds.ds_thread);\n  KMP_TEST_THEN_DEC32((kmp_int32 *) &(th->th.th_team->t.t_num_barrier_counts));\n  //CmiMemoryAtomicDecrement(th->th.th_team->t.t_num_barrier_counts, memory_order_release); \n  //CmiMemoryWriteFence();\n\n  KF_TRACE( 5, ( \"__kmp_suspend_template: [%d] T#%d reduced barrier counts: %d, %p \\n\",CmiMyRank(),\n                     th_gtid, th->th.th_team->t.t_num_barrier_counts, &(th->th.th_team->t.t_num_barrier_counts)) );\n  KMP_MB();\n\n  if (CpvAccess(prevGtid) >=0) {\n#if KMP_TDATA_GTID\n    __kmp_gtid = CpvAccess(prevGtid);\n#endif\n    __kmp_gtid_set_specific(CpvAccess(prevGtid));\n  }\n  CthSuspend();\n  __kmp_gtid_set_specific(th_gtid);\n#if KMP_TDATA_GTID\n  __kmp_gtid = th_gtid;\n#endif\n  CharmOMPDebug( \"__kmp_suspend_template: T#%d is resumed \\n\",\n                     th_gtid);\n\n  KF_TRACE( 5, ( \"__kmp_suspend_template: T#%d is resumed \\n\",\n                     th_gtid) );\n#else\n  if (flag->done_check_val(old_spin)) {\n    old_spin = flag->unset_sleeping();\n    KF_TRACE(5, (\"__kmp_suspend_template: T#%d false alarm, reset sleep bit \"\n                 \"for spin(%p)\\n\",\n                 th_gtid, flag->get()));\n  } else {\n    /* Encapsulate in a loop as the documentation states that this may\n       \"with low probability\" return when the condition variable has\n       not been signaled or broadcast */\n    int deactivated = FALSE;\n    TCW_PTR(th->th.th_sleep_loc, (void *)flag);\n\n    while (flag->is_sleeping()) {\n#ifdef DEBUG_SUSPEND\n      char buffer[128];\n      __kmp_suspend_count++;\n      __kmp_print_cond(buffer, &th->th.th_suspend_cv);\n      __kmp_printf(\"__kmp_suspend_template: suspending T#%d: %s\\n\", th_gtid,\n                   buffer);\n#endif\n      // Mark the thread as no longer active (only in the first iteration of the\n      // loop).\n      if (!deactivated) {\n        th->th.th_active = FALSE;\n        if (th->th.th_active_in_pool) {\n          th->th.th_active_in_pool = FALSE;\n          KMP_TEST_THEN_DEC32(&__kmp_thread_pool_active_nth);\n          KMP_DEBUG_ASSERT(TCR_4(__kmp_thread_pool_active_nth) >= 0);\n        }\n        deactivated = TRUE;\n      }\n\n#if USE_SUSPEND_TIMEOUT\n      struct timespec now;\n      struct timeval tval;\n      int msecs;\n\n      status = gettimeofday(&tval, NULL);\n      KMP_CHECK_SYSFAIL_ERRNO(\"gettimeofday\", status);\n      TIMEVAL_TO_TIMESPEC(&tval, &now);\n\n      msecs = (4 * __kmp_dflt_blocktime) + 200;\n      now.tv_sec += msecs / 1000;\n      now.tv_nsec += (msecs % 1000) * 1000;\n\n      KF_TRACE(15, (\"__kmp_suspend_template: T#%d about to perform \"\n                    \"pthread_cond_timedwait\\n\",\n                    th_gtid));\n      status = pthread_cond_timedwait(&th->th.th_suspend_cv.c_cond,\n                                      &th->th.th_suspend_mx.m_mutex, &now);\n#else\n      KF_TRACE(15, (\"__kmp_suspend_template: T#%d about to perform\"\n                    \" pthread_cond_wait\\n\",\n                    th_gtid));\n      status = pthread_cond_wait(&th->th.th_suspend_cv.c_cond,\n                                 &th->th.th_suspend_mx.m_mutex);\n#endif\n\n      if ((status != 0) && (status != EINTR) && (status != ETIMEDOUT)) {\n        KMP_SYSFAIL(\"pthread_cond_wait\", status);\n      }\n#ifdef KMP_DEBUG\n      if (status == ETIMEDOUT) {\n        if (flag->is_sleeping()) {\n          KF_TRACE(100,\n                   (\"__kmp_suspend_template: T#%d timeout wakeup\\n\", th_gtid));\n        } else {\n          KF_TRACE(2, (\"__kmp_suspend_template: T#%d timeout wakeup, sleep bit \"\n                       \"not set!\\n\",\n                       th_gtid));\n        }\n      } else if (flag->is_sleeping()) {\n        KF_TRACE(100,\n                 (\"__kmp_suspend_template: T#%d spurious wakeup\\n\", th_gtid));\n      }\n#endif\n    } // while\n\n    // Mark the thread as active again (if it was previous marked as inactive)\n    if (deactivated) {\n      th->th.th_active = TRUE;\n      if (TCR_4(th->th.th_in_pool)) {\n        KMP_TEST_THEN_INC32(&__kmp_thread_pool_active_nth);\n        th->th.th_active_in_pool = TRUE;\n      }\n    }\n  }\n#endif // CHARM_OMP\n#ifdef DEBUG_SUSPEND\n  {\n    char buffer[128];\n    __kmp_print_cond(buffer, &th->th.th_suspend_cv);\n    __kmp_printf(\"__kmp_suspend_template: T#%d has awakened: %s\\n\", th_gtid,\n                 buffer);\n  }\n#endif\n#if !CHARM_OMP\n  status = pthread_mutex_unlock(&th->th.th_suspend_mx.m_mutex);\n  KMP_CHECK_SYSFAIL(\"pthread_mutex_unlock\", status);\n#endif\n  KF_TRACE(30, (\"__kmp_suspend_template: T#%d exit\\n\", th_gtid));\n}\n\nvoid __kmp_suspend_32(int th_gtid, kmp_flag_32 *flag) {\n  __kmp_suspend_template(th_gtid, flag);\n}\nvoid __kmp_suspend_64(int th_gtid, kmp_flag_64 *flag) {\n  __kmp_suspend_template(th_gtid, flag);\n}\nvoid __kmp_suspend_oncore(int th_gtid, kmp_flag_oncore *flag) {\n  __kmp_suspend_template(th_gtid, flag);\n}\n\n/* This routine signals the thread specified by target_gtid to wake up\n   after setting the sleep bit indicated by the flag argument to FALSE.\n   The target thread must already have called __kmp_suspend_template() */\ntemplate <class C>\nstatic inline void __kmp_resume_template(int target_gtid, C *flag) {\n  KMP_TIME_DEVELOPER_PARTITIONED_BLOCK(USER_resume);\n  kmp_info_t *th = __kmp_threads[target_gtid];\n  int status;\n\n#ifdef KMP_DEBUG\n  int gtid = TCR_4(__kmp_init_gtid) ? __kmp_get_gtid() : -1;\n#endif\n\n  KF_TRACE(30, (\"__kmp_resume_template: T#%d wants to wakeup T#%d enter\\n\",\n                gtid, target_gtid));\n  KMP_DEBUG_ASSERT(gtid != target_gtid);\n\n  __kmp_suspend_initialize_thread(th);\n\n  status = pthread_mutex_lock(&th->th.th_suspend_mx.m_mutex);\n  KMP_CHECK_SYSFAIL(\"pthread_mutex_lock\", status);\n\n  if (!flag) { // coming from __kmp_null_resume_wrapper\n    flag = (C *)CCAST(void *, th->th.th_sleep_loc);\n  }\n\n  // First, check if the flag is null or its type has changed. If so, someone\n  // else woke it up.\n  if (!flag || flag->get_type() != flag->get_ptr_type()) { // get_ptr_type\n    // simply shows what\n    // flag was cast to\n    KF_TRACE(5, (\"__kmp_resume_template: T#%d exiting, thread T#%d already \"\n                 \"awake: flag(%p)\\n\",\n                 gtid, target_gtid, NULL));\n    status = pthread_mutex_unlock(&th->th.th_suspend_mx.m_mutex);\n    KMP_CHECK_SYSFAIL(\"pthread_mutex_unlock\", status);\n    return;\n  } else { // if multiple threads are sleeping, flag should be internally\n    // referring to a specific thread here\n    typename C::flag_t old_spin = flag->unset_sleeping();\n    if (!flag->is_sleeping_val(old_spin)) {\n      KF_TRACE(5, (\"__kmp_resume_template: T#%d exiting, thread T#%d already \"\n                   \"awake: flag(%p): \"\n                   \"%u => %u\\n\",\n                   gtid, target_gtid, flag->get(), old_spin, *flag->get()));\n      status = pthread_mutex_unlock(&th->th.th_suspend_mx.m_mutex);\n      KMP_CHECK_SYSFAIL(\"pthread_mutex_unlock\", status);\n      return;\n    }\n    KF_TRACE(5, (\"__kmp_resume_template: T#%d about to wakeup T#%d, reset \"\n                 \"sleep bit for flag's loc(%p): \"\n                 \"%u => %u\\n\",\n                 gtid, target_gtid, flag->get(), old_spin, *flag->get()));\n  }\n  TCW_PTR(th->th.th_sleep_loc, NULL);\n\n#ifdef DEBUG_SUSPEND\n  {\n    char buffer[128];\n    __kmp_print_cond(buffer, &th->th.th_suspend_cv);\n    __kmp_printf(\"__kmp_resume_template: T#%d resuming T#%d: %s\\n\", gtid,\n                 target_gtid, buffer);\n  }\n#endif\n  status = pthread_cond_signal(&th->th.th_suspend_cv.c_cond);\n  KMP_CHECK_SYSFAIL(\"pthread_cond_signal\", status);\n  status = pthread_mutex_unlock(&th->th.th_suspend_mx.m_mutex);\n  KMP_CHECK_SYSFAIL(\"pthread_mutex_unlock\", status);\n  KF_TRACE(30, (\"__kmp_resume_template: T#%d exiting after signaling wake up\"\n                \" for T#%d\\n\",\n                gtid, target_gtid));\n}\n\nvoid __kmp_resume_32(int target_gtid, kmp_flag_32 *flag) {\n  __kmp_resume_template(target_gtid, flag);\n}\nvoid __kmp_resume_64(int target_gtid, kmp_flag_64 *flag) {\n  __kmp_resume_template(target_gtid, flag);\n}\nvoid __kmp_resume_oncore(int target_gtid, kmp_flag_oncore *flag) {\n  __kmp_resume_template(target_gtid, flag);\n}\n\n#if KMP_USE_MONITOR\nvoid __kmp_resume_monitor() {\n  KMP_TIME_DEVELOPER_PARTITIONED_BLOCK(USER_resume);\n  int status;\n#ifdef KMP_DEBUG\n  int gtid = TCR_4(__kmp_init_gtid) ? __kmp_get_gtid() : -1;\n  KF_TRACE(30, (\"__kmp_resume_monitor: T#%d wants to wakeup T#%d enter\\n\", gtid,\n                KMP_GTID_MONITOR));\n  KMP_DEBUG_ASSERT(gtid != KMP_GTID_MONITOR);\n#endif\n  status = pthread_mutex_lock(&__kmp_wait_mx.m_mutex);\n  KMP_CHECK_SYSFAIL(\"pthread_mutex_lock\", status);\n#ifdef DEBUG_SUSPEND\n  {\n    char buffer[128];\n    __kmp_print_cond(buffer, &__kmp_wait_cv.c_cond);\n    __kmp_printf(\"__kmp_resume_monitor: T#%d resuming T#%d: %s\\n\", gtid,\n                 KMP_GTID_MONITOR, buffer);\n  }\n#endif\n  status = pthread_cond_signal(&__kmp_wait_cv.c_cond);\n  KMP_CHECK_SYSFAIL(\"pthread_cond_signal\", status);\n  status = pthread_mutex_unlock(&__kmp_wait_mx.m_mutex);\n  KMP_CHECK_SYSFAIL(\"pthread_mutex_unlock\", status);\n  KF_TRACE(30, (\"__kmp_resume_monitor: T#%d exiting after signaling wake up\"\n                \" for T#%d\\n\",\n                gtid, KMP_GTID_MONITOR));\n}\n#endif // KMP_USE_MONITOR\n\nvoid __kmp_yield(int cond) {\n  if (!cond)\n    return;\n#if KMP_USE_MONITOR\n  if (!__kmp_yielding_on)\n    return;\n#else\n  if (__kmp_yield_cycle && !KMP_YIELD_NOW())\n    return;\n#endif\n  sched_yield();\n}\n\nvoid __kmp_gtid_set_specific(int gtid) {\n  if (__kmp_init_gtid) {\n    int status;\n    status = pthread_setspecific(__kmp_gtid_threadprivate_key,\n                                 (void *)(intptr_t)(gtid + 1));\n    KMP_CHECK_SYSFAIL(\"pthread_setspecific\", status);\n  } else {\n    KA_TRACE(50, (\"__kmp_gtid_set_specific: runtime shutdown, returning\\n\"));\n  }\n}\n\nint __kmp_gtid_get_specific() {\n  int gtid;\n  if (!__kmp_init_gtid) {\n    KA_TRACE(50, (\"__kmp_gtid_get_specific: runtime shutdown, returning \"\n                  \"KMP_GTID_SHUTDOWN\\n\"));\n    return KMP_GTID_SHUTDOWN;\n  }\n  gtid = (int)(size_t)pthread_getspecific(__kmp_gtid_threadprivate_key);\n  if (gtid == 0) {\n    gtid = KMP_GTID_DNE;\n  } else {\n    gtid--;\n  }\n  KA_TRACE(50, (\"__kmp_gtid_get_specific: key:%d gtid:%d\\n\",\n                __kmp_gtid_threadprivate_key, gtid));\n  return gtid;\n}\n\ndouble __kmp_read_cpu_time(void) {\n  /*clock_t   t;*/\n  struct tms buffer;\n\n  /*t =*/times(&buffer);\n\n  return (buffer.tms_utime + buffer.tms_cutime) / (double)CLOCKS_PER_SEC;\n}\n\nint __kmp_read_system_info(struct kmp_sys_info *info) {\n  int status;\n  struct rusage r_usage;\n\n  memset(info, 0, sizeof(*info));\n\n  status = getrusage(RUSAGE_SELF, &r_usage);\n  KMP_CHECK_SYSFAIL_ERRNO(\"getrusage\", status);\n\n  // The maximum resident set size utilized (in kilobytes)\n  info->maxrss = r_usage.ru_maxrss;\n  // The number of page faults serviced without any I/O\n  info->minflt = r_usage.ru_minflt;\n  // The number of page faults serviced that required I/O\n  info->majflt = r_usage.ru_majflt;\n  // The number of times a process was \"swapped\" out of memory\n  info->nswap = r_usage.ru_nswap;\n  // The number of times the file system had to perform input\n  info->inblock = r_usage.ru_inblock;\n  // The number of times the file system had to perform output\n  info->oublock = r_usage.ru_oublock;\n  // The number of times a context switch was voluntarily\n  info->nvcsw = r_usage.ru_nvcsw;\n  // The number of times a context switch was forced\n  info->nivcsw = r_usage.ru_nivcsw;\n\n  return (status != 0);\n}\n\nvoid __kmp_read_system_time(double *delta) {\n  double t_ns;\n  struct timeval tval;\n  struct timespec stop;\n  int status;\n\n  status = gettimeofday(&tval, NULL);\n  KMP_CHECK_SYSFAIL_ERRNO(\"gettimeofday\", status);\n  TIMEVAL_TO_TIMESPEC(&tval, &stop);\n  t_ns = TS2NS(stop) - TS2NS(__kmp_sys_timer_data.start);\n  *delta = (t_ns * 1e-9);\n}\n\nvoid __kmp_clear_system_time(void) {\n  struct timeval tval;\n  int status;\n  status = gettimeofday(&tval, NULL);\n  KMP_CHECK_SYSFAIL_ERRNO(\"gettimeofday\", status);\n  TIMEVAL_TO_TIMESPEC(&tval, &__kmp_sys_timer_data.start);\n}\n\nstatic int __kmp_get_xproc(void) {\n\n  int r = 0;\n#if CHARM_OMP\n  r = CmiMyNodeSize();\n#else\n#if KMP_OS_LINUX || KMP_OS_FREEBSD || KMP_OS_NETBSD\n\n  r = sysconf(_SC_NPROCESSORS_ONLN);\n\n#elif KMP_OS_DARWIN\n\n  // Bug C77011 High \"OpenMP Threads and number of active cores\".\n\n  // Find the number of available CPUs.\n  kern_return_t rc;\n  host_basic_info_data_t info;\n  mach_msg_type_number_t num = HOST_BASIC_INFO_COUNT;\n  rc = host_info(mach_host_self(), HOST_BASIC_INFO, (host_info_t)&info, &num);\n  if (rc == 0 && num == HOST_BASIC_INFO_COUNT) {\n    // Cannot use KA_TRACE() here because this code works before trace support\n    // is initialized.\n    r = info.avail_cpus;\n  } else {\n    KMP_WARNING(CantGetNumAvailCPU);\n    KMP_INFORM(AssumedNumCPU);\n  }\n\n#else\n\n#error \"Unknown or unsupported OS.\"\n\n#endif\n#endif // CHARM_OMP\n  return r > 0 ? r : 2; /* guess value of 2 if OS told us 0 */\n\n} // __kmp_get_xproc\n\nint __kmp_read_from_file(char const *path, char const *format, ...) {\n  int result;\n  va_list args;\n\n  va_start(args, format);\n  FILE *f = fopen(path, \"rb\");\n  if (f == NULL)\n    return 0;\n  result = vfscanf(f, format, args);\n  fclose(f);\n\n  return result;\n}\n\nvoid __kmp_runtime_initialize(void) {\n  int status;\n  pthread_mutexattr_t mutex_attr;\n  pthread_condattr_t cond_attr;\n\n  if (__kmp_init_runtime) {\n    return;\n  }\n\n#if (KMP_ARCH_X86 || KMP_ARCH_X86_64)\n  if (!__kmp_cpuinfo.initialized) {\n    __kmp_query_cpuid(&__kmp_cpuinfo);\n  }\n#endif /* KMP_ARCH_X86 || KMP_ARCH_X86_64 */\n\n  __kmp_xproc = __kmp_get_xproc();\n\n  if (sysconf(_SC_THREADS)) {\n\n    /* Query the maximum number of threads */\n    __kmp_sys_max_nth = sysconf(_SC_THREAD_THREADS_MAX);\n    if (__kmp_sys_max_nth == -1) {\n      /* Unlimited threads for NPTL */\n      __kmp_sys_max_nth = INT_MAX;\n    } else if (__kmp_sys_max_nth <= 1) {\n      /* Can't tell, just use PTHREAD_THREADS_MAX */\n      __kmp_sys_max_nth = KMP_MAX_NTH;\n    }\n\n    /* Query the minimum stack size */\n    __kmp_sys_min_stksize = sysconf(_SC_THREAD_STACK_MIN);\n    if (__kmp_sys_min_stksize <= 1) {\n      __kmp_sys_min_stksize = KMP_MIN_STKSIZE;\n    }\n  }\n\n  /* Set up minimum number of threads to switch to TLS gtid */\n  __kmp_tls_gtid_min = KMP_TLS_GTID_MIN;\n\n  status = pthread_key_create(&__kmp_gtid_threadprivate_key,\n                              __kmp_internal_end_dest);\n  KMP_CHECK_SYSFAIL(\"pthread_key_create\", status);\n  status = pthread_mutexattr_init(&mutex_attr);\n  KMP_CHECK_SYSFAIL(\"pthread_mutexattr_init\", status);\n  status = pthread_mutex_init(&__kmp_wait_mx.m_mutex, &mutex_attr);\n  KMP_CHECK_SYSFAIL(\"pthread_mutex_init\", status);\n  status = pthread_condattr_init(&cond_attr);\n  KMP_CHECK_SYSFAIL(\"pthread_condattr_init\", status);\n  status = pthread_cond_init(&__kmp_wait_cv.c_cond, &cond_attr);\n  KMP_CHECK_SYSFAIL(\"pthread_cond_init\", status);\n#if USE_ITT_BUILD\n  __kmp_itt_initialize();\n#endif /* USE_ITT_BUILD */\n\n  __kmp_init_runtime = TRUE;\n}\n\nvoid __kmp_runtime_destroy(void) {\n  int status;\n\n  if (!__kmp_init_runtime) {\n    return; // Nothing to do.\n  }\n\n#if USE_ITT_BUILD\n  __kmp_itt_destroy();\n#endif /* USE_ITT_BUILD */\n\n  status = pthread_key_delete(__kmp_gtid_threadprivate_key);\n  KMP_CHECK_SYSFAIL(\"pthread_key_delete\", status);\n\n  status = pthread_mutex_destroy(&__kmp_wait_mx.m_mutex);\n  if (status != 0 && status != EBUSY) {\n    KMP_SYSFAIL(\"pthread_mutex_destroy\", status);\n  }\n  status = pthread_cond_destroy(&__kmp_wait_cv.c_cond);\n  if (status != 0 && status != EBUSY) {\n    KMP_SYSFAIL(\"pthread_cond_destroy\", status);\n  }\n#if KMP_AFFINITY_SUPPORTED\n  __kmp_affinity_uninitialize();\n#endif\n\n  __kmp_init_runtime = FALSE;\n}\n\n/* Put the thread to sleep for a time period */\n/* NOTE: not currently used anywhere */\nvoid __kmp_thread_sleep(int millis) { sleep((millis + 500) / 1000); }\n\n/* Calculate the elapsed wall clock time for the user */\nvoid __kmp_elapsed(double *t) {\n  int status;\n#ifdef FIX_SGI_CLOCK\n  struct timespec ts;\n\n  status = clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &ts);\n  KMP_CHECK_SYSFAIL_ERRNO(\"clock_gettime\", status);\n  *t =\n      (double)ts.tv_nsec * (1.0 / (double)KMP_NSEC_PER_SEC) + (double)ts.tv_sec;\n#else\n  struct timeval tv;\n\n  status = gettimeofday(&tv, NULL);\n  KMP_CHECK_SYSFAIL_ERRNO(\"gettimeofday\", status);\n  *t =\n      (double)tv.tv_usec * (1.0 / (double)KMP_USEC_PER_SEC) + (double)tv.tv_sec;\n#endif\n}\n\n/* Calculate the elapsed wall clock tick for the user */\nvoid __kmp_elapsed_tick(double *t) { *t = 1 / (double)CLOCKS_PER_SEC; }\n\n/* Return the current time stamp in nsec */\nkmp_uint64 __kmp_now_nsec() {\n  struct timeval t;\n  gettimeofday(&t, NULL);\n  return KMP_NSEC_PER_SEC * t.tv_sec + 1000 * t.tv_usec;\n}\n\n#if KMP_ARCH_X86 || KMP_ARCH_X86_64\n/* Measure clock ticks per millisecond */\nvoid __kmp_initialize_system_tick() {\n  kmp_uint64 delay = 100000; // 50~100 usec on most machines.\n  kmp_uint64 nsec = __kmp_now_nsec();\n  kmp_uint64 goal = __kmp_hardware_timestamp() + delay;\n  kmp_uint64 now;\n  while ((now = __kmp_hardware_timestamp()) < goal)\n    ;\n  __kmp_ticks_per_msec =\n      (kmp_uint64)(1e6 * (delay + (now - goal)) / (__kmp_now_nsec() - nsec));\n}\n#endif\n\n/* Determine whether the given address is mapped into the current address\n   space. */\n\nint __kmp_is_address_mapped(void *addr) {\n\n  int found = 0;\n  int rc;\n\n#if KMP_OS_LINUX || KMP_OS_FREEBSD\n\n  /* On Linux* OS, read the /proc/<pid>/maps pseudo-file to get all the address\n     ranges mapped into the address space. */\n\n  char *name = __kmp_str_format(\"/proc/%d/maps\", getpid());\n  FILE *file = NULL;\n\n  file = fopen(name, \"r\");\n  KMP_ASSERT(file != NULL);\n\n  for (;;) {\n\n    void *beginning = NULL;\n    void *ending = NULL;\n    char perms[5];\n\n    rc = fscanf(file, \"%p-%p %4s %*[^\\n]\\n\", &beginning, &ending, perms);\n    if (rc == EOF) {\n      break;\n    }\n    KMP_ASSERT(rc == 3 &&\n               KMP_STRLEN(perms) == 4); // Make sure all fields are read.\n\n    // Ending address is not included in the region, but beginning is.\n    if ((addr >= beginning) && (addr < ending)) {\n      perms[2] = 0; // 3th and 4th character does not matter.\n      if (strcmp(perms, \"rw\") == 0) {\n        // Memory we are looking for should be readable and writable.\n        found = 1;\n      }\n      break;\n    }\n  }\n\n  // Free resources.\n  fclose(file);\n  KMP_INTERNAL_FREE(name);\n\n#elif KMP_OS_DARWIN\n\n  /* On OS X*, /proc pseudo filesystem is not available. Try to read memory\n     using vm interface. */\n\n  int buffer;\n  vm_size_t count;\n  rc = vm_read_overwrite(\n      mach_task_self(), // Task to read memory of.\n      (vm_address_t)(addr), // Address to read from.\n      1, // Number of bytes to be read.\n      (vm_address_t)(&buffer), // Address of buffer to save read bytes in.\n      &count // Address of var to save number of read bytes in.\n      );\n  if (rc == 0) {\n    // Memory successfully read.\n    found = 1;\n  }\n\n#elif KMP_OS_FREEBSD || KMP_OS_NETBSD\n\n  // FIXME(FreeBSD, NetBSD): Implement this\n  found = 1;\n\n#else\n\n#error \"Unknown or unsupported OS\"\n\n#endif\n\n  return found;\n\n} // __kmp_is_address_mapped\n\n#ifdef USE_LOAD_BALANCE\n\n#if KMP_OS_DARWIN\n\n// The function returns the rounded value of the system load average\n// during given time interval which depends on the value of\n// __kmp_load_balance_interval variable (default is 60 sec, other values\n// may be 300 sec or 900 sec).\n// It returns -1 in case of error.\nint __kmp_get_load_balance(int max) {\n  double averages[3];\n  int ret_avg = 0;\n\n  int res = getloadavg(averages, 3);\n\n  // Check __kmp_load_balance_interval to determine which of averages to use.\n  // getloadavg() may return the number of samples less than requested that is\n  // less than 3.\n  if (__kmp_load_balance_interval < 180 && (res >= 1)) {\n    ret_avg = averages[0]; // 1 min\n  } else if ((__kmp_load_balance_interval >= 180 &&\n              __kmp_load_balance_interval < 600) &&\n             (res >= 2)) {\n    ret_avg = averages[1]; // 5 min\n  } else if ((__kmp_load_balance_interval >= 600) && (res == 3)) {\n    ret_avg = averages[2]; // 15 min\n  } else { // Error occurred\n    return -1;\n  }\n\n  return ret_avg;\n}\n\n#else // Linux* OS\n\n// The fuction returns number of running (not sleeping) threads, or -1 in case\n// of error. Error could be reported if Linux* OS kernel too old (without\n// \"/proc\" support). Counting running threads stops if max running threads\n// encountered.\nint __kmp_get_load_balance(int max) {\n  static int permanent_error = 0;\n  static int glb_running_threads = 0; // Saved count of the running threads for\n  // the thread balance algortihm\n  static double glb_call_time = 0; /* Thread balance algorithm call time */\n\n  int running_threads = 0; // Number of running threads in the system.\n\n  DIR *proc_dir = NULL; // Handle of \"/proc/\" directory.\n  struct dirent *proc_entry = NULL;\n\n  kmp_str_buf_t task_path; // \"/proc/<pid>/task/<tid>/\" path.\n  DIR *task_dir = NULL; // Handle of \"/proc/<pid>/task/<tid>/\" directory.\n  struct dirent *task_entry = NULL;\n  int task_path_fixed_len;\n\n  kmp_str_buf_t stat_path; // \"/proc/<pid>/task/<tid>/stat\" path.\n  int stat_file = -1;\n  int stat_path_fixed_len;\n\n  int total_processes = 0; // Total number of processes in system.\n  int total_threads = 0; // Total number of threads in system.\n\n  double call_time = 0.0;\n\n  __kmp_str_buf_init(&task_path);\n  __kmp_str_buf_init(&stat_path);\n\n  __kmp_elapsed(&call_time);\n\n  if (glb_call_time &&\n      (call_time - glb_call_time < __kmp_load_balance_interval)) {\n    running_threads = glb_running_threads;\n    goto finish;\n  }\n\n  glb_call_time = call_time;\n\n  // Do not spend time on scanning \"/proc/\" if we have a permanent error.\n  if (permanent_error) {\n    running_threads = -1;\n    goto finish;\n  }\n\n  if (max <= 0) {\n    max = INT_MAX;\n  }\n\n  // Open \"/proc/\" directory.\n  proc_dir = opendir(\"/proc\");\n  if (proc_dir == NULL) {\n    // Cannot open \"/prroc/\". Probably the kernel does not support it. Return an\n    // error now and in subsequent calls.\n    running_threads = -1;\n    permanent_error = 1;\n    goto finish;\n  }\n\n  // Initialize fixed part of task_path. This part will not change.\n  __kmp_str_buf_cat(&task_path, \"/proc/\", 6);\n  task_path_fixed_len = task_path.used; // Remember number of used characters.\n\n  proc_entry = readdir(proc_dir);\n  while (proc_entry != NULL) {\n    // Proc entry is a directory and name starts with a digit. Assume it is a\n    // process' directory.\n    if (proc_entry->d_type == DT_DIR && isdigit(proc_entry->d_name[0])) {\n\n      ++total_processes;\n      // Make sure init process is the very first in \"/proc\", so we can replace\n      // strcmp( proc_entry->d_name, \"1\" ) == 0 with simpler total_processes ==\n      // 1. We are going to check that total_processes == 1 => d_name == \"1\" is\n      // true (where \"=>\" is implication). Since C++ does not have => operator,\n      // let us replace it with its equivalent: a => b == ! a || b.\n      KMP_DEBUG_ASSERT(total_processes != 1 ||\n                       strcmp(proc_entry->d_name, \"1\") == 0);\n\n      // Construct task_path.\n      task_path.used = task_path_fixed_len; // Reset task_path to \"/proc/\".\n      __kmp_str_buf_cat(&task_path, proc_entry->d_name,\n                        KMP_STRLEN(proc_entry->d_name));\n      __kmp_str_buf_cat(&task_path, \"/task\", 5);\n\n      task_dir = opendir(task_path.str);\n      if (task_dir == NULL) {\n        // Process can finish between reading \"/proc/\" directory entry and\n        // opening process' \"task/\" directory. So, in general case we should not\n        // complain, but have to skip this process and read the next one. But on\n        // systems with no \"task/\" support we will spend lot of time to scan\n        // \"/proc/\" tree again and again without any benefit. \"init\" process\n        // (its pid is 1) should exist always, so, if we cannot open\n        // \"/proc/1/task/\" directory, it means \"task/\" is not supported by\n        // kernel. Report an error now and in the future.\n        if (strcmp(proc_entry->d_name, \"1\") == 0) {\n          running_threads = -1;\n          permanent_error = 1;\n          goto finish;\n        }\n      } else {\n        // Construct fixed part of stat file path.\n        __kmp_str_buf_clear(&stat_path);\n        __kmp_str_buf_cat(&stat_path, task_path.str, task_path.used);\n        __kmp_str_buf_cat(&stat_path, \"/\", 1);\n        stat_path_fixed_len = stat_path.used;\n\n        task_entry = readdir(task_dir);\n        while (task_entry != NULL) {\n          // It is a directory and name starts with a digit.\n          if (proc_entry->d_type == DT_DIR && isdigit(task_entry->d_name[0])) {\n            ++total_threads;\n\n            // Consruct complete stat file path. Easiest way would be:\n            //  __kmp_str_buf_print( & stat_path, \"%s/%s/stat\", task_path.str,\n            //  task_entry->d_name );\n            // but seriae of __kmp_str_buf_cat works a bit faster.\n            stat_path.used =\n                stat_path_fixed_len; // Reset stat path to its fixed part.\n            __kmp_str_buf_cat(&stat_path, task_entry->d_name,\n                              KMP_STRLEN(task_entry->d_name));\n            __kmp_str_buf_cat(&stat_path, \"/stat\", 5);\n\n            // Note: Low-level API (open/read/close) is used. High-level API\n            // (fopen/fclose)  works ~ 30 % slower.\n            stat_file = open(stat_path.str, O_RDONLY);\n            if (stat_file == -1) {\n              // We cannot report an error because task (thread) can terminate\n              // just before reading this file.\n            } else {\n              /* Content of \"stat\" file looks like:\n                 24285 (program) S ...\n\n                 It is a single line (if program name does not include funny\n                 symbols). First number is a thread id, then name of executable\n                 file name in paretheses, then state of the thread. We need just\n                 thread state.\n\n                 Good news: Length of program name is 15 characters max. Longer\n                 names are truncated.\n\n                 Thus, we need rather short buffer: 15 chars for program name +\n                 2 parenthesis, + 3 spaces + ~7 digits of pid = 37.\n\n                 Bad news: Program name may contain special symbols like space,\n                 closing parenthesis, or even new line. This makes parsing\n                 \"stat\" file not 100 % reliable. In case of fanny program names\n                 parsing may fail (report incorrect thread state).\n\n                 Parsing \"status\" file looks more promissing (due to different\n                 file structure and escaping special symbols) but reading and\n                 parsing of \"status\" file works slower.\n                  -- ln\n              */\n              char buffer[65];\n              int len;\n              len = read(stat_file, buffer, sizeof(buffer) - 1);\n              if (len >= 0) {\n                buffer[len] = 0;\n                // Using scanf:\n                //     sscanf( buffer, \"%*d (%*s) %c \", & state );\n                // looks very nice, but searching for a closing parenthesis\n                // works a bit faster.\n                char *close_parent = strstr(buffer, \") \");\n                if (close_parent != NULL) {\n                  char state = *(close_parent + 2);\n                  if (state == 'R') {\n                    ++running_threads;\n                    if (running_threads >= max) {\n                      goto finish;\n                    }\n                  }\n                }\n              }\n              close(stat_file);\n              stat_file = -1;\n            }\n          }\n          task_entry = readdir(task_dir);\n        }\n        closedir(task_dir);\n        task_dir = NULL;\n      }\n    }\n    proc_entry = readdir(proc_dir);\n  }\n\n  // There _might_ be a timing hole where the thread executing this\n  // code get skipped in the load balance, and running_threads is 0.\n  // Assert in the debug builds only!!!\n  KMP_DEBUG_ASSERT(running_threads > 0);\n  if (running_threads <= 0) {\n    running_threads = 1;\n  }\n\nfinish: // Clean up and exit.\n  if (proc_dir != NULL) {\n    closedir(proc_dir);\n  }\n  __kmp_str_buf_free(&task_path);\n  if (task_dir != NULL) {\n    closedir(task_dir);\n  }\n  __kmp_str_buf_free(&stat_path);\n  if (stat_file != -1) {\n    close(stat_file);\n  }\n\n  glb_running_threads = running_threads;\n\n  return running_threads;\n\n} // __kmp_get_load_balance\n\n#endif // KMP_OS_DARWIN\n\n#endif // USE_LOAD_BALANCE\n\n#if !(KMP_ARCH_X86 || KMP_ARCH_X86_64 || KMP_MIC ||                            \\\n      ((KMP_OS_LINUX || KMP_OS_DARWIN) && KMP_ARCH_AARCH64) || KMP_ARCH_PPC64)\n\n// we really only need the case with 1 argument, because CLANG always build\n// a struct of pointers to shared variables referenced in the outlined function\nint __kmp_invoke_microtask(microtask_t pkfn, int gtid, int tid, int argc,\n                           void *p_argv[]\n#if OMPT_SUPPORT\n                           ,\n                           void **exit_frame_ptr\n#endif\n                           ) {\n#if OMPT_SUPPORT\n  *exit_frame_ptr = __builtin_frame_address(0);\n#endif\n\n  switch (argc) {\n  default:\n    fprintf(stderr, \"Too many args to microtask: %d!\\n\", argc);\n    fflush(stderr);\n    exit(-1);\n  case 0:\n    (*pkfn)(&gtid, &tid);\n    break;\n  case 1:\n    (*pkfn)(&gtid, &tid, p_argv[0]);\n    break;\n  case 2:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1]);\n    break;\n  case 3:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2]);\n    break;\n  case 4:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3]);\n    break;\n  case 5:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4]);\n    break;\n  case 6:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5]);\n    break;\n  case 7:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6]);\n    break;\n  case 8:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7]);\n    break;\n  case 9:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7], p_argv[8]);\n    break;\n  case 10:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7], p_argv[8], p_argv[9]);\n    break;\n  case 11:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7], p_argv[8], p_argv[9], p_argv[10]);\n    break;\n  case 12:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7], p_argv[8], p_argv[9], p_argv[10],\n            p_argv[11]);\n    break;\n  case 13:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7], p_argv[8], p_argv[9], p_argv[10],\n            p_argv[11], p_argv[12]);\n    break;\n  case 14:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7], p_argv[8], p_argv[9], p_argv[10],\n            p_argv[11], p_argv[12], p_argv[13]);\n    break;\n  case 15:\n    (*pkfn)(&gtid, &tid, p_argv[0], p_argv[1], p_argv[2], p_argv[3], p_argv[4],\n            p_argv[5], p_argv[6], p_argv[7], p_argv[8], p_argv[9], p_argv[10],\n            p_argv[11], p_argv[12], p_argv[13], p_argv[14]);\n    break;\n  }\n\n#if OMPT_SUPPORT\n  *exit_frame_ptr = 0;\n#endif\n\n  return 1;\n}\n\n#endif\n\n// end of file //\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/src/libs/conv-libs/openmp_llvm/runtime/src/thirdparty/ittnotify/ittnotify_config.h": "\n//===----------------------------------------------------------------------===//\n//\n//                     The LLVM Compiler Infrastructure\n//\n// This file is dual licensed under the MIT and the University of Illinois Open\n// Source Licenses. See LICENSE.txt for details.\n//\n//===----------------------------------------------------------------------===//\n\n#ifndef _ITTNOTIFY_CONFIG_H_\n#define _ITTNOTIFY_CONFIG_H_\n\n/** @cond exclude_from_documentation */\n#ifndef ITT_OS_WIN\n#  define ITT_OS_WIN   1\n#endif /* ITT_OS_WIN */\n\n#ifndef ITT_OS_LINUX\n#  define ITT_OS_LINUX 2\n#endif /* ITT_OS_LINUX */\n\n#ifndef ITT_OS_MAC\n#  define ITT_OS_MAC   3\n#endif /* ITT_OS_MAC */\n\n#ifndef ITT_OS\n#  if defined WIN32 || defined _WIN32\n#    define ITT_OS ITT_OS_WIN\n#  elif defined( __APPLE__ ) && defined( __MACH__ )\n#    define ITT_OS ITT_OS_MAC\n#  else\n#    define ITT_OS ITT_OS_LINUX\n#  endif\n#endif /* ITT_OS */\n\n#ifndef ITT_PLATFORM_WIN\n#  define ITT_PLATFORM_WIN 1\n#endif /* ITT_PLATFORM_WIN */\n\n#ifndef ITT_PLATFORM_POSIX\n#  define ITT_PLATFORM_POSIX 2\n#endif /* ITT_PLATFORM_POSIX */\n\n#ifndef ITT_PLATFORM_MAC\n#  define ITT_PLATFORM_MAC 3\n#endif /* ITT_PLATFORM_MAC */\n\n#ifndef ITT_PLATFORM\n#  if ITT_OS==ITT_OS_WIN\n#    define ITT_PLATFORM ITT_PLATFORM_WIN\n#  elif ITT_OS==ITT_OS_MAC\n#    define ITT_PLATFORM ITT_PLATFORM_MAC\n#  else\n#    define ITT_PLATFORM ITT_PLATFORM_POSIX\n#  endif\n#endif /* ITT_PLATFORM */\n\n#if defined(_UNICODE) && !defined(UNICODE)\n#define UNICODE\n#endif\n\n#include <stddef.h>\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#include <tchar.h>\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#include <stdint.h>\n#if defined(UNICODE) || defined(_UNICODE)\n#include <wchar.h>\n#endif /* UNICODE || _UNICODE */\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n#ifndef CDECL\n#  if ITT_PLATFORM==ITT_PLATFORM_WIN\n#    define CDECL __cdecl\n#  else /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#    if defined _M_IX86 || defined __i386__\n#      define CDECL __attribute__ ((cdecl))\n#    else  /* _M_IX86 || __i386__ */\n#      define CDECL /* actual only on x86 platform */\n#    endif /* _M_IX86 || __i386__ */\n#  endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#endif /* CDECL */\n\n#ifndef STDCALL\n#  if ITT_PLATFORM==ITT_PLATFORM_WIN\n#    define STDCALL __stdcall\n#  else /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#    if defined _M_IX86 || defined __i386__\n#      define STDCALL __attribute__ ((stdcall))\n#    else  /* _M_IX86 || __i386__ */\n#      define STDCALL /* supported only on x86 platform */\n#    endif /* _M_IX86 || __i386__ */\n#  endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#endif /* STDCALL */\n\n#define ITTAPI    CDECL\n#define LIBITTAPI CDECL\n\n/* TODO: Temporary for compatibility! */\n#define ITTAPI_CALL    CDECL\n#define LIBITTAPI_CALL CDECL\n\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n/* use __forceinline (VC++ specific) */\n#define ITT_INLINE           __forceinline\n#define ITT_INLINE_ATTRIBUTE /* nothing */\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n/*\n * Generally, functions are not inlined unless optimization is specified.\n * For functions declared inline, this attribute inlines the function even\n * if no optimization level was specified.\n */\n#ifdef __STRICT_ANSI__\n#define ITT_INLINE           static\n#define ITT_INLINE_ATTRIBUTE __attribute__((unused))\n#else  /* __STRICT_ANSI__ */\n#define ITT_INLINE           static inline\n#define ITT_INLINE_ATTRIBUTE __attribute__((always_inline, unused))\n#endif /* __STRICT_ANSI__ */\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n/** @endcond */\n\n#ifndef ITT_ARCH_IA32\n#  define ITT_ARCH_IA32  1\n#endif /* ITT_ARCH_IA32 */\n\n#ifndef ITT_ARCH_IA32E\n#  define ITT_ARCH_IA32E 2\n#endif /* ITT_ARCH_IA32E */\n\n/* Was there a magical reason we didn't have 3 here before? */\n#ifndef ITT_ARCH_AARCH64\n#  define ITT_ARCH_AARCH64  3\n#endif /* ITT_ARCH_AARCH64 */\n\n#ifndef ITT_ARCH_ARM\n#  define ITT_ARCH_ARM  4\n#endif /* ITT_ARCH_ARM */\n\n#ifndef ITT_ARCH_PPC64\n#  define ITT_ARCH_PPC64  5\n#endif /* ITT_ARCH_PPC64 */\n\n#ifndef ITT_ARCH_MIPS\n#  define ITT_ARCH_MIPS  6\n#endif /* ITT_ARCH_MIPS */\n\n#ifndef ITT_ARCH_MIPS64\n#  define ITT_ARCH_MIPS64  6\n#endif /* ITT_ARCH_MIPS64 */\n\n\n#ifndef ITT_ARCH\n#  if defined _M_IX86 || defined __i386__\n#    define ITT_ARCH ITT_ARCH_IA32\n#  elif defined _M_X64 || defined _M_AMD64 || defined __x86_64__\n#    define ITT_ARCH ITT_ARCH_IA32E\n#  elif defined _M_IA64 || defined __ia64__\n#    define ITT_ARCH ITT_ARCH_IA64\n#  elif defined _M_ARM || __arm__\n#    define ITT_ARCH ITT_ARCH_ARM\n#  elif defined __powerpc64__\n#    define ITT_ARCH ITT_ARCH_PPC64\n#  elif defined __aarch64__\n#    define ITT_ARCH ITT_ARCH_AARCH64\n#  elif defined __mips__ && !defined __mips64\n#    define ITT_ARCH ITT_ARCH_MIPS\n#  elif defined __mips__ && defined __mips64\n#    define ITT_ARCH ITT_ARCH_MIPS64\n#  endif\n#endif\n\n#ifdef __cplusplus\n#  define ITT_EXTERN_C extern \"C\"\n#  define ITT_EXTERN_C_BEGIN extern \"C\" {\n#  define ITT_EXTERN_C_END }\n#else\n#  define ITT_EXTERN_C /* nothing */\n#  define ITT_EXTERN_C_BEGIN /* nothing */\n#  define ITT_EXTERN_C_END /* nothing */\n#endif /* __cplusplus */\n\n#define ITT_TO_STR_AUX(x) #x\n#define ITT_TO_STR(x)     ITT_TO_STR_AUX(x)\n\n#define __ITT_BUILD_ASSERT(expr, suffix) do { \\\n    static char __itt_build_check_##suffix[(expr) ? 1 : -1]; \\\n    __itt_build_check_##suffix[0] = 0; \\\n} while(0)\n#define _ITT_BUILD_ASSERT(expr, suffix)  __ITT_BUILD_ASSERT((expr), suffix)\n#define ITT_BUILD_ASSERT(expr)           _ITT_BUILD_ASSERT((expr), __LINE__)\n\n#define ITT_MAGIC { 0xED, 0xAB, 0xAB, 0xEC, 0x0D, 0xEE, 0xDA, 0x30 }\n\n/* Replace with snapshot date YYYYMMDD for promotion build. */\n#define API_VERSION_BUILD    20111111\n\n#ifndef API_VERSION_NUM\n#define API_VERSION_NUM 0.0.0\n#endif /* API_VERSION_NUM */\n\n#define API_VERSION \"ITT-API-Version \" ITT_TO_STR(API_VERSION_NUM) \\\n                                \" (\" ITT_TO_STR(API_VERSION_BUILD) \")\"\n\n/* OS communication functions */\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#include <windows.h>\ntypedef HMODULE           lib_t;\ntypedef DWORD             TIDT;\ntypedef CRITICAL_SECTION  mutex_t;\n#define MUTEX_INITIALIZER { 0 }\n#define strong_alias(name, aliasname) /* empty for Windows */\n#else  /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n#include <dlfcn.h>\n#if defined(UNICODE) || defined(_UNICODE)\n#include <wchar.h>\n#endif /* UNICODE */\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE 1 /* need for PTHREAD_MUTEX_RECURSIVE */\n#endif /* _GNU_SOURCE */\n#ifndef __USE_UNIX98\n#define __USE_UNIX98 1 /* need for PTHREAD_MUTEX_RECURSIVE, on SLES11.1 with gcc 4.3.4 wherein pthread.h missing dependency on __USE_XOPEN2K8 */\n#endif /*__USE_UNIX98*/\n#include <pthread.h>\ntypedef void*             lib_t;\ntypedef pthread_t         TIDT;\ntypedef pthread_mutex_t   mutex_t;\n#define MUTEX_INITIALIZER PTHREAD_MUTEX_INITIALIZER\n#define _strong_alias(name, aliasname) \\\n            extern __typeof (name) aliasname __attribute__ ((alias (#name)));\n#define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\n#if ITT_PLATFORM==ITT_PLATFORM_WIN\n#define __itt_get_proc(lib, name) GetProcAddress(lib, name)\n#define __itt_mutex_init(mutex)   InitializeCriticalSection(mutex)\n#define __itt_mutex_lock(mutex)   EnterCriticalSection(mutex)\n#define __itt_mutex_unlock(mutex) LeaveCriticalSection(mutex)\n#define __itt_load_lib(name)      LoadLibraryA(name)\n#define __itt_unload_lib(handle)  FreeLibrary(handle)\n#define __itt_system_error()      (int)GetLastError()\n#define __itt_fstrcmp(s1, s2)     lstrcmpA(s1, s2)\n#define __itt_fstrlen(s)          lstrlenA(s)\n#define __itt_fstrcpyn(s1, s2, l) lstrcpynA(s1, s2, l)\n#define __itt_fstrdup(s)          _strdup(s)\n#define __itt_thread_id()         GetCurrentThreadId()\n#define __itt_thread_yield()      SwitchToThread()\n#ifndef ITT_SIMPLE_INIT\nITT_INLINE long\n__itt_interlocked_increment(volatile long* ptr) ITT_INLINE_ATTRIBUTE;\nITT_INLINE long __itt_interlocked_increment(volatile long* ptr)\n{\n    return InterlockedIncrement(ptr);\n}\n#endif /* ITT_SIMPLE_INIT */\n#else /* ITT_PLATFORM!=ITT_PLATFORM_WIN */\n#define __itt_get_proc(lib, name) dlsym(lib, name)\n#define __itt_mutex_init(mutex)   {\\\n    pthread_mutexattr_t mutex_attr;                                         \\\n    int error_code = pthread_mutexattr_init(&mutex_attr);                   \\\n    if (error_code)                                                         \\\n        __itt_report_error(__itt_error_system, \"pthread_mutexattr_init\",    \\\n                           error_code);                                     \\\n    error_code = pthread_mutexattr_settype(&mutex_attr,                     \\\n                                           PTHREAD_MUTEX_RECURSIVE);        \\\n    if (error_code)                                                         \\\n        __itt_report_error(__itt_error_system, \"pthread_mutexattr_settype\", \\\n                           error_code);                                     \\\n    error_code = pthread_mutex_init(mutex, &mutex_attr);                    \\\n    if (error_code)                                                         \\\n        __itt_report_error(__itt_error_system, \"pthread_mutex_init\",        \\\n                           error_code);                                     \\\n    error_code = pthread_mutexattr_destroy(&mutex_attr);                    \\\n    if (error_code)                                                         \\\n        __itt_report_error(__itt_error_system, \"pthread_mutexattr_destroy\", \\\n                           error_code);                                     \\\n}\n#define __itt_mutex_lock(mutex)   pthread_mutex_lock(mutex)\n#define __itt_mutex_unlock(mutex) pthread_mutex_unlock(mutex)\n#define __itt_load_lib(name)      dlopen(name, RTLD_LAZY)\n#define __itt_unload_lib(handle)  dlclose(handle)\n#define __itt_system_error()      errno\n#define __itt_fstrcmp(s1, s2)     strcmp(s1, s2)\n#define __itt_fstrlen(s)          strlen(s)\n#define __itt_fstrcpyn(s1, s2, l) strncpy(s1, s2, l)\n#define __itt_fstrdup(s)          strdup(s)\n#define __itt_thread_id()         pthread_self()\n#define __itt_thread_yield()      sched_yield()\n#if ITT_ARCH==ITT_ARCH_IA64\n#ifdef __INTEL_COMPILER\n#define __TBB_machine_fetchadd4(addr, val) __fetchadd4_acq((void *)addr, val)\n#else  /* __INTEL_COMPILER */\n/* TODO: Add Support for not Intel compilers for IA-64 architecture */\n#endif /* __INTEL_COMPILER */\n#elif ITT_ARCH==ITT_ARCH_IA32 || ITT_ARCH==ITT_ARCH_IA32E /* ITT_ARCH!=ITT_ARCH_IA64 */\nITT_INLINE long\n__TBB_machine_fetchadd4(volatile void* ptr, long addend) ITT_INLINE_ATTRIBUTE;\nITT_INLINE long __TBB_machine_fetchadd4(volatile void* ptr, long addend)\n{\n    long result;\n    __asm__ __volatile__(\"lock\\nxadd %0,%1\"\n                          : \"=r\"(result),\"=m\"(*(volatile int*)ptr)\n                          : \"0\"(addend), \"m\"(*(volatile int*)ptr)\n                          : \"memory\");\n    return result;\n}\n#elif ITT_ARCH==ITT_ARCH_ARM || ITT_ARCH==ITT_ARCH_PPC64 || ITT_ARCH==ITT_ARCH_AARCH64 || ITT_ARCH==ITT_ARCH_MIPS ||  ITT_ARCH==ITT_ARCH_MIPS64\n#define __TBB_machine_fetchadd4(addr, val) __sync_fetch_and_add(addr, val)\n#endif /* ITT_ARCH==ITT_ARCH_IA64 */\n#ifndef ITT_SIMPLE_INIT\nITT_INLINE long\n__itt_interlocked_increment(volatile long* ptr) ITT_INLINE_ATTRIBUTE;\nITT_INLINE long __itt_interlocked_increment(volatile long* ptr)\n{\n    return __TBB_machine_fetchadd4(ptr, 1) + 1L;\n}\n#endif /* ITT_SIMPLE_INIT */\n#endif /* ITT_PLATFORM==ITT_PLATFORM_WIN */\n\ntypedef enum {\n    __itt_collection_normal = 0,\n    __itt_collection_paused = 1\n} __itt_collection_state;\n\ntypedef enum {\n    __itt_thread_normal  = 0,\n    __itt_thread_ignored = 1\n} __itt_thread_state;\n\n#pragma pack(push, 8)\n\ntypedef struct ___itt_thread_info\n{\n    const char* nameA; /*!< Copy of original name in ASCII. */\n#if defined(UNICODE) || defined(_UNICODE)\n    const wchar_t* nameW; /*!< Copy of original name in UNICODE. */\n#else  /* UNICODE || _UNICODE */\n    void* nameW;\n#endif /* UNICODE || _UNICODE */\n    TIDT               tid;\n    __itt_thread_state state;   /*!< Thread state (paused or normal) */\n    int                extra1;  /*!< Reserved to the runtime */\n    void*              extra2;  /*!< Reserved to the runtime */\n    struct ___itt_thread_info* next;\n} __itt_thread_info;\n\n#include \"ittnotify_types.h\" /* For __itt_group_id definition */\n\ntypedef struct ___itt_api_info_20101001\n{\n    const char*    name;\n    void**         func_ptr;\n    void*          init_func;\n    __itt_group_id group;\n}  __itt_api_info_20101001;\n\ntypedef struct ___itt_api_info\n{\n    const char*    name;\n    void**         func_ptr;\n    void*          init_func;\n    void*          null_func;\n    __itt_group_id group;\n}  __itt_api_info;\n\nstruct ___itt_domain;\nstruct ___itt_string_handle;\n\ntypedef struct ___itt_global\n{\n    unsigned char          magic[8];\n    unsigned long          version_major;\n    unsigned long          version_minor;\n    unsigned long          version_build;\n    volatile long          api_initialized;\n    volatile long          mutex_initialized;\n    volatile long          atomic_counter;\n    mutex_t                mutex;\n    lib_t                  lib;\n    void*                  error_handler;\n    const char**           dll_path_ptr;\n    __itt_api_info*        api_list_ptr;\n    struct ___itt_global*  next;\n    /* Joinable structures below */\n    __itt_thread_info*     thread_list;\n    struct ___itt_domain*  domain_list;\n    struct ___itt_string_handle* string_list;\n    __itt_collection_state state;\n} __itt_global;\n\n#pragma pack(pop)\n\n#define NEW_THREAD_INFO_W(gptr,h,h_tail,t,s,n) { \\\n    h = (__itt_thread_info*)malloc(sizeof(__itt_thread_info)); \\\n    if (h != NULL) { \\\n        h->tid    = t; \\\n        h->nameA  = NULL; \\\n        h->nameW  = n ? _wcsdup(n) : NULL; \\\n        h->state  = s; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->thread_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_THREAD_INFO_A(gptr,h,h_tail,t,s,n) { \\\n    h = (__itt_thread_info*)malloc(sizeof(__itt_thread_info)); \\\n    if (h != NULL) { \\\n        h->tid    = t; \\\n        h->nameA  = n ? __itt_fstrdup(n) : NULL; \\\n        h->nameW  = NULL; \\\n        h->state  = s; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->thread_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_DOMAIN_W(gptr,h,h_tail,name) { \\\n    h = (__itt_domain*)malloc(sizeof(__itt_domain)); \\\n    if (h != NULL) { \\\n        h->flags  = 0;    /* domain is disabled by default */ \\\n        h->nameA  = NULL; \\\n        h->nameW  = name ? _wcsdup(name) : NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->domain_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_DOMAIN_A(gptr,h,h_tail,name) { \\\n    h = (__itt_domain*)malloc(sizeof(__itt_domain)); \\\n    if (h != NULL) { \\\n        h->flags  = 0;    /* domain is disabled by default */ \\\n        h->nameA  = name ? __itt_fstrdup(name) : NULL; \\\n        h->nameW  = NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->domain_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_STRING_HANDLE_W(gptr,h,h_tail,name) { \\\n    h = (__itt_string_handle*)malloc(sizeof(__itt_string_handle)); \\\n    if (h != NULL) { \\\n        h->strA   = NULL; \\\n        h->strW   = name ? _wcsdup(name) : NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->string_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#define NEW_STRING_HANDLE_A(gptr,h,h_tail,name) { \\\n    h = (__itt_string_handle*)malloc(sizeof(__itt_string_handle)); \\\n    if (h != NULL) { \\\n        h->strA   = name ? __itt_fstrdup(name) : NULL; \\\n        h->strW   = NULL; \\\n        h->extra1 = 0;    /* reserved */ \\\n        h->extra2 = NULL; /* reserved */ \\\n        h->next   = NULL; \\\n        if (h_tail == NULL) \\\n            (gptr)->string_list = h; \\\n        else \\\n            h_tail->next = h; \\\n    } \\\n}\n\n#endif /* _ITTNOTIFY_CONFIG_H_ */\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/src/util/ckdll_dlopen.C": "/*\n dlopen version of CkDll class.  \n This file can be #included whole by the configure script or ckdll.C.\n\n Orion Sky Lawlor, olawlor@acm.org, 9/10/2002\n*/\n#include \"ckdll.h\"\n#include <unistd.h> //For unlink\n#include <dlfcn.h> //for dlopen, etc.\n\nCkDll::CkDll(const char *name) {\n\thandle=dlopen(name,RTLD_NOW);\n}\nvoid *CkDll::lookup(const char *name) {\n\treturn dlsym(handle,name);\n}\nCkDll::~CkDll() {\n\tdlclose(handle);\n}\n\nconst char *CkDll::extension=\".so\";\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/src/util/ckdll.C": "/*\nPortable Dynamically Linked Libraries (DLL) interface\n\nOrion Sky Lawlor, olawlor@acm.org, 7/26/2002\n*/\n#include \"converse.h\" //For CMK_ symbols\n#include \"ckdll.h\"\n#include <stdio.h> //For fopen\n#include <stdlib.h> //For system\n#include <string.h>\n\n\n/*#include the appropriate CkDll implementation: */\n\n#if CMK_DLL_USE_DLOPEN  /*********** UNIX .so/dlopen Version ******/\n#include \"ckdll_dlopen.C\"\n\nstatic void deleteFile(const char *fileName) {\n\tunlink(fileName);\n}\n#define CMK_SCRATCH_PATH \"/tmp\"\n\n#elif CMK_DLL_USE_WIN32 /*********** Win32 .dll/GetProcAddress Version ******/\n#include \"ckdll_win32.C\"\n\nstatic void deleteFile(const char *fileName) {\n\tDeleteFile(fileName);\n}\n#define CMK_SCRATCH_PATH \"\"\n\n#else \n/********* It ain't UNIX, it ain't win32-- what *is* it? */\nCkDll::CkDll(const char *name) {\n\thandle=0; /*DLL's not supported here.*/\n}\nvoid *CkDll::lookup(const char *name) {\n\treturn 0;\n}\nCkDll::~CkDll() {\n\t;\n}\n\nconst char *CkDll::extension=0;\nstatic void deleteFile(const char *fileName) { }\n\n#define CMK_SCRATCH_PATH \"\"\n#endif\n\n/****************************************************************\nCkCppInterpreter interface:\n\tCall the C++ compiler on a string, then use CkDll to link the\nresulting dll into the running program.\n\n\tThis depends on conv-mach.h or conv-mach-opt.h setting the symbol\nCMK_DLL_CC to the correct invokation of the C++ compiler to generate a shared\nlibrary.  CMK_DLL_CC will immediately be followed by the output library name,\nso it should end with, e.g., \"-o \" on UNIX platforms.\n\n\tCMK_DLL_LINK is an optional extra link step (required on HP machines);\nand CMK_DLL_INC is the compiler flag to change the #include path.\n*/\n\n/* \nCommand-line compilers for various platforms (now in conv-mach.h files)\n#if CMK_DLL_VIA_SUN_CC\n#  define CMK_DLL_CC  \"CC -G -O3 -o \"\n#elif CMK_DLL_VIA_SGI_CC\n#  define CMK_DLL_CC  \"CC -shared -64 -LANG:std -O3 -o \"\n#elif CMK_DLL_VIA_CXX\n#  define CMK_DLL_CC  \"cxx -shared -O3 -o \"\n#elif CMK_DLL_VIA_HP_CC\n#  define CMK_DLL_CC  \"CC +z -O -c -o \"\n#  define CMK_DLL_LINK \"CC -b -o \"\n#else\n//Default: try g++\n#  define CMK_DLL_CC  \"g++ -shared -O3 -o \"\n#endif\n*/\n\n\n#ifdef CMK_DLL_CC //We have a command-line dynamic-link library compiler:\n\n#ifndef CMK_DLL_INC\n#  define CMK_DLL_INC \"-I\" /*Assume unix-style command-line flags*/\n#endif\n\n/*Return 1 if this file exists*/\nstatic int fileExists(const char *fileName) {\n\tFILE *f=fopen(fileName,\"r\");\n\tif (f==NULL) return 0;\n\telse {\n\t\tfclose(f);\n\t\treturn 1;\n\t}\n}\n\n\n#ifdef CMK_SIGSAFE_SYSTEM\n#  include \"ckdll_system.C\"\n#else\n/*No need for a signal-safe system call*/\nstatic int CkSystem (const char *command) {\n\tsystem(command);\n}\n#endif\n\n//Compile \"cppCode\", making available the includes at inclPath\nCkCppInterpreter::CkCppInterpreter(const char *cppCode,const char *inclPath)\n\t:library(NULL)\n{\n\tint verbose=0;\n\tint randA=CrnRand();\n\tint randB=CmiMyPe();\n\n/*Write the c++ code to a temporary file:*/\n\tchar sourceFile[256];\n\tsprintf(sourceFile,\"%s/ckSharedLib_%d_%d_%p.%s\",\n\t\tCMK_SCRATCH_PATH,randA,randB,(void*)this,\"cpp\");\n\tFILE *f=fopen(sourceFile,\"w\"); if (f==NULL) return;\n\tfputs(cppCode,f);\n\tfclose(f);\n\n/*Allocate a spot for the library file:*/\n\tsprintf(libraryFile,\"%s/ckSharedLib_%d_%d_%p%s\",\n\t\tCMK_SCRATCH_PATH,randA,randB,(void*)this,CkDll::extension);\n\t\n//Compile the .cpp file into a .dll:\n\tchar compilerCmd[1024];\n\tsprintf(compilerCmd,\"%s%s %s %s%s\",\n\t\tCMK_DLL_CC, libraryFile, sourceFile,\n\t\tinclPath!=NULL?CMK_DLL_INC:\"\",inclPath!=NULL?inclPath:\"\");\n\t\n\tif (verbose) CmiPrintf(\"Executing: '%s'\\n\",compilerCmd);\n\tint compilerRet=CkSystem(compilerCmd);\n\tdeleteFile(sourceFile);\n\tif (compilerRet!=0) { //!fileExists(libraryFile)) {\n\t\tCmiPrintf(\"Compilation error! Cmd='%s', err=%d, src='%s'\\n\",\n\t\t\tcompilerCmd,compilerRet,cppCode);\n\t\treturn; /*with library set to NULL*/\n\t}\n\t\n#ifdef CMK_DLL_LINK\n//Link the .so into a \".sop\"\n\t// HIDEOUS HACK: playing silly games with filename:\n\t//    CC source -o foo.so\n\t//    CC foo.so -o foo.sop\n\tsprintf(compilerCmd,\"%s%sp %s\",\n\t\tCMK_DLL_LINK, libraryFile, libraryFile);\n\tcompilerRet=CkSystem(compilerCmd);\n\tunlink(libraryFile);\n\tstrcat(libraryFile,\"p\");\n\tif (compilerRet!=0) { //!fileExists(libraryFile)) {\n\t\tCmiPrintf(\"Link error! Cmd='%s', err=%d, src='%s'\\n\",\n\t\t\tcompilerCmd,compilerRet,cppCode);\n\t\treturn; \n\t}\n#endif\n\t\n/*Link the library into the program: */\t\n\tlibrary=new CkDll(libraryFile);\n}\n\n//Remove \"cppCode\" from the program.\n//  This invalidates any function pointers created with lookup\nCkCppInterpreter::~CkCppInterpreter()\n{\n\tif (library) {\n\t\tdelete library;\n\t\tdeleteFile(libraryFile);\n\t}\n}\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/src/scripts/configure.ac": "# Decimal representation of Charm++ release line and API revision\n# Increment the last 2 digits when making an API change\n# Increase the first three after branching for a release\n\nAC_INIT(Charm++, 60900, [charm@cs.illinois.edu], charm, [http://charm.cs.illinois.edu/])\n\nAC_CONFIG_SRCDIR(./Makefile)\n\nAC_CONFIG_HEADER(conv-autoconfig.h)\n\nAC_CONFIG_COMMANDS([config-cleanup],\n                   [sed -i -e 's:^#define\\s\\+PACKAGE://&:' conv-autoconfig.h])\n\nget_full_command_name()\n{\n    if test \"$(basename \"$*\")\" != \"$*\"; then\n        echo \"$(cd \"$(dirname \"$*\")\" && pwd)/$(basename \"$*\")\"\n    else\n        echo \"$*\"\n    fi\n}\n\nConvSh='../tmp/conv-mach-opt.sh'\nConvMak='../tmp/conv-mach-opt.mak'\n\n#clean up conv-mach-opt.sh\nsed -e '/Option added by configure/d' \"$ConvSh\" | sed -e '/^$/d' > conv-mach-opt.sh.clean\ncp -f conv-mach-opt.sh.clean   \"$ConvSh\"\nrm -f conv-mach-opt.sh.clean\n\n#clean up conv-mach-opt.mak\nsed -e '/Option added by configure/d' \"$ConvMak\" | sed -e '/^$/d' > conv-mach-opt.mak.clean\ncp -f conv-mach-opt.mak.clean   \"$ConvMak\"\nrm -f conv-mach-opt.mak.clean\n\nCHARMINC=\".\"\nCHARMBIN=\"../bin\"\ntest -r ./conv-config.sh && . ./conv-config.sh\n\necho AC_PACKAGE_VERSION > ../include/VERSION\nAC_DEFINE_UNQUOTED([CHARM_VERSION], AC_PACKAGE_VERSION, [Charm++ Release/API version number])\n\ncharmout=\"charmconfig.out\"\n/bin/rm -rf $charmout\nMAKEFILE_EXT=Make.extlib\n\nEcho() {\n\techo $* \n\techo $* >> $charmout\n}\n\n# add into conv-mach-opt.sh\n# add_flag $1 $2\n# $2 is description\nadd_flag() {\n        key=$1\n        key=\"${key%%=*}\"\n        last=`grep -w \"$key\" \"$ConvSh\" 2>/dev/null | tail -1 | sed -e 's/ *#.*$//'`\n        skip=0\n\tif test -n \"$last\" -a  \"$last\" = \"$1\" \n\tthen\n\t  skip=1\n        fi\n\tif test $skip = 0\n        then\n\t  cat >> \"$ConvSh\" << EOT\n\n$1   # Option added by configure script's $2 section\nEOT\n\tfi\n}\n\n# remove_flag $1\nremove_flag() {\n     sed -e '/^'\"$1\"'=/d' \"$ConvSh\" > tmp.$$\n     cp tmp.$$ \"$ConvSh\"\n     /bin/rm -f tmp.$$\n}\n\n# add into conv-mach-opt.mak\n# add_make_flag $1 $2\n# $2 is description\nadd_make_flag() {\n        key=$1\n        key=\"${key%%=*}\"\n        key=\"${key%%:*}\"\n        last=`grep -w \"$key\" \"$ConvMak\" 2>/dev/null | tail -1 | sed -e 's/ *#.*$//'`\n        skip=0\n\tif test -n \"$last\" -a  \"$last\" = \"$1\"\n\tthen\n\t  skip=1\n        fi\n\tif test $skip = 0\n        then\n\t  # The lack of whitespace around $1 here is necessary.\n\t  cat >> \"$ConvMak\" << EOT\n\n$1# Option added by configure script's $2 section\nEOT\n\tfi\n}\n\n# remove_make_flag $1\nremove_make_flag() {\n     sed -e '/^'\"$1\"'=/d' \"$ConvMak\" > tmp.$$\n     cp tmp.$$ \"$ConvMak\"\n     /bin/rm -f tmp.$$\n}\n\nadd_flag \"OPTS_CC='$OPTS_CC'\"   'Pass through user-provided C compiler options'\nadd_flag \"OPTS_CXX='$OPTS_CXX'\" 'Pass through user-provided C++ compiler options'\nadd_make_flag \"CMK_COMPILER:=$CMK_COMPILER\" 'basic setup'\nadd_make_flag \"CMK_SMP:=$CMK_SMP\" 'basic setup'\nadd_make_flag \"CMK_SHARED_SUF:=$CMK_SHARED_SUF\" 'basic setup'\nadd_make_flag \"CMK_NO_PARTITIONS:=$CMK_NO_PARTITIONS\" 'basic setup'\nadd_make_flag \"CMK_BLUEGENEQ:=$CMK_BLUEGENEQ\" 'basic setup'\nadd_make_flag \"BUILD_CUDA:=$BUILD_CUDA\" 'basic setup'\n\n# enable/disable error checking\nAC_ARG_ENABLE([error-checking],\n            [AS_HELP_STRING([--enable-error-checking],\n              [enable error checking])], ,\n            [enable_error_checking=yes])\n\nif test \"$enable_error_checking\" = \"no\"\nthen\n  Echo \"Error checking is disabled\" \n  AC_DEFINE_UNQUOTED(CMK_ERROR_CHECKING, 0, [disable error checking])\n  add_flag 'OPTS_CC=\"$OPTS_CC -U_FORTIFY_SOURCE\"' 'error checking'\n  add_flag 'OPTS_CXX=\"$OPTS_CXX -U_FORTIFY_SOURCE\"' 'error checking'\nelse\n  Echo \"Error checking is enabled\" \n  AC_DEFINE_UNQUOTED(CMK_ERROR_CHECKING, 1, [enable error checking])\nfi\n\n# enable/disable AMPI error checking\nAC_ARG_ENABLE([ampi-error-checking],\n            [AS_HELP_STRING([--enable-ampi-error-checking],\n              [enable AMPI error checking])], ,\n            [enable_ampi_error_checking=yes])\n\nif test \"$enable_ampi_error_checking\" = \"no\"\nthen\n  Echo \"AMPI error checking is disabled\"\n  AC_DEFINE_UNQUOTED(AMPI_ERROR_CHECKING, 0, [disable ampi error checking])\nelse\n  Echo \"AMPI error checking is enabled\"\n  AC_DEFINE_UNQUOTED(AMPI_ERROR_CHECKING, 1, [enable ampi error checking])\nfi\n\n# enable/disable statistics collection\nAC_ARG_ENABLE([stats],\n            [AS_HELP_STRING([--enable-stats],\n              [enable statistics collection])], ,\n            [enable_stats=yes])\n\nif test \"$enable_stats\" = \"no\"\nthen\n  Echo \"Statistics collection is disabled\" \n  AC_DEFINE_UNQUOTED(CMK_WITH_STATS, 0, [disable statistics collection])\nelse\n  Echo \"Statistics collection is enabled\" \n  AC_DEFINE_UNQUOTED(CMK_WITH_STATS, 1, [enable statistics collection])\nfi\n\n# check enable/disable\nAC_ARG_ENABLE([tracing],\n            [AS_HELP_STRING([--enable-tracing],\n              [enable tracing modules])], ,\n            [enable_tracing=yes])\n\nif test \"$enable_tracing\" = \"no\"\nthen\n  Echo \"Charm tracing is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_TRACE_ENABLED, 0, [disable tracing])\n  add_flag CMK_TRACE_ENABLED=0\n  add_make_flag 'CMK_TRACE_ENABLED:=0' 'tracing'\nelse\n  Echo \"Charm tracing is enabled\"\n  AC_DEFINE_UNQUOTED(CMK_TRACE_ENABLED, 1, [enable tracing])\n  add_flag CMK_TRACE_ENABLED=1\n  add_make_flag 'CMK_TRACE_ENABLED:=1' 'tracing'\nfi\n\nAC_ARG_ENABLE([tracing-commthread],\n            [AS_HELP_STRING([--enable-tracing-commthread],\n              [enable tracing communication thread])], ,\n            [enable_tracing_commthread=no])\n\nif test \"$enable_tracing_commthread\" = \"yes\"\nthen\n  Echo \"Charm tracing communication thread is enabled\"\n  AC_DEFINE_UNQUOTED(CMK_SMP_TRACE_COMMTHREAD, 1, [enable tracing comm thread])\nelse\n  Echo \"Charm tracing communication thread is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_SMP_TRACE_COMMTHREAD, 0, [disable tracing comm thread])\nfi\n\n\n# enable task queue\nAC_ARG_ENABLE([task_queue],\n            [AS_HELP_STRING([--enable-task-queue],\n              [enable task queue])],\n            [enable_task_queue=$enableval],\n            [enable_task_queue=no])\n\nif test \"$enable_task_queue\" = \"no\"\nthen\n  Echo \"Task Queue is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_TASKQUEUE, 0, [disable task queue])\nelse\n  Echo \"Task Queue is enabled\"\n  AC_DEFINE_UNQUOTED(CMK_TASKQUEUE, 1, [enable task queue])\nfi\n\n# enable drone mode\nAC_ARG_ENABLE([drone_mode],\n            [AS_HELP_STRING([--enable-drone-mode],\n              [enable drone mode])],\n            [enable_drone_mode=$enableval],\n            [enable_drone_mode=no])\n\nif test \"$enable_drone_mode\" = \"no\"\nthen\n  Echo \"Drone mode is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_DRONE_MODE, 0, [disable drone mode])\nelse\n  Echo \"Drone mode is enabled\"\n  AC_DEFINE_UNQUOTED(CMK_DRONE_MODE, 1, [enable drone mode])\nfi\n\nAC_ARG_ENABLE([charmdebug],\n            [AS_HELP_STRING([--enable-charmdebug],\n              [enable charmDebug])], ,\n            [enable_charmdebug=yes])\n\nif test \"$enable_charmdebug\" = \"no\" -o \"$CMK_CCS_AVAILABLE\" = '0'\nthen\n  Echo \"CharmDebug is disabled\" \n  AC_DEFINE_UNQUOTED(CMK_CHARMDEBUG, 0, [disable charmdebug])\n  add_flag CMK_CHARMDEBUG=0\n  add_make_flag 'CMK_CHARMDEBUG:=0'\nelse\n  Echo \"CharmDebug is enabled\" \n  AC_DEFINE_UNQUOTED(CMK_CHARMDEBUG, 1, [enable charmdebug])\n  add_flag CMK_CHARMDEBUG=1\n  add_make_flag 'CMK_CHARMDEBUG:=1'\nfi\n\nAC_ARG_ENABLE([replay],\n            [AS_HELP_STRING([--enable-replay],\n              [enable record/replay])],\n            [enable_replay=$enableval],\n            [enable_replay=yes])\n\nif test \"$enable_replay\" = \"no\"\nthen\n  Echo \"Charm record/replay is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_REPLAYSYSTEM, 0, [disable replay])\nelse\n  Echo \"Charm record/replay is enabled\"\nfi\n\nAC_ARG_ENABLE([ccs],\n            [AS_HELP_STRING([--enable-ccs],\n              [enable CCS])], ,\n            [enable_ccs=yes])\n\nif test \"$enable_ccs\" = \"no\" -o \"$CMK_CCS_AVAILABLE\" = '0'\nthen\n  Echo \"CCS is disabled\" \n  AC_DEFINE_UNQUOTED(CMK_CCS_AVAILABLE, 0, [disable ccs])\nelse\n  Echo \"CCS is enabled\" \n  AC_DEFINE_UNQUOTED(CMK_CCS_AVAILABLE, 1, [enable ccs])\nfi\n\nAC_ARG_ENABLE([controlpoint],\n            [AS_HELP_STRING([--enable-controlpoint],\n              [enable control point])],\n            [enable_controlpoint=$enableval],\n            [enable_controlpoint=yes])\n\nif test \"$enable_controlpoint\" = \"yes\"\nthen\n  Echo \"Charm control point is enabled\"\n  AC_DEFINE_UNQUOTED(CMK_WITH_CONTROLPOINT, 1, [enable controlpoint])\nelse\n  Echo \"Charm control point is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_WITH_CONTROLPOINT, 0, [disable controlpoint])\nfi\n\nAC_ARG_ENABLE([lbuserdata],\n            [AS_HELP_STRING([--enable-lbuserdata],\n              [enable LB user data])],\n            [enable_lbuserdata=$enableval],\n            [enable_lbuserdata=no])\n\nif test \"$enable_lbuserdata\" = \"yes\"\nthen\n  Echo \"Charm LB user data is enabled\"\n  AC_DEFINE_UNQUOTED(CMK_LB_USER_DATA, 1, [enable lb user data])\nelse\n  Echo \"Charm LB user data  is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_LB_USER_DATA, 0, [disable lb user data])\nfi\n\nAC_ARG_ENABLE([lockless-queue],\n            [AS_HELP_STRING([--enable-lockless-queue],\n              [enable lockless queue for PE local and node queue])],\n            [enable_lockless_queue=$enableval],\n            [enable_lockless_queue=no])\n\nif test \"$enable_lockless_queue\" = \"no\"\nthen\n  Echo \"Lockless queue for PE local and node queue is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_LOCKLESS_QUEUE, 0, [disable lockless queue for pe/node queue])\nelse\n  Echo \"Lockless queue for PE local and node queue is enabled\"\n  AC_DEFINE_UNQUOTED(CMK_LOCKLESS_QUEUE, 1, [enable lockless queue for pe/node queue])\nfi\n\n\nAC_ARG_ENABLE([shrinkexpand],\n            [AS_HELP_STRING([--enable-shrinkexpand],\n              [enable malleable jobs / shrink expand])],\n            [enable_shrinkexpand=$enableval],\n            [enable_shrinkexpand=no])\n\nif test \"$enable_shrinkexpand\" = \"yes\"\nthen\n  if test \"$enable_ccs\" = \"no\"\n  then\n    Echo \"CCS cannot be disabled when enabling shrink-expand\"\n    test_finish 1\n  else\n    Echo \"Charm shrink expand is enabled - Controlpoint is disabled.\"\n    AC_DEFINE_UNQUOTED(CMK_SHRINK_EXPAND, 1, [enable shrinkexpand])\n    AC_DEFINE_UNQUOTED(CMK_WITH_CONTROLPOINT, 0, [disable controlpoint])\n  fi\nelse\n  Echo \"Charm shrink expand is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_SHRINK_EXPAND, 0, [disable shrinkexpand])\nfi\n\nAC_ARG_ENABLE([charmpy],\n            [AS_HELP_STRING([--enable-charmpy],\n              [enable charm4py support])],\n            [enable_charmpy=$enableval],\n            [enable_charmpy=no])\n\nif test \"$enable_charmpy\" = \"yes\"\nthen\n  Echo \"charm4py support is enabled\"\n  AC_DEFINE_UNQUOTED(CMK_CHARMPY, 1, [enable charmpy])\nelse\n  Echo \"charm4py support is disabled\"\n  AC_DEFINE_UNQUOTED(CMK_CHARMPY, 0, [disable charmpy])\nfi\n\nAC_ARG_WITH([numa],\n            [AS_HELP_STRING([--with-numa],\n              [support memory affinity with NUMA])],\n            [],\n            [with_numa=no])\n\nWITH_NUMA=no\nif test \"$with_numa\" = \"yes\"\nthen\n  Echo \"Charm NUMA support is builtin\"\n  WITH_NUMA=yes\nfi\n\nAC_ARG_WITH([lbtime-type],\n            [AS_HELP_STRING([--with-lbtime-type=type],\n                            [load balancing timer type])],\n            [], [with_lbtime_type=double])\n\nif test \"$with_lbtime_type\" = \"float\" -o \"$with_lbtime_type\" = \"double\"\nthen\n  Echo \"Setting load balancing timer type as '$with_lbtime_type'\"\n  AC_DEFINE_UNQUOTED(CMK_LBTIME_TYPE, $with_lbtime_type, [Setting load balancing timer type])\nelse\n  Echo \"Invalid type specified for load balancing timer type\"\n  test_finish 1\nfi\n\nAC_DEFINE_UNQUOTED(CMK_LBID_64BIT, 1, [enable 64 bit LB ID])\n\nAC_DEFINE_UNQUOTED(CMK_CKSECTIONINFO_STL, 1, [enable STL CkSectionInfo])\n\nAC_ARG_WITH([qlogic],\n            [AS_HELP_STRING([--with-qlogic],\n              [QLogic based Infiniband])],[with_qlogic=yes],\n            [with_qlogic=no])\n\nif test \"$with_qlogic\" = \"no\"\nthen\n  AC_DEFINE_UNQUOTED(QLOGIC, 0, [disable qlogic])\nelse\n  Echo \"QLogic based Infiniband\"\n  AC_DEFINE_UNQUOTED(QLOGIC, 1, [enable qlogic])\nfi\n\n#\nAC_MSG_CHECKING(machine name)\nversion=`pwd | awk -F/ '{print $(NF-1)}'`\nbase_version=\"$CMK_VDIR\"\nAC_DEFINE_UNQUOTED(CMK_MACHINE_NAME, \"$version\",[machine name])\nAC_MSG_RESULT($version)\nAC_SUBST(base_version)\n\nt=\"test.cpp\"\ntc=\"test.c\"\n\n# test result passed in $1\n# If the test suceeded, print $3 and set \"pass\"/clear \"fail\"\n# If the test failed, print $2 and clear \"pass\"/set \"fail\"\ntest_result() {\n\tif test $1 -eq 0\n\tthen\n                AC_MSG_RESULT(\"$3\")\n\t\tpass=\"1\"\n\t\tfail=\"0\"\n\telse\n                AC_MSG_RESULT(\"$4\")\n\t\tpass=\"0\"\n\t\tfail=\"1\"\n# For debugging the configure script, just \"export autoconf_debug=1\"\n#  to get this verbose data on any failed tests:\n\t\tif test ! -z \"$autoconf_debug\"\n\t\tthen\n\t\t\techo \"------- test script for $2 failed:\"\n\t\t\tcat out\n\t\t\techo \"------- the test program was:\"\n\t\t\tcat $t\n\t\t\techo \"-------\"\n\t\tfi\n\tfi\n}\n\n# Test: tries to compile C file $t (described by $1).\n#  If successful, prints $2 and sets $pass/clears $fail\n#  If failure, prints $3 and sets $pass/clears $fail\n#  additional arguments to c++ compiler are passed as $4\ntest_cc() {\n        AC_MSG_CHECKING(\"$1\")\n\techo \"### $1\" >> $charmout\n\tcat $tc >> $charmout\n\techo $CMK_CC $CMK_CC_FLAGS -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CC -c $tc -o test.o $4 >> $charmout\n\t$CMK_CC $CMK_CC_FLAGS -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CC -c $tc -o test.o $4 > out 2>&1\n\ttest_result $? \"$1\" \"$2\" \"$3\"\n \tstrictpass=$pass\n\tstrictfail=$fail\n        if test $pass -eq 1\n\tthen \n          if grep -i \"warn\" out > /dev/null 2>&1 || grep -i \"(W)\" out > /dev/null 2>&1\n\t  then \n\t    strictpass=\"0\" && strictfail=\"1\"\n          fi\n        fi\n\tcat out >> $charmout\n\t/bin/rm -f out\n}\n\n# Test: tries to compile C++ file $t (described by $1).\n#  If successful, prints $2 and sets $pass/clears $fail\n#  If failure, prints $3 and sets $pass/clears $fail\n#  additional arguments to c++ compiler are passed as $4\ntest_cxx() {\n        AC_MSG_CHECKING(\"$1\")\n\techo \"### $1\" >> $charmout\n\tcat $t >> $charmout\n\techo $CMK_CXX $CMK_CXX_FLAGS -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CXX -c $t -o test.o $4 >> $charmout\n\t$CMK_CXX $CMK_CXX_FLAGS -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CXX -c $t -o test.o $4 > out 2>&1\n\ttest_result $? \"$1\" \"$2\" \"$3\"\n \tstrictpass=$pass\n\tstrictfail=$fail\n        if test $pass -eq 1\n\tthen \n          if grep -i \"warn\" out > /dev/null 2>&1 || grep -i \"(W)\" out > /dev/null 2>&1\n\t  then \n\t    strictpass=\"0\" && strictfail=\"1\"\n          fi\n        fi\n\tcat out >> $charmout\n\t/bin/rm -f out\n}\n\n# Test: tries to compile C++ file $t (described by $1) using native compiler.\n#  If successful, prints $2 and sets $pass/clears $fail\n#  If failure, prints $3 and sets $pass/clears $fail\n#  additional arguments to c++ compiler are passed as $4\ntest_native_cxx() {\n        AC_MSG_CHECKING(\"$1\")\n\techo \"### $1\" >> $charmout\n\tcat $t >> $charmout\n\techo $CMK_NATIVE_CXX $CMK_NATIVE_CXX_FLAGS -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CXX -c $t -o test.o $4 >> $charmout\n\t$CMK_NATIVE_CXX $CMK_NATIVE_CXX_FLAGS -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CXX -c $t -o test.o $4 > out 2>&1\n\ttest_result $? \"$1\" \"$2\" \"$3\"\n\tstrictpass=$pass\n\tstrictfail=$fail\n        if test $pass -eq 1\n\tthen\n          if grep -i \"warn\" out > /dev/null 2>&1 || grep -i \"(W)\" out > /dev/null 2>&1\n\t  then\n\t    strictpass=\"0\" && strictfail=\"1\"\n          fi\n        fi\n\tcat out >> $charmout\n\t/bin/rm -f out\n}\n\n# Testlink: tries to compile and link a C++ file $t (described by $1).\n#  If successful, prints $2 and sets $pass/clears $fail\n#  If failure, prints $3 and sets $pass/clears $fail\n#  additional arguments to c++ compiler are passed as $4\ntest_link() {\n        AC_MSG_CHECKING(\"$1\")\n\techo \"### $1\" >> $charmout\n\tcat $t >> $charmout\n\techo $CMK_CXX $CMK_CXX_FLAGS -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CXX -c $t -o test.o $4 >> $charmout\n\t$CMK_CXX $CMK_CXX_FLAGS -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CXX -c $t -o test.o $4 > out 2>&1\n        if test $? -ne 0\n        then\n          test_result 1 \"$1\" \"$2\" \"$3\"\n        else\n          echo $CMK_LDXX $CMK_LDXX_FLAGS $CMK_LINK_BINARY -o testlink test.o $CMK_LIBDIR $OPTS_LD $CMK_SYSLIBS $4 $5 >> $charmout\n          $CMK_LDXX $CMK_LDXX_FLAGS $CMK_LINK_BINARY -o testlink test.o $CMK_LIBDIR $OPTS_LD $CMK_SYSLIBS $4 $5 >> out 2>&1\n          ret=$?\n\t  test ! -x testlink && ret=1\n          test_result $ret \"$1\" \"$2\" \"$3\"\n        fi\n \tstrictpass=$pass\n\tstrictfail=$fail\n        if test $pass -eq 1\n\tthen \n \t  if cat out | grep -i \"warn\" > /dev/null 2>&1\n\t  then \n\t    strictpass=\"0\" && strictfail=\"1\"\n          fi\n        fi\n\tcat out >> $charmout\n\t/bin/rm -f out\n}\n\n# Testlinkc: tries to compile and link a C file $t (described by $1).\n#  If successful, prints $2 and sets $pass/clears $fail\n#  If failure, prints $3 and sets $pass/clears $fail\n#  additional arguments to c++ compiler are passed as $4\ntest_linkc() {\n        AC_MSG_CHECKING(\"$1\")\n\techo \"### $1\" >> $charmout\n\tcat $tc >> $charmout\n\techo $CMK_CC $CMK_CC_FLAGS -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CC -c $tc -o test.o $4 >> $charmout\n\t$CMK_CC $CMK_CC_FLAGS -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CC -c $tc -o test.o $4 > out 2>&1\n        if test $? -ne 0\n        then\n          test_result 1 \"$1\" \"$2\" \"$3\"\n        else\n          echo $CMK_LD $CMK_LD_FLAGS $CMK_LINK_BINARY -o testlink test.o $CMK_LIBDIR $OPTS_LD $CMK_SYSLIBS $4 >> $charmout\n          $CMK_LD $CMK_LD_FLAGS $CMK_LINK_BINARY -o testlink test.o $CMK_LIBDIR $OPTS_LD $CMK_SYSLIBS $4 >> out 2>&1\n          test_result $? \"$1\" \"$2\" \"$3\"\n        fi\n \tstrictpass=$pass\n\tstrictfail=$fail\n        if test $pass -eq 1\n\tthen \n \t  if cat out | grep -i \"warn\" > /dev/null 2>&1\n\t  then \n\t    strictpass=\"0\" && strictfail=\"1\"\n          fi\n        fi\n\tcat out >> $charmout\n\t/bin/rm -f out\n}\n\n# test_linkso $1 $2 $3 $4, where\n# $1: debug msg\n# $2: yes msg\n# $3: no msg\n# $4: extra link option\ntest_linkso() {\n        AC_MSG_CHECKING(\"$1\")\n\techo $1 >> $charmout\n\tcat $t >> $charmout\n\techo $CMK_CXX $CMK_CXX_FLAGS -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CXX $CMK_PIC -c $t -o test.o $4 >> $charmout\n\t$CMK_CXX $CMK_CXX_FLAGS -I../include -I. $CMK_INCDIR $CMK_SYSINC $OPTS_CXX -c $CMK_PIC $t -o test.o $4 > out 2>&1\n        if test $? = 1\n        then\n          test_result 1 \"$1\" \"$2\" \"$3\"\n        else\n\t  echo $CMK_LD $CMK_LD_FLAGS $CMK_LIBDIR $OPTS_LD $CMK_LD_SHARED $CMK_SYSLIBS test.o -o testlink.$CMK_SHARED_SUF $4 >> $charmout\n\t  $CMK_LD $CMK_LD_FLAGS $CMK_LIBDIR $OPTS_LD $CMK_LD_SHARED $CMK_SYSLIBS test.o -o testlink.$CMK_SHARED_SUF $4 > out 2>&1\n\t  test_result $? \"$1\" \"$2\" \"$3\"\n\tfi\n\tcat out >> $charmout\n\t/bin/rm -f out testlink.$CMK_SHARED_SUF\n}\n\ntest_finish() {\n\trm -f $t $tc testlink test.o\t> /dev/null 2>&1\n\t/bin/rm -f out\n\ttest $1 -eq 1 && echo \"*** Please find detailed output in tmp/charmconfig.out ***\"\n\texit $1\n}\n\n# detect certain architectures\nif cat /proc/cpuinfo 2>/dev/null | grep 'POWER7'  > /dev/null\nthen\n  AC_DEFINE_UNQUOTED(CMK_POWER7, 1, [whether is power7])\nfi\n\n# detect OS\nOSNAME=`uname -s`\nif test $OSNAME = \"Linux\"\nthen\n  AC_DEFINE_UNQUOTED(CMK_OS_IS_LINUX, 1, [OS is Linux])\nelse\n  AC_DEFINE_UNQUOTED(CMK_OS_IS_LINUX, 0, [OS is Linux])\nfi\n\n# test cp -p\nAC_MSG_CHECKING(\"cp command as\")\nCP=\"cp -p\"\ntouch test_file\nif ! $CP test_file test_file.cp 2>err\nthen\n  CP=\"cp\"\nfi\nrm -f test_file test_file.cp\nAC_MSG_RESULT($CP)\nadd_flag CP=\\\"\"$CP\"\\\" \"cp command\"\n \n\ncat > $t <<EOT\n#include <stdio.h>\nvoid foo(void) {\n\tprintf(\"Hello, world!\\n\");\n}\nEOT\n\nif test \"$CMK_BUILD_CRAY\" = \"1\"\nthen\n#echo \"Test for known incompatible compiler versions\"\n\n if test \"$CRAY_CC_VERSION\" = \"8.1.4\"\n then\n\techo \"CCE 8.1.4 produces incorrect Charm++ code\"\n\techo \"Please use a newer version of the CCE compiler\"\n\techo \"e.g. module load cce/8.1.7\"\n\ttest_finish 1\n fi\nfi\n\n#echo \"set C++ compiler as: $CMK_CXX $OPTS_CXX $OPTS\"\nAC_MSG_CHECKING(\"C++ compiler as\")\nAC_MSG_RESULT(\"$CMK_CXX $OPTS_CXX\")\ntest_cxx \"whether C++ compiler works\" \"ok\" \"no\" \"\"\nif test $fail -eq 1\nthen\n\techo \"Cannot compile C++ programs with $CMK_CXX\"\n\techo \" (check your charm++ version)\"\n\ttest_finish 1\nfi\n\ncat > $t <<EOT\n#include <stdio.h>\nint main() {\n\tprintf(\"Hello, world!\\n\");\n\treturn 0;\n}\nEOT\n#echo \"set C++ linker as: $CMK_LDXX $OPTS_LD\"\nAC_MSG_CHECKING(\"C++ linker as\")\nAC_MSG_RESULT(\"$CMK_LDXX $OPTS_LD\")\ntest_link \"whether linker works\" \"ok\" \"no\" \"\"\nif test $fail -eq 1\nthen\n\techo \"Cannot link C++ programs with $CMK_LDXX\"\n\techo \" (check your charm++ version)\"\n\ttest_finish 1\nfi\n\nAC_MSG_CHECKING(\"Native C++ compiler as\")\nAC_MSG_RESULT(\"$CMK_NATIVE_CXX\")\nAC_MSG_CHECKING(\"Sequential C++ compiler as\")\nAC_MSG_RESULT(\"$CMK_SEQ_CXX\")\n\nif echo \"$CMK_CC\" | grep -E \"gcc|clang|icc\" > /dev/null 2> /dev/null\nthen\n  test_link \"whether compiler accept -fno-stack-protector\" \"ok\" \"no\" \"-fno-stack-protector\"\n  if test $strictpass -eq 1\n  then\n\tadd_flag OPTS_CC='\"$OPTS_CC -fno-stack-protector\"' \"stack-protection disabling\"\n\tadd_flag OPTS_CXX='\"$OPTS_CXX -fno-stack-protector\"' \"stack-protection disabling\"\n  fi\nfi\n\n#### check if C++ compiler will accept C++11 features without warning ####\ncat > $t <<EOT\n// Check for Intel compiler incompatibility with the active g++/libstdc++ by\n// including an arbitrary standard library header (cf bug #1560)\n#include <map>\n\n// Check for an excessively old g++/libstdc++ that can't handle features we use\n#include <memory>\n#include <vector>\nstd::unique_ptr<int> i;\n\nclass CkMigrateMessage;\n\nstruct base {\n  base(void) { }\n  base(CkMigrateMessage *) { }\n};\n\ntemplate <class Parent>\nstruct CBaseT1 : Parent {\n  std::vector<int> v; // check for C++11's shrink_to_fit()\n\n  CBaseT1(void) :Parent()  { v.shrink_to_fit(); }\n  CBaseT1(CkMigrateMessage *m) :Parent(m) { }\n  CBaseT1(CBaseT1&& rhs) :Parent() { }\n\n  template <typename... Args>\n    CBaseT1(Args... args) : Parent(args...) { }\n};\n\ntemplate struct CBaseT1<base>;\nEOT\ngot_cpp11=\"\"\ntest_cxx \"whether C++ compiler supports C++11 without flags\" \"yes\" \"no\" \"\"\nif test $strictpass -eq 1\nthen\n  got_cpp11=\"true\"\nelse\n# Flags for g++/clang++/icpc/xlC++, pgCC, and CrayCC respectively\nfor i in \"-std=c++11\" \"--c++11\" \"-h std=c++11\"; do\n    test_cxx \"whether C++ compiler supports C++11 with '$i'\" \"yes\" \"no\" \"$i\"\n    if test $strictpass -eq 1\n    then\n      add_flag \"$(echo OPTS_CXX=\\\"\\$OPTS_CXX $i\\\")\" \"Enable C++11 support\"\n      OPTS_CXX=\"$OPTS_CXX $i\"\n      got_cpp11=\"true\"\n      break\n    fi\ndone\nfi\n\nif test -z $got_cpp11\nthen\n  echo \"Charm++ requires C++11 support, but doesn't know the flag to enable it\"\n  echo\n  echo \"For Intel's compiler please see\"\n  echo \"https://charm.cs.illinois.edu/redmine/issues/1560\"\n  echo \"about making a suitable version of gcc/g++/libstdc++ available\"\n  echo\n  echo \"For Blue Gene/Q please use the Clang compiler\"\n  test_finish 1\nfi\n\ntest_native_cxx \"whether native C++ compiler supports C++11 without flags\" \"yes\" \"no\" \"\"\nif test $strictpass -ne 1\nthen\n  # Flags for g++/clang++/icpc/xlC++, pgCC, and CrayCC respectively\n  for i in \"-std=c++11\" \"--c++11\" \"-h std=c++11\"; do\n    test_native_cxx \"whether C++ compiler supports C++11 with '$i'\" \"yes\" \"no\" \"$i\"\n    if test $strictpass -eq 1\n    then\n      add_flag \"$(echo CMK_NATIVE_CXX_FLAGS=\\\"\\$CMK_NATIVE_CXX_FLAGS $i\\\")\" \"Enable C++11 support\"\n      break\n    fi\ndone\nfi\n\n# Workaround for bug #1045 appearing in GCC >6.x\ntest_cxx \"whether C++ compiler accepts -fno-lifetime-dse\" \"yes\" \"no\" \"-fno-lifetime-dse\"\nif test $strictpass -eq 1\nthen\n    add_flag \"$(echo OPTS_CXX=\\\"\\$OPTS_CXX -fno-lifetime-dse\\\")\" \"Disable 'Lifetime DSE' optimization to work around bug #1045 in GCC >6.x\"\n    OPTS_CXX=\"$OPTS_CXX -fno-lifetime-dse\"\nfi\n\n# Determine compiler/linker flags to build libcharm.so for charm4py\nif test \"$enable_charmpy\" = \"yes\"\nthen\n\n  cat > $t <<EOT\nint main() { return 0; }\nEOT\n\n  test_cxx \"whether C++ compiler accepts --no-as-needed\" \"yes\" \"no\" \"--no-as-needed\"\n  if test $strictpass -eq 1\n  then\n      add_flag \"$(echo CXX_NO_AS_NEEDED=\\\"--no-as-needed\\\")\" \"--no-as-needed flag necessary for compilers that default to linking with --as-needed\"\n  fi\n\n  got_opt_whole_archive=\"\"\n  # Flags for g++/clang++/icpc, Apple-LLVM respectively\n  for i in \"-Wl,--whole-archive -Wl,--no-whole-archive\" \"-Wl,-all_load\"; do\n      test_link \"whether linker supports '$i'\" \"yes\" \"no\" \"\" \"$i\"\n      if test $strictpass -eq 1\n      then\n        got_opt_whole_archive=\"true\"\n        IFS=' ' read LDXX_WHOLE_ARCHIVE_PRE LDXX_WHOLE_ARCHIVE_POST <<< $i\n        add_flag \"$(echo LDXX_WHOLE_ARCHIVE_PRE=\\\"$LDXX_WHOLE_ARCHIVE_PRE\\\")\" \"Flags to link whole archives into libcharm.so\"\n        add_flag \"$(echo LDXX_WHOLE_ARCHIVE_POST=\\\"$LDXX_WHOLE_ARCHIVE_POST\\\")\" \"Flags to link whole archives into libcharm.so\"\n        break\n      fi\n  done\n\n  if test -z $got_opt_whole_archive\n  then\n    echo \"Don't know how to build libcharm.so for Charm4py\"\n    test_finish 1\n  fi\nfi\n\n# Figure out if the user has asked to enable the latest language standards\nUSER_ASKED_FOR_NEW_STD=`echo \"$BUILDOPTS\" | grep \"\\-use-new-std\" | wc -l`\n\n# If the user has asked for the newer standards, check if the compilers know about them\nif test $USER_ASKED_FOR_NEW_STD -ge 1\nthen\n\n#### check if c compiler supports c11 compilation flags ####\ncat > $tc <<EOT\n#include <stdio.h>\n\nint foo()\n{\n  return 0;\n}\nEOT\ntest_cc \"whether c compiler knows of the c11 standard\" \"ok\" \"no\" \"$CMK_ENABLE_C11\"\nAC_DEFINE_UNQUOTED(CMK_COMPILER_KNOWS_C11, $pass, [whether c compiler knows of the c11 standard] )\nif test $pass -eq 1\nthen\n        # Record results for charmc's future use\n        add_flag 'CMK_COMPILER_KNOWS_C11=\"1\"' \"c11\"\n        # For the rest of configure, append this to compilation flags\n        OPTS_CC=\"$CMK_ENABLE_C11 $OPTS_CC\"\nfi\nfi # endif USER_ASKED_FOR_NEW_STD\n\n# Perform the tests\n\nAC_ARG_WITH([refnum-type],\n            [AS_HELP_STRING([--with-refnum-type=type],\n                            [size of the envelope refnum field])],\n            [], [with_refnum_type=no])\n\nif test \"$with_refnum_type\" = \"no\" -o \"$with_refnum_type\" = \"short\"\nthen\n  Echo \"Setting charm++ envelope refnum field to unsigned short\"\n  AC_DEFINE_UNQUOTED(CMK_REFNUM_TYPE, unsigned short, [envelope refnum field set to UShort])\nelif test \"$with_refnum_type\" = \"int\"\nthen\n  Echo \"Setting charm++ envelope refnum field to unsigned int\"\n  AC_DEFINE_UNQUOTED(CMK_REFNUM_TYPE, unsigned int, [envelope refnum field set to UInt])\nelse\n  Echo \"Invalid size specified for refnum field\"\n  test_finish 1\nfi\n\n\nAC_ARG_WITH([prio-type],\n            [AS_HELP_STRING([--with-prio-type=type],\n                            [size of expected message priorities])],\n            [], [with_prio_type=bitvec])\n\nif test \"$with_prio_type\" = \"char\" -o \"$with_prio_type\" = \"short\" -o \"$with_prio_type\" = \"int\" -o \"$with_prio_type\" = \"long\" -o \"$with_prio_type\" = \"float\" -o \"$with_prio_type\" = \"double\"\nthen\n  Echo \"Configuring support for message priorities of sizeof type $with_prio_type\"\n  AC_DEFINE_UNQUOTED(CMK_USE_STL_MSGQ, 1, [whether charm scheduler should use an STL-based msg q])\n  AC_DEFINE_UNQUOTED(CMK_MSG_PRIO_TYPE, $with_prio_type, [expected message priorities are sizeof $with_prio_type])\nelif test \"$with_prio_type\" = \"bitvec\"\nthen\n  Echo \"Configuring support for message priorities of arbitrary size (bitvectors)\"\n  AC_DEFINE_UNQUOTED(CMK_USE_STL_MSGQ, 0, [whether charm scheduler should use an STL-based msg q])\n  AC_DEFINE_UNQUOTED(CMK_MSG_PRIO_TYPE, $with_prio_type, [expected message priorities are arbitrarily sized])\nelse\n  Echo \"Invalid size ($with_prio_type) specified for message priorities. Can only accept char, short, int, long, float, double and bitvec\"\n  test_finish 1\nfi\n\n# enable/disable randomized scheduler queue\nAC_ARG_ENABLE([randomized-msgq],\n            [AS_HELP_STRING([--enable-randomized-msgq],\n              [enable a randomized msg queue (for debugging etc)])], ,\n            [enable_randomized_msgq=no])\n\nif test \"$enable_randomized_msgq\" = \"yes\" -a \"$with_prio_type\" != \"bitvec\"\nthen\n  Echo \"The charm message queue will be randomized (and will not respect priorities)\"\n  AC_DEFINE_UNQUOTED(CMK_RANDOMIZED_MSGQ, 1, [enable the randomized msgq in the scheduler])\nelse\n  AC_DEFINE_UNQUOTED(CMK_RANDOMIZED_MSGQ, 0, [disable the randomized msgq in the scheduler])\n  if test \"$enable_randomized_msgq\" = \"yes\"\n  then\n    Echo 'A randomized message queue is only available when --with-prio-type != bitvec.'\n    Echo \"Specify prio-type to be a data type long enough to hold the message priorities in your application\"\n    Echo \"for example: --with-prio-type=int (or short / long etc).\"\n    test_finish 1\n  fi\nfi\n\n#### Check if compiler if 64 bit ####\ncat > $t <<EOT\n#include <stdio.h>\n\nint foo()\n{\nint x[[(int)(sizeof(void *) - 7)]]={0};\nreturn x[[0]];\n}\nEOT\ntest_cxx \"whether compiler generates code for 64-bit\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_SIZET_64BIT, $strictpass, [whether size_t 64bit])\nin64bit=$strictpass\n\n### Check if compiler supports std::is_constructible<> ###\ncat > $t <<EOT\n#include <type_traits>\n\nstruct s {\n       s(int a) { }\n};\n\nbool foo()\n{\n  return std::is_constructible<s, int>::value;\n}\nEOT\ntest_cxx \"whether compiler supports std::is_constructible\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_IS_CONSTRUCTIBLE, $strictpass, [whether compiler supports std::is_constructible])\n\n### Check if compiler supports std::alignment_of<> ###\ncat > $t <<EOT\n#include <type_traits>\n\nint foo()\n{\n  return std::alignment_of<int>::value;\n}\nEOT\ntest_cxx \"whether compiler supports std::alignment_of\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_ALIGNMENT_OF, $strictpass, [whether compiler supports std::alignment_of])\n\n### Check if compiler implements regex ###\ncat > $t <<EOT\n#include <regex>\nvoid foo()\n{\n#if __cplusplus >= 201103L &&                             \\\n    (!defined(__GLIBCXX__) || (__cplusplus >= 201402L) || \\\n        (defined(_GLIBCXX_REGEX_DFS_QUANTIFIERS_LIMIT) || \\\n         defined(_GLIBCXX_REGEX_STATE_LIMIT)           || \\\n             (defined(_GLIBCXX_RELEASE)                && \\\n             _GLIBCXX_RELEASE > 4)))\n// compiler has regex support, continue\n#else\n// force compilation to fail\nstatic_assert(false, \"compiler has no regex implementation\");\n#endif\n}\nEOT\ntest_cxx \"whether compiler implements regex\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_REGEX, $pass, [whether compiler implements regex])\n\n#### test if has values.h ####\ncat > $t <<EOT\n#include <values.h>\nint main() { \n  double d = MAXDOUBLE;\n  return 0;\n}\nEOT\ntest_cxx \"whether has values.h \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_VALUES_H, $pass, [whether has values.h])\n\n#### test if has stdint.h ####\ncat > $t <<EOT\n#include <stdint.h>\nint main() { \n  return 0;\n}\nEOT\ntest_cxx \"whether has stdint.h \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_STDINT_H, $pass, [whether has stdint.h])\n\n#### test if has malloc.h ####\ncat > $t <<EOT\n#include <malloc.h>\nint main() { \n  return 0;\n}\nEOT\ntest_cxx \"whether has malloc.h \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_MALLOC_H, $pass, [whether has malloc.h])\n\n#### test if has alloca.h ####\ncat > $t <<EOT\n#include <alloca.h>\nint main() {\n  double *s=(double *)alloca(sizeof(double));\n  *s=1.0;\n  return 0;\n}\nEOT\ntest_cxx \"whether has alloca.h \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_ALLOCA_H, $pass, [whether has alloca.h])\n\n#### test if has regex.h ####\ncat > $t <<EOT\n#include <regex.h>\nint main() {\n  regex_t re;\n  regcomp(&re, \".*MOD.*\", REG_EXTENDED|REG_NOSUB);\n  return 0;\n}\nEOT\ntest_cxx \"whether has regex.h \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_REGEX_H, $pass, [whether has regex.h])\n\n#### Check long long ####\ncat > $t <<EOT\n#include <stdlib.h>\nlong long foo(void) { return 17; }\nEOT\ntest_cxx \"whether long long works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_LONG_LONG_DEFINED, $pass, [whether long long works])\n\n#### Check __int64 ####\ncat > $t <<EOT\n#include <stdlib.h>\n__int64 foo(void) { return 17; }\nEOT\ntest_cxx \"whether __int64 works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED([CMK___int64_DEFINED], $pass, [whether __int64 works])\n\n\nCMK_HAS_INT16=0\n\n#### Check __int128 ####\ncat > $t <<EOT\n#include <stdlib.h>\nint foo(void) {\n  __int128   a;\n  int x[[(int)(sizeof(__int128) - 15)]]={0};\n  return x[[0]];\n}\nEOT\ntest_cxx \"whether __int128 (128-bit integer) works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED([CMK___int128_DEFINED], $pass, [whether __int128 works])\nif test $pass -eq 1\nthen\n  CMK_HAS_INT16=1\n  add_flag CMK_HAS_INT16=1\nfi\n\n#### Check __int128_t ####\ncat > $t <<EOT\n#include <stdlib.h>\nint foo(void) {\n  __int128_t   a;\n  __uint128_t   b;\n  a = a + a;\n  int x[[(int)(sizeof(__int128_t) - 15)]]={0};\n  return x[[0]];\n}\nEOT\ntest_cxx \"whether __int128_t (128-bit integer) works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED([CMK___int128_t_DEFINED], $pass, [whether __int128_t works])\nif test $pass -eq 1\nthen\n  CMK_HAS_INT16=1\n  add_flag CMK_HAS_INT16=1\nfi\n\n#### Summarize *int128* ####\n\nAC_DEFINE_UNQUOTED([CMK_HAS_INT16], $CMK_HAS_INT16, [whether any 128-bit integer works])\n\n\n### Check if we have C++11 <atomic> ###\ncat > $t <<EOT\n#include <atomic>\nint main(int argc, char** argv) { \n  return 0;\n}\nEOT\ntest_cxx \"whether C++ library has <atomic> \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_CXX11_ATOMIC, $pass, [whether C++ library has <atomic>])\n\nif test $pass -ne 1\nthen\n### Check if we have pre-C++11 <cstdatomic> ###\ncat > $t <<EOT\n#include <cstdatomic>\nint main(int argc, char** argv) { \n  return 0;\n}\nEOT\ntest_cxx \"whether C++ library has <cstdatomic> \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_CXX0X_CSTDATOMIC, $pass, [whether C++ library has <cstdatomic>])\nfi\n\nif test $pass -ne 1 -a \"$CMK_COMPILER\" != \"bgxlc\"\nthen\n\techo \"Charm++ requires C++11 atomic support\"\n\ttest_finish 1\nfi\n\n#### Check long double ####\ncat > $t <<EOT\n#include <stdlib.h>\nlong double foo(void) { return 17.0; }\nEOT\ntest_cxx \"whether long double works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_LONG_DOUBLE_DEFINED, $strictpass, [whether long double works])\n\n#### Check ucontext and FPU pointer ####\ncat > $t <<EOT\n#include <ucontext.h>\nstruct _libc_fpstate   fpstate;\nfpregset_t *fp;\nEOT\ntest_cxx \"whether ucontext has FPU pointer\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_CONTEXT_FPU_POINTER, $pass, [whether ucontext has pointer])\n\nif test $pass -eq 1\nthen\ncat > $t <<EOT\n#include <ucontext.h>\n\nint main()\n{\n  ucontext_t context;\n  context.uc_mcontext.uc_regs = 0;\n}\nEOT\ntest_cxx \"whether ucontext uses uc_regs\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_CONTEXT_FPU_POINTER_UCREGS, $pass, [whether ucontext uses uc_regs union])\nfi\n\ncat > $t <<EOT\n#include <ucontext.h>\nvrregset_t *v_regs;\nucontext_t  uc;\n\nvoid foo()\n{\n  vrregset_t *ptr = uc.uc_mcontext.v_regs;\n}\nEOT\ntest_cxx \"whether ucontext has pointer (v_regs) of vector type\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_CONTEXT_V_REGS, $pass, [whether ucontext has pointer (v_regs) of vector type])\n\n#### Check ucontext and FPU pointer ####\ncat > $t <<EOT\n#include <infiniband/verbs.h>\nvoid test()\n{\n    struct ibv_context    *context;\n    int ibPort;\n    struct ibv_port_attr attr;\n    if (ibv_query_port(context, ibPort, &attr) != 0) return;\n    if (attr.link_layer == IBV_LINK_LAYER_INFINIBAND)  return;\n}\nEOT\ntest_cxx \"whether ibverbs ibv_port_attr has link_layer field\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_IBV_PORT_ATTR_HAS_LINK_LAYER, $pass, [whether ibv_port_attr has link_layer field])\n\n\n###################### C++ Compiler Features #####################\n\n#### check C inline ####\ncat > $tc <<EOT\ninline static int foo()\n{\n  return 1;\n}\nEOT\ntest_cc \"whether inline works in C\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_C_INLINE, $strictpass, [whether C inline works in C])\n\n#### check if signed char is same as char ####\ncat > $t <<EOT\n#include <stdlib.h>\nclass er {\n protected:\n   void operator()(char &v,const char *desc=NULL) {};\n   void operator()(signed char &v,const char *desc=NULL) {};\n};\nEOT\ntest_cxx \"whether C++ signed char and char differ\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_SIGNEDCHAR_DIFF_CHAR, $pass, [whether C++ signed char and char differ])\n\n#### check if typeinfo exists and works #####\ncat > $t <<EOT\n#include <typeinfo>\nconst char *foo(void) {\n\tint x;\n\treturn typeid(x).name();\n}\nEOT\ntest_cxx \"whether typeinfo/typeid works\" \"ok\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_TYPEINFO, $pass, [whether typeinfo/typeid works])\n\n#### check if iterator_traits is defined #####\ncat > $t <<EOT\n#include <iterator>\n\ntemplate <typename T> // T models Input Iterator\ntypename std::iterator_traits<T>::value_type accumulate(T first, T last)\n{\n      typename std::iterator_traits<T>::value_type result = 0;\n      while(first != last)\n            result += *first++;\n      return result;\n}\nEOT\ntest_cxx \"whether std::iterator_traits is defined\" \"ok\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_ITERATOR_TRAITS, $pass, [whether iterator_traits works])\n\n#### check if std::distance is defined #####\ncat > $t <<EOT\n#include <vector>\n#include <iterator>\n\nint foo()\n{\n  std::vector<int> tree;\n  return std::distance(tree.begin(), tree.end());\n}\nEOT\ntest_cxx \"whether std::distance is defined\" \"ok\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_STD_DISTANCE, $pass, [whether std::distance works])\n\n#### check if std::inserter is defined #####\ncat > $t <<EOT\n#include <list>\n#include <iterator>\n\nvoid foo()\n{\n  using namespace std;\n  list<int> L;\n  inserter ( L, L.end ( ) ) = 500;\n}\nEOT\ntest_cxx \"whether std::inserter is defined\" \"ok\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_STD_INSERTER, $pass, [whether std::inserter works])\n\n#### check if C++17's std::void_t is defined #####\ncat > $t <<EOT\n#include <type_traits>\n\ntemplate<typename T, typename = std::void_t<>>\nstruct has_pup_member : std::false_type {};\n\nEOT\ntest_cxx \"whether std::void_t is defined\" \"ok\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_STD_VOID_T, $pass, [whether std::void_t works])\n\n####### Check support for features added by the new C11 and CPP11 standards ########\n\n#### test if we can have multiple delete like this ####\ncat > $t <<EOT\nclass foo {\npublic:\n  void operator delete(void*p){};\n  void operator delete(void*p,int*){};\n};\nEOT\ntest_cxx \"whether operator delete can be overloaded in same class\" \"ok\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_MULTIPLE_DELETE, $strictpass, [whether operator delete can be overloaded in same class])\n\n#### test if offsetof exists ####\ncat > $t <<EOT\n#include <stddef.h>\n\nstruct FooType {\n        int f1;\n        int f2;\n        double f3;\n};\n\nvoid foo()\n{\n  int off = offsetof(FooType, f2);\n}\nEOT\ntest_cxx \"whether offsetof is defined\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_OFFSETOF, $pass, [whether offsetof exists])\n\n#### test if we can use gcc x86 assembly like this ####\ncat > $t <<EOT\ndouble foo(void)\n{\n  unsigned long long int v=0;\n  int *lo=0+(int *)&v;\n  int *hi=1+(int *)&v;\n  __asm__ __volatile__(\n      \"rdtsc; movl %%edx,%0; movl %%eax,%1\"\n      : /* output  */ \"=m\" (*hi), \"=m\" (*lo)\n      : /* input */\n      : /* trashes */ \"%edx\", \"%eax\"\n  );\n  return v;\n}\nEOT\ntest_cxx \"whether GCC x86 assembly works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_GCC_X86_ASM, $strictpass, [Allows gcc x86 assembly.])\n\n#### test if we can use gcc x86 assembly like this ####\nif test $strictpass = 1\nthen\ncat > $t <<EOT\nint foo(void)\n{\n  int x;\n  asm(\"lock incl %0\" :: \"m\" (x));\n  asm(\"lock decl %0\" :: \"m\" (x));\n  return x;\n}\nEOT\ntest_cxx \"whether GCC x86 assembly for atomic increment works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_GCC_X86_ASM_ATOMICINCREMENT, $strictpass, [Allows gcc x86 assembly for atomic increment.])\nfi\n\n#### test if we can use asm eieio assembly like this ####\ncat > $t <<EOT\ndouble foo(void)\n{\n        unsigned long long int x;\n\tasm volatile(\"eieio\" ::: \"memory\");\n        return x;\n}\nEOT\ntest_cxx \"whether asm eieio assembly works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_PPC_ASM, $strictpass, [Allows asm eieio assembly.])\n\n\n\n#### test if we can use __thread ####\ncat > $t <<EOT\n__thread unsigned long long int x;\nstatic __thread  int y;\nvoid foo(void)\n{\n\tx = 1;\n\ty = 1;\n}\nEOT\ntest_cxx \"whether __thread (Thread Local Storage) is supported\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_TLS_VARIABLES, $strictpass, [Allows __thread.])\n\n#### check __sync_add_and_fetch ####\ncat > $tc <<EOT\n#include <stdio.h>\nint main()\n{\n  int t=1;\n  __sync_add_and_fetch(&t, 1);\n  return 1;\n}\nEOT\ntest_linkc \"whether synchronization primitives (__sync_add_and_fetch) works in C\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_C_SYNC_ADD_AND_FETCH_PRIMITIVE, $pass, [whether sync_add_and_fetch primitive works in C])\n\n#### check __sync_synchronize ####\ncat > $tc <<EOT\n#include <stdio.h>\nint main()\n{\n  __sync_synchronize();\n}\nEOT\n\ntest_linkc \"whether synchronization primitives (__sync_synchronize) works in C\" \"yes\" \"no\" \"\"\n\nAC_DEFINE_UNQUOTED(CMK_C_SYNC_SYNCHRONIZE_PRIMITIVE, $pass, [whether sync_synchronize primitives works in C])\n\n\n### test for __executable_start ###\n\ncat > $tc <<EOT\nextern int __executable_start;\nint main()\n{\n  return __executable_start;\n}\nEOT\ntest_linkc \"whether has __executable_start\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED([CMK_HAS_EXECUTABLE_START], $pass, [whether has __executable_start])\n\n### test if switching TLS register ###\nif test $in64bit = 1\nthen\ncat > $t <<EOT\n#include <elf.h>\n#include <stdlib.h>\n#include <malloc.h>\n\nvoid switchTLS() {\n  Elf64_Addr m1, m2;\n  asm volatile (\"movq %%fs:0x0, %0\\n\\t\"\n                \"movq %1, %%fs:0x0\\n\\t\"\n                : \"=r\"(m1)\n                : \"r\"(m2));\n}\nEOT\ntest_cxx \"whether switching TLS register (64-bit) is supported\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_TLS_SWITCHING64, $strictpass, [Allows switching TLS 64-bit.])\nelse\ncat > $t <<EOT\n#include <elf.h>\n#include <stdlib.h>\n#include <malloc.h>\n\nvoid switchTLS() {\n  Elf32_Addr m1, m2;\n  asm volatile (\"movl %%gs:0x0, %0\\n\\t\"\n                \"movl %1, %%gs:0x0\\n\\t\"\n                : \"=r\"(m1)\n                : \"r\"(m2));\n}\nEOT\ntest_cxx \"whether switching TLS register (32-bit) is supported\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_TLS_SWITCHING32, $strictpass, [Allows switching TLS in 32-bit.])\nfi\n\n### test for dl_iterate_phdr ###\n\ncat > $tc <<EOT\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE\n#endif\n#ifndef __USE_GNU\n# define __USE_GNU\n#endif\n#include <link.h>\n#include <stddef.h>\nstatic int callback(struct dl_phdr_info* info, size_t size, void* data)\n{\n  return 0;\n}\nint main()\n{\n  dl_iterate_phdr(callback, NULL);\n  return 0;\n}\nEOT\ntest_linkc \"whether has dl_iterate_phdr\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED([CMK_HAS_DL_ITERATE_PHDR], $pass, [whether has dl_iterate_phdr])\n\n\n### test for __malloc_hook ###\n\ncat > $tc <<EOT\nextern int __malloc_hook;\nint main()\n{\n  return __malloc_hook;\n}\nEOT\ntest_linkc \"whether has __malloc_hook\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED([CMK_HAS_MALLOC_HOOK], $pass, [whether has __malloc_hook])\nadd_make_flag \"CMK_HAS_MALLOC_HOOK:=$pass\" 'whether has __malloc_hook'\n\n\n#### test if we can build OFI ####\nif test \"$CMK_BUILD_OFI\" = 1\nthen\ncat > $tc <<EOT\n#include <rdma/fabric.h>\nint main(int argc, char **argv)\n{\n  struct fi_info *providers;\n  int ret = fi_getinfo(FI_VERSION(1,0), NULL, NULL, 0ULL, NULL, &providers);\n  return 0;\n}\nEOT\ntest_cc \"whether build on OFI\" \"yes\" \"no\" \"-lfabric\"\nAC_DEFINE_UNQUOTED(CMK_BUILD_ON_OFI, $strictpass, [build OFI.])\nBUILD_OFI=$strictpass\n\nif test $BUILD_OFI -eq 0\nthen\n  echo \"Error: Unable to compile OFI\"\n  test_finish 1\nelse\n  test_linkc \"whether -lfabric\" \"ok\" \"no\" \"-lfabric\"\n  if test $pass -eq 0\n  then\n    #test for psm incompatibility\n    PSM_COMPAT_DIR=/usr/lib64/psm2-compat\n    if test -d $PSM_COMPAT_DIR\n    then\n      add_flag CMK_LIBDIR='\"$CMK_LIBDIR -Wl,-rpath=/usr/lib64/psm2-compat\"' \"psm2-compat lib\"\n      CMK_LIBDIR=\"$CMK_LIBDIR -Wl,-rpath=/usr/lib64/psm2-compat\"\n      test_linkc \"whether -lfabric after adding psm2-compatible library\" \"ok\" \"no\" \"-lfabric\"\n      if test $pass -eq 0\n      then\n        echo \"Error: -lfabric not found or not working. Pass '--basedir=/path/to/dir/' if -lfabric is located in a different directory\"\n        test_finish 1\n      fi\n    else\n      echo \"Error: -lfabric not working, $PSM_COMPAT_DIR not found\"\n      echo \"Pass '--basedir=/path/to/dir/' if -lfabric is located in a different directory\"\n      test_finish 1\n    fi\n  fi\nfi\n\nfi\n\n#### test if we can build MPI ####\nif test \"$CMK_BUILD_MPI\" = 1\nthen\n\ncat > $tc <<EOT\n#include \"mpi.h\"\nint main(int argc, char **argv)\n{\n  MPI_Init(&argc, &argv);\n  return 0;\n}\nEOT\nmv -f ../include/mpi.h ../include/mpi.h.bak 2>/dev/null\ntest_cc \"whether build on MPI\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_BUILD_ON_MPI, $strictpass, [build MPI.])\nBUILD_MPI=$strictpass\n\nif test $BUILD_MPI -eq 0\nthen\n  echo \"Error: Cannot compile an MPI program\"\n  test_finish 1\nfi\n\nif test $BUILD_MPI -eq 1\nthen\n  test_linkc \"whether need to specify MPI library\" \"no\" \"yes\" \"\"\n  if test $pass -ne 1\n  then\n    if test -z \"$CMK_MPI_LIB\"\n    then\n      test_linkc \"whether -lmpich\" \"ok\" \"no\" \"-lmpich\"\n      if test $pass -eq 1\n      then\n        add_flag CMK_SYSLIBS='\"$CMK_SYSLIBS -lmpich\"' \"mpi lib\"\n      else\n        test_linkc \"whether -lmpi\" \"ok\" \"no\" \"-lmpi\"\n        if test $pass -eq 1\n        then\n                add_flag CMK_SYSLIBS='\"$CMK_SYSLIBS -lmpi\"' \"mpi lib\"\n        else\n                echo \"Error: Cannot find MPI library\"\n                test_finish 1\n        fi\n      fi\n    else\n      add_flag CMK_SYSLIBS='\"$CMK_SYSLIBS $CMK_MPI_LIB\"' \"mpi lib\"\n    fi\n  fi\nfi\n\nif test \"$BUILD_MPI\" = \"1\"\nthen\ncat > $t <<EOT\n#include \"mpi.h\"\nint main(int argc, char **argv)\n{\n  int thread_level, provided;\n  thread_level = MPI_THREAD_FUNNELED;\n  MPI_Init_thread(&argc, &argv, thread_level, &provided);\n}\nEOT\ntest_cxx \"whether MPI_Init_thread is supported\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_MPI_INIT_THREAD, $strictpass, [Allows MPI_Init_thread.])\nfi\nmv -f ../include/mpi.h.bak ../include/mpi.h 2>/dev/null\n\nfi\n\nif test \"$BUILD_MPI\" = \"1\"\nthen\n\ncat > $t <<EOT\n#include <stdio.h>\n#include <mpi.h>\n\nint main (int argc, char** argv) {\n  return 0;\n}\nEOT\ntest_cxx \"whether macro conflicts occurs due to C++ MPI bindings\" \"no\" \"yes\" \"\"\nAC_DEFINE_UNQUOTED(CMK_CXX_MPI_BINDINGS, $strictpass, [Disables conflicting macros.])\nfi\n\n\n################### Syscalls and Libraries ###################\n\n#### test for getrusage with RUSAGE_THREAD ###\ncat > $tc <<EOT\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE\n#endif\n#ifndef __USE_GNU\n# define __USE_GNU\n#endif\n#include <sys/time.h>\n#include <sys/resource.h>\nint main() {\n  struct rusage usage;\n  getrusage(RUSAGE_THREAD, &usage);\n  return 0;\n}\nEOT\ntest_linkc \"whether getrusage accepts RUSAGE_THREAD\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_RUSAGE_THREAD, $pass, [whether getrusage accepts RUSAGE_THREAD])\n\n#### test for asctime ###\n\ncat > $tc <<EOT\n#include <time.h>\nint main() {\n  struct tm *local;\n  time_t t;\n  t = time(NULL);\n  local = localtime(&t);\n  asctime(local);\n  return 0;\n}\nEOT\ntest_linkc \"whether has asctime\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_ASCTIME, $pass, [whether has asctime])\n\n#### test for log2 ###\ncat > $t <<EOT\n#include <math.h>\nint main() {\n  int i = log2(10);\n  return 0;\n}\nEOT\ntest_link \"whether has log2\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_LOG2, $pass, [whether has log2])\n\n#### test for sqrtf ###\ncat > $t <<EOT\n#include <math.h>\nint main() {\n  float i = sqrtf((float)10.0);\n  return 0;\n}\nEOT\ntest_link \"whether has sqrtf\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SQRTF, $pass, [whether has sqrtf])\n\n#### test for fabsf ###\ncat > $t <<EOT\n#include <math.h>\nint main() {\n  float i = fabsf((float)10.0);\n  return 0;\n}\nEOT\ntest_link \"whether has fabsf\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_FABSF, $pass, [whether has fabsf])\n\n#### test for mkstemp ###\ncat > $t <<EOT\n#include <stdlib.h>\n#include <string.h>\nint main() {\n  char fname[[128]];\n  strcpy(fname, \"/tmp/fdXXX.XXX\");\n  mkstemp(fname);\n  return 0;\n}\nEOT\ntest_link \"whether has mkstemp\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_USE_MKSTEMP, $pass, [whether has mkstemp])\n\n#### test for system ###\ncat > $t <<EOT\n#include <stdlib.h>\nint main() {\n  system(\"/bin/ls\");\n  return 0;\n}\nEOT\ntest_link \"whether has system\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SYSTEM, $pass, [whether has system])\n\n#### test for sync() ###\ncat > $t <<EOT\n#include <unistd.h>\nint main() {\n  sync();\n  return 0;\n}\nEOT\ntest_link \"whether has sync()\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SYNC_FUNC, $pass, [whether has sync])\n\n#### test for fsync() ###\ncat > $t <<EOT\n#include <unistd.h>\nint main() {\n  fsync(0);\n  return 0;\n}\nEOT\ntest_link \"whether has fsync()\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_FSYNC_FUNC, $pass, [whether has fsync])\n\n#### test for fdatasync() ###\ncat > $t <<EOT\n#include <unistd.h>\nint main() {\n  fdatasync(0);\n  return 0;\n}\nEOT\ntest_link \"whether has fdatasync()\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_FDATASYNC_FUNC, $pass, [whether has fdatasync])\n\n#### test for sbrk ###\ncat > $t <<EOT\n#include <unistd.h>\nint main() {\n  void *ptr  = sbrk(0); \n}\nEOT\ntest_link \"whether has sbrk\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SBRK, $pass, [whether has sbrk])\n\n#### test for _setjmp/_longjmp ###\ncat > $t <<EOT\n#include <setjmp.h>\nint main() {\n  jmp_buf buf;\n  _setjmp(buf);\n  _longjmp(buf, 0);\n}\nEOT\ntest_link \"whether has _setjmp/_longjmp\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_UNDERSCORE_SETJMP, $pass, [whether has _setjmp/_longjmp])\n\n#### test for mstats ###\ncat > $t <<EOT\n#include <malloc.h>\nint main() {\n  struct mstats ms = mstats();\n}\nEOT\ntest_link \"whether has mstats\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_MSTATS, $pass, [whether has mstats])\n\n#### test for mallinfo ###\ncat > $t <<EOT\n#include <malloc.h>\nint main() {\n  struct mallinfo mi = mallinfo();\n}\nEOT\ntest_link \"whether has mallinfo\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_MALLINFO, $pass, [whether has mallinfo])\n\n#### test for __morecore ###\ncat > $t <<EOT\n#include <cstddef>\nint main() {\n  extern void *(*__morecore)(ptrdiff_t);\n  __morecore(0);\n  return 0;\n}\nEOT\ntest_link \"whether expects __morecore symbol\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_EXPECTS_MORECORE, $pass, [whether expects __morecore symbol])\n\n#### test for popen ###\ncat > $t <<EOT\n#include <stdio.h>\nint main() {\n  FILE *p = popen(\"/bin/ps\", \"r\");\n  pclose(p);\n}\nEOT\ntest_link \"whether has popen\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_POPEN, $pass, [whether has popen])\n\n#### test for poll ###\ncat > $t <<EOT\n#include <poll.h>\nvoid foo(void) { \n  struct pollfd pos[[3]];\n  poll(pos, 1, 1);\n}\nEOT\ntest_cxx \"whether has poll\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_USE_POLL, $pass, [whether the poll syscall exists])\n\n#### check if getpagesize exists ####\ncat > $tc <<EOT\n#include <unistd.h>\n\nint main(int argc, char **argv) {\n    int s = getpagesize();\n}\nEOT\ntest_linkc \"whether has getpagesize\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_GETPAGESIZE, $pass, [whether getpagesize exists])\n\n#### check if getpid exists ####\ncat > $tc <<EOT\n#include <sys/types.h>\n#include <unistd.h>\n\nint main(int argc, char **argv) {\n    pid_t pid = getpid();\n}\nEOT\ntest_linkc \"whether has getpid\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_GETPID, $pass, [whether getpid exists])\n\n#### check if kill exists ####\ncat > $tc <<EOT\n#include <sys/types.h>\n#include <unistd.h>\n#include <signal.h>\n\nint main(int argc, char**argv) \n{\n    pid_t pid = getpid();\n    kill(pid, 9);\n}\nEOT\ntest_linkc \"whether has kill\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_KILL, $pass, [whether kill exists])\n\n#### test for setpriority ###\ncat > $t <<EOT\n#include <sys/time.h>\n#include <sys/resource.h>\nvoid foo(void) { \n  setpriority(PRIO_PROCESS, 0, 0);\n}\nEOT\ntest_cxx \"whether has setpriority\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SETPRIORITY, $pass, [whether the setpriority exists])\n\n#### test for system ###\ncat > $t <<EOT\n#include \"ckdll_system.C\"\nEOT\ntest_cxx \"whether to use signal-safe system() \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_SIGSAFE_SYSTEM, $pass, [whether to use signal-safe system()])\n\n### test sched_setaffinity ####\ncat > $tc <<EOT\n#define _GNU_SOURCE\n#include <sched.h>\n\nint main()\n{\n  cpu_set_t cpuset;\n  CPU_ZERO(&cpuset);\n  CPU_SET(0, &cpuset);\n  if (sched_setaffinity(0, sizeof(cpuset), &cpuset) < 0) {\n    return -1;\n  }\n  return 0;\n}\nEOT\ntest_linkc \"whether sched_setaffinity call exists\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SETAFFINITY, $pass, [whether the sched_setaffinity() exists])\n\n### test pthread_setaffinity_np ####\ncat > $tc <<EOT\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <pthread.h>\n\nint main()\n{\n  unsigned long mask = 0xffffffff;\n  unsigned int len = sizeof(mask);\n\n  if (pthread_setaffinity_np(pthread_self(), len, &mask) < 0) {\n    return -1;\n  }\n  return 0;\n}\nEOT\ntest_linkc \"whether pthread_setaffinity_np call exists\" \"yes\" \"no\" \"-lpthread\"\nAC_DEFINE_UNQUOTED(CMK_HAS_PTHREAD_SETAFFINITY, $pass, [whether the pthread_setaffinity_np() exists])\n\n### test pthread_spin_lock ####\ncat > $tc <<EOT\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#include <pthread.h>\n\nint main()\n{\n  pthread_spinlock_t  lock;\n\n  pthread_spin_init(&lock, 0);\n\n  pthread_spin_lock(&lock);\n\n  return 0;\n}\nEOT\ntest_linkc \"whether pthread_spin_lock exists\" \"yes\" \"no\" \"-lpthread\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SPINLOCK, $pass, [whether the pthread_spin_lock exists])\n\n### check libnuma on Linux ####\nif test \"$WITH_NUMA\" = \"yes\"\nthen\ncat > $tc <<EOT\n#include <stdlib.h>\n#include <stdio.h>\n#include <linux/mempolicy.h>\n#include <numaif.h>\n#include <numa.h>\n\nint main()\n{\n  if (get_mempolicy(NULL, NULL, 0, 0, 0) == 0) return 0;\n  return -1;\n}\nEOT\ntest_linkc \"whether libnuma exists\" \"yes\" \"no\" \"-lnuma\"\nAC_DEFINE_UNQUOTED(CMK_HAS_NUMACTRL, $pass, [whether NUMA control related functions exist])\nif test $pass -eq 1\nthen\n        add_flag 'CMK_SYSLIBS=\"$CMK_SYSLIBS -lnuma\"' \"libnuma\"\nfi\nfi\n\n#### check bindprocessors on AIX ####\ncat > $tc <<EOT\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n\n#include <sys/processor.h>\n\nint main()\n{\n  int retValue = 0;\n  int pid;\n  pid = getpid();\n  if (bindprocessor(BINDPROCESS, pid, 0) == -1) return -1;\n  return 0;\n}\nEOT\ntest_linkc \"whether bindprocessor call exists\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_BINDPROCESSOR, $pass, [whether the bindprocessor()\nexists])\n\n\n#### check if dlopen works ####\nskip_dl=0\n# for bproc, ignore -ldl\ntest -n \"$CMK_BPROC\" && skip_dl=1\ntest -n \"$CMK_NO_DL\" && skip_dl=1\ndl_opt='-ldl'\n#workaround for pgcc 4.0, -ldl crash linking, so use -Wl,-ldl to skip the prelinker.\ncase \"$CMK_CXX\" in\npgCC*) dl_opt='-Wl,-ldl' ;;\nesac\n\nif test $skip_dl -eq 0 \nthen\n\ncat > $t <<EOT\n#include \"ckdll_dlopen.C\"\nint main() {\n\tCkDll dll(\"foo.so\");\n\treturn 0;\n}\nEOT\ntest_link \"whether dlopen links without $dl_opt\" \"yes\" \"no\" \"\"\nnoldl=$pass\ntest_link \"whether dlopen links with $dl_opt\" \"yes\" \"no\" \"$dl_opt\"\nif test $pass -eq 1\nthen \n#dlopen requires -ldl: add it to our link line\n\tadd_flag CMK_LIBS='\"$CMK_LIBS '$dl_opt'\"' \"dlopen\"\nfi\n\nif test $pass -eq 1 -o $noldl -eq 1\nthen\n# One version or another of dlopen worked: compile it in\n\tAC_DEFINE_UNQUOTED(CMK_DLL_USE_DLOPEN, 1, [dlopen])\nfi\n\ncat > $tc <<EOT\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE\n#endif\n#ifndef __USE_GNU\n# define __USE_GNU\n#endif\n#include <dlfcn.h>\n#include <stddef.h>\nint main()\n{\n  return dlsym(RTLD_DEFAULT, \"main\") != NULL;\n}\nEOT\ntest_cc \"whether has RTLD_DEFAULT\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_RTLD_DEFAULT, $pass, [whether has RTLD_DEFAULT])\n\ncat > $tc <<EOT\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE\n#endif\n#ifndef __USE_GNU\n# define __USE_GNU\n#endif\n#include <dlfcn.h>\n#include <stddef.h>\nint main()\n{\n  return dlsym(RTLD_NEXT, \"main\") != NULL;\n}\nEOT\ntest_cc \"whether has RTLD_NEXT\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_RTLD_NEXT, $pass, [whether has RTLD_NEXT])\n\n### test gethostname ####\ncat > $tc <<EOT\n#ifdef _WIN32\n#include <Winsock2.h>\n#else\n#include <stdlib.h>\n#include <stdio.h>\n#include <unistd.h>\n#endif\n\nint main()\n{\n  char hostname[[1000]];\n  gethostname(hostname, 999);\n  return 0;\n}\nEOT\ntest_cc \"whether gethostname call exists\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_GETHOSTNAME, $pass, [whether gethostname() exists])\n\n#### check if getProcAddress works ####\ncat > $t <<EOT\n#include \"ckdll_win32.C\"\nEOT\ntest_cxx \"whether getProcAddress works\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_DLL_USE_WIN32, $pass, [whether getProcAddress works])\n\nfi    # end of skip_dl\n\n#### check if socklen_t exists ####\ncat > $t <<EOT\n#include <sys/types.h>\n#include <sys/socket.h>\n\nvoid foo(void) {\n\tint i;\n\tsocklen_t s=sizeof(i);\n}\nEOT\ntest_cxx \"whether has socklen_t\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SOCKLEN, $pass, [whether has socklen_t])\n\n### test getifaddrs ####\ncat > $tc <<EOT\n#include <netinet/in.h> /* for sockaddr_in */\n#include <ifaddrs.h> /* for getifaddrs */\n#include <net/if.h> /* for IFF_RUNNING */\n\nint main()\n{\n  struct ifaddrs *interfaces=0;\n  if( getifaddrs(&interfaces) == 0 ) {\n        struct ifaddrs *interface;\n        for( interface=interfaces; interface; interface=interface->ifa_next ) {\n            if( (interface->ifa_flags & IFF_UP) && ! (interface->ifa_flags & IFF_LOOPBACK) ) {\n                const struct sockaddr_in *addr = (const struct sockaddr_in*)interface->ifa_addr;\n                if( addr && addr->sin_family==AF_INET ) {\n                    break;\n                }\n            }\n        }\n        freeifaddrs(interfaces);\n  }\n}\nEOT\ntest_linkc \"whether getifaddrs call exists\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_GETIFADDRS, $pass, [whether getifaddrs() exists])\n\n#### check if mmap exists ####\ncat > $t <<EOT\n#include <sys/types.h>\n#include <sys/mman.h>\n\nvoid *foo(void *a,int l,int fd) {\n\treturn mmap((caddr_t)a,l,PROT_READ+PROT_WRITE,\n                 MAP_FIXED+MAP_PRIVATE,fd,0);\n}\nEOT\ntest_cxx \"whether the mmap() syscall exists\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_MMAP, $pass, [whether the mmap() syscall exists])\nadd_flag \"CMK_HAS_MMAP=$pass\"\nadd_make_flag \"CMK_HAS_MMAP:=$pass\"\n\n#### check if mmap accepts MAP_ANON ####\ncat > $t <<EOT\n#include <sys/types.h>\n#include <sys/mman.h>\n\nvoid *foo(void *a,int l) {\n\treturn mmap((caddr_t)a,l,PROT_READ+PROT_WRITE,\n                MAP_FIXED+MAP_PRIVATE+MAP_ANON,-1,0);\n}\nEOT\ntest_cxx \"whether mmap() accepts MAP_ANON\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_MMAP_ANON, $pass, [whether mmap() accepts MAP_ANON])\n\n#### check if mmap accepts MAP_NORESERVE ####\ncat > $t <<EOT\n#include <sys/types.h>\n#include <sys/mman.h>\n\nvoid *foo(void *a,int l) {\n\treturn mmap((caddr_t)a,l,PROT_READ+PROT_WRITE,\n                MAP_FIXED+MAP_PRIVATE+MAP_NORESERVE,-1,0);\n}\nEOT\ntest_cxx \"whether mmap() accepts MAP_NORESERVE\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_MMAP_NORESERVE, $pass, [whether mmap() accepts MAP_NORESERVE])\n\n#### check if get_myaddress exists ####\ncat > $t <<EOT\n#include <rpc/rpc.h>\n\nvoid foo(void *a) {\n    get_myaddress((struct sockaddr_in*)a);\n}\nEOT\ntest_cxx \"whether has get_myaddress\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_GET_MYADDRESS, $pass, [whether has get_myaddress])\n\n#### check if mprotect exists ####\ncat > $t <<EOT\n#include <stdio.h>\n#include <sys/mman.h>\n\nvoid foo(void *a,int l,int fd) {\n     void *pg = NULL;\n     size_t pagesize = 4096;\n     mprotect(pg, pagesize, PROT_READ | PROT_WRITE);\n}\nEOT\ntest_cxx \"whether has mprotect\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_MPROTECT, $pass, [whether has mprotect])\n\n#### check if support for SHM through CMA exists ####\ncat > $t <<EOT\n#define _GNU_SOURCE\n#include <sys/uio.h>\n#include <errno.h>\nint main() {\n  pid_t pid;\n  struct iovec *local, *remote;\n  int nread = process_vm_readv(pid, local, 1, remote, 1, 0);\n  nread = process_vm_writev(pid, local, 1, remote, 1, 0);\n  return errno;\n}\nEOT\ntest_link \"whether has support for shm transport using Cross Memory Attach\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_CMA, $pass, [whether supports cma])\n\n#### check if -rdynamic works ####\ncat > $t <<EOT\nint main() {\n  return 0;\n}\nEOT\nTRACE_LINK_FLAG=''\nCAN_EXPORT_SYMBOLS='0'\nfor i in '-rdynamic' '-Wl,--export-dynamic'; do\n  test_link \"whether has $i\" \"yes\" \"no\" \"$i\"\n  if test \"$strictpass\" = '1'; then\n    TRACE_LINK_FLAG=\"$i\"\n    CAN_EXPORT_SYMBOLS='1'\n    break\n  fi\ndone\n\nif test \"$CAN_EXPORT_SYMBOLS\" = '1'; then\n  add_flag 'CMK_LD=\"$CMK_LD '$TRACE_LINK_FLAG'\"' \"exporting program symbols to shared objects\"\n  add_flag 'CMK_LDXX=\"$CMK_LDXX '$TRACE_LINK_FLAG'\"' \"exporting program symbols to shared objects\"\nfi\n\n#### check if glibc backtrace exists ####\ncat > $t <<EOT\n#include \"cmibacktrace.c\"\n\nint main() {\n\tint nLevels=1;\n\tvoid *stack;\n\tCmiBacktraceRecord(&stack,0,&nLevels);\n\treturn 0;\n}\nEOT\ntest_link \"whether glibc backtrace works\" \"yes\" \"no\" \"-DCMK_USE_BACKTRACE=1 $TRACE_LINK_FLAG\"\nAC_DEFINE_UNQUOTED(CMK_USE_BACKTRACE, $pass, [whether glibc backtrace works])\n\n#### test sleep ####\ncat > $t <<EOT\n#include <unistd.h>\nint main() {\n  sleep(1);\n  return 0;\n}\nEOT\ntest_cxx \"whether has sleep \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_SLEEP, $pass, [whether has sleep])\n\n#### test usleep ####\ncat > $t <<EOT\n#include <unistd.h>\nint main() {\n  usleep(100);\n  return 0;\n}\nEOT\ntest_cxx \"whether has usleep \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_USLEEP, $pass, [whether has usleep])\n\n#### test personality() and ADDR_NO_RANDOMIZE ####\n# Only works on modern Linux systems\ncat > $t <<EOT\n#include <sys/personality.h>\nint main() {\n    int orig_persona = personality(0xffffffff);\n    personality(orig_persona | ADDR_NO_RANDOMIZE);\n    return 0;\n}\nEOT\ntest_cxx \"whether personality() and ADDR_NO_RANDOMIZE exist\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_ADDR_NO_RANDOMIZE, $pass, [whether personality() and ADDR_NO_RANDOMIZE exist])\n\n\n# enable/disable zlib\nAC_ARG_ENABLE([zlib],\n            [AS_HELP_STRING([--enable-zlib],\n              [enable zlib support])],\n            [enable_zlib=$enableval],\n            [enable_zlib=yes])\n\n#### test if has zlib ####\n# bproc doesnot like -lz in any case\nif test -z \"$CMK_BPROC\" && test \"$enable_zlib\" = \"yes\"\nthen\n\ncat > $t <<EOT\n#include <zlib.h>\nint main() { \n  gzFile f = gzopen(\"/tmp/x\",\"r\");\n  gzprintf(f, \"test...\\n\");\n  gzclose(f);\n  return 0;\n}\nEOT\ntest_link \"whether has zlib\" \"yes\" \"no\" \"-lz\"\nAC_DEFINE_UNQUOTED(CMK_USE_ZLIB, $pass, [whether has zlib])\nif test $pass -eq 1\nthen \n\tadd_flag 'CMK_SYSLIBS=\"$CMK_SYSLIBS -lz\"' \"zlib\"\nfi\n\nfi\n\n#### test if has elf.h ####\ncat > $t <<EOT\n#include <elf.h>\ntypedef Elf32_Addr ELF_TYPE_Addr;\nint main() { \n}\nEOT\ntest_cxx \"whether has elf.h \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED([CMK_HAS_ELF_H], $pass, [whether has elf.h])\nif test $pass -eq 1\nthen\n\tadd_flag \"CMK_HAS_ELF_H='1'\" \"elf.h\"\nfi\n\n#### test if has Multiprocessing.h for apple ####\ncat > $t <<EOT\n#include <Carbon/Carbon.h>\n#include <Multiprocessing.h>\nint main() {\n  int a = MPProcessorsScheduled();\n}\nEOT\ntest_cxx \"whether has Multiprocessing.h for Apple \" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED([CMK_HAS_MULTIPROCESSING_H], $pass, [whether has Multiprocessing.h])\n\n#### test if \"ntohl\" is available ####\ncat > $t <<EOT\n#if defined(_WIN32) || defined(__MINGW_H)\n#include <winsock.h>\n#else\n#include <stdint.h>\n#include <arpa/inet.h>\n#include <netinet/in.h>\n#endif\n\nint main() {\n  int i = 100;\n  i = ntohl(i);\n  return 0;\n}\nEOT\ntest_cc \"whether ntohl is available\" \"yes\" \"no\" \"\"\nAC_DEFINE_UNQUOTED(CMK_HAS_NTOHL, $pass, [whether ntohl is available])\n\n### test for libjpeg ####\ncat > $t <<EOT\n#include <stdio.h>\n#include <stdlib.h>\n#include \"jpeglib.h\"\n\nint main()\n{\n  struct jpeg_compress_struct cinfo;\n  jpeg_create_compress(&cinfo);\n  return 0;\n}\nEOT\ntest_link \"whether has libjpeg\" \"yes\" \"no\" \"-ljpeg\"\nAC_DEFINE_UNQUOTED(CMK_USE_LIBJPEG, $pass, [whether has libjpeg])\nif test $pass -eq 1\nthen\n        add_flag 'CMK_LIBJPEG=\"-ljpeg\"' \"libjpeg\"\n        add_make_flag 'CMK_LIBJPEG:=-ljpeg' 'libjpeg'\nfi\n\n#### check if PAPI exists ####\nif test -n \"$CMK_USE_PAPI\"\nthen\ncat > $t <<EOT\n#include <stdio.h>\n#include <papi.h>\n                                                                                \nint main() {\n    if (PAPI_library_init(PAPI_VER_CURRENT) != PAPI_VER_CURRENT) return 1;\n    return 0;\n}\nEOT\ntest_link \"whether PAPI exists\" \"yes\" \"no\" \"-lpapi\"\nAC_DEFINE_UNQUOTED(CMK_HAS_COUNTER_PAPI, $pass, [whether PAPI exists])\nif test \"$enable_tracing\" = \"no\"\nthen\n\techo \"Error: Cannot build papi version when tracing is disabled, build with --enable-tracing\"\n\ttest_finish 1\nelif test $fail -eq 1\nthen\n\techo \"Error: Cannot find papi library\"\n\ttest_finish 1\nelse\n\tadd_flag 'CMK_LIBS=\"$CMK_LIBS -lpapi\"' \"papi\"\nfi\nfi\n\n#### test if Python headers are installed ####\nPYTHON_VERSION=`python -V 2>&1 | awk {'print $2'} | awk -F. {'print $1\".\"$2'}`\ncat > $t <<EOT\n#include \"python${PYTHON_VERSION}/Python.h\"\n#include \"python${PYTHON_VERSION}/compile.h\"\n#include \"python${PYTHON_VERSION}/eval.h\"\n#include \"python${PYTHON_VERSION}/node.h\"\n\nint main() {\n    Py_Initialize();\n    PyEval_InitThreads();\n    struct _node* programNode = PyParser_SimpleParseString(\"return 1\\n\",Py_file_input);\n    PyCodeObject *program = PyNode_Compile(programNode, \"\");\n}\nEOT\ntest_link \"whether Python is installed\" \"yes\" \"no\" \"-lpython$PYTHON_VERSION -lpthread -lutil -ldl\"\nAC_DEFINE_UNQUOTED(CMK_HAS_PYTHON, $pass, [whether Python is installed])\nAC_DEFINE_UNQUOTED(CMK_PYTHON_VERSION, ${PYTHON_VERSION}, [Python version])\nif test $pass -eq 1\nthen\n\tadd_flag \"CMK_BUILD_PYTHON=$PYTHON_VERSION\" \"python\"\n\tadd_make_flag \"CMK_BUILD_PYTHON:=$PYTHON_VERSION\" 'python'\nfi\n\n## Cray specific test\nif test \"$CMK_BUILD_CRAY\" = \"1\"\nthen\n#echo \"Test for known incompatible compiler versions\"\n\n if test \"$CRAY_CC_VERSION\" = \"8.1.4\"\n then\n\techo \"CCE 8.1.4 produces incorrect Charm++ code\"\n\techo \"Please use a newer version of the CCE compiler\"\n\techo \"e.g. module load cce/8.1.7\"\n\ttest_finish 1\n fi\n\n#### test if Cray node topology will work ####\ncat > $tc <<EOT\n#include <pmi.h>\n\nint main() {\n    int nid;\n    PMI_Get_nid(0, &nid);\n\n    return 0;\n}\nEOT\ntest_linkc \"whether PMI_Get_nid exists\" \"yes\" \"no\" \"$CMK_CRAY_LIBS\"\nAC_DEFINE_UNQUOTED(CMK_HAS_PMI_GET_NID, $pass, [whether PMI_Get_nid exists])\n\n#### test if Cray mesh topology will work ####\ncat > $tc <<EOT\n#include <rca_lib.h>\n\nint main() {\n    rca_mesh_coord_t xyz;\n    rca_get_meshcoord(0, &xyz);\n\n    return 0;\n}\nEOT\ntest_linkc \"whether Cray rca library is available\" \"yes\" \"no\" \"$CRAY_RCA_POST_LINK_OPTS -lrca\"\nAC_DEFINE_UNQUOTED(CMK_HAS_RCALIB, $pass, [whether Cray rca library is available])\n\n#### test if Cray mesh dimension query function will work ####\ncat > $tc <<EOT\n#include <rca_lib.h>\n\nint main() {\n    rca_mesh_coord_t xyz;\n    rca_get_max_dimension(&xyz);\n\n    return 0;\n}\nEOT\ntest_linkc \"whether Cray rca_has get_max_dimension\" \"yes\" \"no\" \"$CRAY_RCA_POST_LINK_OPTS -lrca\"\nAC_DEFINE_UNQUOTED(CMK_HAS_RCA_MAX_DIMENSION, $pass, [whether Cray rca has rca_get_max_dimension])\n\n#### query Cray machine max NID if get_max_dimension not exist ####\n\nif test $pass -eq 0\nthen\ncmd=`which xtprocadmin 2>/dev/null`\nif test -n \"$cmd\"\nthen\n    #maxnid=`xtprocadmin  | tail -1  | awk '{print $1}'`\n    # workaround for hopper\n    (export SHELL=/bin/csh; xtprocadmin >& t.$$)\n    maxnid=`cat t.$$  | tail -1  | awk '{print $1}'`\n    /bin/rm -f t.$$\n    AC_MSG_CHECKING(Cray machine maxnid)\n    AC_MSG_RESULT(\"$maxnid\")\n    if test -n \"$maxnid\"\n    then\n    AC_DEFINE_UNQUOTED(CMK_CRAY_MAXNID, $maxnid, [Cray MAXNID])\n    fi\nfi\nfi\n\n\n\n\n#### query Cray machine supports BANDWIDTH_INJECTION controls####\n\nif test \"$CMK_BUILD_MPI\" = \"1\"\nthen\necho \"BALANCED_INJECTION test disabled on MPI\"\nelif test \"$GNI_CRAYXC\" = \"1\"\nthen\necho \"BALANCED_INJECTION test disabled on Aries network\"\nelse\ncat > $tc <<EOT\n#include <stdint.h>\n#include <gni_pub.h>\n\nint main() {\n    gni_bi_desc_t gni_bi_desc;\n    uint32_t gni_device_id = 0;\n    gni_return_t gni_rc = GNI_GetBIConfig(gni_device_id, &gni_bi_desc);\n    if (gni_rc == GNI_RC_SUCCESS) {\n    }\n    return 0;\n}\nEOT\ntest_linkc \"whether GNI_GetBIConfig exists\" \"yes\" \"no\" \"$CMK_CRAY_LIBS\"\nAC_DEFINE_UNQUOTED(CMK_BALANCED_INJECTION_API, $pass, [whether Cray gni_pub has GNI_GetBIConfig])\nfi # end of BIConfig test\n\n\nfi  # end of Cray specific test\n\n#### test if it can build shared library ####\ncat > $t <<EOT\n#include \"stdlib.h\"\nextern int foo();\nint foo1() { \n  void * t= malloc(2);\n  foo();\n  return 0;\n}\nEOT\ntest_linkso \"whether can build shared library\" \"yes\" \"no\" \"\"\nif test $pass -eq 0\nthen \n\tadd_flag 'CMK_NO_BUILD_SHARED=\"true\"' \"build-shared\"\n\tadd_make_flag 'CMK_NO_BUILD_SHARED:=true' 'build-shared'\nelse\n\tBUILD_SHARED=1\n        if test \"$BUILD_MPI\" = \"1\"\n\tthen\ncat > $t <<EOT\n#include \"stdlib.h\"\n#include \"mpi.h\"\nextern int foo();\nint foo(int argc, char ** argv) {\n  void * t= malloc(2);\n  foo();\n  MPI_Init(&argc, &argv);\n  return 0;\n}\nEOT\n\t\ttest_linkso \"whether can build shared library with MPI\" \"yes\" \"no\" \"\"\n\t\tBUILD_SHARED=$pass\n\tfi\n\tif test $BUILD_SHARED -eq 0\n\tthen\n\t\tadd_flag 'CMK_NO_BUILD_SHARED=\"true\"' \"build-shared\"\n\t\tadd_make_flag 'CMK_NO_BUILD_SHARED:=true' 'build-shared'\n\tfi\nfi\n\n#### test the version number of bproc ####\nif test -n \"$CMK_BPROC\"\nthen\ncat > $t <<EOT\n#include <stdio.h>\n#include <sys/bproc.h>\nint main()\n{\n  struct bproc_version_t vers;\n  bproc_version(&vers);\n  printf(\"%s\\n\", vers.version_string);\n}\nEOT\ntest_link \"whether bproc compiles\" \"yes\" \"no\" \"-lbproc\"\nif test $pass -eq 1\nthen \nAC_MSG_CHECKING(\"bproc version\")\nbproc_ver=`./testlink`\nif test x$bproc_ver = x\nthen\ntest_result 0 \"bproc version\" \"ERROR\" \"\"\ntest_finish 1\nelse\ntest_result 0 \"bproc version\" \"$bproc_ver\" \"\"\nfi\nbproc_ver=`echo $bproc_ver | cut -d'.' -f1`\nAC_DEFINE_UNQUOTED(CMK_BPROC_VERSION, $bproc_ver, [bproc version])\nfi\nfi\n\n#### test the if command sync exists ####\nAC_CHECK_PROG(SYNC, sync, sync )\nif test -n \"$SYNC\"\nthen\nAC_DEFINE_UNQUOTED(CMK_HAS_SYNC, 1, [sync program])\nfi\n\n################## Fortran #########################\n\n#echo \"set F77 compiler as: $CMK_CF77\"\nAC_MSG_CHECKING(\"F77 compiler as\")\nAC_MSG_RESULT(\"$CMK_CF77\")\n\nAC_MSG_CHECKING(\"whether Fortran 77 compiler works\")\n### test fortran 77 compiler ###\ncat > conftest.f <<EOF\n      SUBROUTINE FOO_foo\n      END\nEOF\n$CMK_CF77 -c conftest.f > /dev/null 2> /dev/null\nif test ! -r conftest.o\nthen\n  AC_MSG_RESULT(\"no\")\nelse\n  AC_MSG_RESULT(\"yes\")\nfi\n\n### test fortran 90 compiler ###\n#echo \"set F90 compiler as: $CMK_CF90\"\nAC_MSG_CHECKING(\"F90 compiler as\")\nAC_MSG_RESULT(\"$CMK_CF90\")\n\nAC_MSG_CHECKING(\"whether Fortran 90 compiler works\")\ncat > conftest2.f90 <<EOF\n      SUBROUTINE FOO_foo\n      END\nEOF\n$CMK_CF90 -c conftest2.f90 > /dev/null 2> /dev/null\nif test ! -r conftest2.o\nthen\n  AC_MSG_RESULT(\"no\")\nelse\n  AC_MSG_RESULT(\"yes\")\n  mv -f conftest2.o conftest.o\n  USE_FORTRAN90=1\nfi\n\n### check fortran name mangling\nAC_MSG_CHECKING(subroutine name used by Fortran 90 compiler)\n\nif test -r conftest.o\nthen\n  AC_CACHE_VAL(_cv_fortran_postfix,\n\n  NAME=`$CMK_NM conftest.o | grep \"foo_foo__\"`\n  if test \"$NAME\" != \"\"\n  then\n    _cv_fortran_postfix=TWOSCORE\n    AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_TWOSCORE, 1, [TWOSCORE])\n  else\n    NAME=`$CMK_NM conftest.o | grep \"foo_foo_\"`\n    if test \"$NAME\" != \"\"\n    then\n      _cv_fortran_postfix=ONESCORE\n      AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_ONESCORE, 1, [ONESCORE])\n    else\n      NAME=`$CMK_NM conftest.o | grep \"foo_foo\"`\n      if test \"$NAME\" != \"\"\n      then\n        _cv_fortran_postfix=NOSCORE\n        AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_NOSCORE, 1, [NOSCORE])\n      else\n        NAME=`$CMK_NM conftest.o | grep \"FOO_FOO\"`\n        if test \"$NAME\" != \"\"\n        then\n          _cv_fortran_postfix=ALLCAPS\n          AC_DEFINE_UNQUOTED(CMK_FORTRAN_USES_ALLCAPS, 1, [ALLCAPS])\n        else\n          echo \"#################################################\"\n          echo \"FORTRAN compiler generated name not supported yet\"\n          echo \"#################################################\"\n        fi\n      fi\n    fi\n  fi\n  rm -f conftest.f conftest.o\n  )\n  AC_MSG_RESULT($_cv_fortran_postfix)\nelse\n  AC_MSG_RESULT(\"Fortran compiler not working\")\nfi\n\n### check module name ###\n\nif test \"$USE_FORTRAN90\" = 1\nthen\n  cat > conftest.f90 <<EOF\n      MODULE testmod\n        interface \n          function fpup_issizing(p)\n          INTEGER :: p\n          logical fpup_issizing\n          end function\n        end interface\n      END MODULE\nEOF\n  AC_MSG_CHECKING(Fortran 90 mod name is capital)\n  $CMK_CF90 -c conftest.f90 > /dev/null 2> /dev/null\n  name=`ls TESTMOD.* 2>/dev/null`\n  if test -n \"$name\"\n  then\n        AC_MSG_RESULT(\"yes\")\n\tadd_flag 'CMK_MOD_NAME_ALLCAPS=1' \"mod name capital\"\n  else\n        AC_MSG_RESULT(\"no\")\n\tname=`ls testmod.* 2>/dev/null`\n  fi\n  if test -n \"$name\"\n  then\n  \tAC_MSG_CHECKING(Fortran 90 mod name extension)\n    \text=`echo $name | sed -e 's/^[[^.]]*\\.//'`\n\tadd_flag 'CMK_MOD_EXT=\"'$ext'\"' \"mod name extension\"\n        AC_MSG_RESULT(\"$ext\")\n        /bin/rm -f $name\n  fi\n  /bin/rm -f conftest.f90\nfi\n\n### test if the C++ linker succeeds with a Fortran entry point ##\n\ncat > conftest.f90 <<EOF\n      PROGRAM empty\n      END PROGRAM\nEOF\ntest_link_fortran_main() {\n  AC_MSG_CHECKING(\"$1\")\n  echo \"### $1\" >> $charmout\n  cat conftest.f90 >> $charmout\n  echo $CMK_CF90 -c conftest.f90 -o test.o $4 >> $charmout\n  $CMK_CF90 -c conftest.f90 -o test.o $4 > out 2>&1\n  if test $? -ne 0\n  then\n    test_result 1 \"$1\" \"$2\" \"$3\"\n  else\n    echo $CMK_LDXX $CMK_LDXX_FLAGS $CMK_LINK_BINARY -o testlink test.o $CMK_LIBDIR $OPTS_LD $CMK_SYSLIBS $CMK_F90LIBS $CMK_F90MAINLIBS $4 $5 >> $charmout\n    $CMK_LDXX $CMK_LDXX_FLAGS $CMK_LINK_BINARY -o testlink test.o $CMK_LIBDIR $OPTS_LD $CMK_SYSLIBS $CMK_F90LIBS $CMK_F90MAINLIBS $4 $5 >> out 2>&1\n    ret=$?\n    test ! -x testlink && ret=1\n    test_result $ret \"$1\" \"$2\" \"$3\"\n  fi\n  cat out >> $charmout\n}\ntest_link_fortran_main \"whether the C++ linker succeeds with a Fortran entry point\" \"yes\" \"no\" \"\"\n/bin/rm -f conftest.f90 test.o testlink out\nif test $pass -eq 1\nthen\n  add_flag \"CMK_CAN_LINK_FORTRAN='1'\" \"Fortran\"\nfi\n\n### check for OpenMP availability ###\ncat > $tc <<EOT\n#include <stdio.h>\n#include <omp.h>\n\nint main(void)\n{\n  int iam = 0, np = 1;\n\n  #pragma omp parallel default(shared) private(iam, np)\n  {\n    np = omp_get_num_threads();\n    iam = omp_get_thread_num();\n    printf(\"Hello from thread %d of %d\\n\", iam, np);\n  }\n\n  return 0;\n}\nEOT\ntest_linkc \"whether OpenMP is supported\" \"yes\" \"no\" \"$CMK_C_OPENMP\"\nif test $pass -eq 1\nthen\n\tadd_flag \"CMK_HAS_OPENMP='1'\" \"OpenMP\"\nfi\n\n### check for Lustre FS availability ###\ncat > $tc <<EOT\n#include <stdio.h>\n#include <lustre/lustreapi.h>\n#include <lustre/lustre_user.h>\n\nint main() {\n  llapi_printf(LLAPI_MSG_NORMAL, \"Lustre FS is available\");\n  return 0;\n}\nEOT\ntest_linkc \"whether has lustre fs\" \"yes\" \"no\" \"-llustreapi\"\nAC_DEFINE_UNQUOTED(CMK_HAS_LUSTREFS, $pass, [whether has lustrefs])\nif test $pass -eq 1\nthen\n  add_make_flag 'CMK_LUSTREAPI:=-llustreapi' \"lustreapi\"\nelse\n  add_make_flag 'CMK_LUSTREAPI:=' \"lustreapi\"\nfi\n\n\n# for hwloc\neval \"`./charmc -print-building-blocks $OPTS`\"\nexport CC=\"$(get_full_command_name \"$CMK_SEQ_CC\")\"\nexport CXX=\"$(get_full_command_name \"$CMK_SEQ_CXX\")\"\nexport CC_FOR_BUILD=\"$(get_full_command_name \"$CMK_NATIVE_CC\")\"\nAC_SUBST(CC_FOR_BUILD)\nexport HWLOC_FLAGS=\"$CHARM_CC_FLAGS\"\nexport CFLAGS=\"$CMK_SEQ_CC_FLAGS\"\nexport AR=\"$(get_full_command_name \"${CMK_SEQ_AR%% *}\")\"\nexport am_libhwloc_embedded_la_rpath=\"-rpath $CHARMLIBSO\"\nAC_SUBST(am_libhwloc_embedded_la_rpath)\nenable_embedded_mode='yes'\nenable_static='yes'\nenable_shared='yes'\nenable_libnuma='no'\nenable_pci='no'\nenable_libudev='no'\nenable_libxml2='no'\nenable_visibility='no'\nenable_nvml='no'\n. hwloc/VERSION\nexport libhwloc_so_version\nAC_SUBST(libhwloc_so_version)\n\necho \"Configuring hwloc:\"\nAC_CONFIG_AUX_DIR(hwloc/config)\nAC_CANONICAL_TARGET\nAC_USE_SYSTEM_EXTENSIONS\nLT_INIT\n\nAM_INIT_AUTOMAKE([no-define])\n\nAC_CONFIG_MACRO_DIR(hwloc/config)\nHWLOC_SET_SYMBOL_PREFIX([cmi_])\nHWLOC_SETUP_CORE([hwloc], [happy=yes], [happy=no])\nHWLOC_DO_AM_CONDITIONALS\nadd_flag 'CMK_HWLOC_LIBS=\"-lhwloc_embedded '\"$HWLOC_EMBEDDED_LIBS\"'\"' \"hwloc\"\nadd_flag 'CMK_CC_FLAGS=\"$CMK_CC_FLAGS '\"$HWLOC_EMBEDDED_CFLAGS\"'\"' 'hwloc'\nadd_flag 'CMK_CXX_FLAGS=\"$CMK_CXX_FLAGS '\"$HWLOC_EMBEDDED_CFLAGS\"'\"' 'hwloc'\n\nAC_OUTPUT\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/src/scripts/Make.depends": "#generated by make depends\nAdaptiveLB.o: AdaptiveLB.C AdaptiveLB.h CentralLB.h BaseLB.h LBDatabase.h \\\n lbdb.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h AdaptiveLB.decl.h \\\n ckgraph.h AdaptiveLB.def.h\n\nBaseLB.o: BaseLB.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h BaseLB.h LBSimulation.h charm++.h \\\n CentralLB.h CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h \\\n BaseLB.def.h\n\nBlockLB.o: BlockLB.C BlockLB.decl.h charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n BlockLB.h CentralLB.h BaseLB.h pup_stl.h manager.h BlockLB.def.h\n\nBlueGene.o: BlueGene.C BlueGene.h BlueGene.decl.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h BlueGene.def.h\n\nCentralLB.o: CentralLB.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ck.h qd.h ckcallback.h envelope.h \\\n init.h charm++.h register.h stats.h ckfutures.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h CentralLB.h \\\n BaseLB.h LBDatabase.h CentralLB.decl.h sdag.h BaseLB.decl.h \\\n LBDatabase.decl.h CentralLBMsg.h pup_stl.h manager.h LBDBManager.h \\\n LBSimulation.h CentralLB.def.h\n\nCentralPredictor.o: CentralPredictor.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.h BaseLB.h LBDatabase.h \\\n CentralLB.decl.h charm++.h envelope.h sdag.h BaseLB.decl.h \\\n LBDatabase.decl.h CentralLBMsg.h pup_stl.h manager.h\n\nComboCentLB.o: ComboCentLB.C ComboCentLB.h CentralLB.h BaseLB.h \\\n LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h charm.h pup.h middle.h middle-conv.h LBDBManager.h \\\n cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h ComboCentLB.decl.h ComboCentLB.def.h\n\nCommAwareRefineLB.o: CommAwareRefineLB.C CommAwareRefineLB.h CentralLB.h \\\n BaseLB.h LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h charm.h pup.h middle.h middle-conv.h LBDBManager.h \\\n cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h CommAwareRefineLB.decl.h ckgraph.h CommAwareRefineLB.def.h\n\nCommLB.o: CommLB.C CommLB.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h CommLB.decl.h charm++.h envelope.h sdag.h CentralLB.decl.h \\\n CommLBHeap.h GreedyCommLB.h CentralLB.h GreedyCommLB.decl.h CommLB.def.h\n\nCommLBHeap.o: CommLBHeap.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CommLBHeap.h\n\nCommonLBs.o: CommonLBs.C LBDatabase.h lbdb.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CommonLBs.decl.h charm++.h envelope.h sdag.h DummyLB.decl.h \\\n CentralLB.decl.h BaseLB.decl.h LBDatabase.decl.h CentralLBMsg.h \\\n GreedyLB.decl.h GreedyRefineLB.decl.h CommLB.decl.h RandCentLB.decl.h \\\n RefineLB.decl.h RefineCommLB.decl.h RotateLB.decl.h DistributedLB.decl.h \\\n DistBaseLB.decl.h HierarchicalLB.decl.h HybridLB.decl.h \\\n HybridBaseLB.decl.h NeighborLBMsg.h HybridLBMsg.h ComboCentLB.decl.h \\\n RefineSwapLB.decl.h NeighborLB.decl.h NborBaseLB.decl.h OrbLB.decl.h \\\n BlockLB.decl.h GreedyCommLB.decl.h NodeLevelLB.decl.h CommonLBs.def.h\n\nDistBaseLB.o: DistBaseLB.C BaseLB.h LBDatabase.h lbdb.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n DistBaseLB.h DistBaseLB.decl.h DistBaseLB.def.h\n\nDistributedLB.o: DistributedLB.C DistributedLB.h DistBaseLB.h BaseLB.h \\\n LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h charm.h pup.h middle.h middle-conv.h LBDBManager.h \\\n cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h DistBaseLB.decl.h DistributedLB.decl.h \\\n ckheap.h elements.h ckset.h DistributedLB.def.h\n\nDummyLB.o: DummyLB.C DummyLB.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h DummyLB.decl.h \\\n DummyLB.def.h\n\nEveryLB.o: EveryLB.C LBDatabase.h lbdb.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n EveryLB.decl.h charm++.h envelope.h sdag.h DummyLB.decl.h \\\n CentralLB.decl.h BaseLB.decl.h LBDatabase.decl.h CentralLBMsg.h \\\n GreedyLB.decl.h GreedyRefineLB.decl.h CommLB.decl.h RandCentLB.decl.h \\\n RefineLB.decl.h RefineCommLB.decl.h RotateLB.decl.h DistributedLB.decl.h \\\n DistBaseLB.decl.h HierarchicalLB.decl.h HybridLB.decl.h \\\n HybridBaseLB.decl.h NeighborLBMsg.h HybridLBMsg.h ComboCentLB.decl.h \\\n RefineSwapLB.decl.h NeighborLB.decl.h NborBaseLB.decl.h OrbLB.decl.h \\\n BlockLB.decl.h GreedyCommLB.decl.h NodeLevelLB.decl.h GraphPartLB.decl.h \\\n GraphBFTLB.decl.h GridCommLB.decl.h GridCommRefineLB.decl.h HbmLB.decl.h \\\n RefineKLB.decl.h TempAwareCommLB.decl.h TreeMatchLB.decl.h \\\n GreedyAgentLB.decl.h NeighborCommLB.decl.h PhasebyArrayLB.decl.h \\\n RecBipartLB.decl.h CommAwareRefineLB.decl.h AdaptiveLB.decl.h \\\n MetisLB.decl.h GridMetisLB.decl.h EveryLB.def.h\n\nGraphBFTLB.o: GraphBFTLB.C GraphBFTLB.h CentralLB.h BaseLB.h LBDatabase.h \\\n lbdb.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h GraphBFTLB.decl.h \\\n ckgraph.h GraphBFTLB.def.h\n\nGraphPartLB.o: GraphPartLB.C GraphPartLB.h CentralLB.h BaseLB.h \\\n LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h charm.h pup.h middle.h middle-conv.h LBDBManager.h \\\n cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h GraphPartLB.decl.h ckgraph.h GraphPartLB.def.h\n\nGreedyAgentLB.o: GreedyAgentLB.C LBSimulation.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n charm++.h envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.h BaseLB.h CentralLB.decl.h \\\n CentralLBMsg.h pup_stl.h manager.h GreedyAgentLB.h CentralLB.h \\\n GreedyAgentLB.decl.h charm++.h envelope.h sdag.h CentralLB.decl.h \\\n LBAgent.h topology.h GreedyAgentLB.def.h\n\nGreedyCommLB.o: GreedyCommLB.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h lbdb.h charm.h pup.h middle.h \\\n middle-conv.h ckset.h cklists.h ckheap.h GreedyCommLB.h CentralLB.h \\\n BaseLB.h LBDatabase.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h GreedyCommLB.decl.h \\\n CommLBHeap.h GreedyCommLB.def.h\n\nGreedyLB.o: GreedyLB.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ckgraph.h BaseLB.h GreedyLB.h \\\n CentralLB.h CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h \\\n GreedyLB.decl.h GreedyLB.def.h\n\nGreedyRefineLB.o: GreedyRefineLB.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ckgraph.h BaseLB.h GreedyRefineLB.h \\\n CentralLB.h CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h \\\n GreedyRefineLB.decl.h GreedyRefineLB.def.h\n\nGridCommLB.o: GridCommLB.C GridCommLB.decl.h charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n GridCommLB.h CentralLB.h BaseLB.h pup_stl.h manager.h GridCommLB.def.h\n\nGridCommRefineLB.o: GridCommRefineLB.C GridCommRefineLB.decl.h charm++.h \\\n charm.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n GridCommRefineLB.h CentralLB.h BaseLB.h pup_stl.h manager.h \\\n GridCommRefineLB.def.h\n\nGridHybridLB.o: GridHybridLB.C GridHybridLB.decl.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n GridHybridLB.h CentralLB.h BaseLB.h pup_stl.h manager.h \\\n GridHybridLB.def.h\n\nGridHybridSeedLB.o: GridHybridSeedLB.C GridHybridSeedLB.decl.h charm++.h \\\n charm.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n GridHybridSeedLB.h CentralLB.h BaseLB.h pup_stl.h manager.h \\\n GridHybridSeedLB.def.h\n\nGridMetisLB.o: GridMetisLB.C GridMetisLB.decl.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n GridMetisLB.h CentralLB.h BaseLB.h pup_stl.h manager.h GridMetisLB.def.h\n\nHbmLB.o: HbmLB.C HbmLB.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h HbmLB.decl.h \\\n NeighborLBMsg.h HybridLBMsg.h topology.h GreedyLB.h GreedyLB.decl.h \\\n GreedyCommLB.h GreedyCommLB.decl.h CommLBHeap.h RefineCommLB.h \\\n RefinerComm.h Refiner.h elements.h ckset.h ckheap.h RefineLB.h \\\n RefineLB.decl.h RefineCommLB.decl.h HbmLB.def.h\n\nHierarchicalLB.o: HierarchicalLB.C HierarchicalLB.h HierarchicalLBTypes.h \\\n DistBaseLB.h BaseLB.h LBDatabase.h lbdb.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n DistBaseLB.decl.h HierarchicalLB.decl.h ckheap.h elements.h ckset.h \\\n HierarchicalLB.def.h\n\nHybridBaseLB.o: HybridBaseLB.C HybridBaseLB.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h BaseLB.h CentralLB.h CentralLB.decl.h \\\n CentralLBMsg.h pup_stl.h manager.h HybridBaseLB.decl.h NeighborLBMsg.h \\\n HybridLBMsg.h topology.h GreedyLB.h GreedyLB.decl.h GreedyCommLB.h \\\n GreedyCommLB.decl.h CommLBHeap.h RefineCommLB.h RefinerComm.h Refiner.h \\\n elements.h ckset.h ckheap.h RefineLB.h RefineLB.decl.h \\\n RefineCommLB.decl.h HybridBaseLB.def.h\n\nHybridLB.o: HybridLB.C HybridLB.h CentralLB.h BaseLB.h LBDatabase.h \\\n lbdb.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h HybridBaseLB.h \\\n HybridBaseLB.decl.h NeighborLBMsg.h HybridLBMsg.h topology.h \\\n HybridLB.decl.h GreedyLB.h GreedyLB.decl.h GreedyRefineLB.h \\\n GreedyRefineLB.decl.h GreedyCommLB.h GreedyCommLB.decl.h CommLBHeap.h \\\n RefineCommLB.h RefinerComm.h Refiner.h elements.h ckset.h ckheap.h \\\n RefineLB.h RefineLB.decl.h RefineCommLB.decl.h MetisLB.h MetisLB.decl.h \\\n HybridLB.def.h\n\nLBAgent.o: LBAgent.C LBAgent.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h topology.h\n\nLBComm.o: LBComm.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h converse.h conv-cpath.h \\\n conv-qd.h conv-random.h conv-lists.h conv-trace.h persistent.h \\\n conv-rdma.h debug-conv.h LBComm.h converse.h lbdb.h charm.h pup.h \\\n middle.h conv-config.h middle-conv.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h\n\nLBDBManager.o: LBDBManager.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h LBDBManager.h\n\nLBDatabase.o: LBDatabase.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h LBDatabase.h lbdb.h charm.h pup.h middle.h middle-conv.h \\\n LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h LBSimulation.h charm++.h CentralLB.h \\\n BaseLB.h CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h topology.h \\\n NullLB.h BaseLB.h LBDatabase.def.h\n\nLBMachineUtil.o: LBMachineUtil.C LBDatabase.h lbdb.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h\n\nLBObj.o: LBObj.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h LBObj.h LBOM.h LBDBManager.h\n\nLBProfit.o: LBProfit.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h LBProfit.h BaseLB.h LBDatabase.h lbdb.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h\n\nLBSimulation.o: LBSimulation.C LBSimulation.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n charm++.h envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.h BaseLB.h LBDatabase.h \\\n CentralLB.decl.h charm++.h envelope.h sdag.h BaseLB.decl.h \\\n LBDatabase.decl.h CentralLBMsg.h pup_stl.h manager.h\n\nLButil.o: LButil.C elements.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h lbdb.h charm.h pup.h middle.h middle-conv.h ckset.h \\\n cklists.h ckheap.h BaseLB.h LBDatabase.h LBDBManager.h LBObj.h LBOM.h \\\n LBComm.h LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h \\\n ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h\n\nMetaBalancer.o: MetaBalancer.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h MetaBalancer.h LBDatabase.h lbdb.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h MetaBalancer.decl.h topology.h \\\n MetaBalancer.def.h\n\nMetisLB.o: MetisLB.C MetisLB.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h MetisLB.decl.h \\\n ckgraph.h MetisLB.def.h\n\nNborBaseLB.o: NborBaseLB.C BaseLB.h LBDatabase.h lbdb.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n NborBaseLB.h NborBaseLB.decl.h NeighborLBMsg.h topology.h \\\n NborBaseLB.def.h\n\nNeighborCommLB.o: NeighborCommLB.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h lbdb.h charm.h pup.h middle.h \\\n middle-conv.h ckset.h cklists.h ckheap.h NeighborCommLB.h NborBaseLB.h \\\n BaseLB.h LBDatabase.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n NborBaseLB.decl.h NeighborLBMsg.h topology.h NeighborCommLB.decl.h \\\n NeighborCommLB.def.h\n\nNeighborLB.o: NeighborLB.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h lbdb.h charm.h pup.h middle.h \\\n middle-conv.h ckset.h cklists.h ckheap.h NeighborLB.h NborBaseLB.h \\\n BaseLB.h LBDatabase.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n NborBaseLB.decl.h NeighborLBMsg.h topology.h NeighborLB.decl.h \\\n NeighborLB.def.h\n\nNodeLevelLB.o: NodeLevelLB.C NodeLevelLB.h CentralLB.h BaseLB.h \\\n LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h charm.h pup.h middle.h middle-conv.h LBDBManager.h \\\n cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h HybridBaseLB.h HybridBaseLB.decl.h NeighborLBMsg.h \\\n HybridLBMsg.h topology.h NodeLevelLB.decl.h NodeLevelLB.def.h\n\nNullLB.o: NullLB.C NullLB.h BaseLB.h LBDatabase.h lbdb.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h NullLB.decl.h ck.h qd.h ckcallback.h \\\n envelope.h init.h charm++.h register.h stats.h ckfutures.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h NullLB.def.h\n\nOrbLB.o: OrbLB.C OrbLB.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h OrbLB.decl.h \\\n OrbLB.def.h\n\nPhasebyArrayLB.o: PhasebyArrayLB.C PhasebyArrayLB.h CentralLB.h BaseLB.h \\\n LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h charm.h pup.h middle.h middle-conv.h LBDBManager.h \\\n cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h PhasebyArrayLB.decl.h PhasebyArrayLB.def.h\n\nRandCentLB.o: RandCentLB.C RandCentLB.h CentralLB.h BaseLB.h LBDatabase.h \\\n lbdb.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h RandCentLB.decl.h \\\n RandCentLB.def.h\n\nRecBipartLB.o: RecBipartLB.C RecBipartLB.h CentralLB.h BaseLB.h \\\n LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h charm.h pup.h middle.h middle-conv.h LBDBManager.h \\\n cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h RecBipartLB.decl.h ckgraph.h RecBipartLB.def.h\n\nRefineCommLB.o: RefineCommLB.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h lbdb.h charm.h pup.h middle.h \\\n middle-conv.h ckset.h cklists.h ckheap.h RefineCommLB.h CentralLB.h \\\n BaseLB.h LBDatabase.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h RefinerComm.h \\\n Refiner.h RefineLB.h RefineLB.decl.h RefineCommLB.decl.h \\\n RefineCommLB.def.h\n\nRefineKLB.o: RefineKLB.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h lbdb.h charm.h pup.h middle.h \\\n middle-conv.h ckset.h cklists.h ckheap.h RefineKLB.h CentralLB.h \\\n BaseLB.h LBDatabase.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h RefinerApprox.h \\\n Refiner.h RefineKLB.decl.h RefineKLB.def.h\n\nRefineLB.o: RefineLB.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h lbdb.h charm.h pup.h middle.h \\\n middle-conv.h ckset.h cklists.h ckheap.h RefineLB.h CentralLB.h BaseLB.h \\\n LBDatabase.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h \\\n lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h Refiner.h RefineLB.decl.h RefineLB.def.h\n\nRefineSwapLB.o: RefineSwapLB.C RefineSwapLB.h CentralLB.h BaseLB.h \\\n LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h charm.h pup.h middle.h middle-conv.h LBDBManager.h \\\n cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h RefineSwapLB.decl.h ckgraph.h RefineSwapLB.def.h\n\nRefineTopoLB.o: RefineTopoLB.C RefineTopoLB.decl.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h TopoLB.decl.h CentralLB.decl.h \\\n CentralLBMsg.h RefineTopoLB.h CentralLB.h BaseLB.h pup_stl.h manager.h \\\n TopoLB.h topology.h RefineTopoLB.def.h\n\nRefiner.o: Refiner.C Refiner.h elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h lbdb.h charm.h pup.h middle.h \\\n middle-conv.h ckset.h cklists.h ckheap.h CentralLB.h BaseLB.h \\\n LBDatabase.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h \\\n lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h\n\nRefinerApprox.o: RefinerApprox.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h lbdb.h charm.h pup.h middle.h \\\n middle-conv.h ckset.h cklists.h ckheap.h RefinerApprox.h CentralLB.h \\\n BaseLB.h LBDatabase.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h Refiner.h\n\nRefinerComm.o: RefinerComm.C elements.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h lbdb.h charm.h pup.h middle.h \\\n middle-conv.h ckset.h cklists.h ckheap.h RefinerComm.h CentralLB.h \\\n BaseLB.h LBDatabase.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h Refiner.h\n\nRefinerTemp.o: RefinerTemp.C RefinerTemp.h elements.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h lbdb.h charm.h pup.h middle.h \\\n middle-conv.h ckset.h cklists.h ckheap.h CentralLB.h BaseLB.h \\\n LBDatabase.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h \\\n lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h\n\nRotateLB.o: RotateLB.C RotateLB.decl.h charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n RotateLB.h CentralLB.h BaseLB.h pup_stl.h manager.h RotateLB.def.h\n\nScotchLB.o: ScotchLB.C ScotchLB.h CentralLB.h BaseLB.h LBDatabase.h \\\n lbdb.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h ScotchLB.decl.h \\\n ckgraph.h ScotchLB.def.h\n\nTeamLB.o: TeamLB.C TeamLB.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h manager.h TeamLB.decl.h \\\n ckgraph.h TeamLB.def.h\n\nTempAwareCommLB.o: TempAwareCommLB.C TempAwareCommLB.h CentralLB.h \\\n BaseLB.h LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h charm.h pup.h middle.h middle-conv.h LBDBManager.h \\\n cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h TempAwareCommLB.decl.h ckgraphTemp.h ckgraph.h \\\n TempAwareCommLB.def.h\n\nTempAwareGreedyLB.o: TempAwareGreedyLB.C TempAwareGreedyLB.h CentralLB.h \\\n BaseLB.h LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h charm.h pup.h middle.h middle-conv.h LBDBManager.h \\\n cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h TempAwareGreedyLB.decl.h ckgraph.h TempAwareGreedyLB.def.h\n\nTempAwareRefineLB.o: TempAwareRefineLB.C TempAwareRefineLB.h CentralLB.h \\\n BaseLB.h LBDatabase.h lbdb.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h charm.h pup.h middle.h middle-conv.h LBDBManager.h \\\n cklists.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n converse.h pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n NullLB.decl.h BaseLB.decl.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h RefinerTemp.h elements.h ckset.h ckheap.h \\\n TempAwareRefineLB.decl.h ckgraph.h TempAwareRefineLB.def.h\n\nTopoCentLB.o: TopoCentLB.C TopoCentLB.decl.h charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n TopoCentLB.h CentralLB.h BaseLB.h pup_stl.h manager.h topology.h \\\n TopoCentLB.def.h\n\nTopoLB.o: TopoLB.C TopoLB.decl.h charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CentralLB.decl.h CentralLBMsg.h \\\n TopoLB.h CentralLB.h BaseLB.h pup_stl.h manager.h topology.h \\\n TopoLB.def.h\n\nTreeMatchLB.o: TreeMatchLB.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h tm_tree.h tm_mapping.h TreeMatchLB.h \\\n CentralLB.h BaseLB.h LBDatabase.h CentralLB.decl.h charm++.h envelope.h \\\n sdag.h BaseLB.decl.h LBDatabase.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h TreeMatchLB.decl.h ckgraph.h TreeMatchLB.def.h\n\nWSLB.o: WSLB.C elements.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h lbdb.h charm.h pup.h middle.h middle-conv.h ckset.h \\\n cklists.h ckheap.h WSLB.h BaseLB.h LBDatabase.h LBDBManager.h LBObj.h \\\n LBOM.h LBComm.h LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h \\\n ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n WSLB.decl.h topology.h WSLB.def.h\n\narrayRedistributor.o: arrayRedistributor.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-controlPoints.h trace.h \\\n envelope.h register.h trace-common.h LBDatabase.h controlPoints.h \\\n conv-config.h ControlPoints.decl.h charm++.h sdag.h charm-api.h \\\n arrayRedistributor.h pathHistory.h cp_effects.h ck.h qd.h register.h \\\n stats.h ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h ckarray.h\n\nbigsim_api.o: bigsim_api.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h blue-conv.h blue_impl.h \\\n ckliststring.h blue_types.h bigsim_timing.h cklists.h pup.h \\\n bigsim_logs.h blue_defs.h bigsim_network.h\n\nbigsim_init.o: bigsim_init.C bigsim_debug.h queueing.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h blue.h converse.h cmiqueue.h pup_c.h lrtslock.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h blue-conv.h \\\n blue_impl.h ckliststring.h blue_types.h bigsim_timing.h cklists.h pup.h \\\n bigsim_logs.h blue_defs.h bigsim_network.h bigsim_ooc.h\n\nbigsim_logs.o: bigsim_logs.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h blue-conv.h blue_impl.h \\\n ckliststring.h blue_types.h bigsim_timing.h cklists.h pup.h \\\n bigsim_logs.h blue_defs.h bigsim_network.h\n\nbigsim_node.o: bigsim_node.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h blue-conv.h blue_impl.h \\\n ckliststring.h blue_types.h bigsim_timing.h cklists.h pup.h \\\n bigsim_logs.h blue_defs.h bigsim_network.h bigsim_debug.h bigsim_ooc.h\n\nbigsim_ooc.o: bigsim_ooc.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h blue-conv.h blue_types.h \\\n bigsim_ooc.h blue_impl.h ckliststring.h bigsim_timing.h cklists.h pup.h \\\n bigsim_logs.h blue_defs.h bigsim_network.h bigsim_debug.h\n\nbigsim_proc.o: bigsim_proc.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h blue-conv.h blue_impl.h \\\n ckliststring.h blue_types.h bigsim_timing.h cklists.h pup.h \\\n bigsim_logs.h blue_defs.h bigsim_network.h bigsim_record.h \\\n ckcheckpoint.h pup.h ckcallback.h cksection.h charm.h converse.h pup.h \\\n ckarrayindex.h ckhashtable.h objid.h conv-ccs.h sockRoutines.h \\\n conv-config.h ccs-server.h ckmessage.h CkCheckpointStatus.decl.h \\\n charm++.h charm.h middle.h middle-conv.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h cksection.h \\\n ckcallback.h ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h \\\n CkReduction.decl.h ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h \\\n ckarray.h cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h \\\n LBComm.h LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h \\\n BaseLB.decl.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckevacuation.h trace.h trace-bluegene.h pathHistory.h \\\n PathHistory.decl.h ckcallback-ccs.h conv-ccs.h CkCallback.decl.h \\\n bigsim_ooc.h bigsim_debug.h\n\nbigsim_read.o: bigsim_read.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h blue-conv.h blue_impl.h \\\n ckliststring.h blue_types.h bigsim_timing.h cklists.h pup.h \\\n bigsim_logs.h blue_defs.h bigsim_network.h\n\nbigsim_record.o: bigsim_record.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h blue-conv.h bigsim_record.h \\\n blue_impl.h ckliststring.h blue_types.h bigsim_timing.h cklists.h pup.h \\\n bigsim_logs.h blue_defs.h bigsim_network.h\n\nbigsim_timing.o: bigsim_timing.C blue.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h blue-conv.h blue_impl.h \\\n ckliststring.h blue_types.h bigsim_timing.h cklists.h pup.h \\\n bigsim_logs.h blue_defs.h bigsim_network.h bigsim_ooc.h\n\nbitvecset.o: bitvecset.c bitvecset.h\n\nblue.o: blue.C cklists.h pup.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h blue.h blue-conv.h blue_impl.h ckliststring.h blue_types.h \\\n bigsim_timing.h bigsim_logs.h blue_defs.h bigsim_network.h \\\n bigsim_record.h bigsim_ooc.h bigsim_debug.h\n\nblue_standalone.o: blue_standalone.C\n\nblue_stub.o: blue_stub.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h\n\nccs-builtins.o: ccs-builtins.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h ckhashtable.h pup.h pup_toNetwork.h debug-conv++.h \\\n conv-ccs.h sockRoutines.h ccs-server.h ccs-builtins.h\n\ncharmProjections.o: charmProjections.C converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charmProjections.h \\\n traceCoreCommon.h charmEvents.h traceCoreAPI.h ck.h qd.h ckcallback.h \\\n cksection.h charm.h pup.h ckarrayindex.h ckhashtable.h objid.h \\\n conv-ccs.h sockRoutines.h ccs-server.h envelope.h pup.h charm.h middle.h \\\n conv-config.h middle-conv.h converse.h cklists.h pup.h objid.h init.h \\\n charm++.h middle.h cklists.h ckbitvector.h ckstream.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h CkMarshall.decl.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h trace-common.h\n\nck.o: ck.C ck.h qd.h ckcallback.h cksection.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h ckarrayindex.h ckhashtable.h \\\n objid.h conv-ccs.h sockRoutines.h ccs-server.h envelope.h pup.h charm.h \\\n middle.h conv-config.h middle-conv.h converse.h cklists.h pup.h objid.h \\\n init.h charm++.h middle.h cklists.h ckbitvector.h ckstream.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h CkMarshall.decl.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckrdmawrapper.h \\\n ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h crc32.h \\\n trace-common.h BaseLB.h ckliststring.h CkMarshall.def.h\n\nckIgetControl.o: ckIgetControl.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ckIgetControl.h\n\nckarray.o: ckarray.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h register.h ck.h qd.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h CkArray.def.h\n\nckarrayoptions.o: ckarrayoptions.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ck.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h\n\nckbitvector.o: ckbitvector.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h\n\nckcallback.o: ckcallback.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h CkCallback.def.h\n\nckcausalmlog.o: ckcausalmlog.C charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h ck.h qd.h ckcallback.h \\\n cksection.h ckarrayindex.h ckhashtable.h objid.h conv-ccs.h \\\n sockRoutines.h ccs-server.h envelope.h pup.h charm.h middle.h \\\n conv-config.h middle-conv.h converse.h cklists.h pup.h objid.h init.h \\\n charm++.h middle.h cklists.h ckbitvector.h ckstream.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h CkMarshall.decl.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h ckcausalmlog.h \\\n ckobjid.h CentralLB.h BaseLB.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h\n\nckcheckpoint.o: ckcheckpoint.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ck.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h CkCheckpoint.decl.h CkCheckpoint.def.h \\\n CkCheckpointStatus.def.h\n\nckdll.o: ckdll.C converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h ckdll.h \\\n ckdll_dlopen.C ckdll_system.C\n\nckevacuation.o: ckevacuation.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ck.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h\n\nckfutures.o: ckfutures.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ck.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h CkFutures.def.h\n\nckgraph.o: ckgraph.C ckgraph.h BaseLB.h LBDatabase.h lbdb.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h charm.h pup.h middle.h \\\n middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h\n\nckgraphTemp.o: ckgraphTemp.C ckgraphTemp.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h ckgraph.h\n\nckhashtable.o: ckhashtable.C ckhashtable.h pup.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h\n\nckheap.o: ckheap.C elements.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h lbdb.h charm.h pup.h middle.h middle-conv.h ckset.h \\\n cklists.h ckheap.h\n\nckimage.o: ckimage.C ckimage.h pup.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h\n\ncklocation.o: cklocation.C hilbert.h partitioning_strategies.h charm++.h \\\n charm.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h register.h ck.h qd.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h pup_stl.h CkLocation.def.h\n\nckmemcheckpoint.o: ckmemcheckpoint.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ck.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h CkMemCheckpoint.def.h\n\nckmessagelogging.o: ckmessagelogging.C charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h ck.h qd.h ckcallback.h \\\n cksection.h ckarrayindex.h ckhashtable.h objid.h conv-ccs.h \\\n sockRoutines.h ccs-server.h envelope.h pup.h charm.h middle.h \\\n conv-config.h middle-conv.h converse.h cklists.h pup.h objid.h init.h \\\n charm++.h middle.h cklists.h ckbitvector.h ckstream.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h CkMarshall.decl.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h ckmessagelogging.h \\\n ckobjid.h CentralLB.h BaseLB.h CentralLB.decl.h CentralLBMsg.h pup_stl.h \\\n manager.h\n\nckmulticast.o: ckmulticast.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h register.h spanningTree.h \\\n XArraySectionReducer.h CkMulticast.def.h\n\nckobjQ.o: ckobjQ.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h\n\nckobjid.o: ckobjid.C charm.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h ck.h qd.h ckcallback.h cksection.h ckarrayindex.h \\\n ckhashtable.h objid.h conv-ccs.h sockRoutines.h ccs-server.h envelope.h \\\n pup.h charm.h middle.h conv-config.h middle-conv.h converse.h cklists.h \\\n pup.h objid.h init.h charm++.h middle.h cklists.h ckbitvector.h \\\n ckstream.h debug-charm.h debug-conv++.h simd.h ckmessage.h \\\n CkMarshall.decl.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h \\\n CkReduction.decl.h ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h \\\n ckarray.h cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h \\\n LBComm.h LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h \\\n BaseLB.decl.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h ckobjid.h\n\nckrdma.o: ckrdma.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h\n\nckreduction.o: ckreduction.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ck.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h CkReduction.def.h\n\nckregex.o: ckregex.C ckregex.h\n\nckset.o: ckset.C elements.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h lbdb.h charm.h pup.h middle.h middle-conv.h ckset.h \\\n cklists.h\n\ncktiming.o: cktiming.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h cktiming.h\n\ncldb.o: cldb.c queueing.h conv-config.h conv-autoconfig.h conv-common.h \\\n lrts-common.h conv-mach.h conv-mach-opt.h cldb.h converse.h cmiqueue.h \\\n pup_c.h lrtslock.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h \\\n conv-lists.h conv-trace.h persistent.h conv-rdma.h debug-conv.h\n\ncmipool.o: cmipool.c cmipool.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h\n\ncmitls.o: cmitls.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h cmitls.h\n\ncommitid.o: commitid.c\n\ncontrolPoints.o: controlPoints.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h controlPoints.h conv-config.h \\\n ControlPoints.decl.h charm++.h envelope.h sdag.h charm-api.h \\\n LBDatabase.h arrayRedistributor.h pathHistory.h cp_effects.h ck.h qd.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h ckarray.h \\\n trace-controlPoints.h trace.h register.h trace-common.h \\\n trace-projections.h ckhashtable.h pup.h pathHistory.h cp_effects.h \\\n ControlPoints.def.h\n\nconv-ccs.o: conv-ccs.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h conv-ccs.h sockRoutines.h ccs-server.h ckhashtable.h pup.h\n\nconv-conds.o: conv-conds.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h\n\nconv-counter.o: conv-counter.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h\n\nconv-interoperate.o: conv-interoperate.C converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h\n\nconv-lists.o: conv-lists.C conv-lists.h cklists.h pup.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-trace.h persistent.h \\\n conv-rdma.h debug-conv.h\n\nconv-taskQ.o: conv-taskQ.C conv-taskQ.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h taskqueue.h\n\nconvcore.o: convcore.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h sockRoutines.h conv-ccs.h ccs-server.h ckhashtable.h pup.h \\\n memory-isomalloc.h quiescence.h cmibacktrace.c\n\nconverseProjections.o: converseProjections.C converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h converseEvents.h traceCoreAPI.h \\\n converseProjections.h traceCoreCommon.h\n\ncp_effects.o: cp_effects.C cp_effects.h charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ck.h qd.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h ckarray.h\n\ncpm.o: cpm.c queueing.h conv-config.h conv-autoconfig.h conv-common.h \\\n lrts-common.h conv-mach.h conv-mach-opt.h converse.h conv-config.h \\\n cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h converse.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h\n\ncpthreads.o: cpthreads.c cpthreads.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n converse.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h\n\ncpuaffinity.o: cpuaffinity.c ../include/hwloc.h \\\n ../include/hwloc/autogen/config.h ../include/hwloc/rename.h \\\n ../include/hwloc/bitmap.h ../include/hwloc/helper.h \\\n ../include/hwloc/inlines.h ../include/hwloc/diff.h \\\n ../include/hwloc/deprecated.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h sockRoutines.h\n\ncputopology.o: cputopology.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h sockRoutines.h\n\ncrc32.o: crc32.c crc32.h\n\ncustom_partitioner.o: custom_partitioner.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h\n\ndebug-charm.o: debug-charm.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h ckhashtable.h pup.h conv-ccs.h sockRoutines.h ccs-server.h \\\n debug-charm.h debug-conv++.h cklists.h charm.h middle.h middle-conv.h \\\n register.h ck.h qd.h ckcallback.h cksection.h ckarrayindex.h objid.h \\\n envelope.h pup.h charm.h middle.h cklists.h objid.h init.h charm++.h \\\n ckbitvector.h ckstream.h simd.h ckmessage.h CkMarshall.decl.h sdag.h \\\n pup_stl.h conv-config.h pup.h envelope.h debug-charm.h ckrdmawrapper.h \\\n ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n stats.h ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h\n\ndebug-conv++.o: debug-conv++.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h debug-conv++.h pup.h cklists.h\n\ndebug-conv.o: debug-conv.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h conv-ccs.h sockRoutines.h ccs-server.h ckhashtable.h pup.h\n\ndebug-message.o: debug-message.C ck.h qd.h ckcallback.h cksection.h \\\n charm.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h ckarrayindex.h \\\n ckhashtable.h objid.h conv-ccs.h sockRoutines.h ccs-server.h envelope.h \\\n pup.h charm.h middle.h middle-conv.h cklists.h objid.h init.h charm++.h \\\n middle.h cklists.h ckbitvector.h ckstream.h debug-charm.h debug-conv++.h \\\n simd.h ckmessage.h CkMarshall.decl.h sdag.h pup_stl.h conv-config.h \\\n envelope.h debug-charm.h ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h \\\n CkReduction.decl.h ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h \\\n ckarray.h cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h \\\n LBComm.h LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h \\\n BaseLB.decl.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h envelope.h queueing.h\n\nedgelist.o: edgelist.c graphdefs.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h\n\nfutures.o: futures.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h\n\ngenerate.o: generate.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h graphdefs.h\n\nglobal-nop.o: global-nop.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h\n\nhilbert.o: hilbert.C hilbert.h\n\ninit.o: init.C ckcheckpoint.h pup.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h ckcallback.h cksection.h charm.h \\\n pup.h ckarrayindex.h ckhashtable.h objid.h conv-ccs.h sockRoutines.h \\\n ccs-server.h ckmessage.h CkCheckpointStatus.decl.h charm++.h charm.h \\\n middle.h conv-config.h middle-conv.h converse.h pup.h cklists.h \\\n ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckarrayindex.h cksection.h ckcallback.h ckrdmawrapper.h \\\n ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckevacuation.h trace.h \\\n conv-trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h conv-ccs.h CkCallback.decl.h ck.h qd.h register.h \\\n stats.h ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h CkCheckpoint.decl.h spanningTree.h\n\nisomalloc.o: isomalloc.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h memory-isomalloc.h mempool.h\n\nlbdb.o: lbdb.C converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h converse.h conv-cpath.h conv-qd.h conv-random.h \\\n conv-lists.h conv-trace.h persistent.h conv-rdma.h debug-conv.h lbdb.h \\\n converse.h charm.h pup.h middle.h conv-config.h middle-conv.h LBObj.h \\\n LBOM.h LBDatabase.h LBDBManager.h cklists.h LBComm.h LBMachineUtil.h \\\n lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h ckstream.h init.h \\\n ckhashtable.h debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h \\\n CkMarshall.decl.h envelope.h charm.h middle.h cklists.h objid.h charm.h \\\n pup.h sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h \\\n ckarrayindex.h objid.h cksection.h ckcallback.h conv-ccs.h \\\n sockRoutines.h ccs-server.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h conv-trace.h \\\n trace-bluegene.h pathHistory.h PathHistory.decl.h ckcallback-ccs.h \\\n CkCallback.decl.h NullLB.decl.h BaseLB.decl.h\n\nlbdbf.o: lbdbf.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h charm-api.h\n\nlz4.o: lz4.c lz4.h\n\nmachineProjections.o: machineProjections.C converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h machineEvents.h \\\n machineProjections.h traceCoreAPI.h traceCoreCommon.h\n\nmain.o: main.C ck.h qd.h ckcallback.h cksection.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h ckarrayindex.h ckhashtable.h \\\n objid.h conv-ccs.h sockRoutines.h ccs-server.h envelope.h pup.h charm.h \\\n middle.h conv-config.h middle-conv.h converse.h cklists.h pup.h objid.h \\\n init.h charm++.h middle.h cklists.h ckbitvector.h ckstream.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h CkMarshall.decl.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckrdmawrapper.h \\\n ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h\n\nmanager.o: manager.C manager.h CentralLB.h BaseLB.h LBDatabase.h lbdb.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h charm.h pup.h \\\n middle.h middle-conv.h LBDBManager.h cklists.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h charm++.h ckbitvector.h \\\n ckstream.h init.h ckhashtable.h debug-charm.h debug-conv++.h simd.h \\\n ckmessage.h pup.h CkMarshall.decl.h envelope.h charm.h middle.h \\\n cklists.h objid.h charm.h converse.h pup.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h NullLB.decl.h BaseLB.decl.h \\\n CentralLB.decl.h CentralLBMsg.h pup_stl.h\n\nmem-arena.o: mem-arena.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h mem-arena.h\n\nmemory-darwin-clang.o: memory-darwin-clang.C\n\nmemoryaffinity.o: memoryaffinity.c converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h sockRoutines.h\n\nmempool.o: mempool.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h mempool.h\n\nmiddle-ccs.o: middle-ccs.C middle.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h middle-conv.h \\\n converse.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h ccs-server.h sockRoutines.h \\\n conv-ccs.h ckhashtable.h pup.h\n\nmodifyScheduler.o: modifyScheduler.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h\n\nmpi-interoperate.o: mpi-interoperate.C mpi-interoperate.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h ck.h qd.h ckcallback.h cksection.h \\\n charm.h pup.h ckarrayindex.h ckhashtable.h objid.h conv-ccs.h \\\n sockRoutines.h ccs-server.h envelope.h pup.h charm.h middle.h \\\n conv-config.h middle-conv.h converse.h cklists.h pup.h objid.h init.h \\\n charm++.h middle.h cklists.h ckbitvector.h ckstream.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h CkMarshall.decl.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckrdmawrapper.h ckrdma.h ckobjQ.h \\\n ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h\n\nmpi-mainmodule.o: mpi-mainmodule.C mpi_main.decl.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h mpi-interoperate.h ck.h qd.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h mpi_main.def.h\n\nmsgalloc.o: msgalloc.C ck.h qd.h ckcallback.h cksection.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h ckarrayindex.h \\\n ckhashtable.h objid.h conv-ccs.h sockRoutines.h ccs-server.h envelope.h \\\n pup.h charm.h middle.h conv-config.h middle-conv.h converse.h cklists.h \\\n pup.h objid.h init.h charm++.h middle.h cklists.h ckbitvector.h \\\n ckstream.h debug-charm.h debug-conv++.h simd.h ckmessage.h \\\n CkMarshall.decl.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h \\\n CkReduction.decl.h ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h \\\n ckarray.h cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h \\\n LBComm.h LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h \\\n BaseLB.decl.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h\n\nmsgmgr.o: msgmgr.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h converse.h conv-cpath.h \\\n conv-qd.h conv-random.h conv-lists.h conv-trace.h persistent.h \\\n conv-rdma.h debug-conv.h\n\npartitioning_strategies.o: partitioning_strategies.C \\\n partitioning_strategies.h hilbert.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h \\\n ../include/conv-config.h ../include/conv-autoconfig.h \\\n ../include/conv-common.h ../include/lrts-common.h ../include/conv-mach.h \\\n ../include/conv-mach-opt.h ../include/cmiqueue.h ../include/pup_c.h \\\n ../include/lrtslock.h ../include/queueing.h ../include/conv-cpm.h \\\n ../include/conv-cpath.h ../include/conv-qd.h ../include/conv-random.h \\\n ../include/conv-lists.h ../include/conv-trace.h ../include/persistent.h \\\n ../include/conv-rdma.h ../include/debug-conv.h converse.h\n\npathHistory.o: pathHistory.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h PathHistory.decl.h LBDatabase.h \\\n pathHistory.h register.h trace-projections.h trace.h trace-common.h \\\n ckhashtable.h pup.h PathHistory.def.h\n\npersist-comm.o: persist-comm.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h\n\npicsautoperf.o: picsautoperf.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h picsdefs.h \\\n picsdefscpp.h TraceAutoPerf.decl.h picsautoperf.h picstreenode.h \\\n picsdecisiontree.h picsautoperfAPI.h register.h trace-common.h \\\n trace-projections.h trace-perf.h TraceAutoPerf.def.h\n\npicsautoperfAPI.o: picsautoperfAPI.C picsdefs.h picsdefscpp.h \\\n picsautoperf.h picstreenode.h charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h picsdecisiontree.h picsautoperfAPI.h \\\n register.h trace-common.h TraceAutoPerf.decl.h trace-projections.h \\\n picsautoperfAPIC.h\n\npicsdecisiontree.o: picsdecisiontree.C picsdefs.h picsdecisiontree.h \\\n picstreenode.h charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h picsdefscpp.h\n\npicstreenode.o: picstreenode.C picstreenode.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h picsdefs.h picsdefscpp.h register.h\n\npup_c.o: pup_c.C pup.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup_toNetwork.h charm-api.h ccs-builtins.h\n\npup_cmialloc.o: pup_cmialloc.C pup_cmialloc.h pup.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h\n\npup_paged.o: pup_paged.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup_paged.h pup.h\n\npup_toNetwork.o: pup_toNetwork.C converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h pup_toNetwork.h\n\npup_toNetwork4.o: pup_toNetwork4.C converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h pup_toNetwork4.h\n\npup_util.o: pup_util.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup.h ckhashtable.h\n\npup_xlater.o: pup_xlater.C pup.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h\n\nqd.o: qd.C ck.h qd.h ckcallback.h cksection.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h ckarrayindex.h ckhashtable.h \\\n objid.h conv-ccs.h sockRoutines.h ccs-server.h envelope.h pup.h charm.h \\\n middle.h conv-config.h middle-conv.h converse.h cklists.h pup.h objid.h \\\n init.h charm++.h middle.h cklists.h ckbitvector.h ckstream.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h CkMarshall.decl.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckrdmawrapper.h \\\n ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h ckmemcheckpoint.h \\\n CkMemCheckpoint.decl.h readonly.h ckarray.h cklocation.h LBDatabase.h \\\n lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h LBMachineUtil.h lbdb++.h \\\n LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h MetaBalancer.h \\\n MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h ckmulticast.h \\\n CkMulticast.decl.h cklocrec.h ckmigratable.h CkArray.decl.h ckfutures.h \\\n CkFutures.decl.h waitqd.h waitqd.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h\n\nqueueing.o: queueing.C queueing.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h converse.h \\\n conv-config.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n converse.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h\n\nquiescence.o: quiescence.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h quiescence.h\n\nrandom.o: random.c converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h\n\nregister.o: register.C ck.h qd.h ckcallback.h cksection.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h ckarrayindex.h \\\n ckhashtable.h objid.h conv-ccs.h sockRoutines.h ccs-server.h envelope.h \\\n pup.h charm.h middle.h conv-config.h middle-conv.h converse.h cklists.h \\\n pup.h objid.h init.h charm++.h middle.h cklists.h ckbitvector.h \\\n ckstream.h debug-charm.h debug-conv++.h simd.h ckmessage.h \\\n CkMarshall.decl.h sdag.h pup_stl.h conv-config.h envelope.h \\\n debug-charm.h ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h \\\n CkReduction.decl.h ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h \\\n ckarray.h cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h \\\n LBComm.h LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h \\\n BaseLB.decl.h MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h \\\n ckarrayoptions.h ckmulticast.h CkMulticast.decl.h cklocrec.h \\\n ckmigratable.h CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h \\\n waitqd.decl.h ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h \\\n ckevacuation.h trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h register.h stats.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h\n\nsdag.o: sdag.C sdag.h pup.h converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h pup_stl.h conv-config.h pup.h envelope.h pup.h charm.h \\\n converse.h middle.h conv-config.h middle-conv.h cklists.h objid.h \\\n charm.h debug-charm.h debug-conv++.h cklists.h\n\nset_partition_params.o: set_partition_params.c\n\nshared_alloc.o: shared_alloc.C shared-alloc.h\n\nsockRoutines.o: sockRoutines.c sockRoutines.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h converse.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h\n\nspanningTree.o: spanningTree.C spanningTree.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h\n\ntm_bucket.o: tm_bucket.c tm_tree.h tm_bucket.h tm_timings.h\n\ntm_mapping.o: tm_mapping.c tm_mapping.h tm_tree.h tm_timings.h\n\ntm_timings.o: tm_timings.c tm_timings.h\n\ntm_tree.o: tm_tree.c tm_tree.h tm_timings.h tm_bucket.h\n\ntopology.o: topology.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h topology.h\n\ntrace-all.o: trace-all.C\n\ntrace-bluegene.o: trace-bluegene.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-common.h blue.h blue-conv.h \\\n blue_impl.h ckliststring.h blue_types.h bigsim_timing.h bigsim_logs.h \\\n blue_defs.h bigsim_network.h\n\ntrace-common.o: trace-common.C charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckliststring.h trace.h trace-bluegene.h trace-common.h \\\n allEvents.h charmEvents.h charmProjections.h traceCoreAPI.h \\\n converseEvents.h converseProjections.h machineEvents.h \\\n machineProjections.h traceCore.h threadEvents.h traceCoreCommon.h \\\n register.h\n\ntrace-controlPoints.o: trace-controlPoints.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-controlPoints.h register.h \\\n trace-common.h trace-controlPointsBOC.h TraceControlPoints.decl.h \\\n TraceControlPoints.def.h\n\ntrace-converse.o: trace-converse.c conv-trace.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h persistent.h \\\n conv-rdma.h debug-conv.h\n\ntrace-counter.o: trace-counter.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h\n\ntrace-memory.o: trace-memory.C trace-memory.h charm++.h charm.h \\\n converse.h conv-config.h conv-autoconfig.h conv-common.h lrts-common.h \\\n conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h \\\n conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-common.h\n\ntrace-perf.o: trace-perf.C trace-perf.h charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h trace-common.h \\\n picsdefs.h picsdefscpp.h picsautoperf.h picstreenode.h \\\n picsdecisiontree.h picsautoperfAPI.h register.h TraceAutoPerf.decl.h \\\n trace-projections.h\n\ntrace-projections.o: trace-projections.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-projections.h trace-common.h \\\n trace-projectionsBOC.h register.h TraceProjections.decl.h \\\n ../include/TopoManager.h ../include/topomanager_config.h \\\n ../include/converse.h TraceProjections.def.h\n\ntrace-projector.o: trace-projector.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-projector.h ck.h qd.h \\\n register.h stats.h ../include/TopoManager.h \\\n ../include/topomanager_config.h ../include/converse.h allEvents.h \\\n charmEvents.h charmProjections.h traceCoreAPI.h converseEvents.h \\\n converseProjections.h machineEvents.h machineProjections.h traceCore.h \\\n threadEvents.h traceCoreCommon.h trace-common.h trace-projections.h\n\ntrace-simple.o: trace-simple.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-simple.h register.h \\\n trace-common.h trace-simpleBOC.h TraceSimple.decl.h TraceSimple.def.h\n\ntrace-summary.o: trace-summary.C charm++.h charm.h converse.h \\\n conv-config.h conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-summary.h register.h \\\n trace-common.h trace-summaryBOC.h TraceSummary.decl.h TraceSummary.def.h\n\ntrace-utilization.o: trace-utilization.C trace-utilization.h charm++.h \\\n charm.h converse.h conv-config.h conv-autoconfig.h conv-common.h \\\n lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h \\\n queueing.h conv-cpm.h conv-cpath.h conv-qd.h conv-random.h conv-lists.h \\\n conv-trace.h persistent.h conv-rdma.h debug-conv.h pup.h middle.h \\\n middle-conv.h cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h \\\n debug-charm.h debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h \\\n envelope.h charm.h middle.h cklists.h objid.h charm.h converse.h pup.h \\\n sdag.h pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h \\\n objid.h cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h register.h trace-common.h \\\n TraceUtilization.decl.h TraceUtilization.def.h\n\ntraceCore.o: traceCore.C converse.h conv-config.h conv-autoconfig.h \\\n conv-common.h lrts-common.h conv-mach.h conv-mach-opt.h cmiqueue.h \\\n pup_c.h lrtslock.h queueing.h conv-cpm.h conv-cpath.h conv-qd.h \\\n conv-random.h conv-lists.h conv-trace.h persistent.h conv-rdma.h \\\n debug-conv.h traceCore.h traceCoreCommon.h converseEvents.h \\\n traceCoreAPI.h converseProjections.h charmEvents.h charmProjections.h \\\n machineEvents.h machineProjections.h\n\ntraceCoreCommon.o: traceCoreCommon.C traceCore.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h traceCoreAPI.h traceCoreCommon.h \\\n charmProjections.h\n\ntracec.o: tracec.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h trace-common.h tracec.h\n\ntracef.o: tracef.C charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h charm++.h \\\n envelope.h charm.h middle.h cklists.h objid.h sdag.h pup_stl.h \\\n conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h waitqd.h waitqd.decl.h \\\n ckcheckpoint.h ckcallback.h CkCheckpointStatus.decl.h ckevacuation.h \\\n trace.h trace-bluegene.h pathHistory.h PathHistory.decl.h \\\n ckcallback-ccs.h CkCallback.decl.h charm-api.h\n\nwaitqd.o: waitqd.C waitqd.h charm++.h charm.h converse.h conv-config.h \\\n conv-autoconfig.h conv-common.h lrts-common.h conv-mach.h \\\n conv-mach-opt.h cmiqueue.h pup_c.h lrtslock.h queueing.h conv-cpm.h \\\n conv-cpath.h conv-qd.h conv-random.h conv-lists.h conv-trace.h \\\n persistent.h conv-rdma.h debug-conv.h pup.h middle.h middle-conv.h \\\n cklists.h ckbitvector.h ckstream.h init.h ckhashtable.h debug-charm.h \\\n debug-conv++.h simd.h ckmessage.h pup.h CkMarshall.decl.h envelope.h \\\n charm.h middle.h cklists.h objid.h charm.h converse.h pup.h sdag.h \\\n pup_stl.h conv-config.h envelope.h debug-charm.h ckarrayindex.h objid.h \\\n cksection.h ckcallback.h conv-ccs.h sockRoutines.h ccs-server.h \\\n ckrdmawrapper.h ckrdma.h ckobjQ.h ckreduction.h CkReduction.decl.h \\\n ckmemcheckpoint.h CkMemCheckpoint.decl.h readonly.h ckarray.h \\\n cklocation.h LBDatabase.h lbdb.h LBDBManager.h LBObj.h LBOM.h LBComm.h \\\n LBMachineUtil.h lbdb++.h LBDatabase.decl.h NullLB.decl.h BaseLB.decl.h \\\n MetaBalancer.h MetaBalancer.decl.h CkLocation.decl.h ckarrayoptions.h \\\n ckmulticast.h CkMulticast.decl.h cklocrec.h ckmigratable.h \\\n CkArray.decl.h ckfutures.h CkFutures.decl.h ckcheckpoint.h ckcallback.h \\\n CkCheckpointStatus.decl.h ckevacuation.h trace.h trace-bluegene.h \\\n pathHistory.h PathHistory.decl.h ckcallback-ccs.h CkCallback.decl.h \\\n waitqd.decl.h waitqd.def.h\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/tests/ampi/privatization/test-cxx.C": "// Global Variable Privatization Test - C++\n\n#include <stdio.h>\n#include \"mpi.h\"\n#include \"test.h\"\n#include \"test-cxx.h\"\n\n#if defined test_dynamiclib\n# include <dlfcn.h>\n#endif\n\n\ntest_thread_local extern int extern_global_sameobject;\ntest_thread_local int extern_global_sameobject;\nstatic int * get_extern_global_sameobject()\n{\n  return &extern_global_sameobject;\n}\n\n#if defined test_staticvars\ntest_thread_local static int static_global_sameobject;\nstatic int * get_static_global_sameobject()\n{\n  return &static_global_sameobject;\n}\n\nstatic int * get_static_local_sameobject()\n{\n  test_thread_local static int static_local_sameobject;\n  return &static_local_sameobject;\n}\n#endif\n\nstatic int * get_extern_global_otherobject()\n{\n  return &extern_global_otherobject;\n}\n\nstatic int * get_extern_global_staticlibrary()\n{\n  return &extern_global_staticlibrary;\n}\n\n#if defined test_sharedlib\nstatic int * get_extern_global_sharedlibrary()\n{\n  return &extern_global_sharedlibrary;\n}\n#endif\n\n\nvoid perform_test_batch(int & failed, int & rank, int & my_wth)\n{\n  if (rank == 0) printf(\"Beginning round of testing.\\n\");\n\n#if defined test_dynamiclib\n  int * extern_global_sharedlibrary_dynamic_ptr = nullptr;\n#if defined test_staticvars\n  int_ptr_accessor get_static_global_sharedlibrary_dynamic_ptr = nullptr;\n  int_ptr_accessor get_static_local_sharedlibrary_dynamic_ptr = nullptr;\n#endif\n  void * dynamiclib = dlopen(\"libcxx-\" privatization_method_str \"-shared-library-dynamic.so\", RTLD_NOW);\n  if (!dynamiclib)\n  {\n    fprintf(stderr, \"dlopen failed: %s\\n\", dlerror());\n  }\n  else\n  {\n    extern_global_sharedlibrary_dynamic_ptr = (int *)dlsym(dynamiclib, \"extern_global_sharedlibrary_dynamic\");\n    if (!extern_global_sharedlibrary_dynamic_ptr)\n      fprintf(stderr, \"dlsym failed: %s\\n\", dlerror());\n#if defined test_staticvars\n    get_static_global_sharedlibrary_dynamic_ptr = (int_ptr_accessor)dlsym(dynamiclib, \"get_static_global_sharedlibrary_dynamic\");\n    if (!get_static_global_sharedlibrary_dynamic_ptr)\n      fprintf(stderr, \"dlsym failed: %s\\n\", dlerror());\n    get_static_local_sharedlibrary_dynamic_ptr = (int_ptr_accessor)dlsym(dynamiclib, \"get_static_local_sharedlibrary_dynamic\");\n    if (!get_static_local_sharedlibrary_dynamic_ptr)\n      fprintf(stderr, \"dlsym failed: %s\\n\", dlerror());\n#endif\n  }\n#endif\n\n\n  if (rank == 0) printf(\"Testing: extern global, in same object\\n\");\n  test_privatization(failed, rank, my_wth, *get_extern_global_sameobject());\n#if defined test_staticvars\n  if (rank == 0) printf(\"Testing: static global, in same object\\n\");\n  test_privatization(failed, rank, my_wth, *get_static_global_sameobject());\n  if (rank == 0) printf(\"Testing: static local, in same object\\n\");\n  test_privatization(failed, rank, my_wth, *get_static_local_sameobject());\n#endif\n\n  if (rank == 0) printf(\"Testing: extern global, in other object\\n\");\n  test_privatization(failed, rank, my_wth, *get_extern_global_otherobject());\n#if defined test_staticvars\n  if (rank == 0) printf(\"Testing: static global, in other object\\n\");\n  test_privatization(failed, rank, my_wth, *get_static_global_otherobject());\n  if (rank == 0) printf(\"Testing: static local, in other object\\n\");\n  test_privatization(failed, rank, my_wth, *get_static_local_otherobject());\n#endif\n\n  if (rank == 0) printf(\"Testing: extern global, in static library\\n\");\n  test_privatization(failed, rank, my_wth, *get_extern_global_staticlibrary());\n#if defined test_staticvars\n  if (rank == 0) printf(\"Testing: static global, in static library\\n\");\n  test_privatization(failed, rank, my_wth, *get_static_global_staticlibrary());\n  if (rank == 0) printf(\"Testing: static local, in static library\\n\");\n  test_privatization(failed, rank, my_wth, *get_static_local_staticlibrary());\n#endif\n\n#if defined test_sharedlib\n  if (rank == 0) printf(\"Testing: extern global, in shared library\\n\");\n  test_privatization(failed, rank, my_wth, *get_extern_global_sharedlibrary());\n#if defined test_staticvars\n  if (rank == 0) printf(\"Testing: static global, in shared library\\n\");\n  test_privatization(failed, rank, my_wth, *get_static_global_sharedlibrary());\n  if (rank == 0) printf(\"Testing: static local, in shared library\\n\");\n  test_privatization(failed, rank, my_wth, *get_static_local_sharedlibrary());\n#endif\n#endif\n\n#if defined test_dynamiclib\n  if (rank == 0) printf(\"Testing: extern global, in shared library, linked dynamically\\n\");\n  if (extern_global_sharedlibrary_dynamic_ptr)\n    test_privatization(failed, rank, my_wth, *extern_global_sharedlibrary_dynamic_ptr);\n  else\n    if (rank == 0) printf(result_indent \"Skipped.\\n\");\n#if defined test_staticvars\n  if (rank == 0) printf(\"Testing: static global, in shared library, linked dynamically\\n\");\n  if (get_static_global_sharedlibrary_dynamic_ptr)\n    test_privatization(failed, rank, my_wth, *get_static_global_sharedlibrary_dynamic_ptr());\n  else\n    if (rank == 0) printf(result_indent \"Skipped.\\n\");\n  if (rank == 0) printf(\"Testing: static local, in shared library, linked dynamically\\n\");\n  if (get_static_local_sharedlibrary_dynamic_ptr)\n    test_privatization(failed, rank, my_wth, *get_static_local_sharedlibrary_dynamic_ptr());\n  else\n    if (rank == 0) printf(result_indent \"Skipped.\\n\");\n#endif\n#endif\n\n#if defined test_dynamiclib\n  dlclose(dynamiclib);\n#endif\n\n  if (rank == 0) printf(\"Round of testing complete.\\n\");\n}\n\n\nint main(int argc, char **argv)\n{\n  MPI_Init(&argc, &argv);\n\n  privatization_test_framework();\n\n  MPI_Finalize();\n\n  return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/contrib/hwloc/configure.ac": "# -*- shell-script -*-\n#\n# Copyright \u00a9 2009      CNRS\n# Copyright \u00a9 2009-2015 Inria.  All rights reserved.\n# Copyright \u00a9 2009, 2011-2012      Universit\u00e9 Bordeaux\n# Copyright \u00a9 2009-2014 Cisco Systems, Inc.  All rights reserved.\n#\n# See COPYING in top-level directory.\n#\n# Additional copyrights may follow\n#\n# $HEADER$\n#\n\n####################################################################\n# Autoconf, Automake, and Libtool bootstrapping\n####################################################################\n\nAC_INIT([hwloc],\n        [m4_normalize(esyscmd([config/hwloc_get_version.sh VERSION --version]))],\n        [http://github.com/open-mpi/hwloc/issues], [hwloc])\nAC_PREREQ(2.63)\nAC_CONFIG_AUX_DIR(./config)\n# Note that this directory must *exactly* match what was specified via\n# -I in ACLOCAL_AMFLAGS in the top-level Makefile.am.\nAC_CONFIG_MACRO_DIR(./config)\n\ncat <<EOF\n\n###\n### Configuring hwloc distribution tarball\n### Startup tests\n###\nEOF\n\n# This must be before AM_INIT_AUTOMAKE\nAC_CANONICAL_TARGET\n\n# Init automake\nAM_INIT_AUTOMAKE([1.11 dist-bzip2 subdir-objects foreign tar-ustar parallel-tests -Wall -Werror])\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\n# We want new Libtool.  None of that old stuff.  Pfft.\nm4_ifdef([LT_PREREQ], [],\n\t [m4_fatal([libtool version 2.2.6 or higher is required], [63])])\nLT_PREREQ([2.2.6])\n\nAC_LANG([C])\nAC_USE_SYSTEM_EXTENSIONS\n\n####################################################################\n# Setup the configure-results header file\n####################################################################\n\nAH_TOP([/* -*- c -*-\n *\n * Copyright \u00a9 2009, 2011, 2012 CNRS, inria., Universit\u00e9 Bordeaux  All rights reserved.\n * Copyright \u00a9 2009 Cisco Systems, Inc.  All rights reserved.\n * $COPYRIGHT$\n *\n * Additional copyrights may follow\n *\n * $HEADER$\n *\n * This file is automatically generated by configure.  Edits will be lost\n * the next time you run configure!\n */\n\n#ifndef HWLOC_CONFIGURE_H\n#define HWLOC_CONFIGURE_H\n])\nAH_BOTTOM([\n#endif /* HWLOC_CONFIGURE_H */\n])\n\n####################################################################\n# Setup C compiler\n####################################################################\n\nCFLAGS_save=\"$CFLAGS\"\nAC_PROG_CC\nAC_PROG_CXX\nAM_PROG_CC_C_O\nCFLAGS=\"$CFLAGS_save\"\n# This did not exist pre AM 1.11.x (where x is somewhere >0 and <3),\n# but it is necessary in AM 1.12.x.\nm4_ifdef([AM_PROG_AR], [AM_PROG_AR])\n\nAC_ARG_VAR(CC_FOR_BUILD,[build system C compiler])\nAS_IF([test -z \"$CC_FOR_BUILD\"],[\n    AC_SUBST([CC_FOR_BUILD], [$CC])\n])\n\n####################################################################\n# CLI arguments\n####################################################################\n\n# Define hwloc's configure arguments\nHWLOC_DEFINE_ARGS\n\n# If debug mode, add -g\nAS_IF([test \"$hwloc_debug\" = \"1\"],\n      [CFLAGS=\"$CFLAGS -g\"])\n\n# If the user didn't specifically ask for embedding mode, default to\n# standalone mode\nAS_IF([test \"$enable_embedded_mode\" != \"yes\"],\n      [AS_IF([test ! -d \"$srcdir/doc\"],\n             [AC_MSG_WARN([The hwloc source tree looks incomplete for a standalone])\n              AC_MSG_WARN([build.  Perhaps this hwloc tree is intended for an embedded])\n              AC_MSG_WARN([build?  Try using the --enable-embedded-mode switch.])\n              AC_MSG_ERROR([Cannot build standalone hwloc])],\n             [HWLOC_BUILD_STANDALONE])])\n\n####################################################################\n# Setup for the hwloc API\n####################################################################\n\n# Setup the hwloc core\nHWLOC_SETUP_CORE([], [], [AC_MSG_ERROR([Cannot build hwloc core])], [1])\n\n# Setup hwloc's docs, utils, and tests\nAS_IF([test \"$hwloc_mode\" = \"standalone\"],\n      [HWLOC_SETUP_DOCS\n       HWLOC_SETUP_UTILS\n       HWLOC_SETUP_TESTS])\n\ncat <<EOF\n\n###\n### Performing final hwloc configuration\n###\nEOF\n\n# Run the AM_CONDITIONALs\nHWLOC_DO_AM_CONDITIONALS\n\n####################################################################\n# Version information\n####################################################################\n\n# HWLOC_VERSION was setup by HWLOC_SETUP_CORE above.\n\n# Make configure depend on the VERSION file, since it's used in AC_INIT\nAC_SUBST([CONFIGURE_DEPENDENCIES], ['$(top_srcdir)/VERSION'])\n\n# Override/fixup the version numbers set by AC_INIT, since on\n# developer builds, there's no good way to know what the version is\n# before running configure :(.  We only use the base version number\n# for the version set in AC_INIT.  This will always match reality\n# because we add the VERSION file (the only way to change the\n# major.minor.release{greek}) into the configure dependencies.\n\nPACKAGE_VERSION=\"$HWLOC_VERSION\"\nPACKAGE_STRING=\"${PACKAGE_NAME} ${PACKAGE_VERSION}\"\nVERSION=\"${PACKAGE_VERSION}\"\n\n# For standalone configurations, we also include a .so version number.\n\n. $srcdir/VERSION\nAC_SUBST([libhwloc_so_version])\n\n####################################################################\n# Final output\n####################################################################\n\n# Set the final flags\nCFLAGS=\"$HWLOC_EMBEDDED_CFLAGS $CFLAGS\"\nCPPFLAGS=\"$HWLOC_EMBEDDED_CPPFLAGS $CPPFLAGS\"\nLIBS=\"$HWLOC_EMBEDDED_LIBS $LIBS\"\n\n# Setup libtool, but disable C++, F77, Java and Windows Resource\n# Compiler support -- we don't need that stuff.\nAM_ENABLE_SHARED\nAM_DISABLE_STATIC\nAM_PROG_LIBTOOL([dlopen win32-dll])\nLT_LANG([C])\n\n# Party on\nAC_OUTPUT\n\n# Warn if we didn't have pkg-config\nif test \"x$PKG_CONFIG\" = x; then\n  cat << EOF\n\n************************************************************************\nCould not detect/enable some features such as libxml2 and Cairo support\nbecause pkg-config isn't available.\n************************************************************************\nEOF\nfi\n\n# Show which optional support we'll be building\nhwloc_xml_status=basic\nAS_IF([test \"$hwloc_libxml2_happy\" = \"yes\"], [hwloc_xml_status=full])\n\n# Prepare the I/O summary\nhwloc_probeio_list=\nif test \"x$hwloc_pci_happy\" = \"xyes\" -o \"x$hwloc_linuxpci_happy\" = \"xyes\"; then\n  test \"x$hwloc_pci_happy\" = \"xyes\" && hwloc_probepci_list=\"$hwloc_pci_lib\"\n  test \"x$hwloc_pci_happy$hwloc_linuxpci_happy\" = \"xyesyes\" && hwloc_probepci_list=\"${hwloc_probepci_list}+\"\n  test \"x$hwloc_linuxpci_happy\" = \"xyes\" && hwloc_probepci_list=\"${hwloc_probepci_list}linux\"\n  hwloc_probeio_list=\"$hwloc_probeio_list PCI($hwloc_probepci_list)\"\nfi\ntest \"x$hwloc_opencl_happy\" = \"xyes\" && hwloc_probeio_list=\"$hwloc_probeio_list OpenCL\"\ntest \"x$hwloc_have_cudart\" = \"xyes\" && hwloc_probeio_list=\"$hwloc_probeio_list CUDA\"\ntest \"x$hwloc_nvml_happy\" = \"xyes\" && hwloc_probeio_list=\"$hwloc_probeio_list NVML\"\ntest \"x$hwloc_gl_happy\" = \"xyes\" && hwloc_probeio_list=\"$hwloc_probeio_list GL\"\n# if anything but PCI, that anything will be useless\ntest \"x$hwloc_pci_happy\" != \"xyes\" && test \"x$hwloc_linuxpci_happy\" != \"xyes\" \\\n && test \"x$hwloc_probeio_list\" != \"x\" && hwloc_probeio_list=\"$hwloc_probeio_list (cannot work without PCI)\"\n# if nothing, say \"no\"\ntest \"x$hwloc_probeio_list\" = \"x\" && hwloc_probeio_list=\" no\"\n\n# Beginning of generic support\ncat <<EOF\n\n-----------------------------------------------------------------------------\nHwloc optional build support status (more details can be found above):\n\nProbe / display I/O devices:$hwloc_probeio_list\nGraphical output (Cairo):    $hwloc_cairo_happy\nXML input / output:          $hwloc_xml_status\nEOF\n\n# Linux specific support\nAS_IF([test \"$hwloc_linux\" = \"yes\"], [cat <<EOF\nlibnuma memory support:      $hwloc_linux_libnuma_happy\nEOF])\n\n# Plugin support\nhwloc_plugin_summary=$hwloc_have_plugins\ntest \"x$hwloc_plugin_components\" != \"x\" && hwloc_plugin_summary=\"yes (\"`echo $hwloc_plugin_components`\")\" # echo removes the starting space\ncat <<EOF\nPlugin support:              $hwloc_plugin_summary\nEOF\n\n# End of generic support\ncat <<EOF\n-----------------------------------------------------------------------------\n\nEOF\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/contrib/hwloc/config/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\n# serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/contrib/hwloc/config/ltoptions.m4": "# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004-2005, 2007-2009, 2011-2015 Free Software\n#   Foundation, Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 8 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option '$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl 'shared' nor 'disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n\t\t   [_LT_ENABLE_FAST_INSTALL])\n  _LT_UNLESS_OPTIONS([LT_INIT], [aix-soname=aix aix-soname=both aix-soname=svr4],\n\t\t   [_LT_WITH_AIX_SONAME([aix])])\n  ])\n])# _LT_SET_OPTIONS\n\n\n## --------------------------------- ##\n## Macros to handle LT_INIT options. ##\n## --------------------------------- ##\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [1], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the 'shared' and\n# 'disable-shared' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the 'static' and\n# 'disable-static' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the 'fast-install'\n# and 'disable-fast-install' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_AIX_SONAME([DEFAULT])\n# ----------------------------------\n# implement the --with-aix-soname flag, and support the `aix-soname=aix'\n# and `aix-soname=both' and `aix-soname=svr4' LT_INIT options. DEFAULT\n# is either `aix', `both' or `svr4'.  If omitted, it defaults to `aix'.\nm4_define([_LT_WITH_AIX_SONAME],\n[m4_define([_LT_WITH_AIX_SONAME_DEFAULT], [m4_if($1, svr4, svr4, m4_if($1, both, both, aix))])dnl\nshared_archive_member_spec=\ncase $host,$enable_shared in\npower*-*-aix[[5-9]]*,yes)\n  AC_MSG_CHECKING([which variant of shared library versioning to provide])\n  AC_ARG_WITH([aix-soname],\n    [AS_HELP_STRING([--with-aix-soname=aix|svr4|both],\n      [shared library versioning (aka \"SONAME\") variant to provide on AIX, @<:@default=]_LT_WITH_AIX_SONAME_DEFAULT[@:>@.])],\n    [case $withval in\n    aix|svr4|both)\n      ;;\n    *)\n      AC_MSG_ERROR([Unknown argument to --with-aix-soname])\n      ;;\n    esac\n    lt_cv_with_aix_soname=$with_aix_soname],\n    [AC_CACHE_VAL([lt_cv_with_aix_soname],\n      [lt_cv_with_aix_soname=]_LT_WITH_AIX_SONAME_DEFAULT)\n    with_aix_soname=$lt_cv_with_aix_soname])\n  AC_MSG_RESULT([$with_aix_soname])\n  if test aix != \"$with_aix_soname\"; then\n    # For the AIX way of multilib, we name the shared archive member\n    # based on the bitwidth used, traditionally 'shr.o' or 'shr_64.o',\n    # and 'shr.imp' or 'shr_64.imp', respectively, for the Import File.\n    # Even when GNU compilers ignore OBJECT_MODE but need '-maix64' flag,\n    # the AIX toolchain works better with OBJECT_MODE set (default 32).\n    if test 64 = \"${OBJECT_MODE-32}\"; then\n      shared_archive_member_spec=shr_64\n    else\n      shared_archive_member_spec=shr\n    fi\n  fi\n  ;;\n*)\n  with_aix_soname=aix\n  ;;\nesac\n\n_LT_DECL([], [shared_archive_member_spec], [0],\n    [Shared archive member basename, for filename based shared library versioning on AIX])dnl\n])# _LT_WITH_AIX_SONAME\n\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=aix], [_LT_WITH_AIX_SONAME([aix])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=both], [_LT_WITH_AIX_SONAME([both])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=svr4], [_LT_WITH_AIX_SONAME([svr4])])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the 'pic-only' and 'no-pic'\n# LT_INIT options.\n# MODE is either 'yes' or 'no'.  If omitted, it defaults to 'both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic@<:@=PKGS@:>@],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for lt_pkg in $withval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [pic_mode=m4_default([$1], [default])])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n## ----------------- ##\n## LTDL_INIT Options ##\n## ----------------- ##\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/contrib/hwloc/config/hwloc.m4": "dnl -*- Autoconf -*-\ndnl\ndnl Copyright \u00a9 2009-2018 Inria.  All rights reserved.\ndnl Copyright \u00a9 2009-2012, 2015-2017 Universit\u00e9 Bordeaux\ndnl Copyright \u00a9 2004-2005 The Trustees of Indiana University and Indiana\ndnl                         University Research and Technology\ndnl                         Corporation.  All rights reserved.\ndnl Copyright \u00a9 2004-2012 The Regents of the University of California.\ndnl                         All rights reserved.\ndnl Copyright \u00a9 2004-2008 High Performance Computing Center Stuttgart,\ndnl                         University of Stuttgart.  All rights reserved.\ndnl Copyright \u00a9 2006-2017 Cisco Systems, Inc.  All rights reserved.\ndnl Copyright \u00a9 2012  Blue Brain Project, BBP/EPFL. All rights reserved.\ndnl Copyright \u00a9 2012       Oracle and/or its affiliates.  All rights reserved.\ndnl See COPYING in top-level directory.\n\n# Main hwloc m4 macro, to be invoked by the user\n#\n# Expects two or three paramters:\n# 1. Configuration prefix\n# 2. What to do upon success\n# 3. What to do upon failure\n# 4. If non-empty, print the announcement banner\n#\nAC_DEFUN([HWLOC_SETUP_CORE],[\n    AC_REQUIRE([AC_USE_SYSTEM_EXTENSIONS])\n    AC_REQUIRE([AC_CANONICAL_TARGET])\n    AC_REQUIRE([AC_PROG_CC])\n\n    AS_IF([test \"x$4\" != \"x\"],\n          [cat <<EOF\n\n###\n### Configuring hwloc core\n###\nEOF])\n\n    # If no prefix was defined, set a good value\n    m4_ifval([$1],\n             [m4_define([hwloc_config_prefix],[$1/])],\n             [m4_define([hwloc_config_prefix], [])])\n\n    # Unless previously set to \"standalone\" mode, default to embedded\n    # mode\n    AS_IF([test \"$hwloc_mode\" = \"\"], [hwloc_mode=embedded])\n    AC_MSG_CHECKING([hwloc building mode])\n    AC_MSG_RESULT([$hwloc_mode])\n\n    # Get hwloc's absolute top builddir (which may not be the same as\n    # the real $top_builddir, because we may be building in embedded\n    # mode).\n    HWLOC_startdir=`pwd`\n    if test x\"hwloc_config_prefix\" != \"x\" -a ! -d \"hwloc_config_prefix\"; then\n        mkdir -p \"hwloc_config_prefix\"\n    fi\n    if test x\"hwloc_config_prefix\" != \"x\"; then\n        cd \"hwloc_config_prefix\"\n    fi\n    HWLOC_top_builddir=`pwd`\n    AC_SUBST(HWLOC_top_builddir)\n\n    # Get hwloc's absolute top srcdir (which may not be the same as\n    # the real $top_srcdir, because we may be building in embedded\n    # mode).  First, go back to the startdir incase the $srcdir is\n    # relative.\n\n    cd \"$HWLOC_startdir\"\n    cd \"$srcdir\"/hwloc_config_prefix\n    HWLOC_top_srcdir=\"`pwd`\"\n    AC_SUBST(HWLOC_top_srcdir)\n\n    # Go back to where we started\n    cd \"$HWLOC_startdir\"\n\n    AC_MSG_NOTICE([hwloc builddir: $HWLOC_top_builddir])\n    AC_MSG_NOTICE([hwloc srcdir: $HWLOC_top_srcdir])\n    if test \"$HWLOC_top_builddir\" != \"$HWLOC_top_srcdir\"; then\n        AC_MSG_NOTICE([Detected VPATH build])\n    fi\n\n    # Get the version of hwloc that we are installing\n    AC_MSG_CHECKING([for hwloc version])\n    HWLOC_VERSION=\"`$HWLOC_top_srcdir/config/hwloc_get_version.sh $HWLOC_top_srcdir/VERSION`\"\n    if test \"$?\" != \"0\"; then\n        AC_MSG_ERROR([Cannot continue])\n    fi\n    HWLOC_RELEASE_DATE=\"`$HWLOC_top_srcdir/config/hwloc_get_version.sh $HWLOC_top_srcdir/VERSION --release-date`\"\n    AC_SUBST(HWLOC_VERSION)\n    AC_DEFINE_UNQUOTED([HWLOC_VERSION], [\"$HWLOC_VERSION\"],\n                       [The library version, always available, even in embedded mode, contrary to VERSION])\n    AC_SUBST(HWLOC_RELEASE_DATE)\n    AC_MSG_RESULT([$HWLOC_VERSION])\n\n    # Debug mode?\n    AC_MSG_CHECKING([if want hwloc maintainer support])\n    hwloc_debug=\n\n    # Unconditionally disable debug mode in embedded mode; if someone\n    # asks, we can add a configure-time option for it.  Disable it\n    # now, however, because --enable-debug is not even added as an\n    # option when configuring in embedded mode, and we wouldn't want\n    # to hijack the enclosing application's --enable-debug configure\n    # switch.\n    AS_IF([test \"$hwloc_mode\" = \"embedded\"],\n          [hwloc_debug=0\n           hwloc_debug_msg=\"disabled (embedded mode)\"])\n    AS_IF([test \"$hwloc_debug\" = \"\" -a \"$enable_debug\" = \"yes\"],\n          [hwloc_debug=1\n           hwloc_debug_msg=\"enabled\"])\n    AS_IF([test \"$hwloc_debug\" = \"\"],\n          [hwloc_debug=0\n           hwloc_debug_msg=\"disabled\"])\n    # Grr; we use #ifndef for HWLOC_DEBUG!  :-(\n    AH_TEMPLATE(HWLOC_DEBUG, [Whether we are in debugging mode or not])\n    AS_IF([test \"$hwloc_debug\" = \"1\"], [AC_DEFINE([HWLOC_DEBUG])])\n    AC_MSG_RESULT([$hwloc_debug_msg])\n\n    # We need to set a path for header, etc files depending on whether\n    # we're standalone or embedded. this is taken care of by HWLOC_EMBEDDED.\n\n    AC_MSG_CHECKING([for hwloc directory prefix])\n    AC_MSG_RESULT(m4_ifval([$1], hwloc_config_prefix, [(none)]))\n\n    # Note that private/config.h *MUST* be listed first so that it\n    # becomes the \"main\" config header file.  Any AC-CONFIG-HEADERS\n    # after that (hwloc/config.h) will only have selective #defines\n    # replaced, not the entire file.\n    AC_CONFIG_HEADERS(hwloc_config_prefix[include/private/autogen/config.h])\n    AC_CONFIG_HEADERS(hwloc_config_prefix[include/hwloc/autogen/config.h])\n\n    # What prefix are we using?\n    AC_MSG_CHECKING([for hwloc symbol prefix])\n    AS_IF([test \"$hwloc_symbol_prefix_value\" = \"\"],\n          [AS_IF([test \"$with_hwloc_symbol_prefix\" = \"\"],\n                 [hwloc_symbol_prefix_value=hwloc_],\n                 [hwloc_symbol_prefix_value=$with_hwloc_symbol_prefix])])\n    AC_DEFINE_UNQUOTED(HWLOC_SYM_PREFIX, [$hwloc_symbol_prefix_value],\n                       [The hwloc symbol prefix])\n    # Ensure to [] escape the whole next line so that we can get the\n    # proper tr tokens\n    [hwloc_symbol_prefix_value_caps=\"`echo $hwloc_symbol_prefix_value | tr '[:lower:]' '[:upper:]'`\"]\n    AC_DEFINE_UNQUOTED(HWLOC_SYM_PREFIX_CAPS, [$hwloc_symbol_prefix_value_caps],\n                       [The hwloc symbol prefix in all caps])\n    AC_MSG_RESULT([$hwloc_symbol_prefix_value])\n\n    # Give an easy #define to know if we need to transform all the\n    # hwloc names\n    AH_TEMPLATE([HWLOC_SYM_TRANSFORM], [Whether we need to re-define all the hwloc public symbols or not])\n    AS_IF([test \"$hwloc_symbol_prefix_value\" = \"hwloc_\"],\n          [AC_DEFINE([HWLOC_SYM_TRANSFORM], [0])],\n          [AC_DEFINE([HWLOC_SYM_TRANSFORM], [1])])\n\n    # GCC specifics.\n    if test \"x$GCC\" = \"xyes\"; then\n        HWLOC_GCC_CFLAGS=\"-Wall -Wmissing-prototypes -Wundef\"\n        HWLOC_GCC_CFLAGS=\"$HWLOC_GCC_CFLAGS -Wpointer-arith -Wcast-align\"\n    fi\n\n    # Enample system extensions for O_DIRECTORY, fdopen, fssl, etc.\n    AH_VERBATIM([USE_HPUX_SYSTEM_EXTENSIONS],\n[/* Enable extensions on HP-UX. */\n#ifndef _HPUX_SOURCE\n# undef _HPUX_SOURCE\n#endif\n])\n    AC_DEFINE([_HPUX_SOURCE], [1], [Are we building for HP-UX?])\n\n    AC_LANG_PUSH([C])\n\n    # Check to see if we're producing a 32 or 64 bit executable by\n    # checking the sizeof void*.  Note that AC CHECK_SIZEOF even works\n    # when cross compiling (!), according to the AC 2.64 docs.  This\n    # check is needed because on some systems, you can instruct the\n    # compiler to specifically build 32 or 64 bit executables -- even\n    # though the $target may indicate something different.\n    AC_CHECK_SIZEOF([void *])\n\n    #\n    # List of components to be built, either statically or dynamically.\n    # To be enlarged below.\n    #\n    hwloc_components=\"noos xml synthetic custom xml_nolibxml\"\n\n    #\n    # Check OS support\n    #\n    AC_MSG_CHECKING([which OS support to include])\n    case ${target} in\n      powerpc64-bgq-linux*) # must be before Linux\n\tAC_DEFINE(HWLOC_BGQ_SYS, 1, [Define to 1 on BlueGene/Q])\n\thwloc_bgq=yes\n\tAC_MSG_RESULT([bgq])\n\thwloc_components=\"$hwloc_components bgq\"\n\t;;\n      *-*-linux*)\n        AC_DEFINE(HWLOC_LINUX_SYS, 1, [Define to 1 on Linux])\n        hwloc_linux=yes\n        AC_MSG_RESULT([Linux])\n        hwloc_components=\"$hwloc_components linux\"\n\tif test x$enable_pci != xno; then\n\t  hwloc_components=\"$hwloc_components linuxpci\"\n\t  AC_DEFINE(HWLOC_HAVE_LINUXPCI, 1, [Define to 1 if building the Linux PCI component])\n\t  hwloc_linuxpci_happy=yes\n\tfi\n        ;;\n      *-*-irix*)\n        AC_DEFINE(HWLOC_IRIX_SYS, 1, [Define to 1 on Irix])\n        hwloc_irix=yes\n        AC_MSG_RESULT([IRIX])\n        # no irix component yet\n        ;;\n      *-*-darwin*)\n        AC_DEFINE(HWLOC_DARWIN_SYS, 1, [Define to 1 on Darwin])\n        hwloc_darwin=yes\n        AC_MSG_RESULT([Darwin])\n        hwloc_components=\"$hwloc_components darwin\"\n        ;;\n      *-*-solaris*)\n        AC_DEFINE(HWLOC_SOLARIS_SYS, 1, [Define to 1 on Solaris])\n        hwloc_solaris=yes\n        AC_MSG_RESULT([Solaris])\n        hwloc_components=\"$hwloc_components solaris\"\n        ;;\n      *-*-aix*)\n        AC_DEFINE(HWLOC_AIX_SYS, 1, [Define to 1 on AIX])\n        hwloc_aix=yes\n        AC_MSG_RESULT([AIX])\n        hwloc_components=\"$hwloc_components aix\"\n        ;;\n      *-*-osf*)\n        AC_DEFINE(HWLOC_OSF_SYS, 1, [Define to 1 on OSF])\n        hwloc_osf=yes\n        AC_MSG_RESULT([OSF])\n        hwloc_components=\"$hwloc_components osf\"\n        ;;\n      *-*-hpux*)\n        AC_DEFINE(HWLOC_HPUX_SYS, 1, [Define to 1 on HP-UX])\n        hwloc_hpux=yes\n        AC_MSG_RESULT([HP-UX])\n        hwloc_components=\"$hwloc_components hpux\"\n        ;;\n      *-*-mingw*|*-*-cygwin*)\n        AC_DEFINE(HWLOC_WIN_SYS, 1, [Define to 1 on WINDOWS])\n        hwloc_windows=yes\n        AC_MSG_RESULT([Windows])\n        hwloc_components=\"$hwloc_components windows\"\n        ;;\n      *-*-*freebsd*)\n        AC_DEFINE(HWLOC_FREEBSD_SYS, 1, [Define to 1 on *FREEBSD])\n        hwloc_freebsd=yes\n        AC_MSG_RESULT([FreeBSD])\n        hwloc_components=\"$hwloc_components freebsd\"\n        ;;\n      *-*-*netbsd*)\n        AC_DEFINE(HWLOC_NETBSD_SYS, 1, [Define to 1 on *NETBSD])\n        hwloc_netbsd=yes\n        AC_MSG_RESULT([NetBSD])\n        hwloc_components=\"$hwloc_components netbsd\"\n        ;;\n      *)\n        AC_MSG_RESULT([Unsupported! ($target)])\n        AC_DEFINE(HWLOC_UNSUPPORTED_SYS, 1, [Define to 1 on unsupported systems])\n        AC_MSG_WARN([***********************************************************])\n        AC_MSG_WARN([*** hwloc does not support this system.])\n        AC_MSG_WARN([*** hwloc will *attempt* to build (but it may not work).])\n        AC_MSG_WARN([*** hwloc run-time results may be reduced to showing just one processor,])\n        AC_MSG_WARN([*** and binding will likely not be supported.])\n        AC_MSG_WARN([*** You have been warned.])\n        AC_MSG_WARN([*** Pausing to give you time to read this message...])\n        AC_MSG_WARN([***********************************************************])\n        sleep 10\n        ;;\n    esac\n\n    #\n    # Check CPU support\n    #\n    AC_MSG_CHECKING([which CPU support to include])\n    case ${target} in\n      i*86-*-*|x86_64-*-*|amd64-*-*)\n        case ${ac_cv_sizeof_void_p} in\n          4)\n            AC_DEFINE(HWLOC_X86_32_ARCH, 1, [Define to 1 on x86_32])\n            hwloc_x86_32=yes\n\t    HWLOC_MS_LIB_ARCH=X86\n            AC_MSG_RESULT([x86_32])\n            ;;\n          8)\n            AC_DEFINE(HWLOC_X86_64_ARCH, 1, [Define to 1 on x86_64])\n            hwloc_x86_64=yes\n\t    HWLOC_MS_LIB_ARCH=X64\n            AC_MSG_RESULT([x86_64])\n            ;;\n          *)\n            AC_DEFINE(HWLOC_X86_64_ARCH, 1, [Define to 1 on x86_64])\n            hwloc_x86_64=yes\n\t    HWLOC_MS_LIB_ARCH=X64\n            AC_MSG_RESULT([unknown -- assuming x86_64])\n            ;;\n        esac\n        ;;\n      *)\n        AC_MSG_RESULT([unknown])\n        ;;\n    esac\n    AC_SUBST(HWLOC_MS_LIB_ARCH)\n\n    AC_CHECK_SIZEOF([unsigned long])\n    AC_DEFINE_UNQUOTED([HWLOC_SIZEOF_UNSIGNED_LONG], $ac_cv_sizeof_unsigned_long, [The size of `unsigned long', as computed by sizeof])\n    AC_CHECK_SIZEOF([unsigned int])\n    AC_DEFINE_UNQUOTED([HWLOC_SIZEOF_UNSIGNED_INT], $ac_cv_sizeof_unsigned_int, [The size of `unsigned int', as computed by sizeof])\n\n    #\n    # Check for compiler attributes and visibility\n    #\n    _HWLOC_C_COMPILER_VENDOR([hwloc_c_vendor])\n    _HWLOC_CHECK_ATTRIBUTES\n    _HWLOC_CHECK_VISIBILITY\n    HWLOC_CFLAGS=\"$HWLOC_FLAGS $HWLOC_VISIBILITY_CFLAGS\"\n    AS_IF([test \"$HWLOC_VISIBILITY_CFLAGS\" != \"\"],\n          [AC_MSG_WARN([\"$HWLOC_VISIBILITY_CFLAGS\" has been added to the hwloc CFLAGS])])\n\n    # Make sure the compiler returns an error code when function arg\n    # count is wrong, otherwise sched_setaffinity checks may fail.\n    HWLOC_STRICT_ARGS_CFLAGS=\n    hwloc_args_check=0\n    AC_MSG_CHECKING([whether the C compiler rejects function calls with too many arguments])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n        extern int one_arg(int x);\n        int foo(void) { return one_arg(1, 2); }\n      ]])],\n      [AC_MSG_RESULT([no])],\n      [hwloc_args_check=1\n       AC_MSG_RESULT([yes])])\n    AC_MSG_CHECKING([whether the C compiler rejects function calls with too few arguments])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n        extern int two_arg(int x, int y);\n        int foo(void) { return two_arg(3); }\n      ]])],\n      [AC_MSG_RESULT([no])],\n      [hwloc_args_check=`expr $hwloc_args_check + 1`\n       AC_MSG_RESULT([yes])])\n    AS_IF([test \"$hwloc_args_check\" != \"2\"],[\n         AC_MSG_WARN([Your C compiler does not consider incorrect argument counts to be a fatal error.])\n        case \"$hwloc_c_vendor\" in\n        ibm)\n            HWLOC_STRICT_ARGS_CFLAGS=\"-qhalt=e\"\n            ;;\n        intel)\n            HWLOC_STRICT_ARGS_CFLAGS=\"-we140\"\n            ;;\n        *)\n            HWLOC_STRICT_ARGS_CFLAGS=FAIL\n            AC_MSG_WARN([Please report this warning and configure using a different C compiler if possible.])\n            ;;\n        esac\n        AS_IF([test \"$HWLOC_STRICT_ARGS_CFLAGS\" != \"FAIL\"],[\n            AC_MSG_WARN([Configure will append '$HWLOC_STRICT_ARGS_CFLAGS' to the value of CFLAGS when needed.])\n             AC_MSG_WARN([Alternatively you may configure with a different compiler.])\n        ])\n    ])\n\n    #\n    # Now detect support\n    #\n\n    AC_CHECK_HEADERS([unistd.h])\n    AC_CHECK_HEADERS([dirent.h])\n    AC_CHECK_HEADERS([strings.h])\n    AC_CHECK_HEADERS([ctype.h])\n\n    AC_CHECK_FUNCS([strncasecmp], [\n      _HWLOC_CHECK_DECL([strncasecmp], [\n\tAC_DEFINE([HWLOC_HAVE_DECL_STRNCASECMP], [1], [Define to 1 if function `strncasecmp' is declared by system headers])\n      ])\n    ])\n\n    AC_CHECK_FUNCS([strftime])\n    AC_CHECK_FUNCS([setlocale])\n\n    AC_CHECK_HEADER([stdint.h], [\n      AC_DEFINE([HWLOC_HAVE_STDINT_H], [1], [Define to 1 if you have the <stdint.h> header file.])\n    ])\n    AC_CHECK_HEADERS([sys/mman.h])\n\n    old_CPPFLAGS=\"$CPPFLAGS\"\n    CPPFLAGS=\"$CPPFLAGS -D_WIN32_WINNT=0x0601\"\n    AC_CHECK_TYPES([KAFFINITY,\n                    PROCESSOR_CACHE_TYPE,\n                    CACHE_DESCRIPTOR,\n                    LOGICAL_PROCESSOR_RELATIONSHIP,\n                    RelationProcessorPackage,\n                    SYSTEM_LOGICAL_PROCESSOR_INFORMATION,\n                    GROUP_AFFINITY,\n                    PROCESSOR_RELATIONSHIP,\n                    NUMA_NODE_RELATIONSHIP,\n                    CACHE_RELATIONSHIP,\n                    PROCESSOR_GROUP_INFO,\n                    GROUP_RELATIONSHIP,\n                    SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX,\n\t\t    PSAPI_WORKING_SET_EX_BLOCK,\n\t\t    PSAPI_WORKING_SET_EX_INFORMATION,\n\t\t    PROCESSOR_NUMBER],\n                    [],[],[[#include <windows.h>]])\n    CPPFLAGS=\"$old_CPPFLAGS\"\n    AC_CHECK_LIB([gdi32], [main],\n                 [HWLOC_LIBS=\"-lgdi32 $HWLOC_LIBS\"\n                  AC_DEFINE([HAVE_LIBGDI32], 1, [Define to 1 if we have -lgdi32])])\n    AC_CHECK_LIB([user32], [PostQuitMessage], [hwloc_have_user32=\"yes\"])\n\n    AC_CHECK_HEADER([windows.h], [\n      AC_DEFINE([HWLOC_HAVE_WINDOWS_H], [1], [Define to 1 if you have the `windows.h' header.])\n    ])\n\n    AC_CHECK_HEADERS([sys/lgrp_user.h], [\n      AC_CHECK_LIB([lgrp], [lgrp_init],\n                   [HWLOC_LIBS=\"-llgrp $HWLOC_LIBS\"\n                    AC_DEFINE([HAVE_LIBLGRP], 1, [Define to 1 if we have -llgrp])\n                    AC_CHECK_DECLS([lgrp_latency_cookie],,,[[#include <sys/lgrp_user.h>]])\n      ])\n    ])\n    AC_CHECK_HEADERS([kstat.h], [\n      AC_CHECK_LIB([kstat], [main],\n                   [HWLOC_LIBS=\"-lkstat $HWLOC_LIBS\"\n                    AC_DEFINE([HAVE_LIBKSTAT], 1, [Define to 1 if we have -lkstat])])\n    ])\n\n    AC_CHECK_DECLS([fabsf], [\n      AC_CHECK_LIB([m], [fabsf],\n                   [HWLOC_LIBS=\"-lm $HWLOC_LIBS\"])\n    ], [], [[#include <math.h>]])\n\n    AC_CHECK_HEADERS([picl.h], [\n      AC_CHECK_LIB([picl], [picl_initialize],\n                   [HWLOC_LIBS=\"-lpicl $HWLOC_LIBS\"])])\n\n    AC_CHECK_DECLS([_SC_NPROCESSORS_ONLN,\n    \t\t_SC_NPROCESSORS_CONF,\n    \t\t_SC_NPROC_ONLN,\n    \t\t_SC_NPROC_CONF,\n    \t\t_SC_PAGESIZE,\n    \t\t_SC_PAGE_SIZE,\n    \t\t_SC_LARGE_PAGESIZE],,[:],[[#include <unistd.h>]])\n\n    AC_HAVE_HEADERS([mach/mach_host.h])\n    AC_HAVE_HEADERS([mach/mach_init.h], [\n      AC_CHECK_FUNCS([host_info])\n    ])\n\n    AC_CHECK_HEADERS([sys/param.h])\n    AC_CHECK_HEADERS([sys/sysctl.h], [\n      AC_CHECK_DECLS([CTL_HW, HW_NCPU],,,[[\n      #if HAVE_SYS_PARAM_H\n      #include <sys/param.h>\n      #endif\n      #include <sys/sysctl.h>\n      ]])\n    ],,[\n      AC_INCLUDES_DEFAULT\n      #if HAVE_SYS_PARAM_H\n      #include <sys/param.h>\n      #endif\n    ])\n\n    AC_CHECK_DECLS([strtoull], [], [AC_CHECK_FUNCS([strtoull])], [AC_INCLUDES_DEFAULT])\n\n    # Needed for Windows in private/misc.h\n    AC_CHECK_TYPES([ssize_t])\n    AC_CHECK_DECLS([snprintf], [], [], [AC_INCLUDES_DEFAULT])\n    AC_CHECK_DECLS([strcasecmp], [], [], [AC_INCLUDES_DEFAULT])\n    # strdup and putenv are declared in windows headers but marked deprecated\n    AC_CHECK_DECLS([_strdup], [], [], [AC_INCLUDES_DEFAULT])\n    AC_CHECK_DECLS([_putenv], [], [], [AC_INCLUDES_DEFAULT])\n    # Could add mkdir and access for hwloc-gather-cpuid.c on Windows\n\n    if test \"x$hwloc_linux\" != \"xyes\" ; then\n      # Don't detect sysctl* on Linux because its sysctl() syscall is\n      # long deprecated and unneeded. Some libc still expose the symbol\n      # and raise a big warning at link time.\n\n      # Do a full link test instead of just using AC_CHECK_FUNCS, which\n      # just checks to see if the symbol exists or not.  For example,\n      # the prototype of sysctl uses u_int, which on some platforms\n      # (such as FreeBSD) is only defined under __BSD_VISIBLE, __USE_BSD\n      # or other similar definitions.  So while the symbols \"sysctl\" and\n      # \"sysctlbyname\" might still be available in libc (which autoconf\n      # checks for), they might not be actually usable.\n      AC_MSG_CHECKING([for sysctl])\n      AC_TRY_LINK([\n                 #include <stdio.h>\n                 #include <sys/types.h>\n                 #include <sys/sysctl.h>\n                 ],\n                  [return sysctl(NULL,0,NULL,NULL,NULL,0);],\n                  [AC_DEFINE([HAVE_SYSCTL],[1],[Define to '1' if sysctl is present and usable])\n                   AC_MSG_RESULT(yes)],\n                  [AC_MSG_RESULT(no)])\n      AC_MSG_CHECKING([for sysctlbyname])\n      AC_TRY_LINK([\n                 #include <stdio.h>\n                 #include <sys/types.h>\n                 #include <sys/sysctl.h>\n                 ],\n                  [return sysctlbyname(NULL,NULL,NULL,NULL,0);],\n                  [AC_DEFINE([HAVE_SYSCTLBYNAME],[1],[Define to '1' if sysctlbyname is present and usable])\n                   AC_MSG_RESULT(yes)],\n                  [AC_MSG_RESULT(no)])\n    fi\n\n    AC_CHECK_DECLS([getprogname], [], [], [AC_INCLUDES_DEFAULT])\n    AC_CHECK_DECLS([getexecname], [], [], [AC_INCLUDES_DEFAULT])\n    AC_CHECK_DECLS([GetModuleFileName], [], [], [#include <windows.h>])\n    # program_invocation_name and __progname may be available but not exported in headers\n    AC_MSG_CHECKING([for program_invocation_name])\n    AC_TRY_LINK([\n\t\t#ifndef _GNU_SOURCE\n\t\t# define _GNU_SOURCE\n\t\t#endif\n\t\t#include <errno.h>\n\t\t#include <stdio.h>\n\t\textern char *program_invocation_name;\n\t\t],[\n\t\treturn printf(\"%s\\n\", program_invocation_name);\n\t\t],\n\t\t[AC_DEFINE([HAVE_PROGRAM_INVOCATION_NAME], [1], [Define to '1' if program_invocation_name is present and usable])\n\t\t AC_MSG_RESULT([yes])\n\t\t],[AC_MSG_RESULT([no])])\n    AC_MSG_CHECKING([for __progname])\n    AC_TRY_LINK([\n\t\t#include <stdio.h>\n\t\textern char *__progname;\n\t\t],[\n\t\treturn printf(\"%s\\n\", __progname);\n\t\t],\n\t\t[AC_DEFINE([HAVE___PROGNAME], [1], [Define to '1' if __progname is present and usable])\n\t\t AC_MSG_RESULT([yes])\n\t\t],[AC_MSG_RESULT([no])])\n\n    case ${target} in\n      *-*-mingw*|*-*-cygwin*)\n        hwloc_pid_t=HANDLE\n        hwloc_thread_t=HANDLE\n        ;;\n      *)\n        hwloc_pid_t=pid_t\n        AC_CHECK_TYPES([pthread_t], [hwloc_thread_t=pthread_t], [:], [[#include <pthread.h>]])\n        ;;\n    esac\n    AC_DEFINE_UNQUOTED(hwloc_pid_t, $hwloc_pid_t, [Define this to the process ID type])\n    if test \"x$hwloc_thread_t\" != \"x\" ; then\n      AC_DEFINE_UNQUOTED(hwloc_thread_t, $hwloc_thread_t, [Define this to the thread ID type])\n    fi\n\n    AC_CHECK_DECLS([sched_getcpu],,[:],[[\n      #ifndef _GNU_SOURCE\n      # define _GNU_SOURCE\n      #endif\n      #include <sched.h>\n    ]])\n\n    _HWLOC_CHECK_DECL([sched_setaffinity], [\n      AC_DEFINE([HWLOC_HAVE_SCHED_SETAFFINITY], [1], [Define to 1 if glibc provides a prototype of sched_setaffinity()])\n      AS_IF([test \"$HWLOC_STRICT_ARGS_CFLAGS\" = \"FAIL\"],[\n        AC_MSG_WARN([Support for sched_setaffinity() requires a C compiler which])\n        AC_MSG_WARN([considers incorrect argument counts to be a fatal error.])\n        AC_MSG_ERROR([Cannot continue.])\n      ])\n      AC_MSG_CHECKING([for old prototype of sched_setaffinity])\n      hwloc_save_CFLAGS=$CFLAGS\n      CFLAGS=\"$CFLAGS $HWLOC_STRICT_ARGS_CFLAGS\"\n      AC_COMPILE_IFELSE([\n          AC_LANG_PROGRAM([[\n              #ifndef _GNU_SOURCE\n              # define _GNU_SOURCE\n              #endif\n              #include <sched.h>\n              static unsigned long mask;\n              ]], [[ sched_setaffinity(0, (void*) &mask); ]])],\n          [AC_DEFINE([HWLOC_HAVE_OLD_SCHED_SETAFFINITY], [1], [Define to 1 if glibc provides the old prototype (without length) of sched_setaffinity()])\n           AC_MSG_RESULT([yes])],\n          [AC_MSG_RESULT([no])])\n      CFLAGS=$hwloc_save_CFLAGS\n    ], , [[\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE\n#endif\n#include <sched.h>\n]])\n\n    AC_MSG_CHECKING([for working CPU_SET])\n    AC_LINK_IFELSE([\n      AC_LANG_PROGRAM([[\n        #include <sched.h>\n        cpu_set_t set;\n        ]], [[ CPU_ZERO(&set); CPU_SET(0, &set);]])],\n\t[AC_DEFINE([HWLOC_HAVE_CPU_SET], [1], [Define to 1 if the CPU_SET macro works])\n         AC_MSG_RESULT([yes])],\n        [AC_MSG_RESULT([no])])\n\n    AC_MSG_CHECKING([for working CPU_SET_S])\n    AC_LINK_IFELSE([\n      AC_LANG_PROGRAM([[\n          #include <sched.h>\n          cpu_set_t *set;\n        ]], [[\n          set = CPU_ALLOC(1024);\n          CPU_ZERO_S(CPU_ALLOC_SIZE(1024), set);\n          CPU_SET_S(CPU_ALLOC_SIZE(1024), 0, set);\n          CPU_FREE(set);\n        ]])],\n        [AC_DEFINE([HWLOC_HAVE_CPU_SET_S], [1], [Define to 1 if the CPU_SET_S macro works])\n         AC_MSG_RESULT([yes])],\n        [AC_MSG_RESULT([no])])\n\n    AC_MSG_CHECKING([for working syscall])\n    AC_LINK_IFELSE([\n      AC_LANG_PROGRAM([[\n          #include <unistd.h>\n          #include <sys/syscall.h>\n          ]], [[syscall(1, 2, 3);]])],\n        [AC_DEFINE([HWLOC_HAVE_SYSCALL], [1], [Define to 1 if function `syscall' is available])\n         AC_MSG_RESULT([yes])],\n        [AC_MSG_RESULT([no])])\n\n    # Check for kerrighed, but don't abort if not found.  It's illegal\n    # to pass in an empty 3rd argument, but we trust the output of\n    # pkg-config, so just give it a value that will always work:\n    # printf.\n    HWLOC_PKG_CHECK_MODULES([KERRIGHED], [kerrighed >= 2.0], [printf], [stdio.h], [], [:])\n\n    AC_PATH_PROGS([HWLOC_MS_LIB], [lib])\n    AC_ARG_VAR([HWLOC_MS_LIB], [Path to Microsoft's Visual Studio `lib' tool])\n\n    AC_PATH_PROG([BASH], [bash])\n\n    AC_CHECK_FUNCS([ffs], [\n      _HWLOC_CHECK_DECL([ffs],[\n        AC_DEFINE([HWLOC_HAVE_DECL_FFS], [1], [Define to 1 if function `ffs' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_FFS], [1], [Define to 1 if you have the `ffs' function.])\n      if ( $CC --version | grep gccfss ) >/dev/null 2>&1 ; then\n        dnl May be broken due to\n        dnl    https://forums.oracle.com/forums/thread.jspa?threadID=1997328\n        dnl TODO: a more selective test, since bug may be version dependent.\n        dnl We can't use AC_TRY_LINK because the failure does not appear until\n        dnl run/load time and there is currently no precedent for AC_TRY_RUN\n        dnl use in hwloc.  --PHH\n        dnl For now, we're going with \"all gccfss compilers are broken\".\n        dnl Better to be safe and correct; it's not like this is\n        dnl performance-critical code, after all.\n        AC_DEFINE([HWLOC_HAVE_BROKEN_FFS], [1],\n                  [Define to 1 if your `ffs' function is known to be broken.])\n      fi\n    ])\n    AC_CHECK_FUNCS([ffsl], [\n      _HWLOC_CHECK_DECL([ffsl],[\n        AC_DEFINE([HWLOC_HAVE_DECL_FFSL], [1], [Define to 1 if function `ffsl' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_FFSL], [1], [Define to 1 if you have the `ffsl' function.])\n    ])\n\n    AC_CHECK_FUNCS([fls], [\n      _HWLOC_CHECK_DECL([fls],[\n        AC_DEFINE([HWLOC_HAVE_DECL_FLS], [1], [Define to 1 if function `fls' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_FLS], [1], [Define to 1 if you have the `fls' function.])\n    ])\n    AC_CHECK_FUNCS([flsl], [\n      _HWLOC_CHECK_DECL([flsl],[\n        AC_DEFINE([HWLOC_HAVE_DECL_FLSL], [1], [Define to 1 if function `flsl' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_FLSL], [1], [Define to 1 if you have the `flsl' function.])\n    ])\n\n    AC_CHECK_FUNCS([clz], [\n      _HWLOC_CHECK_DECL([clz],[\n        AC_DEFINE([HWLOC_HAVE_DECL_CLZ], [1], [Define to 1 if function `clz' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_CLZ], [1], [Define to 1 if you have the `clz' function.])\n    ])\n    AC_CHECK_FUNCS([clzl], [\n      _HWLOC_CHECK_DECL([clzl],[\n        AC_DEFINE([HWLOC_HAVE_DECL_CLZL], [1], [Define to 1 if function `clzl' is declared by system headers])\n      ])\n      AC_DEFINE([HWLOC_HAVE_CLZL], [1], [Define to 1 if you have the `clzl' function.])\n    ])\n\n    AS_IF([test \"$hwloc_c_vendor\" != \"android\"], [AC_CHECK_FUNCS([openat], [hwloc_have_openat=yes])])\n\n\n    AC_CHECK_HEADERS([malloc.h])\n    AC_CHECK_FUNCS([getpagesize memalign posix_memalign])\n\n    AC_CHECK_HEADERS([sys/utsname.h])\n    AC_CHECK_FUNCS([uname])\n\n    dnl Don't check for valgrind in embedded mode because this may conflict\n    dnl with the embedder projects also checking for it.\n    dnl We only use Valgrind to nicely disable the x86 backend with a warning,\n    dnl but we can live without it in embedded mode (it auto-disables itself\n    dnl because of invalid CPUID outputs).\n    dnl Non-embedded checks usually go to hwloc_internal.m4 but this one is\n    dnl is really for the core library.\n    AS_IF([test \"$hwloc_mode\" != \"embedded\"],\n        [AC_CHECK_HEADERS([valgrind/valgrind.h])\n         AC_CHECK_DECLS([RUNNING_ON_VALGRIND],,[:],[[#include <valgrind/valgrind.h>]])\n\t],[\n\t AC_DEFINE([HAVE_DECL_RUNNING_ON_VALGRIND], [0], [Embedded mode; just assume we do not have Valgrind support])\n\t])\n\n    AC_CHECK_HEADERS([pthread_np.h])\n    AC_CHECK_DECLS([pthread_setaffinity_np],,[:],[[\n      #include <pthread.h>\n      #ifdef HAVE_PTHREAD_NP_H\n      #  include <pthread_np.h>\n      #endif\n    ]])\n    AC_CHECK_DECLS([pthread_getaffinity_np],,[:],[[\n      #include <pthread.h>\n      #ifdef HAVE_PTHREAD_NP_H\n      #  include <pthread_np.h>\n      #endif\n    ]])\n    AC_CHECK_FUNC([sched_setaffinity], [hwloc_have_sched_setaffinity=yes])\n    AC_CHECK_HEADERS([sys/cpuset.h],,,[[#include <sys/param.h>]])\n    AC_CHECK_FUNCS([cpuset_setaffinity])\n    AC_SEARCH_LIBS([pthread_getthrds_np], [pthread],\n      AC_DEFINE([HWLOC_HAVE_PTHREAD_GETTHRDS_NP], 1, `Define to 1 if you have pthread_getthrds_np')\n    )\n    AC_CHECK_FUNCS([cpuset_setid])\n\n    # Linux libnuma support\n    hwloc_linux_libnuma_happy=no\n    if test \"x$enable_libnuma\" != \"xno\"; then\n        hwloc_linux_libnuma_happy=yes\n        AC_CHECK_HEADERS([numaif.h], [\n            AC_CHECK_LIB([numa], [numa_available], [HWLOC_LINUX_LIBNUMA_LIBS=\"-lnuma\"], [hwloc_linux_libnuma_happy=no])\n        ], [hwloc_linux_libnuma_happy=no])\n    fi\n    AC_SUBST(HWLOC_LINUX_LIBNUMA_LIBS)\n    # If we asked for Linux libnuma support but couldn't deliver, fail\n    HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_LINUX_LIBNUMA_LIBS\"\n    AS_IF([test \"$enable_libnuma\" = \"yes\" -a \"$hwloc_linux_libnuma_happy\" = \"no\"],\n          [AC_MSG_WARN([Specified --enable-libnuma switch, but could not])\n           AC_MSG_WARN([find appropriate support])\n           AC_MSG_ERROR([Cannot continue])])\n    if test \"x$hwloc_linux_libnuma_happy\" = \"xyes\"; then\n      tmp_save_LIBS=\"$LIBS\"\n      LIBS=\"$LIBS $HWLOC_LINUX_LIBNUMA_LIBS\"\n\n      AC_CHECK_LIB([numa], [set_mempolicy], [\n\tenable_set_mempolicy=yes\n\tAC_DEFINE([HWLOC_HAVE_SET_MEMPOLICY], [1], [Define to 1 if set_mempolicy is available.])\n      ])\n      AC_CHECK_LIB([numa], [mbind], [\n\tenable_mbind=yes\n\tAC_DEFINE([HWLOC_HAVE_MBIND], [1], [Define to 1 if mbind is available.])\n      ])\n      AC_CHECK_LIB([numa], [migrate_pages], [\n\tenable_migrate_pages=yes\n\tAC_DEFINE([HWLOC_HAVE_MIGRATE_PAGES], [1], [Define to 1 if migrate_pages is available.])\n      ])\n      AC_CHECK_LIB([numa], [move_pages], [\n\tAC_DEFINE([HWLOC_HAVE_MOVE_PAGES], [1], [Define to 1 if move_pages is available.])\n      ])\n\n      LIBS=\"$tmp_save_LIBS\"\n    fi\n\n    # Linux libudev support\n    if test \"x$enable_libudev\" != xno; then\n      AC_CHECK_HEADERS([libudev.h], [\n\tAC_CHECK_LIB([udev], [udev_device_new_from_subsystem_sysname], [\n\t  HWLOC_LIBS=\"$HWLOC_LIBS -ludev\"\n\t  AC_DEFINE([HWLOC_HAVE_LIBUDEV], [1], [Define to 1 if you have libudev.])\n\t])\n      ])\n    fi\n\n    # PCI support via libpciaccess.  NOTE: we do not support\n    # libpci/pciutils because that library is GPL and is incompatible\n    # with our BSD license.\n    hwloc_pci_happy=no\n    if test \"x$enable_pci\" != xno; then\n      hwloc_pci_happy=yes\n      HWLOC_PKG_CHECK_MODULES([PCIACCESS], [pciaccess], [pci_slot_match_iterator_create], [pciaccess.h], [:], [hwloc_pci_happy=no])\n\n      # Only add the REQUIRES if we got pciaccess through pkg-config.\n      # Otherwise we don't know if pciaccess.pc is installed\n      AS_IF([test \"$hwloc_pci_happy\" = \"yes\"], [HWLOC_PCIACCESS_REQUIRES=pciaccess])\n\n      # Just for giggles, if we didn't find a pciaccess pkg-config,\n      # just try looking for its header file and library.\n      AS_IF([test \"$hwloc_pci_happy\" != \"yes\"],\n         [AC_CHECK_HEADER([pciaccess.h],\n              [AC_CHECK_LIB([pciaccess], [pci_slot_match_iterator_create],\n                   [hwloc_pci_happy=yes\n                    HWLOC_PCIACCESS_LIBS=\"-lpciaccess\"])\n              ])\n         ])\n\n      AS_IF([test \"$hwloc_pci_happy\" = \"yes\"],\n         [hwloc_pci_lib=pciaccess\n          hwloc_components=\"$hwloc_components pci\"\n          hwloc_pci_component_maybeplugin=1])\n    fi\n    # If we asked for pci support but couldn't deliver, fail\n    AS_IF([test \"$enable_pci\" = \"yes\" -a \"$hwloc_pci_happy\" = \"no\"],\n          [AC_MSG_WARN([Specified --enable-pci switch, but could not])\n           AC_MSG_WARN([find appropriate support])\n           AC_MSG_ERROR([Cannot continue])])\n    # don't add LIBS/CFLAGS/REQUIRES yet, depends on plugins\n\n    # OpenCL support\n    hwloc_opencl_happy=no\n    if test \"x$enable_opencl\" != \"xno\"; then\n      hwloc_opencl_happy=yes\n      case ${target} in\n      *-*-darwin*)\n        # On Darwin, only use the OpenCL framework\n        AC_CHECK_HEADERS([OpenCL/cl_ext.h], [\n\t  AC_MSG_CHECKING([for the OpenCL framework])\n          tmp_save_LDFLAGS=\"$LDFLAGS\"\n          LDFLAGS=\"$LDFLAGS -framework OpenCL\"\n\t  AC_LINK_IFELSE([\n            AC_LANG_PROGRAM([[\n#include <OpenCL/opencl.h>\n            ]], [[\nreturn clGetDeviceIDs(0, 0, 0, NULL, NULL);\n            ]])],\n          [AC_MSG_RESULT(yes)\n\t   HWLOC_OPENCL_LDFLAGS=\"-framework OpenCL\"],\n\t  [AC_MSG_RESULT(no)\n\t   hwloc_opencl_happy=no])\n          LDFLAGS=\"$tmp_save_LDFLAGS\"\n        ], [hwloc_opencl_happy=no])\n      ;;\n      *)\n        # On Others, look for OpenCL at normal locations\n        AC_CHECK_HEADERS([CL/cl_ext.h], [\n\t  AC_CHECK_LIB([OpenCL], [clGetDeviceIDs], [HWLOC_OPENCL_LIBS=\"-lOpenCL\"], [hwloc_opencl_happy=no])\n        ], [hwloc_opencl_happy=no])\n      ;;\n      esac\n    fi\n    AC_SUBST(HWLOC_OPENCL_CFLAGS)\n    AC_SUBST(HWLOC_OPENCL_LIBS)\n    AC_SUBST(HWLOC_OPENCL_LDFLAGS)\n    # Check if required extensions are available\n    if test \"x$hwloc_opencl_happy\" = \"xyes\"; then\n      tmp_save_CFLAGS=\"$CFLAGS\"\n      CFLAGS=\"$CFLAGS $HWLOC_OPENCL_CFLAGS\"\n      tmp_save_LIBS=\"$LIBS\"\n      LIBS=\"$LIBS $HWLOC_OPENCL_LIBS\"\n      AC_CHECK_DECLS([CL_DEVICE_TOPOLOGY_AMD],[hwloc_opencl_amd_happy=yes],[:],[[#include <CL/cl_ext.h>]])\n      CFLAGS=\"$tmp_save_CFLAGS\"\n      LIBS=\"$tmp_save_LIBS\"\n      # We can't do anything without CL_DEVICE_TOPOLOGY_AMD so far, so disable OpenCL entirely if not found\n      test \"x$hwloc_opencl_amd_happy\" != \"xyes\" && hwloc_opencl_happy=no\n    fi\n    # If we asked for opencl support but couldn't deliver, fail\n    AS_IF([test \"$enable_opencl\" = \"yes\" -a \"$hwloc_opencl_happy\" = \"no\"],\n          [AC_MSG_WARN([Specified --enable-opencl switch, but could not])\n           AC_MSG_WARN([find appropriate support])\n           AC_MSG_ERROR([Cannot continue])])\n    if test \"x$hwloc_opencl_happy\" = \"xyes\"; then\n      AC_DEFINE([HWLOC_HAVE_OPENCL], [1], [Define to 1 if you have the `OpenCL' library.])\n      AC_SUBST([HWLOC_HAVE_OPENCL], [1])\n      hwloc_components=\"$hwloc_components opencl\"\n      hwloc_opencl_component_maybeplugin=1\n    else\n      AC_SUBST([HWLOC_HAVE_OPENCL], [0])\n    fi\n    # don't add LIBS/CFLAGS/REQUIRES yet, depends on plugins\n\n    # CUDA support\n    hwloc_have_cuda=no\n    hwloc_have_cudart=no\n    if test \"x$enable_cuda\" != \"xno\"; then\n      AC_CHECK_HEADERS([cuda.h], [\n        AC_MSG_CHECKING(if CUDA_VERSION >= 3020)\n        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <cuda.h>\n#ifndef CUDA_VERSION\n#error CUDA_VERSION undefined\n#elif CUDA_VERSION < 3020\n#error CUDA_VERSION too old\n#endif]], [[int i = 3;]])],\n         [AC_MSG_RESULT(yes)\n          AC_CHECK_LIB([cuda], [cuInit],\n                       [AC_DEFINE([HAVE_CUDA], 1, [Define to 1 if we have -lcuda])\n                        hwloc_have_cuda=yes])],\n         [AC_MSG_RESULT(no)])])\n\n      AC_CHECK_HEADERS([cuda_runtime_api.h], [\n        AC_MSG_CHECKING(if CUDART_VERSION >= 3020)\n        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <cuda_runtime_api.h>\n#ifndef CUDART_VERSION\n#error CUDART_VERSION undefined\n#elif CUDART_VERSION < 3020\n#error CUDART_VERSION too old\n#endif]], [[int i = 3;]])],\n         [AC_MSG_RESULT(yes)\n          AC_CHECK_LIB([cudart], [cudaGetDeviceProperties], [\n            HWLOC_CUDA_LIBS=\"-lcudart\"\n            AC_SUBST(HWLOC_CUDA_LIBS)\n            hwloc_have_cudart=yes\n            AC_DEFINE([HWLOC_HAVE_CUDART], [1], [Define to 1 if you have the `cudart' SDK.])\n          ])\n        ])\n      ])\n\n      AS_IF([test \"$enable_cuda\" = \"yes\" -a \"$hwloc_have_cudart\" = \"no\"],\n            [AC_MSG_WARN([Specified --enable-cuda switch, but could not])\n             AC_MSG_WARN([find appropriate support])\n             AC_MSG_ERROR([Cannot continue])])\n\n      if test \"x$hwloc_have_cudart\" = \"xyes\"; then\n\thwloc_components=\"$hwloc_components cuda\"\n        hwloc_cuda_component_maybeplugin=1\n      fi\n    fi\n    # don't add LIBS/CFLAGS yet, depends on plugins\n\n    # NVML support\n    hwloc_nvml_happy=no\n    if test \"x$enable_nvml\" != \"xno\"; then\n\thwloc_nvml_happy=yes\n\tAC_CHECK_HEADERS([nvml.h], [\n\t  AC_CHECK_LIB([nvidia-ml], [nvmlInit], [HWLOC_NVML_LIBS=\"-lnvidia-ml\"], [hwloc_nvml_happy=no])\n        ], [hwloc_nvml_happy=no])\n    fi\n    if test \"x$hwloc_nvml_happy\" = \"xyes\"; then\n      tmp_save_CFLAGS=\"$CFLAGS\"\n      CFLAGS=\"$CFLAGS $HWLOC_NVML_CFLAGS\"\n      tmp_save_LIBS=\"$LIBS\"\n      LIBS=\"$LIBS $HWLOC_NVML_LIBS\"\n      AC_CHECK_DECLS([nvmlDeviceGetMaxPcieLinkGeneration],,[:],[[#include <nvml.h>]])\n      CFLAGS=\"$tmp_save_CFLAGS\"\n      LIBS=\"$tmp_save_LIBS\"\n    fi\n    AC_SUBST(HWLOC_NVML_LIBS)\n    # If we asked for nvml support but couldn't deliver, fail\n    AS_IF([test \"$enable_nvml\" = \"yes\" -a \"$hwloc_nvml_happy\" = \"no\"],\n\t  [AC_MSG_WARN([Specified --enable-nvml switch, but could not])\n\t   AC_MSG_WARN([find appropriate support])\n\t   AC_MSG_ERROR([Cannot continue])])\n    if test \"x$hwloc_nvml_happy\" = \"xyes\"; then\n      AC_DEFINE([HWLOC_HAVE_NVML], [1], [Define to 1 if you have the `NVML' library.])\n      AC_SUBST([HWLOC_HAVE_NVML], [1])\n      hwloc_components=\"$hwloc_components nvml\"\n      hwloc_nvml_component_maybeplugin=1\n    else\n      AC_SUBST([HWLOC_HAVE_NVML], [0])\n    fi\n    # don't add LIBS/CFLAGS/REQUIRES yet, depends on plugins\n\n    # X11 support\n    AC_PATH_XTRA\n\n    CPPFLAGS_save=$CPPFLAGS\n    LIBS_save=$LIBS\n\n    CPPFLAGS=\"$CPPFLAGS $X_CFLAGS\"\n    LIBS=\"$LIBS $X_PRE_LIBS $X_LIBS $X_EXTRA_LIBS\"\n    AC_CHECK_HEADERS([X11/Xlib.h],\n        [AC_CHECK_LIB([X11], [XOpenDisplay],\n            [\n             # the GL backend just needs XOpenDisplay\n             hwloc_enable_X11=yes\n             # lstopo needs more\n             AC_CHECK_HEADERS([X11/Xutil.h],\n                [AC_CHECK_HEADERS([X11/keysym.h],\n                    [AC_DEFINE([HWLOC_HAVE_X11_KEYSYM], [1], [Define to 1 if X11 headers including Xutil.h and keysym.h are available.])\n                     HWLOC_X11_CPPFLAGS=\"$X_CFLAGS\"\n                     AC_SUBST([HWLOC_X11_CPPFLAGS])\n                     HWLOC_X11_LIBS=\"$X_PRE_LIBS $X_LIBS -lX11 $X_EXTRA_LIBS\"\n                     AC_SUBST([HWLOC_X11_LIBS])])\n                ], [], [#include <X11/Xlib.h>])\n            ])\n         ])\n    CPPFLAGS=$CPPFLAGS_save\n    LIBS=$LIBS_save\n\n    # GL Support\n    hwloc_gl_happy=no\n    if test \"x$enable_gl\" != \"xno\"; then\n\thwloc_gl_happy=yes\n\n\tAS_IF([test \"$hwloc_enable_X11\" != \"yes\"],\n              [AC_MSG_WARN([X11 not found; GL disabled])\n               hwloc_gl_happy=no])\n\n        AC_CHECK_HEADERS([NVCtrl/NVCtrl.h], [\n          AC_CHECK_LIB([XNVCtrl], [XNVCTRLQueryTargetAttribute], [:], [hwloc_gl_happy=no], [-lXext])\n        ], [hwloc_gl_happy=no])\n\n        if test \"x$hwloc_gl_happy\" = \"xyes\"; then\n            AC_DEFINE([HWLOC_HAVE_GL], [1], [Define to 1 if you have the GL module components.])\n\t    HWLOC_GL_LIBS=\"-lXNVCtrl -lXext -lX11\"\n\t    AC_SUBST(HWLOC_GL_LIBS)\n\t    # FIXME we actually don't know if xext.pc and x11.pc are installed\n\t    # since we didn't look for Xext and X11 using pkg-config\n\t    HWLOC_GL_REQUIRES=\"xext x11\"\n            hwloc_have_gl=yes\n\t    hwloc_components=\"$hwloc_components gl\"\n\t    hwloc_gl_component_maybeplugin=1\n\telse\n            AS_IF([test \"$enable_gl\" = \"yes\"], [\n                AC_MSG_WARN([Specified --enable-gl switch, but could not])\n                AC_MSG_WARN([find appropriate support])\n                AC_MSG_ERROR([Cannot continue])\n            ])\n        fi\n    fi\n    # don't add LIBS/CFLAGS yet, depends on plugins\n\n    # libxml2 support\n    hwloc_libxml2_happy=\n    if test \"x$enable_libxml2\" != \"xno\"; then\n        HWLOC_PKG_CHECK_MODULES([LIBXML2], [libxml-2.0], [xmlNewDoc], [libxml/parser.h],\n                                [hwloc_libxml2_happy=yes],\n                                [hwloc_libxml2_happy=no])\n    fi\n    if test \"x$hwloc_libxml2_happy\" = \"xyes\"; then\n        HWLOC_LIBXML2_REQUIRES=\"libxml-2.0\"\n        AC_DEFINE([HWLOC_HAVE_LIBXML2], [1], [Define to 1 if you have the `libxml2' library.])\n        AC_SUBST([HWLOC_HAVE_LIBXML2], [1])\n\n        hwloc_components=\"$hwloc_components xml_libxml\"\n        hwloc_xml_libxml_component_maybeplugin=1\n    else\n        AC_SUBST([HWLOC_HAVE_LIBXML2], [0])\n\tAS_IF([test \"$enable_libxml2\" = \"yes\"],\n              [AC_MSG_WARN([--enable-libxml2 requested, but libxml2 was not found])\n               AC_MSG_ERROR([Cannot continue])])\n    fi\n    # don't add LIBS/CFLAGS/REQUIRES yet, depends on plugins\n\n    # Try to compile the x86 cpuid inlines\n    if test \"x$enable_cpuid\" != \"xno\"; then\n\tAC_MSG_CHECKING([for x86 cpuid])\n\told_CPPFLAGS=\"$CPPFLAGS\"\n\tCPPFLAGS=\"$CPPFLAGS -I$HWLOC_top_srcdir/include\"\n\t# We need hwloc_uint64_t but we can't use hwloc/autogen/config.h before configure ends.\n\t# So pass #include/#define manually here for now.\n\tCPUID_CHECK_HEADERS=\n\tCPUID_CHECK_DEFINE=\n\tif test \"x$hwloc_windows\" = xyes; then\n\t    X86_CPUID_CHECK_HEADERS=\"#include <windows.h>\"\n\t    X86_CPUID_CHECK_DEFINE=\"#define hwloc_uint64_t DWORDLONG\"\n\telse\n\t    X86_CPUID_CHECK_DEFINE=\"#define hwloc_uint64_t uint64_t\"\n\t    if test \"x$ac_cv_header_stdint_h\" = xyes; then\n\t        X86_CPUID_CHECK_HEADERS=\"#include <stdint.h>\"\n\t    fi\n\tfi\n\tAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n\t    #include <stdio.h>\n\t    $X86_CPUID_CHECK_HEADERS\n\t    $X86_CPUID_CHECK_DEFINE\n\t    #define __hwloc_inline\n\t    #include <private/cpuid-x86.h>\n\t]], [[\n\t    if (hwloc_have_x86_cpuid()) {\n\t\tunsigned eax = 0, ebx, ecx = 0, edx;\n\t\thwloc_x86_cpuid(&eax, &ebx, &ecx, &edx);\n\t\tprintf(\"highest x86 cpuid %x\\n\", eax);\n\t\treturn 0;\n\t    }\n\t]])],\n\t[AC_MSG_RESULT([yes])\n\t AC_DEFINE(HWLOC_HAVE_X86_CPUID, 1, [Define to 1 if you have x86 cpuid])\n\t hwloc_have_x86_cpuid=yes],\n\t[AC_MSG_RESULT([no])])\n\tif test \"x$hwloc_have_x86_cpuid\" = xyes; then\n\t    hwloc_components=\"$hwloc_components x86\"\n\tfi\n\tCPPFLAGS=\"$old_CPPFLAGS\"\n    fi\n\n    # Components require pthread_mutex, see if it needs -lpthread\n    hwloc_pthread_mutex_happy=no\n    # Try without explicit -lpthread first\n    AC_CHECK_FUNC([pthread_mutex_lock],\n      [hwloc_pthread_mutex_happy=yes\n       HWLOC_LIBS_PRIVATE=\"$HWLOC_LIBS_PRIVATE -lpthread\"\n      ],\n      [AC_MSG_CHECKING([for pthread_mutex_lock with -lpthread])\n       # Try again with explicit -lpthread, but don't use AC_CHECK_FUNC to avoid the cache\n       tmp_save_LIBS=$LIBS\n       LIBS=\"$LIBS -lpthread\"\n       AC_LINK_IFELSE([AC_LANG_CALL([], [pthread_mutex_lock])],\n         [hwloc_pthread_mutex_happy=yes\n          HWLOC_LIBS=\"$HWLOC_LIBS -lpthread\"\n         ])\n       AC_MSG_RESULT([$hwloc_pthread_mutex_happy])\n       LIBS=\"$tmp_save_LIBS\"\n      ])\n    AS_IF([test \"x$hwloc_pthread_mutex_happy\" = \"xyes\"],\n      [AC_DEFINE([HWLOC_HAVE_PTHREAD_MUTEX], 1, [Define to 1 if pthread mutexes are available])])\n\n    AS_IF([test \"x$hwloc_pthread_mutex_happy\" != xyes -a \"x$hwloc_windows\" != xyes],\n      [AC_MSG_WARN([pthread_mutex_lock not available, required for thread-safe initialization on non-Windows platforms.])\n       AC_MSG_WARN([Please report this to the hwloc-devel mailing list.])\n       AC_MSG_ERROR([Cannot continue])])\n\n    #\n    # Now enable registration of listed components\n    #\n\n    # Plugin support\n    AC_MSG_CHECKING([if plugin support is enabled])\n    # Plugins (even core support) are totally disabled by default\n    AS_IF([test \"x$enable_plugins\" = \"x\"], [enable_plugins=no])\n    AS_IF([test \"x$enable_plugins\" != \"xno\"], [hwloc_have_plugins=yes], [hwloc_have_plugins=no])\n    AC_MSG_RESULT([$hwloc_have_plugins])\n    AS_IF([test \"x$hwloc_have_plugins\" = \"xyes\"],\n          [AC_DEFINE([HWLOC_HAVE_PLUGINS], 1, [Define to 1 if the hwloc library should support dynamically-loaded plugins])])\n\n    # Some sanity checks about plugins\n    # libltdl doesn't work on AIX as of 2.4.2\n    AS_IF([test \"x$enable_plugins\" = \"xyes\" -a \"x$hwloc_aix\" = \"xyes\"],\n      [AC_MSG_WARN([libltdl does not work on AIX, plugins support cannot be enabled.])\n       AC_MSG_ERROR([Cannot continue])])\n    # posix linkers don't work well with plugins and windows dll constraints\n    AS_IF([test \"x$enable_plugins\" = \"xyes\" -a \"x$hwloc_windows\" = \"xyes\"],\n      [AC_MSG_WARN([Plugins not supported on non-native Windows build, plugins support cannot be enabled.])\n       AC_MSG_ERROR([Cannot continue])])\n\n    # If we want plugins, look for ltdl.h and libltdl\n    if test \"x$hwloc_have_plugins\" = xyes; then\n      AC_CHECK_HEADER([ltdl.h], [],\n\t[AC_MSG_WARN([Plugin support requested, but could not find ltdl.h])\n\t AC_MSG_ERROR([Cannot continue])])\n      AC_CHECK_LIB([ltdl], [lt_dlopenext],\n\t[HWLOC_LIBS=\"$HWLOC_LIBS -lltdl\"],\n\t[AC_MSG_WARN([Plugin support requested, but could not find libltdl])\n\t AC_MSG_ERROR([Cannot continue])])\n      # Add libltdl static-build dependencies to hwloc.pc\n      HWLOC_CHECK_LTDL_DEPS\n    fi\n\n    AC_ARG_WITH([hwloc-plugins-path],\n\t\tAC_HELP_STRING([--with-hwloc-plugins-path=dir:...],\n                               [Colon-separated list of plugin directories. Default: \"$prefix/lib/hwloc\". Plugins will be installed in the first directory. They will be loaded from all of them, in order.]),\n\t\t[HWLOC_PLUGINS_PATH=\"$with_hwloc_plugins_path\"],\n\t\t[HWLOC_PLUGINS_PATH=\"\\$(libdir)/hwloc\"])\n    AC_SUBST(HWLOC_PLUGINS_PATH)\n    HWLOC_PLUGINS_DIR=`echo \"$HWLOC_PLUGINS_PATH\" | cut -d: -f1`\n    AC_SUBST(HWLOC_PLUGINS_DIR)\n\n    # Static components output file\n    hwloc_static_components_dir=${HWLOC_top_builddir}/src\n    mkdir -p ${hwloc_static_components_dir}\n    hwloc_static_components_file=${hwloc_static_components_dir}/static-components.h\n    rm -f ${hwloc_static_components_file}\n\n    # Make $enable_plugins easier to use (it contains either \"yes\" (all) or a list of <name>)\n    HWLOC_PREPARE_FILTER_COMPONENTS([$enable_plugins])\n    # Now we have some hwloc_<name>_component_wantplugin=1\n\n    # See which core components want plugin and support it\n    HWLOC_FILTER_COMPONENTS\n    # Now we have some hwloc_<name>_component=plugin/static\n    # and hwloc_static/plugin_components\n    AC_MSG_CHECKING([components to build statically])\n    AC_MSG_RESULT($hwloc_static_components)\n    HWLOC_LIST_STATIC_COMPONENTS([$hwloc_static_components_file], [$hwloc_static_components])\n    AC_MSG_CHECKING([components to build as plugins])\n    AC_MSG_RESULT([$hwloc_plugin_components])\n\n    AS_IF([test \"$hwloc_pci_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_PCIACCESS_LIBS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_PCIACCESS_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_PCIACCESS_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_opencl_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_OPENCL_LIBS\"\n           HWLOC_LDFLAGS=\"$HWLOC_LDFLAGS $HWLOC_OPENCL_LDFLAGS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_OPENCL_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_OPENCL_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_cuda_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_CUDA_LIBS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_CUDA_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_CUDA_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_nvml_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_NVML_LIBS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_NVML_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_NVML_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_gl_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_GL_LIBS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_GL_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_GL_REQUIRES $HWLOC_REQUIRES\"])\n    AS_IF([test \"$hwloc_xml_libxml_component\" = \"static\"],\n          [HWLOC_LIBS=\"$HWLOC_LIBS $HWLOC_LIBXML2_LIBS\"\n           HWLOC_CFLAGS=\"$HWLOC_CFLAGS $HWLOC_LIBXML2_CFLAGS\"\n           HWLOC_REQUIRES=\"$HWLOC_LIBXML2_REQUIRES $HWLOC_REQUIRES\"])\n\n    #\n    # Setup HWLOC's C, CPP, and LD flags, and LIBS\n    #\n    AC_SUBST(HWLOC_REQUIRES)\n    AC_SUBST(HWLOC_CFLAGS)\n    HWLOC_CPPFLAGS='-I$(HWLOC_top_builddir)/include -I$(HWLOC_top_srcdir)/include'\n    AC_SUBST(HWLOC_CPPFLAGS)\n    AC_SUBST(HWLOC_LDFLAGS)\n    AC_SUBST(HWLOC_LIBS)\n    AC_SUBST(HWLOC_LIBS_PRIVATE)\n\n    # Set these values explicitly for embedded builds.  Exporting\n    # these values through *_EMBEDDED_* values gives us the freedom to\n    # do something different someday if we ever need to.  There's no\n    # need to fill these values in unless we're in embedded mode.\n    # Indeed, if we're building in embedded mode, we want HWLOC_LIBS\n    # to be empty so that nothing is linked into libhwloc_embedded.la\n    # itself -- only the upper-layer will link in anything required.\n\n    AS_IF([test \"$hwloc_mode\" = \"embedded\"],\n          [HWLOC_EMBEDDED_CFLAGS=$HWLOC_CFLAGS\n           HWLOC_EMBEDDED_CPPFLAGS=$HWLOC_CPPFLAGS\n           HWLOC_EMBEDDED_LDADD='$(HWLOC_top_builddir)/src/libhwloc_embedded.la'\n           HWLOC_EMBEDDED_LIBS=$HWLOC_LIBS\n           HWLOC_LIBS=])\n    AC_SUBST(HWLOC_EMBEDDED_CFLAGS)\n    AC_SUBST(HWLOC_EMBEDDED_CPPFLAGS)\n    AC_SUBST(HWLOC_EMBEDDED_LDADD)\n    AC_SUBST(HWLOC_EMBEDDED_LIBS)\n\n    # Always generate these files\n    AC_CONFIG_FILES(\n        hwloc_config_prefix[Makefile]\n        hwloc_config_prefix[include/Makefile]\n        hwloc_config_prefix[src/Makefile ]\n    )\n\n    # Cleanup\n    AC_LANG_POP\n\n    # Success\n    $2\n])dnl\n\n#-----------------------------------------------------------------------\n\n# Specify the symbol prefix\nAC_DEFUN([HWLOC_SET_SYMBOL_PREFIX],[\n    hwloc_symbol_prefix_value=$1\n])dnl\n\n#-----------------------------------------------------------------------\n\n# This must be a standalone routine so that it can be called both by\n# HWLOC_INIT and an external caller (if HWLOC_INIT is not invoked).\nAC_DEFUN([HWLOC_DO_AM_CONDITIONALS],[\n    AS_IF([test \"$hwloc_did_am_conditionals\" != \"yes\"],[\n        AM_CONDITIONAL([HWLOC_BUILD_STANDALONE], [test \"$hwloc_mode\" = \"standalone\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_GCC], [test \"x$GCC\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_MS_LIB], [test \"x$HWLOC_MS_LIB\" != \"x\"])\n        AM_CONDITIONAL([HWLOC_HAVE_OPENAT], [test \"x$hwloc_have_openat\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_LINUX_LIBNUMA],\n                       [test \"x$hwloc_have_linux_libnuma\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_SCHED_SETAFFINITY],\n                       [test \"x$hwloc_have_sched_setaffinity\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_PTHREAD],\n                       [test \"x$hwloc_have_pthread\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_LIBIBVERBS],\n                       [test \"x$hwloc_have_libibverbs\" = \"xyes\"])\n\tAM_CONDITIONAL([HWLOC_HAVE_CUDA],\n\t\t       [test \"x$hwloc_have_cuda\" = \"xyes\"])\n\tAM_CONDITIONAL([HWLOC_HAVE_GL],\n\t\t       [test \"x$hwloc_have_gl\" = \"xyes\"])\n\tAM_CONDITIONAL([HWLOC_HAVE_MYRIEXPRESS],\n\t\t       [test \"x$hwloc_have_myriexpress\" = \"xyes\"])\n\tAM_CONDITIONAL([HWLOC_HAVE_CUDART],\n\t\t       [test \"x$hwloc_have_cudart\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_LIBXML2], [test \"$hwloc_libxml2_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_CAIRO], [test \"$hwloc_cairo_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_PCI], [test \"$hwloc_pci_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_OPENCL], [test \"$hwloc_opencl_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_NVML], [test \"$hwloc_nvml_happy\" = \"yes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_SET_MEMPOLICY], [test \"x$enable_set_mempolicy\" != \"xno\"])\n        AM_CONDITIONAL([HWLOC_HAVE_MBIND], [test \"x$enable_mbind\" != \"xno\"])\n        AM_CONDITIONAL([HWLOC_HAVE_BUNZIPP], [test \"x$BUNZIPP\" != \"xfalse\"])\n        AM_CONDITIONAL([HWLOC_HAVE_USER32], [test \"x$hwloc_have_user32\" = \"xyes\"])\n\n        AM_CONDITIONAL([HWLOC_BUILD_DOXYGEN],\n                       [test \"x$hwloc_generate_doxs\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_BUILD_README],\n                       [test \"x$hwloc_generate_readme\" = \"xyes\" -a \\( \"x$hwloc_install_doxs\" = \"xyes\" -o \"x$hwloc_generate_doxs\" = \"xyes\" \\) ])\n        AM_CONDITIONAL([HWLOC_INSTALL_DOXYGEN],\n                       [test \"x$hwloc_install_doxs\" = \"xyes\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_LINUX], [test \"x$hwloc_linux\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_BGQ], [test \"x$hwloc_bgq\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_IRIX], [test \"x$hwloc_irix\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_DARWIN], [test \"x$hwloc_darwin\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_FREEBSD], [test \"x$hwloc_freebsd\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_NETBSD], [test \"x$hwloc_netbsd\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_SOLARIS], [test \"x$hwloc_solaris\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_AIX], [test \"x$hwloc_aix\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_OSF], [test \"x$hwloc_osf\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_HPUX], [test \"x$hwloc_hpux\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_WINDOWS], [test \"x$hwloc_windows\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_MINGW32], [test \"x$target_os\" = \"xmingw32\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_X86], [test \"x$hwloc_x86_32\" = \"xyes\" -o \"x$hwloc_x86_64\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_X86_32], [test \"x$hwloc_x86_32\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_X86_64], [test \"x$hwloc_x86_64\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_HAVE_X86_CPUID], [test \"x$hwloc_have_x86_cpuid\" = \"xyes\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_PLUGINS], [test \"x$hwloc_have_plugins\" = \"xyes\"])\n        AM_CONDITIONAL([HWLOC_PCI_BUILD_STATIC], [test \"x$hwloc_pci_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_OPENCL_BUILD_STATIC], [test \"x$hwloc_opencl_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_CUDA_BUILD_STATIC], [test \"x$hwloc_cuda_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_NVML_BUILD_STATIC], [test \"x$hwloc_nvml_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_GL_BUILD_STATIC], [test \"x$hwloc_gl_component\" = \"xstatic\"])\n        AM_CONDITIONAL([HWLOC_XML_LIBXML_BUILD_STATIC], [test \"x$hwloc_xml_libxml_component\" = \"xstatic\"])\n\n        AM_CONDITIONAL([HWLOC_HAVE_CXX], [test \"x$hwloc_have_cxx\" = \"xyes\"])\n    ])\n    hwloc_did_am_conditionals=yes\n])dnl\n\n#-----------------------------------------------------------------------\n\nAC_DEFUN([_HWLOC_CHECK_DIFF_U], [\n  AC_MSG_CHECKING([whether diff accepts -u])\n  if diff -u /dev/null /dev/null 2> /dev/null\n  then\n    HWLOC_DIFF_U=\"-u\"\n  else\n    HWLOC_DIFF_U=\"\"\n  fi\n  AC_SUBST([HWLOC_DIFF_U])\n  AC_MSG_RESULT([$HWLOC_DIFF_U])\n])\n\nAC_DEFUN([_HWLOC_CHECK_DIFF_W], [\n  AC_MSG_CHECKING([whether diff accepts -w])\n  if diff -w /dev/null /dev/null 2> /dev/null\n  then\n    HWLOC_DIFF_W=\"-w\"\n  else\n    HWLOC_DIFF_W=\"\"\n  fi\n  AC_SUBST([HWLOC_DIFF_W])\n  AC_MSG_RESULT([$HWLOC_DIFF_W])\n])\n\n#-----------------------------------------------------------------------\n\ndnl HWLOC_CHECK_DECL\ndnl\ndnl Check that the declaration of the given function has a complete prototype\ndnl with argument list by trying to call it with an insane dnl number of\ndnl arguments (10). Success means the compiler couldn't really check.\nAC_DEFUN([_HWLOC_CHECK_DECL], [\n  AC_CHECK_DECL([$1], [\n    AC_MSG_CHECKING([whether function $1 has a complete prototype])\n    AC_REQUIRE([AC_PROG_CC])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n         [AC_INCLUDES_DEFAULT([$4])],\n         [$1(1,2,3,4,5,6,7,8,9,10);]\n      )],\n      [AC_MSG_RESULT([no])\n       $3],\n      [AC_MSG_RESULT([yes])\n       $2]\n    )], [$3], $4\n  )\n])\n\n#-----------------------------------------------------------------------\n\ndnl HWLOC_CHECK_DECLS\ndnl\ndnl Same as HWLOCK_CHECK_DECL, but defines HAVE_DECL_foo to 1 or 0 depending on\ndnl the result.\nAC_DEFUN([_HWLOC_CHECK_DECLS], [\n  HWLOC_CHECK_DECL([$1], [ac_have_decl=1], [ac_have_decl=0], [$4])\n  AC_DEFINE_UNQUOTED(AS_TR_CPP([HAVE_DECL_$1]), [$ac_have_decl],\n    [Define to 1 if you have the declaration of `$1', and to 0 if you don't])\n])\n\n#-----------------------------------------------------------------------\n\ndnl HWLOC_CHECK_LTDL_DEPS\ndnl\ndnl Add ltdl dependencies to HWLOC_LIBS_PRIVATE\nAC_DEFUN([HWLOC_CHECK_LTDL_DEPS], [\n  # save variables that we'll modify below\n  save_lt_cv_dlopen=\"$lt_cv_dlopen\"\n  save_lt_cv_dlopen_libs=\"$lt_cv_dlopen_libs\"\n  save_lt_cv_dlopen_self=\"$lt_cv_dlopen_self\"\n  ###########################################################\n  # code stolen from LT_SYS_DLOPEN_SELF in libtool.m4\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=\"load_add_on\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=\"LoadLibrary\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=\"dlopen\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n  # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n                [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],[\n    lt_cv_dlopen=\"dyld\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n          [lt_cv_dlopen=\"shl_load\"],\n      [AC_CHECK_LIB([dld], [shl_load],\n            [lt_cv_dlopen=\"shl_load\" lt_cv_dlopen_libs=\"-ldld\"],\n        [AC_CHECK_FUNC([dlopen],\n              [lt_cv_dlopen=\"dlopen\"],\n          [AC_CHECK_LIB([dl], [dlopen],\n                [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],\n            [AC_CHECK_LIB([svld], [dlopen],\n                  [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-lsvld\"],\n              [AC_CHECK_LIB([dld], [dld_link],\n                    [lt_cv_dlopen=\"dld_link\" lt_cv_dlopen_libs=\"-ldld\"])\n              ])\n            ])\n          ])\n        ])\n      ])\n    ;;\n  esac\n  # end of code stolen from LT_SYS_DLOPEN_SELF in libtool.m4\n  ###########################################################\n\n  HWLOC_LIBS_PRIVATE=\"$HWLOC_LIBS_PRIVATE $lt_cv_dlopen_libs\"\n\n  # restore modified variable in case the actual libtool code uses them\n  lt_cv_dlopen=\"$save_lt_cv_dlopen\"\n  lt_cv_dlopen_libs=\"$save_lt_cv_dlopen_libs\"\n  lt_cv_dlopen_self=\"$save_lt_cv_dlopen_self\"\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/contrib/hwloc/config/ltmain.sh": "#! /bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.6\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-01-20.17; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2014-01-07.03; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook funcions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      eval $_G_hook '\"$@\"'\n\n      # store returned options list back into positional\n      # parameters for next 'cmd' execution.\n      eval _G_hook_result=\\$${_G_hook}_result\n      eval set dummy \"$_G_hook_result\"; shift\n    done\n\n    func_quote_for_eval ${1+\"$@\"}\n    func_run_hooks_result=$func_quote_for_eval_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, remove any\n# options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_options_prep_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=: ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         ;;\n#            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n#          esac\n#        done\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_silent_option_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_option_validation_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll alse need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    func_options_prep ${1+\"$@\"}\n    eval func_parse_options \\\n        ${func_options_prep_result+\"$func_options_prep_result\"}\n    eval func_validate_options \\\n        ${func_parse_options_result+\"$func_parse_options_result\"}\n\n    eval func_run_hooks func_options \\\n        ${func_validate_options_result+\"$func_validate_options_result\"}\n\n    # save modified positional parameters for caller\n    func_options_result=$func_run_hooks_result\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propogate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning.\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    func_run_hooks func_options_prep ${1+\"$@\"}\n\n    # save modified positional parameters for caller\n    func_options_prep_result=$func_run_hooks_result\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      func_run_hooks func_parse_options ${1+\"$@\"}\n\n      # Adjust func_parse_options positional parameters to match\n      eval set dummy \"$func_run_hooks_result\"; shift\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      test $# = 0 && func_missing_arg $_G_opt && break\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n      esac\n    done\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    func_parse_options_result=$func_quote_for_eval_result\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    func_run_hooks func_validate_options ${1+\"$@\"}\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    # save modified positional parameters for caller\n    func_validate_options_result=$func_run_hooks_result\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname (GNU libtool) 2.4.6\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/software/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    esac\n\n    # Pass back the list of options.\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_options_prep_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n\t# An option not handled by this hook function:\n        *)\t\tset dummy \"$_G_opt\" ${1+\"$@\"};\tshift; break  ;;\n      esac\n    done\n\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_parse_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -stdlib=*            select c++ std lib with clang\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_for_eval \"$arg\"\n\t  arg=$func_quote_for_eval_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/contrib/hwloc/src/components.c": "/*\n * Copyright \u00a9 2009-2017 Inria.  All rights reserved.\n * Copyright \u00a9 2012 Universit\u00e9 Bordeaux\n * See COPYING in top-level directory.\n */\n\n#include <private/autogen/config.h>\n#include <hwloc.h>\n#include <private/private.h>\n#include <private/xml.h>\n#include <private/misc.h>\n\n#define HWLOC_COMPONENT_STOP_NAME \"stop\"\n#define HWLOC_COMPONENT_EXCLUDE_CHAR '-'\n#define HWLOC_COMPONENT_SEPS \",\"\n\n/* list of all registered discovery components, sorted by priority, higher priority first.\n * noos is last because its priority is 0.\n * others' priority is 10.\n */\nstatic struct hwloc_disc_component * hwloc_disc_components = NULL;\n\nstatic unsigned hwloc_components_users = 0; /* first one initializes, last ones destroys */\n\nstatic int hwloc_components_verbose = 0;\n#ifdef HWLOC_HAVE_PLUGINS\nstatic int hwloc_plugins_verbose = 0;\nstatic const char * hwloc_plugins_blacklist = NULL;\n#endif\n\n/* hwloc_components_mutex serializes:\n * - loading/unloading plugins, and modifications of the hwloc_plugins list\n * - calls to ltdl, including in hwloc_check_plugin_namespace()\n * - registration of components with hwloc_disc_component_register()\n *   and hwloc_xml_callbacks_register()\n */\n#ifdef HWLOC_WIN_SYS\n/* Basic mutex on top of InterlockedCompareExchange() on windows,\n * Far from perfect, but easy to maintain, and way enough given that this code will never be needed for real. */\n#include <windows.h>\nstatic LONG hwloc_components_mutex = 0;\n#define HWLOC_COMPONENTS_LOCK() do {\t\t\t\t\t\t\\\n  while (InterlockedCompareExchange(&hwloc_components_mutex, 1, 0) != 0)\t\\\n    SwitchToThread();\t\t\t\t\t\t\t\t\\\n} while (0)\n#define HWLOC_COMPONENTS_UNLOCK() do {\t\t\t\t\t\t\\\n  assert(hwloc_components_mutex == 1);\t\t\t\t\t\t\\\n  hwloc_components_mutex = 0;\t\t\t\t\t\t\t\\\n} while (0)\n\n#elif defined HWLOC_HAVE_PTHREAD_MUTEX\n/* pthread mutex if available (except on windows) */\n#include <pthread.h>\nstatic pthread_mutex_t hwloc_components_mutex = PTHREAD_MUTEX_INITIALIZER;\n#define HWLOC_COMPONENTS_LOCK() pthread_mutex_lock(&hwloc_components_mutex)\n#define HWLOC_COMPONENTS_UNLOCK() pthread_mutex_unlock(&hwloc_components_mutex)\n\n#else /* HWLOC_WIN_SYS || HWLOC_HAVE_PTHREAD_MUTEX */\n#error No mutex implementation available\n#endif\n\n\n#ifdef HWLOC_HAVE_PLUGINS\n\n#include <ltdl.h>\n\n/* array of pointers to dynamically loaded plugins */\nstatic struct hwloc__plugin_desc {\n  char *name;\n  struct hwloc_component *component;\n  char *filename;\n  lt_dlhandle handle;\n  struct hwloc__plugin_desc *next;\n} *hwloc_plugins = NULL;\n\nstatic int\nhwloc__dlforeach_cb(const char *filename, void *_data __hwloc_attribute_unused)\n{\n  const char *basename;\n  lt_dlhandle handle;\n  char *componentsymbolname = NULL;\n  struct hwloc_component *component;\n  struct hwloc__plugin_desc *desc, **prevdesc;\n\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Plugin dlforeach found `%s'\\n\", filename);\n\n  basename = strrchr(filename, '/');\n  if (!basename)\n    basename = filename;\n  else\n    basename++;\n\n  if (hwloc_plugins_blacklist && strstr(hwloc_plugins_blacklist, basename)) {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Plugin `%s' is blacklisted in the environment\\n\", basename);\n    goto out;\n  }\n\n  /* dlopen and get the component structure */\n  handle = lt_dlopenext(filename);\n  if (!handle) {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Failed to load plugin: %s\\n\", lt_dlerror());\n    goto out;\n  }\n  componentsymbolname = malloc(strlen(basename)+10+1);\n  sprintf(componentsymbolname, \"%s_component\", basename);\n  component = lt_dlsym(handle, componentsymbolname);\n  if (!component) {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Failed to find component symbol `%s'\\n\",\n\t      componentsymbolname);\n    goto out_with_handle;\n  }\n  if (component->abi != HWLOC_COMPONENT_ABI) {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Plugin symbol ABI %u instead of %d\\n\",\n\t      component->abi, HWLOC_COMPONENT_ABI);\n    goto out_with_handle;\n  }\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Plugin contains expected symbol `%s'\\n\",\n\t    componentsymbolname);\n  free(componentsymbolname);\n  componentsymbolname = NULL;\n\n  if (HWLOC_COMPONENT_TYPE_DISC == component->type) {\n    if (strncmp(basename, \"hwloc_\", 6)) {\n      if (hwloc_plugins_verbose)\n\tfprintf(stderr, \"Plugin name `%s' doesn't match its type DISCOVERY\\n\", basename);\n      goto out_with_handle;\n    }\n  } else if (HWLOC_COMPONENT_TYPE_XML == component->type) {\n    if (strncmp(basename, \"hwloc_xml_\", 10)) {\n      if (hwloc_plugins_verbose)\n\tfprintf(stderr, \"Plugin name `%s' doesn't match its type XML\\n\", basename);\n      goto out_with_handle;\n    }\n  } else {\n    if (hwloc_plugins_verbose)\n      fprintf(stderr, \"Plugin name `%s' has invalid type %u\\n\",\n\t      basename, (unsigned) component->type);\n    goto out_with_handle;\n  }\n\n  /* allocate a plugin_desc and queue it */\n  desc = malloc(sizeof(*desc));\n  if (!desc)\n    goto out_with_handle;\n  desc->name = strdup(basename);\n  desc->filename = strdup(filename);\n  desc->component = component;\n  desc->handle = handle;\n  desc->next = NULL;\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Plugin descriptor `%s' ready\\n\", basename);\n\n  /* append to the list */\n  prevdesc = &hwloc_plugins;\n  while (*prevdesc)\n    prevdesc = &((*prevdesc)->next);\n  *prevdesc = desc;\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Plugin descriptor `%s' queued\\n\", basename);\n  return 0;\n\n out_with_handle:\n  lt_dlclose(handle);\n  free(componentsymbolname); /* NULL if already freed */\n out:\n  return 0;\n}\n\nstatic void\nhwloc_plugins_exit(void)\n{\n  struct hwloc__plugin_desc *desc, *next;\n\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Closing all plugins\\n\");\n\n  desc = hwloc_plugins;\n  while (desc) {\n    next = desc->next;\n    lt_dlclose(desc->handle);\n    free(desc->name);\n    free(desc->filename);\n    free(desc);\n    desc = next;\n  }\n  hwloc_plugins = NULL;\n\n  lt_dlexit();\n}\n\nstatic int\nhwloc_plugins_init(void)\n{\n  const char *verboseenv;\n  char *path = HWLOC_PLUGINS_PATH;\n  const char *env;\n  int err;\n\n  verboseenv = getenv(\"HWLOC_PLUGINS_VERBOSE\");\n  hwloc_plugins_verbose = verboseenv ? atoi(verboseenv) : 0;\n\n  hwloc_plugins_blacklist = getenv(\"HWLOC_PLUGINS_BLACKLIST\");\n\n  err = lt_dlinit();\n  if (err)\n    goto out;\n\n  env = getenv(\"HWLOC_PLUGINS_PATH\");\n  if (env)\n    path = env;\n\n  hwloc_plugins = NULL;\n\n  if (hwloc_plugins_verbose)\n    fprintf(stderr, \"Starting plugin dlforeach in %s\\n\", path);\n  err = lt_dlforeachfile(path, hwloc__dlforeach_cb, NULL);\n  if (err)\n    goto out_with_init;\n\n  return 0;\n\n out_with_init:\n  hwloc_plugins_exit();\n out:\n  return -1;\n}\n\n#endif /* HWLOC_HAVE_PLUGINS */\n\nstatic const char *\nhwloc_disc_component_type_string(hwloc_disc_component_type_t type)\n{\n  switch (type) {\n  case HWLOC_DISC_COMPONENT_TYPE_CPU: return \"cpu\";\n  case HWLOC_DISC_COMPONENT_TYPE_GLOBAL: return \"global\";\n  case HWLOC_DISC_COMPONENT_TYPE_MISC: return \"misc\";\n  default: return \"**unknown**\";\n  }\n}\n\nstatic int\nhwloc_disc_component_register(struct hwloc_disc_component *component,\n\t\t\t      const char *filename)\n{\n  struct hwloc_disc_component **prev;\n\n  /* check that the component name is valid */\n  if (!strcmp(component->name, HWLOC_COMPONENT_STOP_NAME)) {\n    if (hwloc_components_verbose)\n      fprintf(stderr, \"Cannot register discovery component with reserved name `\" HWLOC_COMPONENT_STOP_NAME \"'\\n\");\n    return -1;\n  }\n  if (strchr(component->name, HWLOC_COMPONENT_EXCLUDE_CHAR)\n      || strcspn(component->name, HWLOC_COMPONENT_SEPS) != strlen(component->name)) {\n    if (hwloc_components_verbose)\n      fprintf(stderr, \"Cannot register discovery component with name `%s' containing reserved characters `%c\" HWLOC_COMPONENT_SEPS \"'\\n\",\n\t      component->name, HWLOC_COMPONENT_EXCLUDE_CHAR);\n    return -1;\n  }\n  /* check that the component type is valid */\n  switch ((unsigned) component->type) {\n  case HWLOC_DISC_COMPONENT_TYPE_CPU:\n  case HWLOC_DISC_COMPONENT_TYPE_GLOBAL:\n  case HWLOC_DISC_COMPONENT_TYPE_MISC:\n    break;\n  default:\n    fprintf(stderr, \"Cannot register discovery component `%s' with unknown type %u\\n\",\n\t    component->name, (unsigned) component->type);\n    return -1;\n  }\n\n  prev = &hwloc_disc_components;\n  while (NULL != *prev) {\n    if (!strcmp((*prev)->name, component->name)) {\n      /* if two components have the same name, only keep the highest priority one */\n      if ((*prev)->priority < component->priority) {\n\t/* drop the existing component */\n\tif (hwloc_components_verbose)\n\t  fprintf(stderr, \"Dropping previously registered discovery component `%s', priority %u lower than new one %u\\n\",\n\t\t  (*prev)->name, (*prev)->priority, component->priority);\n\t*prev = (*prev)->next;\n      } else {\n\t/* drop the new one */\n\tif (hwloc_components_verbose)\n\t  fprintf(stderr, \"Ignoring new discovery component `%s', priority %u lower than previously registered one %u\\n\",\n\t\t  component->name, component->priority, (*prev)->priority);\n\treturn -1;\n      }\n    }\n    prev = &((*prev)->next);\n  }\n  if (hwloc_components_verbose)\n    fprintf(stderr, \"Registered %s discovery component `%s' with priority %u (%s%s)\\n\",\n\t    hwloc_disc_component_type_string(component->type), component->name, component->priority,\n\t    filename ? \"from plugin \" : \"statically build\", filename ? filename : \"\");\n\n  prev = &hwloc_disc_components;\n  while (NULL != *prev) {\n    if ((*prev)->priority < component->priority)\n      break;\n    prev = &((*prev)->next);\n  }\n  component->next = *prev;\n  *prev = component;\n  return 0;\n}\n\n#include <static-components.h>\n\nstatic void (**hwloc_component_finalize_cbs)(unsigned long);\nstatic unsigned hwloc_component_finalize_cb_count;\n\nvoid\nhwloc_components_init(struct hwloc_topology *topology __hwloc_attribute_unused)\n{\n#ifdef HWLOC_HAVE_PLUGINS\n  struct hwloc__plugin_desc *desc;\n#endif\n  const char *verboseenv;\n  unsigned i;\n\n  HWLOC_COMPONENTS_LOCK();\n  assert((unsigned) -1 != hwloc_components_users);\n  if (0 != hwloc_components_users++) {\n    HWLOC_COMPONENTS_UNLOCK();\n    goto ok;\n  }\n\n  verboseenv = getenv(\"HWLOC_COMPONENTS_VERBOSE\");\n  hwloc_components_verbose = verboseenv ? atoi(verboseenv) : 0;\n\n#ifdef HWLOC_HAVE_PLUGINS\n  hwloc_plugins_init();\n#endif\n\n  hwloc_component_finalize_cbs = NULL;\n  hwloc_component_finalize_cb_count = 0;\n  /* count the max number of finalize callbacks */\n  for(i=0; NULL != hwloc_static_components[i]; i++)\n    hwloc_component_finalize_cb_count++;\n#ifdef HWLOC_HAVE_PLUGINS\n  for(desc = hwloc_plugins; NULL != desc; desc = desc->next)\n    hwloc_component_finalize_cb_count++;\n#endif\n  if (hwloc_component_finalize_cb_count) {\n    hwloc_component_finalize_cbs = calloc(hwloc_component_finalize_cb_count,\n\t\t\t\t\t  sizeof(*hwloc_component_finalize_cbs));\n    assert(hwloc_component_finalize_cbs);\n    /* forget that max number and recompute the real one below */\n    hwloc_component_finalize_cb_count = 0;\n  }\n\n  /* hwloc_static_components is created by configure in static-components.h */\n  for(i=0; NULL != hwloc_static_components[i]; i++) {\n    if (hwloc_static_components[i]->flags) {\n      fprintf(stderr, \"Ignoring static component with invalid flags %lx\\n\",\n\t      hwloc_static_components[i]->flags);\n      continue;\n    }\n\n    /* initialize the component */\n    if (hwloc_static_components[i]->init && hwloc_static_components[i]->init(0) < 0) {\n      if (hwloc_components_verbose)\n\tfprintf(stderr, \"Ignoring static component, failed to initialize\\n\");\n      continue;\n    }\n    /* queue ->finalize() callback if any */\n    if (hwloc_static_components[i]->finalize)\n      hwloc_component_finalize_cbs[hwloc_component_finalize_cb_count++] = hwloc_static_components[i]->finalize;\n\n    /* register for real now */\n    if (HWLOC_COMPONENT_TYPE_DISC == hwloc_static_components[i]->type)\n      hwloc_disc_component_register(hwloc_static_components[i]->data, NULL);\n    else if (HWLOC_COMPONENT_TYPE_XML == hwloc_static_components[i]->type)\n      hwloc_xml_callbacks_register(hwloc_static_components[i]->data);\n    else\n      assert(0);\n  }\n\n  /* dynamic plugins */\n#ifdef HWLOC_HAVE_PLUGINS\n  for(desc = hwloc_plugins; NULL != desc; desc = desc->next) {\n    if (desc->component->flags) {\n      fprintf(stderr, \"Ignoring plugin `%s' component with invalid flags %lx\\n\",\n\t      desc->name, desc->component->flags);\n      continue;\n    }\n\n    /* initialize the component */\n    if (desc->component->init && desc->component->init(0) < 0) {\n      if (hwloc_components_verbose)\n\tfprintf(stderr, \"Ignoring plugin `%s', failed to initialize\\n\", desc->name);\n      continue;\n    }\n    /* queue ->finalize() callback if any */\n    if (desc->component->finalize)\n      hwloc_component_finalize_cbs[hwloc_component_finalize_cb_count++] = desc->component->finalize;\n\n    /* register for real now */\n    if (HWLOC_COMPONENT_TYPE_DISC == desc->component->type)\n      hwloc_disc_component_register(desc->component->data, desc->filename);\n    else if (HWLOC_COMPONENT_TYPE_XML == desc->component->type)\n      hwloc_xml_callbacks_register(desc->component->data);\n    else\n      assert(0);\n  }\n#endif\n\n  HWLOC_COMPONENTS_UNLOCK();\n\n ok:\n  topology->backends = NULL;\n}\n\nstatic struct hwloc_disc_component *\nhwloc_disc_component_find(int type /* hwloc_disc_component_type_t or -1 if any */,\n\t\t\t       const char *name /* name of NULL if any */)\n{\n  struct hwloc_disc_component *comp = hwloc_disc_components;\n  while (NULL != comp) {\n    if ((-1 == type || type == (int) comp->type)\n       && (NULL == name || !strcmp(name, comp->name)))\n      return comp;\n    comp = comp->next;\n  }\n  return NULL;\n}\n\n/* used by set_xml(), set_synthetic(), ... environment variables, ... to force the first backend */\nint\nhwloc_disc_component_force_enable(struct hwloc_topology *topology,\n\t\t\t\t  int envvar_forced,\n\t\t\t\t  int type, const char *name,\n\t\t\t\t  const void *data1, const void *data2, const void *data3)\n{\n  struct hwloc_disc_component *comp;\n  struct hwloc_backend *backend;\n\n  if (topology->is_loaded) {\n    errno = EBUSY;\n    return -1;\n  }\n\n  comp = hwloc_disc_component_find(type, name);\n  if (!comp) {\n    errno = ENOSYS;\n    return -1;\n  }\n\n  backend = comp->instantiate(comp, data1, data2, data3);\n  if (backend) {\n    backend->envvar_forced = envvar_forced;\n    if (topology->backends)\n      hwloc_backends_disable_all(topology);\n    return hwloc_backend_enable(topology, backend);\n  } else\n    return -1;\n}\n\nstatic int\nhwloc_disc_component_try_enable(struct hwloc_topology *topology,\n\t\t\t\tstruct hwloc_disc_component *comp,\n\t\t\t\tconst char *comparg,\n\t\t\t\tunsigned *excludes,\n\t\t\t\tint envvar_forced)\n{\n  struct hwloc_backend *backend;\n  int err;\n\n  if ((*excludes) & comp->type) {\n    if (hwloc_components_verbose)\n      /* do not warn if envvar_forced since system-wide HWLOC_COMPONENTS must be silently ignored after set_xml() etc.\n       */\n      fprintf(stderr, \"Excluding %s discovery component `%s', conflicts with excludes 0x%x\\n\",\n\t      hwloc_disc_component_type_string(comp->type), comp->name, *excludes);\n    return -1;\n  }\n\n  backend = comp->instantiate(comp, comparg, NULL, NULL);\n  if (!backend) {\n    if (hwloc_components_verbose || envvar_forced)\n      fprintf(stderr, \"Failed to instantiate discovery component `%s'\\n\", comp->name);\n    return -1;\n  }\n\n  backend->envvar_forced = envvar_forced;\n  err = hwloc_backend_enable(topology, backend);\n  if (err < 0)\n    return -1;\n\n  *excludes |= comp->excludes;\n\n  return 0;\n}\n\nvoid\nhwloc_disc_components_enable_others(struct hwloc_topology *topology)\n{\n  struct hwloc_disc_component *comp;\n  struct hwloc_backend *backend;\n  unsigned excludes = 0;\n  int tryall = 1;\n  const char *_env;\n  char *env; /* we'll to modify the env value, so duplicate it */\n\n  _env = getenv(\"HWLOC_COMPONENTS\");\n  env = _env ? strdup(_env) : NULL;\n\n  /* compute current excludes */\n  backend = topology->backends;\n  while (backend) {\n    excludes |= backend->component->excludes;\n    backend = backend->next;\n  }\n\n  /* enable explicitly listed components */\n  if (env) {\n    char *curenv = env;\n    size_t s;\n\n    while (*curenv) {\n      s = strcspn(curenv, HWLOC_COMPONENT_SEPS);\n      if (s) {\n\tchar *arg;\n\tchar c, d;\n\n\t/* replace libpci with pci for backward compatibility with v1.6 */\n\tif (!strncmp(curenv, \"libpci\", 6) && s == 6) {\n\t  curenv[0] = curenv[1] = curenv[2] = *HWLOC_COMPONENT_SEPS;\n\t  curenv += 3;\n\t  s -= 3;\n\t} else if (curenv[0] == HWLOC_COMPONENT_EXCLUDE_CHAR && !strncmp(curenv+1, \"libpci\", 6) && s == 7 ) {\n\t  curenv[3] = curenv[0];\n\t  curenv[0] = curenv[1] = curenv[2] = *HWLOC_COMPONENT_SEPS;\n\t  curenv += 3;\n\t  s -= 3;\n\t  /* skip this name, it's a negated one */\n\t  goto nextname;\n\t}\n\n\tif (curenv[0] == HWLOC_COMPONENT_EXCLUDE_CHAR)\n\t  goto nextname;\n\n\tif (!strncmp(curenv, HWLOC_COMPONENT_STOP_NAME, s)) {\n\t  tryall = 0;\n\t  break;\n\t}\n\n\t/* save the last char and replace with \\0 */\n\tc = curenv[s];\n\tcurenv[s] = '\\0';\n\n\targ = strchr(curenv, '=');\n\tif (arg) {\n\t  d = *arg;\n\t  *arg = '\\0';\n\t}\n\n\tcomp = hwloc_disc_component_find(-1, curenv);\n\tif (comp) {\n\t  hwloc_disc_component_try_enable(topology, comp, arg ? arg+1 : NULL, &excludes, 1 /* envvar forced */);\n\t} else {\n\t  fprintf(stderr, \"Cannot find discovery component `%s'\\n\", curenv);\n\t}\n\n\t/* restore chars (the second loop below needs env to be unmodified) */\n\tcurenv[s] = c;\n\tif (arg)\n\t  *arg = d;\n      }\n\nnextname:\n      curenv += s;\n      if (*curenv)\n\t/* Skip comma */\n\tcurenv++;\n    }\n  }\n\n  /* env is still the same, the above loop didn't modify it */\n\n  /* now enable remaining components (except the explicitly '-'-listed ones) */\n  if (tryall) {\n    comp = hwloc_disc_components;\n    while (NULL != comp) {\n      /* check if this component was explicitly excluded in env */\n      if (env) {\n\tchar *curenv = env;\n\twhile (*curenv) {\n\t  size_t s = strcspn(curenv, HWLOC_COMPONENT_SEPS);\n\t  if (curenv[0] == HWLOC_COMPONENT_EXCLUDE_CHAR && !strncmp(curenv+1, comp->name, s-1) && strlen(comp->name) == s-1) {\n\t    if (hwloc_components_verbose)\n\t      fprintf(stderr, \"Excluding %s discovery component `%s' because of HWLOC_COMPONENTS environment variable\\n\",\n\t    hwloc_disc_component_type_string(comp->type), comp->name);\n\t    goto nextcomp;\n\t  }\n\t  curenv += s;\n\t  if (*curenv)\n\t    /* Skip comma */\n\t    curenv++;\n\t}\n      }\n      hwloc_disc_component_try_enable(topology, comp, NULL, &excludes, 0 /* defaults, not envvar forced */);\nnextcomp:\n      comp = comp->next;\n    }\n  }\n\n  if (hwloc_components_verbose) {\n    /* print a summary */\n    int first = 1;\n    backend = topology->backends;\n    fprintf(stderr, \"Final list of enabled discovery components: \");\n    while (backend != NULL) {\n      fprintf(stderr, \"%s%s\", first ? \"\" : \",\", backend->component->name);\n      backend = backend->next;\n      first = 0;\n    }\n    fprintf(stderr, \"\\n\");\n  }\n\n  if (env)\n    free(env);\n}\n\nvoid\nhwloc_components_destroy_all(struct hwloc_topology *topology __hwloc_attribute_unused)\n{\n  unsigned i;\n\n  HWLOC_COMPONENTS_LOCK();\n  assert(0 != hwloc_components_users);\n  if (0 != --hwloc_components_users) {\n    HWLOC_COMPONENTS_UNLOCK();\n    return;\n  }\n\n  for(i=0; i<hwloc_component_finalize_cb_count; i++)\n    hwloc_component_finalize_cbs[hwloc_component_finalize_cb_count-i-1](0);\n  free(hwloc_component_finalize_cbs);\n  hwloc_component_finalize_cbs = NULL;\n  hwloc_component_finalize_cb_count = 0;\n\n  /* no need to unlink/free the list of components, they'll be unloaded below */\n\n  hwloc_disc_components = NULL;\n  hwloc_xml_callbacks_reset();\n\n#ifdef HWLOC_HAVE_PLUGINS\n  hwloc_plugins_exit();\n#endif\n\n  HWLOC_COMPONENTS_UNLOCK();\n}\n\nstruct hwloc_backend *\nhwloc_backend_alloc(struct hwloc_disc_component *component)\n{\n  struct hwloc_backend * backend = malloc(sizeof(*backend));\n  if (!backend) {\n    errno = ENOMEM;\n    return NULL;\n  }\n  backend->component = component;\n  backend->flags = 0;\n  backend->discover = NULL;\n  backend->get_obj_cpuset = NULL;\n  backend->notify_new_object = NULL;\n  backend->disable = NULL;\n  backend->is_custom = 0;\n  backend->is_thissystem = -1;\n  backend->next = NULL;\n  backend->envvar_forced = 0;\n  return backend;\n}\n\nstatic void\nhwloc_backend_disable(struct hwloc_backend *backend)\n{\n  if (backend->disable)\n    backend->disable(backend);\n  free(backend);\n}\n\nint\nhwloc_backend_enable(struct hwloc_topology *topology, struct hwloc_backend *backend)\n{\n  struct hwloc_backend **pprev;\n\n  /* check backend flags */\n  if (backend->flags & (~(HWLOC_BACKEND_FLAG_NEED_LEVELS))) {\n    fprintf(stderr, \"Cannot enable %s discovery component `%s' with unknown flags %lx\\n\",\n\t    hwloc_disc_component_type_string(backend->component->type), backend->component->name, backend->flags);\n    return -1;\n  }\n\n  /* make sure we didn't already enable this backend, we don't want duplicates */\n  pprev = &topology->backends;\n  while (NULL != *pprev) {\n    if ((*pprev)->component == backend->component) {\n      if (hwloc_components_verbose)\n\tfprintf(stderr, \"Cannot enable %s discovery component `%s' twice\\n\",\n\t\thwloc_disc_component_type_string(backend->component->type), backend->component->name);\n      hwloc_backend_disable(backend);\n      errno = EBUSY;\n      return -1;\n    }\n    pprev = &((*pprev)->next);\n  }\n\n  if (hwloc_components_verbose)\n    fprintf(stderr, \"Enabling %s discovery component `%s'\\n\",\n\t    hwloc_disc_component_type_string(backend->component->type), backend->component->name);\n\n  /* enqueue at the end */\n  pprev = &topology->backends;\n  while (NULL != *pprev)\n    pprev = &((*pprev)->next);\n  backend->next = *pprev;\n  *pprev = backend;\n\n  backend->topology = topology;\n\n  return 0;\n}\n\nvoid\nhwloc_backends_is_thissystem(struct hwloc_topology *topology)\n{\n  struct hwloc_backend *backend;\n  const char *local_env;\n\n  /* Apply is_thissystem topology flag before we enforce envvar backends.\n   * If the application changed the backend with set_foo(),\n   * it may use set_flags() update the is_thissystem flag here.\n   * If it changes the backend with environment variables below,\n   * it may use HWLOC_THISSYSTEM envvar below as well.\n   */\n\n  topology->is_thissystem = 1;\n\n  /* apply thissystem from normally-given backends (envvar_forced=0, either set_foo() or defaults) */\n  backend = topology->backends;\n  while (backend != NULL) {\n    if (backend->envvar_forced == 0 && backend->is_thissystem != -1) {\n      assert(backend->is_thissystem == 0);\n      topology->is_thissystem = 0;\n    }\n    backend = backend->next;\n  }\n\n  /* override set_foo() with flags */\n  if (topology->flags & HWLOC_TOPOLOGY_FLAG_IS_THISSYSTEM)\n    topology->is_thissystem = 1;\n\n  /* now apply envvar-forced backend (envvar_forced=1) */\n  backend = topology->backends;\n  while (backend != NULL) {\n    if (backend->envvar_forced == 1 && backend->is_thissystem != -1) {\n      assert(backend->is_thissystem == 0);\n      topology->is_thissystem = 0;\n    }\n    backend = backend->next;\n  }\n\n  /* override with envvar-given flag */\n  local_env = getenv(\"HWLOC_THISSYSTEM\");\n  if (local_env)\n    topology->is_thissystem = atoi(local_env);\n}\n\nint\nhwloc_backends_get_obj_cpuset(struct hwloc_backend *caller, struct hwloc_obj *obj, hwloc_bitmap_t cpuset)\n{\n  struct hwloc_topology *topology = caller->topology;\n  struct hwloc_backend *backend = topology->backends;\n  /* use the first backend's get_obj_cpuset callback */\n  while (backend != NULL) {\n    if (backend->get_obj_cpuset)\n      return backend->get_obj_cpuset(backend, caller, obj, cpuset);\n    backend = backend->next;\n  }\n  return -1;\n}\n\nint\nhwloc_backends_notify_new_object(struct hwloc_backend *caller, struct hwloc_obj *obj)\n{\n  struct hwloc_backend *backend;\n  int res = 0;\n\n  backend = caller->topology->backends;\n  while (NULL != backend) {\n    if (backend != caller && backend->notify_new_object)\n      res += backend->notify_new_object(backend, caller, obj);\n    backend = backend->next;\n  }\n\n  return res;\n}\n\nvoid\nhwloc_backends_disable_all(struct hwloc_topology *topology)\n{\n  struct hwloc_backend *backend;\n\n  while (NULL != (backend = topology->backends)) {\n    struct hwloc_backend *next = backend->next;\n    if (hwloc_components_verbose)\n      fprintf(stderr, \"Disabling %s discovery component `%s'\\n\",\n\t      hwloc_disc_component_type_string(backend->component->type), backend->component->name);\n    hwloc_backend_disable(backend);\n    topology->backends = next;\n  }\n  topology->backends = NULL;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/contrib/hwloc/include/hwloc/plugins.h": "/*\n * Copyright \u00a9 2013-2015 Inria.  All rights reserved.\n * See COPYING in top-level directory.\n */\n\n#ifndef HWLOC_PLUGINS_H\n#define HWLOC_PLUGINS_H\n\n/** \\file\n * \\brief Public interface for building hwloc plugins.\n */\n\nstruct hwloc_backend;\n\n#include <hwloc.h>\n#ifdef HWLOC_INSIDE_PLUGIN\n/* needed for hwloc_plugin_check_namespace() */\n#include <ltdl.h>\n#endif\n\n\n\n/** \\defgroup hwlocality_disc_components Components and Plugins: Discovery components\n * @{\n */\n\n/** \\brief Discovery component type */\ntypedef enum hwloc_disc_component_type_e {\n  /** \\brief CPU-only discovery through the OS, or generic no-OS support.\n   * \\hideinitializer */\n  HWLOC_DISC_COMPONENT_TYPE_CPU = (1<<0),\n\n  /** \\brief xml, synthetic or custom,\n   * platform-specific components such as bgq.\n   * Anything the discovers CPU and everything else.\n   * No misc backend is expected to complement a global component.\n   * \\hideinitializer */\n  HWLOC_DISC_COMPONENT_TYPE_GLOBAL = (1<<1),\n\n  /** \\brief OpenCL, Cuda, etc.\n   * \\hideinitializer */\n  HWLOC_DISC_COMPONENT_TYPE_MISC = (1<<2)\n} hwloc_disc_component_type_t;\n\n/** \\brief Discovery component structure\n *\n * This is the major kind of components, taking care of the discovery.\n * They are registered by generic components, either statically-built or as plugins.\n */\nstruct hwloc_disc_component {\n  /** \\brief Discovery component type */\n  hwloc_disc_component_type_t type;\n\n  /** \\brief Name.\n   * If this component is built as a plugin, this name does not have to match the plugin filename.\n   */\n  const char *name;\n\n  /** \\brief Component types to exclude, as an OR'ed set of ::hwloc_disc_component_type_e.\n   *\n   * For a GLOBAL component, this usually includes all other types (~0).\n   *\n   * Other components only exclude types that may bring conflicting\n   * topology information. MISC components should likely not be excluded\n   * since they usually bring non-primary additional information.\n   */\n  unsigned excludes;\n\n  /** \\brief Instantiate callback to create a backend from the component.\n   * Parameters data1, data2, data3 are NULL except for components\n   * that have special enabling routines such as hwloc_topology_set_xml(). */\n  struct hwloc_backend * (*instantiate)(struct hwloc_disc_component *component, const void *data1, const void *data2, const void *data3);\n\n  /** \\brief Component priority.\n   * Used to sort topology->components, higher priority first.\n   * Also used to decide between two components with the same name.\n   *\n   * Usual values are\n   * 50 for native OS (or platform) components,\n   * 45 for x86,\n   * 40 for no-OS fallback,\n   * 30 for global components (xml/synthetic/custom),\n   * 20 for pci,\n   * 10 for other misc components (opencl etc.).\n   */\n  unsigned priority;\n\n  /** \\private Used internally to list components by priority on topology->components\n   * (the component structure is usually read-only,\n   *  the core copies it before using this field for queueing)\n   */\n  struct hwloc_disc_component * next;\n};\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_disc_backends Components and Plugins: Discovery backends\n * @{\n */\n\n/** \\brief Discovery backend structure\n *\n * A backend is the instantiation of a discovery component.\n * When a component gets enabled for a topology,\n * its instantiate() callback creates a backend.\n *\n * hwloc_backend_alloc() initializes all fields to default values\n * that the component may change (except \"component\" and \"next\")\n * before enabling the backend with hwloc_backend_enable().\n */\nstruct hwloc_backend {\n  /** \\private Reserved for the core, set by hwloc_backend_alloc() */\n  struct hwloc_disc_component * component;\n  /** \\private Reserved for the core, set by hwloc_backend_enable() */\n  struct hwloc_topology * topology;\n  /** \\private Reserved for the core. Set to 1 if forced through envvar, 0 otherwise. */\n  int envvar_forced;\n  /** \\private Reserved for the core. Used internally to list backends topology->backends. */\n  struct hwloc_backend * next;\n\n  /** \\brief Backend flags, as an OR'ed set of ::hwloc_backend_flag_e */\n  unsigned long flags;\n\n  /** \\brief Backend-specific 'is_custom' property.\n   * Shortcut on !strcmp(..->component->name, \"custom\").\n   * Only the custom component should touch this. */\n  int is_custom;\n\n  /** \\brief Backend-specific 'is_thissystem' property.\n   * Set to 0 or 1 if the backend should enforce the thissystem flag when it gets enabled.\n   * Set to -1 if the backend doesn't care (default). */\n  int is_thissystem;\n\n  /** \\brief Backend private data, or NULL if none. */\n  void * private_data;\n  /** \\brief Callback for freeing the private_data.\n   * May be NULL.\n   */\n  void (*disable)(struct hwloc_backend *backend);\n\n  /** \\brief Main discovery callback.\n   * returns > 0 if it modified the topology tree, -1 on error, 0 otherwise.\n   * May be NULL if type is ::HWLOC_DISC_COMPONENT_TYPE_MISC. */\n  int (*discover)(struct hwloc_backend *backend);\n\n  /** \\brief Callback used by the PCI backend to retrieve the locality of a PCI object from the OS/cpu backend.\n   * May be NULL. */\n  int (*get_obj_cpuset)(struct hwloc_backend *backend, struct hwloc_backend *caller, struct hwloc_obj *obj, hwloc_bitmap_t cpuset);\n\n  /** \\brief Callback called by backends to notify this backend that a new object was added.\n   * returns > 0 if it modified the topology tree, 0 otherwise.\n   * May be NULL. */\n  int (*notify_new_object)(struct hwloc_backend *backend, struct hwloc_backend *caller, struct hwloc_obj *obj);\n};\n\n/** \\brief Backend flags */\nenum hwloc_backend_flag_e {\n  /** \\brief Levels should be reconnected before this backend discover() is used.\n   * \\hideinitializer */\n  HWLOC_BACKEND_FLAG_NEED_LEVELS = (1UL<<0)\n};\n\n/** \\brief Allocate a backend structure, set good default values, initialize backend->component and topology, etc.\n * The caller will then modify whatever needed, and call hwloc_backend_enable().\n */\nHWLOC_DECLSPEC struct hwloc_backend * hwloc_backend_alloc(struct hwloc_disc_component *component);\n\n/** \\brief Enable a previously allocated and setup backend. */\nHWLOC_DECLSPEC int hwloc_backend_enable(struct hwloc_topology *topology, struct hwloc_backend *backend);\n\n/** \\brief Used by backends discovery callbacks to request locality information from others.\n *\n * Traverse the list of enabled backends until one has a\n * get_obj_cpuset() method, and call it.\n */\nHWLOC_DECLSPEC int hwloc_backends_get_obj_cpuset(struct hwloc_backend *caller, struct hwloc_obj *obj, hwloc_bitmap_t cpuset);\n\n/** \\brief Used by backends discovery callbacks to notify other\n * backends of new objects.\n *\n * Traverse the list of enabled backends (all but caller) and invoke\n * their notify_new_object() method to notify them that a new object\n * just got added to the topology.\n *\n * Currently only used for notifying of new PCI device objects.\n */\nHWLOC_DECLSPEC int hwloc_backends_notify_new_object(struct hwloc_backend *caller, struct hwloc_obj *obj);\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_generic_components Components and Plugins: Generic components\n * @{\n */\n\n/** \\brief Generic component type */\ntypedef enum hwloc_component_type_e {\n  /** \\brief The data field must point to a struct hwloc_disc_component. */\n  HWLOC_COMPONENT_TYPE_DISC,\n\n  /** \\brief The data field must point to a struct hwloc_xml_component. */\n  HWLOC_COMPONENT_TYPE_XML\n} hwloc_component_type_t;\n\n/** \\brief Generic component structure\n *\n * Generic components structure, either statically listed by configure in static-components.h\n * or dynamically loaded as a plugin.\n */\nstruct hwloc_component {\n  /** \\brief Component ABI version, set to ::HWLOC_COMPONENT_ABI */\n  unsigned abi;\n\n  /** \\brief Process-wide component initialization callback.\n   *\n   * This optional callback is called when the component is registered\n   * to the hwloc core (after loading the plugin).\n   *\n   * When the component is built as a plugin, this callback\n   * should call hwloc_check_plugin_namespace()\n   * and return an negative error code on error.\n   *\n   * \\p flags is always 0 for now.\n   *\n   * \\return 0 on success, or a negative code on error.\n   *\n   * \\note If the component uses ltdl for loading its own plugins,\n   * it should load/unload them only in init() and finalize(),\n   * to avoid race conditions with hwloc's use of ltdl.\n   */\n  int (*init)(unsigned long flags);\n\n  /** \\brief Process-wide component termination callback.\n   *\n   * This optional callback is called after unregistering the component\n   * from the hwloc core (before unloading the plugin).\n   *\n   * \\p flags is always 0 for now.\n   *\n   * \\note If the component uses ltdl for loading its own plugins,\n   * it should load/unload them only in init() and finalize(),\n   * to avoid race conditions with hwloc's use of ltdl.\n   */\n  void (*finalize)(unsigned long flags);\n\n  /** \\brief Component type */\n  hwloc_component_type_t type;\n\n  /** \\brief Component flags, unused for now */\n  unsigned long flags;\n\n  /** \\brief Component data, pointing to a struct hwloc_disc_component or struct hwloc_xml_component. */\n  void * data;\n};\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_components_core_funcs Components and Plugins: Core functions to be used by components\n * @{\n */\n\n/** \\brief Add an object to the topology.\n *\n * It is sorted along the tree of other objects according to the inclusion of\n * cpusets, to eventually be added as a child of the smallest object including\n * this object.\n *\n * If the cpuset is empty, the type of the object (and maybe some attributes)\n * must be enough to find where to insert the object. This is especially true\n * for NUMA nodes with memory and no CPUs.\n *\n * The given object should not have children.\n *\n * This shall only be called before levels are built.\n *\n * In case of error, hwloc_report_os_error() is called.\n *\n * Returns the object on success.\n * Returns NULL and frees obj on error.\n * Returns another object and frees obj if it was merged with an identical pre-existing object.\n */\nHWLOC_DECLSPEC struct hwloc_obj *hwloc_insert_object_by_cpuset(struct hwloc_topology *topology, hwloc_obj_t obj);\n\n/** \\brief Type of error callbacks during object insertion */\ntypedef void (*hwloc_report_error_t)(const char * msg, int line);\n/** \\brief Report an insertion error from a backend */\nHWLOC_DECLSPEC void hwloc_report_os_error(const char * msg, int line);\n/** \\brief Check whether insertion errors are hidden */\nHWLOC_DECLSPEC int hwloc_hide_errors(void);\n\n/** \\brief Add an object to the topology and specify which error callback to use.\n *\n * Aside from the error callback selection, this function is identical to hwloc_insert_object_by_cpuset()\n */\nHWLOC_DECLSPEC struct hwloc_obj *hwloc__insert_object_by_cpuset(struct hwloc_topology *topology, hwloc_obj_t obj, hwloc_report_error_t report_error);\n\n/** \\brief Insert an object somewhere in the topology.\n *\n * It is added as the last child of the given parent.\n * The cpuset is completely ignored, so strange objects such as I/O devices should\n * preferably be inserted with this.\n *\n * When used for \"normal\" children with cpusets (when importing from XML\n * when duplicating a topology), the caller should make sure children are inserted\n * in order.\n *\n * The given object may have children.\n *\n * Remember to call topology_connect() afterwards to fix handy pointers.\n */\nHWLOC_DECLSPEC void hwloc_insert_object_by_parent(struct hwloc_topology *topology, hwloc_obj_t parent, hwloc_obj_t obj);\n\n/** \\brief Allocate and initialize an object of the given type and physical index */\nstatic __hwloc_inline struct hwloc_obj *\nhwloc_alloc_setup_object(hwloc_obj_type_t type, signed os_index)\n{\n  struct hwloc_obj *obj = malloc(sizeof(*obj));\n  memset(obj, 0, sizeof(*obj));\n  obj->type = type;\n  obj->os_index = os_index;\n  obj->os_level = -1;\n  obj->attr = malloc(sizeof(*obj->attr));\n  memset(obj->attr, 0, sizeof(*obj->attr));\n  /* do not allocate the cpuset here, let the caller do it */\n  return obj;\n}\n\n/** \\brief Setup object cpusets/nodesets by OR'ing its children.\n *\n * Used when adding an object late in the topology, after propagating sets up and down.\n * The caller should use this after inserting by cpuset (which means the cpusets is already OK).\n * Typical case: PCI backend adding a hostbridge parent.\n */\nHWLOC_DECLSPEC int hwloc_fill_object_sets(hwloc_obj_t obj);\n\n/** \\brief Make sure that plugins can lookup core symbols.\n *\n * This is a sanity check to avoid lazy-lookup failures when libhwloc\n * is loaded within a plugin, and later tries to load its own plugins.\n * This may fail (and abort the program) if libhwloc symbols are in a\n * private namespace.\n *\n * \\return 0 on success.\n * \\return -1 if the plugin cannot be successfully loaded. The caller\n * plugin init() callback should return a negative error code as well.\n *\n * Plugins should call this function in their init() callback to avoid\n * later crashes if lazy symbol resolution is used by the upper layer that\n * loaded hwloc (e.g. OpenCL implementations using dlopen with RTLD_LAZY).\n *\n * \\note The build system must define HWLOC_INSIDE_PLUGIN if and only if\n * building the caller as a plugin.\n *\n * \\note This function should remain inline so plugins can call it even\n * when they cannot find libhwloc symbols.\n */\nstatic __hwloc_inline int\nhwloc_plugin_check_namespace(const char *pluginname __hwloc_attribute_unused, const char *symbol __hwloc_attribute_unused)\n{\n#ifdef HWLOC_INSIDE_PLUGIN\n  lt_dlhandle handle;\n  void *sym;\n  handle = lt_dlopen(NULL);\n  if (!handle)\n    /* cannot check, assume things will work */\n    return 0;\n  sym = lt_dlsym(handle, symbol);\n  lt_dlclose(handle);\n  if (!sym) {\n    static int verboseenv_checked = 0;\n    static int verboseenv_value = 0;\n    if (!verboseenv_checked) {\n      const char *verboseenv = getenv(\"HWLOC_PLUGINS_VERBOSE\");\n      verboseenv_value = verboseenv ? atoi(verboseenv) : 0;\n      verboseenv_checked = 1;\n    }\n    if (verboseenv_value)\n      fprintf(stderr, \"Plugin `%s' disabling itself because it cannot find the `%s' core symbol.\\n\",\n\t      pluginname, symbol);\n    return -1;\n  }\n#endif /* HWLOC_INSIDE_PLUGIN */\n  return 0;\n}\n\n/** @} */\n\n\n\n\n/** \\defgroup hwlocality_components_pci_funcs Components and Plugins: PCI functions to be used by components\n * @{\n */\n\n/** \\brief Insert a list of PCI devices and bridges in the backend topology.\n *\n * Insert a list of objects (either PCI device or bridges) starting at first_obj\n * (linked by next_sibling in the topology, and ending with NULL).\n * Objects are placed under the right bridges, and the remaining upstream bridges\n * are then inserted in the topology by calling the get_obj_cpuset() callback to\n * find their locality.\n */\nHWLOC_DECLSPEC int hwloc_insert_pci_device_list(struct hwloc_backend *backend, struct hwloc_obj *first_obj);\n\n/** \\brief Return the offset of the given capability in the PCI config space buffer\n *\n * This function requires a 256-bytes config space. Unknown/unavailable bytes should be set to 0xff.\n */\nHWLOC_DECLSPEC unsigned hwloc_pci_find_cap(const unsigned char *config, unsigned cap);\n\n/** \\brief Fill linkspeed by reading the PCI config space where PCI_CAP_ID_EXP is at position offset.\n *\n * Needs 20 bytes of EXP capability block starting at offset in the config space\n * for registers up to link status.\n */\nHWLOC_DECLSPEC int hwloc_pci_find_linkspeed(const unsigned char *config, unsigned offset, float *linkspeed);\n\n/** \\brief Modify the PCI device object into a bridge and fill its attribute if a bridge is found in the PCI config space.\n *\n * This function requires 64 bytes of common configuration header at the beginning of config.\n *\n * Returns -1 and destroys /p obj if bridge fields are invalid.\n */\nHWLOC_DECLSPEC int hwloc_pci_prepare_bridge(hwloc_obj_t obj, const unsigned char *config);\n\n/** @} */\n\n\n\n\n#endif /* HWLOC_PLUGINS_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/contrib/hwloc/contrib/hwloc-valgrind.supp": "# Copyright \u00a9 2012      Inria.  All rights reserved.\n# See COPYING in top-level directory.\n\n# suppressions file to be passed to valgrind with\n#   --suppressions=/path/to/hwloc-valgrind.supp\n\n# zlib (brought by libpci or libxml2) doesn't cleanup its global state\n{\n   inflate_init\n   Memcheck:Cond\n   fun:inflateReset2\n   fun:inflateInit2_\n}\n\n# hwloc cannot free the global parser (with xmlCleanupParser()) because other threads may be using it\n{\n   xml_init_parser\n   Memcheck:Leak\n   ...\n   fun:xmlInitParser\n}\n\n# hwloc cannot free the global xml dict RMutex because it cannot call xmlCleanupParser() as explained above\n{\n   xml_dict_create_new_rmutex\n   Memcheck:Leak\n   fun:malloc\n   fun:xmlNewRMutex\n   ...\n   fun:xmlDictCreate\n}\n\n# ltdl dlopen global state?\n{\n   ltdl_dlopen_doit_leak\n   Memcheck:Leak\n   ...\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:dlopen_doit\n}\n\n# ltdl_dlclose_leak\n{\n   ltdl_dlclose_leak\n   Memcheck:Leak\n   ...\n   fun:_dl_close_worker\n   fun:_dl_close\n   ...\n   fun:dlclose\n}\n\n# lt_dlforeachfile abusing paths\n{\n   lt_dlforeachfile_addr8\n   Memcheck:Addr8\n   fun:_wordcopy_fwd_dest_aligned\n   fun:__GI_memmove\n   fun:argz_insert\n   ...\n   fun:lt_dlforeachfile\n}\n\n# cuda\n{\n   cuda_leak\n   Memcheck:Leak\n   ...\n   obj:*libcuda*\n}\n\n# nvml\n{\n   nvmlInit_cond\n   Memcheck:Cond\n   ...\n   obj:*nvidia-ml*\n   ...\n   fun:nvmlInit\n}\n\n# amd opencl\n{\n   atical_leak\n   Memcheck:Leak\n   ...\n   obj:*libatical*\n}\n{\n   atical_cond\n   Memcheck:Cond\n   ...\n   obj:*libatical*\n}\n{\n   amdocl_leak\n   Memcheck:Leak\n   ...\n   obj:*libamdocl*\n}\n{\n   amdocl_param\n   Memcheck:Param\n   write(buf)\n   fun:*write*\n   obj:*libamdocl*\n}\n{\n   opencl_leak\n   Memcheck:Leak\n   ...\n   obj:*libOpenCL*\n   ...\n   fun:clGetPlatformIDs\n}\n{\n   libatiadl_xcb_leak\n   Memcheck:Leak\n   ...\n   obj:*libxcb*\n   ...\n   fun:XOpenDisplay\n   ...\n   obj:*libatiadl*\n}\n\n# \n{\n   libpciaccess_device_name_leak\n   Memcheck:Leak\n   ...\n   fun:pci_device_get_device_name\n   fun:hwloc_look_libpci\n}\n{\n   libpciaccess_leak\n   Memcheck:Leak\n   ...\n   obj:*libpciaccess*\n   ...\n   fun:hwloc_look_libpci\n}\n\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/src/libs/ck-libs/metis/manual/manual.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/src/ck-cp/NelderMeadStateDiagram.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/src/langs/charj/lib/JSAP-2.1.jar",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/src/langs/charj/lib/antlr-3.2.jar",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/src/langs/charj/lib/ant-antlr3.jar",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/src/ck-ldb/GridCommRefineLB.C",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/src/ck-ldb/rf_model/big_weakmodel.txt.gz",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/src/ck-ldb/rf_model/big_leafdist.txt.gz",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/.git/objects/pack/pack-040550fac3c5fabdb69335c84d438ea9f14282b0.pack",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/.git/objects/pack/pack-040550fac3c5fabdb69335c84d438ea9f14282b0.idx",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/examples/charm++/wave2d/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/examples/charm++/satisfiability/TNM/TNM.C",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/examples/charm++/satisfiability/TNM/TNM.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/examples/bigsim/tools/text2log/examples.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/examples/pose/LBSim/sample-graph.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/charisma/libmodule.tex",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/netfem/fig/example.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/fem/fig/create_field.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/fem/fig/ghost_edge.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/fem/fig/simple_mesh.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/fem/fig/ghost_node.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/fem/fig/conn_indexing_old.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/fem/fig/partitioned_mesh.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/fem/fig/forcedecomp.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/fem/fig/sym_ghost.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/fem/fig/ghost_pre.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/fem/fig/layout.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/fem/fig/conn_indexing.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/fem/fig/indexlists.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/charj/fig/fig0.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/charj/fig/fig1.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/ampi/figs/prac.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/ampi/figs/migrate.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/ampi/figs/virtualization.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/ampi/figs/global.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/timeline.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/apoa1_512_CommTimeProfile.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/apoa1_128_userEventsView.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/front-with-summary.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/graph.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/apoa1_512_overviewEPColored.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/histogram.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/apoa1_512_overview.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/piechart.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/performancecounters.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/mainwindow.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/outlier_dialog.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/apoa1_512_CommProcessorProfile.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/animation.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/viewlog.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/usageprofile.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/NoiseMiner1.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/NoiseMiner2.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/commhistogram.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/userevent.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/apoa1_512_outlierWithClusters.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/timeprofile.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/standard_dialog.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/projections/fig/overview.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/bignetsim/figures/detailedsim_newer.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/mblock/fig/ghostwidth.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/mblock/fig/indexing.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/mblock/fig/nodeloc.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/mblock/fig/terminology.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/mblock/fig/decompose.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/charm++/fig/pup.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/charm++/fig/ckgraph.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/debugger/figs/snapshot4-crop.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/debugger/figs/snapshot4.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/debugger/figs/memoryLeaking.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/debugger/figs/snapshot1.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/debugger/figs/memoryView.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/debugger/figs/menu.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/debugger/figs/snapshot2.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/debugger/figs/arrayelement.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/debugger/figs/snapshot3.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/debugger/figs/memoryStatistics.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/debugger/figs/memoryInspector.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/bigsim/figures/event_diagram2.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/bigsim/figures/event_diagram2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/bigsim/figures/InterpolationFlow.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/bigsim/figures/event_diagram.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/bigsim/figures/detailedsim_newer.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/bigsim/figures/InterpolationFlow.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/bigsim/figures/event_diagram.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/bigsim/figures/event_diagram.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/bigsim/figures/event_diagram2.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/bigsim/figures/InterpolationFlow.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/parfum/fig/parfum_structure.png",
        "/tmp/vanessa/spack-stage/spack-stage-charmpp-6.9.0-osqp6aszlhuszm4d6p5mpqfiyz62youf/spack-src/doc/assets/hatchbkgd.png"
    ],
    "total_files": 4475
}