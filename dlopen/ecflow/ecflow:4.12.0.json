{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Jamroot.jam": "## Copyright 2009-2019 ECMWF.\n## This software is licensed under the terms of the Apache Licence version 2.0\n## which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.\n## In applying this licence, ECMWF does not waive the privileges and immunities\n## granted to it by virtue of its status as an intergovernmental organisation\n## nor does it submit to any jurisdiction.\n#\n# export BOOST_ROOT=...\n# alias b8r='$BOOST_ROOT/bjam c++-template-depth=512 cxxflags=\"-Wno-unused-local-typedefs -Wno-unused-variable\" -j8 -q release'\n\nproject ecflow_top ;\n\n# ==================== OPENSSL ======================================================\n# OPENSSL support, should really be in site-config.jam\n#\n# to enable use:   b2 ssl=on\n#\n\n# link with libdl.so, shared lib containing dlopen(),dlclose()dysym(),\n# these functions are used by OpenSSL internally & thus -ldl is an\n# indirect dependency when using -lcrypto(on Linux) Because we linking\n# with static version of crypto, need to explicitly link against indirect dependencies.\nlib libssl    : : <file>/usr/lib64/libssl.so ;\nlib libcrypto : : <file>/usr/lib64/libcrypto.so ;\nlib dl ;      # this dependency for using libcrypto, i.e dlopen,dlclose etc, when using static libcrypto\nalias openssl_libs : libssl libcrypto dl ;\n\nimport feature : feature ;\nfeature ssl : off on : optional composite propagated link-incompatible ;\nfeature.compose <ssl>on : <define>ECF_OPENSSL ;\n\n# ===============================================================================\n# To clean all the sub projects just use: bjam --clean\n#\npath-constant TOP : . ;     # After that, the TOP variable can be used in every Jamfile.\n\nbuild-project ACore ;\nbuild-project ANattr ;\nbuild-project ANode ;\nbuild-project Base ;\nbuild-project Client ;\nbuild-project CSim ;\nbuild-project Server ;\nbuild-project Test ;\n\n# The gui is not built on HPUX and IBM(power6) platforms\nimport os ;\nARCH = [ os.environ ARCH ] ;\nARCH default = UNDEF ;  # if arch not defined set as UNDEF, otherwise if $(ARCH) will be true\nbuild_gui = linux cray other_gui_arch ;\n# echo \"ARCH =  $(ARCH)\" ;\nif $(ARCH) in $(build_gui) {\n   build-project view ;\n}\n\n# Some user do no want python: They must define ECF_NO_PYTHON\nNO_PYTHON = [ os.environ ECF_NO_PYTHON ] ;\n#echo \"NO_PYTHON =  $(NO_PYTHON)\" ;\nif ! $(NO_PYTHON) {\n   # echo \"building python\" ;\n   build-project Pyext ;\n}\n\n# ==================== INSTALL ==========================================================\n\nlocal dest_dir = [ os.environ ECFLOW_DESTDIR ] ;\ndest_dir default = \"\" ;\nconstant ECFLOW_DESTDIR : $(dest_dir) ;\n\nlocal ECFLOW_VERSION = [ SHELL \"cd $(TOP); ./version.sh\" ] ;\nlocal install_dir = [ os.environ ECFLOW_INSTALL_DIR ] ;\ninstall_dir default = \"/usr/local/apps/ecflow/$(ECFLOW_VERSION)\" ;\nconstant ECFLOW_INSTALL_DIR : $(install_dir) ;\n\nlocal python_install_dir = [ os.environ ECFLOW_PYTHON_INSTALL_DIR ] ;\npython_install_dir default = $(install_dir)/lib/python2.7/site-packages/ecflow ;\nconstant ECFLOW_PYTHON_INSTALL_DIR : $(python_install_dir) ;\n\n# Used for ecflowview files\nconstant ECFLOW_SHARED_DIR : $(ECFLOW_DESTDIR)$(ECFLOW_INSTALL_DIR)/share/ecflow ;\n\n#echo \"ECFLOW_VERSION            = '$(ECFLOW_VERSION)'\" ;\n#echo \"ECFLOW_DESTDIR            = '$(ECFLOW_DESTDIR)'\" ;\n#echo \"ECFLOW_INSTALL_DIR        = '$(ECFLOW_INSTALL_DIR)'\" ;\n#echo \"ECFLOW_PYTHON_INSTALL_DIR = '$(ECFLOW_PYTHON_INSTALL_DIR)'\" ;\n#echo  \"ECFLOW_SHARED_DIR        = '$(ECFLOW_SHARED_DIR)'\" ;\n\n# ** NO LONGER used **\n# Allow the installation directory be be defined externally, by the environment variable ECFLOW_INSTALL_DIR\n#\n# However we want this to be explicit, as we dont need it on a day to day basis.\n# Usage:\n#\tbjam install variant=release\n#\n# to install the debug version\n# \tbjam install | bjam install variant=debug\n#\n# To preview the installation witout actaully doing it:\n#  \tbjam install variant=release -d2 -n\n#\n# Note: if you find that the install has started to create directories\n#       of name install-server,install-client,,install-py\n#       Then *ensure* you have set the environment variables ECFLOW_INSTALL_DIR,\n#\n# Note: Not all system have XLib, hence install ecFlowview manually by using:\n#      bjam -d2 install-viewer\n#\n\n# Do no call this on the command line, prefer bjam install-all || install-viewer\n# If this is called in isolation ldd will show the referenced shared lib as missing\ninstall install-view\n\t: view//ecflowview\n\t: <location>$(ECFLOW_DESTDIR)/$(ECFLOW_INSTALL_DIR)/bin\n\t  <dll-path>$(ECFLOW_INSTALL_DIR)/lib\n\t;\n\n\n# Some linux RPM have requirements that 64 bit libs must be under lib64\n# See http://software.ecmwf.int/issues/browse/ECFLOW-30, 64-bit Linux platforms expect libraries to go to the $PREFIX/lib64 directory, not $PREFIX/lib\n#\ninstall install-view64\n\t: view//ecflowview\n\t: <location>$(ECFLOW_DESTDIR)/$(ECFLOW_INSTALL_DIR)/bin\n\t  <dll-path>$(ECFLOW_INSTALL_DIR)/lib64\n\t;\n\ninstall install-view-files\n    : [ glob view/servers ]\n      [ glob view/src/ecflowview.menu ]\n    : <location>$(ECFLOW_SHARED_DIR)\n    ;\n\ninstall install-server\n\t: Server//ecflow_server\n\t: <location>$(ECFLOW_DESTDIR)/$(ECFLOW_INSTALL_DIR)/bin\n\t;\n\ninstall install-client\n\t: Client//ecflow_client\n\t: <location>$(ECFLOW_DESTDIR)/$(ECFLOW_INSTALL_DIR)/bin\n\t;\n\ninstall install-tools\n\t: [ glob tools/*.sh ]\n      [ glob tools/*.pl ]\n\t: <location>$(ECFLOW_DESTDIR)/$(ECFLOW_INSTALL_DIR)/bin\n\t;\n\ninstall install-doc\n        : [ glob Doc/user-manual/client_*.docx ]\n\t: <location>$(ECFLOW_DESTDIR)/$(ECFLOW_INSTALL_DIR)/doc/ecflow\n\t;\n\n# Fix bugs associated with the output of old version of ecflow_client --migrate\ninstall install-migrate\n\t: [ glob Pyext/migrate/ecflow_migrate.py ]\n\t: <location>$(ECFLOW_DESTDIR)/$(ECFLOW_INSTALL_DIR)/bin\n\t;\n\n# ===============================================================================================\n\n# Use this for a non-python install\nalias install-base :\n\tinstall-server\n\tinstall-client\n\tinstall-tools\n\tinstall-doc\n   install-migrate\n\t;\nalias install :\n\tinstall-base\n\tPyext//install-py\n \tPyext//install-py1\n\t;\nalias install-viewer :\n\tinstall-view\n\tinstall-view-files\n\t;\nalias install-viewer64 :\n\tinstall-view64\n   install-view-files\n \t;\nalias install-all :\n\tinstall\n   install-viewer\n   ;\nalias install-all64 :\n\tinstall\n   install-viewer64\n   ;\n\n# make install explicit, otherwise we end installing for all calls to bjam\nexplicit install-server ;\nexplicit install-client ;\nexplicit install-tools ;\nexplicit install-view ;\nexplicit install-viewer ;\nexplicit install-view64 ;\nexplicit install-viewer64 ;\nexplicit install-view-files ;\nexplicit install-doc ;\nexplicit install-migrate ;\nexplicit install ;\nexplicit install-base ;\nexplicit install-all ;\nexplicit install-all64 ;\n",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/cmake/ecbuild_add_library.cmake": "# (C) Copyright 2011- ECMWF.\n#\n# This software is licensed under the terms of the Apache Licence Version 2.0\n# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.\n# In applying this licence, ECMWF does not waive the privileges and immunities\n# granted to it by virtue of its status as an intergovernmental organisation nor\n# does it submit to any jurisdiction.\n\n##############################################################################\n#.rst:\n#\n# ecbuild_add_library\n# ===================\n#\n# Add a library with a given list of source files. ::\n#\n#   ecbuild_add_library( TARGET <name>\n#                        SOURCES <source1> [<source2> ...]\n#                        [ SOURCES_GLOB <glob1> [<glob2> ...] ]\n#                        [ SOURCES_EXCLUDE_REGEX <regex1> [<regex2> ...] ]\n#                        [ TYPE SHARED|STATIC|MODULE|OBJECT ]\n#                        [ OBJECTS <obj1> [<obj2> ...] ]\n#                        [ TEMPLATES <template1> [<template2> ...] ]\n#                        [ LIBS <library1> [<library2> ...] ]\n#                        [ INCLUDES <path1> [<path2> ...] ]\n#                        [ PRIVATE_INCLUDES <path1> [<path2> ...] ]\n#                        [ PUBLIC_INCLUDES <path1> [<path2> ...] ]\n#                        [ DEFINITIONS <definition1> [<definition2> ...] ]\n#                        [ PERSISTENT <file1> [<file2> ...] ]\n#                        [ GENERATED <file1> [<file2> ...] ]\n#                        [ DEPENDS <target1> [<target2> ...] ]\n#                        [ CONDITION <condition> ]\n#                        [ PROPERTIES <prop1> <val1> [<prop2> <val2> ...] ]\n#                        [ NOINSTALL ]\n#                        [ HEADER_DESTINATION <path> ]\n#                        [ INSTALL_HEADERS LISTED|ALL ]\n#                        [ INSTALL_HEADERS_LIST <header1> [<header2> ...] ]\n#                        [ INSTALL_HEADERS_REGEX <pattern> ]\n#                        [ VERSION <version> | AUTO_VERSION ]\n#                        [ SOVERSION <soversion> | AUTO_SOVERSION ]\n#                        [ CFLAGS <flag1> [<flag2> ...] ]\n#                        [ CXXFLAGS <flag1> [<flag2> ...] ]\n#                        [ FFLAGS <flag1> [<flag2> ...] ]\n#                        [ LINKER_LANGUAGE <lang> ]\n#                        [ OUTPUT_NAME <name> ] )\n#\n# Options\n# -------\n#\n# TARGET : required\n#   target name\n#\n# SOURCES : required\n#   list of source files\n#\n# TYPE : optional\n#   library type, one of:\n#\n#   :SHARED: libraries are linked dynamically and loaded at runtime\n#   :STATIC: archives of object files for use when linking other targets.\n#   :MODULE: plugins that are not linked into other targets but may be loaded\n#            dynamically at runtime using dlopen-like functionality\n#   :OBJECT: files are just compiled into objects\n#\n# SOURCES_GLOB : optional\n#   search pattern to find source files to compile (note: not recommend according to CMake guidelines)\n#   it is usually better to explicitly list the source files in the CMakeList.txt\n#\n# SOURCES_EXCLUDE_REGEX : optional\n#   search pattern to exclude source files from compilation, applies o the results of SOURCES_GLOB\n#\n# OBJECTS : optional\n#   list of object libraries to add to this target\n#\n# TEMPLATES : optional\n#   list of files specified as SOURCES which are not to be compiled separately\n#   (these are commonly template implementation files included in a header)\n#\n# LIBS : optional\n#   list of libraries to link against (CMake targets or external libraries)\n#\n# INCLUDES : (DEPRECATED) optional\n#   list of paths to add to include directories, behaves as PUBLIC_INCLUDES if CMake >= 2.8.11\n#   and reverts to include_directories() for CMake < 2.8.11\n#\n# PUBLIC_INCLUDES : optional\n#   list of paths to add to include directories which will be publicly exported to other projects\n#\n# PRIVATE_INCLUDES : optional\n#   list of paths to add to include directories which won't be exported to other projects,\n#   equivalent to using a include_directories() before calling this macro\n#\n# DEFINITIONS : optional\n#   list of definitions to add to preprocessor defines\n#\n# PERSISTENT : optional\n#   list of persistent layer object files\n#\n# GENERATED : optional\n#   list of files to mark as generated (sets GENERATED source file property)\n#\n# DEPENDS : optional\n#   list of targets to be built before this target\n#\n# CONDITION : optional\n#   conditional expression which must evaluate to true for this target to be\n#   built (must be valid in a CMake ``if`` statement)\n#\n# PROPERTIES : optional\n#   custom properties to set on the target\n#\n# NOINSTALL : optional\n#   do not install the library\n#\n# HEADER_DESTINATION\n#   directory to install headers (if not specified, INSTALL_INCLUDE_DIR is used)\n#\n# INSTALL_HEADERS : optional\n#   specify which header files to install:\n#\n#   :LISTED: install header files listed as SOURCES\n#   :ALL:    install all header files ending in .h, .hh, .hpp, .H\n#\n# INSTALL_HEADERS_LIST : optional\n#   list of extra headers to install\n#\n# INSTALL_HEADERS_REGEX : optional\n#   regular expression to match extra headers to install\n#\n# VERSION : optional, AUTO_VERSION or LIBS_VERSION is used if not specified\n#   build version of the library\n#\n# AUTO_VERSION : optional, ignored if VERSION is specified\n#   use MAJOR.MINOR package version as build version of the library\n#\n# SOVERSION : optional, AUTO_SOVERSION or LIBS_SOVERSION is used if not specified\n#   ABI version of the library\n#\n# AUTO_SOVERSION : optional, ignored if SOVERSION is specified\n#   use MAJOR package version as ABI version of the library\n#\n# CFLAGS : optional\n#   list of C compiler flags to use for all C source files\n#\n# CXXFLAGS : optional\n#   list of C++ compiler flags to use for all C++ source files\n#\n# FFLAGS : optional\n#   list of Fortran compiler flags to use for all Fortran source files\n#\n# LINKER_LANGUAGE : optional\n#   sets the LINKER_LANGUAGE property on the target\n#\n# OUTPUT_NAME : optional\n#   sets the OUTPUT_NAME property on the target\n#\n##############################################################################\n\nfunction( ecbuild_add_library_impl )\n\n  set( options NOINSTALL AUTO_VERSION AUTO_SOVERSION )\n  set( single_value_args TARGET TYPE COMPONENT INSTALL_HEADERS\n                         INSTALL_HEADERS_REGEX LINKER_LANGUAGE\n                         HEADER_DESTINATION VERSION SOVERSION OUTPUT_NAME )\n  set( multi_value_args  SOURCES SOURCES_GLOB SOURCES_EXCLUDE_REGEX OBJECTS\n                         TEMPLATES LIBS INCLUDES PRIVATE_INCLUDES\n                         PUBLIC_INCLUDES DEPENDS PERSISTENT DEFINITIONS\n                         INSTALL_HEADERS_LIST CFLAGS CXXFLAGS FFLAGS GENERATED\n                         CONDITION PROPERTIES )\n\n  cmake_parse_arguments( _PAR \"${options}\" \"${single_value_args}\" \"${multi_value_args}\"  ${_FIRST_ARG} ${ARGN} )\n\n  if(_PAR_UNPARSED_ARGUMENTS)\n    ecbuild_critical(\"Unknown keywords given to ecbuild_add_library(): \\\"${_PAR_UNPARSED_ARGUMENTS}\\\"\")\n  endif()\n\n  if( NOT _PAR_TARGET  )\n    ecbuild_critical(\"The call to ecbuild_add_library() doesn't specify the TARGET.\")\n  endif()\n\n  if( NOT _PAR_SOURCES AND NOT _PAR_OBJECTS AND NOT _PAR_SOURCES_GLOB )\n    ecbuild_critical(\"The call to ecbuild_add_library() specifies neither SOURCES nor OBJECTS nor SOURCES_GLOB\")\n  endif()\n\n  ### conditional build\n\n  if( DEFINED _PAR_CONDITION )\n    set(_target_condition_file \"${CMAKE_CURRENT_BINARY_DIR}/set_${_PAR_TARGET}_condition.cmake\")\n    file( WRITE  ${_target_condition_file} \"  if( \")\n    foreach( term ${_PAR_CONDITION} )\n      file( APPEND ${_target_condition_file} \" ${term}\")\n    endforeach()\n    file( APPEND ${_target_condition_file} \" )\\n    set(_${_PAR_TARGET}_condition TRUE)\\n  else()\\n    set(_${_PAR_TARGET}_condition FALSE)\\n  endif()\\n\")\n    include( ${_target_condition_file} )\n  else()\n    set( _${_PAR_TARGET}_condition TRUE )\n  endif()\n\n  if( _${_PAR_TARGET}_condition )\n\n    # defines the type of library\n    if( DEFINED _PAR_TYPE )\n      # checks that is either SHARED or STATIC or MODULE\n      if( NOT _PAR_TYPE MATCHES \"STATIC\" AND\n          NOT _PAR_TYPE MATCHES \"SHARED\" AND\n          NOT _PAR_TYPE MATCHES \"OBJECT\" AND\n          NOT _PAR_TYPE MATCHES \"MODULE\" )\n        ecbuild_critical( \"library type must be one of [ STATIC | SHARED | MODULE | OBJECT ]\" )\n      endif()\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): library type is ${_PAR_TYPE}\")\n    endif()\n\n    # insert already compiled objects (from OBJECT libraries)\n    unset( _all_objects )\n    foreach( _obj ${_PAR_OBJECTS} )\n      list( APPEND _all_objects $<TARGET_OBJECTS:${_obj}> )\n    endforeach()\n\n    # glob sources\n    unset( _glob_srcs )\n    foreach( pattern ${_PAR_SOURCES_GLOB} )\n      ecbuild_list_add_pattern( LIST _glob_srcs GLOB \"${pattern}\" )\n    endforeach()\n\n    foreach( pattern ${_PAR_SOURCES_EXCLUDE_REGEX} )\n      ecbuild_list_exclude_pattern( LIST _glob_srcs REGEX \"${pattern}\" )\n    endforeach()\n    list( APPEND _PAR_SOURCES ${_glob_srcs} )\n\n    if( ECBUILD_LIST_SOURCES )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): sources ${_PAR_SOURCES}\")\n    endif()\n\n    # add persistent layer files\n    if( DEFINED _PAR_PERSISTENT )\n      if( DEFINED PERSISTENT_NAMESPACE )\n        ecbuild_add_persistent( SRC_LIST _PAR_SOURCES FILES ${_PAR_PERSISTENT} NAMESPACE ${PERSISTENT_NAMESPACE} )\n      else()\n        ecbuild_add_persistent( SRC_LIST _PAR_SOURCES FILES ${_PAR_PERSISTENT} )\n      endif()\n    endif()\n\n    # remove templates from compilation sources\n    if( DEFINED _PAR_TEMPLATES )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): removing ${_PAR_TEMPLATES} from sources\")\n      list( REMOVE_ITEM _PAR_SOURCES ${_PAR_TEMPLATES} )\n      add_custom_target( ${_PAR_TARGET}_templates SOURCES ${_PAR_TEMPLATES} )\n    endif()\n\n    # Separate sources\n    if( _PAR_SOURCES )\n      ecbuild_separate_sources( TARGET ${_PAR_TARGET} SOURCES ${_PAR_SOURCES} )\n    endif()\n\n    if( ${_PAR_TARGET}_cuda_srcs )\n      if( NOT CUDA_FOUND )\n          ecbuild_error(\"ecbuild_add_library(${_PAR_TARGET}): CUDA source files detected\"\n                        \"but CUDA was not found.\")\n      endif()\n      if( _PAR_TYPE MATCHES \"OBJECT\" )\n          ecbuild_error(\"ecbuild_add_library(${_PAR_TARGET}): CUDA source files detected\"\n                        \"but CMake OBJECT libraries with CUDA are not supported.\")\n      endif()\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): CUDA sources detected.\"\n                    \"Building library with cuda_add_library() rather than intrinsic\"\n                    \"add_library().\")\n    endif()\n\n    if( NOT ${_PAR_TARGET}_cuda_srcs )\n      add_library( ${_PAR_TARGET} ${_PAR_TYPE} ${_PAR_SOURCES}  ${_all_objects} )\n    else()\n      cuda_add_library( ${_PAR_TARGET} ${_PAR_TYPE} ${_PAR_SOURCES}  ${_all_objects} )\n    endif()\n    # ecbuild_echo_target( ${_PAR_TARGET} )\n\n    # Set custom properties\n    if( ${_PAR_PROPERTIES} )\n      set_target_properties( ${_PAR_TARGET} PROPERTIES ${_PAR_PROPERTIES} )\n    endif()\n\n    # set OUTPUT_NAME\n\n    if( DEFINED _PAR_OUTPUT_NAME )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): set OUTPUT_NAME to ${_PAR_OUTPUT_NAME}\")\n      set_target_properties( ${_PAR_TARGET} PROPERTIES OUTPUT_NAME ${_PAR_OUTPUT_NAME} )\n    endif()\n\n    # add extra dependencies\n    if( DEFINED _PAR_DEPENDS)\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): add dependency on ${_PAR_DEPENDS}\")\n      add_dependencies( ${_PAR_TARGET} ${_PAR_DEPENDS} )\n    endif()\n\n    # add the link libraries\n    if( DEFINED _PAR_LIBS )\n      list(REMOVE_DUPLICATES _PAR_LIBS )\n      list(REMOVE_ITEM _PAR_LIBS debug)\n      list(REMOVE_ITEM _PAR_LIBS optimized)\n      foreach( lib ${_PAR_LIBS} ) # skip NOTFOUND\n        if( lib )\n\n          string(REGEX REPLACE \"[ ]+$\" \"\" ${lib} \"${${lib}}\") # strips leading whitespaces\n          string(REGEX REPLACE \"^[ ]+\" \"\" ${lib} \"${${lib}}\") # strips trailing whitespaces\n\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): linking with [${lib}]\")\n          target_link_libraries( ${_PAR_TARGET} ${lib} )\n        else()\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): ${lib} not found - not linking\")\n        endif()\n      endforeach()\n    endif()\n\n    # add include dirs if defined\n    if( DEFINED _PAR_INCLUDES )\n      list( REMOVE_DUPLICATES _PAR_INCLUDES )\n      foreach( path ${_PAR_INCLUDES} ) # skip NOTFOUND\n        if( path )\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): add ${path} to include_directories\")\n          if( \"${CMAKE_VERSION}\" VERSION_LESS \"2.8.11\" OR ECBUILD_USE_INCLUDE_DIRECTORIES )\n            include_directories( ${path} )\n          else()\n            target_include_directories( ${_PAR_TARGET} PUBLIC ${path} )\n          endif()\n        else()\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): ${path} not found - not adding to include_directories\")\n        endif()\n      endforeach()\n    endif()\n\n    # add private include dirs if defined\n    if( DEFINED _PAR_PRIVATE_INCLUDES )\n      if( \"${CMAKE_VERSION}\" VERSION_LESS \"2.8.11\" )\n        ecbuild_critical(\"ecbuild_add_library(${_PAR_TARGET}): cannot use PRIVATE_INCLUDES with CMake < 2.8.11\" )\n      endif()\n      list( REMOVE_DUPLICATES _PAR_PRIVATE_INCLUDES )\n      foreach( path ${_PAR_PRIVATE_INCLUDES} ) # skip NOTFOUND\n        if( path )\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): add ${path} to include_directories\")\n          target_include_directories( ${_PAR_TARGET} PRIVATE ${path} )\n        else()\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): ${path} not found - not adding to include_directories\")\n        endif()\n      endforeach()\n    endif()\n\n    # add public include dirs if defined\n    if( DEFINED _PAR_PUBLIC_INCLUDES )\n      if( \"${CMAKE_VERSION}\" VERSION_LESS \"2.8.11\" )\n        ecbuild_critical(\"ecbuild_add_library(${_PAR_TARGET}): cannot use PUBLIC_INCLUDES with CMake < 2.8.11\" )\n      endif()\n      list( REMOVE_DUPLICATES _PAR_PUBLIC_INCLUDES )\n      foreach( path ${_PAR_PUBLIC_INCLUDES} ) # skip NOTFOUND\n        if( path )\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): add ${path} to include_directories\")\n          target_include_directories( ${_PAR_TARGET} PUBLIC ${path} )\n        else()\n          ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): ${path} not found - not adding to include_directories\")\n        endif()\n      endforeach()\n    endif()\n\n    # FIX: Cray compiler PIC option is not detected by CMake\n\n    get_property( _target_pic TARGET ${_PAR_TARGET} PROPERTY POSITION_INDEPENDENT_CODE )\n    if( _target_pic )\n      if( \"${CMAKE_C_COMPILER_ID}\" STREQUAL \"Cray\" )\n        set( _PAR_CFLAGS \"-fPIC -h PIC ${_PAR_CFLAGS}\" )\n      endif()\n      if( \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Cray\" )\n        set( _PAR_CXXFLAGS \"-fPIC -h PIC ${_PAR_CXXFLAGS}\" )\n      endif()\n      if( \"${CMAKE_Fortran_COMPILER_ID}\" STREQUAL \"Cray\" )\n        set( _PAR_FFLAGS \"-fPIC -h PIC ${_PAR_FFLAGS}\" )\n      endif()\n    endif()\n\n    # define VERSION if requested\n    if( DEFINED _PAR_VERSION )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): set build version to ${_PAR_VERSION}\")\n      set_target_properties( ${_PAR_TARGET} PROPERTIES VERSION \"${_PAR_VERSION}\" )\n    else()\n      if( _PAR_AUTO_VERSION OR LIBS_VERSION MATCHES \"[Aa][Uu][Tt][Oo]\")\n        ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): set build version to ${${PNAME}_MAJOR_VERSION}.${${PNAME}_MINOR_VERSION} (auto)\")\n        set_target_properties( ${_PAR_TARGET} PROPERTIES VERSION \"${${PNAME}_MAJOR_VERSION}.${${PNAME}_MINOR_VERSION}\" )\n      elseif( DEFINED LIBS_VERSION )\n        ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): set build version to ${LIBS_VERSION}\")\n        set_target_properties( ${_PAR_TARGET} PROPERTIES VERSION \"${LIBS_VERSION}\" )\n      endif()\n    endif()\n\n    # define SOVERSION if requested\n    if( DEFINED _PAR_SOVERSION )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): set ABI version to ${_PAR_SOVERSION}\")\n      set_target_properties( ${_PAR_TARGET} PROPERTIES SOVERSION \"${_PAR_SOVERSION}\" )\n    else()\n      if( _PAR_AUTO_SOVERSION OR LIBS_SOVERSION MATCHES \"[Aa][Uu][Tt][Oo]\")\n        ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): set ABI version to ${${PNAME}_MAJOR_VERSION} (auto)\")\n        set_target_properties( ${_PAR_TARGET} PROPERTIES SOVERSION \"${${PNAME}_MAJOR_VERSION}\" )\n      elseif( DEFINED LIBS_SOVERSION )\n        ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): set ABI version to ${LIBS_SOVERSION}\")\n        set_target_properties( ${_PAR_TARGET} PROPERTIES SOVERSION \"${LIBS_SOVERSION}\" )\n      endif()\n    endif()\n\n    # Override compilation flags on a per source file basis\n    ecbuild_target_flags( ${_PAR_TARGET} \"${_PAR_CFLAGS}\" \"${_PAR_CXXFLAGS}\" \"${_PAR_FFLAGS}\" )\n\n    if( DEFINED _PAR_GENERATED )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): mark as generated ${_PAR_GENERATED}\")\n      set_source_files_properties( ${_PAR_GENERATED} PROPERTIES GENERATED 1 )\n    endif()\n\n    # set linker language\n    if( DEFINED _PAR_LINKER_LANGUAGE )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): using linker language ${_PAR_LINKER_LANGUAGE}\")\n      set_target_properties( ${_PAR_TARGET} PROPERTIES LINKER_LANGUAGE ${_PAR_LINKER_LANGUAGE} )\n      if( ECBUILD_${_PAR_LINKER_LANGUAGE}_IMPLICIT_LINK_LIBRARIES )\n        target_link_libraries( ${_PAR_TARGET} ${ECBUILD_${_PAR_LINKER_LANGUAGE}_IMPLICIT_LINK_LIBRARIES} )\n      endif()\n    endif()\n\n    if( NOT _PAR_TYPE MATCHES \"OBJECT\" AND ECBUILD_IMPLICIT_LINK_LIBRARIES )\n      target_link_libraries( ${_PAR_TARGET} ${ECBUILD_IMPLICIT_LINK_LIBRARIES} )\n    endif()\n\n    # installation (except for OBJECT libraries)\n\n    if( NOT _PAR_NOINSTALL AND NOT _PAR_TYPE MATCHES \"OBJECT\" )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): installing to ${INSTALL_LIB_DIR}\")\n\n      # and associate with defined component\n      #            if( DEFINED _PAR_COMPONENT )\n      #                set( COMPONENT_DIRECTIVE \"${_PAR_COMPONENT}\" )\n      #            else()\n      #                set( COMPONENT_DIRECTIVE \"${PROJECT_NAME}\" )\n      #            endif()\n\n      install( TARGETS ${_PAR_TARGET}\n        EXPORT  ${PROJECT_NAME}-targets\n        RUNTIME DESTINATION ${INSTALL_BIN_DIR}\n        LIBRARY DESTINATION ${INSTALL_LIB_DIR}\n        ARCHIVE DESTINATION ${INSTALL_LIB_DIR} )\n      #              COMPONENT ${COMPONENT_DIRECTIVE} )\n\n      # install headers\n      if( _PAR_HEADER_DESTINATION )\n        set( _h_destination \"${_PAR_HEADER_DESTINATION}\" )\n      else()\n        set( _h_destination \"${INSTALL_INCLUDE_DIR}\" )\n      endif()\n\n      if(ECBUILD_INSTALL_LIBRARY_HEADERS)\n\n        if( _PAR_INSTALL_HEADERS )\n          if( _PAR_INSTALL_HEADERS MATCHES \"LISTED\" )\n            foreach( file ${${_PAR_TARGET}_h_srcs} )\n              get_filename_component( _file_dir ${file} PATH )\n              install( FILES ${file} DESTINATION \"${_h_destination}/${_file_dir}\" )\n            endforeach()\n            if( DEFINED _PAR_TEMPLATES )\n              foreach( file ${_PAR_TEMPLATES} )\n                get_filename_component( _file_dir ${file} PATH )\n                install( FILES ${file} DESTINATION \"${_h_destination}/${_file_dir}\" )\n              endforeach()\n            endif()\n            if( DEFINED _PAR_PERSISTENT )\n              foreach( file ${_PAR_PERSISTENT} )\n                get_filename_component( _file_dir ${file} PATH )\n                get_filename_component( _file_we  ${file} NAME_WE )\n                set( pfile \"${CMAKE_CURRENT_BINARY_DIR}/${_file_dir}/${_file_we}.b\" )\n                install( FILES ${pfile} DESTINATION \"${_h_destination}/${_file_dir}\" )\n              endforeach()\n            endif()\n          endif()\n          if( _PAR_INSTALL_HEADERS MATCHES \"ALL\" ) # \"(\\\\.h|\\\\.b|\\\\.hxx|\\\\.hh|\\\\.hpp|\\\\.H)\" ????\n            install( DIRECTORY ./  DESTINATION ${_h_destination} FILES_MATCHING PATTERN \"*.h\" )\n            install( DIRECTORY ./  DESTINATION ${_h_destination} FILES_MATCHING PATTERN \"*.hh\" )\n            install( DIRECTORY ./  DESTINATION ${_h_destination} FILES_MATCHING PATTERN \"*.hpp\" )\n            install( DIRECTORY ./  DESTINATION ${_h_destination} FILES_MATCHING PATTERN \"*.H\" )\n          endif()\n        endif()\n\n        if( DEFINED _PAR_INSTALL_HEADERS_LIST )\n          install( FILES ${_PAR_INSTALL_HEADERS_LIST} DESTINATION ${_h_destination} )\n        endif()\n\n        if( DEFINED _PAR_INSTALL_HEADERS_REGEX )\n          install( DIRECTORY ./  DESTINATION ${_h_destination} FILES_MATCHING PATTERN \"${_PAR_INSTALL_HEADERS_REGEX}\")\n        endif()\n\n      endif()\n\n      # set build location\n\n      set_target_properties( ${_PAR_TARGET} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib )\n      set_target_properties( ${_PAR_TARGET} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib )\n\n      # export location of target to other projects -- must be exactly after setting the build location (see previous 2 commands)\n\n      export( TARGETS ${_PAR_TARGET} APPEND FILE \"${TOP_PROJECT_TARGETS_FILE}\" )\n\n    endif()\n\n    # add definitions to compilation\n    if( DEFINED _PAR_DEFINITIONS )\n      get_property( _target_defs TARGET ${_PAR_TARGET} PROPERTY COMPILE_DEFINITIONS )\n      list( APPEND _target_defs ${_PAR_DEFINITIONS} )\n      ecbuild_debug(\"ecbuild_add_library(${_PAR_TARGET}): using definitions ${_target_defs}\")\n      set_target_properties( ${_PAR_TARGET} PROPERTIES COMPILE_DEFINITIONS \"${_target_defs}\" )\n    endif()\n\n    # make sure target is removed before - some problems with AIX\n    if( NOT _PAR_TYPE MATCHES \"OBJECT\" )\n      add_custom_command( TARGET ${_PAR_TARGET} PRE_BUILD COMMAND ${CMAKE_COMMAND} -E remove $<TARGET_FILE:${_PAR_TARGET}> )\n    endif()\n\n    # for the links target\n    if( NOT _PAR_NOINSTALL )\n      ecbuild_link_lib( ${_PAR_TARGET} $<TARGET_FILE_NAME:${_PAR_TARGET}> $<TARGET_FILE:${_PAR_TARGET}>  )\n    endif()\n\n    # append to the list of this project targets\n    set( ${PROJECT_NAME}_ALL_LIBS ${${PROJECT_NAME}_ALL_LIBS} ${_PAR_TARGET} CACHE INTERNAL \"\" )\n\n  endif()\n\n  # mark source files as used\n  ecbuild_declare_project_files( ${_PAR_SOURCES} )\n  if( DEFINED _PAR_TEMPLATES )\n    ecbuild_declare_project_files( ${_PAR_TEMPLATES} )\n  endif()\n\nendfunction( ecbuild_add_library_impl  )\n\n##############################################################################\n# auxiliary macro for adding a library\n##############################################################################\n\nmacro( ecbuild_add_library )\n\n  set( options  )\n  set( single_value_args TARGET TYPE )\n  set( multi_value_args )\n\n  cmake_parse_arguments( _p \"${options}\" \"${single_value_args}\" \"${multi_value_args}\"  ${_FIRST_ARG} ${ARGN} )\n\n  if( DEFINED _p_TYPE ) # don't do anything if TYPE was specified\n\n    if( _p_TYPE MATCHES \"[Bb][Oo][Tt][Hh]\" ) # build both types\n\n      ecbuild_add_library_impl( TARGET ${_p_TARGET}        TYPE SHARED ${_p_UNPARSED_ARGUMENTS} )\n      ecbuild_add_library_impl( TARGET ${_p_TARGET}-static TYPE STATIC ${_p_UNPARSED_ARGUMENTS} OUTPUT_NAME ${_p_TARGET} DEPENDS ${_p_TARGET} )\n\n    else()\n\n      ecbuild_add_library_impl( ${ARGV} )\n\n    endif()\n\n  else()\n\n    if( NOT DEFINED _p_TARGET )\n      ecbuild_critical(\"The call to ecbuild_add_library() doesn't specify the TARGET.\")\n    else()\n\n      if( BUILD_SHARED_LIBS MATCHES \"[Bb][Oo][Tt][Hh]\" ) # build both types\n\n        ecbuild_add_library_impl( TARGET ${_p_TARGET}        TYPE SHARED ${_p_UNPARSED_ARGUMENTS} )\n        ecbuild_add_library_impl( TARGET ${_p_TARGET}-static TYPE STATIC ${_p_UNPARSED_ARGUMENTS} DEPENDS ${_p_TARGET} )\n\n        # If the library is built conditionally the target might not exist\n        if ( TARGET ${_p_TARGET}-static )\n          set_target_properties( ${_p_TARGET}-static PROPERTIES OUTPUT_NAME ${_p_TARGET} )\n        endif()\n\n      else()\n\n        ecbuild_add_library_impl( ${ARGV} )\n\n      endif()\n\n    endif()\n\n  endif()\n\nendmacro( ecbuild_add_library )\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/tree_branch_end.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_calendar.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Z.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Jobstatus.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Josstatus3.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Check.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/splash_screen.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_limit2.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_limit0.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_defstatus.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Info.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/dock_menu_indicator.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_complete.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Apply.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_W.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_message.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Status.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Triggers.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/logo_small.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Load.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/tree_vline.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Variables.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Chat.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Search.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_waiting.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/spinning_wheel.gif",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Update.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_late.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Manual.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_locked.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Time_line.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Complete.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_limit1.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_QuickFind.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Zbw.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/tree_branch_more.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_clock.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_migrated.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Script.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Output.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Submit.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Edit.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_folded.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Merge.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_rerun.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_memo.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_noway.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Use_external_viewer.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Use_external_editor.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Why_.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Viewer/ecflowUI/images/icon_Messages.png",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Pyext/test/ecflow_test_util.pyc",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/Pyext/test/__pycache__/ecflow_test_util.cpython-36.pyc",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/ANode/test/data/SMSHOME2/good/suite/family/ecfmicro.job1",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/share/ecflow/etc/ecflow_ui_test_server_scripts.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/share/ecflow/etc/sounds/tone.ogg",
        "/tmp/vanessa/spack-stage/spack-stage-ecflow-4.12.0-cfpzkm3xpksm5gj7w37lvkq4d4kyb6rx/spack-src/cmake/contrib/GreatCMakeCookOff/AddCPP11Flags.cmake"
    ],
    "total_files": 2757
}