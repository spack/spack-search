{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-z3-4.8.9-o2l26mk6dkoxkavkgf3liyg4tz32x4nd/spack-src/src/api/ml/README.md": "Summary\n=======\n\nThe OCaml z3 bindings now work both in dynamic and static mode and the compiled\nlibraries can be used by all linkers in the OCaml system, without\nany specific instructions other than specifying the dependency on\nthe z3 library.\n\n\nUsing the libraries\n===================\n\nCompiling binaries\n------------------\n\nThe libraries can be linked statically with both ocamlc and ocamlopt\ncompilers, e.g.,\n\n```\nocamlfind ocamlc -thread -package z3 -linkpkg run.ml -o run\n```\nor\n```\nocamlfind ocamlopt -thread -package z3 -linkpkg run.ml -o run\n```\n\nWhen bindings compiled with the `--staticlib` the produced binary will\nnot have any dependencies on z3\n```\n$ ldd ./run\n        linux-vdso.so.1 (0x00007fff9c9ed000)\n        libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007fb56f09c000)\n        libgmp.so.10 => /usr/lib/x86_64-linux-gnu/libgmp.so.10 (0x00007fb56ee1b000)\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fb56ebfc000)\n        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fb56e85e000)\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fb56e65a000)\n        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fb56e442000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fb56e051000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007fb570de9000)\n```\n\nThe bytecode version will have a depedency on z3 and other external\nlibraries (packed as dlls and usually installed in opam switch):\n```\n$ ocamlobjinfo run | grep 'Used DLL' -A5\nUsed DLLs:\n        dllz3ml\n        dllzarith\n        dllthreads\n        dllunix\n```\n\nBut it is possible to compile a portable self-contained version of the\nbytecode executable using the `-custom` switch:\n\n```\nocamlfind ocamlc -custom -thread -package z3 -linkpkg run.ml -o run\n```\n\nThe build binary is now quite large but doesn't have any external\ndependencies (modulo the system dependencies):\n```\n$ du -h run\n27M     run\n$ ocamlobjinfo run | grep 'Used DLL' | wc -l\n0\n$ ldd run\n        linux-vdso.so.1 (0x00007ffee42c2000)\n        libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007fdbdc415000)\n        libgmp.so.10 => /usr/lib/x86_64-linux-gnu/libgmp.so.10 (0x00007fdbdc194000)\n        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fdbdbf75000)\n        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fdbdbbd7000)\n        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fdbdb9d3000)\n        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fdbdb7bb000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fdbdb3ca000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007fdbde026000)\n```\n\nLoading in toplevel\n-------------------\n\nIt is also possible to use the built libraries in toplevel and use\nthem in ocaml scripts, e.g.,\n```\n$ ocaml\n        OCaml version 4.09.0\n\n # #use \"topfind\";;\n - : unit = ()\n Findlib has been successfully loaded. Additional directives:\n  #require \"package\";;      to load a package\n  #list;;                   to list the available packages\n  #camlp4o;;                to load camlp4 (standard syntax)\n  #camlp4r;;                to load camlp4 (revised syntax)\n  #predicates \"p,q,...\";;   to set these predicates\n  Topfind.reset();;         to force that packages will be reloaded\n  #thread;;                 to enable threads\n\n- : unit = ()\n # #require \"z3\";;\n /home/ivg/.opam/4.09.0/lib/zarith: added to search path\n /home/ivg/.opam/4.09.0/lib/zarith/zarith.cma: loaded\n /home/ivg/.opam/4.09.0/lib/z3: added to search path\n /home/ivg/.opam/4.09.0/lib/z3/z3ml.cma: loaded\n #\n```\n\nTo use z3 in a script mode add the following preamble to a file with\nOCaml code:\n```\n  #!/usr/bin/env ocaml\n  #use \"topfind\";;\n  #require \"z3\";;\n\n  (* your OCaml code *)\n```\n\nThen it is possible to run it as `./script` (provided that the code is\nin a file named `script` and permissions are set with `chmod a+x\nscript`).\n\nOf course, such scripts will depend on ocaml installation that shall\nhave z3 dependencies installed.\n\nUsing Dynlink\n-------------\n\nThe built z3ml.cmxs file is a self-contained shared library that\ndoesn't have any depndencies on z3 (the z3 code is included in it) and\ncould be loaded with `Dynlink.loadfile` in runtime.\n\nInstallation\n============\n\nI did not touch the installation part in this PR, as I was using opam\nand installed artifacts as simple as:\n```\nocamlfind install z3 build/api/ml/* build/libz3-static.a\n```\n\nassuming that the following configuration and building process\n```\npython2.7 scripts/mk_make.py --ml --staticlib\nmake -C build\n```\n\nThough the default installation script in the make file shall work.\n\nDynamic Library mode\n====================\n\nThe dynamic library mode is also supported provided that libz3.so is\ninstalled in a search path of the dynamic loader (or the location is\nadded via the LD_LIBRARY_PATH) or stored in rpaths of the built\nbinary.\n\nBuild Artifacts\n===============\n\nIn the static mode (--staticlib), the following files are built and\ninstalled:\n\n- `{z3,z3enums,z3native}.{cmi,cmo,cmx,o,mli}`: the three compilation\nunits (modules) that comprise Z3 bindings. The `*.mli` files are not\nnecessary but are installed for the user convenience and documentation\npurposes. The *.cmi files enables access to the unit\ndefinitions. Finally, `*.cmo` contain the bytecode and `*.cmx, *.o`\ncontain the native code. Files with the code are necessary for cross-module\noptimization but are not strictly needed as the code is also\nduplicated in the libraries.\n\n- libz3-static.a (OR libz3.so if built not in the staticlib mode)\ncontains the machine code of the Z3 library;\n\n- z3ml.{a,cma,cmxa,cmxs} - the OCaml code for the bindings. File\nz3ml.a and z3ml.cmxa are static libraries with OCaml native code,\nwhich will be included in the final binary when ocamlopt is used. The\nz3 library code itself is not included in those three artifacts, but\nthe instructions where to find it are. The same is truce for `z3ml.a`\nwhich includes the bytecode of the bindings as well as instructions\nhow to link the final product. Finally, `z3ml.cmxs` is a standalone\nshared library that could be loaded in runtime use\n`Dynlink.loadfile` (which used dlopen on posix machines underneath the\nhood).\n\n- libz3ml.a is the archived machine code for `z3native_stubs.c`, which\nis made by ocamlmklib: `ar rcs api/ml/libz3ml.a\napi/ml/z3native_stubs.o` it is needed to build statically linked\nbinaries and libraries that use z3 bindings.\n\n- dllz3ml.so is the shared object that contains `z3native_stubs.o` as\nwell as correct ldd entries for C++ and Z3 libraries to enable proper\nstatic and dynamic linking. The file is built with ocamlmklib on posix\nsystems as\n```\ngcc -shared -o api/ml/dllz3ml.so api/ml/z3native_stubs.o -L. -lz3-static -lstdc++\n```\n\nIt is used by `ocaml`, `ocamlrun`, and `ocamlc` to link z3 and c++\ncode into the OCaml runtime and enables usage of z3 bindings in\nnon-custom runtimes (default runtimes).\n\nThe `dllz3ml.so` is usually installed in the stubs library in opam\ninstallation (`$(opam config var lib)/stublibs`), it is done\nautomatically by `ocamlfind` so no special treatment is needed.\n\nTechnical Details\n=================\n\nThe patch itself is rather small. First of all, we have to use\n`-l<lib>` instead of `-cclib -l<lib>` in ocamlmklib since the latter\nwill pass the options only to the ocaml{c,opt} linker and will not\nuse the passed libraries when shared and non-shared versions of the\nbindings are built (libz3ml.a and dllz3ml.so). They were both missing\neither z3 code itself and ldd entries for stdc++ (and z3 if built not\nin --staticlib mode).\n\nHaving stdc++ entry streamlines the compilation process and makes\ndynamic loading more resistant to the inclusion order.\n\nFinally, we had to add `-L.` to make sure that the built artifacts are\ncorrectly found by gcc.\n\nI specifically left the cygwin part of the code intact as I have no\nidea what the original author meant by this, neither do I use or\ntested this patch in the cygwin or mingw environemt. I think that this\ncode is rather outdated and shouldn't really work. E.g., in the\n--staticlib mode adding z3linkdep (which is libz3-static.a) as an\nargument to `ocamlmklib` will yield the following broken archive\n```\nar rcs api/ml/libz3ml.a libz3-static.a api/ml/z3native_stubs.o\n```\nand it is not allowed (or supported) to have .a in archives (though it\ndoesn't really hurt as most of the systems will just ignore it).\n\nBut otherwise, cygwin, mingw shall behave as they did (the only change\nthat affects them is `-L.` which I believe should be benign).\n\n[1]: https://stackoverflow.com/questions/56839246/installing-ocaml-api-for-z3-using-opam/58398704\n[2]: https://stackoverflow.com/questions/57065191/linker-error-when-installing-z3-ocaml-bindings-in-local-opam-environment\n[3]: https://discuss.ocaml.org/t/trouble-with-z3-on-ocaml-4-10-on-linux-and-ocaml-4-x-on-macos/5418/9\n[4]: https://github.com/ocaml/opam-repository/blob/master/packages/z3/z3.4.8.8/opam\n[5]: https://github.com/akabe/ocaml-jupyter\n\nOther notes\n==============\nOn Windows, there are no less than four different ports of OCaml. The Z3 build \nsystem assumes that either the win32 or the win64 port is installed. This means\nthat OCaml will use `cl' as the underlying C compiler and not the cygwin or\nmingw compilers.\n\nOCamlfind: When ocamlfind is found, the `install' target will install the Z3\nOCaml bindings into the ocamlfind site-lib directory. The installed package is\nlinked against the (dynamic) libz3 and it adds $(PREFIX)/lib to the library\ninclude paths. On Windows, there is no $(PREFIX), so the build directory is\nused instead (see META.in).\n\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-z3-4.8.9-o2l26mk6dkoxkavkgf3liyg4tz32x4nd/spack-src/noarch/repodata.json.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-z3-4.8.9-o2l26mk6dkoxkavkgf3liyg4tz32x4nd/spack-src/src/api/dotnet/Microsoft.Z3.snk",
        "/tmp/vanessa/spack-stage/spack-stage-z3-4.8.9-o2l26mk6dkoxkavkgf3liyg4tz32x4nd/spack-src/resources/icon.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-z3-4.8.9-o2l26mk6dkoxkavkgf3liyg4tz32x4nd/spack-src/resources/z3.snk",
        "/tmp/vanessa/spack-stage/spack-stage-z3-4.8.9-o2l26mk6dkoxkavkgf3liyg4tz32x4nd/spack-src/examples/python/tutorial/html/examples/queens.png",
        "/tmp/vanessa/spack-stage/spack-stage-z3-4.8.9-o2l26mk6dkoxkavkgf3liyg4tz32x4nd/spack-src/examples/python/tutorial/html/examples/sudoku.png"
    ],
    "total_files": 2255
}