{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-r-lubridate-1.7.9.2-zaa4wwct6qv33x2zhtotnatjoq6u7iop/spack-src/src/cctz/src/time_zone_lookup.cc": "// Copyright 2016 Google Inc. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   https://www.apache.org/licenses/LICENSE-2.0\n//\n//   Unless required by applicable law or agreed to in writing, software\n//   distributed under the License is distributed on an \"AS IS\" BASIS,\n//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//   See the License for the specific language governing permissions and\n//   limitations under the License.\n\n#include \"cctz/time_zone.h\"\n\n#if defined(__ANDROID__)\n#include <sys/system_properties.h>\n#if defined(__ANDROID_API__) && __ANDROID_API__ >= 21\n#include <dlfcn.h>\n#endif\n#endif\n\n#if defined(__APPLE__)\n#include <CoreFoundation/CFTimeZone.h>\n#include <vector>\n#endif\n\n#include <cstdlib>\n#include <cstring>\n#include <string>\n\n#include \"time_zone_fixed.h\"\n#include \"time_zone_impl.h\"\n\nnamespace cctz {\n\n#if defined(__ANDROID__) && defined(__ANDROID_API__) && __ANDROID_API__ >= 21\nnamespace {\n// Android 'L' removes __system_property_get() from the NDK, however\n// it is still a hidden symbol in libc so we use dlsym() to access it.\n// See Chromium's base/sys_info_android.cc for a similar example.\n\nusing property_get_func = int (*)(const char*, char*);\n\nproperty_get_func LoadSystemPropertyGet() {\n  int flag = RTLD_LAZY | RTLD_GLOBAL;\n#if defined(RTLD_NOLOAD)\n  flag |= RTLD_NOLOAD;  // libc.so should already be resident\n#endif\n  if (void* handle = dlopen(\"libc.so\", flag)) {\n    void* sym = dlsym(handle, \"__system_property_get\");\n    dlclose(handle);\n    return reinterpret_cast<property_get_func>(sym);\n  }\n  return nullptr;\n}\n\nint __system_property_get(const char* name, char* value) {\n  static property_get_func system_property_get = LoadSystemPropertyGet();\n  return system_property_get ? system_property_get(name, value) : -1;\n}\n\n}  // namespace\n#endif\n\nstd::string time_zone::name() const {\n  return effective_impl().Name();\n}\n\ntime_zone::absolute_lookup time_zone::lookup(\n    const time_point<seconds>& tp) const {\n  return effective_impl().BreakTime(tp);\n}\n\ntime_zone::civil_lookup time_zone::lookup(const civil_second& cs) const {\n  return effective_impl().MakeTime(cs);\n}\n\nbool time_zone::next_transition(const time_point<seconds>& tp,\n                                civil_transition* trans) const {\n  return effective_impl().NextTransition(tp, trans);\n}\n\nbool time_zone::prev_transition(const time_point<seconds>& tp,\n                                civil_transition* trans) const {\n  return effective_impl().PrevTransition(tp, trans);\n}\n\nstd::string time_zone::version() const {\n  return effective_impl().Version();\n}\n\nstd::string time_zone::description() const {\n  return effective_impl().Description();\n}\n\nconst time_zone::Impl& time_zone::effective_impl() const {\n  if (impl_ == nullptr) {\n    // Dereferencing an implicit-UTC time_zone is expected to be\n    // rare, so we don't mind paying a small synchronization cost.\n    return *time_zone::Impl::UTC().impl_;\n  }\n  return *impl_;\n}\n\nbool load_time_zone(const std::string& name, time_zone* tz) {\n  return time_zone::Impl::LoadTimeZone(name, tz);\n}\n\ntime_zone utc_time_zone() {\n  return time_zone::Impl::UTC();  // avoid name lookup\n}\n\ntime_zone fixed_time_zone(const seconds& offset) {\n  time_zone tz;\n  load_time_zone(FixedOffsetToName(offset), &tz);\n  return tz;\n}\n\ntime_zone local_time_zone() {\n  const char* zone = \":localtime\";\n#if defined(__ANDROID__)\n  char sysprop[PROP_VALUE_MAX];\n  if (__system_property_get(\"persist.sys.timezone\", sysprop) > 0) {\n    zone = sysprop;\n  }\n#endif\n#if defined(__APPLE__)\n  std::vector<char> buffer;\n  CFTimeZoneRef tz_default = CFTimeZoneCopyDefault();\n  if (CFStringRef tz_name = CFTimeZoneGetName(tz_default)) {\n    CFStringEncoding encoding = kCFStringEncodingUTF8;\n    CFIndex length = CFStringGetLength(tz_name);\n    buffer.resize(CFStringGetMaximumSizeForEncoding(length, encoding) + 1);\n    if (CFStringGetCString(tz_name, &buffer[0], buffer.size(), encoding)) {\n      zone = &buffer[0];\n    }\n  }\n  CFRelease(tz_default);\n#endif\n\n  // Allow ${TZ} to override to default zone.\n  char* tz_env = nullptr;\n#if defined(_MSC_VER)\n  _dupenv_s(&tz_env, nullptr, \"TZ\");\n#else\n  tz_env = std::getenv(\"TZ\");\n#endif\n  if (tz_env) zone = tz_env;\n\n  // We only support the \"[:]<zone-name>\" form.\n  if (*zone == ':') ++zone;\n\n  // Map \"localtime\" to a system-specific name, but\n  // allow ${LOCALTIME} to override the default name.\n  char* localtime_env = nullptr;\n  if (strcmp(zone, \"localtime\") == 0) {\n#if defined(_MSC_VER)\n    // System-specific default is just \"localtime\".\n    _dupenv_s(&localtime_env, nullptr, \"LOCALTIME\");\n#else\n    zone = \"/etc/localtime\";  // System-specific default.\n    localtime_env = std::getenv(\"LOCALTIME\");\n#endif\n    if (localtime_env) zone = localtime_env;\n  }\n\n  const std::string name = zone;\n#if defined(_MSC_VER)\n  free(localtime_env);\n  free(tz_env);\n#endif\n\n  time_zone tz;\n  load_time_zone(name, &tz);  // Falls back to UTC.\n  // TODO: Follow the RFC3339 \"Unknown Local Offset Convention\" and\n  // arrange for %z to generate \"-0000\" when we don't know the local\n  // offset because the load_time_zone() failed and we're using UTC.\n  return tz;\n}\n\n}  // namespace cctz\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-r-lubridate-1.7.9.2-zaa4wwct6qv33x2zhtotnatjoq6u7iop/spack-src/build/vignette.rds",
        "/tmp/vanessa/spack-stage/spack-stage-r-lubridate-1.7.9.2-zaa4wwct6qv33x2zhtotnatjoq6u7iop/spack-src/data/lakers.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-lubridate-1.7.9.2-zaa4wwct6qv33x2zhtotnatjoq6u7iop/spack-src/man/figures/logo.png"
    ],
    "total_files": 198
}