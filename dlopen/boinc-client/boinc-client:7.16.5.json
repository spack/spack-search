{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/configure.ac": "dnl -*- autoconf -*-\n\ndnl $Id$\n\ndnl not sure exactly what the minimum version is (but 2.13 wont work)\nAC_PREREQ(2.58)\n\ndnl Set the BOINC version here.  You can also use the set-version script.\nAC_INIT(BOINC, 7.17.0)\nAC_CONFIG_MACRO_DIR([m4])\nLIBBOINC_VERSION=`echo ${PACKAGE_VERSION} | sed 's/\\./:/g'`\nAC_SUBST([LIBBOINC_VERSION])\n\nWRAPPER_RELEASE=26016\nAC_SUBST([WRAPPER_RELEASE])\n\nVBOXWRAPPER_RELEASE=26202\nAC_SUBST([VBOXWRAPPER_RELEASE])\n\nAC_CANONICAL_TARGET\n\ndnl generate .tar.gz, .tar.bz2, .zip\ndnl AM_INIT_AUTOMAKE(dist-bzip2 dist-zip)\n\ndnl subdir-objects is supposed to become the default soon, but specifying it\ndnl breaks depfile generation.  We'll worry about it when that happens.\ndnl AM_INIT_AUTOMAKE(dist-zip subdir-objects)\n\nAM_INIT_AUTOMAKE(dist-zip)\n\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\nAC_CONFIG_SRCDIR(lib/shmem.cpp)\n\nAC_REVISION([$Revision$])\nREV=`echo '$Revision$' | awk \"{print $2}\"`\nRDATE=`date '+%Y.%m.%d'`\nif test -d .svn ; then\n  REV=`svn info | grep Revision | awk '{print $2}'`\n  RDATE=`svn info | grep \"Last Changed Date:\" | awk '{print $4}' | sed 's/-/./g'`\nfi\nAC_SUBST(REV)\nAC_SUBST(RDATE)\n\ndnl Are we compiling for windows\nif echo $host_os | egrep '^mingw|^winnt' > /dev/null ; then\n  isWIN32=yes\nelse\n  isWIN32=no\nfi\n\ndnl turn dependency tracking on by default\nif test x${enable_dependency_tracking} != xno ; then\n  enable_dependency_tracking=yes\nfi\n\ndnl Checks for programs.\nAC_PROG_CC\nAC_PROG_CXX\ndnl ------\ndnl Workaround for autoconf >= 2.65 backwards incompatibility\nm4_pattern_allow([AC_PROG_OBJCXX])\nm4_ifdef([AC_PROG_OBJCXX],[AC_PROG_OBJCXX],)\ndnl ------\nAC_PROG_CPP\nAC_PROG_MAKE_SET\nSAH_LINKS\nAC_LANG_PUSH(C)\nAM_PROG_CC_C_O\n\nm4_divert_once([HELP_ENABLE],\n  AS_HELP_STRING([BOINC Default enable values], [--enable-server --enable-client --enable-libraries --enable-manager: builds server, client, and libraries]))\n\nAC_ARG_ENABLE(dynamic-client-linkage,\n    AS_HELP_STRING([--enable-dynamic-client-linkage],\n                   [dynamically link the client to the boinc libraries]),\n    [dynamic_client=${enableval}],\n    [dynamic_client=no])\n\nAC_ARG_ENABLE(server,\n    AS_HELP_STRING([--disable-server],\n                   [disable building the scheduling server]),\n    [enable_server=${enableval}],\n    [enable_server=yes])\n\nAC_ARG_ENABLE(fcgi,\n    AS_HELP_STRING([--disable-fcgi],\n                   [disable building fcgi libraries or server components]),\n    [enable_fcgi=${enableval}],\n    [enable_fcgi=${enable_server}])\n\nAC_ARG_ENABLE(client,\n    AS_HELP_STRING([--disable-client],\n                   [disable building the client]),\n    [enable_client=${enableval}],\n    [enable_client=yes])\n\nAC_ARG_ENABLE(manager,\n    AS_HELP_STRING([--disable-manager],\n                   [disable building the boinc manager gui]),\n    [enable_manager=${enableval}],\n    [enable_manager=yes])\n\nAC_ARG_ENABLE(libraries,\n    AS_HELP_STRING([--disable-libraries],\n                   [disable building the boinc client and server libraries]),\n    [enable_libraries=${enableval}],\n    [enable_libraries=yes])\n\nAC_ARG_ENABLE(install-headers,\n    AS_HELP_STRING([--disable-install-headers],\n                   [if building libraries do not install the boinc library\n                    header files]),\n    [enable_install_headers=${enableval}],\n    [enable_install_headers=yes])\n\nAC_ARG_ENABLE(boinczip,\n    AS_HELP_STRING([--enable-boinczip],\n                   [enable building the boinc zip library]),\n    [enable_boinczip=${enableval}],\n    [enable_boinczip=no])\n\nAC_ARG_ENABLE(apps,\n    AS_HELP_STRING([--enable-apps],\n                   [enable building the boinc example apps]),\n    [enable_apps=${enableval}],\n    [enable_apps=no])\n\nAC_ARG_ENABLE(unit-tests,\n    AS_HELP_STRING([--enable-unit-tests],\n                   [enable building the boinc unit tests]),\n    [enable_unit_tests=${enableval}],\n    [enable_unit_tests=no])\n\nAC_ARG_ENABLE(pkg-libs,\n    AS_HELP_STRING([--enable-pkg-libs],\n                   [Builds and installs components that would be present in a\n\t\t   boinc-libs package.  This is a synonym for --disable-server\n\t\t   --disable-client --enable-libraries --disable-static\n\t\t   --disable-install-headers --disable-manager --enable-boinczip]),\n    [\n     enable_libraries=yes\n     enable_server=no\n     enable_client=no\n     enable_manager=no\n     enable_install_headers=no\n     enable_static=no\n     enable_boinczip=yes\n     enable_apps=no\n     enable_unit_tests=no\n    ],\n    [])\n\nAC_ARG_ENABLE(pkg-devel,\n    AS_HELP_STRING([--enable-pkg-devel],\n                   [Builds and installs components that would be present in a\n\t\t   boinc-devel package.  This is a synonym for --disable-server\n\t\t   --disable-client --enable-libraries --enable-install-headers\n\t\t   --disable-manger --enable-boinczip]),\n    [\n     enable_libraries=yes\n     enable_server=no\n     enable_client=no\n     enable_manager=no\n     enable_install_headers=yes\n     enable_boinczip=yes\n     enable_apps=no\n     enable_unit_tests=no\n    ],\n    [])\n\nAC_ARG_ENABLE(pkg-client,\n    AS_HELP_STRING([--enable-pkg-client],\n                   [Builds and installs components that would be present in a\n\t\t   boinc-client package. This is a synonym for --disable-server\n\t\t   --enable-client --disable-libraries --disable-manager\n    ]),\n    [\n     enable_libraries=no\n     enable_server=no\n     enable_client=yes\n     enable_manager=no\n     enable_install_headers=no\n     enable_boinczip=no\n     enable_apps=no\n     enable_unit_tests=no\n    ],\n    [])\n\nAC_ARG_ENABLE(pkg-manager,\n    AS_HELP_STRING([--enable-pkg-manager],\n                   [Builds and installs components that would be present in a boinc-manager package. This is a synonym for --disable-server --disable-client --disable-libraries --enable-manager\n    ]),\n    [\n     enable_libraries=no\n     enable_server=no\n     enable_client=no\n     enable_manager=yes\n     enable_install_headers=no\n     enable_boinczip=no\n     enable_apps=no\n     enable_unit_tests=no\n    ],\n    [])\n\nBOINC_SET_COMPILE_FLAGS\n\nconfigured_to_build=\n\nif test x$enable_client = xyes ; then\n  configured_to_build=\"client\"\n  enable_xss=\"yes\"\nfi\nif test x$enable_manager = xyes ; then\n  configured_to_build=\"${configured_to_build} manager\"\nfi\nif test x$enable_libraries = xyes ; then\n  configured_to_build=\"${configured_to_build} libraries\"\nfi\nif test x$enable_server = xyes ; then\n  configured_to_build=\"${configured_to_build} server\"\nfi\nif test x$enable_apps = xyes ; then\n  configured_to_build=\"${configured_to_build} apps\"\nfi\nif test x$enable_unit_tests = xyes ; then\n  configured_to_build=\"${configured_to_build} unit-tests\"\nfi\n\nif test -z \"${configured_to_build}\" ; then\n        AC_MSG_ERROR([\n================================================================================\nERROR: I have been told to build nothing.\n\n    Please remove one of the --disable commands from your\n    configure command line.\n\n================================================================================\n        ])\nfi\n\n\ndnl ======================================================================\ndnl some vodoo required for building portable client-binary (client, clientgui)\ndnl ======================================================================\nAC_ARG_ENABLE([client-release],\n   AS_HELP_STRING([--enable-client-release],\n        [Attempt to build a portable \"release-candidate\": this links libstd++ and\n\tother addon-libraries statically.\n\t(On GNU/Linux you might need to use gcc-3.0 for this to produce a\n\tbinary that works for glibc <= 2.2 systems. => use CC=gcc-3.0 and CXX=g++-3.0)\n\t(Default = no)]),\n    [\n       enable_client_release=yes\n       disable_static_linkage=no\n       enable_shared=no\n       AC_MSG_WARN([\n================================================================================\nWARNING:  You have requested a statically linked release build.\n\n    This option is not recommended for personal use or for building\n    an application for distribution via a package management system.\n    It probably wont work unless you have built your own static curl\n    and wxWidgets libraries that have minimal dependencies.  You may\n    also need to edit Makefiles manually in order for linking to work.\n\n    It is far better to use dynamic linkage, which can resolve most\n    library interdependencies at run time.\n\n    When the executable fails to link, and you can identify the missing\n    library, you can edit the Makefile to add it, or if there is a --with\n    option to configure, use it.\n\n    This is not easy.  It is not supported.  You have been warned.\n================================================================================\n    ])\n    echo Pausing 10 seconds...\n    sleep 10\n    ]\n    ,\n    [enable_client_release=no;disable_static_linkage=yes])\n\n\nif test \"${enable_debug}\" = yes ; then\n    build_state='Debug'\nelse\n    build_state='Release'\nfi\n\necho \"--- Configuring BOINC AC_PACKAGE_VERSION (${build_state}) ---\"\necho \"--- Build Components: (${configured_to_build}) ---\"\n\n\nAC_COPYRIGHT([\nBerkeley Open Infrastructure for Network Computing\nhttp://boinc.berkeley.edu\nCopyright (C) 2019 University of California\n\nThis is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation;\neither version 2.1 of the License, or (at your option) any later version.\n\nThis software is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nSee the GNU Lesser General Public License for more details.\n\nTo view the GNU Lesser General Public License visit\nhttp://www.gnu.org/copyleft/lesser.html\nor write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n])\n\nAC_DEFUN([KC_STRIP_LEADING_ZEROS],[m4_bregexp([$*],[^0*\\(..*\\)],\\1)])\n\nAC_DEFUN([BOINC_SET_VERSION],[dnl\nAC_SUBST([BOINC_MAJOR_VERSION],KC_STRIP_LEADING_ZEROS([$1]))\nAC_SUBST([BOINC_MINOR_VERSION],KC_STRIP_LEADING_ZEROS([$2]))\nAC_SUBST([BOINC_RELEASE],KC_STRIP_LEADING_ZEROS([$3]))\nAC_SUBST([BOINC_VERSION_STRING],AC_PACKAGE_VERSION)\n])\n\nBOINC_SET_VERSION(translit(AC_PACKAGE_VERSION, [.], [,]))\n\ndnl Version information moved to version.h so removed from config.h\ndnl AC_DEFINE_UNQUOTED([BOINC_VERSION_STRING], \"$BOINC_VERSION_STRING\", [String representation of BOINC version number])\ndnl AC_DEFINE_UNQUOTED([BOINC_MAJOR_VERSION], $BOINC_MAJOR_VERSION, [Major part of BOINC version number])\ndnl AC_DEFINE_UNQUOTED([BOINC_MINOR_VERSION], $BOINC_MINOR_VERSION, [Minor part of BOINC version number])\ndnl AC_DEFINE_UNQUOTED([BOINC_RELEASE], $BOINC_RELEASE, [Release part of BOINC version number])\n\ndnl Need to duplicate these AC_SUBST because some versions of autoconf wont\ndnl find AC_SUBST in a macro unless subsequently used in a DEFINE or SUBST\ndnl outside of a macro.  Dont ask me why.\nAC_SUBST([BOINC_VERSION_STRING])\nAC_SUBST([BOINC_MAJOR_VERSION])\nAC_SUBST([BOINC_MINOR_VERSION])\n\nAC_SUBST([TOP_BUILD_DIR], [`pwd`])\n\n## commented this out to turn all maintainer-mode features ON by default,\n## such as automatic reconfiguring on changes in Makefile.am's and configure.ac\n## AM_MAINTAINER_MODE\n\n\ndnl Check for docbook2x-man, which we use to create the manpages in\ndnl doc/manpages, and set the conditional HAVE_DOCBOOK2X_MAN to build\ndnl the manpages only if docbook2x-man is available.\nAC_PATH_PROG(DOCBOOK2X_MAN, docbook2x-man)\nAM_CONDITIONAL(HAVE_DOCBOOK2X_MAN, [test -n \"${DOCBOOK2X_MAN}\"])\n\nAC_SUBST([CLIENT_BIN_FILENAME],[boinc${EXEEXT}])\nAC_SUBST([CLIENT_CMD_BIN_FILENAME],[boinccmd${EXEEXT}])\nAC_SUBST([CLIENT_GUI_BIN_FILENAME],[boincmgr${EXEEXT}])\n\ndnl If we're running under cygwin, check whether we want to use X11 or WIN32\ndnl GUI\nBOINC_CHECK_CYGWIN\n\ndnl enable objective-C\nif test x$OBJC = x ; then\n  OBJC=\"$CC\"\nfi\nif test x$OBJCXX = x ; then\n  OBJCXX=\"$CXX\"\nfi\n_AM_DEPENDENCIES([OBJC])\nAC_SUBST(OBJC)\nAC_SUBST(OBJCXX)\nOBJCFLAGS=\"-ObjC\"\nAC_SUBST(OBJCFLAGS)\n\ndnl LT_INIT\nAC_LIBTOOL_DLOPEN\nAC_LIBTOOL_WIN32_DLL\nAC_PROG_LIBTOOL\nAC_SUBST(PICFLAGS,${lt_prog_compiler_pic})\n\nSAH_OPTION_BITNESS\n\ndnl Determine the BOINC platform given the target arch-platform-os.\nBOINC_PLATFORM\n\nif test \"${enable_client_release}\" = yes -a \"${enable_client}\" != yes; then\n   AC_MSG_WARN([--enable-client-release ignored.\n--------------------------------------------------\nThe switch --enable-client-release is only useful for building the client and will be ignored\n--------------------------------------------------])\nfi\n\n\n\ndnl Find the extensions used on shared and static libraries on this system\nSAH_LIBEXT\nSAH_DLLEXT\n\ndnl THIS IS UNNECESSARY.  THE COMPILER SHOULD SET THESE\ndnl enable debug mode on all components using standard debug flags\ndnl if test \"${enable_debug}\" = yes; then\n    dnl CXXFLAGS=\"$CXXFLAGS -DDEBUG -D_DEBUG\"\n    dnl CFLAGS=\"$CFLAGS -DDEBUG -D_DEBUG\"\ndnl\n    dnl AC_SUBST(CXXFLAGS)\n    dnl AC_SUBST(CFLAGS)\ndnl fi\n\nif test \"${enable_server}\" = yes; then\n   AC_CHECK_MYSQL\n   if test \"${no_mysql}\" = yes; then\n      AC_MSG_ERROR([\n================================================================================\nERROR: trying to build BOINC-server, but MYSQL was not be found.\n\nIf you do not want to build the server you should use --disable-server.\n\n================================================================================\n])\n   fi\nfi\n\n\n\ndnl Checks for libraries.\n\ndnl NOTE: Libraries subject to version changes, or those that might not be\ndnl installed everywhere should be linked statically when building portable\ndnl binaries.  Put libraries that should be linked statically on every platform\ndnl in the STATIC_LIB_LIST variable before calling SAH_CHECK_LIB.  (Note: Only\ndnl the '*' wildcard is supported).\nSTATIC_LIB_LIST=\"stdc++* gcc gcc_s gcc_eh atk* gtk* gdk* gmodule* gthread* gobject* glib* pango* cairo* wx* tiff* jpeg* png* Xi glut socket z expat* krb5support freetype fontconfig* resolv* idn c_nonshared gpg* gss* gnutls sasl2 sqlite3\"\n\ndnl We'll store these libs in a separate variable BOINC_EXTRA_LIBS for later\ndnl post-processing instead of the default-action, which would append\ndnl them to LIBS (note, we also dont define HAVE_LIBXXX, because\ndnl currently they arent used)\n\ndnl Special rules for specific targets go here:  It's easier to add static libs\ndnl than subtract them.  If you need to remove something from the list above,\ndnl please add it to the lists below...\ncase ${target} in\n\t*-linux*|*-k*bsd*-gnu)\tSTATIC_LIB_LIST=\"${STATIC_LIB_LIST} nsl\"\n\t;;\n\t*-solaris*)\tSTATIC_LIB_LIST=\"${STATIC_LIB_LIST} X* ssl crypto\"\n\t;;\nesac\n\nif test \"x${enable_fcgi}\" = xyes ; then\ndnl m4/boinc_check_fcgi.m4\nBOINC_CHECK_FCGI\nfi\ndnl ---------- SSL (m4/check_ssl.m4)\nAS_IF([test \"x${enable_client}\" = \"xyes\" -o \"x${enable_server}\" = \"xyes\"],\n  [CHECK_SSL])\n\ndnl ---------- libcurl (m4/libcurl.m4) ------------------------------\ndnl curl is needed for client\n\nAS_IF([test \"x${enable_client}\" = \"xyes\"],\n  [\n    LIBCURL_CHECK_CONFIG([yes], [7.17.1], [haveCurl=yes], [haveCurl=no])\n\n    AS_IF([test \"${haveCurl}\" != \"yes\"],\n      [\n        AC_MSG_ERROR([\n================================================================================\nERROR: could not find (recent enough) development-libs for libcurl.\n\n  If libcurl-dev is installed on your system, make sure that the script\n  'curl-config' is found in your PATH, and that\n  'curl-config --version' gives something recent enough (see above).\n\n  You can download libcurl from: http://curl.haxx.se/\n\n================================================================================\n        ])\n      ],\n      [\n        ## add libcurl et al. to the list of statically linked libs\n        STATIC_LIB_LIST=\"${STATIC_LIB_LIST} curl idn ssh2 crypto ssl krb5 k5crypto gssapi_krb5 com_err resolv lber ldap socket nsl z rt gcrypt gpg-error\"\n        CPPFLAGS=\"${CPPFLAGS} ${LIBCURL_CPPFLAGS}\"\n        CURL_LIB_PATHS=`echo $LIBCURL | sed 's/[^[a-zA-Z]]*-l[^ ]*//g'`\n\n        AS_IF([test \"${enable_debug}\" = \"yes\"],\n          [\n            echo \"LIBCURL = ${LIBCURL}\"\n            echo \"LIBCURL_CPPFLAGS = ${LIBCURL_CPPFLAGS}\"\n            echo \"CURL_LIB_PATHS = ${CURL_LIB_PATHS}\"\n            echo \"LDFLAGS = ${LDFLAGS}\"\n          ])\n\n        BOINC_EXTRA_LIBS=\"${BOINC_EXTRA_LIBS} ${LIBCURL}\"\n      ])\n  ])\n\nif test \"x${found_ssl}\" = \"xyes\"; then\n   BOINC_EXTRA_LIBS=\"${BOINC_EXTRA_LIBS} ${SSL_LIBS}\"\nfi\n\ndnl save the libs, since SAH_CHECK_LIB() will change them\nSAVELIBS_AAF=\"${LIBS}\"\nSAH_CHECK_LIB([cygipc], [shmget],\n    [BOINC_EXTRA_LIBS=\"${BOINC_EXTRA_LIBS} ${sah_lib_last}\"])\nSAH_CHECK_LIB([aio], [aio_fork],\n    [BOINC_EXTRA_LIBS=\"${BOINC_EXTRA_LIBS} ${sah_lib_last}\"])\nSAH_CHECK_LIB([dl], [dlopen],\n    [BOINC_EXTRA_LIBS=\"${BOINC_EXTRA_LIBS} ${sah_lib_last}\"])\nSAH_CHECK_LIB([nsl], [gethostbyname],\n    [BOINC_EXTRA_LIBS=\"${BOINC_EXTRA_LIBS} ${sah_lib_last}\"])\nSAH_CHECK_LIB([freetype], [fopen],\n    [BOINC_EXTRA_LIBS=\"${BOINC_EXTRA_LIBS} ${sah_lib_last}\"])\nSAH_CHECK_LIB([socket], [bind],\n    [BOINC_EXTRA_LIBS=\"${BOINC_EXTRA_LIBS} ${sah_lib_last}\"])\nSAH_CHECK_LIB([z], [gzopen],\n    [BOINC_EXTRA_LIBS=\"${BOINC_EXTRA_LIBS} ${sah_lib_last}\"])\nSAH_CHECK_LIB([cups], [md5_finish],\n    [BOINC_EXTRA_LIBS=\"${BOINC_EXTRA_LIBS} ${sah_lib_last}\"])\nif test \"${isWIN32}\" = \"yes\" ; then\n   SAH_CHECK_LIB([wsock32], [fopen],\n       [BOINC_EXTRA_LIBS=\"${BOINC_EXTRA_LIBS} ${sah_lib_last}\"])\n   SAH_CHECK_LIB([wsock], [fopen],\n       [BOINC_EXTRA_LIBS=\"${BOINC_EXTRA_LIBS} ${sah_lib_last}\"])\n   SAH_CHECK_LIB([comctl32], [fopen],\n       [BOINC_EXTRA_LIBS=\"${BOINC_EXTRA_LIBS} ${sah_lib_last}\"])\n   SAH_CHECK_LIB([winmm], [fopen],\n       [BOINC_EXTRA_LIBS=\"${BOINC_EXTRA_LIBS} ${sah_lib_last}\"])\n   SAH_CHECK_LIB([msimg32], [fopen],\n       [BOINC_EXTRA_LIBS=\"${BOINC_EXTRA_LIBS} ${sah_lib_last}\"])\nfi\n\nLIBS=${SAVELIBS_AAF}\n\ndnl check for pthread\nAX_PTHREAD(AC_DEFINE(HAVE_PTHREAD,1, [Have pthread]))\ndnl There are better ways to do this.\ndnl CXXFLAGS=\"$CXXFLAGS $PTHREAD_CFLAGS\"\ndnl CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\ndnl LIBS=\"$PTHREAD_LIBS $LIBS\"\n\n# find the install directories in case we need them.\nif test \"x${prefix}\" = \"xNONE\" -o -z \"${prefix}\" ; then\n  prefix=\"${ac_default_prefix}\"\nfi\nif test \"x${exec_prefix}\" = \"xNONE\" -o -z \"${exec_prefix}\" ; then\n  exec_prefix=\"${prefix}\"\nfi\nif test \"x${bindir}\" = \"xNONE\" -o -z \"${bindir}\" ; then\n  bindir=\"${exec_prefix}/bin\"\nfi\nif test \"x${libdir}\" = \"xNONE\" -o -z \"${libdir}\" ; then\n  bindir=\"${exec_prefix}/lib\"\nfi\n\nAC_DEFINE_UNQUOTED(BOINC_PREFIX,\"`eval echo ${prefix}`\",[Directory tree where BOINC will be installed])\nAC_DEFINE_UNQUOTED(BOINC_EXECPREFIX,\"`eval echo ${bindir}`\",[Directory where BOINC executables will be installed])\nAC_DEFINE_UNQUOTED(BOINC_LIBDIR,\"`eval echo ${libdir}`\",[Directory where BOINC libraries will be installed])\n\ndnl ---------- decide wether to build the graphical boinc-api libs or not\ndnl check for X11\nAC_PATH_X\nAC_PATH_XTRA\n\ndnl check for GL library\nAX_CHECK_GL\nAX_CHECK_GLU\n\ndnl check for glut and prerequesites to the glut-test: libXmu and libXi\ndnl or on windows libGDI32 and libWinMM\nAC_CHECK_LIB([Xmu], [fopen], [have_Xmu=\"yes\"], [have_Xmu=\"no\"])\nAC_CHECK_LIB([Xi], [fopen], [have_Xi=\"yes\"], [have_Xi=\"no\"])\nif test \"${isWIN32}\" = \"yes\" ; then\n  AC_CHECK_LIB([gdi32], [fopen])\n  AC_CHECK_LIB([winmm], [fopen])\nfi\n\nAX_CHECK_GLUT\nif test \"X${no_x}\" != \"Xyes\" -a \"$no_glut\" = yes; then\n   if test \"$have_Xmu\" = no; then\n   \tAC_MSG_WARN([Test for glut-dev might have failed because of missing libXmu-dev!])\n   fi\n   if test \"$have_Xi\" = no; then\n   \tAC_MSG_WARN([Test for glut-dev might have failed because of missing libXi-dev!])\n   fi\nfi\n\nif test \"$no_gl\" = yes -o \"$no_glu\" = yes -o \"$no_glut\" = yes; then\n   have_glut=no\n   AC_MSG_WARN([\n================================================================================\nWARNING: Development libraries and headers (\"-dev\") of {openGL, GLU, glut} needed!\n\nThe GL, GLU and glut libraries are required in order to build the graphical parts\nof the BOINC application API library.\n\n==> only building non-graphical parts of the BOINC API Library for now.\n\nHINT: on MacOS X/Darwin you might consider running configure with the option\n      './configure --with-apple-opengl-framework'\n      in order to use the Mac-native openGL framework\n\n================================================================================\n       ])\nelse\n   have_glut=yes\n   echo \"DEBUG: GLUT_CFLAGS = $GLUT_CFLAGS\" >&5\n   echo \"DEBUG: GLUT_LIBS = $GLUT_LIBS\" >&5\n\n   AC_CHECK_HEADERS([gl.h glu.h glut.h glaux.h GL/gl.h GL/glu.h GL/glut.h GL/glaux.h OpenGL/gl.h OpenGL/glu.h OpenGL/glut.h OpenGL/glaux.h GLUT/glut.h MesaGL/gl.h MesaGL/glu.h MesaGL/glut.h MesaGL/glaux.h libnotify/notify.h gtk/gtk.h])\n\n   AC_CHECK_LIB([jpeg], [jpeg_start_compress],[have_jpeg=1],[have_jpeg=0])\n   AC_CHECK_HEADER([jpeglib.h],[have_jpeg=1],[have_jpeg=0])\n\n   if test \"$have_jpeg\" != 1 ; then\n\tAC_MSG_WARN([\n================================================================================\nWARNING: libjpeg.a/jpeglib.h not found.\n\nBOINC's openGL graphics-API needs libjpeg !\nsee http://www.ijg.org/\n\n==> I will continue building the non-graphical parts of the BOINC API library.\n\nHINT: on MacOSX/Darwin these libs/includes are sometimes found in '/sw/' (if using fink)\n      or '/opt/local' (if using port).\n================================================================================\n\t]);\n   fi\nfi\n\nAM_CONDITIONAL(BUILD_GRAPHICS_API, [ test \"$have_glut\" = yes -a \"$have_jpeg\" = 1])\n\ndnl check for X screen saver lib (X-based idle detection on Linux)\nif test \"$enable_xss\" = yes; then\n    AC_CHECK_LIB([Xss], [XScreenSaverAllocInfo], [have_Xss=\"yes\"], [have_Xss=\"no\"])\n    AC_CHECK_HEADER([X11/extensions/scrnsaver.h], [have_Xss=\"yes\"], [have_Xss=\"no\"])\n    if test \"$have_Xss\" = no; then\n        AC_MSG_WARN([libxss missing, disabling X ScreenSaver user idle detection])\n    fi\nfi\n\ndnl --------------------------------------------------------------------------------\ndnl put double-inclusion protection into config.h\nAH_TOP([\n/* double-inclusion protection for config.h */\n#ifndef BOINC_CONFIG_H\n#define BOINC_CONFIG_H\n\n/* Version defines are now in version.h */\n#include \"version.h\"\n\n])\nAH_BOTTOM([\n\n#ifndef HAVE_RES_INIT\n#define res_init() (0)\n#endif\n\n#include \"project_specific_defines.h\"\n\n/* end double-inclusion protection for config.h */\n#endif /* #ifndef BOINC_CONFIG_H */\n])\ndnl ----------------------------------------------------------------------\n\ndnl Checks for header files.\nAC_HEADER_DIRENT\nAC_HEADER_STDC\nAC_HEADER_SYS_WAIT\nAC_HEADER_TIME\nAC_TYPE_SIGNAL\nif test \"${isWIN32}\" = \"yes\" ; then\n  AC_CHECK_HEADERS(winsock2.h winsock.h windows.h ws2tcpip.h winternl.h crtdbg.h)\nfi\nAC_CHECK_HEADERS([sys/types.h sys/un.h arpa/inet.h dirent.h grp.h fcntl.h inttypes.h stdint.h memory.h netdb.h netinet/in.h netinet/tcp.h netinet/ether.h net/if.h net/if_arp.h signal.h strings.h sys/auxv.h sys/file.h sys/fcntl.h sys/ipc.h sys/ioctl.h sys/msg.h sys/param.h sys/resource.h sys/select.h sys/sem.h sys/shm.h sys/sockio.h sys/socket.h sys/stat.h sys/statvfs.h sys/statfs.h sys/systeminfo.h sys/time.h sys/types.h sys/utsname.h sys/vmmeter.h sys/wait.h unistd.h utmp.h errno.h procfs.h ieeefp.h setjmp.h float.h sal.h execinfo.h xlocale.h])\n\nsave_cxxflags=\"${CXXFLAGS}\"\nsave_cppflags=\"${CPPFLAGS}\"\nCXXFLAGS=\"${CXXFLAGS} -msse3\"\nCPPFLAGS=\"${CPPFLAGS} -msse3\"\nAC_CHECK_HEADERS([intrin.h x86intrin.h pmmintrin.h xmmintrin.h emmintrin.h])\nCXXFLAGS=\"${save_cxxflags} -mavx\"\nCPPFLAGS=\"${save_cppflags} -mavx\"\nAC_CHECK_HEADERS([immintrin.h avxintrin.h])\n\nAC_CHECK_DECLS([_xgetbv, xgetbv, __xgetbv, cpuid, _cpuid, __cpuid],\n    [],[],[[\n#if HAVE_INTRIN_H\n# include <intrin.h>\n#endif\n#if HAVE_IMMINTRIN_H\n# include <immintrin.h>\n#endif\n#if HAVE_AVXINTRIN_H\n# include <avxintrin.h>\n#endif\n#if HAVE_X86INTRIN_H\n# include <x86intrin.h>\n#endif\n#if HAVE_PMMINTRIN_H\n# include <pmmintrin.h>\n#endif\n#if HAVE_XMMINTRIN_H\n# include <xmmintrin.h>\n#endif\n#if HAVE_EMMINTRIN_H\n# include <emmintrin.h>\n#endif\n]])\n\nAC_MSG_CHECKING(if assembler supports xgetbv)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(,[asm (\"xgetbv\");])],\n  AC_DEFINE([ASM_SUPPORTS_XGETBV],1,[Define to 1 if the xgetbv instruction can be used in inline assember])\n  AC_MSG_RESULT(yes),\n  AC_MSG_RESULT(no)\n)\n\nCXXFLAGS=\"${save_cxxflags}\"\nCPPFLAGS=\"${save_cppflags}\"\n\nif test \"${isWIN32}\" = \"yes\" ; then\n  AC_CHECK_HEADERS([winhttp.h ntapi.h ddk/ntapi.h dbghelp.h delayimp.h],[], [], [[\n  #if HAVE_WINDOWS_H\n  # include <windows.h>\n  #endif\n  ]])\n\n  AC_CHECK_HEADER(security.h, [\n  AC_DEFINE(HAVE_SECURITY_H,1,[Define to 1 if your compiler has the security.h header file])\n  AC_DEFINE(SECURITY_WIN32,1,[Define to 1 if your compiler has the security.h header file])\n  ], [], [[\n  #define SECURITY_WIN32 1\n  #if HAVE_WINDOWS_H\n  # include <windows.h>\n  #endif\n  ]])\n\n  AC_CHECK_TYPES([SYSTEM_PROCESSES, CLIENT_ID, VM_COUNTERS, SYSTEM_THREADS, THREAD_STATE, THREAD_WAIT_REASON],[],[],[[\n  #if HAVE_WINDOWS_H\n  #include <windows.h>\n  #endif\n  #ifdef HAVE_WINTERNL_H\n  #include <winternl.h>\n  #elif defined(HAVE_DDK_NTAPI_H)\n  #include <ddk/ntapi.h>\n  #elif defined(HAVE_NTAPI_H)\n  #include <ntapi.h>\n  #endif\n  ]])\nfi\n\nAC_CHECK_HEADER(nvapi.h, [\n  AC_DEFINE(HAVE_NVAPI_H,1,[Define to 1 if your compiler has the nvapi.h header file])\n  ],[],[[\n  #ifdef HAVE_WINDOWS_H\n  #include <windows.h>\n  #endif\n  #ifdef HAVE_SAL_H\n  #include \"sal.h\"\n  #endif\n  #ifndef __success\n  #define __success(x)\n  #endif\n  #ifndef __in\n  #define __in\n  #endif\n  #ifndef __out\n  #define __out\n  #endif\n  #ifndef __in_ecount\n  #define __in_ecount(x)\n  #endif\n  #ifndef __out_ecount\n  #define __out_ecount(x)\n  #endif\n  #ifndef __in_opt\n  #define __in_opt\n  #endif\n  #ifndef __out_opt\n  #define __out_opt\n  #endif\n  #ifndef __inout\n  #define __inout\n  #endif\n  #ifndef __inout_opt\n  #define __inout_opt\n  #endif\n  #ifndef __inout_ecount\n  #define __inout_ecount(x)\n  #endif\n  #ifndef __inout_ecount_full\n  #define __inout_ecount_full(x)\n  #endif\n  #ifndef __inout_ecount_part_opt\n  #define __inout_ecount_part_opt(x,y)\n  #endif\n  #ifndef __inout_ecount_full_opt\n  #define __inout_ecount_full_opt(x,y)\n  #endif\n  #ifndef __out_ecount_full_opt\n  #define __out_ecount_full_opt(x)\n  #endif\n]])\n\n\nAC_CHECK_TYPES([socklen_t],[],[],[[\n#if HAVE_WINDOWS_H\n#include <windows.h>\n#endif\n#ifdef HAVE_SYS_WINSOCK2_H\n#include <winsock2.h>\n#endif\n#ifdef HAVE_WS2TCPIP_H\n#include <ws2tcpip.h>\n#endif\n#ifdef HAVE_WINSOCK_H\n#include <winsock.h>\n#endif\n#ifdef HAVE_WINHTTP_H\n#include <winhttp.h>\n#endif\n#ifdef HAVE_STDINT_H\n#include <stdint.h>\n#endif\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_SOCKET_H\n#include <sys/socket.h>\n#endif\n#ifdef HAVE_NETINET_IN_H\n#include <netinet/in.h>\n#endif\n#ifdef HAVE_ARPA_INET_H\n#include <arpa/inet.h>\n#endif\n#ifdef HAVE_NET_IF_H\n#include <net/if.h>\n#endif\n]])\n\nAC_CHECK_HEADER(net/if.h, [], [], [[\n#if HAVE_SYS_SOCKET_H\n# include <sys/socket.h>\n#endif\n]])\n\nAC_CHECK_HEADER(net/if_arp.h, [], [], [[\n#if HAVE_SYS_SOCKET_H\n# include <sys/socket.h>\n#endif\n]])\n\nAC_CHECK_HEADERS(sys/sysctl.h sys/mount.h sys/swap.h sys/sensors.h, [], [], [[\n#ifdef HAVE_SYS_PARAM_H\n# include <sys/param.h>\n#endif\n]])\n\nAC_CHECK_HEADER(resolv.h, [], [], [[\n#ifdef HAVE_NETINET_IN_H\n# include <netinet/in.h>\n#endif\n]])\n\nAC_CHECK_HEADERS(netinet/if_ether.h,[],[],[[\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_SOCKET_H\n#include <sys/socket.h>\n#endif\n#ifdef HAVE_NETINET_IN_H\n#include <netinet/in.h>\n#endif\n#ifdef HAVE_ARPA_INET_H\n#include <arpa/inet.h>\n#endif\n#ifdef HAVE_NET_IF_H\n#include <net/if.h>\n#endif\n]])\n\nAC_CHECK_TYPES([struct lifconf, struct lifreq, struct ifconf, struct ifreq, struct ether_addr],[],[],[[\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_SOCKET_H\n#include <sys/socket.h>\n#endif\n#ifdef HAVE_NETINET_IN_H\n#include <netinet/in.h>\n#endif\n#ifdef HAVE_ARPA_INET_H\n#include <arpa/inet.h>\n#endif\n#ifdef HAVE_NET_IF_H\n#include <net/if.h>\n#endif\n#ifdef HAVE_NETINET_IF_ETHER_H\n#include <netinet/if_ether.h>\n#endif\n#ifdef HAVE_NETINET_ETHER_H\n#include <netinet/ether.h>\n#endif\n]])\n\ndnl Unfortunately on some 32 bit systems there is a problem with wx-widgets\ndnl configuring itself for largefile support.  On these systems largefile\ndnl support breaks C++ compiles by defining away many of the C standard library\ndnl routines that should reside in namespace std::.  In order to get around\ndnl problem first we have to check the largefile support macros.  Later we will\ndnl use the macro SAH_LARGEFILE_BREAKS_CXX to check for the breakage.  If\ndnl if breakage is found LARGEFILE_BREAKS_CXX is defined in config.h.  This\ndnl define is checked in std_fixes.h and the appropriate functions are defined\ndnl in order to solve the problem.\nAC_SYS_LARGEFILE\n\nAC_LANG_PUSH(C++)\nSAH_LARGEFILE_BREAKS_CXX\nSAH_HEADER_STDCXX\nSAH_CHECK_NAMESPACES\nAH_TEMPLATE([HAVE_STD_MIN],[Define to 1 if min is in namespace std::])\nAH_TEMPLATE([HAVE_STD_MAX],[Define to 1 if max is in namespace std::])\nAH_TEMPLATE([HAVE_STD_LOCALE],[Define to 1 if locale is in namespace std::])\nAH_TEMPLATE([HAVE_STD_TRANSFORM],[Define to 1 if transform is in namespace std:: ])\nSAH_FUNCS_IN_NAMESPACE([['min(0,0)'] ['max(0,0)'] ['transform((char *)0,(char *) 0,(char *)0,(int(*)(int))malloc)'] ['locale(\"\")']],std)\nAC_LANG_POP\n\ndnl Checks for library functions.\nAC_PROG_GCC_TRADITIONAL\nAC_FUNC_VPRINTF\nAC_CHECK_FUNCS([ether_ntoa setpriority sched_setscheduler strlcpy strlcat strcasestr strcasecmp sigaction getutent setutent getisax strdup _strdup strdupa _strdupa daemon stat64 putenv setenv unsetenv res_init strtoull localtime localtime_r gmtime gmtime_r uselocale _configthreadlocale])\n\nAC_CHECK_DECLS([_fpreset, fpreset],\n    [],[],[[\n#include <stdio.h>\n#if HAVE_SYS_TYPES_H\n# include <sys/types.h>\n#endif\n#if HAVE_SYS_STAT_H\n# include <sys/stat.h>\n#endif\n#if STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#else\n# if HAVE_STDLIB_H\n#  include <stdlib.h>\n# endif\n#endif\n#if HAVE_STRING_H\n# if !STDC_HEADERS && HAVE_MEMORY_H\n#  include <memory.h>\n# endif\n# include <string.h>\n#endif\n#if HAVE_STRINGS_H\n# include <strings.h>\n#endif\n#if HAVE_INTTYPES_H\n# include <inttypes.h>\n#endif\n#if HAVE_STDINT_H\n# include <stdint.h>\n#endif\n#if HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n#ifdef HAVE_WINDOWS_H\n#include <windows.h>\n#endif\n#ifdef HAVE_FLOAT_H\n#include <float.h>\n#endif\n#ifdef HAVE_IEEEFP_H\n#include <ieeefp.h>\n#endif\n#ifdef HAVE_MATH_H\n#include <math.h>\n#endif\n]])\n\ndnl Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_TYPE_SIZE_T\nAC_STRUCT_TM\nAC_STRUCT_TIMEZONE\n\ndnl utmp file location\nfor f in /etc/utmp /var/adm/utmp /var/run/utmp; do\n    if test -f $f; then\n        utmp_file=$f\n    fi\ndone\nif test -n \"$utmp_file\"; then\n    AC_DEFINE_UNQUOTED(UTMP_LOCATION, \"$utmp_file\", utmp file location)\nfi\n\ndnl Check for /proc/self/psinfo (Solaris)\nif test -e \"/proc/self/psinfo\"; then\n    AC_DEFINE(HAVE__PROC_SELF_PSINFO, 1, [Define to 1 if /proc/self/psinfo exists])\nfi\n\ndnl Check for /proc/self/stat (Linux)\nif test -e \"/proc/self/stat\"; then\n    AC_DEFINE(HAVE__PROC_SELF_STAT, 1, [Define to 1 if /proc/self/stat exists])\nfi\n\ndnl Check for /proc/meminfo (Linux)\nif test -e \"/proc/meminfo\"; then\n    AC_DEFINE(HAVE__PROC_MEMINFO, 1, [Define to 1 if /proc/meminfo exists])\nfi\n\ndnl ---------- wxWidgets --------------------------------------------------\nif test \"${enable_manager}\" = yes ; then\n  BOINC_OPTIONS_WXWIDGETS([3.0.0])\nelse\n  AM_CONDITIONAL([GUI_GTK], false)\nfi\n\ndnl ---------- libNotify --------------------------------------------------\nif test \"${enable_manager}\" = yes ; then\n  PKG_CHECK_MODULES(LIBNOTIFY, [libnotify])\nfi\n\ndnl ---------- Sqlite3 ----------------------------------------------------\nif test \"${enable_manager}\" = yes ; then\n  AM_PATH_SQLITE3\nfi\n\ndnl ---------- XCB --------------------------------------------------------\nif test \"${enable_manager}\" = yes; then\n    PKG_CHECK_MODULES(XCB,xcb,have_Xcb=\"yes\",[echo \"WARNING: Xcb not found, x11_screensaver will not be built\"])\n    PKG_CHECK_MODULES(XCBATOM,xcb-atom,have_Xcbatom=\"yes\",[echo \"WARNING: Xcb-atom not found, x11_screensaver will not be built\"])\nfi\nAM_CONDITIONAL(BUILD_X11_SCREENSAVER, [ test \"$have_Xcb\" = yes -a \"$have_Xcbatom\" = yes ])\ndnl -----------------------------------------------------------------------\n\ndnl Heres another way to set up host-specific stuff\nAM_CONDITIONAL(OS_DARWIN, [echo $host_os | grep '^darwin' > /dev/null])\nif echo $host_os | grep '^darwin' >/dev/null ; then\n  if test `uname -r | sed 's/\\.//g'` -lt 800 ; then\n    AC_DEFINE_UNQUOTED(DARWIN_10_3, [1],[Define to 1 if compiling under OS X 10.3 or earlier])\n  fi\nfi\n\nAM_CONDITIONAL(OS_LINUX, [echo $host_os | grep '^linux' > /dev/null])\nAM_CONDITIONAL(OS_FREEBSD, [echo $host_os | grep '^freebsd' > /dev/null])\ndnl In case anyone wants to try building the windows code using mingw!\nAM_CONDITIONAL(OS_WIN32, [echo $host_os | egrep '^mingw|^winnt' > /dev/null])\nAM_CONDITIONAL(OS_WIN32_MINGW, [echo $host_os | grep '^mingw' > /dev/null])\ndnl or OS2\nAM_CONDITIONAL(OS_OS2, [echo $host_os | grep '^os2' > /dev/null])\nAM_CONDITIONAL(OS_ARM_LINUX, [echo $host_alias | grep '^arm-linux' > /dev/null])\n\ndnl Whether to build fcgi components\nAM_CONDITIONAL(ENABLE_FCGI,[test \"${enable_fcgi}\" = yes])\n\ndnl tell automake about whether to build client and/or server\nAM_CONDITIONAL(DYNAMIC_CLIENT, [test \"${dynamic_client}\" = yes])\nAM_CONDITIONAL(ENABLE_SERVER, [test \"${enable_server}\" = yes])\nAM_CONDITIONAL(ENABLE_CLIENT, [test \"${enable_client}\" = yes])\nAM_CONDITIONAL(ENABLE_MANAGER, [ test \"x${ac_cv_have_wxwidgets}\" = xyes -a \"${enable_manager}\" = yes ])\nAM_CONDITIONAL(ENABLE_LIBRARIES, [test \"${enable_libraries}\" = yes])\nAM_CONDITIONAL(ENABLE_BOINCZIP, [test \"${enable_boinczip}\" = yes])\nAM_CONDITIONAL(ENABLE_APPS, [test \"${enable_apps}\" = yes])\nAM_CONDITIONAL(ENABLE_UNIT_TESTS, [test \"${enable_unit_tests}\" = yes])\nAM_CONDITIONAL(ENABLE_BOINCCRYPT, [test \"x${enable_server}\" = xyes  || test \"x${enable_client}\" = xyes ])\nAM_CONDITIONAL(INSTALL_HEADERS, [test \"${enable_install_headers}\" = yes])\nAM_CONDITIONAL(HAVE_CUDA_LIB, [test \"${enable_client}\" = yes -a -f ./coprocs/CUDA/posix/${boinc_platform}/libcudart.so])\n\ndnl ======================================================================\ndnl some more vodoo required for building portable client-binary (client, clientgui)\ndnl ======================================================================\n\nCLIENTLIBS=\n\nSAH_CHECK_LIB([m],[sin], [\n    AC_DEFINE([HAVE_LIBM],[1],[Define to 1 if you have the math library])\n    CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n   echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\nif test \"$enable_release_client\" = yes -a \"$disable_static_linkage\" = no ; then\n    SAH_CHECK_LIB([c],[atexit], [\n        AC_DEFINE([HAVE_LIBC],[1],[Define to 1 if you have the c library])\n        CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n       echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\nfi\n    SAH_CHECK_LIB([pthread],[pthread_join],[\n        AC_DEFINE([HAVE_LIBPTHREAD],[1],[Define to 1 if you have the pthread library])\n        CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n       echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\nif test \"$enable_release_client\" = yes -a \"$disable_static_linkage\" = no ; then\nif test x${ac_cv_cxx_compiler_gnu} != xno ; then\n  SAH_CHECK_LIB([gcc_eh],[_Unwind_Resume],[\n    AC_DEFINE([HAVE_LIBGCC_EH],[1],[Define to 1 if you have the gcc_eh library])\n    CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n   echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n  SAH_CHECK_LIB([gcc],[sscanf], [\n    AC_DEFINE([HAVE_LIBGCC],[1],[Define to 1 if you have the gcc library])\n    CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n   echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n  SAH_CHECK_LIB([c_nonshared],[fopen],[\n    AC_DEFINE([HAVE_LIBC_NONSHARED],[1],[Define to 1 if you have the c_nonshared library])\n    CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n   echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n  SAH_CHECK_LIB([stdc++],[sscanf],[\n    AC_DEFINE([HAVE_LIBSTDC__],[1],[Define to 1 if you have the stdc++ library])\n    CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n   echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\nfi\nfi\nSAH_CHECK_LIB([nvapi],[fopen],[\n    AC_DEFINE([HAVE_LIBNVAPI],[1],[Define to 1 if you have the NVIDIA API library])\n    CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n   echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\nif test ${isWIN32} = \"yes\" ; then\n  SAH_CHECK_LIB([gdi32],[fopen],[\n      AC_DEFINE([HAVE_LIBWGDI32],[1],[Define to 1 if you have the gdi32 library])\n      CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n     echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n     found_msvcrt=no\n  SAH_CHECK_LIB([msvcr110],[fopen],[\n      found_msvcrt=yes\n      AC_DEFINE([HAVE_LIBMSVCR110],[1],[Define to 1 if you have the msvcr110 library])\n      AC_DEFINE([HAVE_MSVCRT],[1],[Define to 1 if you have a visual c runtime library])\n      CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n     echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n  if test $found_msvcrt = no ; then\n    SAH_CHECK_LIB([msvcr100],[fopen],[\n        found_msvcrt=yes\n        AC_DEFINE([HAVE_LIBMSVCR100],[1],[Define to 1 if you have the msvcr100 library])\n        AC_DEFINE([HAVE_MSVCRT],[1],[Define to 1 if you have a visual c runtime library])\n        CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n    echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n  fi\n  if test $found_msvcrt = no ; then\n    SAH_CHECK_LIB([msvcr90d],[fopen],[\n        found_msvcrt=yes\n        AC_DEFINE([HAVE_LIBMSVCR90D],[1],[Define to 1 if you have the msvcr90d library])\n        AC_DEFINE([HAVE_MSVCRT],[1],[Define to 1 if you have a visual c runtime library])\n        CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n    echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n  fi\n  if test $found_msvcrt = no ; then\n    SAH_CHECK_LIB([msvcr90],[fopen],[\n        found_msvcrt=yes\n        AC_DEFINE([HAVE_LIBMSVCR90],[1],[Define to 1 if you have the msvcr90 library])\n        AC_DEFINE([HAVE_MSVCRT],[1],[Define to 1 if you have a visual c runtime library])\n        CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n    echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n  fi\n  SAH_CHECK_LIB([wininet],[fopen],[\n      AC_DEFINE([HAVE_LIBWININET],[1],[Define to 1 if you have the wininet library])\n      CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n     echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n  SAH_CHECK_LIB([wsock32],[fopen],[\n      AC_DEFINE([HAVE_LIBWSOCK32],[1],[Define to 1 if you have the wsock32 library])\n      CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n     echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n  SAH_CHECK_LIB([userenv],[fopen],[\n      AC_DEFINE([HAVE_LIBUSERENV],[1],[Define to 1 if you have the userenv library])\n      CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n     echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n  SAH_CHECK_LIB([iphlpapi],[fopen],[\n      AC_DEFINE([HAVE_LIBIPHLPAPI],[1],[Define to 1 if you have the iphlpapi library])\n      CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n     echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n  SAH_CHECK_LIB([sensapi],[fopen],[\n      AC_DEFINE([HAVE_LIBSENSAPI],[1],[Define to 1 if you have the sensapi library])\n      CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n     echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n  SAH_CHECK_LIB([wtsapi32],[fopen],[\n      AC_DEFINE([HAVE_LIBWTSAPI32],[1],[Define to 1 if you have the wtsapi32 library])\n      CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n     echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n  SAH_CHECK_LIB([winhttp],[fopen],[\n      AC_DEFINE([HAVE_LIBWINHTTP],[1],[Define to 1 if you have the WinHttp library])\n      CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n     echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n  SAH_CHECK_LIB([secur32],[fopen],[\n      AC_DEFINE([HAVE_LIBSECUR32],[1],[Define to 1 if you have the secur32 library])\n      CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n     echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\nfi\n\nsvlibs=$LIBS\nif test \"${ac_cv_func_res_init}\" != \"yes\" ; then\n  AC_CHECK_LIB([resolv],[res_init],[\n    ac_cv_func_res_init=\"yes\"\n    AC_CHECK_FUNCS([res_init])\n  ])\nfi\nLIBS=$svlibs\n\nif test \"$enable_xss\" = yes -a \"$have_Xss\" = yes; then\n    SAH_CHECK_LIB([Xss],[XScreenSaverAllocInfo],[\n        AC_DEFINE([HAVE_XSS],[1],[Define to 1 if you have xss library])\n        CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n    SAH_CHECK_LIB([X11],[XOpenDisplay],[\n        AC_DEFINE([HAVE_X11],[1],[Define to 1 if you have X11 library])\n        CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n    echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\nfi\n\nSAH_CHECK_LIB([resolv],[res_query],[\n    AC_DEFINE([HAVE_RESOLV],[1],[Define to 1 if you have the resolv library])\n    CLIENTLIBS=\"${sah_lib_last} ${CLIENTLIBS}\"])\n   echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n\nif test \"${disable_static_linkage}\" != yes -a \"${enable_client_release}\" = yes; then\n\n   echo \"----------\"\n   echo \"NOTE: Building portable client binaries\"\n   echo \"----------\"\n\nif test x$ac_cv_cxx_compiler_gnu != xno ; then\nSAH_CHECK_LDFLAG([-nodefaultlibs],[CLIENTLIBS=\"-nodefaultlibs ${CLIENTLIBS}\"])\n   echo DEBUG: CLIENTLIBS=${CLIENTLIBS} >&5\n\nSAH_CHECK_LDFLAG([-lSystemStubs],[LIBS=\"${LIBS} -lSystemStubs\"])\n   echo DEBUG: LIBS=${LIBS} >&5\nfi\n\nfi\n\nAM_CONDITIONAL([ENABLE_CLIENT_RELEASE],[ test \"${disable_static_linkage}\" != yes -a \"${enable_client_release}\" = yes ])\nAM_CONDITIONAL([BUILD_STATIC_LIBS],[test \"x${enable_static}\" != xno])\n\nAC_SUBST(CLIENTLIBS)\n\n## --------------------\n## some more tweaking to turn non-standard libs into statically linked ones\n\nif test \"${enable_debug}\" = \"yes\" ; then\n    CLIENTGUIFLAGS=\"${CLIENTGUIFLAGS} -D_DEBUG -DDEBUG\"\nelse\n    # disable wxWidgets debug support which is by default enabled since 2.9.1\n    CLIENTGUIFLAGS=\"${CLIENTGUIFLAGS} -DNDEBUG\"\nfi\n\nCLIENTGUILIBS=\"${WX_LIBS} ${SQLITE3_LIBS}\"\n\nif test \"${enable_client_release}\" = \"yes\" ; then\n   if test \"x${WX_LIBS_STATIC}\" = \"x\" ; then\n     WX_LIBS_STATIC=\"${WX_LIBS}\"\n   fi\n   SAH_STATICIZE_LDFLAGS([${WX_LIBS_STATIC} ${SQLITE3_LIBS} ${GTK_LIBS}],[CLIENTGUILIBS])\n   SAH_STATICIZE_LDFLAGS([${GLUT_LIBS}],[GLUT_LIBS])\n   SAH_STATICIZE_LDFLAGS([${BOINC_EXTRA_LIBS}],[BOINC_EXTRA_LIBS])\n\n\n\n   ## NOTE: its *extremely* important to always compile with __NO_CTYPE\n   ## defined, because this avoids GLIBC_2.3 symbols being pulled in via ctype.h-macros,\n   CPPFLAGS=\"${CPPFLAGS} -D__NO_CTYPE\"\nfi\n\nAC_SUBST(BOINC_EXTRA_LIBS)\nAC_SUBST(CLIENTGUIFLAGS)\nAC_SUBST(CLIENTGUILIBS)\ndnl ======================================================================\ndnl Oh! the joys of standards!\nAC_PATH_PROG(WHOAMI,[whoami logname],\"not found\")\nif test \"x${WHOAMI}\" = \"xnot found\" ; then\n  who am i 2>/dev/null && WHOAMI=\"who am i | awk '{print $1}'\"\nfi\nif test \"x${WHOAMI}\" = \"xnot found\"  -a -x \"/usr/ucb/ps\" ; then\n  WHOAMI=\"/usr/ucb/ps u $$ | tail -1 | awk '{print $1}'\"\nfi\nif test  \"x${WHOAMI}\" = \"xnot found\" ; then\n  WHOAMI=\"ps u $$ | tail -1 | awk '{print $1}'\"\nfi\n\n\ndnl Some info about the person compiling used for making some packages.\nLOGNAME=`${WHOAMI}`\nFULLNAME=`grep ^${LOGNAME}: /etc/passwd | head -n 1 | awk -F: '{print $5}'`\nif test -z \"${FULLNAME}\" ; then\n  FULLNAME=`ypcat passwd 2>/dev/null | grep ^${LOGNAME}: | head -n 1 | awk -F: '{print $5}'`\nfi\nif test -z \"${FULLNAME}\" ; then\n  FULLNAME=`nidump passwd / 2>/dev/null | grep ^${LOGNAME}: | head -n 1 | awk -F: '{print $5}'`\nfi\nif test -z \"${FULLNAME}\" ; then\n  FULLNAME=$LOGNAME\nfi\nAC_SUBST(LOGNAME)\nAC_SUBST(FULLNAME)\n\nAC_CONFIG_FILES([\n                 version.h\n                 api/Makefile\n                 apps/Makefile\n                 clientgui/Makefile\n                 clientgui/res/Makefile\n                 clientscr/Makefile\n                 client/Makefile\n                 client/win/boinc_path_config.py:py/boinc_path_config.py.in\n                 client/scripts/Makefile\n                 client/scripts/boinc-client\n                 client/scripts/boinc-client.service\n                 db/Makefile\n                 doc/Makefile\n                 doc/manpages/Makefile\n                 html/Makefile\n                 lib/Makefile\n                 locale/Makefile\n                 Makefile\n                 py/Boinc/version.py\n                 py/Makefile\n                 py/boinc_path_config.py:py/boinc_path_config.py.in\n                 py/setup.py\n                 sched/boinc_path_config.py:py/boinc_path_config.py.in\n                 sched/Makefile\n                 packages/generic/sea/Makefile\n                 packages/solaris/CSW/Makefile\n                 packages/solaris/CSW/boincclient/Makefile\n                 packages/solaris/CSW/boincclient/pkginfo\n                 packages/solaris/CSW/boincclient/prototype\n                 packages/solaris/CSW/boincdevel/Makefile\n                 packages/solaris/CSW/boincdevel/pkginfo\n                 packages/solaris/CSW/boincdevel/prototype\n                 packages/solaris/CSW/boinclibs/Makefile\n                 packages/solaris/CSW/boinclibs/pkginfo\n                 packages/solaris/CSW/boinclibs/prototype\n                 packages/solaris/CSW/boincmanager/Makefile\n                 packages/solaris/CSW/boincmanager/pkginfo\n                 packages/solaris/CSW/boincmanager/prototype\n                 samples/Makefile\n                 tools/boinc_path_config.py:py/boinc_path_config.py.in\n                 tools/Makefile\n                 vda/Makefile\n                 zip/Makefile\n                 zip/zip/Makefile\n                 zip/unzip/Makefile\n                 m4/Makefile\n\t\t])\n\n\ndnl AC_CONFIG_HEADER([config.h])\nAC_CONFIG_HEADERS([config.h])\n\nAC_OUTPUT\n\necho \"--- Configuring BOINC AC_PACKAGE_VERSION (${build_state}) ---\"\necho \"--- Build Components: (${configured_to_build}) ---\"\n",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/lib/diagnostics.cpp": "// This file is part of BOINC.\n// http://boinc.berkeley.edu\n// Copyright (C) 2008 University of California\n//\n// BOINC is free software; you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License\n// as published by the Free Software Foundation,\n// either version 3 of the License, or (at your option) any later version.\n//\n// BOINC is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n// See the GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with BOINC.  If not, see <http://www.gnu.org/licenses/>.\n\n// Stuff related to stderr/stdout direction and exception handling;\n// used by both core client and by apps\n\n#if   defined(_WIN32) && !defined(__STDWX_H__)\n#include \"boinc_win.h\"\n#elif defined(_WIN32) && defined(__STDWX_H__)\n#include \"stdwx.h\"\n#endif\n\n#ifdef __EMX__\n#include <sys/stat.h>\n#endif\n\n#ifndef _WIN32\n#include \"config.h\"\n#include <cstring>\n#include <cstdio>\n#include <cstdarg>\n#include <cstdlib>\n#include <unistd.h>\n#include <time.h>\n#endif\n\n#ifdef _USING_FCGI_\n#include \"boinc_fcgi.h\"\n#endif\n\n#ifdef __APPLE__\n#include \"mac_backtrace.h\"\n#endif\n\n#ifdef HAVE_EXECINFO_H\n#include <execinfo.h>\n#endif\n\n#include \"app_ipc.h\"\n#include \"error_numbers.h\"\n#include \"filesys.h\"\n#include \"util.h\"\n#include \"str_replace.h\"\n#include \"parse.h\"\n#include \"str_replace.h\"\n\n\n#include \"diagnostics.h\"\n\n#ifdef ANDROID_VOODOO\n// for signal handler backtrace\nunwind_backtrace_signal_arch_t unwind_backtrace_signal_arch;\nacquire_my_map_info_list_t acquire_my_map_info_list;\nrelease_my_map_info_list_t release_my_map_info_list;\nget_backtrace_symbols_t get_backtrace_symbols;\nfree_backtrace_symbols_t free_backtrace_symbols;\nload_symbol_table_t load_symbol_table;\nfree_symbol_table_t free_symbol_table;\nfind_symbol_t find_symbol;\nformat_backtrace_line_t format_backtrace_line;\n#endif\n\n\n#if defined(_WIN32) && defined(_MSC_VER)\n\nstatic _CrtMemState start_snapshot; \nstatic _CrtMemState finish_snapshot; \nstatic _CrtMemState difference_snapshot;\n\n#endif\n\nstatic int         diagnostics_initialized = false;\nstatic int         flags;\nstatic char        stdout_log[MAXPATHLEN];\nstatic char        stdout_archive[MAXPATHLEN];\nstatic FILE*       stdout_file;\nstatic char        stderr_log[MAXPATHLEN];\nstatic char        stderr_archive[MAXPATHLEN];\nstatic FILE*       stderr_file;\nstatic char        boinc_dir[MAXPATHLEN];\nstatic char        boinc_install_dir[MAXPATHLEN];\nstatic int         boinc_proxy_enabled;\nstatic char        boinc_proxy[256];\nstatic char        symstore[256];\nstatic int         aborted_via_gui;\nstatic double      stderr_file_size = 0;\nstatic double      max_stderr_file_size = 2048*1024;\nstatic double      stdout_file_size = 0;\nstatic double      max_stdout_file_size = 2048*1024;\n\n#ifdef ANDROID_VOODOO\nstatic void*       libhandle;\n#endif\n\n#ifdef _WIN32\n\n// Starting with Visual Studio 2005 the C Runtime Library has really started to\n//   enforce parameter validation. Problem is that the parameter validation code\n//   uses its own structured exception handler and terminates without writing\n//   any useful output to stderr. Microsoft has created a hook an application\n//   developer can use to get more debugging information which is the purpose\n//   of this function. When an invalid parameter is passed to the C Runtime\n//   library this function will write whatever trace information it can and\n//   then throw a breakpoint exception to dump all the rest of the useful\n//   information.\nvoid boinc_catch_signal_invalid_parameter(\n    const wchar_t* expression, const wchar_t* function, const wchar_t* file, unsigned int line, uintptr_t /* pReserved */\n) {\n\tfprintf(\n\t\tstderr,\n        \"ERROR: Invalid parameter detected in function %s. File: %s Line: %d\\n\",\n\t\tfunction,\n\t\tfile,\n\t\tline\n\t);\n\tfprintf(\n\t\tstderr,\n\t\t\"ERROR: Expression: %s\\n\",\n\t\texpression\n\t);\n\n\t// Cause a Debug Breakpoint.\n\tDebugBreak();\n}\n\n// Override default terminate and abort functions, call DebugBreak instead.\n//\nvoid boinc_term_func() {\n\n    // Cause a Debug Breakpoint.\n    DebugBreak();\n\n}\n\n#ifdef _DEBUG\n\n// Trap ASSERTs and TRACEs from the CRT and spew them to stderr.\n//\nint __cdecl boinc_message_reporting(int reportType, char *szMsg, int *retVal){\n    int n;\n    (*retVal) = 0;\n\n    switch(reportType){\n\n    case _CRT_WARN:\n    case _CRT_ERROR:\n\n        if (flags & BOINC_DIAG_TRACETOSTDERR) {\n            n = fprintf(stderr, \"%s\", szMsg);\n            if (n > 0) stderr_file_size += n;\n        }\n\n        if (flags & BOINC_DIAG_TRACETOSTDOUT) {\n            n = fprintf(stdout, \"%s\", szMsg);\n            if (n > 0) stdout_file_size += n;\n        }\n\n        break;\n    case _CRT_ASSERT:\n\n        n = fprintf(stderr, \"ASSERT: %s\\n\", szMsg);\n        if (n > 0) stderr_file_size += n;\n\n        (*retVal) = 1;\n        break;\n\n    }\n\n    return(TRUE);\n}\n\n#endif //  _DEBUG\n#endif // _WIN32\n\n\n// initialize the app diagnostic environment.\n//\nint boinc_init_diagnostics(int _flags) {\n    return diagnostics_init(\n        BOINC_DIAG_BOINCAPPLICATION | _flags,\n        BOINC_DIAG_STDOUT, BOINC_DIAG_STDERR\n    );\n}\n\n\n// initialize the graphic diagnostic environment.\n//\nint boinc_init_graphics_diagnostics(int _flags) {\n    return diagnostics_init(\n        BOINC_DIAG_BOINCAPPLICATION | _flags,\n        BOINC_DIAG_GFX_STDOUT, BOINC_DIAG_GFX_STDERR\n    );\n}\n\n\n// Used to cleanup the diagnostics environment.\n//\nint boinc_finish_diag() {\n    return diagnostics_finish();\n}\n\nint boinc_install_signal_handlers() {\n#ifdef _WIN32\n    SetUnhandledExceptionFilter(boinc_catch_signal);\n#if defined(_MSC_VER) && (_MSC_VER >= 1400)\n\t_set_invalid_parameter_handler(boinc_catch_signal_invalid_parameter);\n#endif\n#else  //_WIN32\n\n    // register handlers for fatal internal signals\n    // so that they get reported in stderr.txt\n    // Do NOT catch SIGQUIT because core client uses that to kill app\n    //\n    boinc_set_signal_handler(SIGILL, boinc_catch_signal);\n    boinc_set_signal_handler(SIGABRT, boinc_catch_signal);\n    boinc_set_signal_handler(SIGBUS, boinc_catch_signal);\n    boinc_set_signal_handler(SIGSEGV, boinc_catch_signal);\n    boinc_set_signal_handler(SIGSYS, boinc_catch_signal);\n    boinc_set_signal_handler(SIGPIPE, boinc_catch_signal);\n#endif //_WIN32\n    return 0;\n}\n\n\n// initialize the diagnostics environment.\n//\nint diagnostics_init(\n    int _flags, const char* stdout_prefix, const char* stderr_prefix\n) {\n    // Check to see if we have already been called\n    //\n    if (diagnostics_initialized) {\n        return ERR_INVALID_PARAM;\n    }\n    diagnostics_initialized = true;\n\n    // Setup initial values\n    //\n    flags = _flags;\n    safe_strcpy(stdout_log, \"\");\n    safe_strcpy(stdout_archive, \"\");\n    safe_strcpy(stderr_log, \"\");\n    safe_strcpy(stderr_archive, \"\");\n    safe_strcpy(boinc_dir, \"\");\n    safe_strcpy(boinc_install_dir, \"\");\n    boinc_proxy_enabled = 0;\n    safe_strcpy(boinc_proxy, \"\");\n    safe_strcpy(symstore, \"\");\n\n    \n    // Check for invalid parameter combinations\n    //\n    if ((flags & BOINC_DIAG_REDIRECTSTDERR) && (flags & BOINC_DIAG_REDIRECTSTDERROVERWRITE)) {\n        return ERR_INVALID_PARAM;\n    }\n\n    if ((flags & BOINC_DIAG_REDIRECTSTDOUT) && (flags & BOINC_DIAG_REDIRECTSTDOUTOVERWRITE)) {\n        return ERR_INVALID_PARAM;\n    }\n\n\n    // Determine where the log files are to be stored\n    //\n    if (flags & BOINC_DIAG_PERUSERLOGFILES) {\n        char user_dir[MAXPATHLEN];\n\n#if   defined(_WIN32)\n        snprintf(user_dir, sizeof(user_dir), \"%s\", getenv(\"APPDATA\"));\n        safe_strcat(user_dir, \"/BOINC\");\n#elif defined(__APPLE__)\n        snprintf(user_dir, sizeof(user_dir), \"%s\", getenv(\"HOME\"));\n        safe_strcat(user_dir, \"/Library/Application Support/BOINC\");\n#else\n        snprintf(user_dir, sizeof(user_dir), \"%s\", getenv(\"HOME\"));\n        safe_strcat(user_dir, \"/.BOINC\");\n#endif\n\n        // Check to see if the directory exists\n        if (!is_dir(user_dir)) {\n            boinc_mkdir(user_dir);\n        }\n\n        snprintf(stdout_log, sizeof(stdout_log), \"%.*s/%.*s.txt\", DIR_LEN, user_dir, FILE_LEN, stdout_prefix);\n        snprintf(stdout_archive, sizeof(stdout_archive), \"%.*s/%.*s.old\", DIR_LEN, user_dir, FILE_LEN, stdout_prefix);\n        snprintf(stderr_log, sizeof(stderr_log), \"%.*s/%.*s.txt\", DIR_LEN, user_dir, FILE_LEN, stderr_prefix);\n        snprintf(stderr_archive, sizeof(stderr_archive), \"%.*s/%.*s.old\", DIR_LEN, user_dir, FILE_LEN, stderr_prefix);\n\n    } else {\n\n        snprintf(stdout_log, sizeof(stdout_log), \"%s.txt\", stdout_prefix);\n        snprintf(stdout_archive, sizeof(stdout_archive), \"%s.old\", stdout_prefix);\n        snprintf(stderr_log, sizeof(stderr_log), \"%s.txt\", stderr_prefix);\n        snprintf(stderr_archive, sizeof(stderr_archive), \"%s.old\", stderr_prefix);\n\n    }\n\n    // Archive any old stderr.txt and stdout.txt files, if requested\n    //\n    if (flags & BOINC_DIAG_ARCHIVESTDERR) {\n        boinc_copy(stderr_log, stderr_archive);\n    }\n\n    if (flags & BOINC_DIAG_ARCHIVESTDOUT) {\n        boinc_copy(stdout_log, stdout_archive);\n    }\n\n    // Redirect stderr and/or stdout, if requested\n    //\n    if (flags & BOINC_DIAG_REDIRECTSTDERR) {\n        file_size(stderr_log, stderr_file_size);\n#ifdef _WIN32\n        stderr_file = freopen(stderr_log, \"ac\", stderr);\n#else\n        stderr_file = freopen(stderr_log, \"a\", stderr);\n#endif\n        if (!stderr_file) {\n            return ERR_FOPEN;\n        }\n        setbuf(stderr_file, 0);\n    }\n\n    if (flags & BOINC_DIAG_REDIRECTSTDERROVERWRITE) {\n#ifdef _WIN32\n        stderr_file = freopen(stderr_log, \"wc\", stderr);\n#else\n        stderr_file = freopen(stderr_log, \"w\", stderr);\n#endif\n        if (!stderr_file) {\n            return ERR_FOPEN;\n        }\n        setbuf(stderr_file, 0);\n    }\n\n    if (flags & BOINC_DIAG_REDIRECTSTDOUT) {\n        file_size(stdout_log, stdout_file_size);\n        stdout_file = freopen(stdout_log, \"a\", stdout);\n        if (!stdout_file) {\n            return ERR_FOPEN;\n        }\n        setvbuf(stdout_file, NULL, _IOLBF, BUFSIZ);\n    }\n\n    if (flags & BOINC_DIAG_REDIRECTSTDOUTOVERWRITE) {\n        stdout_file = freopen(stdout_log, \"w\", stdout);\n        if (!stdout_file) {\n            return ERR_FOPEN;\n        }\n        setvbuf(stdout_file, NULL, _IOLBF, BUFSIZ);\n    }\n\n\n#if defined(_WIN32)\n\n    //_set_abort_behavior(NULL, _WRITE_ABORT_MSG);\n#ifdef __MINGW32__\n    std::set_terminate(boinc_term_func);\n    std::set_unexpected(boinc_term_func);\n#else\n    set_terminate(boinc_term_func);\n    set_unexpected(boinc_term_func);\n#endif\n\n#if defined(_DEBUG)\n\n    _CrtSetReportHook(boinc_message_reporting);\n\n    if (flags & BOINC_DIAG_MEMORYLEAKCHECKENABLED) {\n        SET_CRT_DEBUG_FIELD(_CRTDBG_LEAK_CHECK_DF);\n    }\n\n    if (flags & BOINC_DIAG_HEAPCHECKENABLED) {\n        if (flags & BOINC_DIAG_HEAPCHECKEVERYALLOC) {\n            SET_CRT_DEBUG_FIELD(_CRTDBG_CHECK_ALWAYS_DF);\n        } else {\n            SET_CRT_DEBUG_FIELD(_CRTDBG_CHECK_EVERY_1024_DF);\n        }\n    }\n\n    if (flags & BOINC_DIAG_BOINCAPPLICATION) {\n        if (flags & BOINC_DIAG_MEMORYLEAKCHECKENABLED) {\n            _CrtMemCheckpoint(&start_snapshot); \n        }\n    }\n\n#endif // defined(_DEBUG)\n\n    // Initialize the thread list structure\n    //   The data for this structure should be set by\n    //   boinc_init or boinc_init_graphics.\n    diagnostics_init_thread_list();\n\n    diagnostics_init_unhandled_exception_monitor();\n\n    diagnostics_init_message_monitor();\n\n#endif // defined(_WIN32)\n\n#ifdef ANDROID_VOODOO\n#define resolve_func(l,x) \\\n  x=(x##_t)dlsym(l,#x); \\\n  if (!x) {\\\n    fprintf(stderr,\"Unable to resolve function %s\\n\",#x); \\\n    unwind_backtrace_signal_arch=NULL; \\\n  }\n\n    if ((libhandle=dlopen(\"libcorkscrew.so\",RTLD_NOW|RTLD_GLOBAL))) {\n        resolve_func(libhandle,unwind_backtrace_signal_arch);\n        resolve_func(libhandle,acquire_my_map_info_list);\n        resolve_func(libhandle,release_my_map_info_list);\n        resolve_func(libhandle,get_backtrace_symbols);\n        resolve_func(libhandle,free_backtrace_symbols);\n        resolve_func(libhandle,format_backtrace_line);\n        resolve_func(libhandle,load_symbol_table);\n        resolve_func(libhandle,free_symbol_table);\n        resolve_func(libhandle,find_symbol);\n    } else {\n        fprintf(stderr,\"stackdumps unavailable\\n\");\n    }\n#endif // ANDROID_VOODOO\n\n    // Install unhandled exception filters and signal traps.\n    if (BOINC_SUCCESS != boinc_install_signal_handlers()) {\n        return ERR_SIGNAL_OP;\n    }\n\n\n    // Store various pieces of inforation for future use.\n    if (flags & BOINC_DIAG_BOINCAPPLICATION) {\n        char    buf[256];\n        char    proxy_address[256];\n        int     proxy_port;\n        MIOFILE mf;\n        FILE*   p;\n#ifdef _WIN32\n        LONG    lReturnValue;\n        HKEY    hkSetupHive;\n        DWORD   dwSize = 0;\n#endif\n\n        safe_strcpy(buf, \"\");\n        safe_strcpy(proxy_address, \"\");\n        proxy_port = 0;\n\n#ifndef _USING_FCGI_\n        p = fopen(INIT_DATA_FILE, \"r\");\n#else\n        p = FCGI::fopen(INIT_DATA_FILE, \"r\");\n#endif\n \n\t\tif (p) {\n\t\t\tmf.init_file(p);\n\t\t\twhile(mf.fgets(buf, sizeof(buf))) {\n\t\t\t\tif (match_tag(buf, \"</app_init_data>\")) break;\n\t\t\t\telse if (parse_str(buf, \"<boinc_dir>\", boinc_dir, sizeof(boinc_dir))) continue;\n\t\t\t\telse if (parse_str(buf, \"<symstore>\", symstore, sizeof(symstore))) ;\n\t\t\t\telse if (match_tag(buf, \"<use_http_proxy/>\")) {\n\t\t\t\t\tboinc_proxy_enabled = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if (parse_str(buf, \"<http_server_name>\", proxy_address, sizeof(proxy_address))) continue;\n\t\t\t\telse if (parse_int(buf, \"<http_server_port>\", proxy_port)) continue;\n\t\t\t}\n\t\t\tfclose(p);\n\t\t}\n\n        if (boinc_proxy_enabled) {\n            int buffer_used = snprintf(boinc_proxy, sizeof(boinc_proxy), \"%s:%d\", proxy_address, proxy_port);\n            if ((sizeof(boinc_proxy) == buffer_used) || (-1 == buffer_used)) { \n                boinc_proxy[sizeof(boinc_proxy)-1] = '\\0';\n            }\n        }\n\n#ifdef _WIN32\n        // Lookup the location of where BOINC was installed to and store\n        //   that for future use.\n        lReturnValue = RegOpenKeyEx(\n            HKEY_LOCAL_MACHINE, \n            _T(\"SOFTWARE\\\\Space Sciences Laboratory, U.C. Berkeley\\\\BOINC Setup\"),  \n\t        0, \n            KEY_READ,\n            &hkSetupHive\n        );\n        if (lReturnValue == ERROR_SUCCESS) {\n            // How large does our buffer need to be?\n            dwSize = sizeof(boinc_install_dir);\n\n            lReturnValue = RegQueryValueEx(\n                hkSetupHive,\n                _T(\"INSTALLDIR\"),\n                NULL,\n                NULL,\n                (LPBYTE)&boinc_install_dir,\n                &dwSize\n            );\n        }\n\n        if (hkSetupHive) RegCloseKey(hkSetupHive);\n#endif\n    }\n\n    return BOINC_SUCCESS;\n}\n\nint diagnostics_thread_init() {\n    // Install unhandled exception filters and signal traps.\n    if (BOINC_SUCCESS != boinc_install_signal_handlers()) {\n        return ERR_SIGNAL_OP;\n    }\n\n    return BOINC_SUCCESS;\n}\n\n// Cleanup the diagnostic framework before dumping any memory leaks.\n//\nint diagnostics_finish() {\n\n#ifdef _WIN32\n\n    // Shutdown the message monitor thread and handles\n    diagnostics_finish_message_monitor();\n\n    // Shutdown the unhandled exception filter thread and handles\n    diagnostics_finish_unhandled_exception_monitor();\n\n    // Cleanup internal thread list structures and free up any\n    //   used memory.\n    diagnostics_finish_thread_list();\n\n#ifdef _DEBUG\n\n    // Only perform the memory leak dump if it is a boinc application\n    //   and not the BOINC Manager, BOINC Core Client, or BOINC\n    //   Screen saver since they'll check on close.\n    if (flags & BOINC_DIAG_BOINCAPPLICATION) {\n        if (flags & BOINC_DIAG_MEMORYLEAKCHECKENABLED) {\n            _CrtMemCheckpoint(&finish_snapshot);\n            if (_CrtMemDifference(&difference_snapshot, &start_snapshot, &finish_snapshot)) {\n                fprintf(stdout, \"\\n\\n\");\n                fprintf(stdout, \"**********\\n\");\n                fprintf(stdout, \"**********\\n\");\n                fprintf(stdout, \"\\n\");\n                fprintf(stdout, \"Memory Leaks Detected!!!\\n\");\n                fprintf(stdout, \"\\n\");\n                fprintf(stdout, \"Memory Statistics:\\n\");\n                _CrtMemDumpStatistics(&difference_snapshot);\n                fprintf(stdout, \"\\n\");\n                _CrtMemDumpAllObjectsSince(&difference_snapshot);\n                fprintf(stdout, \"\\n\");\n            }\n        }\n    }\n\n#endif // defined(_DEBUG)\n#endif // defined(_WIN32)\n\n#ifdef ANDROID_VOODOO\n    if (libhandle) {\n      dlclose(libhandle);\n    }\n#endif\n\n    // Set initalization flag to false.\n    diagnostics_initialized = false;\n\n    return BOINC_SUCCESS;\n}\n\n// has the diagnostics library been initialized?\n//\nint diagnostics_is_initialized(){\n    return diagnostics_initialized;\n}\n\n\n// return true if the specified flag is set.\n//\nint diagnostics_is_flag_set(int _flags) {\n    return flags & _flags;\n}\n\n\n// return the location of the BOINC directory.\n//\nchar* diagnostics_get_boinc_dir() {\n    return boinc_dir;\n}\n\n\n// return the location of the BOINC install directory.\n//\nchar* diagnostics_get_boinc_install_dir() {\n    return boinc_install_dir;\n}\n\n\n// return the location of the symbol store.\n//\nchar* diagnostics_get_symstore() {\n    return symstore;\n}\n\n\n// store the location of the symbol store.\n//\nint diagnostics_set_symstore(char* project_symstore) {\n    if (!strlen(symstore)) {\n        int buffer_used = snprintf(symstore, sizeof(symstore), \"%s\", project_symstore);\n        if ((sizeof(symstore) == buffer_used) || (-1 == buffer_used)) { \n            symstore[sizeof(symstore)-1] = '\\0';\n        }\n    }\n    return 0;\n}\n\n\n// do we need to worry about a proxy server?\n//\nint diagnostics_is_proxy_enabled() {\n    return boinc_proxy_enabled;\n}\n\n\n// proxy server address and port\n//\nchar* diagnostics_get_proxy() {\n    return boinc_proxy;\n}\n\n\n// Set the value of the flag\nint diagnostics_set_aborted_via_gui() {\n    aborted_via_gui = 1;\n    return 0;\n}\n\n\n// Return the value of he flag\nint diagnostics_is_aborted_via_gui() {\n    return aborted_via_gui;\n}\n\n// Cycle the log files at regular events.\n//\nint diagnostics_cycle_logs() {\n    // If the stderr.txt or stdout.txt files are too big, cycle them\n    //\n    if (flags & BOINC_DIAG_REDIRECTSTDERR) {\n        if (stderr_file_size > max_stderr_file_size) {\n            if (NULL == stderr_file) return ERR_FOPEN;\n            fclose(stderr_file);\n            boinc_copy(stderr_log, stderr_archive);\n            stderr_file_size = 0;\n            stderr_file = freopen(stderr_log, \"w\", stderr);\n            if (NULL == stderr_file) return ERR_FOPEN;\n            setbuf(stderr_file, 0);\n        }\n    }\n\n    if (flags & BOINC_DIAG_REDIRECTSTDOUT) {\n        if (stdout_file_size > max_stdout_file_size) {\n            if (NULL == stdout_file) return ERR_FOPEN;\n            fclose(stdout_file);\n            stdout_file_size = 0;\n            boinc_copy(stdout_log, stdout_archive);\n            stdout_file = freopen(stdout_log, \"w\", stdout);\n            if (NULL == stdout_file) return ERR_FOPEN;\n            setvbuf(stdout_file, NULL, _IOLBF, BUFSIZ);\n        }\n    }\n    return BOINC_SUCCESS;\n}\n\n\n// Diagnostics for POSIX Compatible systems.\n//\n#if defined(HAVE_SIGNAL_H) && !defined(_WIN32)\n\n// Set a signal handler only if it is not currently ignored\n//\nextern \"C\" void boinc_set_signal_handler(int sig, handler_t handler) {\n#if HAVE_SIGACTION\n    struct sigaction temp;\n    sigaction(sig, NULL, &temp);\n    if (temp.sa_handler != SIG_IGN) {\n        temp.sa_sigaction = handler;\n        sigaction(sig, &temp, NULL);\n    }\n#else\n    void (*temp)(int);\n    temp = signal(sig, boinc_catch_signal);\n    if (temp == SIG_IGN) {\n        signal(sig, SIG_IGN);\n    }\n#endif /* HAVE_SIGACTION */\n}\n\n\n// Set a signal handler even if it is currently ignored\n//\nvoid boinc_set_signal_handler_force(int sig, void(*handler)(int)) {\n#if HAVE_SIGACTION\n    struct sigaction temp;\n    sigaction(sig, NULL, &temp);\n    temp.sa_handler = handler;\n    sigaction(sig, &temp, NULL);\n#else\n    void (*temp)(int);\n    temp = signal(sig, boinc_catch_signal);\n    signal(sig, SIG_IGN);\n#endif /* HAVE_SIGACTION */\n}\n\n// exit code to use if signalled; can be changed\nstatic int signal_exit_code = EXIT_SIGNAL;\n\nvoid set_signal_exit_code(int x) {\n    signal_exit_code = x;\n}\n\n#ifdef ANDROID_VOODOO\nconst char *argv0;\n\nstatic char *xtoa(size_t x) {\n    static char buf[20];\n    static char hex[]=\"0123456789abcdef\";\n    int n;\n    buf[19]=0;\n    n=18;\n    while (x) {\n      buf[n--]=hex[x&0xf];\n      x/=0x10;\n    }\n    buf[n--]='x';\n    buf[n]='0';\n    return buf+n;\n}\n\n#endif\n\n#ifdef HAVE_SIGACTION\n#ifdef ANDROID_VOODOO\nvoid boinc_catch_signal(int signal, struct siginfo *siginfo, void *sigcontext) {\n#else\nvoid boinc_catch_signal(int signal, siginfo_t*, void *) {\n#endif  // ANDROID\n#else\nvoid boinc_catch_signal(int signal) {\n#endif  // HAVE_SIGACTION\n    switch(signal) {\n    case SIGHUP: fprintf(stderr, \"SIGHUP: terminal line hangup\\n\");\n         return;\n    case SIGINT: fprintf(stderr, \"SIGINT: interrupt program\\n\"); break;\n    case SIGILL: fprintf(stderr, \"SIGILL: illegal instruction\\n\"); break;\n    case SIGABRT: fprintf(stderr, \"SIGABRT: abort called\\n\"); break;\n#if SIGBUS != SIGSEGV\n    // in case SIGBUS == SIGSEGV (e.g., Haiku)\n    case SIGBUS: fprintf(stderr, \"SIGBUS: bus error\\n\"); break;\n#endif\n    case SIGSEGV: fprintf(stderr, \"SIGSEGV: segmentation violation\\n\"); break;\n    case SIGSYS: fprintf(stderr, \"SIGSYS: system call given invalid argument\\n\"); break;\n    case SIGPIPE: fprintf(stderr, \"SIGPIPE: write on a pipe with no reader\\n\");\n        return;\n    default: fprintf(stderr, \"unknown signal %d\\n\", signal); break;\n    }\n\n#ifdef HAVE_EXECINFO_H\n    void *array[64];\n    size_t size;\n    size = backtrace (array, 64);\n//  Anything that calls malloc here (i.e *printf()) will probably fail\n//  so we'll do it the hard way.\n    (void) write(fileno(stderr),\"Stack trace (\",strlen(\"Stack trace (\"));\n    char mbuf[10];\n    char *p=mbuf+9;\n    int i=size;\n    *(p--)=0;\n    while (i) {\n      *(p--)=i%10+'0';\n      i/=10;\n    }\n    (void) write(fileno(stderr),p+1,strlen(p+1));\n    (void) write(fileno(stderr),\" frames):\",strlen(\" frames):\"));\n    mbuf[0]=10;\n    (void) write(fileno(stderr),mbuf,1);\n    backtrace_symbols_fd(array, size, fileno(stderr));\n#endif\n\n#ifdef __APPLE__\n    PrintBacktrace();\n#endif\n\n#ifdef ANDROID_VOODOO\n    // this is some dark undocumented Android voodoo that uses libcorkscrew.so.\n    // Minimal use of library functions because they may not work in a signal\n    // handler.\n    //\n#define DUMP_LINE_LEN 256\n    static backtrace_frame_t backtrace[64];\n    static backtrace_symbol_t backtrace_symbols[64]; \n    if (unwind_backtrace_signal_arch != NULL) {\n        map_info_t *map_info = acquire_my_map_info_list();\n        ssize_t size = unwind_backtrace_signal_arch(\n            siginfo, sigcontext, map_info, backtrace, 0, 64\n        );\n        get_backtrace_symbols(backtrace, size, backtrace_symbols);\n        char line[DUMP_LINE_LEN];\n        for (int i=0; i<size; i++) {\n            format_backtrace_line(\n                i, &backtrace[i], &backtrace_symbols[i], line, DUMP_LINE_LEN\n            );\n            line[DUMP_LINE_LEN-1] = 0;\n            if (backtrace_symbols[i].symbol_name) {\n                strlcat(line,\" \",DUMP_LINE_LEN);\n                if (backtrace_symbols[i].demangled_name) {\n                    strlcat(\n                        line, backtrace_symbols[i].demangled_name,\n                        DUMP_LINE_LEN\n                    );\n                }\n            } else {\n                symbol_table_t* symbols = NULL;\n                if (backtrace_symbols[i].map_name) {\n                    symbols = load_symbol_table(backtrace_symbols[i].map_name);\n                } else {\n                    symbols = load_symbol_table(argv0);\n                }\n                symbol_t* symbol = NULL;\n                if (symbols) {\n                    symbol = find_symbol(symbols, backtrace[i].absolute_pc);\n                }\n                if (symbol) {\n                    int offset = backtrace[i].absolute_pc - symbol->start;\n                    strlcat(line, \" (\", DUMP_LINE_LEN);\n                    strlcat(line, symbol->name, DUMP_LINE_LEN);\n                    strlcat(line, \"+\", DUMP_LINE_LEN);\n                    strlcat(line, xtoa(offset), DUMP_LINE_LEN);\n                    strlcat(line, \")\", DUMP_LINE_LEN);\n                    line[DUMP_LINE_LEN-1] = 0;\n                } else {\n                    strlcat(line, \" (\\?\\?\\?)\", DUMP_LINE_LEN);\n                }\n                if (symbols) free_symbol_table(symbols);\n            }\n            if (backtrace[i].absolute_pc) {\n                strlcat(line, \" [\", DUMP_LINE_LEN);\n                strlcat(\n                    line,\n                    xtoa(*reinterpret_cast<unsigned int *>(backtrace[i].absolute_pc)),\n                    DUMP_LINE_LEN\n                );\n                strlcat(line, \"]\", DUMP_LINE_LEN);\n            }\n            strlcat(line, \"\\n\", DUMP_LINE_LEN);\n            write(fileno(stderr),line, strlen(line));\n            fflush(stderr);\n        }\n    }\n#endif // ANDROID_VOODOO\n\n    fprintf(stderr, \"\\nExiting...\\n\");\n    _exit(signal_exit_code);\n}\n\n#endif\n\n//\n// Diagnostics Routines common to all Platforms\n//\n\n// Converts the BOINCTRACE macro into a single string and report it\n//   to the CRT so it can be reported via the normal means.\n//\nvoid boinc_trace(const char *pszFormat, ...) {\n    static char szBuffer[4096];\n    static char szDate[64];\n    static char szTime[64];\n    int n;\n\n    // Trace messages should only be reported if running as a standalone\n    //   application or told too.\n    if ((flags & BOINC_DIAG_TRACETOSTDERR) ||\n        (flags & BOINC_DIAG_TRACETOSTDOUT)) {\n\n        memset(szBuffer, 0, sizeof(szBuffer));\n        memset(szDate, 0, sizeof(szDate));\n        memset(szTime, 0, sizeof(szTime));\n\n#ifdef _WIN32\n        strdate(szDate);\n        strtime(szTime);\n#else\n        time_t t;\n        char *theCR;\n    \n        time(&t);\n        safe_strcpy(szTime, asctime(localtime(&t)));\n        theCR = strrchr(szTime, '\\n');\n        if (theCR) *theCR = '\\0';\n        theCR = strrchr(szTime, '\\r');\n        if (theCR) *theCR = '\\0';\n#endif\n\n        va_list ptr;\n        va_start(ptr, pszFormat);\n\n        vsnprintf(szBuffer, sizeof(szBuffer), pszFormat, ptr);\n\n        va_end(ptr);\n\n#if defined(_WIN32) && defined(_DEBUG)\n        n = _CrtDbgReport(_CRT_WARN, NULL, NULL, NULL, \"[%s %s] TRACE [%d]: %s\", szDate, szTime, GetCurrentThreadId(), szBuffer);\n#else\n        if (flags & BOINC_DIAG_TRACETOSTDERR) {\n#ifdef _WIN32\n            n = fprintf(stderr, \"[%s %s] TRACE [%d]: %s\\n\", szDate, szTime, GetCurrentThreadId(), szBuffer);\n#else\n            n = fprintf(stderr, \"[%s] TRACE: %s\\n\", szTime, szBuffer);\n#endif\n            if (n > 0) stderr_file_size += n;\n        }\n\n        if (flags & BOINC_DIAG_TRACETOSTDOUT) {\n#ifdef _WIN32\n            n = fprintf(stdout, \"[%s %s] TRACE [%d]: %s\\n\", szDate, szTime, GetCurrentThreadId(), szBuffer);\n#else\n            n = fprintf(stdout, \"[%s] TRACE: %s\\n\", szTime, szBuffer);\n#endif\n            if (n > 0) stdout_file_size += n;\n        }\n#endif\n    }\n}\n\n\n// Converts the BOINCINFO macro into a single string and report it\n//   to stderr so it can be reported via the normal means.\n//\n#ifndef BOINC_INFOMSGS\nvoid boinc_info(const char* /*pszFormat*/, ... ){ return; }\n#else\nvoid boinc_info(const char* pszFormat, ...){\n    static char szBuffer[4096];\n    static char szDate[64];\n    static char szTime[64];\n    int n;\n\n    memset(szBuffer, 0, sizeof(szBuffer));\n    memset(szDate, 0, sizeof(szDate));\n    memset(szTime, 0, sizeof(szTime));\n\n    strdate(szDate);\n    strtime(szTime);\n\n    va_list ptr;\n    va_start(ptr, pszFormat);\n\n    vsnprintf(szBuffer, sizeof(szBuffer), pszFormat, ptr);\n\n    va_end(ptr);\n\n#if defined(_WIN32) && defined(_DEBUG)\n    _CrtDbgReport(_CRT_WARN, NULL, NULL, NULL, \"[%s %s] BOINCMSG: %s\\n\", szDate, szTime, szBuffer);\n#else\n    if (flags & BOINC_DIAG_TRACETOSTDERR) {\n        n = fprintf(stderr, \"[%s %s] BOINCMSG: %s\\n\", szDate, szTime, szBuffer);\n        if (n > 0) stderr_file_size += n;\n    }\n\n    if (flags & BOINC_DIAG_TRACETOSTDOUT) {\n        n = fprintf(stdout, \"[%s %s] BOINCMSG: %s\\n\", szDate, szTime, szBuffer);\n        if (n > 0) stdout_file_size += n;\n    }\n#endif\n}\n#endif\n\nvoid diagnostics_set_max_file_sizes(double stdout_size, double stderr_size) {\n    if (stdout_size) max_stdout_file_size = stdout_size;\n    if (stderr_size) max_stderr_file_size = stderr_size;\n}\n\n// Dump string to whatever the platform debuggers\n// \n#ifndef _WIN32\nint diagnostics_trace_to_debugger(const char*) {\n    return 0;\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/lib/mac/mac_backtrace.cpp": "// This file is part of BOINC.\n// http://boinc.berkeley.edu\n// Copyright (C) 2008 University of California\n//\n// BOINC is free software; you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License\n// as published by the Free Software Foundation,\n// either version 3 of the License, or (at your option) any later version.\n//\n// BOINC is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n// See the GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with BOINC.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n *  mac_backtrace.C\n *\n */\n \n/* This is part of a backtrace generator for boinc project applications.  \n*\n* Adapted from Apple Developer Technical Support Sample Code QCrashReport\n*\n* This code handles Mac OS X 10.3.x through 10.4.9.  It may require some \n* adjustment for future OS versions; see the discussion of _sigtramp and \n* PowerPC Signal Stack Frames below.\n*\n*  For useful tips on using backtrace information, see Apple Tech Note 2123:\n*  http://developer.apple.com/technotes/tn2004/tn2123.html#SECNOSYMBOLS\n*\n*  To convert addresses to correct symbols, use the atos command-line tool:\n*  * If the .dSYM file is not in the same directory as the executable, put \n*    a copy of the .dSYM file in that directory.\n*  atos -o <binary-image-file> -l <load-address>\n*  * <binary-image-file> must be the path to the binary executable; for\n*    example: \"/Applications/BOINCManager.app/Conents/MacOS/BOINCManager\"\n*  * The load address of the binary image can be found in the\n*   \"Binary Images Description:\" section of the backtrace. If the backtrace \n*    contains the following two lines:\n*      Binary Images Description:\n*      0x10ebd9000 - 0x10f360fff /Applications/BOINCManager.app/Contents/MacOS/BOINCManager\n*    then <load-address> would be 0x10ebd9000\n*  * You can then enter addresses from the backtrace one line at a time to \n*    get their corresponding symbols.\n*  * Note: if an address 1a23 is hex, use 0x1a23.\n*  * For more information on using atos, see the atos man page.\n*\n*  To demangle mangled C++ symbols, use the c++filt command-line tool. \n*  You may need to prefix C++ symbols with an additonal underscore before \n*  passing them to c++filt (so they begin with two underscore characters).\n*\n* A very useful shell script to add symbols to a crash dump can be found at:\n*  http://developer.apple.com/tools/xcode/symbolizingcrashdumps.html\n* Pipe the output of the shell script through c++filt to demangle C++ symbols.\n*/\n\n\n#ifdef __ppc__\n#include <Carbon/Carbon.h>\n#endif\n\n#include <mach-o/dyld.h>\n#include <mach-o/loader.h>\n#include <mach-o/nlist.h>\n#include <mach-o/stab.h>\n#include <mach-o/arch.h>\n\n#include <stdio.h>\n#include <unistd.h>     // for getpid()\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <time.h>\n\n#include \"QSymbols.h\"\n#include \"QMachOImageList.h\"\n#include \"QBacktrace.h\"\n#include \"QCrashReport.h\"\n#include \"mac_backtrace.h\"\n#include \"filesys.h\"\n\n// Suppress obsolete warning when building for OS 10.3.9\n#define DLOPEN_NO_WARN\n#include <dlfcn.h>\n\n// Functions available only in OS 10.5 and later\n    typedef int     (*backtraceProc)(void**,int);\n    typedef char ** (*backtrace_symbolsProc)(void* const*,int);\n#define CALL_STACK_SIZE 128\n\nextern void * _sigtramp;\n\nenum {\n        kFrameCount = 200\n};\n\n#define SKIPFRAME 4 /* Number frames overhead for signal handler and backtrace */\n\nstatic void PrintOSVersion(int *majorVersion, int *minorVersion);\n\nvoid PrintBacktrace(void) {\n    int                         err;\n    QCrashReportRef             crRef = NULL;\n\n    char                        nameBuf[256], pathToThisProcess[1024];\n    const NXArchInfo            *localArch;\n    int                         OSMajorVersion = 0;\n    int                         OSMinorVersion = 0;\n    time_t                      t;\n    char                        atosPipeBuf[1024], cppfiltPipeBuf[1024];\n    char                        outBuf[1024], offsetBuf[32];\n    char                        *sourceSymbol, *symbolEnd;\n    char                        **symbols = NULL;\n    void                        *callstack[CALL_STACK_SIZE];\n    int                         frames, i;\n    void                        *systemlib = NULL;\n    FILE                        *atosPipe = NULL;\n    FILE                        *cppfiltPipe = NULL;\n    backtraceProc               myBacktraceProc = NULL;\n    backtrace_symbolsProc       myBacktrace_symbolsProc = NULL;\n    char                        saved_env[128], *env = NULL;\n    bool                        atosExists = false, cppfiltExists = false;\n\n#if 0\n// To debug backtrace logic:\n//  * Enable this block of code.\n//  * Set a breakpoint at sleep(1) call, and wherever else you wish.\n//  * Launch built development application from Finder.\n//  * Get this application's pid from Activity Monitor.\n//  * Attach Debugger to this application.\n//  * Continue until you reach this breakpoint.\n//  * Change wait variable to 0 (false).\n// This is necessary because GDB intercepts signals even if you tell it \n// not to, so you must attach GDB after the signal handler is invoked.\n\n    bool wait = true;\n    \n    while (wait) {\n        fprintf(stderr, \"waiting\\n\");\n        sleep(1);\n    }\n#endif\n\n    GetNameOfAndPathToThisProcess(nameBuf, sizeof(nameBuf), pathToThisProcess, sizeof(pathToThisProcess));\n    \n    if (nameBuf[0]) {\n        fprintf(stderr, \"\\nCrashed executable name: %s\\n\", nameBuf);\n    }\n    \n#ifdef BOINC_VERSION_STRING\n    fprintf(stderr, \"built using BOINC library version %s\\n\", BOINC_VERSION_STRING);\n#endif\n\n    localArch = NXGetLocalArchInfo();\n    fprintf(stderr, \"Machine type %s\", localArch->description);\n#ifdef __LP64__\n    fprintf(stderr, \" (64-bit executable)\\n\");\n#else\n    fprintf(stderr, \" (32-bit executable)\\n\");\n#endif\n\n    PrintOSVersion(&OSMajorVersion, &OSMinorVersion);\n\n    time(&t);\n    fputs(asctime(localtime(&t)), stderr);\n    fputc('\\n', stderr);\n    \n    err = QCRCreateFromSelf(&crRef);\n\n    if ((OSMajorVersion == 10) && (OSMinorVersion == 5)) {\n#ifdef __ppc__\n        fputs(\"BOINC backtrace under OS 10.5.x only shows exported (global) symbols\\n\", stderr);\n        fputs(\"and may work poorly on a PowerPC Mac after a crash.  For a better\\n\", stderr);\n        fputs(\"backtrace, run under OS 10.4.x.\\n\\n\", stderr);\n#else\n        fputs(\"BOINC backtrace under OS 10.5.x only shows exported (global) symbols\\n\", stderr);\n        fputs(\"and may not show the final location which caused a crash.  For a better\\n\", stderr);\n        fputs(\"backtrace, run under OS 10.6.x or later.\\n\\n\", stderr);\n#endif\n    }\n    \n    // Use new backtrace functions (available only in OS 10.5 and later)\n    systemlib = dlopen (\"/usr/lib/libSystem.dylib\", RTLD_NOW );\n    if (systemlib) {\n        myBacktraceProc = (backtraceProc)dlsym(systemlib, \"backtrace\");\n     }\n    if (! myBacktraceProc) {\n        goto skipBackTrace;     // Should never happen\n    }\n    frames = myBacktraceProc(callstack, CALL_STACK_SIZE);\n    myBacktrace_symbolsProc = (backtrace_symbolsProc)dlsym(systemlib, \"backtrace_symbols\");\n    if (myBacktrace_symbolsProc) {\n        symbols = myBacktrace_symbolsProc(callstack, frames);\n    } else {\n        goto skipBackTrace;     // Should never happen\n    }\n    \n    atosExists = boinc_file_exists(\"/usr/bin/atos\");\n    cppfiltExists = boinc_file_exists(\"/usr/bin/atos\");\n    if (atosExists || cppfiltExists) {\n        // The bidirectional popen only works if the NSUnbufferedIO environment \n        // variable is set, so we save and restore its current value.\n        env = getenv(\"NSUnbufferedIO\");\n        if (env) {\n            strlcpy(saved_env, env, sizeof(saved_env));\n        }\n        setenv(\"NSUnbufferedIO\", \"YES\", 1);\n    }\n    \n    if (atosExists) {\n        // The backtrace_symbols() and backtrace_symbols() APIs are limited to \n        // external symbols only, so we also use the atos command-line utility  \n        // which gives us debugging symbols when available.\n        //\n        // For some reason, using the -p option with the value from getpid() \n        // fails here but the -o option with a path does work.\n#ifdef __x86_64__\n        snprintf(atosPipeBuf, sizeof(atosPipeBuf), \"/usr/bin/atos -o \\\"%s\\\" -arch x86_64\", pathToThisProcess);\n#elif defined (__i386__)\n        snprintf(atosPipeBuf, sizeof(atosPipeBuf), \"/usr/bin/atos -o \\\"%s\\\" -arch i386\", pathToThisProcess);\n#else\n        snprintf(atosPipeBuf, sizeof(atosPipeBuf), \"/usr/bin/atos -o \\\"%s\\\" -arch ppc\", pathToThisProcess);\n#endif\n\n        atosPipe = popen(atosPipeBuf, \"r+\");\n        if (atosPipe) {\n            setbuf(atosPipe, 0);\n        }\n    }\n\n    if (cppfiltExists) {\n        cppfiltPipe = popen(\"/usr/bin/c++filt -s gnu-v3 -n\", \"r+\");\n        if (cppfiltPipe) {\n            setbuf(cppfiltPipe, 0);\n        }\n    }\n    \n    for (i=0; i<frames; i++) {\n        strlcpy(outBuf, symbols[i], sizeof(outBuf));\n        if (cppfiltPipe) {\n            sourceSymbol = strstr(outBuf, \"0x\");\n            if (sourceSymbol) {\n                sourceSymbol = strchr(sourceSymbol, (int)'_');\n                if (sourceSymbol) {\n                    strlcpy(cppfiltPipeBuf, sourceSymbol, sizeof(cppfiltPipeBuf)-1);\n                    *sourceSymbol = '\\0';\n                    symbolEnd = strchr(cppfiltPipeBuf, (int)' ');\n                    if (symbolEnd) {\n                        strlcpy(offsetBuf, symbolEnd, sizeof(offsetBuf));\n                        *symbolEnd = '\\0';\n                    }\n                    fprintf(cppfiltPipe, \"%s\\n\", cppfiltPipeBuf);\n                    BT_PersistentFGets(cppfiltPipeBuf, sizeof(cppfiltPipeBuf), cppfiltPipe);\n                    symbolEnd = strchr(cppfiltPipeBuf, (int)'\\n');\n                    if (symbolEnd) {\n                        *symbolEnd = '\\0';\n                    }\n                    strlcat(outBuf, cppfiltPipeBuf, sizeof(outBuf));\n                    strlcat(outBuf, offsetBuf, sizeof(outBuf));\n                }\n            }\n        }\n        \n        if (atosPipe) {\n            fprintf(atosPipe, \"%#llx\\n\", (QTMAddr)callstack[i]);\n            BT_PersistentFGets(atosPipeBuf, sizeof(atosPipeBuf), atosPipe);\n            sourceSymbol = strstr(atosPipeBuf, \"0x\");\n            if (!sourceSymbol) {        // If atos returned a symbol (not just a hex value)\n                sourceSymbol = strstr(outBuf, \"0x\");\n                if (sourceSymbol) sourceSymbol = strstr(sourceSymbol, \" \");\n                if (sourceSymbol) *++sourceSymbol = '\\0'; // Remove questionable symbol from backtrace_symbols()\n                strlcat(outBuf, \" \", sizeof(outBuf));\n                strlcat(outBuf, atosPipeBuf, sizeof(outBuf));\n                symbolEnd = strchr(outBuf, (int)'\\n');\n                if (symbolEnd) {\n                    *symbolEnd = '\\0';\n                }\n            }\n        }\n        fprintf(stderr, \"%s\\n\", outBuf);\n    }\n\n    if (atosPipe) {\n        pclose(atosPipe);\n    }\n    \n    if (cppfiltPipe) {\n        pclose(cppfiltPipe);\n    }\n\n    if (atosExists || cppfiltExists) {\n        if (env) {\n            setenv(\"NSUnbufferedIO\", saved_env, 1);\n        } else {\n            unsetenv(\"NSUnbufferedIO\");\n        }\n    }\n    \nskipBackTrace:\n    fprintf(stderr, \"\\n\");\n\n    // make sure this much gets written to file in case future \n    // versions of OS break our crash dump code beyond this point.\n    fflush(stderr);\n    \n    QCRPrintThreadState(crRef, stderr);\n    QCRPrintImages(crRef, stderr);\n}\n\n\nchar * BT_PersistentFGets(char *buf, size_t buflen, FILE *f) {\n    char *p = buf;\n    size_t len = buflen;\n    size_t datalen = 0;\n\n    *buf = '\\0';\n    while (datalen < (buflen - 1)) {\n        fgets(p, len, f);\n        if (feof(f)) break;\n        if (ferror(f) && (errno != EINTR)) break;\n        if (strchr(buf, '\\n')) break;\n        datalen = strlen(buf);\n        p = buf + datalen;\n        len -= datalen;\n    }\n    return (buf[0] ? buf : NULL);\n}\n\n\nvoid GetNameOfAndPathToThisProcess(char *nameBuf, size_t nameBufLen, char* outbuf, size_t outBufLen) {\n    FILE *f;\n    char buf[256], *p, *q=NULL;\n    pid_t aPID = getpid();\n    size_t nameLen;\n\n    *outbuf = '\\0';\n    *nameBuf = '\\0';\n    \n    sprintf(buf, \"ps -wo command -p %d\", (int)aPID);\n    f = popen(buf, \"r\");\n    if (f == NULL)\n        return;\n    \n    BT_PersistentFGets (outbuf, outBufLen, f);     // Discard header line\n    BT_PersistentFGets (outbuf, outBufLen, f);     // Get the UNIX command which ran us\n    pclose(f);\n\n    sprintf(buf, \"ps -p %d -c -o command\", aPID);\n    f = popen(buf,  \"r\");\n    if (!f)\n        return;\n    BT_PersistentFGets(nameBuf, nameBufLen, f);    // Discard header line\n    BT_PersistentFGets(nameBuf, nameBufLen, f);    // Get just the name of our application\n    pclose(f);\n\n    // Remove trailing newline if present\n    p = strchr(nameBuf, '\\n');\n    if (p)\n        *p = '\\0';\n    \n    // Strip off any arguments\n    p = outbuf;\n    nameLen = strlen(nameBuf);\n    // Find last instance of string nameBuf in string outbuf\n    p = strnstr(p, nameBuf, outBufLen);\n    while (p) {\n        q = p;\n        p = strnstr(q + nameLen, nameBuf, outBufLen - (q - nameBuf));\n    }\n    // Terminate the string immediately after path\n    if (q) {\n        q += nameLen;\n        *q = '\\0';\n    }\n}\n\n\n// This is an alternative to using Gestalt(gestaltSystemVersion,..) so \n// we don't need the Carbon Framework\nstatic void PrintOSVersion(int *majorVersion, int *minorVersion) {\n    char vers[100], build[100], *p1 = NULL;\n    FILE *f;\n    \n//ToDo: f = popen(\"/usr/libexec/PlistBuddy -c \\\"Print :ProductUserVisibleVersion\\\" /System/Library/CoreServices/SystemVersion.plist\");\n//      fgets(buf, f);\n//      flcose(f);\n\n    vers[0] = '\\0';\n    f = popen(\"sw_vers -productVersion\", \"r\");\n    if (!f) return;\n    fscanf(f, \"%s\", vers);\n    pclose(f);\n\n    if (vers[0] == '\\0') return;\n    // Extract the major system version number\n    *majorVersion = atoi(vers);    // Pass major version number back to caller\n    // Extract the minor system version number\n    p1 = strchr(vers, '.');\n    *minorVersion = atoi(p1+1);    // Pass minor version number back to caller\n    \n    // Now print the full OS version string\n    fputs(\"System version: Macintosh OS \", stderr);\n    fputs(vers, stderr);\n    \n    build[0] = '\\0';\n    f = popen(\"sw_vers -buildVersion\", \"r\");\n    if (f) {\n        fscanf(f, \"%s\", build);\n        pclose(f);\n        fputs(\" build \", stderr);\n        fputs(build, stderr);\n    }\n    \n    fputc('\\n', stderr);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/lib/mac/mac_util.mm": "// This file is part of BOINC.\n// http://boinc.berkeley.edu\n// Copyright (C) 2017 University of California\n//\n// BOINC is free software; you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License\n// as published by the Free Software Foundation,\n// either version 3 of the License, or (at your option) any later version.\n//\n// BOINC is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n// See the GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with BOINC.  If not, see <http://www.gnu.org/licenses/>.\n\n//  mac_util.mm\n\n#include \"mac_util.h\"\n#import <Cocoa/Cocoa.h>\n#define DLOPEN_NO_WARN\n#include <mach-o/dyld.h>\n#include <dlfcn.h>\n\n\n// Returns time in seconds since system was booted\n//\ndouble getTimeSinceBoot() {\n    return [[NSProcessInfo processInfo] systemUptime];\n}\n\n\nvoid getPathToThisApp(char* pathBuf, size_t bufSize) {\n    // Get the app's main bundle\n    NSBundle *main = [NSBundle mainBundle];\n    NSString *thePath = [main bundlePath];\n    strlcpy(pathBuf, [thePath UTF8String], bufSize);\n}\n\n\nvoid BringAppToFront() {\n    [ [NSRunningApplication currentApplication] activateWithOptions:NSApplicationActivateIgnoringOtherApps | NSApplicationActivateAllWindows ];\n}\n\n\nvoid BringAppWithPidToFront(pid_t pid) {\n    NSRunningApplication * theRunningApp = [NSRunningApplication runningApplicationWithProcessIdentifier:pid];\n    if (theRunningApp) {\n        [ theRunningApp activateWithOptions:NSApplicationActivateIgnoringOtherApps | NSApplicationActivateAllWindows ];\n    }\n}\n\n\npid_t getActiveAppPid() {\n    NSArray * runningApps = [[NSWorkspace sharedWorkspace] runningApplications];\n    unsigned int i;\n    unsigned int n = [ runningApps count ];\n    for (i=0; i<n; i++) {\n        NSRunningApplication * theApp = (NSRunningApplication *)[ runningApps objectAtIndex:i ];\n        if ([ theApp isActive ]) {\n            return [theApp processIdentifier];\n        }\n    }\n    return 0;\n}\n\n\npid_t getPidIfRunning(char * bundleID) {\n    NSString *NSBundleID = [[NSString alloc] initWithUTF8String:bundleID];\n    NSArray * runningApps = [NSRunningApplication runningApplicationsWithBundleIdentifier:NSBundleID];\n    if (runningApps) {\n        if ([runningApps count] > 0) {\n            return [((NSRunningApplication *)[runningApps firstObject]) processIdentifier];\n        }\n    }\n    return 0;\n}\n\n\n// Find the path to the app with the bundle identifier and (optionally) creator code.\n// The creator code can be NULL.\nOSStatus GetPathToAppFromID(OSType creator, CFStringRef bundleID, char *path, size_t maxLen) {\n    CFURLRef                appURL = NULL;\n    OSErr                   err;\n\n    // We must launch the System Events application for the target user\n    err = noErr;\n    *path = '\\0';\n\n    // LSCopyApplicationURLsForBundleIdentifier is not available before OS 10.10\n    CFArrayRef (*LSCopyAppURLsForBundleID)(CFStringRef, CFErrorRef) = NULL;\n    void *LSlib = dlopen(\"/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/LaunchServices\", RTLD_NOW | RTLD_NODELETE);\n    if (LSlib) {\n        LSCopyAppURLsForBundleID = (CFArrayRef(*)(CFStringRef, CFErrorRef)) dlsym(LSlib, \"LSCopyApplicationURLsForBundleIdentifier\");\n    }\n    if (LSCopyAppURLsForBundleID == NULL) {\n        err = fnfErr;\n    }\n\n#if __MAC_OS_X_VERSION_MIN_REQUIRED < 101000\n    if (err != noErr) {     // LSCopyAppURLsForBundleID == NULL\n        //LSFindApplicationForInfo is deprecated in OS 10.10, so may not be available in the future\n        OSStatus (*LSFindAppForInfo)(OSType, CFStringRef, CFStringRef, FSRef*, CFURLRef*) = NULL;\n        if (LSlib) {\n            LSFindAppForInfo = (OSStatus(*)(OSType, CFStringRef, CFStringRef, FSRef*, CFURLRef*))\n                        dlsym(LSlib, \"LSFindApplicationForInfo\");\n        }\n        if (LSFindAppForInfo == NULL) {\n            if (LSlib) dlclose(LSlib);\n            return fnfErr;\n        }\n        err = (*LSFindAppForInfo)(creator, bundleID, NULL, NULL, &appURL);\n    } else  // if (LSCopyApplicationURLsForBundleIdentifier != NULL)\n#endif\n    {\n        if (err == noErr) {\n            CFArrayRef appRefs = (*LSCopyAppURLsForBundleID)(bundleID, NULL);\n            if (appRefs == NULL) {\n                err = fnfErr;\n            } else {\n                appURL = (CFURLRef)CFArrayGetValueAtIndex(appRefs, 0);\n                CFRetain(appURL);\n                CFRelease(appRefs);\n            }\n        }\n        if (err != noErr) {\n            if (LSlib) dlclose(LSlib);\n            return err;\n        }\n    }   // end if (LSCopyApplicationURLsForBundleIdentifier != NULL)\n\n    if (err == noErr) {\n        CFStringRef CFPath = CFURLCopyFileSystemPath(appURL, kCFURLPOSIXPathStyle);\n        CFStringGetCString(CFPath, path, maxLen, kCFStringEncodingUTF8);\n        CFRelease(CFPath);\n    }\n    if (appURL) {\n        CFRelease(appURL);\n    }\n    if (LSlib) dlclose(LSlib);\n    return err;\n}\n\n// Test OS version number on all versions of OS X without using deprecated Gestalt\n// compareOSVersionTo(x, y) returns:\n// -1 if the OS version we are running on is less than x.y\n//  0 if the OS version we are running on is equal to x.y\n// +1 if the OS version we are running on is lgreater than x.y\nint compareOSVersionTo(int toMajor, int toMinor) {\n    static SInt32 major = -1;\n    static SInt32 minor = -1;\n\n    if (major < 0) {\n        char vers[100], *p1 = NULL;\n        FILE *f;\n        vers[0] = '\\0';\n        f = popen(\"sw_vers -productVersion\", \"r\");\n        if (f) {\n            fscanf(f, \"%s\", vers);\n            pclose(f);\n        }\n        if (vers[0] == '\\0') {\n            fprintf(stderr, \"popen(\\\"sw_vers -productVersion\\\" failed\\n\");\n            fflush(stderr);\n            return 0;\n        }\n        // Extract the major system version number\n        major = atoi(vers);\n        // Extract the minor system version number\n        p1 = strchr(vers, '.');\n        minor = atoi(p1+1);\n    }\n    \n    if (major < toMajor) return -1;\n    if (major > toMajor) return 1;\n    // if (major == toMajor) compare minor version numbers\n    if (minor < toMinor) return -1;\n    if (minor > toMinor) return 1;\n    return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/gtk/taskbarex.cpp": "/////////////////////////////////////////////////////////////////////////\n// File:        src/gtk/taskbarex.cpp\n// Purpose:     wxTaskBarIconEx\n// Author:      Vaclav Slavik\n// Modified by: Paul Cornett / Rom Walton\n// Created:     2004/05/29\n// RCS-ID:      $Id$\n// Copyright:   (c) Vaclav Slavik, 2004\n// Licence:     wxWindows licence\n/////////////////////////////////////////////////////////////////////////\n\n#ifdef __GNUG__\n#pragma implementation \"taskbarex.h\"\n#endif\n\n#define GSocket GlibGSocket\n#include <gtk/gtk.h>\n#undef GSocket\n\n#include \"stdwx.h\"\n\n#include <libnotify/notify.h>\n#include <glib.h>\n#include <dlfcn.h>\n\n#include \"BOINCGUIApp.h\"\n#include \"gtk/taskbarex.h\"\n#include \"BOINCTaskBar.h\"\n\n\n// Old Style\ntypedef NotifyNotification* (*__notify_notification_new_with_status_icon)\n(\n\tconst gchar *summary,\n    const gchar *body,\n\tconst gchar *icon,\n    GtkStatusIcon *status_icon\n);\n\n// New Style\ntypedef NotifyNotification* (*__notify_notification_new)\n(\n     const char *summary,\n     const char *body,\n     const char *icon\n);\n\nstatic void* notify_lib = NULL;\nstatic __notify_notification_new_with_status_icon my_notify_notification_new_with_status_icon = NULL;\nstatic __notify_notification_new my_notify_notification_new = NULL;\n\n\nstatic GtkStatusIcon* g_pStatusIcon = NULL;\nstatic NotifyNotification* g_pNotification = NULL;\n\n\n//-----------------------------------------------------------------------------\n\nextern \"C\" {\n    static void\n    status_icon_activate(GtkStatusIcon*, wxTaskBarIconEx* taskBarIcon)\n    {\n        wxTaskBarIconExEvent eventLeftDClick(wxEVT_TASKBAR_LEFT_DCLICK, taskBarIcon);\n        taskBarIcon->AddPendingEvent(eventLeftDClick);\n    }\n\n    static void\n    status_icon_popup_menu(GtkStatusIcon*, guint, guint, wxTaskBarIconEx* taskBarIcon)\n    {\n        wxTaskBarIconExEvent eventDown(wxEVT_TASKBAR_RIGHT_DOWN, taskBarIcon);\n        taskBarIcon->AddPendingEvent(eventDown);\n        wxTaskBarIconExEvent eventUp(wxEVT_TASKBAR_RIGHT_UP, taskBarIcon);\n        taskBarIcon->AddPendingEvent(eventUp);\n    }\n\n    static void\n    status_icon_notification_actions(NotifyNotification* notification, gchar *action, wxTaskBarIconEx* taskBarIcon)\n    {\n        if (strcmp(action, \"default\") == 0) {\n            taskBarIcon->FireUserClickedEvent();\n        }\n    }\n\n    static void\n    status_icon_notification_closed(NotifyNotification* notification, wxTaskBarIconEx* taskBarIcon)\n    {\n        if (taskBarIcon->IsUserClicked()) {\n            wxTaskBarIconExEvent eventUserClicked(wxEVT_TASKBAR_BALLOON_USERCLICK, taskBarIcon);\n            taskBarIcon->AddPendingEvent(eventUserClicked);\n        } else {\n            wxTaskBarIconExEvent eventTimeout(wxEVT_TASKBAR_BALLOON_USERTIMEOUT, taskBarIcon);\n            taskBarIcon->AddPendingEvent(eventTimeout);\n        }\n\n        taskBarIcon->ClearEvents();\n    }\n}\n\n\n//-----------------------------------------------------------------------------\n\n\nstatic wxChar* wxTaskBarExWindow      = (wxChar*) wxT(\"wxTaskBarExWindow\");\n\n\nDEFINE_EVENT_TYPE( wxEVT_TASKBAR_CREATED )\nDEFINE_EVENT_TYPE( wxEVT_TASKBAR_CONTEXT_MENU )\nDEFINE_EVENT_TYPE( wxEVT_TASKBAR_SELECT )\nDEFINE_EVENT_TYPE( wxEVT_TASKBAR_KEY_SELECT )\nDEFINE_EVENT_TYPE( wxEVT_TASKBAR_BALLOON_SHOW )\nDEFINE_EVENT_TYPE( wxEVT_TASKBAR_BALLOON_HIDE )\nDEFINE_EVENT_TYPE( wxEVT_TASKBAR_BALLOON_USERTIMEOUT )\nDEFINE_EVENT_TYPE( wxEVT_TASKBAR_BALLOON_USERCLICK )\nDEFINE_EVENT_TYPE( wxEVT_TASKBAR_SHUTDOWN )\n\nIMPLEMENT_DYNAMIC_CLASS(wxTaskBarIconEx, wxEvtHandler)\n\nBEGIN_EVENT_TABLE (wxTaskBarIconEx, wxEvtHandler)\nEND_EVENT_TABLE ()\n\n\nwxTaskBarIconEx::wxTaskBarIconEx()\n{\n    wxTaskBarIconEx((wxChar*)wxTaskBarExWindow, 1);\n}\n\nwxTaskBarIconEx::wxTaskBarIconEx( wxChar* szWindowTitle, wxInt32 iTaskbarID )\n{\n    m_pWnd = NULL;\n    m_iTaskbarID = iTaskbarID;\n    g_pStatusIcon = NULL;\n    g_pNotification = NULL;\n    m_bUserClicked = false;\n\n    notify_lib = dlopen(\"libnotify.so\", RTLD_NOW);\n    if (notify_lib) {\n        my_notify_notification_new_with_status_icon = (__notify_notification_new_with_status_icon)dlsym(notify_lib, \"notify_notification_new_with_status_icon\");\n        my_notify_notification_new = (__notify_notification_new)dlsym(notify_lib, \"notify_notification_new\");\n    }\n\n    notify_init((const char*)wxString(szWindowTitle).mb_str());\n}\n\nwxTaskBarIconEx::~wxTaskBarIconEx()\n{\n    m_bUserClicked = false;\n\n    if (m_pWnd)\n    {\n        m_pWnd->PopEventHandler();\n        m_pWnd->Destroy();\n        m_pWnd = NULL;\n    }\n\n    if (g_pNotification)\n    {\n        notify_notification_close(g_pNotification, NULL);\n        g_pNotification = NULL;\n    }\n\n    if (g_pStatusIcon)\n    {\n        g_object_unref(g_pStatusIcon);\n        g_pStatusIcon = NULL;\n    }\n\n    if (notify_lib) {\n        my_notify_notification_new_with_status_icon = NULL;\n        my_notify_notification_new = NULL;\n        dlclose(notify_lib);\n    }\n}\n\nbool wxTaskBarIconEx::IsIconInstalled() const {\n    return (g_pStatusIcon != NULL);\n}\n\nvoid wxTaskBarIconEx::ClearEvents() {\n    m_bUserClicked = false;\n}\n\nvoid wxTaskBarIconEx::FireUserClickedEvent() {\n    m_bUserClicked = true;\n}\n\nbool wxTaskBarIconEx::IsUserClicked() {\n    return m_bUserClicked;\n}\n\n// Operations\nbool wxTaskBarIconEx::SetIcon(const wxIcon& icon, const wxString& message)\n{\n    if (!IsOK())\n        return false;\n\n    if (!icon.Ok())\n        return false;\n\n    wxBitmap bitmap = icon;\n\n    if (!g_pStatusIcon)\n    {\n        g_pStatusIcon = gtk_status_icon_new_from_pixbuf(bitmap.GetPixbuf());\n        g_signal_connect(g_pStatusIcon, \"activate\", G_CALLBACK(status_icon_activate), this);\n        g_signal_connect(g_pStatusIcon, \"popup_menu\", G_CALLBACK(status_icon_popup_menu), this);\n    }\n\n    gtk_status_icon_set_from_pixbuf(g_pStatusIcon, bitmap.GetPixbuf());\n    if (!message.empty())\n    {\n        gtk_status_icon_set_tooltip_text(g_pStatusIcon, message.mb_str());\n    }\n    gtk_status_icon_set_visible(g_pStatusIcon, TRUE);\n\n    return true;\n}\n\nstatic const char* SetBalloon__returnIcon(const unsigned int iconballoon) {\n    switch(iconballoon)\n    {\n        case BALLOONTYPE_INFO:\n            return(GTK_STOCK_DIALOG_INFO);\n            break;\n        case BALLOONTYPE_WARNING:\n            return(GTK_STOCK_DIALOG_WARNING);\n            break;\n        case BALLOONTYPE_ERROR:\n        default:\n            return(GTK_STOCK_DIALOG_ERROR);\n            break;\n    }\n    return(NULL);\n}\n\nbool wxTaskBarIconEx::SetBalloon(const wxIcon& icon, const wxString title, const wxString message, unsigned int iconballoon)\n{\n    wxLogTrace(wxT(\"Function Start/End\"), wxT(\"wxTaskBarIconEx::SetBalloon - Function Begin\"));\n\n    bool retval = false;\n    GError* error = NULL;\n\n    if (!IsOK())\n        return false;\n\n    if (!icon.Ok())\n        return false;\n\n    if (!SetIcon(icon, wxEmptyString))\n        return false;\n\n    const char* desired_icon = SetBalloon__returnIcon(iconballoon);\n\n    if (!g_pNotification)\n    {\n        // Old Style\n        if (my_notify_notification_new_with_status_icon) {\n            g_pNotification =\n                (*my_notify_notification_new_with_status_icon)(\n                    title.mb_str(),\n                    message.mb_str(),\n                    desired_icon,\n                    g_pStatusIcon\n                );\n        }\n\n        // New Style\n        if (my_notify_notification_new) {\n            g_pNotification =\n                (*my_notify_notification_new)(\n                    title.mb_str(),\n                    message.mb_str(),\n                    gtk_status_icon_get_icon_name(g_pStatusIcon)\n            );\n        }\n\n        g_signal_connect(\n            g_pNotification,\n            \"closed\",\n            G_CALLBACK(status_icon_notification_closed),\n            this\n        );\n\n        notify_notification_add_action(\n            g_pNotification,\n            \"default\",\n            \"Do Default Action\",\n            NOTIFY_ACTION_CALLBACK(status_icon_notification_actions),\n            this,\n            NULL\n        );\n    }\n    else\n    {\n        notify_notification_update(\n            g_pNotification,\n            title.mb_str(),\n            message.mb_str(),\n            desired_icon\n        );\n    }\n\n    retval = notify_notification_show(g_pNotification, &error);\n    g_clear_error(&error);\n\n    wxLogTrace(wxT(\"Function Start/End\"), wxT(\"wxTaskBarIconEx::SetBalloon - Function End\"));\n    return retval;\n}\n\nbool wxTaskBarIconEx::QueueBalloon(const wxIcon& icon, const wxString title, const wxString message, unsigned int iconballoon)\n{\n    // There isn't two classifications of notifications on Linux as there is on Windows\n    return SetBalloon(icon, title, message, iconballoon);\n}\n\nbool wxTaskBarIconEx::RemoveIcon()\n{\n    if (!IsOK())\n        return false;\n\n    if (g_pNotification)\n    {\n        notify_notification_close(g_pNotification, NULL);\n        g_pNotification = NULL;\n    }\n\n    if (g_pStatusIcon)\n    {\n        g_object_unref(g_pStatusIcon);\n        g_pStatusIcon = NULL;\n    }\n\n    return true;\n}\n\nbool wxTaskBarIconEx::PopupMenu(wxMenu* menu)\n{\n#if wxUSE_MENUS\n\n    if (m_pWnd == NULL)\n    {\n        m_pWnd = new wxTopLevelWindow(NULL, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0);\n        m_pWnd->PushEventHandler(this);\n    }\n\n    wxPoint point(-1, -1);\n#ifdef __WXUNIVERSAL__\n    point = wxGetMousePosition();\n#endif\n\n    m_pWnd->PopupMenu(menu, point);\n\n#endif // wxUSE_MENUS\n    return true;\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/mac/MacNotification.mm": "// This file is part of BOINC.\n// http://boinc.berkeley.edu\n// Copyright (C) 2013 University of California\n//\n// BOINC is free software; you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License\n// as published by the Free Software Foundation,\n// either version 3 of the License, or (at your option) any later version.\n//\n// BOINC is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n// See the GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with BOINC.  If not, see <http://www.gnu.org/licenses/>.\n\n//  MacNotification.mm\n\n#include \"MacGUI.pch\"\n#include \"BOINCGUIApp.h\"    // For wxGetApp()\n#include \"BOINCTaskBar.h\"\n#include <dlfcn.h>\n#import <Cocoa/Cocoa.h>\n\n// Weak linking of objective-C classes is not supported before \n// OS 10.6.8 so to be compatible with OS 10.5 we must use the\n// objective-C equivalent of dlopen() and dlsym().\nstatic Class NSUserNotificationClass = nil;\nstatic Class NSUserNotificationCenterClass = nil;\nstatic NSString **NSUserNotificationDefaultSoundNamePtr = nil;\n\n\n@interface MacNotification : NSObject <NSUserNotificationCenterDelegate>\n{\n    NSUserNotification *theNotification;\n}\n- (void) showNewNoticesNotification:(NSString *)theTitle withMessage:(NSString *)theMessage;\n\n@end\n\n@implementation MacNotification\n\n- (void) showNewNoticesNotification:(NSString *)theTitle withMessage:(NSString *)theMessage\n{\n    [[NSUserNotificationCenterClass defaultUserNotificationCenter] setDelegate:self];\n\n    theNotification = [[NSUserNotificationClass alloc] init];\n    [theNotification setTitle:theTitle];\n    [theNotification setInformativeText:theMessage];\n    [theNotification setDeliveryDate:[NSDate dateWithTimeInterval:0 sinceDate:[NSDate date]]];\n    if (NSUserNotificationDefaultSoundNamePtr == nil) {\n        NSUserNotificationDefaultSoundNamePtr = (NSString **)dlsym(RTLD_DEFAULT, \"NSUserNotificationDefaultSoundName\");\n    }\n    if (NSUserNotificationDefaultSoundNamePtr != nil) {\n        [theNotification setSoundName:*NSUserNotificationDefaultSoundNamePtr];\n    }\n    NSUserNotificationCenter *center = [NSUserNotificationCenterClass defaultUserNotificationCenter];\n    [center deliverNotification:theNotification];\n}\n\n- (void) userNotificationCenter:(NSUserNotificationCenter *)center didActivateNotification:(NSUserNotification *)notification\n{\n    if ([[notification title] isEqualToString:[theNotification title]] ) {\n        wxGetApp().ShowNotifications();\n    }\n}\n\n@end\n\nbool CTaskBarIcon::IsBalloonsSupported() {\n    if ((NSUserNotificationClass != nil) && (NSUserNotificationCenterClass != nil)) return true;\n    \n    NSBundle *bundle = [NSBundle bundleWithPath:@\"/System/Library/Frameworks/Foundation.framework\"];\n    NSError *err = nil;\n    bool loaded = [bundle loadAndReturnError:&err];\n    if (!loaded) return false;\n    \n\n    NSUserNotificationClass = NSClassFromString(@\"NSUserNotification\");\n    if (NSUserNotificationClass == nil) return false;\n    \n    NSUserNotificationCenterClass = NSClassFromString(@\"NSUserNotificationCenter\");\n    return (NSUserNotificationCenterClass != nil);\n}\n\nstatic MacNotification* MacNotificationClass = nil;\n\nbool CTaskBarIcon::QueueBalloon(\n        const wxIcon&,\n        const wxString title,\n        const wxString message,\n        unsigned int\n    ) {\n\n    if (!IsBalloonsSupported())return false;\n    \n    if (MacNotificationClass == nil) {\n        MacNotificationClass = [MacNotification alloc];\n    }\n    \n    if (MacNotificationClass) {\n        char *utf8Title = (char *)(title.utf8_str().data());\n        NSString *theTitle = [[NSString alloc] initWithUTF8String:utf8Title];\n\n        char *utf8Message = (char *)(message.utf8_str().data());\n        NSString *theMessage = [[NSString alloc] initWithUTF8String:utf8Message];\n\n        [MacNotificationClass showNewNoticesNotification:theTitle withMessage:theMessage];\n    }\n    \n    return false;\n}\n\n\n\n// wxTopLevel::RequestUserAttention() doesn't have an API to cancel \n// after a timeout, so we must call Notification Manager directly on Mac\nvoid CTaskBarIcon::MacRequestUserAttention() {\n    m_pNotificationRequest = [NSApp requestUserAttention:NSInformationalRequest];\n}\n\nvoid CTaskBarIcon::MacCancelUserAttentionRequest() {\n    if (m_pNotificationRequest) {\n        [NSApp cancelUserAttentionRequest:m_pNotificationRequest];\n        m_pNotificationRequest = 0;\n    }\n}\n\n\nint CTaskBarIcon::SetDockBadge(wxBitmap* bmp) {\n    // Reset to standard Dock tile (no badge)\n    [NSApp setApplicationIconImage:nil];\n    \n    if (bmp == NULL) {\n        return 0;\n    }\n\n    NSImage *appIcon = [NSApp applicationIconImage];\n    NSImage *buf = [appIcon copy];\n    NSImage *badge = bmp->GetNSImage();\n\n    [buf lockFocus];\n    [badge drawAtPoint:NSMakePoint(0, 0)\n            fromRect:NSZeroRect\n            operation:NSCompositeSourceOver\n            fraction:1.0f\n    ];\n\n    [buf unlockFocus];\n    [NSApp setApplicationIconImage:buf];\n    [buf release];\n\n    return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/m4/check_ssl.m4": "AC_DEFUN([CHECK_SSL],\n[\nSSLDIR=\nSSL_LIBS=\nSSL_CFLAGS=\nSSL_CXXFLAGS=\nAC_ARG_WITH(pkg-config,\n    AC_HELP_STRING([--with-pkg-config],\n       [Use pkg-config specified]),\n    [mypkgconfig=\"${withval}\"]\n    [mypkgconfig=])\n\n\nAC_PATH_PROG(PKGCONFIG,[$mypkgconfig pkg-config])\nAC_ARG_WITH(ssl,\n    AC_HELP_STRING([--with-ssl],\n       [Use openssl (in specified installation directory)]),\n    [check_ssl_dir=\"$withval\"],\n    [check_ssl_dir=])\nif test \"x${PKGCONFIG}\" != \"x\" -a \"x${check_ssl_dir}\" = \"x\" ; then\n    SSLDIR=\"`${PKGCONFIG} openssl --cflags-only-I | sed -e 's/-I//' -e 's/\\/include\\/openssl//' -e 's/\\/include//' | grep '[a-z]' 2>/dev/null`\"\n    if test \"x${SSLDIR}\" = \"x\" ; then\n      if test -d \"/usr/include/openssl\" -o -f \"/usr/include/ssl.h\" ; then\n        SSLDIR=\"/usr\"\n      fi\n    fi\n    if test \"x${enable_client_release}\" = \"xyes\" -o \"x${disable_static_linkage}\" = \"xno\" ; then\n      SSL_LIBS=\"`${PKGCONFIG} openssl --libs --static 2>/dev/null`\"\n    fi  \n    if test \"x${SSL_LIBS}\" = \"x\" ; then\n      SSL_LIBS=\"`${PKGCONFIG} openssl --libs 2>/dev/null`\"\n    fi\n\n\n    SSL_CFLAGS=\"`${PKGCONFIG} openssl --cflags 2>/dev/null`\"\n    SSL_CXXFLAGS=\"${SSL_CFLAGS}\"\n    SSL_CPPFLAGS=\"${SSL_CFLAGS}\"\n    found_ssl=\"yes\"\nfi\nif test \"x${SSL_LIBS}\" = \"x\" ; then\n  found_ssl=\"no\"\n  for dir in $check_ssl_dir ${prefix} /usr/local/ssl /usr/lib/ssl /usr/ssl /usr/pkg /usr/local /usr /opt/misc /opt/csw /opt/sfw; do\n    ssldir=\"$dir\"\n    if test -f \"$dir/include/openssl/ssl.h\"; then\n      found_ssl=\"yes\";\n      SSLDIR=\"${ssldir}\"\n      SSL_CFLAGS=\"-I$ssldir/include -I$ssldir/include/openssl\";\n      SSL_CXXFLAGS=\"-I$ssldir/include -I$ssldir/include/openssl\";\n      SSL_LIBS=\"-L$ssldir -L$ssldir/lib -lssl -lcrypto\"\n      AC_CHECK_LIB([dl], [dlopen], \n          [SSL_LIBS=\"${SSL_LIBS} ${sah_lib_last}\"])\n      AC_CHECK_LIB([z], [gzopen], \n          [SSL_LIBS=\"${SSL_LIBS} ${sah_lib_last}\"])\n      break;\n    fi\n    if test -f \"$dir/include/ssl.h\"; then\n      found_ssl=\"yes\"\n      SSLDIR=\"${ssldir}\"\n      SSL_CFLAGS=\"-I$ssldir/include/\"\n      SSL_CXXFLAGS=\"-I$ssldir/include/\"\n      SSL_LIBS=\"-L$ssldir -L$ssldir/lib -lssl -lcrypto\"\n      AC_CHECK_LIB([dl], [dlopen], \n          [SSL_LIBS=\"${SSL_LIBS} ${sah_lib_last}\"])\n      AC_CHECK_LIB([z], [gzopen], \n          [SSL_LIBS=\"${SSL_LIBS} ${sah_lib_last}\"])\n      break;\n    fi\n  done\nfi\nAC_MSG_CHECKING(for openssl)\nAC_MSG_RESULT($found_ssl)\n\nBOINC_CHECK_LIB_WITH([gcrypt],[gcry_randomize],[SSL_LIBS])\nBOINC_CHECK_LIB_WITH([gpg-error],[gpg_strerror], [SSL_LIBS])\n\nif test x_$found_ssl != x_yes; then\n   AC_MSG_ERROR([\n----------------------------------------------------------------------\n  Cannot find openssl libraries.\n\n  Please install openssl or specify installation directory with\n  --with-ssl=(dir).\n----------------------------------------------------------------------\n])\nelse\n        printf \"OpenSSL found in $SSLDIR\\n\";\n\tAC_DEFINE_UNQUOTED([USE_OPENSSL],[1],\n\t  [\"Define to 1 if you want to use the openssl crypto library\"])\n\tAC_SUBST(SSLDIR)\n\tAC_SUBST(SSL_CFLAGS)\n\tAC_SUBST(SSL_CXXFLAGS)\n\tAC_SUBST(SSL_LIBS)\nfi\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/client/gpu_nvidia.cpp": "// This file is part of BOINC.\n// http://boinc.berkeley.edu\n// Copyright (C) 2012 University of California\n//\n// BOINC is free software; you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License\n// as published by the Free Software Foundation,\n// either version 3 of the License, or (at your option) any later version.\n//\n// BOINC is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n// See the GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with BOINC.  If not, see <http://www.gnu.org/licenses/>.\n\n// Detection of NVIDIA GPUs\n\n#ifdef _WIN32\n#include \"boinc_win.h\"\n/* get annotation macros from sal.h */\n/* define the ones that don't exist */\n#include \"sal.h\"\n/* These are just an annotations.  They don't do anything */\n#ifndef __success\n#define __success(x)  \n#endif\n#ifndef __in\n#define __in\n#endif\n#ifndef __out\n#define __out\n#endif\n#ifndef __in_ecount\n#define __in_ecount(x)\n#endif\n#ifndef __out_ecount\n#define __out_ecount(x)\n#endif\n#ifndef __in_opt\n#define __in_opt\n#endif\n#ifndef __out_opt\n#define __out_opt\n#endif\n#ifndef __inout\n#define __inout\n#endif\n#ifndef __inout_opt\n#define __inout_opt\n#endif\n#ifndef __inout_ecount\n#define __inout_ecount(x)\n#endif\n#ifndef __inout_ecount_full\n#define __inout_ecount_full(x)\n#endif\n#ifndef __inout_ecount_part_opt\n#define __inout_ecount_part_opt(x,y)\n#endif \n#ifndef __inout_ecount_full_opt\n#define __inout_ecount_full_opt(x,y)\n#endif \n#ifndef __out_ecount_full_opt\n#define __out_ecount_full_opt(x)\n#endif \n\n#include \"nvapi.h\"\n#ifdef _MSC_VER\n#define snprintf _snprintf\n#endif\n#else\n#ifdef __APPLE__\n// Suppress obsolete warning when building for OS 10.3.9\n#define DLOPEN_NO_WARN\n#include <mach-o/dyld.h>\n#include <Carbon/Carbon.h>\n#include \"hostinfo.h\"\n#endif\n#include \"config.h\"\n#include <dlfcn.h>\n#endif\n\n#include <vector>\n#include <string>\n\nusing std::vector;\nusing std::string;\n\n#include \"coproc.h\"\n#include \"util.h\"\n\n#include \"client_msgs.h\"\n#include \"gpu_detect.h\"\n\nstatic void get_available_nvidia_ram(COPROC_NVIDIA &cc, vector<string>& warnings);\n\n#ifndef SIM\n#if !(defined(_WIN32) || defined(__APPLE__))\n\nstatic int nvidia_driver_version() {\n    int (*nvml_init)()  = NULL;\n    int (*nvml_finish)()  = NULL;\n    int (*nvml_driver)(char *f, unsigned int len) = NULL;\n    int dri_ver  = 0;\n    void *handle = NULL;\n    char driver_string[81];\n\n    handle  = dlopen(\"libnvidia-ml.so.1\", RTLD_NOW);\n    if (!handle) {\n        handle  = dlopen(\"libnvidia-ml.so\", RTLD_NOW);\n        if (!handle) {\n            goto end;\n        }\n    }\n\n    nvml_driver = (int(*)(char *, unsigned int)) dlsym(handle,  \"nvmlSystemGetDriverVersion\");\n    nvml_init = (int(*)(void)) dlsym(handle,  \"nvmlInit\");\n    nvml_finish = (int(*)(void)) dlsym(handle,  \"nvmlShutdown\");\n    if (!nvml_driver || !nvml_init || !nvml_finish) goto end;\n\n    if (nvml_init()) goto end;\n    if (nvml_driver(driver_string, 80)) goto end;\n    dri_ver = (int) (100. * atof(driver_string));\n\nend:\n    if (nvml_finish) nvml_finish();\n    if (handle) dlclose(handle);\n    return dri_ver;\n}\n\n#endif \n#endif // SIM\n\n// return 1/-1/0 if device 1 is more/less/same capable than device 2.\n// factors (decreasing priority):\n// - compute capability\n// - software version\n// - available memory\n// - speed\n//\n// If \"loose\", ignore FLOPS and tolerate small memory diff\n//\nint nvidia_compare(COPROC_NVIDIA& c1, COPROC_NVIDIA& c2, bool loose) {\n    if (c1.prop.major > c2.prop.major) return 1;\n    if (c1.prop.major < c2.prop.major) return -1;\n    if (c1.prop.minor > c2.prop.minor) return 1;\n    if (c1.prop.minor < c2.prop.minor) return -1;\n    if (c1.cuda_version > c2.cuda_version) return 1;\n    if (c1.cuda_version < c2.cuda_version) return -1;\n    if (loose) {\n        if (c1.available_ram> 1.4*c2.available_ram) return 1;\n        if (c1.available_ram < .7* c2.available_ram) return -1;\n        return 0;\n    }\n    if (c1.available_ram > c2.available_ram) return 1;\n    if (c1.available_ram < c2.available_ram) return -1;\n    double s1 = c1.peak_flops;\n    double s2 = c2.peak_flops;\n    if (s1 > s2) return 1;\n    if (s1 < s2) return -1;\n    return 0;\n}\n\nenum CUdevice_attribute_enum {\n    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,\n    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X = 2,\n    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y = 3,\n    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z = 4,\n    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X = 5,\n    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y = 6,\n    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z = 7,\n    CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,\n    CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY = 9,\n    CU_DEVICE_ATTRIBUTE_WARP_SIZE = 10,\n    CU_DEVICE_ATTRIBUTE_MAX_PITCH = 11,\n    CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12,\n    CU_DEVICE_ATTRIBUTE_CLOCK_RATE = 13,\n    CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT = 14,\n    CU_DEVICE_ATTRIBUTE_GPU_OVERLAP = 15,\n    CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT = 16,\n    CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT = 17,\n    CU_DEVICE_ATTRIBUTE_INTEGRATED = 18,\n    CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY = 19,\n    CU_DEVICE_ATTRIBUTE_PCI_BUS_ID = 33,\n    CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID = 34,\n    CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID = 50\n};\n\n#ifdef _WIN32\ntypedef int (__stdcall *CUDA_GDC)(int *count);\ntypedef int (__stdcall *CUDA_GDV)(int* version);\ntypedef int (__stdcall *CUDA_GDI)(unsigned int);\ntypedef int (__stdcall *CUDA_GDG)(int*, int);\ntypedef int (__stdcall *CUDA_GDA)(int*, int, int);\ntypedef int (__stdcall *CUDA_GDN)(char*, int, int);\ntypedef int (__stdcall *CUDA_GDM)(size_t*, int);\ntypedef int (__stdcall *CUDA_GDCC)(int*, int*, int);\ntypedef int (__stdcall *CUDA_CC)(void**, unsigned int, unsigned int);\ntypedef int (__stdcall *CUDA_CD)(void*);\ntypedef int (__stdcall *CUDA_MA)(unsigned int*, size_t);\ntypedef int (__stdcall *CUDA_MF)(unsigned int);\ntypedef int (__stdcall *CUDA_MGI)(size_t*, size_t*);\n\nCUDA_GDC p_cuDeviceGetCount = NULL;\nCUDA_GDV p_cuDriverGetVersion = NULL;\nCUDA_GDI p_cuInit = NULL;\nCUDA_GDG p_cuDeviceGet = NULL;\nCUDA_GDA p_cuDeviceGetAttribute = NULL;\nCUDA_GDN p_cuDeviceGetName = NULL;\nCUDA_GDM p_cuDeviceTotalMem = NULL;\nCUDA_GDCC p_cuDeviceComputeCapability = NULL;\nCUDA_CC p_cuCtxCreate = NULL;\nCUDA_CD p_cuCtxDestroy = NULL;\nCUDA_MA p_cuMemAlloc = NULL;\nCUDA_MF p_cuMemFree = NULL;\nCUDA_MGI p_cuMemGetInfo = NULL;\n#else\nint (*p_cuInit)(unsigned int);\nint (*p_cuDeviceGetCount)(int*);\nint (*p_cuDriverGetVersion)(int*);\nint (*p_cuDeviceGet)(int*, int);\nint (*p_cuDeviceGetAttribute)(int*, int, int);\nint (*p_cuDeviceGetName)(char*, int, int);\nint (*p_cuDeviceTotalMem)(size_t*, int);\nint (*p_cuDeviceComputeCapability)(int*, int*, int);\nint (*p_cuCtxCreate)(void**, unsigned int, unsigned int);\nint (*p_cuCtxDestroy)(void*);\nint (*p_cuMemAlloc)(unsigned int*, size_t);\nint (*p_cuMemFree)(unsigned int);\nint (*p_cuMemGetInfo)(size_t*, size_t*);\n#endif\n\n// NVIDIA interfaces are documented here:\n// http://developer.download.nvidia.com/compute/cuda/2_3/toolkit/docs/online/index.html\n\nvoid COPROC_NVIDIA::get(\n    vector<string>& warnings\n) {\n    int cuda_ndevs, retval;\n    char buf[256];\n    int j, itemp;\n    size_t global_mem = 0;\n    string s;\n    COPROC_NVIDIA cc;\n\n#ifdef _WIN32\n    HMODULE cudalib = LoadLibrary(\"nvcuda.dll\");\n    if (!cudalib) {\n        warnings.push_back(\"No NVIDIA library found\");\n        return;\n    }\n    p_cuDeviceGetCount = (CUDA_GDC)GetProcAddress( cudalib, \"cuDeviceGetCount\" );\n    p_cuDriverGetVersion = (CUDA_GDV)GetProcAddress( cudalib, \"cuDriverGetVersion\" );\n    p_cuInit = (CUDA_GDI)GetProcAddress( cudalib, \"cuInit\" );\n    p_cuDeviceGet = (CUDA_GDG)GetProcAddress( cudalib, \"cuDeviceGet\" );\n    p_cuDeviceGetAttribute = (CUDA_GDA)GetProcAddress( cudalib, \"cuDeviceGetAttribute\" );\n    p_cuDeviceGetName = (CUDA_GDN)GetProcAddress( cudalib, \"cuDeviceGetName\" );\n    p_cuDeviceTotalMem = (CUDA_GDM)GetProcAddress( cudalib, \"cuDeviceTotalMem\" );\n    p_cuDeviceComputeCapability = (CUDA_GDCC)GetProcAddress( cudalib, \"cuDeviceComputeCapability\" );\n    p_cuCtxCreate = (CUDA_CC)GetProcAddress( cudalib, \"cuCtxCreate\" );\n    p_cuCtxDestroy = (CUDA_CD)GetProcAddress( cudalib, \"cuCtxDestroy\" );\n    p_cuMemAlloc = (CUDA_MA)GetProcAddress( cudalib, \"cuMemAlloc\" );\n    p_cuMemFree = (CUDA_MF)GetProcAddress( cudalib, \"cuMemFree\" );\n    p_cuMemGetInfo = (CUDA_MGI)GetProcAddress( cudalib, \"cuMemGetInfo\" );\n\n#ifndef SIM\n    NvAPI_Initialize();\n    NvAPI_ShortString ss;\n    NvU32 Version = 0;\n    NvAPI_SYS_GetDriverAndBranchVersion(&Version, ss);\n\n#if 0\n    // NvAPI now provides an API for getting #cores :-)\n    // But not FLOPs per clock cycle :-(\n    // Anyway, don't use this for now because server code estimates FLOPS\n    // based on compute capability, so we may as well do the same\n    // See http://docs.nvidia.com/gameworks/content/gameworkslibrary/coresdk/nvapi/\n    //\n    NvPhysicalGpuHandle GPUHandle[NVAPI_MAX_PHYSICAL_GPUS];\n    NvU32 GpuCount, nc;\n    NvAPI_EnumPhysicalGPUs(GPUHandle, &GpuCount);\n    for (unsigned int i=0; i<GpuCount; i++) {\n        NvAPI_GPU_GetGpuCoreCount(GPUHandle[i], &nc);\n    }\n#endif\n#endif\n#else\n\nvoid* cudalib = NULL;\n\n#ifdef __APPLE__\n    cudalib = dlopen(\"/usr/local/cuda/lib/libcuda.dylib\", RTLD_NOW);\n#else\n    cudalib = dlopen(\"libcuda.so\", RTLD_NOW);\n#endif\n    if (!cudalib) {\n        sprintf(buf, \"NVIDIA: %s\", dlerror());\n        warnings.push_back(buf);\n        return;\n    }\n    p_cuDeviceGetCount = (int(*)(int*)) dlsym(cudalib, \"cuDeviceGetCount\");\n    p_cuDriverGetVersion = (int(*)(int*)) dlsym( cudalib, \"cuDriverGetVersion\" );\n    p_cuInit = (int(*)(unsigned int)) dlsym( cudalib, \"cuInit\" );\n    p_cuDeviceGet = (int(*)(int*, int)) dlsym( cudalib, \"cuDeviceGet\" );\n    p_cuDeviceGetAttribute = (int(*)(int*, int, int)) dlsym( cudalib, \"cuDeviceGetAttribute\" );\n    p_cuDeviceGetName = (int(*)(char*, int, int)) dlsym( cudalib, \"cuDeviceGetName\" );\n    p_cuDeviceTotalMem = (int(*)(size_t*, int)) dlsym( cudalib, \"cuDeviceTotalMem\" );\n    p_cuDeviceComputeCapability = (int(*)(int*, int*, int)) dlsym( cudalib, \"cuDeviceComputeCapability\" );\n    p_cuCtxCreate = (int(*)(void**, unsigned int, unsigned int)) dlsym( cudalib, \"cuCtxCreate\" );\n    p_cuCtxDestroy = (int(*)(void*)) dlsym( cudalib, \"cuCtxDestroy\" );\n    p_cuMemAlloc = (int(*)(unsigned int*, size_t)) dlsym( cudalib, \"cuMemAlloc\" );\n    p_cuMemFree = (int(*)(unsigned int)) dlsym( cudalib, \"cuMemFree\" );\n    p_cuMemGetInfo = (int(*)(size_t*, size_t*)) dlsym( cudalib, \"cuMemGetInfo\" );\n#endif\n\n    if (!p_cuDriverGetVersion) {\n        warnings.push_back(\"cuDriverGetVersion() missing from NVIDIA library\");\n        goto leave;\n    }\n    if (!p_cuInit) {\n        warnings.push_back(\"cuInit() missing from NVIDIA library\");\n        goto leave;\n    }\n    if (!p_cuDeviceGetCount) {\n        warnings.push_back(\"cuDeviceGetCount() missing from NVIDIA library\");\n        goto leave;\n    }\n    if (!p_cuDeviceGet) {\n        warnings.push_back(\"cuDeviceGet() missing from NVIDIA library\");\n        goto leave;\n    }\n    if (!p_cuDeviceGetAttribute) {\n        warnings.push_back(\"cuDeviceGetAttribute() missing from NVIDIA library\");\n        goto leave;\n    }\n    if (!p_cuDeviceTotalMem) {\n        warnings.push_back(\"cuDeviceTotalMem() missing from NVIDIA library\");\n        goto leave;\n    }\n    if (!p_cuDeviceComputeCapability) {\n        warnings.push_back(\"cuDeviceComputeCapability() missing from NVIDIA library\");\n        goto leave;\n    }\n    if (!p_cuMemAlloc) {\n        warnings.push_back(\"cuMemAlloc() missing from NVIDIA library\");\n        goto leave;\n    }\n    if (!p_cuMemFree) {\n        warnings.push_back(\"cuMemFree() missing from NVIDIA library\");\n        goto leave;\n    }\n\n    retval = (*p_cuInit)(0);\n#ifdef __APPLE__\n    // If system is just booting, CUDA driver may not be ready yet\n    if (retval) {\n        if (get_system_uptime() < 300) {   // Retry only if system has been up for under 5 minutes\n            for (int retryCount=0; retryCount<120; retryCount++) {\n                retval = (*p_cuInit)(0);\n                if (!retval) break;\n                boinc_sleep(1.);\n                continue;\n            }\n        }\n    }\n#endif\n    \n    if (retval) {\n        sprintf(buf, \"NVIDIA drivers present but no GPUs found\");\n        warnings.push_back(buf);\n        goto leave;\n    }\n\n    retval = (*p_cuDriverGetVersion)(&cuda_version);\n    if (retval) {\n        sprintf(buf, \"cuDriverGetVersion() returned %d\", retval);\n        warnings.push_back(buf);\n        goto leave;\n    }\n\n    have_cuda = true;\n\n    retval = (*p_cuDeviceGetCount)(&cuda_ndevs);\n    if (retval) {\n        sprintf(buf, \"cuDeviceGetCount() returned %d\", retval);\n        warnings.push_back(buf);\n        goto leave;\n    }\n    sprintf(buf, \"NVIDIA library reports %d GPU%s\", cuda_ndevs, (cuda_ndevs==1)?\"\":\"s\");\n    warnings.push_back(buf);\n\n    for (j=0; j<cuda_ndevs; j++) {\n        cc.prop.clear();\n        CUdevice device;\n        retval = (*p_cuDeviceGet)(&device, j);\n        if (retval) {\n            sprintf(buf, \"cuDeviceGet(%d) returned %d\", j, retval);\n            warnings.push_back(buf);\n            goto leave;\n        }\n        (*p_cuDeviceGetName)(cc.prop.name, 256, device);\n        if (retval) {\n            sprintf(buf, \"cuDeviceGetName(%d) returned %d\", j, retval);\n            warnings.push_back(buf);\n            goto leave;\n        }\n        (*p_cuDeviceComputeCapability)(&cc.prop.major, &cc.prop.minor, device);\n        (*p_cuDeviceTotalMem)(&global_mem, device);\n        cc.prop.totalGlobalMem = (double) global_mem;\n        (*p_cuDeviceGetAttribute)(&itemp, CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK, device);\n        cc.prop.sharedMemPerBlock = (double) itemp;\n        (*p_cuDeviceGetAttribute)(&cc.prop.regsPerBlock, CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK, device);\n        (*p_cuDeviceGetAttribute)(&cc.prop.warpSize, CU_DEVICE_ATTRIBUTE_WARP_SIZE, device);\n        (*p_cuDeviceGetAttribute)(&itemp, CU_DEVICE_ATTRIBUTE_MAX_PITCH, device);\n        cc.prop.memPitch = (double) itemp;\n        retval = (*p_cuDeviceGetAttribute)(&cc.prop.maxThreadsPerBlock, CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK, device);\n        retval = (*p_cuDeviceGetAttribute)(&cc.prop.maxThreadsDim[0], CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X, device);\n        (*p_cuDeviceGetAttribute)(&cc.prop.maxThreadsDim[1], CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y, device);\n        (*p_cuDeviceGetAttribute)(&cc.prop.maxThreadsDim[2], CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z, device);\n        (*p_cuDeviceGetAttribute)(&cc.prop.maxGridSize[0], CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X, device);\n        (*p_cuDeviceGetAttribute)(&cc.prop.maxGridSize[1], CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y, device);\n        (*p_cuDeviceGetAttribute)(&cc.prop.maxGridSize[2], CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z, device);\n        (*p_cuDeviceGetAttribute)(&cc.prop.clockRate, CU_DEVICE_ATTRIBUTE_CLOCK_RATE, device);\n        (*p_cuDeviceGetAttribute)(&itemp, CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY, device);\n        cc.prop.totalConstMem = (double) itemp;\n        (*p_cuDeviceGetAttribute)(&itemp, CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT, device);\n        cc.prop.textureAlignment = (double) itemp;\n        (*p_cuDeviceGetAttribute)(&cc.prop.deviceOverlap, CU_DEVICE_ATTRIBUTE_GPU_OVERLAP, device);\n        (*p_cuDeviceGetAttribute)(&cc.prop.multiProcessorCount, CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT, device);\n        (*p_cuDeviceGetAttribute)(&cc.pci_info.bus_id, CU_DEVICE_ATTRIBUTE_PCI_BUS_ID, device);\n        (*p_cuDeviceGetAttribute)(&cc.pci_info.device_id, CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID, device);\n        (*p_cuDeviceGetAttribute)(&cc.pci_info.domain_id, CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID, device);\n        if (cc.prop.major <= 0) continue;  // major == 0 means emulation\n        if (cc.prop.major > 100) continue;  // e.g. 9999 is an error\n#ifdef SIM\n        cc.display_driver_version = 0;\n#elif defined(_WIN32)\n        cc.display_driver_version = Version;\n#elif defined(__APPLE__)\n        cc.display_driver_version = NSVersionOfRunTimeLibrary(\"cuda\");\n#else\n        cc.display_driver_version = nvidia_driver_version();\n#endif\n        cc.have_cuda = true;\n        cc.cuda_version = cuda_version;\n        cc.device_num = j;\n        cc.set_peak_flops();\n        if (cc.bad_gpu_peak_flops(\"CUDA\", s)) {\n            warnings.push_back(s);\n        }\n        get_available_nvidia_ram(cc, warnings);\n        nvidia_gpus.push_back(cc);\n    }\n    if (!nvidia_gpus.size()) {\n        warnings.push_back(\"No CUDA-capable NVIDIA GPUs found\");\n    }\n    \nleave:\n#ifdef _WIN32\n    if (cudalib) FreeLibrary(cudalib);\n#else\n    if (cudalib) dlclose(cudalib);\n#endif\n}\n\n// Find the most capable instance; copy to *this.\n// set is_used (USED, UNUSED, IGNORED) for each instance.\n// Don't use less-capable instances (unless use_all is set)\n//\nvoid COPROC_NVIDIA::correlate(\n    bool use_all,    // if false, use only those equivalent to most capable\n    vector<int>& ignore_devs\n) {\n    unsigned int i;\n\n    if (!nvidia_gpus.size()) return;\n    \n    // identify the most capable non-ignored instance\n    //\n    bool first = true;\n    for (i=0; i<nvidia_gpus.size(); i++) {\n        nvidia_gpus[i].is_used = COPROC_IGNORED;\n        if (in_vector(nvidia_gpus[i].device_num, ignore_devs)) continue;\n#ifdef __APPLE__\n        if ((nvidia_gpus[i].cuda_version >= 6050) && nvidia_gpus[i].prop.major < 2) {\n            // Can't use GPUs with compute capability < 2 with CUDA drivers >= 6.5.x\n            nvidia_gpus[i].is_used = COPROC_UNUSED;\n            continue;\n        }\n#endif\n        if (first) {\n            *this = nvidia_gpus[i];\n            first = false;\n        } else if (nvidia_compare(nvidia_gpus[i], *this, false) > 0) {\n            *this = nvidia_gpus[i];\n        }\n    }\n\n    // see which other instances are equivalent,\n    // and set \"count\", \"device_nums\", and \"pci_infos\"\n    //\n    count = 0;\n    for (i=0; i<nvidia_gpus.size(); i++) {\n        if (in_vector(nvidia_gpus[i].device_num, ignore_devs)) {\n            nvidia_gpus[i].is_used = COPROC_IGNORED;\n        } else if (this->have_opencl && !nvidia_gpus[i].have_opencl) {\n            nvidia_gpus[i].is_used = COPROC_UNUSED;\n        } else if (this->have_cuda && !nvidia_gpus[i].have_cuda) {\n            nvidia_gpus[i].is_used = COPROC_UNUSED;\n#ifdef __APPLE__\n        } else if (nvidia_gpus[i].is_used == COPROC_UNUSED) {\n            // Can't use GPUs with compute capability < 2 with CUDA drivers >= 6.5.x\n            continue;\n#endif\n        } else if (use_all || !nvidia_compare(nvidia_gpus[i], *this, true)) {\n            device_nums[count] = nvidia_gpus[i].device_num;\n            pci_infos[count] = nvidia_gpus[i].pci_info;\n            count++;\n            nvidia_gpus[i].is_used = COPROC_USED;\n        } else {\n            nvidia_gpus[i].is_used = COPROC_UNUSED;\n        }\n    }\n}\n\n// See how much RAM is available on this GPU.\n//\n// CAUTION: as currently written, this method should be\n// called only from COPROC_NVIDIA::get().  If in the \n// future you wish to call it from additional places:\n// * It must be called from a separate child process on\n//   dual-GPU laptops (e.g., Macbook Pros) with the results\n//   communicated to the main client process via IPC or a\n//   temp file.  See the comments about dual-GPU laptops \n//   in gpu_detect.cpp and main.cpp for more details.\n// * The CUDA library must be loaded and cuInit() called \n//   first.\n// * See client/coproc_detect.cpp and cpu_sched.cpp in\n//   BOINC 6.12.36 for an earlier attempt to call this\n//   from the scheduler.  Note that it was abandoned\n//   due to repeated calls crashing the driver.\n//\nstatic void get_available_nvidia_ram(COPROC_NVIDIA &cc, vector<string>& warnings) {\n    int retval;\n    size_t memfree = 0, memtotal = 0;\n    int device;\n    void* ctx;\n    char buf[256];\n    \n    cc.available_ram = cc.prop.totalGlobalMem;\n    if (!p_cuDeviceGet) {\n        warnings.push_back(\"cuDeviceGet() missing from NVIDIA library\");\n        return;\n    }\n    if (!p_cuCtxCreate) {\n        warnings.push_back(\"cuCtxCreate() missing from NVIDIA library\");\n        return;\n    }\n    if (!p_cuCtxDestroy) {\n        warnings.push_back(\"cuCtxDestroy() missing from NVIDIA library\");\n        return;\n    }\n    if (!p_cuMemGetInfo) {\n        warnings.push_back(\"cuMemGetInfo() missing from NVIDIA library\");\n        return;\n    }\n\n    retval = (*p_cuDeviceGet)(&device, cc.device_num);\n    if (retval) {\n        snprintf(buf, sizeof(buf),\n            \"[coproc] cuDeviceGet(%d) returned %d\", cc.device_num, retval\n        );\n        warnings.push_back(buf);\n        return;\n    }\n    retval = (*p_cuCtxCreate)(&ctx, 0, device);\n    if (retval) {\n        snprintf(buf, sizeof(buf),\n            \"[coproc] cuCtxCreate(%d) returned %d\", cc.device_num, retval\n        );\n        warnings.push_back(buf);\n        return;\n    }\n    retval = (*p_cuMemGetInfo)(&memfree, &memtotal);\n    if (retval) {\n        snprintf(buf, sizeof(buf),\n            \"[coproc] cuMemGetInfo(%d) returned %d\", cc.device_num, retval\n        );\n        warnings.push_back(buf);\n        (*p_cuCtxDestroy)(ctx);\n        return;\n    }\n    (*p_cuCtxDestroy)(ctx);\n    cc.available_ram = (double) memfree;\n}\n\n// check whether each GPU is running a graphics app (assume yes)\n// return true if there's been a change since last time\n//\n// CAUTION: this method is not currently used.  If you wish\n// to call it in the future:\n// * It must be called from a separate child process on\n//   dual-GPU laptops (e.g., Macbook Pros) with the results\n//   communicated to the main client process via IPC or a\n//   temp file.  See the comments about dual-GPU laptops \n//   in gpu_detect.cpp and main.cpp for more details.\n// * The CUDA library must be loaded and cuInit() called \n//   first.\n//\n#if 0\nbool COPROC_NVIDIA::check_running_graphics_app() {\n    int retval, j;\n    bool change = false;\n    if (!p_cuDeviceGet) {\n        warnings.push_back(\"cuDeviceGet() missing from NVIDIA library\");\n        return;\n    }\n    if (!p_cuDeviceGetAttribute) {\n        warnings.push_back(\"cuDeviceGetAttribute() missing from NVIDIA library\");\n        return;\n    }\n\n    for (j=0; j<count; j++) {\n        bool new_val = true;\n        int device, kernel_timeout;\n        retval = (*p_cuDeviceGet)(&device, j);\n        if (!retval) {\n            retval = (*p_cuDeviceGetAttribute)(&kernel_timeout, CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT, device);\n            if (!retval && !kernel_timeout) {\n                new_val = false;\n            }\n        }\n        if (new_val != running_graphics_app[j]) {\n            change = true;\n        }\n        running_graphics_app[j] = new_val;\n    }\n    return change;\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/client/gpu_amd.cpp": "// This file is part of BOINC.\n// http://boinc.berkeley.edu\n// Copyright (C) 2012 University of California\n//\n// BOINC is free software; you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License\n// as published by the Free Software Foundation,\n// either version 3 of the License, or (at your option) any later version.\n//\n// BOINC is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n// See the GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with BOINC.  If not, see <http://www.gnu.org/licenses/>.\n\n// Detection of AMD/ATI GPUs\n//\n// Docs:\n// http://developer.amd.com/gpu/ATIStreamSDK/assets/ATI_Stream_SDK_CAL_Programming_Guide_v2.0%5B1%5D.pdf\n// ?? why don't they have HTML docs??\n\n#ifdef _WIN32\n#include \"boinc_win.h\"\n#ifdef _MSC_VER\n#define snprintf _snprintf\n#endif\n#else\n#ifdef __APPLE__\n// Suppress obsolete warning when building for OS 10.3.9\n#define DLOPEN_NO_WARN\n#include <mach-o/dyld.h>\n#endif\n#include \"config.h\"\n#include <dlfcn.h>\n#endif\n\n#include <vector>\n#include <string>\n\nusing std::vector;\nusing std::string;\n\n#include \"coproc.h\"\n#include \"str_replace.h\"\n#include \"util.h\"\n\n#include \"client_msgs.h\"\n#include \"gpu_detect.h\"\n\nstatic void get_available_ati_ram(COPROC_ATI &cc, vector<string>& warnings);\n\n// criteria:\n//\n// - double precision support\n// - local RAM\n// - speed\n//\nint ati_compare(COPROC_ATI& c1, COPROC_ATI& c2, bool loose) {\n    if (c1.attribs.doublePrecision && !c2.attribs.doublePrecision) return 1;\n    if (!c1.attribs.doublePrecision && c2.attribs.doublePrecision) return -1;\n    if (loose) {\n        if (c1.attribs.localRAM> 1.4*c2.attribs.localRAM) return 1;\n        if (c1.attribs.localRAM< .7* c2.attribs.localRAM) return -1;\n        return 0;\n    }\n    if (c1.attribs.localRAM > c2.attribs.localRAM) return 1;\n    if (c1.attribs.localRAM < c2.attribs.localRAM) return -1;\n    double s1 = c1.peak_flops;\n    double s2 = c2.peak_flops;\n    if (s1 > s2) return 1;\n    if (s1 < s2) return -1;\n    return 0;\n}\n\n#ifdef _WIN32\ntypedef int (__stdcall *ATI_ATTRIBS) (CALdeviceattribs *attribs, CALuint ordinal);\ntypedef int (__stdcall *ATI_CLOSE)(void);\ntypedef int (__stdcall *ATI_GDC)(CALuint *numDevices);\ntypedef int (__stdcall *ATI_GDI)(void);\ntypedef int (__stdcall *ATI_INFO) (CALdeviceinfo *info, CALuint ordinal);\ntypedef int (__stdcall *ATI_VER) (CALuint *cal_major, CALuint *cal_minor, CALuint *cal_imp);\ntypedef int (__stdcall *ATI_STATUS) (CALdevicestatus*, CALdevice);\ntypedef int (__stdcall *ATI_DEVICEOPEN) (CALdevice*, CALuint);\ntypedef int (__stdcall *ATI_DEVICECLOSE) (CALdevice);\n\nATI_ATTRIBS p_calDeviceGetAttribs = NULL;\nATI_CLOSE   p_calShutdown = NULL;\nATI_GDC     p_calDeviceGetCount = NULL;\nATI_GDI     p_calInit = NULL;\nATI_INFO    p_calDeviceGetInfo = NULL;\nATI_VER     p_calGetVersion = NULL;\nATI_STATUS  p_calDeviceGetStatus = NULL;\nATI_DEVICEOPEN  p_calDeviceOpen = NULL;\nATI_DEVICECLOSE  p_calDeviceClose = NULL;\n\n#else\n\nint (*p_calInit)();\nint (*p_calGetVersion)(CALuint*, CALuint*, CALuint*);\nint (*p_calDeviceGetCount)(CALuint*);\nint (*p_calDeviceGetAttribs)(CALdeviceattribs*, CALuint);\nint (*p_calShutdown)();\nint (*p_calDeviceGetInfo)(CALdeviceinfo*, CALuint);\nint (*p_calDeviceGetStatus)(CALdevicestatus*, CALdevice);\nint (*p_calDeviceOpen)(CALdevice*, CALuint);\nint (*p_calDeviceClose)(CALdevice);\n\n#endif\n\nvoid COPROC_ATI::get(\n    vector<string>& warnings\n) {\n    CALuint numDevices, cal_major, cal_minor, cal_imp;\n    char buf[256];\n    int retval;\n    COPROC_ATI cc, cc2;\n    string s, gpu_name;\n\n    attribs.struct_size = sizeof(CALdeviceattribs);\n    numDevices =0;\n\n#ifdef _WIN32\n\n#if defined _M_X64\n    const char* atilib_name = \"aticalrt64.dll\";\n    const char* amdlib_name = \"amdcalrt64.dll\";\n#else\n    const char* atilib_name = \"aticalrt.dll\";\n    const char* amdlib_name = \"amdcalrt.dll\";\n#endif\n\n    HINSTANCE callib = LoadLibrary(atilib_name);\n    if (callib) {\n        atirt_detected = true;\n    } else {\n        callib = LoadLibrary(amdlib_name);\n        if (callib) {\n            amdrt_detected = true;\n        }\n    }\n\n    if (!callib) {\n        warnings.push_back(\"No ATI library found.\");\n        return;\n    }\n\n    p_calInit = (ATI_GDI)GetProcAddress(callib, \"calInit\" );\n    p_calGetVersion = (ATI_VER)GetProcAddress(callib, \"calGetVersion\" );\n    p_calDeviceGetCount = (ATI_GDC)GetProcAddress(callib, \"calDeviceGetCount\" );\n    p_calDeviceGetAttribs =(ATI_ATTRIBS)GetProcAddress(callib, \"calDeviceGetAttribs\" );\n    p_calShutdown = (ATI_CLOSE)GetProcAddress(callib, \"calShutdown\" );\n    p_calDeviceGetInfo = (ATI_INFO)GetProcAddress(callib, \"calDeviceGetInfo\" );\n    p_calDeviceGetStatus = (ATI_STATUS)GetProcAddress(callib, \"calDeviceGetStatus\" );\n    p_calDeviceOpen = (ATI_DEVICEOPEN)GetProcAddress(callib, \"calDeviceOpen\" );\n    p_calDeviceClose = (ATI_DEVICECLOSE)GetProcAddress(callib, \"calDeviceClose\" );\n\n#else\n\n    void* callib = dlopen(\"libaticalrt.so\", RTLD_NOW);\n    if (!callib) {\n        snprintf(buf, sizeof(buf), \"ATI: %s\", dlerror());\n        warnings.push_back(buf);\n        return;\n    }\n\n    atirt_detected = true;\n\n    p_calInit = (int(*)()) dlsym(callib, \"calInit\");\n    p_calGetVersion = (int(*)(CALuint*, CALuint*, CALuint*)) dlsym(callib, \"calGetVersion\");\n    p_calDeviceGetCount = (int(*)(CALuint*)) dlsym(callib, \"calDeviceGetCount\");\n    p_calDeviceGetAttribs = (int(*)(CALdeviceattribs*, CALuint)) dlsym(callib, \"calDeviceGetAttribs\");\n    p_calShutdown = (int(*)()) dlsym(callib, \"calShutdown\");\n    p_calDeviceGetInfo = (int(*)(CALdeviceinfo*, CALuint)) dlsym(callib, \"calDeviceGetInfo\");\n    p_calDeviceGetStatus = (int(*)(CALdevicestatus*, CALdevice)) dlsym(callib, \"calDeviceGetStatus\");\n    p_calDeviceOpen = (int(*)(CALdevice*, CALuint)) dlsym(callib, \"calDeviceOpen\");\n    p_calDeviceClose = (int(*)(CALdevice)) dlsym(callib, \"calDeviceClose\");\n\n#endif\n\n    if (!p_calInit) {\n        warnings.push_back(\"calInit() missing from CAL library\");\n        goto leave;\n    }\n    if (!p_calGetVersion) {\n        warnings.push_back(\"calGetVersion() missing from CAL library\");\n        goto leave;\n    }\n    if (!p_calDeviceGetCount) {\n        warnings.push_back(\"calDeviceGetCount() missing from CAL library\");\n        goto leave;\n    }\n    if (!p_calDeviceGetAttribs) {\n        warnings.push_back(\"calDeviceGetAttribs() missing from CAL library\");\n        goto leave;\n    }\n    if (!p_calDeviceGetInfo) {\n        warnings.push_back(\"calDeviceGetInfo() missing from CAL library\");\n        goto leave;\n    }\n\n    retval = (*p_calInit)();\n    if (retval != CAL_RESULT_OK) {\n        snprintf(buf, sizeof(buf), \"calInit() returned %d\", retval);\n        warnings.push_back(buf);\n        goto leave;\n    }\n    retval = (*p_calDeviceGetCount)(&numDevices);\n    if (retval != CAL_RESULT_OK) {\n        snprintf(buf, sizeof(buf), \"calDeviceGetCount() returned %d\", retval);\n        warnings.push_back(buf);\n        goto leave;\n    }\n    retval = (*p_calGetVersion)(&cal_major, &cal_minor, &cal_imp);\n    if (retval != CAL_RESULT_OK) {\n        snprintf(buf, sizeof(buf), \"calGetVersion() returned %d\", retval);\n        warnings.push_back(buf);\n        goto leave;\n    }\n\n    if (!numDevices) {\n        warnings.push_back(\"No usable CAL devices found\");\n        goto leave;\n    }\n\n    for (CALuint i=0; i<numDevices; i++) {\n        retval = (*p_calDeviceGetInfo)(&info, i);\n        if (retval != CAL_RESULT_OK) {\n            snprintf(buf, sizeof(buf), \"calDeviceGetInfo() returned %d\", retval);\n            warnings.push_back(buf);\n            goto leave;\n        }\n        retval = (*p_calDeviceGetAttribs)(&attribs, i);\n        if (retval != CAL_RESULT_OK) {\n            snprintf(buf, sizeof(buf), \"calDeviceGetAttribs() returned %d\", retval);\n            warnings.push_back(buf);\n            goto leave;\n        }\n        switch ((int)attribs.target) {\n        case CAL_TARGET_600:\n            gpu_name=\"ATI Radeon HD 2900 (RV600)\";\n            break;\n        case CAL_TARGET_610:\n            gpu_name=\"ATI Radeon HD 2300/2400/3200/4200 (RV610)\";\n            attribs.numberOfSIMD=1;        // set correct values (reported wrong by driver)\n            attribs.wavefrontSize=32;\n            break;\n        case CAL_TARGET_630:\n            gpu_name=\"ATI Radeon HD 2600/3650 (RV630/RV635)\";\n            // set correct values (reported wrong by driver)\n            attribs.numberOfSIMD=3;\n            attribs.wavefrontSize=32;\n            break;\n        case CAL_TARGET_670:\n            gpu_name=\"ATI Radeon HD 3800 (RV670)\";\n            break;\n        case CAL_TARGET_710:\n            gpu_name=\"ATI Radeon HD 4350/4550 (R710)\";\n            break;\n        case CAL_TARGET_730:\n            gpu_name=\"ATI Radeon HD 4600 series (R730)\";\n            break;\n        case CAL_TARGET_7XX:\n            gpu_name=\"ATI Radeon (RV700 class)\";\n            break;\n        case CAL_TARGET_770:\n            gpu_name=\"ATI Radeon HD 4700/4800 (RV740/RV770)\";\n            break;\n        case 8:\n            gpu_name=\"ATI Radeon HD 5800/5900 series (Cypress/Hemlock)\";\n            break;\n        case 9:\n            gpu_name=\"ATI Radeon HD 5700/6750/6770 series (Juniper)\";\n            break;\n        case 10:\n            gpu_name=\"ATI Radeon HD 5500/5600 series (Redwood)\";\n            break;\n        case 11:\n            gpu_name=\"ATI Radeon HD 5400/R5 210 series (Cedar)\";\n            break;\n        case 12:\n            gpu_name=\"AMD Radeon HD 6370D/6380G/6410D/6480G (Sumo)\";\n            break;\n        case 13:\n            gpu_name=\"AMD Radeon HD 6520G/6530D/6550D/6620G (SuperSumo)\";\n            break;\n        case 14:\n            gpu_name=\"AMD Radeon HD 6200/6300/7200/7300 series (Wrestler)\";\n            break;\n        case 15:\n            gpu_name=\"AMD Radeon HD 6900 series (Cayman)\";\n            break;\n        case 16:\n            gpu_name=\"AMD Radeon HD (Kauai)\";\n            break;\n        case 17:\n            gpu_name=\"AMD Radeon HD 6790/6850/6870 series (Barts)\";\n            break;\n        case 18:\n            gpu_name=\"AMD Radeon HD 6570/6670/7570/7670 series (Turks)\";\n            break;\n        case 19:\n            gpu_name=\"AMD Radeon HD 6350/6450/7450/7470/R5 230 series (Caicos)\";\n            break;\n        case 20:\n            gpu_name=\"AMD Radeon HD 7870/7950/7970/R9 280/R9 280X series (Tahiti)\";\n            break;\n        case 21:\n            gpu_name=\"AMD Radeon HD 7850/7870 series (Pitcairn)\";\n            break;\n        case 22:\n            gpu_name=\"AMD Radeon HD 7700/R7 250X/R9 255 series (Capeverde)\";\n            break;\n        case 23:\n            gpu_name=\"AMD Radeon HD 7500/7600/8500/8600 series (Devastator)\";\n            break;\n        case 24:\n            gpu_name=\"AMD Radeon HD 7400/7500/8300/8400 series (Scrapper)\";\n            break;\n        case 25:\n            gpu_name=\"AMD Radeon HD 8600/8790M/R5 330/R5 340/R7 240/R7 250/R7 340/R7 350 (Oland)\";\n            break;\n        case 26:\n            gpu_name=\"AMD Radeon HD 7790/R7 260/R7 260X/R9 360 (Bonaire)\";\n            break;\n        case 27:\n            gpu_name=\"AMD Radeon HD (Spectre)\"; // Kaveri\n            break;\n        case 28:\n            gpu_name=\"AMD Radeon HD (Spooky)\";  // Kaveri\n            break;\n        case 29:\n            gpu_name=\"AMD Radeon HD 8200/8300/8400 series (Kalindi)\"; // Kabini\n            break;\n        case 30:\n            gpu_name=\"AMD Radeon HD 8600M (Hainan)\";\n            break;\n        case 31:\n            gpu_name=\"AMD Radeon R7 265/R9 270/R9 270X/R9 370 (Curacao)\";\n            break;\n        case 32:\n            gpu_name=\"AMD Radeon R9 290 (Hawaii)\";\n            break;\n        case 33:\n            gpu_name=\"AMD Radeon R2/R3 (Skunk)\"; // Mullins/new FT3 APU\n            break;\n        case 34:\n            gpu_name=\"AMD Radeon R9 285/R9 380 (Tonga)\";\n            break;\n        case 35:\n            gpu_name=\"AMD Radeon R9 295X2 (Vesuvius)\";\n            break;\n        case 36:\n            gpu_name=\"AMD Radeon R7 360 (Tobago)\";\n            break;\n        case 37:\n            gpu_name=\"AMD Radeon R7 370/R9 370X (Trinidad)\";\n            break;\n        case 38:\n            gpu_name=\"AMD Radeon R9 390/R9 390X (Grenada)\";\n            break;\n        case 39:\n            gpu_name=\"AMD Radeon R9 Fury/R9 Nano/R9 Fury X/R9 Fury X2 (Fiji)\";\n            break;\n        default:\n            gpu_name=\"AMD Radeon HD (unknown)\";\n            break;\n        }\n        have_cal = true;\n        cc.have_cal = true;\n        cc.attribs = attribs;\n        cc.info = info;\n        safe_strcpy(cc.name, gpu_name.c_str());\n        snprintf(cc.version, sizeof(cc.version), \"%d.%d.%d\", cal_major, cal_minor, cal_imp);\n        cc.amdrt_detected = amdrt_detected;\n        cc.atirt_detected = atirt_detected;\n        cc.device_num = i;\n        cc.set_peak_flops();\n        if (cc.bad_gpu_peak_flops(\"CAL\", s)) {\n            warnings.push_back(s);\n        }\n        get_available_ati_ram(cc, warnings);\n        ati_gpus.push_back(cc);\n    }\n\n    // shut down CAL, otherwise Lenovo won't be able to switch to low-power GPU\n    //\n    retval = (*p_calShutdown)();\n\n    if (!ati_gpus.size()) {\n        warnings.push_back(\"No ATI GPUs found\");\n    }\nleave:\n#ifdef _WIN32\n    if (callib) FreeLibrary(callib);\n#else\n    if (callib) dlclose(callib);\n#endif\n}\n\nvoid COPROC_ATI::correlate(\n    bool use_all,\n    vector<int>& ignore_devs\n) {\n    char buf[256];\n\n    if (!ati_gpus.size()) return;\n\n    // find the most capable non-ignored instance\n    //\n    bool first = true;\n    unsigned int i;\n    for (i=0; i<ati_gpus.size(); i++) {\n        if (in_vector(ati_gpus[i].device_num, ignore_devs)) continue;\n        if (first) {\n            *this = ati_gpus[i];\n            first = false;\n        } else if (ati_compare(ati_gpus[i], *this, false) > 0) {\n            *this = ati_gpus[i];\n        }\n    }\n\n    // see which other instances are equivalent,\n    // and set the \"count\" and \"device_nums\" fields\n    //\n    count = 0;\n    for (i=0; i<ati_gpus.size(); i++) {\n        ati_gpus[i].description(buf, sizeof(buf));\n        if (in_vector(ati_gpus[i].device_num, ignore_devs)) {\n            ati_gpus[i].is_used = COPROC_IGNORED;\n        } else if (this->have_opencl && !ati_gpus[i].have_opencl) {\n            ati_gpus[i].is_used = COPROC_UNUSED;\n        } else if (this->have_cal && !ati_gpus[i].have_cal) {\n            ati_gpus[i].is_used = COPROC_UNUSED;\n        } else if (use_all || !ati_compare(ati_gpus[i], *this, true)) {\n            device_nums[count] = ati_gpus[i].device_num;\n            count++;\n            ati_gpus[i].is_used = COPROC_USED;\n        } else {\n            ati_gpus[i].is_used = COPROC_UNUSED;\n        }\n    }\n}\n\n// get available RAM of ATI GPU\n//\n// CAUTION: as currently written, this method should be\n// called only from COPROC_ATI::get().  If in the future\n// you wish to call it from additional places:\n// * It must be called from a separate child process on\n//   dual-GPU laptops (e.g., Macbook Pros) with the results\n//   communicated to the main client process via IPC or a\n//   temp file.  See the comments about dual-GPU laptops \n//   in gpu_detect.cpp and main.cpp for more details.\n// * The CAL library must be loaded and calInit() called \n//   first.\n// * See client/coproc_detect.cpp and cpu_sched.cpp in\n//   BOINC 6.12.36 for an earlier attempt to call this\n//   from the scheduler.  Note that it was abandoned\n//   due to repeated calls crashing the driver.\n//\nstatic void get_available_ati_ram(COPROC_ATI &cc, vector<string>& warnings) {\n    CALdevicestatus st;\n    CALdevice dev;\n    char buf[256];\n    int retval;\n\n    cc.available_ram = cc.attribs.localRAM*MEGA;\n\n    st.struct_size = sizeof(CALdevicestatus);\n\n    if (!p_calDeviceOpen) {\n        warnings.push_back(\"calDeviceOpen() missing from CAL library\");\n        return;\n    }\n    if (!p_calDeviceGetStatus) {\n        warnings.push_back(\"calDeviceGetStatus() missing from CAL library\");\n        return;\n    }\n    if (!p_calDeviceClose) {\n        warnings.push_back(\"calDeviceClose() missing from CAL library\");\n        return;\n    }\n\n    retval = (*p_calDeviceOpen)(&dev, cc.device_num);\n    if (retval) {\n        snprintf(buf, sizeof(buf),\n            \"[coproc] calDeviceOpen(%d) returned %d\", cc.device_num, retval\n        );\n        warnings.push_back(buf);\n        return;\n    }\n    retval = (*p_calDeviceGetStatus)(&st, dev);\n    if (retval) {\n        snprintf(buf, sizeof(buf),\n            \"[coproc] calDeviceGetStatus(%d) returned %d\",\n            cc.device_num, retval\n        );\n        warnings.push_back(buf);\n        (*p_calDeviceClose)(dev);\n        return;\n    }\n    cc.available_ram = st.availLocalRAM*MEGA;\n    (*p_calDeviceClose)(dev);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/client/gpu_opencl.cpp": "// This file is part of BOINC.\n// http://boinc.berkeley.edu\n// Copyright (C) 2012 University of California\n//\n// BOINC is free software; you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License\n// as published by the Free Software Foundation,\n// either version 3 of the License, or (at your option) any later version.\n//\n// BOINC is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n// See the GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with BOINC.  If not, see <http://www.gnu.org/licenses/>.\n\n// Detection of GPUs using OpenCL\n\n#define TEST_OTHER_COPROC_LOGIC 0\n\n#ifdef _WIN32\n#include \"boinc_win.h\"\n#ifdef _MSC_VER\n#define snprintf _snprintf\n#endif\n#else\n#ifdef __APPLE__\n// Suppress obsolete warning when building for OS 10.3.9\n#define DLOPEN_NO_WARN\n#include <mach-o/dyld.h>\n#endif\n#include \"config.h\"\n#include <dlfcn.h>\n#endif\n\n#include <vector>\n#include <string>\n\nusing std::vector;\nusing std::string;\n\n#include \"coproc.h\"\n#include \"str_replace.h\"\n#include \"util.h\"\n\n#include \"client_msgs.h\"\n#include \"client_state.h\"\n#include \"gpu_detect.h\"\n\n#ifdef _WIN32\n\nHMODULE opencl_lib = NULL;\n\ntypedef cl_int (__stdcall *CL_PLATFORMIDS) (cl_uint, cl_platform_id*, cl_uint*);\ntypedef cl_int (__stdcall *CL_PLATFORMINFO) (cl_platform_id, cl_platform_info, size_t, void*, size_t*);\ntypedef cl_int (__stdcall *CL_DEVICEIDS)(cl_platform_id, cl_device_type, cl_uint, cl_device_id*, cl_uint*);\ntypedef cl_int (__stdcall *CL_INFO) (cl_device_id, cl_device_info, size_t, void*, size_t*);\n\nCL_PLATFORMIDS  p_clGetPlatformIDs = NULL;\nCL_PLATFORMINFO p_clGetPlatformInfo = NULL;\nCL_DEVICEIDS    p_clGetDeviceIDs = NULL;\nCL_INFO         p_clGetDeviceInfo = NULL;\n\n#else\n\nvoid* opencl_lib = NULL;\n\ncl_int (*p_clGetPlatformIDs)(\n    cl_uint,         // num_entries,\n    cl_platform_id*, // platforms\n    cl_uint *        // num_platforms\n);\ncl_int (*p_clGetPlatformInfo)(\n    cl_platform_id,  // platform\n    cl_platform_info, // param_name\n    size_t,          // param_value_size\n    void*,           // param_value\n    size_t*          // param_value_size_ret\n);\ncl_int (*p_clGetDeviceIDs)(\n    cl_platform_id,  // platform\n    cl_device_type,  // device_type\n    cl_uint,         // num_entries\n    cl_device_id*,   // devices\n    cl_uint*         // num_devices\n);\ncl_int (*p_clGetDeviceInfo)(\n    cl_device_id,    // device\n    cl_device_info,  // param_name\n    size_t,          // param_value_size\n    void*,           // param_value\n    size_t*          // param_value_size_ret\n);\n\n#endif\n\nstatic bool is_AMD(char *vendor) {\n    if (strstr(vendor, \"ATI\")) return true;\n    if (strstr(vendor, \"AMD\")) return true;\n    if (strstr(vendor, \"Advanced Micro Devices, Inc.\")) return true;\n    return false;\n}\n\nstatic bool is_NVIDIA(char* vendor) {\n    if (strstr(vendor, \"NVIDIA\")) return true;\n    return false;\n}\n\nstatic bool is_intel(char* vendor) {\n    if (strcasestr(vendor, \"intel\")) return true;\n    return false;\n}\n\n// If \"loose\", tolerate small diff\n//\nstatic int opencl_compare(OPENCL_DEVICE_PROP& c1, OPENCL_DEVICE_PROP& c2, bool loose) {\n    if (c1.opencl_device_version_int > c2.opencl_device_version_int) return 1;\n    if (c1.opencl_device_version_int < c2.opencl_device_version_int) return -1;\n    if (loose) {\n        if (c1.global_mem_size > 1.4*c2.global_mem_size) return 1;\n        if (c1.global_mem_size < .7*c2.global_mem_size) return -1;\n        return 0;\n    }\n    if (c1.global_mem_size > c2.global_mem_size) return 1;\n    if (c1.global_mem_size < c2.global_mem_size) return -1;\n    if (c1.peak_flops > c2.peak_flops) return 1;\n    if (c1.peak_flops < c2.peak_flops) return -1;\n    return 0;\n}\n\n#ifdef __APPLE__\nstatic bool compare_pci_slots(int NVIDIA_GPU_Index1, int NVIDIA_GPU_Index2) {\n    if (NVIDIA_GPU_Index1 >= (int)nvidia_gpus.size()) return false;  // Should never happen\n    if (NVIDIA_GPU_Index2 >= (int)nvidia_gpus.size()) return false;  // Should never happen\n    return (\n        nvidia_gpus[NVIDIA_GPU_Index1].pci_info.bus_id <\n                nvidia_gpus[NVIDIA_GPU_Index2].pci_info.bus_id\n    );\n}\n\n\n// Test OS version number on all versions of OS X without using deprecated Gestalt\n// compareOSVersionTo(x, y) returns:\n// -1 if the OS version we are running on is less than x.y\n//  0 if the OS version we are running on is equal to x.y\n// +1 if the OS version we are running on is lgreater than x.y\nint compareOSVersionTo(int toMajor, int toMinor) {\n    static SInt32 major = -1;\n    static SInt32 minor = -1;\n\n    if (major < 0) {\n        char vers[100], *p1 = NULL;\n        FILE *f;\n        vers[0] = '\\0';\n        f = popen(\"sw_vers -productVersion\", \"r\");\n        if (f) {\n            fscanf(f, \"%s\", vers);\n            pclose(f);\n        }\n        if (vers[0] == '\\0') {\n            fprintf(stderr, \"popen(\\\"sw_vers -productVersion\\\" failed\\n\");\n            fflush(stderr);\n            return 0;\n        }\n        // Extract the major system version number\n        major = atoi(vers);\n        // Extract the minor system version number\n        p1 = strchr(vers, '.');\n        minor = atoi(p1+1);\n    }\n    \n    if (major < toMajor) return -1;\n    if (major > toMajor) return 1;\n    // if (major == toMajor) compare minor version numbers\n    if (minor < toMinor) return -1;\n    if (minor > toMinor) return 1;\n    return 0;\n}\n#endif\n\n\n// OpenCL interfaces are documented here:\n// http://www.khronos.org/registry/cl/sdk/1.0/docs/man/xhtml/ and\n// http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/\n\nvoid COPROCS::get_opencl(\n    vector<string>& warnings\n) {\n    cl_int ciErrNum;\n    cl_platform_id platforms[MAX_OPENCL_PLATFORMS];\n    cl_uint num_platforms, platform_index, num_devices, device_index;\n    cl_device_id devices[MAX_COPROC_INSTANCES];\n    char platform_version[256];\n    char platform_vendor[256];\n    char buf[256];\n    OPENCL_DEVICE_PROP prop;\n    int current_CUDA_index;\n    int current_CAL_index;\n    int min_CAL_target;\n    int num_CAL_devices = (int)ati_gpus.size();\n    vector<int>devnums_pci_slot_sort;\n    vector<OPENCL_DEVICE_PROP>::iterator it;\n    int max_other_coprocs = MAX_RSC-1;  // coprocs[0] is reserved for CPU\n    string s;\n\n    if (cc_config.no_opencl) {\n        return;\n    }\n\n#ifdef _WIN32\n    opencl_lib = LoadLibrary(\"OpenCL.dll\");\n    if (!opencl_lib) {\n        warnings.push_back(\"No OpenCL library found\");\n        return;\n    }\n\n    p_clGetPlatformIDs = (CL_PLATFORMIDS)GetProcAddress( opencl_lib, \"clGetPlatformIDs\" );\n    p_clGetPlatformInfo = (CL_PLATFORMINFO)GetProcAddress( opencl_lib, \"clGetPlatformInfo\" );\n    p_clGetDeviceIDs = (CL_DEVICEIDS)GetProcAddress( opencl_lib, \"clGetDeviceIDs\" );\n    p_clGetDeviceInfo = (CL_INFO)GetProcAddress( opencl_lib, \"clGetDeviceInfo\" );\n#else\n#ifdef __APPLE__\n    opencl_lib = dlopen(\"/System/Library/Frameworks/OpenCL.framework/Versions/Current/OpenCL\", RTLD_NOW);\n#else\n    opencl_lib = dlopen(\"libOpenCL.so\", RTLD_NOW);\n    if (!opencl_lib) {\n        opencl_lib = dlopen(\"libOpenCL.so.1\", RTLD_NOW);\n    }\n#endif\n    if (!opencl_lib) {\n        sprintf(buf, \"OpenCL: %s\", dlerror());\n        warnings.push_back(buf);\n        return;\n    }\n    p_clGetPlatformIDs = (cl_int(*)(cl_uint, cl_platform_id*, cl_uint*)) dlsym( opencl_lib, \"clGetPlatformIDs\" );\n    p_clGetPlatformInfo = (cl_int(*)(cl_platform_id, cl_platform_info, size_t, void*, size_t*)) dlsym( opencl_lib, \"clGetPlatformInfo\" );\n    p_clGetDeviceIDs = (cl_int(*)(cl_platform_id, cl_device_type, cl_uint, cl_device_id*, cl_uint*)) dlsym( opencl_lib, \"clGetDeviceIDs\" );\n    p_clGetDeviceInfo = (cl_int(*)(cl_device_id, cl_device_info, size_t, void*, size_t*)) dlsym( opencl_lib, \"clGetDeviceInfo\" );\n#endif\n\n    if (!p_clGetPlatformIDs) {\n        warnings.push_back(\"clGetPlatformIDs() missing from OpenCL library\");\n        goto leave;\n    }\n    if (!p_clGetPlatformInfo) {\n        warnings.push_back(\"clGetPlatformInfo() missing from OpenCL library\");\n        goto leave;\n    }\n    if (!p_clGetDeviceIDs) {\n        warnings.push_back(\"clGetDeviceIDs() missing from OpenCL library\");\n        goto leave;\n    }\n    if (!p_clGetDeviceInfo) {\n        warnings.push_back(\"clGetDeviceInfo() missing from OpenCL library\");\n        goto leave;\n    }\n\n    ciErrNum = (*p_clGetPlatformIDs)(MAX_OPENCL_PLATFORMS, platforms, &num_platforms);\n    if ((ciErrNum != CL_SUCCESS) || (num_platforms == 0)) {\n        warnings.push_back(\"clGetPlatformIDs() failed to return any OpenCL platforms\");\n        goto leave;\n    }\n\n    if (nvidia_gpus.size()) {\n        for (int i=0; i<(int)nvidia_gpus.size(); ++i) {\n            devnums_pci_slot_sort.push_back(i);\n        }\n#ifdef __APPLE__\n        std::stable_sort(\n            devnums_pci_slot_sort.begin(),\n            devnums_pci_slot_sort.end(),\n            compare_pci_slots\n        );\n#endif\n    }\n\n    for (platform_index=0; platform_index<num_platforms; ++platform_index) {\n        ciErrNum = (*p_clGetPlatformInfo)(\n            platforms[platform_index], CL_PLATFORM_VERSION,\n            sizeof(platform_version), &platform_version, NULL\n        );\n        if (ciErrNum != CL_SUCCESS) {\n            snprintf(buf, sizeof(buf),\n                \"Couldn't get PLATFORM_VERSION for platform #%d; error %d\",\n                platform_index, ciErrNum\n            );\n            warnings.push_back(buf);\n            continue;\n        }\n\n        ciErrNum = (*p_clGetPlatformInfo)(\n            platforms[platform_index], CL_PLATFORM_VENDOR,\n            sizeof(platform_vendor), &platform_vendor, NULL\n        );\n        if (ciErrNum != CL_SUCCESS) {\n            snprintf(buf, sizeof(buf),\n                \"Couldn't get PLATFORM_VENDOR for platform #%d; error %d\",\n                platform_index, ciErrNum\n            );\n            warnings.push_back(buf);\n        }\n\n        //////////// CPU //////////////\n\n        ciErrNum = (*p_clGetDeviceIDs)(\n            platforms[platform_index], (CL_DEVICE_TYPE_CPU),\n            MAX_COPROC_INSTANCES, devices, &num_devices\n        );\n\n        if ((ciErrNum != CL_SUCCESS) && (num_devices != 0)) {\n            num_devices = 0;                 // No devices\n            if (ciErrNum != CL_DEVICE_NOT_FOUND) {\n                snprintf(buf, sizeof(buf),\n                    \"Couldn't get CPU Device IDs for platform #%d: error %d\",\n                    platform_index, ciErrNum\n                );\n                warnings.push_back(buf);\n            }\n        }\n\n        for (device_index=0; device_index<num_devices; ++device_index) {\n            prop.clear();\n            prop.device_id = devices[device_index];\n            strlcpy(\n                prop.opencl_platform_version, platform_version,\n                sizeof(prop.opencl_platform_version)\n            );\n\n            ciErrNum = get_opencl_info(prop, device_index, warnings);\n            if (ciErrNum != CL_SUCCESS) continue;\n\n            prop.is_used = COPROC_UNUSED;\n            prop.get_device_version_int();\n\n            OPENCL_CPU_PROP c;\n            strlcpy(c.platform_vendor, platform_vendor, sizeof(c.platform_vendor));\n            c.opencl_prop = prop;\n            cpu_opencls.push_back(c);\n        }\n\n        //////////// GPUs and Accelerators //////////////\n        \n        ciErrNum = (*p_clGetDeviceIDs)(\n            platforms[platform_index],\n            (CL_DEVICE_TYPE_GPU | CL_DEVICE_TYPE_ACCELERATOR),\n            MAX_COPROC_INSTANCES, devices, &num_devices\n        );\n\n        if (ciErrNum == CL_DEVICE_NOT_FOUND) continue;  // No devices\n        if (num_devices == 0) continue;                 // No devices\n\n        if (ciErrNum != CL_SUCCESS) {\n            snprintf(buf, sizeof(buf),\n                \"Couldn't get Device IDs for platform #%d: error %d\",\n                platform_index, ciErrNum\n            );\n            warnings.push_back(buf);\n            continue;\n        }\n\n        // Mac OpenCL does not recognize all NVIDIA GPUs returned by CUDA\n        // Fortunately, CUDA and OpenCL return the same GPU model name on\n        // the Mac, so we can use this to match OpenCL devices with CUDA.\n        //\n        current_CUDA_index = 0;\n\n        // ATI/AMD OpenCL does not always recognize all GPUs returned by CAL.\n        // This is complicated for several reasons:\n        // * CAL returns only an enum (CALtargetEnum) for the GPU's family,\n        //   not specific model information.\n        // * OpenCL return only the GPU family name\n        // * Which GPUs support OpenCL varies with different versions of the\n        //   AMD Catalyst drivers.\n        //\n        // To deal with this, we make some (probably imperfect) assumptions:\n        // * AMD drivers eliminate OpenCL support for older GPU families first.\n        // * Lower values of CALtargetEnum represent older GPU families.\n        // * All ATI/AMD GPUs reported by OpenCL are also reported by CAL (on\n        //   systems where CAL is available) though the converse may not be true.\n        //\n        current_CAL_index = 0;\n        min_CAL_target = 0;\n        if (is_AMD(platform_vendor) && (num_CAL_devices > 0)) {\n            while (1) {\n                int numToMatch = 0;\n                for (int i=0; i<num_CAL_devices; ++i) {\n                    if ((int)ati_gpus[i].attribs.target >= min_CAL_target) {\n                        ++numToMatch;\n                    }\n                }\n                if (numToMatch == (int)num_devices) break;\n                if (numToMatch < (int)num_devices) {\n                    warnings.push_back(\n                        \"Could not match ATI OpenCL and CAL GPUs: ignoring CAL.\"\n                    );\n                    // If we can't match ATI OpenCL and CAL GPUs, ignore CAL\n                    // and keep OpenCL because AMD has deprecated CAL.\n                    ati_gpus.clear();\n                    ati.have_cal = false;\n                    num_CAL_devices = 0;\n                    break;\n                }\n                ++min_CAL_target;\n            }\n        }\n\n        for (device_index=0; device_index<num_devices; ++device_index) {\n            prop.clear();\n            prop.device_id = devices[device_index];\n            strlcpy(\n                prop.opencl_platform_version, platform_version,\n                sizeof(prop.opencl_platform_version)\n            );\n\n//TODO: Should we store the platform(s) for each GPU found?\n//TODO: Must we check if multiple platforms found the same GPU and merge the records?\n            ciErrNum = get_opencl_info(prop, device_index, warnings);\n            if (ciErrNum != CL_SUCCESS) continue;\n\n// TODO: Eliminate this, or improve it\n#if TEST_OTHER_COPROC_LOGIC\n            if (is_NVIDIA(prop.vendor)) {\n                safe_strcpy(prop.vendor, \"FAKE VENDOR X\");\n            } else if (is_AMD(prop.vendor)) {\n                safe_strcpy(prop.vendor, \"FAKE VENDOR Y\");\n            } else {\n                safe_strcpy(prop.vendor, \"FAKE VENDOR Z\");\n            }\n#endif\n\n            prop.is_used = COPROC_UNUSED;\n            prop.get_device_version_int();\n\n            //////////// NVIDIA //////////////\n            if (is_NVIDIA(prop.vendor)) {\n                bool cuda_match_found = false;\n                if (nvidia.have_cuda) {\n                    // Mac OpenCL does not recognize all NVIDIA GPUs returned by\n                    // CUDA but we assume that OpenCL and CUDA return devices \n                    // with identical model name strings and that OpenCL returns\n                    // devices in order of acending PCI slot.\n                    //\n                    // On other systems, assume OpenCL and CUDA return devices \n                    // in the same order.\n                    //\n                    int saved_CUDA_index = current_CUDA_index;\n                    \n                    while (1) {\n                        if (current_CUDA_index >= (int)(nvidia_gpus.size())) {\n                            snprintf(buf, sizeof(buf),\n                                \"OpenCL NVIDIA index #%d does not match any CUDA device\",\n                                device_index\n                            );\n                            warnings.push_back(buf);\n                            // Newer versions of CUDA driver don't support older NVIDIA GPUs\n                            if (nvidia.cuda_version >= 6050) {\n                                prop.device_num = (int)(nvidia_opencls.size());\n                                current_CUDA_index = saved_CUDA_index;\n                                prop.warn_bad_cuda = true;\n                                break;\n                            } else {\n                                // Older CUDA drivers should report all NVIDIA GPUs reported by OpenCL\n                                goto leave; // Should never happen\n                            }\n                        }\n                        if (!strcmp(prop.name,\n                            nvidia_gpus[devnums_pci_slot_sort[current_CUDA_index]].prop.name)\n                            ) {\n                            cuda_match_found = true;\n                            prop.device_num = devnums_pci_slot_sort[current_CUDA_index];\n                            break;  // We have a match\n                        }\n                        // This CUDA GPU is not recognized by OpenCL,\n                        // so try the next\n                        //\n                        ++current_CUDA_index;\n                    }\n                } else {\n                    prop.device_num = (int)(nvidia_opencls.size());\n                }\n                prop.opencl_device_index = device_index;\n\n                if (cuda_match_found) {\n                    prop.peak_flops = nvidia_gpus[prop.device_num].peak_flops;\n                } else {\n                    COPROC_NVIDIA c;\n                    c.opencl_prop = prop;\n                    c.set_peak_flops();\n                    if (c.bad_gpu_peak_flops(\"NVIDIA OpenCL\", s)) {\n                        warnings.push_back(s);\n                    }\n                    prop.peak_flops = c.peak_flops;\n                }\n                if (cuda_match_found) {\n                    // Assumes OpenCL device_num and CUDA device_num now match\n                    //\n                    prop.opencl_available_ram = nvidia_gpus[prop.device_num].available_ram;\n                } else {\n                    prop.opencl_available_ram = prop.global_mem_size;\n                }\n                \n                // Build nvidia_opencls vector in device_num order\n                for (it=nvidia_opencls.begin(); it != nvidia_opencls.end(); ++it) {\n                    if (it->device_num > prop.device_num) break;\n                }\n                nvidia_opencls.insert(it, prop);\n                \n                if (cuda_match_found) ++current_CUDA_index;\n            }\n            \n            //////////// AMD / ATI //////////////\n            else if (is_AMD(prop.vendor)) {\n                prop.opencl_device_index = device_index;\n\n                if (ati.have_cal) {\n                    // AMD OpenCL does not recognize all AMD GPUs returned by\n                    // CAL but we assume that OpenCL and CAL return devices in\n                    // the same order.  See additional comments earlier in\n                    // this source file for more details.\n                    //\n                    while (1) {\n                        if (current_CAL_index >= num_CAL_devices) {\n                            snprintf(buf, sizeof(buf),\n                                \"OpenCL ATI device #%d does not match any CAL device\",\n                                device_index\n                            );\n                            warnings.push_back(buf);\n                            goto leave; // Should never happen\n                        }\n                        if ((int)ati_gpus[current_CAL_index].attribs.target >= min_CAL_target) {\n                            break;  // We have a match\n                        }\n                        // This CAL GPU is not recognized by OpenCL,\n                        // so try the next\n                        //\n                        ++current_CAL_index;\n                    }\n                    prop.device_num = current_CAL_index++;\n\n                    // Always use GPU model name from CAL if\n                    // available for ATI / AMD  GPUs because\n                    // (we believe) it is more user-friendly.\n                    //\n                    safe_strcpy(prop.name, ati_gpus[prop.device_num].name);\n\n                    // Work around a bug in OpenCL which returns only\n                    // 1/2 of total global RAM size: use the value from CAL.\n                    // This bug applies only to ATI GPUs, not to NVIDIA\n                    // See also further workaround code for Macs.\n                    //\n                    prop.global_mem_size = ati_gpus[prop.device_num].attribs.localRAM * MEGA;\n                    prop.peak_flops = ati_gpus[prop.device_num].peak_flops;\n                } else {            // ! ati.have_cal\n                    prop.device_num = (int)(ati_opencls.size());\n                    COPROC_ATI c;\n                    c.opencl_prop = prop;\n                    c.set_peak_flops();\n                    if (c.bad_gpu_peak_flops(\"AMD OpenCL\", s)) {\n                        warnings.push_back(s);\n                    }\n                    prop.peak_flops = c.peak_flops;\n                }\n\n                if (ati_gpus.size()) {\n                    prop.opencl_available_ram = ati_gpus[prop.device_num].available_ram;\n                } else {\n                    prop.opencl_available_ram = prop.global_mem_size;\n                }\n                ati_opencls.push_back(prop);\n            }\n\n            //////////// INTEL GPU //////////////\n            else if (is_intel(prop.vendor)) {\n                prop.device_num = (int)(intel_gpu_opencls.size());\n                prop.opencl_device_index = device_index;\n\n                COPROC_INTEL c;\n                c.opencl_prop = prop;\n                c.is_used = COPROC_UNUSED;\n                c.available_ram = prop.global_mem_size;\n                safe_strcpy(c.name, prop.name);\n                safe_strcpy(c.version, prop.opencl_driver_version);\n\n                c.set_peak_flops();\n                if (c.bad_gpu_peak_flops(\"Intel OpenCL\", s)) {\n                    warnings.push_back(s);\n                }\n                prop.peak_flops = c.peak_flops;\n                prop.opencl_available_ram = prop.global_mem_size;\n\n                intel_gpu_opencls.push_back(prop);\n\n                // At present Intel GPUs only support OpenCL\n                // and do not have a native GPGPU framework,\n                // so treat each detected Intel OpenCL GPU device as\n                // a native device.\n                //\n                intel_gpus.push_back(c);\n            } else {\n                //////////// OTHER GPU OR ACCELERATOR //////////////\n                // Put each coprocessor instance into a separate other_opencls element\n\n                // opencl_device_index is passed to project apps via init_data.xml\n                // to differentiate among OpenCL devices from the same vendor. It is\n                // used by boinc_get_opencl_ids() to select the correct OpenCL device.\n                int opencl_device_index = 0;\n                for (unsigned int coproc_index=0; coproc_index<other_opencls.size(); coproc_index++) {\n                    if (!strcmp(other_opencls[coproc_index].vendor, prop.vendor)) {\n                        opencl_device_index++;  // Another OpenCL device from same vendor\n                    }\n                }\n                \n                prop.device_num = 0;    // Each vector entry has only one device\n                prop.opencl_device_index = opencl_device_index;\n                prop.opencl_available_ram = prop.global_mem_size;\n                prop.is_used = COPROC_USED;\n\n                // TODO: is there a better way to estimate peak_flops?\n                //\n                prop.peak_flops = 0;\n                if (prop.max_compute_units) {\n                    double freq = ((double)prop.max_clock_frequency) * MEGA;\n                    prop.peak_flops = ((double)prop.max_compute_units) * freq;\n                }\n                if (prop.peak_flops <= 0 || prop.peak_flops > GPU_MAX_PEAK_FLOPS) {\n                    char buf2[256];\n                    sprintf(buf2,\n                        \"OpenCL generic: bad peak FLOPS; Max units %d, max freq %d MHz\",\n                        prop.max_compute_units, prop.max_clock_frequency\n                    );\n                    warnings.push_back(buf2);\n                    prop.peak_flops = GPU_DEFAULT_PEAK_FLOPS;\n                }\n\n                other_opencls.push_back(prop);\n            }\n        }\n    }\n    \n    // Neither nvidia.count, ati.count nor intel_gpu.count have been set yet, \n    // so we can't test have_nvidia(), have_ati() or have_intel_gpu() here.\n    //\n    if ((nvidia_opencls.size() > 0) || nvidia.have_cuda) max_other_coprocs--;\n    if ((ati_opencls.size() > 0) || ati.have_cal) max_other_coprocs--;\n    if (intel_gpu_opencls.size() > 0) max_other_coprocs--;\n    if ((int)other_opencls.size() > max_other_coprocs) {\n        warnings.push_back(\"Too many OpenCL device types found\");\n    }\n\n\n#ifdef __APPLE__\n    // Work around a bug in OpenCL which returns only\n    // 1/2 of total global RAM size.\n    // This bug applies only to ATI GPUs, not to NVIDIA\n    // This has already been fixed on latest Catalyst\n    // drivers, but Mac does not use Catalyst drivers.\n    if (ati_opencls.size() > 0) {\n        // This problem seems to be fixed in OS 10.7\n        if (compareOSVersionTo(10, 7) < 0) {\n            opencl_get_ati_mem_size_from_opengl(warnings);\n        }\n    }\n#endif\n\n    if ((nvidia_opencls.size() == 0) &&\n        (ati_opencls.size() == 0) &&\n        (intel_gpu_opencls.size() == 0) &&\n        (cpu_opencls.size() == 0) &&\n        (other_opencls.size() == 0)\n    ) {\n        warnings.push_back(\n            \"OpenCL library present but no OpenCL-capable devices found\"\n        );\n    }\nleave:\n#ifdef _WIN32\n    if (opencl_lib) FreeLibrary(opencl_lib);\n#else\n    if (opencl_lib) dlclose(opencl_lib);\n#endif\n}\n\nvoid COPROCS::correlate_opencl(\n    bool use_all,\n    IGNORE_GPU_INSTANCE& ignore_gpu_instance\n) {\n    if (nvidia_opencls.size() > 0) {\n        if (nvidia.have_cuda) { // If CUDA already found the \"best\" NVIDIA GPU\n            nvidia.merge_opencl(\n                nvidia_opencls, ignore_gpu_instance[PROC_TYPE_NVIDIA_GPU]\n            );\n        } else {\n            nvidia.find_best_opencls(\n                use_all, nvidia_opencls, ignore_gpu_instance[PROC_TYPE_NVIDIA_GPU]\n            );\n            nvidia.prop.totalGlobalMem = nvidia.opencl_prop.global_mem_size;\n            nvidia.available_ram = nvidia.opencl_prop.global_mem_size;\n            nvidia.prop.clockRate = nvidia.opencl_prop.max_clock_frequency * 1000;\n            safe_strcpy(nvidia.prop.name, nvidia.opencl_prop.name);\n        }\n    }\n    \n    if (ati_opencls.size() > 0) {\n        if (ati.have_cal) { // If CAL already found the \"best\" CAL GPU\n            ati.merge_opencl(ati_opencls, ignore_gpu_instance[PROC_TYPE_AMD_GPU]);\n        } else {\n            ati.find_best_opencls(use_all, ati_opencls, ignore_gpu_instance[PROC_TYPE_AMD_GPU]);\n            ati.attribs.localRAM = ati.opencl_prop.global_mem_size/MEGA;\n            ati.available_ram = ati.opencl_prop.global_mem_size;\n            ati.attribs.engineClock = ati.opencl_prop.max_clock_frequency;\n            safe_strcpy(ati.name, ati.opencl_prop.name);\n        }\n    }\n    \n    if (intel_gpu_opencls.size() > 0) {\n        intel_gpu.find_best_opencls(use_all, intel_gpu_opencls, ignore_gpu_instance[PROC_TYPE_INTEL_GPU]);\n        intel_gpu.available_ram = intel_gpu.opencl_prop.global_mem_size;\n        safe_strcpy(intel_gpu.name, intel_gpu.opencl_prop.name);\n    }\n}\n\ncl_int COPROCS::get_opencl_info(\n    OPENCL_DEVICE_PROP& prop,\n    cl_uint device_index,\n    vector<string>&warnings\n) {\n    cl_int ciErrNum;\n    char buf[256];\n\n    ciErrNum = (*p_clGetDeviceInfo)(prop.device_id, CL_DEVICE_NAME, sizeof(prop.name), prop.name, NULL);\n    if ((ciErrNum != CL_SUCCESS) || (prop.name[0] == 0)) {\n        snprintf(buf, sizeof(buf),\n            \"clGetDeviceInfo failed to get name for device %d\",\n            (int)device_index\n        );\n        warnings.push_back(buf);\n        return ciErrNum;\n    }\n\n    ciErrNum = (*p_clGetDeviceInfo)(prop.device_id, CL_DEVICE_VENDOR, sizeof(prop.vendor), prop.vendor, NULL);\n    if ((ciErrNum != CL_SUCCESS) || (prop.vendor[0] == 0)) {\n        snprintf(buf, sizeof(buf),\n            \"clGetDeviceInfo failed to get vendor for device %d\",\n            (int)device_index\n        );\n        warnings.push_back(buf);\n        return ciErrNum;\n    }\n\n    ciErrNum = (*p_clGetDeviceInfo)(prop.device_id, CL_DEVICE_VENDOR_ID, sizeof(prop.vendor_id), &prop.vendor_id, NULL);\n    if (ciErrNum != CL_SUCCESS) {\n        snprintf(buf, sizeof(buf),\n            \"clGetDeviceInfo failed to get vendor ID for device %d\",\n            (int)device_index\n        );\n        warnings.push_back(buf);\n        return ciErrNum;\n    }\n\n    ciErrNum = (*p_clGetDeviceInfo)(prop.device_id, CL_DEVICE_AVAILABLE, sizeof(prop.available), &prop.available, NULL);\n    if (ciErrNum != CL_SUCCESS) {\n        snprintf(buf, sizeof(buf),\n            \"clGetDeviceInfo failed to get availability for device %d\",\n            (int)device_index\n        );\n        warnings.push_back(buf);\n        return ciErrNum;\n    }\n\n    ciErrNum = (*p_clGetDeviceInfo)(\n        prop.device_id, CL_DEVICE_HALF_FP_CONFIG,\n        sizeof(prop.half_fp_config), &prop.half_fp_config, NULL\n    );\n    if (ciErrNum != CL_SUCCESS) {\n        if ((ciErrNum == CL_INVALID_VALUE) || (ciErrNum == CL_INVALID_OPERATION)) {\n            prop.half_fp_config = 0;  // Not supported by OpenCL 1.0\n        } else {\n            snprintf(buf, sizeof(buf),\n                \"clGetDeviceInfo failed to get half-precision floating point capabilities for device %d\",\n                (int)device_index\n            );\n            warnings.push_back(buf);\n            return ciErrNum;\n        }\n    }\n\n    ciErrNum = (*p_clGetDeviceInfo)(\n        prop.device_id, CL_DEVICE_SINGLE_FP_CONFIG,\n        sizeof(prop.single_fp_config), &prop.single_fp_config, NULL\n    );\n    if (ciErrNum != CL_SUCCESS) {\n        snprintf(buf, sizeof(buf),\n            \"clGetDeviceInfo failed to get single-precision floating point capabilities for device %d\",\n            (int)device_index\n        );\n        warnings.push_back(buf);\n        return ciErrNum;\n    }\n\n    ciErrNum = (*p_clGetDeviceInfo)(\n        prop.device_id, CL_DEVICE_DOUBLE_FP_CONFIG,\n        sizeof(prop.double_fp_config), &prop.double_fp_config, NULL\n    );\n    if (ciErrNum != CL_SUCCESS) {\n        if ((ciErrNum == CL_INVALID_VALUE) || (ciErrNum == CL_INVALID_OPERATION)) {\n            prop.double_fp_config = 0;  // Not supported by OpenCL 1.0\n        } else {\n            snprintf(buf, sizeof(buf),\n                \"clGetDeviceInfo failed to get double-precision floating point capabilities for device %d\",\n                (int)device_index\n            );\n            warnings.push_back(buf);\n            return ciErrNum;\n        }\n    }\n\n    ciErrNum = (*p_clGetDeviceInfo)(\n        prop.device_id, CL_DEVICE_ENDIAN_LITTLE, sizeof(prop.endian_little),\n        &prop.endian_little, NULL\n    );\n    if (ciErrNum != CL_SUCCESS) {\n        snprintf(buf, sizeof(buf),\n            \"clGetDeviceInfo failed to get little or big endian for device %d\",\n            (int)device_index\n        );\n        warnings.push_back(buf);\n        return ciErrNum;\n    }\n\n    ciErrNum = (*p_clGetDeviceInfo)(\n        prop.device_id, CL_DEVICE_EXECUTION_CAPABILITIES,\n        sizeof(prop.execution_capabilities), &prop.execution_capabilities, NULL\n    );\n    if (ciErrNum != CL_SUCCESS) {\n        snprintf(buf, sizeof(buf),\n            \"clGetDeviceInfo failed to get execution capabilities for device %d\",\n            (int)device_index\n        );\n        warnings.push_back(buf);\n        return ciErrNum;\n    }\n\n    ciErrNum = (*p_clGetDeviceInfo)(\n        prop.device_id, CL_DEVICE_EXTENSIONS, sizeof(prop.extensions),\n        prop.extensions, NULL\n    );\n    if (ciErrNum != CL_SUCCESS) {\n        snprintf(buf, sizeof(buf),\n            \"clGetDeviceInfo failed to get device extensions for device %d\",\n            (int)device_index\n        );\n        warnings.push_back(buf);\n        return ciErrNum;\n    }\n\n    ciErrNum = (*p_clGetDeviceInfo)(\n        prop.device_id, CL_DEVICE_GLOBAL_MEM_SIZE,\n        sizeof(prop.global_mem_size), &prop.global_mem_size, NULL\n    );\n    if (ciErrNum != CL_SUCCESS) {\n        snprintf(buf, sizeof(buf),\n            \"clGetDeviceInfo failed to get global memory size for device %d\",\n            (int)device_index\n        );\n        warnings.push_back(buf);\n        return ciErrNum;\n    }\n\n    ciErrNum = (*p_clGetDeviceInfo)(\n        prop.device_id, CL_DEVICE_LOCAL_MEM_SIZE,\n        sizeof(prop.local_mem_size), &prop.local_mem_size, NULL\n    );\n    if (ciErrNum != CL_SUCCESS) {\n        snprintf(buf, sizeof(buf),\n            \"clGetDeviceInfo failed to get local memory size for device %d\",\n            (int)device_index\n        );\n        warnings.push_back(buf);\n        return ciErrNum;\n    }\n\n    ciErrNum = (*p_clGetDeviceInfo)(\n        prop.device_id, CL_DEVICE_MAX_CLOCK_FREQUENCY,\n        sizeof(prop.max_clock_frequency), &prop.max_clock_frequency, NULL\n    );\n    if (ciErrNum != CL_SUCCESS) {\n        snprintf(buf, sizeof(buf),\n            \"clGetDeviceInfo failed to get max clock frequency for device %d\",\n            (int)device_index\n        );\n        warnings.push_back(buf);\n        return ciErrNum;\n    }\n\n    ciErrNum = (*p_clGetDeviceInfo)(\n        prop.device_id, CL_DEVICE_MAX_COMPUTE_UNITS,\n        sizeof(prop.max_compute_units), &prop.max_compute_units, NULL\n    );\n    if (ciErrNum != CL_SUCCESS) {\n        snprintf(buf, sizeof(buf),\n            \"clGetDeviceInfo failed to get max compute units for device %d\",\n            (int)device_index\n        );\n        warnings.push_back(buf);\n        return ciErrNum;\n    }\n\n    ciErrNum = (*p_clGetDeviceInfo)(prop.device_id, CL_DEVICE_VERSION, sizeof(prop.opencl_device_version), prop.opencl_device_version, NULL);\n    if (ciErrNum != CL_SUCCESS) {\n        snprintf(buf, sizeof(buf),\n            \"clGetDeviceInfo failed to get OpenCL version supported by device %d\",\n            (int)device_index\n        );\n        warnings.push_back(buf);\n        return ciErrNum;\n    }\n\n    ciErrNum = (*p_clGetDeviceInfo)(prop.device_id, CL_DRIVER_VERSION, sizeof(prop.opencl_driver_version), prop.opencl_driver_version, NULL);\n    if (ciErrNum != CL_SUCCESS) {\n        snprintf(buf, sizeof(buf),\n            \"clGetDeviceInfo failed to get OpenCL driver version for device %d\",\n            (int)device_index\n        );\n        warnings.push_back(buf);\n        return ciErrNum;\n    }\n\n    // Nvidia Specific Extensions\n    if (strstr(prop.extensions, \"cl_nv_device_attribute_query\") != NULL) {\n\n        ciErrNum = (*p_clGetDeviceInfo)(prop.device_id, CL_DEVICE_COMPUTE_CAPABILITY_MAJOR_NV, sizeof(prop.nv_compute_capability_major), &prop.nv_compute_capability_major, NULL);\n        if (ciErrNum != CL_SUCCESS) {\n            snprintf(buf, sizeof(buf),\n                \"clGetDeviceInfo failed to get CL_DEVICE_COMPUTE_CAPABILITY_MAJOR_NV for device %d\",\n                (int)device_index\n            );\n            warnings.push_back(buf);\n            return ciErrNum;\n        }\n\n        ciErrNum = (*p_clGetDeviceInfo)(prop.device_id, CL_DEVICE_COMPUTE_CAPABILITY_MINOR_NV, sizeof(prop.nv_compute_capability_minor), &prop.nv_compute_capability_minor, NULL);\n        if (ciErrNum != CL_SUCCESS) {\n            snprintf(buf, sizeof(buf),\n                \"clGetDeviceInfo failed to get CL_DEVICE_COMPUTE_CAPABILITY_MINOR_NV for device %d\",\n                (int)device_index\n            );\n            warnings.push_back(buf);\n            return ciErrNum;\n        }\n\n    }\n\n    // AMD Specific Extensions\n    if (strstr(prop.extensions, \"cl_amd_device_attribute_query\") != NULL) {\n\n        ciErrNum = (*p_clGetDeviceInfo)(prop.device_id, CL_DEVICE_BOARD_NAME_AMD, sizeof(buf), buf, NULL);\n        if (strlen(buf) && ciErrNum == CL_SUCCESS) {\n            safe_strcpy(prop.name, buf);\n        } else if (ciErrNum != CL_SUCCESS) {\n            snprintf(buf, sizeof(buf),\n                \"clGetDeviceInfo failed to get AMD Board Name for device %d\",\n                (int)device_index\n            );\n            warnings.push_back(buf);\n            return ciErrNum;\n        }\n    \n        ciErrNum = (*p_clGetDeviceInfo)(prop.device_id, CL_DEVICE_SIMD_PER_COMPUTE_UNIT_AMD, sizeof(prop.amd_simd_per_compute_unit), &prop.amd_simd_per_compute_unit, NULL);\n        if (ciErrNum != CL_SUCCESS) {\n            snprintf(buf, sizeof(buf),\n                \"clGetDeviceInfo failed to get CL_DEVICE_SIMD_PER_COMPUTE_UNIT_AMD for device %d\",\n                (int)device_index\n            );\n            warnings.push_back(buf);\n            return ciErrNum;\n        }\n\n        ciErrNum = (*p_clGetDeviceInfo)(prop.device_id, CL_DEVICE_SIMD_WIDTH_AMD, sizeof(prop.amd_simd_width), &prop.amd_simd_width, NULL);\n        if (ciErrNum != CL_SUCCESS) {\n            snprintf(buf, sizeof(buf),\n                \"clGetDeviceInfo failed to get CL_DEVICE_SIMD_WIDTH_AMD for device %d\",\n                (int)device_index\n            );\n            warnings.push_back(buf);\n            return ciErrNum;\n        }\n\n        ciErrNum = (*p_clGetDeviceInfo)(prop.device_id, CL_DEVICE_SIMD_INSTRUCTION_WIDTH_AMD, sizeof(prop.amd_simd_instruction_width), &prop.amd_simd_instruction_width, NULL);\n        if (ciErrNum != CL_SUCCESS) {\n            snprintf(buf, sizeof(buf),\n                \"clGetDeviceInfo failed to get CL_DEVICE_SIMD_INSTRUCTION_WIDTH_AMD for device %d\",\n                (int)device_index\n            );\n            warnings.push_back(buf);\n            return ciErrNum;\n        }\n\n    }\n\n    return CL_SUCCESS;\n}\n\n// This is called for ATI GPUs with CAL or NVIDIA GPUs with CUDA, to merge\n// the OpenCL info into the CAL or CUDA data for the \"best\" CAL or CUDA GPU.\n// This assumes that, for each GPU, we have previously correlated its CAL\n// or CUDA device_num with its opencl_device_index.\n//\nvoid COPROC::merge_opencl(\n    vector<OPENCL_DEVICE_PROP> &opencls,\n    vector<int>& ignore_dev\n) {\n    unsigned int i, j;\n\n    for (i=0; i<opencls.size(); i++) {\n        opencls[i].is_used = COPROC_UNUSED;\n        \n        if (in_vector(opencls[i].device_num, ignore_dev)) {\n            opencls[i].is_used = COPROC_IGNORED;\n            continue;\n        }\n        if (device_num == opencls[i].device_num) {\n            opencl_prop = opencls[i];\n            opencl_device_ids[0] = opencls[i].device_id;\n            have_opencl = true;\n            break;\n        }\n    }\n\n    opencl_device_count = 0;\n\n    // Fill in info for other GPUs which CAL or CUDA found equivalent to best\n    //\n    for (i=0; i<(unsigned int)count; ++i) {\n        for (j=0; j<opencls.size(); j++) {\n            if (device_nums[i] == opencls[j].device_num) {\n                opencls[j].is_used = COPROC_USED;\n                opencl_device_indexes[opencl_device_count] = opencls[j].opencl_device_index;\n                opencl_device_ids[opencl_device_count++] = opencls[j].device_id;\n                instance_has_opencl[i] = true;\n            }\n        }\n    }\n}\n\n// This is called for ATI GPUs without CAL or NVIDIA GPUs without CUDA\n//\nvoid COPROC::find_best_opencls(\n    bool use_all,\n    vector<OPENCL_DEVICE_PROP> &opencls,\n    vector<int>& ignore_dev\n) {\n    unsigned int i;\n\n    // identify the most capable ATI, NVIDIA or Intel OpenCL GPU\n    //\n    bool first = true;\n    for (i=0; i<opencls.size(); i++) {\n        if (in_vector(opencls[i].device_num, ignore_dev)) {\n            opencls[i].is_used = COPROC_IGNORED;\n            continue;\n        }\n        bool is_best = false;\n        if (first) {\n            is_best = true;\n            first = false;\n        } else if (opencl_compare(opencls[i], opencl_prop, false) > 0) {\n            is_best = true;\n        }\n        if (is_best) {\n            // fill in what info we have\n            opencl_prop = opencls[i];\n            device_num = opencls[i].device_num;\n            peak_flops = opencls[i].peak_flops;\n            have_opencl = true;\n        }\n    }\n\n    // see which other instances are equivalent, and set the count,\n    // device_nums, opencl_device_count and opencl_device_ids fields\n    //\n    count = 0;\n    opencl_device_count = 0;\n    for (i=0; i<opencls.size(); i++) {\n        if (in_vector(opencls[i].device_num, ignore_dev)) {\n            opencls[i].is_used = COPROC_IGNORED;\n            continue;\n        }\n        if (use_all || !opencl_compare(opencls[i], opencl_prop, true)) {\n            instance_has_opencl[count] = true;\n            device_nums[count++] = opencls[i].device_num;\n            opencl_device_indexes[opencl_device_count] = opencls[i].opencl_device_index;\n            opencl_device_ids[opencl_device_count++] = opencls[i].device_id;\n            opencls[i].is_used = COPROC_USED;\n        }\n    }\n}\n\nvoid fake_opencl_gpu(char* type) {\n    OPENCL_DEVICE_PROP op;\n    op.clear();\n    strcpy(op.name, type);\n    strcpy(op.vendor, \"ARM\");\n    op.vendor_id = 102760464;\n    op.available = 1;\n    op.half_fp_config = 63;\n    op.single_fp_config = 63;\n    op.double_fp_config = 63;\n    op.endian_little = 1;\n    op.execution_capabilities = 1;\n    strcpy(op.extensions, \"cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_byte_addressable_store cl_khr_3d_image_writes cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics cl_khr_fp16 cl_khr_gl_sharing cl_khr_icd cl_khr_egl_event cl_khr_egl_image cl_khr_image2d_from_buffer cl_arm_core_id cl_arm_printf cl_arm_thread_limit_hint cl_arm_non_uniform_work_group_size cl_arm_import_memory\");\n    op.global_mem_size = 2086998016;\n    op.local_mem_size = 32768;\n    op.max_clock_frequency = 600;\n    op.max_compute_units = 2;\n    strcpy(op.opencl_platform_version, \"OpenCL 1.2 v1.r14p0-01rel0.0fe2d25ca074016740f8ab3fb451b151\");\n    strcpy(op.opencl_device_version,   \"OpenCL 1.2 v1.r14p0-01rel0.0fe2d25ca074016740f8ab3fb451b151\");\n    strcpy(op.opencl_driver_version, \"1.2\");\n    op.is_used = COPROC_USED;\n    other_opencls.push_back(op);\n}\n\n#ifdef __APPLE__\n// OpenCL returns incorrect total RAM size for some\n// ATI GPUs so we get that info from OpenGL on Macs\n\n#include <OpenGL/OpenGL.h>\n#include <OpenGL/gl.h>\n#include <OpenGL/glu.h>\n#include <Carbon/Carbon.h>\n#include <IOKit/graphics/IOGraphicsLib.h>\n\nstatic io_service_t IOServicePortFromCGDisplayID(CGDirectDisplayID displayID);\n\nvoid COPROCS::opencl_get_ati_mem_size_from_opengl(vector<string>& warnings) {\n    CGLRendererInfoObj info;\n    long i, j;\n    GLint numRenderers = 0, rv = 0, deviceVRAM, rendererID;\n    cl_ulong deviceMemSize;\n    CGLError theErr2 = kCGLNoError;\n    CGLContextObj curr_ctx = CGLGetCurrentContext (); // save current CGL context\n    int ati_gpu_index = 0;\n    GLint rendererIDs[32];\n    CFDataRef modelName[32];\n    char opencl_name[256], iokit_name[256], buf[256];\n    char *p;\n\n    if (log_flags.coproc_debug) {\n\n        for (i=0; i<32; ++i) {\n            rendererIDs[i] = 0;\n            modelName[i] = NULL;\n\n            CGOpenGLDisplayMask myMask = 1 << i;\n            CGDirectDisplayID displayID = CGOpenGLDisplayMaskToDisplayID(myMask);\n            theErr2 = CGLQueryRendererInfo(myMask, &info, &numRenderers);\n            if ((displayID != kCGNullDirectDisplay) && (theErr2 == kCGLNoError)) {\n                // Get the I/O Kit service port for the display\n//                io_registry_entry_t dspPort = CGDisplayIOServicePort(displayID);  // Deprecated in OS 10.9\n                io_registry_entry_t dspPort = IOServicePortFromCGDisplayID(displayID);\n\n                for (j = 0; j < numRenderers; j++) {\n                    // find accelerated renderer (assume only one)\n                    CGLDescribeRenderer (info, j, kCGLRPAcceleratedCompute, &rv);\n                    if (true == rv) { // if openCL-capable\n                        // what is the renderer ID\n                        CGLDescribeRenderer (info, j, kCGLRPRendererID, &rendererIDs[i]);\n                        modelName[i] = (CFDataRef)IORegistryEntrySearchCFProperty(\n                            dspPort,\n                            kIOServicePlane, CFSTR(\"model\"), kCFAllocatorDefault,\n                            kIORegistryIterateRecursively | kIORegistryIterateParents\n                        );\n                    }\n                    if (modelName[i] != NULL) break;\n                }\n            }\n        }\n    }   // End if (log_flags.coproc_debug) {\n\n    theErr2 = CGLQueryRendererInfo( 0xffffffff, &info, &numRenderers);\n    if (theErr2 == kCGLNoError) {\n        CGLDescribeRenderer (info, 0, kCGLRPRendererCount, &numRenderers);\n        for (i = 0; i < numRenderers; i++) {\n            if (ati_gpu_index >= (int)ati_opencls.size()) {\n                break;\n            }\n\n            CGLDescribeRenderer (info, i, kCGLRPAcceleratedCompute, &rv);\n            if (true == rv) { // if openCL-capable\n                // what is the renderer ID\n                CGLDescribeRenderer (info, i, kCGLRPRendererID, &rendererID);\n                // what is the VRAM?\n                CGLError notAvail = CGLDescribeRenderer (info, i, kCGLRPVideoMemoryMegabytes, &deviceVRAM);\n                if (notAvail == kCGLNoError) {\n                    deviceMemSize = ((cl_ulong)deviceVRAM) * (1024L*1024L);\n                } else {\t// kCGLRPVideoMemoryMegabytes is not available before OS 10.7\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wdeprecated-declarations\"\n                    // kCGLRPVideoMemory=120 is deprecated in OS 10.7 and may not be\n                    // defined in later SDKs, so use a literal value here instead\n                    // CGLDescribeRenderer (info, i, kCGLRPVideoMemory, &deviceVRAM);\n                    CGLDescribeRenderer (info, i, (CGLRendererProperty)120, &deviceVRAM);\n                    deviceMemSize = deviceVRAM;\n#pragma clang diagnostic pop\n                }\n\n                // build context and context specific info\n                CGLPixelFormatAttribute attribs[] = {\n                    kCGLPFARendererID,\n                    (CGLPixelFormatAttribute)rendererID,\n                    kCGLPFAAllowOfflineRenderers,\n                    (CGLPixelFormatAttribute)0\n                };\n                CGLPixelFormatObj pixelFormat = NULL;\n                GLint numPixelFormats = 0;\n                CGLContextObj cglContext;\n\n                CGLChoosePixelFormat (attribs, &pixelFormat, &numPixelFormats);\n                if (pixelFormat) {\n                    CGLCreateContext(pixelFormat, NULL, &cglContext);\n                    CGLDestroyPixelFormat (pixelFormat);\n                    CGLSetCurrentContext (cglContext);\n                    if (cglContext) {\n                       // get vendor string from renderer\n                        const GLubyte * strVend = glGetString (GL_VENDOR);\n                        if (is_AMD((char *)strVend)) {\n                            ati_opencls[ati_gpu_index].global_mem_size = deviceMemSize;\n                            ati_opencls[ati_gpu_index].opencl_available_ram = deviceMemSize;\n\n                            if (log_flags.coproc_debug) {\n                                // For some GPUs, one API returns \"ATI\" but the other API returns\n                                // \"AMD\" in the model name, so we normalize both to \"AMD\"\n                                strlcpy(opencl_name, ati_opencls[ati_gpu_index].name, sizeof(opencl_name));\n                                if ((p = strstr(opencl_name, \"ATI\")) != NULL) {\n                                    *++p='M';\n                                    *++p='D';\n                                }\n\n                                for (j=0; j<32; j++) {\n                                    if ((rendererID == rendererIDs[j]) && (modelName[j] != NULL)) {\n                                        break;\n                                    }\n                                }\n                                if (j < 32) {\n                                    strlcpy(iokit_name, (char *)CFDataGetBytePtr(modelName[j]), sizeof(iokit_name));\n                                    if ((p = strstr(iokit_name, \"ATI\")) != NULL) {\n                                        *++p='M';\n                                        *++p='D';\n                                    }\n                                    if (strcmp(iokit_name, opencl_name)) {\n                                        snprintf(buf, sizeof(buf),\n                                            \"opencl_get_ati_mem_size_from_opengl model name mismatch: %s vs %s\\n\",\n                                            ati_opencls[ati_gpu_index].name, (char *)CFDataGetBytePtr(modelName[j])\n                                        );\n                                        warnings.push_back(buf);\n                                    }\n                                } else {\n                                    // Could not get model name from IOKit, so use renderer name\n                                    const GLubyte * strRend = glGetString (GL_RENDERER);\n                                    if (strRend != NULL) {\n                                        strlcpy(iokit_name, (char *)strRend, sizeof(iokit_name));\n                                        if ((p = strstr(iokit_name, \"ATI\")) != NULL) {\n                                            *++p='M';\n                                            *++p='D';\n                                        }\n                                    }\n\n                                    if ((strRend == NULL) ||\n                                        (!strstr(iokit_name, opencl_name))) {\n                                            snprintf(buf, sizeof(buf),\n                                            \"opencl_get_ati_mem_size_from_opengl model name to renderer mismatch: %s vs %s\\n\",\n                                            strRend, ati_opencls[ati_gpu_index].name\n                                        );\n                                        warnings.push_back(buf);\n                                    }\n                                }\n                            }   // End if (log_flags.coproc_debug) {\n\n                            ati_gpu_index++;\n                        } // End if ATI / AMD GPU\n\n                        CGLDestroyContext (cglContext);\n                    } else {\n                        warnings.push_back(\n                            \"opencl_get_ati_mem_size_from_opengl failed to create context\\n\"\n                        );\n                    }\n                } else {\n                    warnings.push_back(\n                        \"opencl_get_ati_mem_size_from_opengl failed to create PixelFormat\\n\"\n                    );\n                }\n            }       // End if kCGLRPAcceleratedCompute attribute\n        }   // End loop: for (i = 0; i < numRenderers; i++)\n        CGLDestroyRendererInfo (info);\n    }\n\n    if (log_flags.coproc_debug) {\n        for (j=0; j<32; j++) {\n            if (modelName[j] != NULL) {\n                CFRelease(modelName[j]);\n            }\n        }\n    }\n    CGLSetCurrentContext (curr_ctx); // restore current CGL context\n}\n\n\n\n// The following replaces CGDisplayIOServicePort which is deprecated in OS 10.9\n//\n//========================================================================\n// GLFW 3.1 OS X - www.glfw.org\n//------------------------------------------------------------------------\n// Copyright (c) 2002-2006 Marcus Geelnard\n// Copyright (c) 2006-2010 Camilla Berglund <elmindreda@elmindreda.org>\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//    claim that you wrote the original software. If you use this software\n//    in a product, an acknowledgment in the product documentation would\n//    be appreciated but is not required.\n//\n// 2. Altered source versions must be plainly marked as such, and must not\n//    be misrepresented as being the original software.\n//\n// 3. This notice may not be removed or altered from any source\n//    distribution.\n//\n//========================================================================\n\n// Returns the io_service_t corresponding to a CG display ID, or 0 on failure.\n// The io_service_t should be released with IOObjectRelease when not needed.\n//\n\nstatic io_service_t IOServicePortFromCGDisplayID(CGDirectDisplayID displayID)\n{\n    io_iterator_t iter;\n    io_service_t serv, servicePort = 0;\n    \n    CFMutableDictionaryRef matching = IOServiceMatching(\"IODisplayConnect\");\n    \n    // releases matching for us\n    kern_return_t err = IOServiceGetMatchingServices(kIOMasterPortDefault,\n                                                     matching,\n                                                     &iter);\n    if (err)\n        return 0;\n    \n    while ((serv = IOIteratorNext(iter)) != 0)\n    {\n        CFDictionaryRef info;\n        CFIndex vendorID, productID, serialNumber;\n        CFNumberRef vendorIDRef, productIDRef, serialNumberRef;\n        Boolean success;\n        \n        info = IODisplayCreateInfoDictionary(serv,\n                                             kIODisplayOnlyPreferredName);\n        \n        vendorIDRef = (CFNumberRef)CFDictionaryGetValue(info,\n                                           CFSTR(kDisplayVendorID));\n        productIDRef = (CFNumberRef)CFDictionaryGetValue(info,\n                                            CFSTR(kDisplayProductID));\n        serialNumberRef = (CFNumberRef)CFDictionaryGetValue(info,\n                                               CFSTR(kDisplaySerialNumber));\n        \n        success = CFNumberGetValue(vendorIDRef, kCFNumberCFIndexType,\n                                   &vendorID);\n        success &= CFNumberGetValue(productIDRef, kCFNumberCFIndexType,\n                                    &productID);\n        success &= CFNumberGetValue(serialNumberRef, kCFNumberCFIndexType,\n                                    &serialNumber);\n        \n        if (!success)\n        {\n            CFRelease(info);\n            continue;\n        }\n        // If the vendor and product id along with the serial don't match\n        // then we are not looking at the correct monitor.\n        // NOTE: The serial number is important in cases where two monitors\n        //       are the exact same.\n        if (CGDisplayVendorNumber(displayID) != vendorID  ||\n            CGDisplayModelNumber(displayID) != productID  ||\n            CGDisplaySerialNumber(displayID) != serialNumber)\n        {\n            CFRelease(info);\n            continue;\n        }\n        \n        // The VendorID, Product ID, and the Serial Number all Match Up!\n        // Therefore we have found the appropriate display io_service\n        servicePort = serv;\n        CFRelease(info);\n        break;\n    }\n    \n    IOObjectRelease(iter);\n    return servicePort;\n}\n#endif// __APPLE__\n",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/api/graphics_impl.h": "// This file is part of BOINC.\n// http://boinc.berkeley.edu\n// Copyright (C) 2008 University of California\n//\n// BOINC is free software; you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License\n// as published by the Free Software Foundation,\n// either version 3 of the License, or (at your option) any later version.\n//\n// BOINC is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n// See the GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with BOINC.  If not, see <http://www.gnu.org/licenses/>.\n\n#include \"boinc_api.h\"\n#include \"graphics_api.h\"\n\ntypedef int (*BIOG_FUNC_PTR)(BOINC_OPTIONS&);\n    // ptr to a function like boinc_init_options_general()\n\n// stuff in the main program that the library need to access\n//\nstruct BOINC_MAIN_STATE {\n    BIOG_FUNC_PTR boinc_init_options_general_hook;\n    int (*boinc_is_standalone_hook)();\n    int (*boinc_get_init_data_hook)(APP_INIT_DATA&);\n    int (*set_worker_timer_hook)();\n    int (*start_timer_thread_hook)();\n    APP_CLIENT_SHM** app_client_shmp;\n#ifdef _WIN32\n    UINT_PTR gfx_timer_id;\n#endif\n};\n\nextern int boinc_init_graphics_impl(\n    WORKER_FUNC_PTR worker, BOINC_MAIN_STATE*\n);\n\n// This extern C is needed to make this code work correctly,\n// even in a 100% C++ context.\n// This is because we need to dlsym() resolve this function.\n// That does not work unless the symbol is in the library in UNMANGLED form.\n// See http://www.isotton.com/howtos/C++-dlopen-mini-HOWTO/C++-dlopen-mini-HOWTO.html\n// for some additional discussion.\n\nextern \"C\" {\n    extern int boinc_init_options_graphics_impl(\n        BOINC_OPTIONS& opt,\n        WORKER_FUNC_PTR _worker_main,\n        BOINC_MAIN_STATE*\n    );\n}\n\nextern BOINC_MAIN_STATE* g_bmsp;\nextern void get_window_title(APP_INIT_DATA& aid, char* buf, int len);\n",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/api/graphics_lib.cpp": "// This file is part of BOINC.\n// http://boinc.berkeley.edu\n// Copyright (C) 2019 University of California\n//\n// BOINC is free software; you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License\n// as published by the Free Software Foundation,\n// either version 3 of the License, or (at your option) any later version.\n//\n// BOINC is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n// See the GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with BOINC.  If not, see <http://www.gnu.org/licenses/>.\n\n// An interface to BOINC graphics in which\n// the graphics code lives in a separate shared library.\n// This lets you make applications that work whether or not\n// the host has X11 and OpenGL libraries.\n//\n// This file is the code that's part of the main program\n\n// DEPRECATED\n\n#ifdef _WIN32\n#include \"boinc_win.h\"\n#endif\n\n#include \"config.h\"\n#include <cstring>\n#include <dlfcn.h>\n\n#include \"boinc_api.h\"  \n#include \"graphics_api.h\"\n#include \"graphics_impl.h\"\n#include \"graphics_lib.h\"\n\nstatic BOINC_MAIN_STATE boinc_main_state;\n\nvoid* graphics_lib_handle=NULL;\n\ntypedef int (*BIOGI_FUNC_PTR)(BOINC_OPTIONS&, WORKER_FUNC_PTR, BOINC_MAIN_STATE*);\n    // ptr to a function like boinc_init_options_graphics_impl()\n\n// This routine never returns.\n// If a problem arises, it calls boinc_finish(nonzero).\n//\n// First argument: worker function\n//\n// Second argument: argv[0] from command line arguments.\n// This is the executable name, and is used to derive\n// the shared object library name: executable_name.so\n\nint boinc_init_graphics_lib(WORKER_FUNC_PTR worker, char* argv0) {\n    BOINC_OPTIONS opt;\n    boinc_options_defaults(opt);\n    return boinc_init_options_graphics_lib(opt, worker, argv0);\n}\n\nint boinc_init_options_graphics_lib(\n    BOINC_OPTIONS& opt, WORKER_FUNC_PTR worker, char* argv0\n) {\n    char graphics_lib[MAXPATHLEN];\n    char resolved_name[MAXPATHLEN];\n    char *ptr;\n    int retval;\n    char *errormsg;\n    BIOGI_FUNC_PTR boinc_init_options_graphics_impl_hook;\n\n    boinc_main_state.boinc_init_options_general_hook = boinc_init_options_general;\n    boinc_main_state.boinc_is_standalone_hook = boinc_is_standalone;\n    boinc_main_state.boinc_get_init_data_hook = boinc_get_init_data;\n    boinc_main_state.start_timer_thread_hook = start_timer_thread;\n    boinc_main_state.app_client_shmp = &app_client_shm;\n\n    // figure out name of executable, and append .so\n    //\n    if ((ptr = strrchr(argv0, '/'))) {\n        ptr++;\n    } else {\n        ptr = argv0;\n    }\n    strlcpy(graphics_lib, ptr, sizeof(graphics_lib));\n    strlcat(graphics_lib, \".so\", sizeof(graphics_lib));\n  \n    // boinc-resolve library name: it could be a XML symlink\n    //\n    if (boinc_resolve_filename(graphics_lib, resolved_name, MAXPATHLEN)) {\n        fprintf(stderr,\n            \"Unable to boinc_resolve name of shared object file %s\\n\",\n            graphics_lib\n        );\n        goto no_graphics;\n    }\n\n    // if it's not a symlink, put \"./\" in front of it\n    //\n    if (!strcmp(graphics_lib, resolved_name)) {\n        sprintf(resolved_name, \"./%s\", graphics_lib);\n    }\n  \n    // get handle for shared library.\n    // This handle is a global variable, so it can be declared 'extern'\n    // in worker() and thus worker() has access to functions\n    // from within this shared library\n    //\n    graphics_lib_handle = dlopen(resolved_name,  RTLD_NOW);\n    if (!graphics_lib_handle) {\n        errormsg = (char*)dlerror();\n        fprintf(stderr,\n            \"dlopen() failed: %s\\nNo graphics.\\n\", errormsg?errormsg:\"\"\n        );\n        goto no_graphics;\n    }\n    \n    // use handle from shared library to resolve the 'initialize\n    // graphics' routine from shared library\n    //\n    boinc_init_options_graphics_impl_hook = (BIOGI_FUNC_PTR) dlsym(\n        graphics_lib_handle,\n        \"boinc_init_options_graphics_impl\"\n    );\n    if (!boinc_init_options_graphics_impl_hook) {\n        errormsg = (char*)dlerror();\n        fprintf(stderr,\n            \"dlsym(): no boinc_init_options_graphics_impl() in %s\\n%s\\n\",\n            resolved_name, errormsg?errormsg:\"\"\n        );\n        goto no_graphics;\n    }\n\n    // here's where we start the graphics thread and the worker thread.\n    // Normally this function should not return.\n    //\n    retval = boinc_init_options_graphics_impl_hook(\n        opt, worker, &boinc_main_state\n    );\n    \n    if (retval) {\n        fprintf(stderr,\n            \"boinc_init_options_graphics_impl() returned %d: unable to create worker thread\\n\",\n            retval\n        );\n    }\n    \n    boinc_finish(retval);\n    // never get here...\n    return 1;\n    \nno_graphics:\n    // unable to resolve the shared object file, or unable to resolve\n    // library dependencies on machine (eg, no X11, no GL libraries,\n    // etc) or unable to find needed symbol in library\n    //\n    boinc_init_options(&opt);\n    worker();\n    \n    // worker() should call boinc_finish so we should NEVER get here!\n    //\n    boinc_finish(1);\n    // never get here...\n    return 1;\n}\n\nbool boinc_graphics_possible() {\n#ifdef _WIN32\n  // ???? should not be here\n#elif defined(__APPLE__)\n  // ???? should not be here\n#else\n    if (!getenv(\"DISPLAY\")) return false;\n#endif\n    return true;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/ProjectApp/res/drawable-mdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/ProjectApp/res/drawable-hdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/ProjectApp/res/drawable-xhdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/previousb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/refreshw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/plusw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/helpb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/status.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/ic_stat_notify_boinc_normal.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/tabtask.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/mailw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/attentionb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/cogsb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/screenb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/copyw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/bugw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/chartb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/tabsettingsb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/mailsmallw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/infob.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/checkb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/acctmgrb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/offw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/tabsettings.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/acctmgrw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/wirelessb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/failedb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/projectsb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/statusb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/pausew.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/boinc.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/connectchargerb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/nextb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/tabtaskb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/projects.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/offb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/helpw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/mailb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/ic_stat_notify_boinc_paused.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/bugb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/magnifierb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/playw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/speechbubbleb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/desktopb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/sqplusb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/cogw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-ldpi/infow.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/previousb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/refreshw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/ic_drawer.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/plusw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/helpb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/status.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/ic_stat_notify_boinc_normal.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/tabtask.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/mailw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/attentionb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/cogsb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/screenb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/copyw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/bugw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/chartb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/tabsettingsb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/mailsmallw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/infob.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/checkb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/acctmgrb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/offw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/tabsettings.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/acctmgrw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/wirelessb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/failedb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/projectsb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/statusb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/pausew.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/boinc.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/connectchargerb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/nextb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/tabtaskb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/projects.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/offb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/helpw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/mailb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/ic_stat_notify_boinc_paused.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/bugb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/magnifierb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/playw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/speechbubbleb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/desktopb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/sqplusb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/cogw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-mdpi/infow.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/reloadb48.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/screen48b.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/watchb48.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/collapse.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/boinc_logo_large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/resumetask.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/playb48.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/cogsb48.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/projectsb48.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/acctmgrb48.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/expand.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/pausetask.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/aborttask.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/pauseb48.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/notconnectedb48.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/batteryb48.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable/infob48.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/previousb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/refreshw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/ic_drawer.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/plusw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/helpb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/status.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/ic_stat_notify_boinc_normal.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/tabtask.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/mailw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/attentionb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/cogsb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/screenb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/copyw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/bugw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/chartb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/tabsettingsb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/mailsmallw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/infob.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/checkb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/offw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/tabsettings.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/acctmgrw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/wirelessb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/failedb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/projectsb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/statusb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/pausew.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/boinc.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/connectchargerb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/nextb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/tabtaskb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/projects.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/offb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/helpw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/mailb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/ic_stat_notify_boinc_paused.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/bugb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/magnifierb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/playw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/speechbubbleb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/desktopb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/sqplusb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/cogw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-hdpi/infow.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-xhdpi/ic_drawer.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-xhdpi/ouya_icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/app/src/main/res/drawable-xhdpi/banner.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/android/BOINC/gradle/wrapper/gradle-wrapper.jar",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/mac_installer/BOINC.pmsp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/mac_installer/BOINC.pmproj",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/inc/GeoIP.dat",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/boinc_logo_trans.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/head.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/languages.txt",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/head.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/xml.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/bronze.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/rate_positive.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/pb_boinc.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/white_grad.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/next.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/sticky_post.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/donor.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/prev.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/unread_sticky_locked.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/silver.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/water.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/paypal_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/rate_negative.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/head_20.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/emphasized_post.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/boincstats_icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/post.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/bronze.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/rss_icon.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/report_post.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/feed_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/unread_locked.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/gold.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/gray_gradient.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/freedc_icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/pct_5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/star.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/unread_post.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/blue_gradient.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/locked_post.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/google-button.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/pct_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/sticky_locked_post.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/75pct_white.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/filtered_post.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/boinc_fade_600.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/forum_bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/hidden.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/unread_sticky.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/pm.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/pct_25.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/yahoo-button.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/html/user/img/flags/da.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/coprocs/NVIDIA/include/nvapi_lite_stereo.h",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/coprocs/NVIDIA/include/nvapi_lite_d3dext.h",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/coprocs/NVIDIA/include/nvapi_lite_sli.h",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/coprocs/NVIDIA/include/nvapi.h",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/coprocs/NVIDIA/include/nvapi_lite_surround.h",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/coprocs/NVIDIA/include/nvapi_lite_salend.h",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/coprocs/NVIDIA/include/nvapi_lite_common.h",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/coprocs/NVIDIA/include/nvapi_lite_salstart.h",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/coprocs/NVIDIA/mswin/Win32/Debug/lib/nvapi.lib",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/coprocs/NVIDIA/mswin/Win32/Release/lib/nvapi.lib",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/coprocs/NVIDIA/mswin/x64/Debug/lib/nvapi.lib",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/coprocs/NVIDIA/mswin/x64/Release/lib/nvapi.lib",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/BOINCGUIApp.rc",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/mac/ProgThruProc.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/mac/gridrepublic.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/mac/CE_ss_logo.tiff",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/GR_install.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/wcgsnooze.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/PTP_install.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/MacPTPPkgIcon.zip",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/CharityEngine.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/PTP_uninstall.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/MacCEPkgIcon.zip",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/boinc.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/PutInTrash.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/gridrepublic.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/MacGRPkgIcon.zip",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/MacInstaller.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/wcg.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/ce.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/ProgThruProc.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/gridrepublic.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/wcgrid.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/MacPkgIcon.zip",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/boincdisconnect.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/BOINCMgr.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/GR_uninstall.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/progress.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/boincsnooze.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/wcgrid-MacUninstaller.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/CE_Install.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/wcgdisconnect.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/wcgrid-MacInstaller.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/CE_Uninstall.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/MacUninstaller.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/wizprogress02.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/atiicon.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/wizprogress05.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/boinc_logo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/wizprogress08.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/boinc48.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/boinc.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/Green_dot.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/wizprogress09.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/nvidiaicon.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/openclicon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/boinc256.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/boinc.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/wizprogress03.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/usage.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/boincdisconnect.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/wizprogress04.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/boinc32.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/boinc16.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/wizprogress10.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/gridrepublic.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/Red_dot.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/xfer.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/wizprogress06.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/wizprogress11.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/stats.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/multicore.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/boinc128.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/mess.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/gridrepublic.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/wizprogress12.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/Yellow_dot.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/google_android.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/proj.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/virtualboxicon.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/boincsnooze.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/wizprogress07.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/result.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/externalweblink.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/wizprogress01.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/gridrepublicamwizard.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Initial Mockup/BOINC Logo Flat Quartered.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Initial Mockup/BOINC Logo Flat.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/References/boinc_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/References/disconnect-icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/References/BOINCGUIApp.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/References/boinc_glossy2_512_F.tif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Suspended/BOINC Icon - Alpha Transparency - Suspended - 40 x 40.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Suspended/BOINC Icon - Alpha Transparency - Suspended - 96 x 96.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Suspended/BOINC Icon - Alpha Transparency - Suspended - 256 x 256.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Suspended/BOINC Icon - Alpha Transparency - Suspended - 16 x 16.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Suspended/BOINC Icon - Alpha Transparency - Suspended - 32 x 32.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Suspended/BOINC Icon - Alpha Transparency - Suspended - 64 x 64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Suspended/BOINC Icon - Alpha Transparency - Suspended - 24 x 24.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Suspended/BOINC Icon - Alpha Transparency - Suspended - 80 x 80.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Suspended/BOINC Icon - Alpha Transparency - Suspended - 128 x 128.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Suspended/BOINC Icon - Alpha Transparency - Suspended - 48 x 48.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Suspended/BOINC Icon - Alpha Transparency - Suspended - 20 x 20.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Index Transparency (For XPM)/BOINC Icon - Index Transparency (For XPM) - Disconnected - 16 x 16.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Index Transparency (For XPM)/BOINC Icon - Index Transparency (For XPM) - Normal - 32 x 32.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Index Transparency (For XPM)/BOINC Icon - Index Transparency (For XPM) - Suspended - 32 x 32.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Index Transparency (For XPM)/BOINC Icon - Index Transparency (For XPM) - Suspended - 16 x 16.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Index Transparency (For XPM)/BOINC Icon - Index Transparency (For XPM) - Disconnected - 40 x 40.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Index Transparency (For XPM)/BOINC Icon - Index Transparency (For XPM) - Normal - 16 x 16.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Index Transparency (For XPM)/BOINC Icon - Index Transparency (For XPM) - Normal - 40 x 40.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Index Transparency (For XPM)/BOINC Icon - Index Transparency (For XPM) - Disconnected - 32 x 32.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Index Transparency (For XPM)/BOINC Icon - Index Transparency (For XPM) - Suspended - 40 x 40.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Normal/BOINC Icon - Alpha Transparency - Normal - 16 x 16.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Normal/BOINC Icon - Alpha Transparency - Normal - 20 x 20.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Normal/BOINC Icon - Alpha Transparency - Normal - 24 x 24.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Normal/BOINC Icon - Alpha Transparency - Normal - 64 x 64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Normal/BOINC Icon - Alpha Transparency - Normal - 48 x 48.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Normal/BOINC Icon - Alpha Transparency - Normal - 32 x 32.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Normal/BOINC Icon - Alpha Transparency - Normal - 80 x 80.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Normal/BOINC Icon - Alpha Transparency - Normal - 96 x 96.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Normal/BOINC Icon - Alpha Transparency - Normal - 40 x 40.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Normal/BOINC Icon - Alpha Transparency - Normal - 128 x 128.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Normal/BOINC Icon - Alpha Transparency - Normal - 256 x 256.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - White Background/BOINC Icon - White Background - Disconnected - 40 x 40.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - White Background/BOINC Icon - White Background - Suspended - 40 x 40.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - White Background/BOINC Icon - White Background - Normal - 40 x 40.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Disconnected/BOINC Icon - Alpha Transparency - Disconnected - 256 x 256.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Disconnected/BOINC Icon - Alpha Transparency - Disconnected - 16 x 16.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Disconnected/BOINC Icon - Alpha Transparency - Disconnected - 32 x 32.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Disconnected/BOINC Icon - Alpha Transparency - Disconnected - 20 x 20.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Disconnected/BOINC Icon - Alpha Transparency - Disconnected - 24 x 24.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Disconnected/BOINC Icon - Alpha Transparency - Disconnected - 80 x 80.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Disconnected/BOINC Icon - Alpha Transparency - Disconnected - 64 x 64.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Disconnected/BOINC Icon - Alpha Transparency - Disconnected - 128 x 128.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Disconnected/BOINC Icon - Alpha Transparency - Disconnected - 40 x 40.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Disconnected/BOINC Icon - Alpha Transparency - Disconnected - 48 x 48.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Final Design v5/BOINC Icon - Alpha Transparency - Disconnected/BOINC Icon - Alpha Transparency - Disconnected - 96 x 96.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Design Template/2014 BOINC Program Logo Design - Jacob Klein.pdn",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/icons/Design Template/Other Ideas.pdn",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Original artwork/1024 x 768.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Original artwork/1600x1200.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Original artwork/1600 x 1200.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Original artwork/boinc_logo_black.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 17.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Suspended 1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Suspended 6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Running 5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Running 4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 16.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Running 2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Suspended 2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Suspended 4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Suspended 5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Suspended 3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Running 3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Running 6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Waiting 6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Icons/Running 1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg16.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg2.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg15.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg4.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg8.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg3.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg5.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg10.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg1.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg9.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg12.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg11.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg17.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg13.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg7.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/res/templates/skins/Backgrounds/bg14.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/Charity Engine/workunit_waiting_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/Charity Engine/ce_stop.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/Charity Engine/ce_icon_play.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/Charity Engine/dialog_background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/Charity Engine/workunit_suspended_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/Charity Engine/ce_pause.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/Charity Engine/project_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/Charity Engine/ce_about.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/Charity Engine/workunit_running_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/Charity Engine/ce_play.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/Charity Engine/background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/Default/workunit_waiting_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/Default/workunit_suspended_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/Default/workunit_running_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/Default/background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/ProgressThruProcessors/workunit_waiting_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/ProgressThruProcessors/dialog_background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/ProgressThruProcessors/ptp_play.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/ProgressThruProcessors/workunit_suspended_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/ProgressThruProcessors/ptp_stop.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/ProgressThruProcessors/ptp_pause.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/ProgressThruProcessors/project_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/ProgressThruProcessors/workunit_running_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/ProgressThruProcessors/ptp_icon_play.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/ProgressThruProcessors/background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/ProgressThruProcessors/ptp_about.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/wcg_play.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/error_indicator_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/help_button.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/advanced_link_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/project_area_background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/dialog_background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/right_arrow_button.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/save_button.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/messages_link_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/resume_link_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/wcg_pause.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/spacer_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/workunit_area_background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/messages_alert_link_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/cancel_button.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/preferences_link_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/wcg_about.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/state_indicator_background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/project_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/copy_all_button.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/workunit_animation_background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/close_button.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/workunit_suspended_tab.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/gauge_bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/tabArea_bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/left_arrow_button.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/workunit_animation_background_image copy.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/wcg_stop.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/workunit_active_tab.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/copy_button.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/workunit_gauge_background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/connecting_indicator_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/workunit_gauge_progress_indicator_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/attach_project_button.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/suspend_link_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/People for a Smarter Planet/graphic/workunit_tab_area_background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/GridRepublic/workunit_waiting_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/GridRepublic/gr_play.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/GridRepublic/dialog_background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/GridRepublic/workunit_suspended_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/GridRepublic/gr_about.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/GridRepublic/gr_stop.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/GridRepublic/project_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/GridRepublic/gr_icon_play.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/GridRepublic/gr_pause.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/GridRepublic/workunit_running_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/GridRepublic/background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/World Community Grid/wcg_play.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/World Community Grid/Green_dot.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/World Community Grid/wcg_pause.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/World Community Grid/wcg_about.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/World Community Grid/Red_dot.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/World Community Grid/wcg.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/World Community Grid/Yellow_dot.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/World Community Grid/background_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/World Community Grid/wcg_stop.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/World Community Grid/wcg_50.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientgui/skins/World Community Grid/wcg_32.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/boinc_ss_opengl.rc",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/BOINCSaver_MacOS10_6_7.zip",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/boinc_ss.rc",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/progress/gradient.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/progress/project_mask.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/progress/total.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/progress/project.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/progress/intel.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/progress/total_mask.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/progress/gr.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/progress/win/x86/boincscr.exe",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/progress/win/x64/boincscr.exe",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/wcg.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/boinc_ss_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/wcgrid.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/wcgrid-thumbnail.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/wcgrid-thumbnail@2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/ce.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/progress.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/boinc.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/ProgThruProc_ss_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/boinc.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/CE_ss_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/thumbnail@2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/gridrepublic.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/boinc_logo_black.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/wcg.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/ce.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/gridrepublic.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/progress.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/gridrepublic_ss_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/thumbnail.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/progress_ss_logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/gridrepublic_ss_logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/wcg_ss_logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/CE_ss_logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/boinc.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientscr/res/BOINCSaver.nib/keyedobjects.nib",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clientctrl/boincsvcctrl.rc",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/mac_build/HowToBuildBOINC_XCode.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/clienttray/boinc_tray.rc",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/setup.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/setup.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/Windows/Win32/boinccas.dll",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/Windows/x64/boinccas.dll",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/Progress/PTP_IsDialogBitmap.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/Progress/ptp_IsDialogBanner.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/Progress/PTP_Wizard.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/Progress/ptp_splash.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/Progress/progress.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/WCG/wcg_setup.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/WCG/wcg_IsDialogBanner.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/WCG/wcg_splash.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/WCG/wcg_setup.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/WCG/wcg_IsDialogBitmap.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/WCG/boinc_logo_black.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/CharityEngine/CE_IsDialogBitmap.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/CharityEngine/ce.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/CharityEngine/CE_IsDialogBanner.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/CharityEngine/CE_Splash.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/GridRepublic/GR_wizard.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/GridRepublic/GR_splash.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/GridRepublic/GR_IsDialogBitmap.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/GridRepublic/GR_IsDialogBanner.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/GridRepublic/GR_setup.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/GridRepublic/templates/GR_wizard.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/GridRepublic/templates/GR_splash.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/GridRepublic/templates/GR_IsDialogBitmap.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/GridRepublic/templates/GR_IsDialogBanner.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/GridRepublic/templates/GR_splash.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/GridRepublic/templates/GR_wizard.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/win_build/installerv2/redist/GridRepublic/templates/GR_setup.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/packages/generic/sea/boincmgr.32x32.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/packages/generic/sea/boincmgr.16x16.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/packages/generic/sea/boincmgr.48x48.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/gfx_html/browser_win.rc",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/gfx_html/templates/boinc.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/gfx_html/res/boinc.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/wrapper/wrapper_win.rc",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/vboxwrapper/vbox51.tlb",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/vboxwrapper/vbox43.tlb",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/vboxwrapper/vbox42.tlb",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/vboxwrapper/vboxwrapper_win.rc",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/vboxwrapper/vbox60.tlb",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/vboxwrapper/vbox50.tlb",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/vboxwrapper/vbox52.tlb",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/i686-pc-linux-gnu/Helvetica.txf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/i686-pc-linux-gnu/logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/i686-apple-darwin/Helvetica.txf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/i686-apple-darwin/logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/x86_64-pc-linux-gnu/Helvetica.txf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/x86_64-pc-linux-gnu/logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/x86_64-apple-darwin/Helvetica.txf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/x86_64-apple-darwin/logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/windows_x86_64/Helvetica.txf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/windows_x86_64/example_app_graphics_22489_windows_x86_64.exe",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/windows_x86_64/example_app_22489_windows_x86_64.exe",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/windows_x86_64/logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/windows_intelx86/Helvetica.txf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/windows_intelx86/example_app_graphics_22489_windows_intelx86.exe",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/windows_intelx86/example_app_22489_windows_intelx86.exe",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/22489/windows_intelx86/logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/bin/24253/windows_intelx86/example_app_24253_windows_intelx86.exe",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/samples/example_app/Mac/uc2_graphics.icns",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/client/os2/boinc.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/client/os2/boinc_client.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/client/os2/boinc1.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/client/win/boinc_cli.rc",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/client/win/boinc_cmd.rc",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/client/win/boinc_log.rc",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/client/win/res/boinc.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/client/win/res/wcg.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/client/win/res/ce.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/client/win/res/gridrepublic.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/client/win/res/progress.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/api/ttf/liberation-fonts-ttf-2.00.0/LiberationMono-BoldItalic.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/api/ttf/liberation-fonts-ttf-2.00.0/LiberationSerif-BoldItalic.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/api/ttf/liberation-fonts-ttf-2.00.0/LiberationSans-Regular.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/api/ttf/liberation-fonts-ttf-2.00.0/LiberationSans-Italic.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/api/ttf/liberation-fonts-ttf-2.00.0/LiberationSerif-Italic.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/api/ttf/liberation-fonts-ttf-2.00.0/LiberationSans-BoldItalic.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/api/ttf/liberation-fonts-ttf-2.00.0/LiberationSans-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/api/ttf/liberation-fonts-ttf-2.00.0/LiberationSerif-Regular.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/api/ttf/liberation-fonts-ttf-2.00.0/LiberationSerif-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/api/ttf/liberation-fonts-ttf-2.00.0/LiberationMono-Italic.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/api/ttf/liberation-fonts-ttf-2.00.0/LiberationMono-Regular.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/api/ttf/liberation-fonts-ttf-2.00.0/LiberationMono-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/doc/logo/boinc_logo_black.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/phpmailer/examples/contents.html",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/phpmailer/examples/images/phpmailer_mini.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/phpmailer/examples/images/phpmailer.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/phpmailer/examples/styles/wrapping.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSansCondensed.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSans-Oblique.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSansMono.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSerifCondensed-Italic.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSansMono-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSansMono-BoldOblique.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSerif-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSansMono-Oblique.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSans.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSans-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSerifCondensed-BoldItalic.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSerif.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSans-BoldOblique.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSerifCondensed-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSerif-BoldItalic.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSerifCondensed.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSansCondensed-BoldOblique.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSansCondensed-Bold.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSerif-Italic.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSans-ExtraLight.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/fonts/DejaVuSansCondensed-Oblique.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/changelog.txt",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/advimage/img/sample.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/example/img/example.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-yell.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-foot-in-mouth.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-tongue-out.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-smile.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-undecided.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-surprised.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-laughing.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-money-mouth.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-embarassed.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-wink.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-innocent.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-cry.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-cool.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-sealed.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-frown.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/emotions/img/smiley-kiss.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/spellchecker/editor_plugin.js",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/spellchecker/editor_plugin_src.js",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/spellchecker/img/wline.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/inlinepopups/skins/clearlooks2/img/confirm.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/inlinepopups/skins/clearlooks2/img/vertical.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/inlinepopups/skins/clearlooks2/img/horizontal.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/inlinepopups/skins/clearlooks2/img/buttons.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/inlinepopups/skins/clearlooks2/img/corners.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/inlinepopups/skins/clearlooks2/img/button.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/inlinepopups/skins/clearlooks2/img/alert.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/plugins/media/moxieplayer.swf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/img/colorpicker.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/img/realmedia.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/img/windowsmedia.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/img/trans.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/img/quicktime.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/img/pagebreak.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/img/iframe.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/img/shockwave.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/img/icons.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/img/flash.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/img/video.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/skins/default/img/items.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/skins/default/img/buttons.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/skins/default/img/menu_check.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/skins/default/img/menu_arrow.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/skins/default/img/tabs.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/skins/default/img/progress.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/skins/o2k7/img/button_bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/skins/o2k7/img/button_bg_black.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/advanced/skins/o2k7/img/button_bg_silver.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/simple/img/icons.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/jscripts/tiny_mce/themes/simple/skins/o2k7/img/button_bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/examples/media/sample.rm",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/examples/media/sample.swf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/examples/media/sample.flv",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/examples/media/sample.dcr",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/examples/media/logo_over.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/examples/media/sample.mov",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/examples/media/sample.avi",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/libraries/tinymce/examples/media/logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/zen-internals/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/zen-internals/images/tab-bar.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/zen-internals/images/tab-secondary.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/zen-internals/images/messages-warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/zen-internals/images/tab-secondary-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/zen-internals/images/tab-right.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/zen-internals/images/messages-error.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/zen-internals/images/tab-right-ie6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/zen-internals/images/messages-status-ie6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/zen-internals/images/tab-left.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/zen-internals/images/messages-error-ie6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/zen-internals/images/messages-status.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/zen-internals/images/tab-left-ie6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/zen-internals/images/messages-warning-ie6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images/tab-bar.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images/tab-secondary.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images/messages-warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images/tab-secondary-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images/tab-right.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images/messages-error.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images/tab-right-ie6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images/messages-status-ie6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images/tab-left.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images/messages-error-ie6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images/messages-status.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images/tab-left-ie6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images/messages-warning-ie6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images-source/messages.psd",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images-source/panels-layouts.psd",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images-source/tabs.psd",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/STARTERKIT/images-source/screenshot.psd",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/layouts/two_sidebars/two-sidebars.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/layouts/one_sidebar_first/one-sidebar-first.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/layouts/two_sidebars_second/two-sidebars-second.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/layouts/one_sidebar_second/one-sidebar-second.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/all/themes/zen/layouts/two_sidebars_first/two-sidebars-first.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/tab-bar.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/icon-yellow-light.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/icon-red-light.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/tab-secondary.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/menu-bg-active.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/messages-warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/icon-linux.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/icon-green-light.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/speech-bubble-tail.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/search.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/menu-separator.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/menu-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/tab-secondary-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/tab-right.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/messages-error.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/tab-right-ie6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/orange-bars-nav.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/messages-status-ie6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/menu-divider.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/heading-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/tab-left.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/orange-bars.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/messages-error-ie6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/messages-status.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/icon-mac.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/icon-screensaver.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/tab-left-ie6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/icon-windows.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/messages-warning-ie6.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/ga.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/en.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/id.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/lt.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/fo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/zh-cn.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/da.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/eo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/vi.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/sl.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/zh-hant.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/it.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/hi.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/de.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/uk.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/se.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/et.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/sk.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/pl.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/is.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/he.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/cs.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/sv.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/sq.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/tl.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/ko.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/nn.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/us.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/th.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/gl.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/zh-hans.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/fi.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/tg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/pt-br.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/hr.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/fa.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/sco.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/tr.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/sr.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/fr.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/mn.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/gb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/ru.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/hu.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/nl.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/pt-pt.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/el.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/eu.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/nb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/es.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/ar.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/zh-tw.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/ca.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/km.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/ja.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/lv.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/ro.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images/flags/lb.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/boinc_logo_trans.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/rate_positive.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/pb_boinc.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/sticky_post.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/donor.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/unread_sticky_locked.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/paypal_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/rate_negative.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/head_20.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/emphasized_post.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/boincstats_icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/rss_icon.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/report_post.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/unread_locked.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/head.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/gray_gradient.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/freedc_icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/unread_post.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/blue_gradient.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/locked_post.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/sticky_locked_post.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/xml.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/filtered_post.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/boinc_fade_600.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/unread_sticky.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/pm.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/shared/flags/da.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images-source/messages.psd",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images-source/panels-layouts.psd",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images-source/tabs.psd",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/images-source/screenshot.psd",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/webfonts/fa-brands-400.woff2",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/webfonts/fa-regular-400.woff",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/webfonts/fa-solid-900.woff2",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/webfonts/fa-brands-400.eot",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/webfonts/fa-solid-900.woff",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/webfonts/fa-brands-400.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/webfonts/fa-brands-400.woff",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/webfonts/fa-solid-900.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/webfonts/fa-regular-400.eot",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/webfonts/fa-solid-900.eot",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/webfonts/fa-regular-400.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/themes/boinc/webfonts/fa-regular-400.woff2",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/boincstats/includes/pchart/class/pRadar.class.php",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/images/arrow-active.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/images/overridden.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/images/sprites.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/images/expanded-options.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/images/status-active.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views1-admin.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-adddisplay-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views1-changeviewtype-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-tablestyle-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-admin.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-fieldspreview-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-addaview-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/node-term_node-term_data-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views1-changeviewtype.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-addfieldsajax-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-newview.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-changedisplaystyle.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/style-breakdown.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views1-admin-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-tablestyle.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/node-term_node-term_data.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-adddisplay.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-addaview.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/overview-ui-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-addfields-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/overview-ui-small.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-rearrangefields-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-addfields.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/style-breakdown-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-rearrangefields.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-newview-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-addfieldsajax.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-admin-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-changedisplaystyle-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/views/help/images/views2-fieldspreview.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/wysiwyg/plugins/break/images/break.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/wysiwyg/plugins/break/images/breaktext.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/wysiwyg/plugins/break/images/spacer.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/images/icon-delete.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/images/collapsible-expanded.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/images/throbber.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/images/icon-close-window.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/images/icon-configure.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/images/collapsible-collapsed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/images/no-icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/images/status-active.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/ctools_ajax_sample/images/popups-border.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/ctools_ajax_sample/images/loading.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/ctools_ajax_sample/images/loading-large.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/ctools_ajax_sample/images/ajax-loader.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/ctools_plugin_example/plugins/content_types/icon_example.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/page_manager/images/arrow-active.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/page_manager/images/locked-other.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/page_manager/images/locked.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/node_form/icon_node_form.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/term_context/icon_term.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/custom/icon_block_custom.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/user_context/icon_user.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/vocabulary_context/icon_vocabulary.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_navigation.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_contrib_block_empty.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_page.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_contrib_page.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_whosnew.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_newforumtopics.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_contrib_menu.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_recentblogposts.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_languageswitcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_block_empty.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_searchform.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_popularcontent.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_recentpoll.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_activeforumtopics.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_block_menu.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_recentcomments.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_syndicate.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_userlogin.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_block.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_whosonline.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_authorinformation.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_booknavigation.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_contrib_block.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/block/icon_core_primarylinks.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/node/icon_node.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/search/icon_search.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/contact/icon_contact.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/form/icon_form.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/plugins/content_types/node_context/icon_node.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/views_content/plugins/content_types/icon_views_page.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/views_content/plugins/content_types/icon_views_block_legacy.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/ctools/views_content/plugins/content_types/icon_views_page_legacy.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/filefield/icons/video-x-generic.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/filefield/icons/x-office-presentation.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/filefield/icons/image-x-generic.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/filefield/icons/text-plain.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/filefield/icons/application-pdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/filefield/icons/text-x-script.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/filefield/icons/application-octet-stream.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/filefield/icons/text-html.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/filefield/icons/application-x-executable.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/filefield/icons/audio-x-generic.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/filefield/icons/x-office-document.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/filefield/icons/text-x-generic.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/filefield/icons/x-office-spreadsheet.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/filefield/icons/package-x-generic.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/privatemsg/pm_block_user/remove-rule-button.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/privatemsg/pm_block_user/add-rule-button.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/context/plugins/context_reaction_block.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/flag/theme/flag-throbber.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/help/group-node-edit-form.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/help/drag-new.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/help/add-new.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/help/add-existing-field.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/help/draggable.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/help/add-new-field.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/help/theme.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/help/drag-groups.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/help/add-new-group.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/help/group-node-display.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/translations/help/de/group-node-edit-form.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/translations/help/de/drag-new.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/translations/help/de/add-new.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/translations/help/de/add-existing-field.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/translations/help/de/add-new-field.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/translations/help/de/drag-groups.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/translations/help/de/add-new-group.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/translations/help/de/group-node-display.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/includes/panels/content_types/icon_cck_field.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/cck/modules/fieldgroup/panels/content_types/icon_cck_field_group.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/tableofcontents/tableofcontents.pages.inc",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/tableofcontents/back-to-top.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/delete.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/go-down.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/bg-content-modal.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/icon-delete.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/throbber.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/close.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/bg-shade-dark.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/go-right.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/screenshot-1.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/sky.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/sprite.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/arrow-down-light.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/icon-hidepane.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/screenshot-2.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/icon-showpane.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/arrow-active.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/blank.gif",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/bg-shade-medium.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/icon-draggable.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/portlet-collapsed.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/bg-shade-light.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/user-trash.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/icon-configure.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/screenshot-4.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/bg-shade-white-lrg.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/no-icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/icon-addcontent.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/screenshot-3.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/portlet-expanded.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/icon-cache.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/images/go-up.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/panels_ipe/images/dragger.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/style_bases/region/region_rounded_shadow/box-color.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/style_bases/region/region_rounded_shadow/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/style_bases/region/region_rounded_shadow/box-shadow.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/style_bases/region/region_plain_box/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/style_bases/pane/pane_rounded_shadow/box-color.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/style_bases/pane/pane_rounded_shadow/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/style_bases/pane/pane_rounded_shadow/box-shadow.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/style_bases/pane/pane_plain_box/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/layouts/twocol/twocol.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/layouts/threecol_25_50_25/threecol_25_50_25.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/layouts/twocol_bricks/twocol_bricks.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/layouts/twocol_stacked/twocol_stacked.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/layouts/onecol/onecol.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/layouts/flexible/grippie-vertical.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/layouts/flexible/flexible.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/layouts/threecol_33_34_33_stacked/threecol_33_34_33_stacked.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/layouts/threecol_25_50_25_stacked/threecol_25_50_25_stacked.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/layouts/threecol_33_34_33/threecol_33_34_33.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/styles/corners/corner-bits.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/styles/corners/shadow-l.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/styles/corners/shadow-b.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/styles/corners/shadow-r.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/plugins/styles/corners/shadow-t.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/drupal/sites/default/boinc/modules/contrib/panels/panels_mini/plugins/content_types/icon_panels_mini.png",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/az/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/az/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/az/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/az/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ja/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ja/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ja/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ja/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/eo/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/eo/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/fi/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/fi/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/fi/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/fi/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/pt_PT/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/pt_PT/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/pt_PT/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/pt_PT/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/nl/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/nl/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/nl/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/nl/wxstd.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/nl/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/eu/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/eu/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/eu/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/eu/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/hu/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/hu/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/hu/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/hu/wxstd.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/hu/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ca/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ca/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ca/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ca/wxstd.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ca/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/es/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/es/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/es/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/es/wxstd.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/es/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ku/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ka/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ka/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ka/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/pt_BR/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/pt_BR/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/pt_BR/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/pt_BR/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ru/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ru/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ru/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ru/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/el/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/el/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/lt/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/uk/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/uk/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/uk/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/uk/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/nb/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/nb/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/nb/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/nb/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/tr/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/tr/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/tr/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/tr/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/cs/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/cs/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/cs/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/cs/wxstd.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/cs/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/fr/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/fr/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/fr/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/fr/wxstd.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/fr/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/de/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/de/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/de/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/de/wxstd.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/de/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/da/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/da/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/da/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/da/wxstd.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/da/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/lv/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/lv/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/lv/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/he/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/he/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/he/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/he/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/sr@latin/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/sr@latin/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/sr@latin/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/fa_IR/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/fa_IR/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/th/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/it_IT/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/it_IT/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/it_IT/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/it_IT/wxstd.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/it_IT/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/pl/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/pl/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/pl/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/pl/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ro/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ro/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ro/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ro/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/zh_CN/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/zh_CN/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/zh_CN/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/zh_CN/wxstd.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/zh_CN/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/zh_TW/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/zh_TW/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/zh_TW/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/zh_TW/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/bg/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/bg/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/bg/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/bg/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/id/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/sv/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/sv/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/sv/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/sv/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ko/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ko/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ko/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/ko/BOINC-Web.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/sk/BOINC-Setup.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/sk/BOINC-Client.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/sk/BOINC-Manager.mo",
        "/tmp/vanessa/spack-stage/spack-stage-boinc-client-7.16.5-qr5wol4tigcd3bplkfzd6a77nih4eezn/spack-src/locale/sk/BOINC-Web.mo"
    ],
    "total_files": 6111
}