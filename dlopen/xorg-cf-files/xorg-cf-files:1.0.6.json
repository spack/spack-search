{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-xorg-cf-files-1.0.6-p5ls3mwtg6a7p6ysmdtc7smphutacxsb/spack-src/lnxLib.rules": "XCOMM $Xorg: lnxLib.rules,v 1.3 2000/08/17 19:41:47 cpqbld Exp $\nXCOMM $XFree86: xc/config/cf/lnxLib.rules,v 3.52 2003/10/31 20:49:03 herrb Exp $\n\n/*\n * Linux shared library rules (DLL & ELF versions)\n */\n#ifndef HasSharedLibraries\n# define HasSharedLibraries YES\n#endif\n#ifndef ForceNormalLib\n# define ForceNormalLib NO\n#endif\n\n#ifndef UseRpath\n#define UseRpath NO\n#endif\n\n#ifndef SharedOldX\n# define SharedOldX NO\n#endif\n\n#if UseElfFormat\n\n# if (LinuxCLibMajorVersion >= 5 && LinuxCLibMinorVersion >= 4) || LinuxCLibMajorVersion >= 6\n#  ifndef SpecialMalloc\n#   define SpecialMalloc NO\n#  endif\n#if 0\n#  ifndef UseInternalMalloc\n#   define UseInternalMalloc NO\n#  endif\n#endif\n# endif\n\n# if LinuxCLibMajorVersion <= 5\n/*\n *\t#define BaseShLibReqs\t-lc\n *\n * I don't want to use this since the normal ELF executables should\n * be linked with libc.so. If it is not, i.e., static, the variables in\n * libc.so which is loaded in because of the other shared libraries\n * may have different values than the ones in the static ELF\n * executables. That happens if the binaries are linked with libg.a\n * or libc_p.a.\n *\n * If an ELF executable linked with libg.a or libc_p.a loads a shared\n * object which needs libc.so via dlopen (), I think it should fail.\n * It is a very bad idea. The moral story is DON'T USE dlopen () IN\n * ELF EXECUTABLES LINKED WITH libg.a OR libc_p.a. H.J.\n *\n */\n#  define BaseShLibReqs\n# else\n/* With GNU libc 2 this works fine. */\n#  define BaseShLibReqs\t-lc\n# endif\n\n# ifndef SharedDataSeparation\n#  define SharedDataSeparation NO\n# endif\n# ifndef SharedCodeDef\n#  define SharedCodeDef /**/\n# endif\n# ifndef SharedLibraryDef\n#  define SharedLibraryDef /**/\n# endif\n# ifndef ShLibIncludeFile\n#  define ShLibIncludeFile <lnxLib.tmpl>\n# endif\n#ifndef RpathLoadFlags\n#if UseRpath\n#define RpathLoadFlags -Wl,-rpath,$(USRLIBDIRPATH)\n#else\n#define RpathLoadFlags /**/\n#endif\n#endif\n#ifndef LibraryRpathLoadFlags\n#define LibraryRpathLoadFlags RpathLoadFlags\n#endif\n# ifndef SharedLibraryLoadFlags\n#  define SharedLibraryLoadFlags -shared\n# endif\n# ifndef PositionIndependentCFlags\n#  define PositionIndependentCFlags -fPIC\n# endif\n# ifndef PositionIndependentCplusplusFlags\n#  define PositionIndependentCplusplusFlags -fPIC\n# endif\n# ifndef ExtraLoadFlags\n#  if LinuxBinUtilsMajorVersion >= 26\n#   ifdef UseInstalled\n#    if LinuxBinUtilsMajorVersion < 27\n#     define ExtraLoadFlags RpathLoadFlags -Wl,-rpath-link,$(USRLIBDIRPATH)\n#    endif\n#   else\n#    define ExtraLoadFlags RpathLoadFlags -Wl,-rpath-link,$(BUILDLIBDIR)\n#   endif\n#  else\n#   define ExtraLoadFlags RpathLoadFlags\n#  endif\n# endif\n# ifndef HardCodeLibdirFlag\n#  define HardCodeLibdirFlag RpathLoadFlags\n# endif\n# if !defined(ShlibGlobalsFlags)\n#  define ShlibGlobalsFlags -Wl,-Bsymbolic\n# endif\n\n/*\n * InstallSharedLibrary - generate rules to install the shared library.\n * NOTE: file must be executable, hence \"INSTBINFLAGS\"\n */\n# ifndef InstallSharedLibrary\n#  define\tInstallSharedLibrary(libname,rev,dest)\t\t\t@@\\\ninstall:: Concat(lib,libname.so.rev) \t\t\t\t\t@@\\\n\tMakeDir($(DESTDIR)dest)\t\t\t\t\t\t@@\\\n\t$(INSTALL) $(INSTALLFLAGS) $(INSTBINFLAGS) Concat(lib,libname.so.rev) $(DESTDIR)dest @@\\\n\t@T=`echo Concat($(DESTDIR)dest/lib,libname.so.rev) | sed 's/\\(lib[^\\.]*\\.so\\.[0-9]*\\)\\(\\.[0-9]*\\)\\{1,2\\}/\\1/'`;\\\n\t  set -x; $(RM) $$T && $(LN) Concat(lib,libname.so.rev) $$T\t@@\\\n\t@if $(SOSYMLINK); then (set -x; \\\n\t  $(RM) Concat($(DESTDIR)dest/lib,libname.so); \\\t\t@@\\\n\t  $(LN) Concat(lib,libname.so.rev) Concat($(DESTDIR)dest/lib,libname.so)); fi\n# endif /* InstallSharedLibrary */\n\n# ifndef InstallSharedLibtoolLibrary\n\n#  define SetRevisions(rev) V=`expr rev : '\\([^:]*\\)'`; \\\t\t@@\\\n\t\tR=`expr rev : '.*:\\([^:]*\\):'`; \\\t\t\t@@\\\n\t\tA=`expr rev : '.*:\\([^:]*\\)'`; \\\t\t\t@@\\\n\t\tMAJ=`expr $$V - $$A`; \\\t\t\t\t\t@@\\\n\t\tMIN=$$A.$$R\n\n#  define\tInstallSharedLibtoolLibrary(libname,rev,dest)\t\t@@\\\ninstall:: Concat(lib,libname.so) \t\t\t\t\t@@\\\n\tMakeDir($(DESTDIR)dest)\t\t\t\t\t\t@@\\\n\t@set +e; SetRevisions(rev); \\\t\t\t\t\t@@\\\n\t\tset -xe; \\\t\t\t\t\t\t@@\\\n\t\t$(INSTALL) $(INSTALLFLAGS) $(INSTBINFLAGS) Concat(lib,libname.so.$$MAJ.$$MIN) $(DESTDIR)dest; \\ @@\\\n\t\t$(RM) Concat($(DESTDIR)dest/lib,libname.so.$$MAJ); \\\t@@\\\n\t\t$(LN) Concat(lib,libname.so.$$MAJ.$$MIN) Concat($(DESTDIR)dest/lib,libname.so.$$MAJ); \\ @@\\\n\t\t$(RM) Concat($(DESTDIR)dest/lib,libname.so); \\\t\t@@\\\n\t\t$(LN) Concat(lib,libname.so.$$MAJ.$$MIN) Concat($(DESTDIR)dest/lib,libname.so)\n# endif /* InstallSharedLibrary */\n\n/*\n * InstallSharedLibraryData - generate rules to install the shared library data\n */\n# ifndef InstallSharedLibraryData\n#  define\tInstallSharedLibraryData(libname,rev,dest)\n# endif /* InstallSharedLibraryData */\n\n\n/*\n * SharedLibraryTarget - generate rules to create a shared library;\n * build it into a different name so that we do not hose people by having\n * the library gone for long periods.\n */\n# ifndef SharedLibraryTarget\n#  define SharedLibraryTarget(libname,rev,solist,down,up)\t\t@@\\\nAllTarget(Concat(lib,libname.so.rev))\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nConcat(lib,libname.so.rev):  solist $(EXTRALIBRARYDEPS)\t\t\t@@\\\n\t$(RM) $@~\t\t\t\t\t\t\t@@\\\n\t@SONAME=`echo $@ | sed 's/\\(lib[^\\.]*\\.so\\.[0-9]*\\)\\(\\.[0-9]*\\)\\{1,2\\}/\\1/'`; (set -x; \\\t@@\\\n\t\tcd down; $(CC) -o up/$@~ $(SHLIBLDFLAGS) -Wl,-soname,$$SONAME solist $(REQUIREDLIBS) BaseShLibReqs) || exit 1; \\ @@\\\n\t\t(set -x; $(RM) $$SONAME; $(LN) $@ $$SONAME); \\\t\t@@\\\n\t\tLinkBuildSonameLibrary($$SONAME)\t\t\t@@\\\n\t$(RM) $@ \t\t\t\t\t\t\t@@\\\n\t$(MV) $@~ $@\t\t\t\t\t\t\t@@\\\n\t@if $(SOSYMLINK); then (set -x; \\\t\t\t\t@@\\\n\t  $(RM) Concat(lib,libname.so); \\\t\t\t\t@@\\\n\t  $(LN) $@ Concat(lib,libname.so)); fi\t\t\t\t@@\\\n\tLinkBuildLibrary($@)\t\t\t\t\t\t@@\\\n\tLinkBuildLibraryMaybe(Concat(lib,libname.so),$(SOSYMLINK))\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nclean::\t\t\t\t\t\t\t\t\t@@\\\n\t@MAJREV=`echo rev | sed 's/\\([0-9]*\\)\\(\\.[0-9]*\\)\\{1,2\\}/\\1/'`; \\\t@@\\\n\tset -x; $(RM) Concat(lib,libname.so.$$MAJREV)\t\t\t@@\\\n\t$(RM) Concat(lib,libname.so.rev) Concat(lib,libname.so)\n\n# endif /* SharedLibraryTarget */\n\n\n# ifndef SharedLibtoolLibraryTarget\n#  define SharedLibtoolLibraryTarget(libname,rev,solist,down,up)\t@@\\\nAllTarget(Concat(lib,libname.so))\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nConcat(lib,libname.so):  solist $(EXTRALIBRARYDEPS)\t\t\t@@\\\n\t$(RM) $@~\t\t\t\t\t\t\t@@\\\n\t@set +e; SetRevisions(rev); set -e; \\\t\t\t\t@@\\\n\t\tSONAME=$@.$$MAJ; \\\t\t\t\t\t@@\\\n\t\t(set -x; \\\t\t\t\t\t\t@@\\\n\t\t$(RM) $@.$$MAJ.$$MIN~; \\\t\t\t\t@@\\\n\t\tcd down; $(CC) -o up/$@.$$MAJ.$$MIN~ $(SHLIBLDFLAGS) -Wl,-soname,$$SONAME solist $(REQUIREDLIBS) BaseShLibReqs) || exit 1; \\ @@\\\n\t\t(set -x; \\\t\t\t\t\t\t@@\\\n\t\t$(RM) $$SONAME; $(LN) $@.$$MAJ.$$MIN $$SONAME); \\\t@@\\\n\t\tLinkBuildSonameLibrary($$SONAME); \\\t\t\t@@\\\n\t\t(set -x; \\\t\t\t\t\t\t@@\\\n\t\t$(RM) $@.$$MAJ.$$MIN; \\\t\t\t\t\t@@\\\n\t\t$(MV) $@.$$MAJ.$$MIN~ $@.$$MAJ.$$MIN; \\\t\t\t@@\\\n\t  \t$(RM) $@; \\\t\t\t\t\t\t@@\\\n\t  \t$(LN) $@.$$MAJ.$$MIN $@); \\\t\t\t\t@@\\\n\t\tLinkBuildLibraryInline($@.$$MAJ.$$MIN); \\\t\t@@\\\n\t\tLinkBuildLibraryInline($@)\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nclean::\t\t\t\t\t\t\t\t\t@@\\\n\t@set +e; SetRevisions(rev); \\\t\t\t\t\t@@\\\n\t\tset -xe; \\\t\t\t\t\t\t@@\\\n\t\t$(RM) Concat(lib,libname.so.$$MAJ); \\\t\t\t@@\\\n\t\t$(RM) Concat(lib,libname.so.$$MAJ.$$MIN)\t\t@@\\\n\t$(RM) Concat(lib,libname.so)\n\n# endif /* SharedLibtoolLibraryTarget */\n\n/*\n * SharedDepLibraryTarget - generate rules to create a shared library.\n */\n# ifndef SharedDepLibraryTarget\n#   define SharedDepLibraryTarget(libname,rev,deplist,solist,down,up)\t@@\\\nAllTarget(Concat(lib,libname.so.rev))\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nConcat(lib,libname.so.rev):  deplist $(EXTRALIBRARYDEPS)\t\t@@\\\n\t$(RM) $@~\t\t\t\t\t\t\t@@\\\n\t@SONAME=`echo $@ | sed 's/\\(lib[^\\.]*\\.so\\.[0-9]*\\)\\(\\.[0-9]*\\)\\{1,2\\}/\\1/'`; set -x; \\\t\t@@\\\n\t\t(cd down; $(CC) -o up/$@~ $(SHLIBLDFLAGS) -Wl,-soname,$$SONAME solist $(REQUIREDLIBS) BaseShLibReqs); \\ @@\\\n\t\t$(RM) $$SONAME; $(LN) $@ $$SONAME; \\\t\t\t@@\\\n\t\tLinkBuildSonameLibrary($$SONAME)\t\t\t@@\\\n\t$(RM) $@ \t\t\t\t\t\t\t@@\\\n\t$(MV) $@~ $@\t\t\t\t\t\t\t@@\\\n\t@if $(SOSYMLINK); then (set -x; \\\t\t\t\t@@\\\n\t  $(RM) Concat(lib,libname.so); \\\t\t\t\t@@\\\n\t  $(LN) $@ Concat(lib,libname.so)); fi\t\t\t\t@@\\\n\tLinkBuildLibrary($@)\t\t\t\t\t\t@@\\\n\tLinkBuildLibraryMaybe(Concat(lib,libname.so),$(SOSYMLINK))\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nclean::\t\t\t\t\t\t\t\t\t@@\\\n\t@MAJREV=`echo rev | sed 's/\\([0-9]*\\)\\(\\.[0-9]*\\)\\{1,2\\}/\\1/'`; \\\t@@\\\n\tset -x; $(RM) Concat(lib,libname.so.$$MAJREV)\t\t\t@@\\\n\t$(RM) Concat(lib,libname.so.rev) Concat(lib,libname.so)\n\n#endif /* SharedDepLibraryTarget */\n\n/*\n * SharedDepCplusplusLibraryTarget - generate rules to create a shared library.\n */\n#ifndef SharedDepCplusplusLibraryTarget\n#define SharedDepCplusplusLibraryTarget(libname,rev,deplist,solist,down,up) @@\\\nAllTarget(Concat(lib,libname.so.rev))\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nConcat(lib,libname.so.rev):  deplist $(EXTRALIBRARYDEPS)\t\t@@\\\n\t$(RM) $@~\t\t\t\t\t\t\t@@\\\n\t@SONAME=`echo $@ | sed 's/\\(lib[^\\.]*\\.so\\.[0-9]*\\)\\(\\.[0-9]*\\)\\{1,2\\}/\\1/'`; set -x; \\\t\t@@\\\n\t\t(cd down; $(CXX) -o up/$@~ $(SHLIBLDFLAGS) -Wl,-soname,$$SONAME solist $(REQUIREDLIBS) BaseShLibReqs); \\ @@\\\n\t\t$(RM) $$SONAME; $(LN) $@ $$SONAME; \\\t\t\t@@\\\n\t\tLinkBuildSonameLibrary($$SONAME)\t\t\t@@\\\n\t$(RM) $@ \t\t\t\t\t\t\t@@\\\n\t$(MV) $@~ $@\t\t\t\t\t\t\t@@\\\n\t@if $(SOSYMLINK); then (set -x; \\\t\t\t\t@@\\\n\t  $(RM) Concat(lib,libname.so); \\\t\t\t\t@@\\\n\t  $(LN) $@ Concat(lib,libname.so)); fi\t\t\t\t@@\\\n\tLinkBuildLibrary($@)\t\t\t\t\t\t@@\\\n\tLinkBuildLibraryMaybe(Concat(lib,libname.so),$(SOSYMLINK))\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nclean::\t\t\t\t\t\t\t\t\t@@\\\n\t@MAJREV=`echo rev | sed 's/\\([0-9]*\\)\\(\\.[0-9]*\\)\\{1,2\\}/\\1/'`; \\\t@@\\\n\tset -x; $(RM) Concat(lib,libname.so.$$MAJREV)\t\t\t@@\\\n\t$(RM) Concat(lib,libname.so.rev) Concat(lib,libname.so)\n\n#endif /* SharedDepCplusplusLibraryTarget */\n\n# ifndef SharedDepModuleTarget\n#  define SharedDepModuleTarget(name,deps,solist)\t\t\t@@\\\nAllTarget(name)\t\t\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nname: deps\t\t\t\t\t\t\t\t@@\\\n\t$(RM) $@~\t\t\t\t\t\t\t@@\\\n\t$(CC) -o $@~ $(SHLIBLDFLAGS) solist $(REQUIREDLIBS) BaseShLibReqs @@\\\n\t$(RM) $@\t\t\t\t\t\t\t@@\\\n\t$(MV) $@~ $@\t\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nclean::\t\t\t\t\t\t\t\t\t@@\\\n\t$(RM) name\n\n# endif /* SharedDepModuleTarget */\n\n# ifndef SharedDriModuleTarget\n#  define SharedDriModuleTarget(name,deps,solist)\t\t\t@@\\\nAllTarget(name)\t\t\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nname: deps\t\t\t\t\t\t\t\t@@\\\n\t$(RM) $@~ $@.map\t\t\t\t\t\t@@\\\n\t@(echo 'DRI_MODULE { global: __dri*; local: *; };' > $@.map)\t@@\\\n\t$(CC) -o $@~ -Wl,--version-script=$@.map $(SHLIBLDFLAGS) solist $(REQUIREDLIBS) BaseShLibReqs @@\\\n\t$(RM) $@ $@.map\t\t\t\t\t\t\t@@\\\n\t$(MV) $@~ $@\t\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nclean::\t\t\t\t\t\t\t\t\t@@\\\n\t$(RM) name\t\t\t\t\t\t\t@@\\\n\t$(RM) name.map\n\n# endif /* SharedDriModuleTarget */\n\n/*\n * SharedLibraryDataTarget - generate rules to create shlib data file;\n */\n# ifndef SharedLibraryDataTarget\n#  define SharedLibraryDataTarget(libname,rev,salist)\n# endif /* SharedLibraryTarget */\n\n#else /* UseElfFormat */\n\n# ifndef SharedDataSeparation\n#  define SharedDataSeparation NO\n# endif\n# ifndef SharedCodeDef\n#  define SharedCodeDef /**/\n# endif\n# ifndef SharedLibraryDef\n#  define SharedLibraryDef /**/\n# endif\n# ifndef ShLibIncludeFile\n#  define ShLibIncludeFile <lnxLib.tmpl>\n# endif\n# ifndef SharedLibraryLoadFlags\n#  define SharedLibraryLoadFlags /**/\n# endif\n# ifndef PositionIndependentCFlags\n#  define PositionIndependentCFlags -B/usr/bin/jump\n# endif\n\n/*\n * These definitions are now extended to work with the X sources and\n * external sources wishing to build shared libs.\n *\n * A library can create it's own shlibs (.so) or can be incorporated into\n * another \"host\" lib. All libraries generate stub (.sa) files.\n * A \"host\" lib does all the work to generate the stubs for itself and its\n * \"guests\", invoking the \"guest\" Makefiles to create the objects for\n * inclusion into the \"host\" shlib. A \"guest\" lib will ask the \"host\" to\n * create the stubfiles, then copy its own into its directory.\n * Most external libs are \"host\" libs; the concept of \"guest\" is a holdover\n * from older libs during the days of scarce shared library address space.\n *\n * To create a simple \"host\" shared lib, Xfoo, define:\n *\n *  JUMP_ROOT_Xfoo = <source directory>\n *  JUMP_IS_HOST_Xfoo = YES\n *  JUMP_STUBLIBS_Xfoo = libXfoo.sa\n *  JUMP_DIR_Xfoo = $(JUMP_ROOT_Xfoo)/shared\t\t<work directory>\n *  JUMP_DEFS_Xfoo = -DFOO\t\t\t\t<defs for jump files>\n *  JUMP_VARS_Xfoo = $(JUMP_ROOT_Xfoo)/jump_vars\t<see DLL docs>\n *  JUMP_FUNCS_Xfoo = $(JUMP_ROOT_Xfoo)/jump_funcs\t<see DLL docs>\n *  JUMP_IGNORE_Xfoo = $(JUMP_ROOT_Xfoo)/jump_ignore\t<see DLL docs>\n *  JUMP_EXPORT_Xfoo = $(JUMP_DIR_Xfoo)/jump.vars\t<exported symbols>\n *  JUMP_IMPORT_Xfoo = $(JUMP_EXPORT_Xbar)\t\t<imported symbols>\n *  JUMP_ADDRESS_Xfoo = 0xXXXXXXXX\t\t\t<fill in with address>\n *  JUMP_JUMPTABLESIZE_Xfoo = 0x4000\t\t\t<adjust if necessary>\n *  JUMP_GOTSIZE_Xfoo = 4096\t\t\t\t<adjust if necessary>\n *  JUMP_STUBNAMES_Xfoo = libXfoo\t\t\t<and others>\n *  JUMP_STUBS_IMPORT_Xfoo = /usr/lib/libc.sa\t\t<and others>\n *  JUMP_LDLIBS_Xfoo = `$(CC) --print-libgcc-file-name` -lc <and others>\n *\n * To create a complex \"host\", you need to add\n *  JUMP_SIBARS_Xt = jump/libXbar.a~\t\t\t<and others>\n * These are the archives of the shared objects of the \"guest\" libs. They\n * need to be added to the JUMP_LDLIBS_Xfoo lines.\n *\n * For further clarification, study the definitions of libXaw, a simple \"host\"\n * lib, libXt, a complex \"host\" lib, and libXmu, one of libXts \"guests\".\n *\n * As a hint of how to start (with the DLL docs), touch jump_vars, jump_funcs\n * and jump_ignore, then compile. Then massage the jump.vars and jump.funcs\n * files in the shared subdirectory into jump_xxx files.\n */\n\n# ifndef UseInstalled\nXCOMM These are only needed to build the server\n\n#  if LinuxElfDefault\nLIBC_SA = /usr/i486-linuxaout/lib/libc.sa\nLIBM_SA = /usr/i486-linuxaout/lib/libm.sa\n#  else\nLIBC_SA = /usr/lib/libc.sa\nLIBM_SA = /usr/lib/libm.sa\n#  endif\n\nJUMP_LDLIBS_libc = `$(CC) --print-libgcc-file-name` -lc\n\nXCOMM libX11.so (X11, SM, ICE)\nJUMP_ROOT_X11 = $(XLIBSRC)\nJUMP_IS_HOST_X11 = YES\nJUMP_STUBLIBS_X11 = libX11.sa libSM.sa libICE.sa\nJUMP_SIBDIRS_X11 = $(JUMP_ROOT_SM) $(JUMP_ROOT_ICE)\nJUMP_DIR_X11 = $(JUMP_ROOT_X11)/shared\nJUMP_DEFS_X11 = $(XDMAUTHDEFS) $(XKB_DEFINES)\nJUMP_VARS_X11 = $(JUMP_ROOT_X11)/jump_vars\nJUMP_FUNCS_X11 = $(JUMP_ROOT_X11)/jump_funcs\nJUMP_IGNORE_X11 = $(JUMP_ROOT_X11)/jump_ignore\nJUMP_EXPORT_X11 = $(JUMP_DIR_X11)/jump.vars\nJUMP_ADDRESS_X11 = 0x60200000\nJUMP_JUMPTABLESIZE_X11 = 0x4000\nJUMP_GOTSIZE_X11 = 4096\nJUMP_STUBNAMES_X11 = libX11 libSM libICE\nJUMP_STUBS_IMPORT_X11 = $(LIBC_SA)\nJUMP_SIBARS_X11 = jump/libSM.a~ jump/libICE.a~\nJUMP_LDLIBS_X11 = $(JUMP_SIBARS_X11) $(JUMP_LDLIBS_libc)\n\nXCOMM libSM (part of libX11.so)\nJUMP_ROOT_SM = $(SMSRC)\nJUMP_IS_HOST_SM = NO\nJUMP_HOST_SM = $(JUMP_ROOT_X11)\nJUMP_DIR_SM = $(JUMP_DIR_X11)\n\nXCOMM libICE (part of libX11.so)\nJUMP_ROOT_ICE = $(ICESRC)\nJUMP_IS_HOST_ICE = NO\nJUMP_HOST_ICE = $(JUMP_ROOT_X11)\nJUMP_DIR_ICE = $(JUMP_DIR_X11)\n\nXCOMM libXt.so (Xt, Xmu, Xext, Xi, Xtst, Xp)\nJUMP_ROOT_Xt = $(TOOLKITSRC)\nJUMP_IS_HOST_Xt = YES\nJUMP_STUBLIBS_Xt = libXt.sa libXmu.sa libXext.sa libXi.sa libXtst.sa libXp.sa\nJUMP_SUBDIRS_Xt = $(JUMP_ROOT_X11)\nJUMP_SIBDIRS_Xt = $(JUMP_ROOT_Xmu) $(JUMP_ROOT_Xext) \\\n\t$(JUMP_ROOT_Xi) $(JUMP_ROOT_Xtst) $(JUMP_ROOT_Xp)\nJUMP_DIR_Xt = $(JUMP_ROOT_Xt)/shared\nJUMP_VARS_Xt = $(JUMP_ROOT_Xt)/jump_vars\nJUMP_FUNCS_Xt = $(JUMP_ROOT_Xt)/jump_funcs\nJUMP_IGNORE_Xt = $(JUMP_ROOT_Xt)/jump_ignore\nJUMP_EXPORT_Xt = $(JUMP_DIR_Xt)/jump.vars\nJUMP_IMPORT_Xt = $(JUMP_EXPORT_X11)\nJUMP_ADDRESS_Xt = 0x602a0000\nJUMP_JUMPTABLESIZE_Xt = 0x4000\nJUMP_GOTSIZE_Xt = 4096\nJUMP_STUBNAMES_Xt = libXt libXmu libXext libXi libXtst libXp\nJUMP_STUBS_IMPORT_Xt = $(JUMP_STUBS_IMPORT_X11)\nJUMP_SIBARS_Xt = jump/libXmu.a~ jump/libXext.a~ jump/libXi.a~ jump/libXtst.a~ jump/libXp.a~\nJUMP_LDLIBS_Xt = $(JUMP_SIBARS_Xt) $(JUMP_ROOT_ICE)/libICE.sa \\\n\t$(JUMP_ROOT_SM)/libSM.sa $(JUMP_ROOT_X11)/libX11.sa $(JUMP_LDLIBS_libc)\n\nXCOMM libXmu (part of libXt.so)\nJUMP_ROOT_Xmu = $(XMUSRC)\nJUMP_IS_HOST_Xmu = NO\nJUMP_HOST_Xmu = $(JUMP_ROOT_Xt)\nJUMP_DIR_Xmu = $(JUMP_DIR_Xt)\n\nXCOMM libXext (part of libXt.so)\nJUMP_ROOT_Xext = $(XEXTLIBSRC)\nJUMP_IS_HOST_Xext = NO\nJUMP_HOST_Xext = $(JUMP_ROOT_Xt)\nJUMP_DIR_Xext = $(JUMP_DIR_Xt)\n\nXCOMM libXi (part of libXt.so)\nJUMP_ROOT_Xi = $(XILIBSRC)\nJUMP_IS_HOST_Xi = NO\nJUMP_HOST_Xi = $(JUMP_ROOT_Xt)\nJUMP_DIR_Xi = $(JUMP_DIR_Xt)\n\nXCOMM libXtst (part of libXt.so)\nJUMP_ROOT_Xtst = $(XTESTLIBSRC)\nJUMP_IS_HOST_Xtst = NO\nJUMP_HOST_Xtst = $(JUMP_ROOT_Xt)\nJUMP_DIR_Xtst = $(JUMP_DIR_Xt)\n\nXCOMM libXp (part of libXt.so)\nJUMP_ROOT_Xp = $(XPLIBSRC)\nJUMP_IS_HOST_Xp = NO\nJUMP_HOST_Xp = $(JUMP_ROOT_Xt)\nJUMP_DIR_Xp = $(JUMP_DIR_Xt)\n\nXCOMM libXaw.so (Xaw)\nJUMP_ROOT_Xaw = $(AWIDGETSRC)\nJUMP_IS_HOST_Xaw = YES\nJUMP_STUBLIBS_Xaw = libXaw.sa\nJUMP_SUBDIRS_Xaw = $(JUMP_ROOT_Xt)\nJUMP_DIR_Xaw = $(JUMP_ROOT_Xaw)/shared\nJUMP_VARS_Xaw = $(JUMP_ROOT_Xaw)/jump_vars\nJUMP_FUNCS_Xaw = $(JUMP_ROOT_Xaw)/jump_funcs\nJUMP_IGNORE_Xaw = $(JUMP_ROOT_Xaw)/jump_ignore\nJUMP_EXPORT_Xaw = $(JUMP_DIR_Xaw)/jump.vars\nJUMP_IMPORT_Xaw = $(JUMP_EXPORT_Xt) $(JUMP_EXPORT_X11)\nJUMP_ADDRESS_Xaw = 0x60300000\nJUMP_JUMPTABLESIZE_Xaw = 0x4000\nJUMP_GOTSIZE_Xaw = 4096\nJUMP_STUBNAMES_Xaw = libXaw\nJUMP_STUBS_IMPORT_Xaw = $(JUMP_STUBS_IMPORT_X11)\nJUMP_LDLIBS_Xaw = $(JUMP_ROOT_Xt)/libXt.sa $(JUMP_ROOT_Xt)/libXmu.sa \\\n\t$(JUMP_ROOT_Xt)/libXext.sa $(JUMP_ROOT_X11)/libX11.sa \\\n\t$(JUMP_LDLIBS_libc)\n\n# endif /* !UseInstalled */\n\n/*\n * SharedLibraryDataTarget - generate rules to create shared data file\n */\n# ifndef SharedLibraryDataTarget\n#  define SharedLibraryDataTarget(libname,rev,salist)\n# endif\n\n/*\n * SharedLibraryTarget - generate rules to create a shared library;\n * There are two basic flavors of libs: self-generating, which create\n * their own (and possibly other) libs, and hosted, which rely on another\n * lib for all the work.\n */\n# ifndef SharedLibraryTarget\n#  define SharedLibraryTarget(libname,rev,solist,down,up)\t\t@@\\\nXCOMM This logic is such to compile the libs in their proper order,\t@@\\\nXCOMM remain dependent on subsidiary libs, and yet minimize local work\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nJUMP_DIR=./jump\t\t\t\t\t\t\t\t@@\\\nJUMP_LIB=Concat(lib,libname)\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nXCOMM  this is needed for newer gnumake versions\t\t\t@@\\\nexport JUMP_DIR JUMP_LIB\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nJUMP_IS_HOST=$(Concat(JUMP_IS_HOST_,libname))\t\t\t\t@@\\\nJUMP_AR=$(JUMP_DIR)/Concat(lib,libname.a~)\t\t\t\t@@\\\nJUMP_SA=Concat(lib,libname.sa)\t\t\t\t\t\t@@\\\nJUMP_SO=Concat(lib,libname.so.rev)\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nJUMP_HOST=$(Concat(JUMP_HOST_,libname))\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nINSTSOLIBFLAGS=-m 0555\t\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nAllTarget($(BUILDLIBDIR)/$(JUMP_SA))\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\n$(BUILDLIBDIR)/$(JUMP_SA): $(JUMP_SA)\t\t\t\t\t@@\\\n\tLinkBuildLibrary($(JUMP_SA))\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\n$(JUMP_SA) $(Concat(JUMP_STUBLIBS_,libname)) do_JUMP_SA: \\\n\t\tdown/mk_JUMP_SA_$(JUMP_IS_HOST)\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\ndown/mk_JUMP_SA_0:: mk_JUMP_HOST\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\ndown/mk_JUMP_SA_0:: $(JUMP_HOST)/$(JUMP_SA)\t\t\t\t@@\\\n\t$(RM) $(JUMP_SA)\t\t\t\t\t\t@@\\\n\t$(LN) $(JUMP_HOST)/$(JUMP_SA) $(JUMP_SA)\t\t\t@@\\\n\ttouch $@\t\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\ndown/mk_JUMP_SA_1:: $(JUMP_SO)\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\ndown/mk_JUMP_SA_1:: down/mk_JUMP_SO_2\t\t\t\t\t@@\\\n\t$(RM) $(Concat(JUMP_STUBLIBS_,libname))\t\t\t\t@@\\\n\tmkstubs -v rev -l $(JUMP_LIB) \\\n\t\t-a $(Concat(JUMP_ADDRESS_,libname)) \\\n\t\t-j $(Concat(JUMP_JUMPTABLESIZE_,libname)) \\\n\t\t-g $(Concat(JUMP_GOTSIZE_,libname)) \\\n\t\t-- $(Concat(JUMP_STUBNAMES_,libname))\t\t\t@@\\\n\tverify-shlib -l $(JUMP_SO) \\\n\t\t$(Concat(JUMP_STUBLIBS_,libname))\t\t\t@@\\\n\t$(MV) verify.out $(JUMP_DIR)\t\t\t\t\t@@\\\n\ttouch $@\t\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nmk_JUMP_HOST:\t\t\t\t\t\t\t\t@@\\\n\t@echo checking stub library $(JUMP_SA) in $(JUMP_HOST)...\t@@\\\n\t@(cd $(JUMP_HOST); $(MAKE) $(MFLAGS) $(JUMP_SA)) || exit 1\t@@\\\n\t@echo ok. continuing in $(Concat(JUMP_ROOT_,libname))...\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\n$(JUMP_SO): down/mk_JUMP_SO_$(JUMP_IS_HOST)\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\ndown/mk_JUMP_SO_0:\t\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\ndown/mk_JUMP_SO_1:: $(JUMP_AR) mk_JUMP_SIBDIRS down/mk_JUMP_SO_2\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\ndown/mk_JUMP_SO_2: down/mk_JUMP_AR $(Concat(JUMP_SIBARS_,libname))\t@@\\\n\t$(RM) $(JUMP_SO)\t\t\t\t\t\t@@\\\n\tmkimage -f -v rev -l $(JUMP_LIB) \\\n\t\t-a $(Concat(JUMP_ADDRESS_,libname)) \\\n\t\t-j $(Concat(JUMP_JUMPTABLESIZE_,libname)) \\\n\t\t-g $(Concat(JUMP_GOTSIZE_,libname)) \\\n\t\t-- $(JUMP_AR) $(Concat(JUMP_LDLIBS_,libname))\t\t@@\\\n\t$(RM) $(JUMP_DIR)/__jump.s $(JUMP_DIR)/__jump.o\t\t\t@@\\\n\tLinkBuildLibrary($(JUMP_SO))\t\t\t\t\t@@\\\n\ttouch $@\t\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nmk_JUMP_SIBDIRS:\t\t\t\t\t\t\t@@\\\n\t@for d in $(Concat(JUMP_SIBDIRS_,libname)); do \\\n\t\techo checking ar library in $$d...; \\\n\t\t(cd $$d ; $(MAKE) $(MFLAGS) fastdo_JUMP_AR) || exit 1; \\\n\t\techo ok. continuing in $(Concat(JUMP_ROOT_,libname))...;done@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nfastdo_JUMP_AR: $(JUMP_DIR) down/mk_JUMP_AR\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\n$(JUMP_AR) do_JUMP_AR:: jumpsetup down/mk_JUMP_AR\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\njumpsetup: $(JUMP_DIR) jumpsetup_$(JUMP_IS_HOST)\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\n$(JUMP_DIR):\t\t\t\t\t\t\t\t@@\\\n\t$(RM) jump\t\t\t\t\t\t\t@@\\\n\tLibMkdir($(Concat(JUMP_DIR_,libname)))\t\t\t\t@@\\\n\t$(LN) $(Concat(JUMP_DIR_,libname)) jump\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\njumpsetup_0:\t\t\t\t\t\t\t\t@@\\\n\t@echo doing jump setup in host $(JUMP_HOST)...\t\t\t@@\\\n\t@(cd $(JUMP_HOST); $(MAKE) $(MFLAGS) jumpsetup) || exit 1\t@@\\\n\t@echo ok. continuing in $(Concat(JUMP_ROOT_,libname))...\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\njumpsetup_1::\t\t\t\t\t\t\t\t@@\\\n\t@for d in $(Concat(JUMP_SUBDIRS_,libname)); do \\\n\t\techo checking stub library in $$d...; \\\n\t\t(cd $$d ; $(MAKE) $(MFLAGS) do_JUMP_SA) || exit 1; \\\n\t\techo ok. continuing in $(Concat(JUMP_ROOT_,libname))...;done@@\\\n\t\t\t\t\t\t\t\t\t@@\\\njumpsetup_1:: $(JUMP_DIR)/jump.funcs $(JUMP_DIR)/jump.vars \\\n\t$(JUMP_DIR)/jump.ignore $(JUMP_DIR)/jump.import\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\n$(JUMP_DIR)/jump.funcs: $(Concat(JUMP_FUNCS_,libname))\t\t\t@@\\\n\t$(RM) $(JUMP_DIR)/jump.funcs\t\t\t\t\t@@\\\n\tcat $(Concat(JUMP_FUNCS_,libname)) | \\\n\t\t$(CPP) $(ALLDEFINES) $(Concat(JUMP_DEFS_,libname)) > $@\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\n$(JUMP_DIR)/jump.vars: $(Concat(JUMP_VARS_,libname))\t\t\t@@\\\n\t$(RM) $(JUMP_DIR)/jump.vars\t\t\t\t\t@@\\\n\tcat $(Concat(JUMP_VARS_,libname)) | \\\n\t\t$(CPP) $(ALLDEFINES) $(Concat(JUMP_DEFS_,libname)) > $@\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\n$(JUMP_DIR)/jump.ignore: $(Concat(JUMP_IGNORE_,libname))\t\t@@\\\n\t$(RM) $(JUMP_DIR)/jump.ignore\t\t\t\t\t@@\\\n\tcat $(Concat(JUMP_IGNORE_,libname)) | \\\n\t\t$(CPP) $(ALLDEFINES) $(Concat(JUMP_DEFS_,libname)) > $@\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\n$(JUMP_DIR)/jump.import: $(JUMP_DIR)/stubs.import \\\n\t\t$(Concat(JUMP_IMPORT_,libname))\t\t\t\t@@\\\n\t$(RM) $(JUMP_DIR)/jump.import\t\t\t\t\t@@\\\n\tcat $(JUMP_DIR)/stubs.import $(Concat(JUMP_IMPORT_,libname)) > $@ @@\\\n\t\t\t\t\t\t\t\t\t@@\\\n$(JUMP_DIR)/stubs.import: $(Concat(JUMP_STUBS_IMPORT_,libname))\t\t@@\\\n\t$(RM) $(JUMP_DIR)/stubs.import\t\t\t\t\t@@\\\n\tnm --no-cplus $(Concat(JUMP_STUBS_IMPORT_,libname)) | grep '__GOT__' | \\\n\t\tsed 's/__GOT__/_/' > $@\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\ndown/mk_JUMP_AR: solist\t\t\t\t\t\t\t@@\\\n\t$(RM) $(JUMP_AR)\t\t\t\t\t\t@@\\\n\t@if [ -s $(JUMP_DIR)/jump.log ]; then \\\n\t\techo \"Error: Leftover globals for shared lib\"; \\\n\t\texit 1; fi\t\t\t\t\t\t@@\\\n\t(cd down; $(AR) up/$(JUMP_AR) solist) || exit 1\t\t\t@@\\\n\t$(RANLIB) $(JUMP_AR)\t\t\t\t\t\t@@\\\n\ttouch $@\t\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nclean:: jumpclean\t\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\njumpclean: jumpclean_$(JUMP_IS_HOST)\t\t\t\t\t@@\\\n\t$(RM) $(JUMP_SA) down/mk_JUMP_AR\t\t\t\t@@\\\n\t$(RM) -r $(JUMP_DIR)\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\njumpclean_0:\t\t\t\t\t\t\t\t@@\\\n\t$(RM) down/mk_JUMP_SA_0\t\t\t\t\t\t@@\\\n\t$(RM) $(JUMP_HOST)/$(JUMP_SA)\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\njumpclean_1:\t\t\t\t\t\t\t\t@@\\\n\t$(RM) -r $(JUMP_SO) $(Concat(JUMP_DIR_,libname)) \\\t\t@@\\\n\t\tdown/mk_JUMP_SA_1 down/mk_JUMP_SO_1 down/mk_JUMP_SO_2\n# endif /* SharedLibraryTarget */\n\n/*\n * InstallSharedLibrary - generate rules to install the shared library.\n */\n# ifndef InstallSharedLibrary\n#  define\tInstallSharedLibrary(libname,rev,dest)\t\t\t@@\\\ninstall:: $(JUMP_SA) $(JUMP_SO)\t\t\t\t\t\t@@\\\n\tMakeDir($(DESTDIR)dest)\t\t\t\t\t\t@@\\\n\t@if [ \"$(JUMP_IS_HOST)\" = YES ]; then \\\n\t\t(T=$(DESTDIR)dest/`echo $(JUMP_SO)|sed '/\\(lib[^\\.]*\\.so\\.[0-9]*\\)\\(\\.[0-9]*\\)\\{1,2\\}/\\1/`;\\\n\t\tset -x; \\\n\t\t$(INSTALL) -s -c $(INSTSOLIBFLAGS) $(JUMP_SO) $(DESTDIR)dest; \\\n\t\t$(RM) $$T && $(LN) $(JUMP_SO) $$T); fi\t\t\t@@\\\n\t$(INSTALL) -c $(INSTLIBFLAGS) $(JUMP_SA) $(DESTDIR)dest\n# endif /* InstallSharedLibrary */\n\n/*\n * InstallSharedLibraryData - generate rules to install the shared library data\n */\n# ifndef InstallSharedLibraryData\n#  define\tInstallSharedLibraryData(libname,rev,dest)\n# endif /* InstallSharedLibraryData */\n\n#endif /* UseElfFormat */\n",
        "/tmp/vanessa/spack-stage/spack-stage-xorg-cf-files-1.0.6-p5ls3mwtg6a7p6ysmdtc7smphutacxsb/spack-src/xf86site.def": "XCOMM $XFree86: xc/config/cf/xf86site.def,v 3.186 2003/06/25 18:06:22 eich Exp $\n/******************************************************************************/\n/*\n * This file is to provide a quick method for most people to change the\n * behaviour of their XFree86 installation without having to fully\n * understand the workings of site.def and all the various '.cf' files.\n *\n * In the vast majority of cases, it should not be necessary to use this\n * file at all or change it in any way.\n *\n * This file is divided into two sections.  The first contains settings\n * that end-users might reasonably change.  The second contains settings\n * that developers might want to change.\n *\n * IMPORTANT NOTE:  In all cases changing the defaults may cause problems\n * and/or unexpected side-effects.  If you don't understand what a setting\n * does, then it's best to not change it.  If you make changes and have\n * problems, verify that those problems are also present when using an\n * empty host.def file and unchanged version of this file before reporting\n * them.\n *\n * A good way to use this file is to copy it to host.def, and make the\n * changes there.  That way, future patches to this file won't fail.\n * The host.def file will never be patched.\n *\n * The distributed version of this file MUST contain no uncommented\n * definitions.  Default definitions belong in xfree86.cf, or <vendor>.cf\n * files.\n */\n/******************************************************************************/\n\n/*\n * If you have build-specific modifications in your host.def file, but\n * want an empty host.def file installed when doing 'make install',\n * uncomment the following\n *\n#define InstallEmptyHostDef\n */\n\n/*\n * Which servers to build.  There is now only one XFree86 server.\n * It can be disabled by the following.\n *\n#define XF86Server\t\tNO\n */\n\n/*\n * To disable building the Xnest server, uncomment this.\n *\n#define XnestServer\t\tNO\n */\n\n/*\n * To disable building Xvfb, uncomment this.\n *\n#define XVirtualFramebufferServer\tNO\n */\n\n/*\n * To enable building Xdmx, uncomment this.\n *\n#define XdmxServer\t\tYES\n */\n\n/*\n * To disable building Xprt, uncomment this.\n *\n#define XprtServer NO\n */\n\n/*\n * Set the default server (ie the one that gets the sym-link to \"X\")\n *\n#define ServerToInstall\t\tXFree86\n */\n\n/*\n * If you only run the X server under xdm the X servers don't need to be\n * installed SetUID, and you may comment out the lines below.  If you run\n * the servers by hand (with xinit or startx), then they do need to be\n * installed SetUID on most platforms.\n *\n * Consult your system administrator before making the X server setuid.\n *\n#define InstallXserverSetUID\tNO\n */\n\n\n/*\n * Server configuration parameters.  The defaults are shown here:\n */\n\n/*\n * Which drivers to build.  When building a static server, each of these\n * will be included in it.  When building the loadable server each of these\n * modules will be built.\n *\n#define XF86CardDrivers\t\tmga glint nv tga s3virge sis rendition \\\n\t\t\t\tneomagic i740 tdfx savage \\\n\t\t\t\tcirrus vmware tseng trident chips apm \\\n\t\t\t\tGlideDriver fbdev i128 \\\n\t\t\t\tati AgpGartDrivers DevelDrivers ark cyrix \\\n\t\t\t\tsiliconmotion \\\n\t\t\t\tvesa vga XF86OSCardDrivers XF86ExtraCardDrivers\n */\n\n/*\n * To add third party drivers to the standard driver list, set the\n * following.\n *\n#define XF86ExtraCardDrivers\textradriver1 extradriver2 ...\n */\n\n/*\n * Select the XInput devices you want by uncommenting this.\n *\n#define XInputDrivers\t\tmouse keyboard acecad calcomp citron \\\n\t\t\t\tdigitaledge dmc dynapro elographics \\\n\t\t\t\tmicrotouch mutouch penmount spaceorb summa \\\n\t\t\t\twacom void magictouch aiptek\n */\n\n/*\n * There are three parameters that determine where and how the Matrox HAL\n * library is used:\n *\n *   HaveMatroxHal  -- You have the HALlib.a binary library installed\n *                     in xfree86/drivers/mga/HALlib, and you want it to\n *                     be used.\n *                     Default: NO\n *\n *   BuildMatroxHal -- You have the source for the HALlib library (installed\n *                     in xfree86/drivers/mga/hallib), and want to build and\n *                     use it.\n *                     Default: NO\n *\n *   UseMatroxHal   -- You want to build support for loading/using the HAL\n *                     library into the mga driver.  For module server builds\n *                     you don't need to have the HALlib library to do this.\n *                     but you want to build support for loading it and using\n *                     it into the mga driver module.\n *                     Default: YES for loadable server build\n *                              (HaveMatroxHal || BuildMatroxHal) for static\n */\n\n/*\n * To disable use of the Matrox HAL library, uncomment this:\n *\n#define UseMatroxHal\t\tNO\n */\n\n/*\n * If you have the HALlib.a binary installed in xfree86/drivers/mga/HALlib,\n * uncomment this:\n *\n#define HaveMatroxHal\t\tYES\n */\n\n/*\n * If you have the HALlib source code installed in xfree86/drivers/mga/hallib,\n * uncomment this:\n#define BuildMatroxHal\t\tYES\n */\n\n/*\n * To disable building the font server, uncomment this.\n *\n#define BuildFontServer\t\tNO\n */\n\n/*\n * To disable support for Speedo fonts, uncomment this.\n *\n#define BuildSpeedo\t\tNO\n */\n\n/*\n * To disable support for Type1 fonts, uncomment this.\n *\n#define BuildType1\t\tNO\n */\n\n/*\n * To disable support for CID fonts, uncomment this.\n *\n#define BuildCID\t\tNO\n */\n\n/*\n * To disable support for TrueType fonts, uncomment these.\n *\n#define BuildFreeType\t\tNO\n */\n\n/*\n * To set non-default build options for the underlying FreeType libraries,\n * add them here and uncomment.\n *\n#define Freetype2BuildDefines\t-DFREETYPE_BUILD_DEFINES\n */\n\n/*\n * To build the FreeType libraries with the TrueType byte code interpreter\n * enabled, uncomment this.  Note that there are patent issues related to the\n * TrueType byte code interpreter, and we only recommend you enabling this\n * if you are sure that there are no legal impediments to you doing so.  See\n * <http://www.freetype.org/patents.html> for further information.\n *\n#define Freetype2BuildDefines -DTT_CONFIG_OPTION_BYTECODE_INTERPRETER\n */\n\n/*\n * Do you want to Build Fonts (Usually you only want to build and install\n * fonts once, if this is a first time install you will want to build the\n * fonts)\n *\n#define BuildFonts\t\tNO\n */\n\n/*\n * To not build/install the 75dpi fonts, uncomment the following\n *\n#define Build75DpiFonts\t\tNO\n */\n\n/*\n * To not build/install the 100dpi fonts, uncomment the following\n *\n#define Build100DpiFonts\tNO\n */\n\n/*\n * To not build/install the Speedo fonts, uncomment the following\n *\n#define BuildSpeedoFonts\tNO\n */\n\n/*\n * To not build/install the Type1 fonts, uncomment the following\n *\n#define BuildType1Fonts\t\tNO\n */\n\n/*\n * To not build/install the CID fonts, uncomment the following\n *\n#define BuildCIDFonts\t\tNO\n */\n\n/*\n * To not build/install the True Type fonts, uncomment the following\n *\n#define BuildTrueTypeFonts\tNO\n */\n\n/*\n * To not build/install the Cyrillic fonts, uncomment the following\n *\n#define BuildCyrillicFonts\tNO\n */\n\n/*\n * To not install the local font directory, uncomment the following\n *\n#define MakeLocalFontDir\tNO\n */\n\n/*\n * To build only the servers with a cut-down source tree, uncomment\n * this.\n *\n#define BuildServersOnly\tYES\n */\n\n/*\n * By default, the sample config files for xinit, xdm and xfs are installed\n * only when there is no pre-existing version installed.  Uncommenting the\n * following lines will force the sample versions to be installed even if\n * it means over-writing existing versions.\n *\n#define InstallXinitConfig\tYES\n#define InstallXdmConfig\tYES\n#define InstallFSConfig\t\tYES\n */\n\n/*\n * By default the application defaults files are always installed.\n * Uncommenting the the following will prevent exising application\n * defaults files from being over-written.\n *\n#define InstallAppDefFiles\tNO\n */\n\n/*\n * Undefine the following if you don't want to have config files and\n * app-defaults installed in a separate directory (i.e. /etc/X11).\n *\n#define UseSeparateConfDir NO\n */\n\n/*\n * To enable building the glide driver, you need to define\n * HasGlide2 to YES and set the Glide2IncDir variable.\n * HasGlide2 is per default NO.\n *\n#define HasGlide2 YES\n */\n\n/*\n * Set the path to your Glide include files.\n *\n#define Glide2IncDir /usr/include/glide\n */\n\n/*\n * Have glide 3?\n *\n#define HasGlide3 YES\n */\n\n/*\n * Set the path to your Glide 3 include files.\n *\n#define Glide3IncDir /usr/include/glide3\n */\n\n\n\n/*\n * Unless you're a developer you shouldn't need to change anything\n * beyond this point.\n */\n\n/*\n * If you want to enable some developer settings, like more verbose\n * compiler warnings, uncomment this.\n *\n#define XFree86Devel\tYES\n*/\n\n/*\n * The default optimisation flags for GCC 2.x.  -fno-strength-reduce is\n * here to work around a bug in -O2 for GCC 2.x on i386 platforms.\n * If you are using a version that doesn't have this bug, you can\n * uncomment the following line, and remove '-fno-strength-reduce'\n * If you are building binaries for a 486, it may be beneficial to add\n * -m486\n *\n#define DefaultGcc2i386Opt\t-O2 -fno-strength-reduce\n */\n\n/*\n * This allows the GCC warning flags to be set.  The default is shown here.\n *\n#define GccWarningOptions -Wall -Wpointer-arith -Wstrict-prototypes \\\n                          -Wmissing-prototypes -Wmissing-declarations \\\n                          -Wredundant-decls -Wnested-externs\n */\n\n/*\n * Sun Compiler stuff..\n *\n#define HasSunC                         YES\n#define HasSunCplusplus                 YES\n#define CplusplusCompilerMajorVersion   5\n#define CplusplusCompilerMinorVersion   0\n#define CCompilerMajorVersion           5\n#define CCompilerMinorVersion           0\n */\n\n/*\n * Optimized Sun Compiler Build.\n *\n#define DefaultCDebugFlags              -xO4 -xtarget=pentium_pro\n#define OptimizedCDebugFlags            -xO4 -xtarget=pentium_pro\n */\n\n/*\n * Debuggable Sun Compiler Build.\n * Note: This builds _EVERYTHING_ as debuggable\n *\n#define DefaultCDebugFlags              -g -xs\n#define OptimizedCDebugFlags            -g -xs\n */\n\n/*\n * For Linux, this should match the Binutils version you have.  This example\n * is for 2.6.0.7.  See linux.cf for the default setting.\n *\n * This should automatically get set correctly by imake.\n *\n#define LinuxBinUtilsMajorVersion\t26\n */\n\n/*\n * For Linux, these should match the libc version you have.  This example\n * is for libc.5.4.x.  See linux.cf for the default setting.\n *\n * This should automatically get set correctly by imake.\n *\n#define LinuxCLibMajorVersion\t5\n#define LinuxClibMinorVersion\t4\n */\n\n/*\n * If you want to use the GNU malloc library, uncomment this\n *\n#define UseGnuMalloc\t\tYES\n */\n\n/*\n * Set this to whatever is required to access the GNU malloc library.\n * The default is '-lgmalloc' unless is specified in the OS's .cf file.\n *\n#define GnuMallocLibrary\t-L/usr/local/lib -lgmalloc\n */\n\n/*\n * To enable the internal Xserver malloc, uncomment this\n *\n#define UseInternalMalloc\tYES\n */\n\n/*\n * Some Linux releases don't have a libtermcap.  In this case you may need\n * to uncomment the following\n *\n#define TermcapLibrary\t\t-lncurses\n */\n\n/*\n * Build a server that dynamically loads the modules by setting\n * this to YES.  This defaults to YES on most platforms.  A static server\n * can be built by setting this to NO.\n *\n#define DoLoadableServer\tNO\n */\n\n/*\n * Build dlopen() style modules instead of the standard loader modules.\n * Don't enable this unless you have specific development reasons for\n * doing so and understand how to deal with the problems you'll run in to.\n *\n * Enabling this for regular use is NOT supported, and will almost\n * certainly cause you problems.\n *\n#define MakeDllModules\t\tYES\n */\n\n/*\n * Build XAA.  This can be disabled with:\n *\n#define XF86XAA\t\t\tNO\n */\n\n/*\n * Build vgahw.  This can be disabled with:\n *\n#define XF86VgaHw\t\tNO\n */\n\n/*\n * Build xf1bpp.  This can be disabled with:\n *\n#define XF1Bpp\t\t\tNO\n */\n\n/*\n * Build xf4bpp.  This can be disabled with:\n *\n#define XF4Bpp\t\t\tNO\n */\n\n\n/*\n * BSD Console driver support (for FreeBSD and NetBSD).\n *\n * By default, support is included for pccons and pcvt for NetBSD, and\n * pccons, syscons and pcvt for FreeBSD.\n *\n * To change the list of supported drivers, set the following parameter.\n * Possible values are -DPCCONS_SUPPORT, -DSYSCONS_SUPPORT, -DPCVT_SUPPORT.\n * The following example includes support for syscons and pcvt only.\n *\n#define XFree86ConsoleDefines\t-DSYSCONS_SUPPORT -DPCVT_SUPPORT\n */\n\n/*\n * To link the X server with a dynamic version of the Xfont library,\n * uncomment this.\n *\n#define XserverStaticFontLib\tNO\n */\n\n/*\n * To enable binary compatibility with previous versions of the font\n * encoding support, uncomment this.\n *\n#define FontencCompatibility    YES\n */\n\n/*\n * To disable building XInput support, uncomment this\n *\n#define BuildXInputExt\t\tNO\n */\n\n/*\n * Uncomment this for joystick support.\n *\n * Note: Joystick support is broken, so don't enable this.\n *\n#define JoystickSupport YES\n */\n\n/*\n * To disable the ScreenSaver Extension, uncomment this line.\n *\n#define BuildScreenSaverExt\tNO\n */\n\n/*\n * If you don't want to build Xinerama support, uncomment this.\n *\n#define BuildXinerama\t\tNO\n */\n\n/*\n * If you don't want to build support for the GLX extension, uncomment this.\n *\n#define BuildGlxExt             NO\n */\n\n/*\n * If you want to build the xf86rush extension, uncomment this line.\n * This isn't recommended.\n *\n#define BuildXF86RushExt\tYES\n */\n\n/*\n * If you want to build the client library for the xf86rush extension,\n * uncomment this line.  This isn't recommended.\n *\n#define BuildXF86RushLibrary\tNO\n */\n\n/*\n * If you are running NetBSD 0.9C or later, and have the aperture driver\n * installed, uncomment this.\n *\n#define HasNetBSDApertureDriver\tYES\n */\n\n/*\n * If you are running SVR3 and have the mmap driver installed (for linear\n * framebuffer access) uncomment this.\n *\n#define HasSVR3mmapDrv\tYES\n */\n\n/*\n * If you are using an SVR3 (like ISC 4.x) which supports long file names,\n * you can * uncomment this to have manual pages installed under their\n * full names\n *\n#define ExpandManNames\t\tYES\n */\n\n/*\n * For a POSIXized build on Interactive uncomment this\n * Could be used with gcc 'till Version 2.6.3\n * Should be used with gcc 2.7.2.\n *\n#define UsePosix\t\tYES\n */\n\n/*\n * If you want XDMAUTH support (if you have Wraphelp.c), uncomment this.\n *\n#define HasXdmAuth\t\tYES\n */\n\n/*\n * If you have Linux DECnet support, and want to build XFree86 with support\n * for connections over DECnet, uncomment this.\n *\n#define HasDECnet\t\tYES\n */\n\n/*\n * To build static and shared libraries with debugging information, uncomment\n * this. Assumes you have Gcc2.\n * (If you don't have Gcc2, you can use the DebugLib{X11,Xt,Xaw,...} variables\n * to build debugging versions of the libraries separately.)\n *\n#define DebuggableLibraries\tYES\n*/\n\n/*\n * To forceably build static libraries in addition to shared libraries,\n * uncomment this.\n *\n#define ForceNormalLib\t\tYES\n */\n\n/*\n * Uncomment this if your default tools (eg, gcc, ld, as, etc) are\n * not the Linux ELF versions.\n *\n#define LinuxElfDefault\t\tNO\n */\n\n/*\n * To use ELF format shared libraries for supported OSs, uncomment this.\n *\n * For Linux the default setting of this is the same as the setting of\n * LinuxElfDefault.\n *\n * For FreeBSD this should automatically be set correctly by imake.  Only\n * change it here if you need to override the automatic setting.\n *\n#define UseElfFormat\t\tYES\n */\n\n/*\n * For FreeBSD/ELF (FreeBSD 3.0) it is possible to also build and install\n * a.out compatibility libraries.  To enable that, uncomment this.\n *\n#define BuildAoutLibraries\tYES\n */\n\n/*\n * If you have trouble with make bombing out in Xlib, try uncommenting this.\n * You will not get dependencies as a result, but better than nothing.\n *\n#define MakeHashTableBug        YES\n */\n\n/*\n * If you do not want your man pages compress under SVR3 systems that\n * support it, uncomment this.\n *\n#define CompressManPages        NO\n */\n\n/*\n * If you have sgmlfmt (the XFree86 doctools package) and want to build\n * formatted docs from the SGML source, uncomment this.\n *\n#define HasSgmlFmt\t\tYES\n */\n\n/*\n * To disable building some document formats, uncomment some of these.\n *\n#define BuildLinuxDocText\tNO\n#define BuildLinuxDocHtml\tNO\n#define BuildLinuxDocPS\t\tNO\n */\n\n/*\n * To install Japanese versions of the documentation uncomment this.\n * Note: The Japanese documentation consists of a subset of the\n * XFree86 3.1 docs.\n *\n#define InstallJapaneseDocs\tYES\n */\n\n/*\n * To build/install X specs docs, uncomment the following.\n * The SpecsDocDirs setting here is recommended because it covers\n * the docs that XFree86 has changed or added.\n *\n#define BuildSpecsDocs\t\tYES\n#define SpecsDocDirs\t\tCTEXT GL ICCCM X11 Xext Xmu Xv XvMC i18n\n */\n\n/*\n * To build all specs docs, not just those listed in SpecsDocDirs, uncomment\n * the following.\n *\n#define BuildAllSpecsDocs\tYES\n */\n\n/*\n * If your system doesn't support vm86() mode and you have\n * libx86emu set library path here\n *\n#define X86EMU_LIBPATH /usr/local/lib\n */\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-xorg-cf-files-1.0.6-p5ls3mwtg6a7p6ysmdtc7smphutacxsb/spack-src/sun.cf": "XCOMM $XdotOrg: xc/config/cf/sun.cf,v 1.9 2004/08/19 16:28:42 kem Exp $\nXCOMM platform:  $Xorg: sun.cf,v 1.4 2000/08/17 19:41:48 cpqbld Exp $\n\n\n\n\nXCOMM platform:  $XFree86: xc/config/cf/sun.cf,v 3.70 2004/01/13 02:42:51 tsi Exp $\n\n#ifndef OSName\n# define OSName\t\tDefaultOSName\n#endif\n#ifndef OSMajorVersion\n# define OSMajorVersion\tDefaultOSMajorVersion\n#endif\n#ifndef OSMinorVersion\n# define OSMinorVersion\tDefaultOSMinorVersion\n#endif\n#ifndef OSTeenyVersion\n# define OSTeenyVersion\tDefaultOSTeenyVersion\n#endif\nXCOMM operating system:  OSName (OSMajorVersion./**/OSMinorVersion./**/OSTeenyVersion)\n\n/* For various reasons, Sun uses different settings when compiling the\n * X Window System packages included in Solaris than are normally used\n * by most people building the X.Org software releases.   Sun also has\n * two different X server hierarchies in Solaris - Xsun in /usr/openwin\n * and Xorg in /usr/X11.\n *\n * If you want to try to match Sun's settings as closely as possible\n * add this setting to your host.def:\n *  #define BuildLikeSun YES\n *\n * If you're trying to match the openwin directory layout as well, you'll\n * need to also add:\n *  #define ProjectRoot /usr/openwin\n * otherwise it will use /usr/X11.  (Note that these settings match closer\n * to Sun's Xorg delivery in /usr/X11 than the older X11R6.6-based delivery\n * in /usr/openwin though.)\n */\n#ifndef BuildLikeSun\n# define BuildLikeSun NO\n#endif\n\n#if BuildLikeSun\n# ifndef ProjectRoot\n#  define ProjectRoot\t\t/usr/X11\n# endif\n# ifndef DocDir\n#  define DocDir\t\tConcat(ProjectRoot,/share/doc)\n# endif\n# ifndef ManDirectoryRoot\n#  define ManDirectoryRoot\tConcat(ProjectRoot,/share/man)\n# endif\n# ifndef ManSuffix\n#  define ManSuffix\t\t1\n# endif\n# ifndef LibraryCCOptions\n#  if DoSharedLib && defined(SharedLibraryCCOptions)\n#   define LibraryCCOptions SharedLibraryCCOptions ArchLibraryCCOptions\n#  else\n#   define LibraryCCOptions DefaultCCOptions ArchLibraryCCOptions\n#  endif\n# endif\n#endif\n\n/* Flag passed to makestrs in Xt build to control string array names in the\n * libXt headers.   -solarisabinames matches those used in the libXt in\n * Solaris, but not in other OS'es.\n */\n#ifndef SolarisABIFlag\n# if BuildLikeSun\n#  define SolarisABIFlag -solarisabinames\n# else\n#  define SolarisABIFlag /**/\n# endif\n#endif\n\n/*\n * Compiler setup.  This sun.cf file knows what options to use with\n * certain compilers, including Sun C, CenterLine C, and gcc.  It\n * also understands how to set some of the options for various C++\n * compilers, including Sun C++ and CenterLine C++.\n *\n * === C Compiler Setup ==========================================\n *\n * For SunPro C, define HasSunC to YES in site.def.\n * For CenterLine C, define HasCenterLineC to YES in site.def\n * For gcc, gcc2 or gcc3, define HasGcc, HasGcc2 or HasGcc3 to YES in site.def\n * For other compilers, define HasSunC to NO in site.def, then\n *    provide appropriate values for the various compiler related\n *    configuration varibles used here.\n *\n * If you don't tell us which C compiler you have, we assume you have\n * the SunPro C compiler under Solaris 2.x, and the bundled /bin/cc\n * under SunOS 4.1.x\n *\n * === C++ Compiler Setup ==========================================\n *\n * For SunPro C++, define HasSunCplusplus to YES in site.def\n * For CenterLine C++, define HasCenterLineCplusplus to YES in site.def\n * For Gnu g++ 2.6.x, define HasGcc2ForCplusplus to YES in site.def\n * For other compilers, define HasCplusplus to YES in site.def, and\n *    check to see if you need to provide values for CplusplusOptions\n *    and/or DefaultCplusplusOptions.\n *\n * In any case, you may also need to set CplusplusDependIncludes.\n *\n * If you say you have the SunPro C++ compiler, we assume you have\n * version 3.0.x of the compiler.  If you have version 4.0.x instead,\n * define CplusplusCompilerMajorVersion as 4 in site.def.\n *\n */\n\n#ifndef HasGcc3\n#define HasGcc3 NO\n#endif\n#ifndef HasGcc2\n#define HasGcc2 HasGcc3\n#endif\n#ifndef HasGcc\n#define HasGcc HasGcc2\n#endif\n\n#ifndef HasSunC\n# if HasCenterLineC || HasGcc || HasGcc2 || HasGcc3 || (OSMajorVersion < 5)\n#  define HasSunC NO\n# else\n#  define HasSunC YES\n# endif\n#endif\n\n#if HasSunC\n# ifndef CCompilerMajorVersion\n#  define CCompilerMajorVersion DefaultSunProCCompilerMajorVersion\n# endif\n# ifndef CCompilerMinorVersion\n#  define CCompilerMinorVersion DefaultSunProCCompilerMinorVersion\n# endif\nXCOMM SunPro C CCompilerMajorVersion./**/CCompilerMinorVersion\n\n/* Choose some reasonable default optimizer flags based on compiler &\n   OS versions */\n# ifndef OptimizedCDebugFlags\n#  if (CCompilerMajorVersion > 5) || \\\n\t(CCompilerMajorVersion == 5 && CCompilerMinorVersion > 2)\n#   define OptimizedCDebugFlags -xO4 -xbuiltin=%all -xlibmil -xstrconst ArchOptimizedFlags\n#  else\n#   define OptimizedCDebugFlags -xO4 -xstrconst ArchOptimizedFlags\n#  endif\n# endif\n# ifndef ArchOptimizedFlags\n#  if OSMajorVersion == 5\n#   if defined(SparcArchitecture) && !defined(Sparc64Architecture)\n#    if OSMinorVersion > 9 /* Solaris 10 and later only run on UltraSPARC's */\n#     define ArchOptimizedFlags -xarch=v8plus\n#    else\n#     define ArchOptimizedFlags -xarch=v8\n#    endif\n#   elif defined(i386Architecture) || defined(AMD64Architecture)\n#    if (CCompilerMajorVersion > 5) || \\\n\t(CCompilerMajorVersion == 5 && CCompilerMinorVersion >= 7)\n/* -xregs=no%frameptr is required on x86 when compiling at -xO4 or higher to\n * avoid losing stack frame pointers so you can't get stack traces or debug.\n * This may lose a small bit of performance, so you can override by adding\n * #define FramePtrFlags -xregs=frameptr if you care about performance more\n * than debuggability.\n */\n#     ifndef FramePtrFlags\n#      define FramePtrFlags -xregs=no%frameptr\n#     endif\n#    endif\n#    ifndef FramePtrFlags\n#     define FramePtrFlags /* */\n#    endif\n#    if defined(i386Architecture) && (OSMinorVersion > 8)\n       /* Solaris 9 and later require Pentium or better */\n#      define ArchOptimizedFlags -xpentium FramePtrFlags\n#    else\n#     define ArchOptimizedFlags FramePtrFlags\n#    endif\n#   endif\n#  endif\n#  ifndef ArchOptimizedFlags\n#   define ArchOptimizedFlags /**/\n#  endif\n# endif\n# ifndef DefaultCDebugFlags\n#  define DefaultCDebugFlags OptimizedCDebugFlags\n# endif\n# ifndef SharedLibraryLdCmd\n#  define SharedLibraryLdCmd $(CC)\n# endif\n/* Flags for lint version included with Sun C compilers */\n# if OSMajorVersion >= 5\n#  ifndef LintLibFlag\n#   define LintLibFlag -y -o\n#  endif\n#  ifndef LintOpts\n#   define LintOpts -b -h -u -erroff=E_INDISTING_FROM_TRUNC2 $(LINTSECFLAG) ExtraLibraries MathLibrary -lc\n#  endif\n#  ifndef LintSecFlag\n#   if (CCompilerMajorVersion > 5) || \\\n       (CCompilerMajorVersion == 5 && CCompilerMinorVersion >= 6)\n#    define LintSecFlag -errsecurity=standard\n#   else\n#    define LintSecFlag /**/\n#   endif\n#  endif\n      LINTSECFLAG = LintSecFlag\n#  ifndef LintLibReferences\n#   define LintLibReferences(varname,libname,libsource)                    @@\\\n       Concat(LINT,varname) = _UseCat(-L $(LINTLIBDIR) -l, -L libsource -l,libname)\n#  endif\n\n# endif /* Lint Flags for Solaris */\n\n#endif /* HasSunC */\n\n#ifndef ArchLibraryCCOptions\n# if HasSunC && defined(SparcArchitecture) && CCompilerMajorVersion > 3\n#  define ArchLibraryCCOptions -xregs=no%appl\n# else\n#  define ArchLibraryCCOptions\n# endif\n#endif /* ArchLibraryCCOptions */\n\n/* we used to have this here :\n *\n * #if HasSunC\n * # ifndef CCompilerMajorVersion\n * #  define CCompilerMajorVersion 3\n * #  define DefaultCDebugFlags\t-xO3\n * #  define OptimizedCDebugFlags\t-xO3\n * # endif\n * #endif\n */\n\n#ifndef HasSunCplusplus\n# define HasSunCplusplus HasSunC\t/* ??? */\n#endif\n#if HasSunCplusplus\n# ifndef HasCplusplus\n#  define HasCplusplus YES\n#  define OptimizedCplusplusDebugFlags\t-xO4 -xbuiltin=%all -xlibmil\n# endif\n# ifndef CplusplusCompilerMajorVersion\n#  ifdef DefaultSunProCplusplusCompilerMajorVersion\n#   define CplusplusCompilerMajorVersion DefaultSunProCplusplusCompilerMajorVersion\n#  else\n#   define CplusplusCompilerMajorVersion 3\n#  endif\n# endif\n# ifndef CplusplusCompilerMinorVersion\n#  ifdef DefaultSunProCplusplusCompilerMinorVersion\n#   define CplusplusCompilerMinorVersion DefaultSunProCplusplusCompilerMinorVersion\n#  else\n#   define CplusplusCompilerMinorVersion 0\n#  endif\n# endif\n# ifndef CplusplusLibC\n#  if CplusplusCompilerMajorVersion >= 5\n#   define CplusplusLibC -norunpath -lCrun\n#  endif\n# endif\nXCOMM SunPro C++ CplusplusCompilerMajorVersion./**/CplusplusCompilerMinorVersion\n#endif\n\n/* we used to have this here :\n *\n * # ifndef CplusplusCompilerMajorVersion\n * #  define CplusplusCompilerMajorVersion\t4\n * # endif\n */\n\n#if HasCenterLineC\n# ifndef CcCmd\n#  define CcCmd clcc\n# endif\n#endif\n\n#if HasCenterLineCplusplus\n# ifndef HasCplusplus\n#  define HasCplusplus YES\n# endif\n# ifndef DefaultCplusplusOptions\n#  define DefaultCplusplusOptions -Xa\n# endif\n# ifndef CplusplusOptions\n#  define CplusplusOptions -Xa\n# endif\n#endif\n\n#if OSMajorVersion < 4 || (OSMajorVersion == 4 && OSMinorVersion < 1)\n/* We do not guarantee this will work */\n# define BootstrapCFlags\t-DNOSTDHDRS\n# define StandardDefines\t-DNOSTDHDRS\n# define XawI18nDefines\t\t-DUSE_XWCHAR_STRING -DUSE_XMBTOWC\n#endif\n\n#if OSMajorVersion == 4\n# if OSMinorVersion == 1\n#  define HasPoll\t\tYES\n# endif\n# if OSMinorVersion > 1 || (OSMinorVersion == 1 && OSTeenyVersion > 1)\n/* You ALSO need this if you have Sun ld patch 100170-06 or later to 4.1.1 */\n#  define SunPost411FCSLd\tYES\n# endif\n#endif\n\n/* The Xsun server was not building for SunOS 5.7 due to\n   includes of <sys/cg2reg.h>.\n*/\n#if OSMajorVersion < 5\n# define IncludeCG2HeaderDefine\t-DINCLUDE_CG2_HEADER\n#else\n# define IncludeCG2HeaderDefine /**/\n#endif\n\n#if defined(i386Architecture) || defined(AMD64Architecture)\n# if (OSMajorVersion > 5) || ((OSMajorVersion == 5) && (OSMinorVersion >= 8))\n#  define OSServerExtraDefines\t-D__SOL8__\n# endif\n#endif\n\n#if !HasGcc\n# if HasSunC\n#  if defined(AMD64Architecture)\n#   define AsmArch amd64\n#   define AsmFlags -xarch=amd64\n#  elif defined(i386Architecture)\n#   define AsmArch ia32\n#   define AsmFlags /**/\n#  elif defined(Sparc64Architecture)\n#   define AsmArch sparcv8plus\n#   define AsmFlags -xarch=v9\n#  elif defined(SparcArchitecture)\n#   define AsmArch sparcv8plus\n#   define AsmFlags -xarch=v8plus\n#  endif\n#  ifndef CompilerServerExtraDefines\n#   define CompilerServerExtraDefines $(SERVERSRC)/hw/xfree86/os-support/sunos/AsmArch.il\n#  endif\n# endif\n#endif\n\n#ifndef CompilerServerExtraDefines\n# define CompilerServerExtraDefines /**/\n#endif\n\n#ifndef OSServerExtraDefines\n# define OSServerExtraDefines\t/**/\n#endif\n\n#ifndef ArchServerExtraDefines\n# if defined(Sparc64Architecture) || defined(AMD64Architecture)\n#  define ArchServerExtraDefines -D_XSERVER64\n# else\n#  define ArchServerExtraDefines /**/\n# endif\n#endif\n\n#define ServerOSDefines\t\tXFree86ServerOSDefines IncludeCG2HeaderDefine\n#define ServerExtraDefines\tAllocateLocalDefines XFree86ServerDefines \\\n\t\t\t\tCompilerServerExtraDefines \\\n\t\t\t\tOSServerExtraDefines ArchServerExtraDefines\n\n#ifndef HasPerl\n/* Solaris 8 comes with perl.  Earlier versions don't. */\n# if (OSMajorVersion == 5) && (OSMinorVersion >= 8)\n#  define HasPerl\t\tYES\n# else\n#  define HasPerl\t\tNO\n# endif\n#endif\n\n#ifndef XkbServerDefines\n# if BuildLikeSun\n#  define XkbServerDefines  -DXKB_ALWAYS_USES_SOFT_REPEAT \\\n\t-DXKM_OUTPUT_DIR='\"/var/run/xkb/\"' -DXKM_OUTPUT_DIR_MODE=0775 \\\n\t-DMAKE_XKM_OUTPUT_DIR\n# else\n#  define XkbServerDefines  -DXKB_ALWAYS_USES_SOFT_REPEAT\n# endif\n#endif\n\n#if OSMajorVersion > 4\n# define ConnectionFlags\t\t-DTCPCONN -DUNIXCONN -DLOCALCONN\n# if HasSunC\n#  ifdef DefaultSunProCCompilerDir\n#   ifndef  CcCmd\n#    define CcCmd\t\tDefaultSunProCCompilerDir/cc\n#   endif\n#  endif\n#  ifdef DefaultSunProCplusplusCompilerDir\n#   ifndef  CplusplusCmd\n#    define CplusplusCmd\tDefaultSunProCplusplusCompilerDir/CC\n#   endif\n#   ifndef  CplusplusFilt\n#    define CplusplusFilt\tDefaultSunProCplusplusCompilerDir/c++filt\n#   endif\n#   ifndef  CplusplusWhatdir\n#    define CplusplusWhatdir\tDefaultSunProCplusplusCompilerDir/whatdir\n#   endif\n#  else /* DefaultSunProCplusplusCompilerDir not defined */\n#   ifndef  CplusplusWhatdir\n#    define CplusplusWhatdir\twhatdir\n#   endif\n#  endif /* DefaultSunProCplusplusCompilerDir */\n#  ifndef  CplusplusDependIncludes\n#   if CplusplusCompilerMajorVersion > 3\n#    define CplusplusDependIncludes\t-I`CplusplusWhatdir CC`/../include/CC\n#   elif CplusplusCompilerMajorVersion > 2\n#    define CplusplusDependIncludes\t-I/opt/SUNWspro/SC3.0/include/CC\n#   else\n#    define CplusplusDependIncludes\t-I/opt/SUNWspro/SC2.0.1/include/CC\n#   endif\n#  endif\n# endif /* HasSunC */\n\n# if HasSunC && (CCompilerMajorVersion < 3)\n#  define BootstrapCFlags\t-DSVR4\n# else\n#  define BootstrapCFlags\t/* none needed */\n# endif\n# ifndef XawI18nDefines\n#  if OSMinorVersion < 4\n#   define XawI18nDefines    -DHAS_WCTYPE_H -DHAS_ISW_FUNCS\n#  else\n#   define XawI18nDefines    -DHAS_WCHAR_H -DHAS_ISW_FUNCS\n#  endif\n# endif\n# if OSMinorVersion > 10\n#  define InstallCmd\t    /usr/gnu/bin/install\n# elif OSMinorVersion > 3\n#  define InstallCmd\t    /usr/ucb/install\n# endif\n#ifndef LargefileDefines\n# if (OSMajorVersion > 5) || (OSMajorVersion == 5 && OSMinorVersion >= 6)\n#  define LargefileDefines -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\n# else\n#  define LargefileDefines /* */\n# endif\n#endif\n# ifdef AMD64Architecture\n#  define StandardDefines\t-Dsun -DSVR4 -D__EXTENSIONS__ -D__amd64\n#  define ToolkitStringsABIOptions\t-intelabi SolarisABIFlag\n# elif defined(i386Architecture)\n#  if (OSMajorVersion < 4) || ((OSMajorVersion == 5) && (OSMinorVersion <= 5))\n#   define StandardDefines\t-Dsun -Di386 -DSVR4 -D__EXTENSIONS__ -D__i386 \\\n\t\t\t\t-D__SOL64__ LargefileDefines\n#  else\n#   define StandardDefines\t-Dsun -Di386 -DSVR4 -D__EXTENSIONS__ -D__i386 \\\n                                LargefileDefines\n#  endif\n#  define ToolkitStringsABIOptions\t-intelabi SolarisABIFlag\n# else\n#  define StandardDefines\t  -Dsun -Dsparc -DSVR4 -D__EXTENSIONS__ LargefileDefines\n#  define ToolkitStringsABIOptions\t-sparcabi SolarisABIFlag\n# endif\n/* Socket support was in separate libraries before 5.12, then merged to libc */\n# if (OSMajorVersion == 5) && (OSMinorVersion < 12)\n#  define ExtraLibraries -lsocket -lnsl\n# else\n#  define ExtraLibraries /**/\n# endif\n# define HasWeakSymbols\t  YES\n# if OSMinorVersion > 1\n#  ifndef ThreadedX\n#   define ThreadedX\t  YES\n#  endif\n#  define MTSafeAPIDefines\t-DXUSE_MTSAFE_API -DXUSE_NETDB_R_API\n/* Thread support was in separate library before 5.10, then merged to libc */\n#  if (OSMajorVersion == 5) && (OSMinorVersion < 10)\n#   if HasSunC && CCompilerMajorVersion > 2\n#    define ThreadsCompileFlags -mt\n#   else\n#    define ThreadsLibraries -lthread\n#   endif\n#   if HasSunCplusplus && CplusplusCompilerMajorVersion > 3\n#    define ThreadsCplusplusCompileFlags -mt\n#   else\n#    define ThreadsCplusplusLibraries -lthread\n#   endif\n#   define SystemMTDefines -D_REENTRANT\n#  else\n   /* Solaris 10 & later */\n#   define SystemMTDefines -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS\n#  endif\n#  define CplusplusSystemMTDefines SystemMTDefines\n# endif \t\t/* OSMinorVersion > 1 */\n# ifndef UseExportLists\n#  if (OSMinorVersion > 4) && !HasGcc2\n#   define UseExportLists YES\n#  else\n#   define UseExportLists NO\n#  endif\n# endif\n# if OSMinorVersion > 5 /* Solaris 2.6 and later */\n#  define HasSnprintf YES\n# endif\n# if OSMinorVersion > 7 /* Solaris 8 and later */\n#  define HasStrlcat\tYES\n#  define HasStrcasecmp\tYES\n#  define HasVarRun\tYES\n# endif\n# if OSMinorVersion > 9 /* Solaris 10 and later */\n#  define HasSetenv\tYES\n#  define HasGetpeerucred YES\n#  define HasGetoptLong YES\n#  define DlLibrary\t-lc  /* dlopen() is in libc in Solaris 10 */\n# endif\n# define HasVFork\tNO\n# define HasDlopen\tYES\n# define InstallXloadSetGID\tNO /* libkstat doesn't require gid kmem */\n# define InstKmemFlags\t-g sys -m 2711\n# define ShLibIncludeFile <sunLib.tmpl>\n# define LinkerRuntimeLibraryPathFlag(path) Concat(-R,path)\n# define RpathLoadFlags LinkerRuntimeLibraryPathFlag($(USRLIBDIRPATH))\n/*\n * Set flags for position independent code before including sv4Lib.rules\n * if the compiler in use doesn't use standard SVR4 flags\n */\n# if HasSunC || HasCenterLineC\n#  define PositionIndependentCFlags -Kpic\n#  define LargePositionIndependentCFlags -KPIC\n#  ifdef Sparc64Architecture\n#   define LargePICTable YES\n#  endif\n# endif\n# if HasSunCplusplus || HasCenterLineCplusplus\n#  define PositionIndependentCplusplusFlags -pic\n#  define LargePositionIndependentCplusplusFlags -PIC\n# endif\n/* As is done in sco5.cf, we lie and say Solaris has NCURSES, since\n * the system curses is close enough for xorgcfg's purposes.  xorgcfg\n * should not depend on the NCURSES package but rather on a \"capable curses\",\n * of which NCURSES is just one.\n */\n#define\tHasNCurses\t\tYES\n#define NCursesLibName\t\t-lcurses\n#else /* not OSMajorVersion > 4 */\n#define InstKmemFlags\t  -g kmem -m 2711\n#include <sunLib.rules>\n#endif /* OSMajorVersion > 4 (else) */\n\n/* Solaris 10 includes FreeType already.  It's also available in GNOME 2.0 for\n * Solaris 8 & 9, and in Solaris 9 4/03 and later, but there's no easy way to\n * detect that in imake, so users of those releases who want to use the\n * installed FreeType instead of the one in this tree should copy the following\n * two settings to their host.def.  Those who want to use the in-tree copy\n * regardless of OS version should add \"#define HasFreetype2 NO\" to host.def.\n */\n#ifndef HasFreetype2\n# if (OSMajorVersion > 5) || ((OSMajorVersion == 5) && (OSMinorVersion >= 10))\n#  define HasFreetype2 YES\n#  ifndef Freetype2Dir\n#   define Freetype2Dir /usr/sfw\n#  endif\n# else\n#  define HasFreetype2 NO\n# endif\n#endif\n\n#ifndef HasExpat\n# if (OSMajorVersion > 5) || ((OSMajorVersion == 5) && (OSMinorVersion >= 10))\n#  define HasExpat YES\n#  ifndef ExpatDir\n#   define ExpatDir /usr/sfw\n#  endif\n# else\n#  define HasExpat NO\n# endif\n#endif\n\n/* Solaris 10 includes fontconfig, but not the fcprivate.h header needed by\n * Xft1 library.\n */\n#ifndef HasFontconfig\n# define HasFontconfig NO\n#endif\n\n/* libpng was in /usr/sfw/lib on Solaris 9, moved to /usr/lib in Solaris 10 */\n#ifndef HasLibpng\n# if (OSMajorVersion > 5) || ((OSMajorVersion == 5) && (OSMinorVersion >= 9))\n#  define HasLibpng YES\n#  if !defined(LibpngDir) && ((OSMajorVersion == 5) && (OSMinorVersion == 9))\n#   define LibpngDir /usr/sfw\n#  endif\n# else\n#  define HasLibpng NO\n# endif\n#endif\n\n#ifndef HasZlib\n# if (OSMajorVersion > 5) || ((OSMajorVersion == 5) && (OSMinorVersion >= 8))\n#  define HasZlib YES\n# else\n#  define HasZlib NO\n# endif\n#endif\n\n#ifndef TroffCmd\n# if !(HasGroff)\n#  define TroffCmd troff -Tpost\n# endif\n#endif\n\n#define BuildLibPathVar\t  LD_LIBRARY_PATH\n#define HasNdbm\t\t  YES\n#define HasShm\t\t  YES\n#define HasSecureRPC\t  YES\n#define SetTtyGroup\t  YES\n#define HasPutenv\t  YES\n#define HasMkstemp        YES\n#if (OSMajorVersion > 5) || ((OSMajorVersion == 5) && (OSMinorVersion >= 8))\n#define HasDevRandom\t  YES\t/* /dev/random is in Solaris 8 patches \t*/\n#define PollDevRandom\t  YES\t/* /dev/random is poll()able on Solaris */\n#endif\n#if (OSMajorVersion > 5) || ((OSMajorVersion == 5) && (OSMinorVersion >= 9))\n# define HasIssetugid\t  YES\n#endif\n#if defined(Sun3Architecture) || defined(SparcArchitecture) || defined(Sparc64Architecture)\n# ifndef Xsun24Server\n#  define Xsun24Server\t  NO\t\t/* color, mono, multiple depths */\n# endif\n# ifndef XsunServer\n#  define XsunServer\t  NO\t\t/* color and mono, 8 bit only */\n# endif\n# ifndef XsunMonoServer\n#  define XsunMonoServer\t  NO\t\t/* monochrome only */\n# endif\n# ifndef XorgServer\n#  define XorgServer\t(!(Xsun24Server || XsunServer || XsunMonoServer))\n# endif\n# undef BuildXF86DRI\n# define BuildXF86DRI     NO\n# if (OSMajorVersion > 4)\n#  if !defined(AsOutputArchSize) || \\\n      ((AsOutputArchSize != 32) && (AsOutputArchSize != 64))\n#   undef AsOutputArchSize\n#   define AsOutputArchSize\t32\n#  endif\n#  ifndef AsVISOption\n#   if AsOutputArchSize == 32\n#    ifdef UseGas\n#     define AsVISOption\t\t-Av8plusa\n#    else\n#     define AsVISOption\t\t-xarch=v8plusa\n#    endif\n#   else\n#    ifdef UseGas\n#     define AsVISOption\t\t-Av9a\n#    else\n#     define AsVISOption\t\t-xarch=v9a\n#    endif\n#   endif\n#  endif\n# endif\n#endif /* SPARC or Sun3/M68k */\n\n#if OSMajorVersion >= 4\n#define HasUsableFileMap YES\n#endif\n\n#ifndef UseDeprecatedKeyboardDriver\n#define UseDeprecatedKeyboardDriver YES\n#endif\n\n#if HasGcc\n# if OSMajorVersion > 4\n#  ifndef DefaultCCOptions\n#   ifdef UseInstalled\n#    define DefaultCCOptions -DNO_ASM\n#   elif OSMinorVersion > 6\n#    define DefaultCCOptions -DNO_ASM GccWarningOptions\n#   elif OSMinorVersion > 3\n#    define DefaultCCOptions -DNO_ASM GccWarningOptions -ansi -pedantic\n#   else\n#    define DefaultCCOptions -DNO_ASM\n#   endif\n#  endif\n# endif\n# if HasGcc2\n#  ifndef CcCmd\n#   define CcCmd gcc\n#  endif\n#  ifndef AsCmd\n#   define AsCmd CcCmd -c -x assembler\n#  endif\n#  ifndef OptimizedCDebugFlags\n#   ifdef i386Architecture\n#    define OptimizedCDebugFlags DefaultGcc2i386Opt\n#   elif defined(AMD64Architecture)\n#    define OptimizedCDebugFlags DefaultGcc2AMD64Opt\n#   else\n#    define OptimizedCDebugFlags -O2\n#   endif\n#  endif\n#  if !defined(SharedLibraryLoadFlags) && !defined(SharedLibraryLdCmd)\n#   if OSMajorVersion == 5 && OSMinorVersion > 6 && defined(i386Architecture)\n    /* This is to work around what appears to be a PIC bug in some gcc/egcs\n       versions that shows up with the Solaris 7/x86 <ctype.h>. */\n#    define SharedLibraryLdCmd $(LD)\n#    define SharedLibraryLoadFlags -G -z textwarn\n#   else\n#    define SharedLibraryLdCmd $(CC)\n#    define SharedLibraryLoadFlags -shared -z text\n#   endif\n#  endif\n# else\n#  define SharedLibraryCcCmd cc\n#  define ExtraLoadFlags -B/usr/bin/\n#  define AllocateLocalDefines /**/\n\n.c.o:\n\tClearmakeOSName\t$(CC) -c $(CFLAGS) $*.c\n\n# endif /* HasGcc2 (else) */\n\n#else /* not HasGcc */\n\n# define AllocateLocalDefines -DINCLUDE_ALLOCA_H\n\n/* Set up compiler-dependent options for Sun C */\n/*\n * To build 64-bit binaries define Sparc64Architecture or AMD64Architecture\n * in your site.def or host.def file.\n */\n# if HasSunC\n#  ifdef Sun3Architecture\n#   ifndef DefaultCCOptions\n#    define DefaultCCOptions -f68881 -pipe\n#   endif\n#  else\t/* not defined(Sun3Architecture) */\n#   if OSMajorVersion < 5\n#    ifndef DefaultCCOptions\n#     define DefaultCCOptions -pipe\n#    endif\n#   else /* OSMajorVersion >= 5*/\n#    ifndef DefaultXArchOptions\n#     if ((CCompilerMajorVersion > 5) || \\\n          (CCompilerMajorVersion == 5) && (CCompilerMinorVersion >= 9))\n      /* Sun Studio 12.0 (cc 5.9) or later */\n#      if (defined(Sparc64Architecture) || defined(AMD64Architecture))\n#\tdefine DefaultXArchOptions -m64\n#      else\n#\tdefine DefaultXArchOptions -m32\n#      endif\n#     else\n#      ifdef Sparc64Architecture\n#\tdefine DefaultXArchOptions -xarch=v9\n#      elif defined(AMD64Architecture)\n#\tdefine DefaultXArchOptions -xarch=generic64\n#      else\n#       define DefaultXArchOptions /* */\n#      endif\n#     endif\n#     ifndef DefaultCCOptions\n#      define DefaultCCOptions -Xa -v DefaultXArchOptions -z lazyload -z combreloc -xstrconst -xildoff\n#     endif\n#     ifndef DefaultCplusplusOptions\n#      define DefaultCplusplusOptions DefaultXArchOptions -z lazyload -z combreloc -xildoff\n#     endif\n#     ifndef SharedLibraryLoadFlags\n#      define SharedLibraryLoadFlags -G DefaultXArchOptions -z text $(EXTRA_LOAD_FLAGS)\n#     endif\n#    endif\n#   endif\n#  endif\n# endif\n\n/* Set compiler-dependent options for CenterLine C */\n\n# if HasCenterLineC\n#  ifndef DefaultCCOptions\n#   define DefaultCCOptions -Xt -w1 -DANSICPP -U__HIGHC__\n#  endif\n#  ifndef NeedConstPrototypes\n#   define NeedConstPrototypes YES\n#  endif\n#  ifndef NeedNestedPrototypes\n#   define NeedNestedPrototypes YES\n#  endif\n#  ifndef NeedVarargsPrototypes\n#   define NeedVarargsPrototypes YES\n#  endif\n# endif\n\n\n#endif /* HasGcc (else) */\n\n#if OSMajorVersion < 5\n# define SharedAllocateLocalDefines -DINCLUDE_ALLOCA_H\n# define LibraryCCOptions /* don't want special floating point */\n#else /* OSMajorVersion >= 5, i.e. Solaris 2.0 & later */\n/* Only load libraries when needed on Solaris 7 & later */\n# if OSMinorVersion >= 7\n#  define LazyLoadFlag -z lazyload -z combreloc\n# else\n#  define LazyLoadFlag /* */\n# endif\n/* Link with extra mapfiles for some performance & security enhancements */\n#ifndef MapfileFlag\n# if HasSunC\n#  define MapfileFlag -M\n# else\n#  define MapfileFlag -Wl,-M,\n# endif\n#endif\n#ifndef Mapfile_BssAlign\n# if OSMinorVersion >= 9\n#  define Mapfile_BssAlign $(MAPFILEFLAG)/usr/lib/ld/map.bssalign\n# else\n#  define Mapfile_BssAlign /**/\n# endif\n#endif\n#ifndef Mapfile_PageAlign\n# if OSMinorVersion >= 10\n#  define Mapfile_PageAlign $(MAPFILEFLAG)/usr/lib/ld/map.pagealign\n# else\n#  define Mapfile_PageAlign /**/\n# endif\n#endif\n#ifndef Mapfile_NoExStack\n# if OSMinorVersion >= 9\n#  define Mapfile_NoExStack $(MAPFILEFLAG)/usr/lib/ld/map.noexstk\n# else\n#  define Mapfile_NoExStack /**/\n# endif\n#endif\n#ifndef Mapfile_NoExData\n# if defined(SparcArchitecture)\n/* SPARC archictecture requires PLT section in .data be executable, so\n   we can only make .bss, not all of .data no-exec on SPARC */\n#   define Mapfile_NoExData /**/\n# else\n#  if OSMinorVersion >= 10\n#   define Mapfile_NoExData $(MAPFILEFLAG)/usr/lib/ld/map.noexdata\n#  else\n#   define Mapfile_NoExData /**/\n#  endif\n# endif\n#endif\n       MAPFILEFLAG = MapfileFlag\n  MAPFILES_FOR_ALL = Mapfile_PageAlign Mapfile_NoExData\nMAPFILES_FOR_PROGS = Mapfile_BssAlign Mapfile_NoExStack\n/* ExtraLoadFlags apply to all binaries - programs & libraries */\n# ifndef ExtraLoadFlags\n#  define ExtraLoadFlags LazyLoadFlag $(MAPFILES_FOR_ALL)\n# endif\n/* ExtraLoadOptions only apply to programs */\n# ifndef ExtraLoadOptions\n#  define ExtraLoadOptions -B direct $(MAPFILES_FOR_PROGS)\n# endif\n#endif /* OSMajorVersion < 5 */\n\n/* 64-bit build support */\n#ifndef Solaris64bitSubdir\n# ifdef Sparc64Architecture\n#  define Solaris64bitSubdir\tsparcv9\n# elif defined(AMD64Architecture)\n#  define Solaris64bitSubdir\tamd64\n# endif\n#endif\n\n#ifdef Solaris64bitSubdir\n# define LibDirName Concat3(lib,/,Solaris64bitSubdir)\n#endif\n\n#if ((OSMajorVersion == 5) && (OSMinorVersion <= 11))\n/* System V man page sections */\n# ifndef FileManSuffix\n#  define FileManSuffix\t4\t\t/* use just one tab or cpp will die */\n# endif\n# ifndef MiscManSuffix\n#  define MiscManSuffix\t5\t\t/* use just one tab or cpp will die */\n# endif\n# ifndef DriverManSuffix\n#  define DriverManSuffix\t7\t/* use just one tab or cpp will die */\n# endif\n# ifndef AdminManSuffix\n#  define AdminManSuffix\t1m\t/* use just one tab or cpp will die */\n# endif\n#else\n/* Bell Labs / BSD man page sections */\n# ifndef FileManSuffix\n#  define FileManSuffix\t5\t\t/* use just one tab or cpp will die */\n# endif\n# ifndef MiscManSuffix\n#  define MiscManSuffix\t7\t\t/* use just one tab or cpp will die */\n# endif\n# ifndef DriverManSuffix\n#  define DriverManSuffix\t4\t/* use just one tab or cpp will die */\n# endif\n# ifndef AdminManSuffix\n#  define AdminManSuffix\t8\t/* use just one tab or cpp will die */\n# endif\n#endif\n\n#if OSMajorVersion > 4\n# include <svr4.cf>\n#endif\n\n#ifndef ManKeywordsTarget\n# define ManKeywordsTarget(manpath)\t\t\t\t\t@@\\\nman_keywords::\t\t\t\t\t\t\t\t@@\\\n\tcatman -M $(DESTDIR)manpath -w\n#endif\n\n#if !defined(UsePamLibrary)\n# if (OSMajorVersion > 5) || ((OSMajorVersion == 5) && (OSMinorVersion >= 4))\n#  define UsePamLibrary\t\tYES\n# endif\n#endif\n\n/* PAM appeared in SunOS 5.6 */\n#if !defined(HasPam)\n# if (OSMajorVersion > 5) || (OSMajorVersion == 5 && OSMinorVersion >= 6)\n#  define HasPam\t\tYES\n# endif\n#endif\n\n#ifndef PamLibraries\n#define PamLibraries\t\t-lpam\n#endif\n\n#ifndef HasMotif\n/* Solaris's Motif depends on Solaris libX11 and won't work with libX11 built\n * from this tree, so only use it when using libX11 from outside the tree.\n */\n# define HasMotif (defined(UseInstalled) || UseInstalledX11)\n# define MotifDir /usr/dt\n#endif /* !HasMotif */\n#ifndef HasMotif2\n/* Solaris's Motif2 version is broken and misses XmPrintShell\n * (see http://xprint.mozdev.org/bugs/show_bug.cgi?id=1366) */\n# define HasMotif2 NO\n#endif /* !HasMotif2 */\n\n#define MotifDefines\t\t\t\\\n\t-DNO_ISDIR -DNO_REGCOMP -DNO_ALLOCA -DBOGUS_MB_MAX -DNO_CONST\n#define PamUnixDefines\t\t-DPAM_NIS\n#define TtLargePICTable\t\tYES\n#define DtSvcDefines\t\t-DXK_MISCELLANY -DMULTIBYTE -DNO_REGCOMP\n#define DtSearchDefines\t\t-DI18N_MSG DtSvcDefines\n#define DtWidgetDefines\t\tDtSearchDefines\n#define DtPrintDefines\t\tDtSearchDefines\n\n#define baseDtMailDefines\t\\\n\t-DSunOS=OSMajorVersion\\#\\#OSMinorVersion -DMMAP_NORESERVE -DSPRO_V2\n#if !defined(i386Architecture) && !defined(AMD64Architecture)\n# define DtMailDefines\t\tbaseDtMailDefines\n#else\n# define DtMailDefines\t\t-DBIG_ENDIAN baseDtMailDefines\n#endif\n\n#define ArchitectureDefines\t-DSUN_ARCHITECTURE\n\n#define TtClientExtraLibs\tExtraLibraries -ldl -lintl\n\n#define ExportListGenSource\telistgen.sun\n#define ShlibExportListOpt(filename)\t-M filename\n\n#define CdeProjectDefines \\\n\t-DMULTIBYTE -DNLS16 -DMESSAGE_CAT -D_XOPEN_VERSION=4 \\\n\t-D_XOPEN_SOURCE -D__EXTENSIONS__ \\\n\t-DOSMAJORVERSION=OSMajorVersion -DOSMINORVERSION=OSMinorVersion\n\n\n/*\n * Turn off HTML manpages like we do under NetBSD.\n */\n#ifndef\tBuildHtmlManPages\n#define\tBuildHtmlManPages\tNO\n#endif\n\n/*\n * Turn off seperate configuration directories.\n */\n#ifndef\tUseSeparateConfDir\n#define\tUseSeparateConfDir\tNO\n#endif\n\n/* Hackery for building modules as Solaris shared objects with dependencies */\n#if MakeDllModules && DoLoadableServer\n\n/* If you change this, you will need to change find-deps.pl to match */\n#define DlModuleDependencyName(module) Concat(module,_deps)\n\n#define DlModuleTarget(module,deplist,modlist)                          @@\\\nDepDynamicModuleTarget(module,deplist DlModuleDependencyName(module),modlist LazyLoadFlag `cat DlModuleDependencyName(module)`) @@\\\n\t\t\t\t\t\t\t\t\t@@\\\nDlModuleDependencyName(module):\t\t\t\t\t\t@@\\\n\ttouch $@\t\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nclean::                                                                 @@\\\n        RemoveFile(DlModuleDependencyName(module))\n\n#define ObjectModuleTarget(module,objects)\t\t\t\t@@\\\nDlModuleTarget(Concat(module,_drv.so), objects, objects)\n\n#define LibraryModuleTarget(module,objects)\t\t\t\t@@\\\nNormalLibraryTarget(module, objects)\t\t\t\t\t@@\\\nDlModuleTarget(Concat3(lib,module,.so), objects, objects)\n\n#define DepLibraryModuleTarget(module,deplist,objects)\t\t\t@@\\\nNormalDepLibraryTarget(module, deplist, objects)\t\t\t@@\\\nDlModuleTarget(Concat3(lib,module,.so), deplist, objects)\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-xorg-cf-files-1.0.6-p5ls3mwtg6a7p6ysmdtc7smphutacxsb/spack-src/xorgsite.def": "XCOMM $XFree86: xc/config/cf/xf86site.def,v 3.186 2003/06/25 18:06:22 eich Exp $\n/******************************************************************************/\n/*\n * This file is to provide a quick method for most people to change the\n * behaviour of their Xorg installation without having to fully\n * understand the workings of site.def and all the various '.cf' files.\n *\n * In the vast majority of cases, it should not be necessary to use this\n * file at all or change it in any way.\n *\n * This file is divided into two sections.  The first contains settings\n * that end-users might reasonably change.  The second contains settings\n * that developers might want to change.\n *\n * IMPORTANT NOTE:  In all cases changing the defaults may cause problems\n * and/or unexpected side-effects.  If you don't understand what a setting\n * does, then it's best to not change it.  If you make changes and have\n * problems, verify that those problems are also present when using an\n * empty host.def file and unchanged version of this file before reporting\n * them.\n *\n * A good way to use this file is to copy it to host.def, and make the\n * changes there.  That way, future patches to this file won't fail.\n * The host.def file will never be patched.\n *\n * The distributed version of this file MUST contain no uncommented\n * definitions.  Default definitions belong in xorg.cf, or <vendor>.cf\n * files.\n */\n/******************************************************************************/\n\n/*\n * If you have build-specific modifications in your host.def file, but\n * want an empty host.def file installed when doing 'make install',\n * uncomment the following\n *\n#define InstallEmptyHostDef\n */\n\n/*\n * Which servers to build.  There is only Xorg server.\n * It can be disabled by the following.\n *\n#define XorgServer\t\tNO\n */\n\n/*\n * To disable building the Xnest server, uncomment this.\n *\n#define XnestServer\t\tNO\n */\n\n/*\n * To disable building Xvfb, uncomment this.\n *\n#define XVirtualFramebufferServer\tNO\n */\n\n/*\n * To enable building Xdmx, uncomment this.\n *\n#define XdmxServer YES\n */\n\n/*\n * To disable building Xprt, uncomment this.\n *\n#define XprtServer NO\n */\n\n/*\n * Set the default server (ie the one that gets the sym-link to \"X\")\n *\n#define ServerToInstall\t\tXorg\n */\n\n/*\n * If you only run the X server under xdm the X servers don't need to be\n * installed SetUID, and you may comment out the lines below.  If you run\n * the servers by hand (with xinit or startx), then they do need to be\n * installed SetUID on most platforms.\n *\n * Consult your system administrator before making the X server setuid.\n *\n#define InstallXserverSetUID\tNO\n */\n\n\n/*\n * Server configuration parameters.  The defaults are shown here:\n */\n\n/*\n * Which drivers to build.  When building a static server, each of these\n * will be included in it.  When building the loadable server each of these\n * modules will be built.\n *\n#define XF86CardDrivers\t\tmga glint nv tga s3virge sis rendition \\\n\t\t\t\tneomagic i740 tdfx savage \\\n\t\t\t\tcirrus vmware tseng trident chips apm \\\n\t\t\t\tGlideDriver fbdev i128 \\\n\t\t\t\tati DevelDrivers ark cyrix \\\n\t\t\t\tsiliconmotion \\\n\t\t\t\tvesa vga XF86OSCardDrivers XF86ExtraCardDrivers\n */\n\n/*\n * To add third party drivers to the standard driver list, set the\n * following.\n *\n#define XF86ExtraCardDrivers\textradriver1 extradriver2 ...\n */\n\n/*\n * Select the XInput devices you want by uncommenting this.\n *\n#define XInputDrivers\t\tmouse keyboard acecad calcomp citron \\\n\t\t\t\tdigitaledge dmc dynapro elographics \\\n\t\t\t\tmicrotouch mutouch penmount spaceorb summa \\\n\t\t\t\twacom void magictouch aiptek\n */\n\n/* To enable building of development DRI drivers (insecure, or not\n * useful on the chosen architecture, uncomment this define.\n#define BuildDevelDRIDrivers YES\n */\n\n/*\n * To use the deprecated, old keyboard driver, uncomment this.  But\n * even better, make the new keyboard driver (hw/xfree86/input/keyboard)\n * work for your architechture.  The old driver will be removed in the\n * next release.\n *\n#define UseDeprecatedKeyboardDriver YES\n */\n\n/*\n * There are three parameters that determine where and how the Matrox HAL\n * library is used:\n *\n *   HaveMatroxHal  -- You have the HALlib.a binary library installed\n *                     in xfree86/drivers/mga/HALlib, and you want it to\n *                     be used.\n *                     Default: NO\n *\n *   BuildMatroxHal -- You have the source for the HALlib library (installed\n *                     in xfree86/drivers/mga/hallib), and want to build and\n *                     use it.\n *                     Default: NO\n *\n *   UseMatroxHal   -- You want to build support for loading/using the HAL\n *                     library into the mga driver.  For module server builds\n *                     you don't need to have the HALlib library to do this.\n *                     but you want to build support for loading it and using\n *                     it into the mga driver module.\n *                     Default: YES for loadable server build\n *                              (HaveMatroxHal || BuildMatroxHal) for static\n */\n\n/*\n * To disable use of the Matrox HAL library, uncomment this:\n *\n#define UseMatroxHal\t\tNO\n */\n\n/*\n * If you have the HALlib.a binary installed in xfree86/drivers/mga/HALlib,\n * uncomment this:\n *\n#define HaveMatroxHal\t\tYES\n */\n\n/*\n * If you have the HALlib source code installed in xfree86/drivers/mga/hallib,\n * uncomment this:\n#define BuildMatroxHal\t\tYES\n */\n\n/*\n * To disable building the font server, uncomment this.\n *\n#define BuildFontServer\t\tNO\n */\n\n/*\n * Speedo fonts have been disabled by default in this release.\n * To re-enable support for Speedo fonts, uncomment this.\n *\n#define BuildSpeedo\t\tYES\n */\n\n/*\n * To disable support for CID fonts, uncomment this.\n *\n#define BuildCID\t\tNO\n */\n\n/*\n * To disable support for TrueType fonts, uncomment these.\n *\n#define BuildFreeType\t\tNO\n */\n\n/*\n * To set non-default build options for the underlying FreeType libraries,\n * add them here and uncomment.\n *\n#define Freetype2BuildDefines\t-DFREETYPE_BUILD_DEFINES\n */\n\n/*\n * To build the FreeType libraries with the TrueType byte code interpreter\n * enabled, uncomment this.  Note that there are patent issues related to the\n * TrueType byte code interpreter, and we only recommend you enabling this\n * if you are sure that there are no legal impediments to you doing so.  See\n * <http://www.freetype.org/patents.html> for further information.\n *\n#define Freetype2BuildDefines -DTT_CONFIG_OPTION_BYTECODE_INTERPRETER\n */\n\n/*\n * Do you want to Build Fonts (Usually you only want to build and install\n * fonts once, if this is a first time install you will want to build the\n * fonts)\n *\n#define BuildFonts\t\tNO\n */\n\n/*\n * To not build/install the 75dpi fonts, uncomment the following\n *\n#define Build75DpiFonts\t\tNO\n */\n\n/*\n * To not build/install the 100dpi fonts, uncomment the following\n *\n#define Build100DpiFonts\tNO\n */\n\n/*\n * To build/install the Speedo fonts, uncomment the following\n * (see setting above about Speedo support as well)\n *\n#define BuildSpeedoFonts\tYES\n */\n\n/*\n * To not build/install the Type1 fonts, uncomment the following\n *\n#define BuildType1Fonts\t\tNO\n */\n\n/*\n * To not build/install the CID fonts, uncomment the following\n *\n#define BuildCIDFonts\t\tNO\n */\n\n/*\n * To not build/install the True Type fonts, uncomment the following\n *\n#define BuildTrueTypeFonts\tNO\n */\n\n/*\n * To not build/install the Cyrillic fonts, uncomment the following\n *\n#define BuildCyrillicFonts\tNO\n */\n\n/*\n * To not install the local font directory, uncomment the following\n *\n#define MakeLocalFontDir\tNO\n */\n\n/*\n * To build only the servers with a cut-down source tree, uncomment\n * this.\n *\n#define BuildServersOnly\tYES\n */\n\n/*\n * By default, the sample config files for xinit, xdm and xfs are installed\n * only when there is no pre-existing version installed.  Uncommenting the\n * following lines will force the sample versions to be installed even if\n * it means over-writing existing versions.\n *\n#define InstallXinitConfig\tYES\n#define InstallXdmConfig\tYES\n#define InstallFSConfig\t\tYES\n */\n\n/*\n * By default the application defaults files are always installed.\n * Uncommenting the the following will prevent exising application\n * defaults files from being over-written.\n *\n#define InstallAppDefFiles\tNO\n */\n\n/*\n * Undefine the following if you don't want to have config files and\n * app-defaults installed in a separate directory (i.e. /etc/X11).\n *\n#define UseSeparateConfDir NO\n */\n\n/*\n * To enable building the glide driver, you need to define\n * HasGlide2 to YES and set the Glide2IncDir variable.\n * HasGlide2 is per default NO.\n *\n#define HasGlide2 YES\n */\n\n/*\n * Set the path to your Glide include files.\n *\n#define Glide2IncDir /usr/include/glide\n */\n\n/*\n * Have glide 3?\n *\n#define HasGlide3 YES\n */\n\n/*\n * Set the path to your Glide 3 include files.\n *\n#define Glide3IncDir /usr/include/glide3\n */\n\n\n\n/*\n * Unless you're a developer you shouldn't need to change anything\n * beyond this point.\n */\n\n/*\n * If you want to enable some developer settings, like more verbose\n * compiler warnings, uncomment this.\n *\n#define XFree86Devel\tYES\n*/\n\n/*\n * The default optimisation flags for GCC 2.x.  -fno-strength-reduce is\n * here to work around a bug in -O2 for GCC 2.x on i386 platforms.\n * If you are using a version that doesn't have this bug, you can\n * uncomment the following line, and remove '-fno-strength-reduce'\n * If you are building binaries for a 486, it may be beneficial to add\n * -m486\n *\n#define DefaultGcc2i386Opt\t-O2 -fno-strength-reduce\n */\n\n/*\n * This allows the GCC warning flags to be set.  The default is shown here.\n *\n#define GccWarningOptions -Wall -Wpointer-arith -Wstrict-prototypes \\\n                          -Wmissing-prototypes -Wmissing-declarations \\\n                          -Wredundant-decls -Wnested-externs\n */\n\n/*\n * Sun Compiler stuff..\n *\n#define HasSunC                         YES\n#define HasSunCplusplus                 YES\n#define CplusplusCompilerMajorVersion   5\n#define CplusplusCompilerMinorVersion   0\n#define CCompilerMajorVersion           5\n#define CCompilerMinorVersion           0\n */\n\n/*\n * Optimized Sun Compiler Build.\n *\n#define DefaultCDebugFlags              -xO4 -xtarget=pentium_pro\n#define OptimizedCDebugFlags            -xO4 -xtarget=pentium_pro\n */\n\n/*\n * Debuggable Sun Compiler Build.\n * Note: This builds _EVERYTHING_ as debuggable\n *\n#define DefaultCDebugFlags              -g -xs\n#define OptimizedCDebugFlags            -g -xs\n */\n\n/*\n * For Linux, this should match the Binutils version you have.  This example\n * is for 2.6.0.7.  See linux.cf for the default setting.\n *\n * This should automatically get set correctly by imake.\n *\n#define LinuxBinUtilsMajorVersion\t26\n */\n\n/*\n * For Linux, these should match the libc version you have.  This example\n * is for libc.5.4.x.  See linux.cf for the default setting.\n *\n * This should automatically get set correctly by imake.\n *\n#define LinuxCLibMajorVersion\t5\n#define LinuxClibMinorVersion\t4\n */\n\n/*\n * If you want to use the GNU malloc library, uncomment this\n *\n#define UseGnuMalloc\t\tYES\n */\n\n/*\n * Set this to whatever is required to access the GNU malloc library.\n * The default is '-lgmalloc' unless is specified in the OS's .cf file.\n *\n#define GnuMallocLibrary\t-L/usr/local/lib -lgmalloc\n */\n\n/*\n * To enable the internal Xserver malloc, uncomment this\n *\n#define UseInternalMalloc\tYES\n */\n\n/*\n * Some Linux releases don't have a libtermcap.  In this case you may need\n * to uncomment the following\n *\n#define TermcapLibrary\t\t-lncurses\n */\n\n/*\n * Build a server that dynamically loads the modules by setting\n * this to YES.  This defaults to YES on most platforms.  A static server\n * can be built by setting this to NO.\n *\n#define DoLoadableServer\tNO\n */\n\n/*\n * This release defaults to building dlopen() style modules instead of the\n * previously standard loader modules.\n *\n * Uncomment the following to return to the XFree86 custom loader modules.\n *\n#define MakeDllModules\t\tNO\n */\n\n/*\n * Build XAA.  This can be disabled with:\n *\n#define XF86XAA\t\t\tNO\n */\n\n/*\n * Build vgahw.  This can be disabled with:\n *\n#define XF86VgaHw\t\tNO\n */\n\n/*\n * Build xf1bpp.  This can be disabled with:\n *\n#define XF1Bpp\t\t\tNO\n */\n\n/*\n * Build xf4bpp.  This can be disabled with:\n *\n#define XF4Bpp\t\t\tNO\n */\n\n\n/*\n * BSD Console driver support (for FreeBSD and NetBSD).\n *\n * By default, support is included for pccons and pcvt for NetBSD, and\n * pccons, syscons and pcvt for FreeBSD.\n *\n * To change the list of supported drivers, set the following parameter.\n * Possible values are -DPCCONS_SUPPORT, -DSYSCONS_SUPPORT, -DPCVT_SUPPORT.\n * The following example includes support for syscons and pcvt only.\n *\n#define XFree86ConsoleDefines\t-DSYSCONS_SUPPORT -DPCVT_SUPPORT\n */\n\n/*\n * To link the X server with a dynamic version of the Xfont library,\n * uncomment this.\n *\n#define XserverStaticFontLib\tNO\n */\n\n/*\n * To enable binary compatibility with previous versions of the font\n * encoding support, uncomment this.\n *\n#define FontencCompatibility    YES\n */\n\n/*\n * To disable building XInput support, uncomment this\n *\n#define BuildXInputExt\t\tNO\n */\n\n/*\n * Uncomment this for joystick support.\n *\n * Note: Joystick support is broken, so don't enable this.\n *\n#define JoystickSupport YES\n */\n\n/*\n * To disable the ScreenSaver Extension, uncomment this line.\n *\n#define BuildScreenSaverExt\tNO\n */\n\n/*\n * If you don't want to build Xinerama support, uncomment this.\n *\n#define BuildXinerama\t\tNO\n */\n\n/*\n * If you don't want to build support for the GLX extension, uncomment this.\n *\n#define BuildGlxExt             NO\n */\n\n/*\n * If you want to build the xf86rush extension, uncomment this line.\n * This isn't recommended.\n *\n#define BuildXF86RushExt\tYES\n */\n\n/*\n * If you want to build the client library for the xf86rush extension,\n * uncomment this line.  This isn't recommended.\n *\n#define BuildXF86RushLibrary\tNO\n */\n\n/*\n * If you are running NetBSD 0.9C or later, and have the aperture driver\n * installed, uncomment this.\n *\n#define HasNetBSDApertureDriver\tYES\n */\n\n/*\n * If you are running SVR3 and have the mmap driver installed (for linear\n * framebuffer access) uncomment this.\n *\n#define HasSVR3mmapDrv\tYES\n */\n\n/*\n * If you are using an SVR3 (like ISC 4.x) which supports long file names,\n * you can uncomment this to have manual pages installed under their\n * full names\n *\n#define ExpandManNames\t\tYES\n */\n\n/*\n * For a POSIXized build on Interactive uncomment this\n * Could be used with gcc 'till Version 2.6.3\n * Should be used with gcc 2.7.2.\n *\n#define UsePosix\t\tYES\n */\n\n/*\n * If you don't want XDMAUTH support (if you don't have Wraphelp.c),\n *  comment this out.\n *\n */\n#define HasXdmAuth\t\tYES\n\n/*\n * If you have Linux DECnet support, and want to build XFree86 with support\n * for connections over DECnet, uncomment this.\n *\n#define HasDECnet\t\tYES\n */\n\n/*\n * To build static and shared libraries with debugging information, uncomment\n * this. Assumes you have Gcc2.\n * (If you don't have Gcc2, you can use the DebugLib{X11,Xt,Xaw,...} variables\n * to build debugging versions of the libraries separately.)\n *\n#define DebuggableLibraries\tYES\n*/\n\n/*\n * To forceably build static libraries in addition to shared libraries,\n * uncomment this.\n *\n#define ForceNormalLib\t\tYES\n */\n\n/*\n * Uncomment this if your default tools (eg, gcc, ld, as, etc) are\n * not the Linux ELF versions.\n *\n#define LinuxElfDefault\t\tNO\n */\n\n/*\n * To use ELF format shared libraries for supported OSs, uncomment this.\n *\n * For Linux the default setting of this is the same as the setting of\n * LinuxElfDefault.\n *\n * For FreeBSD this should automatically be set correctly by imake.  Only\n * change it here if you need to override the automatic setting.\n *\n#define UseElfFormat\t\tYES\n */\n\n/*\n * For FreeBSD/ELF (FreeBSD 3.0) it is possible to also build and install\n * a.out compatibility libraries.  To enable that, uncomment this.\n *\n#define BuildAoutLibraries\tYES\n */\n\n/*\n * If you have trouble with make bombing out in Xlib, try uncommenting this.\n * You will not get dependencies as a result, but better than nothing.\n *\n#define MakeHashTableBug        YES\n */\n\n/*\n * If you do not want your man pages compress under SVR3 systems that\n * support it, uncomment this.\n *\n#define CompressManPages        NO\n */\n\n/*\n * If you have sgmlfmt (the XFree86 doctools package) and want to build\n * formatted docs from the SGML source, uncomment this.\n *\n#define HasSgmlFmt\t\tYES\n */\n\n/*\n * To disable building some document formats, uncomment some of these.\n *\n#define BuildLinuxDocText\tNO\n#define BuildLinuxDocHtml\tNO\n#define BuildLinuxDocPS\t\tNO\n */\n\n/*\n * To install Japanese versions of the documentation uncomment this.\n * Note: The Japanese documentation consists of a subset of the\n * XFree86 3.1 docs.\n *\n#define InstallJapaneseDocs\tYES\n */\n\n/*\n * To build/install X specs docs, uncomment the following.\n * The SpecsDocDirs setting here is recommended because it covers\n * the docs that XFree86 has changed or added.\n *\n#define BuildSpecsDocs\t\tYES\n#define SpecsDocDirs\t\tCTEXT GL ICCCM X11 Xext Xmu Xv XvMC i18n\n */\n\n/*\n * To build all specs docs, not just those listed in SpecsDocDirs, uncomment\n * the following.\n *\n#define BuildAllSpecsDocs\tYES\n */\n\n/*\n * If your system doesn't support vm86() mode and you have\n * libx86emu set library path here\n *\n#define X86EMU_LIBPATH /usr/local/lib\n */\n\n/*\n * Most platforms default to using an already installed FreeType 2 library.\n * To use the one included in this release instead, uncomment the following.\n *\n#define HasFreetype2 NO\n */\n\n/*\n * To use a FreeType library already installed outside the default search\n * paths, uncomment the following and set the path as needed.\n *\n#define HasFreetype2 YES\n#define Freetype2Dir /usr/local\n */\n\n\n/*\n * Most platforms default to using an already installed Fontconfig library.\n * To use the one included in this release instead, uncomment the following.\n *\n#define HasFontconfig NO\n */\n\n/*\n * To use a Fontconfig library already installed outside the default search\n * paths, uncomment the following and set the path as needed.\n#define HasFontconfig YES\n#define FontconfigDir /usr/local\n */\n\n\n/*\n * Most platforms default to using an already installed Expat library.\n * To use the one included in this release instead, uncomment the following.\n *\n#define HasExpat NO\n */\n\n/*\n * To use a Expat library already installed outside the default search\n * paths, uncomment the following and set the path as needed.\n#define HasExpat YES\n#define ExpatDir /usr/local\n */\n\n\n/*\n * Most platforms default to using an already installed PNG library.\n * To use the one included in this release instead, uncomment the following.\n *\n#define HasLibpng NO\n */\n\n/*\n * To use a PNG library already installed outside the default search\n * paths, uncomment the following and set the path as needed.\n#define HasLibpng YES\n#define LibpngDir /usr/local\n */\n\n\n/*\n * Most platforms default to using an already installed xterm program.\n * To use the one included in this release instead, uncomment the following.\n *\n#define BuildXterm YES\n */\n"
    },
    "skipped": [],
    "total_files": 126
}