{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-stacks-1.46-ejys7emvumdl3bkm4n5oagbt3p3r2was/spack-src/htslib/plugin.c": "/*  plugin.c -- low-level path parsing and plugin functions.\n\n    Copyright (C) 2015 Genome Research Ltd.\n\n    Author: John Marshall <jm18@sanger.ac.uk>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.  */\n\n#include <config.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n\n#include <dirent.h>\n#include <dlfcn.h>\n\n#include \"hts_internal.h\"\n#include \"htslib/kstring.h\"\n\n#ifndef PLUGINPATH\n#define PLUGINPATH \"\"\n#endif\n\n#ifdef __APPLE__\n#define PLUGIN_EXT \".bundle\"\n#define PLUGIN_EXT_LEN 7\n#else\n#define PLUGIN_EXT \".so\"\n#define PLUGIN_EXT_LEN 3\n#endif\n\nstatic DIR *open_nextdir(struct hts_path_itr *itr)\n{\n    DIR *dir;\n\n    while (1) {\n        const char *colon = strchr(itr->pathdir, ':');\n        if (colon == NULL) return NULL;\n\n        itr->entry.l = 0;\n        kputsn(itr->pathdir, colon - itr->pathdir, &itr->entry);\n        itr->pathdir = &colon[1];\n        if (itr->entry.l == 0) continue;\n\n        dir = opendir(itr->entry.s);\n        if (dir) break;\n\n        if (hts_verbose >= 4)\n            fprintf(stderr,\n                    \"[W::hts_path_itr] can't scan directory \\\"%s\\\": %s\\n\",\n                    itr->entry.s, strerror(errno));\n    }\n\n    if (itr->entry.s[itr->entry.l-1] != '/') kputc('/', &itr->entry);\n    itr->entry_dir_l = itr->entry.l;\n    return dir;\n}\n\nvoid hts_path_itr_setup(struct hts_path_itr *itr, const char *path,\n        const char *builtin_path, const char *prefix, size_t prefix_len,\n        const char *suffix, size_t suffix_len)\n{\n    itr->prefix = prefix;\n    itr->prefix_len = prefix_len;\n\n    if (suffix) itr->suffix = suffix, itr->suffix_len = suffix_len;\n    else itr->suffix = PLUGIN_EXT, itr->suffix_len = PLUGIN_EXT_LEN;\n\n    itr->path.l = itr->path.m = 0; itr->path.s = NULL;\n    itr->entry.l = itr->entry.m = 0; itr->entry.s = NULL;\n\n    if (! builtin_path) builtin_path = PLUGINPATH;\n    if (! path) {\n        path = getenv(\"HTS_PATH\");\n        if (! path) path = \"\";\n    }\n\n    while (1) {\n        size_t len = strcspn(path, \":\");\n        if (len == 0) kputs(builtin_path, &itr->path);\n        else kputsn(path, len, &itr->path);\n        kputc(':', &itr->path);\n\n        path += len;\n        if (*path == ':') path++;\n        else break;\n    }\n\n    // Note that ':' now terminates entries rather than separates them\n    itr->pathdir = itr->path.s;\n    itr->dirv = open_nextdir(itr);\n}\n\nconst char *hts_path_itr_next(struct hts_path_itr *itr)\n{\n    while (itr->dirv) {\n        struct dirent *e;\n        while ((e = readdir((DIR *) itr->dirv)) != NULL) {\n            size_t d_name_len = strlen(e->d_name);\n            if (strncmp(e->d_name, itr->prefix, itr->prefix_len) == 0 &&\n                d_name_len >= itr->suffix_len &&\n                strncmp(e->d_name + d_name_len - itr->suffix_len, itr->suffix,\n                        itr->suffix_len) == 0) {\n                itr->entry.l = itr->entry_dir_l;\n                kputs(e->d_name, &itr->entry);\n                return itr->entry.s;\n            }\n        }\n\n        closedir((DIR *) itr->dirv);\n        itr->dirv = open_nextdir(itr);\n    }\n\n    itr->pathdir = NULL;\n    free(itr->path.s); itr->path.s = NULL;\n    free(itr->entry.s); itr->entry.s = NULL;\n    return NULL;\n}\n\nvoid *load_plugin(void **pluginp, const char *filename, const char *symbol)\n{\n    void *lib = dlopen(filename, RTLD_NOW | RTLD_LOCAL);\n    if (lib == NULL) goto error;\n\n    void *sym = dlsym(lib, symbol);\n    if (sym == NULL) goto error;\n\n    *pluginp = lib;\n    return sym;\n\nerror:\n    if (hts_verbose >= 4)\n        fprintf(stderr, \"[W::%s] can't load plugin \\\"%s\\\": %s\\n\",\n                __func__, filename, dlerror());\n    if (lib) dlclose(lib);\n    return NULL;\n}\n\nvoid *plugin_sym(void *plugin, const char *name, const char **errmsg)\n{\n    void *sym = dlsym(plugin, name);\n    if (sym == NULL) *errmsg = dlerror();\n    return sym;\n}\n\nvoid close_plugin(void *plugin)\n{\n    if (dlclose(plugin) != 0) {\n        if (hts_verbose >= 4)\n            fprintf(stderr, \"[W::%s] dlclose() failed: %s\\n\",\n                    __func__, dlerror());\n    }\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-stacks-1.46-ejys7emvumdl3bkm4n5oagbt3p3r2was/spack-src/htslib/hfile_internal.h": "/*  hfile_internal.h -- internal parts of low-level input/output streams.\n\n    Copyright (C) 2013-2015 Genome Research Ltd.\n\n    Author: John Marshall <jm18@sanger.ac.uk>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.  */\n\n#ifndef HFILE_INTERNAL_H\n#define HFILE_INTERNAL_H\n\n#include \"htslib/hfile.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nstruct hFILE_backend {\n    /* As per read(2), returning the number of bytes read (possibly 0) or\n       negative (and setting errno) on errors.  Front-end code will call this\n       repeatedly if necessary to attempt to get the desired byte count.  */\n    ssize_t (*read)(hFILE *fp, void *buffer, size_t nbytes) HTS_RESULT_USED;\n\n    /* As per write(2), returning the number of bytes written or negative (and\n       setting errno) on errors.  Front-end code will call this repeatedly if\n       necessary until the desired block is written or an error occurs.  */\n    ssize_t (*write)(hFILE *fp, const void *buffer, size_t nbytes)\n        HTS_RESULT_USED;\n\n    /* As per lseek(2), returning the resulting offset within the stream or\n       negative (and setting errno) on errors.  */\n    off_t (*seek)(hFILE *fp, off_t offset, int whence) HTS_RESULT_USED;\n\n    /* Performs low-level flushing, if any, e.g., fsync(2); for writing streams\n       only.  Returns 0 for success or negative (and sets errno) on errors. */\n    int (*flush)(hFILE *fp) HTS_RESULT_USED;\n\n    /* Closes the underlying stream (for output streams, the buffer will\n       already have been flushed), returning 0 for success or negative (and\n       setting errno) on errors, as per close(2).  */\n    int (*close)(hFILE *fp) HTS_RESULT_USED;\n};\n\n/* May be called by hopen_*() functions to decode a fopen()-style mode into\n   open(2)-style flags.  */\nint hfile_oflags(const char *mode);\n\n/* Must be called by hopen_*() functions to allocate the hFILE struct and set\n   up its base.  Capacity is a suggested buffer size (e.g., via fstat(2))\n   or 0 for a default-sized buffer.  */\nhFILE *hfile_init(size_t struct_size, const char *mode, size_t capacity);\n\n/* May be called by hopen_*() functions to undo the effects of hfile_init()\n   in the event opening the stream subsequently fails.  (This is safe to use\n   even if fp is NULL.  This takes care to preserve errno.)  */\nvoid hfile_destroy(hFILE *fp);\n\n\nstruct hFILE_scheme_handler {\n    /* Opens a stream when dispatched by hopen(); should call hfile_init()\n       to malloc a struct \"derived\" from hFILE and initialise it appropriately,\n       including setting base.backend to its own backend vector.  */\n    hFILE *(*open)(const char *filename, const char *mode) HTS_RESULT_USED;\n\n    /* Returns whether the URL denotes remote storage when dispatched by\n       hisremote().  For simple cases, use one of hfile_always_*() below.  */\n    int (*isremote)(const char *filename) HTS_RESULT_USED;\n\n    /* The name of the plugin or other code providing this handler.  */\n    const char *provider;\n\n    /* If multiple handlers are registered for the same scheme, the one with\n       the highest priority is used; range is 0 (lowest) to 100 (highest).  */\n    int priority;\n};\n\n/* May be used as an isremote() function in simple cases.  */\nextern int hfile_always_local (const char *fname);\nextern int hfile_always_remote(const char *fname);\n\n/* Should be called by plugins for each URL scheme they wish to handle.  */\nvoid hfile_add_scheme_handler(const char *scheme,\n                              const struct hFILE_scheme_handler *handler);\n\nstruct hFILE_plugin {\n    /* On entry, HTSlib's plugin API version (currently 1).  */\n    int api_version;\n\n    /* On entry, the plugin's handle as returned by dlopen() etc.  */\n    void *obj;\n\n    /* The plugin should fill this in with its (human-readable) name.  */\n    const char *name;\n\n    /* The plugin may wish to fill in a function to be called on closing.  */\n    void (*destroy)(void);\n};\n\n#ifdef ENABLE_PLUGINS\n#define PLUGIN_GLOBAL(identifier,suffix) identifier\n\n/* Plugins must define an entry point with this signature.  */\nextern int hfile_plugin_init(struct hFILE_plugin *self);\n\n#else\n#define PLUGIN_GLOBAL(identifier,suffix) identifier##suffix\n\n/* Only plugins distributed within the HTSlib source that might be built\n   even with --disable-plugins need to use PLUGIN_GLOBAL and be listed here;\n   others can simply define hfile_plugin_init().  */\n\nextern int hfile_plugin_init_irods(struct hFILE_plugin *self);\nextern int hfile_plugin_init_libcurl(struct hFILE_plugin *self);\n#endif\n\n/* This one is never built as a separate plugin.  */\nextern int hfile_plugin_init_net(struct hFILE_plugin *self);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-stacks-1.46-ejys7emvumdl3bkm4n5oagbt3p3r2was/spack-src/php/images/l-arrow-disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-stacks-1.46-ejys7emvumdl3bkm4n5oagbt3p3r2was/spack-src/php/images/r-arrow-disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-stacks-1.46-ejys7emvumdl3bkm4n5oagbt3p3r2was/spack-src/php/images/stacks_bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-stacks-1.46-ejys7emvumdl3bkm4n5oagbt3p3r2was/spack-src/php/images/caret-u.png",
        "/tmp/vanessa/spack-stage/spack-stage-stacks-1.46-ejys7emvumdl3bkm4n5oagbt3p3r2was/spack-src/php/images/stacks_logo_rev_small.png",
        "/tmp/vanessa/spack-stage/spack-stage-stacks-1.46-ejys7emvumdl3bkm4n5oagbt3p3r2was/spack-src/php/images/r-arrow.png",
        "/tmp/vanessa/spack-stage/spack-stage-stacks-1.46-ejys7emvumdl3bkm4n5oagbt3p3r2was/spack-src/php/images/caret-d.png",
        "/tmp/vanessa/spack-stage/spack-stage-stacks-1.46-ejys7emvumdl3bkm4n5oagbt3p3r2was/spack-src/php/images/excel_icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-stacks-1.46-ejys7emvumdl3bkm4n5oagbt3p3r2was/spack-src/php/images/l-arrow.png"
    ],
    "total_files": 250
}