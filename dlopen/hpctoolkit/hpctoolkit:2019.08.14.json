{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/config/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\n# serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/config/ltoptions.m4": "# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004-2005, 2007-2009, 2011-2015 Free Software\n#   Foundation, Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 8 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option '$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl 'shared' nor 'disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n\t\t   [_LT_ENABLE_FAST_INSTALL])\n  _LT_UNLESS_OPTIONS([LT_INIT], [aix-soname=aix aix-soname=both aix-soname=svr4],\n\t\t   [_LT_WITH_AIX_SONAME([aix])])\n  ])\n])# _LT_SET_OPTIONS\n\n\n## --------------------------------- ##\n## Macros to handle LT_INIT options. ##\n## --------------------------------- ##\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [1], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the 'shared' and\n# 'disable-shared' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the 'static' and\n# 'disable-static' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the 'fast-install'\n# and 'disable-fast-install' LT_INIT options.\n# DEFAULT is either 'yes' or 'no'.  If omitted, it defaults to 'yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for pkg in $enableval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe 'disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_AIX_SONAME([DEFAULT])\n# ----------------------------------\n# implement the --with-aix-soname flag, and support the `aix-soname=aix'\n# and `aix-soname=both' and `aix-soname=svr4' LT_INIT options. DEFAULT\n# is either `aix', `both' or `svr4'.  If omitted, it defaults to `aix'.\nm4_define([_LT_WITH_AIX_SONAME],\n[m4_define([_LT_WITH_AIX_SONAME_DEFAULT], [m4_if($1, svr4, svr4, m4_if($1, both, both, aix))])dnl\nshared_archive_member_spec=\ncase $host,$enable_shared in\npower*-*-aix[[5-9]]*,yes)\n  AC_MSG_CHECKING([which variant of shared library versioning to provide])\n  AC_ARG_WITH([aix-soname],\n    [AS_HELP_STRING([--with-aix-soname=aix|svr4|both],\n      [shared library versioning (aka \"SONAME\") variant to provide on AIX, @<:@default=]_LT_WITH_AIX_SONAME_DEFAULT[@:>@.])],\n    [case $withval in\n    aix|svr4|both)\n      ;;\n    *)\n      AC_MSG_ERROR([Unknown argument to --with-aix-soname])\n      ;;\n    esac\n    lt_cv_with_aix_soname=$with_aix_soname],\n    [AC_CACHE_VAL([lt_cv_with_aix_soname],\n      [lt_cv_with_aix_soname=]_LT_WITH_AIX_SONAME_DEFAULT)\n    with_aix_soname=$lt_cv_with_aix_soname])\n  AC_MSG_RESULT([$with_aix_soname])\n  if test aix != \"$with_aix_soname\"; then\n    # For the AIX way of multilib, we name the shared archive member\n    # based on the bitwidth used, traditionally 'shr.o' or 'shr_64.o',\n    # and 'shr.imp' or 'shr_64.imp', respectively, for the Import File.\n    # Even when GNU compilers ignore OBJECT_MODE but need '-maix64' flag,\n    # the AIX toolchain works better with OBJECT_MODE set (default 32).\n    if test 64 = \"${OBJECT_MODE-32}\"; then\n      shared_archive_member_spec=shr_64\n    else\n      shared_archive_member_spec=shr\n    fi\n  fi\n  ;;\n*)\n  with_aix_soname=aix\n  ;;\nesac\n\n_LT_DECL([], [shared_archive_member_spec], [0],\n    [Shared archive member basename, for filename based shared library versioning on AIX])dnl\n])# _LT_WITH_AIX_SONAME\n\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=aix], [_LT_WITH_AIX_SONAME([aix])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=both], [_LT_WITH_AIX_SONAME([both])])\nLT_OPTION_DEFINE([LT_INIT], [aix-soname=svr4], [_LT_WITH_AIX_SONAME([svr4])])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the 'pic-only' and 'no-pic'\n# LT_INIT options.\n# MODE is either 'yes' or 'no'.  If omitted, it defaults to 'both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic@<:@=PKGS@:>@],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=$IFS; IFS=$IFS$PATH_SEPARATOR,\n      for lt_pkg in $withval; do\n\tIFS=$lt_save_ifs\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=$lt_save_ifs\n      ;;\n    esac],\n    [pic_mode=m4_default([$1], [default])])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the 'pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n## ----------------- ##\n## LTDL_INIT Options ##\n## ----------------- ##\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/config/ltmain.sh": "#! /bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.6\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-01-20.17; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2014-01-07.03; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook funcions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      eval $_G_hook '\"$@\"'\n\n      # store returned options list back into positional\n      # parameters for next 'cmd' execution.\n      eval _G_hook_result=\\$${_G_hook}_result\n      eval set dummy \"$_G_hook_result\"; shift\n    done\n\n    func_quote_for_eval ${1+\"$@\"}\n    func_run_hooks_result=$func_quote_for_eval_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, remove any\n# options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_options_prep_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=: ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         ;;\n#            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n#          esac\n#        done\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_silent_option_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_option_validation_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll alse need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    func_options_prep ${1+\"$@\"}\n    eval func_parse_options \\\n        ${func_options_prep_result+\"$func_options_prep_result\"}\n    eval func_validate_options \\\n        ${func_parse_options_result+\"$func_parse_options_result\"}\n\n    eval func_run_hooks func_options \\\n        ${func_validate_options_result+\"$func_validate_options_result\"}\n\n    # save modified positional parameters for caller\n    func_options_result=$func_run_hooks_result\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propogate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning.\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    func_run_hooks func_options_prep ${1+\"$@\"}\n\n    # save modified positional parameters for caller\n    func_options_prep_result=$func_run_hooks_result\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      func_run_hooks func_parse_options ${1+\"$@\"}\n\n      # Adjust func_parse_options positional parameters to match\n      eval set dummy \"$func_run_hooks_result\"; shift\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      test $# = 0 && func_missing_arg $_G_opt && break\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n      esac\n    done\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    func_parse_options_result=$func_quote_for_eval_result\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    func_run_hooks func_validate_options ${1+\"$@\"}\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    # save modified positional parameters for caller\n    func_validate_options_result=$func_run_hooks_result\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname (GNU libtool) 2.4.6\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/software/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    esac\n\n    # Pass back the list of options.\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_options_prep_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n\t# An option not handled by this hook function:\n        *)\t\tset dummy \"$_G_opt\" ${1+\"$@\"};\tshift; break  ;;\n      esac\n    done\n\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_parse_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -stdlib=*            select c++ std lib with clang\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_for_eval \"$arg\"\n\t  arg=$func_quote_for_eval_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/thread_data.h": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n\n#ifndef THREAD_DATA_H\n#define THREAD_DATA_H\n\n// This is called \"thread data\", but it applies to process as well\n// (there is just 1 thread).\n\n#include <setjmp.h>\n#include <signal.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <stdlib.h>\n#include <time.h>\n\n#include \"sample_sources_registered.h\"\n#include \"newmem.h\"\n#include \"epoch.h\"\n#include \"cct2metrics.h\"\n#include \"core_profile_trace_data.h\"\n\n#include <lush/lush-pthread.i>\n#include <unwind/common/backtrace.h>\n\n#include <lib/prof-lean/hpcio.h>\n#include <lib/prof-lean/hpcio-buffer.h>\n\ntypedef struct {\n  sigjmp_buf jb;\n} sigjmp_buf_t;\n\ntypedef struct gpu_data_t {\n  // True if this thread is at CuXXXXSynchronize.\n  bool is_thread_at_cuda_sync;\n  // maintains state to account for overload potential  \n  uint8_t overload_state;\n  // current active stream\n  uint64_t active_stream;\n  // last examined event\n  void * event_node;\n  // maintain the total number of threads (global: think shared\n  // blaming) at synchronize (could be device/stream/...)\n  uint64_t accum_num_sync_threads;\n\t// holds the number of times the above accum_num_sync_threads\n\t// is updated\n  uint64_t accum_num_samples;\n} gpu_data_t;\n\n\n\n/* ******\n   TODO:\n\n   thread_data_t needs more structure.\n   Organize according to following plan:\n\n   backtrace_buffer\n     factor out of the current epoch, and put it as a separate item in thread_data\n     it will become an opaque datatype\n   each epoch has:\n       loadmap   (currently called epoch)\n       cct       (the main sample data container)\n       cct_ctxt  (pthread creation context)\n    exceptions package (items used when something goes wrong)\n        bad_unwind\n        mem_error\n        handling_sample (used to distinguish a sample-based segv from a user segv)\n    thread_locks package\n        (each of the 'lock' elements is true if this thread owns the lock.\n         locks must be released in an exceptional situation)\n\tfnbounds_lock   \n\tsplay_lock\n    sample source package\n       event_set\n       ss_state\n    trampoline\n       all trampoline-related items should be collected into a struct\n       NOTE: a single backtrace_buffer item will replace the collection of fields\n             that currently implement the cached backtrace.\n    io_support\n       This is a collection of files:\n         trace_file\n         hpcrun_file\n\n    lushPthr_t\n       lush items can stand alone\n\n    debug\n       a few bools & integers. General purpose. Used for simulating error conditions.\n */\n\n\ntypedef struct thread_data_t {\n  int idle; // indicate whether the thread is idle\n\n  // ----------------------------------------\n  // hpcrun_malloc() memory data structures\n  // ----------------------------------------\n  hpcrun_meminfo_t memstore;\n  int              mem_low;\n\n  // ----------------------------------------\n  // sample sources\n  // ----------------------------------------\n\n  source_state_t* ss_state; // allocate at initialization time\n  source_info_t*  ss_info;  // allocate at initialization time\n\n  struct sigevent sigev;   // POSIX real-time timer\n  timer_t        timerid;\n  bool           timer_init;\n\n  uint64_t       last_time_us; // microseconds\n   \n  // ----------------------------------------\n  // core_profile_trace_data contains the following\n  // epoch: loadmap + cct + cct_ctxt\n  // cct2metrics map: associate a metric_set with\n  // tracing: trace_min_time_us and trace_max_time_us\n  // IO support file handle: hpcrun_file;\n  // Perf event support\n  // ----------------------------------------\n\n  core_profile_trace_data_t core_profile_trace_data;\n\n  // ----------------------------------------\n  // backtrace buffer\n  // ----------------------------------------\n\n  // btbuf_beg                                                  btbuf_end\n  // |                                                            |\n  // v low VMAs                                                   v\n  // +------------------------------------------------------------+\n  // [new backtrace         )              [cached backtrace      )\n  // +------------------------------------------------------------+\n  //                        ^              ^ \n  //                        |              |\n  //                    btbuf_cur       btbuf_sav\n  \n  frame_t* btbuf_cur;  // current frame when actively constructing a backtrace\n  frame_t* btbuf_beg;  // beginning of the backtrace buffer \n                       // also, location of the innermost frame in\n                       // newly recorded backtrace (although skipInner may\n                       // adjust the portion of the backtrace that is recorded)\n  frame_t* btbuf_end;  // end of the current backtrace buffer\n  frame_t* btbuf_sav;  // innermost frame in cached backtrace\n\n\n  backtrace_t bt;     // backtrace used for unwinding\n\n  // ----------------------------------------\n  // trampoline\n  // ----------------------------------------\n  bool    tramp_present;   // TRUE if a trampoline installed; FALSE otherwise\n  void*   tramp_retn_addr; // return address that the trampoline replaced\n  void*   tramp_loc;       // current (stack) location of the trampoline\n  size_t  cached_frame_count; // (sanity check) length of cached frame list\n  frame_t* cached_bt;         // the latest backtrace (start)\n  frame_t* cached_bt_end;     // the latest backtrace (end)\n  frame_t* cached_bt_buf_end; // the end of the cached backtrace buffer\n  frame_t* tramp_frame;       // (cached) frame assoc. w/ cur. trampoline loc.\n  cct_node_t* tramp_cct_node; // cct node associated with the trampoline\n\n  // ----------------------------------------\n  // exception stuff\n  // ----------------------------------------\n  sigjmp_buf_t     *current_jmp_buf;\n  sigjmp_buf_t     bad_interval;\n  sigjmp_buf_t     bad_unwind;\n\n  bool             deadlock_drop;\n  int              handling_sample;\n  int              fnbounds_lock;\n\n  // ----------------------------------------\n  // Logical unwinding\n  // ----------------------------------------\n  lushPthr_t     pthr_metrics;\n\n\n  // ----------------------------------------\n  // debug stuff\n  // ----------------------------------------\n  bool debug1;\n\n  // ----------------------------------------\n  // miscellaneous\n  // ----------------------------------------\n  // Set to 1 while inside hpcrun code for safe sampling.\n  int inside_hpcrun;\n\n  // True if this thread is inside dlopen or dlclose.  A synchronous\n  // override that is called from dlopen (eg, malloc) must skip this\n  // sample or else deadlock on the dlopen lock.\n  bool inside_dlfcn;\n\n#ifdef ENABLE_CUDA\n  gpu_data_t gpu_data;\n#endif\n \n} thread_data_t;\n\n\nstatic const size_t HPCRUN_TraceBufferSz = HPCIO_RWBufferSz;\n\n\nvoid hpcrun_init_pthread_key(void);\nvoid hpcrun_set_thread0_data(void);\nvoid hpcrun_set_thread_data(thread_data_t *td);\n\n\n#define TD_GET(field) hpcrun_get_thread_data()->field\n\nextern thread_data_t* (*hpcrun_get_thread_data)(void);\nextern bool           (*hpcrun_td_avail)(void);\nextern thread_data_t* hpcrun_safe_get_td(void);\n\nvoid hpcrun_unthreaded_data(void);\nvoid hpcrun_threaded_data(void);\n\n\nextern thread_data_t* hpcrun_allocate_thread_data(int id);\n\nvoid\nhpcrun_thread_data_init(int id, cct_ctxt_t* thr_ctxt, int is_child, size_t n_sources);\n\n\nvoid     hpcrun_cached_bt_adjust_size(size_t n);\nframe_t* hpcrun_expand_btbuf(void);\nvoid     hpcrun_ensure_btbuf_avail(void);\n\n\n// utilities to match previous api\n#define hpcrun_get_thread_epoch()  TD_GET(core_profile_trace_data.epoch)\n\n#endif // !defined(THREAD_DATA_H)\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/hpcrun_stats.h": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n\n//***************************************************************************\n// interface operations\n//***************************************************************************\n\nvoid hpcrun_stats_reinit(void);\n\n//-----------------------------\n// samples total \n//-----------------------------\n\nvoid hpcrun_stats_num_samples_total_inc(void);\nlong hpcrun_stats_num_samples_total(void);\n\n\n//-----------------------------\n// samples attempted \n//-----------------------------\n\nvoid hpcrun_stats_num_samples_attempted_inc(void);\nlong hpcrun_stats_num_samples_attempted(void);\n\n\n//-----------------------------\n// samples blocked async \n//-----------------------------\n\nvoid hpcrun_stats_num_samples_blocked_async_inc(void);\nlong hpcrun_stats_num_samples_blocked_async(void);\n\n\n//-----------------------------\n// samples blocked dlopen \n//-----------------------------\n\nvoid hpcrun_stats_num_samples_blocked_dlopen_inc(void);\nlong hpcrun_stats_num_samples_blocked_dlopen(void);\n\n\n//-----------------------------\n// samples dropped\n//-----------------------------\n\nvoid hpcrun_stats_num_samples_dropped_inc(void);\nlong hpcrun_stats_num_samples_dropped(void);\n\n\n//-----------------------------\n// partial unwind samples\n//-----------------------------\n\nvoid hpcrun_stats_num_samples_partial_inc(void);\nlong hpcrun_stats_num_samples_partial(void);\n\n//----------------------------\n// samples yielded due to deadlock prevention\n//----------------------------\n\nextern void hpcrun_stats_num_samples_yielded_inc(void);\nextern long hpcrun_stats_num_samples_yielded(void);\n\n//-----------------------------\n// samples filtered\n//-----------------------------\n\nvoid hpcrun_stats_num_samples_filtered_inc(void);\nlong hpcrun_stats_num_samples_filtered(void);\n\n\n//-----------------------------\n// samples segv\n//-----------------------------\n\nvoid hpcrun_stats_num_samples_segv_inc(void);\nlong hpcrun_stats_num_samples_segv(void);\n\n\n//-----------------------------\n// unwind intervals total\n//-----------------------------\n\nvoid hpcrun_stats_num_unwind_intervals_total_inc(void);\nlong hpcrun_stats_num_unwind_intervals_total(void);\n\n\n//-----------------------------\n// unwind intervals suspicious\n//-----------------------------\n\nvoid hpcrun_stats_num_unwind_intervals_suspicious_inc(void);\nlong hpcrun_stats_num_unwind_intervals_suspicious(void);\n\n\n//------------------------------------------------------\n// samples that include 1 or more successful troll steps\n//------------------------------------------------------\n\nvoid hpcrun_stats_trolled_inc(void);\nlong hpcrun_stats_trolled(void);\n\n//------------------------------------------------------\n// total number of (unwind) frames in sample set\n//------------------------------------------------------\n\nvoid hpcrun_stats_frames_total_inc(long amt);\nlong hpcrun_stats_frames_total(void);\n\n//---------------------------------------------------------------------\n// total number of (unwind) frames in sample set that employed trolling\n//---------------------------------------------------------------------\n\nvoid hpcrun_stats_trolled_frames_inc(long amt);\nlong hpcrun_stats_trolled_frames(void);\n\n//-----------------------------\n// print summary\n//-----------------------------\n\nvoid hpcrun_stats_print_summary(void);\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/custom-init-dynamic.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n//\n// run a special user initialization function, if the CUSTOM_INIT flag is set\n//\n// Dynamic case uses dl functions to open a canonically named shared object file.\n// extract the \"hpcrun_custom_init\" function, and call it.\n//\n// The canonical name for the shared object is \"hpcrun-custom.so\". At the moment, this\n// file must be found in the same directory as the one in which hpcrun is invoked.\n// \n//\n\n// *********************************************\n// system includes\n// *********************************************\n\n#include <stdlib.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <dlfcn.h>\n\n// *********************************************\n// local includes\n// *********************************************\n\n#include \"custom-init.h\"\n#include <monitor.h>\n#include <messages/messages.h>\n\n// *********************************************\n// interface functions\n// *********************************************\n\nvoid\nhpcrun_do_custom_init(void)\n{\n  if (ENABLED(CUSTOM_INIT)) {\n    void* custom_fns = monitor_real_dlopen(\"./hpcrun-custom.so\", RTLD_LAZY);\n    if (custom_fns) {\n      void (*hpcrun_custom_init)(void) = (void (*)(void)) dlsym(custom_fns, \"hpcrun_custom_init\");\n      if (hpcrun_custom_init) {\n\tTMSG(CUSTOM_INIT, \"Before call to custom_init\");\n\thpcrun_custom_init();\n\tTMSG(CUSTOM_INIT, \"Return from custom_init\");\n      }\n      else {\n\tTMSG(CUSTOM_INIT, \"could not dynamically load hpcrun_custom_init procedure\");\n      }\n      monitor_real_dlclose(custom_fns);\n    }\n    else {\n      TMSG(CUSTOM_INIT, \"could not open hpcrun-custom.so\");\n    }\n  }\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/hpcrun_stats.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n\n//***************************************************************************\n// local include files\n//***************************************************************************\n#include \"sample_event.h\"\n#include \"disabled.h\"\n\n#include <memory/hpcrun-malloc.h>\n#include <messages/messages.h>\n\n#include <lib/prof-lean/stdatomic.h>\n#include <lib/prof-lean/hpcrun-fmt.h>\n#include <unwind/common/validate_return_addr.h>\n\n\n//***************************************************************************\n// local variables\n//***************************************************************************\n\nstatic atomic_long num_samples_total = ATOMIC_VAR_INIT(0);\nstatic atomic_long num_samples_attempted = ATOMIC_VAR_INIT(0);\nstatic atomic_long num_samples_blocked_async = ATOMIC_VAR_INIT(0);\nstatic atomic_long num_samples_blocked_dlopen = ATOMIC_VAR_INIT(0);\nstatic atomic_long num_samples_dropped = ATOMIC_VAR_INIT(0);\nstatic atomic_long num_samples_segv = ATOMIC_VAR_INIT(0);\nstatic atomic_long num_samples_partial = ATOMIC_VAR_INIT(0);\nstatic atomic_long num_samples_yielded = ATOMIC_VAR_INIT(0);\n\nstatic atomic_long num_unwind_intervals_total = ATOMIC_VAR_INIT(0);\nstatic atomic_long num_unwind_intervals_suspicious = ATOMIC_VAR_INIT(0);\n\nstatic atomic_long trolled = ATOMIC_VAR_INIT(0);\nstatic atomic_long frames_total = ATOMIC_VAR_INIT(0);\nstatic atomic_long trolled_frames = ATOMIC_VAR_INIT(0);\n\n//***************************************************************************\n// interface operations\n//***************************************************************************\n\nvoid\nhpcrun_stats_reinit(void)\n{\n  atomic_store_explicit(&num_samples_total, 0, memory_order_relaxed);\n  atomic_store_explicit(&num_samples_attempted, 0, memory_order_relaxed);\n  atomic_store_explicit(&num_samples_blocked_async, 0, memory_order_relaxed);\n  atomic_store_explicit(&num_samples_blocked_dlopen, 0, memory_order_relaxed);\n  atomic_store_explicit(&num_samples_dropped, 0, memory_order_relaxed);\n  atomic_store_explicit(&num_samples_segv, 0, memory_order_relaxed);\n  atomic_store_explicit(&num_unwind_intervals_total, 0, memory_order_relaxed);\n  atomic_store_explicit(&num_unwind_intervals_suspicious, 0, memory_order_relaxed);\n  atomic_store_explicit(&trolled, 0, memory_order_relaxed);\n  atomic_store_explicit(&frames_total, 0, memory_order_relaxed);\n  atomic_store_explicit(&trolled_frames, 0, memory_order_relaxed);\n}\n\n\n//-----------------------------\n// samples total \n//-----------------------------\n\nvoid\nhpcrun_stats_num_samples_total_inc(void)\n{\n  atomic_fetch_add_explicit(&num_samples_total, 1L, memory_order_relaxed);\n}\n\n\nlong\nhpcrun_stats_num_samples_total(void)\n{\n  return atomic_load_explicit(&num_samples_total, memory_order_relaxed);\n}\n\n\n\n//-----------------------------\n// samples attempted \n//-----------------------------\n\nvoid\nhpcrun_stats_num_samples_attempted_inc(void)\n{\n  atomic_fetch_add_explicit(&num_samples_attempted, 1L, memory_order_relaxed);\n}\n\n\nlong\nhpcrun_stats_num_samples_attempted(void)\n{\n  return atomic_load_explicit(&num_samples_attempted, memory_order_relaxed);\n}\n\n\n\n//-----------------------------\n// samples blocked async \n//-----------------------------\n\n// The async blocks happen in the signal handlers, without getting to\n// hpcrun_sample_callpath, so also increment the total count here.\nvoid\nhpcrun_stats_num_samples_blocked_async_inc(void)\n{\n  atomic_fetch_add_explicit(&num_samples_blocked_async, 1L, memory_order_relaxed);\n  atomic_fetch_add_explicit(&num_samples_total, 1L, memory_order_relaxed);\n}\n\n\nlong\nhpcrun_stats_num_samples_blocked_async(void)\n{\n  return atomic_load_explicit(&num_samples_blocked_async, memory_order_relaxed);\n}\n\n\n\n//-----------------------------\n// samples blocked dlopen \n//-----------------------------\n\nvoid\nhpcrun_stats_num_samples_blocked_dlopen_inc(void)\n{\n  atomic_fetch_add_explicit(&num_samples_blocked_dlopen, 1L, memory_order_relaxed);\n}\n\n\nlong\nhpcrun_stats_num_samples_blocked_dlopen(void)\n{\n  return atomic_load_explicit(&num_samples_blocked_dlopen, memory_order_relaxed);\n}\n\n\n\n//-----------------------------\n// samples dropped\n//-----------------------------\n\nvoid\nhpcrun_stats_num_samples_dropped_inc(void)\n{\n  atomic_fetch_add_explicit(&num_samples_dropped, 1L, memory_order_relaxed);\n}\n\nlong\nhpcrun_stats_num_samples_dropped(void)\n{\n  return atomic_load_explicit(&num_samples_dropped, memory_order_relaxed);\n}\n\n//----------------------------\n// partial unwinds\n//----------------------------\n\nvoid\nhpcrun_stats_num_samples_partial_inc(void)\n{\n  atomic_fetch_add_explicit(&num_samples_partial, 1L, memory_order_relaxed);\n}\n\nlong\nhpcrun_stats_num_samples_partial(void)\n{\n  return atomic_load_explicit(&num_samples_partial, memory_order_relaxed);\n}\n\n//-----------------------------\n// samples segv\n//-----------------------------\n\nvoid\nhpcrun_stats_num_samples_segv_inc(void)\n{\n  atomic_fetch_add_explicit(&num_samples_segv, 1L, memory_order_relaxed);\n}\n\n\nlong\nhpcrun_stats_num_samples_segv(void)\n{\n  return atomic_load_explicit(&num_samples_segv, memory_order_relaxed);\n}\n\n\n\n\n//-----------------------------\n// unwind intervals total\n//-----------------------------\n\nvoid\nhpcrun_stats_num_unwind_intervals_total_inc(void)\n{\n  atomic_fetch_add_explicit(&num_unwind_intervals_total, 1L, memory_order_relaxed);\n}\n\n\nlong\nhpcrun_stats_num_unwind_intervals_total(void)\n{\n  return atomic_load_explicit(&num_unwind_intervals_total, memory_order_relaxed);\n}\n\n\n\n//-----------------------------\n// unwind intervals suspicious\n//-----------------------------\n\nvoid\nhpcrun_stats_num_unwind_intervals_suspicious_inc(void)\n{\n  atomic_fetch_add_explicit(&num_unwind_intervals_suspicious, 1L, memory_order_relaxed);\n}\n\n\nlong\nhpcrun_stats_num_unwind_intervals_suspicious(void)\n{\n  return atomic_load_explicit(&num_unwind_intervals_suspicious, memory_order_relaxed);\n}\n\n//------------------------------------------------------\n// samples that include 1 or more successful troll steps\n//------------------------------------------------------\n\nvoid\nhpcrun_stats_trolled_inc(void)\n{\n  atomic_fetch_add_explicit(&trolled, 1L, memory_order_relaxed);\n}\n\nlong\nhpcrun_stats_trolled(void)\n{\n  return atomic_load_explicit(&trolled, memory_order_relaxed);\n}\n\n//------------------------------------------------------\n// total number of (unwind) frames in sample set\n//------------------------------------------------------\n\nvoid\nhpcrun_stats_frames_total_inc(long amt)\n{\n  atomic_fetch_add_explicit(&frames_total, amt, memory_order_relaxed);\n}\n\nlong\nhpcrun_stats_frames_total(void)\n{\n  return atomic_load_explicit(&frames_total, memory_order_relaxed);\n}\n\n//---------------------------------------------------------------------\n// total number of (unwind) frames in sample set that employed trolling\n//---------------------------------------------------------------------\n\nvoid\nhpcrun_stats_trolled_frames_inc(long amt)\n{\n  atomic_fetch_add_explicit(&trolled_frames, amt, memory_order_relaxed);\n}\n\nlong\nhpcrun_stats_trolled_frames(void)\n{\n  return atomic_load_explicit(&trolled_frames, memory_order_relaxed);\n}\n\n//----------------------------\n// samples yielded due to deadlock prevention\n//----------------------------\n\nvoid\nhpcrun_stats_num_samples_yielded_inc(void)\n{\n  atomic_fetch_add_explicit(&num_samples_yielded, 1L, memory_order_relaxed);\n}\n\nlong\nhpcrun_stats_num_samples_yielded(void)\n{\n  return atomic_load_explicit(&num_samples_yielded, memory_order_relaxed);\n}\n\n//-----------------------------\n// print summary\n//-----------------------------\n\nvoid\nhpcrun_stats_print_summary(void)\n{\n  long blocked = atomic_load_explicit(&num_samples_blocked_async, memory_order_relaxed) +\n    atomic_load_explicit(&num_samples_blocked_dlopen, memory_order_relaxed);\n  long errant = atomic_load_explicit(&num_samples_dropped, memory_order_relaxed);\n  long soft = atomic_load_explicit(&num_samples_dropped, memory_order_relaxed) -\n    atomic_load_explicit(&num_samples_segv, memory_order_relaxed);\n  long valid = atomic_load_explicit(&num_samples_attempted, memory_order_relaxed);\n  if (ENABLED(NO_PARTIAL_UNW)) {\n    valid = atomic_load_explicit(&num_samples_attempted, memory_order_relaxed) - errant;\n  }\n\n  hpcrun_memory_summary();\n\n  AMSG(\"SAMPLE ANOMALIES: blocks: %ld (async: %ld, dlopen: %ld), \"\n       \"errors: %ld (segv: %ld, soft: %ld)\",\n       blocked, num_samples_blocked_async, num_samples_blocked_dlopen,\n       errant, num_samples_segv, soft);\n\n  AMSG(\"SUMMARY: samples: %ld (recorded: %ld, blocked: %ld, errant: %ld, trolled: %ld, yielded: %ld),\\n\"\n       \"         frames: %ld (trolled: %ld)\\n\"\n       \"         intervals: %ld (suspicious: %ld)\",\n       num_samples_total, valid, blocked, errant, trolled, num_samples_yielded,\n       frames_total, trolled_frames,\n       num_unwind_intervals_total,  num_unwind_intervals_suspicious);\n\n  if (hpcrun_get_disabled()) {\n    AMSG(\"SAMPLING HAS BEEN DISABLED\");\n  }\n\n  // logs, retentions || adj.: recorded, retained, written\n\n  if (ENABLED(UNW_VALID)) {\n    hpcrun_validation_summary();\n  }\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/epoch.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n#include <stdio.h>\n#include <fcntl.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <string.h>\n\n#include \"env.h\"\n#include \"epoch.h\"\n#include \"loadmap.h\"\n#include \"name.h\"\n#include \"thread_data.h\"\n#include \"hpcrun_return_codes.h\"\n#include \"monitor.h\"\n#include <trampoline/common/trampoline.h>\n#include <messages/messages.h>\n#include <cct/cct_bundle.h>\n\nvoid\nhpcrun_reset_epoch(epoch_t* epoch)\n{\n  epoch->next = NULL;\n  TD_GET(core_profile_trace_data.epoch) = epoch;\n}\n\nvoid\nhpcrun_epoch_init(cct_ctxt_t* ctxt)\n{\n  TMSG(EPOCH,\"init\");\n  thread_data_t* td    = hpcrun_get_thread_data();\n  epoch_t*       epoch = td->core_profile_trace_data.epoch;\n\n  hpcrun_cct_bundle_init(&(epoch->csdata), ctxt);\n\n  epoch->loadmap = hpcrun_getLoadmap();\n  epoch->next  = NULL;\n}\n\nepoch_t*\nhpcrun_check_for_new_loadmap(epoch_t* epoch)\n{\n  /* ugh, nasty race condition here:\n\n  1. shared library epoch has changed since the last profile\n  signal, so we enter the if;\n\n  2. somebody else dlclose()'s a library which holds something\n  located in our backtrace.  this is not in itself a problem,\n  since we don't bother doing anything on dlclose()...;\n\n  3. somebody else (thread in step 2 or a different thread)\n  dlopen()'s a new shared object, which begins an entirely\n  new loadmap--one which does not include the shared object\n  which resides in our backtrace;\n\n  4. we create a new epoch which receives the loadmap from step 3,\n  not step 1, which is wrong.\n\n  attempt to take baby steps to stop this.  more drastic action\n  would involve grabbing the loadmap lock, but I believe that would\n  be unacceptably slow (both in the atomic instruction overhead\n  and the simple fact that most programs are not frequent users\n  of dl*). */\n\n  hpcrun_loadmap_t* current = hpcrun_getLoadmap();\n\n  if(epoch->loadmap != current) {\n    TMSG(LOADMAP, \"Need new loadmap!\");\n    TMSG(MALLOC,\" -new_epoch-\");\n    epoch_t* newepoch = hpcrun_malloc(sizeof(epoch_t));\n\n    TMSG(EPOCH, \"check_new_epoch creating new epoch (new loadmap/cct pair)...\");\n\n    memcpy(newepoch, epoch, sizeof(epoch_t));\n    hpcrun_cct_bundle_init(&(epoch->csdata), (epoch->csdata).ctxt);\n\n    hpcrun_trampoline_remove();\n\n    newepoch->loadmap = current;\n    newepoch->next  = epoch;\n\n    TD_GET(core_profile_trace_data.epoch) = newepoch;\n    return newepoch;\n  }\n  else {\n    return epoch;\n  }\n}\n\nint\nhpcrun_epoch_fini(epoch_t *x){\n\n  TMSG(EPOCH,\"--Fini\");\n  return HPCRUN_OK;\n}\n\nvoid\nhpcrun_epoch_reset(void)\n{\n  //\n  // create a new epoch list:\n  //  preserve current loadmap\n  //  re-init cct\n  // reset epoch list for thread to point be a list consisting of only the new epoch\n  //\n  TMSG(EPOCH_RESET,\"--started\");\n  epoch_t *epoch = hpcrun_get_thread_epoch();\n  epoch_t *newepoch = hpcrun_malloc(sizeof(epoch_t));\n  memcpy(newepoch, epoch, sizeof(epoch_t));\n  TMSG(EPOCH_RESET, \"check new loadmap = old loadmap = %d\", newepoch->loadmap == epoch->loadmap);\n  hpcrun_cct_bundle_init(&(newepoch->csdata), newepoch->csdata_ctxt); // reset cct\n  hpcrun_reset_epoch(newepoch);\n  TMSG(EPOCH_RESET,\" ==> no new epoch for next sample = %d\", newepoch->loadmap == hpcrun_getLoadmap());\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/hpcrun_dlfns.h": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n#ifndef _CSPROF_DLFNS_H_\n#define _CSPROF_DLFNS_H_\n\nint  hpcrun_dlopen_read_lock(void);\nvoid hpcrun_dlopen_read_unlock(void);\n\nvoid hpcrun_pre_dlopen(const char *path, int flags);\nvoid hpcrun_dlopen(const char *module_name, int flags, void *handle);\nvoid hpcrun_dlclose(void *handle);\nvoid hpcrun_post_dlclose(void *handle, int ret);\n\nlong hpcrun_dlopen_pending(void);\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/main.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n//***************************************************************************\n// system include files \n//***************************************************************************\n\n#include <sys/types.h>\n#include <pthread.h>\n#include <unistd.h>\n#include <setjmp.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <dlfcn.h>\n#include <stdlib.h>\n#include <string.h>\n\n#ifdef LINUX\n#include <linux/unistd.h>\n#include <linux/limits.h>\n#endif\n\n//***************************************************************************\n// libmonitor include files\n//***************************************************************************\n\n#include <monitor.h>\n\n\n//***************************************************************************\n// user include files \n//***************************************************************************\n\n#include <include/uint.h>\n\n#include <include/hpctoolkit-config.h>\n\n#include \"main.h\"\n\n#include \"disabled.h\"\n#include \"env.h\"\n#include \"loadmap.h\"\n#include \"files.h\"\n#include \"fnbounds_interface.h\"\n#include \"fnbounds_table_interface.h\"\n#include \"hpcrun_dlfns.h\"\n#include \"hpcrun_options.h\"\n#include \"hpcrun_return_codes.h\"\n#include \"hpcrun_stats.h\"\n#include \"name.h\"\n#include \"start-stop.h\"\n#include \"custom-init.h\"\n#include \"cct_insert_backtrace.h\"\n#include \"safe-sampling.h\"\n\n#include \"metrics.h\"\n\n#include \"sample_event.h\"\n#include <sample-sources/none.h>\n#include <sample-sources/itimer.h>\n\n#include \"sample_sources_registered.h\"\n#include \"sample_sources_all.h\"\n#include \"segv_handler.h\"\n#include \"sample_prob.h\"\n#include \"term_handler.h\"\n\n#include \"epoch.h\"\n#include \"thread_data.h\"\n#include \"threadmgr.h\"\n#include \"thread_use.h\"\n#include \"trace.h\"\n#include \"write_data.h\"\n#include <utilities/token-iter.h>\n\n#include <memory/hpcrun-malloc.h>\n#include <memory/mmap.h>\n\n#include <monitor-exts/monitor_ext.h>\n\n#include <cct/cct.h>\n\n#include <unwind/common/backtrace.h>\n#include <unwind/common/unwind.h>\n\n#include <utilities/arch/context-pc.h>\n\n#include <lush/lush-backtrace.h>\n#include <lush/lush-pthread.h>\n\n#include <lib/prof-lean/hpcrun-fmt.h>\n#include <lib/prof-lean/hpcio.h>\n\n#include <messages/messages.h>\n#include <messages/debug-flag.h>\n\nextern void hpcrun_set_retain_recursion_mode(bool mode);\n#ifndef USE_LIBUNW\nextern void hpcrun_dump_intervals(void* addr);\n#endif // ! USE_LIBUNW\n\n//***************************************************************************\n// local data types. Primarily for passing data between pre_PHASE, PHASE, and post_PHASE\n//***************************************************************************\n\ntypedef struct local_thread_data_t {\n  cct_ctxt_t* thr_ctxt;\n} local_thread_data_t;\n\ntypedef struct fork_data_t {\n  int flag;\n  bool is_child;\n} fork_data_t;\n\n\n//***************************************************************************\n// constants\n//***************************************************************************\n\nenum _local_const {\n  PROC_NAME_LEN = 2048\n};\n\n//***************************** concrete data structure definition **********\nstruct hpcrun_aux_cleanup_t {\n  void  (* func) (void *); // function to invoke on cleanup\n  void * arg; // argument to pass to func\n  struct hpcrun_aux_cleanup_t * next;\n  struct hpcrun_aux_cleanup_t * prev;\n};\n\n//***************************************************************************\n// forward declarations\n//***************************************************************************\n\nstatic int\ndump_interval_handler(int sig, siginfo_t* info, void* ctxt)\n__attribute__ ((unused));\n\n//***************************************************************************\n// global variables\n//***************************************************************************\n\nint lush_metrics = 0; // FIXME: global variable for now\n\n/******************************************************************************\n * (public declaration) thread-local variables\n *****************************************************************************/\n __thread bool hpcrun_thread_suppress_sample = true;\n\n\n//***************************************************************************\n// local variables \n//***************************************************************************\n\nstatic hpcrun_options_t opts;\nstatic bool hpcrun_is_initialized_private = false;\nstatic bool safe_to_sync_sample = false;\nstatic void* main_addr = NULL;\nstatic void* main_lower = NULL;\nstatic void* main_upper = (void*) (intptr_t) -1;\n#ifndef HPCRUN_STATIC_LINK\nstatic void* main_addr_dl = NULL;\nstatic void* main_lower_dl = NULL;\nstatic void* main_upper_dl = (void*) (intptr_t) -1;\n#endif\nstatic spinlock_t hpcrun_aux_cleanup_lock = SPINLOCK_UNLOCKED;\nstatic hpcrun_aux_cleanup_t * hpcrun_aux_cleanup_list_head = NULL;\nstatic hpcrun_aux_cleanup_t * hpcrun_aux_cleanup_free_list_head = NULL;\nstatic char execname[PATH_MAX] = {'\\0'};\n\n//\n// Local functions\n//\nstatic void\nsetup_main_bounds_check(void* main_addr)\n{\n  // record bound information for the symbol main statically linked \n  // into an executable, or a PLT stub named main and the function\n  // to which it will be dynamically bound. these function bounds will\n  // later be used to validate unwinds in the main thread by the function \n  // hpcrun_inbounds_main.\n\n  load_module_t* lm = NULL;\n\n  // record bound information about the function bounds of the 'main'\n  // function passed into libc_start_main as real_main. this might be\n  // a trampoline in the PLT.\n  if (main_addr) {\n#if defined(__PPC64__) || defined(HOST_CPU_IA64)\n    main_addr = *((void**) main_addr);\n#endif\n    fnbounds_enclosing_addr(main_addr, &main_lower, &main_upper, &lm);\n  }\n\n#ifndef HPCRUN_STATIC_LINK\n  // record bound information about the function bounds of a global\n  // dynamic symbol named 'main' (if any).\n  // passed into libc_start_main as real_main. this might be a\n  // trampoline in the PLT.\n  dlerror();\n  main_addr_dl = dlsym(RTLD_NEXT,\"main\");\n  if (main_addr_dl) {\n    fnbounds_enclosing_addr(main_addr_dl, &main_lower_dl, &main_upper_dl, &lm);\n  }\n#endif\n}\n\n//\n// Derive the full executable name from the\n// process name. Store in a local variable.\n//\nstatic void\ncopy_execname(char* process_name)\n{\n  char tmp[PATH_MAX] = {'\\0'};\n  char* rpath = realpath(process_name, tmp);\n  char* src = (rpath != NULL) ? rpath : process_name;\n\n  strncpy(execname, src, sizeof(execname));\n}\n\n//\n// *** Accessor functions ****\n//\n\nbool\nhpcrun_is_initialized()\n{\n  return hpcrun_is_initialized_private;\n}\n\nvoid*\nhpcrun_get_addr_main(void)\n{\n  return main_addr;\n}\n\nbool\nhpcrun_inbounds_main(void* addr)\n{\n  // address is in a main routine statically linked into the executable\n  int in_static_main = (main_lower <= addr) & (addr <= main_upper);\n  int in_main = in_static_main;\n\n#ifndef HPCRUN_STATIC_LINK\n  // address is in a main routine dynamically linked into the executable\n  int in_dynamic_main = (main_lower_dl <= addr) & (addr <= main_upper_dl);\n  in_main |= in_dynamic_main;\n#endif\n\n  return in_main;\n}\n\n//\n// fetch the execname\n// note: execname has no value before main().\n//\nchar*\nhpcrun_get_execname(void)\n{\n  return execname;\n}\n\n//\n// the char* fn argument is for debugging:\n//  It has no effect in this incarnation\n//\nbool\nhpcrun_is_safe_to_sync(const char* fn)\n{\n  return safe_to_sync_sample;\n}\n\nvoid\nhpcrun_set_safe_to_sync(void)\n{\n  safe_to_sync_sample = true;\n}\n\n//***************************************************************************\n// *** Important note about libmonitor callbacks ***\n//\n//  In libmonitor callbacks, block two things:\n//\n//   1. Skip the callback if hpcrun is not yet initialized.\n//   2. Block async reentry for the duration of the callback.\n//\n// Init-process and init-thread are where we do the initialization, so\n// they're special.  Also, libmonitor promises that init and fini process\n// and thread are run in sequence, but dlopen, fork, pthread-create\n// can occur out of sequence (in init constructor).\n//***************************************************************************\n\n//***************************************************************************\n// internal operations \n//***************************************************************************\n\nstatic int\nabort_timeout_handler(int sig, siginfo_t* siginfo, void* context)\n{\n  EEMSG(\"hpcrun: abort timeout activated - context pc %p\", \n    hpcrun_context_pc(context)); \n  monitor_real_abort();\n  \n  return 0; /* keep compiler happy, but can't get here */\n}\n\n\nstatic void \nhpcrun_set_abort_timeout()\n{\n  char *error_timeout = getenv(\"HPCRUN_ABORT_TIMEOUT\");\n  if (error_timeout) {\n     int seconds = atoi(error_timeout);\n     if (seconds != 0) {\n       EEMSG(\"hpcrun: abort timeout armed\");\n       monitor_sigaction(SIGALRM, &abort_timeout_handler, 0, NULL);\n       alarm(seconds);\n     }\n  }\n}\n\n//------------------------------------\n// ** local routines & data to support interval dumping **\n//------------------------------------\n\nstatic sigjmp_buf ivd_jb;\n\nsiglongjmp_fcn* hpcrun_get_real_siglongjmp(void);\n\nstatic int\ndump_interval_handler(int sig, siginfo_t* info, void* ctxt)\n{\n  (*hpcrun_get_real_siglongjmp())(ivd_jb, 9);\n  return 0;\n}\n\n//------------------------------------\n// process level \n//------------------------------------\n\nvoid\nhpcrun_init_internal(bool is_child)\n{\n  hpcrun_initLoadmap();\n\n  hpcrun_memory_reinit();\n  hpcrun_mmap_init();\n  hpcrun_thread_data_init(0, NULL, is_child, hpcrun_get_num_sample_sources());\n\n  // must initialize unwind recipe map before initializing fnbounds\n  // because mapping of load modules affects the recipe map.\n  hpcrun_unw_init();\n\n  // WARNING: a perfmon bug requires us to fork off the fnbounds\n  // server before we call PAPI_init, which is done in argument\n  // processing below. Also, fnbounds_init must be done after the\n  // memory allocator is initialized.\n  fnbounds_init();\n\n  main_addr = monitor_get_addr_main();\n  setup_main_bounds_check(main_addr);\n  TMSG(MAIN_BOUNDS, \"main addr %p ==> lower %p, upper %p\", main_addr, main_lower, main_upper);\n\n  hpcrun_options__init(&opts);\n  hpcrun_options__getopts(&opts);\n\n  hpcrun_trace_init(); // this must go after thread initialization\n  hpcrun_trace_open(&(TD_GET(core_profile_trace_data)));\n\n  // Decide whether to retain full single recursion, or collapse recursive calls to\n  // first instance of recursive call\n  hpcrun_set_retain_recursion_mode(getenv(\"HPCRUN_RETAIN_RECURSION\") != NULL);\n\n  // Initialize logical unwinding agents (LUSH)\n  if (opts.lush_agent_paths[0] != '\\0') {\n    epoch_t* epoch = TD_GET(core_profile_trace_data.epoch);\n    TMSG(MALLOC,\" -init_internal-: lush allocation\");\n    lush_agents = (lush_agent_pool_t*)hpcrun_malloc(sizeof(lush_agent_pool_t));\n    hpcrun_logicalUnwind(true);\n    lush_agent_pool__init(lush_agents, opts.lush_agent_paths);\n    EMSG(\"Logical Unwinding Agent: %s (%p / %p)\", opts.lush_agent_paths,\n\t epoch, lush_agents);\n  }\n\n  lush_metrics = (lush_agents) ? 1 : 0;\n\n  // tallent: this is harmless, but should really only occur for pthread agent\n  lushPthr_processInit();\n\n  hpcrun_setup_segv();\n\n\n#ifndef USE_LIBUNW\n  if (getenv(\"HPCRUN_ONLY_DUMP_INTERVALS\")) {\n    fnbounds_table_t table = fnbounds_fetch_executable_table();\n    TMSG(INTERVALS_PRINT, \"table data = %p\", table.table);\n    TMSG(INTERVALS_PRINT, \"table length = %d\", table.len);\n\n    if (monitor_sigaction(SIGSEGV, &dump_interval_handler, 0, NULL)) {\n      fprintf(stderr, \"Could not install dump interval segv handler\\n\");\n      monitor_real_exit(1);\n    }\n\n    for (void** e = table.table; e < table.table + table.len - 1; e++) {\n      fprintf(stderr, \"======== %p Intervals ========\\n\", *e);\n      if (e > table.table || ! sigsetjmp(ivd_jb, 1)) \n\thpcrun_dump_intervals(*e);\n      else\n\tfprintf(stderr, \"--Error: skipped--\\n\");\n      fprintf(stderr, \"\\n\");\n      fflush(stderr);\n    }\n    exit(0);\n  }\n#endif // ! USE_LIBUNW\n\n  hpcrun_stats_reinit();\n  hpcrun_start_stop_internal_init();\n\n  // sample source setup\n\n  TMSG(PROCESS, \"Sample source setup\");\n  //\n  // NOTE: init step no longer necessary.\n  //       -all- possible (e.g. registered) sample sources call their own init method\n  //       no need to do it twice.\n  //\n  if (! is_child) {\n    SAMPLE_SOURCES(process_event_list, lush_metrics);\n  }\n  SAMPLE_SOURCES(gen_event_set, lush_metrics);\n\n  // set up initial 'epoch' \n  \n  TMSG(EPOCH,\"process init setting up initial epoch/loadmap\");\n  hpcrun_epoch_init(NULL);\n\n#ifdef SPECIAL_DUMP_INTERVALS \n  {\n    // temporary debugging code for x86 / ppc64\n\n    extern void hpcrun_dump_intervals(void* addr2);\n    char* addr1 = getenv(\"ADDR1\");\n    char* addr2 = getenv(\"ADDR2\");\n \n    if (addr1 != NULL) {\n      addr1 = (void*) (uintptr_t) strtol(addr1, NULL, 0);\n      fprintf(stderr,\"address 1 = %p\\n\", addr1);\n      hpcrun_dump_intervals(addr1);\n      fflush(NULL);\n    }\n\n    if (addr2 != NULL) {\n      addr2 = (void*) (uintptr_t) strtol(addr2, NULL, 0);\n      fprintf(stderr,\"address 2 = %p\\n\", addr2);\n      hpcrun_dump_intervals(addr2);\n      fflush(NULL);\n    }\n    if (addr1 || addr2) monitor_real_exit(0);\n  }\n#endif\n\n  // start the sampling process\n\n  hpcrun_enable_sampling();\n  hpcrun_set_safe_to_sync();\n\n  // release the wallclock handler -for this thread-\n  hpcrun_itimer_wallclock_ok(true);\n\n  // NOTE: hack to ensure that sample source start can be delayed until mpi_init\n  if (hpctoolkit_sampling_is_active() && ! getenv(\"HPCRUN_MPI_ONLY\")) {\n      SAMPLE_SOURCES(start);\n  }\n  hpcrun_is_initialized_private = true;\n}\n\n#define GET_NEW_AUX_CLEANUP_NODE(node_ptr) do {                               \\\nif (hpcrun_aux_cleanup_free_list_head) {                                      \\\nnode_ptr = hpcrun_aux_cleanup_free_list_head;                                 \\\nhpcrun_aux_cleanup_free_list_head = hpcrun_aux_cleanup_free_list_head->next;  \\\n} else {                                                                      \\\nnode_ptr = (hpcrun_aux_cleanup_t *) hpcrun_malloc(sizeof(hpcrun_aux_cleanup_t));         \\\n}                                                                             \\\n} while(0)\n\n#define ADD_TO_FREE_AUX_CLEANUP_LIST(node_ptr) do { (node_ptr)->next = hpcrun_aux_cleanup_free_list_head; \\\nhpcrun_aux_cleanup_free_list_head = (node_ptr); }while(0)\n\n// Add a callback function and its argument to a doubly-linked list of things to cleanup at process termination. \n// Don't rely on sample source data in the implementation of the callback.\n// Caller needs to ensure that the entry is safe.\n\nhpcrun_aux_cleanup_t * hpcrun_process_aux_cleanup_add( void (*func) (void *), void * arg) \n{\n  spinlock_lock(&hpcrun_aux_cleanup_lock); \n  hpcrun_aux_cleanup_t * node;\n  GET_NEW_AUX_CLEANUP_NODE(node);\n  node->func = func;\n  node->arg = arg;\n \n  node->prev = NULL;\n  node->next = hpcrun_aux_cleanup_list_head;\n  if (hpcrun_aux_cleanup_list_head) {\n    hpcrun_aux_cleanup_list_head->prev = node;\n  }\n  hpcrun_aux_cleanup_list_head = node;\n  spinlock_unlock(&hpcrun_aux_cleanup_lock); \n  return node;\n}\n\n// Delete a node from cleanup list.\n// Caller needs to ensure that the entry is safe.\nvoid hpcrun_process_aux_cleanup_remove(hpcrun_aux_cleanup_t * node)\n{\n  assert (node != NULL);\n  spinlock_lock(&hpcrun_aux_cleanup_lock); \n  if (node->prev) {\n    if (node->next) {\n      node->next->prev = node->prev;\n    }\n    node->prev->next = node->next;\n  } else {\n    if (node->next) {\n      node->next->prev = NULL;\n    }\n    hpcrun_aux_cleanup_list_head = node->next;\n  }\n  ADD_TO_FREE_AUX_CLEANUP_LIST(node);   \n  spinlock_unlock(&hpcrun_aux_cleanup_lock); \n}\n\n// This will be called after sample sources have been shutdown.\n// Don't rely on sample source data in the implementation of the callback.\nstatic void hpcrun_process_aux_cleanup_action()\n{\n  // Assumed to be single threaded and hence not taking any locks here\n  hpcrun_aux_cleanup_t * p = hpcrun_aux_cleanup_list_head;\n  hpcrun_aux_cleanup_t * q;\n  while (p) {\n    p->func(p->arg);\n    q = p;\n    p = p->next;\n    ADD_TO_FREE_AUX_CLEANUP_LIST(q);\n  }\n  hpcrun_aux_cleanup_list_head = NULL;\n}\n\n/***\n * This routine is called at the end of the program to:\n *   call sample-sources to stop and shutdown \n *   clean hpcrun action\n *   clean thread manager (write profile data and closing resources)\n *   terminate hpcfnbounds\n ***/ \nvoid\nhpcrun_fini_internal()\n{\n  hpcrun_disable_sampling();\n\n  TMSG(FINI, \"process\");\n\n  hpcrun_unthreaded_data();\n\n  if (hpcrun_is_initialized()) {\n    hpcrun_is_initialized_private = false;\n\n    TMSG(FINI, \"process attempting sample shutdown\");\n\n    SAMPLE_SOURCES(stop);\n    SAMPLE_SOURCES(shutdown);\n\n    // shutdown LUSH agents\n    if (lush_agents) {\n      lush_agent_pool__fini(lush_agents);\n      lush_agents = NULL;\n    }\n\n    // N.B. short-circuit, if monitoring is disabled\n    if (hpcrun_get_disabled()) {\n      return;\n    }\n\n    // Call all registered auxiliary functions before termination.\n    // This typically means flushing files that were not done by their creators.\n\n    hpcrun_process_aux_cleanup_action();\n\n    // write all threads' profile data and close trace file\n    hpcrun_threadMgr_data_fini(hpcrun_get_thread_data());\n\n    fnbounds_fini();\n    hpcrun_stats_print_summary();\n    messages_fini();\n  }\n}\n\n\n//------------------------------------\n// thread level \n//------------------------------------\n\n#ifdef USE_GCC_THREAD\nextern __thread monitor_tid;\n#endif // USE_GCC_THREAD\n\nvoid\nhpcrun_init_thread_support()\n{\n  hpcrun_init_pthread_key();\n  hpcrun_set_thread0_data();\n  hpcrun_threaded_data();\n  SAMPLE_SOURCES(thread_init);\n}\n\n// DEBUG support\nstatic void\nlogit(cct_node_t* n, cct_op_arg_t arg, size_t l)\n{\n  int iarg = (int) (intptr_t) arg;\n  TMSG(THREAD_CTXT, \"thr %d -- %d: lm-id: %d  lm-ip: %p\",\n       iarg,\n       hpcrun_cct_persistent_id(n),\n       hpcrun_cct_addr(n)->ip_norm.lm_id,\n       hpcrun_cct_addr(n)->ip_norm.lm_ip);\n}\n\nvoid*\nhpcrun_thread_init(int id, local_thread_data_t* local_thread_data) // cct_ctxt_t* thr_ctxt)\n{\n  cct_ctxt_t* thr_ctxt = local_thread_data ? local_thread_data->thr_ctxt : NULL;\n\n  hpcrun_mmap_init();\n\n  // ----------------------------------------\n  // call thread manager to get a thread data. If there is unused thread data,\n  //  we can recycle it, otherwise we need to allocate a new one.\n  // If we allocate a new one, we need to initialize the data and trace file.\n  // ----------------------------------------\n\n  thread_data_t* td = NULL;\n  hpcrun_threadMgr_data_get(id, thr_ctxt, &td);\n  hpcrun_set_thread_data(td);\n\n  td->inside_hpcrun = 1;  // safe enter, disable signals\n\n  if (! thr_ctxt) EMSG(\"Thread id %d passes null context\", id);\n  \n  if (ENABLED(THREAD_CTXT))\n    hpcrun_walk_path(thr_ctxt->context, logit, (cct_op_arg_t) (intptr_t) id);\n\n  epoch_t* epoch = TD_GET(core_profile_trace_data.epoch);\n\n  // handle event sets for sample sources\n  SAMPLE_SOURCES(gen_event_set,lush_metrics);\n\n  // sample sources take thread specific action prior to start (often is a 'registration' action);\n  SAMPLE_SOURCES(thread_init_action);\n\n  // release the wallclock handler -for this thread-\n  hpcrun_itimer_wallclock_ok(true);\n  // start the sample sources\n  if (! hpcrun_thread_suppress_sample)\n    SAMPLE_SOURCES(start);\n\n  return (void*) epoch;\n}\n\n/**\n * Routine to handle the end of the thread:\n *   call sample sources to stop and finish the thread action\n *   notify thread manager of the end of the thread (so that it can\n *      either clean-up the data, or reuse the data for another thread)\n **/ \nvoid\nhpcrun_thread_fini(epoch_t *epoch)\n{\n  TMSG(FINI,\"thread fini\");\n\n  // take no action if this thread is suppressed\n  if (hpcrun_thread_suppress_sample) return;\n\n  if (hpcrun_is_initialized()) {\n    TMSG(FINI,\"thread finit stops sampling\");\n    SAMPLE_SOURCES(stop);\n    SAMPLE_SOURCES(thread_fini_action);\n    lushPthr_thread_fini(&TD_GET(pthr_metrics));\n\n    if (hpcrun_get_disabled()) {\n      return;\n    }\n\n    // inform thread manager that we are terminating the thread\n    // thread manager may enqueue the thread_data (in compact mode)\n    // or flush the data into hpcrun file\n\n    thread_data_t* td = hpcrun_get_thread_data();\n    hpcrun_threadMgr_data_put(epoch, td);\n\n    TMSG(PROCESS, \"End of thread\");\n  }\n}\n\n\n//***************************************************************************\n// hpcrun debugging support \n//***************************************************************************\n\nvolatile int HPCRUN_DEBUGGER_WAIT = 1;\n\nvoid \nhpcrun_continue()\n{\n  HPCRUN_DEBUGGER_WAIT = 0;\n}\n\n\nvoid \nhpcrun_wait()\n{\n  const char* HPCRUN_WAIT = getenv(\"HPCRUN_WAIT\");\n  if (HPCRUN_WAIT) {\n    while (HPCRUN_DEBUGGER_WAIT);\n\n    // when the user program forks, we don't want to wait to have a debugger \n    // attached for each exec along a chain of fork/exec. if that is what\n    // you want when debugging, make your own arrangements. \n    unsetenv(\"HPCRUN_WAIT\");\n  }\n}\n\n\n\n//***************************************************************************\n// process control (via libmonitor)\n//***************************************************************************\n\nvoid*\nmonitor_init_process(int *argc, char **argv, void* data)\n{\n  char* process_name;\n  char  buf[PROC_NAME_LEN];\n\n  hpcrun_thread_suppress_sample = false;\n\n  fork_data_t* fork_data = (fork_data_t*) data;\n  bool is_child = data && fork_data->is_child;\n\n  hpcrun_wait();\n\n#if 0\n  // temporary patch to avoid deadlock within PAMI's optimized implementation \n  // of all-to-all. a problem was observed when PAMI's optimized all-to-all \n  // implementation was invoked on behalf of darshan_shutdown \n  putenv(\"PAMID_COLLECTIVES=0\");\n#endif // defined(HOST_SYSTEM_IBM_BLUEGENE)\n\n  hpcrun_sample_prob_init();\n\n  // FIXME: if the process fork()s before main, then argc and argv\n  // will be NULL in the child here.  MPT on CNL does this.\n  process_name = \"unknown\";\n  if (argv != NULL && argv[0] != NULL) {\n    process_name = argv[0];\n  }\n  else {\n    int len = readlink(\"/proc/self/exe\", buf, PROC_NAME_LEN - 1);\n    if (len > 1) {\n      buf[len] = 0;\n      process_name = buf;\n    }\n  }\n\n  hpcrun_set_using_threads(false);\n\n  copy_execname(process_name);\n  hpcrun_files_set_executable(process_name);\n\n  hpcrun_registered_sources_init();\n\n  messages_init();\n\n  hpcrun_do_custom_init();\n\n  // for debugging, limit the life of the execution with an alarm.\n  char* life  = getenv(\"HPCRUN_LIFETIME\");\n  if (life != NULL){\n    int seconds = atoi(life);\n    if (seconds > 0) alarm((unsigned int) seconds);\n  }\n\n  char* s = getenv(HPCRUN_EVENT_LIST);\n\n  if (! is_child) {\n    hpcrun_sample_sources_from_eventlist(s);\n  }\n\n  hpcrun_set_abort_timeout();\n\n  hpcrun_process_sample_source_none();\n\n  if (!hpcrun_get_disabled()) {\n    hpcrun_files_set_directory();\n  }\n\n  TMSG(PROCESS,\"hpcrun_files_set_executable called w process name = %s\", process_name);\n\n  TMSG(PROCESS,\"init\");\n\n  messages_logfile_create();\n  hpcrun_sample_prob_mesg();\n\n  TMSG(PROCESS, \"I am a %s process\", is_child ? \"child\" : \"parent\");\n\n  hpcrun_init_internal(is_child);\n\n  if (ENABLED(TST)){\n    EEMSG(\"TST debug ctl is active!\");\n    STDERR_MSG(\"Std Err message appears\");\n  }\n\n  hpcrun_safe_exit();\n\n  return data;\n}\n\n\nvoid\nmonitor_fini_process(int how, void* data)\n{\n  if (hpcrun_get_disabled()) {\n    return;\n  }\n\n  hpcrun_safe_enter();\n\n  hpcrun_fini_internal();\n\n  hpcrun_safe_exit();\n}\n\n\nstatic fork_data_t from_fork;\n\nvoid*\nmonitor_pre_fork(void)\n{\n  if (! hpcrun_is_initialized()) {\n    return NULL;\n  }\n  hpcrun_safe_enter();\n\n  TMSG(PRE_FORK,\"pre_fork call\");\n\n  if (SAMPLE_SOURCES(started)) {\n    TMSG(PRE_FORK,\"sources shutdown\");\n    SAMPLE_SOURCES(stop);\n    SAMPLE_SOURCES(shutdown);\n  }\n\n  TMSG(PRE_FORK,\"finished pre_fork call\");\n  from_fork.is_child = true;\n\n  hpcrun_safe_exit();\n\n  return (void *)(&from_fork);\n}\n\n\nvoid\nmonitor_post_fork(pid_t child, void* data)\n{\n  if (! hpcrun_is_initialized()) {\n    return;\n  }\n  hpcrun_safe_enter();\n\n  TMSG(POST_FORK,\"Post fork call\");\n\n  if (!SAMPLE_SOURCES(started)){\n    TMSG(POST_FORK,\"sample sources re-init+re-start\");\n    SAMPLE_SOURCES(init);\n    SAMPLE_SOURCES(gen_event_set,0); // FIXME: pass lush_metrics here somehow\n    SAMPLE_SOURCES(start);\n  }\n\n  TMSG(POST_FORK,\"Finished post fork\");\n  hpcrun_safe_exit();\n}\n\n\n//***************************************************************************\n// MPI control (via libmonitor)\n//***************************************************************************\n\n//\n// On some systems, taking a signal inside MPI_Init breaks MPI_Init.\n// So, turn off sampling (not just block) within MPI_Init, with the\n// control variable MPI_RISKY to bypass this.  This is a problem on\n// IBM BlueGene and Cray XK6 (interlagos).\n//\nvoid\nmonitor_mpi_pre_init(void)\n{\n  hpcrun_safe_enter();\n\n  TMSG(MPI, \"Pre MPI_Init\");\n  if (! ENABLED(MPI_RISKY)) {\n    // Turn sampling off.\n    TMSG(MPI, \"Stopping Sample Sources\");\n    SAMPLE_SOURCES(stop);\n  }\n  hpcrun_safe_exit();\n}\n\n\nvoid\nmonitor_init_mpi(int *argc, char ***argv)\n{\n  hpcrun_safe_enter();\n\n  TMSG(MPI, \"Post MPI_Init\");\n  if (! ENABLED(MPI_RISKY)) {\n    // Turn sampling back on.\n    TMSG(MPI, \"Restart Sample Sources\");\n    SAMPLE_SOURCES(start);\n  }\n  hpcrun_safe_exit();\n}\n\n\n//***************************************************************************\n// thread control (via libmonitor)\n//***************************************************************************\n\nvoid\nmonitor_init_thread_support(void)\n{\n  hpcrun_safe_enter();\n\n  TMSG(THREAD,\"REALLY init_thread_support ---\");\n  hpcrun_init_thread_support();\n  hpcrun_set_using_threads(1);\n  TMSG(THREAD,\"Init thread support done\");\n\n  hpcrun_safe_exit();\n}\n\nvoid*\nmonitor_thread_pre_create(void)\n{\n  // N.B.: monitor_thread_pre_create() can be called before\n  // monitor_init_thread_support() or even monitor_init_process().\n  if (! hpcrun_is_initialized() || hpcrun_get_disabled()) {\n    return NULL;\n  }\n  hpcrun_safe_enter();\n  local_thread_data_t* rv = hpcrun_malloc(sizeof(local_thread_data_t));\n\n  // INVARIANTS at this point:\n  //   1. init-process has occurred.\n  //   2. current execution context is either the spawning process or thread.\n  TMSG(THREAD,\"pre create\");\n\n  // -------------------------------------------------------\n  // Capture new thread's creation context, skipping 1 level of context\n  //   WARNING: Do not move the call to getcontext()\n  // -------------------------------------------------------\n  cct_ctxt_t* thr_ctxt = NULL;\n\n  ucontext_t context;\n  int ret = getcontext(&context);\n  if (ret != 0) {\n    EMSG(\"error: monitor_thread_pre_create: getcontext = %d\", ret);\n    goto fini;\n  }\n  \n  cct_node_t* n = hpcrun_gen_thread_ctxt(&context);\n\n  TMSG(THREAD,\"before lush malloc\");\n  TMSG(MALLOC,\" -thread_precreate: lush malloc\");\n  epoch_t* epoch = hpcrun_get_thread_epoch();\n  thr_ctxt = hpcrun_malloc(sizeof(cct_ctxt_t));\n  TMSG(THREAD,\"after lush malloc, thr_ctxt = %p\",thr_ctxt);\n  thr_ctxt->context = n;\n  thr_ctxt->parent = epoch->csdata_ctxt;\n  TMSG(THREAD_CTXT, \"context = %d, parent = %d\", hpcrun_cct_persistent_id(thr_ctxt->context),\n       thr_ctxt->parent ? hpcrun_cct_persistent_id(thr_ctxt->parent->context) : -1);\n  rv->thr_ctxt = thr_ctxt;\n\n fini:\n\n  TMSG(THREAD,\"->finish pre create\");\n  hpcrun_safe_exit();\n\n  return rv;\n}\n\n\nvoid\nmonitor_thread_post_create(void* data)\n{\n  if (! hpcrun_is_initialized()) {\n    return;\n  }\n  hpcrun_safe_enter();\n\n  TMSG(THREAD,\"post create\");\n  TMSG(THREAD,\"done post create\");\n\n  hpcrun_safe_exit();\n}\n\nvoid* \nmonitor_init_thread(int tid, void* data)\n{\n#ifdef USE_GCC_THREAD\n  monitor_tid = tid;\n#endif\n\n  hpcrun_thread_suppress_sample = false;\n  //\n  // Do nothing if ignoring thread\n  //\n  Token_iterate(tok, getenv(\"HPCRUN_IGNORE_THREAD\"), \" ,\",\n\t\t{\n\t\t  if (atoi(tok) == tid) {\n\t\t    hpcrun_thread_suppress_sample = true;\n\t\t  }\n\t\t});\n\n\n  TMSG(THREAD,\"init thread %d\",tid);\n  void* thread_data = hpcrun_thread_init(tid, (local_thread_data_t*) data);\n  TMSG(THREAD,\"back from init thread %d\",tid);\n\n  hpcrun_threadmgr_thread_new();\n\n  hpcrun_safe_exit();\n\n  return thread_data;\n}\n\n\nvoid\nmonitor_fini_thread(void* init_thread_data)\n{\n  hpcrun_threadmgr_thread_delete();\n\n  if (hpcrun_get_disabled()) {\n    return;\n  }\n\n  hpcrun_safe_enter();\n\n  epoch_t *epoch = (epoch_t *)init_thread_data;\n  hpcrun_thread_fini(epoch);\n  hpcrun_safe_exit();\n}\n\n\nsize_t\nmonitor_reset_stacksize(size_t old_size)\n{\n  static const size_t MEG = (1024 * 1024);\n\n  size_t new_size = old_size + MEG;\n\n  if (new_size < 2 * MEG)\n    new_size = 2 * MEG;\n\n  return new_size;\n}\n\n\n//***************************************************************************\n// (sig)longjmp for trampoline (via monitor extensions)\n//***************************************************************************\n\n// FIXME: Comment-out the overrides of longjmp() and siglongjmp() for\n// now.  We currently don't use them and _FORTIFY_SOURCE in newer gnu\n// libc breaks this code.\n//\n// Before re-enabling, we need to better understand how gnu libc and\n// <bits/setjmp2.h> map longjmp() and siglongjmp() to __longjmp_chk()\n// and what is the right way to intercept them.  Also, find a way\n// around the 3-1 name mapping.\n//\n// Note: be sure to reset 'monitor_wrap_names' in hpclink.\n\n#if 1\n\nstatic siglongjmp_fcn *real_siglongjmp = NULL;\n\nsiglongjmp_fcn*\nhpcrun_get_real_siglongjmp(void)\n{\n  return real_siglongjmp;\n}\n\nvoid\nhpcrun_set_real_siglongjmp(void)\n{\n  MONITOR_EXT_GET_NAME(real_siglongjmp, siglongjmp);\n}\n\n#else\n\ntypedef void longjmp_fcn(jmp_buf, int);\n\n#ifdef HPCRUN_STATIC_LINK\nextern longjmp_fcn    __real_longjmp;\nextern siglongjmp_fcn __real_siglongjmp;\n#endif\n\nstatic longjmp_fcn    *real_longjmp = NULL;\nstatic siglongjmp_fcn *real_siglongjmp = NULL;\n\n\nsiglongjmp_fcn*\nhpcrun_get_real_siglongjmp(void)\n{\n  return real_siglongjmp;\n}\n\nvoid\nhpcrun_set_real_siglongjmp(void)\n{\n  MONITOR_EXT_GET_NAME_WRAP(real_siglongjmp, siglongjmp);\n}\n\nvoid\nMONITOR_EXT_WRAP_NAME(longjmp)(jmp_buf buf, int val)\n{\n  hpcrun_safe_enter();\n  MONITOR_EXT_GET_NAME_WRAP(real_longjmp, longjmp);\n\n  hpcrun_safe_exit();\n  (*real_longjmp)(buf, val);\n\n  // Never reached, but silence a compiler warning.\n  EEMSG(\"return from real longjmp(), should never get here\");\n  _exit(1);\n}\n\n\nvoid\nMONITOR_EXT_WRAP_NAME(siglongjmp)(sigjmp_buf buf, int val)\n{\n  hpcrun_safe_enter();\n  hpcrun_get_real_siglongjmp();\n\n  hpcrun_safe_exit();\n  (*real_siglongjmp)(buf, val);\n\n  // Never reached, but silence a compiler warning.\n  EEMSG(\"return from real siglongjmp(), should never get here\");\n  _exit(1);\n}\n#endif\n\n//***************************************************************************\n// thread control (via our monitoring extensions)\n//***************************************************************************\n\n// ---------------------------------------------------------\n// mutex_lock\n// ---------------------------------------------------------\n\n#ifdef LUSH_PTHREADS\n\ntypedef int mutex_lock_fcn(pthread_mutex_t *);\n\n#ifdef HPCRUN_STATIC_LINK\n//extern mutex_lock_fcn __real_pthread_mutex_lock;\nextern mutex_lock_fcn __real_pthread_mutex_trylock;\nextern mutex_lock_fcn __real_pthread_mutex_unlock;\n#endif // HPCRUN_STATIC_LINK\n\n//static mutex_lock_fcn *real_mutex_lock = NULL;\nstatic mutex_lock_fcn *real_mutex_trylock = NULL;\nstatic mutex_lock_fcn *real_mutex_unlock = NULL;\n\n\nint\nMONITOR_EXT_WRAP_NAME(pthread_mutex_lock)(pthread_mutex_t* lock)\n{\n  // N.B.: do not use dlsym() to obtain \"real_pthread_mutex_lock\"\n  // because dlsym() indirectly calls calloc(), which can call\n  // pthread_mutex_lock().\n  extern int __pthread_mutex_lock(pthread_mutex_t* lock);\n  //MONITOR_EXT_GET_NAME_WRAP(real_mutex_lock, pthread_mutex_lock);\n\n  if (0) { TMSG(MONITOR_EXTS, \"%s\", __func__); }\n\n  if (hpcrun_is_initialized()) {\n    lushPthr_mutexLock_pre(&TD_GET(pthr_metrics), lock);\n  }\n\n  int ret = __pthread_mutex_lock(lock);\n\n  if (hpcrun_is_initialized()) {\n    lushPthr_mutexLock_post(&TD_GET(pthr_metrics), lock /*,ret*/);\n  }\n\n  return ret;\n}\n\n\nint\nMONITOR_EXT_WRAP_NAME(pthread_mutex_trylock)(pthread_mutex_t* lock)\n{\n  MONITOR_EXT_GET_NAME_WRAP(real_mutex_trylock, pthread_mutex_trylock);\n  if (0) { TMSG(MONITOR_EXTS, \"%s\", __func__); }\n\n  int ret = (*real_mutex_trylock)(lock);\n\n  if (hpcrun_is_initialized()) {\n    lushPthr_mutexTrylock_post(&TD_GET(pthr_metrics), lock, ret);\n  }\n\n  return ret;\n}\n\n\nint\nMONITOR_EXT_WRAP_NAME(pthread_mutex_unlock)(pthread_mutex_t* lock)\n{\n  MONITOR_EXT_GET_NAME_WRAP(real_mutex_unlock, pthread_mutex_unlock);\n  if (0) { TMSG(MONITOR_EXTS, \"%s\", __func__); }\n\n  int ret = (*real_mutex_unlock)(lock);\n\n  if (hpcrun_is_initialized()) {\n    lushPthr_mutexUnlock_post(&TD_GET(pthr_metrics), lock /*,ret*/);\n  }\n\n  return ret;\n}\n\n#endif // LUSH_PTHREADS\n\n\n// ---------------------------------------------------------\n// spin_lock\n// ---------------------------------------------------------\n\n#ifdef LUSH_PTHREADS\n\ntypedef int spinlock_fcn(pthread_spinlock_t *);\n\n#ifdef HPCRUN_STATIC_LINK\nextern spinlock_fcn __real_pthread_spin_lock;\nextern spinlock_fcn __real_pthread_spin_trylock;\nextern spinlock_fcn __real_pthread_spin_unlock;\nextern spinlock_fcn __real_pthread_spin_destroy;\n#endif // HPCRUN_STATIC_LINK\n\nstatic spinlock_fcn *real_spin_lock = NULL;\nstatic spinlock_fcn *real_spin_trylock = NULL;\nstatic spinlock_fcn *real_spin_unlock = NULL;\nstatic spinlock_fcn *real_spin_destroy = NULL;\n\n\nint\nMONITOR_EXT_WRAP_NAME(pthread_spin_lock)(pthread_spinlock_t* lock)\n{\n  MONITOR_EXT_GET_NAME_WRAP(real_spin_lock, pthread_spin_lock);\n  if (0) { TMSG(MONITOR_EXTS, \"%s\", __func__); }\n\n  pthread_spinlock_t* real_lock = lock;\n  if (hpcrun_is_initialized()) {\n    real_lock = lushPthr_spinLock_pre(&TD_GET(pthr_metrics), lock);\n  }\n\n#if (LUSH_PTHR_FN_TY == 3)\n  int ret = lushPthr_spin_lock(lock);\n#else\n  int ret = (*real_spin_lock)(real_lock);\n#endif\n\n  if (hpcrun_is_initialized()) {\n    lushPthr_spinLock_post(&TD_GET(pthr_metrics), lock /*,ret*/);\n  }\n\n  return ret;\n}\n\n\nint\nMONITOR_EXT_WRAP_NAME(pthread_spin_trylock)(pthread_spinlock_t* lock)\n{\n  MONITOR_EXT_GET_NAME_WRAP(real_spin_trylock, pthread_spin_trylock);\n  if (0) { TMSG(MONITOR_EXTS, \"%s\", __func__); }\n\n  pthread_spinlock_t* real_lock = lock;\n  if (hpcrun_is_initialized()) {\n    real_lock = lushPthr_spinTrylock_pre(&TD_GET(pthr_metrics), lock);\n  }\n\n#if (LUSH_PTHR_FN_TY == 3)\n  int ret = lushPthr_spin_trylock(lock);\n#else\n  int ret = (*real_spin_trylock)(real_lock);\n#endif\n\n  if (hpcrun_is_initialized()) {\n    lushPthr_spinTrylock_post(&TD_GET(pthr_metrics), lock, ret);\n  }\n\n  return ret;\n}\n\n\nint\nMONITOR_EXT_WRAP_NAME(pthread_spin_unlock)(pthread_spinlock_t* lock)\n{\n  MONITOR_EXT_GET_NAME_WRAP(real_spin_unlock, pthread_spin_unlock);\n  if (0) { TMSG(MONITOR_EXTS, \"%s\", __func__); }\n\n  pthread_spinlock_t* real_lock = lock;\n  if (hpcrun_is_initialized()) {\n    real_lock = lushPthr_spinUnlock_pre(&TD_GET(pthr_metrics), lock);\n  }\n\n#if (LUSH_PTHR_FN_TY == 3)\n  int ret = lushPthr_spin_unlock(lock);\n#else\n  int ret = (*real_spin_unlock)(real_lock);\n#endif\n\n  if (hpcrun_is_initialized()) {\n    lushPthr_spinUnlock_post(&TD_GET(pthr_metrics), lock /*,ret*/);\n  }\n\n  return ret;\n}\n\n\nint\nMONITOR_EXT_WRAP_NAME(pthread_spin_destroy)(pthread_spinlock_t* lock)\n{\n  MONITOR_EXT_GET_NAME_WRAP(real_spin_destroy, pthread_spin_destroy);\n  if (0) { TMSG(MONITOR_EXTS, \"%s\", __func__); }\n\n  pthread_spinlock_t* real_lock = lock;\n  if (hpcrun_is_initialized()) {\n    real_lock = lushPthr_spinDestroy_pre(&TD_GET(pthr_metrics), lock);\n  }\n\n  int ret = (*real_spin_destroy)(real_lock);\n\n  if (hpcrun_is_initialized()) {\n    lushPthr_spinDestroy_post(&TD_GET(pthr_metrics), lock /*,ret*/);\n  }\n\n  return ret;\n}\n\n#endif // LUSH_PTHREADS\n\n\n// ---------------------------------------------------------\n// cond_wait\n// ---------------------------------------------------------\n\n#ifdef LUSH_PTHREADS\n\ntypedef int cond_init_fcn(pthread_cond_t *, const pthread_condattr_t *);\ntypedef int cond_destroy_fcn(pthread_cond_t *);\ntypedef int cond_wait_fcn(pthread_cond_t *, pthread_mutex_t *);\ntypedef int cond_timedwait_fcn(pthread_cond_t *, pthread_mutex_t *,\n\t\t\t       const struct timespec *);\ntypedef int cond_signal_fcn(pthread_cond_t *);\n\n#ifdef HPCRUN_STATIC_LINK\nextern cond_init_fcn    __real_pthread_cond_init;\nextern cond_destroy_fcn __real_pthread_cond_destroy;\nextern cond_wait_fcn      __real_pthread_cond_wait;\nextern cond_timedwait_fcn __real_pthread_cond_timedwait;\nextern cond_signal_fcn __real_pthread_cond_signal;\nextern cond_signal_fcn __real_pthread_cond_broadcast;\n#endif // HPCRUN_STATIC_LINK\n\nstatic cond_init_fcn    *real_cond_init = NULL;\nstatic cond_destroy_fcn *real_cond_destroy = NULL;\nstatic cond_wait_fcn      *real_cond_wait = NULL;\nstatic cond_timedwait_fcn *real_cond_timedwait = NULL;\nstatic cond_signal_fcn *real_cond_signal = NULL;\nstatic cond_signal_fcn *real_cond_broadcast = NULL;\n\n\n// N.B.: glibc defines multiple versions of the cond-wait functions.\n// For some reason, dlsym-ing any one routine does *not* necessarily\n// obtain the correct version.  It turns out to be necessary to\n// override a 'covering set' of the cond-wait functions to obtain a\n// consistent set.\n\nint\nMONITOR_EXT_WRAP_NAME(pthread_cond_init)(pthread_cond_t* cond,\n\t\t\t\t\t const pthread_condattr_t* attr)\n{\n  MONITOR_EXT_GET_NAME_WRAP(real_cond_init, pthread_cond_init);\n  if (0) { TMSG(MONITOR_EXTS, \"%s\", __func__); }\n  return (*real_cond_init)(cond, attr);\n}\n\n\nint\nMONITOR_EXT_WRAP_NAME(pthread_cond_destroy)(pthread_cond_t* cond)\n{\n  MONITOR_EXT_GET_NAME_WRAP(real_cond_destroy, pthread_cond_destroy);\n  if (0) { TMSG(MONITOR_EXTS, \"%s\", __func__); }\n  return (*real_cond_destroy)(cond);\n}\n\n\nint\nMONITOR_EXT_WRAP_NAME(pthread_cond_wait)(pthread_cond_t* cond,\n\t\t\t\t\t pthread_mutex_t* mutex)\n{\n  MONITOR_EXT_GET_NAME_WRAP(real_cond_wait, pthread_cond_wait);\n  if (0) { TMSG(MONITOR_EXTS, \"%s\", __func__); }\n\n  if (hpcrun_is_initialized()) {\n    lushPthr_condwait_pre(&TD_GET(pthr_metrics));\n  }\n\n  int ret = (*real_cond_wait)(cond, mutex);\n\n  if (hpcrun_is_initialized()) {\n    lushPthr_condwait_post(&TD_GET(pthr_metrics) /*,ret*/);\n  }\n\n  return ret;\n}\n\n\nint\nMONITOR_EXT_WRAP_NAME(pthread_cond_timedwait)(pthread_cond_t* cond,\n\t\t\t\t\t      pthread_mutex_t* mutex,\n\t\t\t\t\t      const struct timespec* tspec)\n{\n  MONITOR_EXT_GET_NAME_WRAP(real_cond_timedwait, pthread_cond_timedwait);\n  if (0) { TMSG(MONITOR_EXTS, \"%s\", __func__); }\n\n  if (hpcrun_is_initialized()) {\n    lushPthr_condwait_pre(&TD_GET(pthr_metrics));\n  }\n\n  int ret = (*real_cond_timedwait)(cond, mutex, tspec);\n\n  if (hpcrun_is_initialized()) {\n    lushPthr_condwait_post(&TD_GET(pthr_metrics) /*,ret*/);\n  }\n\n  return ret;\n}\n\n\nint\nMONITOR_EXT_WRAP_NAME(pthread_cond_signal)(pthread_cond_t* cond)\n{\n  MONITOR_EXT_GET_NAME_WRAP(real_cond_signal, pthread_cond_signal);\n  if (0) { TMSG(MONITOR_EXTS, \"%s\", __func__); }\n  return (*real_cond_signal)(cond);\n}\n\n\nint\nMONITOR_EXT_WRAP_NAME(pthread_cond_broadcast)(pthread_cond_t* cond)\n{\n  MONITOR_EXT_GET_NAME_WRAP(real_cond_broadcast, pthread_cond_broadcast);\n  if (0) { TMSG(MONITOR_EXTS, \"%s\", __func__); }\n  return (*real_cond_broadcast)(cond);\n}\n\n#endif // LUSH_PTHREADS\n\n\n//***************************************************************************\n// dynamic linking control (via libmonitor)\n//***************************************************************************\n\n\n#ifndef HPCRUN_STATIC_LINK\n\nvoid\nmonitor_pre_dlopen(const char* path, int flags)\n{\n  if (! hpcrun_is_initialized()) {\n    return;\n  }\n  if (! hpcrun_safe_enter()) {\n    return;\n  }\n  hpcrun_pre_dlopen(path, flags);\n  hpcrun_safe_exit();\n}\n\n\nvoid\nmonitor_dlopen(const char *path, int flags, void* handle)\n{\n  if (! hpcrun_is_initialized()) {\n    return;\n  }\n  if (! hpcrun_safe_enter()) {\n    return;\n  }\n  hpcrun_dlopen(path, flags, handle);\n  hpcrun_safe_exit();\n}\n\n\nvoid\nmonitor_dlclose(void* handle)\n{\n  if (! hpcrun_is_initialized()) {\n    return;\n  }\n  hpcrun_safe_enter();\n  hpcrun_dlclose(handle);\n  hpcrun_safe_exit();\n}\n\n\nvoid\nmonitor_post_dlclose(void* handle, int ret)\n{\n  if (! hpcrun_is_initialized()) {\n    return;\n  }\n  hpcrun_safe_enter();\n  hpcrun_post_dlclose(handle, ret);\n  hpcrun_safe_exit();\n}\n\n#endif /* ! HPCRUN_STATIC_LINK */\n\n\n//----------------------------------------------------------------------\n\n// FIXME: Add a weak symbol for cplus_demangle() for hpclink in the\n// static case.  Something is pulling in hpctoolkit_demangle() and\n// thus cplus_demangle() into libhpcrun.o and this breaks hpclink,\n// even though nothing actually uses them.  But the real fix should be\n// in the lib Makefiles.\n\n#ifdef HPCRUN_STATIC_LINK\n\nchar * __attribute__ ((weak))\ncplus_demangle(char *str, int opts)\n{\n  return strdup(str);\n}\n\n#endif\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/sample_event.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n\n#include <setjmp.h>\n#include <string.h>\n\n//*************************** User Include Files ****************************\n\n#include <unwind/common/backtrace.h>\n#include <cct/cct.h>\n#include \"hpcrun_dlfns.h\"\n#include \"hpcrun_stats.h\"\n#include \"hpcrun-malloc.h\"\n#include \"fnbounds_interface.h\"\n#include \"main.h\"\n#include \"metrics_types.h\"\n#include \"cct2metrics.h\"\n#include \"metrics.h\"\n#include \"segv_handler.h\"\n#include \"epoch.h\"\n#include \"thread_data.h\"\n#include \"trace.h\"\n#include \"handling_sample.h\"\n#include \"unwind.h\"\n#include <utilities/arch/context-pc.h>\n#include \"hpcrun-malloc.h\"\n#include \"sample_event.h\"\n#include \"sample_sources_all.h\"\n#include \"start-stop.h\"\n#include \"uw_recipe_map.h\"\n#include \"validate_return_addr.h\"\n#include \"write_data.h\"\n#include \"cct_insert_backtrace.h\"\n\n#include <monitor.h>\n\n#include <messages/messages.h>\n\n#include <lib/prof-lean/hpcrun-fmt.h>\n\n//*************************** Forward Declarations **************************\n\n\n//***************************************************************************\n\n//************************* Local helper routines ***************************\n\n// ------------------------------------------------------------\n// recover from SEGVs and partial unwinds\n// ------------------------------------------------------------\n\nstatic void\nhpcrun_cleanup_partial_unwind(void)\n{\n  thread_data_t* td = hpcrun_get_thread_data();\n  sigjmp_buf_t* it = &(td->bad_unwind);\n\n  memset((void *)it->jb, '\\0', sizeof(it->jb));\n\n  if ( ! td->deadlock_drop)\n    hpcrun_stats_num_samples_dropped_inc();\n\n  hpcrun_up_pmsg_count();\n\n  if (TD_GET(fnbounds_lock)) {\n    fnbounds_release_lock();\n  }\n}\n\n\nstatic cct_node_t*\nrecord_partial_unwind(\n  cct_bundle_t* cct, frame_t* bt_beg,\n  frame_t* bt_last, int metricId,\n  hpcrun_metricVal_t metricIncr,\n  int skipInner, void *data)\n{\n  if (ENABLED(NO_PARTIAL_UNW)){\n    return NULL;\n  }\n\n  bt_beg = hpcrun_skip_chords(bt_last, bt_beg, skipInner);\n\n  backtrace_info_t bt;\n\n  bt.begin = bt_beg;\n  bt.last =  bt_last;\n  bt.fence = FENCE_BAD;\n  bt.has_tramp = false;\n  bt.n_trolls = 0;\n  bt.bottom_frame_elided = false;\n\n  TMSG(PARTIAL_UNW, \"recording partial unwind from segv\");\n  hpcrun_stats_num_samples_partial_inc();\n  return hpcrun_cct_record_backtrace_w_metric(cct, true, &bt,\n//\t\t\t\t\t      false, bt_beg, bt_last,\n\t\t\t\t\t      false, metricId, metricIncr, data);\n}\n\n\n\n//***************************************************************************\n\nbool private_hpcrun_sampling_disabled = false;\n\nvoid\nhpcrun_drop_sample(void)\n{\n  TMSG(DROP, \"dropping sample\");\n  sigjmp_buf_t *it = &(TD_GET(bad_unwind));\n  (*hpcrun_get_real_siglongjmp())(it->jb, 9);\n}\n\n\nsample_val_t\nhpcrun_sample_callpath(void* context, int metricId,\n\t\t       hpcrun_metricVal_t metricIncr,\n\t\t       int skipInner, int isSync, sampling_info_t *data)\n{\n  sample_val_t ret;\n  hpcrun_sample_val_init(&ret);\n\n  if (monitor_block_shootdown()) {\n    monitor_unblock_shootdown();\n    return ret;\n  }\n\n  // Sampling turned off by the user application.\n  // This doesn't count as a sample for the summary stats.\n  if (! hpctoolkit_sampling_is_active()) {\n    return ret;\n  }\n\n  hpcrun_stats_num_samples_total_inc();\n\n  if (hpcrun_is_sampling_disabled()) {\n    TMSG(SAMPLE,\"global suspension\");\n    hpcrun_all_sources_stop();\n    monitor_unblock_shootdown();\n    return ret;\n  }\n\n  // Synchronous unwinds (pthread_create) must wait until they acquire\n  // the read lock, but async samples give up if not avail.\n  // This only applies in the dynamic case.\n#ifndef HPCRUN_STATIC_LINK\n  if (isSync) {\n    while (! hpcrun_dlopen_read_lock()) ;\n  }\n  else if (! hpcrun_dlopen_read_lock()) {\n    TMSG(SAMPLE_CALLPATH, \"skipping sample for dlopen lock\");\n    hpcrun_stats_num_samples_blocked_dlopen_inc();\n    monitor_unblock_shootdown();\n    return ret;\n  }\n#endif\n\n  TMSG(SAMPLE_CALLPATH, \"attempting sample\");\n  hpcrun_stats_num_samples_attempted_inc();\n\n  thread_data_t* td   = hpcrun_get_thread_data();\n  sigjmp_buf_t* it    = &(td->bad_unwind);\n  sigjmp_buf_t* old   = td->current_jmp_buf;\n  td->current_jmp_buf = it;\n\n  cct_node_t* node = NULL;\n  epoch_t* epoch = td->core_profile_trace_data.epoch;\n\n  // --------------------------------------\n  // start of handling sample\n  // --------------------------------------\n  hpcrun_set_handling_sample(td);\n\n  td->btbuf_cur = NULL;\n  td->deadlock_drop = false;\n  int ljmp = sigsetjmp(it->jb, 1);\n  if (ljmp == 0) {\n    if (epoch != NULL) {\n      void* pc = hpcrun_context_pc(context);\n\n      TMSG(SAMPLE_CALLPATH, \"%s taking profile sample @ %p\", __func__, pc);\n      TMSG(SAMPLE_METRIC_DATA, \"--metric data for sample (as a uint64_t) = %\"PRIu64\"\", metricIncr);\n\n      /* check to see if shared library loadmap (of current epoch) has changed out from under us */\n      epoch = hpcrun_check_for_new_loadmap(epoch);\n\n      void *data_aux = NULL;\n      if (data != NULL)\n        data_aux = data->sample_data;\n\n      node  = hpcrun_backtrace2cct(&(epoch->csdata), context, metricId,\n                                   metricIncr, skipInner, isSync, data_aux);\n\n      if (ENABLED(DUMP_BACKTRACES)) {\n        hpcrun_bt_dump(td->btbuf_cur, \"UNWIND\");\n      }\n    }\n  }\n  else {\n    cct_bundle_t* cct = &(td->core_profile_trace_data.epoch->csdata);\n    node = record_partial_unwind(cct, td->btbuf_beg, td->btbuf_cur - 1,\n        metricId, metricIncr, skipInner, NULL);\n    hpcrun_cleanup_partial_unwind();\n  }\n  td->current_jmp_buf = old;\n\n  // --------------------------------------\n  // end of handling sample\n  // --------------------------------------\n\n  ret.sample_node = node;\n\n  cct_addr_t *addr = hpcrun_cct_addr(node);\n  ip_normalized_t leaf_ip = addr->ip_norm;\n\n  if (ip_normalized_eq(&leaf_ip, &(td->btbuf_beg->ip_norm))) {\n    // the call chain sampled has as its leaf an instruction in a user\n    // procedure. we know this because leaf_ip matches the first entry\n    // in the backtrace buffer.  samples in kernel space yield a\n    // leaf_ip that is not logged in the backtrace buffer. for user\n    // space samples, the first entry in the backtrace buffer includes\n    // not only the normalized IP of the call chain leaf but also the\n    // IP of the first instruction in the enclosing function, which we\n    // use to uniquely represent the function itself. in this case, we\n    // adjust leaf_ip to point to the first IP of its enclosing\n    // function to simplify processing of procedure-level traces for\n    // call chains that are completely in user space.\n\n    // when call chain tracing is enabled, tracing arbitrary leaf IPs\n    // for user space call chains is messy because it can cause\n    // trace-ids to be marked on multiple call chain leaves\n    // (instructions) that belong to the same source-level\n    // statement. collapsing these when call path traces are present\n    // leaves us with many trace-ids referring to the same source\n    // construct. trust me: merging here is easier :-).\n    leaf_ip = td->btbuf_beg->the_function;\n  }\n\n  bool trace_ok = ! td->deadlock_drop;\n  TMSG(TRACE1, \"trace ok (!deadlock drop) = %d\", trace_ok);\n  if (trace_ok && hpcrun_trace_isactive()) {\n    TMSG(TRACE, \"Sample event encountered\");\n\n    cct_addr_t frm;\n    memset(&frm, 0, sizeof(cct_addr_t));\n    frm.ip_norm = leaf_ip;\n\n    TMSG(TRACE,\"parent node = %p, &frm = %p\", hpcrun_cct_parent(node), &frm);\n    cct_node_t* func_proxy =\n      hpcrun_cct_insert_addr(hpcrun_cct_parent(node), &frm);\n\n    ret.trace_node = func_proxy;\n\n    TMSG(TRACE, \"Changed persistent id to indicate mutation of func_proxy node\");\n\n    hpcrun_trace_append(&td->core_profile_trace_data, func_proxy, metricId);\n    TMSG(TRACE, \"Appended func_proxy node to trace\");\n  }\n\n  hpcrun_clear_handling_sample(td);\n  if (TD_GET(mem_low) || ENABLED(FLUSH_EVERY_SAMPLE)) {\n    hpcrun_flush_epochs(&(TD_GET(core_profile_trace_data)));\n    hpcrun_reclaim_freeable_mem();\n  }\n#ifndef HPCRUN_STATIC_LINK\n  hpcrun_dlopen_read_unlock();\n#endif\n\n  TMSG(SAMPLE_CALLPATH,\"done w sample, return %p\", ret.sample_node);\n  monitor_unblock_shootdown();\n\n  return ret;\n}\n\nstatic int const PTHREAD_CTXT_SKIP_INNER = 1;\n\ncct_node_t*\nhpcrun_gen_thread_ctxt(void* context)\n{\n  if (monitor_block_shootdown()) {\n    monitor_unblock_shootdown();\n    return NULL;\n  }\n\n  if (hpcrun_is_sampling_disabled()) {\n    TMSG(THREAD_CTXT,\"global suspension\");\n    hpcrun_all_sources_stop();\n    monitor_unblock_shootdown();\n    return NULL;\n  }\n\n  // Synchronous unwinds (pthread_create) must wait until they acquire\n  // the read lock, but async samples give up if not avail.\n  // This only applies in the dynamic case.\n#ifndef HPCRUN_STATIC_LINK\n  while (! hpcrun_dlopen_read_lock()) ;\n#endif\n\n  thread_data_t* td   = hpcrun_get_thread_data();\n  sigjmp_buf_t* it    = &(td->bad_unwind);\n  sigjmp_buf_t* old   = td->current_jmp_buf;\n  td->current_jmp_buf = it;\n\n  cct_node_t* node  = NULL;\n  epoch_t* epoch    = td->core_profile_trace_data.epoch;\n\n  hpcrun_set_handling_sample(td);\n\n  td->btbuf_cur = NULL;\n  int ljmp = sigsetjmp(it->jb, 1);\n  backtrace_info_t bt;\n  if (ljmp == 0) {\n    if (epoch != NULL) {\n      if (! hpcrun_generate_backtrace_no_trampoline(&bt, context,\n          PTHREAD_CTXT_SKIP_INNER)) {\n        hpcrun_clear_handling_sample(td); // restore state\n        EMSG(\"Internal error: unable to obtain backtrace for pthread context\");\n        return NULL;\n      }\n    }\n    //\n    // If this backtrace is generated from sampling in a thread,\n    // take off the top 'monitor_pthread_main' node\n    //\n    if ((epoch->csdata).ctxt && ! bt.has_tramp && (bt.fence == FENCE_THREAD)) {\n      TMSG(THREAD_CTXT, \"Thread correction, back off outermost backtrace entry\");\n      bt.last--;\n    }\n    node = hpcrun_cct_record_backtrace(&(epoch->csdata), false, &bt,\n        bt.has_tramp);\n  }\n  // restore back the sigjmp\n  td->current_jmp_buf = old;\n\n  // FIXME: What to do when thread context is partial ?\n#if 0\n  else {\n    cct_bundle_t* cct = &(td->epoch->csdata);\n    node = record_partial_unwind(cct, td->btbuf_beg, td->btbuf_cur - 1,\n\t\t\t\t metricId, metricIncr);\n    hpcrun_cleanup_partial_unwind();\n  }\n#endif\n  hpcrun_clear_handling_sample(td);\n  if (TD_GET(mem_low) || ENABLED(FLUSH_EVERY_SAMPLE)) {\n    hpcrun_flush_epochs(&(TD_GET(core_profile_trace_data)));\n    hpcrun_reclaim_freeable_mem();\n  }\n#ifndef HPCRUN_STATIC_LINK\n  hpcrun_dlopen_read_unlock();\n#endif\n\n  TMSG(THREAD,\"done w pthread ctxt\");\n  monitor_unblock_shootdown();\n\n  return node;\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/hpcrun_dlfns.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n//***************************************************************************\n//\n// File: \n//   $HeadURL$\n//\n// Purpose:\n//   [...]\n//\n// Description:\n//   [The set of functions, macros, etc. defined in the file]\n//\n// Author:\n//   [...]\n//\n//***************************************************************************\n\n#include \"hpcrun_dlfns.h\"\n#include \"fnbounds_interface.h\"\n#include \"sample_event.h\"\n#include \"thread_data.h\"\n\n#include <messages/messages.h>\n#include <lib/prof-lean/spinlock.h>\n#include <monitor.h>\n\n\n//\n// Protect dlopen(), dlclose() and dl_iterate_phdr() with a readers-\n// writers lock.  That is, either one writer and no readers, or else\n// no writers and any number of readers.\n//\n// dlopen and dlclose modify the internal dl data structures, so\n// they're writers, dl_iterate_phdr (via sampling or pthread_create)\n// is a reader.  Note: this lock needs to be process-wide.\n//\n// Now allow a writer to lock against itself.  That is, we record the\n// thread id of the writer and if a nested dlopen (from init ctor)\n// happens in the same thread, then we allow the thread to proceed.\n// Normally, this would be dangerous (exposes inconsistent state).\n// But in this case, the init ctor occurs after the dangerous part.\n// This is necessary to handle nested dlopens in an init constructor.\n//\n// And if we could just separate dlopen() into mmap() and its init\n// constructor, then we'd only need to block the mmap part. :-(\n//\n// DLOPEN_RISKY disables the read locks (always succeed), so that\n// sampling will never be blocked in this case.  But we keep the write\n// locks for the benefit of the fnbounds functions.\n//\nstatic spinlock_t dlopen_lock = SPINLOCK_UNLOCKED;\nstatic atomic_long dlopen_num_readers = ATOMIC_VAR_INIT(0);\nstatic volatile long dlopen_num_writers = 0;\nstatic int  dlopen_writer_tid = -1;\nstatic atomic_long num_dlopen_pending = ATOMIC_VAR_INIT(0);\n\n\n// We use this only in the DLOPEN_RISKY case.\nlong\nhpcrun_dlopen_pending(void)\n{\n  return atomic_load_explicit(&num_dlopen_pending, memory_order_relaxed);\n}\n\n\n// Writers always wait until they acquire the lock.  Now allow writers\n// to lock against themselves, but only in the same thread.\nstatic void\nhpcrun_dlopen_write_lock(void)\n{\n  int tid = monitor_get_thread_num();\n  int acquire = 0;\n\n  do {\n    spinlock_lock(&dlopen_lock);\n    if (dlopen_num_writers == 0 || tid == dlopen_writer_tid) {\n      dlopen_num_writers++;\n      dlopen_writer_tid = tid;\n      acquire = 1;\n    }\n    spinlock_unlock(&dlopen_lock);\n  } while (! acquire);\n\n  // Wait for any readers to finish.\n  if (! ENABLED(DLOPEN_RISKY)) {\n    while (atomic_load_explicit(&dlopen_num_readers, memory_order_relaxed) > 0) ;\n  }\n}\n\n\nstatic void\nhpcrun_dlopen_write_unlock(void)\n{\n  dlopen_num_writers--;\n}\n\n\n// Downgrade the dlopen lock from a writers lock to a readers lock.\n// Must already hold the writers lock.\nstatic void\nhpcrun_dlopen_downgrade_lock(void)\n{\n  atomic_fetch_add_explicit(&dlopen_num_readers, 1L, memory_order_relaxed);\n  dlopen_num_writers = 0;\n}\n\n\n// Readers try to acquire a lock, but they don't wait if that fails.\n// Returns: 1 if acquired, else 0 if not.\nint\nhpcrun_dlopen_read_lock(void)\n{\n  int acquire = 0;\n\n  spinlock_lock(&dlopen_lock);\n  if (dlopen_num_writers == 0 || ENABLED(DLOPEN_RISKY)) {\n    atomic_fetch_add_explicit(&dlopen_num_readers, 1L, memory_order_relaxed);\n    acquire = 1;\n  }\n  spinlock_unlock(&dlopen_lock);\n\n  return (acquire);\n}\n\n\nvoid\nhpcrun_dlopen_read_unlock(void)\n{\n  atomic_fetch_add_explicit(&dlopen_num_readers, -1L, memory_order_relaxed);\n}\n\n\nvoid \nhpcrun_pre_dlopen(const char *path, int flags)\n{\n  hpcrun_dlopen_write_lock();\n  atomic_fetch_add_explicit(&num_dlopen_pending, 1L, memory_order_relaxed);\n  TD_GET(inside_dlfcn) = true;\n}\n\n\n// It's safe to downgrade the lock during fnbounds_map_open_dsos()\n// because it acquires the dl-iterate lock before the fnbounds lock,\n// and that order is consistent with sampling.  Note: can only\n// downgrade the lock on the last (outermost) dlopen.\n//\nvoid \nhpcrun_dlopen(const char *module_name, int flags, void *handle)\n{\n  int outermost = (dlopen_num_writers == 1);\n\n  TMSG(LOADMAP, \"dlopen: handle = %p, name = %s\", handle, module_name);\n  if (outermost) {\n    hpcrun_dlopen_downgrade_lock();\n  }\n  fnbounds_map_open_dsos();\n  atomic_fetch_add_explicit(&num_dlopen_pending, -1L, memory_order_relaxed);\n  if (outermost) {\n    TD_GET(inside_dlfcn) = false;\n    hpcrun_dlopen_read_unlock();\n  } else {\n    hpcrun_dlopen_write_unlock();\n  }\n}\n\n\nvoid\nhpcrun_dlclose(void *handle)\n{\n  hpcrun_dlopen_write_lock();\n  TD_GET(inside_dlfcn) = true;\n}\n\n\n// We can't downgrade the lock during fnbounds_unmap_closed_dsos()\n// because it acquires the fnbounds lock before the dl-iterate lock,\n// and that is a LOR with sampling.\n//\nvoid\nhpcrun_post_dlclose(void *handle, int ret)\n{\n  int outermost = (dlopen_num_writers == 1);\n\n  TMSG(LOADMAP, \"dlclose: handle = %p\", handle);\n  fnbounds_unmap_closed_dsos();\n  if (outermost) {\n    TD_GET(inside_dlfcn) = false;\n  }\n  hpcrun_dlopen_write_unlock();\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/loadmap.h": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n#ifndef LOADMAP_H\n#define LOADMAP_H\n\n#include <stdio.h>\n\n/* an \"loadmap\" is an interval of time during which no two dynamic \n   libraries are mapped to the same region of the address space. \n   an loadmap can span across dlopen and dlclose operations. an loadmap\n   ends when a dlopen maps a new load module on top of a region of \n   the address space that has previously been occupied by another\n   module earlier during the loadmap.\n*/\n\n// Local includes\n\n#include <lib/prof-lean/hpcio.h>\n#include <lib/prof-lean/hpcfmt.h>\n#include <lib/prof-lean/hpcrun-fmt.h>\n\n#include \"fnbounds_file_header.h\"\n\n\n//***************************************************************************\n//\n//***************************************************************************\n\ntypedef struct dso_info_t {\n  char* name;\n  void* start_addr;\n  void* end_addr;\n  uintptr_t start_to_ref_dist;\n  void** table;\n  unsigned long map_size;\n  unsigned long nsymbols;\n  int  is_relocatable;\n\n  struct dso_info_t* next; //to only be used with dso_free_list\n  struct dso_info_t* prev;\n\n} dso_info_t;\n\n\n// ---------------------------------------------------------\n// \n// ---------------------------------------------------------\n\n// Constructs a new dso_info_t by either pulling an unused one from\n// the free list or malloc-ing one.  If there are any on the free\n// list, will return a pointer to it, otherwise will malloc a new one.\ndso_info_t*\nhpcrun_dso_new();\n\n\n// Allocates and initializes a dso_info_t\ndso_info_t*\nhpcrun_dso_make(const char* name, void** table,\n\t\tstruct fnbounds_file_header* fh,\n\t\tvoid* startaddr, void* endaddr, unsigned long map_size);\n\n\n// ---------------------------------------------------------\n// \n// ---------------------------------------------------------\n\n// Use to dump the free list\nvoid\nhpcrun_dsoList_dump(dso_info_t* dl_list);\n\n\n// Use to dump a single dso_info_t struct.\nvoid\nhpcrun_dso_dump(dso_info_t* x);\n\n\n//***************************************************************************\n// \n//***************************************************************************\n\ntypedef struct load_module_t\n{\n  uint16_t id;\n  char* name;\n  dso_info_t* dso_info;\n  struct load_module_t* next;\n  struct load_module_t* prev;\n\n} load_module_t;\n\n\nload_module_t*\nhpcrun_loadModule_new(const char* name);\n\n// used only to add a load module for the kernel \nuint16_t \nhpcrun_loadModule_add(const char* name);\n\n//***************************************************************************\n// \n//***************************************************************************\n\ntypedef struct hpcrun_loadmap_t\n{\n  uint16_t size; // implies the next load_module_t id (size + 1)\n  load_module_t* lm_head;\n  load_module_t* lm_end;\n\n} hpcrun_loadmap_t;\n\n\n// ---------------------------------------------------------\n// \n// ---------------------------------------------------------\nvoid \nhpcrun_loadmap_lock();\n\n\nvoid\nhpcrun_loadmap_unlock();\n\n\nint\nhpcrun_loadmap_isLocked();\n\n\n// ---------------------------------------------------------\n// \n// ---------------------------------------------------------\n\n// Requests a new load map.\nhpcrun_loadmap_t*\nhpcrun_loadmap_new();\n\n\n// Initializes the load map\nextern void hpcrun_loadmap_init(hpcrun_loadmap_t* x);\n\n//\n// debugging operation, print loadmap in reverse order\n//\nextern void hpcrun_loadmap_print(hpcrun_loadmap_t* loadmap);\n\n// ---------------------------------------------------------\n// \n// ---------------------------------------------------------\n\n// hpcrun_loadmap_findByAddr: Find the (currently mapped) load module\n//   that 'contains' the address range [begin, end]\nload_module_t*\nhpcrun_loadmap_findByAddr(void* begin, void* end);\n\n\n// hpcrun_loadmap_findByName: Find a load module by name.\nload_module_t*\nhpcrun_loadmap_findByName(const char* name);\n\n// find a load module, given the (previously determined) id\nload_module_t*\nhpcrun_loadmap_findById(uint16_t id);\n\n\n// hpcrun_loadmap_findLoadName: Search loadmap for (full) name of\n//   entry that has \"name\" as its executable name\nconst char*\nhpcrun_loadmap_findLoadName(const char* name);\n\n\n// ---------------------------------------------------------\n// \n// ---------------------------------------------------------\n\n// hpcrun_loadmap_map: Add a load module based on 'dso' to the current\n//   load map, ensuring that dso's name appears exactly once in the\n//   load map. 'dso' is assumed to be non-NULL.  Locates the new load\n//   module at the front of the load map.\nload_module_t*\nhpcrun_loadmap_map(dso_info_t* dso);\n\n\n// hpcrun_loadmap_unmap: Note that 'lm' has been unmapped but retain a\n//   reference to it within the load map.\nvoid\nhpcrun_loadmap_unmap(load_module_t* lm);\n\n\n//***************************************************************************\n//\n//***************************************************************************\n\nvoid\nhpcrun_initLoadmap();\n\nhpcrun_loadmap_t*\nhpcrun_getLoadmap();\n\ntypedef void (*loadmap_notify_range_t)(void *start, void *end);\n\ntypedef struct loadmap_notify_t {\n  loadmap_notify_range_t map;\n  loadmap_notify_range_t unmap;\n  struct loadmap_notify_t *next;\n} loadmap_notify_t;\n\nvoid hpcrun_loadmap_notify_register(loadmap_notify_t *n);\n\n//***************************************************************************\n\n#endif // LOADMAP_H\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/fnbounds/fnbounds_dynamic.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n//=====================================================================\n// File: fnbounds_dynamic.c  \n// \n//     provide information about function bounds for functions in\n//     dynamically linked load modules. use an extra \"server\" process\n//     to handle computing the symbols to insulate the client process\n//     from the complexity of this task, including use of the system\n//     command to fork new processes. having the server process\n//     enables use to avoid dealing with forking off new processes\n//     with system when there might be multiple threads active with\n//     sampling enabled.\n//\n//  Modification history:\n//     2008 April 28 - created John Mellor-Crummey\n//\n//=====================================================================\n\n\n//*********************************************************************\n// system includes\n//*********************************************************************\n\n#include <stdio.h>     // fopen, fclose, etc\n#include <dlfcn.h>     // for dlopen/dlclose\n#include <string.h>    // for strcmp, strerror\n#include <stdlib.h>    // for getenv\n#include <errno.h>     // for errno\n#include <stdint.h>\n#include <stdbool.h>   \n#include <sys/param.h> // for PATH_MAX\n#include <sys/types.h>\n#include <unistd.h>    // getpid\n\n\n#include <include/hpctoolkit-config.h>\n\n//*********************************************************************\n// external libraries\n//*********************************************************************\n\n#include <monitor.h>\n\n//*********************************************************************\n// local includes\n//*********************************************************************\n\n#include \"fnbounds_interface.h\"\n#include \"fnbounds_file_header.h\"\n#include \"client.h\"\n#include \"dylib.h\"\n\n#include <hpcrun/main.h>\n#include <hpcrun_dlfns.h>\n#include <hpcrun_stats.h>\n#include <disabled.h>\n#include <loadmap.h>\n#include <epoch.h>\n#include <sample_event.h>\n#include <thread_data.h>\n\n#include <unwind/common/uw_recipe_map.h>\n#include <messages/messages.h>\n\n#include <lib/prof-lean/spinlock.h>\n\n\n//*********************************************************************\n// local types\n//*********************************************************************\n\n#define PERFORM_RELOCATION(addr, offset) \\\n\t((void *) (((unsigned long) addr) + ((long) offset)))\n\n#define MAPPING_END(addr, length) \\\n\t((void *) (((unsigned long) addr) + ((unsigned long) length)))\n\n\n//*********************************************************************\n// local variables\n//*********************************************************************\n\n// locking functions to ensure that dynamic bounds data structures \n// are consistent.\n\nstatic spinlock_t fnbounds_lock = SPINLOCK_UNLOCKED;\n\n#define FNBOUNDS_LOCK  do {\t\t\t\\\n\tspinlock_lock(&fnbounds_lock);\t\t\\\n\tTD_GET(fnbounds_lock) = 1;\t\t\\\n} while (0)\n\n#define FNBOUNDS_UNLOCK  do {\t\t\t\\\n\tspinlock_unlock(&fnbounds_lock);\t\\\n\tTD_GET(fnbounds_lock) = 0;\t\t\\\n} while (0)\n\n\n//*********************************************************************\n// forward declarations\n//*********************************************************************\n\nstatic load_module_t *\nfnbounds_get_loadModule(void *ip);\n\nstatic dso_info_t *\nfnbounds_compute(const char *filename, void *start, void *end);\n\nstatic void\nfnbounds_map_executable();\n\n\n//*********************************************************************\n// interface operations\n//*********************************************************************\n\n//---------------------------------------------------------------------\n// function fnbounds_init: \n// \n//     for dynamically-linked executables, start an fnbounds server\n//     process to that will compute function bounds information upon\n//     demand for dynamically-linked load modules.\n//\n//     return code = 0 upon success, otherwise fork failed \n//\n//     NOTE: don't make this routine idempotent: it may be needed to\n//     start a new server if the process forks\n//---------------------------------------------------------------------\n\nint \nfnbounds_init()\n{\n  if (hpcrun_get_disabled()) return 0;\n\n  hpcrun_syserv_init();\n  fnbounds_map_executable();\n  fnbounds_map_open_dsos();\n\n  return 0;\n}\n\nbool\nfnbounds_enclosing_addr(void* ip, void** start, void** end, load_module_t** lm)\n{\n  FNBOUNDS_LOCK;\n\n  bool ret = false; // failure unless otherwise reset to 0 below\n  \n  load_module_t* lm_ = fnbounds_get_loadModule(ip);\n  dso_info_t* dso = (lm_) ? lm_->dso_info : NULL;\n  \n  if (dso && dso->nsymbols > 0) {\n    void* ip_norm = ip;\n    if (dso->is_relocatable) {\n      ip_norm = (void*) (((unsigned long) ip_norm) - dso->start_to_ref_dist);\n    }\n\n     // no dso table means no enclosing addr\n\n    if (dso->table) {\n      // N.B.: works on normalized IPs\n      int rv = fnbounds_table_lookup(dso->table, dso->nsymbols, ip_norm, \n\t\t\t\t     (void**) start, (void**) end);\n\n      ret = (rv == 0);\n      // Convert 'start' and 'end' into unnormalized IPs since they are\n      // currently normalized.\n      if (rv == 0 && dso->is_relocatable) {\n\t*start = PERFORM_RELOCATION(*start, dso->start_to_ref_dist);\n\t*end   = PERFORM_RELOCATION(*end  , dso->start_to_ref_dist);\n      }\n    }\n  }\n\n  if (lm) {\n    *lm = lm_;\n  }\n\n  FNBOUNDS_UNLOCK;\n\n  return ret;\n}\n\n\n//---------------------------------------------------------------------\n// Function: fnbounds_map_open_dsos\n// Purpose:  \n//     identify any new dsos that have been mapped.\n//     analyze them and add their information to the open list.\n//---------------------------------------------------------------------\n\nvoid\nfnbounds_map_open_dsos()\n{\n  dylib_map_open_dsos();\n}\n\n\n//\n// Find start and end of executable from /proc/self/maps\n//\nstatic void\nfnbounds_find_exec_bounds_proc_maps(char* exename, void**start, void** end)\n{\n  *start = NULL; *end = NULL;\n  FILE* loadmap = fopen(\"/proc/self/maps\", \"r\");\n  if (! loadmap) {\n    EMSG(\"Could not open /proc/self/maps\");\n    return;\n  }\n  char linebuf[1024 + 1];\n  char tmpname[PATH_MAX];\n  char* addr = NULL;\n  for(;;) {\n    char* l = fgets(linebuf, sizeof(linebuf), loadmap);\n    if (feof(loadmap)) break;\n    char* save = NULL;\n    const char delim[] = \" \\n\";\n    addr = strtok_r(l, delim, &save);\n    char* perms = strtok_r(NULL, delim, &save);\n    // skip 3 tokens\n    for (int i=0; i < 3; i++) { (void) strtok_r(NULL, delim, &save);}\n    char* name = strtok_r(NULL, delim, &save);\n    realpath(name, tmpname); \n    if ((strncmp(perms, \"r-x\", 3) == 0) && (strcmp(tmpname, exename) == 0)) break;\n  }\n  fclose(loadmap);\n  char* save = NULL;\n  const char dash[] = \"-\";\n  char* start_str = strtok_r(addr, dash, &save);\n  char* end_str   = strtok_r(NULL, dash, &save);\n  *start = (void*) (uintptr_t) strtol(start_str, NULL, 16);\n  *end   = (void*) (uintptr_t) strtol(end_str, NULL, 16);\n}\n\ndso_info_t*\nfnbounds_dso_exec(void)\n{\n  char filename[PATH_MAX];\n  struct fnbounds_file_header fh;\n  void* start = NULL;\n  void* end   = NULL;\n\n  TMSG(MAP_EXEC, \"Entry\");\n  realpath(\"/proc/self/exe\", filename);\n  void** nm_table = (void**) hpcrun_syserv_query(filename, &fh);\n  if (! nm_table) {\n    EMSG(\"No nm_table for executable %s\", filename);\n    return hpcrun_dso_make(filename, NULL, NULL, NULL, NULL, 0);\n  }\n  if (fh.num_entries < 1) {\n    EMSG(\"fnbounds returns no symbols for file %s, (all intervals poisoned)\", filename);\n    return hpcrun_dso_make(filename, NULL, NULL, NULL, NULL, 0);\n  }\n  TMSG(MAP_EXEC, \"Relocatable exec\");\n  if (fh.is_relocatable) {\n    if (nm_table[0] >= start && nm_table[0] <= end) {\n      // segment loaded at its preferred address\n      fh.is_relocatable = 0;\n    }\n    // Use loadmap to find start, end for a relocatable executable\n    fnbounds_find_exec_bounds_proc_maps(filename, &start, &end);\n    TMSG(MAP_EXEC, \"Bounds for relocatable exec = %p, %p\", start, end);\n  }\n  else {\n    TMSG(MAP_EXEC, \"NON relocatable exec\");\n    char executable_name[PATH_MAX];\n    void* mstart; \n    void* mend;\n    if (dylib_find_module_containing_addr(nm_table[0],\n\t\t\t\t\t  executable_name, &mstart, &mend)) {\n      start = (void*) mstart;\n      end = (void*) mend;\n    }\n    else {\n      start = nm_table[0];\n      end = nm_table[fh.num_entries - 1];\n    }\n  }\n  return hpcrun_dso_make(filename, nm_table, &fh, start, end, fh.mmap_size);\n}\n\nbool\nfnbounds_ensure_mapped_dso(const char *module_name, void *start, void *end)\n{\n  bool isOk = true;\n\n  FNBOUNDS_LOCK;\n\n  load_module_t *lm = hpcrun_loadmap_findByAddr(start, end);\n  if (!lm) {\n    dso_info_t *dso = fnbounds_compute(module_name, start, end);\n    if (dso) {\n      hpcrun_loadmap_map(dso);\n    }\n    else {\n      EMSG(\"!! INTERNAL ERROR, not possible to map dso for %s (%p, %p)\",\n\t   module_name, start, end);\n      isOk = false;\n    }\n  }\n\n  FNBOUNDS_UNLOCK;\n\n  return isOk;\n}\n\n\n//---------------------------------------------------------------------\n// Function: fnbounds_unmap_closed_dsos\n// Purpose:  \n//     identify any dsos that are no longer mapped.\n//     move them from the open to the closed list.\n//---------------------------------------------------------------------\n\nvoid\nfnbounds_unmap_closed_dsos()\n{\n  FNBOUNDS_LOCK;\n\n  TMSG(LOADMAP, \"Unmapping closed dsos\");\n  load_module_t *current = hpcrun_getLoadmap()->lm_head;\n  while (current) {\n    if (current->dso_info) {\n      if (!dylib_addr_is_mapped(current->dso_info->start_addr)) {\n        TMSG(LOADMAP, \"Unmapping %s\", current->name);\n        hpcrun_loadmap_unmap(current);\n      }\n    }\n    current = current->next;\n  }\n\n  FNBOUNDS_UNLOCK;\n}\n\n\n//---------------------------------------------------------------------\n// function fnbounds_fini: \n// \n//     for dynamically-linked executables, shut down the fnbounds\n//     server process\n//---------------------------------------------------------------------\n\nvoid \nfnbounds_fini()\n{\n  if (hpcrun_get_disabled()) return;\n\n  hpcrun_syserv_fini();\n}\n\n\nvoid\nfnbounds_release_lock(void)\n{\n  FNBOUNDS_UNLOCK;  \n}\n\n\nfnbounds_table_t\nfnbounds_fetch_executable_table(void)\n{\n  char exename[PATH_MAX];\n  realpath(\"/proc/self/exe\", exename);\n  TMSG(INTERVALS_PRINT, \"name of loadmap = %s\", exename);\n  load_module_t* exe_lm = hpcrun_loadmap_findByName(exename);\n  TMSG(INTERVALS_PRINT, \"load module found = %p\", exe_lm);\n  if (!exe_lm) return (fnbounds_table_t) {.table = (void**) NULL, .len = 0};\n  TMSG(INTERVALS_PRINT, \"dso info for load module = %p\", exe_lm->dso_info);\n  if (! exe_lm->dso_info) return (fnbounds_table_t) {.table = (void**) NULL, .len = 0};\n  return (fnbounds_table_t)\n    { .table = exe_lm->dso_info->table, .len = exe_lm->dso_info->nsymbols};\n}\n\n\n//*********************************************************************\n// private operations\n//\n// Note: the private operations should all assume that fnbounds_lock\n// is already locked (mostly).\n//*********************************************************************\n\nstatic dso_info_t* \nfnbounds_compute(const char* incoming_filename, void* start, void* end)\n{\n  struct fnbounds_file_header fh;\n  char filename[PATH_MAX];\n  void** nm_table;\n  long map_size;\n\n  if (incoming_filename == NULL) {\n    return (NULL);\n  }\n\n  // linux-vdso.so and linux-gate.so are virtual files and don't exist\n  // in the file system.\n  if (strncmp(incoming_filename, \"linux-vdso.so\", 13) == 0\n      || strncmp(incoming_filename, \"linux-gate.so\", 13) == 0) {\n    return hpcrun_dso_make(incoming_filename, NULL, NULL, start, end, 0);\n  }\n\n  realpath(incoming_filename, filename);\n\n  nm_table = (void**) hpcrun_syserv_query(filename, &fh);\n  if (nm_table == NULL) {\n    return hpcrun_dso_make(filename, NULL, NULL, start, end, 0);\n  }\n  map_size = fh.mmap_size;\n\n  if (fh.num_entries < 1) {\n    EMSG(\"fnbounds returns no symbols for file %s, (all intervals poisoned)\", filename);\n    return hpcrun_dso_make(filename, NULL, NULL, start, end, 0);\n  }\n\n  //\n  // Note: we no longer care if binary is stripped.\n  //\n  if (fh.is_relocatable) {\n    if (nm_table[0] >= start && nm_table[0] <= end) {\n      // segment loaded at its preferred address\n      fh.is_relocatable = 0;\n    }\n  }\n  else {\n    char executable_name[PATH_MAX];\n    void *mstart; \n    void *mend;\n    if (dylib_find_module_containing_addr(nm_table[0],\n\t\t\t\t\t  executable_name, &mstart, &mend)) {\n      start = (void*) mstart;\n      end = (void*) mend;\n    }\n    else {\n      start = nm_table[0];\n      end = nm_table[fh.num_entries - 1];\n    }\n  }\n\n  return hpcrun_dso_make(filename, nm_table, &fh, start, end, map_size);\n}\n\n\n// fnbounds_get_loadModule(): Given the (unnormalized) IP 'ip',\n// attempt to return the enclosing load module.  Note that the\n// function may fail.\nstatic load_module_t *\nfnbounds_get_loadModule(void *ip)\n{\n  load_module_t* lm = hpcrun_loadmap_findByAddr(ip, ip);\n  dso_info_t* dso = (lm) ? lm->dso_info : NULL;\n\n  // We can't call dl_iterate_phdr() in general because catching a\n  // sample at just the wrong point inside dlopen() will segfault or\n  // deadlock.\n  //\n  // However, the risk is small, and if we're willing to take the\n  // risk, then analyzing the new DSO here allows us to sample inside\n  // an init constructor.\n  if (!dso && ENABLED(DLOPEN_RISKY) && hpcrun_dlopen_pending() > 0) {\n    char module_name[PATH_MAX];\n    void *mstart, *mend;\n    \n    if (dylib_find_module_containing_addr(ip, module_name, &mstart, &mend)) {\n      dso = fnbounds_compute(module_name, mstart, mend);\n      if (dso) {\n\tlm = hpcrun_loadmap_map(dso);\n      }\n    }\n  }\n  \n  return lm;\n}\n\n\nstatic void\nfnbounds_map_executable()\n{\n  // dylib_map_executable() ==>\n  // fnbounds_ensure_mapped_dso(\"/proc/self/exe\", NULL, NULL) ==>\n  //{\n  //   FNBOUNDS_LOCK;\n  //   dso = fnbound_compute(exename, ...);\n  //   hpcrun_loadmap_map(dso);\n  //   FNBOUNDS_UNLOCK;\n  //}\n  FNBOUNDS_LOCK;\n  hpcrun_loadmap_map(fnbounds_dso_exec());\n  FNBOUNDS_UNLOCK;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/lush/lush.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n//***************************************************************************\n//\n// File: \n//   $HeadURL$\n//\n// Purpose:\n//   LUSH: Logical Unwind Support for HPCToolkit\n//\n// Description:\n//   [The set of functions, macros, etc. defined in the file]\n//\n// Author:\n//   Nathan Tallent, Rice University.\n//\n//***************************************************************************\n\n//************************* System Include Files ****************************\n\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <stdio.h>\n\n#include <dlfcn.h>\n\n//************************** Xtrnl Include Files ****************************\n\n#include <monitor.h>\n\n//*************************** User Include Files ****************************\n\n#include \"lush.h\"\n\n#include <lib/prof-lean/lush/lush-support.h>\n\n#include <unwind/common/unwind.h> // hpcrun_unw_step()\n\n#include <memory/hpcrun-malloc.h>\n\n\n//*************************** Forward Declarations **************************\n\nstatic void handle_any_dlerror();\n\n\n// **************************************************************************\n// LUSH Agents\n// **************************************************************************\n\nint \nlush_agent__init(lush_agent_t* x, int id, const char* path, \n\t\t lush_agent_pool_t* pool)\n{\n  x->id = id;\n\n  x->path = hpcrun_malloc(strlen(path) + 1); // strdup() uses malloc\n  strcpy(x->path, path);\n\n  //x->dlhandle = dlopen(path, RTLD_LAZY);\n  x->dlhandle = monitor_real_dlopen(path, RTLD_LAZY);\n  handle_any_dlerror();\n\n#define CALL_DLSYM(BASE, X, ID, HANDLE)\t       \\\n  BASE->X[ID] = (X ## _fn_t)dlsym(HANDLE, #X); \\\n  handle_any_dlerror()\n  \n  CALL_DLSYM(pool, LUSHI_init,         id, x->dlhandle);\n  CALL_DLSYM(pool, LUSHI_fini,         id, x->dlhandle);\n  CALL_DLSYM(pool, LUSHI_strerror,     id, x->dlhandle);\n  CALL_DLSYM(pool, LUSHI_reg_dlopen,   id, x->dlhandle);\n  CALL_DLSYM(pool, LUSHI_ismycode,     id, x->dlhandle);\n  CALL_DLSYM(pool, LUSHI_step_bichord, id, x->dlhandle);\n  CALL_DLSYM(pool, LUSHI_step_pnote,   id, x->dlhandle);\n  CALL_DLSYM(pool, LUSHI_step_lnote,   id, x->dlhandle);\n  CALL_DLSYM(pool, LUSHI_do_metric,    id, x->dlhandle);\n\n#undef CALL_DLSYM\n\n  pool->LUSHI_init[x->id](0, NULL, id,\n\t\t\t  (LUSHCB_malloc_fn_t)NULL, \n\t\t\t  (LUSHCB_free_fn_t)NULL,\n\t\t\t  (LUSHCB_step_fn_t)hpcrun_unw_step,\n\t\t\t  LUSHCB_loadmap_find);\n  return 0;\n}\n\n\nint\nlush_agent__fini(lush_agent_t* x, lush_agent_pool_t* pool)\n{\n  pool->LUSHI_fini[x->id]();\n\n  //dlclose(x->dlhandle);\n  monitor_real_dlclose(x->dlhandle);\n  handle_any_dlerror();\n\n  //free(x->path);\n  return 0;\n}\n\n// **************************************************************************\n\n// FIXME: Copied from dlpapi.c.  When hpcrun and csprof are merged,\n// this can be merged into a common lib.\nstatic void\nhandle_any_dlerror()\n{\n  // Note: We assume dlsym() or something similar has just been called!\n  char *error;\n  if ((error = dlerror()) != NULL) {\n    fprintf(stderr, \"%s\\n\", error); \n    exit(1);\n  }\n}\n\n\n// **************************************************************************\n// LUSH Agent Pool\n// **************************************************************************\n\nint \nlush_agent_pool__init(lush_agent_pool_t* x, const char* path)\n{\n  int num_agents = 1; // count the agents\n\n  x->metric_time = lush_metricid_NULL;\n  x->metric_idleness = lush_metricid_NULL;\n\n  // 1. Allocate tables first\n#define FN_TBL_ALLOC(BASE, FN, SZ) \\\n  BASE->FN = (FN ## _fn_t *) hpcrun_malloc(sizeof(FN ## _fn_t) * (SZ))\n  \n  FN_TBL_ALLOC(x, LUSHI_init,            num_agents + 1);\n  FN_TBL_ALLOC(x, LUSHI_fini,            num_agents + 1);\n  FN_TBL_ALLOC(x, LUSHI_strerror,        num_agents + 1);\n  FN_TBL_ALLOC(x, LUSHI_reg_dlopen,      num_agents + 1);\n  FN_TBL_ALLOC(x, LUSHI_ismycode,        num_agents + 1);\n  FN_TBL_ALLOC(x, LUSHI_step_bichord,    num_agents + 1);\n  FN_TBL_ALLOC(x, LUSHI_step_pnote,      num_agents + 1);\n  FN_TBL_ALLOC(x, LUSHI_step_lnote,      num_agents + 1);\n  FN_TBL_ALLOC(x, LUSHI_do_metric,       num_agents + 1);\n\n#undef FN_TBL_ALLOC\n\n  // 2. Now initialize agents\n\n  // FIXME: assumes only one agent at the moment\n  int aid = 1;\n  const char* apath = path;\n  lush_agent__init(&x->agent, aid, apath, x);  \n\n  return 0;\n}\n\n\nint \nlush_agent_pool__fini(lush_agent_pool_t* x)\n{\n#define FN_TBL_FREE(BASE, FN) \\\n  /* free(BASE->FN) */\n  \n  FN_TBL_FREE(x, LUSHI_init);\n  FN_TBL_FREE(x, LUSHI_fini);\n  FN_TBL_FREE(x, LUSHI_strerror);\n  FN_TBL_FREE(x, LUSHI_reg_dlopen);\n  FN_TBL_FREE(x, LUSHI_ismycode);\n  FN_TBL_FREE(x, LUSHI_step_bichord);\n  FN_TBL_FREE(x, LUSHI_step_pnote);\n  FN_TBL_FREE(x, LUSHI_step_lnote);\n  FN_TBL_FREE(x, LUSHI_do_metric);\n\n#undef FN_TBL_FREE\n  \n  memset(x, 0, sizeof(*x));\n\n  return 0;\n}\n\n\n// **************************************************************************\n// LUSH Unwinding Interface\n// **************************************************************************\n\nvoid \nlush_init_unw(lush_cursor_t* cursor, \n\t      lush_agent_pool_t* apool, ucontext_t* context)\n{\n  memset(cursor, 0, sizeof(*cursor));\n  \n  cursor->apool = apool;\n  lush_cursor_set_flag(cursor, LUSH_CURSOR_FLAGS_BEG_PPROJ);\n  lush_cursor_set_flag(cursor, LUSH_CURSOR_FLAGS_BEG_PCHORD);\n  hpcrun_unw_init_cursor(lush_cursor_get_pcursor(cursor), context);\n}\n\n\nlush_step_t\nlush_step_bichord(lush_cursor_t* cursor)\n{\n  // INVARIANT: the cursor is initialized with the first p-note of\n  // what will be the current p-chord (LUSH_CURSOR_FLAGS_BEG_PCHORD),\n  // or has the LUSH_CURSOR_FLAGS_END_PPROJ flag set.\n\n  lush_step_t ty = LUSH_STEP_NULL;\n\n  // 1. Sanity check\n  if (lush_cursor_is_flag(cursor, LUSH_CURSOR_FLAGS_END_PPROJ)) {\n    return LUSH_STEP_END_PROJ;\n  }\n\n  // 2. Officially step to next bichord.  First attempt to use an\n  // agent to interpret the p-chord.  Otherwise, use the 'identity\n  // agent'\n  lush_cursor_unset_flag(cursor, LUSH_CURSOR_FLAGS_END_PCHORD);\n  lush_cursor_unset_flag(cursor, LUSH_CURSOR_FLAGS_END_LCHORD);\n\n  void* ip_unnorm = lush_cursor_get_ip_unnorm(cursor);\n  ip_normalized_t ip_norm = lush_cursor_get_ip_norm(cursor);\n  lush_agentid_t first_aid = lush_agentid_NULL;\n\n  // Attempt to find an agent\n  lush_agent_pool_t* pool = cursor->apool;\n  lush_agentid_t aid = 1;\n  for (aid = 1; aid <= 1; ++aid) { // FIXME: first in list, etc.\n    if (pool->LUSHI_ismycode[aid]((void*) ip_unnorm)) { \n      ty = pool->LUSHI_step_bichord[aid](cursor);\n      lush_cursor_set_aid_prev(cursor, aid);\n      first_aid = aid;\n      // FIXME: move agent to beginning of list;\n      break;\n    }\n  }\n\n  // Use the Identity agent: Association is 1-to-1\n  if (first_aid == lush_agentid_NULL) {\n    lush_lip_t* lip = lush_cursor_get_lip(cursor);\n\n    // 32-bit warnings\n    lush_lip_setLMId(lip, ip_norm.lm_id);\n    lush_lip_setLMIP(lip, (uint64_t)(uintptr_t)ip_norm.lm_ip);\n\n    ty = LUSH_STEP_CONT;\n    lush_cursor_set_assoc(cursor, LUSH_ASSOC_1_to_1);\n  }\n\n  // 3. Set the cursor's agentid\n  lush_cursor_set_aid(cursor, first_aid);\n\n  return ty;\n}\n\n\nlush_step_t \nlush_step_pnote(lush_cursor_t* cursor)\n{\n  if (lush_cursor_is_flag(cursor, LUSH_CURSOR_FLAGS_END_PCHORD)) {\n    return LUSH_STEP_END_CHORD;\n  }\n\n  if (lush_cursor_is_flag(cursor, LUSH_CURSOR_FLAGS_BEG_PPROJ)) {\n    lush_cursor_unset_flag(cursor, LUSH_CURSOR_FLAGS_BEG_PPROJ);\n  }\n\n  lush_step_t ty;\n\n  // Special case: LUSH_CURSOR_FLAGS_BEG_PCHORD is set\n  if (lush_cursor_is_flag(cursor, LUSH_CURSOR_FLAGS_BEG_PCHORD)) {\n    lush_cursor_unset_flag(cursor, LUSH_CURSOR_FLAGS_BEG_PCHORD);\n    if (lush_cursor_get_assoc(cursor) == LUSH_ASSOC_0_to_0) {\n      // Special case: LUSH_ASSOC_0_to_0\n      ty = LUSH_STEP_END_CHORD;\n    }\n    else {\n      return LUSH_STEP_CONT;\n    }\n  }\n\n  ty = lush_forcestep_pnote(cursor);\n  \n  // filter return type\n  if (ty == LUSH_STEP_END_PROJ) {\n    ty = LUSH_STEP_END_CHORD;\n  }\n  return ty;\n}\n\n\nlush_step_t\nlush_step_lnote(lush_cursor_t* cursor)\n{\n  if (lush_cursor_is_flag(cursor, LUSH_CURSOR_FLAGS_END_LCHORD)) {\n    return LUSH_STEP_END_CHORD;\n  }\n\n  lush_step_t ty = LUSH_STEP_NULL;\n\n  // Step cursor to next l-note, using the appropriate agent\n  lush_agent_pool_t* pool = cursor->apool;\n  lush_agentid_t aid = lush_cursor_get_aid(cursor);\n  if (aid != lush_agentid_NULL) {\n    ty = pool->LUSHI_step_lnote[aid](cursor);\n  }\n  else {\n    // Identity agent: Association is 1-to-1, so l-chord is unit length\n    // NOTE: lip was set by lush_step_bichord()\n    ty = LUSH_STEP_CONT;\n    lush_cursor_set_flag(cursor, LUSH_CURSOR_FLAGS_END_LCHORD);\n  }\n\n  // Set cursor flags\n  if (ty == LUSH_STEP_END_CHORD\n      || ty == LUSH_STEP_END_PROJ\n      || ty == LUSH_STEP_ERROR) {\n    lush_cursor_set_flag(cursor, LUSH_CURSOR_FLAGS_END_LCHORD);\n  }\n  if (ty == LUSH_STEP_END_PROJ\n      || ty == LUSH_STEP_ERROR) {\n    lush_cursor_set_flag(cursor, LUSH_CURSOR_FLAGS_END_LPROJ);\n  }\n\n  // filter return type\n  if (ty == LUSH_STEP_END_PROJ) {\n    ty = LUSH_STEP_END_CHORD;\n  }\n\n  return ty;\n}\n\n\n// **************************************************************************\n// LUSH Unwinding Primitives\n// **************************************************************************\n\nlush_step_t\nlush_step_pchord(lush_cursor_t* cursor)\n{\n  lush_step_t ty = LUSH_STEP_NULL;\n\n#if 0 // FIXME: check this\n  if (!lush_cursor_is_flag(cursor, LUSH_CURSOR_FLAGS_INIT)) {\n    // complete the current p-chord, if we haven't examined all p-notes\n    while (!lush_cursor_is_flag(cursor, LUSH_CURSOR_FLAGS_DONE_PCHORD)) {\n      lush_forcestep_pnote(cursor);\n    }\n    lush_cursor_unset_flag(cursor, LUSH_CURSOR_FLAGS_DONE_CHORD);\n      \n    ty = lush_forcestep_pnote(cursor);\n    \n    if (ty == LUSH_STEP_DONE_CHORDS || ty == LUSH_STEP_ERROR) {\n      // we have reached the outermost frame of the stack (or an error epoch)\n      lush_cursor_set_flag(cursor, LUSH_CURSOR_FLAGS_DONE_CHORD);\n    }\n  }\n  else {\n    // the first p-chord begins at the current p-note (p-cursor)\n    lush_cursor_unset_flag(cursor, LUSH_CURSOR_FLAGS_INIT);\n    ty = LUSH_STEP_CONT;\n  }\n#endif\n\n  return ty;\n}\n\n\nlush_step_t\nlush_forcestep_pnote(lush_cursor_t* cursor)\n{\n  if (lush_cursor_is_flag(cursor, LUSH_CURSOR_FLAGS_END_PPROJ)) {\n    return LUSH_STEP_END_PROJ;\n  }\n\n  lush_step_t ty = LUSH_STEP_NULL;\n  \n  // Step cursor to next p-note, using the appropriate agent\n  lush_agent_pool_t* pool = cursor->apool;\n  lush_agentid_t aid = lush_cursor_get_aid(cursor);\n  if (aid != lush_agentid_NULL) {\n    ty = pool->LUSHI_step_pnote[aid](cursor);\n  }\n  else {\n    // Identity agent: Association is 1-to-1, so p-chord is unit length\n    int t = hpcrun_unw_step(lush_cursor_get_pcursor(cursor));\n    if (t > 0) {\n      ty = LUSH_STEP_END_CHORD;\n    }\n    else if (t == 0) {\n      ty = LUSH_STEP_END_PROJ;\n    }\n    else /* (t < 0) */ {\n      ty = LUSH_STEP_ERROR;\n    }\n  }\n\n  // Set cursor flags\n  if (ty == LUSH_STEP_END_CHORD) {\n    // since prev p-note was end of p-chord, the cursor is pointing to\n    // the beginning of the next p-chord\n    lush_cursor_set_flag(cursor, LUSH_CURSOR_FLAGS_BEG_PCHORD);\n  }\n  if (ty == LUSH_STEP_END_CHORD\n      || ty == LUSH_STEP_END_PROJ\n      || ty == LUSH_STEP_ERROR) {\n    lush_cursor_set_flag(cursor, LUSH_CURSOR_FLAGS_END_PCHORD);\n  }\n  if (ty == LUSH_STEP_END_PROJ\n      || ty == LUSH_STEP_ERROR) {\n    lush_cursor_set_flag(cursor, LUSH_CURSOR_FLAGS_END_PPROJ);\n  }\n  return ty;\n}\n\n\n//***************************************************************************\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/lush/lush.h": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n//***************************************************************************\n//\n// File: \n//   $HeadURL$\n//\n// Purpose:\n//   LUSH: Logical Unwind Support for HPCToolkit\n//\n// Description:\n//   [The set of functions, macros, etc. defined in the file]\n//\n// Author:\n//   Nathan Tallent, Rice University.\n//\n//***************************************************************************\n\n#ifndef lush_lush_h\n#define lush_lush_h\n\n//************************* System Include Files ****************************\n\n#include <stdlib.h>\n#include <ucontext.h>\n\n//*************************** User Include Files ****************************\n\n#include \"lushi.h\"\n#include \"lush-support-rt.h\"\n\n//*************************** Forward Declarations **************************\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif\n\n//***************************************************************************\n// LUSH Agents\n//***************************************************************************\n\n// ---------------------------------------------------------\n// A pool of LUSH agents\n// ---------------------------------------------------------\n\n// FIXME: put this and agent decls in lush-support.h into one file.\nstruct lush_agent_pool {\n\n  lush_agent_t agent; // FIXME: one agent for now\n\n  int metric_time;     // FIXME: only one for now\n  int metric_idleness; // idleness is relative to time\n\n  // for each LUSHI routine, a vector of pointers for each agent\n  // (indexed by agent id)\n#define POOL_DECL(FN) \\\n  FN ## _fn_t*  FN\n\n  POOL_DECL(LUSHI_init);\n  POOL_DECL(LUSHI_fini);\n  POOL_DECL(LUSHI_strerror);\n  POOL_DECL(LUSHI_reg_dlopen);\n  POOL_DECL(LUSHI_ismycode);\n  POOL_DECL(LUSHI_step_bichord);\n  POOL_DECL(LUSHI_step_pnote);\n  POOL_DECL(LUSHI_step_lnote);\n  POOL_DECL(LUSHI_do_metric);\n\n#undef POOL_DECL\n};\n\nint\nlush_agent__init(lush_agent_t* x, int id, const char* path, \n\t\t lush_agent_pool_t* pool);\n\nint\nlush_agent__fini(lush_agent_t* x, lush_agent_pool_t* pool);\n\n\nint\nlush_agent_pool__init(lush_agent_pool_t* x, const char* path);\n\nint\nlush_agent_pool__fini(lush_agent_pool_t* x);\n\n\n//***************************************************************************\n// LUSH Unwinding Interface\n//***************************************************************************\n\n// Given an agent-pool and context, initialize the lush_cursor but do\n// not step to the first (innermost) bichord.\nvoid\nlush_init_unw(lush_cursor_t* cursor, \n\t      lush_agent_pool_t* apool, ucontext_t* context);\n\n\n// Given a lush_cursor, step the cursor to the next (less deeply\n// nested) bichord.  Returns:\n//   LUSH_STEP_CONT:     if step was sucessful\n//   LUSH_STEP_END_PROJ: if chord was end of projection\n//   LUSH_STEP_ERROR:    on account of an error.\nlush_step_t\nlush_step_bichord(lush_cursor_t* cursor);\n\n\n// Given a lush_cursor, step the cursor to the next (less deeply\n// nested) p-note/l-note of the current p-chord/l-chord.\n// Returns: \n//   LUSH_STEP_CONT:      if step was sucessful\n//                        (for l-notes, only possible if not a-to-0)\n//   LUSH_STEP_END_CHORD: if prev note was the end of the chord\n//   LUSH_STEP_ERROR:     on account of an error.\nlush_step_t\nlush_step_pnote(lush_cursor_t* cursor);\n\nlush_step_t\nlush_step_lnote(lush_cursor_t* cursor);\n\n\n//***************************************************************************\n// LUSH Unwinding Primitives\n//***************************************************************************\n\n// Given a lush_cursor, _forcefully_ step the cursor to the next (less\n// deeply nested) p-chord.  Return values are same as\n// lush_step_bichord.\nlush_step_t\nlush_forcestep_pchord(lush_cursor_t* cursor);\n\n\n// Given a lush_cursor, _forcefully_ step the cursor to the next (less\n// deeply nested) p-note which may also be the next p-chord.\n// Returns:\n//   LUSH_STEP_CONT:      if step was sucessful\n//   LUSH_STEP_END_CHORD: if prev p-note was the end of the p-chord\n//   LUSH_STEP_END_PROJ:  if prev p-chord was end of p-projection\n//   LUSH_STEP_ERROR:     on account of an error.\n//\n// Sets zero or more of the following flags (as appropriate):\n//   LUSH_CURSOR_FLAGS_END_PPROJ:  \n//   LUSH_CURSOR_FLAGS_BEG_PCHORD: \n//   LUSH_CURSOR_FLAGS_END_PCHORD: \nlush_step_t\nlush_forcestep_pnote(lush_cursor_t* cursor);\n\n\n//***************************************************************************\n\n#if defined(__cplusplus)\n} /* extern \"C\" */\n#endif\n\n#endif /* lush_lush_h */\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/lush/lushi.h": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n//***************************************************************************\n//\n// File: \n//   $HeadURL$\n//\n// Purpose:\n//   LUSH Interface: Interface for LUSH agents\n//\n// Description:\n//   [The set of functions, macros, etc. defined in the file]\n//\n// Author:\n//   Nathan Tallent, Rice University.\n//\n//***************************************************************************\n\n#ifndef lush_lushi_h\n#define lush_lushi_h\n\n//************************* System Include Files ****************************\n\n#include <stdlib.h>\n#include <stdbool.h>\n\n//*************************** User Include Files ****************************\n\n#include \"lush-support-rt.h\"\n#include \"lushi-cb.h\"\n\n//*************************** Forward Declarations **************************\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif\n\n// **************************************************************************\n// A LUSH agent provides:\n//   1. Facility for logical unwinding\n//   2. Facility for maintaining active marker\n//   3. Runtime concurrency information\n// **************************************************************************\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n// --------------------------------------------------------------------------\n// Initialization/Finalization\n// --------------------------------------------------------------------------\n\nLUSHI_DECL(int, LUSHI_init, (int argc, char** argv,\n\t\t\t     lush_agentid_t           aid,\n\t\t\t     LUSHCB_malloc_fn_t       malloc_fn,\n\t\t\t     LUSHCB_free_fn_t         free_fn,\n\t\t\t     LUSHCB_step_fn_t         step_fn,\n\t\t\t     LUSHCB_loadmap_find_fn_t loadmap_fn));\n\nLUSHI_DECL(int, LUSHI_fini, ());\n\nLUSHI_DECL(char*, LUSHI_strerror, (int code));\n\n\n// --------------------------------------------------------------------------\n// Maintaining Responsibility for Code/Frame-space\n// --------------------------------------------------------------------------\n\nLUSHI_DECL(int, LUSHI_reg_dlopen, ());\n\nLUSHI_DECL(bool, LUSHI_ismycode, (void* addr));\n\n\n// --------------------------------------------------------------------------\n// Logical Unwinding\n// --------------------------------------------------------------------------\n\n// Given a lush_cursor, step the cursor to the next (less deeply\n// nested) bichord.  Returns:\n//   LUSH_STEP_CONT:     if step was sucessful\n//   LUSH_STEP_ERROR:    on account of an error.\n//\n// It is assumed that:\n// - the cursor is initialized with the first p-note of what will be\n//   the current p-chord (IOW, p-note is always valid and part of the\n//   p-projection)\n// - consequently, LUSH_STEP_END_PROJ is not a valid return value.\n// - the predicate LUSHI_ismycode(ip) holds, where ip is the physical\n//   IP from the p-chord\n// - the cursor's agent-id field points to the agent responsible for\n//   the last bichord (or NULL).\nLUSHI_DECL(lush_step_t, LUSHI_step_bichord, (lush_cursor_t* cursor));\n\n\n// Given a lush_cursor, _forcefully_ step the cursor to the next (less\n// deeply nested) p-note which may also be the next p-chord.\n// Returns:\n//   LUSH_STEP_CONT:      if step was sucessful\n//   LUSH_STEP_END_CHORD: if prev p-note was the end of the p-chord\n//   LUSH_STEP_END_PROJ:  if prev p-chord was end of p-projection\n//   LUSH_STEP_ERROR:     on account of an error.\nLUSHI_DECL(lush_step_t, LUSHI_step_pnote, (lush_cursor_t* cursor));\n\n\n// Given a lush_cursor, step the cursor to the next (less deeply\n// nested) l-note of the current l-chord.\n// Returns: \n//   LUSH_STEP_CONT:      if step was sucessful (only possible if not a-to-0)\n//   LUSH_STEP_END_CHORD: if prev l-note was the end of the l-chord\n//   LUSH_STEP_ERROR:     on account of an error.\nLUSHI_DECL(lush_step_t, LUSHI_step_lnote, (lush_cursor_t* cursor));\n\n\n// ...\nLUSHI_DECL(int, LUSHI_set_active_frame_marker, (/*context, callback*/));\n\n// --------------------------------------------------------------------------\n\nLUSHI_DECL(int, LUSHI_lip_destroy, (lush_lip_t* lip));\nLUSHI_DECL(int, LUSHI_lip_eq, (lush_lip_t* lip));\n\nLUSHI_DECL(int, LUSHI_lip_read, ());\nLUSHI_DECL(int, LUSHI_lip_write, ());\n\n\n// --------------------------------------------------------------------------\n// Metrics\n// --------------------------------------------------------------------------\n\nLUSHI_DECL(bool, LUSHI_do_metric, (uint64_t incrMetricIn, bool* doMetric, bool* doMetricIdleness, uint64_t* incrMetric, double* incrMetricIdleness));\n\n\n#ifdef __cplusplus\n}\n#endif\n\n// **************************************************************************\n\n#undef LUSHI_DECL\n\n#if defined(__cplusplus)\n} /* extern \"C\" */\n#endif\n\n#endif /* lush_lushi_h */\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/sample-sources/papi-c-cupti.c": "// ******************* System Includes ********************\n#include <ucontext.h> \n#include <dlfcn.h>\n\n#include <stdbool.h>\n#include <string.h>\n#include <stdint.h>\n// *********************************************************\n\n\n// ******************** PAPI *******************************\n#include <papi.h>\n// *********************************************************\n\n// ******************** MONITOR *******************************\n#include <monitor.h>\n// *********************************************************\n\n// ******************** GPU includes ***********************\n#include <cuda_runtime_api.h>\n#include <cupti.h>\n// *********************************************************\n\n// ******* HPCToolkit Includes *********************************\n#include <lib/prof-lean/spinlock.h>\n\n#include <hpcrun/thread_data.h>\n#include <messages/messages.h>\n#include <hpcrun/sample_event.h>\n#include <hpcrun/safe-sampling.h>\n#include <hpcrun/sample_sources_all.h>\n#include <sample-sources/common.h>\n#include <sample-sources/ss-obj-name.h>\n// *********************************************************\n\n// ******** local includes ***********\n#include \"papi-c.h\"\n#include \"papi-c-extended-info.h\"\n// ***********************************\n\n// ****************** Convenience macros *******************\n\n#define CUPTI_LAUNCH_CALLBACK_DEPTH 7\n\n#define Cupti_call(fn, ...)                                    \\\n{                                                              \\\n  int ret = fn(__VA_ARGS__);                                   \\\n  if (ret != CUPTI_SUCCESS) {                                  \\\n    const char* errstr;                                        \\\n    dcuptiGetResultString(ret, &errstr);                        \\\n    hpcrun_abort(\"error: CUDA/CUPTI API \"                      \\\n                 #fn \" failed w error code %d ==> '%s'\\n\",     \\\n                 ret, errstr);                                 \\\n  }                                                            \\\n}\n\n#define Cupti_call_silent(fn, ...)                             \\\n{                                                              \\\n  (void) fn(__VA_ARGS__);                                      \\\n}\n\n#define Chk_dlopen(v, lib, flags)                     \\\n  void* v = monitor_real_dlopen(lib, flags);          \\\n  if (! v) {                                          \\\n    fprintf(stderr, \"gpu dlopen %s failed\\n\", lib);   \\\n    return;                                           \\\n  }                                                   \\\n\n#define Chk_dlsym(h, fn) {                                \\\n  dlerror();                                              \\\n  d ## fn = dlsym(h, #fn);                                \\\n  char* e = dlerror();                                    \\\n  if (e) {                                                \\\n    fprintf(stderr, \"dlsym(%s) fails w '%s'\\n\", #fn, e);  \\\n    return;                                               \\\n  }                                                       \\\n}\n// ***********************************************************\n\ntypedef struct {\n  int nevents;\n  int event_set;\n  sample_source_t* self;\n} papi_cuda_data_t;\n\nstatic bool event_set_created = false;\nstatic bool event_set_finalized = false;\n\nstatic papi_cuda_data_t local = {};\n\nstatic spinlock_t cupti_lock = SPINLOCK_UNLOCKED;\nstatic spinlock_t setup_lock = SPINLOCK_UNLOCKED;\n\n// ******************** cuda/cupti functions ***********************\n// Some cuda/cupti functions must not be wrapped! So, we fetch them via dlopen.\n// NOTE: naming convention is to prepend the letter \"d\" to the actual function\n// The indirect functions are below.\n//\ncudaError_t (*dcudaThreadSynchronize)(void);\n\nCUptiResult (*dcuptiGetResultString)(CUptiResult result, const char** str); \n\nCUptiResult (*dcuptiSubscribe)(CUpti_SubscriberHandle* subscriber,\n                               CUpti_CallbackFunc callback, \n                               void* userdata);\n\nCUptiResult (*dcuptiEnableCallback)(uint32_t enable,\n                                    CUpti_SubscriberHandle subscriber, \n                                    CUpti_CallbackDomain domain,\n                                    CUpti_CallbackId cbid);\n\nCUptiResult (*dcuptiUnsubscribe)(CUpti_SubscriberHandle subscriber); \n\n\n// *****************************************************************\ntypedef struct cuda_callback_t {\n  sample_source_t* ss;\n  int event_set;\n} cuda_callback_t;\n\n//\n// populate the cuda/cupti functions via dlopen\n//\n\nstatic void\ndlgpu(void)\n{\n  // only use dlfunctions in NON static case\n#ifndef HPCRUN_STATIC_LINK\n  Chk_dlopen(cudart, \"libcudart.so\", RTLD_NOW | RTLD_GLOBAL);\n  Chk_dlsym(cudart, cudaThreadSynchronize);\n\n  Chk_dlopen(cupti, \"libcupti.so\", RTLD_NOW | RTLD_GLOBAL);\n  Chk_dlsym(cupti, cuptiGetResultString);\n  Chk_dlsym(cupti, cuptiSubscribe);\n  Chk_dlsym(cupti, cuptiEnableCallback);\n  Chk_dlsym(cupti, cuptiUnsubscribe);\n#endif // ! HPCRUN_STATIC_LINK\n}\n\n//\n// noop routine\n//\nstatic void\npapi_c_no_action(void)\n{\n  ;\n}\n\n//\n// Predicate to determine if this component is being referenced\n//\nstatic bool\nis_papi_c_cuda(const char* name)\n{\n  return strstr(name, \"cuda\") == name;\n}\n\nstatic void CUPTIAPI\nhpcrun_cuda_kernel_callback(void* userdata,\n\t\t\t    CUpti_CallbackDomain domain,\n\t\t\t    CUpti_CallbackId cbid, \n\t\t\t    const CUpti_CallbackData* cbInfo)\n{\n  TMSG(CUDA, \"Got Kernel Callback\");\n\n  papi_cuda_data_t* cuda_data = userdata;\n  int nevents = cuda_data->nevents;\n  int cudaEventSet = cuda_data->event_set;\n  sample_source_t* self = cuda_data->self;\n\n\n  TMSG(CUDA, \"nevents = %d, cuda event set = %x\", nevents, cudaEventSet);\n\n  // This callback is enabled only for kernel launch; anything else is an error.\n  if (cbid != CUPTI_RUNTIME_TRACE_CBID_cudaLaunch_v3020) {\n    hpcrun_abort(\"CUDA CUPTI callback seen for unexpected \"\n\t\t \"interface operation: callback id  %d\\n\", cbid); \n  }\n\n  if (cbInfo->callbackSite == CUPTI_API_ENTER) {\n    TMSG(CUDA, \"Cupti API -ENTER- portion\");\n    // MC recommends FIXME: Unnecessary, but use cudaDeviceSynchronize\n      // exclusive access to launcher\n    spinlock_lock(&cupti_lock);\n    TMSG(CUPTI, \"-ACQ-lock\");\n    dcudaThreadSynchronize();\n\n    TMSG(CUPTI,\"-- PRE launch callback\");\n    TMSG(CUDA, \"Start monitoring with event set %d\", cudaEventSet);\n    int ret = PAPI_start(cudaEventSet);\n    if (ret != PAPI_OK){\n      EMSG(\"CUDA monitoring failed to start. PAPI_start failed with %s (%d)\", \n\t   PAPI_strerror(ret), ret);\n    }\n  }\n  TMSG(CUDA, \"Past (or done with) CUDA -ENTER- portion\");\n\n\n  if (cbInfo->callbackSite == CUPTI_API_EXIT) {\n    TMSG(CUDA, \"Cupti API -EXIT- portion\");\n    // MC recommends Use cudaDeviceSynchronize\n    dcudaThreadSynchronize();\n    TMSG(CUPTI, \"-- POST launch callback\");\n    long_long eventValues[nevents+2];\n    \n    TMSG(CUDA,\"stopping CUDA monitoring w event set %d\",cudaEventSet);\n    int ret = PAPI_stop(cudaEventSet, eventValues);\n    if (ret != PAPI_OK){\n      EMSG(\"CUDA monitoring failed to -stop-. PAPI_stop failed with %s (%d)\", \n\t   PAPI_strerror(ret), ret);\n    }  \n    TMSG(CUDA,\"stopped CUDA monitoring w event set %d\",cudaEventSet);\n\n    ucontext_t uc;\n    TMSG(CUDA,\"getting context in CUDA event handler\");\n    getcontext(&uc);\n    TMSG(CUDA,\"got context in CUDA event handler\");\n    bool safe = hpcrun_safe_enter();\n    TMSG(CUDA,\"blocked async event in CUDA event handler\");\n    {\n      int i;\n      for (i = 0; i < nevents; i++) \n\t{\n\t  int metric_id = hpcrun_event2metric(self, i);\n\n\t  TMSG(CUDA, \"sampling call path for metric_id = %d\", metric_id);\n\t  hpcrun_sample_callpath(&uc, metric_id, eventValues[i]/*metricIncr*/, \n\t\t\t\t CUPTI_LAUNCH_CALLBACK_DEPTH/*skipInner*/, \n\t\t\t\t 0/*isSync*/, NULL);\n\t  TMSG(CUDA, \"sampled call path for metric_id = %d\", metric_id);\n\t}\n    }\n    TMSG(CUDA,\"unblocking async event in CUDA event handler\");\n    if (safe) hpcrun_safe_exit();\n    TMSG(CUDA,\"unblocked async event in CUDA event handler\");\n\n    spinlock_unlock(&cupti_lock);\n    TMSG(CUPTI,\"-REL-lock\\n\");\n  }\n  TMSG(CUDA, \"At end (past -EXIT-)\");\n}\n\nstatic CUpti_SubscriberHandle subscriber;\n\n//\n// sync setup for cuda/cupti\n//\nstatic void\npapi_c_cupti_setup(void)\n{\n  // FIXME: Remove local definition\n  // CUpti_SubscriberHandle subscriber;\n\n  static bool one_time = false;\n\n  spinlock_lock(&setup_lock);\n  TMSG(CUDA, \"CUPTI setup acquire lock\");\n  if (one_time) {\n    spinlock_unlock(&setup_lock);\n    TMSG(CUDA, \"CUPTI setup release lock (setup already called)\");\n    return;\n  }\n\n  TMSG(CUDA,\"sync setup called\");\n\n  thread_data_t* td = hpcrun_get_thread_data();\n  local.self = hpcrun_fetch_source_by_name(\"papi\");\n\n  local.nevents  = local.self->evl.nevents;\n\n  // get cuda event set\n\n  int cuda_component_idx;\n  int n_components = PAPI_num_components();\n\n  for (int i = 0; i < n_components; i++) {\n    if (is_papi_c_cuda(PAPI_get_component_info(i)->name)) {\n      cuda_component_idx = i;\n      break;\n    }\n  }\n\n  papi_source_info_t* psi = td->ss_info[local.self->sel_idx].ptr;\n  local.event_set = get_component_event_set(psi, cuda_component_idx);\n\n  Cupti_call(dcuptiSubscribe, &subscriber,\n             (CUpti_CallbackFunc)hpcrun_cuda_kernel_callback, \n             &local);\n             \n  Cupti_call(dcuptiEnableCallback, 1, subscriber,\n             CUPTI_CB_DOMAIN_RUNTIME_API,\n             CUPTI_RUNTIME_TRACE_CBID_cudaLaunch_v3020);\n\n  one_time = true;\n  spinlock_unlock(&setup_lock);\n  TMSG(CUDA, \"CUPTI setup release lock\");\n}\n\n//\n// Get or create a cupti event set --- but only ONCE per process\n//\nvoid\npapi_c_cupti_get_event_set(int* ev_s)\n{\n  TMSG(CUDA, \"Get event set\");\n  spinlock_lock(&setup_lock);\n  TMSG(CUDA, \"Cupti lock acquired\");\n  if (! event_set_created) {\n    TMSG(CUDA, \"No event set created, so create one\");\n    int ret = PAPI_create_eventset(ev_s);\n    if (ret != PAPI_OK) {\n      hpcrun_abort(\"Failure: PAPI_create_eventset.Return code = %d ==> %s\", \n                   ret, PAPI_strerror(ret));\n    }\n    local.event_set = *ev_s;\n    event_set_created = true;\n    TMSG(CUDA, \"Event set %d created\", local.event_set);\n  }\n  spinlock_unlock(&setup_lock);\n  TMSG(CUDA, \"Cupti lock released\");\n}\n\nint\npapi_c_cupti_add_event(int ev_s, int ev)\n{\n  int rv = PAPI_OK;\n  TMSG(CUDA, \"Adding event to cupti event set\");\n  spinlock_lock(&setup_lock);\n  TMSG(CUDA, \"Cupti lock acquired\");\n  if (! event_set_finalized) {\n    TMSG(CUDA, \"Really add event %x to cupti event set\", ev);\n    rv = PAPI_add_event(local.event_set, ev);\n    TMSG(CUDA, \"Check event set passed in = %d, cuda event set = %d\", ev_s, local.event_set);\n  }\n  spinlock_unlock(&setup_lock);\n  TMSG(CUDA, \"Cupti lock released\");\n  return rv;\n}\n\nvoid\npapi_c_cupti_finalize_event_set(void)\n{\n  spinlock_lock(&setup_lock);\n  event_set_finalized = true;\n  spinlock_unlock(&setup_lock);\n}\n\n\n//\n// sync teardown for cuda/cupti\n//\nstatic void\npapi_c_cupti_teardown(void)\n{\n  static bool one_time = false;\n  spinlock_lock(&setup_lock);\n  if (one_time) return;\n\n  TMSG(CUDA,\"sync teardown called (=unsubscribe)\");\n  \n  Cupti_call(dcuptiUnsubscribe, subscriber);\n  one_time = true;\n  spinlock_unlock(&setup_lock);\n}\n\nstatic sync_info_list_t cuda_component = {\n  .pred = is_papi_c_cuda,\n  .get_event_set = papi_c_cupti_get_event_set,\n  .add_event = papi_c_cupti_add_event,\n  .finalize_event_set = papi_c_cupti_finalize_event_set,\n  .sync_setup = papi_c_cupti_setup,\n  .sync_teardown = papi_c_cupti_teardown,\n  .sync_start = papi_c_no_action,\n  .sync_stop = papi_c_no_action,\n  .process_only = true,\n  .next = NULL,\n};\n\n\nvoid\nSS_OBJ_CONSTRUCTOR(papi_c_cupti)(void)\n{\n  // fetch actual cuda/cupti functions\n  dlgpu();\n  papi_c_sync_register(&cuda_component);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/sample-sources/gpu_blame-overrides.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL: https://outreach.scidac.gov/svn/hpctoolkit/branches/hpctoolkit-gpu-blame-shift-proto/src/tool/hpcrun/sample-sources/gpu_blame.c $\n// $Id: itimer.c 3784 2012-05-10 22:35:51Z mc29 $\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// **\n\n#ifdef ENABLE_CUDA\n\n//\n// Blame shifting interface\n//\n\n/******************************************************************************\n * system includes\n *****************************************************************************/\n#include <errno.h>\n#include <stddef.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <stdbool.h>\n#include <sys/ipc.h>\n#include <sys/shm.h>\n#include <fcntl.h>\n#include <sys/mman.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/time.h>           /* setitimer() */\n#include <cuda.h>\n#include <cuda_runtime.h>\n#include <dlfcn.h>\n#include <sys/shm.h>\n#include <ucontext.h>           /* struct ucontext */\n\n/******************************************************************************\n * libmonitor\n *****************************************************************************/\n\n#include <monitor.h>\n\n/******************************************************************************\n * local includes\n *****************************************************************************/\n#include \"common.h\"\n#include <hpcrun/constructors.h>\n#include \"gpu_blame.h\"\n#include \"gpu_ctxt_actions.h\"\n\n#include <hpcrun/main.h>\n#include <hpcrun/hpcrun_options.h>\n#include <hpcrun/write_data.h>\n#include <hpcrun/safe-sampling.h>\n#include <hpcrun/hpcrun_stats.h>\n#include <hpcrun/memory/mmap.h>\n\n#include <hpcrun/cct/cct.h>\n#include <hpcrun/metrics.h>\n#include <hpcrun/sample_event.h>\n#include <hpcrun/sample_sources_registered.h>\n#include <hpcrun/thread_data.h>\n#include <hpcrun/trace.h>\n\n#include <lush/lush-backtrace.h>\n#include <messages/messages.h>\n\n#include <utilities/tokenize.h>\n#include <utilities/arch/context-pc.h>\n\n#include <unwind/common/unwind.h>\n\n#include <lib/support-lean/timer.h>\n#include <lib/prof-lean/spinlock.h>\n#include <lib/prof-lean/atomic.h>\n#include <lib/prof-lean/splay-macros.h>\n#include <lib/prof-lean/wrapper-macros.h>\n/******************************************************************************\n * macros\n *****************************************************************************/\n\n// MACROS for error checking CUDA/CUPTI APIs\n\n#define CHECK_CU_ERROR(err, cufunc)                                    \\\nif (err != CUDA_SUCCESS)                                               \\\n{                                                                      \\\nEETMSG(\"%s:%d: error %d for CUDA Driver API function '%s'\\n\",          \\\n__FILE__, __LINE__, err, cufunc);                                      \\\nmonitor_real_abort();                                                  \\\n}\n\n#define CHECK_CUPTI_ERROR(err, cuptifunc)                             \\\nif (err != CUPTI_SUCCESS)                                             \\\n{                                                                     \\\nconst char *errstr;                                                   \\\ncuptiGetResultString(err, &errstr);                                   \\\nEEMSG(\"%s:%d:Error %s for CUPTI API function '%s'.\\n\",                \\\n__FILE__, __LINE__, errstr, cuptifunc);                               \\\nmonitor_real_abort();                                                 \\\n}\n\n#define CU_SAFE_CALL( call ) do {                                  \\\nCUresult err = call;                                               \\\nif( CUDA_SUCCESS != err) {                                         \\\nEEMSG(\"Cuda driver error %d in call at file '%s' in line %i.\\n\",   \\\nerr, __FILE__, __LINE__ );                                         \\\nmonitor_real_abort();                                              \\\n} } while (0)\n\n#define CUDA_SAFE_CALL( call) do {                             \\\ncudaError_t err = call;                                        \\\nif( cudaSuccess != err) {                                      \\\n  EMSG(\"In %s, @ line %d, gives error %d = '%s'\\n\", __FILE__, __LINE__, \\\n                   err, \\\n                   cudaGetErrorString(err));  \\\n  monitor_real_abort();                                          \\\n} } while (0)\n\n#define Cuda_RTcall(fn) cudaRuntimeFunctionPointer[fn ## Enum].fn ## Real\n\n#define GET_STREAM_ID(x) ((x) - g_stream_array)\n#define ALL_STREAMS_MASK (0xffffffff)\n\n#define MAX_SHARED_KEY_LENGTH (100)\n\n#define HPCRUN_GPU_SHMSZ (1<<10)\n\n#define SHARED_BLAMING_INITIALISED (ipc_data != NULL)\n\n#define INCR_SHARED_BLAMING_DS(field)  do{ if(SHARED_BLAMING_INITIALISED) atomic_add_i64(&(ipc_data->field), 1L); }while(0) \n#define DECR_SHARED_BLAMING_DS(field)  do{ if(SHARED_BLAMING_INITIALISED) atomic_add_i64(&(ipc_data->field), -1L); }while(0) \n\n#define ADD_TO_FREE_EVENTS_LIST(node_ptr) do { (node_ptr)->next_free_node = g_free_event_nodes_head; \\\ng_free_event_nodes_head = (node_ptr); }while(0)\n\n#define ADD_TO_FREE_TREE_NODE_LIST(node_ptr) do { (node_ptr)->next_free_node = g_free_tree_nodes_head; \\\ng_free_tree_nodes_head = (node_ptr); }while(0)\n\n#define ADD_TO_FREE_ACTIVE_KERNEL_NODE_LIST(node_ptr) do { (node_ptr)->next_free_node = g_free_active_kernel_nodes_head; \\\ng_free_active_kernel_nodes_head = (node_ptr); }while(0)\n\n#define HPCRUN_ASYNC_BLOCK_SPIN_LOCK bool safe = false; \\\ndo {safe = hpcrun_safe_enter(); \\\nspinlock_lock(&g_gpu_lock);} while(0)\n\n#define HPCRUN_ASYNC_UNBLOCK_SPIN_UNLOCK  do{spinlock_unlock(&g_gpu_lock); \\\n    if (safe) hpcrun_safe_exit();} while(0)\n\n#define SYNC_PROLOGUE(ctxt, launch_node, start_time, rec_node)                                                                   \\\nTD_GET(gpu_data.overload_state) = SYNC_STATE;                                                                                    \\\nTD_GET(gpu_data.accum_num_sync_threads) = 0;                                                                                     \\\nTD_GET(gpu_data.accum_num_samples) = 0;                                                                                          \\\nhpcrun_safe_enter();                                                                                                             \\\nucontext_t ctxt;                                                                                                                 \\\ngetcontext(&ctxt);                                                                                                               \\\ncct_node_t * launch_node = hpcrun_sample_callpath(&ctxt, cpu_idle_metric_id, 0 , 0 /*skipInner */ , 1 /*isSync */, NULL ).sample_node; \\\nTD_GET(gpu_data.is_thread_at_cuda_sync) = true;                                                                                  \\\nspinlock_lock(&g_gpu_lock);                                                                                                      \\\nuint64_t start_time;                                                                                                             \\\nevent_list_node_t  *  rec_node = enter_cuda_sync(& start_time);                                                                  \\\nspinlock_unlock(&g_gpu_lock);                                                                                                    \\\nINCR_SHARED_BLAMING_DS(num_threads_at_sync_all_procs);                                                                           \\\nhpcrun_safe_exit();                                                                                                             \n\n#define SYNC_EPILOGUE(ctxt, launch_node, start_time, rec_node, mask, end_time)                                \\\nhpcrun_safe_enter();                                                                                          \\\nspinlock_lock(&g_gpu_lock);                                                                                   \\\nuint64_t last_kernel_end_time = leave_cuda_sync(rec_node,start_time,mask);                                    \\\nTD_GET(gpu_data.accum_num_sync_threads) = 0;                                                                  \\\nTD_GET(gpu_data.accum_num_samples) = 0;                                                                       \\\nspinlock_unlock(&g_gpu_lock);                                                                                 \\\nstruct timeval tv;                                                                                            \\\ngettimeofday(&tv, NULL);                                                                                      \\\nuint64_t end_time  = ((uint64_t)tv.tv_usec + (((uint64_t)tv.tv_sec) * 1000000));                              \\\nif ( last_kernel_end_time > end_time) {last_kernel_end_time = end_time;}                                      \\\nuint64_t cpu_idle_time = last_kernel_end_time == 0 ? 0: last_kernel_end_time  - start_time;                   \\\nuint64_t gpu_idle_time = last_kernel_end_time == 0 ? end_time - start_time : end_time - last_kernel_end_time; \\\ncct_metric_data_increment(cpu_idle_metric_id, launch_node, (cct_metric_data_t) {.i = (cpu_idle_time)});       \\\ncct_metric_data_increment(gpu_idle_metric_id, launch_node, (cct_metric_data_t) {.i = (gpu_idle_time)});       \\\nhpcrun_safe_exit();                                                                                           \\\nDECR_SHARED_BLAMING_DS(num_threads_at_sync_all_procs);                                                        \\\nTD_GET(gpu_data.is_thread_at_cuda_sync) = false;\n\n#define SYNC_MEMCPY_PROLOGUE(ctxt, launch_node, start_time, rec_node) SYNC_PROLOGUE(ctxt, launch_node, start_time, rec_node)\n\n#define SYNC_MEMCPY_EPILOGUE(ctxt, launch_node, start_time, rec_node, mask, end_time, bytes, direction)       \\\nhpcrun_safe_enter();                                                                                          \\\nspinlock_lock(&g_gpu_lock);                                                                                   \\\nuint64_t last_kernel_end_time = leave_cuda_sync(rec_node,start_time,mask);                                    \\\nTD_GET(gpu_data.accum_num_sync_threads) = 0;                                                                  \\\nTD_GET(gpu_data.accum_num_samples) = 0;                                                                       \\\nspinlock_unlock(&g_gpu_lock);                                                                                 \\\nstruct timeval tv;                                                                                            \\\ngettimeofday(&tv, NULL);                                                                                      \\\nuint64_t end_time  = ((uint64_t)tv.tv_usec + (((uint64_t)tv.tv_sec) * 1000000));                              \\\nif ( last_kernel_end_time > end_time) {last_kernel_end_time = end_time;}                                      \\\nuint64_t cpu_idle_time = end_time  - start_time;                                                              \\\nuint64_t gpu_idle_time = last_kernel_end_time == 0 ? end_time - start_time : end_time - last_kernel_end_time; \\\ncct_metric_data_increment(cpu_idle_metric_id, launch_node, (cct_metric_data_t) {.i = (cpu_idle_time)});       \\\ncct_metric_data_increment(gpu_idle_metric_id, launch_node, (cct_metric_data_t) {.i = (gpu_idle_time)});       \\\nincrement_mem_xfer_metric(bytes, direction, launch_node);                                                     \\\nhpcrun_safe_exit();                                                                                           \\\nDECR_SHARED_BLAMING_DS(num_threads_at_sync_all_procs);                                                        \\\nTD_GET(gpu_data.is_thread_at_cuda_sync) = false\n\n\n#define ASYNC_KERNEL_PROLOGUE(streamId, event_node, context, cct_node, stream, skip_inner)                                              \\\ncreate_stream0_if_needed(stream);                                                                                                       \\\nuint32_t streamId = 0;                                                                                                                  \\\nevent_list_node_t *event_node;                                                                                                          \\\nstreamId = splay_get_stream_id(stream);                                                                         \\\nHPCRUN_ASYNC_BLOCK_SPIN_LOCK;                                                                                                           \\\nTD_GET(gpu_data.is_thread_at_cuda_sync) = true;                                                                                         \\\nucontext_t context;                                                                                                                     \\\ngetcontext(&context);                                                                                                                   \\\ncct_node_t *cct_node = hpcrun_sample_callpath(&context, cpu_idle_metric_id, 0, skip_inner /*skipInner */ , 1 /*isSync */, NULL ).sample_node; \\\ncct_node_t *stream_cct = stream_duplicate_cpu_node(g_stream_array[streamId].st, &context, cct_node);                                    \\\nmonitor_disable_new_threads();                                                                                                          \\\nevent_node = create_and_insert_event(streamId, cct_node, stream_cct);                                                                   \\\nCUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaEventRecordEnum].cudaEventRecordReal(event_node->event_start, stream));                     \\\nINCR_SHARED_BLAMING_DS(outstanding_kernels)\n\n\n#define ASYNC_KERNEL_EPILOGUE(event_node, stream)                                                                 \\\nTD_GET(gpu_data.overload_state) = WORKING_STATE;                                                                  \\\nCUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaEventRecordEnum].cudaEventRecordReal(event_node->event_end, stream)); \\\nmonitor_enable_new_threads();                                                                                     \\\nTD_GET(gpu_data.is_thread_at_cuda_sync) = false;                                                                  \\\nHPCRUN_ASYNC_UNBLOCK_SPIN_UNLOCK\n\n#define ASYNC_MEMCPY_PROLOGUE(streamId, event_node, context, cct_node, stream, skip_inner) \\\n\tASYNC_KERNEL_PROLOGUE(streamId, event_node, context, cct_node, stream, skip_inner)\n\n#define ASYNC_MEMCPY_EPILOGUE(event_node, cct_node, stream, count, kind)                                          \\\nTD_GET(gpu_data.overload_state) = WORKING_STATE;                                                                  \\\nCUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaEventRecordEnum].cudaEventRecordReal(event_node->event_end, stream)); \\\nmonitor_enable_new_threads();                                                                                     \\\nincrement_mem_xfer_metric(count, kind, cct_node);                                                                 \\\nTD_GET(gpu_data.is_thread_at_cuda_sync) = false;                                                                  \\\nHPCRUN_ASYNC_UNBLOCK_SPIN_UNLOCK\n\n\n#define GET_NEW_TREE_NODE(node_ptr) do {                          \\\nif (g_free_tree_nodes_head) {                                     \\\nnode_ptr = g_free_tree_nodes_head;                                \\\ng_free_tree_nodes_head = g_free_tree_nodes_head->next_free_node;  \\\n} else {                                                          \\\nnode_ptr = (tree_node *) hpcrun_malloc(sizeof(tree_node));        \\\n}                                                                 \\\n} while(0)\n\n#define GET_NEW_ACTIVE_KERNEL_NODE(node_ptr) do {                                      \\\nif (g_free_active_kernel_nodes_head) {                                                 \\\nnode_ptr = g_free_active_kernel_nodes_head;                                            \\\ng_free_active_kernel_nodes_head = g_free_active_kernel_nodes_head->next_free_node;     \\\n} else {                                                                               \\\nnode_ptr = (active_kernel_node_t *) hpcrun_malloc(sizeof(active_kernel_node_t));       \\\n}                                                                                      \\\n} while(0)\n\n\n#define SYNCHRONOUS_CLEANUP do{  hpcrun_safe_enter();          \\\nspinlock_lock(&g_gpu_lock);                                    \\\ncleanup_finished_events();                                     \\\nspinlock_unlock(&g_gpu_lock);                                  \\\nhpcrun_safe_exit(); } while(0)\n\n\n\n#define CUDA_RUNTIME_SYNC_WRAPPER(fn,  prologueArgs, epilogueArgs, ...) \\\n    VA_FN_DECLARE(cudaError_t, fn, __VA_ARGS__) {\\\n    if (! hpcrun_is_safe_to_sync(__func__)) return VA_FN_CALL(cudaRuntimeFunctionPointer[fn##Enum].fn##Real, __VA_ARGS__);\\\n    SYNC_PROLOGUE prologueArgs;\\\n    monitor_disable_new_threads();\\\n    cudaError_t ret = VA_FN_CALL(cudaRuntimeFunctionPointer[fn##Enum].fn##Real, __VA_ARGS__);\\\n    monitor_enable_new_threads();\\\n    SYNC_EPILOGUE epilogueArgs;\\\n    return ret;\\\n    }\n\n\n#define CUDA_RUNTIME_SYNC_ON_STREAM_WRAPPER(fn,  prologueArgs, epilogueArgs, ...) \\\n    VA_FN_DECLARE(cudaError_t, fn, __VA_ARGS__) {\\\n    SYNC_PROLOGUE prologueArgs;\\\n    monitor_disable_new_threads();\\\n    cudaError_t ret = VA_FN_CALL(cudaRuntimeFunctionPointer[fn##Enum].fn##Real, __VA_ARGS__);\\\n    hpcrun_safe_enter();\\\n    uint32_t streamId;\\\n    streamId = splay_get_stream_id(stream);\\\n    hpcrun_safe_exit();\\\n    monitor_enable_new_threads();\\\n    SYNC_EPILOGUE epilogueArgs;\\\n    return ret;\\\n    }\n\n\n#define CUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(fn,  prologueArgs, epilogueArgs, ...) \\\n    VA_FN_DECLARE(cudaError_t, fn, __VA_ARGS__) {\\\n    if (! hpcrun_is_safe_to_sync(__func__)) return VA_FN_CALL(cudaRuntimeFunctionPointer[fn##Enum].fn##Real, __VA_ARGS__);\\\n    ASYNC_MEMCPY_PROLOGUE prologueArgs;\\\n    cudaError_t ret = VA_FN_CALL(cudaRuntimeFunctionPointer[fn##Enum].fn##Real, __VA_ARGS__);\\\n    ASYNC_MEMCPY_EPILOGUE epilogueArgs;\\\n    return ret;\\\n    }\n\n#define CUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(fn,  prologueArgs, epilogueArgs, ...) \\\n    VA_FN_DECLARE(cudaError_t, fn, __VA_ARGS__) {\\\n    if (! hpcrun_is_safe_to_sync(__func__)) return VA_FN_CALL(cudaRuntimeFunctionPointer[fn##Enum].fn##Real, __VA_ARGS__);\\\n    SYNC_MEMCPY_PROLOGUE prologueArgs;\\\n    monitor_disable_new_threads();\\\n    cudaError_t ret = VA_FN_CALL(cudaRuntimeFunctionPointer[fn##Enum].fn##Real, __VA_ARGS__);\\\n    monitor_enable_new_threads();\\\n    SYNC_MEMCPY_EPILOGUE epilogueArgs;\\\n    return ret;\\\n    }\n\n\n//\n// Macro to populate a given set of CUDA function pointers:\n//   takes a basename for a function pointer set, and a library\n//   to read from (as a fallback position).\n//\n//  Method:\n//\n//  Decide on RTLD_NEXT or dlopen of library for the function pointer set\n//  (Abort if neither method succeeds)\n//  fetch all of the symbols using dlsym, aborting if any failure\n\n#define PopulateGPUFunctionPointers(basename, library)                             \\\n  char *error;                                                                     \\\n                                                                                   \\\n  dlerror(); \t\t\t\t\t\t\t\t\t   \\\n  void* dlsym_arg = RTLD_NEXT;                                                     \\\n  void* try = dlsym(dlsym_arg, basename ## FunctionPointer[0].functionName);\t   \\\n  if ((error=dlerror()) || (! try)) {\t\t\t\t\t\t   \\\n    if (getenv(\"DEBUG_HPCRUN_GPU_CONS\"))\t\t\t\t\t   \\\n      fprintf(stderr, \"RTLD_NEXT argument fails for \" #basename \" (%s)\\n\",         \\\n\t      (! try) ? \"trial function pointer = NULL\" : \"dlerror != NULL\");\t   \\\n    dlerror();\t\t\t\t\t\t\t\t\t   \\\n    dlsym_arg = monitor_real_dlopen(#library, RTLD_LAZY);\t\t\t   \\\n    if (! dlsym_arg) {                                                             \\\n      fprintf(stderr, \"fallback dlopen of \" #library \" failed,\"\t\t\t   \\\n\t      \" dlerror message = '%s'\\n\", dlerror());\t\t\t\t   \\\n      monitor_real_abort();\t\t\t\t\t\t\t   \\\n    }                                                                              \\\n    if (getenv(\"DEBUG_HPCRUN_GPU_CONS\"))                                           \\\n      fprintf(stderr, \"Going forward with \" #basename \" overrides using \" #library \"\\n\"); \\\n  }                                                                                \\\n  else\t\t\t\t\t\t\t\t\t\t   \\\n    if (getenv(\"DEBUG_HPCRUN_GPU_CONS\"))\t\t\t\t\t   \\\n      fprintf(stderr, \"Going forward with \" #basename \" overrides using RTLD_NEXT\\n\"); \\\n  for (int i = 0; i < sizeof(basename ## FunctionPointer)/sizeof(basename ## FunctionPointer[0]); i++) { \\\n    dlerror();                                                                     \\\n    basename ## FunctionPointer[i].generic =\t\t\t\t\t   \\\n      dlsym(dlsym_arg, basename ## FunctionPointer[i].functionName);\t\t   \\\n    if (getenv(\"DEBUG_HPCRUN_GPU_CONS\"))\t\t\t\t\t   \\\n      fprintf(stderr, #basename \"Fnptr[%d] @ %p for %s = %p\\n\",                    \\\n\t      i, & basename ## FunctionPointer[i].generic,\t\t\t   \\\n\t      basename ## FunctionPointer[i].functionName,\t\t\t   \\\n\t      basename ## FunctionPointer[i].generic);\t\t\t\t   \\\n    if ((error = dlerror()) != NULL) {                                             \\\n      EEMSG(\"%s: during dlsym \\n\", error);\t\t\t\t\t   \\\n      monitor_real_abort();\t\t\t\t\t\t\t   \\\n    }\t\t\t\t\t\t\t\t\t\t   \\\n  }\n\n/******************************************************************************\n * local constants\n *****************************************************************************/\n\nenum _cuda_const {\n    KERNEL_START,\n    KERNEL_END\n};\n\n// states for accounting overload potential \nenum overloadPotentialState{\n    START_STATE=0,\n    WORKING_STATE,\n    SYNC_STATE,\n    OVERLOADABLE_STATE\n};\n\n\n/******************************************************************************\n * externs\n *****************************************************************************/\n\n// function pointers to real cuda runtime functions\nextern cudaRuntimeFunctionPointer_t  cudaRuntimeFunctionPointer[];\n\n// function pointers to real cuda driver functions\nextern cuDriverFunctionPointer_t  cuDriverFunctionPointer[];\n\n// special papi disable function\nextern void hpcrun_disable_papi_cuda(void);\n\n/******************************************************************************\n * forward declarations\n *****************************************************************************/\n\n// Each event_list_node_t maintains information about an asynchronous cuda activity (kernel or memcpy)\n// event_list_node_t is a bit of misnomer it should have been activity_list_node_t.\n\ntypedef struct event_list_node_t {\n    // cudaEvent inserted immediately before and after the activity\n    cudaEvent_t event_start;\n    cudaEvent_t event_end;\n\n    // start and end times of event_start and event_end\n    uint64_t event_start_time;\n    uint64_t event_end_time;\n\n    // CCT node of the CPU thread that launched this activity\n    cct_node_t *launcher_cct;\n    // CCT node of the stream\n    cct_node_t *stream_launcher_cct;\n\n    // Outstanding threads that need to examine this activity\n    uint32_t ref_count;\n\n    // our internal splay tree id for the corresponding cudaStream for this activity\n    uint32_t stream_id;\n    union {\n        struct event_list_node_t *next;\n        struct event_list_node_t *next_free_node;\n    };\n} event_list_node_t;\n\n\n// Per GPU stream information\ntypedef struct stream_node_t {\n    // hpcrun profiling and tracing infp\n    struct core_profile_trace_data_t *st;\n    // pointer to most recently issued activity\n    struct event_list_node_t *latest_event_node;\n    // pointer to the oldest unfinished activity of this stream\n    struct event_list_node_t *unfinished_event_node;\n    // pointer to the next stream which has activities pending\n    struct stream_node_t *next_unfinished_stream;\n    // used to remove from hpcrun cleanup list if stream is explicitly destroyed\n    hpcrun_aux_cleanup_t * aux_cleanup_info;\n    // IDLE NODE persistent id for this stream\n    int32_t idle_node_id;\n\n} stream_node_t;\n\n\n\ntypedef struct active_kernel_node_t {\n    uint64_t event_time;\n    bool event_type;\n    uint32_t stream_id;\n    union {\n        cct_node_t *launcher_cct;       // present only in START nodes\n        struct active_kernel_node_t *start_node;\n    };\n    union {\n        struct active_kernel_node_t *next;\n        struct active_kernel_node_t *next_free_node;\n    };\n    struct active_kernel_node_t *next_active_kernel;\n    struct active_kernel_node_t *prev;\n    \n} active_kernel_node_t;\n\n// We map GPU stream ID given by cuda to an internal id and place it in a splay tree.\n// stream_to_id_map_t is the structure we store as a node in the splay tree\n\ntypedef struct stream_to_id_map_t {\n    // actual cudaStream\n    cudaStream_t stream;\n    // Id given by us\n    uint32_t id;\n    struct stream_to_id_map_t *left;\n    struct stream_to_id_map_t *right;\n} stream_to_id_map_t;\n\n\ntypedef struct IPC_data_t {\n    uint32_t device_id;\n    uint64_t outstanding_kernels;\n    uint64_t num_threads_at_sync_all_procs;\n} IPC_data_t;\n\n\nstatic uint32_t cleanup_finished_events();\n\n\n/******************************************************************************\n * global variables\n *****************************************************************************/\n\n\n/******************************************************************************\n * local variables\n *****************************************************************************/\n\n// TODO.. Hack to show streams as threads, we  assume max of 32 CPU threads\nstatic uint32_t g_stream_id = 32;\nstatic uint32_t g_stream_to_id_index = 0;\n\n// Lock for stream to id map\nstatic spinlock_t g_stream_id_lock = SPINLOCK_UNLOCKED;\n\n// lock for GPU activities\nstatic spinlock_t g_gpu_lock = SPINLOCK_UNLOCKED;\n\nstatic uint64_t g_num_threads_at_sync;\n\nstatic event_list_node_t *g_free_event_nodes_head;\nstatic active_kernel_node_t *g_free_active_kernel_nodes_head;\n\n// root of splay tree of stream ids\nstatic struct stream_to_id_map_t *stream_to_id_tree_root;\nstatic stream_to_id_map_t stream_to_id[MAX_STREAMS];\nstatic stream_node_t g_stream_array[MAX_STREAMS];\n\n// First stream with pending activities\nstatic stream_node_t *g_unfinished_stream_list_head;\n\n// Last stream with pending activities\nstatic event_list_node_t *g_finished_event_nodes_tail;\n\n// dummy activity node\nstatic event_list_node_t dummy_event_node = {\n  .event_end = 0,\n  .event_start = 0,\n  .event_end_time = 0,\n  .event_end_time = 0,\n  .launcher_cct = 0,\n  .stream_launcher_cct = 0 \n};\n\n// is inter-process blaming enabled?\nstatic bool g_do_shared_blaming;\n\n// What level of nodes to skip in the backtrace\nstatic uint32_t g_cuda_launch_skip_inner;\n\nstatic uint64_t g_start_of_world_time;\n\nstatic cudaEvent_t g_start_of_world_event;\n\nstatic bool g_stream0_initialized = false;\n\nstatic IPC_data_t * ipc_data;\n\n/******************** Utilities ********************/\n/******************** CONSTRUCTORS ********************/\n\n\n// obtain function pointers to all real cuda runtime functions\n\nstatic void\nPopulateEntryPointesToWrappedCudaRuntimeCalls()\n{\n  PopulateGPUFunctionPointers(cudaRuntime, libcudart.so)\n}\n\n// obtain function pointers to all real cuda driver functions\n\nstatic void\nPopulateEntryPointesToWrappedCuDriverCalls(void)\n{\n  PopulateGPUFunctionPointers(cuDriver, libcuda.so)\n}\n\nstatic void\nInitCpuGpuBlameShiftDataStructs(void)\n{\n    char * shared_blaming_env;\n    char * cuda_launch_skip_inner_env;\n    g_unfinished_stream_list_head = NULL;\n    g_finished_event_nodes_tail = &dummy_event_node;\n    dummy_event_node.next = g_finished_event_nodes_tail;\n    shared_blaming_env = getenv(\"HPCRUN_ENABLE_SHARED_GPU_BLAMING\");\n    if(shared_blaming_env)\n        g_do_shared_blaming = atoi(shared_blaming_env);\n\n    cuda_launch_skip_inner_env = getenv(\"HPCRUN_CUDA_LAUNCH_SKIP_INNER\");\n    if(cuda_launch_skip_inner_env)\n        g_cuda_launch_skip_inner = atoi(cuda_launch_skip_inner_env);\n}\n\n\nstatic void PopulateEntryPointesToWrappedCalls() {\n    PopulateEntryPointesToWrappedCudaRuntimeCalls();\n    PopulateEntryPointesToWrappedCuDriverCalls();\n}\n\nHPCRUN_CONSTRUCTOR(CpuGpuBlameShiftInit)(void)\n{\n  hpcrun_disable_papi_cuda();\n  if (getenv(\"DEBUG_HPCRUN_GPU_CONS\"))\n    fprintf(stderr, \"CPU-GPU blame shift constructor called\\n\");\n  // no dlopen calls in static case\n  // #ifndef HPCRUN_STATIC_LINK\n  PopulateEntryPointesToWrappedCalls();\n  InitCpuGpuBlameShiftDataStructs();\n  // #endif // ! HPCRUN_STATIC_LINK\n}\n\n/******************** END CONSTRUCTORS ****/\n\nstatic char shared_key[MAX_SHARED_KEY_LENGTH];\n\nstatic void destroy_shared_memory(void * p) {\n    // we should munmap, but I will not do since we dont do it in so many other places in hpcrun\n    // munmap(ipc_data);\n    shm_unlink((char *)shared_key);\n}\n\nstatic inline void create_shared_memory() {\n  \n    int device_id;\n    int fd ;\n    monitor_disable_new_threads();\n    CUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaGetDeviceEnum].cudaGetDeviceReal(&device_id));\n    monitor_enable_new_threads();\n    sprintf(shared_key, \"/gpublame%d\",device_id);\n    if ( (fd = shm_open(shared_key, O_RDWR | O_CREAT, 0666)) < 0 ) {\n        EEMSG(\"Failed to shm_open (%s) on device %d, retval = %d\", shared_key, device_id, fd);\n        monitor_real_abort();\n    }\n    if ( ftruncate(fd, sizeof(IPC_data_t)) < 0 ) {\n        EEMSG(\"Failed to ftruncate() on device %d\",device_id);\n        monitor_real_abort();\n    }\n    \n    if( (ipc_data = mmap(NULL, sizeof(IPC_data_t), PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0 )) == MAP_FAILED ) {\n        EEMSG(\"Failed to mmap() on device %d\",device_id);\n        monitor_real_abort();\n    }\n\n    hpcrun_process_aux_cleanup_add(destroy_shared_memory, (void *) shared_key);\n    \n}\n\n// Get the stream id given a cudaStream\n\nstatic struct stream_to_id_map_t *splay(struct stream_to_id_map_t *root, cudaStream_t key) {\n    REGULAR_SPLAY_TREE(stream_to_id_map_t, root, key, stream, left, right);\n    return root;\n}\n\n\nstatic uint32_t splay_get_stream_id(cudaStream_t key) {\n    spinlock_lock(&g_stream_id_lock);\n    struct stream_to_id_map_t *root = stream_to_id_tree_root;\n    REGULAR_SPLAY_TREE(stream_to_id_map_t, root, key, stream, left, right);\n    // The stream at the root must match the key, else we are in a bad shape.\n    assert(root->stream == key);\n    stream_to_id_tree_root = root;\n    uint32_t ret = stream_to_id_tree_root->id;\n    spinlock_unlock(&g_stream_id_lock);\n    return ret;\n    \n}\n\n\n// Insert a new cudaStream into the splay tree\n\nstatic stream_to_id_map_t *splay_insert(cudaStream_t stream_ip)\n{\n    \n    spinlock_lock(&g_stream_id_lock);\n    struct stream_to_id_map_t *node = &stream_to_id[g_stream_to_id_index++];\n    node->stream = stream_ip;\n    node->left = node->right = NULL;\n    node->id = g_stream_id++;\n    cudaStream_t stream = node->stream;\n    \n    if (stream_to_id_tree_root != NULL) {\n        stream_to_id_tree_root = splay(stream_to_id_tree_root, stream);\n        \n        if (stream < stream_to_id_tree_root->stream) {\n            node->left = stream_to_id_tree_root->left;\n            node->right = stream_to_id_tree_root;\n            stream_to_id_tree_root->left = NULL;\n        } else if (stream > stream_to_id_tree_root->stream) {\n            node->left = stream_to_id_tree_root;\n            node->right = stream_to_id_tree_root->right;\n            stream_to_id_tree_root->right = NULL;\n        } else {\n            EEMSG(\"stream_to_id_tree_root  splay tree: unable to insert %p (already present)\", node->stream);\n            monitor_real_abort();\n        }\n    }\n    stream_to_id_tree_root = node;\n    spinlock_unlock(&g_stream_id_lock);\n    return stream_to_id_tree_root;\n}\n\n// Initialize hpcrun core_profile_trace_data for a new stream\nstatic inline core_profile_trace_data_t *hpcrun_stream_data_alloc_init(int id) {\n    core_profile_trace_data_t *st = hpcrun_mmap_anon(sizeof(core_profile_trace_data_t));\n    // FIXME: revisit to perform this memstore operation appropriately.\n    //memstore = td->memstore;\n    memset(st, 0xfe, sizeof(core_profile_trace_data_t));\n    //td->memstore = memstore;\n    //hpcrun_make_memstore(&td->memstore, is_child);\n    st->id = id;\n    st->epoch = hpcrun_malloc(sizeof(epoch_t));\n    st->epoch->csdata_ctxt = copy_thr_ctxt(TD_GET(core_profile_trace_data.epoch)->csdata.ctxt); //copy_thr_ctxt(thr_ctxt);\n    hpcrun_cct_bundle_init(&(st->epoch->csdata), (st->epoch->csdata).ctxt);\n    st->epoch->loadmap = hpcrun_getLoadmap();\n    st->epoch->next  = NULL;\n    hpcrun_cct2metrics_init(&(st->cct2metrics_map)); //this just does st->map = NULL;\n    \n    \n    st->trace_min_time_us = 0;\n    st->trace_max_time_us = 0;\n    st->hpcrun_file  = NULL;\n    \n    return st;\n}\n\n\n\nstatic cct_node_t *stream_duplicate_cpu_node(core_profile_trace_data_t *st, ucontext_t *context, cct_node_t *node) {\n    cct_bundle_t* cct= &(st->epoch->csdata);\n    cct_node_t * tmp_root = cct->tree_root;\n    hpcrun_cct_insert_path(&tmp_root, node);\n    return tmp_root;\n}\n\n\ninline void hpcrun_stream_finalize(void * st) {\n    if(hpcrun_trace_isactive()) \n      hpcrun_trace_close(st);\n \n    hpcrun_write_profile_data((core_profile_trace_data_t *) st);\n}\n\n\nstatic struct stream_to_id_map_t *splay_delete(cudaStream_t stream)\n{\n    struct stream_to_id_map_t *result = NULL;\n    \n    TMSG(CUDA, \"Trying to delete %p from stream splay tree\", stream);\n    spinlock_lock(&g_stream_id_lock);\n    if (stream_to_id_tree_root == NULL) {\n        spinlock_unlock(&g_stream_id_lock);\n        TMSG(CUDA, \"stream_to_id_map_t splay tree empty: unable to delete %p\", stream);\n        return NULL;\n    }\n    \n    stream_to_id_tree_root = splay(stream_to_id_tree_root, stream);\n    \n    if (stream != stream_to_id_tree_root->stream) {\n        spinlock_unlock(&g_stream_id_lock);\n        TMSG(CUDA, \"trying to deleting stream %p, but not in splay tree (root = %p)\", stream, stream_to_id_tree_root->stream);\n\t//        monitor_real_abort();\n\treturn NULL;\n    }\n    \n    result = stream_to_id_tree_root;\n    \n    if (stream_to_id_tree_root->left == NULL) {\n        stream_to_id_tree_root = stream_to_id_tree_root->right;\n        spinlock_unlock(&g_stream_id_lock);\n        return result;\n    }\n    \n    stream_to_id_tree_root->left = splay(stream_to_id_tree_root->left, stream);\n    stream_to_id_tree_root->left->right = stream_to_id_tree_root->right;\n    stream_to_id_tree_root = stream_to_id_tree_root->left;\n    spinlock_unlock(&g_stream_id_lock);\n    return result;\n}\n\n\n// Prologue for any cuda synchronization routine\nstatic inline event_list_node_t *enter_cuda_sync(uint64_t * syncStart) {\n    /// caller does HPCRUN_ASYNC_BLOCK_SPIN_LOCK;\n    \n    // Cleanup events so that when I goto wait anybody in the queue will be the ones I have not seen and finished after my timer started.\n    cleanup_finished_events();\n    \n    struct timeval tv;\n    gettimeofday(&tv, NULL);\n    *syncStart = ((uint64_t) tv.tv_usec + (((uint64_t) tv.tv_sec) * 1000000));\n    \n    event_list_node_t *recorded_node = g_finished_event_nodes_tail;\n    if (g_finished_event_nodes_tail != &dummy_event_node)\n        g_finished_event_nodes_tail->ref_count++;\n    \n    atomic_add_i64(&g_num_threads_at_sync, 1L);\n    // caller does  HPCRUN_ASYNC_UNBLOCK_SPIN_UNLOCK;\n    return recorded_node;\n}\n\n\n// blame all kernels finished during the sync time\n\nstatic uint64_t attribute_shared_blame_on_kernels(event_list_node_t * recorded_node, uint64_t recorded_time, const uint32_t stream_mask, double scaling_factor) {\n    \n    // if recorded_node is not dummy_event_node decrement its ref count\n    if (recorded_node != &dummy_event_node)\n        recorded_node->ref_count--;\n    \n    uint32_t num_active_kernels = 0;\n    active_kernel_node_t *sorted_active_kernels_begin = NULL;\n    \n    // Traverse all nodes, inserting them in a sorted list if their end times were past the recorded time\n    // If their start times were before the recorded, just record them as recorded_time\n    \n    event_list_node_t *cur = recorded_node->next, *prev = recorded_node;\n    while (cur != &dummy_event_node) {\n        // if the node's refcount is already zero, then free it and we dont care about it\n        if (cur->ref_count == 0) {\n            prev->next = cur->next;\n            event_list_node_t *to_free = cur;\n            cur = cur->next;\n            ADD_TO_FREE_EVENTS_LIST(to_free);\n            continue;\n        }\n        \n        cur->ref_count--;\n        \n        if ((cur->event_end_time <= recorded_time) || (cur->stream_id != (cur->stream_id & stream_mask))) {\n            if (cur->ref_count == 0) {\n                prev->next = cur->next;\n                event_list_node_t *to_free = cur;\n                cur = cur->next;\n                ADD_TO_FREE_EVENTS_LIST(to_free);\n            } else {\n                prev = cur;\n                cur = cur->next;\n            }\n            continue;\n        }\n        // Add start and end times in a sorted list (insertion sort)\n        \n        active_kernel_node_t *start_active_kernel_node;\n        active_kernel_node_t *end_active_kernel_node;\n        GET_NEW_ACTIVE_KERNEL_NODE(start_active_kernel_node);\n        GET_NEW_ACTIVE_KERNEL_NODE(end_active_kernel_node);\n        \n        if (cur->event_start_time < recorded_time) {\n            start_active_kernel_node->event_time = recorded_time;\n        } else {\n            start_active_kernel_node->event_time = cur->event_start_time;\n        }\n        \n        start_active_kernel_node->event_type = KERNEL_START;\n        start_active_kernel_node->stream_id = cur->stream_id;\n        start_active_kernel_node->launcher_cct = cur->launcher_cct;\n        start_active_kernel_node->next_active_kernel = NULL;\n        \n        end_active_kernel_node->event_type = KERNEL_END;\n        end_active_kernel_node->start_node = start_active_kernel_node;\n        end_active_kernel_node->event_time = cur->event_end_time;\n        \n        // drop if times are same\n        if (start_active_kernel_node->event_time == end_active_kernel_node->event_time) {\n            ADD_TO_FREE_ACTIVE_KERNEL_NODE_LIST(start_active_kernel_node);\n            ADD_TO_FREE_ACTIVE_KERNEL_NODE_LIST(end_active_kernel_node);\n            if (cur->ref_count == 0) {\n                prev->next = cur->next;\n                event_list_node_t *to_free = cur;\n                cur = cur->next;\n                ADD_TO_FREE_EVENTS_LIST(to_free);\n            } else {\n                prev = cur;\n                cur = cur->next;\n            }\n            continue;\n        }\n        assert(start_active_kernel_node->event_time < end_active_kernel_node->event_time);\n        \n        if (sorted_active_kernels_begin == NULL) {\n            // First entry\n            start_active_kernel_node->next = end_active_kernel_node;\n            start_active_kernel_node->prev = end_active_kernel_node;\n            end_active_kernel_node->prev = start_active_kernel_node;\n            end_active_kernel_node->next = start_active_kernel_node;\n            sorted_active_kernels_begin = start_active_kernel_node;\n        } else {\n            // There are atlest 2 entries\n            \n            // current points to the last node interms of time\n            active_kernel_node_t *current = sorted_active_kernels_begin->prev;\n            bool change_head = 1;\n            do {\n                if (end_active_kernel_node->event_time > current->event_time) {\n                    change_head = 0;\n                    break;\n                }\n                current = current->prev;\n            } while (current != sorted_active_kernels_begin->prev);\n            end_active_kernel_node->next = current->next;\n            end_active_kernel_node->prev = current;\n            current->next->prev = end_active_kernel_node;\n            current->next = end_active_kernel_node;\n            if (change_head) {\n                sorted_active_kernels_begin = end_active_kernel_node;\n            }\n            \n            current = end_active_kernel_node->prev;\n            change_head = 1;\n            do {\n                if (start_active_kernel_node->event_time > current->event_time) {\n                    change_head = 0;\n                    break;\n                }\n                current = current->prev;\n            } while (current != sorted_active_kernels_begin->prev);\n            start_active_kernel_node->next = current->next;\n            start_active_kernel_node->prev = current;\n            current->next->prev = start_active_kernel_node;\n            current->next = start_active_kernel_node;\n            if (change_head) {\n                sorted_active_kernels_begin = start_active_kernel_node;\n            }\n        }\n        \n        if (cur->ref_count == 0) {\n            prev->next = cur->next;\n            event_list_node_t *to_free = cur;\n            cur = cur->next;\n            ADD_TO_FREE_EVENTS_LIST(to_free);\n        } else {\n            prev = cur;\n            cur = cur->next;\n        }\n        \n    }\n    g_finished_event_nodes_tail = prev;\n    \n    // now attribute blame on the sorted list\n    uint64_t last_kernel_end_time = 0;\n    if (sorted_active_kernels_begin) {\n        \n        // attach a dummy tail\n        active_kernel_node_t *dummy_kernel_node;\n        GET_NEW_ACTIVE_KERNEL_NODE(dummy_kernel_node);\n        sorted_active_kernels_begin->prev->next = dummy_kernel_node;\n        dummy_kernel_node->prev = sorted_active_kernels_begin->prev;\n        sorted_active_kernels_begin->prev = dummy_kernel_node;\n        dummy_kernel_node->next = sorted_active_kernels_begin;\n        \n        active_kernel_node_t *current = sorted_active_kernels_begin;\n        uint64_t last_time = recorded_time;\n        do {\n            uint64_t new_time = current->event_time;\n            \n            assert(new_time >= last_time);\n            assert(current != dummy_kernel_node && \"should never process dummy_kernel_node\");\n            \n            if (num_active_kernels && (new_time > last_time)) {\n                //blame all\n                active_kernel_node_t *blame_node = current->prev;\n                do {\n                    assert(blame_node->event_type == KERNEL_START);\n                    \n                    cct_metric_data_increment(cpu_idle_cause_metric_id, blame_node->launcher_cct, (cct_metric_data_t) {\n                        .r = (new_time - last_time) * (scaling_factor) / num_active_kernels}\n                                              );\n                    blame_node = blame_node->prev;\n                } while (blame_node != sorted_active_kernels_begin->prev);\n            }\n            \n            last_time = new_time;\n            \n            if (current->event_type == KERNEL_START) {\n                num_active_kernels++;\n                current = current->next;\n            } else {\n                last_kernel_end_time = new_time;\n                current->start_node->prev->next = current->start_node->next;\n                current->start_node->next->prev = current->start_node->prev;\n                if (current->start_node == sorted_active_kernels_begin)\n                    sorted_active_kernels_begin = current->start_node->next;\n                ADD_TO_FREE_ACTIVE_KERNEL_NODE_LIST((current->start_node));\n                \n#if 0                           // Not a plausible case\n                // If I am the last one then Just free and break;\n                if (current->next == current) {\n                    ADD_TO_FREE_ACTIVE_KERNEL_NODE_LIST(current);\n                    break;\n                }\n#endif\n                current->prev->next = current->next;\n                current->next->prev = current->prev;\n                if (current == sorted_active_kernels_begin)\n                    sorted_active_kernels_begin = current->next;\n                num_active_kernels--;\n                active_kernel_node_t *to_free = current;\n                current = current->next;\n                ADD_TO_FREE_ACTIVE_KERNEL_NODE_LIST(to_free);\n                \n            }\n            \n        } while (current != sorted_active_kernels_begin->prev);\n        // Free up the dummy node\n        ADD_TO_FREE_ACTIVE_KERNEL_NODE_LIST(dummy_kernel_node);\n        \n    }\n    \n    return last_kernel_end_time;\n    \n}\n\n// Epilogue for any cuda synchronization routine\nstatic inline uint64_t leave_cuda_sync(event_list_node_t * recorded_node, uint64_t syncStart, const uint32_t stream_mask) {\n    //caller does       HPCRUN_ASYNC_BLOCK_SPIN_LOCK;\n    \n    // Cleanup events so that when I goto wait anybody in the queue will be the ones I have not seen and finished after my timer started.\n    cleanup_finished_events();\n     \n    double scaling_factor = 1.0; \n    if(SHARED_BLAMING_INITIALISED && TD_GET(gpu_data.accum_num_samples))\n      scaling_factor *= ((double)TD_GET(gpu_data.accum_num_sync_threads))/TD_GET(gpu_data.accum_num_samples);  \n    uint64_t last_kernel_end_time = attribute_shared_blame_on_kernels(recorded_node, syncStart, stream_mask, scaling_factor);\n    atomic_add_i64(&g_num_threads_at_sync, -1L);\n    return last_kernel_end_time;\n    //caller does       HPCRUN_ASYNC_UNBLOCK_SPIN_UNLOCK;\n}\n\n\n// inspect activities finished on each stream and record metrics accordingly\n\nstatic uint32_t cleanup_finished_events() {\n    uint32_t num_unfinished_streams = 0;\n    stream_node_t *prev_stream = NULL;\n    stream_node_t *next_stream = NULL;\n    stream_node_t *cur_stream = g_unfinished_stream_list_head;\n\n    while (cur_stream != NULL) {\n        assert(cur_stream->unfinished_event_node && \" Can't point unfinished stream to null\");\n        next_stream = cur_stream->next_unfinished_stream;\n        \n        event_list_node_t *current_event = cur_stream->unfinished_event_node;\n        while (current_event) {\n            \n            cudaError_t err_cuda = cudaRuntimeFunctionPointer[cudaEventQueryEnum].cudaEventQueryReal(current_event->event_end);\n            \n            if (err_cuda == cudaSuccess) {\n                \n                // Decrement   ipc_data->outstanding_kernels\n                DECR_SHARED_BLAMING_DS(outstanding_kernels);\n                \n                // record start time\n                float elapsedTime;      // in millisec with 0.5 microsec resolution as per CUDA\n                \n                //FIX ME: deleting Elapsed time to handle context destruction....\n                //static uint64_t deleteMeTime = 0;\n\t\tTMSG(CUDA, \"BEFORE: EventElapsedRT(%p, %p)\\n\", g_start_of_world_event, current_event->event_start);\n\t\tcudaError_t err1 = Cuda_RTcall(cudaEventElapsedTime)(&elapsedTime,\n\t\t\t\t\t\t\t\t   g_start_of_world_event,\n\t\t\t\t\t\t\t\t   current_event->event_start);\n\t\t// soft failure\n\t\tif (err1 != cudaSuccess) {\n\t\t  EMSG(\"cudaEventElaspsedTime failed\");\n\t\t  break;\n\t\t}\n                \n                assert(elapsedTime > 0);\n                \n                uint64_t micro_time_start = (uint64_t) (((double) elapsedTime) * 1000) + g_start_of_world_time;\n                \n                CUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaEventElapsedTimeEnum].cudaEventElapsedTimeReal(&elapsedTime, g_start_of_world_event, current_event->event_end));\n                \n                assert(elapsedTime > 0);\n                uint64_t micro_time_end = (uint64_t) (((double) elapsedTime) * 1000) + g_start_of_world_time;\n                \n                assert(micro_time_start <= micro_time_end);\n                \n                if(hpcrun_trace_isactive()) {\n                  hpcrun_trace_append_with_time(cur_stream->st, cur_stream->idle_node_id, HPCRUN_FMT_MetricId_NULL /* null metric id */, micro_time_start - 1);\n                    \n                  cct_node_t *stream_cct = current_event->stream_launcher_cct;\n                    \n                  hpcrun_cct_persistent_id_trace_mutate(stream_cct);\n                    \n                  hpcrun_trace_append_with_time(cur_stream->st, hpcrun_cct_persistent_id(stream_cct), HPCRUN_FMT_MetricId_NULL /* null metric id */, micro_time_start);\n                    \n                  hpcrun_trace_append_with_time(cur_stream->st, hpcrun_cct_persistent_id(stream_cct), HPCRUN_FMT_MetricId_NULL /* null metric id */, micro_time_end);\n                    \n                  hpcrun_trace_append_with_time(cur_stream->st, cur_stream->idle_node_id, HPCRUN_FMT_MetricId_NULL /* null metric id */, micro_time_end + 1);\n                }\n                \n                \n                // Add the kernel execution time to the gpu_time_metric_id\n                cct_metric_data_increment(gpu_time_metric_id, current_event->launcher_cct, (cct_metric_data_t) {\n                    .i = (micro_time_end - micro_time_start)});\n                \n                event_list_node_t *deferred_node = current_event;\n                current_event = current_event->next;\n                \n                \n                \n                // Add to_free to fre list\n                if (g_num_threads_at_sync) {\n                    // some threads are waiting, hence add this kernel for deferred blaming\n                    deferred_node->ref_count = g_num_threads_at_sync;\n                    deferred_node->event_start_time = micro_time_start;\n                    deferred_node->event_end_time = micro_time_end;\n                    deferred_node->next = g_finished_event_nodes_tail->next;\n                    g_finished_event_nodes_tail->next = deferred_node;\n                    g_finished_event_nodes_tail = deferred_node;\n                    \n                } else {\n                    // It is better not to call destroy from here since we might be in the signal handler\n                    // Events will be destroyed lazily when they need to be reused.\n                    ADD_TO_FREE_EVENTS_LIST(deferred_node);\n                }\n                \n            } else {\n                break;\n            }\n        }\n        \n        cur_stream->unfinished_event_node = current_event;\n        if (current_event == NULL) {\n            // set oldest and newest pointers to null\n            cur_stream->latest_event_node = NULL;\n            if (prev_stream == NULL) {\n                g_unfinished_stream_list_head = next_stream;\n            } else {\n                prev_stream->next_unfinished_stream = next_stream;\n            }\n        } else {\n            \n            num_unfinished_streams++;\n            prev_stream = cur_stream;\n        }\n        cur_stream = next_stream;\n    }\n    return num_unfinished_streams;\n}\n\n\n// Insert a new activity in a stream\n// Caller is responsible for calling monitor_disable_new_threads()\nstatic event_list_node_t *create_and_insert_event(int stream_id, cct_node_t * launcher_cct, cct_node_t * stream_launcher_cct) {\n    \n    event_list_node_t *event_node;\n    if (g_free_event_nodes_head) {\n        // get from free list\n        event_node = g_free_event_nodes_head;\n        g_free_event_nodes_head = g_free_event_nodes_head->next_free_node;\n\n        // Free the old events if they are alive\n        if (event_node->event_start)\n          CUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaEventDestroyEnum].cudaEventDestroyReal((event_node->event_start)));\n        if (event_node->event_end)\n          CUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaEventDestroyEnum].cudaEventDestroyReal((event_node->event_end)));\n        \n    } else {\n        // allocate new node\n        event_node = (event_list_node_t *) hpcrun_malloc(sizeof(event_list_node_t));\n    }\n    //cudaError_t err =  cudaEventCreateWithFlags(&(event_node->event_end),cudaEventDisableTiming);\n    \n    CUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaEventCreateEnum].cudaEventCreateReal(&(event_node->event_start)));\n    CUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaEventCreateEnum].cudaEventCreateReal(&(event_node->event_end)));\n    \n    event_node->stream_launcher_cct = stream_launcher_cct;\n    event_node->launcher_cct = launcher_cct;\n    event_node->next = NULL;\n    event_node->stream_id = stream_id;\n    if (g_stream_array[stream_id].latest_event_node == NULL) {\n        g_stream_array[stream_id].latest_event_node = event_node;\n        g_stream_array[stream_id].unfinished_event_node = event_node;\n        g_stream_array[stream_id].next_unfinished_stream = g_unfinished_stream_list_head;\n        g_unfinished_stream_list_head = &(g_stream_array[stream_id]);\n    } else {\n        g_stream_array[stream_id].latest_event_node->next = event_node;\n        g_stream_array[stream_id].latest_event_node = event_node;\n    }\n    \n    return event_node;\n}\n\nstatic void close_all_streams(stream_to_id_map_t *root) {\n\n    if (!root)\n        return;\n\n    close_all_streams(root->left);\n    close_all_streams(root->right);\n    uint32_t streamId;\n    streamId = root->id;\n\n    hpcrun_stream_finalize(g_stream_array[streamId].st);\n\n    // remove from hpcrun process auxiliary cleanup list \n    hpcrun_process_aux_cleanup_remove(g_stream_array[streamId].aux_cleanup_info);\n\n    g_stream_array[streamId].st = NULL;\n}\n\n\n// Stream #0 is never explicitly created. Hence create it if needed.\n// An alternate option is to create it eagerly whether needed or not.\n\nstatic void create_stream0_if_needed(cudaStream_t stream) {\n    HPCRUN_ASYNC_BLOCK_SPIN_LOCK;\n    if ( (((uint64_t)stream) == 0 )&& (g_stream0_initialized == false)) {\n        uint32_t new_streamId;\n        new_streamId = splay_insert(0)->id;\n        if (g_start_of_world_time == 0) {\n            \n            \n            \n            // And disable tracking new threads from CUDA\n            monitor_disable_new_threads();\n            \n            // Initialize and Record an event to indicate the start of this stream.\n            // No need to wait for it since we query only the events posted after this and this will be complete when the latter posted ones are complete.\n            \n            CUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaEventCreateEnum].cudaEventCreateReal(&g_start_of_world_event));\n            \n            // record time\n            \n            struct timeval tv;\n            gettimeofday(&tv, NULL);\n            g_start_of_world_time = ((uint64_t) tv.tv_usec + (((uint64_t) tv.tv_sec) * 1000000));\n            \n            // record in stream 0\n            CUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaEventRecordEnum].cudaEventRecordReal(g_start_of_world_event, 0));\n            \n            // enable monitoring new threads\n            monitor_enable_new_threads();\n            \n            // This is a good time to create the shared memory\n            // FIX ME: DEVICE_ID should be derived\n            if(g_do_shared_blaming && ipc_data == NULL)\n                create_shared_memory();\n            \n            \n        }\n        \n        struct timeval tv;\n        gettimeofday(&tv, NULL);\n        g_stream_array[new_streamId].st = hpcrun_stream_data_alloc_init(new_streamId);\n        \n        if(hpcrun_trace_isactive()) {\n            hpcrun_trace_open(g_stream_array[new_streamId].st);\n            \n            /*FIXME: convert below 4 lines to a macro */\n            cct_bundle_t *bundle = &(g_stream_array[new_streamId].st->epoch->csdata);\n            cct_node_t *idl = hpcrun_cct_bundle_get_idle_node(bundle);\n            hpcrun_cct_persistent_id_trace_mutate(idl);\n            // store the persistent id one time\n            g_stream_array[new_streamId].idle_node_id = hpcrun_cct_persistent_id(idl);\n            \n            hpcrun_trace_append(g_stream_array[new_streamId].st, g_stream_array[new_streamId].idle_node_id, HPCRUN_FMT_MetricId_NULL /* null metric id */);\n            \n        }\n\n        g_stream_array[new_streamId].aux_cleanup_info = hpcrun_process_aux_cleanup_add(hpcrun_stream_finalize, g_stream_array[new_streamId].st);\n        g_stream0_initialized = true;\n    }\n    HPCRUN_ASYNC_UNBLOCK_SPIN_UNLOCK;\n    \n}\n\n\n////////////////////////////////////////////////\n// CUDA Runtime overrides\n////////////////////////////////////////////////\n\n\nCUDA_RUNTIME_SYNC_WRAPPER(cudaThreadSynchronize, (context, launcher_cct,\nsyncStart, recorded_node), (context, launcher_cct, syncStart,\nrecorded_node, ALL_STREAMS_MASK, syncEnd), void)\n\nCUDA_RUNTIME_SYNC_ON_STREAM_WRAPPER(cudaStreamSynchronize, (context,\nlauncher_cct, syncStart, recorded_node), (context, launcher_cct,\nsyncStart, recorded_node, streamId, syncEnd), cudaStream_t, stream)\n\nCUDA_RUNTIME_SYNC_WRAPPER(cudaEventSynchronize, (context, launcher_cct,\nsyncStart, recorded_node), (context, launcher_cct, syncStart,\nrecorded_node, ALL_STREAMS_MASK, syncEnd), cudaEvent_t, event)\n\nCUDA_RUNTIME_SYNC_ON_STREAM_WRAPPER(cudaStreamWaitEvent, (context,\nlauncher_cct, syncStart, recorded_node), (context, launcher_cct,\nsyncStart, recorded_node, streamId, syncEnd), cudaStream_t, stream,\ncudaEvent_t, event, unsigned int, flags)\n\nCUDA_RUNTIME_SYNC_WRAPPER(cudaDeviceSynchronize, (context, launcher_cct,\nsyncStart, recorded_node), (context, launcher_cct, syncStart,\nrecorded_node, ALL_STREAMS_MASK, syncEnd), void)\n\nCUDA_RUNTIME_SYNC_WRAPPER(cudaMallocArray, (context, launcher_cct,\nsyncStart, recorded_node), (context, launcher_cct, syncStart,\nrecorded_node, ALL_STREAMS_MASK, syncEnd), struct cudaArray **, array,\nconst struct cudaChannelFormatDesc *, desc, size_t, width, size_t,\nheight, unsigned int, flags)\n\nCUDA_RUNTIME_SYNC_WRAPPER(cudaFree, (context, launcher_cct, syncStart,\nrecorded_node), (context, launcher_cct, syncStart, recorded_node,\nALL_STREAMS_MASK, syncEnd), void *, devPtr)\n\nCUDA_RUNTIME_SYNC_WRAPPER(cudaFreeArray, (context, launcher_cct,\nsyncStart, recorded_node), (context, launcher_cct, syncStart,\nrecorded_node, ALL_STREAMS_MASK, syncEnd),struct cudaArray *, array)\n\n\n\ncudaError_t cudaConfigureCall(dim3 grid, dim3 block, size_t mem, cudaStream_t stream) {\n    \n    if (! hpcrun_is_safe_to_sync(__func__))\n      return cudaRuntimeFunctionPointer[cudaConfigureCallEnum].cudaConfigureCallReal(grid, block, mem, stream);\n    TD_GET(gpu_data.is_thread_at_cuda_sync) = true;\n    monitor_disable_new_threads();\n    cudaError_t ret = cudaRuntimeFunctionPointer[cudaConfigureCallEnum].cudaConfigureCallReal(grid, block, mem, stream);\n    monitor_enable_new_threads();\n    TD_GET(gpu_data.is_thread_at_cuda_sync) = false;\n    TD_GET(gpu_data.active_stream) = (uint64_t) stream;\n    return ret;\n}\n\n#if (CUDART_VERSION < 5000)\n    cudaError_t cudaLaunch(const char *entry) {\n#else\n    cudaError_t cudaLaunch(const void *entry) {\n#endif\n    \n    if (! hpcrun_is_safe_to_sync(__func__))\n      return cudaRuntimeFunctionPointer[cudaLaunchEnum].cudaLaunchReal(entry);\n    TMSG(CPU_GPU,\"Cuda launch (get spinlock)\");\n    ASYNC_KERNEL_PROLOGUE(streamId, event_node, context, cct_node, ((cudaStream_t) (TD_GET(gpu_data.active_stream))), g_cuda_launch_skip_inner);\n    \n    cudaError_t ret = cudaRuntimeFunctionPointer[cudaLaunchEnum].cudaLaunchReal(entry);\n    \n    TMSG(CPU_GPU, \"Cuda launch about to release spin lock\");\n    ASYNC_KERNEL_EPILOGUE(event_node, ((cudaStream_t) (TD_GET(gpu_data.active_stream))));\n    TMSG(CPU_GPU, \"Cuda launch done !(spin lock released)\");\n\n    return ret;\n}\n\n\ncudaError_t cudaStreamDestroy(cudaStream_t stream) {\n    \n    SYNCHRONOUS_CLEANUP;\n    \n    hpcrun_safe_enter();\n    \n    uint32_t streamId;\n    \n    streamId = splay_get_stream_id(stream);\n    \n    hpcrun_stream_finalize(g_stream_array[streamId].st);\n\n    // remove from hpcrun process auxiliary cleanup list \n    hpcrun_process_aux_cleanup_remove(g_stream_array[streamId].aux_cleanup_info);\n\n    g_stream_array[streamId].st = NULL;\n    \n    monitor_disable_new_threads();\n    cudaError_t ret = cudaRuntimeFunctionPointer[cudaStreamDestroyEnum].cudaStreamDestroyReal(stream);\n    monitor_enable_new_threads();\n    \n    // Delete splay tree entry\n    splay_delete(stream);\n    hpcrun_safe_exit();\n    return ret;\n    \n}\n\n\nstatic void StreamCreateBookKeeper(cudaStream_t * stream){\n    uint32_t new_streamId = splay_insert(*stream)->id;\n    HPCRUN_ASYNC_BLOCK_SPIN_LOCK;\n    if (g_start_of_world_time == 0) {\n        // In case cudaLaunch causes dlopn, async block may get enabled, as a safety net set gpu_data.is_thread_at_cuda_sync so that we dont call any cuda calls\n        TD_GET(gpu_data.is_thread_at_cuda_sync) = true;\n        \n        // And disable tracking new threads from CUDA\n        monitor_disable_new_threads();\n        \n        // Initialize and Record an event to indicate the start of this stream.\n        // No need to wait for it since we query only the events posted after this and this will be complete when the latter posted ones are complete.\n        CUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaEventCreateEnum].cudaEventCreateReal(&g_start_of_world_event));\n        \n        // record time\n        \n        struct timeval tv;\n        gettimeofday(&tv, NULL);\n        g_start_of_world_time = ((uint64_t) tv.tv_usec + (((uint64_t) tv.tv_sec) * 1000000));\n        \n        // record in stream 0\n        CUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaEventRecordEnum].cudaEventRecordReal(g_start_of_world_event, 0));\n\n        // enable monitoring new threads\n        monitor_enable_new_threads();\n        \n        // This is a good time to create the shared memory\n        // FIX ME: DEVICE_ID should be derived\n        if(g_do_shared_blaming && ipc_data == NULL)\n            create_shared_memory();\n        \n        // Ok to call cuda functions from the signal handler\n        TD_GET(gpu_data.is_thread_at_cuda_sync) = false;\n        \n    }\n    \n    g_stream_array[new_streamId].st = hpcrun_stream_data_alloc_init(new_streamId);\n    if(hpcrun_trace_isactive()) {\n        hpcrun_trace_open(g_stream_array[new_streamId].st);\n        \n        /*FIXME: convert below 4 lines to a macro */\n        cct_bundle_t *bundle = &(g_stream_array[new_streamId].st->epoch->csdata);\n        cct_node_t *idl = hpcrun_cct_bundle_get_idle_node(bundle);\n        hpcrun_cct_persistent_id_trace_mutate(idl);\n        // store the persistent id one time.\n        g_stream_array[new_streamId].idle_node_id = hpcrun_cct_persistent_id(idl);\n        hpcrun_trace_append(g_stream_array[new_streamId].st, g_stream_array[new_streamId].idle_node_id, HPCRUN_FMT_MetricId_NULL /* null metric id */);\n        \n    }\n    \n    g_stream_array[new_streamId].aux_cleanup_info = hpcrun_process_aux_cleanup_add(hpcrun_stream_finalize, g_stream_array[new_streamId].st);\n    HPCRUN_ASYNC_UNBLOCK_SPIN_UNLOCK;\n\n}\n\ncudaError_t cudaStreamCreate(cudaStream_t * stream) {\n    \n    TD_GET(gpu_data.is_thread_at_cuda_sync) = true;\n    monitor_disable_new_threads();\n    cudaError_t ret = cudaRuntimeFunctionPointer[cudaStreamCreateEnum].cudaStreamCreateReal(stream);\n    monitor_enable_new_threads();\n    TD_GET(gpu_data.is_thread_at_cuda_sync) = false;\n    \n    StreamCreateBookKeeper(stream);\n    return ret;\n}\n\ninline static void increment_mem_xfer_metric(size_t count, enum cudaMemcpyKind kind, cct_node_t *node){\n    switch(kind){\n        case cudaMemcpyHostToHost:\n            cct_metric_data_increment(h_to_h_data_xfer_metric_id, node, (cct_metric_data_t) {.i = (count)});\n            break;\n\n        case cudaMemcpyHostToDevice:\n            cct_metric_data_increment(h_to_d_data_xfer_metric_id, node, (cct_metric_data_t) {.i = (count)});\n            break;\n\n\n        case cudaMemcpyDeviceToHost:\n            cct_metric_data_increment(d_to_h_data_xfer_metric_id, node, (cct_metric_data_t) {.i = (count)});\n            break;\n\n        case cudaMemcpyDeviceToDevice:\n            cct_metric_data_increment(d_to_d_data_xfer_metric_id, node, (cct_metric_data_t) {.i = (count)});\n            break;\n\n        case cudaMemcpyDefault:\n            cct_metric_data_increment(uva_data_xfer_metric_id, node, (cct_metric_data_t) {.i = (count)});\n            break;\n\n        default : break;\n            \n    }\n}\n\n\n\nCUDA_RUNTIME_SYNC_WRAPPER(cudaMalloc, (context, launcher_cct, syncStart,\nrecorded_node), (context, launcher_cct, syncStart, recorded_node,\nALL_STREAMS_MASK, syncEnd), void **, devPtr, size_t, size)\n\nCUDA_RUNTIME_SYNC_WRAPPER(cudaMalloc3D, (context, launcher_cct, syncStart,\nrecorded_node), (context, launcher_cct, syncStart, recorded_node,\nALL_STREAMS_MASK, syncEnd), struct cudaPitchedPtr*, pitchedDevPtr,\nstruct cudaExtent, extent)\n\nCUDA_RUNTIME_SYNC_WRAPPER(cudaMalloc3DArray, (context, launcher_cct,\nsyncStart, recorded_node), (context, launcher_cct, syncStart,\nrecorded_node, ALL_STREAMS_MASK, syncEnd), struct cudaArray**, array,\nconst struct cudaChannelFormatDesc*, desc, struct cudaExtent, extent,\nunsigned int, flags)\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemcpy3D, (context, launcher_cct,\nsyncStart, recorded_node), (context, launcher_cct, syncStart,\nrecorded_node, ALL_STREAMS_MASK, syncEnd, (p->extent.width *\np->extent.height * p->extent.depth), (p->kind)), const struct\ncudaMemcpy3DParms *, p)\n\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemcpy3DPeer, (context,\nlauncher_cct, syncStart, recorded_node), (context, launcher_cct,\nsyncStart, recorded_node, ALL_STREAMS_MASK, syncEnd, (p->extent.width *\np->extent.height * p->extent.depth), cudaMemcpyDeviceToDevice), const\nstruct cudaMemcpy3DPeerParms *, p)\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemcpy3DAsync, (streamId,\nevent_node, context, cct_node, stream, 0), (event_node, cct_node, stream,\n(p->extent.width * p->extent.height * p->extent.depth), (p->kind)),\nconst struct cudaMemcpy3DParms *, p, cudaStream_t,  stream)\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemcpy3DPeerAsync, (streamId,\nevent_node, context, cct_node, stream, 0), (event_node, cct_node,\nstream, (p->extent.width * p->extent.height * p->extent.depth),\ncudaMemcpyDeviceToDevice), const struct cudaMemcpy3DPeerParms *, p,\ncudaStream_t, stream)\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemcpyPeer, (context,\nlauncher_cct, syncStart, recorded_node), (context, launcher_cct,\nsyncStart, recorded_node, ALL_STREAMS_MASK, syncEnd, count,\ncudaMemcpyDeviceToDevice), void *, dst, int, dstDevice, const void *,\nsrc, int, srcDevice, size_t, count)\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemcpyFromArray, (context,\nlauncher_cct, syncStart, recorded_node), (context, launcher_cct,\nsyncStart, recorded_node, ALL_STREAMS_MASK, syncEnd, count, kind), void\n*, dst, const struct cudaArray *, src, size_t, wOffset, size_t, hOffset,\nsize_t, count, enum cudaMemcpyKind, kind)\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemcpyArrayToArray, (context,\nlauncher_cct, syncStart, recorded_node), (context, launcher_cct,\nsyncStart, recorded_node, ALL_STREAMS_MASK, syncEnd, count, kind),\nstruct cudaArray *, dst, size_t, wOffsetDst, size_t, hOffsetDst, const\nstruct cudaArray *, src, size_t, wOffsetSrc, size_t, hOffsetSrc, size_t,\ncount, enum cudaMemcpyKind, kind)\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemcpy2DToArray, (context,\nlauncher_cct, syncStart, recorded_node), (context, launcher_cct,\nsyncStart, recorded_node, ALL_STREAMS_MASK, syncEnd, (width * height)\n, kind), struct cudaArray *, dst, size_t, wOffset, size_t, hOffset,\nconst void *, src, size_t, spitch, size_t, width, size_t, height, enum\ncudaMemcpyKind, kind)\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemcpy2DFromArray, (context,\nlauncher_cct, syncStart, recorded_node), (context, launcher_cct,\nsyncStart, recorded_node, ALL_STREAMS_MASK, syncEnd, (width * height),\nkind), void *, dst, size_t, dpitch, const struct cudaArray *, src,\nsize_t, wOffset, size_t, hOffset, size_t, width, size_t, height, enum\ncudaMemcpyKind, kind)\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemcpy2DArrayToArray, (context,\nlauncher_cct, syncStart, recorded_node), (context, launcher_cct,\nsyncStart, recorded_node, ALL_STREAMS_MASK, syncEnd, (width * height),\nkind), struct cudaArray *, dst, size_t, wOffsetDst, size_t, hOffsetDst,\nconst struct cudaArray *, src, size_t, wOffsetSrc, size_t, hOffsetSrc,\nsize_t, width, size_t, height, enum cudaMemcpyKind, kind )\n\n\n#if (CUDART_VERSION < 5000)\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemcpyToSymbol, (context,\nlauncher_cct, syncStart, recorded_node), (context, launcher_cct,\nsyncStart, recorded_node, ALL_STREAMS_MASK, syncEnd, count,\nkind), const char *, symbol, const void *, src, size_t,\ncount, size_t, offset , enum cudaMemcpyKind, kind ) \n\n#else\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemcpyToSymbol, (context,\nlauncher_cct, syncStart, recorded_node), (context, launcher_cct,\nsyncStart, recorded_node, ALL_STREAMS_MASK, syncEnd, count, kind),\nconst void *, symbol, const void *, src, size_t, count, size_t, offset ,\nenum cudaMemcpyKind, kind ) \n\n#endif\n\n\n#if (CUDART_VERSION < 5000)\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemcpyFromSymbol,\n(context, launcher_cct, syncStart, recorded_node), (context,\nlauncher_cct, syncStart, recorded_node, ALL_STREAMS_MASK,\nsyncEnd, count, kind), void *, dst, const char *, symbol,\nsize_t, count, size_t, offset , enum cudaMemcpyKind, kind) \n\n#else\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemcpyFromSymbol, (context,\nlauncher_cct, syncStart, recorded_node), (context, launcher_cct,\nsyncStart, recorded_node, ALL_STREAMS_MASK, syncEnd, count, kind),\nvoid *, dst, const void *, symbol, size_t, count, size_t, offset ,\nenum cudaMemcpyKind, kind) \n\n#endif\n\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemcpyPeerAsync, (streamId,\nevent_node, context, cct_node, stream, 0), (event_node, cct_node,\nstream, count, cudaMemcpyDeviceToDevice), void *, dst, int, dstDevice,\nconst void *, src, int, srcDevice, size_t, count, cudaStream_t, stream)\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemcpyFromArrayAsync, (streamId,\nevent_node, context, cct_node, stream, 0), (event_node, cct_node,\nstream, count, kind), void *, dst, const struct cudaArray *, src,\nsize_t, wOffset, size_t, hOffset, size_t, count, enum cudaMemcpyKind,\nkind, cudaStream_t, stream)\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemcpy2DAsync, (streamId,\nevent_node, context, cct_node, stream, 0), (event_node, cct_node, stream,\n(width * height), kind), void *, dst, size_t, dpitch, const void *,\nsrc, size_t, spitch, size_t, width, size_t, height, enum cudaMemcpyKind,\nkind, cudaStream_t, stream)\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemcpy2DToArrayAsync, (streamId,\nevent_node, context, cct_node, stream, 0), (event_node, cct_node, stream,\n(width * height), kind), struct cudaArray *, dst, size_t, wOffset,\nsize_t, hOffset, const void *, src, size_t, spitch, size_t, width,\nsize_t, height, enum cudaMemcpyKind, kind, cudaStream_t, stream)\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemcpy2DFromArrayAsync, (streamId,\nevent_node, context, cct_node, stream, 0), (event_node, cct_node, stream,\n(width * height), kind), void *, dst, size_t, dpitch, const struct\ncudaArray *, src, size_t, wOffset, size_t, hOffset, size_t, width,\nsize_t, height, enum cudaMemcpyKind, kind, cudaStream_t, stream)\n\n\n#if (CUDART_VERSION < 5000)\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemcpyToSymbolAsync, (streamId,\nevent_node, context, cct_node, stream, 0), (event_node, cct_node, stream,\ncount, kind), const char *, symbol, const void *, src, size_t, count,\nsize_t, offset, enum cudaMemcpyKind, kind, cudaStream_t, stream)\n\n#else\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemcpyToSymbolAsync, (streamId,\nevent_node, context, cct_node, stream, 0), (event_node, cct_node, stream,\ncount, kind), const void *, symbol, const void *, src, size_t, count,\nsize_t, offset, enum cudaMemcpyKind, kind, cudaStream_t, stream)\n\n#endif\n\n\n#if (CUDART_VERSION < 5000)\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemcpyFromSymbolAsync, (streamId,\nevent_node, context, cct_node, stream, 0), (event_node, cct_node, stream,\ncount, kind), void *, dst, const char *, symbol, size_t, count, size_t,\noffset, enum cudaMemcpyKind, kind, cudaStream_t, stream)\n\n#else\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemcpyFromSymbolAsync, (streamId,\nevent_node, context, cct_node, stream, 0), (event_node, cct_node, stream,\ncount, kind), void *, dst, const void *, symbol, size_t, count, size_t,\noffset, enum cudaMemcpyKind, kind, cudaStream_t, stream)\n\n#endif\n\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemset, (context, launcher_cct,\nsyncStart, recorded_node), (context, launcher_cct, syncStart,\nrecorded_node, ALL_STREAMS_MASK, syncEnd, 0, cudaMemcpyHostToDevice),\nvoid *, devPtr, int, value, size_t, count)\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemset2D, (context, launcher_cct,\nsyncStart, recorded_node), (context, launcher_cct, syncStart,\nrecorded_node, ALL_STREAMS_MASK, syncEnd, 0, cudaMemcpyHostToDevice),\nvoid *, devPtr, size_t, pitch, int, value, size_t, width, size_t, height)\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemset3D, (context, launcher_cct,\nsyncStart, recorded_node), (context, launcher_cct, syncStart,\nrecorded_node, ALL_STREAMS_MASK, syncEnd, 0, cudaMemcpyHostToDevice),\nstruct cudaPitchedPtr, pitchedDevPtr, int, value, struct cudaExtent,\nextent)\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemsetAsync, (streamId, event_node,\ncontext, cct_node, stream, 0), (event_node, cct_node, stream, 0,\ncudaMemcpyHostToDevice), void *, devPtr, int, value, size_t, count,\ncudaStream_t, stream)\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemset2DAsync, (streamId,\nevent_node, context, cct_node, stream, 0), (event_node, cct_node, stream,\n0, cudaMemcpyHostToDevice), void *, devPtr, size_t, pitch, int, value,\nsize_t, width, size_t, height, cudaStream_t, stream)\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemset3DAsync, (streamId,\nevent_node, context, cct_node, stream, 0), (event_node, cct_node, stream,\n0, cudaMemcpyHostToDevice), struct cudaPitchedPtr, pitchedDevPtr, int,\nvalue, struct cudaExtent, extent, cudaStream_t, stream)\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemcpyAsync, (streamId, event_node,\ncontext, cct_node, stream, 0), (event_node, cct_node, stream, count,\nkind), void *, dst, const void *, src, size_t, count, enum cudaMemcpyKind,\nkind, cudaStream_t, stream)\n\nCUDA_RUNTIME_ASYNC_MEMCPY_WRAPPER(cudaMemcpyToArrayAsync, (streamId,\nevent_node, context, cct_node, stream, 0), (event_node, cct_node,\nstream, count, kind), struct cudaArray *, dst, size_t, wOffset, size_t,\nhOffset, const void *, src, size_t, count, enum cudaMemcpyKind, kind,\ncudaStream_t, stream)\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemcpy2D, (context, launcher_cct,\nsyncStart, recorded_node), (context, launcher_cct, syncStart,\nrecorded_node, ALL_STREAMS_MASK, syncEnd, (height * width), kind), void *,\ndst, size_t, dpitch, const void *, src, size_t, spitch, size_t, width,\nsize_t, height, enum cudaMemcpyKind, kind)\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemcpy, (context, launcher_cct,\nsyncStart, recorded_node), (context, launcher_cct, syncStart,\nrecorded_node, ALL_STREAMS_MASK, syncEnd, count, kind), void *, dst,\nconst void *, src, size_t, count, enum cudaMemcpyKind, kind)\n\nCUDA_RUNTIME_SYNC_MEMCPY_WRAPPER(cudaMemcpyToArray, (context,\nlauncher_cct, syncStart, recorded_node), (context, launcher_cct,\nsyncStart, recorded_node, ALL_STREAMS_MASK, syncEnd, count, kind), struct\ncudaArray *, dst, size_t, wOffset, size_t, hOffset, const void *, src,\nsize_t, count, enum cudaMemcpyKind, kind)\n\n\n////////////////////////////////////////////////\n// CUDA Driver overrides\n////////////////////////////////////////////////\n\n\nCUresult cuStreamSynchronize(CUstream stream) {\n    SYNC_PROLOGUE(context, launcher_cct, syncStart, recorded_node);\n    \n    monitor_disable_new_threads();\n    CUresult ret = cuDriverFunctionPointer[cuStreamSynchronizeEnum].cuStreamSynchronizeReal(stream);\n    monitor_enable_new_threads();\n    \n    hpcrun_safe_enter();\n    uint32_t streamId;\n    streamId = splay_get_stream_id((cudaStream_t)stream);\n    hpcrun_safe_exit();\n    \n    SYNC_EPILOGUE(context, launcher_cct, syncStart, recorded_node, streamId, syncEnd);\n    \n    return ret;\n}\n\n\nCUresult cuEventSynchronize(CUevent event) {\n    SYNC_PROLOGUE(context, launcher_cct, syncStart, recorded_node);\n    \n    monitor_disable_new_threads();\n    CUresult ret = cuDriverFunctionPointer[cuEventSynchronizeEnum].cuEventSynchronizeReal(event);\n    monitor_enable_new_threads();\n    \n    SYNC_EPILOGUE(context, launcher_cct, syncStart, recorded_node, ALL_STREAMS_MASK, syncEnd);\n    \n    return ret;\n}\n\n\nCUresult cuLaunchGridAsync(CUfunction f, int grid_width, int grid_height, CUstream hStream) {\n\n    ASYNC_KERNEL_PROLOGUE(streamId, event_node, context, cct_node, ((cudaStream_t)hStream), 0);\n    \n    CUresult ret = cuDriverFunctionPointer[cuLaunchGridAsyncEnum].cuLaunchGridAsyncReal(f, grid_width, grid_height, hStream);\n\n    ASYNC_KERNEL_EPILOGUE(event_node, ((cudaStream_t)hStream));\n\n    return ret;\n}\n\nCUresult cuLaunchKernel (CUfunction f,\n                                unsigned int gridDimX,\n                                unsigned int gridDimY,\n                                unsigned int gridDimZ,\n                                unsigned int blockDimX,\n                                unsigned int blockDimY,\n                                unsigned int blockDimZ,\n                                unsigned int sharedMemBytes,\n                                CUstream hStream,\n                                void **kernelParams,\n                                void **extra) {\n    ASYNC_KERNEL_PROLOGUE(streamId, event_node, context, cct_node, ((cudaStream_t)hStream), 0);\n\n    CUresult ret = cuDriverFunctionPointer[cuLaunchKernelEnum].cuLaunchKernelReal(f, gridDimX, gridDimY, gridDimZ, blockDimX, blockDimY, blockDimZ, sharedMemBytes, hStream, kernelParams, extra);\n\n    ASYNC_KERNEL_EPILOGUE(event_node, ((cudaStream_t)hStream));\n\n    return ret;\n}\n\n\nCUresult cuStreamDestroy(CUstream stream) {\n    \n    SYNCHRONOUS_CLEANUP;\n    hpcrun_safe_enter();\n    \n    uint32_t streamId;\n    streamId = splay_get_stream_id((cudaStream_t)stream);\n    \n    \n    hpcrun_stream_finalize(g_stream_array[streamId].st);\n\n    // remove from hpcrun process auxiliary cleanup list \n    hpcrun_process_aux_cleanup_remove(g_stream_array[streamId].aux_cleanup_info);\n\n    g_stream_array[streamId].st = NULL;\n    \n    monitor_disable_new_threads();\n    cudaError_t ret = cuDriverFunctionPointer[cuStreamDestroy_v2Enum].cuStreamDestroy_v2Real(stream);\n    monitor_enable_new_threads();\n    \n    // Delete splay tree entry\n    splay_delete((cudaStream_t)stream);\n    hpcrun_safe_exit();\n    return ret;\n    \n}\n\n\nCUresult cuStreamCreate(CUstream * phStream, unsigned int Flags) {\n    \n    TD_GET(gpu_data.is_thread_at_cuda_sync) = true;\n    monitor_disable_new_threads();\n    CUresult ret = cuDriverFunctionPointer[cuStreamCreateEnum].cuStreamCreateReal(phStream, Flags);\n    monitor_enable_new_threads();\n    TD_GET(gpu_data.is_thread_at_cuda_sync) = false;\n    \n    StreamCreateBookKeeper((cudaStream_t*) phStream);\n    \n    return ret;\n    \n}\n\n\nstatic void destroy_all_events_in_free_event_list(){\n    \n    event_list_node_t * cur = g_free_event_nodes_head;\n    \n    monitor_disable_new_threads();\n    while(cur){\n        CUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaEventDestroyEnum].cudaEventDestroyReal(cur->event_start));\n        CUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaEventDestroyEnum].cudaEventDestroyReal(cur->event_end));\n        cur->event_start = 0;\n        cur->event_end = 0;\n        cur = cur->next_free_node;\n    }\n    monitor_enable_new_threads();\n    \n}\n\nCUresult\ncuCtxCreate_v2 (CUcontext *pctx, unsigned int flags, CUdevice dev)\n{\n  if (cuda_ncontexts_incr() > 1) {\n    fprintf(stderr, \"Too many contexts created\\n\");\n    monitor_real_abort();\n  }\n  if (! hpcrun_is_safe_to_sync(__func__)) {    return cuDriverFunctionPointer[cuCtxCreate_v2Enum].cuCtxCreate_v2Real(pctx, flags, dev);\n  }\n  TD_GET(gpu_data.is_thread_at_cuda_sync) = true;\n  monitor_disable_new_threads();\n  CUresult ret = cuDriverFunctionPointer[cuCtxCreate_v2Enum].cuCtxCreate_v2Real(pctx, flags, dev);\n  monitor_enable_new_threads();\n  TD_GET(gpu_data.is_thread_at_cuda_sync) = false;\n  return ret;\n}\n\nCUresult cuCtxDestroy(CUcontext ctx) {\n    \n    SYNCHRONOUS_CLEANUP;\n    \n    HPCRUN_ASYNC_BLOCK_SPIN_LOCK;\n    if (g_start_of_world_time != 0) {\n        \n        // In case cudaLaunch causes dlopn, async block may get enabled, as a safety net set gpu_data.is_thread_at_cuda_sync so that we dont call any cuda calls\n        TD_GET(gpu_data.is_thread_at_cuda_sync) = true;\n        \n        // Walk the stream splay tree and close each trace.\n        close_all_streams(stream_to_id_tree_root);\n        stream_to_id_tree_root = NULL;\n        \n        // And disable tracking new threads from CUDA\n        monitor_disable_new_threads();\n        \n        CUDA_SAFE_CALL(cudaRuntimeFunctionPointer[cudaEventDestroyEnum].cudaEventDestroyReal(g_start_of_world_event));\n        g_start_of_world_time = 0;\n        // enable monitoring new threads\n        monitor_enable_new_threads();\n        \n        \n        // Destroy all events in g_free_event_nodes_head\n        destroy_all_events_in_free_event_list();\n        \n        \n        // Ok to call cuda functions from the signal handler\n        TD_GET(gpu_data.is_thread_at_cuda_sync) = false;\n        \n    }\n    // count context creation ==> decrement here\n    cuda_ncontexts_decr();\n    EMSG(\"Destroying Context!\");\n    HPCRUN_ASYNC_UNBLOCK_SPIN_UNLOCK;\n    \n    monitor_disable_new_threads();\n    CUresult ret = cuDriverFunctionPointer[cuCtxDestroy_v2Enum].cuCtxDestroy_v2Real(ctx);\n    monitor_enable_new_threads();\n    \n    return ret;\n}\n\n\n\n\nCUresult cuMemcpyHtoDAsync(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount, CUstream hStream) {\n    \n    ASYNC_MEMCPY_PROLOGUE(streamId, event_node, context, cct_node, ((cudaStream_t)hStream), 0);\n\n    CUresult ret = cuDriverFunctionPointer[cuMemcpyHtoDAsync_v2Enum].cuMemcpyHtoDAsync_v2Real(dstDevice, srcHost, ByteCount, hStream);\n    \n    ASYNC_MEMCPY_EPILOGUE(event_node, cct_node, ((cudaStream_t)hStream), ByteCount, cudaMemcpyHostToDevice);\n    \n    return ret;\n    \n}\n\n\nCUresult cuMemcpyHtoD(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount) {\n    \n    SYNC_MEMCPY_PROLOGUE(context, launcher_cct, syncStart, recorded_node);\n    \n    monitor_disable_new_threads();\n    CUresult ret = cuDriverFunctionPointer[cuMemcpyHtoD_v2Enum].cuMemcpyHtoD_v2Real(dstDevice, srcHost, ByteCount);\n    monitor_enable_new_threads();\n    \n    SYNC_MEMCPY_EPILOGUE(context, launcher_cct, syncStart, recorded_node, ALL_STREAMS_MASK, syncEnd, ByteCount, cudaMemcpyHostToDevice); \n    return ret;\n    \n}\n\n\nCUresult cuMemcpyDtoHAsync(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream) {\n    \n    ASYNC_MEMCPY_PROLOGUE(streamId, event_node, context, cct_node, ((cudaStream_t)hStream), 0);\n    \n    CUresult ret = cuDriverFunctionPointer[cuMemcpyDtoHAsync_v2Enum].cuMemcpyDtoHAsync_v2Real(dstHost, srcDevice, ByteCount, hStream);\n    \n    ASYNC_MEMCPY_EPILOGUE(event_node, cct_node, ((cudaStream_t)hStream), ByteCount, cudaMemcpyDeviceToHost);\n    \n    return ret;\n}\n\n\nCUresult cuMemcpyDtoH(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount) {\n    \n    SYNC_MEMCPY_PROLOGUE(context, launcher_cct, syncStart, recorded_node);\n    \n    monitor_disable_new_threads();\n    CUresult ret = cuDriverFunctionPointer[cuMemcpyDtoH_v2Enum].cuMemcpyDtoH_v2Real(dstHost, srcDevice, ByteCount);\n    monitor_enable_new_threads();\n    \n    SYNC_MEMCPY_EPILOGUE(context, launcher_cct, syncStart, recorded_node, ALL_STREAMS_MASK, syncEnd, ByteCount, cudaMemcpyDeviceToHost); \n    return ret;\n}\n\n\n////////////////////////////////////////////////\n// CPU-GPU blame shift interface\n////////////////////////////////////////////////\n\n\nvoid\ngpu_blame_shifter(void* dc, int metric_id, cct_node_t* node,  int metric_dc)\n{\n  metric_desc_t* metric_desc = hpcrun_id2metric(metric_id);\n    \n  // Only blame shift idleness for time metric.\n  if ( !metric_desc->properties.time )\n    return;\n    \n  uint64_t cur_time_us = 0;\n  int ret = time_getTimeReal(&cur_time_us);\n  if (ret != 0) {\n    EMSG(\"time_getTimeReal (clock_gettime) failed!\");\n    monitor_real_abort();\n  }\n  uint64_t metric_incr = cur_time_us - TD_GET(last_time_us);\n    \n  // If we are already in a cuda API, then we can't call cleanup_finished_events() since CUDA could have taken the same lock. Hence we just return.\n    \n  bool is_threads_at_sync = TD_GET(gpu_data.is_thread_at_cuda_sync);\n  \n  if (is_threads_at_sync) {\n    if(SHARED_BLAMING_INITIALISED) {\n      TD_GET(gpu_data.accum_num_sync_threads) += ipc_data->num_threads_at_sync_all_procs; \n      TD_GET(gpu_data.accum_num_samples) += 1;\n    } \n    return;\n  }\n    \n  spinlock_lock(&g_gpu_lock);\n  uint32_t num_unfinshed_streams = 0;\n  stream_node_t *unfinished_event_list_head = 0;\n    \n  num_unfinshed_streams = cleanup_finished_events();\n  unfinished_event_list_head = g_unfinished_stream_list_head;\n    \n  if (num_unfinshed_streams) {\n        \n    //SHARED BLAMING: kernels need to be blamed for idleness on other procs/threads.\n    if(SHARED_BLAMING_INITIALISED && ipc_data->num_threads_at_sync_all_procs && !g_num_threads_at_sync) {\n      for (stream_node_t * unfinished_stream = unfinished_event_list_head; unfinished_stream; unfinished_stream = unfinished_stream->next_unfinished_stream) {\n\t//TODO: FIXME: the local threads at sync need to be removed, /T has to be done while adding metric\n\t//increment (either one of them).\n\tcct_metric_data_increment(cpu_idle_cause_metric_id, unfinished_stream->unfinished_event_node->launcher_cct, (cct_metric_data_t) {\n\t    .r = metric_incr / g_active_threads}\n\t  );\n      }\n    }\n  }\n  else {\n\n    /*** Code to account for Overload factor ***/\n    if(TD_GET(gpu_data.overload_state) == WORKING_STATE) {\n      TD_GET(gpu_data.overload_state) = OVERLOADABLE_STATE;\n    }\n        \n    if(TD_GET(gpu_data.overload_state) == OVERLOADABLE_STATE) {\n      // Increment gpu_overload_potential_metric_id  by metric_incr\n      cct_metric_data_increment(gpu_overload_potential_metric_id, node, (cct_metric_data_t) {\n\t  .i = metric_incr});\n    }\n        \n    // GPU is idle iff   ipc_data->outstanding_kernels == 0 \n    // If ipc_data is NULL, then this process has not made GPU calls so, we are blind and declare GPU idle w/o checking status of other processes\n    // There is no better solution yet since we dont know which GPU card we should be looking for idleness. \n    if(g_do_shared_blaming){\n      if ( !ipc_data || ipc_data->outstanding_kernels == 0) { // GPU device is truely idle i.e. no other process is keeping it busy\n\t// Increment gpu_ilde by metric_incr\n\tcct_metric_data_increment(gpu_idle_metric_id, node, (cct_metric_data_t) {\n\t    .i = metric_incr});\n      }\n    } else {\n      // Increment gpu_ilde by metric_incr\n      cct_metric_data_increment(gpu_idle_metric_id, node, (cct_metric_data_t) {\n\t  .i = metric_incr});            \n    }\n        \n  }\n  spinlock_unlock(&g_gpu_lock);\n}\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/sample-sources/memleak-overrides.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n// MEMLEAK overrides the malloc family of functions and provides two\n// metrics: number of bytes allocated and number of bytes freed per\n// dynamic context.  Subtracting these two values is a way to find\n// memory leaks.\n//\n// Override functions:\n// posix_memalign, memalign, valloc\n// malloc, calloc, free, realloc\n\n/******************************************************************************\n * standard include files\n *****************************************************************************/\n\n#define __USE_XOPEN_EXTENDED\n#include <sys/stat.h>\n#include <sys/time.h>\n#include <sys/types.h>\n#include <assert.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <stdint.h>\n#include <string.h>\n#include <ucontext.h>\n\n/* definition for posix memalign */\n#undef _XOPEN_SOURCE         // avoid complaint about redefinition\n#define _XOPEN_SOURCE 600\n#include <stdlib.h>\n\n/* definition for valloc, memalign */\n#include <malloc.h>\n\n/* definition for sysconf */\n#include <unistd.h>\n\n/* definition for _SC_PAGESIZE */\n#include <sys/mman.h>\n\n\n\n/******************************************************************************\n * local include files\n *****************************************************************************/\n\n#include <sample-sources/memleak.h>\n#include <messages/messages.h>\n#include <safe-sampling.h>\n#include <sample_event.h>\n#include <monitor-exts/monitor_ext.h>\n#include <lib/prof-lean/spinlock.h>\n#include <lib/prof-lean/splay-macros.h>\n\n// FIXME: the inline getcontext macro is broken on 32-bit x86, so\n// revert to the getcontext syscall for now.\n#if defined(__i386__)\n#ifndef USE_SYS_GCTXT\n#define USE_SYS_GCTXT\n#endif\n#else  // ! __i386__\n#include <utilities/arch/inline-asm-gctxt.h>\n#include <utilities/arch/mcontext.h>\n#endif\n\n\n/******************************************************************************\n * type definitions\n *****************************************************************************/\n\ntypedef struct leakinfo_s {\n  long magic;\n  cct_node_t *context;\n  size_t bytes;\n  void *memblock;\n  struct leakinfo_s *left;\n  struct leakinfo_s *right;\n} leakinfo_t;\n\nleakinfo_t leakinfo_NULL = { .magic = 0, .context = NULL, .bytes = 0 };\n\ntypedef void *memalign_fcn(size_t, size_t);\ntypedef void *valloc_fcn(size_t);\ntypedef void *malloc_fcn(size_t);\ntypedef void  free_fcn(void *);\ntypedef void *realloc_fcn(void *, size_t);\n\n\n\n/******************************************************************************\n * macros\n *****************************************************************************/\n\n#define MEMLEAK_USE_HYBRID_LAYOUT 1\n\n#define MEMLEAK_MAGIC 0x68706374\n#define MEMLEAK_DEFAULT_PAGESIZE  4096\n\n#define HPCRUN_MEMLEAK_PROB  \"HPCRUN_MEMLEAK_PROB\"\n#define DEFAULT_PROB  0.1\n\n#ifdef HPCRUN_STATIC_LINK\n#define real_memalign   __real_memalign\n#define real_valloc   __real_valloc\n#define real_malloc   __real_malloc\n#define real_free     __real_free\n#define real_realloc  __real_realloc\n#else\n#define real_memalign   __libc_memalign\n#define real_valloc   __libc_valloc\n#define real_malloc   __libc_malloc\n#define real_free     __libc_free\n#define real_realloc  __libc_realloc\n#endif\n\nextern memalign_fcn       real_memalign;\nextern valloc_fcn         real_valloc;\nextern malloc_fcn         real_malloc;\nextern free_fcn           real_free;\nextern realloc_fcn        real_realloc;\n\n\n\n/******************************************************************************\n * private data\n *****************************************************************************/\n\nstatic int leak_detection_enabled = 0; // default is off\nstatic int leak_detection_init = 0;    // default is uninitialized\nstatic int use_memleak_prob = 0;\nstatic float memleak_prob = 0.0;\n\nstatic struct leakinfo_s *memleak_tree_root = NULL;\nstatic spinlock_t memtree_lock = SPINLOCK_UNLOCKED;\n\nstatic int leakinfo_size = sizeof(struct leakinfo_s);\nstatic long memleak_pagesize = MEMLEAK_DEFAULT_PAGESIZE;\n\nenum {\n  MEMLEAK_LOC_HEAD = 1,\n  MEMLEAK_LOC_FOOT,\n  MEMLEAK_LOC_NONE\n};\n\nstatic char *loc_name[4] = {\n  NULL, \"header\", \"footer\", \"none\"\n};\n\n\n\n/******************************************************************************\n * splay operations\n *****************************************************************************/\n\n\nstatic struct leakinfo_s *\nsplay(struct leakinfo_s *root, void *key)\n{\n  REGULAR_SPLAY_TREE(leakinfo_s, root, key, memblock, left, right);\n  return root;\n}\n\n\nstatic void\nsplay_insert(struct leakinfo_s *node)\n{\n  void *memblock = node->memblock;\n\n  node->left = node->right = NULL;\n\n  spinlock_lock(&memtree_lock);  \n  if (memleak_tree_root != NULL) {\n    memleak_tree_root = splay(memleak_tree_root, memblock);\n\n    if (memblock < memleak_tree_root->memblock) {\n      node->left = memleak_tree_root->left;\n      node->right = memleak_tree_root;\n      memleak_tree_root->left = NULL;\n    } else if (memblock > memleak_tree_root->memblock) {\n      node->left = memleak_tree_root;\n      node->right = memleak_tree_root->right;\n      memleak_tree_root->right = NULL;\n    } else {\n      TMSG(MEMLEAK, \"memleak splay tree: unable to insert %p (already present)\", \n\t   node->memblock);\n      assert(0);\n    }\n  }\n  memleak_tree_root = node;\n  spinlock_unlock(&memtree_lock);  \n}\n\n\nstatic struct leakinfo_s *\nsplay_delete(void *memblock)\n{\n  struct leakinfo_s *result = NULL;\n\n  spinlock_lock(&memtree_lock);  \n  if (memleak_tree_root == NULL) {\n    spinlock_unlock(&memtree_lock);  \n    TMSG(MEMLEAK, \"memleak splay tree empty: unable to delete %p\", memblock);\n    return NULL;\n  }\n\n  memleak_tree_root = splay(memleak_tree_root, memblock);\n\n  if (memblock != memleak_tree_root->memblock) {\n    spinlock_unlock(&memtree_lock);  \n    TMSG(MEMLEAK, \"memleak splay tree: %p not in tree\", memblock);\n    return NULL;\n  }\n\n  result = memleak_tree_root;\n\n  if (memleak_tree_root->left == NULL) {\n    memleak_tree_root = memleak_tree_root->right;\n    spinlock_unlock(&memtree_lock);  \n    return result;\n  }\n\n  memleak_tree_root->left = splay(memleak_tree_root->left, memblock);\n  memleak_tree_root->left->right = memleak_tree_root->right;\n  memleak_tree_root =  memleak_tree_root->left;\n  spinlock_unlock(&memtree_lock);  \n  return result;\n}\n\n\n\n/******************************************************************************\n * private operations\n *****************************************************************************/\n\n// Accept 0.ddd as floating point or x/y as fraction.\nstatic float\nstring_to_prob(char *str)\n{\n  int x, y;\n  float ans;\n\n  if (strchr(str, '/') != NULL) {\n    if (sscanf(str, \"%d/%d\", &x, &y) == 2 && y > 0) {\n      ans = (float)x / (float)y;\n    } else {\n      ans = DEFAULT_PROB;\n    }\n  } else {\n    if (sscanf(str, \"%f\", &ans) < 1) {\n      ans = DEFAULT_PROB;\n    }\n  }\n\n  return ans;\n}\n\n\nstatic void\nmemleak_initialize(void)\n{\n  struct timeval tv;\n  char *prob_str;\n  unsigned int seed;\n  int fd;\n\n  if (leak_detection_init)\n    return;\n\n#ifdef _SC_PAGESIZE\n  memleak_pagesize = sysconf(_SC_PAGESIZE);\n#else\n  memleak_pagesize = MEMLEAK_DEFAULT_PAGESIZE;\n#endif\n\n  // If we are sampling the mallocs, then read the probability and\n  // seed the random number generator.\n  prob_str = getenv(HPCRUN_MEMLEAK_PROB);\n  if (prob_str != NULL) {\n    use_memleak_prob = 1;\n    memleak_prob = string_to_prob(prob_str);\n    TMSG(MEMLEAK, \"sampling mallocs with prob = %f\", memleak_prob);\n\n    seed = 0;\n    fd = open(\"/dev/urandom\", O_RDONLY);\n    if (fd >= 0) {\n      read(fd, &seed, sizeof(seed));\n      close(fd);\n    }\n    gettimeofday(&tv, NULL);\n    seed += (getpid() << 16) + (tv.tv_usec << 4);\n    srandom(seed);\n  }\n\n  // unconditionally enable leak detection for now\n  leak_detection_enabled = 1;\n  leak_detection_init = 1;\n\n  TMSG(MEMLEAK, \"init\");\n}\n\n\n// Returns: 1 if p1 and p2 are on the same physical page.\n//\nstatic inline int\nmemleak_same_page(void *p1, void *p2)\n{\n  uintptr_t n1 = (uintptr_t) p1;\n  uintptr_t n2 = (uintptr_t) p2;\n\n  return (n1 / memleak_pagesize) == (n2 / memleak_pagesize);\n}\n\n\n// Choose the location of the leakinfo struct at malloc().  Use a\n// header if the system and application pointers are on the same page\n// (so free can look for a header without risking a segfault).  Note:\n// aligned mallocs never get headers.\n//\n// sys_ptr = pointer returned by sysem malloc\n// bytes = size of application's region\n// align = non-zero if an aligned malloc\n//\n// Returns: enum constant for header/footer\n// appl_ptr = value given to the application\n// info_ptr = location of the leakinfo struct\n//\nstatic int\nmemleak_get_malloc_loc(void *sys_ptr, size_t bytes, size_t align,\n\t\t       void **appl_ptr, leakinfo_t **info_ptr)\n{\n#if MEMLEAK_USE_HYBRID_LAYOUT\n  if ( (! ENABLED(MEMLEAK_NO_HEADER)) && align == 0\n       && memleak_same_page(sys_ptr, sys_ptr + leakinfo_size) )\n  {\n    *appl_ptr = sys_ptr + leakinfo_size;\n    *info_ptr = sys_ptr;\n    return MEMLEAK_LOC_HEAD;\n  }\n#endif\n\n  // footer\n  *appl_ptr = sys_ptr;\n  *info_ptr = sys_ptr + bytes;\n  return MEMLEAK_LOC_FOOT;\n}\n\n\n// Find the location of the leakinfo struct at free().\n//\n// Returns: enum constant for header/footer/none,\n// and system and leakinfo pointers.\n//\nstatic int\nmemleak_get_free_loc(void *appl_ptr, void **sys_ptr, leakinfo_t **info_ptr)\n{\n  static int num_errors = 0;\n\n#if MEMLEAK_USE_HYBRID_LAYOUT\n  // try header first\n  *info_ptr = (leakinfo_t *) (appl_ptr - leakinfo_size);\n  if (memleak_same_page(*info_ptr, appl_ptr)\n      && (*info_ptr)->magic == MEMLEAK_MAGIC\n      && (*info_ptr)->memblock == appl_ptr) {\n    *sys_ptr = *info_ptr;\n    return MEMLEAK_LOC_HEAD;\n  }\n#endif\n\n  // always try footer\n  *sys_ptr = appl_ptr;\n  *info_ptr = splay_delete(appl_ptr);\n  if (*info_ptr == NULL) {\n    return MEMLEAK_LOC_NONE;\n  }\n  if ((*info_ptr)->magic == MEMLEAK_MAGIC\n      && (*info_ptr)->memblock == appl_ptr) {\n    return MEMLEAK_LOC_FOOT;\n  }\n\n  // must be memory corruption somewhere.  maybe a bug in our code,\n  // but more likely someone else has stomped on our data.\n  num_errors++;\n  if (num_errors < 100) {\n    AMSG(\"MEMLEAK: Warning: memory corruption in leakinfo node: %p \"\n\t \"sys: %p appl: %p magic: 0x%lx context: %p bytes: %ld memblock: %p\",\n\t *info_ptr, *sys_ptr, appl_ptr, (*info_ptr)->magic, (*info_ptr)->context,\n\t (*info_ptr)->bytes, (*info_ptr)->memblock);\n  }\n  *info_ptr = NULL;\n  return MEMLEAK_LOC_NONE;\n}\n\n\n// Fill in the leakinfo struct, add metric to CCT, add to splay tree\n// (if footer) and print TMSG.\n//\nstatic void\nmemleak_add_leakinfo(const char *name, void *sys_ptr, void *appl_ptr,\n\t\t     leakinfo_t *info_ptr, size_t bytes, ucontext_t *uc,\n\t\t     int loc)\n{\n  char *loc_str;\n\n  if (info_ptr == NULL) {\n    TMSG(MEMLEAK, \"Warning: %s: bytes: %ld sys: %p appl: %p info: %p \"\n\t \"(NULL leakinfo pointer, this should not happen)\",\n\t name, bytes, sys_ptr, appl_ptr, info_ptr);\n    return;\n  }\n\n  info_ptr->magic = MEMLEAK_MAGIC;\n  info_ptr->bytes = bytes;\n  info_ptr->memblock = appl_ptr;\n  info_ptr->left = NULL;\n  info_ptr->right = NULL;\n  if (hpcrun_memleak_active()) {\n    sample_val_t smpl =\n      hpcrun_sample_callpath(uc, hpcrun_memleak_alloc_id(), \n        (hpcrun_metricVal_t) {.i=bytes}, \n        0, 1, NULL);\n    info_ptr->context = smpl.sample_node;\n    loc_str = loc_name[loc];\n  } else {\n    info_ptr->context = NULL;\n    loc_str = \"inactive\";\n  }\n  if (loc == MEMLEAK_LOC_FOOT) {\n    splay_insert(info_ptr);\n  }\n\n  TMSG(MEMLEAK, \"%s: bytes: %ld sys: %p appl: %p info: %p cct: %p (%s)\",\n       name, bytes, sys_ptr, appl_ptr, info_ptr, info_ptr->context, loc_str);\n}\n\n\n// Unified function for all of the mallocs, aligned and unaligned.\n// Do the malloc, add the leakinfo struct and print TMSG.\n//\n// bytes = size of application region\n// align = size of alignment, or 0 for unaligned\n// clear = 1 if want region memset to 0 (for calloc)\n// ret = return value from posix_memalign()\n//\nstatic void *\nmemleak_malloc_helper(const char *name, size_t bytes, size_t align,\n\t\t      int clear, ucontext_t *uc, int *ret)\n{\n  void *sys_ptr, *appl_ptr;\n  leakinfo_t *info_ptr;\n  char *inactive_mesg = \"inactive\";\n  int active, loc;\n  size_t size;\n\n  TMSG(MEMLEAK, \"%s: bytes: %ld\", name, bytes);\n\n  // do the real malloc, aligned or not.  note: we can't track malloc\n  // inside dlopen, that would lead to deadlock.\n  active = 1;\n  if (! (leak_detection_enabled && hpcrun_memleak_active())) {\n    active = 0;\n  } else if (TD_GET(inside_dlfcn)) {\n    active = 0;\n    inactive_mesg = \"unable to monitor: inside dlfcn\";\n  } else if (use_memleak_prob && (random()/(float)RAND_MAX > memleak_prob)) {\n    active = 0;\n    inactive_mesg = \"not sampled\";\n  }\n  size = bytes + (active ? leakinfo_size : 0);\n  if (align != 0) {\n    // there is no __libc_posix_memalign(), so we use __libc_memalign()\n    // instead, or else use dlsym().\n    sys_ptr = real_memalign(align, size);\n    if (ret != NULL) {\n      *ret = (sys_ptr == NULL) ? errno : 0;\n    }\n  } else {\n    sys_ptr = real_malloc(size);\n  }\n  if (clear && sys_ptr != NULL) {\n    memset(sys_ptr, 0, size);\n  }\n\n  // inactive or failed malloc\n  if (! active) {\n    TMSG(MEMLEAK, \"%s: bytes: %ld, sys: %p (%s)\",\n\t name, bytes, sys_ptr, inactive_mesg);\n    return sys_ptr;\n  }\n  if (sys_ptr == NULL) {\n    TMSG(MEMLEAK, \"%s: bytes: %ld, sys: %p (failed)\",\n\t name, bytes, sys_ptr);\n    return sys_ptr;\n  }\n\n  loc = memleak_get_malloc_loc(sys_ptr, bytes, align, &appl_ptr, &info_ptr);\n  memleak_add_leakinfo(name, sys_ptr, appl_ptr, info_ptr, bytes, uc, loc);\n\n  return appl_ptr;\n}\n\n\n// Reclaim the data in the leakinfo struct, add metric to CCT,\n// invalidate the struct and print TMSG.\n//\n// sys_ptr = the system malloc pointer\n// appl_ptr = the application malloc pointer\n// info_ptr = pointer to our leakinfo struct\n// loc = enum constant for header/footer/none\n//\nstatic void\nmemleak_free_helper(const char *name, void *sys_ptr, void *appl_ptr,\n\t\t    leakinfo_t *info_ptr, int loc)\n{\n  char *loc_str;\n\n  if (info_ptr == NULL) {\n    TMSG(MEMLEAK, \"%s: sys: %p appl: %p (no malloc)\", name, sys_ptr, appl_ptr);\n    return;\n  }\n\n  if (info_ptr->context != NULL && hpcrun_memleak_active()) {\n    hpcrun_free_inc(info_ptr->context, info_ptr->bytes);\n    loc_str = loc_name[loc];\n  } else {\n    loc_str = \"inactive\";\n  }\n  info_ptr->magic = 0;\n\n  TMSG(MEMLEAK, \"%s: bytes: %ld sys: %p appl: %p info: %p cct: %p (%s)\",\n       name, info_ptr->bytes, sys_ptr, appl_ptr, info_ptr,\n       info_ptr->context, loc_str);\n}\n\n\n/******************************************************************************\n * interface operations\n *****************************************************************************/\n\n// The memleak overrides pose extra challenges for safe sampling.\n// When we enter a memleak override, if we're coming from inside our\n// own code, we can't just automatically call the real version of the\n// function and return.  The problem is that sometimes we put headers\n// in front of the malloc'd region and thus the application and the\n// system don't use the same pointer for the beginning of the region.\n//\n// For malloc, memalign, etc, it's ok to return the real version\n// without a header.  The free code checks for the case of no header\n// or footer.  And actually, there are always a few system mallocs\n// that happen before we get initialized that go untracked.\n//\n// But for free, we can't just call the real free if the region might\n// have a header.  In that case, we'd be freeing the wrong pointer and\n// the memory system would crash.\n//\n// Now, we could call the real free if we were 100% certain that the\n// malloc also came from our code and thus had no header.  But if\n// there's anything that slips through the cracks, then the program\n// crashes.  OTOH, running our code looking for a header might hit\n// deadlock if the debug MSGS are on.  Choose your poison, but\n// probably this case never happens.\n//\n// The moral is: be careful not to use malloc or free in our code.\n// Use mmap and hpcrun_malloc instead.\n\nint\nMONITOR_EXT_WRAP_NAME(posix_memalign)(void **memptr, size_t alignment,\n                                      size_t bytes)\n{\n  ucontext_t uc;\n  int ret = 0;\n\n  if (! hpcrun_safe_enter()) {\n    *memptr = real_memalign(alignment, bytes);\n    return (*memptr == NULL) ? errno : 0;\n  }\n  memleak_initialize();\n\n#ifdef USE_SYS_GCTXT\n  getcontext(&uc);\n#else // ! USE_SYS_GCTXT\n  INLINE_ASM_GCTXT(uc);\n#endif // USE_SYS_GCTXT\n\n  *memptr = memleak_malloc_helper(\"posix_memalign\", bytes, alignment, 0, &uc, &ret);\n  hpcrun_safe_exit();\n  return ret;\n}\n\n\nvoid *\nMONITOR_EXT_WRAP_NAME(memalign)(size_t boundary, size_t bytes)\n{\n  ucontext_t uc;\n  void *ptr;\n\n  if (! hpcrun_safe_enter()) {\n    return real_memalign(boundary, bytes);\n  }\n  memleak_initialize();\n\n#ifdef USE_SYS_GCTXT\n  getcontext(&uc);\n#else // ! USE_SYS_GCTXT\n  INLINE_ASM_GCTXT(uc);\n#endif // USE_SYS_GCTXT\n\n  ptr = memleak_malloc_helper(\"memalign\", bytes, boundary, 0, &uc, NULL);\n  hpcrun_safe_exit();\n  return ptr;\n}\n\n\nvoid *\nMONITOR_EXT_WRAP_NAME(valloc)(size_t bytes)\n{\n  ucontext_t uc;\n  void *ptr;\n\n  if (! hpcrun_safe_enter()) {\n    return real_valloc(bytes);\n  }\n  memleak_initialize();\n\n#ifdef USE_SYS_GCTXT\n  getcontext(&uc);\n#else // ! USE_SYS_GCTXT\n  INLINE_ASM_GCTXT(uc);\n#endif // USE_SYS_GCTXT\n\n  ptr = memleak_malloc_helper(\"valloc\", bytes, memleak_pagesize, 0, &uc, NULL);\n  hpcrun_safe_exit();\n  return ptr;\n}\n\n\nvoid *\nMONITOR_EXT_WRAP_NAME(malloc)(size_t bytes)\n{\n  ucontext_t uc;\n  void *ptr;\n\n  if (! hpcrun_safe_enter()) {\n    return real_malloc(bytes);\n  }\n  memleak_initialize();\n\n#ifdef USE_SYS_GCTXT\n  getcontext(&uc);\n#else // ! USE_SYS_GCTXT\n  INLINE_ASM_GCTXT(uc);\n#endif // USE_SYS_GCTXT\n\n  ptr = memleak_malloc_helper(\"malloc\", bytes, 0, 0, &uc, NULL);\n  hpcrun_safe_exit();\n  return ptr;\n}\n\n\nvoid *\nMONITOR_EXT_WRAP_NAME(calloc)(size_t nmemb, size_t bytes)\n{\n  ucontext_t uc;\n  void *ptr;\n\n  if (! hpcrun_safe_enter()) {\n    ptr = real_malloc(nmemb * bytes);\n    if (ptr != NULL) {\n      memset(ptr, 0, nmemb * bytes);\n    }\n    return ptr;\n  }\n  memleak_initialize();\n\n#ifdef USE_SYS_GCTXT\n  getcontext(&uc);\n#else // ! USE_SYS_GCTXT\n  INLINE_ASM_GCTXT(uc);\n#endif // USE_SYS_GCTXT\n\n  ptr = memleak_malloc_helper(\"calloc\", nmemb * bytes, 0, 1, &uc, NULL);\n  hpcrun_safe_exit();\n  return ptr;\n}\n\n\n// For free() and realloc(), we must always look for a header, even if\n// the metric is inactive and we don't record it in the CCT (unless\n// memleak is entirely disabled).  If the region has a header, then\n// the system ptr is not the application ptr, and we must find the\n// sytem ptr or else free() will crash.\n//\nvoid\nMONITOR_EXT_WRAP_NAME(free)(void *ptr)\n{\n  leakinfo_t *info_ptr;\n  void *sys_ptr;\n  int loc;\n\n  // look for header, even if came from inside our code.\n  int safe = hpcrun_safe_enter();\n\n  memleak_initialize();\n  TMSG(MEMLEAK, \"free: ptr: %p\", ptr);\n\n  if (! leak_detection_enabled) {\n    real_free(ptr);\n    TMSG(MEMLEAK, \"free: ptr: %p (inactive)\", ptr);\n    goto finish;\n  }\n  if (ptr == NULL) {\n    goto finish;\n  }\n\n  loc = memleak_get_free_loc(ptr, &sys_ptr, &info_ptr);\n  memleak_free_helper(\"free\", sys_ptr, ptr, info_ptr, loc);\n  real_free(sys_ptr);\n\nfinish:\n  if (safe) {\n    hpcrun_safe_exit();\n  }\n  return;\n}\n\n\nvoid *\nMONITOR_EXT_WRAP_NAME(realloc)(void *ptr, size_t bytes)\n{\n  ucontext_t uc;\n  leakinfo_t *info_ptr;\n  void *ptr2, *appl_ptr, *sys_ptr;\n  char *inactive_mesg = \"inactive\";\n  int loc, loc2, active;\n\n  // look for header, even if came from inside our code.\n  int safe = hpcrun_safe_enter();\n\n  memleak_initialize();\n  TMSG(MEMLEAK, \"realloc: ptr: %p bytes: %ld\", ptr, bytes);\n\n  if (! leak_detection_enabled) {\n    appl_ptr = real_realloc(ptr, bytes);\n    goto finish;\n  }\n\n#ifdef USE_SYS_GCTXT\n  getcontext(&uc);\n#else // ! USE_SYS_GCTXT\n  INLINE_ASM_GCTXT(uc);\n#endif // USE_SYS_GCTXT\n\n  // realloc(NULL, bytes) means malloc(bytes)\n  if (ptr == NULL) {\n    appl_ptr = memleak_malloc_helper(\"realloc/malloc\", bytes, 0, 0, &uc, NULL);\n    goto finish;\n  }\n\n  // for memleak metric, treat realloc as a free of the old bytes\n  loc = memleak_get_free_loc(ptr, &sys_ptr, &info_ptr);\n  memleak_free_helper(\"realloc/free\", sys_ptr, ptr, info_ptr, loc);\n\n  // realloc(ptr, 0) means free(ptr)\n  if (bytes == 0) {\n    real_free(sys_ptr);\n    appl_ptr = NULL;\n    goto finish;\n  }\n\n  // if inactive, then do real_realloc() and return.\n  // but if there used to be a header, then must slide user data.\n  // again, can't track malloc inside dlopen.\n  active = 1;\n  if (! (leak_detection_enabled && hpcrun_memleak_active())) {\n    active = 0;\n  } else if (TD_GET(inside_dlfcn)) {\n    active = 0;\n    inactive_mesg = \"unable to monitor: inside dlfcn\";\n  } else if (use_memleak_prob && (random()/(float)RAND_MAX > memleak_prob)) {\n    active = 0;\n    inactive_mesg = \"not sampled\";\n  }\n  if (! active) {\n    if (loc == MEMLEAK_LOC_HEAD) {\n      // slide left\n      memmove(sys_ptr, ptr, bytes);\n    }\n    appl_ptr = real_realloc(sys_ptr, bytes);\n    TMSG(MEMLEAK, \"realloc: bytes: %ld ptr: %p (%s)\",\n\t bytes, appl_ptr, inactive_mesg);\n    goto finish;\n  }\n\n  // realloc and add leak info to new location.  treat this as a\n  // malloc of the new size.  note: if realloc moves the data and\n  // switches header/footer, then need to slide the user data.\n  size_t size = bytes + leakinfo_size;\n  ptr2 = real_realloc(sys_ptr, size);\n  loc2 = memleak_get_malloc_loc(ptr2, bytes, 0, &appl_ptr, &info_ptr);\n  if (loc == MEMLEAK_LOC_HEAD && loc2 != MEMLEAK_LOC_HEAD) {\n    // slide left\n    memmove(ptr2, ptr2 + leakinfo_size, bytes);\n  }\n  else if (loc != MEMLEAK_LOC_HEAD && loc2 == MEMLEAK_LOC_HEAD) {\n    // slide right\n    memmove(ptr2 + leakinfo_size, ptr, bytes);\n  }\n  memleak_add_leakinfo(\"realloc/malloc\", ptr2, appl_ptr, info_ptr, bytes, &uc, loc2);\n\nfinish:\n  if (safe) {\n    hpcrun_safe_exit();\n  }\n  return appl_ptr;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/lush-agents/agent-cilk.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n//***************************************************************************\n//\n// File: \n//   $HeadURL$\n//\n// Purpose:\n//   LUSH: Logical Unwind Support for HPCToolkit\n//\n// Description:\n//   [The set of functions, macros, etc. defined in the file]\n//\n// Author:\n//   Nathan Tallent, Rice University.\n//\n//***************************************************************************\n\n//************************* System Include Files ****************************\n\n#include <stdlib.h>\n#include <stdbool.h>\n\n#include <pthread.h>\n\n#include <string.h>\n\n#include <limits.h>  // PATH_MAX\n#include <errno.h>\n\n//*************************** User Include Files ****************************\n\n#include \"agent-cilk.h\"\n\n#include <messages/messages.h>\n\n//*************************** Forward Declarations **************************\n\n#define LUSHCB_DECL(FN) \\\n LUSH ## FN ## _fn_t  FN\n\nLUSHCB_DECL(CB_malloc);\nLUSHCB_DECL(CB_free);\nLUSHCB_DECL(CB_step);\nLUSHCB_DECL(CB_loadmap_find);\n// lush_cursor stuff\n\n#undef LUSHCB_DECL\n\nstatic lush_agentid_t MY_lush_aid;\n\n//*************************** Forward Declarations **************************\n\n// FIXME: hackish implementation\nstatic const char* libcilk_str = \"libcilk\";\nstatic const char* lib_str = \"lib\";\nstatic const char* ld_str = \"ld-linux\";\n\n//*************************** Forward Declarations **************************\n\nstatic int\ninit_lcursor(lush_cursor_t* cursor);\n\nstatic unw_seg_t\nclassify_by_unw_segment(cilk_cursor_t* csr);\n\nstatic unw_seg_t\npeek_segment(lush_cursor_t* cursor);\n\nstatic bool\nis_libcilk(void* addr, char* lm_buffer /*helper storage*/);\n\nstatic bool\nis_cilkprogram(void* addr, char* lm_buffer /*helper storage*/);\n\n\n// **************************************************************************\n// Initialization/Finalization\n// **************************************************************************\n\nextern int\nLUSHI_init(int argc, char** argv,\n\t   lush_agentid_t           aid,\n\t   LUSHCB_malloc_fn_t       malloc_fn,\n\t   LUSHCB_free_fn_t         free_fn,\n\t   LUSHCB_step_fn_t         step_fn,\n\t   LUSHCB_loadmap_find_fn_t loadmap_fn)\n{\n  MY_lush_aid = aid;\n\n  CB_malloc       = malloc_fn;\n  CB_free         = free_fn;\n  CB_step         = step_fn;\n  CB_loadmap_find = loadmap_fn;\n\n  return 0;\n}\n\n\nextern int \nLUSHI_fini()\n{\n  return 0;\n}\n\n\nextern char* \nLUSHI_strerror(int code)\n{\n  return \"\"; // STUB\n}\n\n\n// **************************************************************************\n// Maintaining Responsibility for Code/Frame-space\n// **************************************************************************\n\nextern int \nLUSHI_reg_dlopen()\n{\n  return 0; // FIXME: coordinate with dylib stuff\n}\n\n\nextern bool \nLUSHI_ismycode(void* addr)\n{\n  char buffer[PATH_MAX];\n  return (is_libcilk(addr, buffer) || is_cilkprogram(addr, buffer));\n}\n\n\nbool\nis_libcilk(void* addr, char* lm_name /*helper storage*/)\n{\n  void *lm_beg, *lm_end;\n  int ret = CB_loadmap_find(addr, lm_name, &lm_beg, &lm_end);\n  if (ret && strstr(lm_name, libcilk_str)) {\n    return true;\n  }\n  return false;\n}\n\n\nbool\nis_cilkprogram(void* addr, char* lm_name /*helper storage*/)\n{\n  void *lm_beg, *lm_end;\n  int ret = CB_loadmap_find(addr, lm_name, &lm_beg, &lm_end); \n  if (ret && !(strstr(lm_name, lib_str) || strstr(lm_name, ld_str))) {\n    return true;\n  }\n  return false;\n}\n\n\n// **************************************************************************\n// \n// **************************************************************************\n\nextern lush_step_t\nLUSHI_step_bichord(lush_cursor_t* cursor)\n{\n  // -------------------------------------------------------\n  // Initialize cursor\n  // -------------------------------------------------------\n  int ret = init_lcursor(cursor);\n  if (ret != 0) {\n    return LUSH_STEP_ERROR;\n  }\n  cilk_cursor_t* csr = (cilk_cursor_t*)lush_cursor_get_lcursor(cursor);\n\n  // -------------------------------------------------------\n  // Compute p-note's current stack segment ('cur_seg')\n  // -------------------------------------------------------\n  unw_seg_t cur_seg = classify_by_unw_segment(csr);\n\n  // -------------------------------------------------------\n  // Given p-note derive l-note:\n  // -------------------------------------------------------\n\n  // FIXME: consider effects of multiple agents\n  //lush_agentid_t last_aid = lush_cursor_get_aid(cursor); \n\n  if (cur_seg == UnwSeg_CilkRT) {\n    // INVARIANT: unw_ty_is_worker() == true\n    lush_cursor_set_assoc(cursor, LUSH_ASSOC_1_to_0);\n  }\n  else if (cur_seg == UnwSeg_User) {\n    // INVARIANT: unw_ty_is_worker() == true\n    CilkWorkerState* ws = csr->u.cilk_worker_state;\n    if (ws && ws->self == 0 && peek_segment(cursor) == UnwSeg_CilkSched) {\n      // local stack: import_cilk_main -> cilk_main (skip the former)\n      lush_cursor_set_assoc(cursor, LUSH_ASSOC_0_to_0); // skip\n    }\n    else {\n      lush_cursor_set_assoc(cursor, LUSH_ASSOC_1_to_1);\n    }\n  }\n  else if (cur_seg == UnwSeg_CilkSched) {\n    switch (csr->u.ty) {\n      case UnwTy_Master:\n\tlush_cursor_set_assoc(cursor, LUSH_ASSOC_1_to_0);\n\tbreak;\n      case UnwTy_WorkerLcl:\n\tif (csr->u.prev_seg == UnwSeg_User \n\t    && !csr_is_flag(csr, UnwFlg_HaveLCtxt)) {\n\t  lush_cursor_set_assoc(cursor, LUSH_ASSOC_1_to_1);\n\t  csr_set_flag(csr, UnwFlg_HaveLCtxt);\n    \t}\n\telse if (csr_is_flag(csr, UnwFlg_HaveLCtxt)) {\n\t  lush_cursor_set_assoc(cursor, LUSH_ASSOC_0_to_0); // skip\n\t}\n\telse {\n\t  lush_cursor_set_assoc(cursor, LUSH_ASSOC_1_to_0);\n\t}\n\tbreak;\n      case UnwTy_Worker:\n\tif (csr->u.prev_seg == UnwSeg_User \n\t    && !csr_is_flag(csr, UnwFlg_HaveLCtxt)) {\n\t  lush_cursor_set_assoc(cursor, LUSH_ASSOC_1_to_M);\n\t  csr_set_flag(csr, UnwFlg_HaveLCtxt);\n\t}\n\telse if (csr_is_flag(csr, UnwFlg_HaveLCtxt)) {\n\t  lush_cursor_set_assoc(cursor, LUSH_ASSOC_0_to_0); // skip\n\t}\n\telse {\n\t  lush_cursor_set_assoc(cursor, LUSH_ASSOC_1_to_0);\n\t}\n\tbreak;\n      default: EEMSG(\"FIXME: default case (assert)\\n\");\n    }\n  }\n  else {\n    EEMSG(\"FIXME: Unknown segment! (assert)\\n\");\n  }\n\n\n  // record for next bi-chord\n  csr->u.prev_seg = cur_seg;\n\n  return LUSH_STEP_CONT;\n}\n\n\nextern lush_step_t\nLUSHI_step_pnote(lush_cursor_t* cursor)\n{\n  // NOTE: Since all associations are 1-to-a, it is always valid to step.\n\n  lush_step_t ty = LUSH_STEP_NULL;\n  \n  int t = CB_step(lush_cursor_get_pcursor(cursor));\n  if (t > 0) {\n    ty = LUSH_STEP_END_CHORD;\n  }\n  else if (t == 0) {\n    ty = LUSH_STEP_END_PROJ;\n  }\n  else /* (t < 0) */ {\n    ty = LUSH_STEP_ERROR;\n  }\n  \n  return ty;\n}\n\n\n#define SET_LIP_AND_TY(cl, lip, ty)\t\t\t\t\t\\\n  if (!cl) {\t\t\t\t\t\t\t\t\\\n    cilk_ip_set(lip, ip_normalized_NULL_lval);\t\t\t\t\\\n    ty = LUSH_STEP_END_CHORD;\t\t\t\t\t\t\\\n  }\t\t\t\t\t\t\t\t\t\\\n  else {\t\t\t\t\t\t\t\t\\\n    /* NOTE: interior lips should act like a return address; */\t\t\\\n    /*   therefore, we add 1                                 */\t\t\\\n    ip_normalized_t ip =\t\t\t\t\t\t\\\n      hpcrun_normalize_ip(CILKFRM_PROC(cl->frame) + 1, NULL);\t\t\\\n    cilk_ip_set(lip, ip);\t\t\t\t\t\t\\\n    ty = LUSH_STEP_CONT;\t\t\t\t\t\t\\\n  }\n\nextern lush_step_t\nLUSHI_step_lnote(lush_cursor_t* cursor)\n{\n  lush_step_t ty = LUSH_STEP_NULL;\n\n  lush_assoc_t as = lush_cursor_get_assoc(cursor);\n  cilk_cursor_t* csr = (cilk_cursor_t*)lush_cursor_get_lcursor(cursor);\n  cilk_ip_t* lip = (cilk_ip_t*)lush_cursor_get_lip(cursor);\n  \n  if (lush_assoc_is_a_to_0(as)) {\n    ty = LUSH_STEP_END_CHORD;\n  }\n  else if (as == LUSH_ASSOC_1_to_1) {\n    if (csr_is_flag(csr, UnwFlg_BegLNote)) {\n      ty = LUSH_STEP_END_CHORD;\n    }\n    else {\n      cilk_ip_set(lip, csr->u.ref_ip_norm);\n      ty = LUSH_STEP_CONT;\n      csr_set_flag(csr, UnwFlg_BegLNote);\n    }\n  }\n  else if (as == LUSH_ASSOC_1_to_M) {\n    // INVARIANT: csr->u.cilk_closure is non-NULL\n    Closure* cl = csr->u.cilk_closure;\n    if (csr_is_flag(csr, UnwFlg_BegLNote)) { // after innermost closure\n      // advance to next closure\n      cl = csr->u.cilk_closure = cl->parent;\n      SET_LIP_AND_TY(cl, lip, ty);\n    }\n    else {\n      // skip innermost closure; it is identical to the outermost stack frame\n      cl = csr->u.cilk_closure = cl->parent;\n      SET_LIP_AND_TY(cl, lip, ty);\n      csr_set_flag(csr, UnwFlg_BegLNote);\n    }\n  }\n  else {\n    ty = LUSH_STEP_ERROR;\n  }\n\n  return ty;\n}\n\n\nextern int \nLUSHI_set_active_frame_marker(/*ctxt, cb*/)\n{\n  return 0; // STUB\n}\n\n\n// **************************************************************************\n// \n// **************************************************************************\n\nstatic int\ninit_lcursor(lush_cursor_t* cursor)\n{\n  lush_lip_t* lip = lush_cursor_get_lip(cursor);\n  cilk_cursor_t* csr = (cilk_cursor_t*)lush_cursor_get_lcursor(cursor);\n  lush_agentid_t aid_prev = lush_cursor_get_aid_prev(cursor);\n  \n  // -------------------------------------------------------\n  // inter-bichord data\n  // -------------------------------------------------------\n  if (aid_prev == lush_agentid_NULL) {\n    CilkWorkerState* ws = \n      (CilkWorkerState*)pthread_getspecific(CILK_WorkerState_key);\n    Closure* cactus_stack = (ws) ? CILKWS_CL_DEQ_BOT(ws) : NULL;\n\n    // unw_ty_t\n    if (!ws) {\n      csr->u.ty = UnwTy_Master;\n    }\n    else {\n      csr->u.ty = (cactus_stack) ? UnwTy_Worker : UnwTy_WorkerLcl;\n\n      if (CILK_WS_has_stolen(ws) && !cactus_stack) {\n\t// Sometimes we are hammered in the middle of a Cilk operation\n\t// where the cactus stack pointer becomes NULL, even though\n\t// logical context 'should' exist (e.g., Cilk_sync before a\n\t// return).  The result is that we cannot obtain the logical\n\t// context and therefore cannot locate the unwind correctly\n\t// within the CCT.\n\t//\n\t// To avoid such bad unwinds, we use the simple heuristic of\n\t// requiring a cactus stack pointer if the worker has become a\n\t// thief. It is not a perfect solution since a worker may have\n\t// stolen the main routine; however, this is an exceptional\n\t// case.\n\t//\n\t// FIXME: the best solution is to find the smallest window\n\t// within the scheduler code and set a flag.  But I found that\n\t// this is easier said than done.\n\treturn 1;\n      }\n    }\n\n    csr->u.prev_seg = UnwSeg_NULL;\n\n    csr->u.flg = UnwFlg_NULL;\n\n    csr->u.cilk_worker_state = ws;\n    csr->u.cilk_closure = cactus_stack;\n  }\n  else if (aid_prev != MY_lush_aid) {\n    EEMSG(\"FIXME: HOW TO HANDLE MULTIPLE AGENTS?\\n\");\n  }\n\n  // -------------------------------------------------------\n  // intra-bichord data\n  // -------------------------------------------------------\n  memset(lip, 0, sizeof(*lip));\n\n  csr->u.ref_ip = (void*)lush_cursor_get_ip_unnorm(cursor);\n  csr->u.ref_ip_norm = lush_cursor_get_ip_norm(cursor);\n\n  csr_unset_flag(csr, UnwFlg_BegLNote);\n\n  return 0;\n}\n\n\n// Classify the cursor by the unw segment (physical stack)\n// NOTE: may set a flag within 'csr'\nstatic unw_seg_t\nclassify_by_unw_segment(cilk_cursor_t* csr)\n{\n  unw_seg_t cur_seg = UnwSeg_NULL;\n\n  char buffer[PATH_MAX];\n  bool is_cilkrt = is_libcilk(csr->u.ref_ip, buffer);\n  bool is_user   = is_cilkprogram(csr->u.ref_ip, buffer);\n\n  if (unw_ty_is_worker(csr->u.ty)) {\n    // -------------------------------------------------------\n    // 1. is_cilkrt &  (deq_diff <= 1) => UnwSeg_CilkSched \n    // 2. is_cilkrt & !(deq_diff <= 1) => UnwSeg_CilkRT\n    // 3. is_user                      => UnwSeg_User\n    // -------------------------------------------------------\n    CilkWorkerState* ws = csr->u.cilk_worker_state;\n    long deq_diff = CILKWS_FRAME_DEQ_TAIL(ws) - CILKWS_FRAME_DEQ_HEAD(ws);\n\n    if (is_user) {\n      cur_seg = UnwSeg_User;\n      csr_set_flag(csr, UnwFlg_SeenUser);\n    }\n    else if (is_cilkrt) {\n      cur_seg = (deq_diff <= 1) ? UnwSeg_CilkSched : UnwSeg_CilkRT;\n\n      // FIXME: sometimes the above test is not correct... OVERRIDE\n      if (cur_seg == UnwSeg_CilkRT && csr_is_flag(csr, UnwFlg_SeenUser)) {\n\tcur_seg = UnwSeg_CilkSched;\n      }\n    }\n    else {\n      EEMSG(\"FIXME: (assert): neither cilkrt nor user\\n\");\n    }\n  }\n  else if (unw_ty_is_master(csr->u.ty)) {\n    cur_seg = UnwSeg_CilkSched;\n    if ( !(is_user || is_cilkrt) ) {\n      // is_user may be true when executing main\n      EEMSG(\"FIXME: Unknown segment for master (assert)\\n\"); \n    }\n  }\n  else {\n    EEMSG(\"FIXME: Unknown thread type! (assert)\\n\");\n  }\n\n  return cur_seg;\n}\n\n\nstatic unw_seg_t\npeek_segment(lush_cursor_t* cursor)\n{\n  lush_cursor_t tmp_cursor = *cursor;\n\n  unw_seg_t cur_seg = UnwSeg_NULL;\n\n  lush_step_t ty = LUSHI_step_pnote(&tmp_cursor);\n  if ( !(ty == LUSH_STEP_END_PROJ || ty == LUSH_STEP_ERROR) ) {\n    cilk_cursor_t* csr = (cilk_cursor_t*)lush_cursor_get_lcursor(&tmp_cursor);\n    csr->u.ref_ip = (void*)lush_cursor_get_ip_unnorm(&tmp_cursor);\n    csr->u.ref_ip_norm = lush_cursor_get_ip_norm(&tmp_cursor);\n    cur_seg = classify_by_unw_segment(csr);\n  }\n\n  return cur_seg;\n}\n\n\n// **************************************************************************\n// \n// **************************************************************************\n\nextern int\nLUSHI_lip_destroy(lush_lip_t* lip)\n{\n  return 0; // STUB\n}\n\n\nextern int \nLUSHI_lip_eq(lush_lip_t* lip)\n{\n  return 0; // STUB\n}\n\n\nextern int\nLUSHI_lip_read()\n{\n  return 0; // STUB\n}\n\n\nextern int\nLUSHI_lip_write()\n{\n  return 0; // STUB\n}\n\n\n// **************************************************************************\n// Metrics\n// **************************************************************************\n\nextern bool\nLUSHI_do_metric(uint64_t incrMetricIn, \n\t\tbool* doMetric, bool* doMetricIdleness, \n\t\tuint64_t* incrMetric, double* incrMetricIdleness)\n{\n  // INVARIANT: at least one thread is working\n  // INVARIANT: ws is non-NULL\n\n  CilkWorkerState* ws = \n    (CilkWorkerState*)pthread_getspecific(CILK_WorkerState_key);\n  bool isWorking = (ws && CILK_WS_is_working(ws));\n\n  if (isWorking) {\n    double n = CILK_WS_num_workers(ws);\n    double n_working = (double)CILK_Threads_Working;\n    double n_not_working = n - n_working;\n\n    // NOTE: if n_working == 0, then Cilk should be in the process of\n    // exiting.  Protect against samples in this timing window.\n    double idleness = 0.0;\n    if (n_working > 0) {\n      idleness = ((double)incrMetricIn * n_not_working) / n_working;\n    }\n\n    *doMetric = true;\n    *doMetricIdleness = true;\n    *incrMetric = incrMetricIn;\n    *incrMetricIdleness = idleness;\n  }\n  else {\n    *doMetric = false;\n    *doMetricIdleness = false;\n    //*incrMetric = 0;\n    //*incrMetricIdleness = 0.0;\n  }\n  return *doMetric;\n}\n \n\n// **************************************************************************\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/lush-agents/agent-tbb.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n//***************************************************************************\n//\n// File: \n//    $HeadURL$\n//\n// Purpose:\n//    LUSH: Logical Unwind Support for HPCToolkit\n//\n// Description:\n//    [The set of functions, macros, etc. defined in the file]\n//\n// Author:\n//    Nathan Tallent, Rice University.\n//\n//***************************************************************************\n\n//************************* System Include Files ****************************\n\n#include <stdlib.h>\n#include <stdbool.h>\n\n#include <string.h>\n\n#include <assert.h>\n\n//*************************** User Include Files ****************************\n\n#include \"agent-tbb.h\"\n\n//*************************** Forward Declarations **************************\n\n#define LUSHCB_DECL(FN) \\\n LUSH ## FN ## _fn_t  FN\n\nLUSHCB_DECL(CB_malloc);\nLUSHCB_DECL(CB_free);\nLUSHCB_DECL(CB_step);\nLUSHCB_DECL(CB_loadmap_find);\n// lush_cursor stuff\n\n#undef LUSHCB_DECL\n\nstatic lush_agentid_t MY_lush_aid;\n\n// **************************************************************************\n// Initialization/Finalization\n// **************************************************************************\n\nextern int\nLUSHI_init(int argc, char** argv,\n\t   lush_agentid_t           aid,\n\t   LUSHCB_malloc_fn_t       malloc_fn,\n\t   LUSHCB_free_fn_t         free_fn,\n\t   LUSHCB_step_fn_t         step_fn,\n\t   LUSHCB_loadmap_find_fn_t loadmap_fn)\n{\n  MY_lush_aid = aid;\n\n  CB_malloc       = malloc_fn;\n  CB_free         = free_fn;\n  CB_step         = step_fn;\n  CB_loadmap_find = loadmap_fn;\n\n  return 0;\n}\n\n\nextern int \nLUSHI_fini()\n{\n  return 0;\n}\n\n\nextern char* \nLUSHI_strerror(int code)\n{\n  return \"\"; // STUB\n}\n\n\n// **************************************************************************\n// Maintaining Responsibility for Code/Frame-space\n// **************************************************************************\n\nextern int \nLUSHI_reg_dlopen()\n{\n  return 0; // FIXME: coordinate with dylib stuff\n}\n\n\nextern bool \nLUSHI_ismycode(void* addr)\n{\n  // NOTE: Currently, this does not prevent our LUSHI_do_backtrace\n  // from being called, but it may not be quite right in the context\n  // of multiple agents.\n  return false; // force LUSH to use the identity logical unwind\n}\n\n\n// **************************************************************************\n// \n// **************************************************************************\n\nextern lush_step_t\nLUSHI_step_bichord(lush_cursor_t* cursor)\n{\n  assert(0 && \"LUSHI_step_bichord: should never be called\");\n  return LUSH_STEP_ERROR;\n}\n\n\nextern lush_step_t\nLUSHI_step_pnote(lush_cursor_t* cursor)\n{\n  assert(0 && \"LUSHI_step_pnote: should never be called\");\n  return LUSH_STEP_ERROR;\n}\n\n\nextern lush_step_t\nLUSHI_step_lnote(lush_cursor_t* cursor)\n{\n  assert(0 && \"LUSHI_step_lnote: should never be called\");\n  return LUSH_STEP_ERROR;\n}\n\n\nextern int \nLUSHI_set_active_frame_marker(/*ctxt, cb*/)\n{\n  return 0; // STUB\n}\n\n\n// **************************************************************************\n// \n// **************************************************************************\n\nextern int\nLUSHI_lip_destroy(lush_lip_t* lip)\n{\n  return 0; // STUB\n}\n\n\nextern int \nLUSHI_lip_eq(lush_lip_t* lip)\n{\n  return 0; // STUB\n}\n\n\nextern int\nLUSHI_lip_read()\n{\n  return 0; // STUB\n}\n\n\nextern int\nLUSHI_lip_write()\n{\n  return 0; // STUB\n}\n\n\n// **************************************************************************\n// Metrics\n// **************************************************************************\n\nextern bool\nLUSHI_do_metric(uint64_t incrMetricIn, \n\t\tbool* doMetric, bool* doMetricIdleness, \n\t\tuint64_t* incrMetric, double* incrMetricIdleness)\n{\n  *doMetric = true;\n  *doMetricIdleness = false;\n  *incrMetric = incrMetricIn;\n  *incrMetricIdleness = 0.0;\n\n  return *doMetric;\n}\n\n\n// **************************************************************************\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/lush-agents/agent-pthread.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n//***************************************************************************\n//\n// File: \n//   $HeadURL$\n//\n// Purpose:\n//   LUSH: Logical Unwind Support for HPCToolkit\n//\n// Description:\n//   [The set of functions, macros, etc. defined in the file]\n//\n// Author:\n//   Nathan Tallent\n//\n//***************************************************************************\n\n//************************* System Include Files ****************************\n\n#include <stdlib.h>\n#include <stdbool.h>\n\n#include <string.h>\n\n#include <assert.h>\n\n//*************************** User Include Files ****************************\n\n#include <include/min-max.h>\n\n#include \"agent-pthread.h\"\n\n#include <thread_data.h>       // N.B.: outside of LUSHI interface\n#include <lush/lush-pthread.h> // N.B.: outside of LUSHI interface\n\n#include <lib/prof-lean/atomic.h> // N.B.: outside of LUSHI interface\n\n//*************************** Forward Declarations **************************\n\n#define LUSHCB_DECL(FN) \\\n LUSH ## FN ## _fn_t  FN\n\nLUSHCB_DECL(CB_malloc);\nLUSHCB_DECL(CB_free);\nLUSHCB_DECL(CB_step);\nLUSHCB_DECL(CB_loadmap_find);\n// lush_cursor stuff\n\n#undef LUSHCB_DECL\n\nstatic lush_agentid_t MY_lush_aid;\n\n// **************************************************************************\n// Initialization/Finalization\n// **************************************************************************\n\nextern int\nLUSHI_init(int argc, char** argv,\n\t   lush_agentid_t           aid,\n\t   LUSHCB_malloc_fn_t       malloc_fn,\n\t   LUSHCB_free_fn_t         free_fn,\n\t   LUSHCB_step_fn_t         step_fn,\n\t   LUSHCB_loadmap_find_fn_t loadmap_fn)\n{\n  MY_lush_aid = aid;\n\n  CB_malloc       = malloc_fn;\n  CB_free         = free_fn;\n  CB_step         = step_fn;\n  CB_loadmap_find = loadmap_fn;\n\n  return 0;\n}\n\n\nextern int \nLUSHI_fini()\n{\n  return 0;\n}\n\n\nextern char* \nLUSHI_strerror(int code)\n{\n  return \"\"; // STUB\n}\n\n\n// **************************************************************************\n// Maintaining Responsibility for Code/Frame-space\n// **************************************************************************\n\nextern int \nLUSHI_reg_dlopen()\n{\n  return 0; // FIXME: coordinate with dylib stuff\n}\n\n\nextern bool \nLUSHI_ismycode(void* addr)\n{\n  // NOTE: Currently, this does not prevent our LUSHI_do_backtrace\n  // from being called, but it may not be quite right in the context\n  // of multiple agents.\n  return false; // force LUSH to use the identity logical unwind\n}\n\n\n// **************************************************************************\n// \n// **************************************************************************\n\nextern lush_step_t\nLUSHI_step_bichord(lush_cursor_t* cursor)\n{\n  assert(0 && \"LUSHI_step_bichord: should never be called\");\n  return LUSH_STEP_ERROR;\n}\n\n\nextern lush_step_t\nLUSHI_step_pnote(lush_cursor_t* cursor)\n{\n  assert(0 && \"LUSHI_step_pnote: should never be called\");\n  return LUSH_STEP_ERROR;\n}\n\n\nextern lush_step_t\nLUSHI_step_lnote(lush_cursor_t* cursor)\n{\n  assert(0 && \"LUSHI_step_lnote: should never be called\");\n  return LUSH_STEP_ERROR;\n}\n\n\nextern int \nLUSHI_set_active_frame_marker(/*ctxt, cb*/)\n{\n  return 0; // STUB\n}\n\n\n// **************************************************************************\n// \n// **************************************************************************\n\nextern int\nLUSHI_lip_destroy(lush_lip_t* lip)\n{\n  return 0; // STUB\n}\n\n\nextern int \nLUSHI_lip_eq(lush_lip_t* lip)\n{\n  return 0; // STUB\n}\n\n\nextern int\nLUSHI_lip_read()\n{\n  return 0; // STUB\n}\n\n\nextern int\nLUSHI_lip_write()\n{\n  return 0; // STUB\n}\n\n\n// **************************************************************************\n// Metrics\n// **************************************************************************\n\nextern bool\nLUSHI_do_metric(uint64_t incrMetricIn,\n\t\tbool* doMetric, bool* doMetricIdleness,\n\t\tuint64_t* incrMetric, double* incrMetricIdleness)\n{\n  lushPthr_t* pthr = &TD_GET(pthr_metrics);\n  bool isWorking = pthr->is_working;\n\n  if (isWorking) {\n#if (LUSH_PTHR_FN_TY == 1)\n    // NOTE: pthr->idleness is only changed when this thread is not working\n    *doMetric = true;\n    *doMetricIdleness = (pthr->idleness > 0);\n    *incrMetric = incrMetricIn;\n    *incrMetricIdleness = pthr->idleness;\n    pthr->idleness = 0;\n#elif (LUSH_PTHR_FN_TY == 2)\n    bool is_working_lock = lushPthr_isWorking_lock(pthr);\n    \n    double num_working      = *(pthr->ps_num_working);\n    double num_working_lock = *(pthr->ps_num_working_lock);\n    double num_idle_cond    = MAX(0, *(pthr->ps_num_idle_cond)); // timing!\n\n    // INVARIANT: Since this thread is working, it is either working\n    // while locked or it is working as 'other' (within a condition\n    // variable critical section or without a lock).\n    double idleness = 0.0;\n    if (is_working_lock) {\n      // -----------------------------------------------------\n      // is_working_lock() : num_idle_lock / num_working_lock\n      // -----------------------------------------------------\n      double num_idle = (*(pthr->ps_num_threads) - num_working);\n      double num_idle_lock = MAX(0, num_idle - num_idle_cond);\n      num_working_lock = MAX(1, num_working_lock); // timing windows\n      idleness = (num_idle_lock / num_working_lock);\n    }\n    else {\n      // -----------------------------------------------------\n      // is_working_cond() || is_working : num_idle_cond / num_working_othr\n      // -----------------------------------------------------\n      // INVARIANT: (num_working - num_working_lock) should always be > 0\n      double num_working_othr = MAX(1, num_working - num_working_lock);\n      idleness = (num_idle_cond / num_working_othr);\n    }\n\n    *doMetric = true;\n    *doMetricIdleness = true;\n    *incrMetric = incrMetricIn;\n    *incrMetricIdleness = (double)incrMetricIn * idleness;\n#elif (LUSH_PTHR_FN_TY == 3)\n    // Same as 1\n    *doMetric = true;\n    *doMetricIdleness = (pthr->idleness > 0);\n    *incrMetric = incrMetricIn;\n    *incrMetricIdleness = pthr->idleness;\n    pthr->idleness = 0;\n#else\n#  error \"agent-pthread.c!\"\n#endif\n  }\n  else {\n#if (LUSH_PTHR_FN_TY == 1)\n    *doMetric = true;\n    *doMetricIdleness = true;\n    *incrMetric = 0;\n    *incrMetricIdleness = (double)incrMetricIn;\n#elif (LUSH_PTHR_FN_TY == 2)\n    *doMetric = false;\n    *doMetricIdleness = false;\n    //*incrMetric = 0;\n    //*incrMetricIdleness = 0.0;\n#elif (LUSH_PTHR_FN_TY == 3)\n    if (pthr->syncObjData) {\n      // INVARIANT: spin waiting on pthr->syncObjData\n      hpcrun_atomicAdd(&pthr->syncObjData->idleness, incrMetricIn);\n    }\n    *doMetric = false;\n    *doMetricIdleness = false;\n#else\n#  error \"agent-pthread.c!\"\n#endif\n  }\n  return *doMetric;\n}\n\n// **************************************************************************\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun/doc/hpcrun-internals.txt": "ISSUES\n\taugment libunwind to support call stack surgery\n\t\tfind return address of current frame (when at a sample)\n\t\treplace return address of current frame\n\n\tmight need to know what register holds the return address in the epilogue of the stack procedure\n\npossible assumption: when a procedure calls another one, assume the caller stores the return address in ra. the trampoline is not set up to restore  the return address into an arbitrary register so it is available in the register after return. resolution: the trampoline would need to inspect the procedure desccriptor of the callee and make sure the return address was restored to the entry register of the callee.\n\nissue for register frame procedures (and perhaps stack frame procedures too)\nalpha procedure descriptors don't record\n\tclobbering of ra\n\trestore of ra\n\nupon longjmp:\n\tlose information about return counts for frames between source frame and target frame on call stack\n\n\tnote: not safe to take samples during longjmp processing\n\tto determine if the trampoline needs to be moved, we \n\nassumption that program stack is contiguous, which is not always true\nthis may be a problem for user-level threads, or programming languages that support heap-based stack frames or segments\n\nwhen we take samples in the trampoline, do we attribute it to the trampoline target address\n\n\noperating system specific code should be factored out of processor-specific code. e.g. the code for reading the load map\n\nwhy does the alpha implementation use libcall.s?\n\non the alpha, synchronous unwinding can end up with an unsafe context e.g. for malloc profiling when malloc is called from the math library.\n\n\n\n-*- mode: outline -*-\n\nThis document attempts to describe, in as much detail as possible, the\ninner workings of csprof, a sampling call path profiler for Alpha,\nItanium, and x86-64.\n\n* Terminology\n\nThe term \"interface function\" is used to describe any function that must\nbe defined per-platform.  Please note that such functions may be able to\nbe shared between different platforms; all Linux platforms could\nprobably use the same definition of `csprof_epoch_get_loaded_modules'.\nThe interface functions are expected to be defined in certain files;\nplease see the existing platforms for the layout and names of the files\nwhere their interface functions are defined.\n\n* Platforms\n\ncsprof works on the Alpha, Itanium, and x86-64.\n\n** Alpha issues\n\nNone known at this time.  The Alpha was the initial platform for\ncsprof and served as a testbed for working out many of the issues.\n\n** Itanium issues\n\ncsprof on the Itanium requires the `libunwind' library.  Trampolines\nare not supported on the Itanium at this time; edge counts are\ntherefore unavailable and any asynchronous driver always unwinds the\nfull call stack.  (This is not as bad as it might sound, since\nlibunwind caches unwind information.) (JMC: why no trampolines supported?)\n\n** x86-64 issues.\n\nAny asynchronous driver on the x86-64 requires that the application\nbeing profiled as well as any libraries it might use possess accurate\nunwind information for procedure epilogues.  As the only known\ncompiler that generates such information is GCC, and then only with a\nRice-only patch that is being pushed for submission into GCC mainline,\nasynchronous profiling should not be attempted on the x86-64 unless you\nknow your system and your program has been compiled with a patched GCC.\n\nSynchronous drivers are fully supported.\n\n** Porting issues\n\nWhile the supported platforms are all 64-bit platforms, csprof should\nwork properly on 32-bit platforms such as the x86 with a little\ntweaking.  The notable tweak necessary will be in mallocprof.c.  An\nalternate scheme for recognizing sampled and unsampled chunks will be\nnecessary; the current scheme uses the upper 16 bits of a 'void *' and\nthose bits will probably be in use on a 32-bit platform.  Other\ndrivers should work with no modifications.\n\nOther specialized porting issues will be discussed in the sections\nbelow.\n\n* Building\n\ncsprof requires GNU make to build.  We will assume GNU make is called\n`gmake'; building csprof then requires one command:\n\ngmake DRIVER=<driver> PLATFORM=<platform> THREADS=<0|1>\n\nDRIVER can currently be `itimer', `mallocprof', or `flexiprof'; PLATFORM\ncan be any one of `alpha', `alpha-thread', `ia64', or `x86-64'; THREADS\ncan be `0' or `1' for unthreaded or threaded profiling, respectively.\nThat separate `alpha' and `alpha-thread' platforms exist is an artifact\nof the Alpha implementation.\n\nThe value of DRIVER has `.c' appended to it; this file is then used in\nthe build process.  See the section `Drivers' for more details.\n\nTHREADS defaults to `0'.\n\nIt is unknown whether using a threaded csprof on single-threaded\nprograms is effective or even possible.\n\n** Notable #defines\n\nThese can be set in a platform Makefile include.\n\nCSPROF_PERF should be defined if high performance is desired; it\neliminates all debugging messages.  Testing whether the debugging\nmessages should be output is quite expensive.\n\nCSPROF_LAST_EDGE_ONLY should almost always be defined.  This #define\nchanges the behavior of when the trampoline counts returns.  When set,\nthe trampoline will only record the first return after a sample event.\nOtherwise, the trampoline records all returns. (JMC: does this mean we don't count returns all the way up to the CCT root? Is this what you've been measuring for our papers? That's not what we described.)\n\n** Porting issues\n\nAny new platforms should copy either mkinclude.x86-64 or\nmkinclude.ia64 and then make any necessary changes.\n\n* Drivers\n\ncsprof supports two types of drivers: asynchronous drivers and\nsynchronous drivers.  Asynchronous drivers are exemplified by the itimer\ndriver in itimer.c.  This driver works by periodically interrupting the\napplication with SIGPROF and collecting a call stack sample at that\ntime.  Synchronous drivers should be patterned after the malloc\nprofiling driver in mallocprof.c.  This driver works by overriding the\nmalloc() function and collecting statistics on where malloc is called\nfrom and how many bytes are allocated at each call.\n\n** Porting issues\n\nFor any asynchronous driver, the porter should take care to ensure for\nall relevant platforms that the third argument to a signal handler is a\n`ucontext_t *', not an `mcontext_t *'.  Special compilation flags may be\nnecessary.\n\n** Known limitations\n\nAsynchronous and synchronous sample events may not be monitored\nsimultaneously. (JMC: why?)\n\nTrampolines are not used with synchronous sample sources.  (This\nrestriction is because is is difficult to insert the trampoline *and*\nreturn from a synchronous event.)\n\nOnly one asynchronous sample event is permitted.  (This restriction\nprimarily stems for the difficulty of what to do with trampolines in\nthe face of multiple asynchronous samples.) (JMC: what are the issues in a bit deeper detail?)\n\nMultiple synchronous event sources may be used (e.g. one might sample\nmalloc(), another might sample MPI sends and receives, etc.), but they\nmust all be present in a single source file for the build process.\nThis also implies that there will not be separate initialization\nfunctions for profiling malloc, MPI, etc.; one initialization function\nmust initialize all the sample sources. (JMC: why? I think we worked this out with Cristi. If the issue is just getting metric ids, than this is handled.)\n\nIf this restriction was to be lifted, perhaps by permitting multiple\nindependent sources to be loaded via dlopen() or similar, it might\nalso be good to rework how metrics are recorded.  The current\nimplementation assumes that there will be some maximum number of\nmetrics recorded, for simplicity in constructing and writing out CCTs.\n(JMC: what generalization is needed here?)\n\n* Function overrides\n\nVarious portions of csprof need to override functions to be informed of\nwhen certain events occur.  Such functions include dlopen(),\npthread_create(), longjmp() and variants, whatever function initiates\nexception handling on a given platform, etc.\n\nMacro `CSPROF_GRAB_FUNCPTR' in `libstubs.h' will capture the necessary\nfunction pointer and stuff it in a predetermined variable.\n\n* States and epochs\n\n** States\n\nAll information related to profiling is stored in a structure of type\n`csprof_state_t'.  In a multithreaded program, each profiled thread will\nhave its own state.  States hold the CCT, a pointer into the CCT for\nefficient insertion of samples, a buffer for backtraces, information\nabout the trampoline (if applicable), informational flags, and a pointer\nto the current epoch.  At each sample, the current epoch is compared\nwith the epoch in the current state.  If these epochs are different,\nthen a new epoch has begun; we allocate a new state, copy information\nover from the old state, link the old state to the new state, and\ninstall the new state as the current state.\n\n** Epochs\n\nEpochs are csprof's mechanism for dealing with dynamic libraries.  In\nsimplest terms, an epoch is simply a list of load modules, representing\nknowledge about the load modules in core at a point in time.  This\ninformation is needed for processing collected profiles and mapping PCs\nback to the functions in which they occurred.  Every dlopen(), then,\nbegins a new epoch, since we now have a new set of PCs and functions to\nconsider in postprocessing.\n\nWe maintain a \"current\" epoch in a global variable.  This information\nshould not be thread-local, since information about which load modules\nare in-core is program-wide.  However, each state (thread-local) knows\nabout its current epoch, which is appropriately thread-local.\n\nThe interface function `csprof_epoch_get_loaded_modules' is used to\ndetermine what load modules are in-core when a new epoch is created.\n\n* Atomic memory operations\n\ncsprof requires a very few atomic memory operations to perform some\ninternal locking and to atomically increment/decrement some variables\npotentially accessed by multiple threads.  The interface functions for\nthis purpose are:\n\n- csprof_atomic_increment\n- csprof_atomic_decrement\n- csprof_atomic_exchange_pointer\n\n** Porting issues\n\nCompiler intrinsics or inline assembly will be required to implement\nthese intrinsics for any new platform.  Looking at the Linux kernel\ngives one a pretty decent idea of how to implement the necessary\noperations.  Future work might include making csprof depend on\nlibatomic_ops from HP or using the GCC builtins provided in versions >=\n4.x.\n\n* CCT\n\nThe CCT is the data structure in which collected samples are stored.  It\nis simply a tree where each node has a variable number of children.\n\nChild nodes of a node are stored two different ways: in a red-black tree\nfor quick lookup during sample recording and a list for ease of\ntraversal during datafile writing.\n\nThe red-black tree implementation is straight out of the pages of\nCLR(S).\n\n(JMC: we might also have a memory-compact version of sampling that records only the callee at the leaf rather than the PC.)\n\n** Porting issues\n\nNone if the memory allocator works properly (see the `Porting issues'\nsection under `Memory allocation').  Otherwise a platform may need to\nfind a place to store the red/black bit for red-black tree nodes.\n\n* Memory allocation\n\ncsprof performs nearly all of its own memory allocation; the routines\nfor doing this are located in the file `mem.c'.  Why not just use\nmalloc(), you ask?  csprof was originally developed to support\nasynchronous sampling only.  Handling asynchronous events was to be done\nvia signal handlers and a quick review of malloc's man page reminds us\nthat malloc() is not to be called from within signal handlers.  Since we\nmay need to do quite a bit of allocation from within signal handlers (a\nnew state if we have changed epochs, new tree nodes in the CCT, a longer\nbuffer to record backtraces, etc.), we needed a memory allocator\nthat *was* safe to be called from within a signal handler.\n\nThe implementation of the memory allocator is straightfoward.  Large\nchunks of memory are carved out via `mmap' and smaller chunks of memory\nare handed out from within these larger chunks.  There is a current\nlarge chunk from which allocation requests are fulfilled.  A free\npointer is kept within the large chunk of memory; if an allocation\nrequest cannot be satisfied from within a chunk, another chunk is\nrequested from mmap (doubling in size from the previous chunk) and this\nnew chunk becomes the current chunk.  There is no free() call.\n\n(Technically, there are two allocators: one for \"normal\" memory\nallocation and one for temporary memory allocation.  The latter is\nintended to be used for stack-like allocation requests and therefore\ndoes feature a free() call.  But this second allocator is currently not\nused within csprof.)\n\ncsprof on multithreaded programs simply maintains a separate memory pool\nfor each profiled thread, obviating the need for locking during memory\nallocations.\n\n** Porting issues\n\nThe memory allocator is a stable piece of code and should not need to be\ntouched except perhaps to adapt it to the peculiarities of `mmap' on\ndifferent platforms.\n\nA 32-bit platform should also ensure that the lower two bits of memory\nblock addresses returned by `csprof_malloc' are zero, as these bits\nare used by the CCT's red-black tree implementation.\n\n* Metrics\n\ncsprof features the ability to track multiple metrics along any given\ncall path.  For example, the number of bytes allocated and the number of\nbytes sent with MPI calls may be tracked simultaneously.  The interface\nto metrics is found in `metrics.h'.  The usual calling pattern is, in\nthe init function for a driver:\n\ndriver_init(...)\n{\n    ....\n    csprof_set_max_metrics(...);\n    m_id1 = csprof_new_metric()\n    csprof_set_metric_info_and_period(m_id1, ...);\n    /* repeat as necessary for other metrics */\n    ....\n}\n\nMetric IDs can then be passed to `csprof_sample_callstack'.\n\n** Known issues\n\nAdding metrics after one or more samples have been taken is not\nsupported (and not detected, either).  The reason for this is that\nmetric values are stored in the CCT nodes and the datafile format\nassumes that all nodes in the datafile (across all epochs) have the same\nnumber of metrics in them.\n\nDeleting metrics is not supported.\n\nBoth adding and deleting metrics might be possible by defining new\nepohcs whenever a metric is added or deleted.  Then the number of\nmetrics would be stored per-tree in the datafile, rather than globally.\n\n* Sampling\n\nCall the interface function `csprof_sample_callstack' from an\nasynchronous driver.  The `context' parameter should be of type\n`mcontext_t'.\n\nSynchronous drivers will want to use the interface function\n`csprof_record_metric_with_unwind'.  The `unwinds' parameter is meant to\nbe used to determine the number of unwinds necessary to get back to\n\"user\" code.  A diagram will certainly help.\n\nImagine that we are profiling malloc() and we intercept a call to\nmalloc():\n\n+----------+\n|   quux   |                                      ; \"user\" code\n+----------+\n     ||\n     ||\n     vv\n+----------+\n|  malloc  |                                      ; in csprof\n+----------+\n\ncsprof's malloc does some work and then calls\n`csprof_record_metric_with_unwind':\n\n+----------+\n|   quux   |                                      ; \"user\" code\n+----------+\n     ||\n     ||\n     vv\n+----------+\n|  malloc  |                                      ; in csprof\n+----------+\n     ||\n     ||\n     vv\n+----------------------------------------+\n|    csprof_record_metric_with_unwind    |        ; in csprof\n+----------------------------------------+\n\n`csprof_record_metric_with_unwind' then captures its context using\n`getcontext' or `unw_getcontext'.  But it doesn't want to start\nunwinding from *that* context, because that's not what the use expects\nto see.  This is where the `unwinds' parameter comes into play: it\nspecifies the number of times the captured context should be unwound\nbefore using it as the top of a sampled call stack.  In the example\nabove, `unwinds' should be `2'.\n\n** Unsafe code\n\nThe considerations in this section only apply to asynchronous sampling.\n\nCertain PCs are considered \"unsafe\" to take samples at, primarily\nbecause we do not know how to or should not unwind the stack from those\nPCs.  The interface function `csprof_context_is_unsafe' determines\nwhether a particular address is safe to take a sample at and must be\ndefined per-platform.\n\nSome addresses are always considered unsafe, such as addresses inside\nthe csprof library itself.  There is also a flag, CSPROF_EXC_HANDLING,\nwhich is used to indicate that even though control may not be in the\ncsprof library, it is still unsafe to take samples.\n\nThe usual solution on a given platform is to have a table of\n(start_address, end_address) pairs denoting unsafe regions of code.  The\nregions covered by any two pairs in the table should be disjoint.\nThis table is stored in sorted order according to `start_address',\nenabling binary search to quickly determine whether a given address is\nunsafe.\n\n** Porting issues\n\nFor a given platform, the list of PCs that are considered unsafe is\npotentially incomplete.  The developer of csprof should bear this in\nmind when attempting to debug problems.\n\nEven for synchronous profiling, there may still exist certain times when\nsampling does not make sense, even though it is possible.  See the\nimplementation of `realloc' in `mallocprof.c' for an example.\n\n** Known issues\n\nDespite the above refactoring with `csprof_context_is_unsafe', there is\nstill quite a bit of duplication of what regions are considered unsafe\nscattered throughout the code.\n\n* Unwinding\n\n** Virtually unwinding the stack\n\nWe expect there to be some function that accepts a \"context\" containing\nthe values of machine registers at a particular point in a function and\nupdates that context to contain the values of the machine registers at\nthe time the function was called.  This function is called repeatedly to\ndiscover the frames in the call stack until we reach a frame we have\npreviously examined (determined with the assistance of the trampoline\nand the shadow stack we maintain) or we reach the bottom of the\nprogram's call stack.  Frames collected in this manner are stored in a\n\"backtrace\" and then this backtrace is inserted into the CCT for storage.\n\n\"Unwinding\" in this document usually refers to the entire process\ndescribed above.\n\n*** Alpha issues\n\nThe Alpha unwinding process is terribly complicated and riddled with\nspecial cases to deal with the cheating done by the compiler with\nrespect to ABI conformance.  As such, the source code is really the best\nplace to look to understand all the issues involved.  The special cases\nare fairly well commented with their motivation and the attempted\nworkaround(s).  Beyond these, the Alpha is not really that much\ndifferent from what is described above.\n\n*** x86-64 and Itanium issues\n\nBoth of these platforms use `libunwind' for virtually unwinding the\nstack.  The unwinding code is simple and clean.\n\n** Backtrace storage and management\n\nFor unwinding efficiency, we store frames from the current backtrace in\nan array, expanding it as necessary.  A linked list would be\nconceptually easier to understand, but tests have shown it to be slower\nthan using an array.  A frame is defined as an instruction pointer and a\nstack pointer; the stack pointer is included for distinguishing between\ninvocations of recursive functions.  Each state has a buffer into which\nframes from a backtrace are collected and stored:\n\nbtbuf                                                      btend\n|                                                            |\nv                                                            v\n+------------------------------------------------------------+\n|     |                                       |              |\n+------------------------------------------------------------+\n      ^                                       ^\n      |                                       |\n   unwind                                   bufstk\n\nThe shadow stack tracking the current program stack is kept between\n`bufstk' and `btend'.  The current backtrace is collected into the\nbuffer starting at `btbuf'; a pointer called `unwind' tracks the\nposition at which a new frame is stored.  (This variable is local to the\nunwinding process and need not be stored in the state.)  If `unwind ==\nbufstk', then we have run out of space and we need to allocate a larger\nbuffer.\n\nWhen the unwinding is complete, either by having found a frame with a\ntrampoline as its return address or by finding the bottommost frame, we\ncopy the frames between `btbuf' and `unwind' to be contiguous with the\nframes between `bufstk' and `btend', updating `bufstk'.\n\n** Porting issues\n\nIf the platform is supported by libunwind, then copying code from the\nx86-64 or Itanium port should be sufficient.  If the platform is more\nunusual, like the Alpha, then more elbow grease may be required.\n\n* Recording samples in the CCT\n\nAfter a sample is taken, the collected frames are then inserted into the\nCCT, starting at the node stored by the profiling state.  If this node\nis NULL, insertion begins at the root of the CCT.  Pseudo-code for the\ninsertion process looks like:\n\ncurrent_node = ...\n\nwhile there are frames to process:\n    current_frame = ...\n\n    child = find_child(current_node, current_frame.ip)\n\n    if child:\n        current_node = child\n        advance to next frame\n    else:\n        /* must create entirely new subtree */\n        ...\n\ncurrent_node.samples += num_samples\nremember current_node in the state for the next insertion\n\n* Trampoline\n\n`csprof_trampoline' is an interface function that needs to be written in\nassembly code.  Its primary purpose is to save the return value of the\nreturning function, save any callee-saved registers, call\n`csprof_trampoline2', and redirect control to the original caller.\n\nNote that calling `csprof_trampoline' a \"function\" is not really\naccurate; it's more like a piece of code that gets jumped to and needs\nto set things up so that it looks and behaves like a real function.  (On\nthe Alpha, for example, `csprof_trampoline' does not know the location\nof the GOT on entry, as all functions do.  So it needs to do some\nlegwork to divine that piece of information.)\n\nThere should also be an interface function called\n`csprof_trampoline_end' defined immediate after `csprof_trampoline'\nfile.  This function is never called; its sole purpose is to provide a\nsymbol that is positioned directly after `csprof_trampoline' and may\ntherefore be used to determine whether a PC falls in\n`csprof_trampoline'.\n\n** Inserting the trampoline\n\nThere are two times when the trampoline needs to be inserted: one is\nduring a sample, the other is when the trampline is being moved up and\ndown the stack.  Since the latter can be *much* faster than the former,\nthere are different ways to find the location for each time.\n\nThe functions invoked at each time fill in a `struct lox' with the\nnecessary information and return a boolean flag indicating whether the\ntrampoline should be installed.  Once a `struct lox' is filled in, it is\na simple matter to determine where the trampoline should be inserted.\nTo handle any vagaries of the machine, though, an interface function,\n`csprof_insert_trampoline' is used.\n\n*** During a sample\n\nThe interface function `csprof_find_return_address_for_context' is used\nhere.\n\nInformation from the unwinding process is often used for inserting the\ntrampoline to save the costs of computing it twice.  This is\nparticularly true on the Alpha, where both unwinding and finding the\ncorrect location for the trampoline is very expensive.\n\n*** During trampoline execution\n\nThe interface function `csprof_find_return_address_for_function' is used\nhere.\n\n** Removing the trampoline\n\nAs far as possible, the trampoline should be removed from the stack\nprior to unwinding the stack.  This is done via the interface function\n`csprof_remove_trampoline'.\n\n** Itanium issues\n\nA trampoline has not been written for Itanium, due to a lack of time\nspent understanding the Itanium's peculiar register file.\n\n* Exceptions and longjmp\n\nSince exceptions and longjmp both change the execution of the program in\nnon-standard ways, they need to be noticed by csprof via function\noverrides.\n\nWhen overriding `longjmp', the trampoline must be moved so the\ntrampoline is in or below the stack frame to which longjmp is returning.\n\n** Exception handling\n\nException handling needs to be overridden in two ways: the first is that\ncsprof needs to be notified when handling an exception begins, since the\nfunctions performing the exception handling are probably \"unsafe\".  The\nsecond way is that whatever exception handling mechanism is used, there\nexists a `longjmp'-like function which must be overridden in the same\nmanner as `longjmp'.\n\nCode can often be shared between the exception handling portions and the\n`longjmp' handling portion.\n\n* Data file format\n\nTersely described, this is what the datafile format looks like:\n\nFile\n  header\tFileHeader\n  data\t\tCsProfData\n  epochs\tEpochsTable\n  num_trees\tuint32; the number of trees to be read\n  tramp_samples\tuint64; the total number of samples taken in the trampoline\n  trees\t\tTree[num_trees]; the trees collected\n\nFileHeader\n  magic\t\t10 bytes; \"HPC_CSPROF\" (no trailing null)\n  version\t5 bytes; \"01.00\" (no trailing null)\n  endianness    1 byte; 'l' or 'b'\n  num_chunks    8 bytes; not used\n\nCsProfData\n  target\thpcfile_string; name of executable, not used\n  num_metrics\tuint32; number of metrics to be read\n  Metric\n    event_name\t\thpcfile_string; description of the metric\n    flags\t\thpcfile_number; descriptive flags (async, etc.)\n    sample_period\thpcfile_number; metric sample period\n\nEpochsTable\n  num_epochs\tuint32; number of epochs to be read\n  Epoch\n    num_modules\t\tuint32; number of load modules in the epoch\n    Module\n      name_length\tuint32; number of characters in module name\n      module_name\tbyte[name_length];\n      virtual_address\tuint64; where the module prefers to be mapped\n      mapped_address\tuint64; actual address at which the module was mapped\n\nTreeId\n  magic\t\t10 bytes; \"HPC_CSTREE\" (no trailing null)\n  version\t5 bytes; \"01.0T\"\n  endianess\t1 byte; 'l' or 'b'\n\nTree\n  id\t\tTreeId\n  vma_size\tuint32; probably '8'\n  uint_size\tuint32; probably '8'\n  num_nodes\tuint64;\n  epoch_number\tuint32; epoch index in the epoch table\n  # node 0 is the root of the tree\n  nodes\t\tTreeNode[num_nodes]; the actual nodes of the tree\n\nTreeNode\n  id\t\tuint64; used to index into the node array\n  parent\tuint64; id of this node's parent\n  ip\t\tuint64; ip of this node\n  sp\t\tuint64; sp of this node\n  metrics\tuint64[CsProfData.num_metrics]; metrics taken at this node\n\n* Debugging hints\n\n** The -D and -v flags to csprof\n\nThese flags are actually bitfields; each bit denotes some interesting\npiece of information csprof should talk about.  See `csprof_general.h'\nfor a definition of each bit.  Please be aware that while this is\nintended to be the way things work, an unusually large number of debug\nmessages fire when the zeroth bit in the bitfield is set.\n\n-D output is quite a bit more verbose than -v output.  The latter is\nintended to be informative, of use to the average user, whereas the\nlatter is intended to be used for \"real\" debugging.\n\n** Message \"Eliminate all occurrences of smashing!\"\n\nThis message usually means that on the previous sample, we inserted the\ntrampoline incorrectly.  Therefore, it was not activated and moved up\nthe stack properly.  Then, on our current sample, we attempted to find a\nframe containing the trampoline as its return address and did not--we\nneeded to unwind the stack all the way.  Arguably, this situation could\nbe recovered from, but the data recorded may be slightly screwy, since\nwe missed some returns from the trampoline.\n\n** Message \"Thought we were returning to ... but ...\"\n\nThis message comes from within the trampoline and tells you that the\ntrampoline was placed incorrectly and/or the stack was unwound\nincorrectly.  The trampoline thought we were heading to <first address>\nbut we are actually supposed to go to <second address>.",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun-flat/monitor_preload.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n/****************************************************************************\n//\n// File: \n//    $HeadURL$\n//\n// Purpose:\n//    Implements monitoring that is launched with a preloaded library,\n//    something that only works for dynamically linked applications.\n//    The library intercepts the beginning execution point of the\n//    process and then starts monitoring. When the process exits,\n//    control will be transferred back to this library where profiling\n//    is finalized.\n//\n// Description:\n//    [The set of functions, macros, etc. defined in the file]\n//\n// Author:\n//    Written by John Mellor-Crummey and Nathan Tallent, Rice University.\n//\n*****************************************************************************/\n\n/************************** System Include Files ****************************/\n\n#include <stdlib.h>\n#include <stdarg.h>   /* va_arg */\n#include <string.h>   /* memset */\n#include <errno.h>\n#include <pthread.h>\n\n#ifndef __USE_GNU\n# define __USE_GNU /* must define on Linux to get RTLD_NEXT from <dlfcn.h> */\n# define SELF_DEFINED__USE_GNU\n#endif\n\n#include <dlfcn.h>\n\n#undef __USE_GNU\n\n/**************************** User Include Files ****************************/\n\n#include \"monitor.h\"\n#include \"hpcrun.h\"\n\n\n/**************************** Forward Declarations **************************/\n\n/****************************************************************************/\n\n\nvoid \nmonitor_init_library()\n{\n  init_library();\n  /* process initialized with interception of libc_start_main */\n}\n\n\nvoid \nmonitor_fini_library()\n{\n  /* process finalized with libc_start_main */\n  fini_library();\n}\n\n\nvoid \nmonitor_init_process(const char* name, int* argc, char** argv, \n\t\t     const unsigned pid)\n{\n  hpcrun_cmd = name;  /* command is also in /proc/pid/cmdline */\n  if (opt_debug >= 1) {\n    fprintf(stderr, \"Init process callback from monitor received\\n\");\n  }\n  init_process();\n}\n\n\nvoid\nmonitor_fini_process()\n{\n  if (opt_debug >= 1) {\n    fprintf(stderr, \"Fini process callback from monitor received\\n\");\n  }\n  fini_process();\n}\n\n\nvoid \nmonitor_init_thread_support(void)\n{\n  int rval;\n  if ((rval = PAPI_thread_init(pthread_self)) != PAPI_OK) {\n    DIEx(\"error: PAPI error (%d): %s.\", rval, PAPI_strerror(rval));\n  }\n}\n\n\nvoid* \nmonitor_init_thread(unsigned tid)\n{\n  if (opt_debug >= 1) {\n    fprintf(stderr, \"init_thread(TID=0x%ux) callback from monitor received\\n\", tid);\n  }\n  return((void *)init_thread(1));\n}\n\n\nvoid \nmonitor_fini_thread(void* data)\n{\n  if (opt_debug >= 1) {\n    fprintf(stderr, \"fini_thread(TID=0x%lx) callback from monitor received\\n\", (long)pthread_self());\n  }\n  fini_thread((hpcrun_profiles_desc_t **)(&data), 1 /*is_thread*/);\n}\n\n\nvoid \nmonitor_dlopen(char* lib)\n{\n  if (opt_debug >= 1) {\n    fprintf(stderr, \"dlopen(%s) callback from monitor received\\n\", lib); \n  }\n  /* update profile tables */\n  //handle_dlopen();\n}\n\n/****************************************************************************/\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun-flat/monitor.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n/****************************************************************************\n//\n// File: \n//    $HeadURL$\n//\n// Purpose:\n//    A library of routines for preparing and finalizing monitoring\n//    for a process.  The library can determine a process' list of\n//    load modules (including DSOs), prepare PAPI_sprofil for\n//    profiling over each load module, finalize profiling and write\n//    the data for later processing.\n//\n// Description:\n//    [The set of functions, macros, etc. defined in the file]\n//\n// Author:\n//    Written by John Mellor-Crummey and Nathan Tallent, Rice University.\n//\n// Acknowledgements:\n//    Phil Mucci's 'papiex' code provided guidance for handling threads.\n//\n//    The PAPI Initialization code was originally adapted from parts of The\n//    Visual Profiler by Curtis L. Janssen (vmon.c).\n//    \n*****************************************************************************/\n\n/************************** System Include Files ****************************/\n\n#include <stdlib.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdarg.h>   /* va_arg */\n#include <ctype.h>\n#include <signal.h>\n#include <string.h>\n#include <limits.h>   /* for 'PATH_MAX' */\n#include <errno.h>\n#include <dlfcn.h>\n#include <pthread.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/**************************** User Include Files ****************************/\n\n#include <include/hpctoolkit-config.h>\n#include <include/uint.h>\n#include <include/min-max.h>\n\n#include \"monitor.h\"\n\n#ifdef HAVE_MONITOR  \n// FIXME: use libmonitor completely and include it\nextern unsigned long monitor_gettid();\n#endif\n\n#include \"hpcrun.h\"\n#include \"hpcpapi.h\" /* <papi.h>, etc. */\n#include \"rtmap.h\"\n\n#include <lib/prof-lean/hpcio.h>\n\n/**************************** Forward Declarations **************************/\n\n/* FIXME: this should be part of the data file */\ntypedef uint32_t hpc_hist_bucket; /* a 4 byte histogram bucket */\n\nstatic const uint64_t default_period = 999999; /* not (2^15 - 1) */\n\n/**************************** Forward Declarations **************************/\n\n/* intercepted signals */\nstatic void hpcrun_sighandler(int sig);\n\n/*************************** Variable Declarations **************************/\n\n/* This info is constant throughout the process and can therefore be\n   shared among multiple threads. */\n\n/* hpcrun options: set when the library is initialized */\nint   opt_debug = 0;\nint   opt_recursive = 0;\nhpc_threadprof_t opt_thread = HPCRUN_THREADPROF_EACH;\nchar* opt_eventlist = NULL;\nchar  opt_outpath[PATH_MAX] = \"\";\nchar  opt_prefix[PATH_MAX] = \"\";\nchar  opt_file[PATH_MAX] = \"\";\nint   opt_flagscode = 0;\n\n/* monitored command: set when library or process is initialized  */\nconst char* hpcrun_cmd = NULL;\n\n/* monitoring variables: set when the process is initialized */\nstatic rtloadmap_t* rtloadmap = NULL;    /* run time load map */\nstatic uint     numSysEvents  = 0;   /* estimate */\nstatic uint     numPAPIEvents = 0;   /* estimate */\n\n/* Profiling information for the first thread of execution in a\n   process. N.B. The _shared_ profiling buffers live here when\n   combining thread profiles. */\nstatic hpcrun_profiles_desc_t* hpc_profdesc = NULL;\n\n/* PAPI-specific variables */\nstatic int domain = 0;\n\n#define OPEN_OUTPUTFILE_AT_BEG 1\n\n/****************************************************************************\n * Library initialization and finalization\n ****************************************************************************/\n\nstatic void init_option_debug();\nstatic void init_options();\n\n/*\n *  Library initialization\n */\nextern void \ninit_library()\n{\n  init_option_debug();\n  \n  if (opt_debug >= 1) { MSG0(stderr, \"*** init_library ***\"); }\n  \n  init_options();\n\n#ifndef HAVE_MONITOR  \n  init_library_SPECIALIZED();\n#endif\n}\n\n\n/*\n *  Library finalization. Since this routine can be called more than\n *  once per process, ensure that it is idempotent.\n */\nextern void \nfini_library()\n{\n  static int is_finalized = 0;\n  if (is_finalized) {\n    if (opt_debug >= 1) { MSG0(stderr, \"*** fini_library (skip) ***\"); }\n    return;\n  }\n  \n  is_finalized = 1;\n  if (opt_debug >= 1) { MSG0(stderr, \"*** fini_library ***\"); }\n}\n\n\nstatic void\ninit_option_debug()\n{\n  /* Debugging (get this first) : default is off */\n  char *env_debug = getenv(\"HPCRUN_DEBUG\");\n  opt_debug = (env_debug ? atoi(env_debug) : 0);\n}\n\n\nstatic void\ninit_options()\n{\n  char *env_recursive, *env_thread, *env_eventlist, *env_outpath, *env_flags;\n  int is_opt_file, is_opt_prefix, is_opt_dir;\n  is_opt_file = is_opt_prefix = is_opt_dir = 0; /* off be default */\n\n  /* Handle HPCRUN_OPTIONS */\n  char *opts = getenv(\"HPCRUN_OPTIONS\");\n  if (opts && (strlen(opts)>0)) {\n    char* tmp = strtok(opts,\", \");\n    if (tmp) {\n      do {\n        if (strcmp(tmp,\"USER\") == 0)\n\t  domain |= PAPI_DOM_USER;\n        else if (strcmp(tmp,\"KERNEL\") == 0)\n          domain |= PAPI_DOM_KERNEL;\n        else if (strcmp(tmp,\"OTHER\") == 0)\n          domain |= PAPI_DOM_OTHER;\n        else if (strcmp(tmp,\"SUPERVISOR\") == 0)\n          domain |= PAPI_DOM_SUPERVISOR;\n\telse if (strcmp(tmp, \"FILE\") == 0)\n\t  is_opt_file = 1;\n\telse if (strcmp(tmp, \"PREFIX\") == 0)\n\t  is_opt_prefix = 1;\n\telse if (strcmp(tmp, \"DIR\") == 0)\n\t  is_opt_dir = 1;\n      } while ((tmp = strtok(NULL,\",\")) != NULL);\n    } \n  }\n  \n  if (opt_debug >= 1) { \n    MSGx(stderr, \"  LD_PRELOAD: %s\", getenv(\"LD_PRELOAD\")); \n  }\n  \n  /* Recursive profiling: default is on */\n  env_recursive = getenv(\"HPCRUN_RECURSIVE\");\n  opt_recursive = (env_recursive ? atoi(env_recursive) : 1);\n  if (!opt_recursive) {\n    /* turn off profiling for any processes spawned by this one */\n    unsetenv(\"LD_PRELOAD\"); \n    /* FIXME: just extract HPCRUN_LIB */\n  }\n\n  if (opt_debug >= 1) { \n    MSGx(stderr, \"  recursive profiling: %d\", opt_recursive); \n  }\n  \n  /* Threaded profiling: default is off */\n  env_thread = getenv(\"HPCRUN_THREAD\");\n  if (env_thread) {\n    opt_thread = (hpc_threadprof_t)atoi(env_thread);\n  }\n  \n  /* Profiling event list: default PAPI_TOT_CYC:999999 (default_period) */\n  opt_eventlist = \"PAPI_TOT_CYC:999999\"; \n  env_eventlist = getenv(\"HPCRUN_EVENT_LIST\");\n  if (env_eventlist) {\n    opt_eventlist = env_eventlist;\n  }\n\n  if (opt_debug >= 1) { MSGx(stderr, \"  event list: %s\", opt_eventlist); }\n  \n  /* Output path: default . */\n  env_outpath = getenv(\"HPCRUN_OUTPUT\");\n  if (is_opt_dir && env_outpath) {\n    strncpy(opt_outpath, env_outpath, PATH_MAX);\n    if(mkdir(opt_outpath, 0755))\n      if (errno != EEXIST) {\n        DIEx(\"error: mkdir(%s) failed. %s\\n\", opt_outpath, strerror(errno));\n      }\n  }\n  else\n    strcpy(opt_outpath, \".\");\n\n  /* user-supplied prefix */\n  if (is_opt_prefix && env_outpath)\n    strncpy(opt_prefix, env_outpath, PATH_MAX);\n\n  /* user-supplied file name */\n  if (is_opt_file && env_outpath)\n    strncpy(opt_file, env_outpath, PATH_MAX);\n  \n  /* Profiling flags: default PAPI_PROFIL_POSIX */\n  {\n    const hpcpapi_flagdesc_t *f = hpcpapi_flag_by_name(\"PAPI_PROFIL_POSIX\");\n    opt_flagscode = f->code;\n\n    env_flags = getenv(\"HPCRUN_EVENT_FLAG\");\n    if (env_flags) {\n      char *ptr = NULL, *token = NULL;\n      token = strtok_r(env_flags,\",:\",&ptr);\n      while (token) {\n\tif ((f = hpcpapi_flag_by_name(token)) == NULL) {\n\t  DIEx(\"error: Invalid profiling flag '%s'.\", token);\n\t}\n\topt_flagscode |= f->code;\n\tif (opt_debug >=1) {\n\t  MSGx(stderr, \"  flag: %s, 0x%x, 0x%x\", token, f->code, opt_flagscode);\n\t}\n\ttoken = strtok_r(NULL,\",:\",&ptr);\n      }\n    }\n  }\n}\n\n\n/****************************************************************************\n * Intercepted routines \n ****************************************************************************/\n\n/* none for now */\n\n/****************************************************************************\n * Intercepted signals\n ****************************************************************************/\n\n/* We allow the user to kill profiling by intercepting the certain\n   signals.  This can be very useful on long-running or misbehaving\n   applications. */\n\nstatic void \nhpcrun_sighandler(int sig)\n{\n  if (opt_debug >= 1) { MSGx(stderr, \"*** catching signal %d ***\", sig); }\n  \n  signal(sig, SIG_DFL); /* return to default action */\n    \n  switch (sig) {\n  case SIGINT:\n  case SIGABRT: {\n    break;\n  }\n  default: \n    MSGx(stderr, \"warning: Handling unknown signal %d.\", sig);\n    break;\n  }\n  \n  fini_process();\n  fini_library();\n  \n  signal(SIGABRT, SIG_DFL); /* return SIGABRT to default before abort()! */\n  abort();\n}\n\n\n/****************************************************************************/\n/****************************************************************************/\n\n/****************************************************************************\n * Initialize profiling \n ****************************************************************************/\n\nstatic void \ncount_events(uint* sysEvents, uint* papiEvents);\n\nstatic void \ninit_profdesc(hpcrun_profiles_desc_t** profdesc, \n\t      uint numSysEv, uint numPapiEv, \n\t      rtloadmap_t* rtmap,\n\t      hpcrun_profiles_desc_t* sharedprofdesc);\n\nstatic void \ninit_sysprofdesc_buffer(hpcsys_profile_desc_vec_t* profdesc, \n\t\t\tuint numEv, rtloadmap_t* rtmap,\n\t\t\thpcsys_profile_desc_vec_t* sharedprofdesc);\nstatic void \nappend_sysprofdesc_buffer(hpcsys_profile_desc_vec_t* profdesc, \n\t\t\tuint numEv, rtloadmap_t* rtmap,\n\t\t\thpcsys_profile_desc_vec_t* sharedprofdesc);\nstatic void \ninit_papiprofdesc_buffer(hpcpapi_profile_desc_vec_t* profdesc, \n\t\t\t uint numEv, rtloadmap_t* rtmap,\n\t\t\t hpcpapi_profile_desc_vec_t* sharedprofdesc);\nstatic void \nappend_papiprofdesc_buffer(hpcpapi_profile_desc_vec_t* profdesc, \n\t\t\t   uint numEv, rtloadmap_t* rtmap,\n\t\t\t   hpcpapi_profile_desc_vec_t* sharedprofdesc);\n\nstatic void \ninit_profdesc_ofile(hpcrun_profiles_desc_t* profdesc, \n\t\t    int sharedprofdesc);\n\nstatic void\nnotify_ofile(hpcrun_profiles_desc_t* profdesc, \n\t     hpcrun_profiles_desc_t* sharedprofdesc);\n\nstatic void \nadd_sysevent(hpcsys_profile_desc_vec_t* profdescs, \n\t     rtloadmap_t* rtmap, int profidx, \n\t     char* eventnm, uint64_t period);\n\nstatic void \nstart_sysprof(hpcsys_profile_desc_vec_t* profdescs);\n\nstatic void \ninit_papi_for_process();\n\nstatic void \nadd_papievent(hpcpapi_profile_desc_vec_t* profdescs, \n\t      rtloadmap_t* rtmap, int profidx, \n\t      char* eventnm, uint64_t period);\n\nstatic void \nstart_papi_for_thread(hpcpapi_profile_desc_vec_t* profdescs);\n\nstatic void \ninit_sighandlers();\n\n\n/* Stop profiling */\nstatic void \nstop_sysprof(hpcsys_profile_desc_vec_t* profdescs);\n\nstatic void \nstop_papi_for_thread(hpcpapi_profile_desc_vec_t* profdescs);\n\n\n\nvolatile int DEBUGGER_WAIT = 1;\n\n/*\n *  Prepare for profiling this process\n */\nextern void \ninit_process()\n{\n  if (getenv(\"HPCRUN_WAIT\")){\n    while(DEBUGGER_WAIT);\n  }\n\n  if (opt_debug >= 1) { MSG0(stderr, \"*** init_process ***\"); }\n\n  rtloadmap = hpcrun_get_rtloadmap(opt_debug);\n\n  /* Initialize PAPI if necessary */\n  count_events(&numSysEvents, &numPAPIEvents); /* no error checking */\n  if (numPAPIEvents > 0) {\n    init_papi_for_process();\n  }\n\n  hpc_profdesc = init_thread(0 /*is_thread*/);\n}\n\n/*\n * Called after the loading of a module using dlopen() to update the\n * profiling tables\n *\n */\nextern void\nhandle_dlopen()\n{\n  if (hpc_profdesc == NULL) {\n    DIE0(\"dlopen before process initialization!\");\n  }\n\n  /* Stop profiling */\n  stop_papi_for_thread(HPC_GET_PAPIPROFS(hpc_profdesc));\n  stop_sysprof(HPC_GET_SYSPROFS(hpc_profdesc));\n\t\n  /* Clear the rtloadmap */\n  free(rtloadmap->module);\n\n  /* Get the new module(s) from /proc/pid/maps */\n  rtloadmap = hpcrun_get_rtloadmap(opt_debug);\n  \n  /* Determine if profile data needs to be shared across threads */\n  hpcrun_profiles_desc_t* sharedprofdesc = NULL;\n  if (opt_thread == HPCRUN_THREADPROF_ALL)\n    sharedprofdesc = hpc_profdesc;\n  \n  /* For each sys profdescs entry, append sprofil()-specific info */\n  if (HPC_GET_SYSPROFS(hpc_profdesc)) {\n    hpcsys_profile_desc_vec_t* sh = \n      (sharedprofdesc) ? HPC_GET_SYSPROFS(sharedprofdesc) : NULL;\n    append_sysprofdesc_buffer(HPC_GET_SYSPROFS(hpc_profdesc), numSysEvents, \n\t\t\t      rtloadmap, sh);\n  }\n\n  /* For each papi profdescs entry, append sprofil()-specific info */\n  if (HPC_GET_PAPIPROFS(hpc_profdesc)) {\n    hpcpapi_profile_desc_vec_t* sh = \n      (sharedprofdesc) ? HPC_GET_PAPIPROFS(sharedprofdesc) : NULL;\n    append_papiprofdesc_buffer(HPC_GET_PAPIPROFS(hpc_profdesc), numPAPIEvents,\n\t\t\t       rtloadmap, sh);\n  }\n\n  /* Restart profiling */\n  if (HPC_GET_SYSPROFS(hpc_profdesc)) {\n    start_sysprof(HPC_GET_SYSPROFS(hpc_profdesc));\n  }\n  if (HPC_GET_PAPIPROFS(hpc_profdesc)) {\n    start_papi_for_thread(HPC_GET_PAPIPROFS(hpc_profdesc));\n  }\n  if (opt_debug >= 1) { MSG0(stderr, \"*** dlopen handling complete ***\"); }\n}\n\n\n/*\n *  Prepare profiling for this thread of execution.  N.B.: the caller\n *  must keep the returned data structure safe!  (The boolean argument\n *  'is_thread' refers to whether we are in an actual thread, i.e. not\n *  simply a the execution of a process.)\n */\nextern hpcrun_profiles_desc_t* \ninit_thread(int is_thread)\n{\n  hpcrun_profiles_desc_t* profdesc = NULL, *sharedprofdesc = NULL;\n  \n  if (opt_debug >= 1) { MSG0(stderr, \"*** init_thread ***\"); }\n  \n  /* Create profile info from event list and perform error checking. */\n  if (is_thread && opt_thread == HPCRUN_THREADPROF_ALL) {\n    sharedprofdesc = hpc_profdesc; /* share the histogram buffers */\n  }\n  init_profdesc(&profdesc, numSysEvents, numPAPIEvents, rtloadmap, \n\t\tsharedprofdesc);\n  \n#if (OPEN_OUTPUTFILE_AT_BEG)\n  /* Init file info if necessary. */\n  init_profdesc_ofile(profdesc, (sharedprofdesc != NULL));\n  notify_ofile(profdesc, sharedprofdesc);\n#endif\n\n  /* Init signal handlers */\n  init_sighandlers();\n\n  /* Launch profilers */\n  if (HPC_GET_SYSPROFS(profdesc)) {\n    start_sysprof(HPC_GET_SYSPROFS(profdesc));\n  }\n  if (HPC_GET_PAPIPROFS(profdesc)) {\n    if (opt_debug >= 3) {\n      dump_hpcpapi_profile_desc_vec(HPC_GET_PAPIPROFS(profdesc));\n    }\n    start_papi_for_thread(HPC_GET_PAPIPROFS(profdesc));\n  }\n  \n  return profdesc;\n}\n\n\nstatic void\ncount_events(uint* sysEvents, uint* papiEvents)\n{\n  char* tok, *tmp_eventlist;\n\n  /* note: arguments must not be NULL */\n  *sysEvents = 0;\n  *papiEvents = 0;\n  \n  /* note: strtok() will destroy the string so we use strdup */\n  tmp_eventlist = strdup(opt_eventlist);\n  for (tok = strtok(tmp_eventlist, \";\"); (tok != NULL);\n       tok = strtok((char*)NULL, \";\")) {\n    /* There may be a ':' within 'tok'... */\n    if ( (strncmp(tok, HPCRUN_EVENT_WALLCLK_STR, \n\t\t  HPCRUN_EVENT_WALLCLK_STRLN) == 0) ||\n\t (strncmp(tok, HPCRUN_EVENT_FWALLCLK_STR, \n\t\t  HPCRUN_EVENT_FWALLCLK_STRLN) == 0) ) {\n      (*sysEvents)++;\n    }\n    else {\n      (*papiEvents)++;\n    }\n  }\n  free(tmp_eventlist);\n}\n\n\nstatic void \ninit_profdesc(hpcrun_profiles_desc_t** profdesc, \n\t      uint numSysEv, uint numPapiEv, rtloadmap_t* rtmap,\n\t      hpcrun_profiles_desc_t* sharedprofdesc)\n{\n  /* PAPI should already be initialized if necessary */\n  \n  int xprofidx = -1, yprofidx = -1; /* nth prof event for x/y */\n  const uint eventbufSZ = 128; /* really the last index, not the size */\n  char eventbuf[eventbufSZ+1];\n  char* tok, *tmp_eventlist;\n  int rval, i;\n      \n  if (opt_debug >= 1) { \n    MSG0(stderr, \"Initializing profile descriptors\");\n    MSGx(stderr, \"  Found %d sys events and %d PAPI events\", \n\t numSysEv, numPapiEv);\n  }\n  \n  /* 1a. Ensure we do not profile both system and PAPI events. */\n  if (numSysEv > 0 && numPapiEv > 0) {\n    DIE0(\"Cannot profile both WALLCLK and PAPI events at the same time. (Both use SIGPROF.)\");\n  }\n  \n  /* 1b. Ensure no more than one wall clock event is profiled.  (Only\n     one appropriate itimer (ITIMER_PROF) is provided per process.) */ \n  if (numSysEv > 1) {\n    numSysEv = 1;\n  }\n\n  /* 1c. Ensure that we do not use system profile with threads */ \n  if (numSysEv > 0 && opt_thread) {\n    DIE0(\"Cannot profile WALLCLK on multithreaded process. (sprofil() limitation.)\");\n  }\n  \n  /* 1d. Ensure we have enough hardware counters if using PAPI.  Note:\n     PAPI cannot profile when using multiplexing. */\n  {\n    int numHwCntrs = PAPI_num_hwctrs();\n    if (numPapiEv > numHwCntrs) {\n      MSGx(stderr, \"warning: Too many events (%d) for hardware counters (%d).  Only using first %d events.\", numPapiEv, numHwCntrs, numHwCntrs);\n      numPapiEv = numHwCntrs;\n    }\n  }\n\n  \n  /* 2a. Initialize profdesc */\n  *profdesc = (hpcrun_profiles_desc_t*)malloc(sizeof(hpcrun_profiles_desc_t));\n  if (!(*profdesc)) { DIE0(\"error: malloc() failed!\"); }\n  memset(*profdesc, 0x00, sizeof(hpcrun_profiles_desc_t));\n  \n  /* 2b. Initialize system profdescs */\n  if (numSysEv > 0) {\n    uint vecsz, sz = sizeof(hpcsys_profile_desc_vec_t);\n\n    HPC_GETL_SYSPROFS(*profdesc) = (hpcsys_profile_desc_vec_t*)malloc(sz);\n    if (!HPC_GET_SYSPROFS(*profdesc)) { \n      DIE0(\"error: malloc() failed!\"); \n    }\n\n    vecsz = sizeof(hpcsys_profile_desc_t) * numSysEv;    \n    HPC_GET_SYSPROFS(*profdesc)->size = numSysEv;    \n    \n    HPC_GET_SYSPROFS(*profdesc)->vec = (hpcsys_profile_desc_t*)malloc(vecsz);\n    if (!HPC_GET_SYSPROFS(*profdesc)->vec) { \n      DIE0(\"error: malloc() failed!\"); \n    }\n    memset(HPC_GET_SYSPROFS(*profdesc)->vec, 0x00, vecsz);\n  }\n  \n  /* 2c. Initialize papi profdescs */\n  if (numPapiEv > 0) {\n    uint vecsz, sz = sizeof(hpcpapi_profile_desc_vec_t);\n    \n    HPC_GETL_PAPIPROFS(*profdesc) = (hpcpapi_profile_desc_vec_t*)malloc(sz);\n    if (!HPC_GET_PAPIPROFS(*profdesc)) { \n      DIE0(\"error: malloc() failed!\"); \n    }\n\n    vecsz = sizeof(hpcpapi_profile_desc_t) * numPapiEv;\n    HPC_GET_PAPIPROFS(*profdesc)->size = numPapiEv;    \n    \n    HPC_GET_PAPIPROFS(*profdesc)->vec = (hpcpapi_profile_desc_t*)malloc(vecsz);\n    if (!HPC_GET_PAPIPROFS(*profdesc)->vec) { \n      DIE0(\"error: malloc() failed!\"); \n    }\n    memset(HPC_GET_PAPIPROFS(*profdesc)->vec, 0x00, vecsz);\n\n    HPC_GET_PAPIPROFS(*profdesc)->eset = PAPI_NULL;     \n    rval = PAPI_create_eventset(&HPC_GET_PAPIPROFS(*profdesc)->eset);\n    if (rval != PAPI_OK) {\n      DIEx(\"error: PAPI_create_eventset (%d): %s.\", rval, PAPI_strerror(rval));\n    }\n  }\n\n  \n  /* 3. For each event:period pair, init corresponding profdescs\n     entry.  Classification of events *must* be the same as count_events(). */\n  tmp_eventlist = strdup(opt_eventlist);\n  tok = strtok(tmp_eventlist, \";\");\n  for (i = 0; (tok != NULL); i++, tok = strtok((char*)NULL, \";\")) {\n    uint64_t period = 0;\n    char* dlm;\n    uint evty = 0; /* 1 is system; 2 is papi */\n    \n    // Extract event field from token. \n    //   'dlm' points to the optional period delimiter (a colon), if\n    //   available; search from the end of the string in case the event\n    //   name itself has colon.\n    dlm = strrchr(tok, ':');\n    if (dlm) {\n      if (isdigit(dlm[1])) { // assume this is the period\n\tuint len = MIN(dlm - tok, eventbufSZ);\n\tstrncpy(eventbuf, tok, len);\n\teventbuf[len] = '\\0';\n      }\n      else {\n\tdlm = NULL; // it's not the period; fall through\n      }\n    }\n    if (!dlm) { // the fall through, not the 'else'!\n      strncpy(eventbuf, tok, eventbufSZ);\n      eventbuf[eventbufSZ] = '\\0';\n    }\n    \n    /* Determine the event type */\n    if ( (strcmp(eventbuf, HPCRUN_EVENT_WALLCLK_STR) == 0) ||\n\t (strcmp(eventbuf, HPCRUN_EVENT_FWALLCLK_STR) == 0) ) {\n      evty = 1;\n    } \n    else {\n      evty = 2;\n    }\n    \n    // Extract period field from token\n    if (dlm) {\n      period = strtol(dlm+1, (char **)NULL, 10);\n    }\n    else if (evty == 1) {\n      period = 0;\n    }\n    else if (evty == 2) {\n      period = default_period;\n    }\n    \n    if (opt_debug >= 1) { \n      MSGx(stderr, \"  Event: '%s' (%d) '%\"PRIu64\"'\", eventbuf, evty, period);\n    }\n    \n    /* Add the event to the appropriate place */\n    if (evty == 1) {\n      xprofidx++;\n      add_sysevent(HPC_GET_SYSPROFS(*profdesc), rtmap, xprofidx, \n\t\t   eventbuf, period);\n    } \n    else if (evty == 2) {\n      yprofidx++;\n      add_papievent(HPC_GET_PAPIPROFS(*profdesc), rtmap, yprofidx, \n\t\t    eventbuf, period);\n    } \n    else {\n      DIE0(\"error: internal programming error - invalid event.\");\n    }\n  }\n  free(tmp_eventlist);\n\n  /* N.B.: at this point x->sprofs an1d (*y)->sprofs remains uninitialized */\n\n  /* 4a. For each sys profdescs entry, init sprofil()-specific info */\n  if (HPC_GET_SYSPROFS(*profdesc)) {\n    hpcsys_profile_desc_vec_t* sh = \n      (sharedprofdesc) ? HPC_GET_SYSPROFS(sharedprofdesc) : NULL;\n    init_sysprofdesc_buffer(HPC_GET_SYSPROFS(*profdesc), numSysEv, rtmap, sh);\n  }\n\n  /* 4b. For each papi profdescs entry, init sprofil()-specific info */\n  if (HPC_GET_PAPIPROFS(*profdesc)) {\n    hpcpapi_profile_desc_vec_t* sh = \n      (sharedprofdesc) ? HPC_GET_PAPIPROFS(sharedprofdesc) : NULL;\n    init_papiprofdesc_buffer(HPC_GET_PAPIPROFS(*profdesc), numPapiEv, rtmap,\n\t\t\t     sh);\n  }\n}\n\n\nstatic void\ninit_sysprofdesc_buffer(hpcsys_profile_desc_vec_t* profdesc, \n\t\t\tuint numEv, rtloadmap_t* rtmap,\n\t\t\thpcsys_profile_desc_vec_t* sharedprofdesc)\n{\n  int i;\n\n  for (i = 0; i < numEv; ++i) {\n    int mapi;\n    uint sprofbufsz = sizeof(struct prof) * rtmap->count;\n    hpcsys_profile_desc_t* prof = &profdesc->vec[i];\n    \n    if (sharedprofdesc) {\n      prof->sprofs = sharedprofdesc->vec[i].sprofs;\n      prof->numsprofs = sharedprofdesc->vec[i].numsprofs;\n    }\n    else {\n      prof->sprofs = (struct prof*)malloc(sprofbufsz);\n      if (!prof->sprofs) { DIE0(\"error: malloc() failed!\"); }\n      memset(prof->sprofs, 0x00, sprofbufsz);\n      prof->numsprofs = rtmap->count;\n    }\n      \n    if (opt_debug >= 4) { \n      MSGx(stderr, \"profile buffer details for %s:\", prof->ename); \n      MSGx(stderr, \"  count = %d, sp=%\"PRIu64\" ef=%d\",\n\t   prof->numsprofs, prof->period, prof->flags);\n    }\n    \n    if (sharedprofdesc) {\n      /* print msg */\n    }\n    else {\n      for (mapi = 0; mapi < rtmap->count; ++mapi) {\n\tuint bufsz;\n\tuint ncntr;\n\t\n\t/* eliminate use of ceil() (link with libm) by adding 1 */\n\tncntr = (rtmap->module[mapi].length / prof->bytesPerCodeBlk) + 1;\n\tbufsz = ncntr * prof->bytesPerCntr;\n\t\n\t/* buffer base and size */\n\tprof->sprofs[mapi].pr_base = (void*)malloc(bufsz);\n\tprof->sprofs[mapi].pr_size = bufsz;\n\tif (!prof->sprofs[mapi].pr_base) { \n\t  DIE0(\"error: malloc() failed!\"); \n\t}\n\tmemset(prof->sprofs[mapi].pr_base, 0x00, bufsz);\n\t\n\t/* pc offset and scaling factor */\n\tprof->sprofs[mapi].pr_off = rtmap->module[mapi].offset;\n\tprof->sprofs[mapi].pr_scale = prof->scale;      \n\t\n\tif (opt_debug >= 4) {\n\t  /* 'pr_size'/'pr_off' are of type 'size_t' which is of pointer size */\n\t  MSGx(stderr, \"\\tprofile[%d] base = %p size = %#\"PRIxPTR\" off = %#\"PRIxPTR\" scale = %#lx\",\n\t      mapi, prof->sprofs[mapi].pr_base, prof->sprofs[mapi].pr_size, \n\t      prof->sprofs[mapi].pr_off, prof->sprofs[mapi].pr_scale);\n\t}\n      }\n    }\n  }\n}\n\nstatic void\nappend_sysprofdesc_buffer(hpcsys_profile_desc_vec_t* profdesc, \n\t\t\t  uint numEv, rtloadmap_t* rtmap,\n\t\t\t  hpcsys_profile_desc_vec_t* sharedprofdesc)\n{\n  int i;\n  \n  for (i = 0; i < numEv; ++i) {\n    int mapi;\n    uint sprofbufsz = sizeof(struct prof) * rtmap->count;\n    hpcsys_profile_desc_t* prof = &profdesc->vec[i];\n    uint oldcount = prof->numsprofs;\n    \n    if (!sharedprofdesc) {\n      prof->sprofs = (struct prof*)realloc(prof->sprofs, sprofbufsz);\n      if (!prof->sprofs) { DIE0(\"error: realloc() failed!\"); }\n      memset(&(prof->sprofs[oldcount]), 0x00, sprofbufsz-(oldcount*sizeof(PAPI_sprofil_t)));\n      prof->numsprofs = rtmap->count;\n    }\n    \n    if (opt_debug >= 4) { \n      MSGx(stderr, \"profile buffer details for %s:\", prof->ename); \n      MSGx(stderr, \"  count = %d, sp=%\"PRIu64\" ef=%d\",\n\t   prof->numsprofs, prof->period, prof->flags);\n    }\n    \n    if (sharedprofdesc) {\n      /* print msg */\n    }\n    else {\n      for (mapi = oldcount; mapi < rtmap->count; ++mapi) {\n\tuint bufsz;\n\tuint ncntr;\n\t\n\t/* eliminate use of ceil() (link with libm) by adding 1 */\n\tncntr = (rtmap->module[mapi].length / prof->bytesPerCodeBlk) + 1;\n\tbufsz = ncntr * prof->bytesPerCntr;\n\t\n\t/* buffer base and size */\n\tprof->sprofs[mapi].pr_base = (void*)malloc(bufsz);\n\tprof->sprofs[mapi].pr_size = bufsz;\n\tif (!prof->sprofs[mapi].pr_base) { \n\t  DIE0(\"error: malloc() failed!\"); \n\t}\n\tmemset(prof->sprofs[mapi].pr_base, 0x00, bufsz);\n\t\n\t/* pc offset and scaling factor */\n\tprof->sprofs[mapi].pr_off = rtmap->module[mapi].offset;\n\tprof->sprofs[mapi].pr_scale = prof->scale;      \n\t\n\tif (opt_debug >= 4) {\n\t  /* 'pr_size'/'pr_off' are of type 'size_t' which is of pointer size */\n\t  MSGx(stderr, \"\\tprofile[%d] base = %p size = %#\"PRIxPTR\" off = %#\"PRIxPTR\" scale = %#lx\",\n\t       mapi, prof->sprofs[mapi].pr_base, prof->sprofs[mapi].pr_size, \n\t       prof->sprofs[mapi].pr_off, prof->sprofs[mapi].pr_scale);\n\t}\n      }\n    }\n  }\n}\n\nstatic void\ninit_papiprofdesc_buffer(hpcpapi_profile_desc_vec_t* profdesc, \n\t\t\t uint numEv, rtloadmap_t* rtmap,\n\t\t\t hpcpapi_profile_desc_vec_t* sharedprofdesc)\n{\n  int i;\n\n  for (i = 0; i < numEv; ++i) {\n    int mapi;\n    uint sprofbufsz = sizeof(PAPI_sprofil_t) * rtmap->count;\n    hpcpapi_profile_desc_t* prof = &profdesc->vec[i];\n    \n    if (sharedprofdesc) {\n      prof->sprofs = sharedprofdesc->vec[i].sprofs;\n      prof->numsprofs = sharedprofdesc->vec[i].numsprofs;      \n    }\n    else {\n      prof->sprofs = (PAPI_sprofil_t*)malloc(sprofbufsz);\n      if (!prof->sprofs) { DIE0(\"error: malloc() failed!\"); }\n      memset(prof->sprofs, 0x00, sprofbufsz);\n      prof->numsprofs = rtmap->count;\n      \n    }\n    \n    if (opt_debug >= 4) { \n      MSGx(stderr, \"profile buffer details for %s:\", prof->einfo.symbol); \n      MSGx(stderr, \"  count = %d, es=%#x ec=%#x sp=%\"PRIu64\" ef=%d\",\n\t   prof->numsprofs, profdesc->eset, \n\t   prof->ecode, prof->period, prof->flags);\n    }\n    \n    if (sharedprofdesc) {\n      /* print msg */\n    }\n    else {\n      for (mapi = 0; mapi < rtmap->count; ++mapi) {\n\tuint bufsz;\n\tuint ncntr;\n\t\n\t/* eliminate use of ceil() (link with libm) by adding 1 */\n\tncntr = (rtmap->module[mapi].length / prof->bytesPerCodeBlk) + 1;\n\tbufsz = ncntr * prof->bytesPerCntr;\n\t\n\t/* buffer base and size */\n\tprof->sprofs[mapi].pr_base = (void*)malloc(bufsz);\n\tprof->sprofs[mapi].pr_size = bufsz;\n\tif (!prof->sprofs[mapi].pr_base) {\n\t  DIE0(\"error: malloc() failed!\");\n\t}\n\tmemset(prof->sprofs[mapi].pr_base, 0x00, bufsz);\n\t\n\t/* pc offset and scaling factor (note: 'caddr_t' is a 'void*') */\n\tprof->sprofs[mapi].pr_off = \n\t  (caddr_t)(uintptr_t)rtmap->module[mapi].offset;\n\tprof->sprofs[mapi].pr_scale = prof->scale;\n\t\n\tif (opt_debug >= 4) {\n\t  MSGx(stderr, \n\t       \"\\tprofile[%d] base = %p size = %#x off = %p scale = %#x\",\n\t       mapi, prof->sprofs[mapi].pr_base, prof->sprofs[mapi].pr_size, \n\t       prof->sprofs[mapi].pr_off, prof->sprofs[mapi].pr_scale);\n\t}\n      }\n    }\n  }  \n}\n\nstatic void\nappend_papiprofdesc_buffer(hpcpapi_profile_desc_vec_t* profdesc, \n\t\t\t   uint numEv, rtloadmap_t* rtmap,\n\t\t\t   hpcpapi_profile_desc_vec_t* sharedprofdesc)\n{\n  int i;\n\n  for (i = 0; i < numEv; ++i) {\n    int mapi;\n    uint sprofbufsz = sizeof(PAPI_sprofil_t) * rtmap->count;\n    hpcpapi_profile_desc_t* prof = &profdesc->vec[i];\n    uint oldcount = prof->numsprofs;\n\t\t\n    if (!sharedprofdesc) {\n      prof->sprofs = (PAPI_sprofil_t*)realloc(prof->sprofs, sprofbufsz);\n      if (!prof->sprofs) { DIE0(\"error: realloc() failed!\"); }\n      memset(&(prof->sprofs[oldcount]), 0x00, sprofbufsz-(oldcount*sizeof(PAPI_sprofil_t)));\n      prof->numsprofs = rtmap->count;\n    }\n    \n    if (opt_debug >= 4) { \n      MSGx(stderr, \"profile buffer details for %s:\", prof->einfo.symbol); \n      MSGx(stderr, \"  count = %d, es=%#x ec=%#x sp=%\"PRIu64\" ef=%d\",\n\t   prof->numsprofs, profdesc->eset, \n\t   prof->ecode, prof->period, prof->flags);\n    }\n    \n    if (sharedprofdesc) {\n      /* print msg */\n    }\n    else {\n      for (mapi = oldcount; mapi < rtmap->count; ++mapi) {\n\tuint bufsz;\n\tuint ncntr;\n\t\n\t/* eliminate use of ceil() (link with libm) by adding 1 */\n\tncntr = (rtmap->module[mapi].length / prof->bytesPerCodeBlk) + 1;\n\tbufsz = ncntr * prof->bytesPerCntr;\n\t\n\t/* buffer base and size */\n\tprof->sprofs[mapi].pr_base = (void*)malloc(bufsz);\n\tprof->sprofs[mapi].pr_size = bufsz;\n\tif (!prof->sprofs[mapi].pr_base) {\n\t  DIE0(\"error: malloc() failed!\");\n\t}\n\tmemset(prof->sprofs[mapi].pr_base, 0x00, bufsz);\n\t\n\t/* pc offset and scaling factor (note: 'caddr_t' is a 'void*') */\n\tprof->sprofs[mapi].pr_off = \n\t  (caddr_t)(uintptr_t)rtmap->module[mapi].offset;\n\tprof->sprofs[mapi].pr_scale = prof->scale;\n\t\n\tif (opt_debug >= 4) {\n\t  MSGx(stderr, \n\t       \"\\tprofile[%d] base = %p size = %#x off = %p scale = %#x\",\n\t       mapi, prof->sprofs[mapi].pr_base, prof->sprofs[mapi].pr_size, \n\t       prof->sprofs[mapi].pr_off, prof->sprofs[mapi].pr_scale);\n\t}\n      }\n    }\n  }\n  \n  //dump_hpcpapi_profile_desc_vec(HPC_GET_PAPIPROFS(profdesc));\n}\n\n\n// This function checks the existence of path,\n// if it doesn't exist, 0 is returned, else, the\n// next available generation is returned\nstatic int get_next_gen(const char *path) {\n  struct stat buf;\n  char tmp_path[PATH_MAX];\n  strcpy(tmp_path, path);\n  int rc = stat(tmp_path, &buf);\n  if ((rc<0) && (errno==ENOENT)) return 0;\n  int inst = 0;\n  do {\n    inst++;\n    strcpy(tmp_path, path);\n    sprintf(tmp_path, \"%s.%d\", path, inst);\n    rc = stat(tmp_path, &buf);\n  } while (!((rc<0) && (errno==ENOENT))); \n  return inst;\n}\n\n\nstatic void \ninit_profdesc_ofile(hpcrun_profiles_desc_t* profdesc, int sharedprofdesc)\n{\n  /* Perform a filesystem test to make sure we will be able to write\n     output data. */\n\n  static uint outfilenmLen = PATH_MAX; /* never redefined */\n  static uint hostnmLen = 128;         /* never redefined */\n  char outfilenm[outfilenmLen];\n  char hostnm[hostnmLen];\n  const char* cmd = hpcrun_cmd; \n  char* slash = NULL;\n  //uint numEvents = 0;\n  //char* event = NULL;\n  FILE* fs;\n  \n  if (sharedprofdesc) {\n    profdesc->ofile.fs = NULL;\n    profdesc->ofile.fname = NULL;\n    return;\n  }\n\n\n  /* Get components for constructing file name:\n     <outpath>/<command>.hpcrun.<hostname>.<pid>.<tid> */\n  \n  /* <command> */\n  slash = rindex(cmd, '/');\n  if (slash) {\n    cmd = slash + 1; /* basename of cmd */\n  }\n  \n#if 0\n  /* <event1> */\n  if (HPC_GET_SYSPROFS(profdesc)) {\n    numEvents += HPC_GET_SYSPROFS(profdesc)->size;\n    event = HPC_GET_SYSPROFS(profdesc)->vec[0].ename;\n  }\n  if (!event && HPC_GET_PAPIPROFS(profdesc)) {\n    numEvents += HPC_GET_PAPIPROFS(profdesc)->size;\n    event = HPC_GET_PAPIPROFS(profdesc)->vec[0].einfo.symbol; /* first name */\n  }\n#endif\n  \n  /* <hostname> */\n  gethostname(hostnm, hostnmLen);\n  hostnm[hostnmLen-1] = '\\0'; /* ensure NULL termination */\n\n  /* Create file name */\n  snprintf(outfilenm, outfilenmLen, \"%s/%s%s.\"HPCRUN_NAME\".%s.%d.0x%lx\",\n\t   opt_outpath, opt_prefix, cmd, hostnm, getpid(), hpcrun_gettid());\n\n  /* Use a generation suffix if file exists */\n  if (strlen(opt_file) != 0) {\n    /* If user has supplied an output filename use that overrides the\n       setting above */\n    int inst = get_next_gen(opt_file);\n    if (inst) {\n      snprintf(outfilenm, outfilenmLen, \"%s.%d\", opt_file, inst);\n    } \n    else {\n      strncpy(outfilenm, opt_file, outfilenmLen);\n    }\n  } \n  else {\n    int inst = get_next_gen(outfilenm);\n    if (inst) {\n      snprintf(opt_file, outfilenmLen, \"%s.%d\", outfilenm, inst);\n      strncpy(outfilenm, opt_file, outfilenmLen);\n    }\n  }\n  \n\n  profdesc->ofile.fs = NULL;\n  profdesc->ofile.fname = (char*)malloc(strlen(outfilenm)+1);\n  if (!profdesc->ofile.fname) { DIE0(\"error: malloc() failed!\"); }\n  strcpy(profdesc->ofile.fname, outfilenm);\n\n  /* Test whether we can write to this filesystem */\n  do {\n    if (opt_debug >= 1 && (errno == ENFILE || errno == EMFILE)) {\n      MSG0(stderr, \"* waiting for file descriptors to test filesystem!\");\n    }\n    errno = 0;\n    fs = fopen(outfilenm, \"w\");\n  }\n  while (errno == ENFILE || errno == EMFILE /* too many open files */);\n\n  if (fs == NULL) {\n    DIEx(\"error: Filesystem test failed (cannot open file '%s'): %s\", \n\t outfilenm, strerror(errno));\n  }\n  fclose(fs);\n}\n\n\nstatic void\nnotify_ofile(hpcrun_profiles_desc_t* profdesc, \n\t     hpcrun_profiles_desc_t* sharedprofdesc)\n{\n  /* Let user know about output file */\n  const char* out_fname = profdesc->ofile.fname;\n  const char* out_sfx = \"\";\n  if (!out_fname) {\n    out_fname = sharedprofdesc->ofile.fname;\n    out_sfx = \" (SHARED)\";\n  }\n  MSGx(stderr, \"Using output file %s%s\\n\", out_fname, out_sfx);\n}\n\n\n\nstatic void\nadd_sysevent(hpcsys_profile_desc_vec_t* profdescs, rtloadmap_t* rtmap,\n\t     int profidx, char* eventnm, uint64_t period)\n{\n  /* Cf. the notes below on PAPI_sprofil().  As is presented below,\n\n            scale = ( scaleval / 65536 ) = ( bh / b )\n\n     In contrast to the below bh is not fixed at 2 but actually\n     represents the size of histogram buckets (which leads to lost\n     profiling resolution). \n\n     Some sample scale values, when bh is 4.\n\n          scaleval            bytes_per_code_block (b)\n          ----------------------------------------\n          0x10000 (or 0xffff) 4  (size of many RISC instructions)\n\t  0x8000              8\n\t  0x4000              16 (size of Itanium instruction packet)\n  */\n  \n  hpcsys_profile_desc_t* prof = NULL;\n  \n  if (profidx >= profdescs->size) {\n    /* Assumes that the only system event is wallclock time */\n    DIE0(\"error: Only one wallclock event may be profiled at a time.\");\n  }\n\n  prof = &(profdescs->vec[profidx]);\n\n  /* Find event */\n  if (strcmp(eventnm, HPCRUN_EVENT_WALLCLK_STR) == 0) {\n    prof->ename = HPCRUN_EVENT_WALLCLK_STR;\n    prof->flags = 0;\n    prof->period = 1; /* 1 millisecond (not 10!); discovered empirically */\n  }\n  else if (strcmp(eventnm, HPCRUN_EVENT_FWALLCLK_STR) == 0) {\n    prof->ename = HPCRUN_EVENT_FWALLCLK_STR;\n    prof->flags = PROF_FAST;\n    prof->period = 1; /* should be 1 ms; cf. /usr/include/sys/profile.h */\n  }\n  else {\n    DIEx(\"error: Invalid event: '%s'.\", eventnm);\n  }\n\n  /* Profiling period (already set) */\n  if (period != 0) {\n    DIEx(\"error: Invalid period %\"PRIu64\" for event '%s'.\", \n\t period, eventnm);\n  }\n    \n  /* Profiling flags */\n  prof->flags |= PROF_UINT; /* hpc_hist_bucket */\n  \n  prof->bytesPerCntr = sizeof(hpc_hist_bucket); /* 4 */\n  prof->bytesPerCodeBlk = 4;\n  prof->scale = 0x10000;\n  \n  if ((prof->scale * prof->bytesPerCodeBlk) != (65536 * prof->bytesPerCntr)) {\n    DIE0(\"error: internal programming error - invalid profiling scale.\");\n  }\n}\n\n\nstatic void \nstart_sysprof(hpcsys_profile_desc_vec_t* profdescs)\n{\n  int ecode;\n\n  /* Note: should only be one profdesc! */\n  hpcsys_profile_desc_t* prof = &profdescs->vec[0];\n\n  if (opt_debug >= 1) { MSGx(stderr, \"Calling sprofil(): %s\", prof->ename); }\n  \n  ecode = sprofil(prof->sprofs, prof->numsprofs, NULL, prof->flags);\n  if (ecode != 0) {\n    DIEx(\"error: sprofil() error. %s.\", strerror(errno));\n  }\n}\n\n\nstatic void \ninit_papi_for_process()\n{  \n  int rval;\n  \n  /* Initialize papi: hpc_init_papi_force() *must* be used for forks();\n     it works for non-forks also. */\n  if (hpc_init_papi_force(PAPI_library_init) != 0) { \n    exit(1); /* error already printed */\n  }\n  \n  /* set PAPI debug */\n  if (opt_debug >= 1) {\n    MSG0(stderr, \"setting PAPI debug!\");\n    rval = PAPI_set_debug(PAPI_VERB_ECONT);\n    if (rval != PAPI_OK) {\n      DIEx(\"error: PAPI_set_debug (%d): %s.\", rval, PAPI_strerror(rval));\n    }\n  }\n  \n  /* PAPI_set_domain(PAPI_DOM_ALL); */\n  if (domain == 0) {\n    domain = PAPI_DOM_USER;\n  }\n  if (opt_debug >= 1) {\n    MSGx(stderr, \"Setting PAPI domain to: %d\", domain);\n  }\n  rval = PAPI_set_domain(domain);\n  if (rval != PAPI_OK) {\n    DIEx(\"error: PAPI_set_domain (%d): %s.\", rval, PAPI_strerror(rval));\n  }\n\n\n#ifndef HAVE_MONITOR  \n  init_papi_for_process_SPECIALIZED();\n#endif\n}\n\n\nstatic void \nadd_papievent(hpcpapi_profile_desc_vec_t* profdescs, rtloadmap_t* rtmap,\n\t      int profidx, char* eventnm, uint64_t period)\n{ \n  /* Note on hpcpapi_profile_desc_t and PAPI_sprofil() scaling factor\n     cf. man profil() or sprofil()\n     \n     The scale factor describes how the histogram buffer and each\n     histogram counter correlates with the region to be profiled.  \n     \n     The region to be profiled can be thought of as being divided into\n     n equally sized blocks, each b bytes long.  For historical\n     reasons, we introduce a term, bh, representing the size in bytes\n     of each histogram counter.  The value of the scale factor is the\n     reciprocal of (b / bh):\n           scale = reciprocal( b / bh )\n     Note that now bh is *fixed* at 2.\n\n     Since this scheme was devised when a memory word was 16-bits or\n     2-bytes, the scale factor was represented as a 16-bit fixed-point\n     fraction with the decimal point implied on the *left*.  Under\n     this representation, the maximum value of the scale was 0xffff\n     (essentially 1, 0x10000); this is *no longer* the case.\n\n     Alternatively, and perhaps more conveniently, the scale can be\n     thought of as a ratio between an unsigned integer scaleval and\n     65536:\n          scale = ( scaleval / 65536 ) = ( bh / b )\n\n     Some sample scale values, given that bh is fixed at 2.\n\n          scaleval            bytes_per_code_block (b)\n          ----------------------------------------\n          0x20000             1  (x86 insns may begin at any byte)\n          0x10000 (or 0xffff) 2\n\t  0x8000              4  (size of many RISC instructions)\n\t  0x4000              8\n\t  0x2000              16 (size of Itanium instruction packet)\n\n      \n     Using this second notation, we can show the relation between the\n     histogram counters and the region to profile.  The histogram\n     counter that will be incremented for an interrupt at program\n     counter pc is:\n          histogram[ ((pc - load_offset)/bh) * (scaleval/65536) ]\n\n     The number of counters in the histogram should equal the number\n     of blocks in the region to be profiled.  */\n\n  int rval;\n  hpcpapi_profile_desc_t* prof = NULL;\n  \n  if (!profdescs) {\n    DIE0(\"error: internal programming error.\");\n  }\n\n  if (profidx >= profdescs->size) {\n    MSGx(stderr, \"warning: Ignoring event '%s:%\"PRIu64\"'.\", eventnm, period);\n    return;\n  }\n    \n  prof = &(profdescs->vec[profidx]);\n  \n  /* Find event info, ensuring it is available.  Note: it is\n     necessary to do a query_event *and* get_event_info.  Sometimes\n     the latter will return info on an event that does not exist. */\n  rval = PAPI_event_name_to_code(eventnm, &prof->ecode);\n  if (rval != PAPI_OK) {\n    DIEx(\"error: Event '%s' is not recognized.\\n\"\n\t \"\\tCheck the list of supported events with `\"HPCRUN_NAME\" -L'.\",\n\t eventnm);\n  }\n  rval = PAPI_query_event(prof->ecode);\n  if (rval != PAPI_OK) {\n    DIEx(\"error: Event '%s' is not supported on this platform.\\n\"\n\t \"\\tCheck the list of supported events with `\"HPCRUN_NAME\" -L'.\",\n\t eventnm);\n  }\n  rval = PAPI_get_event_info(prof->ecode, &prof->einfo);\n  if (rval != PAPI_OK) {\n    DIEx(\"error: PAPI_get_event_info (%d): %s.\", rval, PAPI_strerror(rval));\n  }\n  \n  /* NOTE: Although clumsy, this test has official sanction. */\n  if ((prof->ecode & PAPI_PRESET_MASK) && (prof->einfo.count > 1) && \n      strcmp(prof->einfo.derived, \"DERIVED_CMPD\") != 0) {\n    DIEx(\"error: '%s' is a PAPI derived event.\\n\"\n\t \"\\tSampling of derived events is not supported by PAPI.\\n\" \n\t \"\\tUse `\"HPCRUN_NAME\" -L' to find the component native events of '%s' that you can monitor separately.\", eventnm, eventnm);\n  }\n  \n  rval = PAPI_add_event(profdescs->eset, prof->ecode);\n  if (rval != PAPI_OK) {\n    DIEx(\"error: (%d) Unable to add event '%s' to event set.\\n\"\n\t \"\\tPAPI_add_event %s.\", rval, eventnm, PAPI_strerror(rval));\n  }\n  \n  /* Profiling period */\n  if (period == 0) {\n    DIEx(\"error: Invalid period %\"PRIu64\" for event '%s'.\", \n\t period, eventnm);\n  }  \n  prof->period = period;\n    \n  /* Profiling flags */\n  prof->flags = opt_flagscode;\n  prof->flags |= PAPI_PROFIL_BUCKET_32; /* hpc_hist_bucket */\n    \n  prof->bytesPerCntr = sizeof(hpc_hist_bucket); /* 4 */\n  prof->bytesPerCodeBlk = 4;\n  prof->scale = 0x8000;\n\n  if ( (prof->scale * prof->bytesPerCodeBlk) != (65536 * 2) ) {\n    DIE0(\"error: internal programming error - invalid profiling scale.\");\n  }\n}\n\n\nstatic void \nstart_papi_for_thread(hpcpapi_profile_desc_vec_t* profdescs)\n{\n  int rval;\n  int i;\n\n  if (!profdescs) { return; }\n  \n  /* Note: PAPI_sprofil() can profile only one event in an event set,\n     though this function may be called on other events in the *same*\n     event set to profile multiple events simultaneously.  The event\n     set must be shared since PAPI will run only one event set at a\n     time (PAPI_start()).  */\n\n  /* 1. Prepare PAPI subsystem for profiling */  \n  for (i = 0; i < profdescs->size; ++i) {\n    hpcpapi_profile_desc_t* prof = &profdescs->vec[i];\n\n    if (opt_debug >= 1) { \n      MSGx(stderr, \"Calling PAPI_sprofil(): %s\", prof->einfo.symbol);\n    }\n    \n    rval = PAPI_sprofil(prof->sprofs, prof->numsprofs, profdescs->eset, \n\t\t\tprof->ecode, prof->period, prof->flags);\n    if (rval != PAPI_OK) {\n      DIEx(\"error: PAPI_sprofil (%d): %s.\", rval, PAPI_strerror(rval));\n    }\n  }\n\n  /* 2. Launch PAPI */\n  rval = PAPI_start(profdescs->eset);\n  if (rval != PAPI_OK) {\n    DIEx(\"error: PAPI_start (%d): %s.\", rval, PAPI_strerror(rval));\n  }\n}\n\n\nstatic void init_sighandler(int sig);\n\nstatic void \ninit_sighandlers()\n{\n  init_sighandler(SIGINT);   /* Ctrl-C */\n  init_sighandler(SIGABRT);  /* abort() */\n}\n\n\nstatic void \ninit_sighandler(int sig)\n{\n  if (signal(sig, SIG_IGN) != SIG_IGN) {\n    signal(sig, hpcrun_sighandler);\n  } \n  else {\n    MSGx(stderr, \"warning: Signal %d already has a handler.\", sig);\n  }\n}\n\n\n/****************************************************************************\n * Finalize profiling\n ****************************************************************************/\n\nstatic void write_all_profiles(hpcrun_profiles_desc_t* profdesc, \n\t\t\t       rtloadmap_t* rtmap);\n\nstatic void fini_papi_for_thread(hpcpapi_profile_desc_vec_t* profdescs);\nstatic void fini_papi_for_process();\n\nstatic void fini_profdesc(hpcrun_profiles_desc_t** profdesc, \n\t\t\t  int sharedprofdesc);\n\n\n/*\n *  Finalize profiling for this process.  Since this routine can be\n *  called more than once per process, ensure that it is idempotent.\n */\nextern void \nfini_process()\n{\n  static int is_finalized = 0;\n\n  if (is_finalized) {\n    if (opt_debug >= 1) { MSG0(stderr, \"*** fini_process (skip) ***\"); }\n    return;\n  }\n  \n  is_finalized = 1;\n  if (opt_debug >= 1) { MSG0(stderr, \"*** fini_process ***\"); }\n\n  fini_thread(&hpc_profdesc, 0 /*is_thread*/);\n\n  if (numPAPIEvents > 0) {\n    fini_papi_for_process();\n  }  \n}\n\n\n/*\n *  Finalize profiling for this thread and free profiling data.  See\n *  init_thread() for meaning of 'is_thread'.\n */\nextern void \nfini_thread(hpcrun_profiles_desc_t** profdesc, int is_thread)\n{\n  int sharedprofdesc = 0;\n  \n  if (opt_debug >= 1) { MSG0(stderr, \"*** fini_thread ***\"); }\n\n  /* Stop profiling */\n  if (HPC_GET_PAPIPROFS(*profdesc)) {\n    stop_papi_for_thread(HPC_GET_PAPIPROFS(*profdesc));\n    if (opt_debug >= 3) {\n      dump_hpcpapi_profile_desc_vec(HPC_GET_PAPIPROFS(*profdesc));\n    }\n  }\n  if (HPC_GET_SYSPROFS(*profdesc)) {\n    stop_sysprof(HPC_GET_SYSPROFS(*profdesc));\n  }\n\n  \n  if (is_thread && opt_thread == HPCRUN_THREADPROF_ALL) {\n    sharedprofdesc = 1; /* histogram buffers are shared */\n  }\n\n  /* Write data (if necessary) */\n#if (!OPEN_OUTPUTFILE_AT_BEG)\n  MSG0(stderr, \"*** TST ***\\n\");\n  init_profdesc_ofile(*profdesc, sharedprofdesc);\n  notify_ofile(*profdesc, hpc_profdesc);\n#endif\n  write_all_profiles(*profdesc, rtloadmap);\n\n  /* Finalize profiling subsystems and uninit descriptor */\n  if (HPC_GET_PAPIPROFS(*profdesc)) {\n    fini_papi_for_thread(HPC_GET_PAPIPROFS(*profdesc));\n  }\n  \n  fini_profdesc(profdesc, sharedprofdesc);\n}\n\n\nstatic void \nstop_sysprof(hpcsys_profile_desc_vec_t* profdescs)\n{\n  int ecode;\n\n  /* Each call to sprofil will disable any profiling enabled by\n     previous sprofil calls. */\n  if ((ecode = sprofil(NULL, 0, NULL, 0)) != 0) {\n#if 0\n    DIEx(\"error: sprofil() error. %s.\", strerror(errno));\n#endif\n  }\n}\n\n\nstatic void \nstop_papi_for_thread(hpcpapi_profile_desc_vec_t* profdescs)\n{\n  int rval, i;\n  long_long* values = NULL; // array the size of the eventset\n\n  rval = PAPI_stop(profdescs->eset, values);\n  if (rval != PAPI_OK) {\n    //DIEx(\"error: PAPI_stop (%d): %s.\", rval, PAPI_strerror(rval));\n  }\n\n  /* Call PAPI_sprofil() with a 0 threshold to cleanup internal memory */\n  for (i = 0; i < profdescs->size; ++i) {\n    hpcpapi_profile_desc_t* prof = &profdescs->vec[i];\n    \n    rval = PAPI_sprofil(prof->sprofs, prof->numsprofs, profdescs->eset, \n\t\t\tprof->ecode, 0, prof->flags);\n    if (rval != PAPI_OK) {\n      //DIEx(\"error: PAPI_sprofil (%d): %s.\", rval, PAPI_strerror(rval));\n    }\n  }\n}\n\n\nstatic void \nfini_papi_for_thread(hpcpapi_profile_desc_vec_t* profdescs)\n{\n  int rval;\n  /* Error need not be fatal -- we've already got the goods! */\n  rval = PAPI_cleanup_eventset(profdescs->eset);\n  if (rval != PAPI_OK) {\n    MSGx(stderr, \"warning: PAPI_cleanup_eventset (%d): %s.\", rval, PAPI_strerror(rval));\n  }\n\n  rval = PAPI_destroy_eventset(&profdescs->eset);\n  if (rval != PAPI_OK) {\n    MSGx(stderr, \"warning: PAPI_destroy_eventset (%d): %s.\", rval, PAPI_strerror(rval));\n  }\n  profdescs->eset = PAPI_NULL;\n\n  /* Call PAPI_stop, PAPI_cleanup_eventset and PAPI_destroy_eventset\n     before PAPI_unregister_thread */\n  rval = PAPI_unregister_thread();\n  if (rval != PAPI_OK) {\n    MSGx(stderr, \"warning: PAPI_unregister_thread (%d): %s.\", rval, PAPI_strerror(rval));\n  }\n}\n\n\nstatic void \nfini_papi_for_process()\n{\n  PAPI_shutdown();\n}\n\n\nstatic void \nfini_profdesc(hpcrun_profiles_desc_t** profdesc, int sharedprofdesc)\n{\n  int i, j;\n  uint numSysEv = 0, numPapiEv = 0;\n  \n  if (!profdesc || !*profdesc) { return; }\n\n  if (HPC_GET_SYSPROFS(*profdesc)) {\n    numSysEv = HPC_GET_SYSPROFS(*profdesc)->size;\n  }\n  if (HPC_GET_PAPIPROFS(*profdesc)) {\n    numPapiEv = HPC_GET_PAPIPROFS(*profdesc)->size;\n  }\n\n  /* 1a. Uninitialize system profdescs */\n  for (i = 0; i < numSysEv; ++i) {\n    hpcsys_profile_desc_t* prof = &HPC_GET_SYSPROFS(*profdesc)->vec[i];\n    if (!sharedprofdesc) {\n      for (j = 0; j < prof->numsprofs; ++j) {\n\tfree(prof->sprofs[j].pr_base);\n      }\n      free(prof->sprofs);\n    }\n    prof->sprofs = NULL;\n  }\n  \n  if (numSysEv > 0) {\n    free(HPC_GET_SYSPROFS(*profdesc)->vec);\n    free(HPC_GET_SYSPROFS(*profdesc));\n  }\n\n  /* 1b. Uninitialize papi profdescs */\n  for (i = 0; i < numPapiEv; ++i) {\n    hpcpapi_profile_desc_t* prof = &HPC_GET_PAPIPROFS(*profdesc)->vec[i];\n    if (!sharedprofdesc) {\n      for (j = 0; j < prof->numsprofs; ++j) {\n\tfree(prof->sprofs[j].pr_base);\n      }\n      free(prof->sprofs);\n    }\n    prof->sprofs = NULL;\n  }\n\n  if (numPapiEv > 0) {\n    free(HPC_GET_PAPIPROFS(*profdesc)->vec);\n    free(HPC_GET_PAPIPROFS(*profdesc));\n  }\n  \n  /* 1c. Uninitialize ofile */\n  free((*profdesc)->ofile.fname);\n  (*profdesc)->ofile.fname = NULL;\n  \n  /* 1d. Uninitialize profdesc */\n  free(*profdesc);\n  *profdesc = NULL;\n}\n\n\n/****************************************************************************\n * Write profile data\n ****************************************************************************/\n\nstatic void write_module_profile(FILE* fp, rtloadmod_desc_t* mod,\n\t\t\t\t hpcrun_profiles_desc_t* profdesc, \n\t\t\t\t int sprofidx);\n\nstatic void write_event_hdr(FILE *fs, char* name, char* desc, \n\t\t\t    uint64_t period);\nstatic void write_sysevent_data(FILE *fs, hpcsys_profile_desc_t* prof,\n\t\t\t\tint sprofidx);\nstatic void write_papievent_data(FILE *fp, hpcpapi_profile_desc_t* prof, \n\t\t\t     int sprofidx);\nstatic void write_event_data(FILE *fs, char* ename, hpc_hist_bucket* histo, \n\t\t\t     uint64_t ncounters, uint bytesPerCodeBlk);\n\nstatic void write_string(FILE *fp, char *str);\n\n\n/*\n *  Write profile data for this process.  See hpcrun.h for file format info.\n */\nstatic void \nwrite_all_profiles(hpcrun_profiles_desc_t* profdesc, rtloadmap_t* rtmap)\n{\n  int i;\n  FILE* fs;\n  \n  if (opt_debug >= 1) { MSG0(stderr, \"*** write_all_profiles: begin ***\"); }\n\n  if (!profdesc->ofile.fname) {\n    return;\n  }\n\n  /* open the data file (wait if too many files are already open) */\n  do {\n    if (opt_debug >= 1 && (errno == ENFILE || errno == EMFILE)) {\n      MSG0(stderr, \"* waiting for file descriptors to write data!\");\n    }\n    errno = 0;\n    fs = fopen(profdesc->ofile.fname, \"w\");\n  }\n  while (errno == ENFILE || errno == EMFILE /* too many open files */);\n\n  if (fs == NULL) {\n    DIEx(\"error: Could not open file '%s': %s\", profdesc->ofile.fname, \n\t strerror(errno));\n  }\n  \n  /* <header> */\n  fwrite(HPCRUNFLAT_FMT_Magic, 1, HPCRUNFLAT_FMT_MagicLen, fs);\n  fwrite(HPCRUNFLAT_Version, 1, HPCRUNFLAT_VersionLen, fs);\n  fputc(HPCRUNFLAT_FMT_Endian, fs);\n\n  if (opt_debug >= 1) { MSGx(stderr, \"rtmap count: %d\", rtmap->count); }\n\n  /* <loadmodule_list> */\n  hpcio_le4_fwrite(&(rtmap->count), fs);\n  for (i = 0; i < rtmap->count; ++i) {\n    write_module_profile(fs, &(rtmap->module[i]), profdesc, i);\n  }\n  \n  fclose(fs);\n\n  if (opt_debug >= 1) { MSG0(stderr, \"*** write_all_profiles: end ***\"); }\n}\n\n\nstatic void \nwrite_module_profile(FILE* fs, rtloadmod_desc_t* mod,\n\t\t     hpcrun_profiles_desc_t* profdesc, int sprofidx)\n{\n  int i;\n  uint numEv = 0;\n  uint numSysEv = 0, numPapiEv = 0;\n  \n  if (opt_debug >= 2) { \n    MSGx(stderr, \"writing module %s (at offset %#\"PRIx64\")\", \n\t mod->name, mod->offset); \n  }\n\n  /* <loadmodule_name>, <loadmodule_loadoffset> */\n  write_string(fs, mod->name);\n  hpcio_le8_fwrite(&(mod->offset), fs);\n\n  /* <loadmodule_eventcount> */\n  if (HPC_GET_SYSPROFS(profdesc)) { \n    numSysEv = HPC_GET_SYSPROFS(profdesc)->size;\n    numEv += numSysEv; \n  }\n  if (HPC_GET_PAPIPROFS(profdesc)) { \n    numPapiEv = HPC_GET_PAPIPROFS(profdesc)->size;\n    numEv += numPapiEv; \n  }\n  hpcio_le4_fwrite(&numEv, fs);\n  \n  /* Event data */\n  /*   <event_x_name> <event_x_description> <event_x_period> */\n  /*   <event_x_data> */\n  for (i = 0; i < numSysEv; ++i) {\n    hpcsys_profile_desc_t* prof = &HPC_GET_SYSPROFS(profdesc)->vec[i];\n    write_event_hdr(fs, prof->ename, prof->ename, prof->period);\n    write_sysevent_data(fs, prof, sprofidx);\n  }\n  for (i = 0; i < numPapiEv; ++i) {\n    hpcpapi_profile_desc_t* prof = &HPC_GET_PAPIPROFS(profdesc)->vec[i];\n    write_event_hdr(fs, prof->einfo.symbol, prof->einfo.long_descr,\n\t\t    prof->period);\n    write_papievent_data(fs, prof, sprofidx);\n  }\n}\n\n\nstatic void \nwrite_event_hdr(FILE *fs, char* name, char* desc, uint64_t period)\n{\n  /* <event_x_name> <event_x_description> <event_x_period> */\n  write_string(fs, name);\n  write_string(fs, desc);\n  hpcio_le8_fwrite(&period, fs);\n}\n\n\nstatic void \nwrite_sysevent_data(FILE *fs, hpcsys_profile_desc_t* prof, int sprofidx)\n{\n  char* ename = prof->ename;\n  struct prof* sprof = &(prof->sprofs[sprofidx]);\n  hpc_hist_bucket* histo = (hpc_hist_bucket*)sprof->pr_base;\n  uint64_t ncounters = (sprof->pr_size / prof->bytesPerCntr);\n  \n  write_event_data(fs, ename, histo, ncounters, prof->bytesPerCodeBlk);\n}\n\n\nstatic void \nwrite_papievent_data(FILE *fs, hpcpapi_profile_desc_t* prof, int sprofidx)\n{\n  char* ename = prof->einfo.symbol;\n  PAPI_sprofil_t* sprof = &(prof->sprofs[sprofidx]);\n  hpc_hist_bucket* histo = (hpc_hist_bucket*)sprof->pr_base;\n  uint64_t ncounters = (sprof->pr_size / prof->bytesPerCntr);\n\n  if (opt_debug >= 4) { \n    MSGx(stderr, \"  writing %p[%d] = %p for %s with buf (%p):\", \n\t prof, sprofidx, sprof, ename, histo); \n  }\n\n  write_event_data(fs, ename, histo, ncounters, prof->bytesPerCodeBlk);\n}\n\n\nstatic void \nwrite_event_data(FILE *fs, char* ename, hpc_hist_bucket* histo, \n\t\t uint64_t ncounters, uint bytesPerCodeBlk)\n{\n  uint64_t count = 0, offset = 0, i = 0, inz = 0;\n\n  /* <histogram_non_zero_bucket_count> */\n  count = 0;\n  for (i = 0; i < ncounters; ++i) {\n    if (histo[i] != 0) { count++; inz = i; }\n  }\n  hpcio_le8_fwrite(&count, fs);\n  \n  if (opt_debug >= 3) {\n    MSGx(stderr, \"  buffer (%p) for %s has %\"PRIu64\" of %\"PRIu64\" non-zero counters (last non-zero counter: %\"PRIu64\")\", \n\t histo, ename, count, ncounters, inz);\n  }\n  \n  /* <histogram_non_zero_bucket_x_value> \n     <histogram_non_zero_bucket_x_offset> */\n  for (i = 0; i < ncounters; ++i) {\n    if (histo[i] != 0) {\n      uint32_t cnt = histo[i];\n      hpcio_le4_fwrite(&cnt, fs);   /* count */\n\n      offset = i * bytesPerCodeBlk;\n      hpcio_le8_fwrite(&offset, fs); /* offset (in bytes) from load addr */\n\n      if (opt_debug >= 3) {\n        MSGx(stderr, \"  (cnt,offset)=(%d,%\"PRIx64\")\", cnt, offset);\n      }\n    }\n  }\n}\n\n\nstatic void \nwrite_string(FILE *fs, char *str)\n{\n  /* <string_length> <string_without_terminator> */\n  uint len = strlen(str);\n  hpcio_le4_fwrite(&len, fs);\n  fwrite(str, 1, len, fs);\n}\n\n\n/****************************************************************************/\n\n/* hpcrun_gettid: return a thread id */\n/* FIXME: return size_t or intptr_t */\nextern long\nhpcrun_gettid()\n{\n#ifdef HAVE_MONITOR\n  return (long)(monitor_gettid());\n#else\n  return hpcrun_gettid_SPECIALIZED();\n#endif\n}\n\nextern void \nhpcrun_parse_execl(const char*** argv, const char* const** envp,\n\t\t   const char* arg, va_list arglist)\n{\n  /* argv & envp are pointers to arrays of char* */\n  /* va_start has already been called */\n\n  const char* argp;\n  int argvSz = 32, argc = 1;\n  \n  *argv = malloc((argvSz+1) * sizeof(const char*));\n  if (!*argv) { DIE0(\"error: malloc() failed!\"); }\n  \n  (*argv)[0] = arg;\n  while ((argp = va_arg(arglist, const char*)) != NULL) { \n    if (argc > argvSz) {\n      argvSz *= 2;\n      *argv = realloc(*argv, (argvSz+1) * sizeof(const char*));\n      if (!*argv) { DIE0(\"error: realloc() failed!\"); }\n    }\n    (*argv)[argc] = argp;\n    argc++;\n  }\n  (*argv)[argc] = NULL;\n  \n  if (envp != NULL) {\n    *envp = va_arg(arglist, const char* const*);\n  }\n\n#if 0\n  if (opt_debug >= 2) { \n    int i;\n    for (i = 0; i < argc; ++i) {\n      MSGx(stderr, \"  execl arg%d: %s\", i, (*argv)[i]);\n    }\n    if (envp) {\n      MSG0(stderr, \"  execl envp found\");\n    }\n  }\n#endif\n  \n  /* user calls va_end */\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun-flat/monitor.h": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n/****************************************************************************\n//\n// File:\n//    $HeadURL$\n//\n// Purpose:\n//    General header.\n//\n// Description:\n//    Shared declarations, etc for monitoring.\n//    \n//    *** N.B. *** \n//    There is an automake install hook that will hide these external\n//    symbols.\n//\n// Author:\n//    Written by John Mellor-Crummey and Nathan Tallent, Rice University.\n//\n*****************************************************************************/\n\n#ifndef hpcrun_flat_monitor_h\n#define hpcrun_flat_monitor_h\n\n/************************** System Include Files ****************************/\n\n#include <stdio.h>\n#include <unistd.h>      /* getpid() */\n#include <inttypes.h>\n#include <stdarg.h>\n\n#include <sys/time.h>    /* for sprofil() */\n#include <sys/profil.h>  /* for sprofil() */\n\n/**************************** User Include Files ****************************/\n\n#include <include/hpctoolkit-config.h>\n#include <include/uint.h>\n\n#include \"hpcrun.h\"\n#include \"hpcpapi.h\"\n\n/**************************** Forward Declarations **************************/\n\n// Private debugging level: messages for in-house debugging [0-9]\n#define HPCRUN_DBG_LVL 0\n\n// MSG should be atomic so that thread messages are not interleaved.\n// Because we want to expand the format string with additional output\n// parameters, we need to know how to rebuild the fprintf parameters,\n// which involves knowing when to include a comma and when not to:\n//   \"%x1 %x2\" fmt, x1, x2   -OR-   \"%x1 %x2\" fmt, x1, x2, fmt_args\n// But doing this requires more compile time evaluation than macros\n// support.  Thus, the user must perform this selection by choosing\n// between MSG0 and MSGx.\n\n#define MSG_str(fmt)                                                    \\\n  HPCRUN_NAME\" [pid %d, tid 0x%lx]: \" fmt \"\\n\", getpid(), hpcrun_gettid()\n\n\n#define MSG0(x, fmt)                                                    \\\n  { fprintf(x, MSG_str(fmt)); } \n\n#define MSGx(x, fmt, ...)                                               \\\n  { fprintf(x, MSG_str(fmt), __VA_ARGS__); }\n\n/*#define MSG(x, ...)                                                   \\\n  { fprintf((x), \"hpcrun (pid %d, tid 0x%lx): \", getpid(), hpcrun_gettid()); fprintf((x), __VA_ARGS__); fputs(\"\\n\", (x)); } */\n\n\n#define ERRMSG0(fmt)\t\t\t\t\t                \\\n  { if (HPCRUN_DBG_LVL) {                                               \\\n      fprintf(stderr, MSG_str(\"[%s:%d]: \" fmt), __FILE__, __LINE__); }\t\\\n    else {\t\t\t\t\t\t\t\t\\\n      fprintf(stderr, MSG_str(fmt)); }\t\t\t\t\t\\\n  }\n\n#define ERRMSGx(fmt, ...)\t\t\t\t\t        \\\n  { if (HPCRUN_DBG_LVL) {                                               \\\n      fprintf(stderr, MSG_str(\"[%s:%d]: \" fmt), __FILE__, __LINE__, __VA_ARGS__); } \\\n    else {\t\t\t\t\t\t\t\t\\\n      fprintf(stderr, MSG_str(fmt), __VA_ARGS__); }\t\t\t\\\n  }\n\n/*#define ERRMSG(...)\t\t\t\t\t\t      \\\n  { fputs(\"hpcrun\", stderr);                                          \\\n    if (HPCRUN_DBG_LVL) {                                             \\\n      fprintf(stderr, \" [%s:%d]\", __FILE__, __LINE__); }              \\\n      fprintf(stderr, \" (pid %d, tid 0x%lx): \", getpid(), hpcrun_gettid()); fprintf(stderr, __VA_ARGS__); fputs(\"\\n\", stderr); } */\n\n\n#define DIE0(fmt)      ERRMSG0(fmt); { exit(1); }\n\n#define DIEx(fmt, ...) ERRMSGx(fmt, __VA_ARGS__); { exit(1); }\n\n/**************************** Forward Declarations **************************/\n\n// hpcsys_profile_desc_t: Collects all information to describe system\n// based (i.e. non-PAPI) profiles, e.g. a call to sprofil(). Note that\n// the segmented-profile buffers will correspond to data in the\n// run-time-load-map.\ntypedef struct {\n  /* currently we only have one type of system prof.  If we ever need\n     more we can add a prof-type field */ \n  char*             ename;       // event name\n  uint64_t          period;      // sampling period\n  //struct timeval*   tval;      // contains info after a call to sprofil()\n  unsigned int      flags;       // profiling flags\n  \n  unsigned int      bytesPerCodeBlk; // bytes per block of monitored code\n  unsigned int      bytesPerCntr;    // bytes per histogram counter\n  unsigned int      scale;           // relationship between the two\n  \n  struct prof*      sprofs;      // vector of histogram buffers, one for each\n  unsigned int      numsprofs;   //   run time load module\n} hpcsys_profile_desc_t;\n\n// hpcsys_profile_desc_vec_t: A vector of hpcsys_profile_desc_t.\ntypedef struct {\n  unsigned int           size; // vector size\n  hpcsys_profile_desc_t* vec;  // one for each profile\n  \n} hpcsys_profile_desc_vec_t;\n\n/**************************** Forward Declarations **************************/\n\n// hpcrun_ofile_desc_t: Describes an hpcrun output file\ntypedef struct {\n  FILE* fs;    // file stream\n  char* fname; // file name\n} hpcrun_ofile_desc_t;\n\n\n// hpcrun_profiles_desc_t: Describes all concurrent profiles for a\n// particular process or thread.  \ntypedef struct {\n  /* We use void* to make conditional compilation easy.  See macros below. */\n  void* sysprofs;   /* hpcsys_profile_desc_vec_t* */\n  void* papiprofs;  /* hpcpapi_profile_desc_vec_t* */\n\n  hpcrun_ofile_desc_t ofile; \n} hpcrun_profiles_desc_t;\n\n/* Each accessor macro has two versions, one for use as lvalue and\n   rvalue.  The reason is that casts in lvalue expressions is a\n   non-standard. */\n#define HPC_GETL_SYSPROFS(x)  ((x)->sysprofs)\n#define HPC_GET_SYSPROFS(x)  ((hpcsys_profile_desc_vec_t*)((x)->sysprofs))\n\n//#if HAVE_PAPI\n#define HPC_GETL_PAPIPROFS(x) ((x)->papiprofs)\n#define HPC_GET_PAPIPROFS(x) ((hpcpapi_profile_desc_vec_t*)((x)->papiprofs))\n//#else\n//#define HPC_GET_PAPIPROFS(x) (x->papiprofs)\n//#endif\n\n/**************************** Forward Declarations **************************/\n\n/* 'intercepted' libc routines */\n\n#define PARAMS_START_MAIN (int (*main) (int, char **, char **),              \\\n\t\t\t   int argc,                                         \\\n\t\t\t   char *__unbounded *__unbounded ubp_av,            \\\n\t\t\t   void (*init) (void),                              \\\n                           void (*fini) (void),                              \\\n\t\t\t   void (*rtld_fini) (void),                         \\\n\t\t\t   void *__unbounded stack_end)\n\ntypedef int (*libc_start_main_fptr_t) PARAMS_START_MAIN;\ntypedef void (*libc_start_main_fini_fptr_t) (void);\n\n\n#define PARAMS_EXECV  (const char *path, char *const argv[])\n#define PARAMS_EXECVP (const char *file, char *const argv[])\n#define PARAMS_EXECVE (const char *path, char *const argv[],                 \\\n                       char *const envp[])\n\ntypedef int (*execv_fptr_t)  PARAMS_EXECV;\ntypedef int (*execvp_fptr_t) PARAMS_EXECVP;\ntypedef int (*execve_fptr_t) PARAMS_EXECVE;\n\ntypedef pid_t (*fork_fptr_t) (void);\ntypedef void* (*dlopen_fptr_t) (const char *filename, int flag);\n\ntypedef void (*_exit_fptr_t) (int);\n\n/* 'intercepted' libpthread routines */\n\n#define PARAMS_PTHREAD_CREATE (pthread_t* thread,                            \\\n\t\t\t       const pthread_attr_t* attr,                   \\\n\t\t\t       void *(*start_routine)(void*),                \\\n\t\t\t       void* arg)\n\ntypedef struct {\n  void* (*start_routine)(void*);    /* from pthread_create() */\n  void* arg;                        /* from pthread_create() */\n  hpcrun_profiles_desc_t* profdesc; /* profiling info */\n} hpcrun_pthread_create_args_t;\n\n\ntypedef int (*pthread_create_fptr_t) PARAMS_PTHREAD_CREATE;\n\ntypedef pthread_t (*pthread_self_fptr_t) (void);\n\n\n/**************************** Forward Declarations **************************/\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* These routines can be called externally. */\n\nextern void init_library();\nextern void fini_library();\n\nextern void init_process();\nextern void fini_process();\n\nextern hpcrun_profiles_desc_t* \ninit_thread(int is_thread);\n\nextern void\nfini_thread(hpcrun_profiles_desc_t** profdesc, int is_thread);\n\nextern long hpcrun_gettid();\n\nextern void \nhpcrun_parse_execl(const char*** argv, const char* const** envp,\n\t\t   const char* arg, va_list arglist);\n\nextern void handle_dlopen();\n\n\n/* These routines must be specialized and supplied by someone else.\n   monitor.c does _not_ contain their definitions. */\n\nextern void init_library_SPECIALIZED();\n\nextern void init_papi_for_process_SPECIALIZED();\n\nextern long hpcrun_gettid_SPECIALIZED();\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n/*************************** Variable Declarations **************************/\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* hpcrun options: set when the library is initialized */\nextern int   opt_debug;\nextern int   opt_recursive;\nextern hpc_threadprof_t opt_thread;\nextern char* opt_eventlist;\nextern char  opt_outpath[PATH_MAX];\nextern int   opt_flagscode;\n\n/* monitored command: set when library or process is initialized  */\nextern const char* hpcrun_cmd; /* profiled command */\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n/****************************************************************************/\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun-flat/dlpapi.c": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n/****************************************************************************\n//\n// File: \n//    $HeadURL$\n//\n// Purpose:\n//    Dynamically link PAPI library.\n//\n// Description:\n//    [The set of functions, macros, etc. defined in the file]\n//\n// Author:\n//    Written by John Mellor-Crummey and Nathan Tallent, Rice University.\n//\n*****************************************************************************/\n\n/************************** System Include Files ****************************/\n\n#include <unistd.h>\n#include <stdio.h>\n#include <dlfcn.h>\n\n/**************************** User Include Files ****************************/\n\n#include \"dlpapi.h\"\n\n/**************************** Forward Declarations **************************/\n\ndl_PAPI_is_initialized_t dl_PAPI_is_initialized = NULL;\n\ndl_PAPI_library_init_t dl_PAPI_library_init = NULL;\n\ndl_PAPI_get_opt_t dl_PAPI_get_opt = NULL;\n\ndl_PAPI_get_hardware_info_t dl_PAPI_get_hardware_info = NULL;\n\ndl_PAPI_query_event_t dl_PAPI_query_event = NULL;\n\ndl_PAPI_get_event_info_t dl_PAPI_get_event_info = NULL;\n\ndl_PAPI_enum_event_t dl_PAPI_enum_event = NULL;\n\nstatic void* libpapi = NULL;\n\n/****************************************************************************/\n\nstatic void handle_any_dlerror();\n\n/* X is the routine name as called from C (i.e. not a string) */\n#define CALL_DLSYM(X) \\\n    dl_ ## X = (dl_ ## X ## _t)dlsym(libpapi, #X)\n\nint\ndlopen_papi()\n{\n  /* Open PAPI lib */\n  libpapi = dlopen(HPC_LIBPAPI_SO, RTLD_LAZY);\n  handle_any_dlerror();\n  \n  /* Initialize entry points */\n  CALL_DLSYM(PAPI_is_initialized);\n  handle_any_dlerror();\n\n  CALL_DLSYM(PAPI_library_init);\n  handle_any_dlerror();\n\n  CALL_DLSYM(PAPI_get_opt);\n  handle_any_dlerror();\n\n  CALL_DLSYM(PAPI_get_hardware_info);\n  handle_any_dlerror();\n\n  CALL_DLSYM(PAPI_get_event_info);\n  handle_any_dlerror();\n\n  CALL_DLSYM(PAPI_query_event);\n  handle_any_dlerror();\n  \n  CALL_DLSYM(PAPI_enum_event);\n  handle_any_dlerror();\n\n  return 0;\n}\n\n#undef CALL_DLSYM\n\nint \ndlclose_papi()\n{\n  dlclose(libpapi);\n  handle_any_dlerror();\n  return 0;\n}\n\n\nstatic void\nhandle_any_dlerror()\n{\n  /* Note: We assume dlsym() or something similar has just been called! */\n  char *error;\n  if ((error = dlerror()) != NULL) {\n    fprintf(stderr, \"%s\\n\", error); \n    exit(1);\n  }\n}\n\n\n/****************************************************************************/\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun-flat/dlpapi.h": "// -*-Mode: C++;-*- // technically C99\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n/****************************************************************************\n//\n// File:\n//    $HeadURL$\n//\n// Purpose:\n//    Dynamically link PAPI library.\n//\n// Description:\n//    [The set of functions, macros, etc. defined in the file]\n//\n// Author:\n//    Written by John Mellor-Crummey and Nathan Tallent, Rice University.\n//\n*****************************************************************************/\n\n#ifndef dlpapi_h\n#define dlpapi_h\n\n/************************** System Include Files ****************************/\n\n/**************************** User Include Files ****************************/\n\n#include \"hpcpapi.h\"\n\n/**************************** Forward Declarations **************************/\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* Dynamically open and link entry points.  These routines may be\n   called multiple times, but the number of closes should equal the\n   number of opens. */\n\nextern int dlopen_papi();\nextern int dlclose_papi();\n\n\n/* PAPI entry points */\n\ntypedef int (*dl_PAPI_is_initialized_t)(void);\nextern dl_PAPI_is_initialized_t dl_PAPI_is_initialized;\n\ntypedef int (*dl_PAPI_library_init_t)(int);\nextern dl_PAPI_library_init_t dl_PAPI_library_init;\n\ntypedef int (*dl_PAPI_get_opt_t)(int, PAPI_option_t*);\nextern dl_PAPI_get_opt_t dl_PAPI_get_opt;\n\ntypedef const PAPI_hw_info_t* (*dl_PAPI_get_hardware_info_t)(void);\nextern dl_PAPI_get_hardware_info_t dl_PAPI_get_hardware_info;\n\ntypedef int (*dl_PAPI_get_event_info_t)(int, PAPI_event_info_t*);\nextern dl_PAPI_get_event_info_t dl_PAPI_get_event_info;\n\ntypedef int (*dl_PAPI_query_event_t)(int);\nextern dl_PAPI_query_event_t dl_PAPI_query_event;\n\ntypedef int (*dl_PAPI_enum_event_t)(int*, int);\nextern dl_PAPI_enum_event_t dl_PAPI_enum_event;\n\n#ifdef __cplusplus\n}\n#endif\n\n/****************************************************************************/\n\n#endif /* dlpapi_h */\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcrun-flat/hpcrun.cpp": "// -*-Mode: C++;-*-\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n//***************************************************************************\n//\n// File: \n//    $HeadURL$\n//\n// Purpose:\n//    Launch the PAPI profiler by setting up a preloaded library that\n//    will intercept an application's execution and start the\n//    profiler.  This file processes hpcrun arguments and passes them\n//    to the profiling library through environment variables.\n//\n// Description:\n//    [The set of functions, macros, etc. defined in the file]\n//\n// Author:\n//    Written by John Mellor-Crummey and Nathan Tallent, Rice University.\n//\n//***************************************************************************\n\n//************************* System Include Files ****************************\n\n#include <iostream>\nusing std::ostream;\n\n#include <iomanip>\n\n#include <string>\nusing std::string;\n\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n\n#include <sys/types.h> /* for wait() */\n#include <sys/wait.h>  /* for wait() */\n#include <unistd.h>    /* for getpid(), fork(), etc. */\n\n//*************************** User Include Files ****************************\n\n#include <include/hpctoolkit-config.h>\n#include <include/uint.h>\n\n#include \"Args.hpp\"\n#include \"hpcpapi.h\" /* <papi.h>, etc. */\n#include \"dlpapi.h\"\n#include \"hpcrun.h\"\n\n#include <lib/support/diagnostics.h>\n#include <lib/support/findinstall.h>\n#include <lib/support/StrUtil.hpp>\n\n//*************************** Forward Declarations **************************\n\n#define LD_LIBRARY_PATH \"LD_LIBRARY_PATH\"\n#define LD_PRELOAD      \"LD_PRELOAD\"\n\n//*************************** Forward Declarations **************************\n\nstatic int\nlist_available_events(char* argv[], Args::EventList_t listType);\n\nstatic void \nprint_external_lib_paths();\n\nstatic int\nlaunch_with_profiling(const char* installpath, const Args& args);\n\nstatic int\nprepare_ld_lib_path_for_papi();\n\nstatic int\nprepend_to_ld_lib_path(const char* str);\n\nstatic int\nprepend_to_ld_preload(const char* str);\n\n//***************************************************************************\n//\n//***************************************************************************\n\nstatic int\nreal_main(int argc, char* argv[]);\n\n\nint\nmain(int argc, char* argv[])\n{\n  try {\n    return real_main(argc, argv);\n  }\n  catch (const Diagnostics::Exception& x) {\n    DIAG_EMsg(x.message());\n    exit(1);\n  } \n  catch (const std::bad_alloc& x) {\n    DIAG_EMsg(\"[std::bad_alloc] \" << x.what());\n    exit(1);\n  } \n  catch (const std::exception& x) {\n    DIAG_EMsg(\"[std::exception] \" << x.what());\n    exit(1);\n  } \n  catch (...) {\n    DIAG_EMsg(\"Unknown exception encountered!\");\n    exit(2);\n  }\n}\n\n\nstatic int\nreal_main(int argc, char* argv[])\n{\n  int ret = 0;\n  Args args(argc, argv);\n  \n  if (args.listEvents != Args::LIST_NONE) {\n    ret = list_available_events(argv, args.listEvents);\n  }\n  else if (args.printPaths) {\n    print_external_lib_paths();\n  }\n  else {\n    // Launch and profile\n    char* installpath = findinstall(argv[0], HPCRUN_NAME);\n    DIAG_Assert(installpath, \"Cannot locate installation path for '\"HPCRUN_NAME\"'\");\n    \n    ret = launch_with_profiling(installpath, args);\n    // only returns on error\n  }\n  \n  return ret;\n}\n\n\n//***************************************************************************\n// Profile\n//***************************************************************************\n\nstatic int\nprepare_env_for_profiling(const char* installpath, const Args& args);\n\n\nstatic int\nlaunch_with_profiling(const char* installpath, const Args& args)\n{\n  pid_t pid;\n  int status;\n\n  // Gather <command> into a NULL-terminated argv list\n  char** profArgV = new char*[args.profArgV.size() + 1];\n  for (uint i = 0; i < args.profArgV.size(); ++i) {\n    profArgV[i] = (char*)args.profArgV[i].c_str();\n  }\n  profArgV[args.profArgV.size()] = NULL;\n  \n  DIAG_Msg(1, HPCRUN_NAME\" (pid \" << getpid() << \") ==> \" << profArgV[0]);\n  \n  prepare_env_for_profiling(installpath, args);\n  \n  // Fork and exec the command to profile\n  if ((pid = fork()) == 0) {\n    // Child process\n    const char* cmd = profArgV[0];\n    if (execvp(cmd, profArgV) == -1) {\n      DIAG_Throw(\"Error exec'ing '\" << cmd << \"': \" << strerror(errno));\n    }\n    // never reached\n  }\n  \n  // Parent process\n  wait(&status);\n  return WEXITSTATUS(status);\n}\n\n\nstatic int\nprepare_env_for_profiling(const char* installpath, const Args& args)\n{  \n  char buf[PATH_MAX] = \"\";\n\n  // -------------------------------------------------------\n  // Prepare LD_LIBRARY_PATH (in reverse order)\n  // -------------------------------------------------------\n\n  // To support multi-lib we pack LIB_LIBRARY_PATH with all versions\n  \n  // LD_LIBRARY_PATH for libpapi (even though we link with libpapi,\n  // this may be needed to resolve PAPI dependencies such as libpfm)\n  prepare_ld_lib_path_for_papi();\n\n  // LD_LIBRARY_PATH for hpcrun (dynamically determined)\n#if defined(HAVE_OS_MULTILIB)\n  snprintf(buf, PATH_MAX, \"%s/lib64/hpctoolkit\", installpath);\n  prepend_to_ld_lib_path(buf);\n  snprintf(buf, PATH_MAX, \"%s/lib32/hpctoolkit\", installpath);\n  prepend_to_ld_lib_path(buf);\n#endif\n  snprintf(buf, PATH_MAX, \"%s/lib/hpctoolkit\", installpath);\n  prepend_to_ld_lib_path(buf);\n\n  // LD_LIBRARY_PATH for libmonitor (statically or dynamically determined)\n#ifdef HAVE_MONITOR\n  const char* MON = HPC_MONITOR;\n  if (MON[0] == '/') { \n    // statically determined\n#if defined(HAVE_OS_MULTILIB)\n    prepend_to_ld_lib_path(HPC_MONITOR \"/lib32/:\" HPC_MONITOR \"/lib64/\");\n#endif\n    prepend_to_ld_lib_path(HPC_MONITOR \"/lib/\");\n  }\n  else {\n    // dynamically determined\n#if defined(HAVE_OS_MULTILIB)\n    snprintf(buf, PATH_MAX, \"%s/lib64/\" HPC_MONITOR, installpath);\n    prepend_to_ld_lib_path(buf);\n    snprintf(buf, PATH_MAX, \"%s/lib32/\" HPC_MONITOR, installpath);\n    prepend_to_ld_lib_path(buf);\n#endif\n    snprintf(buf, PATH_MAX, \"%s/lib/\" HPC_MONITOR, installpath);\n    prepend_to_ld_lib_path(buf);\n  }\n#endif /* HAVE_MONITOR */\n\n  \n  // -------------------------------------------------------\n  // Prepare LD_PRELOAD\n  // -------------------------------------------------------\n\n  prepend_to_ld_preload(HPCRUN_LIB \" \" HPC_LIBMONITOR_SO);\n  \n  DIAG_Msg(1, HPCRUN_NAME\" (pid \" << getpid() << \"): LD_LIBRARY_PATH=\" << getenv(LD_LIBRARY_PATH));\n  DIAG_Msg(1, HPCRUN_NAME\" (pid \" << getpid() << \"): LD_PRELOAD=\" << getenv(LD_PRELOAD));\n\n  \n  // -------------------------------------------------------\n  // Prepare environment: Profiler options\n  // -------------------------------------------------------\n  if (!args.profRecursive.empty()) {\n    const char* val = (args.profRecursive == \"yes\") ? \"1\" : \"0\";\n    setenv(\"HPCRUN_RECURSIVE\", val, 1);\n  }\n  if (!args.profThread.empty()) {\n    const char* val = HPCRUN_THREADPROF_EACH_STR;\n    if (args.profThread == \"all\") {\n      val = HPCRUN_THREADPROF_ALL_STR;\n    }\n    setenv(\"HPCRUN_THREAD\", val, 1);\n  }\n  if (!args.profEvents.empty()) {\n    setenv(\"HPCRUN_EVENT_LIST\", args.profEvents.c_str(), 1);\n  }\n  if (!args.profOutput.empty()) {\n    setenv(\"HPCRUN_OUTPUT\", args.profOutput.c_str(), 1);\n    setenv(\"HPCRUN_OPTIONS\", \"DIR\", 1); // hpcex extensions\n  }\n  if (!args.profPAPIFlag.empty()) {\n    setenv(\"HPCRUN_EVENT_FLAG\", args.profPAPIFlag.c_str(), 1);\n  }\n  DIAG_If(1) {\n    string val = StrUtil::toStr(Diagnostics_GetDiagnosticFilterLevel());\n    setenv(\"HPCRUN_DEBUG\",  val.c_str(), 1);\n    setenv(\"MONITOR_DEBUG\", val.c_str(), 1);\n  }\n  DIAG_If(1) {\n    // PAPI_DEBUG=PROFILE | SUBSTRATE | THREADS | OVERFLOW\n    //setenv(\"PAPI_DEBUG\",  \"PROFILE, OVERFLOW, SUBSTRATE\", 1);\n  }\n  return 0;\n}\n\n\n\n//***************************************************************************\n// List profiling events\n//***************************************************************************\n\nstatic void\nlist_available_events_helper(Args::EventList_t listType);\n\nstatic int\ncheck_and_prepare_env_for_eventlisting();\n\nstatic void\ninit_papi(); \n\n\n/*\n *  List available events.\n */\nstatic int\nlist_available_events(char* argv[], Args::EventList_t listType)\n{\n  static const char* HPCRUN_TAG = \"HPCRUN_SUPER_SECRET_TAG\";\n  char* envtag = NULL;\n  pid_t pid;\n  int status = 0;\n  \n  // For a (security?) reason I do not understand, dlopen may *ignore*\n  // a call to setenv() modifying LD_LIBRARY_PATH.  Thus we set the\n  // environment (adding a special tag to prevent infinite recursion)\n  // and then fork() and exec a call to ourself.\n  envtag = getenv(HPCRUN_TAG);\n  if (!envtag) {\n    // 1. No hpcrun tag: prepare env, add the tag and fork/exec\n    status |= check_and_prepare_env_for_eventlisting();\n    status |= setenv(HPCRUN_TAG, \"1\", 1);\n    if (status != 0) { \n      DIAG_Throw(\"Error preparing environment.\");\n    }\n    \n    // Fork and exec\n    if ((pid = fork()) == 0) {\n      // Child process\n      const char* cmd = argv[0];\n      if (execvp(cmd, argv) == -1) {\n\tDIAG_Throw(\"Error exec'ing myself: \" << strerror(errno));\n      }\n      // never reached\n    }\n    \n    // Parent process\n    wait(&status);\n    return WEXITSTATUS(status);\n  }\n  else {\n    // 2. List the events\n    DIAG_Msg(1, \"LD_LIBRARY_PATH=\" << getenv(LD_LIBRARY_PATH));\n    dlopen_papi();\n    list_available_events_helper(listType);    \n    dlclose_papi();\n    return 0;\n  }\n}\n\n\n/*\n *  List available system, PAPI and native events.  (Mostly based on\n *  PAPI's src/ctests/avail.c)\n */\nstatic void \nlist_available_events_helper(Args::EventList_t listType)\n{\n  using std::setfill;\n  using std::setw;\n\n#define SEPARATOR_MAJOR setfill('=') << setw(77) << \"\" << \"\\n\\n\"\n#define SEPARATOR_MINOR setfill('-') << setw(77) << \"\" << \"\\n\"\n\n  ostream& os = std::cout;\n\n  if (listType == Args::LIST_NONE) {\n    return;\n  }\n  \n  // -------------------------------------------------------\n  // Ensure PAPI is initialized\n  // -------------------------------------------------------\n  init_papi();\n\n  // -------------------------------------------------------\n  // Hardware information\n  // -------------------------------------------------------\n  const PAPI_hw_info_t* hwinfo = NULL;\n  if ((hwinfo = dl_PAPI_get_hardware_info()) == NULL) {\n    DIAG_Throw(\"PAPI_get_hardware_info failed\");\n  }\n  os << \"*** Hardware information ***\\n\";\n  os << SEPARATOR_MINOR;\n  os << \"Vendor string and code  : \" \n     << hwinfo->vendor_string << \" (\" << hwinfo->vendor <<\")\\n\";\n  os << \"Model string and code   : \" \n     << hwinfo->model_string << \" (\" << hwinfo->model << \")\\n\";\n  os << \"CPU Revision            : \" << hwinfo->revision << \"\\n\";\n  os << \"CPU Megahertz           : \" << hwinfo->mhz << \"\\n\";\n  os << \"CPU's in this Node      : \" << hwinfo->ncpu << \"\\n\";\n  os << \"Nodes in this System    : \" << hwinfo->nnodes << \"\\n\";\n  os << \"Total CPU's             : \" << hwinfo->totalcpus << \"\\n\";\n  os << \"Number Hardware Counters: \" << dl_PAPI_get_opt(PAPI_MAX_HWCTRS, NULL) << \"\\n\";\n  os << \"Max Multiplex Counters  : \" << dl_PAPI_get_opt(PAPI_MAX_MPX_CTRS, NULL) << \"\\n\";\n  os << SEPARATOR_MAJOR;\n\n  // -------------------------------------------------------\n  // Wall clock time\n  // -------------------------------------------------------\n  os << \"*** Wall clock time ***\\n\";\n  os << HPCRUN_EVENT_WALLCLK_STR << \"     wall clock time (1 millisecond period)\\n\";\n  // os << HPCRUN_EVENT_FWALLCLK_STR << \"    fast wall clock time (1 millisecond period)\\n\";\n  os << SEPARATOR_MAJOR;\n\n  // -------------------------------------------------------\n  // PAPI events\n  // -------------------------------------------------------\n  os << \"*** Available PAPI preset events ***\\n\";\n  os << SEPARATOR_MINOR;\n  if (listType == Args::LIST_SHORT) {\n    os << \"Name\\t\\tDescription\\n\";\n  }\n  else if (listType == Args::LIST_LONG) {\n    os << \"Name\\t     Profilable\\tDescription (Implementation Note)\\n\";\n  }\n  else {\n    DIAG_Die(DIAG_Unimplemented);\n  }\n  os << SEPARATOR_MINOR;\n\n  int i = PAPI_PRESET_MASK;\n  int count = 0;\n  do {\n    PAPI_event_info_t info;\n    if (dl_PAPI_query_event(i) != PAPI_OK) {\n      continue;\n    }\n    if (dl_PAPI_get_event_info(i, &info) == PAPI_OK) {\n      /* NOTE: Although clumsy, this test has official sanction. */\n      const char* profilable = \"Yes\";\n      if ((info.count > 1) && strcmp(info.derived, \"DERIVED_CMPD\") != 0) {\n\tprofilable = \"No\";\n      }\n      \n      if (listType == Args::LIST_SHORT) {\n\tos << info.symbol << \"\\t\" << info.long_descr << \"\\n\";\n      } \n      else if (listType == Args::LIST_LONG) {\n\tos << info.symbol << \"\\t\" << profilable << \"\\t\" << info.long_descr\n\t   << \" (\" << info.note << \")\\n\";\n      }\n      else {\n\tDIAG_Die(DIAG_Unimplemented);\n      }\n      count++;\n    }\n  } while (dl_PAPI_enum_event(&i, PAPI_PRESET_ENUM_AVAIL) == PAPI_OK);\n  os << \"Total PAPI events reported: \" << count << \"\\n\";\n  os << SEPARATOR_MAJOR;\n\n  // -------------------------------------------------------\n  // Native events\n  // -------------------------------------------------------\n\n  /* PAPI does not always correctly return a vendor id */\n  os << \"*** Available native events ***\\n\";\n  os << SEPARATOR_MINOR;\n  if (listType == Args::LIST_SHORT) { \n    os << \"Name\\t\\t\\t\\tDescription\\n\";\n  }\n  else if (listType == Args::LIST_LONG) { \n    os << \"Name\\t\\t\\t\\tDescription\\n\";\n  }\n  else {\n    DIAG_Die(DIAG_Unimplemented);\n  }\n  os << SEPARATOR_MINOR;\n  os << std::left << setfill(' ');\n  \n  i = PAPI_NATIVE_MASK;\n  count = 0;\n  do {\n    PAPI_event_info_t info;\n    if (dl_PAPI_get_event_info(i, &info) == PAPI_OK) {\n      const char* desc = (info.long_descr) ? info.long_descr : \"\";\n      \n      if (listType == Args::LIST_SHORT || listType == Args::LIST_LONG) {\n\tif (strncmp(info.symbol, desc, strlen(info.symbol)) == 0) {\n\t  desc += strlen(info.symbol);\n\t}\n\tos << setw(31) << info.symbol << \" \" << desc << \"\\n\";\n      }\n      else {\n\tDIAG_Die(DIAG_Unimplemented);\n      }\n      count++;\n    }\n  } while (dl_PAPI_enum_event(&i, PAPI_ENUM_EVENTS) == PAPI_OK);\n  \n  os << \"Total native events reported: \" << count << \"\\n\";\n  os << SEPARATOR_MAJOR;\n}\n\n\nstatic int\ncheck_and_prepare_env_for_eventlisting()\n{\n  return prepare_ld_lib_path_for_papi();\n}\n\n\nstatic void\ninit_papi() \n{\n  /* Initialize PAPI library */\n  if (hpc_init_papi(dl_PAPI_is_initialized, dl_PAPI_library_init) != 0) {\n    exit(-1); /* message already printed */\n  }\n}\n\n\n//***************************************************************************\n// Misc\n//***************************************************************************\n\nstatic int\nprepare_ld_lib_path_for_papi()\n{\n#if defined(HAVE_OS_MULTILIB)\n  prepend_to_ld_lib_path(HPC_PAPI \"/lib32:\" HPC_PAPI \"/lib64\");\n#endif\n  return prepend_to_ld_lib_path(HPC_PAPI \"/lib\");\n}\n\n\nstatic void \nprint_external_lib_paths()\n{\n  DIAG_Msg(0, \"Using PAPI installation: '\"HPC_PAPI\"'\");\n  const char* MON = HPC_MONITOR;\n  if (MON[0] == '/') {\n    DIAG_Msg(0, \"Using MONITOR installation: '\"HPC_MONITOR\"'\\n\");\n  }\n}\n\n\nstatic int\nprepend_to_env_var(const char* env_var, const char* str, char sep);\n\nstatic int\nprepend_to_ld_lib_path(const char* str)\n{\n  return prepend_to_env_var(LD_LIBRARY_PATH, str, ':');\n}\n\n\nstatic int\nprepend_to_ld_preload(const char* str)\n{\n  return prepend_to_env_var(LD_PRELOAD, str, ' ');\n}\n\n\nstatic int\nprepend_to_env_var(const char* env_var, const char* str, char sep)\n{\n  char newval[PATH_MAX] = \"\";\n  char *oldval;\n  int sz;\n  \n  strncpy(newval, str, PATH_MAX);\n  oldval = getenv(env_var);\n  if (oldval) {\n    sz = PATH_MAX - (strlen(newval) + 1); /* 'path:' */\n    snprintf(newval + strlen(newval), sz, \"%c%s\", sep, oldval);\n  }\n  newval[PATH_MAX-1] = '\\0';\n  setenv(env_var, newval, 1);\n  return 0;\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcfnbounds/eh-frames.cpp": "// -*-Mode: C++;-*-\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n// This file uses libdwarf directly to compute the exception handler\n// (eh) frame addresses and adds them to the list of function addrs.\n// Dyninst and libdw don't support this, so we use libdwarf directly.\n//\n// Note: new dyninst uses libdw, and libdwarf and libdw don't play\n// together well (overlap of function names, header files).  So, we\n// move this to its own file, compile it separately and access\n// libdwarf via dlopen() and dlsym().\n//\n// Note: in order to isolate libdwarf as much as possible, for each\n// file, we re-dlopen libdwarf.so, save the addrs in a set, dlclose\n// libdwarf, and only then return the set of addrs (via a callback\n// function).  This way, nothing in the rest of fnbounds runs while\n// libdwarf is open.  We probably can relax this to open libdwarf.so\n// just once.\n\n//***************************************************************************\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <dlfcn.h>\n#include <err.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n#include <boost/tokenizer.hpp>\n#include <libdwarf.h>\n\n#include <include/hpctoolkit-config.h>\n#include \"eh-frames.h\"\n\n#include <set>\n#include <string>\n\nusing namespace std;\n\ntypedef set <void *> AddrSet;\n\nstatic void dwarf_frame_info_help(int, AddrSet &);\n\n#define EXT_LIBS_DIR_STR  \"HPCTOOLKIT_EXT_LIBS_DIR\"\n#define LD_LIBRARY_PATH   \"LD_LIBRARY_PATH\"\n\n#define LIBDWARF_NAME  \"libdwarf.so\"\n#define DLOPEN_OPTS    (RTLD_NOW | RTLD_LOCAL)\n\n#define KEEP_LIBDWARF_OPEN  0\n\n//----------------------------------------------------------------------\n\n#ifdef DYNINST_USE_LIBDW\n//\n// get libdwarf.so functions via dlopen() and dlsym()\n//\n\ntypedef int dwarf_init_fcn_t\n  (int, Dwarf_Unsigned, Dwarf_Handler, Dwarf_Ptr, Dwarf_Debug *, Dwarf_Error *);\n\ntypedef int dwarf_finish_fcn_t (Dwarf_Debug, Dwarf_Error *);\n\ntypedef void dwarf_dealloc_fcn_t (Dwarf_Debug, void *, Dwarf_Unsigned);\n\ntypedef int dwarf_get_fde_list_eh_fcn_t\n  (Dwarf_Debug, Dwarf_Cie **, Dwarf_Signed *, Dwarf_Fde **, Dwarf_Signed *, Dwarf_Error *);\n\ntypedef int dwarf_get_fde_range_fcn_t\n  (Dwarf_Fde, Dwarf_Addr *, Dwarf_Unsigned *, Dwarf_Ptr *, Dwarf_Unsigned *,\n   Dwarf_Off *, Dwarf_Signed *, Dwarf_Off *, Dwarf_Error *);\n\ntypedef void dwarf_fde_cie_list_dealloc_fcn_t\n  (Dwarf_Debug, Dwarf_Cie *, Dwarf_Signed, Dwarf_Fde *, Dwarf_Signed);\n\nstatic dwarf_init_fcn_t * real_dwarf_init = NULL;\nstatic dwarf_finish_fcn_t * real_dwarf_finish = NULL;\nstatic dwarf_dealloc_fcn_t * real_dwarf_dealloc = NULL;\nstatic dwarf_get_fde_list_eh_fcn_t * real_dwarf_get_fde_list_eh = NULL;\nstatic dwarf_get_fde_range_fcn_t * real_dwarf_get_fde_range = NULL;\nstatic dwarf_fde_cie_list_dealloc_fcn_t * real_dwarf_fde_cie_list_dealloc = NULL;\n\n#define DWARF_INIT     (* real_dwarf_init)\n#define DWARF_FINISH   (* real_dwarf_finish)\n#define DWARF_DEALLOC  (* real_dwarf_dealloc)\n#define DWARF_GET_FDE_LIST_EH  (* real_dwarf_get_fde_list_eh)\n#define DWARF_GET_FDE_RANGE    (* real_dwarf_get_fde_range)\n#define DWARF_FDE_CIE_LIST_DEALLOC  (* real_dwarf_fde_cie_list_dealloc)\n\nstatic string library_file;\nstatic void * libdwarf_handle = NULL;\n\nstatic int found_library = 0;\nstatic int dlopen_done = 0;\nstatic int dlsym_done = 0;\n\n#else\n//\n// direct function calls, no dlopen\n//\n\n#define DWARF_INIT     dwarf_init\n#define DWARF_FINISH   dwarf_finish\n#define DWARF_DEALLOC  dwarf_dealloc\n#define DWARF_GET_FDE_LIST_EH  dwarf_get_fde_list_eh\n#define DWARF_GET_FDE_RANGE    dwarf_get_fde_range\n#define DWARF_FDE_CIE_LIST_DEALLOC  dwarf_fde_cie_list_dealloc\n\n#endif\n\n//----------------------------------------------------------------------\n\n// In the libdw case, we use dlopen() and dlsym() to access the\n// libdwarf functions.\n//\n// Returns: 0 on success, 1 on failure.\n//\nstatic int\nget_libdwarf_functions(void)\n{\n#ifdef DYNINST_USE_LIBDW\n\n  // step 1 -- find libdwarf.so file, this only happens once.\n  if (! found_library) {\n    //\n    // try HPCTOOLKIT_EXT_LIBS_DIR first, this is set in the launch\n    // script.\n    //\n    char *str = getenv(EXT_LIBS_DIR_STR);\n\n    if (str != NULL) {\n      library_file = string(str) + \"/\" + LIBDWARF_NAME;\n      libdwarf_handle = dlopen(library_file.c_str(), DLOPEN_OPTS);\n\n      if (libdwarf_handle != NULL) {\n\tfound_library = 1;\n\tdlopen_done = 1;\n      }\n      else {\n\twarnx(\"unable to open %s in %s = %s\", LIBDWARF_NAME, EXT_LIBS_DIR_STR, str);\n      }\n    }\n  }\n\n  if (! found_library) {\n    //\n    // try LD_LIBRARY_PATH, in case running the binary directly.  as\n    // long as make install copied libdwarf.so to ext-libs, this\n    // method pretty much has to work.\n    //\n    // boost::tokenizer and algorithm::split generate a lot of code\n    // bloat.  we could rewrite this with string::find_first_of().\n    //\n    char *str = getenv(LD_LIBRARY_PATH);\n\n    if (str != NULL) {\n      string path = str;\n      boost::char_separator <char> sep (\":;\", \"\", boost::drop_empty_tokens);\n      boost::tokenizer <boost::char_separator <char>> token (path, sep);\n\n      for (auto it = token.begin(); it != token.end(); ++it) {\n\tlibrary_file = string(*it) + \"/\" + LIBDWARF_NAME;\n\tlibdwarf_handle = dlopen(library_file.c_str(), DLOPEN_OPTS);\n\n\tif (libdwarf_handle != NULL) {\n\t  found_library = 1;\n\t  dlopen_done = 1;\n\t  break;\n\t}\n      }\n      if (! found_library) {\n\twarnx(\"unable to find %s in %s = %s\", LIBDWARF_NAME, LD_LIBRARY_PATH, str);\n      }\n    }\n  }\n\n  if (! found_library) {\n    return 1;\n  }\n\n  // step 2 -- dlopen()\n  if (! dlopen_done) {\n    libdwarf_handle = dlopen(library_file.c_str(), DLOPEN_OPTS);\n\n    if (libdwarf_handle == NULL) {\n      warnx(\"unable to open: %s\", library_file.c_str());\n      return 1;\n    }\n\n    dlopen_done = 1;\n  }\n\n  // step 3 -- dlsym() and check that the functions exist\n  if (! dlsym_done) {\n    real_dwarf_init = (dwarf_init_fcn_t *) dlsym(libdwarf_handle, \"dwarf_init\");\n    real_dwarf_finish = (dwarf_finish_fcn_t *) dlsym(libdwarf_handle, \"dwarf_finish\");\n    real_dwarf_dealloc = (dwarf_dealloc_fcn_t *) dlsym(libdwarf_handle, \"dwarf_dealloc\");\n    real_dwarf_get_fde_list_eh = (dwarf_get_fde_list_eh_fcn_t *)\n\tdlsym(libdwarf_handle, \"dwarf_get_fde_list_eh\");\n    real_dwarf_get_fde_range = (dwarf_get_fde_range_fcn_t *)\n\tdlsym(libdwarf_handle, \"dwarf_get_fde_range\");\n    real_dwarf_fde_cie_list_dealloc = (dwarf_fde_cie_list_dealloc_fcn_t *)\n\tdlsym(libdwarf_handle, \"dwarf_fde_cie_list_dealloc\");\n\n    if (real_dwarf_init == NULL\n\t|| real_dwarf_finish == NULL\n\t|| real_dwarf_dealloc == NULL\n\t|| real_dwarf_get_fde_list_eh == NULL\n\t|| real_dwarf_get_fde_range == NULL\n\t|| real_dwarf_fde_cie_list_dealloc == NULL)\n    {\n      warnx(\"dlsym(%s) failed\", LIBDWARF_NAME);\n      return 1;\n    }\n\n    dlsym_done = 1;\n  }\n#endif\n\n  return 0;\n}\n\n// In the libdw case, dlclose() libdwarf after each file (for now).\n//\nstatic void\nrelease_libdwarf_functions(void)\n{\n#if defined(DYNINST_USE_LIBDW) && ! KEEP_LIBDWARF_OPEN\n\n  dlclose(libdwarf_handle);\n  real_dwarf_init = NULL;\n  real_dwarf_finish = NULL;\n\n  dlopen_done = 0;\n  dlsym_done = 0;\n\n#endif\n}\n\n//----------------------------------------------------------------------\n\n// Entry point from main.cpp.  We return the list of addresses via the\n// add_frame_addr() callback function.\n//\nvoid\ndwarf_eh_frame_info(int fd)\n{\n  static int open_failed = 0;\n\n  if (fd < 0 || open_failed) {\n    return;\n  }\n\n  if (get_libdwarf_functions() != 0) {\n    warnx(\"unable to open %s\", LIBDWARF_NAME);\n    open_failed = 1;\n    return;\n  }\n\n  AddrSet addrSet;\n  dwarf_frame_info_help(fd, addrSet);\n\n  release_libdwarf_functions();\n\n  for (auto it = addrSet.begin(); it != addrSet.end(); ++it) {\n    add_frame_addr(*it);\n  }\n}\n\n//----------------------------------------------------------------------\n\n// Read the eh frame info (exception handler) from the FDE records\n// (frame description entry) and put the list of addresses (low_pc)\n// into addrSet.\n//\nstatic void\ndwarf_frame_info_help(int fd, AddrSet & addrSet)\n{\n  Dwarf_Debug dbg;\n  Dwarf_Error err;\n  int ret;\n\n  ret = DWARF_INIT (fd, DW_DLC_READ, NULL, NULL, &dbg, &err);\n  if (ret == DW_DLV_ERROR) { DWARF_DEALLOC (dbg, err, DW_DLA_ERROR); }\n\n  if (ret != DW_DLV_OK) {\n    return;\n  }\n\n  Dwarf_Cie * cie_data = NULL;\n  Dwarf_Fde * fde_data = NULL;\n  Dwarf_Signed cie_count = 0;\n  Dwarf_Signed fde_count = 0;\n\n  ret = DWARF_GET_FDE_LIST_EH (dbg, &cie_data, &cie_count, &fde_data, &fde_count, &err);\n  if (ret == DW_DLV_ERROR) { DWARF_DEALLOC (dbg, err, DW_DLA_ERROR); }\n\n  if (ret == DW_DLV_OK ) {\n    for (long i = 0; i < fde_count; i++) {\n      Dwarf_Addr low_pc = 0;\n\n      ret = DWARF_GET_FDE_RANGE (fde_data[i], &low_pc, NULL, NULL, NULL,\n\t\t\t\t NULL, NULL, NULL, &err);\n      if (ret == DW_DLV_ERROR) { DWARF_DEALLOC (dbg, err, DW_DLA_ERROR); }\n\n      if (ret == DW_DLV_OK && low_pc != 0) {\n\taddrSet.insert((void *) low_pc);\n      }\n    }\n\n    DWARF_FDE_CIE_LIST_DEALLOC (dbg, cie_data, cie_count, fde_data, fde_count);\n  }\n\n  ret = DWARF_FINISH (dbg, &err);\n  if (ret == DW_DLV_ERROR) { DWARF_DEALLOC (dbg, err, DW_DLA_ERROR); }\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/tool/hpcfnbounds/hpcfnbounds.in": "#!/bin/sh\n# set -x\n#\n@copyright_hash@\n#\n# Launch script for hpcfnbounds-bin.\n#\n#------------------------------------------------------------\n# Values from configure\n#------------------------------------------------------------\n\n@launch_script_vars@\n\n# Relative paths are relative to HPCTOOLKIT.\next_libs_dir='@hpc_ext_libs_dir@'\nhpcfnbounds_dir='libexec/hpctoolkit'\n\n# Should be absolute path.\nlibcxx_path='@HPCRUN_LIBCXX_PATH@'\n\nprog_name=hpcfnbounds\n\n#------------------------------------------------------------\n# Find path to this script\n#------------------------------------------------------------\n\nhpc_path_to_root=../..\n@export_hpctoolkit@\n\n# Relative paths are relative to HPCTOOLKIT.\ncase \"$ext_libs_dir\" in\n    /* ) ;;\n    * )  ext_libs_dir=\"${HPCTOOLKIT}/${ext_libs_dir}\" ;;\nesac\ncase \"$hpcfnbounds_dir\" in\n    /* ) ;;\n    * )  hpcfnbounds_dir=\"${HPCTOOLKIT}/${hpcfnbounds_dir}\" ;;\nesac\n\n#------------------------------------------------------------\n# Process options\n#------------------------------------------------------------\n\n@launch_early_options@\n\n# If -v is one of the options, then print extra info about what files\n# hpcfnbounds is run on, whether it succeeds, etc, to go in hpcrun\n# logfile.\n#\nserver=no\nverbose=no\nbase=\ndir=\nfor arg in \"$@\"\ndo\n    case \"$arg\" in\n\t-s ) server=yes ;;\n\t-v ) verbose=yes ;;\n\t-* ) ;;\n\t* )\n\t    if test \"x$base\" = x ; then\n\t\tbase=`basename \"$arg\"`\n\t    elif test \"x$dir\" = x ; then\n\t\tdir=\"$arg\"\n\t    fi\n\t    ;;\n    esac\ndone\n\n# FIXME: integrate server and verbose.\n\n# Tell fnbounds where to find libdwarf.so for dlopen.\nexport HPCTOOLKIT_EXT_LIBS_DIR=\"$ext_libs_dir\"\n\nif test \"$server\" = yes ; then\n    export LD_LIBRARY_PATH=\"${ext_libs_dir}:${libcxx_path}:${LD_LIBRARY_PATH}\"\n    exec \"${hpcfnbounds_dir}/hpcfnbounds-bin\" \"$@\"\nfi\n\nif test \"$verbose\" = yes ; then\n    echo \"hpcfnbounds $@\"\nfi\n\nif test \"x$dir\" != x && test ! -d \"$dir\" ; then\n    mkdir -p \"$dir\"\nfi\n\nLD_LIBRARY_PATH=\"${ext_libs_dir}:${libcxx_path}:${LD_LIBRARY_PATH}\" \\\n    \"${hpcfnbounds_dir}/hpcfnbounds-bin\" \"$@\"\n\nret=$?\nif test \"$verbose\" = yes ; then\n    if test $ret -ne 0 ; then\n\techo \"hpcfnbounds $base FAILED\"\n    fi\n    ls -l \"${dir}/${base}\"*\n    tail -1 \"${dir}/${base}\"*.txt\nfi\n\nexit $ret\n",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/src/lib/analysis/Flat-SrcCorrelation.cpp": "// -*-Mode: C++;-*-\n\n// * BeginRiceCopyright *****************************************************\n//\n// $HeadURL$\n// $Id$\n//\n// --------------------------------------------------------------------------\n// Part of HPCToolkit (hpctoolkit.org)\n//\n// Information about sources of support for research and development of\n// HPCToolkit is at 'hpctoolkit.org' and in 'README.Acknowledgments'.\n// --------------------------------------------------------------------------\n//\n// Copyright ((c)) 2002-2019, Rice University\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n//\n// * Neither the name of Rice University (RICE) nor the names of its\n//   contributors may be used to endorse or promote products derived from\n//   this software without specific prior written permission.\n//\n// This software is provided by RICE and contributors \"as is\" and any\n// express or implied warranties, including, but not limited to, the\n// implied warranties of merchantability and fitness for a particular\n// purpose are disclaimed. In no event shall RICE or contributors be\n// liable for any direct, indirect, incidental, special, exemplary, or\n// consequential damages (including, but not limited to, procurement of\n// substitute goods or services; loss of use, data, or profits; or\n// business interruption) however caused and on any theory of liability,\n// whether in contract, strict liability, or tort (including negligence\n// or otherwise) arising in any way out of the use of this software, even\n// if advised of the possibility of such damage.\n//\n// ******************************************************* EndRiceCopyright *\n\n//************************ System Include Files ******************************\n\n#include <iostream>\nusing std::hex;\nusing std::dec;\nusing std::endl;\n\n#include <string>\nusing std::string;\n\n#include <map>\nusing std::map;\n\n#include <vector>\nusing std::vector;\n\n#include <climits>\n\n//************************* User Include Files *******************************\n\n#include <include/gcc-attr.h>\n#include <include/uint.h>\n\n#include \"Flat-SrcCorrelation.hpp\"\n#include \"TextUtil.hpp\"\n#include \"Util.hpp\"\n\n#include <lib/profxml/PGMReader.hpp>\n\n#include <lib/prof/Struct-Tree.hpp>\n#include <lib/prof/Flat-ProfileData.hpp>\n\n#include <lib/binutils/LM.hpp>\n\n#include <lib/xml/xml.hpp>\nusing namespace xml;\n\n#include <lib/support/diagnostics.h>\n#include <lib/support/Trace.hpp>\n#include <lib/support/FileUtil.hpp>\n#include <lib/support/IOUtil.hpp>\n#include <lib/support/StrUtil.hpp>\n\n//************************ Forward Declarations ******************************\n\n//****************************************************************************\n\nnamespace Analysis {\n\nnamespace Flat {\n\nuint Driver::profileBatchSz = 16; // UINT_MAX;\n\n\nDriver::Driver(const Analysis::Args& args,\n\t       Prof::Metric::Mgr& mMgr, Prof::Struct::Tree& structure)\n  : Unique(), m_args(args), m_mMgr(mMgr), m_structure(structure)\n{\n}\n\n\nDriver::~Driver()\n{\n}\n\n\nint\nDriver::run()\n{\n  if (m_mMgr.empty()) {\n    return 0;\n  }\n\n  //-------------------------------------------------------\n  // 1. Initialize static program structure\n  //-------------------------------------------------------\n  DIAG_Msg(2, \"Initializing structure...\");\n  populateStructure(m_structure);\n\n  DIAG_If(3) {\n    DIAG_Msg(3, \"Initial structure:\");\n    write_experiment(DIAG_CERR);\n  }\n\n  //-------------------------------------------------------\n  // 2. Correlate metrics with program structure\n  //    (Results in a pruned structure tree)\n  //-------------------------------------------------------\n  DIAG_Msg(2, \"Creating and correlating metrics with program structure: ...\");\n  correlateMetricsWithStructure(m_mMgr, m_structure);\n\n  DIAG_If(3) {\n    DIAG_Msg(3, \"Final structure:\");\n    write_experiment(DIAG_CERR);\n  }\n\n  //-------------------------------------------------------\n  // 3. Generate Experiment database\n  //-------------------------------------------------------\n  string db_dir = m_args.db_dir; // make copy\n  bool db_use = !db_dir.empty() && db_dir != \"-\";\n  if (db_use) {\n    std::pair<string, bool> ret = FileUtil::mkdirUnique(db_dir.c_str());\n    db_dir = ret.first; // exits on failure...\n  }\n\n  if (db_use && m_args.db_copySrcFiles) {\n    DIAG_Msg(1, \"Copying source files reached by PATH/REPLACE options to \" << db_dir);\n    // NOTE: makes file names in m_structure relative to database\n    Analysis::Util::copySourceFiles(m_structure.root(), m_args.searchPathTpls,\n\t\t\t\t    db_dir);\n  }\n\n  const string out_path = (db_use) ? (db_dir + \"/\") : \"\";\n\n  if (!m_args.out_db_experiment.empty()) {\n    const string& fnm = m_args.out_db_experiment;\n    DIAG_Msg(1, \"Writing final scope tree (in XML) to \" << fnm);\n    string fpath = out_path + fnm;\n    const char* osnm = (fnm == \"-\") ? NULL : fpath.c_str();\n    std::ostream* os = IOUtil::OpenOStream(osnm);\n    write_experiment(*os);\n    IOUtil::CloseStream(os);\n  }\n\n  if (!m_args.out_db_csv.empty()) {\n    const string& fnm = m_args.out_db_csv;\n    DIAG_Msg(1, \"Writing final scope tree (in CSV) to \" << fnm);\n    string fpath = out_path + fnm;\n    const char* osnm = (fnm == \"-\") ? NULL : fpath.c_str();\n    std::ostream* os = IOUtil::OpenOStream(osnm);\n    write_csv(*os);\n    IOUtil::CloseStream(os);\n  }\n\n  if (!m_args.out_txt.empty()) {\n    const string& fnm = m_args.out_txt;\n    string fpath = out_path + fnm;\n    const char* osnm = (fnm == \"-\") ? NULL : fpath.c_str();\n    std::ostream* os = IOUtil::OpenOStream(osnm);\n    write_txt(*os);\n    IOUtil::CloseStream(os);\n  }\n\n  // configuration file\n  if (!m_args.out_db_config.empty()) {\n    const string& fnm = m_args.out_db_config;\n    string fpath = out_path + fnm;\n    DIAG_Msg(1, \"Writing configuration file to \" << fpath);\n\n    const char* osnm = (fnm == \"-\") ? NULL : fpath.c_str();\n    std::ostream* os = IOUtil::OpenOStream(osnm);\n    write_config(*os);\n    IOUtil::CloseStream(os);\n  }\n\n  return 0;\n}\n\n\nstring\nDriver::replacePath(const char* oldpath)\n{\n  // FIXME: Use PathReplacementMgr!\n\n  DIAG_Assert(m_args.replaceInPath.size() == m_args.replaceOutPath.size(), \"\");\n  for (uint i = 0 ; i < m_args.replaceInPath.size() ; i++ ) {\n    uint length = m_args.replaceInPath[i].length();\n    // it makes sense to test for matching only if 'oldpath' is strictly longer\n    // than this replacement inPath.\n    if (strlen(oldpath) > length &&\n\tstrncmp(oldpath, m_args.replaceInPath[i].c_str(), length) == 0 ) {\n      // it's a match\n      string s = m_args.replaceOutPath[i] + &oldpath[length];\n      DIAG_Msg(3, \"replacePath: Found a match! New path: \" << s);\n      return s;\n    }\n  }\n  // If nothing matched, return the original path\n  DIAG_Msg(3, \"replacePath: Nothing matched! Init path: \" << oldpath);\n  return string(oldpath);\n}\n\n\nvoid\nDriver::write_experiment(std::ostream &os) const\n{\n  static const char* experimentDTD =\n#include <lib/xml/hpc-experiment.dtd.h>\n  \n  os << \"<?xml version=\\\"1.0\\\"?>\" << std::endl;\n  os << \"<!DOCTYPE HPCToolkitExperiment [\\n\" << experimentDTD << \"]>\"\n     << std::endl;\n  os << \"<HPCToolkitExperiment version=\\\"2.0\\\">\\n\";\n  os << \"<Header n\" << MakeAttrStr(m_args.title) << \">\\n\";\n  os << \"  <Info/>\\n\";\n  os << \"</Header>\\n\";\n\n  os << \"<SecFlatProfile i=\\\"0\\\" n\" << MakeAttrStr(m_args.title) << \">\\n\";\n\n  // ------------------------------------------------------------\n  // \n  // ------------------------------------------------------------\n  os << \"<SecHeader>\\n\";\n\n  os << \"  <MetricTable>\\n\";\n  for (uint i = 0; i < m_mMgr.size(); ++i) {\n    const Prof::Metric::ADesc* m = m_mMgr.metric(i);\n    \n    os << \"    <Metric i\" << MakeAttrNum(i)\n       << \" n\" << MakeAttrStr(m->name())\n       << \" v=\\\"\" << m->toValueTyStringXML() << \"\\\"\"\n       << \" t=\\\"\" << Prof::Metric::ADesc::ADescTyToXMLString(m->type()) << \"\\\"\"\n       << \" show=\\\"\" << ((m->isVisible()) ? \"1\" : \"0\") << \"\\\">\\n\";\n    os << \"      <Info>\"\n       << \"<NV n=\\\"units\\\" v=\\\"events\\\"/>\" // or \"samples\" m->isUnitsEvents()\n       << \"<NV n=\\\"percent\\\" v=\\\"\" << ((m->doDispPercent()) ? \"1\" : \"0\") << \"\\\"/>\"\n       << \"</Info>\\n\";\n    os << \"    </Metric>\\n\";\n  }\n  os << \"  </MetricTable>\\n\";\n\n  os << \"  <Info n=\\\"SearchPaths\\\">\\n\";\n  const Analysis::PathTupleVec& searchPaths = m_args.searchPathTpls;\n  for (uint i = 0; i < searchPaths.size(); i++) {\n    const string& path = searchPaths[i].first;\n    os << \"    <NV n\" << MakeAttrNum(i) << \" v\" << MakeAttrStr(path) << \"/>\\n\";\n  }\n  os << \"  </Info>\\n\";\n\n  os << \"</SecHeader>\\n\";\n  os.flush();\n  \n  // ------------------------------------------------------------\n  // \n  // ------------------------------------------------------------\n  int wFlgs = 0; // Prof::Struct::Tree::WFlg_LeafMetricsOnly;\n\n  os << \"<SecFlatProfileData>\\n\";\n  m_structure.root()->writeXML(os, wFlgs);\n  os << \"</SecFlatProfileData>\\n\";\n\n  os << \"</SecFlatProfile>\\n\";\n  os << \"</HPCToolkitExperiment>\\n\";\n  os.flush();\n}\n\n\nvoid\nDriver::write_csv(std::ostream &os) const\n{\n  os << \"File name,Routine name,Start line,End line,Loop level\";\n  for (uint i = 0; i < m_mMgr.size(); ++i) {\n    const Prof::Metric::ADesc* m = m_mMgr.metric(i);\n    os << \",\" << m->name();\n    if (m->doDispPercent()) {\n      os << \",\" << m->name() << \" (%)\";\n    }\n  }\n  os << endl;\n  \n  // Dump SCOPETREE\n  m_structure.root()->CSV_TreeDump(os);\n}\n\n\nvoid\nDriver::write_txt(std::ostream &os) const\n{\n  using Analysis::TextUtil::ColumnFormatter;\n  using Prof::Struct::ANodeTyFilter;\n  using namespace Prof;\n\n  //write_experiment(os);\n\n  Metric::ADesc* m_sortby = m_mMgr.findSortKey();\n  DIAG_Assert(m_sortby, \"INVARIANT: at least on sort-by metric must exist\");\n\n  Struct::Root* rootStrct = m_structure.root();\n\n  ColumnFormatter colFmt(m_mMgr, os, 2, 0);\n\n  os << std::setfill('=') << std::setw(77) << \"=\" << std::endl;\n  colFmt.genColHeaderSummary();\n  os << std::endl;\n\n  if (m_args.txt_summary & Analysis::Args::TxtSum_fPgm) {\n    string nm = \"Program summary (row 1: sample count for raw metrics): \"\n      + rootStrct->name();\n    write_txt_secSummary(os, colFmt, nm, NULL);\n  }\n\n  if (m_args.txt_summary & Analysis::Args::TxtSum_fLM) {\n    string nm = \"Load module summary:\";\n    write_txt_secSummary(os, colFmt, nm,\n\t\t\t &ANodeTyFilter[Struct::ANode::TyLM]);\n  }\n\n  if (m_args.txt_summary & Analysis::Args::TxtSum_fFile) {\n    string nm = \"File summary:\";\n    write_txt_secSummary(os, colFmt, nm,\n\t\t\t &ANodeTyFilter[Struct::ANode::TyFile]);\n  }\n\n  if (m_args.txt_summary & Analysis::Args::TxtSum_fProc) {\n    string nm = \"Procedure summary:\";\n    write_txt_secSummary(os, colFmt, nm,\n\t\t\t &ANodeTyFilter[Struct::ANode::TyProc]);\n  }\n\n  if (m_args.txt_summary & Analysis::Args::TxtSum_fLoop) {\n    string nm = \"Loop summary (dependent on structure information):\";\n    write_txt_secSummary(os, colFmt, nm,\n\t\t\t &ANodeTyFilter[Struct::ANode::TyLoop]);\n  }\n\n  if (m_args.txt_summary & Analysis::Args::TxtSum_fStmt) {\n    string nm = \"Statement summary:\";\n    write_txt_secSummary(os, colFmt, nm,\n\t\t\t &ANodeTyFilter[Struct::ANode::TyStmt]);\n  }\n  \n  if (m_args.txt_srcAnnotation) {\n    const std::vector<std::string>& fnmGlobs = m_args.txt_srcFileGlobs;\n    bool hasFnmGlobs = !fnmGlobs.empty();\n\n    Struct::ANodeIterator\n      it(m_structure.root(), &ANodeTyFilter[Struct::ANode::TyFile]);\n    for (Struct::ANode* strct = NULL; (strct = it.current()); it++) {\n      Struct::File* fileStrct = dynamic_cast<Struct::File*>(strct);\n      const string& fnm = fileStrct->name();\n      if (fnm != Struct::Tree::UnknownFileNm\n\t  && (!hasFnmGlobs || FileUtil::fnmatch(fnmGlobs, fnm.c_str()))) {\n\twrite_txt_annotateFile(os, colFmt, fileStrct);\n      }\n    }\n  }\n}\n\n\nvoid\nDriver::write_txt_secSummary(std::ostream& os,\n\t\t\t     Analysis::TextUtil::ColumnFormatter& colFmt,\n\t\t\t     const std::string& title,\n\t\t\t     const Prof::Struct::ANodeFilter* filter) const\n{\n  using Analysis::TextUtil::ColumnFormatter;\n  using namespace Prof;\n\n  write_txt_hdr(os, title);\n\n  Struct::Root* rootStrct = m_structure.root();\n  Metric::ADesc* m_sortby = m_mMgr.findSortKey();\n\n  if (!filter) {\n    // Program *sample* summary\n    for (uint i = 0; i < m_mMgr.size(); ++i) {\n      const Metric::ADesc* m = m_mMgr.metric(i);\n      const Metric::SampledDesc* mm =\n\tdynamic_cast<const Metric::SampledDesc*>(m);\n      if (mm) {\n\tdouble smpl = rootStrct->metric(i) / (double)mm->period();\n\tcolFmt.genCol(i, smpl);\n      }\n      else {\n\tcolFmt.genBlankCol(i);\n      }\n    }\n    os << std::endl;\n\n    // Program metric summary\n    for (uint i = 0; i < m_mMgr.size(); ++i) {\n      colFmt.genCol(i, rootStrct->metric(i));\n    }\n    os << std::endl;\n  }\n  else {\n    Struct::ANodeSortedIterator it(rootStrct, Struct::ANodeSortedIterator::cmpByMetric(m_sortby->id()), filter, false/*leavesOnly*/);\n    for (; it.current(); it++) {\n      Struct::ANode* strct = it.current();\n      for (uint i = 0; i < m_mMgr.size(); ++i) {\n\tcolFmt.genCol(i, strct->metric(i), rootStrct->metric(i));\n      }\n      os << \" \" << strct->nameQual() << std::endl;\n    }\n  }\n  os << std::endl;\n}\n\n\nvoid\nDriver::write_txt_annotateFile(std::ostream& os,\n\t\t\t       Analysis::TextUtil::ColumnFormatter& colFmt,\n\t\t\t       const Prof::Struct::File* fileStrct) const\n{\n  const string& fnm = fileStrct->name();\n  const string& fnm_qual = fileStrct->nameQual();\n\n  string title = \"Annotated file (statement/line level): \" + fnm_qual;\n  write_txt_hdr(os, title);\n  \n  std::istream* is = NULL;\n  try {\n    is = IOUtil::OpenIStream(fnm.c_str());\n  }\n  catch (const Diagnostics::Exception& /*ex*/) {\n    os << \"  Cannot open.\\n\" << std::endl;\n    return;\n  }\n\n  //-------------------------------------------------------\n  //\n  //-------------------------------------------------------\n\n  Prof::Struct::Root* rootStrct = m_structure.root();\n  const uint linew = 5;\n  string linetxt;\n  SrcFile::ln ln_file = 1; // line number *after* next getline\n\n  Prof::Struct::ANodeSortedIterator\n    it(fileStrct,\n       Prof::Struct::ANodeSortedIterator::cmpByLine,\n       &Prof::Struct::ANodeTyFilter[Prof::Struct::ANode::TyStmt]);\n  for (Prof::Struct::ANode* node = NULL; (node = it.current()); it++) {\n    Prof::Struct::ACodeNode* strct =\n      dynamic_cast<Prof::Struct::ACodeNode*>(node); // always true\n    SrcFile::ln ln_metric = strct->begLine();\n\n    // Advance ln_file to just before ln_metric, if necessary\n    while (ln_file < ln_metric && is->good()) {\n      std::getline(*is, linetxt);\n      os << std::setw(linew) << std::setfill(' ') << ln_file;\n      colFmt.genBlankCols();\n      os << \" \" << linetxt << std::endl;\n      ln_file++;\n    }\n\n    // INVARIANT: isValid(ln_metric) ==> ln_metric == ln_file\n    //DIAG_Assert(Logic::implies(SrcFile::isValid(ln_metric), ln_metric == ln_file, DIAG_UnexpectedInput);\n    \n    // Generate columns for ln_metric\n    os << std::setw(linew) << std::setfill(' ') << ln_metric;\n    for (uint i = 0; i < m_mMgr.size(); ++i) {\n      colFmt.genCol(i, strct->metric(i), rootStrct->metric(i));\n    }\n\n    // Generate source file line for ln_metric, if necessary\n    if (SrcFile::isValid(ln_metric)) {\n      std::getline(*is, linetxt);\n      os << \" \" << linetxt;\n      ln_file++;\n    }\n    os << std::endl;\n  }\n  \n  // Finish generating file, if necessary\n  for ( ; is->good(); ln_file++) {\n    std::getline(*is, linetxt);\n    os << std::setw(linew) << std::setfill(' ') << ln_file;\n    colFmt.genBlankCols();\n    os << \" \" << linetxt << std::endl;\n  }\n\n  //-------------------------------------------------------\n  //\n  //-------------------------------------------------------\n  os << std::endl;\n  IOUtil::CloseStream(is);\n}\n\n\nvoid\nDriver::write_txt_hdr(std::ostream& os, const std::string& hdr) const\n{\n  os << std::setfill('=') << std::setw(77) << \"=\" << std::endl\n     << hdr << std::endl\n     << std::setfill('-') << std::setw(77) << \"-\" << std::endl;\n}\n\n\nvoid\nDriver::write_config(std::ostream &os) const\n{\n  os << \"<HPCPROF>\\n\\n\";\n\n  // title\n  os << \"<TITLE name=\\\"\" << m_args.title << \"\\\"/>\\n\\n\";\n\n  // search paths\n  for (uint i = 0; i < m_args.searchPathTpls.size(); ++i) {\n    const Analysis::PathTuple& x = m_args.searchPathTpls[i];\n    os << \"<PATH name=\\\"\" << x.first << \"\\\" viewname=\\\"\" << x.second <<\"\\\"/>\\n\";\n  }\n  if (!m_args.searchPathTpls.empty()) { os << \"\\n\"; }\n  \n  // structure files\n  for (uint i = 0; i < m_args.structureFiles.size(); ++i) {\n    os << \"<STRUCTURE name=\\\"\" << m_args.structureFiles[i] << \"\\\"/>\\n\";\n  }\n  if (!m_args.structureFiles.empty()) { os << \"\\n\"; }\n\n  // group files\n  for (uint i = 0; i < m_args.groupFiles.size(); ++i) {\n    os << \"<STRUCTURE name=\\\"\" << m_args.groupFiles[i] << \"\\\"/>\\n\";\n  }\n  if (!m_args.groupFiles.empty()) { os << \"\\n\"; }\n\n  // metrics\n  for (uint i = 0; i < m_mMgr.size(); i++) {\n    using namespace Prof;\n    const Metric::ADesc* m = m_mMgr.metric(i);\n    const Metric::SampledDesc* mm = dynamic_cast<const Metric::SampledDesc*>(m);\n    if (mm) {\n      const char* sortbystr = ((i == 0) ? \" sortBy=\\\"true\\\"\" : \"\");\n      os << \"<METRIC name=\\\"\" << m->name()\n\t << \"\\\" displayName=\\\"\" << m->name() << \"\\\"\"\n\t << sortbystr << \">\\n\";\n      os << \"  <FILE name=\\\"\" << mm->profileName()\n\t << \"\\\" select=\\\"\" << mm->profileRelId()\n\t << \"\\\" type=\\\"\" << mm->profileType() << \"\\\"/>\\n\";\n      os << \"</METRIC>\\n\\n\";\n    }\n  }\n  if (!m_mMgr.empty()) { os << \"\\n\"; }\n  \n  os << \"</HPCPROF>\\n\";\n}\n\n\nstring\nDriver::toString() const\n{\n  string s =  string(\"Driver: \" )\n    + \"title=\" + m_args.title + \" \" // + \"path=\" + path;\n    + \"\\nm_metrics::\\n\"\n    + m_mMgr.toString();\n  return s;\n}\n\n\nvoid\nDriver::dump() const\n{\n  std::cerr << toString() << std::endl;\n}\n\n\n} // namespace Flat\n\n} // namespace Analysis\n\n\n//****************************************************************************\n\nnamespace Analysis {\n\nnamespace Flat {\n\n\nvoid\nDriver::populateStructure(Prof::Struct::Tree& structure)\n{\n  DriverDocHandlerArgs docargs(this);\n  \n  //-------------------------------------------------------\n  // if Structure has been provided, use it to initialize the\n  // structure of the scope tree\n  //-------------------------------------------------------\n  Prof::Struct::readStructure(structure, m_args.structureFiles,\n\t\t\t      PGMDocHandler::Doc_STRUCT, docargs);\n  \n  //-------------------------------------------------------\n  // FIXME: OBSOLETE\n  // if a PGM/Group document has been provided, use it to form the\n  // group partitions (as wall as initialize/extend the scope tree)\n  //-------------------------------------------------------\n  Prof::Struct::readStructure(structure, m_args.groupFiles,\n\t\t\t      PGMDocHandler::Doc_GROUP, docargs);\n}\n\n\nvoid\nDriver::correlateMetricsWithStructure(Prof::Metric::Mgr& mMgr,\n\t\t\t\t      Prof::Struct::Tree& structure)\n{\n  computeRawMetrics(mMgr, structure);\n  \n  // NOTE: Pruning the structure tree now (as opposed to after\n  // computing derived metrics) can significantly speed up the\n  // computation of derived metrics.  Technically, this may not be\n  // correct, since a derived metric could simply add a constant to\n  // every value of a raw metric, potentially creating 'unprunable'\n  // nodes from those that would otherwise be prunable.  However, any\n  // sane computed metric will not have this property.\n  structure.root()->pruneByMetrics();\n\n  computeDerivedMetrics(mMgr, structure);\n}\n\n\n//----------------------------------------------------------------------------\n\nvoid\nDriver::computeRawMetrics(Prof::Metric::Mgr& mMgr, Prof::Struct::Tree& structure)\n{\n  StringToBoolMap hasStructureTbl;\n  \n  const Prof::Metric::Mgr::StringToADescVecMap& fnameToFMetricMap =\n    mMgr.fnameToFMetricMap();\n\n  //-------------------------------------------------------\n  // Insert performance data into scope tree leaves.  Batch several\n  // profile files to one load module to amortize the overhead of\n  // reading symbol tables and debugging information.\n  //-------------------------------------------------------\n  Prof::Metric::Mgr::StringToADescVecMap::const_iterator it =\n    fnameToFMetricMap.begin();\n  \n  ProfToMetricsTupleVec batchJob;\n  while (getNextRawBatch(batchJob, it, fnameToFMetricMap.end())) {\n\n    //-------------------------------------------------------\n    // FIXME: Assume that each profile file has an idential epoch.\n    // This will have to change when true dlopen support is available.\n    //-------------------------------------------------------\n\n    string prev_lmname_orig;\n\n    // For each load module: process the batch job.  A batch job\n    // process a group of profile files (and their associated metrics)\n    // by load module.\n    Prof::Flat::ProfileData* prof = batchJob[0].first;\n    for (Prof::Flat::ProfileData::const_iterator it1 = prof->begin();\n\t it1 != prof->end(); ++it1) {\n      \n      const string lmname_orig = it1->first;\n      if (lmname_orig == prev_lmname_orig) {\n\t// Skip multiple entries for same LM.  This is sufficient\n\t// b/c iteration proceeds in sorted fashion.\n\tcontinue;\n      }\n      prev_lmname_orig = lmname_orig;\n\n      const string lmname = replacePath(lmname_orig);\n      \n      bool useStruct = hasStructure(lmname, structure, hasStructureTbl);\n      computeRawBatchJob_LM(lmname, lmname_orig, structure, batchJob, useStruct);\n    }\n    \n    clearRawBatch(batchJob);\n  }\n\n  //-------------------------------------------------------\n  // Accumulate leaves to interior nodes, if necessary\n  //-------------------------------------------------------\n\n  if (m_args.profflat_computeFinalMetricValues || mMgr.hasDerived()) {\n    // 1. Compute batch jobs: all raw metrics are independent of each\n    //    other and therefore may be computed en masse.\n    VMAIntervalSet ivalset; // cheat using a VMAInterval set\n\n    for (uint i = 0; i < mMgr.size(); i++) {\n      Prof::Metric::ADesc* m = mMgr.metric(i);\n      Prof::Metric::SampledDesc* mm =\n\tdynamic_cast<Prof::Metric::SampledDesc*>(m);\n      if (mm) {\n\tivalset.insert(VMAInterval(m->id(), m->id() + 1)); // [ )\n\tmm->computedType(Prof::Metric::ADesc::ComputedTy_Final); // proleptic\n\tmm->type(Prof::Metric::ADesc::TyExcl);\n      }\n    }\n    \n    // 2. Now execute the batch jobs\n    for (VMAIntervalSet::iterator it1 = ivalset.begin();\n\t it1 != ivalset.end(); ++it1) {\n      const VMAInterval& ival = *it1;\n      structure.root()->aggregateMetrics((uint)ival.beg(), (uint)ival.end());\n    }\n  }\n}\n\n\nvoid\nDriver::computeRawBatchJob_LM(const string& lmname, const string& lmname_orig,\n\t\t\t      Prof::Struct::Tree& structure,\n\t\t\t      ProfToMetricsTupleVec& profToMetricsVec,\n\t\t\t      bool useStruct)\n{\n  BinUtil::LM* lm = openLM(lmname);\n  if (!lm) {\n    return;\n  }\n\n  if (!useStruct) {\n    std::set<std::string> dir;  // empty set of measurement directories\n    lm->read(dir, BinUtil::LM::ReadFlg_Seg);\n  }\n\n  Prof::Struct::LM* lmStrct =\n    Prof::Struct::LM::demand(structure.root(), lmname);\n\n  for (uint i = 0; i < profToMetricsVec.size(); ++i) {\n\n    Prof::Flat::ProfileData* prof = profToMetricsVec[i].first;\n    Prof::Metric::ADescVec* metrics = profToMetricsVec[i].second;\n\n    \n    using Prof::Flat::ProfileData;\n    std::pair<ProfileData::iterator, ProfileData::iterator> fnd =\n      prof->equal_range(lmname_orig);\n    if (fnd.first == prof->end()) {\n      DIAG_WMsg(1, \"Cannot find LM \" << lmname_orig << \" within \"\n\t\t<< prof->name() << \".\");\n      continue;\n    }\n\n    //-------------------------------------------------------\n    // For each Prof::Flat::LM that matches lmname_orig\n    //-------------------------------------------------------\n    for (ProfileData::iterator it = fnd.first; it != fnd.second; ++it) {\n      Prof::Flat::LM* proflm = it->second;\n    \n      //-------------------------------------------------------\n      // For each metric, insert performance data into scope tree\n      //-------------------------------------------------------\n      using namespace Prof;\n      for (Metric::ADescVec::iterator it1 = metrics->begin();\n\t   it1 != metrics->end(); ++it1) {\n\tMetric::SampledDesc* m = dynamic_cast<Metric::SampledDesc*>(*it1);\n\tDIAG_Assert(m->isUnitsEvents(), \"Assume metric's units is events!\");\n\tuint mIdx = (uint)StrUtil::toUInt64(m->profileRelId());\n\tconst Prof::Flat::EventData& profevent = proflm->event(mIdx);\n\tif (!m->period()) {\n\t  // N.B.: 'period' is missing when metric's provenance is config file\n\t  m->period(profevent.mdesc().period());\n\t}\n\t\n\tcorrelateRaw(m, profevent, proflm->load_addr(),\n\t\t     structure, lmStrct, lm, useStruct);\n      }\n    }\n  }\n\n  delete lm;\n}\n\n\n// With structure information (an object code to source structure\n// map), correlation is by VMA.  Otherwise correlation is performed\n// using file, function and line debugging information.\nvoid\nDriver::correlateRaw(Prof::Metric::ADesc* metric,\n\t\t     const Prof::Flat::EventData& profevent,\n\t\t     VMA lm_load_addr,\n\t\t     Prof::Struct::Tree& GCC_ATTR_UNUSED structure,\n\t\t     Prof::Struct::LM* lmStrct,\n\t\t     /*const*/ BinUtil::LM* lm,\n\t\t     bool useStruct)\n{\n  ulong period = profevent.mdesc().period();\n  bool doUnrelocate = lm->doUnrelocate(lm_load_addr);\n\n  uint numMetrics = m_mMgr.size();\n\n  for (uint i = 0; i < profevent.num_data(); ++i) {\n    const Prof::Flat::Datum& dat = profevent.datum(i);\n    VMA vma = dat.first; // relocated VMA\n    uint32_t samples = dat.second;\n    double events = samples * (double)period; // samples * (events/sample)\n    \n    // 1. Unrelocate vma.\n    VMA vma_ur = (doUnrelocate) ? (vma - lm_load_addr) : vma;\n\t\n    // 2. Find associated scope and insert into scope tree\n    Prof::Struct::ANode* strct =\n      Util::demandStructure(vma_ur, lmStrct, lm, useStruct);\n\n    strct->demandMetric(metric->id(), numMetrics/*size*/) += events;\n    DIAG_DevMsg(6, \"Metric associate: \"\n\t\t<< metric->name() << \":0x\" << hex << vma_ur << dec\n\t\t<< \" --> +\" << events << \"=\"\n\t\t<< strct->metric(metric->id()) << \" :: \" << strct->toXML());\n  }\n}\n\n\n\n// A batch is a vector of [Prof::Flat::Profile, <metric-vector>] pairs\nbool\nDriver::getNextRawBatch(ProfToMetricsTupleVec& batchJob,\n\t\t\tProf::Metric::Mgr::StringToADescVecMap::const_iterator& it,\n\t\t\tconst Prof::Metric::Mgr::StringToADescVecMap::const_iterator& it_end)\n{\n  for (uint i = 0; i < profileBatchSz; ++i) {\n    if (it != it_end) {\n      const string& fnm = it->first;\n      Prof::Metric::ADescVec& metrics =\n\tconst_cast<Prof::Metric::ADescVec&>(it->second);\n      Prof::Flat::ProfileData* prof = readProf(fnm);\n      batchJob.push_back(make_pair(prof, &metrics));\n      it++;\n    }\n    else {\n      break;\n    }\n  }\n\n  bool haswork = !batchJob.empty();\n  return haswork;\n}\n\n\nvoid\nDriver::clearRawBatch(ProfToMetricsTupleVec& batchJob)\n{\n  for (uint i = 0; i < batchJob.size(); ++i) {\n    ProfToMetricsTuple& tup = batchJob[i];\n    delete tup.first;\n  }\n  batchJob.clear();\n}\n\n\nbool\nDriver::hasStructure(const string& lmname, Prof::Struct::Tree& structure,\n\t\t     StringToBoolMap& hasStructureTbl)\n{\n  // hasStructure's test depdends on the *initial* structure information\n  StringToBoolMap::iterator it = hasStructureTbl.find(lmname);\n  if (it != hasStructureTbl.end()) {\n    return it->second; // memoized answer\n  }\n  else {\n    Prof::Struct::LM* lmStrct =\n      Prof::Struct::LM::demand(structure.root(), lmname);\n    bool hasStruct = (!lmStrct->isLeaf());\n    hasStructureTbl.insert(make_pair(lmname, hasStruct));\n    if (!hasStruct && !m_args.structureFiles.empty()) {\n      DIAG_WMsg(2, \"No STRUCTURE for \" << lmname << \".\");\n    }\n    return hasStruct;\n  }\n}\n\n\n//----------------------------------------------------------------------------\n\nvoid\nDriver::computeDerivedMetrics(Prof::Metric::Mgr& mMgr,\n\t\t\t      Prof::Struct::Tree& structure)\n{\n  using namespace Prof;\n\n  // INVARIANT: All raw metrics have interior (and leaf) values before\n  // derived metrics are computed.\n\n  // 1. Compute batch jobs: a derived metric with id 'x' only depends\n  //    on metrics with id's strictly less than 'x'.\n  VMAIntervalSet ivalset; // cheat using a VMAInterval set\n  const Metric::AExpr** mExprVec = new const Metric::AExpr*[mMgr.size()];\n\n  for (uint i = 0; i < mMgr.size(); i++) {\n    Metric::ADesc* m = mMgr.metric(i);\n    Metric::DerivedDesc* mm = dynamic_cast<Metric::DerivedDesc*>(m);\n    if (mm) {\n      ivalset.insert(VMAInterval(m->id(), m->id() + 1)); // [ )\n      mExprVec[i] = mm->expr();\n      mm->computedType(Prof::Metric::ADesc::ComputedTy_Final); // proleptic\n      mm->type(Prof::Metric::ADesc::TyExcl);\n    }\n  }\n  \n  // 2. Now execute the batch jobs\n  for (VMAIntervalSet::iterator it = ivalset.begin();\n       it != ivalset.end(); ++it) {\n    const VMAInterval& ival = *it;\n    computeDerivedBatch(structure, mExprVec,\n\t\t\t(uint)ival.beg(), (uint)ival.end());\n  }\n\n  delete[] mExprVec;\n}\n\n\nvoid\nDriver::computeDerivedBatch(Prof::Struct::Tree& structure,\n\t\t\t    const Prof::Metric::AExpr** mExprVec,\n\t\t\t    uint mBegId, uint mEndId)\n{\n  // N.B. pre-order walk assumes point-wise metrics\n  // Cf. Prof::CCT::ANode::computeMetrics() && computeMetricsIncr().\n\n  Prof::Struct::Root* strct = structure.root();\n  uint numMetrics = m_mMgr.size();\n\n  for (Prof::Struct::ANodeIterator it(strct); it.Current(); it++) {\n    for (uint mId = mBegId; mId < mEndId; ++mId) {\n      const Prof::Metric::AExpr* expr = mExprVec[mId];\n      if (expr) {\n\tdouble val = expr->eval(*it.current());\n\t// if (!Prof::Metric::AExpr::isok(val)) ...\n\tit.current()->demandMetric(mId, numMetrics/*size*/) = val;\n      }\n    }\n  }\n}\n\n\n\n//----------------------------------------------------------------------------\n\nProf::Flat::ProfileData*\nDriver::readProf(const string& fnm)\n{\n  Prof::Flat::ProfileData* prof = new Prof::Flat::ProfileData(fnm.c_str());\n  readProf(prof);\n  return prof;\n}\n\n\nvoid\nDriver::readProf(Prof::Flat::ProfileData* prof)\n{\n  try {\n    prof->openread();\n  }\n  catch (...) {\n    DIAG_EMsg(\"While reading '\" << prof->name() << \"'\");\n    throw;\n  }\n}\n\n\nBinUtil::LM*\nDriver::openLM(const string& fnm)\n{\n  BinUtil::LM* lm = NULL;\n  try {\n    lm = new BinUtil::LM();\n    lm->open(fnm.c_str());\n  }\n  catch (const BinUtil::Exception& x) {\n    DIAG_EMsg(\"While opening \" << fnm.c_str() << \":\\n\" << x.message());\n  }\n  catch (...) {\n    DIAG_EMsg(\"Exception encountered while opening \" << fnm.c_str());\n  }\n  return lm;\n}\n\n\n} // namespace Flat\n\n} // namespace Analysis\n\n//****************************************************************************\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/.git/objects/pack/pack-0175947e3d9491bbdc8ae2ad568c944732af221d.pack",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/.git/objects/pack/pack-0175947e3d9491bbdc8ae2ad568c944732af221d.idx",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/tools/latex2man/latex2man.cfg",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/tools/latex2man/latex2man.html",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/tools/latex2man/latex2man.ORIG",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/tools/latex2man/latex2man.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/tools/latex2man/latex2man.txt",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/tools/latex2man/latex2man.texi",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/tools/latex2man/latex2man.tex",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/tools/latex2man/latex2man.1",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/tools/latex2man/latex2man.info",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/tools/latex2man/latex2man.trans",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/tools/latex2man/latex2man.sty",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/HPCToolkit-users-manual.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-view-rawmetrics.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-button-derivedmetric.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-filter-children.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-dialog-derived-metric.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-filter-self.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-button-graph.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-button-go-north.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-button-save.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-thread-table.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/cycles-per-inst.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-filter-children.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-dialog-checkcolumns.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-button-minimize.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-callpath-legend.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-filter-window.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/metrics-callers.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-button-open.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-button-csv.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/flash-scalability.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-dialog-mapping.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctoolkit-workflow.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/fp-efficiency.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-menu-context-sensitive.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-button-checkcolumns.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-filter-self_children.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/metrics-cct.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/fp-efficiency-loop.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-button-redo.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctoolkit-thread-centric.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-filter-cct.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/metrics-flat.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-button-undo.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/fpwaste.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-callpath.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-button-maximize.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-dialog-filter.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-button-zoom-out-time.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-legend.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-legend.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctoolkit-time-centric.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-button-flatten.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-button-fontminus.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-button-zoomout.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-filter-cct.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-concept-filter.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/scaling-loss.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-button-zoom-in-time.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-button-unflatten.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-filter-self.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-button-hotpath.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-button-go-west.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-button-home-screen.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-filter-self_children.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-button-zoom-in-process.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-thread.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/cycles-per-inst-2.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-button-zoom-out-process.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/scaling-loss-2.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-snapshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-button-zoomin.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-button-go-south.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-button-fontplus.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctraceviewer-button-go-east.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpctoolkit-code-centric.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/manual/fig/hpcviewer-legend.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/man/hpctoolkit-latex2man.trans",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/www/fig/hpctoolkit-workflow.png",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/www/fig/spacer.gif",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/www/fig/hpcviewer-annotated-screenshot.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-hpctoolkit-2019.08.14-hnbqjkvq7xc264pwl22j6rz7jvuu2tp4/spack-src/doc/www/style/header.gif"
    ],
    "total_files": 1032
}