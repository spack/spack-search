{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/pygments/lexers/julia.py": "# -*- coding: utf-8 -*-\n\"\"\"\n    pygments.lexers.julia\n    ~~~~~~~~~~~~~~~~~~~~~\n\n    Lexers for the Julia language.\n\n    :copyright: Copyright 2006-2014 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport re\n\nfrom pygments.lexer import Lexer, RegexLexer, bygroups, combined, do_insertions\nfrom pygments.token import Text, Comment, Operator, Keyword, Name, String, \\\n    Number, Punctuation, Generic\nfrom pygments.util import shebang_matches\n\n__all__ = ['JuliaLexer', 'JuliaConsoleLexer']\n\n\nclass JuliaLexer(RegexLexer):\n    \"\"\"\n    For `Julia <http://julialang.org/>`_ source code.\n\n    .. versionadded:: 1.6\n    \"\"\"\n    name = 'Julia'\n    aliases = ['julia', 'jl']\n    filenames = ['*.jl']\n    mimetypes = ['text/x-julia', 'application/x-julia']\n\n    builtins = [\n        'exit', 'whos', 'edit', 'load', 'is', 'isa', 'isequal', 'typeof', 'tuple',\n        'ntuple', 'uid', 'hash', 'finalizer', 'convert', 'promote', 'subtype',\n        'typemin', 'typemax', 'realmin', 'realmax', 'sizeof', 'eps', 'promote_type',\n        'method_exists', 'applicable', 'invoke', 'dlopen', 'dlsym', 'system',\n        'error', 'throw', 'assert', 'new', 'Inf', 'Nan', 'pi', 'im',\n    ]\n\n    tokens = {\n        'root': [\n            (r'\\n', Text),\n            (r'[^\\S\\n]+', Text),\n            (r'#=', Comment.Multiline, \"blockcomment\"),\n            (r'#.*$', Comment),\n            (r'[]{}:(),;[@]', Punctuation),\n            (r'\\\\\\n', Text),\n            (r'\\\\', Text),\n\n            # keywords\n            (r'(begin|while|for|in|return|break|continue|'\n             r'macro|quote|let|if|elseif|else|try|catch|end|'\n             r'bitstype|ccall|do|using|module|import|export|'\n             r'importall|baremodule|immutable)\\b', Keyword),\n            (r'(local|global|const)\\b', Keyword.Declaration),\n            (r'(Bool|Int|Int8|Int16|Int32|Int64|Uint|Uint8|Uint16|Uint32|Uint64'\n             r'|Float32|Float64|Complex64|Complex128|Any|Nothing|None)\\b',\n                Keyword.Type),\n\n            # functions\n            (r'(function)((?:\\s|\\\\\\s)+)',\n                bygroups(Keyword, Name.Function), 'funcname'),\n\n            # types\n            (r'(type|typealias|abstract)((?:\\s|\\\\\\s)+)',\n                bygroups(Keyword, Name.Class), 'typename'),\n\n            # operators\n            (r'==|!=|<=|>=|->|&&|\\|\\||::|<:|[-~+/*%=<>&^|.?!$]', Operator),\n            (r'\\.\\*|\\.\\^|\\.\\\\|\\.\\/|\\\\', Operator),\n\n            # builtins\n            ('(' + '|'.join(builtins) + r')\\b',  Name.Builtin),\n\n            # backticks\n            (r'`(?s).*?`', String.Backtick),\n\n            # chars\n            (r\"'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,3}|\\\\u[a-fA-F0-9]{1,4}|\"\n             r\"\\\\U[a-fA-F0-9]{1,6}|[^\\\\\\'\\n])'\", String.Char),\n\n            # try to match trailing transpose\n            (r'(?<=[.\\w)\\]])\\'+', Operator),\n\n            # strings\n            (r'(?:[IL])\"', String, 'string'),\n            (r'[E]?\"', String, combined('stringescape', 'string')),\n\n            # names\n            (r'@[\\w.]+', Name.Decorator),\n            (r'[a-zA-Z_]\\w*', Name),\n\n            # numbers\n            (r'(\\d+(_\\d+)+\\.\\d*|\\d*\\.\\d+(_\\d+)+)([eEf][+-]?[0-9]+)?', Number.Float),\n            (r'(\\d+\\.\\d*|\\d*\\.\\d+)([eEf][+-]?[0-9]+)?', Number.Float),\n            (r'\\d+(_\\d+)+[eEf][+-]?[0-9]+', Number.Float),\n            (r'\\d+[eEf][+-]?[0-9]+', Number.Float),\n            (r'0b[01]+(_[01]+)+', Number.Bin),\n            (r'0b[01]+', Number.Bin),\n            (r'0o[0-7]+(_[0-7]+)+', Number.Oct),\n            (r'0o[0-7]+', Number.Oct),\n            (r'0x[a-fA-F0-9]+(_[a-fA-F0-9]+)+', Number.Hex),\n            (r'0x[a-fA-F0-9]+', Number.Hex),\n            (r'\\d+(_\\d+)+', Number.Integer),\n            (r'\\d+', Number.Integer)\n        ],\n\n        'funcname': [\n            ('[a-zA-Z_]\\w*', Name.Function, '#pop'),\n            ('\\([^\\s\\w{]{1,2}\\)', Operator, '#pop'),\n            ('[^\\s\\w{]{1,2}', Operator, '#pop'),\n        ],\n\n        'typename': [\n            ('[a-zA-Z_]\\w*', Name.Class, '#pop')\n        ],\n\n        'stringescape': [\n            (r'\\\\([\\\\abfnrtv\"\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|'\n             r'U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})', String.Escape)\n        ],\n        \"blockcomment\": [\n            (r'[^=#]', Comment.Multiline),\n            (r'#=', Comment.Multiline, '#push'),\n            (r'=#', Comment.Multiline, '#pop'),\n            (r'[=#]', Comment.Multiline),\n        ],\n        'string': [\n            (r'\"', String, '#pop'),\n            (r'\\\\\\\\|\\\\\"|\\\\\\n', String.Escape),  # included here for raw strings\n            (r'\\$(\\(\\w+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?',\n                String.Interpol),\n            (r'[^\\\\\"$]+', String),\n            # quotes, dollar signs, and backslashes must be parsed one at a time\n            (r'[\"\\\\]', String),\n            # unhandled string formatting sign\n            (r'\\$', String)\n        ],\n    }\n\n    def analyse_text(text):\n        return shebang_matches(text, r'julia')\n\n\nline_re  = re.compile('.*?\\n')\n\n\nclass JuliaConsoleLexer(Lexer):\n    \"\"\"\n    For Julia console sessions. Modeled after MatlabSessionLexer.\n\n    .. versionadded:: 1.6\n    \"\"\"\n    name = 'Julia console'\n    aliases = ['jlcon']\n\n    def get_tokens_unprocessed(self, text):\n        jllexer = JuliaLexer(**self.options)\n\n        curcode = ''\n        insertions = []\n\n        for match in line_re.finditer(text):\n            line = match.group()\n\n            if line.startswith('julia>'):\n                insertions.append((len(curcode),\n                                   [(0, Generic.Prompt, line[:6])]))\n                curcode += line[6:]\n\n            elif line.startswith('      '):\n\n                idx = len(curcode)\n\n                # without is showing error on same line as before...?\n                line = \"\\n\" + line\n                token = (0, Generic.Traceback, line)\n                insertions.append((idx, [token]))\n\n            else:\n                if curcode:\n                    for item in do_insertions(\n                            insertions, jllexer.get_tokens_unprocessed(curcode)):\n                        yield item\n                    curcode = ''\n                    insertions = []\n\n                yield match.start(), Generic.Output, line\n\n        if curcode:  # or item:\n            for item in do_insertions(\n                    insertions, jllexer.get_tokens_unprocessed(curcode)):\n                yield item\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/tests/cover/pygments_lexers_julia.html": "<!doctype html PUBLIC \"-//W3C//DTD html 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n<head>\n    <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>\n    \n    \n    <meta http-equiv='X-UA-Compatible' content='IE=emulateIE7' />\n    <title>Coverage for pygments.lexers.julia: 71%</title>\n    <link rel='stylesheet' href='style.css' type='text/css'>\n    \n    <script type='text/javascript' src='jquery.min.js'></script>\n    <script type='text/javascript' src='jquery.hotkeys.js'></script>\n    <script type='text/javascript' src='jquery.isonscreen.js'></script>\n    <script type='text/javascript' src='coverage_html.js'></script>\n    <script type='text/javascript' charset='utf-8'>\n        jQuery(document).ready(coverage.pyfile_ready);\n    </script>\n</head>\n<body id='pyfile'>\n\n<div id='header'>\n    <div class='content'>\n        <h1>Coverage for <b>pygments.lexers.julia</b> :\n            <span class='pc_cov'>71%</span>\n        </h1>\n        <img id='keyboard_icon' src='keybd_closed.png'>\n        <h2 class='stats'>\n            42 statements &nbsp;\n            <span class='run hide_run shortkey_r button_toggle_run'>30 run</span>\n            <span class='mis shortkey_m button_toggle_mis'>12 missing</span>\n            <span class='exc shortkey_x button_toggle_exc'>0 excluded</span>\n            \n        </h2>\n    </div>\n</div>\n\n<div class='help_panel'>\n    <img id='panel_icon' src='keybd_open.png'>\n<p class='legend'>Hot-keys on this page</p>\n    <div>\n<p class='keyhelp'>\n        <span class='key'>r</span>\n        <span class='key'>m</span>\n        <span class='key'>x</span>\n        <span class='key'>p</span> &nbsp; toggle line displays\n    </p>\n<p class='keyhelp'>\n        <span class='key'>j</span>\n        <span class='key'>k</span> &nbsp; next/prev highlighted chunk\n    </p>\n<p class='keyhelp'>\n        <span class='key'>0</span> &nbsp; (zero) top of page\n    </p>\n<p class='keyhelp'>\n        <span class='key'>1</span> &nbsp; (one) first highlighted chunk\n    </p>\n    </div>\n</div>\n\n<div id='source'>\n    <table cellspacing='0' cellpadding='0'>\n        <tr>\n            <td class='linenos' valign='top'>\n<p id='n1' class='pln'><a href='#n1'>1</a></p>\n<p id='n2' class='stm run hide_run'><a href='#n2'>2</a></p>\n<p id='n3' class='pln'><a href='#n3'>3</a></p>\n<p id='n4' class='pln'><a href='#n4'>4</a></p>\n<p id='n5' class='pln'><a href='#n5'>5</a></p>\n<p id='n6' class='pln'><a href='#n6'>6</a></p>\n<p id='n7' class='pln'><a href='#n7'>7</a></p>\n<p id='n8' class='pln'><a href='#n8'>8</a></p>\n<p id='n9' class='pln'><a href='#n9'>9</a></p>\n<p id='n10' class='pln'><a href='#n10'>10</a></p>\n<p id='n11' class='pln'><a href='#n11'>11</a></p>\n<p id='n12' class='stm run hide_run'><a href='#n12'>12</a></p>\n<p id='n13' class='pln'><a href='#n13'>13</a></p>\n<p id='n14' class='stm run hide_run'><a href='#n14'>14</a></p>\n<p id='n15' class='stm run hide_run'><a href='#n15'>15</a></p>\n<p id='n16' class='pln'><a href='#n16'>16</a></p>\n<p id='n17' class='stm run hide_run'><a href='#n17'>17</a></p>\n<p id='n18' class='pln'><a href='#n18'>18</a></p>\n<p id='n19' class='stm run hide_run'><a href='#n19'>19</a></p>\n<p id='n20' class='pln'><a href='#n20'>20</a></p>\n<p id='n21' class='pln'><a href='#n21'>21</a></p>\n<p id='n22' class='stm run hide_run'><a href='#n22'>22</a></p>\n<p id='n23' class='pln'><a href='#n23'>23</a></p>\n<p id='n24' class='pln'><a href='#n24'>24</a></p>\n<p id='n25' class='pln'><a href='#n25'>25</a></p>\n<p id='n26' class='pln'><a href='#n26'>26</a></p>\n<p id='n27' class='pln'><a href='#n27'>27</a></p>\n<p id='n28' class='stm run hide_run'><a href='#n28'>28</a></p>\n<p id='n29' class='stm run hide_run'><a href='#n29'>29</a></p>\n<p id='n30' class='stm run hide_run'><a href='#n30'>30</a></p>\n<p id='n31' class='stm run hide_run'><a href='#n31'>31</a></p>\n<p id='n32' class='pln'><a href='#n32'>32</a></p>\n<p id='n33' class='stm run hide_run'><a href='#n33'>33</a></p>\n<p id='n34' class='pln'><a href='#n34'>34</a></p>\n<p id='n35' class='pln'><a href='#n35'>35</a></p>\n<p id='n36' class='pln'><a href='#n36'>36</a></p>\n<p id='n37' class='pln'><a href='#n37'>37</a></p>\n<p id='n38' class='pln'><a href='#n38'>38</a></p>\n<p id='n39' class='pln'><a href='#n39'>39</a></p>\n<p id='n40' class='pln'><a href='#n40'>40</a></p>\n<p id='n41' class='stm run hide_run'><a href='#n41'>41</a></p>\n<p id='n42' class='pln'><a href='#n42'>42</a></p>\n<p id='n43' class='pln'><a href='#n43'>43</a></p>\n<p id='n44' class='pln'><a href='#n44'>44</a></p>\n<p id='n45' class='pln'><a href='#n45'>45</a></p>\n<p id='n46' class='pln'><a href='#n46'>46</a></p>\n<p id='n47' class='pln'><a href='#n47'>47</a></p>\n<p id='n48' class='pln'><a href='#n48'>48</a></p>\n<p id='n49' class='pln'><a href='#n49'>49</a></p>\n<p id='n50' class='pln'><a href='#n50'>50</a></p>\n<p id='n51' class='pln'><a href='#n51'>51</a></p>\n<p id='n52' class='pln'><a href='#n52'>52</a></p>\n<p id='n53' class='pln'><a href='#n53'>53</a></p>\n<p id='n54' class='pln'><a href='#n54'>54</a></p>\n<p id='n55' class='pln'><a href='#n55'>55</a></p>\n<p id='n56' class='pln'><a href='#n56'>56</a></p>\n<p id='n57' class='pln'><a href='#n57'>57</a></p>\n<p id='n58' class='pln'><a href='#n58'>58</a></p>\n<p id='n59' class='pln'><a href='#n59'>59</a></p>\n<p id='n60' class='pln'><a href='#n60'>60</a></p>\n<p id='n61' class='pln'><a href='#n61'>61</a></p>\n<p id='n62' class='pln'><a href='#n62'>62</a></p>\n<p id='n63' class='pln'><a href='#n63'>63</a></p>\n<p id='n64' class='pln'><a href='#n64'>64</a></p>\n<p id='n65' class='pln'><a href='#n65'>65</a></p>\n<p id='n66' class='pln'><a href='#n66'>66</a></p>\n<p id='n67' class='pln'><a href='#n67'>67</a></p>\n<p id='n68' class='pln'><a href='#n68'>68</a></p>\n<p id='n69' class='pln'><a href='#n69'>69</a></p>\n<p id='n70' class='pln'><a href='#n70'>70</a></p>\n<p id='n71' class='pln'><a href='#n71'>71</a></p>\n<p id='n72' class='pln'><a href='#n72'>72</a></p>\n<p id='n73' class='pln'><a href='#n73'>73</a></p>\n<p id='n74' class='pln'><a href='#n74'>74</a></p>\n<p id='n75' class='pln'><a href='#n75'>75</a></p>\n<p id='n76' class='pln'><a href='#n76'>76</a></p>\n<p id='n77' class='pln'><a href='#n77'>77</a></p>\n<p id='n78' class='pln'><a href='#n78'>78</a></p>\n<p id='n79' class='pln'><a href='#n79'>79</a></p>\n<p id='n80' class='pln'><a href='#n80'>80</a></p>\n<p id='n81' class='pln'><a href='#n81'>81</a></p>\n<p id='n82' class='pln'><a href='#n82'>82</a></p>\n<p id='n83' class='pln'><a href='#n83'>83</a></p>\n<p id='n84' class='pln'><a href='#n84'>84</a></p>\n<p id='n85' class='pln'><a href='#n85'>85</a></p>\n<p id='n86' class='pln'><a href='#n86'>86</a></p>\n<p id='n87' class='pln'><a href='#n87'>87</a></p>\n<p id='n88' class='pln'><a href='#n88'>88</a></p>\n<p id='n89' class='pln'><a href='#n89'>89</a></p>\n<p id='n90' class='pln'><a href='#n90'>90</a></p>\n<p id='n91' class='pln'><a href='#n91'>91</a></p>\n<p id='n92' class='pln'><a href='#n92'>92</a></p>\n<p id='n93' class='pln'><a href='#n93'>93</a></p>\n<p id='n94' class='pln'><a href='#n94'>94</a></p>\n<p id='n95' class='pln'><a href='#n95'>95</a></p>\n<p id='n96' class='pln'><a href='#n96'>96</a></p>\n<p id='n97' class='pln'><a href='#n97'>97</a></p>\n<p id='n98' class='pln'><a href='#n98'>98</a></p>\n<p id='n99' class='pln'><a href='#n99'>99</a></p>\n<p id='n100' class='pln'><a href='#n100'>100</a></p>\n<p id='n101' class='pln'><a href='#n101'>101</a></p>\n<p id='n102' class='pln'><a href='#n102'>102</a></p>\n<p id='n103' class='pln'><a href='#n103'>103</a></p>\n<p id='n104' class='pln'><a href='#n104'>104</a></p>\n<p id='n105' class='pln'><a href='#n105'>105</a></p>\n<p id='n106' class='pln'><a href='#n106'>106</a></p>\n<p id='n107' class='pln'><a href='#n107'>107</a></p>\n<p id='n108' class='pln'><a href='#n108'>108</a></p>\n<p id='n109' class='pln'><a href='#n109'>109</a></p>\n<p id='n110' class='pln'><a href='#n110'>110</a></p>\n<p id='n111' class='pln'><a href='#n111'>111</a></p>\n<p id='n112' class='pln'><a href='#n112'>112</a></p>\n<p id='n113' class='pln'><a href='#n113'>113</a></p>\n<p id='n114' class='pln'><a href='#n114'>114</a></p>\n<p id='n115' class='pln'><a href='#n115'>115</a></p>\n<p id='n116' class='pln'><a href='#n116'>116</a></p>\n<p id='n117' class='pln'><a href='#n117'>117</a></p>\n<p id='n118' class='pln'><a href='#n118'>118</a></p>\n<p id='n119' class='pln'><a href='#n119'>119</a></p>\n<p id='n120' class='pln'><a href='#n120'>120</a></p>\n<p id='n121' class='pln'><a href='#n121'>121</a></p>\n<p id='n122' class='pln'><a href='#n122'>122</a></p>\n<p id='n123' class='pln'><a href='#n123'>123</a></p>\n<p id='n124' class='pln'><a href='#n124'>124</a></p>\n<p id='n125' class='pln'><a href='#n125'>125</a></p>\n<p id='n126' class='pln'><a href='#n126'>126</a></p>\n<p id='n127' class='pln'><a href='#n127'>127</a></p>\n<p id='n128' class='pln'><a href='#n128'>128</a></p>\n<p id='n129' class='pln'><a href='#n129'>129</a></p>\n<p id='n130' class='pln'><a href='#n130'>130</a></p>\n<p id='n131' class='pln'><a href='#n131'>131</a></p>\n<p id='n132' class='pln'><a href='#n132'>132</a></p>\n<p id='n133' class='pln'><a href='#n133'>133</a></p>\n<p id='n134' class='pln'><a href='#n134'>134</a></p>\n<p id='n135' class='pln'><a href='#n135'>135</a></p>\n<p id='n136' class='pln'><a href='#n136'>136</a></p>\n<p id='n137' class='pln'><a href='#n137'>137</a></p>\n<p id='n138' class='pln'><a href='#n138'>138</a></p>\n<p id='n139' class='pln'><a href='#n139'>139</a></p>\n<p id='n140' class='pln'><a href='#n140'>140</a></p>\n<p id='n141' class='pln'><a href='#n141'>141</a></p>\n<p id='n142' class='stm run hide_run'><a href='#n142'>142</a></p>\n<p id='n143' class='stm run hide_run'><a href='#n143'>143</a></p>\n<p id='n144' class='pln'><a href='#n144'>144</a></p>\n<p id='n145' class='pln'><a href='#n145'>145</a></p>\n<p id='n146' class='stm run hide_run'><a href='#n146'>146</a></p>\n<p id='n147' class='pln'><a href='#n147'>147</a></p>\n<p id='n148' class='pln'><a href='#n148'>148</a></p>\n<p id='n149' class='stm run hide_run'><a href='#n149'>149</a></p>\n<p id='n150' class='pln'><a href='#n150'>150</a></p>\n<p id='n151' class='pln'><a href='#n151'>151</a></p>\n<p id='n152' class='pln'><a href='#n152'>152</a></p>\n<p id='n153' class='pln'><a href='#n153'>153</a></p>\n<p id='n154' class='pln'><a href='#n154'>154</a></p>\n<p id='n155' class='stm run hide_run'><a href='#n155'>155</a></p>\n<p id='n156' class='stm run hide_run'><a href='#n156'>156</a></p>\n<p id='n157' class='pln'><a href='#n157'>157</a></p>\n<p id='n158' class='stm run hide_run'><a href='#n158'>158</a></p>\n<p id='n159' class='stm run hide_run'><a href='#n159'>159</a></p>\n<p id='n160' class='pln'><a href='#n160'>160</a></p>\n<p id='n161' class='stm run hide_run'><a href='#n161'>161</a></p>\n<p id='n162' class='stm run hide_run'><a href='#n162'>162</a></p>\n<p id='n163' class='pln'><a href='#n163'>163</a></p>\n<p id='n164' class='stm run hide_run'><a href='#n164'>164</a></p>\n<p id='n165' class='stm run hide_run'><a href='#n165'>165</a></p>\n<p id='n166' class='pln'><a href='#n166'>166</a></p>\n<p id='n167' class='stm run hide_run'><a href='#n167'>167</a></p>\n<p id='n168' class='stm mis'><a href='#n168'>168</a></p>\n<p id='n169' class='pln'><a href='#n169'>169</a></p>\n<p id='n170' class='stm mis'><a href='#n170'>170</a></p>\n<p id='n171' class='pln'><a href='#n171'>171</a></p>\n<p id='n172' class='stm run hide_run'><a href='#n172'>172</a></p>\n<p id='n173' class='pln'><a href='#n173'>173</a></p>\n<p id='n174' class='stm mis'><a href='#n174'>174</a></p>\n<p id='n175' class='pln'><a href='#n175'>175</a></p>\n<p id='n176' class='pln'><a href='#n176'>176</a></p>\n<p id='n177' class='stm mis'><a href='#n177'>177</a></p>\n<p id='n178' class='stm mis'><a href='#n178'>178</a></p>\n<p id='n179' class='stm mis'><a href='#n179'>179</a></p>\n<p id='n180' class='pln'><a href='#n180'>180</a></p>\n<p id='n181' class='pln'><a href='#n181'>181</a></p>\n<p id='n182' class='stm run hide_run'><a href='#n182'>182</a></p>\n<p id='n183' class='stm mis'><a href='#n183'>183</a></p>\n<p id='n184' class='pln'><a href='#n184'>184</a></p>\n<p id='n185' class='stm mis'><a href='#n185'>185</a></p>\n<p id='n186' class='stm mis'><a href='#n186'>186</a></p>\n<p id='n187' class='stm mis'><a href='#n187'>187</a></p>\n<p id='n188' class='pln'><a href='#n188'>188</a></p>\n<p id='n189' class='stm run hide_run'><a href='#n189'>189</a></p>\n<p id='n190' class='pln'><a href='#n190'>190</a></p>\n<p id='n191' class='stm run hide_run'><a href='#n191'>191</a></p>\n<p id='n192' class='stm mis'><a href='#n192'>192</a></p>\n<p id='n193' class='pln'><a href='#n193'>193</a></p>\n<p id='n194' class='stm mis'><a href='#n194'>194</a></p>\n                \n            </td>\n            <td class='text' valign='top'>\n<p id='t1' class='pln'><span class='com'># -*- coding: utf-8 -*-</span><span class='strut'>&nbsp;</span></p>\n<p id='t2' class='stm run hide_run'><span class='str'>&quot;&quot;&quot;</span><span class='strut'>&nbsp;</span></p>\n<p id='t3' class='pln'><span class='str'>&nbsp; &nbsp; pygments.lexers.julia</span><span class='strut'>&nbsp;</span></p>\n<p id='t4' class='pln'><span class='str'>&nbsp; &nbsp; ~~~~~~~~~~~~~~~~~~~~~</span><span class='strut'>&nbsp;</span></p>\n<p id='t5' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t6' class='pln'><span class='str'>&nbsp; &nbsp; Lexers for the Julia language.</span><span class='strut'>&nbsp;</span></p>\n<p id='t7' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t8' class='pln'><span class='str'>&nbsp; &nbsp; :copyright: Copyright 2006-2014 by the Pygments team, see AUTHORS.</span><span class='strut'>&nbsp;</span></p>\n<p id='t9' class='pln'><span class='str'>&nbsp; &nbsp; :license: BSD, see LICENSE for details.</span><span class='strut'>&nbsp;</span></p>\n<p id='t10' class='pln'><span class='str'>&quot;&quot;&quot;</span><span class='strut'>&nbsp;</span></p>\n<p id='t11' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t12' class='stm run hide_run'><span class='key'>import</span> <span class='nam'>re</span><span class='strut'>&nbsp;</span></p>\n<p id='t13' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t14' class='stm run hide_run'><span class='key'>from</span> <span class='nam'>pygments</span><span class='op'>.</span><span class='nam'>lexer</span> <span class='key'>import</span> <span class='nam'>Lexer</span><span class='op'>,</span> <span class='nam'>RegexLexer</span><span class='op'>,</span> <span class='nam'>bygroups</span><span class='op'>,</span> <span class='nam'>combined</span><span class='op'>,</span> <span class='nam'>do_insertions</span><span class='strut'>&nbsp;</span></p>\n<p id='t15' class='stm run hide_run'><span class='key'>from</span> <span class='nam'>pygments</span><span class='op'>.</span><span class='nam'>token</span> <span class='key'>import</span> <span class='nam'>Text</span><span class='op'>,</span> <span class='nam'>Comment</span><span class='op'>,</span> <span class='nam'>Operator</span><span class='op'>,</span> <span class='nam'>Keyword</span><span class='op'>,</span> <span class='nam'>Name</span><span class='op'>,</span> <span class='nam'>String</span><span class='op'>,</span> <span class='xx'>\\</span><span class='strut'>&nbsp;</span></p>\n<p id='t16' class='pln'>&nbsp; &nbsp; <span class='nam'>Number</span><span class='op'>,</span> <span class='nam'>Punctuation</span><span class='op'>,</span> <span class='nam'>Generic</span><span class='strut'>&nbsp;</span></p>\n<p id='t17' class='stm run hide_run'><span class='key'>from</span> <span class='nam'>pygments</span><span class='op'>.</span><span class='nam'>util</span> <span class='key'>import</span> <span class='nam'>shebang_matches</span><span class='strut'>&nbsp;</span></p>\n<p id='t18' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t19' class='stm run hide_run'><span class='nam'>__all__</span> <span class='op'>=</span> <span class='op'>[</span><span class='str'>&#39;JuliaLexer&#39;</span><span class='op'>,</span> <span class='str'>&#39;JuliaConsoleLexer&#39;</span><span class='op'>]</span><span class='strut'>&nbsp;</span></p>\n<p id='t20' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t21' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t22' class='stm run hide_run'><span class='key'>class</span> <span class='nam'>JuliaLexer</span><span class='op'>(</span><span class='nam'>RegexLexer</span><span class='op'>)</span><span class='op'>:</span><span class='strut'>&nbsp;</span></p>\n<p id='t23' class='pln'>&nbsp; &nbsp; <span class='str'>&quot;&quot;&quot;</span><span class='strut'>&nbsp;</span></p>\n<p id='t24' class='pln'><span class='str'>&nbsp; &nbsp; For `Julia &lt;http://julialang.org/&gt;`_ source code.</span><span class='strut'>&nbsp;</span></p>\n<p id='t25' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t26' class='pln'><span class='str'>&nbsp; &nbsp; .. versionadded:: 1.6</span><span class='strut'>&nbsp;</span></p>\n<p id='t27' class='pln'><span class='str'>&nbsp; &nbsp; &quot;&quot;&quot;</span><span class='strut'>&nbsp;</span></p>\n<p id='t28' class='stm run hide_run'>&nbsp; &nbsp; <span class='nam'>name</span> <span class='op'>=</span> <span class='str'>&#39;Julia&#39;</span><span class='strut'>&nbsp;</span></p>\n<p id='t29' class='stm run hide_run'>&nbsp; &nbsp; <span class='nam'>aliases</span> <span class='op'>=</span> <span class='op'>[</span><span class='str'>&#39;julia&#39;</span><span class='op'>,</span> <span class='str'>&#39;jl&#39;</span><span class='op'>]</span><span class='strut'>&nbsp;</span></p>\n<p id='t30' class='stm run hide_run'>&nbsp; &nbsp; <span class='nam'>filenames</span> <span class='op'>=</span> <span class='op'>[</span><span class='str'>&#39;*.jl&#39;</span><span class='op'>]</span><span class='strut'>&nbsp;</span></p>\n<p id='t31' class='stm run hide_run'>&nbsp; &nbsp; <span class='nam'>mimetypes</span> <span class='op'>=</span> <span class='op'>[</span><span class='str'>&#39;text/x-julia&#39;</span><span class='op'>,</span> <span class='str'>&#39;application/x-julia&#39;</span><span class='op'>]</span><span class='strut'>&nbsp;</span></p>\n<p id='t32' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t33' class='stm run hide_run'>&nbsp; &nbsp; <span class='nam'>builtins</span> <span class='op'>=</span> <span class='op'>[</span><span class='strut'>&nbsp;</span></p>\n<p id='t34' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='str'>&#39;exit&#39;</span><span class='op'>,</span> <span class='str'>&#39;whos&#39;</span><span class='op'>,</span> <span class='str'>&#39;edit&#39;</span><span class='op'>,</span> <span class='str'>&#39;load&#39;</span><span class='op'>,</span> <span class='str'>&#39;is&#39;</span><span class='op'>,</span> <span class='str'>&#39;isa&#39;</span><span class='op'>,</span> <span class='str'>&#39;isequal&#39;</span><span class='op'>,</span> <span class='str'>&#39;typeof&#39;</span><span class='op'>,</span> <span class='str'>&#39;tuple&#39;</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t35' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='str'>&#39;ntuple&#39;</span><span class='op'>,</span> <span class='str'>&#39;uid&#39;</span><span class='op'>,</span> <span class='str'>&#39;hash&#39;</span><span class='op'>,</span> <span class='str'>&#39;finalizer&#39;</span><span class='op'>,</span> <span class='str'>&#39;convert&#39;</span><span class='op'>,</span> <span class='str'>&#39;promote&#39;</span><span class='op'>,</span> <span class='str'>&#39;subtype&#39;</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t36' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='str'>&#39;typemin&#39;</span><span class='op'>,</span> <span class='str'>&#39;typemax&#39;</span><span class='op'>,</span> <span class='str'>&#39;realmin&#39;</span><span class='op'>,</span> <span class='str'>&#39;realmax&#39;</span><span class='op'>,</span> <span class='str'>&#39;sizeof&#39;</span><span class='op'>,</span> <span class='str'>&#39;eps&#39;</span><span class='op'>,</span> <span class='str'>&#39;promote_type&#39;</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t37' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='str'>&#39;method_exists&#39;</span><span class='op'>,</span> <span class='str'>&#39;applicable&#39;</span><span class='op'>,</span> <span class='str'>&#39;invoke&#39;</span><span class='op'>,</span> <span class='str'>&#39;dlopen&#39;</span><span class='op'>,</span> <span class='str'>&#39;dlsym&#39;</span><span class='op'>,</span> <span class='str'>&#39;system&#39;</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t38' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='str'>&#39;error&#39;</span><span class='op'>,</span> <span class='str'>&#39;throw&#39;</span><span class='op'>,</span> <span class='str'>&#39;assert&#39;</span><span class='op'>,</span> <span class='str'>&#39;new&#39;</span><span class='op'>,</span> <span class='str'>&#39;Inf&#39;</span><span class='op'>,</span> <span class='str'>&#39;Nan&#39;</span><span class='op'>,</span> <span class='str'>&#39;pi&#39;</span><span class='op'>,</span> <span class='str'>&#39;im&#39;</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t39' class='pln'>&nbsp; &nbsp; <span class='op'>]</span><span class='strut'>&nbsp;</span></p>\n<p id='t40' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t41' class='stm run hide_run'>&nbsp; &nbsp; <span class='nam'>tokens</span> <span class='op'>=</span> <span class='op'>{</span><span class='strut'>&nbsp;</span></p>\n<p id='t42' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='str'>&#39;root&#39;</span><span class='op'>:</span> <span class='op'>[</span><span class='strut'>&nbsp;</span></p>\n<p id='t43' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;\\n&#39;</span><span class='op'>,</span> <span class='nam'>Text</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t44' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;[^\\S\\n]+&#39;</span><span class='op'>,</span> <span class='nam'>Text</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t45' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;#=&#39;</span><span class='op'>,</span> <span class='nam'>Comment</span><span class='op'>.</span><span class='nam'>Multiline</span><span class='op'>,</span> <span class='str'>&quot;blockcomment&quot;</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t46' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;#.*$&#39;</span><span class='op'>,</span> <span class='nam'>Comment</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t47' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;[]{}:(),;[@]&#39;</span><span class='op'>,</span> <span class='nam'>Punctuation</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t48' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;\\\\\\n&#39;</span><span class='op'>,</span> <span class='nam'>Text</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t49' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;\\\\&#39;</span><span class='op'>,</span> <span class='nam'>Text</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t50' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t51' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='com'># keywords</span><span class='strut'>&nbsp;</span></p>\n<p id='t52' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;(begin|while|for|in|return|break|continue|&#39;</span><span class='strut'>&nbsp;</span></p>\n<p id='t53' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span class='str'>r&#39;macro|quote|let|if|elseif|else|try|catch|end|&#39;</span><span class='strut'>&nbsp;</span></p>\n<p id='t54' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span class='str'>r&#39;bitstype|ccall|do|using|module|import|export|&#39;</span><span class='strut'>&nbsp;</span></p>\n<p id='t55' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span class='str'>r&#39;importall|baremodule|immutable)\\b&#39;</span><span class='op'>,</span> <span class='nam'>Keyword</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t56' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;(local|global|const)\\b&#39;</span><span class='op'>,</span> <span class='nam'>Keyword</span><span class='op'>.</span><span class='nam'>Declaration</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t57' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;(Bool|Int|Int8|Int16|Int32|Int64|Uint|Uint8|Uint16|Uint32|Uint64&#39;</span><span class='strut'>&nbsp;</span></p>\n<p id='t58' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span class='str'>r&#39;|Float32|Float64|Complex64|Complex128|Any|Nothing|None)\\b&#39;</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t59' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>Keyword</span><span class='op'>.</span><span class='nam'>Type</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t60' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t61' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='com'># functions</span><span class='strut'>&nbsp;</span></p>\n<p id='t62' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;(function)((?:\\s|\\\\\\s)+)&#39;</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t63' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>bygroups</span><span class='op'>(</span><span class='nam'>Keyword</span><span class='op'>,</span> <span class='nam'>Name</span><span class='op'>.</span><span class='nam'>Function</span><span class='op'>)</span><span class='op'>,</span> <span class='str'>&#39;funcname&#39;</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t64' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t65' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='com'># types</span><span class='strut'>&nbsp;</span></p>\n<p id='t66' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;(type|typealias|abstract)((?:\\s|\\\\\\s)+)&#39;</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t67' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>bygroups</span><span class='op'>(</span><span class='nam'>Keyword</span><span class='op'>,</span> <span class='nam'>Name</span><span class='op'>.</span><span class='nam'>Class</span><span class='op'>)</span><span class='op'>,</span> <span class='str'>&#39;typename&#39;</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t68' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t69' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='com'># operators</span><span class='strut'>&nbsp;</span></p>\n<p id='t70' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;==|!=|&lt;=|&gt;=|-&gt;|&amp;&amp;|\\|\\||::|&lt;:|[-~+/*%=&lt;&gt;&amp;^|.?!$]&#39;</span><span class='op'>,</span> <span class='nam'>Operator</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t71' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;\\.\\*|\\.\\^|\\.\\\\|\\.\\/|\\\\&#39;</span><span class='op'>,</span> <span class='nam'>Operator</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t72' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t73' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='com'># builtins</span><span class='strut'>&nbsp;</span></p>\n<p id='t74' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>&#39;(&#39;</span> <span class='op'>+</span> <span class='str'>&#39;|&#39;</span><span class='op'>.</span><span class='nam'>join</span><span class='op'>(</span><span class='nam'>builtins</span><span class='op'>)</span> <span class='op'>+</span> <span class='str'>r&#39;)\\b&#39;</span><span class='op'>,</span>&nbsp; <span class='nam'>Name</span><span class='op'>.</span><span class='nam'>Builtin</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t75' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t76' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='com'># backticks</span><span class='strut'>&nbsp;</span></p>\n<p id='t77' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;`(?s).*?`&#39;</span><span class='op'>,</span> <span class='nam'>String</span><span class='op'>.</span><span class='nam'>Backtick</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t78' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t79' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='com'># chars</span><span class='strut'>&nbsp;</span></p>\n<p id='t80' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&quot;&#39;(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,3}|\\\\u[a-fA-F0-9]{1,4}|&quot;</span><span class='strut'>&nbsp;</span></p>\n<p id='t81' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span class='str'>r&quot;\\\\U[a-fA-F0-9]{1,6}|[^\\\\\\&#39;\\n])&#39;&quot;</span><span class='op'>,</span> <span class='nam'>String</span><span class='op'>.</span><span class='nam'>Char</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t82' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t83' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='com'># try to match trailing transpose</span><span class='strut'>&nbsp;</span></p>\n<p id='t84' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;(?&lt;=[.\\w)\\]])\\&#39;+&#39;</span><span class='op'>,</span> <span class='nam'>Operator</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t85' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t86' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='com'># strings</span><span class='strut'>&nbsp;</span></p>\n<p id='t87' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;(?:[IL])&quot;&#39;</span><span class='op'>,</span> <span class='nam'>String</span><span class='op'>,</span> <span class='str'>&#39;string&#39;</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t88' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;[E]?&quot;&#39;</span><span class='op'>,</span> <span class='nam'>String</span><span class='op'>,</span> <span class='nam'>combined</span><span class='op'>(</span><span class='str'>&#39;stringescape&#39;</span><span class='op'>,</span> <span class='str'>&#39;string&#39;</span><span class='op'>)</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t89' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t90' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='com'># names</span><span class='strut'>&nbsp;</span></p>\n<p id='t91' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;@[\\w.]+&#39;</span><span class='op'>,</span> <span class='nam'>Name</span><span class='op'>.</span><span class='nam'>Decorator</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t92' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;[a-zA-Z_]\\w*&#39;</span><span class='op'>,</span> <span class='nam'>Name</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t93' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t94' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='com'># numbers</span><span class='strut'>&nbsp;</span></p>\n<p id='t95' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;(\\d+(_\\d+)+\\.\\d*|\\d*\\.\\d+(_\\d+)+)([eEf][+-]?[0-9]+)?&#39;</span><span class='op'>,</span> <span class='nam'>Number</span><span class='op'>.</span><span class='nam'>Float</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t96' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;(\\d+\\.\\d*|\\d*\\.\\d+)([eEf][+-]?[0-9]+)?&#39;</span><span class='op'>,</span> <span class='nam'>Number</span><span class='op'>.</span><span class='nam'>Float</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t97' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;\\d+(_\\d+)+[eEf][+-]?[0-9]+&#39;</span><span class='op'>,</span> <span class='nam'>Number</span><span class='op'>.</span><span class='nam'>Float</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t98' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;\\d+[eEf][+-]?[0-9]+&#39;</span><span class='op'>,</span> <span class='nam'>Number</span><span class='op'>.</span><span class='nam'>Float</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t99' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;0b[01]+(_[01]+)+&#39;</span><span class='op'>,</span> <span class='nam'>Number</span><span class='op'>.</span><span class='nam'>Bin</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t100' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;0b[01]+&#39;</span><span class='op'>,</span> <span class='nam'>Number</span><span class='op'>.</span><span class='nam'>Bin</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t101' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;0o[0-7]+(_[0-7]+)+&#39;</span><span class='op'>,</span> <span class='nam'>Number</span><span class='op'>.</span><span class='nam'>Oct</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t102' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;0o[0-7]+&#39;</span><span class='op'>,</span> <span class='nam'>Number</span><span class='op'>.</span><span class='nam'>Oct</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t103' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;0x[a-fA-F0-9]+(_[a-fA-F0-9]+)+&#39;</span><span class='op'>,</span> <span class='nam'>Number</span><span class='op'>.</span><span class='nam'>Hex</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t104' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;0x[a-fA-F0-9]+&#39;</span><span class='op'>,</span> <span class='nam'>Number</span><span class='op'>.</span><span class='nam'>Hex</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t105' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;\\d+(_\\d+)+&#39;</span><span class='op'>,</span> <span class='nam'>Number</span><span class='op'>.</span><span class='nam'>Integer</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t106' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;\\d+&#39;</span><span class='op'>,</span> <span class='nam'>Number</span><span class='op'>.</span><span class='nam'>Integer</span><span class='op'>)</span><span class='strut'>&nbsp;</span></p>\n<p id='t107' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>]</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t108' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t109' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='str'>&#39;funcname&#39;</span><span class='op'>:</span> <span class='op'>[</span><span class='strut'>&nbsp;</span></p>\n<p id='t110' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>&#39;[a-zA-Z_]\\w*&#39;</span><span class='op'>,</span> <span class='nam'>Name</span><span class='op'>.</span><span class='nam'>Function</span><span class='op'>,</span> <span class='str'>&#39;#pop&#39;</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t111' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>&#39;\\([^\\s\\w{]{1,2}\\)&#39;</span><span class='op'>,</span> <span class='nam'>Operator</span><span class='op'>,</span> <span class='str'>&#39;#pop&#39;</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t112' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>&#39;[^\\s\\w{]{1,2}&#39;</span><span class='op'>,</span> <span class='nam'>Operator</span><span class='op'>,</span> <span class='str'>&#39;#pop&#39;</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t113' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>]</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t114' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t115' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='str'>&#39;typename&#39;</span><span class='op'>:</span> <span class='op'>[</span><span class='strut'>&nbsp;</span></p>\n<p id='t116' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>&#39;[a-zA-Z_]\\w*&#39;</span><span class='op'>,</span> <span class='nam'>Name</span><span class='op'>.</span><span class='nam'>Class</span><span class='op'>,</span> <span class='str'>&#39;#pop&#39;</span><span class='op'>)</span><span class='strut'>&nbsp;</span></p>\n<p id='t117' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>]</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t118' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t119' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='str'>&#39;stringescape&#39;</span><span class='op'>:</span> <span class='op'>[</span><span class='strut'>&nbsp;</span></p>\n<p id='t120' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;\\\\([\\\\abfnrtv&quot;\\&#39;]|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|&#39;</span><span class='strut'>&nbsp;</span></p>\n<p id='t121' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span class='str'>r&#39;U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})&#39;</span><span class='op'>,</span> <span class='nam'>String</span><span class='op'>.</span><span class='nam'>Escape</span><span class='op'>)</span><span class='strut'>&nbsp;</span></p>\n<p id='t122' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>]</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t123' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='str'>&quot;blockcomment&quot;</span><span class='op'>:</span> <span class='op'>[</span><span class='strut'>&nbsp;</span></p>\n<p id='t124' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;[^=#]&#39;</span><span class='op'>,</span> <span class='nam'>Comment</span><span class='op'>.</span><span class='nam'>Multiline</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t125' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;#=&#39;</span><span class='op'>,</span> <span class='nam'>Comment</span><span class='op'>.</span><span class='nam'>Multiline</span><span class='op'>,</span> <span class='str'>&#39;#push&#39;</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t126' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;=#&#39;</span><span class='op'>,</span> <span class='nam'>Comment</span><span class='op'>.</span><span class='nam'>Multiline</span><span class='op'>,</span> <span class='str'>&#39;#pop&#39;</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t127' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;[=#]&#39;</span><span class='op'>,</span> <span class='nam'>Comment</span><span class='op'>.</span><span class='nam'>Multiline</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t128' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>]</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t129' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='str'>&#39;string&#39;</span><span class='op'>:</span> <span class='op'>[</span><span class='strut'>&nbsp;</span></p>\n<p id='t130' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;&quot;&#39;</span><span class='op'>,</span> <span class='nam'>String</span><span class='op'>,</span> <span class='str'>&#39;#pop&#39;</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t131' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;\\\\\\\\|\\\\&quot;|\\\\\\n&#39;</span><span class='op'>,</span> <span class='nam'>String</span><span class='op'>.</span><span class='nam'>Escape</span><span class='op'>)</span><span class='op'>,</span>&nbsp; <span class='com'># included here for raw strings</span><span class='strut'>&nbsp;</span></p>\n<p id='t132' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;\\$(\\(\\w+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?&#39;</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t133' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>String</span><span class='op'>.</span><span class='nam'>Interpol</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t134' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;[^\\\\&quot;$]+&#39;</span><span class='op'>,</span> <span class='nam'>String</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t135' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='com'># quotes, dollar signs, and backslashes must be parsed one at a time</span><span class='strut'>&nbsp;</span></p>\n<p id='t136' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;[&quot;\\\\]&#39;</span><span class='op'>,</span> <span class='nam'>String</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t137' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='com'># unhandled string formatting sign</span><span class='strut'>&nbsp;</span></p>\n<p id='t138' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>(</span><span class='str'>r&#39;\\$&#39;</span><span class='op'>,</span> <span class='nam'>String</span><span class='op'>)</span><span class='strut'>&nbsp;</span></p>\n<p id='t139' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='op'>]</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t140' class='pln'>&nbsp; &nbsp; <span class='op'>}</span><span class='strut'>&nbsp;</span></p>\n<p id='t141' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t142' class='stm run hide_run'>&nbsp; &nbsp; <span class='key'>def</span> <span class='nam'>analyse_text</span><span class='op'>(</span><span class='nam'>text</span><span class='op'>)</span><span class='op'>:</span><span class='strut'>&nbsp;</span></p>\n<p id='t143' class='stm run hide_run'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='key'>return</span> <span class='nam'>shebang_matches</span><span class='op'>(</span><span class='nam'>text</span><span class='op'>,</span> <span class='str'>r&#39;julia&#39;</span><span class='op'>)</span><span class='strut'>&nbsp;</span></p>\n<p id='t144' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t145' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t146' class='stm run hide_run'><span class='nam'>line_re</span>&nbsp; <span class='op'>=</span> <span class='nam'>re</span><span class='op'>.</span><span class='nam'>compile</span><span class='op'>(</span><span class='str'>&#39;.*?\\n&#39;</span><span class='op'>)</span><span class='strut'>&nbsp;</span></p>\n<p id='t147' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t148' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t149' class='stm run hide_run'><span class='key'>class</span> <span class='nam'>JuliaConsoleLexer</span><span class='op'>(</span><span class='nam'>Lexer</span><span class='op'>)</span><span class='op'>:</span><span class='strut'>&nbsp;</span></p>\n<p id='t150' class='pln'>&nbsp; &nbsp; <span class='str'>&quot;&quot;&quot;</span><span class='strut'>&nbsp;</span></p>\n<p id='t151' class='pln'><span class='str'>&nbsp; &nbsp; For Julia console sessions. Modeled after MatlabSessionLexer.</span><span class='strut'>&nbsp;</span></p>\n<p id='t152' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t153' class='pln'><span class='str'>&nbsp; &nbsp; .. versionadded:: 1.6</span><span class='strut'>&nbsp;</span></p>\n<p id='t154' class='pln'><span class='str'>&nbsp; &nbsp; &quot;&quot;&quot;</span><span class='strut'>&nbsp;</span></p>\n<p id='t155' class='stm run hide_run'>&nbsp; &nbsp; <span class='nam'>name</span> <span class='op'>=</span> <span class='str'>&#39;Julia console&#39;</span><span class='strut'>&nbsp;</span></p>\n<p id='t156' class='stm run hide_run'>&nbsp; &nbsp; <span class='nam'>aliases</span> <span class='op'>=</span> <span class='op'>[</span><span class='str'>&#39;jlcon&#39;</span><span class='op'>]</span><span class='strut'>&nbsp;</span></p>\n<p id='t157' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t158' class='stm run hide_run'>&nbsp; &nbsp; <span class='key'>def</span> <span class='nam'>get_tokens_unprocessed</span><span class='op'>(</span><span class='nam'>self</span><span class='op'>,</span> <span class='nam'>text</span><span class='op'>)</span><span class='op'>:</span><span class='strut'>&nbsp;</span></p>\n<p id='t159' class='stm run hide_run'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>jllexer</span> <span class='op'>=</span> <span class='nam'>JuliaLexer</span><span class='op'>(</span><span class='op'>**</span><span class='nam'>self</span><span class='op'>.</span><span class='nam'>options</span><span class='op'>)</span><span class='strut'>&nbsp;</span></p>\n<p id='t160' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t161' class='stm run hide_run'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>curcode</span> <span class='op'>=</span> <span class='str'>&#39;&#39;</span><span class='strut'>&nbsp;</span></p>\n<p id='t162' class='stm run hide_run'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>insertions</span> <span class='op'>=</span> <span class='op'>[</span><span class='op'>]</span><span class='strut'>&nbsp;</span></p>\n<p id='t163' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t164' class='stm run hide_run'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='key'>for</span> <span class='nam'>match</span> <span class='key'>in</span> <span class='nam'>line_re</span><span class='op'>.</span><span class='nam'>finditer</span><span class='op'>(</span><span class='nam'>text</span><span class='op'>)</span><span class='op'>:</span><span class='strut'>&nbsp;</span></p>\n<p id='t165' class='stm run hide_run'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>line</span> <span class='op'>=</span> <span class='nam'>match</span><span class='op'>.</span><span class='nam'>group</span><span class='op'>(</span><span class='op'>)</span><span class='strut'>&nbsp;</span></p>\n<p id='t166' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t167' class='stm run hide_run'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='key'>if</span> <span class='nam'>line</span><span class='op'>.</span><span class='nam'>startswith</span><span class='op'>(</span><span class='str'>&#39;julia&gt;&#39;</span><span class='op'>)</span><span class='op'>:</span><span class='strut'>&nbsp;</span></p>\n<p id='t168' class='stm mis'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>insertions</span><span class='op'>.</span><span class='nam'>append</span><span class='op'>(</span><span class='op'>(</span><span class='nam'>len</span><span class='op'>(</span><span class='nam'>curcode</span><span class='op'>)</span><span class='op'>,</span><span class='strut'>&nbsp;</span></p>\n<p id='t169' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span class='op'>[</span><span class='op'>(</span><span class='num'>0</span><span class='op'>,</span> <span class='nam'>Generic</span><span class='op'>.</span><span class='nam'>Prompt</span><span class='op'>,</span> <span class='nam'>line</span><span class='op'>[</span><span class='op'>:</span><span class='num'>6</span><span class='op'>]</span><span class='op'>)</span><span class='op'>]</span><span class='op'>)</span><span class='op'>)</span><span class='strut'>&nbsp;</span></p>\n<p id='t170' class='stm mis'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>curcode</span> <span class='op'>+=</span> <span class='nam'>line</span><span class='op'>[</span><span class='num'>6</span><span class='op'>:</span><span class='op'>]</span><span class='strut'>&nbsp;</span></p>\n<p id='t171' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t172' class='stm run hide_run'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='key'>elif</span> <span class='nam'>line</span><span class='op'>.</span><span class='nam'>startswith</span><span class='op'>(</span><span class='str'>&#39;&nbsp; &nbsp; &nbsp; &#39;</span><span class='op'>)</span><span class='op'>:</span><span class='strut'>&nbsp;</span></p>\n<p id='t173' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t174' class='stm mis'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>idx</span> <span class='op'>=</span> <span class='nam'>len</span><span class='op'>(</span><span class='nam'>curcode</span><span class='op'>)</span><span class='strut'>&nbsp;</span></p>\n<p id='t175' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t176' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='com'># without is showing error on same line as before...?</span><span class='strut'>&nbsp;</span></p>\n<p id='t177' class='stm mis'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>line</span> <span class='op'>=</span> <span class='str'>&quot;\\n&quot;</span> <span class='op'>+</span> <span class='nam'>line</span><span class='strut'>&nbsp;</span></p>\n<p id='t178' class='stm mis'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>token</span> <span class='op'>=</span> <span class='op'>(</span><span class='num'>0</span><span class='op'>,</span> <span class='nam'>Generic</span><span class='op'>.</span><span class='nam'>Traceback</span><span class='op'>,</span> <span class='nam'>line</span><span class='op'>)</span><span class='strut'>&nbsp;</span></p>\n<p id='t179' class='stm mis'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>insertions</span><span class='op'>.</span><span class='nam'>append</span><span class='op'>(</span><span class='op'>(</span><span class='nam'>idx</span><span class='op'>,</span> <span class='op'>[</span><span class='nam'>token</span><span class='op'>]</span><span class='op'>)</span><span class='op'>)</span><span class='strut'>&nbsp;</span></p>\n<p id='t180' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t181' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='key'>else</span><span class='op'>:</span><span class='strut'>&nbsp;</span></p>\n<p id='t182' class='stm run hide_run'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='key'>if</span> <span class='nam'>curcode</span><span class='op'>:</span><span class='strut'>&nbsp;</span></p>\n<p id='t183' class='stm mis'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='key'>for</span> <span class='nam'>item</span> <span class='key'>in</span> <span class='nam'>do_insertions</span><span class='op'>(</span><span class='strut'>&nbsp;</span></p>\n<p id='t184' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>insertions</span><span class='op'>,</span> <span class='nam'>jllexer</span><span class='op'>.</span><span class='nam'>get_tokens_unprocessed</span><span class='op'>(</span><span class='nam'>curcode</span><span class='op'>)</span><span class='op'>)</span><span class='op'>:</span><span class='strut'>&nbsp;</span></p>\n<p id='t185' class='stm mis'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='key'>yield</span> <span class='nam'>item</span><span class='strut'>&nbsp;</span></p>\n<p id='t186' class='stm mis'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>curcode</span> <span class='op'>=</span> <span class='str'>&#39;&#39;</span><span class='strut'>&nbsp;</span></p>\n<p id='t187' class='stm mis'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>insertions</span> <span class='op'>=</span> <span class='op'>[</span><span class='op'>]</span><span class='strut'>&nbsp;</span></p>\n<p id='t188' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t189' class='stm run hide_run'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='key'>yield</span> <span class='nam'>match</span><span class='op'>.</span><span class='nam'>start</span><span class='op'>(</span><span class='op'>)</span><span class='op'>,</span> <span class='nam'>Generic</span><span class='op'>.</span><span class='nam'>Output</span><span class='op'>,</span> <span class='nam'>line</span><span class='strut'>&nbsp;</span></p>\n<p id='t190' class='pln'><span class='strut'>&nbsp;</span></p>\n<p id='t191' class='stm run hide_run'>&nbsp; &nbsp; &nbsp; &nbsp; <span class='key'>if</span> <span class='nam'>curcode</span><span class='op'>:</span>&nbsp; <span class='com'># or item:</span><span class='strut'>&nbsp;</span></p>\n<p id='t192' class='stm mis'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='key'>for</span> <span class='nam'>item</span> <span class='key'>in</span> <span class='nam'>do_insertions</span><span class='op'>(</span><span class='strut'>&nbsp;</span></p>\n<p id='t193' class='pln'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='nam'>insertions</span><span class='op'>,</span> <span class='nam'>jllexer</span><span class='op'>.</span><span class='nam'>get_tokens_unprocessed</span><span class='op'>(</span><span class='nam'>curcode</span><span class='op'>)</span><span class='op'>)</span><span class='op'>:</span><span class='strut'>&nbsp;</span></p>\n<p id='t194' class='stm mis'>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class='key'>yield</span> <span class='nam'>item</span><span class='strut'>&nbsp;</span></p>\n                \n            </td>\n        </tr>\n    </table>\n</div>\n\n<div id='footer'>\n    <div class='content'>\n        <p>\n            <a class='nav' href='index.html'>&#xab; index</a> &nbsp; &nbsp; <a class='nav' href='http://nedbatchelder.com/code/coverage'>coverage.py v3.7.1</a>\n        </p>\n    </div>\n</div>\n\n</body>\n</html>\n",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/tests/examplefiles/ltmain.sh": "# ltmain.sh - Provide generalized library-building support services.\n# NOTE: Changing this file will not affect anything until you rerun configure.\n#\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005\n# Free Software Foundation, Inc.\n# Originally by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that program.\n\nbasename=\"s,^.*/,,g\"\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=\"$0\"\n\n# define SED for historic ltconfig's generated by Libtool 1.3\ntest -z \"$SED\" && SED=sed\n\n# The name of this program:\nprogname=`echo \"$progpath\" | $SED $basename`\nmodename=\"$progname\"\n\n# Global variables:\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\n\nPROGRAM=ltmain.sh\nPACKAGE=libtool\nVERSION=1.5.22\nTIMESTAMP=\" (1.1220.2.365 2005/12/18 22:14:06)\"\n\n# See if we are running on zsh, and set the options which allow our\n# commands through without removal of \\ escapes.\nif test -n \"${ZSH_VERSION+set}\" ; then\n  setopt NO_GLOB_SUBST\nfi\n# Same for EGREP, and just to be sure, do LTCC as well\nif test \"X$EGREP\" = X ; then\n    EGREP=egrep\nfi\nif test \"X$LTCC\" = X ; then\n    LTCC=${CC-gcc}\nfi\n\n# Check that we have a working $echo.\nif test \"X$1\" = X--no-reexec; then\n  # Discard the --no-reexec flag, and continue.\n  shift\nelif test \"X$1\" = X--fallback-echo; then\n  # Avoid inline document here, it may be left over\n  :\nelif test \"X`($echo '\\t') 2>/dev/null`\" = 'X\\t'; then\n  # Yippee, $echo works!\n  :\nelse\n  # Restart under the correct shell, and then maybe $echo will work.\n  exec $SHELL \"$progpath\" --no-reexec ${1+\"$@\"}\nfi\n\nif test \"X$1\" = X--fallback-echo; then\n  # used as fallback echo\n  shift\n  cat <<EOF\n$*\nEOF\n  exit $EXIT_SUCCESS\nfi\n\ndefault_mode=\nhelp=\"Try \\`$progname --help' for more information.\"\nmagic=\"%%%MAGIC variable%%%\"\nmkdir=\"mkdir\"\nmv=\"mv -f\"\nrm=\"rm -f\"\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed=\"${SED}\"' -e 1s/^X//'\nsed_quote_subst='s/\\([\\\\`\\\\\"$\\\\\\\\]\\)/\\\\\\1/g'\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  SP2NL='tr \\040 \\012'\n  NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  SP2NL='tr \\100 \\n'\n  NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n\n# NLS nuisances.\n# Only set LANG and LC_ALL to C if already set.\n# These must not be set unconditionally because not all systems understand\n# e.g. LANG=C (notably SCO).\n# We save the old values to restore during execute mode.\nif test \"${LC_ALL+set}\" = set; then\n  save_LC_ALL=\"$LC_ALL\"; LC_ALL=C; export LC_ALL\nfi\nif test \"${LANG+set}\" = set; then\n  save_LANG=\"$LANG\"; LANG=C; export LANG\nfi\n\n# Make sure IFS has a sensible default\nlt_nl='\n'\nIFS=\" \t$lt_nl\"\n\nif test \"$build_libtool_libs\" != yes && test \"$build_old_libs\" != yes; then\n  $echo \"$modename: not configured to build any kind of library\" 1>&2\n  $echo \"Fatal configuration error.  See the $PACKAGE docs for more information.\" 1>&2\n  exit $EXIT_FAILURE\nfi\n\n# Global variables.\nmode=$default_mode\nnonopt=\nprev=\nprevopt=\nrun=\nshow=\"$echo\"\nshow_help=\nexecute_dlfiles=\nduplicate_deps=no\npreserve_args=\nlo2o=\"s/\\\\.lo\\$/.${objext}/\"\no2lo=\"s/\\\\.${objext}\\$/.lo/\"\n\nif test -z \"$max_cmd_len\"; then\n  i=0\n  testring=\"ABCD\"\n  new_result=\n  \n  # If test is not a shell built-in, we'll probably end up computing a\n  # maximum length that is only half of the actual maximum length, but\n  # we can't tell.\n  while (test \"X\"`$SHELL $0 --fallback-echo \"X$testring\" 2>/dev/null` \\\n             = \"XX$testring\") >/dev/null 2>&1 &&\n          new_result=`expr \"X$testring\" : \".*\" 2>&1` &&\n          max_cmd_len=\"$new_result\" &&\n          test \"$i\" != 17 # 1/2 MB should be enough\n  do\n    i=`expr $i + 1`\n    testring=\"$testring$testring\"\n  done\n  testring=\n  # Add a significant safety factor because C++ compilers can tack on massive\n  # amounts of additional arguments before passing them to the linker.\n  # It appears as though 1/2 is a usable value.\n  max_cmd_len=`expr $max_cmd_len \\/ 2`\nfi\n\n#####################################\n# Shell function definitions:\n# This seems to be the best place for them\n\n# func_mktempdir [string]\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, STRING is the basename for that directory.\nfunc_mktempdir ()\n{\n    my_template=\"${TMPDIR-/tmp}/${1-$progname}\"\n\n    if test \"$run\" = \":\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      my_tmpdir=\"${my_template}-$$\"\n    else\n\n      # If mktemp works, use that first and foremost\n      my_tmpdir=`mktemp -d \"${my_template}-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$my_tmpdir\"; then\n\t# Failing that, at least try and use $RANDOM to avoid a race\n\tmy_tmpdir=\"${my_template}-${RANDOM-0}$$\"\n\n\tsave_mktempdir_umask=`umask`\n\tumask 0077\n\t$mkdir \"$my_tmpdir\"\n\tumask $save_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$my_tmpdir\" || {\n        $echo \"cannot create temporary directory \\`$my_tmpdir'\" 1>&2\n\texit $EXIT_FAILURE\n      }\n    fi\n\n    $echo \"X$my_tmpdir\" | $Xsed\n}\n\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\nfunc_win32_libid ()\n{\n  win32_libid_type=\"unknown\"\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null | \\\n      $EGREP -e 'file format pe-i386(.*architecture: i386)?' >/dev/null ; then\n      win32_nmres=`eval $NM -f posix -A $1 | \\\n\t$SED -n -e '1,100{/ I /{s,.*,import,;p;q;};}'`\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $echo $win32_libid_type\n}\n\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tcase $arg in\n\t  *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t  arg=\"\\\"$arg\\\"\"\n\t  ;;\n\tesac\n\tCC_quoted=\"$CC_quoted $arg\"\n      done\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" `$echo $CC` \"* | \"`$echo $CC` \"* | \" $CC_quoted\"* | \"$CC_quoted \"* | \" `$echo $CC_quoted` \"* | \"`$echo $CC_quoted` \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if grep \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t    # Double-quote args containing other shell metacharacters.\n\t    case $arg in\n\t      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t      arg=\"\\\"$arg\\\"\"\n\t      ;;\n\t    esac\n\t    CC_quoted=\"$CC_quoted $arg\"\n\t  done\n\t    # user sometimes does CC=<HOST>-gcc so we need to match that to 'gcc'\n\t    trimedcc=`echo ${CC} | $SED -e \"s/${host}-//g\"`\n\t    # and sometimes libtool has CC=<HOST>-gcc but user does CC=gcc\n\t    extendcc=${host}-${CC}\n\t    # and sometimes libtool has CC=<OLDHOST>-gcc but user has CC=<NEWHOST>-gcc  \n\t    # (Gentoo-specific hack because we always export $CHOST)\n\t    mungedcc=${CHOST-${host}}-${trimedcc}\n\t    case \"$@ \" in\n\t      \"cc \"* | \" cc \"* | \"${host}-cc \"* | \" ${host}-cc \"*|\\\n\t      \"gcc \"* | \" gcc \"* | \"${host}-gcc \"* | \" ${host}-gcc \"*)\n\t      tagname=CC\n\t      break ;;\n\t      \"$trimedcc \"* | \" $trimedcc \"* | \"`$echo $trimedcc` \"* | \" `$echo $trimedcc` \"*|\\\n\t      \"$extendcc \"* | \" $extendcc \"* | \"`$echo $extendcc` \"* | \" `$echo $extendcc` \"*|\\\n\t      \"$mungedcc \"* | \" $mungedcc \"* | \"`$echo $mungedcc` \"* | \" `$echo $mungedcc` \"*|\\\n\t      \" $CC \"* | \"$CC \"* | \" `$echo $CC` \"* | \"`$echo $CC` \"* | \" $CC_quoted\"* | \"$CC_quoted \"* | \" `$echo $CC_quoted` \"* | \"`$echo $CC_quoted` \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  $echo \"$modename: unable to infer tagged configuration\"\n\t  $echo \"$modename: specify a tag with \\`--tag'\" 1>&2\n\t  exit $EXIT_FAILURE\n#        else\n#          $echo \"$modename: using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    f_ex_an_ar_dir=\"$1\"; shift\n    f_ex_an_ar_oldlib=\"$1\"\n\n    $show \"(cd $f_ex_an_ar_dir && $AR x $f_ex_an_ar_oldlib)\"\n    $run eval \"(cd \\$f_ex_an_ar_dir && $AR x \\$f_ex_an_ar_oldlib)\" || exit $?\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      $echo \"$modename: ERROR: object name conflicts: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n}\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    my_gentop=\"$1\"; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\"\"\n    my_xlib=\"\"\n    my_xabs=\"\"\n    my_xdir=\"\"\n    my_status=\"\"\n\n    $show \"${rm}r $my_gentop\"\n    $run ${rm}r \"$my_gentop\"\n    $show \"$mkdir $my_gentop\"\n    $run $mkdir \"$my_gentop\"\n    my_status=$?\n    if test \"$my_status\" -ne 0 && test ! -d \"$my_gentop\"; then\n      exit $my_status\n    fi\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=\"$my_xlib\" ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      my_xlib=`$echo \"X$my_xlib\" | $Xsed -e 's%^.*/%%'`\n      my_xdir=\"$my_gentop/$my_xlib\"\n\n      $show \"${rm}r $my_xdir\"\n      $run ${rm}r \"$my_xdir\"\n      $show \"$mkdir $my_xdir\"\n      $run $mkdir \"$my_xdir\"\n      exit_status=$?\n      if test \"$exit_status\" -ne 0 && test ! -d \"$my_xdir\"; then\n\texit $exit_status\n      fi\n      case $host in\n      *-darwin*)\n\t$show \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\tif test -z \"$run\"; then\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  darwin_base_archive=`$echo \"X$darwin_archive\" | $Xsed -e 's%^.*/%%'`\n\t  darwin_arches=`lipo -info \"$darwin_archive\" 2>/dev/null | $EGREP Architectures 2>/dev/null`\n\t  if test -n \"$darwin_arches\"; then \n\t    darwin_arches=`echo \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    $show \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches ; do\n\t      mkdir -p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      lipo -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n\t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n\t      cd \"$darwin_curdir\"\n\t      $rm \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n\t    done # $darwin_arches\n      ## Okay now we have a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print| xargs basename | sort -u | $NL2SP`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | $NL2SP`\n\t      lipo -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    ${rm}r unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd \"$darwin_orig_dir\"\n \t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\tfi # $run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n        ;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | $NL2SP`\n    done\n    func_extract_archives_result=\"$my_oldobjs\"\n}\n# End of Shell function definitions\n#####################################\n\n# Darwin sucks\neval std_shrext=\\\"$shrext_cmds\\\"\n\ndisable_libs=no\n\n# Parse our command line options once, thoroughly.\nwhile test \"$#\" -gt 0\ndo\n  arg=\"$1\"\n  shift\n\n  case $arg in\n  -*=*) optarg=`$echo \"X$arg\" | $Xsed -e 's/[-_a-zA-Z0-9]*=//'` ;;\n  *) optarg= ;;\n  esac\n\n  # If the previous option needs an argument, assign it.\n  if test -n \"$prev\"; then\n    case $prev in\n    execute_dlfiles)\n      execute_dlfiles=\"$execute_dlfiles $arg\"\n      ;;\n    tag)\n      tagname=\"$arg\"\n      preserve_args=\"${preserve_args}=$arg\"\n\n      # Check whether tagname contains only valid characters\n      case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n\t$echo \"$progname: invalid tag name: $tagname\" 1>&2\n\texit $EXIT_FAILURE\n\t;;\n      esac\n\n      case $tagname in\n      CC)\n\t# Don't test for the \"default\" C tag, as we know, it's there, but\n\t# not specially marked.\n\t;;\n      *)\n\tif grep \"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname$\" < \"$progpath\" > /dev/null; then\n\t  taglist=\"$taglist $tagname\"\n\t  # Evaluate the configuration.\n\t  eval \"`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$tagname'$/,/^# ### END LIBTOOL TAG CONFIG: '$tagname'$/p' < $progpath`\"\n\telse\n\t  $echo \"$progname: ignoring unknown tag $tagname\" 1>&2\n\tfi\n\t;;\n      esac\n      ;;\n    *)\n      eval \"$prev=\\$arg\"\n      ;;\n    esac\n\n    prev=\n    prevopt=\n    continue\n  fi\n\n  # Have we seen a non-optional argument yet?\n  case $arg in\n  --help)\n    show_help=yes\n    ;;\n\n  --version)\n    $echo \"$PROGRAM (GNU $PACKAGE) $VERSION$TIMESTAMP\"\n    $echo\n    $echo \"Copyright (C) 2005  Free Software Foundation, Inc.\"\n    $echo \"This is free software; see the source for copying conditions.  There is NO\"\n    $echo \"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n    exit $?\n    ;;\n\n  --config)\n    ${SED} -e '1,/^# ### BEGIN LIBTOOL CONFIG/d' -e '/^# ### END LIBTOOL CONFIG/,$d' $progpath\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      ${SED} -n -e \"/^# ### BEGIN LIBTOOL TAG CONFIG: $tagname$/,/^# ### END LIBTOOL TAG CONFIG: $tagname$/p\" < \"$progpath\"\n    done\n    exit $?\n    ;;\n\n  --debug)\n    $echo \"$progname: enabling shell trace mode\"\n    set -x\n    preserve_args=\"$preserve_args $arg\"\n    ;;\n\n  --dry-run | -n)\n    run=:\n    ;;\n\n  --features)\n    $echo \"host: $host\"\n    if test \"$build_libtool_libs\" = yes; then\n      $echo \"enable shared libraries\"\n    else\n      $echo \"disable shared libraries\"\n    fi\n    if test \"$build_old_libs\" = yes; then\n      $echo \"enable static libraries\"\n    else\n      $echo \"disable static libraries\"\n    fi\n    exit $?\n    ;;\n\n  --finish) mode=\"finish\" ;;\n\n  --mode) prevopt=\"--mode\" prev=mode ;;\n  --mode=*) mode=\"$optarg\" ;;\n\n  --preserve-dup-deps) duplicate_deps=\"yes\" ;;\n\n  --quiet | --silent)\n    show=:\n    preserve_args=\"$preserve_args $arg\"\n    ;;\n\n  --tag)\n    prevopt=\"--tag\"\n    prev=tag\n    preserve_args=\"$preserve_args --tag\"\n    ;;\n  --tag=*)\n    set tag \"$optarg\" ${1+\"$@\"}\n    shift\n    prev=tag\n    preserve_args=\"$preserve_args --tag\"\n    ;;\n\n  -dlopen)\n    prevopt=\"-dlopen\"\n    prev=execute_dlfiles\n    ;;\n\n  -*)\n    $echo \"$modename: unrecognized option \\`$arg'\" 1>&2\n    $echo \"$help\" 1>&2\n    exit $EXIT_FAILURE\n    ;;\n\n  *)\n    nonopt=\"$arg\"\n    break\n    ;;\n  esac\ndone\n\nif test -n \"$prevopt\"; then\n  $echo \"$modename: option \\`$prevopt' requires an argument\" 1>&2\n  $echo \"$help\" 1>&2\n  exit $EXIT_FAILURE\nfi\n\ncase $disable_libs in\nno) \n  ;;\nshared)\n  build_libtool_libs=no\n  build_old_libs=yes\n  ;;\nstatic)\n  build_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n  ;;\nesac\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\nif test -z \"$show_help\"; then\n\n  # Infer the operation mode.\n  if test -z \"$mode\"; then\n    $echo \"*** Warning: inferring the mode of operation is deprecated.\" 1>&2\n    $echo \"*** Future versions of Libtool will require --mode=MODE be specified.\" 1>&2\n    case $nonopt in\n    *cc | cc* | *++ | gcc* | *-gcc* | g++* | xlc*)\n      mode=link\n      for arg\n      do\n\tcase $arg in\n\t-c)\n\t   mode=compile\n\t   break\n\t   ;;\n\tesac\n      done\n      ;;\n    *db | *dbx | *strace | *truss)\n      mode=execute\n      ;;\n    *install*|cp|mv)\n      mode=install\n      ;;\n    *rm)\n      mode=uninstall\n      ;;\n    *)\n      # If we have no mode, but dlfiles were specified, then do execute mode.\n      test -n \"$execute_dlfiles\" && mode=execute\n\n      # Just use the default operation mode.\n      if test -z \"$mode\"; then\n\tif test -n \"$nonopt\"; then\n\t  $echo \"$modename: warning: cannot infer operation mode from \\`$nonopt'\" 1>&2\n\telse\n\t  $echo \"$modename: warning: cannot infer operation mode without MODE-ARGS\" 1>&2\n\tfi\n      fi\n      ;;\n    esac\n  fi\n\n  # Only execute mode is allowed to have -dlopen flags.\n  if test -n \"$execute_dlfiles\" && test \"$mode\" != execute; then\n    $echo \"$modename: unrecognized option \\`-dlopen'\" 1>&2\n    $echo \"$help\" 1>&2\n    exit $EXIT_FAILURE\n  fi\n\n  # Change the help message to a mode-specific one.\n  generic_help=\"$help\"\n  help=\"Try \\`$modename --help --mode=$mode' for more information.\"\n\n  # These modes are in order of execution frequency so that they run quickly.\n  case $mode in\n  # libtool compile mode\n  compile)\n    modename=\"$modename: compile\"\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=\"$nonopt\"  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=\"$arg\"\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=\"$arg\"\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  if test -n \"$libobj\" ; then\n\t    $echo \"$modename: you cannot specify \\`-o' more than once\" 1>&2\n\t    exit $EXIT_FAILURE\n\t  fi\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-static | -prefer-pic | -prefer-non-pic)\n\t  later=\"$later $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  args=`$echo \"X$arg\" | $Xsed -e \"s/^-Wc,//\"`\n\t  lastarg=\n\t  save_ifs=\"$IFS\"; IFS=','\n \t  for arg in $args; do\n\t    IFS=\"$save_ifs\"\n\n\t    # Double-quote args containing other shell metacharacters.\n\t    # Many Bourne shells cannot handle close brackets correctly\n\t    # in scan sets, so we specify it separately.\n\t    case $arg in\n\t      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t      arg=\"\\\"$arg\\\"\"\n\t      ;;\n\t    esac\n\t    lastarg=\"$lastarg $arg\"\n\t  done\n\t  IFS=\"$save_ifs\"\n\t  lastarg=`$echo \"X$lastarg\" | $Xsed -e \"s/^ //\"`\n\n\t  # Add the arguments to base_compile.\n\t  base_compile=\"$base_compile $lastarg\"\n\t  continue\n\t  ;;\n\n\t* )\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=\"$srcfile\"\n\t  srcfile=\"$arg\"\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      lastarg=`$echo \"X$lastarg\" | $Xsed -e \"$sed_quote_subst\"`\n\n      case $lastarg in\n      # Double-quote args containing other shell metacharacters.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, and some SunOS ksh mistreat backslash-escaping\n      # in scan sets (worked around with variable expansion),\n      # and furthermore cannot handle '|' '&' '(' ')' in scan sets \n      # at all, so we specify them separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\tlastarg=\"\\\"$lastarg\\\"\"\n\t;;\n      esac\n\n      base_compile=\"$base_compile $lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      $echo \"$modename: you must specify an argument for -Xcompile\"\n      exit $EXIT_FAILURE\n      ;;\n    target)\n      $echo \"$modename: you must specify a target with \\`-o'\" 1>&2\n      exit $EXIT_FAILURE\n      ;;\n    *)\n      # Get the name of the library object.\n      [ -z \"$libobj\" ] && libobj=`$echo \"X$srcfile\" | $Xsed -e 's%^.*/%%'`\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    xform='[cCFSifmso]'\n    case $libobj in\n    *.ada) xform=ada ;;\n    *.adb) xform=adb ;;\n    *.ads) xform=ads ;;\n    *.asm) xform=asm ;;\n    *.c++) xform=c++ ;;\n    *.cc) xform=cc ;;\n    *.ii) xform=ii ;;\n    *.class) xform=class ;;\n    *.cpp) xform=cpp ;;\n    *.cxx) xform=cxx ;;\n    *.f90) xform=f90 ;;\n    *.for) xform=for ;;\n    *.java) xform=java ;;\n    esac\n\n    libobj=`$echo \"X$libobj\" | $Xsed -e \"s/\\.$xform$/.lo/\"`\n\n    case $libobj in\n    *.lo) obj=`$echo \"X$libobj\" | $Xsed -e \"$lo2o\"` ;;\n    *)\n      $echo \"$modename: cannot determine name of library object from \\`$libobj'\" 1>&2\n      exit $EXIT_FAILURE\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -static)\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    qlibobj=`$echo \"X$libobj\" | $Xsed -e \"$sed_quote_subst\"`\n    case $qlibobj in\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\tqlibobj=\"\\\"$qlibobj\\\"\" ;;\n    esac\n    test \"X$libobj\" != \"X$qlibobj\" \\\n\t&& $echo \"X$libobj\" | grep '[]~#^*{};<>?\"'\"'\"' \t&()|`$[]' \\\n\t&& $echo \"$modename: libobj name \\`$libobj' may not contain shell special characters.\"\n    objname=`$echo \"X$obj\" | $Xsed -e 's%^.*/%%'`\n    xdir=`$echo \"X$obj\" | $Xsed -e 's%/[^/]*$%%'`\n    if test \"X$xdir\" = \"X$obj\"; then\n      xdir=\n    else\n      xdir=$xdir/\n    fi\n    lobj=${xdir}$objdir/$objname\n\n    if test -z \"$base_compile\"; then\n      $echo \"$modename: you must specify a compilation command\" 1>&2\n      $echo \"$help\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n\n    # Delete any leftover library objects.\n    if test \"$build_old_libs\" = yes; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    $run $rm $removelist\n    trap \"$run $rm $removelist; exit $EXIT_FAILURE\" 1 2 15\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2*)\n      pic_mode=default\n      ;;\n    esac\n    if test \"$pic_mode\" = no && test \"$deplibs_check_method\" != pass_all; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test \"$compiler_c_o\" = no; then\n      output_obj=`$echo \"X$srcfile\" | $Xsed -e 's%^.*/%%' -e 's%\\.[^.]*$%%'`.${objext}\n      lockfile=\"$output_obj.lock\"\n      removelist=\"$removelist $output_obj $lockfile\"\n      trap \"$run $rm $removelist; exit $EXIT_FAILURE\" 1 2 15\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test \"$need_locks\" = yes; then\n      until $run ln \"$srcfile\" \"$lockfile\" 2>/dev/null; do\n\t$show \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test \"$need_locks\" = warn; then\n      if test -f \"$lockfile\"; then\n\t$echo \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$run $rm $removelist\n\texit $EXIT_FAILURE\n      fi\n      $echo \"$srcfile\" > \"$lockfile\"\n    fi\n\n    if test -n \"$fix_srcfile_path\"; then\n      eval srcfile=\\\"$fix_srcfile_path\\\"\n    fi\n    qsrcfile=`$echo \"X$srcfile\" | $Xsed -e \"$sed_quote_subst\"`\n    case $qsrcfile in\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n      qsrcfile=\"\\\"$qsrcfile\\\"\" ;;\n    esac\n\n    $run $rm \"$libobj\" \"${libobj}T\"\n\n    # Create a libtool object file (analogous to a \".la\" file),\n    # but don't create it if we're doing a dry run.\n    test -z \"$run\" && cat > ${libobj}T <<EOF\n# $libobj - a libtool object file\n# Generated by $PROGRAM - GNU $PACKAGE $VERSION$TIMESTAMP\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\nEOF\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test \"$build_libtool_libs\" = yes; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test \"$pic_mode\" != no; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      if test ! -d \"${xdir}$objdir\"; then\n\t$show \"$mkdir ${xdir}$objdir\"\n\t$run $mkdir ${xdir}$objdir\n\texit_status=$?\n\tif test \"$exit_status\" -ne 0 && test ! -d \"${xdir}$objdir\"; then\n\t  exit $exit_status\n\tfi\n      fi\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tcommand=\"$command -o $lobj\"\n      fi\n\n      $run $rm \"$lobj\" \"$output_obj\"\n\n      $show \"$command\"\n      if $run eval \"$command\"; then :\n      else\n\ttest -n \"$output_obj\" && $run $rm $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$echo \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$run $rm $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\t$show \"$mv $output_obj $lobj\"\n\tif $run $mv $output_obj $lobj; then :\n\telse\n\t  error=$?\n\t  $run $rm $removelist\n\t  exit $error\n\tfi\n      fi\n\n      # Append the name of the PIC object to the libtool object file.\n      test -z \"$run\" && cat >> ${libobj}T <<EOF\npic_object='$objdir/$objname'\n\nEOF\n\n      # Allow error messages only from the first compilation.\n      if test \"$suppress_opt\" = yes; then\n        suppress_output=' >/dev/null 2>&1'\n      fi\n    else\n      # No PIC object so indicate it doesn't exist in the libtool\n      # object file.\n      test -z \"$run\" && cat >> ${libobj}T <<EOF\npic_object=none\n\nEOF\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test \"$build_old_libs\" = yes; then\n      if test \"$pic_mode\" != yes; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test \"$compiler_c_o\" = yes; then\n\tcommand=\"$command -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      command=\"$command$suppress_output\"\n      $run $rm \"$obj\" \"$output_obj\"\n      $show \"$command\"\n      if $run eval \"$command\"; then :\n      else\n\t$run $rm $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$echo \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$run $rm $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\t$show \"$mv $output_obj $obj\"\n\tif $run $mv $output_obj $obj; then :\n\telse\n\t  error=$?\n\t  $run $rm $removelist\n\t  exit $error\n\tfi\n      fi\n\n      # Append the name of the non-PIC object the libtool object file.\n      # Only append if the libtool object file exists.\n      test -z \"$run\" && cat >> ${libobj}T <<EOF\n# Name of the non-PIC object.\nnon_pic_object='$objname'\n\nEOF\n    else\n      # Append the name of the non-PIC object the libtool object file.\n      # Only append if the libtool object file exists.\n      test -z \"$run\" && cat >> ${libobj}T <<EOF\n# Name of the non-PIC object.\nnon_pic_object=none\n\nEOF\n    fi\n\n    $run $mv \"${libobj}T\" \"${libobj}\"\n\n    # Unlock the critical section if it was locked\n    if test \"$need_locks\" != no; then\n      $run $rm \"$lockfile\"\n    fi\n\n    exit $EXIT_SUCCESS\n    ;;\n\n  # libtool link mode\n  link | relink)\n    modename=\"$modename: link\"\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # which system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll which has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=\"$nonopt\"\n    base_compile=\"$nonopt $@\"\n    compile_command=\"$nonopt\"\n    finalize_command=\"$nonopt\"\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n\n    avoid_version=no\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    non_pic_objects=\n    notinst_path= # paths that contain not-installed libtool libraries\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=no\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -all-static | -static)\n\tif test \"X$arg\" = \"X-all-static\"; then\n\t  if test \"$build_libtool_libs\" = yes && test -z \"$link_static_flag\"; then\n\t    $echo \"$modename: warning: complete static linking is impossible in this configuration\" 1>&2\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\telse\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\tfi\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=\"$1\"\n      shift\n      case $arg in\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\tqarg=\\\"`$echo \"X$arg\" | $Xsed -e \"$sed_quote_subst\"`\\\" ### testsuite: skip nested quoting test\n\t;;\n      *) qarg=$arg ;;\n      esac\n      libtool_args=\"$libtool_args $qarg\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  compile_command=\"$compile_command @OUTPUT@\"\n\t  finalize_command=\"$finalize_command @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tdlfiles|dlprefiles)\n\t  if test \"$preload\" = no; then\n\t    # Add the symbol object into the linking commands.\n\t    compile_command=\"$compile_command @SYMFILE@\"\n\t    finalize_command=\"$finalize_command @SYMFILE@\"\n\t    preload=yes\n\t  fi\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test \"$dlself\" = no; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test \"$prev\" = dlprefiles; then\n\t      dlself=yes\n\t    elif test \"$prev\" = dlfiles && test \"$dlopen_self\" != yes; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test \"$prev\" = dlfiles; then\n\t      dlfiles=\"$dlfiles $arg\"\n\t    else\n\t      dlprefiles=\"$dlprefiles $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=\"$arg\"\n\t  if test ! -f \"$arg\"; then\n\t    $echo \"$modename: symbol file \\`$arg' does not exist\"\n\t    exit $EXIT_FAILURE\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=\"-$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat $save_arg`\n\t    do\n#\t      moreargs=\"$moreargs $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if (${SED} -e '2q' $arg | grep \"^# Generated by .*$PACKAGE\") >/dev/null 2>&1; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\t# If there is no directory component, then add one.\n\t\tcase $arg in\n\t\t*/* | *\\\\*) . $arg ;;\n\t\t*) . ./$arg ;;\n\t\tesac\n\n\t\tif test -z \"$pic_object\" || \\\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test \"$pic_object\" = none && \\\n\t\t   test \"$non_pic_object\" = none; then\n\t\t  $echo \"$modename: cannot find name of object for \\`$arg'\" 1>&2\n\t\t  exit $EXIT_FAILURE\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\txdir=`$echo \"X$arg\" | $Xsed -e 's%/[^/]*$%%'`\n\t\tif test \"X$xdir\" = \"X$arg\"; then\n\t\t  xdir=\n\t\telse\n\t\t  xdir=\"$xdir/\"\n\t\tfi\n\n\t\tif test \"$pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=\"$xdir$pic_object\"\n\n\t\t  if test \"$prev\" = dlfiles; then\n\t\t    if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\t      dlfiles=\"$dlfiles $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test \"$prev\" = dlprefiles; then\n\t\t    # Preload the old-style object.\n\t\t    dlprefiles=\"$dlprefiles $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  libobjs=\"$libobjs $pic_object\"\n\t\t  arg=\"$pic_object\"\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test \"$non_pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=\"$xdir$non_pic_object\"\n\n\t\t  # A standard non-PIC object\n\t\t  non_pic_objects=\"$non_pic_objects $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t\t    arg=\"$non_pic_object\"\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=\"$pic_object\"\n\t\t  non_pic_objects=\"$non_pic_objects $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif test -z \"$run\"; then\n\t\t  $echo \"$modename: \\`$arg' is not a valid libtool object\" 1>&2\n\t\t  exit $EXIT_FAILURE\n\t\telse\n\t\t  # Dry-run case.\n\n\t\t  # Extract subdirectory from the argument.\n\t\t  xdir=`$echo \"X$arg\" | $Xsed -e 's%/[^/]*$%%'`\n\t\t  if test \"X$xdir\" = \"X$arg\"; then\n\t\t    xdir=\n\t\t  else\n\t\t    xdir=\"$xdir/\"\n\t\t  fi\n\n\t\t  pic_object=`$echo \"X${xdir}${objdir}/${arg}\" | $Xsed -e \"$lo2o\"`\n\t\t  non_pic_object=`$echo \"X${xdir}${arg}\" | $Xsed -e \"$lo2o\"`\n\t\t  libobjs=\"$libobjs $pic_object\"\n\t\t  non_pic_objects=\"$non_pic_objects $non_pic_object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    $echo \"$modename: link input file \\`$save_arg' does not exist\"\n\t    exit $EXIT_FAILURE\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    $echo \"$modename: only absolute run-paths are allowed\" 1>&2\n\t    exit $EXIT_FAILURE\n\t    ;;\n\t  esac\n\t  if test \"$prev\" = rpath; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) rpath=\"$rpath $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) xrpath=\"$xrpath $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\txcompiler)\n\t  compiler_flags=\"$compiler_flags $qarg\"\n\t  prev=\n\t  compile_command=\"$compile_command $qarg\"\n\t  finalize_command=\"$finalize_command $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  linker_flags=\"$linker_flags $qarg\"\n\t  compiler_flags=\"$compiler_flags $wl$qarg\"\n\t  prev=\n\t  compile_command=\"$compile_command $wl$qarg\"\n\t  finalize_command=\"$finalize_command $wl$qarg\"\n\t  continue\n\t  ;;\n\txcclinker)\n\t  linker_flags=\"$linker_flags $qarg\"\n\t  compiler_flags=\"$compiler_flags $qarg\"\n\t  prev=\n\t  compile_command=\"$compile_command $qarg\"\n\t  finalize_command=\"$finalize_command $qarg\"\n\t  continue\n\t  ;;\n\tshrext)\n  \t  shrext_cmds=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tdarwin_framework|darwin_framework_skip)\n\t  test \"$prev\" = \"darwin_framework\" && compiler_flags=\"$compiler_flags $arg\"\n\t  compile_command=\"$compile_command $arg\"\n\t  finalize_command=\"$finalize_command $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=\"$arg\"\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  compile_command=\"$compile_command $link_static_flag\"\n\t  finalize_command=\"$finalize_command $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\t$echo \"$modename: \\`-allow-undefined' is deprecated because it is the default\" 1>&2\n\tcontinue\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  $echo \"$modename: more than one -exported-symbols argument is not allowed\"\n\t  exit $EXIT_FAILURE\n\tfi\n\tif test \"X$arg\" = \"X-export-symbols\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework|-arch|-isysroot)\n\tcase \" $CC \" in\n\t  *\" ${arg} ${1} \"* | *\" ${arg}\t${1} \"*) \n\t\tprev=darwin_framework_skip ;;\n\t  *) compiler_flags=\"$compiler_flags $arg\"\n\t     prev=darwin_framework ;;\n\tesac\n\tcompile_command=\"$compile_command $arg\"\n\tfinalize_command=\"$finalize_command $arg\"\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  compile_command=\"$compile_command $arg\"\n\t  finalize_command=\"$finalize_command $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tdir=`$echo \"X$arg\" | $Xsed -e 's/^-L//'`\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  if test -z \"$absdir\"; then\n\t    $echo \"$modename: cannot determine absolute directory name of \\`$dir'\" 1>&2\n\t    absdir=\"$dir\"\n\t    notinst_path=\"$notinst_path $dir\"\n\t  fi\n\t  dir=\"$absdir\"\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"*) ;;\n\t*)\n\t  deplibs=\"$deplibs -L$dir\"\n\t  lib_search_path=\"$lib_search_path $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2*)\n\t  testbindir=`$echo \"X$dir\" | $Xsed -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  *) dllsearchpath=\"$dllsearchpath:$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  *) dllsearchpath=\"$dllsearchpath:$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test \"X$arg\" = \"X-lc\" || test \"X$arg\" = \"X-lm\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    deplibs=\"$deplibs -framework System\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  esac\n\telif test \"X$arg\" = \"X-lc_r\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tdeplibs=\"$deplibs $arg\"\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      -model)\n\tcompile_command=\"$compile_command $arg\"\n\tcompiler_flags=\"$compiler_flags $arg\"\n\tfinalize_command=\"$finalize_command $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n     -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe)\n\tcompiler_flags=\"$compiler_flags $arg\"\n\tcompile_command=\"$compile_command $arg\"\n\tfinalize_command=\"$finalize_command $arg\"\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # -64, -mips[0-9] enable 64-bit mode on the SGI compiler\n      # -r[0-9][0-9]* specifies the processor on the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode on the Sun compiler\n      # +DA*, +DD* enable 64-bit mode on the HP compiler\n      # -q* pass through compiler args for the IBM compiler\n      # -m* pass through architecture-specific compiler args for GCC\n      # -m*, -t[45]*, -txscale* pass through architecture-specific\n      # compiler args for GCC\n      # -pg pass through profiling flag for GCC\n      # @file GCC response files\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*|-pg| \\\n      -t[45]*|-txscale*|@*)\n\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\targ=`$echo \"X$arg\" | $Xsed -e \"$sed_quote_subst\"`\n\tcase $arg in\n\t*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t  arg=\"\\\"$arg\\\"\"\n\t  ;;\n\tesac\n        compile_command=\"$compile_command $arg\"\n        finalize_command=\"$finalize_command $arg\"\n        compiler_flags=\"$compiler_flags $arg\"\n        continue\n        ;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # in order for the loader to find any dlls it needs.\n\t  $echo \"$modename: warning: \\`-no-install' is ignored for $host\" 1>&2\n\t  $echo \"$modename: warning: assuming \\`-no-fast-install' instead\" 1>&2\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tdir=`$echo \"X$arg\" | $Xsed -e 's/^-R//'`\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  $echo \"$modename: only absolute run-paths are allowed\" 1>&2\n\t  exit $EXIT_FAILURE\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) xrpath=\"$xrpath $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -static)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -Wc,*)\n\targs=`$echo \"X$arg\" | $Xsed -e \"$sed_quote_subst\" -e 's/^-Wc,//'`\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n\t  case $flag in\n\t    *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t    flag=\"\\\"$flag\\\"\"\n\t    ;;\n\t  esac\n\t  arg=\"$arg $wl$flag\"\n\t  compiler_flags=\"$compiler_flags $flag\"\n\tdone\n\tIFS=\"$save_ifs\"\n\targ=`$echo \"X$arg\" | $Xsed -e \"s/^ //\"`\n\t;;\n\n      -Wl,*)\n\targs=`$echo \"X$arg\" | $Xsed -e \"$sed_quote_subst\" -e 's/^-Wl,//'`\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n\t  case $flag in\n\t    *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t    flag=\"\\\"$flag\\\"\"\n\t    ;;\n\t  esac\n\t  arg=\"$arg $wl$flag\"\n\t  compiler_flags=\"$compiler_flags $wl$flag\"\n\t  linker_flags=\"$linker_flags $flag\"\n\tdone\n\tIFS=\"$save_ifs\"\n\targ=`$echo \"X$arg\" | $Xsed -e \"s/^ //\"`\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\targ=`$echo \"X$arg\" | $Xsed -e \"$sed_quote_subst\"`\n\tcase $arg in\n\t*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t  arg=\"\\\"$arg\\\"\"\n\t  ;;\n\tesac\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tobjs=\"$objs $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif (${SED} -e '2q' $arg | grep \"^# Generated by .*$PACKAGE\") >/dev/null 2>&1; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  # If there is no directory component, then add one.\n\t  case $arg in\n\t  */* | *\\\\*) . $arg ;;\n\t  *) . ./$arg ;;\n\t  esac\n\n\t  if test -z \"$pic_object\" || \\\n\t     test -z \"$non_pic_object\" ||\n\t     test \"$pic_object\" = none && \\\n\t     test \"$non_pic_object\" = none; then\n\t    $echo \"$modename: cannot find name of object for \\`$arg'\" 1>&2\n\t    exit $EXIT_FAILURE\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  xdir=`$echo \"X$arg\" | $Xsed -e 's%/[^/]*$%%'`\n\t  if test \"X$xdir\" = \"X$arg\"; then\n\t    xdir=\n \t  else\n\t    xdir=\"$xdir/\"\n\t  fi\n\n\t  if test \"$pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=\"$xdir$pic_object\"\n\n\t    if test \"$prev\" = dlfiles; then\n\t      if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\tdlfiles=\"$dlfiles $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test \"$prev\" = dlprefiles; then\n\t      # Preload the old-style object.\n\t      dlprefiles=\"$dlprefiles $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    libobjs=\"$libobjs $pic_object\"\n\t    arg=\"$pic_object\"\n\t  fi\n\n\t  # Non-PIC object.\n\t  if test \"$non_pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=\"$xdir$non_pic_object\"\n\n\t    # A standard non-PIC object\n\t    non_pic_objects=\"$non_pic_objects $non_pic_object\"\n\t    if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t      arg=\"$non_pic_object\"\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=\"$pic_object\"\n\t    non_pic_objects=\"$non_pic_objects $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if test -z \"$run\"; then\n\t    $echo \"$modename: \\`$arg' is not a valid libtool object\" 1>&2\n\t    exit $EXIT_FAILURE\n\t  else\n\t    # Dry-run case.\n\n\t    # Extract subdirectory from the argument.\n\t    xdir=`$echo \"X$arg\" | $Xsed -e 's%/[^/]*$%%'`\n\t    if test \"X$xdir\" = \"X$arg\"; then\n\t      xdir=\n\t    else\n\t      xdir=\"$xdir/\"\n\t    fi\n\n\t    pic_object=`$echo \"X${xdir}${objdir}/${arg}\" | $Xsed -e \"$lo2o\"`\n\t    non_pic_object=`$echo \"X${xdir}${arg}\" | $Xsed -e \"$lo2o\"`\n\t    libobjs=\"$libobjs $pic_object\"\n\t    non_pic_objects=\"$non_pic_objects $non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tdeplibs=\"$deplibs $arg\"\n\told_deplibs=\"$old_deplibs $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tif test \"$prev\" = dlfiles; then\n\t  # This library was specified with -dlopen.\n\t  dlfiles=\"$dlfiles $arg\"\n\t  prev=\n\telif test \"$prev\" = dlprefiles; then\n\t  # The library was specified with -dlpreopen.\n\t  dlprefiles=\"$dlprefiles $arg\"\n\t  prev=\n\telse\n\t  deplibs=\"$deplibs $arg\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\targ=`$echo \"X$arg\" | $Xsed -e \"$sed_quote_subst\"`\n\tcase $arg in\n\t*[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n\t  arg=\"\\\"$arg\\\"\"\n\t  ;;\n\tesac\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tcompile_command=\"$compile_command $arg\"\n\tfinalize_command=\"$finalize_command $arg\"\n      fi\n    done # argument parsing loop\n\n    if test -n \"$prev\"; then\n      $echo \"$modename: the \\`$prevarg' option requires an argument\" 1>&2\n      $echo \"$help\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n\n    if test \"$export_dynamic\" = yes && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      compile_command=\"$compile_command $arg\"\n      finalize_command=\"$finalize_command $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    outputname=`$echo \"X$output\" | $Xsed -e 's%^.*/%%'`\n    libobjs_save=\"$libobjs\"\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$echo \\\"X\\${$shlibpath_var}\\\" \\| \\$Xsed -e \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    output_objdir=`$echo \"X$output\" | $Xsed -e 's%/[^/]*$%%'`\n    if test \"X$output_objdir\" = \"X$output\"; then\n      output_objdir=\"$objdir\"\n    else\n      output_objdir=\"$output_objdir/$objdir\"\n    fi\n    # Create the object directory.\n    if test ! -d \"$output_objdir\"; then\n      $show \"$mkdir $output_objdir\"\n      $run $mkdir $output_objdir\n      exit_status=$?\n      if test \"$exit_status\" -ne 0 && test ! -d \"$output_objdir\"; then\n\texit $exit_status\n      fi\n    fi\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      $echo \"$modename: you must specify an output file\" 1>&2\n      $echo \"$help\" 1>&2\n      exit $EXIT_FAILURE\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    case $host in\n    *cygwin* | *mingw* | *pw32*)\n      # don't eliminate duplications in $postdeps and $predeps\n      duplicate_compiler_generated_deps=yes\n      ;;\n    *)\n      duplicate_compiler_generated_deps=$duplicate_deps\n      ;;\n    esac\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if test \"X$duplicate_deps\" = \"Xyes\" ; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\tesac\n      fi\n      libs=\"$libs $deplib\"\n    done\n\n    if test \"$linkmode\" = lib; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if test \"X$duplicate_compiler_generated_deps\" = \"Xyes\" ; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) specialdeplibs=\"$specialdeplibs $pre_post_deps\" ;;\n\t  esac\n\t  pre_post_deps=\"$pre_post_deps $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    case $linkmode in\n    lib)\n\tpasses=\"conv link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    $echo \"$modename: libraries can \\`-dlopen' only libtool libraries: $file\" 1>&2\n\t    exit $EXIT_FAILURE\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=no\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n    for pass in $passes; do\n      if test \"$linkmode,$pass\" = \"lib,link\" ||\n\t test \"$linkmode,$pass\" = \"prog,scan\"; then\n\tlibs=\"$deplibs\"\n\tdeplibs=\n      fi\n      if test \"$linkmode\" = prog; then\n\tcase $pass in\n\tdlopen) libs=\"$dlfiles\" ;;\n\tdlpreopen) libs=\"$dlprefiles\" ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test \"$pass\" = dlopen; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=\"$deplibs\"\n\tdeplibs=\n      fi\n      for deplib in $libs; do\n\tlib=\n\tfound=no\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    compiler_flags=\"$compiler_flags $deplib\"\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test \"$linkmode\" != lib && test \"$linkmode\" != prog; then\n\t    $echo \"$modename: warning: \\`-l' is ignored for archives/objects\" 1>&2\n\t    continue\n\t  fi\n\t  name=`$echo \"X$deplib\" | $Xsed -e 's/^-l//'`\n\t  for searchdir in $newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=\"$searchdir/lib${name}${search_ext}\"\n\t      if test -f \"$lib\"; then\n\t\tif test \"$search_ext\" = \".la\"; then\n\t\t  found=yes\n\t\telse\n\t\t  found=no\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if test \"$found\" != yes; then\n\t    # deplib doesn't seem to be a libtool library\n\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  else # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif (${SED} -e '2q' $lib |\n                    grep \"^# Generated by .*$PACKAGE\") >/dev/null 2>&1; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  case $lib in\n\t\t  */* | *\\\\*) . $lib ;;\n\t\t  *) . ./$lib ;;\n\t\t  esac\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=\"$l\"\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\" ; then # only static version available\n\t\t    found=no\n\t\t    ladir=`$echo \"X$lib\" | $Xsed -e 's%/[^/]*$%%'`\n\t\t    test \"X$ladir\" = \"X$lib\" && ladir=\".\"\n\t\t    lib=$ladir/$old_library\n\t\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t        ;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  fi\n\t  ;; # -l\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test \"$pass\" = conv && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    newlib_search_path=\"$newlib_search_path \"`$echo \"X$deplib\" | $Xsed -e 's/^-L//'`\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" = conv; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test \"$pass\" = scan; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    newlib_search_path=\"$newlib_search_path \"`$echo \"X$deplib\" | $Xsed -e 's/^-L//'`\n\t    ;;\n\t  *)\n\t    $echo \"$modename: warning: \\`-L' is ignored for archives/objects\" 1>&2\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test \"$pass\" = link; then\n\t    dir=`$echo \"X$deplib\" | $Xsed -e 's/^-R//'`\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) xrpath=\"$xrpath $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la) lib=\"$deplib\" ;;\n\t*.$libext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    valid_a_lib=no\n\t    case $deplibs_check_method in\n\t      match_pattern*)\n\t\tset dummy $deplibs_check_method\n\t        match_pattern_regex=`expr \"$deplibs_check_method\" : \"$2 \\(.*\\)\"`\n\t\tif eval $echo \\\"$deplib\\\" 2>/dev/null \\\n\t\t    | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t  valid_a_lib=yes\n\t\tfi\n\t\t;;\n\t      pass_all)\n\t\tvalid_a_lib=yes\n\t\t;;\n            esac\n\t    if test \"$valid_a_lib\" != yes; then\n\t      $echo\n\t      $echo \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t      $echo \"*** I have the capability to make that library automatically link in when\"\n\t      $echo \"*** you link to this library.  But I can only do this if you have a\"\n\t      $echo \"*** shared version of the library, which you do not appear to have\"\n\t      $echo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t      $echo \"*** that it is just a static archive that I should not used here.\"\n\t    else\n\t      $echo\n\t      $echo \"*** Warning: Linking the shared library $output against the\"\n\t      $echo \"*** static library $deplib is not portable!\"\n\t      deplibs=\"$deplib $deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" != link; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test \"$linkmode\" = prog; then\n\t    if test \"$pass\" = dlpreopen || test \"$dlopen_support\" != yes || test \"$build_libtool_libs\" = no; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      newdlprefiles=\"$newdlprefiles $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      newdlfiles=\"$newdlfiles $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=yes\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\tif test \"$found\" = yes || test -f \"$lib\"; then :\n\telse\n\t  $echo \"$modename: cannot find the library \\`$lib' or unhandled argument \\`$deplib'\" 1>&2\n\t  exit $EXIT_FAILURE\n\tfi\n\n\t# Check to see that this really is a libtool archive.\n\tif (${SED} -e '2q' $lib | grep \"^# Generated by .*$PACKAGE\") >/dev/null 2>&1; then :\n\telse\n\t  $echo \"$modename: \\`$lib' is not a valid libtool archive\" 1>&2\n\t  exit $EXIT_FAILURE\n\tfi\n\n\tladir=`$echo \"X$lib\" | $Xsed -e 's%/[^/]*$%%'`\n\ttest \"X$ladir\" = \"X$lib\" && ladir=\".\"\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tcase $lib in\n\t*/* | *\\\\*) . $lib ;;\n\t*) . ./$lib ;;\n\tesac\n\n\tif test \"$linkmode,$pass\" = \"lib,link\" ||\n\t   test \"$linkmode,$pass\" = \"prog,scan\" ||\n\t   { test \"$linkmode\" != prog && test \"$linkmode\" != lib; }; then\n\t  test -n \"$dlopen\" && dlfiles=\"$dlfiles $dlopen\"\n\t  test -n \"$dlpreopen\" && dlprefiles=\"$dlprefiles $dlpreopen\"\n\tfi\n\n\tif test \"$pass\" = conv; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      $echo \"$modename: cannot find name of link library for \\`$lib'\" 1>&2\n\t      exit $EXIT_FAILURE\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    convenience=\"$convenience $ladir/$objdir/$old_library\"\n\t    old_convenience=\"$old_convenience $ladir/$objdir/$old_library\"\n\t    tmp_libs=\n\t    for deplib in $dependency_libs; do\n\t      deplibs=\"$deplib $deplibs\"\n              if test \"X$duplicate_deps\" = \"Xyes\" ; then\n\t        case \"$tmp_libs \" in\n\t        *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t        esac\n              fi\n\t      tmp_libs=\"$tmp_libs $deplib\"\n\t    done\n\t  elif test \"$linkmode\" != prog && test \"$linkmode\" != lib; then\n\t    $echo \"$modename: \\`$lib' is not a convenience library\" 1>&2\n\t    exit $EXIT_FAILURE\n\t  fi\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tfor l in $old_library $library_names; do\n\t  linklib=\"$l\"\n\tdone\n\tif test -z \"$linklib\"; then\n\t  $echo \"$modename: cannot find name of link library for \\`$lib'\" 1>&2\n\t  exit $EXIT_FAILURE\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test \"$pass\" = dlopen; then\n\t  if test -z \"$libdir\"; then\n\t    $echo \"$modename: cannot -dlopen a convenience library: \\`$lib'\" 1>&2\n\t    exit $EXIT_FAILURE\n\t  fi\n\t  if test -z \"$dlname\" ||\n\t     test \"$dlopen_support\" != yes ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    dlprefiles=\"$dlprefiles $lib $dependency_libs\"\n\t  else\n\t    newdlfiles=\"$newdlfiles $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=\"$ladir\" ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    $echo \"$modename: warning: cannot determine absolute directory name of \\`$ladir'\" 1>&2\n\t    $echo \"$modename: passing it literally to the linker, although it might fail\" 1>&2\n\t    abs_ladir=\"$ladir\"\n\t  fi\n\t  ;;\n\tesac\n\tlaname=`$echo \"X$lib\" | $Xsed -e 's%^.*/%%'`\n\n\t# Find the relevant object directory and library name.\n\tif test \"X$installed\" = Xyes; then\n\t  if test ! -f \"$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    $echo \"$modename: warning: library \\`$lib' was moved.\" 1>&2\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    libdir=\"$abs_ladir\"\n\t  else\n\t    dir=\"$libdir\"\n\t    absdir=\"$libdir\"\n\t  fi\n\t  test \"X$hardcode_automatic\" = Xyes && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    # Remove this search path later\n\t    notinst_path=\"$notinst_path $abs_ladir\"\n\t  else\n\t    dir=\"$ladir/$objdir\"\n\t    absdir=\"$abs_ladir/$objdir\"\n\t    # Remove this search path later\n\t    notinst_path=\"$notinst_path $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tname=`$echo \"X$laname\" | $Xsed -e 's/\\.la$//' -e 's/^lib//'`\n\n\t# This library was specified with -dlpreopen.\n\tif test \"$pass\" = dlpreopen; then\n\t  if test -z \"$libdir\"; then\n\t    $echo \"$modename: cannot -dlpreopen a convenience library: \\`$lib'\" 1>&2\n\t    exit $EXIT_FAILURE\n\t  fi\n\t  # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t  # are required to link).\n\t  if test -n \"$old_library\"; then\n\t    newdlprefiles=\"$newdlprefiles $dir/$old_library\"\n\t  # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t  elif test -n \"$dlname\"; then\n\t    newdlprefiles=\"$newdlprefiles $dir/$dlname\"\n\t  else\n\t    newdlprefiles=\"$newdlprefiles $dir/$linklib\"\n\t  fi\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test \"$linkmode\" = lib; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test \"$linkmode\" = prog && test \"$pass\" != link; then\n\t  newlib_search_path=\"$newlib_search_path $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=no\n\t  if test \"$link_all_deplibs\" != no || test -z \"$library_names\" ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    linkalldeplibs=yes\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) newlib_search_path=\"$newlib_search_path \"`$echo \"X$deplib\" | $Xsed -e 's/^-L//'`;; ### testsuite: skip nested quoting test\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if test \"$linkalldeplibs\" = yes; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if test \"X$duplicate_deps\" = \"Xyes\" ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t      esac\n\t    fi\n\t    tmp_libs=\"$tmp_libs $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t  if test -n \"$library_names\" &&\n\t     { test \"$prefer_static_libs\" = no || test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\" ; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case \"$temp_rpath \" in\n\t      *\" $dir \"*) ;;\n\t      *\" $absdir \"*) ;;\n\t      *) temp_rpath=\"$temp_rpath $absdir\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) compile_rpath=\"$compile_rpath $absdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) finalize_rpath=\"$finalize_rpath $libdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if test \"$alldeplibs\" = yes &&\n\t     { test \"$deplibs_check_method\" = pass_all ||\n\t       { test \"$build_libtool_libs\" = yes &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test \"$use_static_libs\" = built && test \"$installed\" = yes ; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test \"$use_static_libs\" = no || test -z \"$old_library\"; }; then\n\t  if test \"$installed\" = no; then\n\t    notinst_deplibs=\"$notinst_deplibs $lib\"\n\t    need_relink=yes\n\t  fi\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on\n\t  # some systems (darwin)\n\t  if test \"$shouldnotlink\" = yes && test \"$pass\" = link ; then\n\t    $echo\n\t    if test \"$linkmode\" = prog; then\n\t      $echo \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $echo \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $echo \"*** $linklib is not portable!\"\n\t  fi\n\t  if test \"$linkmode\" = lib &&\n\t     test \"$hardcode_into_libs\" = yes; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) compile_rpath=\"$compile_rpath $absdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) finalize_rpath=\"$finalize_rpath $libdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    realname=\"$2\"\n\t    shift; shift\n\t    libname=`eval \\\\$echo \\\"$libname_spec\\\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=\"$dlname\"\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw*)\n\t\tmajor=`expr $current - $age`\n\t\tversuffix=\"-$major\"\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=\"$realname\"\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=\"$soname\"\n\t    soname=`$echo $soroot | ${SED} -e 's/^.*\\///'`\n\t    newlib=\"libimp-`$echo $soname | ${SED} 's/^lib//;s/\\.dll$//'`.a\"\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      $show \"extracting exported symbol list from \\`$soname'\"\n\t      save_ifs=\"$IFS\"; IFS='~'\n\t      cmds=$extract_expsyms_cmds\n\t      for cmd in $cmds; do\n\t\tIFS=\"$save_ifs\"\n\t\teval cmd=\\\"$cmd\\\"\n\t\t$show \"$cmd\"\n\t\t$run eval \"$cmd\" || exit $?\n\t      done\n\t      IFS=\"$save_ifs\"\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      $show \"generating import library for \\`$soname'\"\n\t      save_ifs=\"$IFS\"; IFS='~'\n\t      cmds=$old_archive_from_expsyms_cmds\n\t      for cmd in $cmds; do\n\t\tIFS=\"$save_ifs\"\n\t\teval cmd=\\\"$cmd\\\"\n\t\t$show \"$cmd\"\n\t\t$run eval \"$cmd\" || exit $?\n\t      done\n\t      IFS=\"$save_ifs\"\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test \"$linkmode\" = prog || test \"$mode\" != relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test \"$hardcode_direct\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv4*uw2*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a module then we can not link against\n\t\t    # it, someone is ignoring the new warnings I added\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n                      $EGREP \": [^:]* bundle\" >/dev/null ; then\n\t\t      $echo \"** Warning, lib $linklib is a module, not a shared library\"\n\t\t      if test -z \"$old_library\" ; then\n\t\t        $echo\n\t\t        $echo \"** And there doesn't seem to be a static archive available\"\n\t\t        $echo \"** The link will probably fail, sorry\"\n\t\t      else\n\t\t        add=\"$dir/$old_library\"\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test \"$hardcode_minus_L\" = no; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=\"$dir\" ;;\n\t\tesac\n\t\tadd_dir=\"-L$dir\"\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = no; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test \"$hardcode_direct\" = yes; then\n\t\tadd=\"$dir/$linklib\"\n\t      elif test \"$hardcode_minus_L\" = yes; then\n\t\tadd_dir=\"-L$dir\"\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      add_dir=\"$add_dir -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = yes; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test \"$lib_linked\" != yes; then\n\t      $echo \"$modename: configuration error: unsupported hardcode properties\"\n\t      exit $EXIT_FAILURE\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) compile_shlibpath=\"$compile_shlibpath$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test \"$hardcode_direct\" != yes && \\\n\t\t test \"$hardcode_minus_L\" != yes && \\\n\t\t test \"$hardcode_shlibpath_var\" = yes; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) finalize_shlibpath=\"$finalize_shlibpath$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test \"$linkmode\" = prog || test \"$mode\" = relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test \"$hardcode_direct\" = yes; then\n\t      add=\"$libdir/$linklib\"\n\t    elif test \"$hardcode_minus_L\" = yes; then\n\t      add_dir=\"-L$libdir\"\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_shlibpath_var\" = yes; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) finalize_shlibpath=\"$finalize_shlibpath$libdir:\" ;;\n\t      esac\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_automatic\" = yes; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\" ; then\n\t        add=\"$inst_prefix_dir$libdir/$linklib\"\n\t      else\n\t        add=\"$libdir/$linklib\"\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=\"-L$libdir\"\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    add_dir=\"$add_dir -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=\"-l$name\"\n\t    fi\n\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test \"$linkmode\" = prog; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test \"$hardcode_direct\" != unsupported; then\n\t    test -n \"$old_library\" && linklib=\"$old_library\"\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test \"$build_libtool_libs\" = yes; then\n\t  # Not a shared library\n\t  if test \"$deplibs_check_method\" != pass_all; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/tests/.coverage",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/tests/cover/keybd_open.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/tests/cover/keybd_closed.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/tests/examplefiles/example.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/tests/examplefiles/AlternatingGroup.mu",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/tests/examplefiles/example.pas",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/tests/examplefiles/example.xhtml",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/tests/examplefiles/example.xtend",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/doc/_static/logo_only.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/doc/_static/logo_new.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/doc/_static/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/doc/_themes/pygments14/static/listitem.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/doc/_themes/pygments14/static/pocoo.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/doc/_themes/pygments14/static/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/doc/_themes/pygments14/static/bodybg.png",
        "/tmp/vanessa/spack-stage/spack-stage-py-pygments-2.0.2-cebhylmqu45vkd2efk3zih6cyyprnitu/spack-src/doc/_themes/pygments14/static/docbg.png"
    ],
    "total_files": 728
}